--[Stocky HotFix Version]=441
DELETE FROM Versioncontrol WHERE Hotfixid='441'
INSERT INTO VersionControl(HotFixId,VersionNo,FixType,FixedOn,HotFixReleasedOn,VersionReleasedOn,ReplacedOn,ChangesDone) 
VALUES('441','3.1.0.18','D','2019-07-25','2019-07-25','2019-07-25',CONVERT(VARCHAR(11),GETDATE()),'Product Version-Major: Product May 2019')
GO
/*
CRCRSTPAR0052	-->	SUB REPORT FOR SALES RETURN TAX SPLIT UP (Mohana)
CRCRSTPAR0050   --> Database HealthCheck included DB Shrink (Govind),(ILCRSTPAR4793)
CRCRSTPAR0054	--> SalesMan incentive Master download (Govind)
CRCRSTPAR0048	--> Need to have integration of Customer Group field from console to Sehyog (Bharaneedhar)
CRCRSTPAR0049	-->	From SFA we are getting only in PKTS, same like billing 
					screen we need to convert to Box and make bill (Moorthi)
ILCRSTPAR4793	--> Database health checkup process temp table columns mismatched (Lakshman)
ILCRSTPAR4278   -->	Debit note sheet report (Design in Crystal Reports)	(Moorthi)
CRCRSTPAR0058	--> Special Pricing available in product version should be incorporated with PARLE specific changes	(Mohana)
CRCRSTPAR0056	--> STO(Service to Outlet) or Distributor incentive logic to be incorporated and 
					debit note should upload to console
CRCRSTPAR0070   --> Login validation with server date (Moorthi)
CRCRSTPAR0064	--> Include validation procedure  (Mohana)
CRCRSTPAR0066	--> In core stocky duplicate saleman for HHT Device Serial Number validated.(Lakshman)
CRCRSTPAR0069	--> Need to block the edit option in Sehyog and the group, channel and status should be allowed to edit in console end and this will download and update in 
																		Sehyog end. Excel upload facility require in Console (Moorthi)
CRCRSTPAR0071	--> Salesman and Route master access level changes in user login (Moorthi)
CRCRSTPAR0072	--> Retailer class shift logic in Core stocky instead of system date , it should consider JC calendar only
					Negative value should be updated to lowest class (Kalaichezhian) 
CRCRSTPAR0073	--> Auto  Institutions CR Note Applied  In Billing
ILCRSTPAR4957  --> 	product line level tax percenatge split validation included (Lakshman)
ILCRSTPAR5007  --> All schemes loading and current month active schemes loading in scheme master screen Check box option valiation inclueded.(Lakshman)
ILCRSTPAR5131  --> In exiting Retailer reports, need to have Addition Column to show Parent and Child concept
ILCRSTPAR5132  --> Trade scheme and General scheme Should show total secondary  amount and quantity in Debit note top sheet. Currently we have only Trade scheme, need to consider 
ILCRSTPAR5133  --> Need a report for Oder details in dynamic for analysis.in this report order status should capture. Order status means order cancelled or billed.	
ILCRSTPAR5175  --> User Login Resctried (Lakshman)
ILCRSTPAR5223  --> Returns the Total Stock For a Product (Lakshman)
ILCRSTPAR5199  --> INCLUDED SMINCENTIVE REPORT IN DEBIT NOTE TOP SHEET (Mohana)
ILCRSTPAR5200  --> INCLUDED MONTH END VALIDATION IN DEBIT NOTE TOP SHEET (Mohana)
ILCRSTPAR4961  --> Uploaded MRP,LSP AND Selrate (Mohana)
ILCRSTPAR5235  --> Temp table cloumn data type size is increased.
--Tally	
---Scrpit Updater Scrpits
*/
--CRCRSTPAR0052	(SUB REPORT FOR SALES RETURN TAX SPLIT UP)
------------- added by lakshman M Dated ON 28-06-2019 PMS ID: ILCRSTPAR4957 
IF NOT EXISTS (SELECT B.NAME FROM SysObjects A INNER JOIN SysColumns B ON A.id=B.id AND A.name='RptSRNSALESRETURN' AND B.name='CGST Perc')      
BEGIN      
	ALTER TABLE RptSRNSALESRETURN ADD [CGST Perc] NUMERIC (5,2)      
END
GO
IF NOT EXISTS (SELECT B.NAME FROM SysObjects A INNER JOIN SysColumns B ON A.id=B.id AND A.name='RptSRNSALESRETURN' AND B.name='SGST Perc')      
BEGIN      
	ALTER TABLE RptSRNSALESRETURN ADD [SGST Perc] NUMERIC (5,2)    
END
GO
IF NOT EXISTS (SELECT B.NAME FROM SysObjects A INNER JOIN SysColumns B ON A.id=B.id AND A.name='RptSRNSALESRETURN' AND B.name='IGST Perc')      
BEGIN      
	ALTER TABLE RptSRNSALESRETURN ADD [IGST Perc] NUMERIC (5,2)    
END
GO
IF NOT EXISTS (SELECT B.NAME FROM SysObjects A INNER JOIN SysColumns B ON A.id=B.id AND A.name='RptSRNSALESRETURN' AND B.name='UTGST Perc')      
BEGIN      
	ALTER TABLE RptSRNSALESRETURN ADD [UTGST Perc] NUMERIC (5,2)       
END
GO
IF NOT EXISTS (SELECT B.NAME FROM SysObjects A INNER JOIN SysColumns B ON A.id=B.id AND A.name='RptSRNSALESRETURN' AND B.name='CESS Perc')      
BEGIN      
	ALTER TABLE RptSRNSALESRETURN ADD [CESS Perc] NUMERIC (5,2)       
END
GO
IF NOT EXISTS (SELECT B.NAME FROM SysObjects A INNER JOIN SysColumns B ON A.id=B.id AND A.name='RptSRNSALESRETURN' AND B.name='Product Slno')      
BEGIN      
	ALTER TABLE RptSRNSALESRETURN ADD [Product Slno] INT   
END
GO
IF NOT EXISTS (SELECT B.NAME FROM SysObjects A INNER JOIN SysColumns B ON A.id=B.id AND A.name='RptSRNSALESRETURN' AND B.name='RtrGSTTinNo')      
BEGIN      
	ALTER TABLE RptSRNSALESRETURN ADD [RtrGSTTinNo] NVARCHAR(50)
END
GO
IF NOT EXISTS (SELECT B.NAME FROM SysObjects A INNER JOIN SysColumns B ON A.id=B.id AND A.name='RptSRNSALESRETURN' AND B.name='CGST TaxAmt')      
BEGIN      
	ALTER TABLE RptSRNSALESRETURN ADD [CGST TaxAmt] NUMERIC (18,6)       
END
GO
IF NOT EXISTS (SELECT B.NAME FROM SysObjects A INNER JOIN SysColumns B ON A.id=B.id AND A.name='RptSRNSALESRETURN' AND B.name='SGST TaxAmt')      
BEGIN      
	ALTER TABLE RptSRNSALESRETURN ADD [SGST TaxAmt] NUMERIC (18,6)    
END
GO
IF NOT EXISTS (SELECT B.NAME FROM SysObjects A INNER JOIN SysColumns B ON A.id=B.id AND A.name='RptSRNSALESRETURN' AND B.name='IGST TaxAmt')      
BEGIN      
	ALTER TABLE RptSRNSALESRETURN ADD [IGST TaxAmt] NUMERIC (18,6)   
END
GO
IF NOT EXISTS (SELECT B.NAME FROM SysObjects A INNER JOIN SysColumns B ON A.id=B.id AND A.name='RptSRNSALESRETURN' AND B.name='UTGST TaxAmt')      
BEGIN      
	ALTER TABLE RptSRNSALESRETURN ADD [UTGST TaxAmt] NUMERIC (18,6)       
END
GO
IF NOT EXISTS (SELECT B.NAME FROM SysObjects A INNER JOIN SysColumns B ON A.id=B.id AND A.name='RptSRNSALESRETURN' AND B.name='CESS TaxAmt')      
BEGIN      
	ALTER TABLE RptSRNSALESRETURN ADD [CESS TaxAmt] NUMERIC (18,6)       
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='RptSRNTaxFinalTemplate' AND TYPE='U') 
DROP TABLE RptSRNTaxFinalTemplate
GO
CREATE TABLE RptSRNTaxFinalTemplate
(
	[ReturnId] [int] NULL,
	[ReturnCode] [nvarchar](50) NULL,
	[PrdSlNo] [int] NULL,
	[TaxId] [int] NULL,
	[TaxCode] [nvarchar](20) NULL,
	[TaxName] [nvarchar](50) NULL,
	[TaxPerc] [numeric](10, 6) NULL,
	[TaxableAmount] [numeric](38, 6) NULL,
	[TaxAmount] [numeric](38, 6) NULL,
	[UsrId] [int] NULL
)
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_RptSRNSALESRETURN' AND TYPE='P')
DROP PROCEDURE Proc_RptSRNSALESRETURN
GO
--Exec Proc_RptSRNSALESRETURN 6,1
CREATE PROCEDURE Proc_RptSRNSALESRETURN  
(
	@Pi_UsrId Int = 1,
	@Pi_Type INT 
) 
As SET NOCOUNT ON 
/****************************************************************************************************************
* DATE			NAME			USERSTORYID			CR/BZ				DESCRIPTION
*****************************************************************************************************************
* 23-05-2019    MOHANA S		CRCRSTPAR0052		CR					SUB REPORT FOR SALES RETURN TAX SPLIT UP
* 02-07-2019    Lakshman M      ILCRSTPAR4957       SR                  product line level tax percenatge split validation included.
*****************************************************************************************************************/
Begin  
 DECLARE @FromReturnId AS  VARCHAR(25)  
 DECLARE @ToReturnId   AS  VARCHAR(25) 
 DECLARE @Cnt AS INT 
 DECLARE @TempReturnId TABLE (ReturnId INT) 
 CREATE Table #RptSRNTemplate  
( 
	[Credit Note Reference No] nvarchar(50),
	[Distributor Code] nvarchar(20),
	[Distributor Name] nvarchar(50),
	[Distributor Address1] nvarchar(50),
	[Distributor Address2] nvarchar(50),
	[Distributor Address3] nvarchar(50),
	[PinCode] int,
	[PhoneNo] nvarchar(50),
	[Tax Type] tinyint,
	[TIN Number] nvarchar(50),
	[Deposit Amount] numeric(38,2),
	[CST Number] nvarchar(50),
	[LST Number] nvarchar(50),
	[Licence Number] nvarchar(50),
	[Drug Licence Number 1] nvarchar(50),
	[Drug1 Expiry Date] DateTime,
	[Drug Licence Number 2] nvarchar(50),
	[Drug2 Expiry Date] DateTime,
	[Pesticide Licence Number] nvarchar(50),
	[Pesticide Expiry Date] DateTime,
	[SalId] INT,
	[Invoice Number] nvarchar(50),
	[Invoice Date] DATETIME,
	[ReturnId] INT,
	[Sales Return Number] nvarchar(50),
	[Sales Return Date] DATETIME,
	[Sales Man] nvarchar(50),
	[Route] nvarchar(50),
	[Retailer Code] nvarchar(50),
	[Retailer Name] nvarchar(150),
	[Retailer Phone Number] nvarchar(50),
	[Retailer CST Number] nvarchar(50),
	[Retailer Drug Lic  Number] nvarchar(50),
	[Retailer Lic Number] nvarchar(50),
	[Retailer Tin Number] nvarchar(50),
	[Retailer Address] nvarchar(50),
	[Product Company Code] nvarchar(20),
	[Product Company Name] nvarchar(150),
	[Product Short Code] nvarchar(100),
	[Product Short Name] nvarchar(150),
	[Product Name] nvarchar(150),
	[Product Slno] INT,
	[Stock Type] nvarchar(100),
	[Return Quantity] NUMERIC(18,0),
	[Selling Rate] NUMERIC(18,6),
	[Gross Amount] NUMERIC(18,6),
	[Special Discount] NUMERIC(18,6),
	[Scheme Discount] NUMERIC(18,6),
	[Distributor Discount] NUMERIC(18,6),
	[Cash Discount] NUMERIC(18,6),
	[TaxName] NVARCHAR(50),
	[Tax Percentage] NUMERIC(18,6),
	[Tax Amount Line Level] NUMERIC(18,6),
	[Line level Net Amount] NUMERIC(18,6),
	[Reason] nvarchar(100),
	[Type] nvarchar(50),
	[Mode] nvarchar(50),
	[Total Gross Amount] NUMERIC(18,6),
	[Total Special Discount] NUMERIC(18,6),
	[Total Scheme Discount] NUMERIC(18,6),
	[Total Distributor Discount] NUMERIC(18,6),
	[Total Cash Discount] NUMERIC(18,6),
	[Total Tax Amount] NUMERIC(18,6),
	[Total Net Amount] NUMERIC(18,6),
	[Total Discount] NUMERIC(18,6),
	[RtrId] INT,
	[RMID] INT,
	[SMID] INT,
	[MRP] NUMERIC(18,6),
	[Credit Note/Replacement Reference No] nvarchar(50),
	UsrId int,Visibility tinyint 
) 
	IF @Pi_Type=1 
	BEGIN   
		INSERT INTO @TempReturnId SELECT SelValue FROM ReportFilterDt Where RptId = 16 And SelId = 32  AND UsrId=@Pi_UsrId
	END
	ELSE   
	BEGIN 
		SELECT @FromReturnId=SelValue FROM ReportFilterDt Where RptId = 16 And SelId = 14 AND UsrId=@Pi_UsrId
		SELECT @ToReturnId=SelValue FROM ReportFilterDt Where RptId = 16 And SelId = 15  AND UsrId=@Pi_UsrId
	END
	IF @Pi_Type=1 
	BEGIN 
		Insert into #RptSRNTemplate  
		SELECT CreditNoteRetailer.CrNoteNumber,	DistributorCode,	DistributorName,	DistributorAdd1,
		DistributorAdd2,	DistributorAdd3,	PinCode,	PhoneNo,	TaxType,	TINNo,	DepositAmt,
		CSTNo,	LSTNo,	LicNo,	DrugLicNo1,	Drug1ExpiryDate,	DrugLicNo2,	Drug2ExpiryDate,	PestLicNo,
		PestExpiryDate,	SalesInvoice.SalId,	SalInvNo,	SalInvDate,	ReturnProduct.ReturnId,	ReturnCode,
		ReturnDate,	SMCode,	RMCode,	RtrCode,	RtrName,	RtrPhoneNo,	RtrCstNo,	RtrDrugLicNo,	RtrLicNo,
		RtrTINNo,	RtrAdd1,	CmpCode,	CmpName,	Product.PrdDCode,	Product.PrdShrtName,	Product.PrdName,ReturnProduct.Slno,
		UserStockType,	BaseQty,	PrdEditSelRte,	PrdGrossAmt,	PrdSplDisAmt,	PrdSchDisAmt,	PrdDBDisAmt,
		PrdCDDisAmt,CASE WHEN TaxCode IN ('OutputCGST','CGST','InputCGST') Then 'CGST'
		WHEN TaxCode IN ('OutputSGST','SGST','InputSGST') Then 'SGST'
		WHEN TaxCode IN('OutputIGST','IGST','InputIGST') THEN 'IGST'
		WHEN TaxCode IN ('OutputUTGST','UTGST','InputUTGST') Then 'UTGST'
		WHEN TaxCode IN('OutputCess','OutputGSTCess','CESS') THEN 'CESS'		
		END as TaxName,TaxPerc,	SUM(TaxAmt) AS TaxAmt,	PrdNetAmt,	Description,	InvoiceType,	ReturnMode,	RtnGrossAmt,
		RtnSplDisAmt,	RtnSchDisAmt,	RtnDBDisAmt,	RtnCashDisAmt,	RtnTaxAmt,	RtnNetAmt,	RtnNetAmt,	Retailer.RtrId,
		RouteMaster.RMId,	SalesMan.SMId,	ReturnProduct.PrdUnitMRP,	CreditNoteReplacementHd.CNRRefNo,
		@Pi_UsrId,1 Visibility FROM  Distributor,ReturnProduct INNER JOIN ReturnHeader ON ReturnHeader.ReturnId=ReturnProduct.ReturnId
		INNER JOIN Retailer ON ReturnHeader.RtrId=Retailer.RtrId
		INNER JOIN SalesMan ON ReturnHeader.SMId=SalesMan.SMId
		INNER JOIN RouteMaster ON ReturnHeader.RMId=RouteMaster.RMId 
		LEFT OUTER JOIN SalesInvoice ON SalesInvoice.SalId=ReturnProduct.SalId
		LEFT OUTER JOIN CreditNoteReplacementHd ON CreditNoteReplacementHd.SrNo=ReturnHeader.ReturnCode 
		LEFT OUTER JOIN CreditNoteRetailer ON CreditNoteRetailer.PostedFrom=ReturnHeader.ReturnCode AND CreditNoteRetailer.TransId = 30 
		INNER JOIN Product ON ReturnProduct.PrdId=Product.PrdId
		INNER JOIN Company ON Product.CmpId=Company.CmpId
		INNER JOIN StockType ON StockType.StockTypeId=ReturnProduct.StockTypeId
		LEFT OUTER JOIN ReturnProductTax ON ReturnProductTax.ReturnId=ReturnProduct.ReturnId AND ReturnProduct.Slno=ReturnProductTax.PrdSlNo
		INNER JOIN TaxConfiguration TC (NOLOCK) ON TC.TaxId =ReturnProductTax.TaxId
		LEFT OUTER JOIN ReasonMaster ON ReasonMaster.ReasonId=ReturnProduct.ReasonId 
		WHERE ReturnHeader.ReturnId IN (SELECT ReturnId FROM @TempReturnId)  
		GROUP BY CREDITNOTERETAILER.CRNOTENUMBER,	DISTRIBUTORCODE,	DISTRIBUTORNAME,
		DISTRIBUTORADD1,	DISTRIBUTORADD2,	DISTRIBUTORADD3,	PINCODE,	PHONENO,	TAXTYPE,	TINNO,	DEPOSITAMT,
		CSTNO,	LSTNO,	LICNO,	DRUGLICNO1,	DRUG1EXPIRYDATE,	DRUGLICNO2,	DRUG2EXPIRYDATE,	PESTLICNO,	PESTEXPIRYDATE,
		SALESINVOICE.SALID,	SALINVNO,	SALINVDATE,	RETURNPRODUCT.RETURNID,	RETURNCODE,	RETURNDATE,	SMCODE,	RMCODE,
		RTRCODE,	RTRNAME,	RTRPHONENO,	RTRCSTNO,	RTRDRUGLICNO,	RTRLICNO,	RTRTINNO,	RTRADD1,	CMPCODE,
		CMPNAME,	PRODUCT.PRDDCODE,	PRODUCT.PRDSHRTNAME,	PRODUCT.PRDNAME,	USERSTOCKTYPE,	BASEQTY,	PRDEDITSELRTE,
		PRDGROSSAMT,	PRDSPLDISAMT,	PRDSCHDISAMT,	PRDDBDISAMT,	PRDCDDISAMT,	PRDNETAMT,	DESCRIPTION,	INVOICETYPE,
		RETURNMODE,	RTNGROSSAMT,	RTNSPLDISAMT,	RTNSCHDISAMT,	RTNDBDISAMT,	RTNCASHDISAMT,	RTNTAXAMT,	RTNNETAMT,
		RTNNETAMT,	RETAILER.RTRID,	ROUTEMASTER.RMID,	SALESMAN.SMID,	RETURNPRODUCT.PRDUNITMRP,	CREDITNOTEREPLACEMENTHD.CNRREFNO,TaxPerc,Taxcode,ReturnProduct.Slno 
	END  
	ELSE 
	BEGIN 
		Insert into #RptSRNTemplate  
		SELECT CreditNoteRetailer.CrNoteNumber,	DistributorCode,	DistributorName,	DistributorAdd1,	DistributorAdd2,
		DistributorAdd3,	PinCode,	PhoneNo,	TaxType,	TINNo,	DepositAmt,	CSTNo,	LSTNo,	LicNo,	DrugLicNo1,
		Drug1ExpiryDate,	DrugLicNo2,	Drug2ExpiryDate,	PestLicNo,	PestExpiryDate,	SalesInvoice.SalId,	SalInvNo,
		SalInvDate,	ReturnProduct.ReturnId,	ReturnCode,	ReturnDate,	SMCode,	RMCode,	RtrCode,	RtrName,	RtrPhoneNo,
		RtrCstNo,	RtrDrugLicNo,	RtrLicNo,	RtrTINNo,	RtrAdd1,	CmpCode,	CmpName,	Product.PrdDCode,
		Product.PrdShrtName,	Product.PrdName,ReturnProduct.Slno,	UserStockType,	BaseQty,	PrdEditSelRte,	PrdGrossAmt,	PrdSplDisAmt,
		PrdSchDisAmt,	PrdDBDisAmt,	PrdCDDisAmt,CASE WHEN TaxCode IN ('OutputCGST','CGST','InputCGST') Then 'CGST'
		WHEN TaxCode IN ('OutputSGST','SGST','InputSGST') Then 'SGST'
		WHEN TaxCode IN('OutputIGST','IGST','InputIGST') THEN 'IGST'
		WHEN TaxCode IN ('OutputUTGST','UTGST','InputUTGST') Then 'UTGST'
		WHEN TaxCode IN('OutputCess','OutputGSTCess','CESS') THEN 'CESS'		
		END as TaxName,TaxPerc,	SUM(TaxAmt) AS TaxAmt,	PrdNetAmt,	Description,	InvoiceType,
		ReturnMode,	RtnGrossAmt,	RtnSplDisAmt,	RtnSchDisAmt,	RtnDBDisAmt,	RtnCashDisAmt,	RtnTaxAmt,	RtnNetAmt,	RtnNetAmt,
		Retailer.RtrId,	RouteMaster.RMId,	SalesMan.SMId,	ReturnProduct.PrdUnitMRP,	CreditNoteReplacementHd.CNRRefNo,
		@Pi_UsrId,1 Visibility 
		FROM  Distributor,ReturnProduct INNER JOIN ReturnHeader ON ReturnHeader.ReturnId=ReturnProduct.ReturnId
		INNER JOIN Retailer ON ReturnHeader.RtrId=Retailer.RtrId
		INNER JOIN SalesMan ON ReturnHeader.SMId=SalesMan.SMId
		INNER JOIN RouteMaster ON ReturnHeader.RMId=RouteMaster.RMId
		LEFT OUTER JOIN SalesInvoice ON SalesInvoice.SalId=ReturnProduct.SalId
		LEFT OUTER JOIN CreditNoteReplacementHd ON CreditNoteReplacementHd.SrNo=ReturnHeader.ReturnCode
		LEFT OUTER JOIN CreditNoteRetailer ON CreditNoteRetailer.PostedFrom=ReturnHeader.ReturnCode  AND CreditNoteRetailer.TransId=30
		INNER JOIN Product ON ReturnProduct.PrdId=Product.PrdId
		INNER JOIN Company ON Product.CmpId=Company.CmpId
		INNER JOIN StockType ON StockType.StockTypeId=ReturnProduct.StockTypeId
		LEFT OUTER JOIN ReturnProductTax ON ReturnProductTax.ReturnId=ReturnProduct.ReturnId AND ReturnProduct.Slno=ReturnProductTax.PrdSlNo
		INNER JOIN TaxConfiguration TC (NOLOCK) ON TC.TaxId =ReturnProductTax.TaxId
		LEFT OUTER JOIN ReasonMaster ON ReasonMaster.ReasonId=ReturnProduct.ReasonId 
		WHERE ReturnHeader.ReturnId BETWEEN  @FromReturnId  AND  @ToReturnId  
		GROUP BY CREDITNOTERETAILER.CRNOTENUMBER,	DISTRIBUTORCODE,	DISTRIBUTORNAME,	DISTRIBUTORADD1,	DISTRIBUTORADD2,
		DISTRIBUTORADD3,	PINCODE,	PHONENO,	TAXTYPE,	TINNO,	DEPOSITAMT,	CSTNO,	LSTNO,	LICNO,	DRUGLICNO1,	DRUG1EXPIRYDATE,
		DRUGLICNO2,	DRUG2EXPIRYDATE,	PESTLICNO,	PESTEXPIRYDATE,	SALESINVOICE.SALID,	SALINVNO,	SALINVDATE,	RETURNPRODUCT.RETURNID,
		RETURNCODE,	RETURNDATE,	SMCODE,	RMCODE,	RTRCODE,	RTRNAME,	RTRPHONENO,	RTRCSTNO,	RTRDRUGLICNO,	RTRLICNO,	RTRTINNO,
		RTRADD1,	CMPCODE,	CMPNAME,	PRODUCT.PRDDCODE,	PRODUCT.PRDSHRTNAME,	PRODUCT.PRDNAME,	USERSTOCKTYPE,	BASEQTY,
		PRDEDITSELRTE,	PRDGROSSAMT,	PRDSPLDISAMT,	PRDSCHDISAMT,	PRDDBDISAMT,	PRDCDDISAMT,	PRDNETAMT,	DESCRIPTION,
		INVOICETYPE,	RETURNMODE,	RTNGROSSAMT,	RTNSPLDISAMT,	RTNSCHDISAMT,	RTNDBDISAMT,	RTNCASHDISAMT,	RTNTAXAMT,
		RTNNETAMT,	RTNNETAMT,	RETAILER.RTRID,	ROUTEMASTER.RMID,	SALESMAN.SMID,	RETURNPRODUCT.PRDUNITMRP,	CREDITNOTEREPLACEMENTHD.CNRREFNO,TaxPerc,Taxcode,ReturnProduct.Slno
	
	END


	--INSERT INTO RptSRNSALESRETURN 
	SELECT * INTO #SRNSALESRETURNTEMP FROM #RptSRNTemplate 
	DELETE FROM RptSRNSALESRETURN
	----- added by lakshman ILCRSTPAR4957
	SELECT DISTINCT  R.RtrId as RtrId,UT.ColumnValue 
	INTO #RetailerGSTIN
	FROM UDCHD U 
	INNER JOIN UDCMASTER UD ON U.MasterId=UD.MasterId
	INNER JOIN UdcDetails UT ON UT.MasterId=UD.MasterId and UT.UdcMasterId=UD.UdcMasterId
	INNER JOIN Retailer R ON R.RtrId=UT.MasterRecordId
	WHERE U.MasterId=2 and ColumnName='GSTIN'

	
	INSERT INTO RptSRNSALESRETURN ([Credit Note Reference No],[Distributor Code],[Distributor Name],[Distributor Address1],[Distributor Address2],[Distributor Address3],[PinCode],[PhoneNo],[Tax Type],[TIN Number],[Deposit Amount],[CST Number],[LST Number],[Licence Number],
	[Drug Licence Number 1],[Drug1 Expiry Date],[Drug Licence Number 2],[Drug2 Expiry Date],[Pesticide Licence Number],[Pesticide Expiry Date],[SalId],[Invoice Number],[Invoice Date],[ReturnId],[Sales Return Number],[Sales Return Date],[Sales Man],[Route],[Retailer Code],[Retailer Name],
	[Retailer Phone Number],[Retailer CST Number],[Retailer Drug Lic  Number],[Retailer Lic Number],[Retailer Tin Number],[Retailer Address],[Product Company Code],[Product Company Name],[Product Short Code],[Product Short Name],[Product Name],[Stock Type],
	[Return Quantity],[Selling Rate],[Gross Amount],[Special Discount],[Scheme Discount],[Distributor Discount],[Cash Discount],[Tax Percentage],[Tax Amount Line Level],[Line level Net Amount],[Reason],[Type],[Mode],[Total Gross Amount],[Total Special Discount],[Total Scheme Discount],
	[Total Distributor Discount],[Total Cash Discount],[Total Tax Amount],[Total Net Amount],[Total Discount],[RtrId],[RMID],[SMID],[MRP],[Credit Note/Replacement Reference No],[UsrId],[Visibility])
	SELECT DISTINCT [Credit Note Reference No],[Distributor Code],[Distributor Name],[Distributor Address1],[Distributor Address2],[Distributor Address3],[PinCode],[PhoneNo],[Tax Type],[TIN Number],[Deposit Amount],[CST Number],[LST Number],[Licence Number],
	[Drug Licence Number 1],[Drug1 Expiry Date],[Drug Licence Number 2],[Drug2 Expiry Date],[Pesticide Licence Number],[Pesticide Expiry Date],[SalId],[Invoice Number],[Invoice Date],[ReturnId],[Sales Return Number],[Sales Return Date],[Sales Man],[Route],[Retailer Code],[Retailer Name],
	[Retailer Phone Number],[Retailer CST Number],[Retailer Drug Lic  Number],[Retailer Lic Number],[Retailer Tin Number],[Retailer Address],[Product Company Code],[Product Company Name],[Product Short Code],[Product Short Name],[Product Name],[Stock Type],
	[Return Quantity],[Selling Rate],[Gross Amount],[Special Discount],[Scheme Discount],[Distributor Discount],[Cash Discount],[Tax Percentage],[Tax Amount Line Level],[Line level Net Amount],[Reason],[Type],[Mode],[Total Gross Amount],[Total Special Discount],[Total Scheme Discount],
	[Total Distributor Discount],[Total Cash Discount],[Total Tax Amount],[Total Net Amount],[Total Discount],[RtrId],[RMID],[SMID],[MRP],[Credit Note/Replacement Reference No],[UsrId],[Visibility]  
	FROM #SRNSALESRETURNTEMP


	
	UPDATE A SET [CGST Perc] = B.[TAX PERCENTAGE],[CGST TAXAMT] = B.[Tax Amount Line Level] FROM RptSRNSALESRETURN A INNER JOIN #SRNSALESRETURNTEMP B ON A.[Credit Note Reference No] = B.[Credit Note Reference No] AND A.[Product Short Code]=B.[Product Short Code] 
	WHERE TAXNAME = 'CGST'

	UPDATE A SET [SGST Perc] = B.[TAX PERCENTAGE],[SGST TAXAMT] = B.[Tax Amount Line Level] FROM RptSRNSALESRETURN A INNER JOIN #SRNSALESRETURNTEMP B ON A.[Credit Note Reference No] = B.[Credit Note Reference No] AND A.[Product Short Code]=B.[Product Short Code] 
	WHERE TAXNAME = 'SGST'

	UPDATE A SET [IGST Perc] = B.[TAX PERCENTAGE],[IGST TAXAMT] = B.[Tax Amount Line Level] FROM RptSRNSALESRETURN A INNER JOIN #SRNSALESRETURNTEMP B ON A.[Credit Note Reference No] = B.[Credit Note Reference No] AND A.[Product Short Code]=B.[Product Short Code] 
	WHERE TAXNAME = 'IGST'

	UPDATE A SET [UTGST Perc] = B.[TAX PERCENTAGE],[UTGST TAXAMT] = B.[Tax Amount Line Level] FROM RptSRNSALESRETURN A INNER JOIN #SRNSALESRETURNTEMP B ON A.[Credit Note Reference No] = B.[Credit Note Reference No] AND A.[Product Short Code]=B.[Product Short Code] 
	WHERE TAXNAME = 'UTGST'

	UPDATE A SET [CESS Perc] = B.[TAX PERCENTAGE],[CESS TaxAmt] = B.[Tax Amount Line Level] FROM RptSRNSALESRETURN A INNER JOIN #SRNSALESRETURNTEMP B ON A.[Credit Note Reference No] = B.[Credit Note Reference No] AND A.[Product Short Code]=B.[Product Short Code] 
	WHERE TAXNAME = 'CESS'

	--INSERT INTO RptSRNSALESRETURN 
	--([Credit Note Reference No],[Distributor Code],[Distributor Name], [Distributor Address1], [Distributor Address2], [Distributor Address3], 
	--[PinCode], [PhoneNo],[Tax Type], [TIN Number],[Deposit Amount],[CST Number],[LST Number],[Licence Number],[Drug Licence Number 1], [Drug1 Expiry Date],
	--[Drug Licence Number 2], [Drug2 Expiry Date], [Pesticide Licence Number], [Pesticide Expiry Date], [SalId],[Invoice Number], [Invoice Date], [ReturnId], 
	--[Sales Return Number], [Sales Return Date], [Sales Man], [Route], [Retailer Code], [Retailer Name], [Retailer Phone Number], [Retailer CST Number], 
	--[Retailer Drug Lic  Number],[Retailer Lic Number], [Retailer Tin Number], [Retailer Address], [Product Company Code], [Product Company Name], [Product Short Code], 
	--[Product Short Name], [Product Name],[Product Slno], [Stock Type], [Return Quantity],[Selling Rate], [Gross Amount], [Special Discount], [Scheme Discount], 
	--[Distributor Discount], [Cash Discount],[Line level Net Amount], [Reason], [Type], [Mode], [Total Gross Amount], [Total Special Discount], [Total Scheme Discount], 
	--[Total Distributor Discount], [Total Cash Discount], [Tax Amount Line Level],[Total Tax Amount], [Total Net Amount], [Total Discount], [RtrId],
	--[RMID], [SMID], [MRP], [Credit Note/Replacement Reference No], [UsrId], [Visibility], [CGST Perc], [SGST Perc], [IGST Perc],[UTGST Perc],[CESS Perc])
	


	--SELECT [Credit Note Reference No],[Distributor Code],[Distributor Name],[Distributor Address1],[Distributor Address2],[Distributor Address3],
	--[PinCode],[PhoneNo],[Tax Type],[TIN Number],[Deposit Amount],[CST Number],[LST Number],[Licence Number],[Drug Licence Number 1],[Drug1 Expiry Date], 
	--[Drug Licence Number 2],[Drug2 Expiry Date],[Pesticide Licence Number],[Pesticide Expiry Date],[SalId] ,[Invoice Number],[Invoice Date],[ReturnId] ,
	--[Sales Return Number],[Sales Return Date],[Sales Man],[Route],[Retailer Code],[Retailer Name],[Retailer Phone Number],[Retailer CST Number],
	--[Retailer Drug Lic  Number],[Retailer Lic Number],[Retailer Tin Number],[Retailer Address],[Product Company Code],[Product Company Name],[Product Short Code],
	--[Product Short Name],[Product Name], [Product Slno],[Stock Type],[Return Quantity],[Selling Rate],[Gross Amount],[Special Discount],[Scheme Discount],
	--[Distributor Discount],[Cash Discount],[Line level Net Amount],[Reason],[Type],[Mode],[Total Gross Amount],[Total Special Discount],[Total Scheme Discount],
	--[Total Distributor Discount],[Total Cash Discount] ,ISNULL(Sum([Tax Amount Line Level]),0) AS [Tax Amount Line Level],[Total Tax Amount],	[Total Net Amount],[Total Discount],[RtrId],
	--[RMID],[SMID] ,[MRP],[Credit Note/Replacement Reference No], [UsrId], [Visibility],isnull([CGST],0),isnull([SGST],0),isnull([IGST],0),isnull([UTGST],0),isnull([CESS],0) 
	--from #SRNSALESRETURNTEMP
	--	PIVOT
	--		(
	--			SUM([Tax Percentage])
	--			FOR [TaxName] IN ([CGST],[SGST],[IGST],[UTGST],[CESS])
	--		) AS P
	--GROUP BY [Credit Note Reference No],[Distributor Code],[Distributor Name],[Distributor Address1],[Distributor Address2],[Distributor Address3],
	--[PinCode],[PhoneNo],[Tax Type],[TIN Number],[Deposit Amount],[CST Number],[LST Number],[Licence Number],[Drug Licence Number 1],[Drug1 Expiry Date], 
	--[Drug Licence Number 2],[Drug2 Expiry Date],[Pesticide Licence Number],[Pesticide Expiry Date],[SalId] ,[Invoice Number],[Invoice Date],[ReturnId] ,
	--[Sales Return Number],[Sales Return Date],[Sales Man],[Route],[Retailer Code],[Retailer Name],[Retailer Phone Number],[Retailer CST Number],
	--[Retailer Drug Lic  Number],[Retailer Lic Number],[Retailer Tin Number],[Retailer Address],[Product Company Code],[Product Company Name],[Product Short Code],
	--[Product Short Name],[Product Name], [Product Slno],[Stock Type],[Return Quantity],[Selling Rate],[Gross Amount],[Special Discount],[Scheme Discount],
	--[Distributor Discount],[Cash Discount],[Line level Net Amount],[Reason],[Type],[Mode],[Total Gross Amount],[Total Special Discount],[Total Scheme Discount],
	--[Total Distributor Discount],[Total Cash Discount],[Total Tax Amount],	[Total Net Amount],[Total Discount],[RtrId],
	--[RMID],[SMID] ,[MRP],[Credit Note/Replacement Reference No], [UsrId], [Visibility],isnull([CGST],0),isnull([SGST],0),isnull([IGST],0),isnull([UTGST],0),isnull([CESS],0)
	--order by Salid,[Product Slno],[Product Short Code] Asc
	
	UPDATE A SET RtrGSTTinNo = B.ColumnValue FROM RptSRNSALESRETURN A inner join #RetailerGSTIN B ON A.Rtrid =B.Rtrid 
	
	------------------ Till here -----------------
	--Added by Mohana  CRCRSTPAR0052
	DELETE FROM RptSRNTaxFinalTemplate WHERE UsrId = @Pi_UsrId 
	INSERT INTO RptSRNTaxFinalTemplate(ReturnId,ReturnCode,PrdSlNo,TaxId,TaxCode,TaxName,TaxPerc,TaxableAmount,TaxAmount,UsrId)      
	SELECT Returnid,REturnCode,0 Prdslno,TaxId,TaxCode,TaxName,TaxPerc,SUM(TaxableAmt) TaxableAmt,SUM(TaxAmt) TaxAmt,@Pi_UsrId      
	FROM 
	(
	SELECT DISTINCT SI.Returnid,S.REturnCode,Prdslno,SI.TaxId,TaxCode,TaxName,TaxPerc,TaxableAmt,TaxAmt     
	FROM ReturnproductTax SI , TaxConfiguration T,REturnHeader S,RptSRNSALESRETURN B      
	WHERE SI.TaxId = T.TaxId and SI.ReturnId = S.ReturnId and S.returncode = B.[Sales Return Number]  and B.UsrId = @Pi_UsrId      
	)A GROUP BY Returnid,REturnCode,TaxId,TaxCode,TaxName,TaxPerc HAVING SUM(TaxableAmt) > 0  

END
GO
--CRCRSTPAR0050 (Database HealthCheck included DB Shrink)
IF NOT EXISTS(SELECT * FROM configuration WHERE Moduleid ='DB Health')
BEGIN
DELETE FROM configuration where moduleid ='DB Health'
insert into configuration
SELECT 'DB Health','User login','DB Health Checkup',1,'',1.00,1
END
GO
DELETE FROM CustomUpDownload WHERE UpDownload ='Upload' and SlNo=167 and Module='DBHealthCheck'
INSERT INTO CustomUpDownload (SlNo,SeqNo,Module,Screen,ExportFnName,ImportProcName,ParkTable,ValidateProcName,TranType,UpDownload,MandatoryFile)
SELECT 167,1,'DBHealthCheck','DBHealthCheck','Proc_Cs2Cn_DBHealthCheck','','Cs2Cn_Prk_DBHealthCheck','','Transaction','Upload',1
GO
DELETE FROM Tbl_UploadIntegration WHERE ProcessName ='DBHealthCheck' 
INSERT INTO Tbl_UploadIntegration (SequenceNo,ProcessName,FolderName,PrkTableName,CreatedDate)
SELECT 66,'DBHealthCheck','DBHealthCheck','Cs2Cn_Prk_DBHealthCheck',GETDATE()
GO
IF EXISTS (SELECT name FROM sysobjects WHERE name = 'DBHealthCheck' AND xtype ='U')
DROP TABLE DBHealthCheck
GO
CREATE TABLE DBHealthCheck
(
	[SlNo] [numeric](18, 0) IDENTITY(1,1) NOT NULL,
	[LastUpdate] [datetime] NULL,
	[Errmsg] [tinyint] NULL,
	[HealthFlag] [tinyint] NULL,
	[UploadFlag][tinyint] NULL
)
GO
IF EXISTS (SELECT NAME FROM SYSOBJECTS WHERE NAME='Proc_DatabaseStatusCheck' AND XTYPE='P')
DROP PROCEDURE Proc_DatabaseStatusCheck
GO
/*
begin tran 
EXEC Proc_DatabaseStatusCheck 'sappers',0
select * from DBHealthCheck
EXEC Proc_Cs2Cn_DBHealthCheck 0,'2019-06-18'
SELECT * FROM CS2CN_PRK_DBHEALTHCHECK
SELECT * FROM DBHEALTHCHECK
rollback tran
*/ 
CREATE  PROCEDURE Proc_DatabaseStatusCheck
(
	@Pi_DbName Varchar(200),
	@Po_ErrNo INT OUTPUT
)
AS
/***********************************************************************************************
* PROCEDURE		: Proc_DatabaseStatusCheck
* PURPOSE		: To Validate Database status 
* CREATED		: Murugan.R
* CREATED DATE	: 19/12/2012
* MODIFIED
************************************************************************************************  
DATE			AUTHOR					CR/BZ	 USER STORY ID    DESCRIPTION                           
************************************************************************************************  
27-05-2019     Govindaraj.P			  SR	 CRCRSTPAR0050     Database HealthCheck included DB Shrink 
11-06-2019     Lakshman M             BZ     ILCRSTPAR4793     Database health checkup process temp table columns mismatched.
************************************************************************************************/
SET NOCOUNT ON
BEGIN
	SET @Po_ErrNo=0
------------- added by lakshman M  Dated ON 11-06-2019  PMS id: ILCRSTPAR4793 -------------
CREATE TABLE #CheckDBTemp (
     Error        INT
   , [Level]      INT
   , [State]      INT
   , MessageText  NVARCHAR(1000)
   , RepairLevel  NVARCHAR(1000)
   , [Status]     INT
   , [DBID]       INT
   , [DBFragId]	  INT
   , ObjectID     INT
   , IndexID      INT
   , PartitionID  BIGINT
   , AllocUnitID  BIGINT
   , RidDbId	  INT
   , RidPruId	  INT
   , [File]       INT
   , [Page]       INT
   , Slot         INT
   , RefDbId	  INT
   , RefPruId     INT
   , RefFile      INT
   , RefPage      INT
   , RefSlot      INT
   , Allocation   INT
)
----------- till here --------------
-- Needed variables
BEGIN TRY
DECLARE @TSQL         VARCHAR(Max)
-- Added by Amuthakumar ILCRSTAML2177
--SET @TSQL=''
--SET @TSQL = 'EXEC Proc_DBShrink(''' +  @Pi_DbName  + ''')'
--EXEC(@TSQL)
-- Till Here
SET @TSQL=''
SET @TSQL = 'DBCC CHECKDB(''' +  @Pi_DbName  + ''') WITH TABLERESULTS,no_infomsgs'

INSERT INTO #CheckDBTemp
EXEC(@TSQL) 

TRUNCATE TABLE DBHealthCheck

If Exists(SELECT * FROM #CheckDBTemp)
BEGIN
	 SET @Po_ErrNo=1
	 SELECT @Po_ErrNo

		 INSERT INTO DBHealthCheck(LastUpdate,Errmsg,HealthFlag,UploadFlag) ------------Added by lakshman M  Dated ON 11-06-2019  PMS id: ILCRSTPAR4793 
		 SELECT GETDATE(),@Po_ErrNo,1,0
END
ELSE
BEGIN
		 INSERT INTO DBHealthCheck(LastUpdate,Errmsg,HealthFlag,UploadFlag) ------------Added by lakshman M  Dated ON 11-06-2019  PMS id: ILCRSTPAR4793 
		 SELECT GETDATE(),0,0,0

END	
TRUNCATE TABLE #CheckDBTemp
END TRY
BEGIN CATCH
	IF @@ERROR>0
	BEGIN
		SET @Po_ErrNo=1
		SELECT @Po_ErrNo
	END
END CATCH
END
GO
IF  EXISTS (SELECT name FROM sysobjects WHERE name = 'Cs2Cn_Prk_DBHealthCheck' AND xtype ='U')
DROP TABLE Cs2Cn_Prk_DBHealthCheck
GO
CREATE TABLE Cs2Cn_Prk_DBHealthCheck
(
	[SlNo] [numeric](18, 0) IDENTITY(1,1) NOT NULL,
	[DistCode] [nvarchar](20) NULL,
	[LastUpdate] [datetime] NULL,
	[Errmsg] [tinyint] NULL,
	[HealthFlag] [tinyint] NULL,  --- HealthFlag and ErrMsg is  0 for Good Database, 1 for Corrupted Database
	[UploadFlag] [nvarchar](2) NULL,
	[SyncId] [numeric](18, 0) NULL,
	[ServerDate] [datetime] NULL
) 
GO
IF EXISTS (SELECT name FROM sysobjects WHERE name = 'Proc_Cs2Cn_DBHealthCheck' AND xtype ='P')
DROP PROCEDURE Proc_Cs2Cn_DBHealthCheck
GO
/*
BEGIN TRANSACTION
EXEC Proc_Cs2Cn_DBHealthCheck 0,'2018-01-23'
SELECT * FROM CS2CN_PRK_DBHEALTHCHECK
SELECT * FROM DBHEALTHCHECK
ROLLBACK TRANSACTION
*/
CREATE PROCEDURE Proc_Cs2Cn_DBHealthCheck
(
	@Po_ErrNo	INT OUTPUT,
	@ServerDate DATETIME	
)
AS
BEGIN
SET NOCOUNT ON
/***********************************************************************************************
* PROCEDURE		: Proc_Cs2Cn_DBHealthCheck
* PURPOSE		: DB Health Status Upload
* NOTES			:
* CREATED		: Amuthakumar P
* CREATED DATE	: 2018-12-24
* MODIFIED
************************************************************************************************  
DATE			AUTHOR					CR/BZ	 USER STORY ID    DESCRIPTION                           
************************************************************************************************  
27-05-2019     Govindaraj.P			  SR	 CRCRSTPAR0050     Database HealthCheck included DB Shrink 
************************************************************************************************/
	SET @Po_ErrNo=0
		
	DELETE FROM Cs2Cn_Prk_DBHealthCheck WHERE UploadFlag = 'Y'
		
	IF NOT EXISTS (SELECT Slno FROM DBHealthCheck(NOLOCK) WHERE UploadFlag = 0 )
	BEGIN
	   RETURN
	END
	--- HealthFlag and ErrMsg is  0 for Good Database, 1 for Corrupted Database
	INSERT INTO Cs2Cn_Prk_DBHealthCheck(DistCode,LastUpdate,Errmsg,HealthFlag,UploadFlag,SyncId,ServerDate)
	SELECT DistributorCode,LastUpdate,Errmsg,HealthFlag,'N',0,@ServerDate
	FROM DBHealthCheck A(NOLOCK) 
	CROSS JOIN Distributor C(NOLOCK) 
	WHERE UploadFlag=0 

	UPDATE DBHealthCheck SET UploadFlag = 1 WHERE UploadFlag=0 
		
END
GO
--CRCRSTPAR0054 (SalesMan incentive Master download)
DELETE FROM CustomUpdownload WHERE Module in ('SalesManIncentiveMaster') and UpDownload='Download' and SlNo=276
INSERT INTO CustomUpdownload(SlNo,SeqNo,Module,Screen,ExportFnName,ImportProcName,ParkTable,ValidateProcName,TranType,UpDownload,MandatoryFile)
SELECT 276,1,'SalesManIncentiveMaster','SalesManIncentiveMaster','Proc_Cn2Cs_Dummy','','Cn2CS_Prk_SalesmanIncentiveMaster','Proc_Cn2Cs_SalesmanIncentiveMaster','Master','Download',1
GO
DELETE FROM Tbl_DownloadIntegration WHERE  ProcessName in ('SalesManIncentiveMaster','SalesManIncentiveSlabs','SalesManIncentiveProducts')
INSERT INTO Tbl_DownloadIntegration(SequenceNo,ProcessName,PrkTableName,SPName,TRowCount,SelectCount,CreatedDate)
SELECT 84,'SalesManIncentiveMaster','Cn2CS_Prk_SalesmanIncentiveMaster','',0,500,'2018-05-16'
UNION ALL
SELECT 85,'SalesManIncentiveSlabs','Cn2CS_Prk_SalesmanIncentiveSlabs','',0,500,'2018-05-16'
UNION ALL
SELECT 86,'SalesManIncentiveProducts','Cn2Cs_Prk_SMIncentiveProducts','',0,500,'2018-05-16'
GO
DELETE FROM CustomUpdownload WHERE Module in ('SalesManIncentiveMasterUpload') and UpDownload='Upload'
INSERT INTO CustomUpdownload(SlNo,SeqNo,Module,Screen,ExportFnName,ImportProcName,ParkTable,ValidateProcName,TranType,UpDownload,MandatoryFile)
SELECT 166,1,'SalesManIncentiveMasterUpload','SalesManIncentiveMasterUpload','Proc_Cs2Cn_SalesManIncentive','','Cs2cn_Prk_SalesManIncentive','Proc_Cn2Cs_Dummy','Master','Upload',1
GO
DELETE FROM Tbl_uploadIntegration WHERE  ProcessName in ('SalesManIncentiveMasterUpload') and Sequenceno=64
INSERT INTO Tbl_uploadIntegration(SequenceNo,ProcessName,FolderName,PrkTableName,CreatedDate)
SELECT 64,'SalesManIncentiveMasterUpload','','Cs2cn_Prk_SalesManIncentive','2018-05-23'
GO
DELETE FROM Tbl_Generic_Reports  WHERE Rptname='SalesManIncentiveMasterReport'
DECLARE @Rptid  int 
SELECT @Rptid=MAX(Rptid) from Tbl_Generic_Reports
INSERT INTO TBL_GENERIC_REPORTS
SELECT @Rptid+1,'SalesManIncentiveMasterReport','Proc_GR_SalesManincentiveMaster','SalesMan IncentiveMaster Report','Not Available'
GO
DELETE FROM Tbl_Generic_Reports_Filters WHERE Rptname='SalesManIncentiveMasterReport'
DECLARE @Rptid INT 
SELECT @Rptid= Rptid from TBL_GENERIC_REPORTS WHERE Rptname='SalesManIncentiveMasterReport' 
INSERT INTO Tbl_Generic_Reports_Filters(RptId,FilterId,FilterCaption,ParamName,rptname)
SELECT @Rptid,1,'Salesman','Proc_GR_SalesManincentiveMaster','SalesManIncentiveMasterReport' UNION ALL
SELECT @Rptid,2,'Product Hierarchy','Proc_GR_SalesManincentiveMaster','SalesManIncentiveMasterReport'  UNION ALL
SELECT @Rptid,3,'Sales Invoice Number','Proc_GR_SalesManincentiveMaster','SalesManIncentiveMasterReport' UNION ALL
SELECT @Rptid,4,'Retailer Name','Proc_GR_SalesManincentiveMaster','SalesManIncentiveMasterReport'  UNION ALL
SELECT @Rptid,5,'Route Name','Proc_GR_SalesManincentiveMaster','SalesManIncentiveMasterReport'   UNION ALL
SELECT @Rptid,6,'Retailer Category','Proc_GR_SalesManincentiveMaster','SalesManIncentiveMasterReport' 
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Cn2CS_Prk_SalesmanIncentiveMaster]') AND type in (N'U'))
DROP TABLE [dbo].[Cn2CS_Prk_SalesmanIncentiveMaster]
GO
CREATE TABLE [dbo].[Cn2CS_Prk_SalesmanIncentiveMaster](
	[DistCode] [nvarchar](50) NULL,
	[SMIRefno] [nvarchar](100) NULL,
	[SMIRefDesc] [nvarchar](200) NULL,
	[IncMonth] [nvarchar](50) NULL,
	[Incyear] INT  NULL,
	[FixedPay] NUMERIC(36,8),
	[VariablePay] NUMERIC(36,8),
	[TotalPay] NUMERIC(36,8),
	[DownloadFlag] [varchar](1) NULL,
	[CreatedDate] [datetime] NULL
) ON [PRIMARY]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Cn2CS_Prk_SalesmanIncentiveSlabs]') AND type in (N'U'))
DROP TABLE [dbo].[Cn2CS_Prk_SalesmanIncentiveSlabs]
GO
CREATE TABLE [dbo].[Cn2CS_Prk_SalesmanIncentiveSlabs](
	[DistCode] [nvarchar](50) NOT NULL,
	[SMIRefno] [nvarchar](100) NOT NULL,
	[Slab]  TINYINT NOT NULL,
	[FromRange] NUMERIC(36,8),
	[ToRange] NUMERIC(36,8),
	[SMIncentivePerc] NUMERIC(36,8),
	[DownloadFlag] [varchar](1) NULL,
	[CreatedDate] [datetime] NULL
) ON [PRIMARY]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Cn2Cs_Prk_SMIncentiveProducts]') AND type in (N'U'))
DROP TABLE [dbo].[Cn2Cs_Prk_SMIncentiveProducts]
GO
CREATE TABLE [dbo].[Cn2Cs_Prk_SMIncentiveProducts](
	[DistCode] [nvarchar](100) NULL,
	[SMIRefno] [nvarchar](100) NULL,
	[PrdHierLevel] [nvarchar](150) NULL,
	[PrdHierValue] [nvarchar](150) NULL,
	[PrdStatus] [nvarchar](50) NULL,---Required  for  Active /Inactive
	[DownLoadFlag] [nvarchar](5) NULL,
	[CreatedDate] [datetime] NULL
) ON [PRIMARY]
GO
--Drop table SalesmanIncentiveMaster
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[SalesmanIncentiveMaster]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[SalesmanIncentiveMaster](
	[SMIRefno] [nvarchar](100) NOT NULL,
	[SMIRefDesc] [nvarchar](200) NULL,
	[IncMonth] [nvarchar](20) NOT NULL,
	[Incyear] [int] NOT NULL,
	[FixedPay] [numeric](36, 8) NULL,
	[VariablePay] [numeric](36, 8) NULL,
	[TotalPay] [numeric](36, 8) NULL,
	[SMIRefStatus] TinyInt NOT NULL, 
	[IncentiveGenerated] TinyInt NOT NULL, 
	[Upload] [tinyint] NOT NULL,
	[Availability] [tinyint] NOT NULL,
	[LastModBy] [tinyint] NOT NULL,
	[LastModDate] [datetime] NOT NULL,
	[AuthId] [tinyint] NOT NULL,
	[AuthDate] [datetime] NOT NULL,
 CONSTRAINT [PK_SalesmanIncentiveMaster_SMIRefno] PRIMARY KEY CLUSTERED 
(
	[SMIRefno] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
IF  NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[SMIncentiveProducts]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[SMIncentiveProducts](
	[SMIRefno] [nvarchar](100) NOT NULL,
	[PrdHierLevel] [int] NOT NULL,
	[PrdCtgValMainId] [int] NOT NULL,
	[Prdid] [int] NOT NULL,
	[ActStatus] [tinyint] NOT NULL,
	[Upload] [tinyint] NOT NULL,
	[Availability] [tinyint] NOT NULL,
	[LastModBy] [tinyint] NOT NULL,
	[LastModDate] [datetime] NOT NULL,
	[AuthId] [tinyint] NOT NULL,
	[AuthDate] [datetime] NOT NULL,
 CONSTRAINT [PK_SMIncentiveProducts_PrdHierLevel_PrdCtgValMainId_Prdid] PRIMARY KEY CLUSTERED 
(
	[SMIRefno] ASC,
	[PrdHierLevel] ASC,
	[PrdCtgValMainId] ASC,
	[Prdid] ASC
) ,
CONSTRAINT [FK_SalesmanIncentiveMaster_SMIRefno] FOREIGN KEY ([SMIRefno])
	REFERENCES SalesmanIncentiveMaster
	)
END
GO
IF NOT  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[SalesmanIncentiveSlabs]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[SalesmanIncentiveSlabs](
	[SMIRefno] [nvarchar](100) NOT NULL,
	[Slab] [int] NOT NULL,
	[FromRange] [numeric](36, 8) NULL,
	[ToRange] [numeric](36, 8) NULL,
	[SMIncentivePerc] [numeric](36, 8) NULL,
	[Availability] [tinyint] NULL,
	[LastModBy] [tinyint] NULL,
	[LastModDate] [datetime] NULL,
	[AuthId] [tinyint] NULL,
	[AuthDate] [datetime] NULL,
 CONSTRAINT [PK_SalesmanIncentiveSlabs_SMIRefno] PRIMARY KEY CLUSTERED 
(
	[SMIRefno] ASC,
	[Slab] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
--Drop table SalesManincentiveDetail
IF  NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[SalesManincentiveDetail]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[SalesManincentiveDetail](
	[SMIRefno] [nvarchar](100) NOT NULL,
	[IncMonth] [nvarchar](20) NOT NULL,
	[Incyear] [int] NOT NULL,
	[SMID] [int] NOT NULL,
	[AchSales] [numeric](36, 8)  NOT NULL,
	[AchSlab] INT  NOT NULL,
	[IncPerc] [numeric](36, 8) NULL,
	[IncAmount] [numeric](36, 8) NULL,
	[TotalIncAmount] [numeric](36, 4) NULL,
	[Upload] [tinyint] NOT NULL,
	[Availability] [tinyint] NOT NULL,
	[LastModBy] [tinyint] NOT NULL,
	[LastModDate] [datetime] NOT NULL,
	[AuthId] [tinyint] NOT NULL,
	[AuthDate] [datetime] NOT NULL,
 CONSTRAINT [PK_SalesManincentiveDetail_SMIRefno] PRIMARY KEY CLUSTERED 
(
	[SMIRefno] ASC,
	[IncMonth] ASC,
	[Incyear] ASC,
	[SMID] ASC
	
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
IF EXISTS (SELECT '*' FROM SYSOBJECTS WHERE NAME = 'Proc_Cn2Cs_SalesmanIncentiveMaster' AND XTYPE = 'P')
DROP PROCEDURE Proc_Cn2Cs_SalesmanIncentiveMaster
GO
/*
BEGIN TRAN
--DELETE FROM  ERRORLOG
EXEC [Proc_Cn2Cs_SalesmanIncentiveMaster] 0
SELECT * FROM SalesManIncentiveMaster
SELECT * from SalesmanIncentiveSlabs
SELECT * FROM SMincentiveProducts
select * from ERRORLOG
ROLLBACK TRAN
*/
CREATE PROCEDURE Proc_Cn2Cs_SalesmanIncentiveMaster
(
	@Po_ErrNo INT OUTPUT
)
AS
/**************************************************************************************************************************************************************************************
* PROCEDURE		: Proc_Cn2Cs_SalesmanIncentiveMaster
* PURPOSE		: To Validate SalesMan incetive Data and insert into SalesMan incentive master and detail table
* CREATED		: Govindaraj.P
* CREATED DATE	: 02/03/2018
* MODIFIED
**************************************************************************************************************************************************************************************
* VERSION    |  DATE      |	  PERSON			  | USER STORY ID  |  CR/BZ |                                    REMARKS                      | CODE REVIEW BY     | REVIEW DATE
**************************************************************************************************************************************************************************************
				16-05-2019	Govindaraj.P		CRCRSTPAR0054			 CR			SalesMan incentive Master download
**************************************************************************************************************************************************************************************/
SET NOCOUNT ON
BEGIN
	SET @Po_ErrNo=0
	DECLARE @CmpId as INT
	SELECT @CmpId=CmpId from Company Where DefaultCompany=1
	DECLARE @MaxLevel as Varchar(100)
	DECLARE @CmpPrdCtgId AS INT
	SELECT @MaxLevel=CmpPrdCtgName,@CmpPrdCtgId=CmpPrdCtgId FROM ProductCategoryLevel WHERE LevelName IN(
	SELECT Max(Levelname) FROM ProductCategoryLevel WHERE CmpId=@CmpId ) and CmpId=@CmpId
	SET @MaxLevel=ISNULL(@MaxLevel,'')
	CREATE TABLE #AvoidProgram
	(
		SMIRefno Varchar(50),
		ErrorId		TinyInt
	)
	CREATE TABLE #Cn2CS_Prk_SalesmanIncentiveMaster(
	[SMIRefno] [nvarchar](100) NULL,
	[SMIRefDesc] [nvarchar](200) NULL,
	[IncMonth] [nvarchar](50) NULL,
	[Incyear] INT  NULL,
	[FixedPay] NUMERIC(36,8),
	[VariablePay] NUMERIC(36,8),
	[TotalPay] NUMERIC(36,8),
	[DownloadFlag] [varchar](1) NULL
	)
	CREATE TABLE #Cn2CS_Prk_SalesmanIncentiveSlabs(
		[SMIRefno] [nvarchar](100) NOT NULL,
		[Slab]  TINYINT NOT NULL,
		[FromRange] NUMERIC(36,8),
		[ToRange] NUMERIC(36,8),
		[SMIncentivePerc] NUMERIC(36,8),
		[DownloadFlag] [varchar](1) NULL
	)
	
	CREATE TABLE #Cn2CS_SalesmanIncentiveProducts
	(
		[SMIRefno] [varchar](100) NOT NULL,
		[PrdHierLevel] Varchar(50) NOT NULL,
		[PrdHierValue]  Varchar(50) NOT NULL,
		PrdStatus [nvarchar](50) NULL,
		[DownloadFlag] [varchar](1) NULL
	)

	DELETE FROM Cn2CS_Prk_SalesmanIncentiveMaster WHERE DownLoadFlag='Y'
	DELETE FROM Cn2CS_Prk_SalesmanIncentiveSlabs WHERE DownLoadFlag='Y'
	DELETE FROM Cn2Cs_Prk_SMIncentiveProducts WHERE DownLoadFlag='Y'
	SELECT SMIRefno,MAX(CreatedDate) as CreatedDate INTO #PrgMaxDate FROM Cn2CS_Prk_SalesmanIncentiveMaster (NOLOCK) 
	WHERE DownLoadFlag='D' GROUP BY SMIRefno
	
	SELECT SMIRefno,Slab,MAX(CreatedDate) as CreatedDate INTO #PrgslbMxDate FROM Cn2CS_Prk_SalesmanIncentiveSlabs (NOLOCK)
	WHERE DownloadFlag='D' GROUP BY SMIRefno,Slab
	
	SELECT SMIRefno,[PrdHierLevel],[PrdHierValue],PrdStatus,MAX(CreatedDate) as CreatedDate INTO #PrgProductMaxDate 
	FROM Cn2Cs_Prk_SMIncentiveProducts (NOLOCK) WHERE DownloadFlag='D' 
	GROUP BY SMIRefno,[PrdHierLevel],[PrdHierValue],PrdStatus

	INSERT INTO #Cn2CS_Prk_SalesmanIncentiveMaster(SMIRefno,SMIRefDesc,IncMonth,Incyear,FixedPay,VariablePay,TotalPay,DownloadFlag)
	SELECT DISTINCT A.SMIRefno,SMIRefDesc,IncMonth,Incyear,FixedPay,VariablePay,TotalPay,DownloadFlag
	FROM Cn2CS_Prk_SalesmanIncentiveMaster A (NOLOCK) INNER JOIN #PrgMaxDate B ON A.SMIRefno=B.SMIRefno and A.CreatedDate=B.CreatedDate
	WHERE DownLoadFlag='D'

	INSERT INTO #Cn2CS_Prk_SalesmanIncentiveSlabs(SMIRefno,Slab,FromRange,ToRange,SMIncentivePerc,DownloadFlag)
	SELECT DISTINCT A.SMIRefno,A.Slab,FromRange,ToRange,SMIncentivePerc,DownloadFlag
	FROM Cn2CS_Prk_SalesmanIncentiveSlabs A (NOLOCK) INNER JOIN #PrgslbMxDate B ON A.SMIRefno=B.SMIRefno and A.CreatedDate=B.CreatedDate
	WHERE DownLoadFlag='D'
	
	INSERT INTO #Cn2CS_SalesmanIncentiveProducts(SMIRefno,PrdHierLevel,PrdHierValue,PrdStatus,DownLoadFlag)
	SELECT DISTINCT A.SMIRefno,A.PrdHierLevel,A.PrdHierValue,A.PrdStatus,DownLoadFlag
	FROM Cn2Cs_Prk_SMIncentiveProducts A (NOLOCK) INNER JOIN #PrgProductMaxDate B ON A.SMIRefno=B.SMIRefno and A.CreatedDate=B.CreatedDate
	WHERE DownLoadFlag='D'
	
	SELECT DISTINCT A.SMIRefno INTO #SalesManIncentiveMaster
	FROM #Cn2CS_Prk_SalesmanIncentiveMaster A INNER JOIN #Cn2CS_Prk_SalesmanIncentiveSlabs B ON A.SMIRefno=B.SMIRefno
	INNER JOIN #Cn2CS_SalesmanIncentiveProducts C ON C.SMIRefno=A.SMIRefno and C.SMIRefno=B.SMIRefno 
	
	SELECT DISTINCT A.SMIRefno,A.IncMonth,A.Incyear INTO #SalesManIncentiveMasterMonth
	FROM #Cn2CS_Prk_SalesmanIncentiveMaster A 
	INNER JOIN SalesmanIncentiveMaster SM  ON A.IncMonth=Sm.IncMonth AND A.Incyear=Sm.Incyear
	
	INSERT INTO #AvoidProgram(ErrorId,SMIRefno)
	SELECT DISTINCT 1, A.SMIRefno FROM #Cn2CS_Prk_SalesmanIncentiveMaster  A WHERE EXISTS(SELECT  SMIRefno FROM SalesmanIncentiveMaster B (NOLOCK) WHERE A.SMIRefno=B.SMIRefno)
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 1,'SalesManIncentiveMaster','IncentiveMaster','Incentive Master Already downloaded: '+ A.SMIRefno
	FROM #Cn2CS_Prk_SalesmanIncentiveMaster  A WHERE  EXISTS(SELECT  SMIRefno FROM SalesmanIncentiveMaster B (NOLOCK) WHERE A.SMIRefno=B.SMIRefno)
	
	--INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	--SELECT DISTINCT 1,'SalesManIncentiveMaster','IncentiveMaster','IncentiveMonth  Already downloaded for different Incentive RefNo: '+ B.SMIRefno
	--FROM #SalesManIncentiveMasterMonth B WHERE  EXISTS(SELECT  SMIRefno FROM #Cn2CS_Prk_SalesmanIncentiveMaster A (NOLOCK) WHERE A.SMIRefno=B.SMIRefno)
	--DELETE A FROM #Cn2CS_Prk_SalesmanIncentiveMaster A  INNER JOIN #SalesManIncentiveMasterMonth SS  ON A.IncMonth=SS.IncMonth AND A.Incyear=SS.Incyear
	--AND A.SMIRefno=SS.SMIRefno
	SELECT DISTINCT Smirefno INTO #ExistsIncentiveMaster
	FROM(
		SELECT DISTINCT A.SMIRefno FROM #Cn2CS_Prk_SalesmanIncentiveMaster A 
		INNER JOIN SalesManIncentiveMaster B ON A.SMIRefno=B.SMIRefno
		UNION ALL
		SELECT DISTINCT A.SMIRefno FROM #Cn2CS_Prk_SalesmanIncentiveSlabs A 
		INNER JOIN SalesmanIncentiveSlabs B ON A.SMIRefno=B.SMIRefno
		UNION ALL
		SELECT DISTINCT A.SMIRefno FROM #Cn2CS_SalesmanIncentiveProducts A 
		INNER JOIN SMIncentiveProducts B ON A.SMIRefno=B.SMIRefno	
	)X	
	--UPDATE D SET D.ActStatus =CASE ISNULL(J.PrdStatus,'ACTIVE') WHEN'ACTIVE' THEN 1 ELSE 0 END,
	--LastModDate=GETDATE()
	--FROM SMIncentiveProducts D 
	--INNER JOIN #Cn2CS_Prk_SalesmanIncentiveMaster F ON F.SMIRefno=D.SMIRefno
	--INNER JOIN #Cn2CS_SalesmanIncentiveProducts J ON  J.SMIRefno=F.SMIRefno and J.SMIRefno=D.SMIRefno
	--INNER JOIN  ProductcategoryLevel E ON D.PrdHierLevel=E.CmpPrdCtgId and E.CmpPrdCtgName=J.PrdHierLevel
	--INNER JOIN ProductCategoryValue C ON C.CmpPrdCtgId=D.PrdHierLevel AND C.CmpPrdCtgId=E.CmpPrdCtgId  AND D.PrdCtgValMainId=C.PrdCtgValMainId
	--AND J.PrdHierValue=C.PrdCtgValCode
	--WHERE ISNULL(J.PrdHierLevel,'')<>@MaxLevel 
	--UPDATE D SET D.ActStatus =CASE ISNULL(J.PrdStatus,'ACTIVE') WHEN'ACTIVE' THEN 1 ELSE 0 END,
	--LastModDate=GETDATE() FROM SMIncentiveProducts D 
	--INNER JOIN #Cn2CS_Prk_SalesmanIncentiveMaster F ON F.SMIRefno=F.SMIRefno
	--INNER JOIN #Cn2CS_SalesmanIncentiveProducts J ON  F.SMIRefno=J.SMIRefno and F.SMIRefno=D.SMIRefno
	--INNER JOIN  ProductcategoryLevel E ON D.PrdHierLevel=E.CmpPrdCtgId and E.CmpPrdCtgName=J.PrdHierLevel
	--INNER JOIN Product C ON  C.PrdId=D.Prdid AND J.PrdHierValue=C.PrdCCode
	--WHERE ISNULL(J.PrdHierLevel,'')=@MaxLevel 
	--Existing Incentive Product  or  Category Addition
	INSERT INTO SMIncentiveProducts(SMIRefno,PrdHierLevel,PrdCtgValMainId,Prdid,ActStatus,Upload,
	Availability,LastModBy,LastModDate,AuthId,AuthDate)
	SELECT DISTINCT A.SMIRefno,B.CmpPrdCtgId,C.PrdCtgValMainId,0 AS PrdId,
	CASE ISNULL(A.PrdStatus,'ACTIVE') WHEN'ACTIVE' THEN 1 ELSE 0 END as ActStatus,	
	0 as [Upload],1 AS Availability,1 AS LastModBy,CONVERT(VARCHAR(10),GETDATE(),121) AS LastModBy,1 AS AuthId, 
	CONVERT(VARCHAR(10),GETDATE(),121) AS AuthDate	FROM #Cn2CS_SalesmanIncentiveProducts A 
	INNER JOIN SalesmanIncentiveMaster F (NOLOCK) ON A.SMIRefno=F.Smirefno
	INNER JOIN ProductcategoryLevel B ON A.PrdHierLevel=B.CmpPrdCtgName
	INNER JOIN ProductCategoryValue C ON C.CmpPrdCtgId=B.CmpPrdCtgId  AND A.PrdHierValue=C.PrdCtgValCode
	AND  EXISTS (SELECT SMIRefno FROM SMIncentiveProducts S  WHERE S.SMIRefno=F.Smirefno)
	AND NOT EXISTS (SELECT SMIRefno FROM SMIncentiveProducts S  WHERE S.PrdCtgValMainId<>C.PrdCtgValMainId)
	UNION
	SELECT DISTINCT A.SMIRefno,B.CmpPrdCtgId,0 AS PrdCtgValMainId,C.PrdId,
	CASE ISNULL(A.PrdStatus,'ACTIVE') WHEN 'ACTIVE' THEN 1 ELSE 0 END as ActStatus,0 as Upload,1 AS Availability,1 AS LastModBy,
	CONVERT(VARCHAR(10),GETDATE(),121) AS LastModBy,1 AS AuthId, CONVERT(VARCHAR(10),GETDATE(),121) AS AuthDate
	FROM #Cn2CS_SalesmanIncentiveProducts A  
	INNER JOIN SalesmanIncentiveMaster F (NOLOCK) ON A.SMIRefno=F.SMIRefno
	INNER JOIN ProductcategoryLevel B ON A.PrdHierLevel=B.CmpPrdCtgName
	INNER JOIN Product C ON A.PrdHierValue=C.PrdCCode
	WHERE B.CmpPrdCtgId=@CmpPrdCtgId
	AND  EXISTS (SELECT SMIRefno FROM SMIncentiveProducts S  WHERE S.SMIRefno=F.Smirefno)
	AND NOT EXISTS (SELECT SMIRefno FROM SMIncentiveProducts S  WHERE S.Prdid<>C.Prdid)


	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 1,'Incentive Products','Details','incentive  Product Categroy Level not Available for Program: '+ A.SMIRefno
	FROM #Cn2CS_SalesmanIncentiveProducts A WHERE NOT EXISTS(SELECT  CmpPrdCtgName FROM ProductCategoryLevel B (NOLOCK) WHERE ISNULL(A.PrdHierLevel,'')=B.CmpPrdCtgName)
	
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 1,'Incentive Products','Details','Product Category:'+ PrdHierValue + ' not Available for the IncentiveRefno:'+SMIRefno
	FROM #Cn2CS_SalesmanIncentiveProducts A 
	WHERE NOT EXISTS(SELECT PrdHierValue FROM ProductCategoryValue B (NOLOCK) WHERE A.PrdHierValue=B.PrdCtgValCode)
	and ISNULL(A.PrdHierLevel,'')<> @MaxLevel  and ISNULL(A.PrdHierValue,'')<>'ALL'
	DELETE A FROM #Cn2CS_Prk_SalesmanIncentiveMaster A 
	WHERE NOT EXISTS(SELECT B.SMIRefno FROM #SalesManIncentiveMaster B WHERE A.SMIRefno=B.SMIRefno)
	DELETE A FROM #Cn2CS_Prk_SalesmanIncentiveSlabs A 
	WHERE NOT EXISTS(SELECT B.SMIRefno FROM #SalesManIncentiveMaster B WHERE A.SMIRefno=B.SMIRefno)
	DELETE A FROM #Cn2CS_SalesmanIncentiveProducts A 
	WHERE NOT EXISTS(SELECT B.SMIRefno FROM #SalesManIncentiveMaster B WHERE A.SMIRefno=B.SMIRefno)
	---SalesManIncentive Master Mandatory Column Validate		
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 1,'SalesManincentiveMaster','SalesManincentiveMaster','Smirefno,Smirefnodesc,Smirefno Details Should not be empty' 
	FROM #Cn2CS_Prk_SalesmanIncentiveMaster
	WHERE (RTRIM(LTRIM(ISNULL(SMIRefno,'')))='' 
	OR RTRIM(LTRIM(ISNULL([SMIRefDesc],'')))='' 
	OR RTRIM(LTRIM(ISNULL([IncMonth],'')))=''
	OR RTRIM(LTRIM(ISNULL([Incyear],'')))='')
	
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 1,'SalesManincentiveMaster','SalesManincentiveMaster','Smirefno,Smirefnodesc,Fixed Pay  Details Should not be empty  or Zero' 
	FROM #Cn2CS_Prk_SalesmanIncentiveMaster	WHERE 
	(ISNULL([FixedPay],0)=0 OR  ISNULL([VariablePay],0)=0.00 OR ISNULL([TotalPay],0)=0.00 )
	--SalesManIncentiveSlabs Mandatory Column Validate
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 1,'SalesManincentiveMasterSlabs','SalesManincentiveMaster','SalesManIncentiveSlabs Mandatory Details Should not be empty' 
	FROM #Cn2CS_Prk_SalesmanIncentiveSlabs WHERE (RTRIM(LTRIM(ISNULL([SMIRefno],'')))='' OR RTRIM(LTRIM(ISNULL(Slab,0)))='' 
	OR RTRIM(LTRIM(ISNULL(FromRange,0)))='' OR RTRIM(LTRIM(ISNULL(ToRange,0)))='' OR ISNULL(SMIncentivePerc,0)<=0)	
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 1,'SalesManincentiveMasterproducts','SalesManincentiveMasterproducts',' Details Should not be empty' 
	FROM #Cn2CS_SalesmanIncentiveProducts
	WHERE (RTRIM(LTRIM(ISNULL([SMIRefno],'')))='' OR RTRIM(LTRIM(ISNULL([PrdHierLevel],'')))='' 
	OR RTRIM(LTRIM(ISNULL([PrdHierValue],'')))='')
	DELETE A FROM #Cn2CS_SalesmanIncentiveProducts A
	WHERE (RTRIM(LTRIM(ISNULL([SMIRefno],'')))='' OR RTRIM(LTRIM(ISNULL([PrdHierLevel],'')))='' 
	OR RTRIM(LTRIM(ISNULL([PrdHierValue],'')))='')
	INSERT INTO #AvoidProgram(SMIRefno,ErrorId)
	SELECT DISTINCT SMIRefno ,2  FROM #Cn2CS_SalesmanIncentiveProducts A 
	WHERE NOT EXISTS(SELECT  CmpPrdCtgName FROM ProductCategoryLevel B (NOLOCK) WHERE ISNULL(A.PrdHierLevel,'')=B.CmpPrdCtgName) 
--Incentive Header		
	INSERT INTO SalesmanIncentiveMaster(SMIRefno,SMIRefDesc,IncMonth,Incyear,FixedPay,VariablePay,TotalPay,
	SMIRefStatus,IncentiveGenerated,Upload,Availability,LastModBy,LastModDate,AuthId,AuthDate)
	SELECT DISTINCT A.SMIRefno,SMIRefDesc,IncMonth,Incyear,FixedPay,VariablePay,TotalPay,1 AS Active,0 as IncentiveGenerated,
	0 as Upload,1 as Availability,1 as LastModBy,Getdate() LastModdate,1 as AuthId,Getdate() Authdate
	FROM #Cn2CS_Prk_SalesmanIncentiveMaster A 	
	INNER JOIN(SELECT DISTINCT SMIRefno FROM #Cn2CS_Prk_SalesmanIncentiveSlabs) B ON A.SMIRefno=B.SMIRefno
	INNER JOIN(SELECT DISTINCT SMIRefno FROM #Cn2CS_SalesmanIncentiveProducts) C ON C.SMIRefno=B.SMIRefno and C.SMIRefno=A.SMIRefno
	where not exists (select * from #AvoidProgram x where A.SMIRefno = X.SMIRefno)


	
	CREATE TABLE #SMIncentive
	( 
	 Slno int identity(1,1),
	 IncMonth VARCHAR(100),
	 IncYear INT,
	 SMIRefno VARCHAR(100)
	 )
	INSERT INTO  #SMIncentive(IncMonth,IncYear,SMIRefno)
	SELECT IncMonth,IncYear,SMIRefno FROM  Cn2CS_Prk_SalesmanIncentiveMaster
	IF EXISTS(SELECT S.IncMonth,Count(S.IncMonth) from Cn2CS_Prk_SalesmanIncentiveMaster  S  INNER JOIN #SMIncentive SM  ON S.IncMonth=SM.IncMonth AND S.IncYear=SM.IncYear
	Group by S.IncMonth HAVING Count(S.IncMonth)>1)
	BEGIN
	   SELECT IncMonth,IncYear, SMIRefno Into #DuplicateRef from  #SMIncentive WHERE SMIRefno NOT IN (SELECT MAX(SMIRefno) FROM  Cn2CS_Prk_SalesmanIncentiveMaster)
	   Group by IncMonth,IncYear,SMIRefno
	   
	   UPDATE  SalesmanIncentiveMaster SET SMIRefStatus =0 FROM SalesmanIncentiveMaster SM INNER JOIN  #DuplicateRef D ON SM.SMiREfno=D.SMIRefno
	   AND SM.IncMonth=D.IncMonth AND SM.IncYear=D.Incyear
	END
	CREATE TABLE #SMIncentiveMain
	( 
	 Slno int identity(1,1),
	 IncMonth VARCHAR(100),
	 IncYear INT,
	 SMIRefno VARCHAR(100)
	 )
	INSERT INTO  #SMIncentiveMain(IncMonth,IncYear,SMIRefno)
	SELECT IncMonth,IncYear,SMIRefno FROM  SalesmanIncentiveMaster (NOLOCK)
	IF EXISTS(SELECT S.IncMonth,Count(S.IncMonth) from SalesmanIncentiveMaster  S  
	INNER JOIN #SMIncentive SM  ON S.IncMonth=SM.IncMonth AND S.IncYear=SM.IncYear
	Group by S.IncMonth HAVING Count(S.IncMonth)>1)
	BEGIN
		SELECT IncMonth,IncYear, SMIRefno Into #DuplicateMainRef from  #SMIncentiveMain 
		WHERE SMIRefno NOT IN (SELECT MAX(SMIRefno) FROM  SalesmanIncentiveMaster)
		Group by IncMonth,IncYear,SMIRefno
	    UPDATE  SalesmanIncentiveMaster SET SMIRefStatus =0 FROM SalesmanIncentiveMaster SM 
	    INNER JOIN  #DuplicateMainRef D ON SM.SMiREfno=D.SMIRefno
		AND SM.IncMonth=D.IncMonth AND SM.IncYear=D.Incyear
	END


	---Incentive Slabs
	INSERT INTO SalesmanIncentiveSlabs(SMIRefno,Slab,FromRange,ToRange,SMIncentivePerc,Availability,LastModBy,LastModDate,AuthId,AuthDate)
	SELECT DISTINCT A.SMIRefno,Slab,FromRange,ToRange,SMIncentivePerc,1 as Availability, 1 as LastModBy,Getdate() LastModdate,1 as AuthId,Getdate() Authdate
	FROM #Cn2CS_Prk_SalesmanIncentiveSlabs A 
	INNER JOIN(SELECT DISTINCT SMIRefno FROM #Cn2CS_Prk_SalesmanIncentiveMaster) B ON A.SMIRefno=B.SMIRefno
	INNER JOIN(SELECT DISTINCT SMIRefno FROM #Cn2CS_SalesmanIncentiveProducts) C ON C.SMIRefno=B.SMIRefno and C.SMIRefno=A.SMIRefno
	WHERE NOT EXISTS (select * from #AvoidProgram x where A.SMIRefno = X.SMIRefno)
--Incentive Products or category level 
	INSERT INTO SMIncentiveProducts(SMIRefno,PrdHierLevel,PrdCtgValMainId,Prdid,ActStatus,
	Upload,Availability,LastModBy,LastModDate,AuthId,AuthDate)
	SELECT DISTINCT A.SMIRefno,B.CmpPrdCtgId,C.PrdCtgValMainId,0 AS PrdId,
	CASE ISNULL(A.PrdStatus,'ACTIVE') WHEN'ACTIVE' THEN 1 ELSE 0 END as ActStatus,0 as [Upload],1 AS Availability,1 AS LastModBy,
	CONVERT(VARCHAR(10),GETDATE(),121) AS LastModBy,1 AS AuthId, CONVERT(VARCHAR(10),GETDATE(),121) AS AuthDate						
	FROM #Cn2CS_SalesmanIncentiveProducts A 
	INNER JOIN SalesmanIncentiveMaster F (NOLOCK) ON A.SMIRefno=F.Smirefno
	INNER JOIN ProductcategoryLevel B ON  A.PrdHierLevel=B.CmpPrdCtgName
	INNER JOIN ProductCategoryValue C ON C.CmpPrdCtgId=B.CmpPrdCtgId  AND A.PrdHierValue=C.PrdCtgValCode
	UNION ALL
	SELECT DISTINCT A.SMIRefno,B.CmpPrdCtgId,0 AS PrdCtgValMainId,C.PrdId,
	CASE ISNULL(A.PrdStatus,'ACTIVE') WHEN 'ACTIVE' THEN 1 ELSE 0 END as ActStatus,
	0 as Upload,1 AS Availability,1 AS LastModBy,
	CONVERT(VARCHAR(10),GETDATE(),121) AS LastModBy,1 AS AuthId, CONVERT(VARCHAR(10),GETDATE(),121) AS AuthDate 
	FROM #Cn2CS_SalesmanIncentiveProducts A  
	INNER JOIN SalesmanIncentiveMaster F (NOLOCK) ON A.SMIRefno=F.SMIRefno
	INNER JOIN ProductcategoryLevel B ON A.PrdHierLevel=B.CmpPrdCtgName
	INNER JOIN Product C ON A.PrdHierValue=C.PrdCCode
	WHERE B.CmpPrdCtgId=@CmpPrdCtgId

	DELETE a from SalesmanIncentiveSlabs A 
	WHERE NOT EXISTS (select * from SMIncentiveProducts B WHERE A.SMIRefno = B.SMIRefno)
	DELETE a  from SalesmanIncentiveMaster A 
	WHERE NOT EXISTS (select * from SalesmanIncentiveSlabs B WHERE A.SMIRefno = B.SMIRefno)


		
	SELECT DISTINCT S.SMIRefno INTO #T 
	FROM  SalesmanIncentiveMaster S (NOLOCK)
	INNER JOIN SMIncentiveProducts SS (NOLOCK) ON SS.SMIRefno=S.SMIRefno
	INNER JOIN SalesmanIncentiveSlabs SP (NOLOCK) ON SP.SMIRefno=S.SMIRefno AND SP.SMIRefno=S.SMIRefno

				
	UPDATE C SET DownloadFlag='Y' FROM Cn2CS_Prk_SalesmanIncentiveMaster C 
	INNER JOIN #T S (NOLOCK) ON C.SMIRefno=S.SMIRefno
	
	
	UPDATE C SET DownloadFlag='Y' FROM Cn2Cs_Prk_SMIncentiveProducts C 
	INNER JOIN #T S (NOLOCK) ON C.SMIRefno=S.SMIRefno
	
	UPDATE Cn2CS_Prk_SalesmanIncentiveSlabs SET DownloadFlag='Y' FROM Cn2CS_Prk_SalesmanIncentiveSlabs C 
	INNER JOIN #T S (NOLOCK) ON C.SMIRefno=S.SMIRefno
	
RETURN
END
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Cs2cn_Prk_SalesManIncentive]') AND type in (N'U'))
DROP TABLE [dbo].[Cs2cn_Prk_SalesManIncentive]
GO
CREATE TABLE [dbo].[Cs2cn_Prk_SalesManIncentive](
	[SlNo] [numeric](38, 0) IDENTITY(1,1) NOT NULL,
	[DistCode] [nvarchar](50) NULL,
	[SMIRef]   [nvarchar](100) NULL,
	[SMIRefDesc]   [nvarchar](100) NULL,
	[SMCode]   [nvarchar](100) NULL,
	[SMName]   [nvarchar](100) NULL,
	[IncMonth]	VARCHAR(50),
	[IncYear]   INT,
	[TotalAchSales] NUMERIC(18,6),
	[AchSlab]	VARCHAR(100),
	[FromSlab]  NUMERIC(18,6),
	[ToSlab]	NUMERIC(18,6),
	[FixedPay]	NUMERIC(18,6),
	[VariablePay]NUMERIC(18,6),
	[IncPerc] NUMERIC(18,6),
	[IncAmount] NUMERIC(18,6),
	[TotalIncAmount] [numeric](36, 4) NULL,
	[UploadFlag] [nvarchar](10) NULL,
	[SyncId] [numeric](38, 0) NULL,
	[ServerDate] [datetime] NULL
) ON [PRIMARY]
GO
IF EXISTS(SELECT 'X' FROM SYSOBJECTS WHERE XTYPE='P' AND NAME='Proc_Cs2Cn_SalesManIncentive')
DROP PROCEDURE Proc_Cs2Cn_SalesManIncentive
GO
CREATE PROCEDURE [Proc_Cs2Cn_SalesManIncentive]
(
	@Po_ErrNo INT OUTPUT,
	@ServerDate DATETIME 
)
AS
/*******************************************************************************************************************
* PROCEDURE: Proc_Cs2Cn_SalesManIncentive  
* PURPOSE: Upload Incentive Payout 
* NOTES:  
* CREATED: Govindaraj.P
* DATE  : 23-05-2019
* MODIFIED  
* DATE       AUTHOR		CR\BUG			[USER STORY ID]					DESCRIPTION  
* 23-05-2019 23-05-2019 	CR			CRCRSTPAR0054 					 SMwise incentive Upload 
**********************************************************************************************************************/
SET NOCOUNT ON 
BEGIN
	DECLARE @Distcode AS Varchar(50)
  	SET @Po_ErrNo=0
  	SELECT @Distcode=DistributorCode FROM Distributor
	DELETE FROM Cs2cn_Prk_SalesManIncentive WHERE UploadFlag='Y'
	
	
	CREATE TABLE #Cs2cn_Prk_SalesManIncentive
	(	
		[DistCode] [nvarchar](50) NULL,
		[SMIRef]   [nvarchar](100) NULL,
		[SMIRefDesc]   [nvarchar](100) NULL,
		[SMCode]   [nvarchar](100) NULL,
		[SMName]   [nvarchar](200) NULL,
		[IncMonth] VARCHAR(50),
		[IncYear]   INT,
		[TotalAchSales] NUMERIC(18,6),
		[AchSlab] INT,
		[FromSlab]  NUMERIC(18,6),
		[ToSlab] NUMERIC(18,6),
		[FixedPay] NUMERIC(18,6),
		[VariablePay] NUMERIC(18,6),
		[IncPerc] NUMERIC(18,6),
		[IncAmount] NUMERIC(18,6),
		[TotalIncAmount] NUMERIC(18,6),
		[UploadFlag] [nvarchar](10) NULL,
		[SyncId] [numeric](38, 0) NULL,
		[ServerDate] [datetime] NULL
	) 
	
	SELECT S.SMIRefno,SD.AchSlab,SD.Smid,CAST (S.FromRange AS VARCHAR(100)) as  FromRange, CAST (S.ToRange AS VARCHAR(100)) ToRange into #slabs from SalesmanIncentiveSlabs S INNER JOIN SalesManincentiveDetail SD ON S.SMIRefno=SD.SMIRefno
	AND S.Slab=SD.AchSlab 
	INNER JOIN SalesmanincentiveMaster SM ON SM.SMIRefno=S.SMIRefno AND SM.SMIRefno=SD.SMIRefno
	WHERE SM.upload=0
		
	INSERT INTO  #Cs2cn_Prk_SalesManIncentive (DistCode,SMIRef,SMIRefDesc,SMCode,SMName,IncMonth,IncYear,TotalAchSales,AchSlab,FromSlab,ToSlab,FixedPay,VariablePay,IncPerc,IncAmount,
	[TotalIncAmount],[UploadFlag],ServerDate)
	SELECT @Distcode,S.SMIRefno,SS.SMIRefDesc,Sm.Smcode,SM.SMName,S.IncMonth,S.Incyear,S.AchSales,S.AchSlab,SL.FromRange,SL.ToRange,SS.FixedPay,SS.VariablePay,S.IncPerc,S.IncAmount,
	[TotalIncAmount],'N',@ServerDate
	FROM SalesManincentiveDetail S 	INNER JOIN  SalesMan SM  on SM.SMID=S.Smid
	INNER JOIN SalesmanincentiveMaster SS ON S.SMIRefno=SS.SMIRefno AND S.IncMonth=SS.IncMonth AND S.IncYear=SS.IncYear
	INNER JOIN #slabs SL ON SL.SMIRefno=SS.SMIRefno AND S.SMIRefno=Sl.SMIRefno AND SM.SMID=SL.SMID
	WHERE S.upload=0
	
	INSERT INTO Cs2cn_Prk_SalesManIncentive (DistCode,SMIRef,SMIRefDesc,SMCode,SMName,IncMonth,IncYear,TotalAchSales,AchSlab,FromSlab,ToSlab,FixedPay,VariablePay,IncPerc,
	IncAmount,[TotalIncAmount],UploadFlag,ServerDate)
	SELECT DistCode,SMIRef,SMIRefDesc,SMCode,SMName,IncMonth,IncYear,TotalAchSales,'SLAB'+'-'+CAST(AchSlab AS VARCHAR(10)),FromSlab,ToSlab,FixedPay,VariablePay,IncPerc,IncAmount,[TotalIncAmount],[UploadFlag],ServerDate  FROM #Cs2cn_Prk_SalesManIncentive
	
	Update SalesManincentiveDetail SET Upload=1  FROM SalesManincentiveDetail S INNER JOIN Cs2cn_Prk_SalesManIncentive CS ON S.SMIRefno=CS.SMIRef
	AND S.upload=0

	RETURN  	
END
GO
IF EXISTS (SELECT '*' FROM SYSOBJECTS WHERE NAME = 'Proc_GR_SalesManincentiveMaster' AND XTYPE = 'P')
DROP PROCEDURE Proc_GR_SalesManincentiveMaster
GO
 /*
BEGIN TRAN
	DELETE FROM SalesManincentiveDetail
	Exec Proc_GR_SalesManincentiveMaster 'SalesManincentiveMaster','2019-07-01','2019-07-14','','','','','',''
ROLLBACK TRAN 
*/
CREATE PROCEDURE [Proc_GR_SalesManincentiveMaster]
(    
  @Pi_RptName  NVARCHAR(100),    
  @Pi_FromDate DATETIME,    
  @Pi_ToDate   DATETIME,    
  @Pi_Filter1  NVARCHAR(100),    
  @Pi_Filter2  NVARCHAR(100),
  @Pi_Filter3  NVARCHAR(100),
  @Pi_Filter4  NVARCHAR(100),
  @Pi_Filter5  NVARCHAR(100),
  @Pi_Filter6  NVARCHAR(100)
)
/*********************************
* PROCEDURE	: Proc_GR_SalesManincentiveMaster
* PURPOSE	: Incentive Report
* CREATED	: Govindaraj.P
* CREATED DATE	: 23-05-2019
* MODIFIED
* DATE				 AUTHOR				CR\BUG								DESCRIPTION
------------------------------------------------
* {date}			{developer}			CR\BUG								{brief modification description}
* 23/05/2019		govindaraj.P			CRCRSTPAR0054 						SalesManincentiveMaster report
*********************************/    
AS     
BEGIN    
	SET @Pi_FILTER1='%'+ISNULL(@Pi_FILTER1,'')+'%'            
	SET @Pi_FILTER2='%'+ISNULL(@Pi_FILTER2,'')+'%'
	SET @Pi_FILTER3='%'+ISNULL(@Pi_FILTER3,'')+'%'             
	SET @Pi_FILTER4='%'+ISNULL(@Pi_FILTER4,'')+'%' 
	SET @Pi_FILTER5='%'+ISNULL(@Pi_FILTER5,'')+'%'      
	SET @Pi_FILTER6='%'+ISNULL(@Pi_FILTER6,'')+'%' 
	
	DECLARE @Month VARCHAR(100)
	DECLARE @Year INT
	SET @Month=DATENAME(MM,@Pi_FromDate)
	SET @Year=YEAR(@Pi_FromDate)
	
	
  SELECT Smirefno,[Level],[Category Code],[Category Name],[Product Code],[Product Name],[Status] INTO #SMincentiveProducts  FROM (
	SELECT B.Smirefno,CASE B.PrdHierLevel WHEN 2  THEN '[Category-LEVEL]' WHEN 3 THEN '[BRAND-LEVEL]'
	WHEN 4 THEN '[PriceSlot-LEVEL]'
	WHEN 5 THEN '[Flavor-LEVEL]'  END AS [Level] ,C.PrdCtgValCode As [Category Code], C.prdctgvalname  AS [Category Name],
	E.PrdCCode as [Product Code],E.PrdName as [Product Name],
	CASE SMIRefStatus WHEN 0 THEN 'InActive' ELSE 
	CASE B.ActStatus WHEN 0 THEN 'InActive' ELSE 'Active' END END [Status]  
	FROM SMincentiveProducts  B
	INNER JOIN SalesManIncentiveMaster SS ON SS.SMIRefno=B.Smirefno 
	INNER JOIN ProductCateGOryValue C (Nolock) ON B.PrdCtgValMainId = C.PrdCtgValMainId 
	INNER JOIN ProductCateGOryValue D (Nolock) ON D.PrdCtgValLinkCode  LIKE Cast(c.PrdCtgValLinkCode as nvarchar(1000)) + '%'
	INNER JOIN Product E  (Nolock) On	D.PrdCtgValMainId = E.PrdCtgValMainId
	WHERE IncMonth=@Month AND  IncYear=@Year
	AND SS.SMIRefno Like @Pi_Filter1
	UNION
	SELECT DISTINCT  B.Smirefno, '[Product LEVEL]' AS [Level] ,'' as [Category Code], '' as [Category Name],	  	
	E.PrdCCode AS [Product Code],E.PrdName  AS [Product Name], 
	CASE SMIRefStatus WHEN 0 THEN 'InActive' ELSE 
	CASE B.ActStatus WHEN 0 THEN 'InActive' ELSE 'Active' END END As [Status]  
	FROM SMincentiveProducts  B
	INNER JOIN SalesManIncentiveMaster SS ON SS.SMIRefno=B.Smirefno 
	INNER JOIN Product E  (Nolock) On	b.Prdid = E.Prdid  
	WHERE IncMonth=@Month AND  IncYear=@Year
	AND SS.SMIRefno Like @Pi_Filter1 ) A
	
	-----SalesManIncentiveMaster
	SELECT 'SALESMAN INCENTIVE MASTER ',A.SMIRefno as [SalesManIncentiveRefno],SMIRefDesc as [SalesManIncentiveRefno desc], IncMonth AS [IncMonth], IncYear AS [IncYear],
	FixedPay,VariablePay,B.FromRange As [From Range] , B.ToRange As [To Range],B.SMIncentivePerc as [IncPercentage],CASE SMIRefStatus WHEN 0 THEN 'InActive' ELSE 'ACTIVE' END SMIncentiveStatus
	FROM SalesmanIncentiveMaster A (NOLOCK)  INNER JOIN SalesManincentiveSlabs B ON A.SMIREFno=B.SMIRefno
	WHERE IncMonth=@Month AND  IncYear=@Year
	AND A.SMIRefno Like @Pi_Filter1
	ORDER BY  A.SMIRefno
	-----SalesManIncentiveBrand
    SELECT 'INCENTIVE PRODUCT  OR BRAND LEVEL ',*  FROM  #SMincentiveProducts
    -----------------Incentive Running Ach
		SELECT  SMIRefno,incmonth,Incyear ,SMID into  #SalesManIncentiveMaster  FROM SalesManIncentiveMaster CROSS JOIN 
		SalesMan WHERE  SMCODE NOT IN('SMDUMMY01') AND IncMonth=@Month AND Incyear=@Year
		AND SMIrefStatus=1
						
		SELECT  A.Prdid,SmiRefno INTO  #IncentiveProducts FROM (
			SELECT DISTINCT E.Prdid  AS Prdid,SS.SmiRefno  FROM SMincentiveProducts  B
			INNER JOIN #SalesManIncentiveMaster SS ON SS.SMIRefno=B.Smirefno 
			INNER JOIN ProductCateGOryValue C (Nolock) ON B.PrdCtgValMainId = C.PrdCtgValMainId 
			INNER JOIN ProductCateGOryValue D (Nolock) ON D.PrdCtgValLinkCode  LIKE Cast(c.PrdCtgValLinkCode as nvarchar(1000)) + '%'
			INNER JOIN Product E  (Nolock) On	D.PrdCtgValMainId = E.PrdCtgValMainId  
			WHERE SS.IncMonth=@Month AND Incyear=@Year AND B.ActStatus=1
		UNION
			SELECT DISTINCT E.Prdid  AS Prdid,SS.SmiRefno   FROM SMincentiveProducts  B
			INNER JOIN #SalesManIncentiveMaster SS ON SS.SMIRefno=B.Smirefno 
			INNER JOIN Product E  (Nolock) On	E.Prdid = B.Prdid
			WHERE SS.IncMonth=@Month AND Incyear=@Year AND B.ActStatus=1) A


		CREATE TABLE #SMIncentive(
			SMIrefno		VARCHAR(100),
			SMID			INT,
			Sales			NUMERIC(18,3),
			[Return]		NUMERIC(18,3)
		)
			

			INSERT INTO #SMIncentive(SMIrefno,SMID,Sales,[Return])	
			SELECT DISTINCT A.SMIRefno,A.SMID,0,0  FROM #SalesManIncentiveMaster A
			CROSS JOIN (Select Smid From Salesman where SMCode not in('SMDummy01') ) B
		
		--INSERT INTO #SMIncentive(SMIrefno,SMID,Sales,[Return])			
		SELECT SMIrefno,SMID,SUM(Sales) Sales,SUM([Return]) [Return]  into #SMIncentive1 
		FROM (
			SELECT IP.SMIRefno as  SMIRefno ,SS.SMID,Sum(Sip.prdnetamount)  Sales ,0 AS [Return] 
			FROM SalesInvoice SS (NOLOCK) INNER JOIN Salesinvoiceproduct  SIP (NOLOCK) 
			ON SS.Salid=Sip.Salid
			INNER JOIN #IncentiveProducts IP (NOLOCK)  ON   IP.Prdid=Sip.prdid 
			WHERE SS.Dlvsts>3 AND DATENAME(MM,SS.SalInvDate)=@Month AND Year(SS.Salinvdate)=@Year
			GROUP  by SS.SMID,IP.SMIRefno
			UNION ALL
			SELECT IP.SMIRefno as SMIRefno ,SS.SMID,0  as Sales,Sum(Sip.prdnetamt)  [Return]  
			FROM Returnheader SS (NOLOCK) INNER JOIN Returnproduct  SIP (NOLOCK) 
			ON SS.returnid=Sip.returnid and StockTypeId IN (SELECT StockTypeId FROM STOCKTYPE WHERE SystemStockType = 1)  
			INNER JOIN #IncentiveProducts IP (NOLOCK)  ON   IP.Prdid=Sip.prdid 
			
			WHERE SS.Status=0 AND DATENAME(MM,SS.REturndate)=@Month AND Year(SS.REturndate)=@Year
			GROUP  by SS.SMID,IP.SMIRefno ) A 
			GROUP BY A.SMID,SMIrefno

		UPDATE A SET A.SALES=B.SALES,A.[Return]=B.[RETURN] FROM #SMIncentive A
		INNER JOIN #SMIncentive1 B ON A.SMIrefno=B.SMIRefno AND A.SMID=B.SMID

		----Added by S.Moorthi
		SELECT DISTINCT SMID INTO #SMNoSales FROM #SalesManIncentiveMaster A 
		WHERE NOT EXISTS(SELECT * FROM #SMIncentive B WHERE A.SMIRefno=B.SMIRefno AND A.SMID=B.SMID)
		
		INSERT INTO #SMIncentive(SMIrefno,SMID,Sales,[Return])
		SELECT DISTINCT A.SMIRefno,B.SMID,0,0 FROM #SMIncentive A CROSS JOIN #SMNoSales B	
		---S.Moorthi Till Here
						
		SELECT  Distinct S.*,#SMIncentive.SMID as SMID , #SMIncentive.Sales, #SMIncentive.[Return],
		(#SMIncentive.Sales-  #SMIncentive.[Return] ) as TotalSales
		INTO #SalesmanIncentiveSlabs 
		FROM SalesmanIncentiveSlabs  S (NOLOCK)  INNER JOIN #SalesManIncentiveMaster SM (NOLOCK)  
		ON S.SMIRefno=Sm.SMIRefno 
		CROSS JOIN  #SMIncentive
		
		CREATE TABLE #SMincentiveSlabs
		(
		SMID INT,
		SMIRefNo Varchar(50),
		Slab INT,
		FromRange  Numeric(18,6),
		ToRange  Numeric(18,6),
		Eligible	int
		)

		INSERT INTO #SMincentiveSlabs(SMID,SMIRefNo,Slab,FromRange,ToRange,Eligible)
		SELECT SMID,SMIRefNo, Slab ,FromRange,ToRange,1 Eligible
		FROM #SalesmanIncentiveSlabs (NOLOCK) 
		WHERE (TotalSales >= FromRange AND 	(TotalSales <= torange or ToRange <= 0))
		
		----Added by S.Moorthi for All Salesman Fixpay should be eligible
		SELECT SMIRefNo,MIN(SLAB) Slab INTO #MinSlab FROM 
		#SalesmanIncentiveSlabs GROUP BY SMIRefNo
		
		INSERT INTO #SMincentiveSlabs(SMID,SMIRefNo,Slab,FromRange,ToRange,Eligible)
		SELECT DISTINCT A.SMID,A.SMIRefNo,A.Slab ,FromRange,ToRange,0 AS Eligible FROM #SalesmanIncentiveSlabs A 
		INNER JOIN #MinSlab B ON A.SMIRefNo=B.SMIRefNo AND A.Slab=B.Slab 
		WHERE NOT EXISTS(SELECT * fROM #SMincentiveSlabs M WHERE A.SMIRefNo=M.SMIRefNo AND A.SMID=M.SMID)
	---S.Moorthi Till Here
	
	
		INSERT INTO #SMincentiveSlabs(SMID,SMIRefNo,Slab,FromRange,ToRange)
		SELECT  DISTINCT S.Smid,sl.SMIRefNo,Slab,FromRange,ToRange
		FROM  #SMIncentive S ,#SalesmanIncentiveSlabs sl  
		WHERE  S.Smid=sl.smid AND  S.smid NOT IN   (SELECT S1.Smid from #SMincentiveSlabs S1 
		INNER JOIN  #SMIncentive S ON S.Smid=S1.Smid)
	
							 
		CREATE TABLE #SalesManincentive
		(
		 SMIRefNo VARCHAR(100),
		 IncMonth VARCHAR(50),
		 IncYear   INT,
		 SMID INT,
		 Sales Numeric(18,6),
		 SalesReturn Numeric(18,6),
		 [TotalAchSales] Numeric(18,6),
		 [From Range] Numeric(18,4),
		 [To Range] Numeric(18,4),
		 FixedPay Numeric(18,6),
		 VariablePay Numeric(18,6),
		 Slab INT,
		 IncPerc Numeric(18,6),
		 IncAmount Numeric(18,6),
		 [Total Incentive Amount] Numeric(18,6),
		 [IncGenerated] VARCHAR(10)
		 )
		--S.Moorthi added Un Eligible Sales man Fixed Pay
		IF NOT EXISTS (SELECT 'X' FROM SalesManincentiveDetail WHERE incmonth=@Month and Incyear=@Year)
		BEGIN
			INSERT INTO  #SalesManincentive(SMIRefNo,IncMonth,IncYear,SMID, [From Range],[To Range],Sales,SalesReturn,[TotalAchSales],FixedPay,VariablePay,Slab,IncPerc,IncAmount,[Total Incentive Amount],IncGenerated)
			SELECT  DISTINCT S.SMIRefno,S.incmonth,S.Incyear,SS.SMID,SL.FromRange,SL.ToRange,SS.Sales,SS.[Return],SS.Sales- SS.[Return] as ach,Sm.Fixedpay,
			CASE WHEN Eligible=1 THEN  Sm.VariablePay ELSE 0 END,Sl.Slab AS Slab,SIL.SMIncentivePerc,
			CASE WHEN Eligible=1 THEN SM.VariablePay *(SIL.SMIncentivePerc/100.00) ELSE 0 END AS Incentive,
			CASE WHEN Eligible=1 THEN FixedPay+SM.VariablePay *(SIL.SMIncentivePerc/100.00) else FixedPay END as TotalPayout,
			--FixedPay+SM.VariablePay *(SIL.SMIncentivePerc/100.00) as TotalPayout,
			'No' FROM  #SalesManIncentiveMaster  S INNER JOIN 
			#SMIncentive SS  (NOLOCK)  ON S.SMID=SS.Smid
			INNER JOIN SalesmanIncentiveSlabs SIL (NOLOCK) ON SIL.SMIRefno=S.SMIRefno
			INNER   JOIN  #SMincentiveSlabs SL (NOLOCK)  ON SL.SMIRefno=S.SMIRefno AND Sl.Slab=Sil.Slab AND Sl.Smid=SS.SMid
			INNER JOIN SalesManIncentiveMaster  SM  (NOLOCK)  ON SM.SMIRefno=S.SMIRefno AND SM.incmonth=S.incmonth AND SM.Incyear=S.Incyear		
								
		END 
		ELSE
		BEGIN
			INSERT INTO  #SalesManincentive(SMIRefNo,IncMonth,IncYear,SMID,[From Range],[To Range],Sales,SalesReturn,[TotalAchSales],FixedPay,VariablePay,Slab,IncPerc,IncAmount,[Total Incentive Amount],IncGenerated)
			SELECT S.SMIRefno,S.incmonth,S.Incyear,SS.SMID,SL.FromRange,SL.ToRange, SS.Sales,SS.[Return],SS.Sales- SS.[Return] as ach,Sm.Fixedpay,
			CASE WHEN Eligible=1 THEN  Sm.VariablePay ELSE 0 END,Sl.Slab AS Slab,SIL.SMIncentivePerc,
			CASE WHEN Eligible=1 THEN  SM.VariablePay *(SIL.SMIncentivePerc/100.00) ELSE 0 END AS Incentive, 
			CASE WHEN Eligible=1 THEN  FixedPay+SM.VariablePay *(SIL.SMIncentivePerc/100.00) ELSE FixedPay END as TotalPayout,'Yes' 
			FROM  #SalesManIncentiveMaster  S INNER JOIN 
			#SMIncentive SS  (NOLOCK)  ON S.SMID=SS.Smid
			INNER JOIN SalesmanIncentiveSlabs SIL (NOLOCK) ON SIL.SMIRefno=S.SMIRefno
			INNER   JOIN  #SMincentiveSlabs SL (NOLOCK)  ON SL.SMIRefno=S.SMIRefno AND Sl.Slab=Sil.Slab AND Sl.Smid=SS.SMid
			INNER JOIN SalesManIncentiveMaster  SM  (NOLOCK)  ON SM.SMIRefno=S.SMIRefno AND SM.incmonth=S.incmonth AND SM.Incyear=S.Incyear
			INNER JOIN SalesManincentiveDetail SD (NOLOCK) ON SD.SMIRefno=SM.SMIRefno AND SM.incmonth=SD.incmonth AND SM.Incyear=SD.Incyear
			AND S.SMID=SD.SMID AND SS.Smid=SD.SMID	
		END
		
			SELECT 'SMINCENTIVE TARGET VS ACHIEVED' ,SMIRefNo,IncMonth,IncYear,Sm.SmName,[From Range],[To Range],[TotalAchSales],FixedPay,VariablePay,IncPerc,IncAmount,[Total Incentive Amount],IncGenerated 
			FROM  #SalesManincentive S (NOLOCK) INNER JOIN SALESMAN SM (NOLOCK)ON S.SMID=Sm.SMID     		    				
END
GO
--CRCRSTPAR0048	(Need to have integration of Customer Group field from console to Sehyog)
IF NOT EXISTS (SELECT 7 FROM SYSOBJECTS O INNER JOIN SYSCOLUMNS C ON O.id=C.id AND O.NAME='Distributor' AND C.name='DistributorType')  
BEGIN  
	ALTER TABLE Distributor ADD DistributorType NVARCHAR(100) DEFAULT '' WITH VALUES  
END
GO
DELETE FROM CustomCaptions WHERE CtrlName='lblDistributorType' and Transid = 102 and Ctrlid = 47
INSERT INTO CustomCaptions([TransId],[CtrlId],[SubCtrlId],[CtrlName],[Caption],[PnlMsg],[MsgBox],[LngId],[Availability],[LastModBy],[LastModDate],[AuthId],[AuthDate],[DefaultCaption],[DefaultPnlMsg],[DefaultMsgBox],[Visibility],[Enabled]) VALUES (102,47,1,'lblDistributorType','Distorbutor Type','','',1,1,1,GETDATE(),1,GETDATE(),'Distributor Type','','',1,1)
DELETE FROM CustomCaptions WHERE CtrlName='fxtDistributorType' and Transid = 102 and Ctrlid = 48
INSERT INTO CustomCaptions([TransId],[CtrlId],[SubCtrlId],[CtrlName],[Caption],[PnlMsg],[MsgBox],[LngId],[Availability],[LastModBy],[LastModDate],[AuthId],[AuthDate],[DefaultCaption],[DefaultPnlMsg],[DefaultMsgBox],[Visibility],[Enabled]) VALUES (102,48,1,'fxtDistributorType','Distorbutor Type','Enter Distributor Type','',1,1,1,GETDATE(),1,GETDATE(),'Distributor Type','Enter Distributor Type','',1,1)
GO
IF NOT EXISTS (SELECT * FROM Sysobjects where name='Cn2Cs_Prk_DistributorType' and XTYPE='U')
BEGIN
	CREATE TABLE [dbo].[Cn2Cs_Prk_DistributorType]
	(
		[Distcode] [nvarchar](100) NULL,
		[DistributorType] [nvarchar](100) NULL,
		[DownLoadFlag] [nvarchar](20) NULL,
		[CreatedDate] [datetime] NULL
	)
END
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE NAME='Proc_Import_DistributorType' AND TYPE='P')
DROP PROCEDURE Proc_Import_DistributorType
GO
CREATE PROCEDURE Proc_Import_DistributorType
(
	@Pi_Records AS NTEXT
)
AS
/*********************************
* PROCEDURE		: Proc_Import_DistributorType
* PURPOSE		: To download the Distributor's type
* CREATED BY	: BHARANEEDHAR C
* CREATED DATE	: 27-05-2019
* MODIFIED
* DATE			AUTHOR				USERSTORYID			CR/BZ		DESCRIPTION
---------------------------------------------------------------------------------------------------------------------------------------------------------
27-05-2019		Bharaneedhar C      CRCRSTPAR0048        CR        Need to have integration of Customer Group field from console to Sehyog
************************************************************************************************************************************************************/
SET NOCOUNT ON
BEGIN
		DECLARE @hDoc AS INTEGER
		EXEC SP_Xml_PrepareDocument @hDoc OUTPUT,@Pi_Records
		
		INSERT INTO Cn2Cs_Prk_DistributorType
		(Distcode,DistributorType,DownLoadFlag,CreatedDate)
		SELECT Distcode,DistributorType,DownLoadFlag,CreatedDate
		FROM OPENXML (@hDoc,'/Root/Console2CS_DistributorType',1)
		WITH	(
					Distcode Nvarchar (100),
					DistributorType Nvarchar (100),
					DownLoadFlag Nvarchar (20),
					CreatedDate Datetime
				) XmlObj
		EXECUTE SP_Xml_RemoveDocument @hDoc
END
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE NAME='Proc_Validate_DistributorType' AND TYPE='P')
DROP PROCEDURE Proc_Validate_DistributorType
GO
/*
Begin TRan
Delete from errorlog
select * from reginfo
INSERT INTO Cn2Cs_Prk_DistributorType
select '1003058','General Trade','D',getdate()
EXEC Proc_Validate_DistributorType 0
Select * from errorlog
 
RollBack TRan
*/
CREATE PROCEDURE Proc_Validate_DistributorType
(
	@Po_ErrNo INT OUTPUT
)
AS
/*************************************************************
* PROCEDURE: Proc_Validate_DistributorType
* PURPOSE  : To Validate and download the distributor's type
* NOTES    : 
* CREATED  : 27-05-2019
* MODIFIED :
------------------------------------------------
* DATE			AUTHOR				USERSTORYID			CR/BZ		DESCRIPTION
---------------------------------------------------------------------------------------------------------------------------------------------------------
27-05-2019		Bharaneedhar C      CRCRSTPAR0048        CR        Need to have integration of Customer Group field from console to Sehyog
*********************************************************************************************************************************************************/

SET NOCOUNT ON
BEGIN
	DECLARE @ErrDesc		AS NVARCHAR(1000)
	DECLARE @TabName		AS NVARCHAR(100) 
	SET @Po_ErrNo=0
	SET @TabName = 'Cn2Cs_Prk_DistributorType'
	
	DELETE A FROM Cn2Cs_Prk_DistributorType A (NOLOCK) WHERE DownloadFlag='Y'
	DELETE FROM Errorlog WHERE TableName = 'Cn2Cs_Prk_DistributorType'
	IF EXISTS (SELECT 'C' FROM Cn2Cs_Prk_DistributorType WHERE LEN(ISNULL(DistCode,''))=0) 
	BEGIN
		INSERT INTO Errorlog VALUES (1,@TabName,'DistCode','Distributor code should not be empty')
		RETURN
	END
	IF EXISTS (SELECT 'C' FROM Cn2Cs_Prk_DistributorType WHERE LEN(ISNULL(DistributorType,''))=0) 
	BEGIN
		INSERT INTO Errorlog VALUES (1,@TabName,'DistCode','Distributor type should not be empty')
		RETURN
	END
	
	IF NOT EXISTS (SELECT 'C' FROM Distributor (NOLOCK) WHERE DistributorCode=(SELECT DISTINCT DistCode From Cn2Cs_Prk_DistributorType (NOLOCK)))
	BEGIN
		INSERT INTO Errorlog VALUES (1,@TabName,'DistCode','Distributor Code mismatch')
		RETURN
	END
	IF EXISTS(SELECT DistCode,COUNT(*) 'Count' FROM Cn2Cs_Prk_DistributorType (Nolock) GROUP BY DistCode HAVING COUNT(*) > 1)
	BEGIN
		INSERT INTO Errorlog VALUES (1,@TabName,'DistCode','Multiple Records found in Parking Table')
		RETURN
	END	
	SELECT D.DistributorCode,LTRIM(RTRIM(P.DistributorType)) DistributorType  
	INTO #UpdateDistType FROM Distributor D (NOLOCK) 
	INNER JOIN Cn2Cs_Prk_DistributorType P (NOLOCK) ON P.Distcode=D.DistributorCode 
	UPDATE D SET D.DistributorType = T.DistributorType,D.LastModDate=GETDATE() FROM Distributor D (NOLOCK) 
	INNER JOIN  #UpdateDistType T ON T.DistributorCode=D.DistributorCode
	
	UPDATE P SET P.DownloadFlag='Y' 
	FROM Cn2Cs_Prk_DistributorType P (NOLOCK),Distributor D (NOLOCK) WHERE P.Distcode=D.DistributorCode 
	
END
GO
DELETE FROM CustomUpdownload WHERE Module in ('DistributorType') and UpDownload='Download' and slno = 277
INSERT INTO CustomUpdownload(SlNo,SeqNo,Module,Screen,ExportFnName,ImportProcName,
ParkTable,ValidateProcName,TranType,UpDownload,MandatoryFile)
SELECT 277,1,'DistributorType','DistributorType','','Proc_Import_DistributorType','Cn2Cs_Prk_DistributorType','Proc_Validate_DistributorType','Master','Download',1
GO
DELETE FROM Tbl_DownloadIntegration WHERE  ProcessName in ('DistributorType') and SequenceNo = 87
INSERT INTO Tbl_DownloadIntegration(SequenceNo,ProcessName,PrkTableName,SPName,TRowCount,SelectCount,CreatedDate)
SELECT 87,'DistributorType','Cn2Cs_Prk_DistributorType','',0,500,GETDATE()
GO
--CRCRSTPAR0049	(From SFA we are getting only in PKTS, same like billing screen we need to convert to Box and make bill)
DELETE FROM Configuration WHERE ModuleName='General Configuration New' AND ModuleId='GENCONFIGNEW4'
INSERT INTO Configuration(ModuleId,ModuleName,Description,Status,Condition,ConfigValue,SeqNo)
SELECT 'GENCONFIGNEW4','General Configuration New','Order To Bill Conversion Based On Bill Product Uom Setting',1,'',0.00,4
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE XTYPE='P' AND NAME='PROC_ReturnOrderProd_UOM_WS')
DROP PROCEDURE PROC_ReturnOrderProd_UOM_WS
GO
--EXEC PROC_ReturnOrderProd_UOM_WS 'ORD1900037',1,1,2
CREATE PROCEDURE PROC_ReturnOrderProd_UOM_WS
(
	@OrderNo AS VARCHAR(100),
	@Lcnid AS INT,
	@Type AS INT,
	@UsrId AS INT
)
AS
/*********************************
* PROCEDURE		: PROC_ReturnOrderProd_UOM_WS
* PURPOSE		: To Return Order to Billing Processed Data
* CREATED		: 
* CREATED DATE	: 
* MODIFIED      
--------------------------------------------------------------------------------------------------------------------
* DATE			AUTHOR			  USERSTORYID		CR/BZ   DESCRIPTION
--------------------------------------------------------------------------------------------------------------------
* 14/05/2019   S.Manthiramoorthi  CRCRSTPAR0049   CR     From SFA we are getting only in PKTS, same like billing 
														screen we need to convert to Box and make bill
*********************************/
BEGIN
DECLARE @PRDID INT
DECLARE @TOTALQTY INT	
DECLARE @UOMID INT
DECLARE @CONVERSIONFACTOR INT
DECLARE @PRDBATID INT
DECLARE @QTY INT
DECLARE @BPRDBATID INT
DECLARE @BQTY INT
DECLARE @UOMCODE VARCHAR(25)
DECLARE @BUOMID INT 
DECLARE @BConversionFactor INT
DECLARE @BUOMCODE VARCHAR(25)
--Added By Sathishkumar Veeramani 2015/02/03
DECLARE @Status AS INT
DECLARE @RtrType AS NUMERIC(18,0)
SET @Status = 0
SELECT @Status = ISNULL([Status],0) FROM Configuration (NOLOCK) WHERE ModuleId = 'BILL9' AND ModuleName = 'Billing'
SELECT @RtrType = ISNULL(RtrType,0) FROM Retailer A (NOLOCK) INNER JOIN OrderBooking B (NOLOCK) ON A.RtrId = B.RtrId 
WHERE B.OrderNo = @OrderNo
--Till Here 
--DECLARE @NOS AS INT
--SELECT @NOS = UomId FROM UomMaster (NOLOCK) WHERE UomCode = 'NOS'
	DELETE FROM TEMP_ReturnOrder_UOM_WS_Products WHERE UsrId=@UsrId
	
	CREATE TABLE #ORDERPRODUCTS 
	(
		PRDID INT,
		PRDBATID INT,
		Uomid1 INT,
		UomDesc1 Varchar(25),
		UomCon1 int,
		QTY1 INT,
		Uomid2 INT,
		UomDesc2 varchar(25),
		UomCon2 int,
		Qty2 INT,
		StockAvl INT
	)
	
	DECLARE @BilledOrder AS TABLE
	(
		SalId	BIGINT,
		OrderNo	VARCHAR(100),
		PrdId	BIGINT,
		BilledQty	BIGINT
	)
	
	CREATE TABLE #OrderBookingProducts
	(
		OrderNo		VARCHAR(100),
		PrdId		BIGINT,
		PrdBatId	BIGINT,
		BalanceQty	BIGINT		
	)
	
	INSERT INTO @BilledOrder
	SELECT SalId,OrderNo,PrdId,SUM(BilledQty) as BilledQty FROM 
	SalesInvoiceOrderBooking WHERE OrderNo=@OrderNo GROUP BY SalId,OrderNo,PrdId
	IF EXISTS(SELECT 'C' FROM @BilledOrder WHERE OrderNo=@OrderNo)
	BEGIN
				
		INSERT INTO #OrderBookingProducts(OrderNo,PrdId,PrdBatId,BalanceQty)
		SELECT OB.OrderNo,OBP.PrdId,PrdBatId,TotalQty-SUM(C.BilledQty) As BalanceQty FROM SalesInvoice A
		INNER JOIN OrderBooking OB ON A.OrderKeyNo=OB.OrderNo 
		INNER JOIN (SELECT OrderNo,PrdId,ConvFact1,MAX(PrdBatId) as PrdBatId,SUM(TOTALQTY) AS TOTALQTY FROM OrderBookingProducts 
		WHERE OrderNo=@OrderNo GROUP BY OrderNo,PrdId,ConvFact1)OBP ON OBP.OrderNo=OB.OrderNo and OBP.OrderNo=A.OrderKeyNo
		INNER JOIN @BilledOrder C ON C.SalId=A.SalId AND C.PrdId=OBP.PrdId AND C.OrderNo=OB.OrderNo AND C.OrderNo=OBP.OrderNo 
		WHERE DLVSTS<>3 GROUP BY OB.OrderNo,OBP.PrdId,PrdBatId,TotalQty
		
		INSERT INTO #OrderBookingProducts(OrderNo,PrdId,PrdBatId,BalanceQty)
		SELECT OB.OrderNo,OBP.PrdId,PrdBatId,TotalQty-BilledQty as BalanceQty FROM OrderBooking OB 
		INNER JOIN OrderBookingProducts OBP ON OBP.OrderNo=OB.OrderNo 
		WHERE OB.OrderNo=@OrderNo and NOT EXISTS(SELECT * FROM #OrderBookingProducts B WHERE OBP.PrdId=B.Prdid AND OB.OrderNo=B.OrderNo)				
	END
	ELSE
	BEGIN
		INSERT INTO #OrderBookingProducts(OrderNo,PrdId,PrdBatId,BalanceQty)
		SELECT DISTINCT ORDERNO,PRDID,Prdbatid,TOTALQTY FROM ORDERBOOKINGPRODUCTS WHERE ORDERNO=@OrderNo
	END
	
	----CRCRSTPAR0049
	
	DECLARE @OrderBaseUom AS TABLE
	(
		OrderNo	VARCHAR(100),
		PrdId	BIGINT,
		UomId	INT,
		UomCode	VARCHAR(100),
		ConversionFactor  INT
	)
	
	DECLARE @BaseUom AS VARCHAR(100)
	DECLARE @BaseUomId AS INT
	DECLARE @convertionFac as int
	
	
	INSERT INTO @OrderBaseUom(OrderNo,PrdId,UomId,UomCode,ConversionFactor)
	SELECT DISTINCT A.OrderNo,A.PrdId,UM.UomId,UM.UomCode,C.ConversionFactor FROM #OrderBookingProducts A 
	INNER JOIN Product B  ON A.PrdId=B.PrdId
	INNER JOIN UOMGROUP C ON C.UomGroupId=B.UomGroupId and C.BaseUom='Y'
	INNER JOIN UomMaster UM  ON UM.UomId=C.UomId
	WHERE A.OrderNo=@OrderNo
	---CRCRSTPAR0049
	
	DECLARE CUR_orderBooking CURSOR
	FOR SELECT DISTINCT A.PRDID,Prdbatid,BalanceQty,UomId,UomCode,ConversionFactor FROM #OrderBookingProducts A  
	INNER JOIN @OrderBaseUom B ON A.OrderNo=B.OrderNo and A.PrdId=B.PrdID WHERE A.ORDERNO=@OrderNo 
	--SELECT DISTINCT PRDID,Prdbatid,TOTALQTY FROM ORDERBOOKINGPRODUCTS WHERE ORDERNO=@OrderNo
	OPEN CUR_orderBooking 
	FETCH NEXT FROM CUR_orderBooking  INTO @PRDID,@PRDBATID,@TOTALQTY,@BaseUomId,@BaseUom,@convertionFac  --CRCRSTPAR0049
	WHILE @@FETCH_STATUS=0
	BEGIN
		--SELECT PrdId,SUM(PrdBatLcnSih-PrdBatLcnRessih) FROM ProductBatchLocation WHERE prdid=@PRDID AND LcnId=@Lcnid
		--GROUP BY prdid
	
	 -- IF EXISTS (SELECT PrdId,SUM(PrdBatLcnSih-PrdBatLcnRessih) FROM ProductBatchLocation WHERE prdid=@PRDID AND LcnId=@Lcnid
		--GROUP BY prdid HAVING SUM(PrdBatLcnSih-PrdBatLcnRessih)>=@TOTALQTY )
	  IF EXISTS (SELECT PrdId,SUM(PrdBatLcnSih-PrdBatLcnRessih) FROM ProductBatchLocation WHERE prdid=@PRDID AND LcnId=@Lcnid
		GROUP BY prdid HAVING SUM(PrdBatLcnSih-PrdBatLcnRessih)>=1)
	  BEGIn
			IF EXISTS (SELECT PrdId,PRDBATID,SUM(PrdBatLcnSih-PrdBatLcnRessih) FROM ProductBatchLocation WHERE prdid=@PRDID AND LcnId=@Lcnid
			GROUP BY prdid,PRDBATID HAVING SUM(PrdBatLcnSih-PrdBatLcnRessih)>=@TOTALQTY )
				BEGIN
				
					DECLARE CUR_UOM CURSOR
					FOR SELECT PRDBATID,UOMID,UOMCODE,CONVERSIONFACTOR,SUM(QTY) FROM(
						SELECT MAX(PRDBATID)PRDBATID,U.UOMID,UOMCODE,CONVERSIONFACTOR,(PrdBatLcnSih-PrdBatLcnRessih)QTY FROM ProductBatchLocation PB 
						INNER JOIN PRODUCT P ON PB.PRDID=P.PRDID INNER JOIN UOMGROUP U ON P.UOMGROUPID=U.UOMGROUPID INNER JOIN UOMMASTER UM ON UM.UOMID=U.UOMID
						WHERE PB.PrdId=@PRDID AND LcnId=@Lcnid
						GROUP BY u.UOMID,UOMCODE,CONVERSIONFACTOR ,PrdBatLcnSih,PrdBatLcnRessih)A GROUP BY PRDBATID,UOMID,UOMCODE,CONVERSIONFACTOR 
						HAVING SUM(QTY)>=@TOTALQTY
						ORDER BY  CONVERSIONFACTOR DESC
					OPEN CUR_UOM
					FETCH NEXT FROM CUR_UOM INTO @PRDBATID,@UOMID,@UOMCODE,@CONVERSIONFACTOR,@QTY
					WHILE @@FETCH_STATUS=0
					BEGIN
					
						--@BaseUomId,@BaseUom,@convertionFac
					 
					  IF  (@TOTALQTY/@CONVERSIONFACTOR>0) AND (@TOTALQTY%@CONVERSIONFACTOR>0)
						BEGIN
						--SELECT 'T1',@PRDBATID,@UOMID,@UOMCODE,@CONVERSIONFACTOR,@QTY
							INSERT INTO #ORDERPRODUCTS
							SELECT @PRDID,@PRDBATID,@UOMID,@UOMCODE,@CONVERSIONFACTOR,(@TOTALQTY/@CONVERSIONFACTOR),
							CASE @CONVERSIONFACTOR WHEN 1 THEN 0 ELSE @BaseUomId END,
							CASE @CONVERSIONFACTOR WHEN 1 THEN '' ELSE @BaseUom END,
							CASE @CONVERSIONFACTOR WHEN 1 THEN 0 ELSE 1 END,
							CASE @CONVERSIONFACTOR WHEN 1 THEN 0 ELSE (@TOTALQTY%@CONVERSIONFACTOR) END,1
						BREAK	
						END 
						
					  IF  (@TOTALQTY/@CONVERSIONFACTOR>0) AND (@TOTALQTY%@CONVERSIONFACTOR=0)
						BEGIN
							--SELECT 'T2',@PRDBATID,@UOMID,@UOMCODE,@CONVERSIONFACTOR,@QTY
							INSERT INTO #ORDERPRODUCTS
							SELECT 	@PRDID,@PRDBATID,@UOMID,@UOMCODE,@CONVERSIONFACTOR,(@TOTALQTY/@CONVERSIONFACTOR),0,'',0,0,1
						BREAK	
						END 
					   
					FETCH NEXT FROM CUR_UOM INTO @PRDBATID,@UOMID,@UOMCODE,@CONVERSIONFACTOR,@QTY
					END 		
					CLOSE CUR_UOM 
					DEALLOCATE CUR_UOM					
				END
			ELSE
			 BEGIN --- BATCH WISE SPLIT
			 	DECLARE CUR_BATCH CURSOR
				FOR  SELECT PBL.PrdBatID,(PrdBatLcnSih-PrdBatLcnRessih)QTY FROM ProductBatchLocation PBL 
					 INNER JOIN ProductBatch PB ON PBL.PrdId=PB.PrdId AND PBL.PrdBatID=PB.PrdBatId WHERE PBL.PrdId=@PRDID AND LcnId=@Lcnid AND Status=1
				OPEN CUR_BATCH
				FETCH NEXT FROM CUR_BATCH INTO @BPRDBATID,@BQTY
				WHILE @@FETCH_STATUS=0
				BEGIN
				 	DECLARE CUR_BATCH_SPLIT CURSOR
					FOR  SELECT  U.UOMID,UomCode,ConversionFactor FROM PRODUCT P INNER JOIN UOMGROUP U ON P.UOMGROUPID=U.UOMGROUPID INNER JOIN UOMMASTER UM ON UM.UOMID=U.UOMID 
					WHERE PRDID=@PRDID ORDER BY ConversionFactor DESC
					OPEN CUR_BATCH_SPLIT
					FETCH NEXT FROM CUR_BATCH_SPLIT INTO @BUOMID,@BUOMCODE,@BConversionFactor
					WHILE @@FETCH_STATUS=0
					BEGIN
					  IF @TOTALQTY=0
						BEGIN
							BREAK
						END
						
					IF @BQTY>=@TOTALQTY
					 BEGIN	
						  IF  (@TOTALQTY/@BConversionFactor>0) AND (@TOTALQTY%@BConversionFactor>0)
							BEGIN
								INSERT INTO #ORDERPRODUCTS
								SELECT @PRDID,@BPRDBATID,@BUOMID,@BUOMCODE,@BConversionFactor,(@TOTALQTY/@BConversionFactor),
								CASE @BConversionFactor WHEN 1 THEN 0 ELSE @BaseUomId END,
								CASE @BConversionFactor WHEN 1 THEN '' ELSE @BaseUom END,
								CASE @BConversionFactor WHEN 1 THEN 0 ELSE 1 END,
								CASE @BConversionFactor WHEN 1 THEN 0 ELSE (@TOTALQTY%@BConversionFactor) END,1
								
								SET @TOTALQTY=@TOTALQTY-@BQTY--
								
								BREAK	
							END 
						  IF  (@TOTALQTY/@BConversionFactor>0) AND (@TOTALQTY%@BConversionFactor=0)
							BEGIN
								INSERT INTO #ORDERPRODUCTS
								SELECT 	@PRDID,@BPRDBATID,@BUOMID,@BUOMCODE,@BConversionFactor,(@TOTALQTY/@BConversionFactor),0,'',0,0,1
								
								SET @TOTALQTY=@TOTALQTY-@BQTY--
								
								BREAK
							END 
					 END
					ELSE
					 BEGIN
					  
						  IF  (@BQTY/@BConversionFactor>0) AND (@BQTY%@BConversionFactor>0)
							BEGIN
								INSERT INTO #ORDERPRODUCTS
								SELECT @PRDID,@BPRDBATID,@BUOMID,@BUOMCODE,@BConversionFactor,(@BQTY/@BConversionFactor),
								CASE @BConversionFactor WHEN 1 THEN 0 ELSE @BaseUomId END,
								CASE @BConversionFactor WHEN 1 THEN '' ELSE @BaseUom END,
								CASE @BConversionFactor WHEN 1 THEN 0 ELSE 1 END,
								CASE @BConversionFactor WHEN 1 THEN 0 ELSE (@BQTY%@BConversionFactor) END,1
								
								SET @TOTALQTY=@TOTALQTY-@BQTY
								BREAK	
							END 
						  IF  (@BQTY/@BConversionFactor>0) AND (@BQTY%@BConversionFactor=0)
							BEGIN
								INSERT INTO #ORDERPRODUCTS
								SELECT 	@PRDID,@BPRDBATID,@BUOMID,@BUOMCODE,@BConversionFactor,(@BQTY/@BConversionFactor),0,'',0,0,1
								
								SET @TOTALQTY=@TOTALQTY-@BQTY
								BREAK	
							END 
					 END
						
					FETCH NEXT FROM CUR_BATCH_SPLIT INTO @BUOMID,@BUOMCODE,@BConversionFactor
					END 		
					CLOSE CUR_BATCH_SPLIT 
					DEALLOCATE CUR_BATCH_SPLIT 	
			   
				FETCH NEXT FROM CUR_BATCH INTO @BPRDBATID,@BQTY
				END 		
				CLOSE CUR_BATCH 
				DEALLOCATE CUR_BATCH 
			 END	
		END
	  ELSE
	  BEGIN
	
		
		SELECT  @BUOMID=UG.UOMID,@BUOMCODE=UomCode,@BConversionFactor=ConversionFactor FROM PRODUCT P 
		INNER JOIN UOMGROUP UG ON P.UOMGROUPID=UG.UOMGROUPID 
		INNER JOIN UOMMASTER UM ON UM.UOMID=UG.UOMID 
		WHERE PRDID=@PRDID AND EXISTS(SELECT UomGroupId,ConversionFactor FROM (SELECT UomGroupId,MAX(ConversionFactor) as ConversionFactor FROM 
		UomGroup(NOLOCK) GROUP BY UomGroupId)UG1 WHERE UG.UomGroupId=UG1.UomGroupId and UG.ConversionFactor=UG1.ConversionFactor)
		SET @BPRDBATID=@PRDBATID
		SET @BQTY=@TOTALQTY

		IF @BQTY>=@TOTALQTY
		BEGIN	

		--EXEC PROC_ReturnOrderProd_UOM_WS 'ORD1900037',1,1,2
			IF  (@TOTALQTY/@BConversionFactor>0) AND (@TOTALQTY%@BConversionFactor>0)
			BEGIN
				INSERT INTO #ORDERPRODUCTS
				SELECT @PRDID,@BPRDBATID,@BUOMID,@BUOMCODE,@BConversionFactor,(@TOTALQTY/@BConversionFactor),
				CASE @BConversionFactor WHEN 1 THEN 0 ELSE @BaseUomId END,
				CASE @BConversionFactor WHEN 1 THEN '' ELSE @BaseUom END,
				CASE @BConversionFactor WHEN 1 THEN 0 ELSE 1 END,
				CASE @BConversionFactor WHEN 1 THEN 0 ELSE (@TOTALQTY%@BConversionFactor) END,0
				
				SET @TOTALQTY=@TOTALQTY-@BQTY--

			END
			ELSE IF  (@TOTALQTY/@BConversionFactor>0) AND (@TOTALQTY%@BConversionFactor=0)
			BEGIN
				INSERT INTO #ORDERPRODUCTS
				SELECT 	@PRDID,@BPRDBATID,@BUOMID,@BUOMCODE,@BConversionFactor,(@TOTALQTY/@BConversionFactor),0,'',0,0,0
				
				SET @TOTALQTY=@TOTALQTY-@BQTY--				
				--BREAK
			END 
			ELSE
			BEGIN
				INSERT INTO #ORDERPRODUCTS
				SELECT 	@PRDID,@BPRDBATID,@BaseUomId,@BaseUom,@convertionFac,@TOTALQTY,0,'',0,0,0
				
				SET @TOTALQTY=@TOTALQTY-@BQTY--				
			END 
		END
		
	    --INSERT INTO #ORDERPRODUCTS
	    --SELECT @PRDID,@PRDBATID,UOMId1,UomCode,ConversionFactor,@TOTALQTY/ConversionFactor,0,'',0,0,0 FROM OrderBookingProducts O 
	    --INNER JOIN Product P ON O.PrdId=P.PrdId INNER JOIN UomGroup UG ON UG.UomGroupId=P.UomGroupId 
	    --AND UG.UomId=O.UOMId1 INNER JOIN UomMaster UM ON UM.UomId=UG.UomId
	    --WHERE OrderNo=@OrderNo AND  O.PrdId=@PRDID AND PrdBatId=@PRDBATID
	    
	  END 	
	FETCH NEXT FROM CUR_orderBooking INTO @PRDID,@PRDBATID,@TOTALQTY,@BaseUomId,@BaseUom,@convertionFac
	END
	CLOSE CUR_orderBooking
	DEALLOCATE CUR_orderBooking

	
	IF @Status = 1
	BEGIN
	    INSERT INTO TEMP_ReturnOrder_UOM_WS_Products
		SELECT @OrderNo,O.PRDID,P.PrdCCode,PrdName,O.PRDBATID,PrdBatCode,Uomid1,UomDesc1,UomCon1,QTY1,Uomid2,UomDesc2,
		UomCon2,Qty2,0,((UomCon1*QTY1)+(UomCon2*Qty2)),PBL1.PriceId,PBL1.PrdBatDetailValue AS MRP,
		PBL2.PrdBatDetailValue AS RATE,StockAvl,@UsrId FROM Product P (NOLOCK)
		INNER JOIN ProductBatch PB (NOLOCK) ON P.PrdId=PB.PrdId 
		INNER JOIN #ORDERPRODUCTS O (NOLOCK) ON O.PRDID=P.PrdId AND O.PRDID=PB.PrdId 
		INNER JOIN PRODUCTBATCHDETAILS PBL1 (NOLOCK) ON PBL1.PrdBatId=O.PRDBATID AND PBL1.PrdBatId=PB.PrdBatId AND PBL1.SLNO=1 AND PBL1.DefaultPrice=1
		INNER JOIN PRODUCTBATCHDETAILS PBL2 (NOLOCK) ON PBL2.PrdBatId=O.PRDBATID AND PBL2.PrdBatId=PB.PrdBatId 
		AND PBL2.SLNo=(CASE @RtrType WHEN 1 THEN 3 ELSE 2 END) AND PBL2.DefaultPrice=1
	END
	ELSE
	BEGIN 
	
	--	INSERT INTO TEMP_ReturnOrder_UOM_WS_Products
	--	SELECT @OrderNo,O.PRDID,P.PrdCCode,PrdName,O.PRDBATID,PrdBatCode,Uomid1,UomDesc1,UomCon1,QTY1,0 Uomid2,'' UomDesc2,
	--	'' UomCon2,0 Qty2,0,((UomCon1*QTY1)+(UomCon2*Qty2)),PBL1.PriceId,PBL1.PrdBatDetailValue,PBL2.PrdBatDetailValue,StockAvl,@UsrId 
	--	FROM Product P (NOLOCK) INNER JOIN ProductBatch PB (NOLOCK) ON P.PrdId=PB.PrdId 
	--	INNER JOIN #ORDERPRODUCTS O (NOLOCK) ON O.PRDID=P.PrdId AND O.PRDID=PB.PrdId 
	--	INNER JOIN PRODUCTBATCHDETAILS PBL1 (NOLOCK) ON PBL1.PrdBatId=O.PRDBATID AND PBL1.PrdBatId=PB.PrdBatId AND PBL1.DefaultPrice=1
	--	INNER JOIN BatchCreation BC1 (NOLOCK) ON BC1.SlNo=PBL1.SLNo AND BC1.MRP=1
	--	INNER JOIN PRODUCTBATCHDETAILS PBL2 (NOLOCK) ON PBL2.PrdBatId=O.PRDBATID AND PBL2.PrdBatId=PB.PrdBatId AND PBL2.DefaultPrice=1
	--	INNER JOIN BatchCreation BC2 (NOLOCK) ON BC2.SlNo=PBL2.SLNo AND BC2.SelRte=1
	
	--union
	--SELECT @OrderNo,O.PRDID,P.PrdCCode,PrdName,O.PRDBATID,PrdBatCode,Uomid2,UomDesc2,UomCon2,QTY2,0 Uomid2,'' UomDesc2,
	--	'' UomCon2,0 Qty2,0,((UomCon1*QTY1)+(UomCon2*Qty2)),PBL1.PriceId,PBL1.PrdBatDetailValue,PBL2.PrdBatDetailValue,StockAvl,@UsrId 
	--	FROM Product P (NOLOCK) INNER JOIN ProductBatch PB (NOLOCK) ON P.PrdId=PB.PrdId 
	--	INNER JOIN #ORDERPRODUCTS O (NOLOCK) ON O.PRDID=P.PrdId AND O.PRDID=PB.PrdId 
	--	INNER JOIN PRODUCTBATCHDETAILS PBL1 (NOLOCK) ON PBL1.PrdBatId=O.PRDBATID AND PBL1.PrdBatId=PB.PrdBatId AND PBL1.DefaultPrice=1
	--	INNER JOIN BatchCreation BC1 (NOLOCK) ON BC1.SlNo=PBL1.SLNo AND BC1.MRP=1
	--	INNER JOIN PRODUCTBATCHDETAILS PBL2 (NOLOCK) ON PBL2.PrdBatId=O.PRDBATID AND PBL2.PrdBatId=PB.PrdBatId AND PBL2.DefaultPrice=1
	--	INNER JOIN BatchCreation BC2 (NOLOCK) ON BC2.SlNo=PBL2.SLNo AND BC2.SelRte=1
	--	where UomDesc2<>''
		
		INSERT INTO TEMP_ReturnOrder_UOM_WS_Products
		SELECT @OrderNo,O.PRDID,P.PrdCCode,PrdName,O.PRDBATID,PrdBatCode,Uomid1,UomDesc1,UomCon1,QTY1,Uomid2,UomDesc2,
		UomCon2,Qty2,0,((UomCon1*QTY1)+(UomCon2*Qty2)),PBL1.PriceId,PBL1.PrdBatDetailValue,PBL2.PrdBatDetailValue,StockAvl,@UsrId 
		FROM Product P (NOLOCK) INNER JOIN ProductBatch PB (NOLOCK) ON P.PrdId=PB.PrdId 
		INNER JOIN #ORDERPRODUCTS O (NOLOCK) ON O.PRDID=P.PrdId AND O.PRDID=PB.PrdId 
		INNER JOIN PRODUCTBATCHDETAILS PBL1 (NOLOCK) ON PBL1.PrdBatId=O.PRDBATID AND PBL1.PrdBatId=PB.PrdBatId AND PBL1.DefaultPrice=1
		INNER JOIN BatchCreation BC1 (NOLOCK) ON BC1.SlNo=PBL1.SLNo AND BC1.MRP=1
		INNER JOIN PRODUCTBATCHDETAILS PBL2 (NOLOCK) ON PBL2.PrdBatId=O.PRDBATID AND PBL2.PrdBatId=PB.PrdBatId AND PBL2.DefaultPrice=1
		INNER JOIN BatchCreation BC2 (NOLOCK) ON BC2.SlNo=PBL2.SLNo AND BC2.SelRte=1
	
	END
		
	SELECT * FROM TEMP_ReturnOrder_UOM_WS_Products
END
GO
--ILCRSTPAR4278 (Debit note sheet report (Design in Crystal Reports))
UPDATE A SET VISIBILITY=0 FROM RptGroup A Where RptId=291 and GrpCode='DebitNoteTopSheet'
GO
DELETE FROM RptGridView WHERE RptId=292
INSERT INTO RptGridView([RptId],[RptName],[CrystalView],[GridView],[ExcelView],[PDFView]) 
VALUES (292,'RptDebitNoteTopSheet.rpt',1,0,0,1)
GO
DELETE FROM RptGroup WHERE RptId=292
INSERT INTO RptGroup([PId],[RptId],[GrpCode],[GrpName],[VISIBILITY]) 
VALUES ('ParleReports',292,'DebitNoteTopSheetCrystal','Debit Note Top Sheet',1)
GO
DELETE FROM RptHeader WHERE RptId=292
INSERT INTO RptHeader([GrpCode],[RptCaption],[RptId],[RpCaption],[SPName],[TblName],[RptName],[UserIds]) 
VALUES ('DebitNoteTopSheetCrystal','Debit Note Top Sheet','292','Debit Note Top Sheet','Proc_RptDebitNoteTopSheetNew','RptDebitNoteTopSheet','RptDebitNoteTopSheet.rpt','')
GO
DELETE FROM RptDetails WHERE RptId=292
INSERT INTO RptDetails([RptId],[SlNo],[TblName],[PrntId],[PrntRefFld],[FldName],[FldCaption],[PrntTbl],[CtrlType],[CmnFld],[SelcId],[SingleMulti],[Mandatory],[PnlMsg],[CaptionChange]) 
SELECT 292,1,'FromDate',-1,'','','From Date*','',1,'',10,0,1,'Enter From Date',0 UNION
SELECT 292,2,'ToDate',-1,'','','To Date*','',1,'',11,0,0,'Enter To Date',0 UNION
SELECT 292,3,'RptFilter',-1,NULL,'FilterId,FilterDesc,FilterDesc','Printer Type...',NULL,1,NULL,176,1,NULL,'Press F4/Double Click to select Printer Type',0
GO
DELETE FROM RptFilter WHERE RptId=292 and SelcId=176
INSERT INTO RptFilter(RptId,SelcId,FilterId,FilterDesc)
SELECT 292,176,0,'Generic' UNION
SELECT 292,176,1,'Laser' 
GO
IF EXISTS (SELECT 'C' FROM SYSOBJECTS WHERE XTYPE = 'U' AND NAME = 'RptDebitNoteTopSheet_Excel1WID')    
BEGIN    
DROP TABLE RptDebitNoteTopSheet_Excel1WID     
END     
GO
CREATE TABLE RptDebitNoteTopSheet_Excel1WID    
(    
	[Scheme Description] VARCHAR(100),    
	[From] VARCHAR(10),    
	[To] VARCHAR(10),    
	[Circular No] VARCHAR(100),    
	[Date] NVARCHAR(10),    
	[Scheme Budget] NUMERIC(18,6),    
	[Sec Sales Qty] BIGINT,    
	[Sec Sales Value] NUMERIC(18,6),    
	[% Lib on Sec Sales] NUMERIC(18,6),    
	[Claim Amount] NUMERIC(18,6),
	SubLinkId		INT 
)
GO
IF EXISTS (SELECT 'C' FROM SYSOBJECTS WHERE XTYPE = 'U' AND NAME = 'RptDebitNoteTopSheet_Excel2WID')    
BEGIN    
DROP TABLE RptDebitNoteTopSheet_Excel2WID     
END     
GO
CREATE TABLE RptDebitNoteTopSheet_Excel2WID    
(    
	[Name Of the Category] NVARCHAR(200),    
	[From] VARCHAR(10),    
	[TO] VARCHAR(10),    
	[Circular No] VARCHAR(50),    
	[Monthly Target] NUMERIC(38,6),    
	[Last 2 Mont Avg Sal] NUMERIC(18,6),    
	[Current Month] NUMERIC(18,6),    
	[No of Incent Outlets] NUMERIC(18,0),    
	[Total Discount Amount] NUMERIC(38,6),
	SubLinkId		INT
)
GO
IF EXISTS (SELECT 'C' FROM SYSOBJECTS WHERE XTYPE = 'U' AND NAME = 'RptDebitNoteTopSheet_Excel3WID')    
BEGIN    
DROP TABLE RptDebitNoteTopSheet_Excel3WID     
END     
GO
CREATE TABLE RptDebitNoteTopSheet_Excel3WID    
(    
	[Name Of the Category] NVARCHAR(200),    
	[From] VARCHAR(12),    
	[TO] VARCHAR(12),    
	[Total Normal Amount] NUMERIC(18,2),    
	[Total Normal Sec Sales AS Per TOT] NUMERIC(18,2),    ------------ column name altered by lakshman M Dated On 30-04-2019 PMS ID: ILCRSTPAR4224
	[TOT Diff claims] NUMERIC(18,2),
	SubLinkId		INT        
)  
GO
IF EXISTS (SELECT 'C' FROM SYSOBJECTS WHERE XTYPE = 'U' AND NAME = 'RptDebitNoteTopSheet_Excel4WID')    
BEGIN    
DROP TABLE RptDebitNoteTopSheet_Excel4WID     
END  
GO
CREATE TABLE RptDebitNoteTopSheet_Excel4WID    
(    
[Scheme Description] NVARCHAR(200),    
[From] DATETIME,    
[TO] DATETIME,    
[Circular No] NVARCHAR(100),    
[Scheme Budget] NUMERIC(18,2),    
[Sec Sales Value] NUMERIC(18,2),    
[% Lib on Sec Sales] NUMERIC(18,2),    
[Claim Amount] NUMERIC(18,2),
SubLinkId		INT    
)
GO
IF EXISTS (SELECT 'C' FROM SYSOBJECTS WHERE XTYPE = 'U' AND NAME = 'RptDebitNoteTopSheet_Excel1')      
DROP TABLE RptDebitNoteTopSheet_Excel1
GO
CREATE TABLE RptDebitNoteTopSheet_Excel1      
(      
       [Scheme Description] VARCHAR(100),      
       [From] VARCHAR(10),      
       [To] VARCHAR(10),      
       [Circular No] VARCHAR(100),      
       [Date] NVARCHAR(10),      
       [Scheme Budget] NUMERIC(18,6),      
       [Sec Sales Qty] BIGINT,      
       [Sec Sales Value] NUMERIC(18,6),      
       [% Lib on Sec Sales] NUMERIC(18,6),      
       [Claim Amount] NUMERIC(18,6)      
)
GO
IF EXISTS (SELECT 'C' FROM SYSOBJECTS WHERE XTYPE = 'U' AND NAME = 'RptDebitNoteTopSheet_Excel4')     
DROP TABLE RptDebitNoteTopSheet_Excel4
GO
CREATE TABLE RptDebitNoteTopSheet_Excel4      
(      
       [Scheme Description] NVARCHAR(200),      
       [From] DATETIME,      
       [TO] DATETIME,      
       [Circular No] NVARCHAR(100),      
       [Scheme Budget] NUMERIC(18,2),      
       [Sec Sales Value] NUMERIC(18,2),      
       [% Lib on Sec Sales] NUMERIC(18,2),      
       [Claim Amount] NUMERIC(18,2)      
)
GO
--CRCRSTPAR0058	(Special Pricing available in product version should be incorporated with PARLE specific changes)
DELETE FROM TBL_DOWNLOADINTEGRATION WHERE ProcessName ='DiscountHeader'
INSERT INTO Tbl_DownloadIntegration 
SELECT 88,'DiscountHeader','Cn2Cs_Prk_ContractPricing_Header','Proc_Import_ContractPricing',0,500,GETDATE()
GO
DELETE FROM TBL_DOWNLOADINTEGRATION WHERE  ProcessName ='DiscountDetail'
INSERT INTO Tbl_DownloadIntegration 
SELECT 89,'DiscountDetail','Cn2Cs_Prk_ContractPricing_Detail','Proc_Import_ContractPricing',0,500,GETDATE()
GO
DELETE FROM CustomUpDownload WHERE Updownload ='Download' AND Module='DiscountHeader'
INSERT INTO CustomUpDownload
SELECT 278,1,'DiscountHeader','DiscountHeader','','Proc_Import_ContractPricing','Cn2Cs_Prk_ContractPricing_Header','Proc_Cn2Cs_Dummy','Master','Download',1
GO
DELETE FROM CustomUpDownload WHERE Updownload ='Download' AND Module='DiscountDetail'
INSERT INTO CustomUpDownload
SELECT 279,1,'DiscountDetail','DiscountDetail','','Proc_Import_ContractPricing','Cn2Cs_Prk_ContractPricing_Detail','Proc_Cn2Cs_DiscountMaster','Master','Download',1
GO
UPDATE CustomUpDownload SET SLNO = 280 WHERE Module ='SpecialDiscount' AND SLNO = 249
GO
UPDATE TBL_DOWNLOADINTEGRATION SET SEQUENCENO = 90 WHERE ProcessName  ='SpecialDiscount' AND SequenceNo  = 58
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Cn2Cs_Prk_ContractPricing' AND TYPE='U')
DROP TABLE Cn2Cs_Prk_ContractPricing
GO
CREATE TABLE Cn2Cs_Prk_ContractPricing
(
	CmpId			INT NULL,
	CtgLevelId		INT NULL,
	CtgMainId		INT NULL,
	RtrClassId		INT NULL,
	CmpPrdCtgId		INT NULL,
	PrdCtgValMainId INT NULL,
	RtrId			INT NULL,
	PrdId			INT NULL,
	PrdBatId		INT NULL,
	PriceId			INT NULL,
	DiscountPerc	NUMERIC(38, 6) NULL,
	FlatAmount		NUMERIC(38, 6) NULL,
	EffectiveDate	DATETIME NULL,
	ToDate			DATETIME NULL,
	CreatedDate		DATETIME NULL,
	RtrTaxGroupId	INT NULL,
	SplPrice		NUMERIC(38,6) NULL,
	ComConRefNo		NVARCHAR(100) NULL,
	ComConRefName	NVARCHAR(100) NULL,
	ApplyON			INT NULL,
	WithTax			INT NULL
) 
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Cn2Cs_Prk_SpecialDiscount' AND TYPE='U')
DROP TABLE Cn2Cs_Prk_SpecialDiscount
GO
CREATE TABLE Cn2Cs_Prk_SpecialDiscount
(
	[DistCode] [nvarchar](100) NULL,
	[RetCategoryLevel] [nvarchar](100) NULL,
	[RetCatLevelValue] [nvarchar](100) NULL,
	[PrdCategoryLevel] [nvarchar](100) NULL,
	[PrdCategoryLevelValue] [nvarchar](100) NULL,
	[DiscPer] [numeric](18, 2) NULL,
	[EffFromDate] [datetime] NULL,
	[EffToDate] [datetime] NULL,
	[DownLoadFlag] [nvarchar](1) NULL,
	[CreatedDate] [datetime] NULL,
	[ApplyOn] [varchar](50) NULL,
	[Type] [varchar](50) NULL,
	[FlatAmt] [numeric](18, 2) NULL,
	[SplPrice] [numeric](18, 2) NULL,
	[SPWTax] [nvarchar](10) NULL,
	[CPRefCode] [nvarchar](50) NULL,
	[CPRefName] [nvarchar](150) NULL
)
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Cn2Cs_Prk_ContractPricing_Header' AND TYPE='U')
DROP TABLE Cn2Cs_Prk_ContractPricing_Header
GO
CREATE TABLE Cn2Cs_Prk_ContractPricing_Header
(
	[DistCode] [nvarchar](50) NULL,
	[CMPCode]	[nvarchar](50) NULL,
	[CPRefCode] [nvarchar](50) NULL,
	[CPRefName] [nvarchar](150) NULL,
	[EffFromDate] [datetime] NULL,
	[EffToDate] [datetime] NULL,
	[DiscType] [nvarchar](50) NULL,
	[RtrType] [nvarchar](50) NULL,
	[CPStatus] [nvarchar](15) NULL,
	[RtrCatLvl] [nvarchar](25) NULL,
	[RtrCatCode] [nvarchar](50) NULL,
	[ClassCode] [nvarchar](50) NULL,
	[RtrCode] [nvarchar](50) NULL,
	[ProductLvl] [varchar](25) NULL,
	[DownloadFlag] [nvarchar](5) NULL,
	[CreatedDate] [datetime] NULL,
	[IONumber] [nvarchar](100) NULL
)
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Cn2Cs_Prk_ContractPricing_Detail' AND TYPE='U') 
DROP TABLE Cn2Cs_Prk_ContractPricing_Detail
GO
CREATE TABLE Cn2Cs_Prk_ContractPricing_Detail
(
	[DistCode] [nvarchar](50) NULL,
	[CPRefCode] [nvarchar](50) NULL,
	[PrdCatLvl] [nvarchar](25) NULL,
	[PrdCatCode] [nvarchar](100) NULL,
	[ApplyOn] [nvarchar](50) NULL,
	[DiscPer] [numeric](18, 2) NULL,
	[FlatAmt] [numeric](18, 2) NULL,
	[SplPrice] [numeric](18, 2) NULL,
	[SPWTax] [nvarchar](10) NULL,
	[DownloadFlag] [nvarchar](5) NULL,
	[CreatedDate] [datetime] NULL
)
GO
IF NOT EXISTS (SELECT * FROM SYS.columns WHERE NAME ='ComConRefNo' AND OBJECT_ID = OBJECT_ID('ContractPricingMaster'))
BEGIN
	ALTER TABLE ContractPricingMaster ADD ComConRefNo NVARCHAR(100)
END
GO
IF NOT EXISTS (SELECT * FROM SYS.columns WHERE NAME ='ComConRefName' AND OBJECT_ID = OBJECT_ID('ContractPricingMaster'))
BEGIN
	ALTER TABLE ContractPricingMaster ADD ComConRefName NVARCHAR(100)
END
GO
IF NOT EXISTS (SELECT * FROM SYS.columns WHERE NAME ='ApplyOn' AND OBJECT_ID = OBJECT_ID('ContractPricingDetails'))
BEGIN
	ALTER TABLE ContractPricingDetails ADD ApplyOn INT
END
GO
IF NOT EXISTS (SELECT * FROM SYS.columns WHERE NAME ='WithTax' AND OBJECT_ID = OBJECT_ID('ContractPricingDetails'))
BEGIN
	ALTER TABLE ContractPricingDetails ADD WithTax INT
END
GO
IF NOT EXISTS (SELECT * FROM SYS.columns WHERE NAME ='SpecialPrice' AND OBJECT_ID = OBJECT_ID('ContractPricingDetails'))
BEGIN
	ALTER TABLE ContractPricingDetails ADD SpecialPrice NUMERIC(18,6)
END
GO
UPDATE ContractPricingMaster SET ComConRefNo ='' , ComConRefName = '' WHERE ComConRefNo =''
GO
UPDATE ContractPricingDetails SET APPLYON=0,SpecialPrice =0,WITHTAX=0 WHERE ApplyOn IS NULL
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Cn2Cs_Dummy' AND TYPE='P')
DROP PROCEDURE Proc_Cn2Cs_Dummy
GO
/*
BEGIN TRANSACTION
EXEC Proc_Cn2Cs_Dummy 0
ROLLBACK TRANSACTION	
*/
CREATE  PROCEDURE Proc_Cn2Cs_Dummy
(
	@Po_ErrNo  INT OUTPUT
)
AS
BEGIN
SET NOCOUNT ON
/*********************************
* PROCEDURE	: Proc_Cn2Cs_Dummy
* PURPOSE	: Dummy SP for Upload Integration
* NOTES		:
* CREATED	: MOHANA S
* DATE		: 11-06-2019
* MODIFIED
*********************************/
	SET @Po_ErrNo  =0
	
	RETURN
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Cn2Cs_DiscountMaster' AND TYPE='P')
DROP PROCEDURE Proc_Cn2Cs_DiscountMaster
GO
/*
BEGIN TRANSACTION
EXEC Proc_Cn2Cs_DiscountMaster 0
SELECT * FROM Cn2Cs_Prk_SpecialDiscount
SELECT * FROM Cn2Cs_Prk_ContractPricing_Header
SELECT * FROM Cn2Cs_Prk_ContractPricing_dETAIL
ROLLBACK TRANSACTION
*/
CREATE PROCEDURE Proc_Cn2Cs_DiscountMaster
(
	@Po_ErrNo INT OUTPUT
)
AS
/*********************************
* PROCEDURE		: Proc_Cn2Cs_DiscountMaster
* PURPOSE		: To Insert and Update Special Rate records in the Table  
* CREATED		: MOHANA S
* CREATED DATE	: 11-06-2019
* USER STORY ID : CRCRSTPAR0058
*********************************/
SET NOCOUNT ON
BEGIN
	
	DECLARE @CmpPrdCtgName			AS NVARCHAR(50)
	DECLARE @ErrStatus				AS	INT
	
	SET @Po_ErrNo=0
	SET @ErrStatus=0
	
	IF EXISTS (SELECT * FROM DBO.SysObjects WHERE ID = OBJECT_ID(N'SplRateToAvoidNew')
	AND OBJECTPROPERTY(ID, N'IsUserTable') = 1)
	BEGIN
		DROP TABLE SplRateToAvoidNew
	END
	
	CREATE TABLE SplRateToAvoidNew
	(
		CPRefCode Nvarchar(50)
	)
	
	INSERT INTO SplRateToAvoidNew
	SELECT DISTINCT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Header 
	WHERE ISNULL(CPRefCode,'')='' OR   ISNULL(DiscType,'')='' OR
		  ISNULL(RtrType,'')='' OR     ISNULL(CPStatus,'')='' OR
		  ISNULL(RtrCatLvl,'')='' OR   ISNULL(RtrCatCode,'')='' OR
		  ISNULL(ClassCode,'')='' OR   ISNULL(RtrCode,'')='' 
	
	INSERT INTO SplRateToAvoidNew
	SELECT DISTINCT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Header WHERE CPRefCode NOT IN
			(SELECT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Detail)
	INSERT INTO SplRateToAvoidNew
	SELECT DISTINCT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Detail  WHERE CPRefCode NOT IN
			(SELECT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Header)
	
	INSERT INTO SplRateToAvoidNew 
	SELECT DISTINCT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Header
		WHERE Rtrcatlvl NOT IN (SELECT CtgLevelName FROM RetailerCategoryLevel)
	INSERT INTO SplRateToAvoidNew 
	SELECT DISTINCT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Header
		WHERE RtrCatCode NOT IN (SELECT CtgCode FROM RetailerCategory)
		
	INSERT INTO SplRateToAvoidNew 
	SELECT DISTINCT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Header
		WHERE RtrCode NOT IN (SELECT RtrCode FROM Retailer ) AND UPPER(RtrType) ='RETAILER'
	
	INSERT INTO SplRateToAvoidNew
	SELECT DISTINCT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Detail 
	WHERE ISNULL(PrdCatLvl,'')='' OR ISNULL(PrdCatCode,'')=''  
	 
	INSERT INTO SplRateToAvoidNew
	SELECT DISTINCT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Detail 
	WHERE ISNULL(DiscPer,0)+ ISNULL(FlatAmt,0)+ISNULL(SplPrice,0)=0
	
	INSERT INTO SplRateToAvoidNew
	SELECT DISTINCT A.CPRefCode FROM Cn2Cs_Prk_ContractPricing_Header A INNER JOIN Cn2Cs_Prk_ContractPricing_Detail B
		   ON A.CPRefCode=B.CPRefCode AND UPPER(DiscType) IN ('DISCPER','FLATAMT')
	WHERE ISNULL(ApplyOn,'')=''
	
	INSERT INTO SplRateToAvoidNew
	SELECT DISTINCT A.CPRefCode FROM Cn2Cs_Prk_ContractPricing_Header A INNER JOIN Cn2Cs_Prk_ContractPricing_Detail B
		   ON A.CPRefCode=B.CPRefCode AND UPPER(DiscType) IN ('SPLPRICE')
	WHERE ISNULL(SPWTax,'')=''
	INSERT INTO SplRateToAvoidNew
	SELECT DISTINCT A.CPRefCode FROM Cn2Cs_Prk_ContractPricing_Header A INNER JOIN Cn2Cs_Prk_ContractPricing_Detail B
		   ON A.CPRefCode=B.CPRefCode AND UPPER(CPStatus) NOT IN ('ACTIVE','INACTIVE')
	INSERT INTO SplRateToAvoidNew
	SELECT DISTINCT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Detail WHERE PrdCatLvl NOT IN(SELECT CmpPrdCtgName FROM ProductCategoryLevel)
	
	SET @CmpPrdCtgName=(SELECT TOP 1 CmpPrdCtgName FROM ProductCategoryLevel ORDER BY CmpPrdCtgId DESC)
	INSERT INTO SplRateToAvoidNew
	SELECT DISTINCT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Detail  WHERE UPPER(PrdCatLvl)=UPPER(@CmpPrdCtgName)
	AND PrdCatCode NOT IN(SELECT PRDCCODE FROM Product) 
	INSERT INTO SplRateToAvoidNew
	SELECT DISTINCT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Detail  WHERE UPPER(PrdCatLvl)<>UPPER(@CmpPrdCtgName)
	AND PrdCatCode NOT IN(SELECT PrdCtgValCode FROM ProductCategoryValue)
	
	
	INSERT INTO ErrorLog	
	SELECT DISTINCT 1,'Discount Master','Contract RefCode','Discount Details Not Available'+CPRefCode 
	FROM Cn2Cs_Prk_ContractPricing_Header WHERE CPRefCode NOT IN (SELECT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Detail)
	UNION ALL
	SELECT DISTINCT 2,'Discount Master','Contract RefCode','Header Details Not Available'+CPRefCode 
	FROM Cn2Cs_Prk_ContractPricing_Detail WHERE CPRefCode NOT IN	(SELECT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Header)
	UNION ALL
	SELECT  DISTINCT 3,'Discount Master','','Mandatory Fields Cannot be Null'+CPRefCode  FROM Cn2Cs_Prk_ContractPricing_Header WHERE ISNULL(CPRefCode,'')='' OR   ISNULL(DiscType,'')='' OR	ISNULL(RtrType,'')='' OR     
	ISNULL(CPStatus,'')='' OR	ISNULL(RtrCatLvl,'')='' OR   ISNULL(RtrCatCode,'')='' OR ISNULL(ClassCode,'')='' OR   ISNULL(RtrCode,'')='' 
	UNION ALL
	SELECT DISTINCT 3,'Discount Master','Retailer Category Level','Retailer Category Level Not Available'+CPRefCode 
	FROM Cn2Cs_Prk_ContractPricing_Header WHERE Rtrcatlvl NOT IN (SELECT CtgLevelName FROM RetailerCategoryLevel)
	UNION ALL
	SELECT DISTINCT 4,'Discount Master','Retailer Category Level Value','Retailer Category Code Not Available'+CPRefCode 
	FROM Cn2Cs_Prk_ContractPricing_Header WHERE RtrCatCode NOT IN (SELECT CtgCode FROM RetailerCategory)
	UNION ALL	 
	SELECT DISTINCT 5,'Discount Master','Retailer Code','Retailer Code Not Available'+CPRefCode  
	FROM Cn2Cs_Prk_ContractPricing_Header WHERE RtrCode NOT IN (SELECT RtrCode FROM Retailer ) AND UPPER(RtrType) ='RETAILER'
	UNION ALL
	SELECT DISTINCT 6,'Discount Master','Product Category Level','Mandatory Fields Cannot be Null'+CPRefCode   
	FROM Cn2Cs_Prk_ContractPricing_Detail WHERE ISNULL(PrdCatLvl,'')='' OR ISNULL(PrdCatCode,'')=''  
	UNION ALL
	SELECT DISTINCT 7,'Discount Master','Discount','Discounts Cannot be Zero'+CPRefCode  
	FROM Cn2Cs_Prk_ContractPricing_Detail WHERE ISNULL(DiscPer,0)+ ISNULL(FlatAmt,0)+ISNULL(SplPrice,0)=0
	UNION ALL
	SELECT DISTINCT 8,'Discount Master','ApllyOn','Aplly On Cannot be Null'+A.CPRefCode 
	FROM Cn2Cs_Prk_ContractPricing_Header A INNER JOIN Cn2Cs_Prk_ContractPricing_Detail B ON A.CPRefCode=B.CPRefCode 
	AND UPPER(DiscType) IN ('DISCPER','FLATAMT') WHERE ISNULL(ApplyOn,'')=''
	UNION ALL
	SELECT DISTINCT 9,'Discount Master','WithTax','With Tax Cannot be Null'+A.CPRefCode  
	FROM Cn2Cs_Prk_ContractPricing_Header A INNER JOIN Cn2Cs_Prk_ContractPricing_Detail B ON A.CPRefCode=B.CPRefCode 
	AND UPPER(DiscType) IN ('SPLPRICE')	WHERE ISNULL(SPWTax,'')=''
	UNION ALL
	SELECT DISTINCT 10,'Discount Master','Status','Status Cannot be Null'+A.CPRefCode   
	FROM Cn2Cs_Prk_ContractPricing_Header A INNER JOIN Cn2Cs_Prk_ContractPricing_Detail B ON A.CPRefCode=B.CPRefCode 
	AND UPPER(CPStatus) NOT IN ('ACTIVE','INACTIVE')
	UNION ALL
	SELECT DISTINCT 11,'Discount Master','PrdCatLvl','Product Category Level Not Available'+CPRefCode    
	FROM Cn2Cs_Prk_ContractPricing_Detail WHERE PrdCatLvl NOT IN(SELECT CmpPrdCtgName FROM ProductCategoryLevel) AND UPPER(PrdCatLvl)<>(UPPER(@CmpPrdCtgName)) 
	UNION ALL
	SELECT DISTINCT 12,'Discount Master','PrdCatCode','Product Code Not Available'+CPRefCode     
	FROM Cn2Cs_Prk_ContractPricing_Detail  WHERE UPPER(PrdCatLvl)=UPPER(@CmpPrdCtgName)	
	AND PrdCatCode NOT IN(SELECT PRDCCODE FROM Product) AND UPPER(PrdCatLvl) =(UPPER(@CmpPrdCtgName)) 
	UNION ALL
	SELECT DISTINCT 13,'Discount Master','PrdCatCode','Product Category Level Value Not Available'+CPRefCode      
	FROM Cn2Cs_Prk_ContractPricing_Detail  WHERE UPPER(PrdCatLvl)<>UPPER(@CmpPrdCtgName)
	AND PrdCatCode NOT IN(SELECT PrdCtgValCode FROM ProductCategoryValue)
		
	SELECT * INTO  #Cn2Cs_Prk_ContractPricing_Header FROM Cn2Cs_Prk_ContractPricing_Header  WHERE CPRefCode NOT IN (SELECT CPRefCode FROM SplRateToAvoidNew) AND DOWNLOADFLAG='D'

	SELECT * INTO  #Cn2Cs_Prk_ContractPricing_DETAIL FROM Cn2Cs_Prk_ContractPricing_DETAIL  WHERE CPRefCode NOT IN (SELECT CPRefCode FROM SplRateToAvoidNew) AND DOWNLOADFLAG='D'

	SELECT CPRefCode ,MAX(CreatedDate) CREATEDDATE INTO  #MAXRECORDS_HEADER FROM Cn2Cs_Prk_ContractPricing_Header GROUP BY CPRefCode

	SELECT CPRefCode ,MAX(CreatedDate) CREATEDDATE INTO  #MAXRECORDS_DETAILS FROM Cn2Cs_Prk_ContractPricing_DETAIL GROUP BY CPRefCode

	DELETE A  FROM #Cn2Cs_Prk_ContractPricing_Header A WHERE NOT EXISTS (SELECT CPRefCode,CREATEDDATE FROM #MAXRECORDS_HEADER B WHERE A.CPRefCode =B.CPRefCode AND A.CREATEDDATE = B.CREATEDDATE)

	DELETE A  FROM #Cn2Cs_Prk_ContractPricing_DETAIL A WHERE NOT EXISTS (SELECT CPRefCode,CREATEDDATE FROM #MAXRECORDS_DETAILS B WHERE A.CPRefCode =B.CPRefCode AND A.CREATEDDATE = B.CREATEDDATE)
	 AND DOWNLOADFLAG='D'

	INSERT INTO Cn2Cs_Prk_SpecialDiscount
	SELECT A.DISTCODE,RTRCATLVL,RTRCATCODE,CASE WHEN ProductLvl <> 'PRODUCT' THEN PrdCatLvl ELSE 'PRODUCT' END ,PRDCATCODE,DISCPER,
	EffFromDate ,EffToDate ,'D',GETDATE(),APPLYON, CASE   (CONVERT(DECIMAL(18, 2),DISCPER ))WHEN 0 THEN '' ELSE  DiscType  END,
	FlatAmt , SplPrice ,SPWTax ,A.CPRefCode ,A.CPRefName 
	FROM #Cn2Cs_Prk_ContractPricing_Header A INNER JOIN #Cn2Cs_Prk_ContractPricing_DETAIL B ON A.CPRefCode =B.CPREFCODE
	 AND A.DOWNLOADFLAG='D'
	
	UPDATE C SET DOWNLOADFLAG='Y' FROM Cn2Cs_Prk_ContractPricing_Header C INNER JOIN Cn2Cs_Prk_SpecialDiscount CP
	ON C.CPRefCode=CP.CPRefCode
	UPDATE C SET DOWNLOADFLAG='Y' FROM Cn2Cs_Prk_ContractPricing_Detail C INNER JOIN Cn2Cs_Prk_SpecialDiscount CP
	ON C.CPRefCode=CP.CPRefCode	
	
	RETURN
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='SpecialRate_Track' AND TYPE='U')
DROP TABLE SpecialRate_Track
GO
CREATE TABLE SpecialRate_Track
(
	RtrCtgCode		NVARCHAR(100) NULL,
	RtrCtgValueCode	NVARCHAR(100) NULL,
	RtrCode			NVARCHAR(100) NULL,
	PrdCtgLevel		NVARCHAR(100) NULL,
	Prdccode		NVARCHAR(100) NULL,
	PrdCtgcode		NVARCHAR(100) NULL,
	DiscountPerc	NUMERIC(18, 6) NULL DEFAULT ((0)),
	ApplyOn			NVARCHAR(100) NULL,
	Type			NVARCHAR(100) NULL,
	FromDate		DATETIME NULL,
	CreatedDate		DATETIME NULL,
	DownloadedDate	DATETIME NULL
)
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='ProductBatchPriceWithCounter' AND TYPE='U')
DROP TABLE ProductBatchPriceWithCounter
GO
CREATE TABLE ProductBatchPriceWithCounter 
(
	Slno			NUMERIC(18,0),
	TransNo			NUMERIC(18,0),
	PrdId			NUMERIC(18,0),
	PrdBatId		NUMERIC(18,0),
	PriceCode		NVARCHAR(1000),
	MRP				NUMERIC(18,6),
	ListPrice		NUMERIC(18,6),
	SellingRate		NUMERIC(18,6),
	ClaimRate		NUMERIC(18,6),
	AddRate1		NUMERIC(18,6)
)
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='TempSpecialRateDiscountProduct' AND TYPE='U')
DROP TABLE TempSpecialRateDiscountProduct
GO
CREATE TABLE TempSpecialRateDiscountProduct
(
	[SlNo] [bigint] IDENTITY(1,1) NOT NULL,
	[CtgLevelName] [nvarchar](100) NULL,
	[CtgCode] [nvarchar](100) NULL,
	[RtrCode] [nvarchar](100) NULL,
	[PrdCCode] [nvarchar](100) NULL,
	[PrdBatCode] [nvarchar](100) NULL,
	[DiscPer] [numeric](18, 2) NULL,
	[SpecialSellingRate] [numeric](38, 6) NULL,
	[EffectiveFromDate] [datetime] NULL,
	[EffectiveToDate] [datetime] NULL,
	[CreatedDate] [datetime] NULL,
	[ApplyOn] [tinyint] NULL,
	[TYPE] [int] NULL,
	PRDCTGVALMAINID INT NULL,
	[CPRefCode] [nvarchar](50) NULL,
	[CPRefName] [nvarchar](150) NULL
)
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_Validate_ContractPricing' AND TYPE='P')
DROP PROCEDURE Proc_Validate_ContractPricing
GO
/*
BEGIN TRANSACTION
--SELECT DISTINCT * FROM Cn2Cs_Prk_ContractPricing
EXEC Proc_Validate_ContractPricing 0
SELECT * FROM ErrorLog
SELECT * FROM ContractPricingMaster
SELECT * FROM ContractPricingDetails
ROLLBACK TRANSACTION
*/
CREATE PROCEDURE Proc_Validate_ContractPricing
(
	@Po_ErrNo INT OUTPUT
)
AS
/*********************************
* PROCEDURE		: Proc_Validate_ContractPricing(Base:Proc_ValidateBLContractPricing)
* PURPOSE		: To Insert Contract Pricing Details for Special Rates
* CREATED		: Nandakumar R.G
* CREATED DATE	: 04/05/2010
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date}		{developer}  {brief modification description}
* 21/10/2010	Nanda		 Effective From/To Date changes
* 10-06-2019	MOHANA		CR			CRCRSTPAR0058			INCLUDED CATEGORY WISE DOWNLOAD FOR SPL RATE
*********************************/
SET NOCOUNT ON
BEGIN
	DECLARE @EffectiveDate		AS DATETIME
	DECLARE @ToDate				AS DATETIME
	DECLARE @CmpId				AS INT
	DECLARE @RtrId				AS INT
	DECLARE @CtgMainId			AS INT
	DECLARE @CtgLevelId			AS INT
	DECLARE @PrdCtgValMainId	AS INT
	DECLARE @RtrClassId			AS INT
	DECLARE @CmpPrdCtgId		AS INT
	DECLARE @PrdId				AS INT
	DECLARE @ContractId			AS INT
	DECLARE @RtrTaxGroupId		AS INT
	DECLARE @PrdBatId			AS INT
	DECLARE @PriceId			AS INT	
	DECLARE @ConRefNo			AS NVARCHAR(100)	
	DECLARE @Disc				AS NUMERIC(38,6)
	DECLARE @FlatAmt			AS NUMERIC(38,6)
	DECLARE @SplPrice			AS NUMERIC(38,6)
	DECLARE @WithTax			INT
	DECLARE @Applyon			INT
	DECLARE @Refno				NVARCHAR(100)
	DECLARE @RefName			NVARCHAR(100)
	
	SET @Po_ErrNo =0

	DECLARE Cur_ContPrice CURSOR
	FOR SELECT DISTINCT CmpId,CtgLevelId,CtgMainId,RtrClassId,CmpPrdCtgId,PrdCtgValMainId,RtrId,EffectiveDate,ToDate,RtrTaxGroupId,SplPrice,ComConRefNo,ComConRefName,
	ApplyON,WithTax
	FROM Cn2Cs_Prk_ContractPricing
	WHERE EffectiveDate<=GETDATE()
	ORDER BY CmpId,CtgLevelId,CtgMainId,RtrClassId,CmpPrdCtgId,PrdCtgValMainId,RtrId,EffectiveDate,ToDate,RtrTaxGroupId
	OPEN Cur_ContPrice
	FETCH NEXT FROM Cur_ContPrice INTO @CmpId,@CtgLevelId,@CtgMainId,@RtrClassId,@CmpPrdCtgId,@PrdCtgValMainId,
	@RtrId,@EffectiveDate,@ToDate,@RtrTaxGroupId,@SplPrice,@Refno,@RefName,@Applyon,@WithTax
	WHILE @@FETCH_STATUS=0						 	
	BEGIN  										 	
		SET @ContractId=0                		 		
		SET @ConRefNo=''						 	
		SELECT @ContractId= dbo.Fn_GetPrimaryKeyInteger('ContractPricingMaster','ContractId',CAST(YEAR(GETDATE()) AS INT),MONTH(GETDATE()))
		SELECT @ConRefNo= dbo.Fn_GetPrimaryKeyString('ContractPricingMaster','ConRefNo',CAST(YEAR(GetDate()) AS INT),MONTH(GETDATE()))
		IF @ContractId>(SELECT ISNULL(MAX(ContractId),0) AS ContractId FROM ContractPricingMaster) AND @ConRefNo<>''
		BEGIN
			INSERT INTO ContractPricingMaster(ContractId,CmpId,CtgLevelId,CtgMainId,RtrClassId,
			CmpPrdCtgId,PrdCtgValMainId,RtrId,RtrTaxGroupId,Availability,LastModBy,LastModDate,AuthId,AuthDate,
			DisplayMode,ConRefNo,ConDate,ValidFromDate,ValidTillDate,Status,AllowDiscount,ComConRefNo ,ComConRefName )
			VALUES(@ContractId,@CmpId,@CtgLevelId,@CtgMainId,@RtrClassId,@CmpPrdCtgId,0,
			@RtrId,@RtrTaxGroupId,1,1,CONVERT(VARCHAR(10),GETDATE(),121),1,CONVERT(VARCHAR(10),GETDATE(),121),
			0,@ConRefNo,GETDATE(),@EffectiveDate,@ToDate,1,0,@Refno,@RefName)
			UPDATE Counters SET CurrValue = CurrValue+1 WHERE TabName = 'ContractPricingMaster'
			AND FldName = 'ContractId'
			UPDATE Counters SET CurrValue = CurrValue+1 WHERE TabName = 'ContractPricingMaster'
			AND FldName = 'ConRefNo'
			
			INSERT INTO ContractPricingDetails(ContractId,PrdId,PrdBatId,PriceId,Discount,FlatAmtDisc,
			Availability,LastModBy,LastModDate,AuthId,AuthDate,CtgValMainId,ClaimablePercOnMRP,ApplyOn ,WithTax ,SpecialPrice)
			SELECT @ContractId,PrdId,PrdBatId,PriceId,DiscountPerc,FlatAmount,1,1,GETDATE(),1,GETDATE(),@PrdCtgValMainId,0,@Applyon,@WithTax,@SplPrice
			FROM Cn2Cs_Prk_ContractPricing WHERE CmpId= @CmpId AND CtgLevelId= @CtgLevelId AND
			CtgMainId= @CtgMainId AND RtrClassId= @RtrClassId AND CmpPrdCtgId = @CmpPrdCtgId AND
			PrdCtgValMainId = @PrdCtgValMainId AND RtrId = @RtrId
			AND RtrTaxGroupId=@RtrTaxGroupId AND EffectiveDate=@EffectiveDate AND ComConRefNo = @Refno 
			ORDER BY PrdId,PrdBatId,PriceId,DiscountPerc,FlatAmount
		END
		ELSE
		BEGIN
			INSERT INTO Errorlog VALUES (1,'Cn2Cs_Prk_ContractPricing','System Date',
			'Reset the Counters/System is showing Date as :'+CAST(GETDATE() AS NVARCHAR(10))+'. Please change the System Date')
			SET @Po_ErrNo=1
			CLOSE Cur_ContPrice
			DEALLOCATE Cur_ContPrice
			RETURN
		END
		FETCH NEXT FROM Cur_ContPrice INTO @CmpId,@CtgLevelId,@CtgMainId,@RtrClassId,@CmpPrdCtgId,@PrdCtgValMainId,
		@RtrId,@EffectiveDate,@ToDate,@RtrTaxGroupId,@SplPrice,@Refno,@RefName,@Applyon,@WithTax
	END
	CLOSE Cur_ContPrice
	DEALLOCATE Cur_ContPrice
	IF @Po_ErrNo=0
	BEGIN
		DELETE FROM Cn2Cs_Prk_ContractPricing WHERE EffectiveDate<=GETDATE()
	END		
	
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_InsertContractPricingForNewProduct' AND TYPE='P')
DROP PROCEDURE Proc_InsertContractPricingForNewProduct
GO
/*
BEGIN TRAN
EXEC Proc_InsertContractPricingForNewProduct
SELECT * FROM PRODUCTBATCHDETAILS WHERE PRDBATID =2436
ROLLBACK TRAN
*/
CREATE PROCEDURE Proc_InsertContractPricingForNewProduct
AS
/******************************************************************************  
* PROCEDURE : Proc_InsertContractPricingForNewProduct  
* PURPOSE : To Raise Contract Pricing
* CREATED : S.MOHANA  
* CREATED DATE : 19/04/2018  
* USER STORY ID : CRCRSTPAR0058			
*******************************************************************************/
BEGIN

EXEC PROC_GR_BUILD_PH
	
	CREATE TABLE #TempProductBatch
	(
		PrdId		    BIGINT,
		CtgValMainId    BIGINT,
		ContractId		BIGINT,
		PrdBatId		BIGINT,
		DefaultPriceId	BIGINT,
		PrdCtgvalcode   NVARCHAR(100)
	)
	CREATE TABLE #Product
	(
		Prdid	BIGINT
	)
	CREATE TABLE #ProductCategory
	(
		PrdId	BIGINT,
		PrdCtgValMainId	BIGINT,
		PrdctgValmainCode NVARCHAR(100)
	)
		 
	SELECT DISTINCT PrdId INTO #ProductContract  from ContractpricingDetails A(NOLOCK)
	INNER JOIN ContractPricingMaster B (NOLOCK)
	ON A.ContractId = B.ContractId and Status = 1
	 
	
	INSERT INTO #Product(PrdId)
	SELECT distinct PrdId FROM Product A (nolock) WHERE NOT EXISTS(SELECT PrdId from #ProductContract B WHERE A.PrdId=B.PrdId)
	
	IF NOT EXISTS(SELECT * FROM #Product)
	BEGIN
		RETURN
	END
	INSERT INTO #ProductCategory(PrdId,PrdCtgValMainId,PrdctgValmainCode)
	SELECT A.PrdId,COMPANY_Id,COMPANY_Code  FROM TBL_GR_BUILD_PH A (NOLOCK) INNER JOIN #Product B ON A.PRDID=B.Prdid UNION
	SELECT A.PrdId,Category_Id,Category_Code  FROM TBL_GR_BUILD_PH A (NOLOCK) INNER JOIN #Product B ON A.PRDID=B.Prdid UNION
	SELECT A.PrdId,Brand_Id,Brand_Code  FROM TBL_GR_BUILD_PH A (NOLOCK) INNER JOIN #Product B ON A.PRDID=B.Prdid UNION
	SELECT A.PrdId,PriceSlot_Id,PriceSlot_Code  FROM TBL_GR_BUILD_PH A (NOLOCK) INNER JOIN #Product B ON A.PRDID=B.Prdid UNION
	SELECT A.PrdId,Flavor_Id,Flavor_Code  FROM TBL_GR_BUILD_PH A (NOLOCK) INNER JOIN #Product B ON A.PRDID=B.Prdid  
	 
	 
	DELETE FROM #ProductCategory WHERE PrdId IN (SELECT PrdId from ContractpricingDetails A(NOLOCK)
	INNER JOIN ContractPricingMaster B (NOLOCK)
	ON A.ContractId = B.ContractId and Status = 1 )
	
	INSERT INTO #TempProductBatch(PrdId,CtgValMainId,ContractId,PrdBatId,DefaultPriceId,Prdctgvalcode)
	SELECT DISTINCT C.PrdId,B.CtgValMainId,MAX(A.ContractId),PB.PrdBatId,PB.DefaultPriceId,PrdctgValmainCode FROM 
	ContractPricingMaster A (NOLOCK)
	INNER JOIN ContractPricingDetails B(NOLOCK) ON A.ContractId=B.ContractId 
	INNER JOIN #ProductCategory C(NOLOCK) ON B.CtgValMainId=C.PrdCtgValMainId 
	INNER JOIN ProductBatch PB(NOLOCK) ON PB.PrdId=C.PrdId 
	WHERE B.CtgValMainId<>0 and A.Status=1 AND PB.STATUS = 1 AND  
	CONVERT(VARCHAR(10),GETDATE(),121) BETWEEN A.ValidFromDate AND A.ValidTillDate
	GROUP BY C.PrdId,B.CtgValMainId,PB.PrdBatId,PB.DefaultPriceId,PrdctgValmainCode
	
		SELECT DISTINCT RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCtgLevel AS PrdCCode ,MAX(CreatedDate) AS CreatedDate  INTO #SpecialRateCreatedDate1  
		FROM SpecialRate_Track WITH(NOLOCK) where  PrdCCode ='' GROUP BY RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCtgLevel ORDER BY PrdCtgLevel

		SELECT DISTINCT A.RtrCtgCode,A.RtrCtgValueCode,A.RtrCode,B.PrdCCode,A.CreatedDate ,A.ApplyOn,A.TYPE INTO #SpecialRateCreatedDate
		FROM SpecialRate_Track A WITH(NOLOCK) INNER JOIN  #SpecialRateCreatedDate1 B (NOLOCK) 
		ON A.RtrCtgCode = B.RtrCtgCode AND A.RtrCtgValueCode  = B.RtrCtgValueCode AND A.RtrCode= B.RtrCode AND A.PrdCtgLevel= B.PrdCCode
		AND A.CreatedDate = B.CreatedDate AND A.ApplyOn is not null AND A.PrdCCode =''
			
		 
		SELECT DISTINCT C.PrdId,E.PrdBatId,TransNo AS PriceId,A.RtrCtgCode,A.RtrCtgValueCode,A.RtrCode,A.PrdCtgcode,  
		D.PrdBatCode,DiscountPerc,B.ApplyOn,B.Type,
		(CASE B.ApplyOn WHEN 'MRP' THEN 
		(CASE B.[Type] WHEN 'Mark Up' THEN (MRP*100/(100+DiscountPerc)) WHEN 'Mark down' THEN MRP-(MRP*(DiscountPerc/100))
			ELSE SellingRate-(SellingRate*(DiscountPerc/100))  END)	 
		ELSE SellingRate-(SellingRate*(DiscountPerc/100)) END) AS SplRate
		INTO #SpecialRateDetails   
		FROM SpecialRate_Track A WITH(NOLOCK)  
		INNER JOIN #SpecialRateCreatedDate B ON A.RtrCtgCode = B.RtrCtgCode AND A.RtrCtgValueCode = B.RtrCtgValueCode   
		AND A.RtrCode = B.RtrCode AND A.PrdCtglevel = B.PrdCCode AND A.CreatedDate = B.CreatedDate
		INNER JOIN #TempProductBatch T ON T.PrdCtgvalcode  = A.PrdCtgCode 
		INNER JOIN Product C WITH(NOLOCK) ON T.PrdId = C.Prdid     
		INNER JOIN ProductBatch D WITH(NOLOCK) ON C.PrdId = D.PrdId  
		INNER JOIN ProductBatchPriceWithCounter E ON C.PrdId = E.PrdId AND D.PrdBatId = E.PrdBatId  
		ORDER BY A.PrdCtgcode 
 	
	
		SELECT DISTINCT MAX(E.ContractId) AS ContractId,A.PrdId,A.PrdBatId,A.PriceId,B.CtgLevelId,C.CtgMainId,
		SplRate,RtrCtgValueCode,A.ApplyOn, A.Type,E.CtgValMainId
		INTO #SpecialContractDetails FROM #SpecialRateDetails A WITH(NOLOCK) 
		INNER JOIN RetailerCategoryLevel B WITH(NOLOCK) ON A.RtrCtgCode = B.CtgLevelName 
		INNER JOIN RetailerCategory C WITH(NOLOCK) ON A.RtrCtgValueCode = C.CtgCode AND B.CtgLevelId = C.CtgLevelId
		INNER JOIN ContractPricingMaster D WITH(NOLOCK) ON B.CtgLevelId = D.CtgLevelId AND C.CtgMainId = D.CtgMainId 
		INNER JOIN ContractPricingDetails E WITH(NOLOCK) ON D.ContractId = E.ContractId 
		INNER JOIN  #TempProductBatch T ON A.PrdId = T.PrdId 
		GROUP BY A.PrdId,A.PrdBatId,A.PriceId,B.CtgLevelId,C.CtgMainId,SplRate,RtrCtgValueCode,A.ApplyOn, A.Type,E.CtgValMainId
			
		---Tax Calculation
		DECLARE @PrdIdTax as BIGINT
		DECLARE @PrdbatIdTax AS BIGINT
		DECLARE Cur_Tax CURSOR
		FOR 
		SELECT DISTINCT PrdId,PrdbatId FROM #SpecialContractDetails		
		OPEN Cur_Tax	
		FETCH NEXT FROM Cur_Tax INTO @PrdIdTax,@PrdbatIdTax
		WHILE @@FETCH_STATUS=0
		BEGIN	
				EXEC Proc_SellingTaxCalCulation @PrdIdTax,@PrdbatIdTax
		FETCH NEXT FROM Cur_Tax INTO @PrdIdTax,@PrdbatIdTax		
		END		
		CLOSE Cur_Tax
		DEALLOCATE Cur_Tax	
			
		DECLARE @ExtPriceId AS BIGINT
		SELECT @ExtPriceId =MAX(PriceId) FROM ProductBatchDetails

		SELECT DISTINCT A.PrdId,A.PrdBatId,PriceId,RtrCtgValueCode,DENSE_RANK ()OVER (ORDER BY A.PriceId,A.PrdbatId,RtrCtgValueCode)+@ExtPriceId AS NewPriceId,
		CASE A.ApplyOn WHEN 'MRP' THEN 
									(CASE [Type] WHEN 'MARK UP' THEN (SplRate*100)/(100+TaxPercentage)
										WHEN 'MARK DOWN' THEN (SplRate*100)/(100+TaxPercentage)	END)
		ELSE CAST(SplRate AS NUMERIC(38,6)) END AS NewSelRate,CtgValMainId 
		INTO #SplProductBatchDetails
		FROM #SpecialContractDetails A WITH(NOLOCK) INNER JOIN ProductBatchTaxPercent B WITH(NOLOCK) ON A.PrdId = B.PrdId
		AND A.PrdBatId = B.PrdBatId ORDER BY A.PrdId,A.PrdBatId,PriceId,RtrCtgValueCode,CtgValMainId 

		INSERT INTO ProductBatchDetails (PriceId,PrdBatId,PriceCode,BatchSeqId,SLNo,PrdBatDetailValue,DefaultPrice,PriceStatus,
        Availability,LastModBy,LastModDate,AuthId,AuthDate,XMLUpload) 
        SELECT DISTINCT NewPriceId,A.PrdBatId,PriceCode+'SplRate'+CONVERT(NVARCHAR(200),B.NewSelRate)+CONVERT(NVARCHAR(10),GETDATE(),121),
        A.BatchSeqId,A.SLNo,(CASE SelRte WHEN 1 THEN B.NewSelRate ELSE PrdBatDetailValue END),0,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,
        CONVERT(NVARCHAR(10),GETDATE(),121),0
        FROM ProductBatchDetails A WITH(NOLOCK) 
        INNER JOIN #SplProductBatchDetails B ON A.PrdBatId = B.PrdBatId AND A.PriceId = B.PriceId
        INNER JOIN ProductBatch C WITH(NOLOCK) ON A.PrdBatId = C.PrdBatId
        INNER JOIN BatchCreation D WITH(NOLOCK) ON C.BatchSeqId = D.BatchSeqId AND A.SLNo = D.SlNo ORDER BY A.PrdBatId,NewPriceId 
            
			
		UPDATE Counters SET CurrValue =(SELECT MAX(PriceId) FROM ProductBatchDetails) WHERE TabName = 'ProductBatchDetails' AND FldName = 'PriceId'
     
        INSERT INTO ContractPricingDetails (ContractId,PrdId,PrdBatId,PriceId,Discount,FlatAmtDisc,Availability,LastModBy,LastModDate,AuthId,
        AuthDate,CtgValMainId,ClaimablePercOnMRP)            
        SELECT DISTINCT ContractId,A.PrdId,A.PrdBatId,B.NewPriceId,0,0,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121),a.CtgValMainId,0
        FROM #SpecialContractDetails A INNER JOIN #SplProductBatchDetails B ON A.PrdId = B.PrdID AND A.PrdBatId = B.PrdBatId AND A.RtrCtgValueCode=B.RtrCtgValueCode
        WHERE NOT EXISTS (SELECT ContractId FROM ContractPricingDetails C WITH(NOLOCK) WHERE A.ContractId = C.ContractId 
        AND A.PrdId = C.PrdID AND A.PrdBatId = C.PrdBatId) ORDER BY ContractId,A.PrdId,A.PrdBatId,B.NewPriceId
 
            
		INSERT INTO SpecialRateAftDownload (RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCCode,PrdBatCCode,SplSelRate,FromDate,CreatedDate,DownloadedDate,
        ContractPriceIds,DiscountPerc,SplrateId)
        SELECT DISTINCT RtrCtgCode,A.RtrCtgValueCode,A.RtrCode,PrdCCode,A.PrdBatCode,A.SplRate,CONVERT(NVARCHAR(10),GETDATE(),121),GETDATE(),GETDATE(),
        '-'+CONVERT(NVARCHAR(50),NewPriceId)+'-',DiscountPerc,0
        FROM #SpecialRateDetails A INNER JOIN #SplProductBatchDetails B ON A.PrdId = B.PrdId AND A.PrdBatId = B.PrdBatId 
        and A.RtrCtgValueCode=B.RtrCtgValueCode
		INNER JOIN Product P ON A.Prdid = P.Prdid AND B.PrdId = P.PrdId
        ORDER BY PrdCCode,PrdBatCode
 
            
		INSERT INTO SpecialRateAftDownload_calc (RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCCode,PrdBatCCode,SplSelRate,FromDate,CreatedDate,DownloadedDate,
        ContractPriceIds,DiscountPerc,SplrateId,ApplyOn,TYPE)
        SELECT DISTINCT RtrCtgCode,A.RtrCtgValueCode,A.RtrCode,PrdCCode,A.PrdBatCode,A.SplRate,CONVERT(NVARCHAR(10),GETDATE(),121),GETDATE(),GETDATE(),
        '-'+CONVERT(NVARCHAR(50),NewPriceId)+'-',DiscountPerc,0,CASE UPPER(LTRIM(RTRIM(ApplyOn))) WHEN 'SELLINGRATE' THEN 3 WHEN 'PURCHASERATE' THEN 2 ELSE 1 END as Applyon,
		CASE UPPER(LTRIM(RTRIM([Type]))) WHEN 'MARK UP' THEN 1 WHEN 'MARK DOWN' THEN 2 ELSE 0 END AS [Type]
        FROM #SpecialRateDetails A INNER JOIN #SplProductBatchDetails B ON A.PrdId = B.PrdId AND A.PrdBatId = B.PrdBatId 
        and A.RtrCtgValueCode=B.RtrCtgValueCode
		INNER JOIN Product P ON A.Prdid = P.Prdid AND B.PrdId = P.PrdId
        ORDER BY PrdCCode,PrdBatCode
         
	 
RETURN
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_Cn2Cs_SpecialDiscount' AND TYPE='P')
DROP PROCEDURE Proc_Cn2Cs_SpecialDiscount
GO
/*
BEGIN TRAN
delete from ErrorLog
select * from CN2CS_PRK_SPECIALDISCOUNT
EXEC Proc_Cn2Cs_SpecialDiscount 0
select * from ErrorLog
select * from CN2CS_PRK_SPECIALDISCOUNT
select * from ContractPricingDetails where prdid  =7416 ORDER BY 1 DESC
SELECT * FROM CONTRACTPRICINGDETAILS Order by 1 desc 
ROLLBACK TRAN
*/
CREATE PROCEDURE Proc_Cn2Cs_SpecialDiscount
(
	@Po_ErrNo INT OUTPUT
)
AS
/*********************************
* PROCEDURE		: Proc_Cn2Cs_SpecialDiscount
* PURPOSE		: To insert SpecialRateDetails in Productbatchdetails table
* CREATED		:  Muthukrishnan.G.P
* CREATED DATE	:  31-12-2012
* MODIFIED      :   
* DATE AUTHOR   : DESCRIPTION
------------------------------------------------
* {date}		{developer}		{brief modification description}
* 2013-03-01	Vijendra Kumar	CR(PM)-CCRSTPVM0001
* 05-10-2015	Mahesh Babu D	Tax Not Attached for Product		ICRSTPAR1798
* 28-12-2015	Mahesh Babu D	Selling Rate Spl Rate Calc			ICRSTPAR1960 
* 04-06-2019	MOHANA		CR			CRCRSTPAR0058			INCLUDED CATEGORY WISE DOWNLOAD FOR SPL RATE
*********************************/
SET NOCOUNT ON
BEGIN
	
	DECLARE @RtrHierLevelCode 		AS  NVARCHAR(100)
	DECLARE @RtrHierLevelValueCode 	AS  NVARCHAR(100)
	DECLARE @RtrCode				AS 	NVARCHAR(100)
	
	DECLARE @PrdCCode				AS 	NVARCHAR(100)
	DECLARE @PrdBatCode				AS 	NVARCHAR(100)
	DECLARE @PrdBatCodeAll			AS 	NVARCHAR(100)
	DECLARE @PriceCode				AS 	NVARCHAR(4000)
	DECLARE @Disperc                AS 	NUMERIC(38,6)
	DECLARE @SplRate				AS 	NUMERIC(38,6)
	DECLARE @PrdCtgValMainId		AS	INT
	DECLARE @CtgLevelId				AS 	INT
	DECLARE @CtgMainId				AS 	INT
	DECLARE @RtrId 					AS 	INT
	DECLARE @PrdId 					AS 	INT
	DECLARE @PrdBatId				AS 	INT
	DECLARE @PriceId				AS 	INT
	DECLARE @ContractReq			AS 	INT
	DECLARE @SRReCalc				AS 	INT
	DECLARE @ReCalculatedSR			AS 	NUMERIC(38,6)
	DECLARE @EffFromDate			AS 	DATETIME
	DECLARE @EffToDate				AS 	DATETIME
	DECLARE @CreatedDate			AS 	DATETIME
	
	DECLARE @MulTaxGrp				AS 	INT
	DECLARE @TaxGroupId				AS	INT
	DECLARE @MulRtrId				AS	INT
	DECLARE @MulTaxGroupId			AS 	INT
	DECLARE @DownldSplRate			AS 	NUMERIC(38,6)
	DECLARE @ContHistExist			AS	INT
	DECLARE @ContractPriceIds		AS	NVARCHAR(1000)
	DECLARE @RefPriceId				AS	INT
	DECLARE @CmpId					AS	INT
	DECLARE @CmpPrdCtgId			AS	INT
	DECLARE @RefRtrId				AS	INT
	DECLARE @ErrStatus				AS	INT
	DECLARE @RtrTaxGrp AS INT
	SET @Po_ErrNo=0
	SET @ErrStatus=0
	SET @RtrTaxGrp=0
	
	EXEC Proc_CalculateSpecialDiscountAftRate
	
    SET @ContractReq=1
	SET @SRReCalc=2
	
    TRUNCATE TABLE ETL_Prk_BLContractPricing	
	CREATE TABLE #SpecialRateToAvoid
	(
		Slno				BIGINT,
		RtrHierLevel		NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		RtrHierValue		NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		RtrCode				NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		PrdCCode			NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		PrdBatCode			NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		EffectiveFromDate	DATETIME
	)
	CREATE TABLE #RetailerCategory
	(
	CHANNEL NVARCHAR(100),
	GRP NVARCHAR(100)
	)
	INSERT INTO #RetailerCategory 	
	SELECT DISTINCT R.CtgCode AS CHANNEL,RC.CtgCode  AS GRP
	FROM RetailerCategory R
	INNER JOIN RetailerCategory RC  ON R.CtgMainId  = RC.CtgLinkId 
		INNER JOIN RetailerValueClass RVC ON  RC.CtgMainId=RVC.CtgMainId
		INNER JOIN RetailerValueClassMap RCM ON RCM.RtrValueClassId=RVC.RtrClassId
	--SELECT DISTINCT CtgCode
	--FROM RetailerCategory RC 
	--INNER JOIN RetailerValueClass RVC ON  RC.CtgMainId=RVC.CtgMainId
	--INNER JOIN RetailerValueClassMap RCM ON RCM.RtrValueClassId=RVC.RtrClassId 
	
		---Retailer Class Validation
		INSERT INTO #SpecialRateToAvoid(SlNo,RtrHierLevel,RtrHierValue,RtrCode,PrdCCode,PrdBatCode,EffectiveFromDate)
		SELECT DISTINCT T.SlNo,CtgLevelName,T.CtgCode,RtrCode,PrdCCode,PrdBatCode,T.EffectiveFromDate
		FROM TempSpecialRateDiscountProduct T
		WHERE NOT EXISTS(SELECT GRP FROM #RetailerCategory R WHERE R.GRP=T.CtgCode) AND rtrcode='ALL' AND CtgLevelName ='GROUP'
		UNION 
		SELECT DISTINCT T.SlNo,CtgLevelName,T.CtgCode,RtrCode,PrdCCode,PrdBatCode,T.EffectiveFromDate
		FROM TempSpecialRateDiscountProduct T
		WHERE NOT EXISTS(SELECT CHANNEL FROM #RetailerCategory R WHERE R.CHANNEL=T.CtgCode) AND rtrcode='ALL' AND CtgLevelName ='CHANNEL'
		
		INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
		SELECT DISTINCT 1,'Special Rate','Retailer','Retailer Not Attached to Category:'+RtrHierLevel+' Not Available' FROM #SpecialRateToAvoid
		INSERT INTO #SpecialRateToAvoid(SlNo,RtrHierLevel,RtrHierValue,RtrCode,PrdCCode,PrdBatCode,EffectiveFromDate)
		SELECT DISTINCT T.SlNo,CtgLevelName,T.CtgCode,RtrCode,PrdCCode,PrdBatCode,T.EffectiveFromDate
		FROM TempSpecialRateDiscountProduct T
		WHERE NOT EXISTS(SELECT CmpRtrCode  FROM Retailer R WHERE R.CmpRtrCode=T.RTRCODE)  AND CtgLevelName='ALL'
		INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
		SELECT DISTINCT 1,'Special Rate','Retailer','Retailer Not Available :'+RtrCode  FROM #SpecialRateToAvoid
		DELETE A FROM TempSpecialRateDiscountProduct A INNER JOIN #SpecialRateToAvoid B ON A.Slno=B.Slno and A.CtgCode=B.RtrHierValue and A.Prdccode=B.Prdccode--Modified by Raja.C
		--Product Batch Validation
		INSERT INTO #SpecialRateToAvoid(SlNo,RtrHierLevel,RtrHierValue,RtrCode,PrdCCode,PrdBatCode,EffectiveFromDate)
		SELECT DISTINCT 1,RetCategoryLevel,RetCatLevelValue,'ALL',PrdCategoryLevelValue,'ALL',EffFromDate 
		FROM Cn2Cs_Prk_SpecialDiscount A (NOLOCK) WHERE DownLoadFlag = 'D' AND PrdCategoryLevel = 'Product'
		AND NOT EXISTS (SELECT DISTINCT PrdCCode FROM Product B (NOLOCK) 
		INNER JOIN ProductBatch C (NOLOCK) ON B.PrdId = C.PrdId WHERE A.PrdCategoryLevelValue = B.PrdCCode)
		INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
		SELECT DISTINCT 1,'Product','Product & ProductBatch','Product or Product Batch Not Available-'+PrdCategoryLevelValue
		FROM Cn2Cs_Prk_SpecialDiscount A (NOLOCK) WHERE DownLoadFlag = 'D' AND PrdCategoryLevel = 'Product' 
		AND NOT EXISTS (SELECT DISTINCT PrdCCode FROM Product B (NOLOCK) 
		INNER JOIN ProductBatch C (NOLOCK) ON B.PrdId = C.PrdId WHERE A.PrdCategoryLevelValue = B.PrdCCode)
		--Till Here	
			
		---Retailer Category Level Validation
		INSERT INTO #SpecialRateToAvoid(SlNo,RtrHierLevel,RtrHierValue,RtrCode,PrdCCode,PrdBatCode,EffectiveFromDate)
		SELECT DISTINCT SlNo,CtgLevelName,CtgCode,RtrCode,PrdCCode,PrdBatCode,EffectiveFromDate
		FROM TempSpecialRateDiscountProduct
		WHERE CtgLevelName NOT IN (SELECT CtgLevelName FROM RetailerCategoryLevel)
		
		INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
		SELECT DISTINCT 1,'Special Rate','Retailer Category Level','Retailer Category Level:'+CtgLevelName+' Not Available' FROM TempSpecialRateDiscountProduct
		WHERE CtgLevelName NOT IN (SELECT CtgLevelName FROM RetailerCategoryLevel)
		
		DELETE A FROM TempSpecialRateDiscountProduct A INNER JOIN #SpecialRateToAvoid B ON A.Slno=B.Slno and A.CtgCode=B.RtrHierValue and A.Prdccode=B.Prdccode--Modified by Raja.C
		----
        --ProductTaxGroup Validation 		
		INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
		SELECT DISTINCT 2,'Tax Group','TaxGroup Not Attached','Tax Group for :'+PrdCCode+' Not Available' FROM TempSpecialRateDiscountProduct
		WHERE PrdCCode  IN (SELECT PrdCCode FROM Product(NOLOCK) WHERE TaxGroupId=0 and prdstatus =1)		
	
		DELETE A FROM TempSpecialRateDiscountProduct A INNER JOIN Product B(NOLOCK)  ON A.PrdCCode=B.PrdCCode and B.TaxGroupId=0 
		--Till here
		
		---Retailer Category Code Validation
		INSERT INTO #SpecialRateToAvoid(SlNo,RtrHierLevel,RtrHierValue,RtrCode,PrdCCode,PrdBatCode,EffectiveFromDate)
		SELECT DISTINCT SlNo,CtgLevelName,CtgCode,RtrCode,PrdCCode,PrdBatCode,EffectiveFromDate
		FROM TempSpecialRateDiscountProduct
		WHERE CtgCode NOT IN (SELECT CtgCode FROM RetailerCategory)
		
		INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
		SELECT DISTINCT 1,'Special Rate','Retailer Category Level Value','Retailer Category Level Value:'+CtgCode+' Not Available' FROM TempSpecialRateDiscountProduct
		WHERE CtgCode NOT IN (SELECT CtgCode FROM RetailerCategory)		
	
		DELETE A FROM TempSpecialRateDiscountProduct A INNER JOIN #SpecialRateToAvoid B ON A.Slno=B.Slno and A.CtgCode=B.RtrHierValue and A.Prdccode=B.Prdccode--Modified by Raja.C 
		--Eeffective From Date Validation
		INSERT INTO #SpecialRateToAvoid(SlNo,RtrHierLevel,RtrHierValue,RtrCode,PrdCCode,PrdBatCode,EffectiveFromDate)
		SELECT DISTINCT SlNo,CtgLevelName,CtgCode,RtrCode,PrdCCode,PrdBatCode,EffectiveFromDate
		FROM TempSpecialRateDiscountProduct
		WHERE EffectiveFromDate>GETDATE()
		
		INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
		SELECT DISTINCT 1,'Special Rate','Effective From Date','Effective Date :'+CAST(EffectiveFromDate AS NVARCHAR(12))+' is greater ' 
		FROM TempSpecialRateDiscountProduct
		WHERE EffectiveFromDate>GETDATE()
		DELETE A FROM TempSpecialRateDiscountProduct A INNER JOIN #SpecialRateToAvoid B ON A.Slno=B.Slno and A.CtgCode=B.RtrHierValue  and A.Prdccode=B.Prdccode --Modified by Raja.C
			
		IF NOT EXISTS(SELECT * FROM TempSpecialRateDiscountProduct)
		BEGIN
			RETURN
		END
		
		SELECT @CmpId=ISNULL(CmpId,0) FROM Company C WHERE DefaultCompany=1
		
		IF EXISTS(Select 'X' FROM TaxSettingMaster A (NOLOCK) 
		INNER JOIN  TaxGroupSetting B (NOLOCK) ON A.RtrId=B.TaxGroupId 
		WHERE TaxGroup=1	and A.TaxType='GST')
		BEGIN				
			Select @RtrTaxGrp=MIN(Distinct A.RtriD) FROM TaxSettingMaster A (NOLOCK) 
			INNER JOIN  TaxGroupSetting B (NOLOCK) ON A.RtrId=B.TaxGroupId 
			WHERE TaxGroup=1	and A.TaxType='GST'	AND RtrGroup='RTRINTRA'			
		END	
		ELSE
		BEGIN
			SELECT @RtrTaxGrp=MIN(Distinct A.RtriD) FROM TaxSettingMaster A (NOLOCK) 
			INNER JOIN  TaxGroupSetting B (NOLOCK) ON A.RtrId=B.TaxGroupId 
			WHERE TaxGroup=1	and A.TaxType='VAT'				
		END
		
	
		SELECT DISTINCT ISNULL(Prk.CtgLevelName,'') as RtrHierLevelCode,ISNULL(Prk.CtgCode,'') as RtrHierLevelValueCode,
		RtrCode,ISNULL(Prk.PrdCCode,'') as PrdCCode,ISNULL(Prk.PrdBatCode,'') as PrdBatCodeAll,
		ISNULL(DiscPer,0) as Disperc,ISNULL(SpecialSellingRate,0) as SplRate,
		ISNULL(Prk.EffectiveFromDate,GETDATE()) as EffFromDate,ISNULL(Prk.EffectiveToDate,'2013-12-31') as EffToDate,
		ISNULL(CreatedDate,GETDATE()) as CreatedDate,ISNULL(P.PrdId,0) AS PrdId,
		ISNULL(RCL.CtgLevelId,0) AS CtgLevelId,ISNULL(RC.CtgMainId,0) AS CtgMainId,
		Prdbatid,PCV.PrdCtgValMainId,CmpPrdCtgId,ISNULL(Prk.ApplyOn,0) AS ApplyOn,ISNULL(Prk.[Type],0) AS [Type],CPRefCode,CPRefName 
		INTO #SplPriceDetails
		FROM TempSpecialRateDiscountProduct Prk 
		INNER JOIN Product P ON Prk.PrdCCode=P.PrdCCode 
		INNER JOIN Productbatch PB ON PB.prdid=P.Prdid and PB.PrdBatCode=Prk.PrdBatCode
		INNER JOIN ProductCategoryValue PCV ON P.PrdCtgValMainId=PCV.PrdCtgValMainId
		INNER JOIN RetailerCategoryLevel RCL ON Prk.CtgLevelName=RCL.CtgLevelName 
		INNER JOIN RetailerCategory RC ON Prk.CtgCode=RC.CtgCode	
		WHERE  Prk.EffectiveFromDate<=GETDATE()	  AND Prk.PrdCtgValMainId <> 0
		INSERT INTO #SplPriceDetails
		SELECT DISTINCT ISNULL(Prk.CtgLevelName,'') as RtrHierLevelCode,ISNULL(Prk.CtgCode,'') as RtrHierLevelValueCode,
		RtrCode,ISNULL(Prk.PrdCCode,'') as PrdCCode,ISNULL(Prk.PrdBatCode,'') as PrdBatCodeAll,
		ISNULL(DiscPer,0) as Disperc,ISNULL(SpecialSellingRate,0) as SplRate,
		ISNULL(Prk.EffectiveFromDate,GETDATE()) as EffFromDate,ISNULL(Prk.EffectiveToDate,'2013-12-31') as EffToDate,
		ISNULL(CreatedDate,GETDATE()) as CreatedDate,ISNULL(P.PrdId,0) AS PrdId,
		ISNULL(RCL.CtgLevelId,0) AS CtgLevelId,ISNULL(RC.CtgMainId,0) AS CtgMainId,
		Prdbatid,0,0,ISNULL(Prk.ApplyOn,0) AS ApplyOn,ISNULL(Prk.[Type],0) AS [Type],CPRefCode,CPRefName 
		FROM TempSpecialRateDiscountProduct Prk 
		INNER JOIN Product P ON Prk.PrdCCode=P.PrdCCode 
		INNER JOIN Productbatch PB ON PB.prdid=P.Prdid and PB.PrdBatCode=Prk.PrdBatCode
		INNER JOIN RetailerCategoryLevel RCL ON Prk.CtgLevelName=RCL.CtgLevelName 
		INNER JOIN RetailerCategory RC ON Prk.CtgCode=RC.CtgCode	
		WHERE  Prk.EffectiveFromDate<=GETDATE()	AND Prk.PrdCtgValMainId = 0

		INSERT INTO #SplPriceDetails
		SELECT DISTINCT ISNULL(Prk.CtgLevelName,'') as RtrHierLevelCode,ISNULL(Prk.CtgCode,'') as RtrHierLevelValueCode,
		RtrCode,ISNULL(Prk.PrdCCode,'') as PrdCCode,ISNULL(Prk.PrdBatCode,'') as PrdBatCodeAll,
		ISNULL(DiscPer,0) as Disperc,ISNULL(SpecialSellingRate,0) as SplRate,
		ISNULL(Prk.EffectiveFromDate,GETDATE()) as EffFromDate,ISNULL(Prk.EffectiveToDate,'2013-12-31') as EffToDate,
		ISNULL(CreatedDate,GETDATE()) as CreatedDate,ISNULL(P.PrdId,0) AS PrdId,
		ISNULL(RCL.CtgLevelId,0) AS CtgLevelId,ISNULL(RC.CtgMainId,0) AS CtgMainId,
		Prdbatid,PCV.PrdCtgValMainId,CmpPrdCtgId,ISNULL(Prk.ApplyOn,0) AS ApplyOn,ISNULL(Prk.[Type],0) AS [Type],CPRefCode,CPRefName  
		FROM TempSpecialRateDiscountProduct Prk 
		INNER JOIN Product P ON Prk.PrdCCode=P.PrdCCode 
		INNER JOIN Productbatch PB ON PB.prdid=P.Prdid and PB.PrdBatCode=Prk.PrdBatCode
		INNER JOIN ProductCategoryValue PCV ON P.PrdCtgValMainId=PCV.PrdCtgValMainId
		INNER JOIN RetailerCategoryLevel RCL ON Prk.CtgLevelName=RCL.CtgLevelName 
		INNER JOIN RetailerCategory RC ON Prk.CtgCode=RC.CtgCode
		INNER JOIN RetailerCategory R ON R.CtgLinkCode =RC.CtgCode 
		WHERE  Prk.EffectiveFromDate<=GETDATE()	  AND Prk.PrdCtgValMainId <> 0 AND PRK.RTRCODE='ALL'

		INSERT INTO #SplPriceDetails
		SELECT DISTINCT ISNULL(Prk.CtgLevelName,'') as RtrHierLevelCode,ISNULL(Prk.CtgCode,'') as RtrHierLevelValueCode,
		RtrCode,ISNULL(Prk.PrdCCode,'') as PrdCCode,ISNULL(Prk.PrdBatCode,'') as PrdBatCodeAll,
		ISNULL(DiscPer,0) as Disperc,ISNULL(SpecialSellingRate,0) as SplRate,
		ISNULL(Prk.EffectiveFromDate,GETDATE()) as EffFromDate,ISNULL(Prk.EffectiveToDate,'2013-12-31') as EffToDate,
		ISNULL(CreatedDate,GETDATE()) as CreatedDate,ISNULL(P.PrdId,0) AS PrdId,
		ISNULL(RCL.CtgLevelId,0) AS CtgLevelId,ISNULL(RC.CtgMainId,0) AS CtgMainId,
		Prdbatid,0,0,ISNULL(Prk.ApplyOn,0) AS ApplyOn,ISNULL(Prk.[Type],0) AS [Type],CPRefCode,CPRefName 
		FROM TempSpecialRateDiscountProduct Prk 
		INNER JOIN Product P ON Prk.PrdCCode=P.PrdCCode 
		INNER JOIN Productbatch PB ON PB.prdid=P.Prdid and PB.PrdBatCode=Prk.PrdBatCode
		INNER JOIN RetailerCategoryLevel RCL ON Prk.CtgLevelName=RCL.CtgLevelName 
		INNER JOIN RetailerCategory RC ON Prk.CtgCode=RC.CtgCode	
		INNER JOIN RetailerCategory R ON R.CtgLinkCode =RC.CtgCode 
		WHERE  Prk.EffectiveFromDate<=GETDATE()	AND Prk.PrdCtgValMainId = 0 AND  RTRCODE='ALL'
	
		---Tax Calculation
		DECLARE @PrdIdTax as BIGINT
		DECLARE @PrdbatIdTax AS BIGINT
		DECLARE Cur_Tax CURSOR
		FOR 
		SELECT DISTINCT PrdId,PrdbatId FROM #SplPriceDetails		
		OPEN Cur_Tax	
		FETCH NEXT FROM Cur_Tax INTO @PrdIdTax,@PrdbatIdTax
		WHILE @@FETCH_STATUS=0
		BEGIN	
				EXEC Proc_SellingTaxCalCulation @PrdIdTax,@PrdbatIdTax
		FETCH NEXT FROM Cur_Tax INTO @PrdIdTax,@PrdbatIdTax		
		END		
		CLOSE Cur_Tax
		DEALLOCATE Cur_Tax	
	
		DECLARE @MaxPriceId as BIGINT
		SELECT @MaxPriceId=ISNULL(MAX(PriceId),0) from ProductBatchDetails
	
		--SELECT A.*,CAST(SplRate*100/(100+TaxPercentage) AS NUMERIC(38,6)) AS NewSellRate
		
		SELECT A.*,CASE A.ApplyOn WHEN 1 THEN 
											(CASE [Type] WHEN 1 THEN (SplRate*100)/(100+TaxPercentage)
											 WHEN 2 THEN (SplRate*100)/(100+TaxPercentage)	END)
		ELSE CAST(SplRate AS NUMERIC(38,6)) END AS NewSellRate,			-- MODIFIED FOR ICRSTPAR1960 
		@MaxPriceId+ROW_NUMBER() OVER(Order by A.PrdId,A.PrdBatId,CtgLevelId,CtgMainId,PrdCtgValMainId,CmpPrdCtgId)
		as NewPriceId
		INTO #PriceMaster
		FROM #SplPriceDetails A INNER JOIN ProductBatchTaxPercent B ON A.PrdId=B.PrdId
		AND A.PrdBatId=b.PrdBatId
		  
		--SELECT A.*,CASE A.ApplyOn WHEN 1 THEN 
		--									(CASE [Type] WHEN 1 THEN SplRate-(SplRate*(TaxPercentage/100))
		--									 WHEN 2 THEN SplRate-(SplRate*(TaxPercentage/100))	END)
		--ELSE CAST(SplRate*100/(100+TaxPercentage) AS NUMERIC(38,6)) END AS NewSellRate
		--,@MaxPriceId+ROW_NUMBER() OVER(Order by A.PrdId,A.PrdBatId,CtgLevelId,CtgMainId,PrdCtgValMainId,CmpPrdCtgId)
		--as NewPriceId
		--INTO #PriceMaster
		--FROM #SplPriceDetails A INNER JOIN ProductBatchTaxPercent B ON A.PrdId=B.PrdId
		--AND A.PrdBatId=b.PrdBatId
	
		--SELECT * FROM ProductBatchTaxPercent WHERE PRDID=2556
		
		SELECT PrdbatId,MAX(PriceId) as PriceId 
		INTO #ProductbatchDetails 
		FROM ProductBatchDetails GROUP BY PrdbatId
	
		INSERT INTO ProductBatchDetails(
		PriceId,PrdBatId,PriceCode,BatchSeqId,SLNo,PrdBatDetailValue,DefaultPrice,PriceStatus,
		Availability,LastModBy,LastModDate,AuthId,AuthDate,XMLUpload)
		SELECT DISTINCT 
		NewPriceId,A.PrdBatId,PrdBatCode+'-Spl Rate-'+CAST(NewSellRate AS NVARCHAR(100))
						+CAST(GETDATE() AS NVARCHAR(20)) ,
		
		D.BatchSeqId,D.SlNo,
				(CASE BC.SelRte WHEN 1 THEN NewSellRate ELSE D.PrdBatDetailValue END) AS SelRte,
				0,1,1,1,GETDATE(),1,GETDATE(),0 
		FROM #PriceMaster A 
		INNER JOIN #ProductbatchDetails B ON A.PrdBatId=B.PrdBatId
		INNER JOIN ProductBatchDetails D ON D.PrdBatId=A.PrdBatId and D.PrdBatId=B.PrdBatId and D.PriceId=B.PriceId
		INNER JOIN BatchCreation BC ON BC.BatchSeqId=D.BatchSeqId AND D.SlNo=BC.SlNo
		INNER JOIN ProductBatch C ON C.PrdBatId=A.PrdBatId and C.PrdBatId=B.PrdBatId and C.PrdId=A.PRdId
		and D.PrdBatId=C.PrdBatId
		ORder by NewPriceId,A.PrdBatId,D.SlNo
		
		UPDATE Counters SET CurrValue=(SELECT ISNULL(Max(PriceId),0) FROM ProductBatchDetails) WHERE TabName='ProductBatchDetails' AND FldName='PriceId'
		UPDATE A SET EnableCloning=1 FROM ProductBatch A
		INNER JOIN #PriceMaster B ON B.Prdbatid=A.PrdbatId
			 
		
		--Contract Price Praking Table insert
		INSERT INTO Cn2Cs_Prk_ContractPricing(CmpId,CtgLevelId,CtgMainId,RtrClassId,CmpPrdCtgId,PrdCtgValMainId,
		RtrId,PrdId,PrdBatId,PriceId,DiscountPerc,FlatAmount,EffectiveDate,ToDate,CreatedDate,RtrTaxGroupId,ApplyOn,SplPrice,WithTax,ComConRefNo,ComConRefName)
		SELECT DISTINCT @CmpId,CtgLevelId,CtgMainId,0,0,0,CASE WHEN RtrCode='ALL' THEN '0' ELSE ISNULL(RtrCode,'') END,
		Prdid,Prdbatid,NewPriceId,0,0,A.EffFromDate,A.EffToDate,A.CreatedDate,@RtrTaxGrp,A.ApplyON,SplPrice,SPWTax,B.CPRefCode,B.CPRefName
		FROM #PriceMaster A INNER JOIN Cn2Cs_Prk_SpecialDiscount B ON A.RtrHierLevelCode = B.RetCategoryLevel 
		AND A.RtrHierLevelValueCode = B.RetCatLevelValue AND A.CPRefCode=B.CPRefCode  AND A.CPRefName = B.CPRefName
		
		---Special Rate Screen Table Insert and Update
		INSERT INTO SpecialRateAftDownLoad(RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCCode,PrdBatCCode,
		SplSelRate,FromDate,CreatedDate,DownloadedDate,ContractPriceIds,DiscountPerc)			
		SELECT DISTINCT RtrHierLevelCode,RtrHierLevelValueCode,RtrCode,PrdCCode,PrdBatCodeAll,
		NewSellRate,EffFromDate,CreatedDate,GETDATE(),'-'+CAST(NewPriceId AS NVARCHAR(10))+'-',Disperc 
		FROM #PriceMaster A
		WHERE NOT EXISTS(		
			SELECT RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCCode,PrdBatCCode, FromDate 
			FROM 
			SpecialRateAftDownLoad B WHERE B.RtrCtgCode=A.RtrHierLevelCode
			and B.RtrCtgValueCode=A.RtrHierLevelValueCode and B.RtrCode= A.RtrCode
			And B.PrdCCode=A.PrdCCode and B.PrdBatCCode=A.PrdBatCodeAll
			and FromDate<=EffFromDate and B.SplSelRate=A.SplRate
						)
		--Added by Rajesh
		INSERT INTO SpecialRateAftDownLoad_Calc(RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCCode,PrdBatCCode,
		SplSelRate,FromDate,CreatedDate,DownloadedDate,ContractPriceIds,DiscountPerc,ApplyOn,TYPE)		
		SELECT DISTINCT RtrHierLevelCode,RtrHierLevelValueCode,RtrCode,PrdCCode,PrdBatCodeAll,
		NewSellRate,EffFromDate,CreatedDate,GETDATE(),'-'+CAST(NewPriceId AS NVARCHAR(10))+'-',Disperc 
		,ApplyOn,TYPE FROM #PriceMaster A
		WHERE NOT EXISTS(		
			SELECT RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCCode,PrdBatCCode, FromDate 
			FROM 
			SpecialRateAftDownLoad_Calc B WHERE B.RtrCtgCode=A.RtrHierLevelCode
			and B.RtrCtgValueCode=A.RtrHierLevelValueCode and B.RtrCode= A.RtrCode
			And B.PrdCCode=A.PrdCCode and B.PrdBatCCode=A.PrdBatCodeAll
			and FromDate<=EffFromDate and B.SplSelRate=A.SplRate
				)
						
		UPDATE B  SET SplSelRate=NewSellRate,ContractPriceIds='-'+CAST(NewPriceId AS NVARCHAR(10))+'-',DiscountPerc=Disperc
		FROM #PriceMaster A INNER JOIN SpecialRateAftDownLoad_Calc B ON 
		B.RtrCtgCode=A.RtrHierLevelCode
		and B.RtrCtgValueCode=A.RtrHierLevelValueCode and B.RtrCode= A.RtrCode
		And B.PrdCCode=A.PrdCCode and B.PrdBatCCode=A.PrdBatCodeAll 
		AND B.DiscountPerc=A.DisPerc  
		WHERE  FromDate<=EffFromDate
		--Till here 
		
		UPDATE B  SET SplSelRate=NewSellRate,ContractPriceIds='-'+CAST(NewPriceId AS NVARCHAR(10))+'-',DiscountPerc=Disperc
		FROM #PriceMaster A INNER JOIN SpecialRateAftDownLoad B ON 
		B.RtrCtgCode=A.RtrHierLevelCode
		and B.RtrCtgValueCode=A.RtrHierLevelValueCode and B.RtrCode= A.RtrCode
		And B.PrdCCode=A.PrdCCode and B.PrdBatCCode=A.PrdBatCodeAll 
		AND B.DiscountPerc=A.DisPerc  -- Added FOR ICRSTPAR1960
		WHERE  FromDate<=EffFromDate
		---
		EXEC Proc_Validate_ContractPricing @Po_ErrNo=@ErrStatus
		SET @Po_ErrNo=@ErrStatus
		UPDATE A SET CtgValMainId =B.PrdCtgValMainId FROM ContractpricingDetails A INNER JOIN PRODUCT P ON A.PRDID = P.PRDID 
		INNER JOIN PRODUCTBATCH PB ON A.PRDBATID = PB.PRDBATID AND P.PRDID = PB.PRDID
		INNER JOIN TempSpecialRateDiscountProduct B ON B.PRDCCODE =P.PRDCCODE AND PB.PRDBATCODE=B.PRDBATCODE
		AND B.PrdCtgValMainId >0
		INNER JOIN Cn2Cs_Prk_SpecialDiscount C ON C.RetCategoryLevel = B.CTGLEVELNAME AND C.RetCatLevelValue = B.CTGCODE
		AND PRDCATEGORYLEVEL<>'PRODUCT' AND B.Createddate  = c.createddate
		------------ Added By Lakshman M ON -------
	
		IF EXISTS (SELECT * FROM  Cn2Cs_Prk_SpecialDiscount WHERE PrdCategoryLevel='Category')
		BEGIN
			UPDATE A SET A.DownLoadFlag='Y' FROM Cn2Cs_Prk_SpecialDiscount A (NOLOCK)
			INNER JOIN TBL_GR_BUILD_PH P on A.PrdCategoryLevelValue=P.Category_Code 
			INNER JOIN SpecialRateAftDownload B (NOLOCK) ON B.PrdCCode=p.productcode
			AND A.RetCategoryLevel = B.RtrCtgCode AND A.RetCatLevelValue = B.RtrCtgValueCode
		END
		IF EXISTS (SELECT * FROM  Cn2Cs_Prk_SpecialDiscount WHERE PrdCategoryLevel='Brand')
		BEGIN	
			UPDATE A SET A.DownLoadFlag='Y' FROM Cn2Cs_Prk_SpecialDiscount A (NOLOCK)
			INNER JOIN TBL_GR_BUILD_PH P on A.PrdCategoryLevelValue=P.Brand_code 
			INNER JOIN SpecialRateAftDownload B (NOLOCK) ON B.PrdCCode=p.productcode
			AND A.RetCategoryLevel = B.RtrCtgCode AND A.RetCatLevelValue = B.RtrCtgValueCode
		END
		IF EXISTS (SELECT * FROM  Cn2Cs_Prk_SpecialDiscount WHERE PrdCategoryLevel='PriceSlot')
		BEGIN	
			UPDATE A SET A.DownLoadFlag='Y' FROM Cn2Cs_Prk_SpecialDiscount A (NOLOCK)
			INNER JOIN TBL_GR_BUILD_PH P on A.PrdCategoryLevelValue=P.Priceslot_code 
			INNER JOIN SpecialRateAftDownload B (NOLOCK) ON B.PrdCCode=p.productcode
			AND A.RetCategoryLevel = B.RtrCtgCode AND A.RetCatLevelValue = B.RtrCtgValueCode
		END
		IF EXISTS (SELECT * FROM  Cn2Cs_Prk_SpecialDiscount WHERE PrdCategoryLevel='Flavor')
		BEGIN
			UPDATE A SET A.DownLoadFlag='Y' FROM Cn2Cs_Prk_SpecialDiscount A (NOLOCK)
			INNER JOIN TBL_GR_BUILD_PH P on A.PrdCategoryLevelValue=P.Flavor_Code  
			INNER JOIN SpecialRateAftDownload B (NOLOCK) ON B.PrdCCode=p.productcode
			AND A.RetCategoryLevel = B.RtrCtgCode AND A.RetCatLevelValue = B.RtrCtgValueCode
		END
	------------- Till Here --------------
	
		--IF @Po_ErrNo=0
		--BEGIN	
			UPDATE A SET A.DownLoadFlag='Y' FROM Cn2Cs_Prk_SpecialDiscount A (NOLOCK) 
			INNER JOIN SpecialRateAftDownload B (NOLOCK) ON A.PrdCategoryLevelValue = B.PrdCCode 
			OR A.RetCategoryLevel = B.RtrCtgCode AND A.RetCatLevelValue = B.RtrCtgValueCode
		--END
		----ADDED BY MOHANA 
		INSERT INTO SpecialRate_Track(RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCtgLevel,Prdccode,PrdCtgcode,DiscountPerc,ApplyOn ,Type,FromDate,CreatedDate,DownloadedDate)
		SELECT DISTINCT A.RetCategoryLevel,CASE RetCategoryLevel WHEN 'RETAILER' THEN '' ELSE A.RetCatLevelValue END,
		CASE WHEN RetCategoryLevel ='RETAILER' THEN A.RetCatLevelValue ELSE '' END ,PrdCategoryLevel,'',PrdCategoryLevelvalue,DISCPER,ApplyOn ,Type,A.EffFromDate,A.CreatedDate,GETDATE() 
		FROM  Cn2Cs_Prk_SpecialDiscount A (NOLOCK)  WHERE A.PrdCategoryLevel <>'PRODUCT' AND DOWNLOADFLAG='Y'
		UNION ALL
		SELECT DISTINCT A.RetCategoryLevel,CASE RetCategoryLevel WHEN  'RETAILER' THEN '' ELSE A.RetCatLevelValue END,CASE RetCategoryLevel WHEN 'RETAILER' THEN A.RetCatLevelValue ELSE '' END  ,
		PrdCategoryLevel,PrdCategoryLevelValue,'',DISCPER,ApplyOn,Type,
		A.EffFromDate,A.CreatedDate,GETDATE() FROM  Cn2Cs_Prk_SpecialDiscount A (NOLOCK) 
		WHERE A.PrdCategoryLevel = 'PRODUCT'  AND DOWNLOADFLAG='Y'
	 
		RETURN
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_Cn2Cs_ProductBatch' AND TYPE='P')
DROP PROCEDURE Proc_Cn2Cs_ProductBatch
GO
/* 
   BEGIN TRANSACTION
   delete FROM Errorlog 
   --exec Proc_Cn2Cs_Product 0
   EXEC Proc_Cn2Cs_ProductBatch 0
   select * from contractpricingdetails where prdid =4676
   SELECT * FROM Productbatch WITH(NOLOCK) order by 2 desc
   SELECT * FROM Productbatchdetails WITH(NOLOCK)   order by 2 desc
   SELECT * FROM ProductBatchPriceWithCounter WITH(NOLOCK)
   ROLLBACK TRANSACTION
*/
CREATE PROCEDURE Proc_Cn2Cs_ProductBatch
(
       @Po_ErrNo INT OUTPUT
)
AS
/***************************************************************************************************
* PROCEDURE		: Proc_Cn2Cs_ProductBatch
* PURPOSE		: To Insert and Update records in the Tables ProductBatch and ProductBatchDetails
* CREATED BY	: Nandakumar R.G
* CREATED DATE	: 12/04/2010
* MODIFIED      : Sathishkumar Veeramani
* PURPOSE		: New Product Batch - Special Rate Created
* MODIFIED DATE : 13/09/2012
* MODIFIED      : Murugan.R
* PURPOSE		: Batch Optimization  and Akzonabal Price change
* MODIFIED DATE : 13/09/2012
* DATE      AUTHOR     DESCRIPTION
-----------------------------------------------------------------------------------------------------
* 06-06-2019	MOHANA		CR			CRCRSTPAR0058			INCLUDED CATEGORY WISE DOWNLOAD FOR SPL RATE
*****************************************************************************************************/
SET NOCOUNT ON
BEGIN
	SET @Po_ErrNo =0
	IF NOT EXISTS(SELECT DISTINCT PrdCCode FROM Cn2Cs_Prk_ProductBatch WITH (NOLOCK) WHERE DownLoadFlag='D') RETURN
	
	--Product batch configuration  For Aznoble Client
	IF EXISTS(SELECT Status FROM Configuration where ModuleId='GENCONFIG33' and Status=1)
		BEGIN
			DELETE FROM ProductBatchEeffectiveDate WHERE UpdateFlag='Y'
			
			INSERT INTO ProductBatchEeffectiveDate(PrdCCode,PrdBatCode,ManufacturingDate,ExpiryDate,
			EffectiveDate,MRP,ListPrice,SellingRate,ClaimRate,AddRate1,AddRate2,
			AddRate3,AddRate4,AddRate5,AddRate6,UpdateFlag)			 
			SELECT PrdCCode,PrdBatCode,ManufacturingDate,ExpiryDate,EffectiveDate,
			MRP,ListPrice,SellingRate,ClaimRate,AddRate1,AddRate2,AddRate3,
			AddRate4,AddRate5,AddRate6,'N' 
			FROM Cn2Cs_Prk_ProductBatch WHERE DownLoadFlag='D' AND EffectiveDate>CONVERT(DATETIME ,CONVERT(VARCHAR(10),GETDATE(),121),121)
			ORDER BY ManufacturingDate ASC --Muthuvel
					
			DELETE FROM Cn2Cs_Prk_ProductBatch  WHERE DownLoadFlag='D' AND EffectiveDate>CONVERT(DATETIME ,CONVERT(VARCHAR(10),GETDATE(),121),121)
			--Product Batch and Price Insert For Aznoble Client
			EXEC Proc_ValidateBatchLDEeffectiveDate
			
			RETURN
		END
	
	IF EXISTS (SELECT * FROM SysObjects WHERE Name = 'PrdBatToAvoid' AND XTYPE = 'U')
	BEGIN
		DROP TABLE PrdBatToAvoid	
	END
	CREATE TABLE PrdBatToAvoid
	(
		PrdCCode NVARCHAR(200),
		PrdBatCode NVARCHAR(200)
	)
	DECLARE @ExistingBatchDetails	TABLE
	(
		PrdId		NUMERIC(18,0),
		PrdCCode	VARCHAR(100),
		PrdBatCode	VARCHAR(100),
		PriceCode	VARCHAR(500),
		OldLSP		NUMERIC(18,0),
		PrdBatId	NUMERIC(18,0),
		PriceId		NUMERIC(18,0)
	)
	DECLARE @ProductBatchWithCounter TABLE
	(
		Slno			NUMERIC(18,0) IDENTITY(1,1),
		TransNo			NUMERIC(18,0),
		PrdId			NUMERIC(18,0),
		PrdCCode		VARCHAR(100),
		PrdBatCode		VARCHAR(100),
		MnfDate			DATETIME,
		ExpDate			DATETIME		
	)	
	DECLARE @ProductBatchPriceWithCounter TABLE
	(
		Slno			NUMERIC(18,0) IDENTITY(1,1),
		TransNo			NUMERIC(18,0),
		PrdId			NUMERIC(18,0),
		PrdBatId		NUMERIC(18,0),
		PriceCode		NVARCHAR(1000),
		MRP				NUMERIC(18,6),
		ListPrice		NUMERIC(18,6),
		SellingRate		NUMERIC(18,6),
		ClaimRate		NUMERIC(18,6),
		AddRate1		NUMERIC(18,6)
	)
	DECLARE @ContractPrice TABLE
	(
	   PrdId NUMERIC(18,0),
	   PrdBatId NUMERIC(18,0)
	)
	
	DECLARE @ContractBatchPrice TABLE
    (
	   ContractId       NUMERIC(18,0),
	   CtgMainId        NUMERIC(18,0),
	   PrdId            NUMERIC(18,0),
	   PrdBatId         NUMERIC(18,0),
	   PriceId          NUMERIC(18,0),
	   PriceCode        NVARCHAR(500)
    )
    DECLARE @ProductBatchDetails TABLE
	(
	   PrdId                NUMERIC(18,0),
	   PrdBatId      NUMERIC(18,0),
	   PriceId              NUMERIC(18,0),
	   PriceCode            NVARCHAR(500),
	   NewBatchId           NUMERIC(18,0),
	   Slno                 INT,
	   PrdBatDetailValue    NUMERIC(36,4),
	   NewPriceId           NUMERIC(18,0)
	)
	--Added By Sathishkumar Veeramani 2015/01/08
	DECLARE @ExistingSellingPriceDetails TABLE
	(
	    PrdId        NUMERIC(18,0),
	    PrdBatId     NUMERIC(18,0),
	    PriceId      NUMERIC(18,0)
	)
	DECLARE @ExistingListPriceDetails TABLE
	(
	    PrdId        NUMERIC(18,0),
	    PrdBatId     NUMERIC(18,0),
	    PriceId      NUMERIC(18,0)
	)
	--Till Here  
	
	DECLARE @BatSeqId			AS	INT
	DECLARE @ValDiffRefNo		AS	VARCHAR(100)
	DECLARE @ExistPrdBatMaxId	AS 	INT
	DECLARE @NewPrdBatMaxId		AS 	INT	
	DECLARE @ContPriceId		AS 	NUMERIC(18,0)
	DECLARE @OldPriceIdExt 		AS 	NUMERIC(18,0)
	DECLARE @OldPriceId 		AS 	NUMERIC(18,0)
	DECLARE @NewPriceId			AS  INT
	DECLARE @ContPrdId          AS  INT
    DECLARE @ContPrdBatId       AS  INT
    DECLARE @ContPriceId1       AS  INT
    DECLARE @PriceId            AS  INT 
    DECLARE @PriceBatch         AS  INT
    DECLARE @BatchTransfer		AS	INT
	DECLARE @Po_BatchTransfer	AS	INT
	
	SELECT @OldPriceId=ISNULL(MAX(PriceId),0) FROM ProductBatchDetails WITH (NOLOCK)		
	SELECT @BatSeqId=MAX(BatchSeqId) FROM BatchCreationMaster WITH (NOLOCK)
	SELECT @ExistPrdBatMaxId=ISNULL(MAX(PrdBatId),0) FROM ProductBatch WITH (NOLOCK)
	SET @Po_ErrNo =0
	IF EXISTS(SELECT DISTINCT PrdCCode FROM Cn2Cs_Prk_ProductBatch WITH (NOLOCK)
	WHERE PrdCCode NOT IN (SELECT PrdCCode FROM Product WITH (NOLOCK)) AND DownLoadFlag='D')
	BEGIN
		INSERT INTO PrdBatToAvoid(PrdCCode,PrdBatCode)
		SELECT DISTINCT PrdCCode,PrdBatCode FROM Cn2Cs_Prk_ProductBatch WITH (NOLOCK)
		WHERE PrdCCode NOT IN (SELECT PrdCCode FROM Product WITH (NOLOCK)) AND DownLoadFlag='D'
		
		INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
		SELECT DISTINCT 1,'Product Batch','PrdCCode','Product :'+PrdCCode+' not available'
		FROM Cn2Cs_Prk_ProductBatch	WITH (NOLOCK) WHERE PrdCCode NOT IN (SELECT PrdCCode FROM Product WITH (NOLOCK)) 
		AND DownLoadFlag='D'
		
		--->Added By Nanda on 05/05/2010
		INSERT INTO ReDownloadRequest(DistCode,Process,RefNo,Download,PrdCCode,PrdBatCode,UploadFlag)
		SELECT DISTINCT DistCode,'Product Batch',PrdBatCode,'Product',PrdCCode,'','N' FROM Cn2Cs_Prk_ProductBatch WITH (NOLOCK) 
		WHERE PrdCCode NOT IN (SELECT PrdCCode FROM Product WITH (NOLOCK)) AND DownLoadFlag='D'
		--->Till Here				
	END
	IF EXISTS(SELECT DISTINCT PrdCCode FROM Cn2Cs_Prk_ProductBatch WITH (NOLOCK)
	WHERE LEN(ISNULL(PrdBatCode,''))=0  AND DownLoadFlag='D')
	BEGIN
		INSERT INTO PrdBatToAvoid(PrdCCode,PrdBatCode)
		SELECT DISTINCT PrdCCode,PrdBatCode FROM Cn2Cs_Prk_ProductBatch WITH (NOLOCK)
		WHERE LEN(ISNULL(PrdBatCode,''))=0 AND DownLoadFlag='D'
		
		INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
		SELECT DISTINCT 1,'Product Batch','PrdBatCode','Batch Code should not be empty for Product:'+PrdCCode
		FROM Cn2Cs_Prk_ProductBatch WITH (NOLOCK)
		WHERE LEN(ISNULL(PrdBatCode,''))=0 AND DownLoadFlag='D'
	END
		
	INSERT INTO @ExistingBatchDetails (PrdId,PrdCCode,PrdBatCode,PriceCode,OldLSP,PrdBatId,PriceId)
	SELECT DISTINCT B.PrdId,B.PrdCCode,A.PrdBatCode,A.PrdBatCode+'-'+CAST(MRP AS NVARCHAR(25))+'-'+CAST(ListPrice AS NVARCHAR(25))+'-'+
	CAST(SellingRate AS NVARCHAR(25))+'-'+CAST(ClaimRate AS NVARCHAR(25))+'-'+CAST(AddRate1 AS NVARCHAR(25)) AS PriceCode,
	ISNULL(D.PrdBatDetailValue,0) AS OldLSP,C.PrdBatId,D.PrdBatId FROM Cn2Cs_Prk_ProductBatch A (NOLOCK) 
	INNER JOIN Product B (NOLOCK) ON A.PrdCCode=B.PrdCCode
	INNER JOIN ProductBatch C (NOLOCK)ON A.PrdBatCode=C.PrdBatCode AND B.PrdId=C.PrdId
	INNER JOIN ProductBatchDetails D (NOLOCK) ON  D.PrdBatId=C.PrdBatId AND D.DefaultPrice=1 AND D.SlNo=2
	WHERE A.PrdBatCode NOT IN (SELECT PrdBatCode FROM PrdBatToAvoid) AND DownLoadFlag='D'
	
	--Added By Sathishkumar Veeramani 2015/01/08
	--Selling Rate Validation
	INSERT INTO @ExistingSellingPriceDetails (PrdId,PrdBatId,PriceId)
	SELECT DISTINCT PrdId,B.PrdBatId,C.PriceId FROM Cn2Cs_Prk_ProductBatch A (NOLOCK) 
	INNER JOIN @ExistingBatchDetails B ON A.PrdCCode = B.PrdCCode AND A.PrdBatCode = B.PrdBatCode
	INNER JOIN ProductBatchDetails C (NOLOCK) ON B.PrdBatId = C.PrdBatId AND A.SellingRate = C.PrdBatDetailValue
	WHERE C.SLNo = 3
	
	--List Price Validation
	INSERT INTO @ExistingListPriceDetails (PrdId,PrdBatId,PriceId)
	SELECT DISTINCT PrdId,B.PrdBatId,C.PriceId FROM Cn2Cs_Prk_ProductBatch A (NOLOCK) 
	INNER JOIN @ExistingBatchDetails B ON A.PrdCCode = B.PrdCCode AND A.PrdBatCode = B.PrdBatCode
	INNER JOIN ProductBatchDetails C (NOLOCK) ON B.PrdBatId = C.PrdBatId AND A.ListPrice = C.PrdBatDetailValue
	WHERE C.SLNo = 2
	
	SELECT DISTINCT A.PrdId,A.PrdBatId,MAX(A.PriceId) AS PriceId INTO #ExistinPriceCloning 
	FROM @ExistingSellingPriceDetails A 
	INNER JOIN @ExistingListPriceDetails B ON A.PrdId = B.PrdId
	AND A.PrdBatId = B.PrdBatId AND A.PriceId = B.PriceId GROUP BY A.PrdId,A.PrdBatId
	
	IF EXISTS (SELECT DISTINCT PrdId,PrdBatId,PriceId FROM #ExistinPriceCloning)
	BEGIN
	    UPDATE A SET A.DefaultPrice = 0 FROM ProductBatchDetails A (NOLOCK) 
	    INNER JOIN #ExistinPriceCloning B ON A.PrdBatId = B.PrdBatId
	    
	    UPDATE A SET A.DefaultPrice = 1 FROM ProductBatchDetails A (NOLOCK)
	    INNER JOIN #ExistinPriceCloning B ON A.PrdBatId = B.PrdBatId AND A.PriceId = B.PriceId
	    
	    UPDATE A SET A.DefaultPriceId = B.PriceId FROM ProductBatch A (NOLOCK) 
	    INNER JOIN #ExistinPriceCloning B ON A.PrdBatId = B.PrdBatId	    
	END
	--Till Here
	
	--Added By Sathishkumar Veeramani 2015/01/08
	--Batch Cloning Details
    DECLARE @BatchPriceId AS NUMERIC(18,0)
    SELECT @BatchPriceId = ISNULL(MAX(PriceId),0) FROM ProductBatchDetails (NOLOCK)
	SELECT DISTINCT CAST(DENSE_RANK() OVER (ORDER BY MAX(PrdBatId),MRP,ListPrice,SellingRate,ClaimRate) AS NUMERIC(18,0))+@BatchPriceId AS PriceId,
	MAX(PrdBatId) AS PrdBatId,A.PrdBatCode+'-'+CAST(MRP AS NVARCHAR(25))+'-'+CAST(ListPrice AS NVARCHAR(25))+'-'+CAST(SellingRate AS NVARCHAR(25))+'-'+
	CAST(ClaimRate AS NVARCHAR(25))+'-'+CAST(AddRate1 AS NVARCHAR(25)) AS PriceCode,MRP,ListPrice,
	SellingRate,ClaimRate,AddRate1 INTO #BatchCloningDetails FROM Cn2Cs_Prk_ProductBatch A (NOLOCK)
	INNER JOIN Product B (NOLOCK) ON A.PrdCCode = B.PrdCCode 
	INNER JOIN ProductBatch C (NOLOCK) ON B.PrdId = C.PrdId AND A.PrdBatCode = C.PrdBatCode WHERE DownloadFlag = 'D'
	AND NOT EXISTS (SELECT DISTINCT PrdId,PrdBatId FROM #ExistinPriceCloning D WHERE C.PrdId = D.PrdId AND C.PrdBatId = D.PrdBatId) 
	GROUP BY A.PrdBatCode,MRP,ListPrice,SellingRate,ClaimRate,AddRate1
	
	IF EXISTS (SELECT DISTINCT PrdBatId FROM #BatchCloningDetails)
	BEGIN
	    UPDATE A SET DefaultPrice = 0 FROM ProductBatchDetails A WITH(NOLOCK) 
		INNER JOIN #BatchCloningDetails B ON A.PrdBatId = B.PrdBatId
			    
		INSERT INTO ProductBatchDetails (PriceId,PrdBatId,PriceCode,BatchSeqId,SLNo,PrdBatDetailValue,DefaultPrice,PriceStatus,
		Availability,LastModBy,LastModDate,AuthId,AuthDate,XMLUpload)
		SELECT DISTINCT PriceId,PrdBatId,PriceCode,1,SlNo,Rate,1,1,1,1,GETDATE(),1,GETDATE(),0 FROM(
		SELECT DISTINCT PriceId,PrdBatId,PriceCode,1 AS SlNo,MRP AS Rate FROM #BatchCloningDetails UNION
		SELECT DISTINCT PriceId,PrdBatId,PriceCode,2 AS SlNo,ListPrice AS Rate FROM #BatchCloningDetails UNION
		SELECT DISTINCT PriceId,PrdBatId,PriceCode,3 AS SlNo,SellingRate AS Rate FROM #BatchCloningDetails UNION
		SELECT DISTINCT PriceId,PrdBatId,PriceCode,4 AS SlNo,ClaimRate AS Rate FROM #BatchCloningDetails)Qry ORDER BY PrdBatId
		SELECT @BatchPriceId = ISNULL(MAX(PriceId),0) FROM ProductBatchDetails (NOLOCK)
		UPDATE Counters SET CurrValue = @BatchPriceId WHERE TabName = 'ProductBatchDetails' AND FldName = 'PriceId'
		
        UPDATE A SET DefaultPriceId = B.PriceId FROM ProductBatch A WITH(NOLOCK) 
		INNER JOIN #BatchCloningDetails B ON A.PrdBatId = B.PrdBatId
    END
	--Till Here
		
	IF EXISTS (SELECT * FROM @ExistingBatchDetails)
	BEGIN
		UPDATE A SET MnfDate=C.ManufacturingDate,ExpDate=ExpiryDate
		FROM ProductBatch A (NOLOCK) INNER JOIN @ExistingBatchDetails B ON A.PrdId=B.PrdId AND A.PrdBatId=B.PrdBatId
		INNER JOIN Cn2Cs_Prk_ProductBatch C (NOLOCK) ON A.PrdBatCode=C.PrdBatCode  AND B.PrdCCode=C.PrdCCode
		WHERE C.DownLoadFlag='D'
	
		UPDATE Cn2Cs_Prk_ProductBatch SET DownLoadFlag='Y' 
		WHERE PrdCCode+'~'+PrdBatCode IN (SELECT PrdCCode+'~'+PrdBatCode FROM @ExistingBatchDetails) AND DownLoadFlag='D' 
	END
	
	DECLARE @Count1	NUMERIC(18,0)
	DECLARE @Count2	NUMERIC(18,0)
	SELECT @Count1=COUNT(*) FROM Cn2Cs_Prk_ProductBatch
	SELECT @Count2=COUNT(*) FROM @ExistingBatchDetails
	IF @Count1<>@Count2
		BEGIN
	--IF NOT EXISTS (SELECT * FROM @ExistingBatchDetails)
	--BEGIN
	---New ProductBatch		
		INSERT INTO @ProductBatchWithCounter
		SELECT DISTINCT (SELECT CurrValue FROM Counters (NOLOCK) WHERE TabName='ProductBatch' AND FldName='PrdBatId'),
		B.PrdId,A.PrdCCode,A.PrdBatCode,ManufacturingDate,ExpiryDate FROM Cn2Cs_Prk_ProductBatch A (NOLOCK) 
		INNER JOIN Product B (NOLOCK) ON A.PrdCCode=B.PrdCCode WHERE NOT EXISTS (SELECT PrdBatCode FROM ProductBatch C (NOLOCK) 
		WHERE C.PrdBatCode=A.PrdBatCode AND B.PrdId=C.PrdId)AND 
		A.PrdCCode+'~'+A.PrdBatCode NOT IN (SELECT PrdCCode+'~'+PrdBatCode FROM PrdBatToAvoid) AND A.DownLoadFlag='D'
		ORDER BY ManufacturingDate ASC --Muthuvel
		
			
		UPDATE @ProductBatchWithCounter SET TransNo=TransNo+Slno
	--Existing ProductBatch 
			INSERT INTO @ProductBatchWithCounter
			SELECT DISTINCT C.PrdBatId,B.PrdId,A.PrdCCode,A.PrdBatCode,
			ManufacturingDate,ExpiryDate FROM Cn2Cs_Prk_ProductBatch A (NOLOCK) INNER JOIN Product B (NOLOCK) ON A.PrdCCode=B.PrdCCode
			INNER JOIN ProductBatch C ON B.PrdId = C.PrdId AND C.PrdBatCode = A.PrdBatCode WHERE 
			NOT EXISTS (SELECT PrdBatId FROM ProductBatchDetails D(NOLOCK) WHERE D.PrdBatId = C.PrdBatId AND D.PriceId = C.DefaultPriceId)	
			AND  A.PrdCCode+'~'+A.PrdBatCode NOT IN (SELECT PrdCCode+'~'+PrdBatCode FROM PrdBatToAvoid) AND A.DownLoadFlag='D'
			AND  A.PrdCCode+'~'+A.PrdBatCode NOT IN (SELECT PrdCCode+'~'+PrdBatCode FROM @ProductBatchWithCounter)
	
	 --Product Batch   
		INSERT INTO ProductBatch(PrdId,PrdBatId,PrdBatCode,CmpBatCode,MnfDate,ExpDate,Status,
		TaxGroupId,BatchSeqId,DecPoints,DefaultPriceId,EnableCloning,Availability,LastModBy,LastModDate,AuthId,AuthDate)
		SELECT DISTINCT A.PrdId,TransNo,PrdBatCode,PrdBatCode,MnfDate,ExpDate,1,B.TaxGroupId,@BatSeqId,
		6,0,0,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchWithCounter A 
		INNER JOIN Product B ON A.PrdId=B.PrdId WHERE NOT EXISTS (SELECT PrdBatCode FROM ProductBatch C WHERE A.PrdId = C.PrdId 
		AND A.PrdBatCode = C.PrdBatCode)
    --END 
		END
	IF EXISTS (SELECT * FROM @ProductBatchWithCounter) 
	BEGIN
		UPDATE Counters SET CurrValue = (SELECT MAX(PrdBatId) FROM ProductBatch) WHERE TabName = 'ProductBatch' AND FldName = 'prdbatid'
	
		INSERT INTO @ProductBatchPriceWithCounter
		SELECT DISTINCT (SELECT CurrValue FROM Counters (NOLOCK) WHERE TabName='ProductBatchDetails' AND FldName='PriceId'),A.PrdId,A.TransNo,
		A.PrdBatCode+'-'+CAST(MRP AS NVARCHAR(25))+'-'+CAST(ListPrice AS NVARCHAR(25))+'-'+
		CAST(SellingRate AS NVARCHAR(25))+'-'+CAST(ClaimRate AS NVARCHAR(25))+'-'+CAST(AddRate1 AS NVARCHAR(25)),MRP,ListPrice,
		SellingRate,ClaimRate,AddRate1 FROM @ProductBatchWithCounter A INNER JOIN Cn2Cs_Prk_ProductBatch B WITH (NOLOCK)
		ON A.PrdCCode=B.PrdCCode AND A.PrdBatCode=B.PrdBatCode WHERE B.DownLoadFlag='D'
		
		UPDATE @ProductBatchPriceWithCounter SET TransNo=TransNo+Slno
				
		UPDATE A SET A.DefaultPrice=0 FROM ProductBatchDetails A WITH (NOLOCK),@ProductBatchPriceWithCounter B  
	    WHERE A.PrdBatId = B.PrdBatId
		
	END			
	
	IF (SELECT COUNT(*) FROM BatchCreation WHERE BatchSeqId=@BatSeqId)=4
	BEGIN
		INSERT INTO ProductBatchDetails(PriceId,PrdBatId,PriceCode,BatchSeqId,SLNo,PrdBatDetailValue,
		DefaultPrice,PriceStatus,Availability,LastModBy,LastModDate,AuthId,AuthDate)
		SELECT DISTINCT TransNo,PrdBatId,PriceCode,@BatSeqId,1,MRP,1,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchPriceWithCounter
		UNION
		SELECT DISTINCT TransNo,PrdBatId,PriceCode,@BatSeqId,2,ListPrice,1,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchPriceWithCounter
		UNION
		SELECT DISTINCT TransNo,PrdBatId,PriceCode,@BatSeqId,3,SellingRate,1,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchPriceWithCounter
		UNION
		SELECT DISTINCT TransNo,PrdBatId,PriceCode,@BatSeqId,4,ClaimRate,1,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchPriceWithCounter
	END
	ELSE IF (SELECT COUNT(*) FROM BatchCreation WHERE BatchSeqId=@BatSeqId)=5
	BEGIN
		INSERT INTO ProductBatchDetails(PriceId,PrdBatId,PriceCode,BatchSeqId,SLNo,PrdBatDetailValue,
		DefaultPrice,PriceStatus,Availability,LastModBy,LastModDate,AuthId,AuthDate)
		SELECT DISTINCT TransNo,PrdBatId,PriceCode,@BatSeqId,1,MRP,1,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchPriceWithCounter
		UNION
		SELECT DISTINCT TransNo,PrdBatId,PriceCode,@BatSeqId,2,ListPrice,1,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchPriceWithCounter
		UNION
		SELECT DISTINCT TransNo,PrdBatId,PriceCode,@BatSeqId,3,SellingRate,1,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchPriceWithCounter
		UNION
		SELECT DISTINCT TransNo,PrdBatId,PriceCode,@BatSeqId,4,ClaimRate,1,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchPriceWithCounter
		UNION
		SELECT DISTINCT TransNo,PrdBatId,PriceCode,@BatSeqId,5,AddRate1,1,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchPriceWithCounter
	END	
	UPDATE A SET DefaultPriceId=C.TransNo FROM ProductBatch A INNER JOIN @ProductBatchPriceWithCounter C ON C.PrdBatId=A.PrdBatId AND A.PrdId=C.PrdId	
	
	IF EXISTS(SELECT * FROM @ProductBatchPriceWithCounter) 
	BEGIN
		UPDATE Counters SET CurrValue = (SELECT MAX(PriceId) FROM ProductBatchDetails) 	WHERE TabName = 'ProductBatchDetails' AND FldName = 'PriceId'	
	END
	
	--Batch Cloning Price Details
	
	IF EXISTS(SELECT * FROM Configuration WHERE ModuleId='BotreeRateForOldBatch' AND ModuleName='Botree Product Batch Download' AND Status=1)
	BEGIN
		IF EXISTS(SELECT * FROM @ProductBatchPriceWithCounter A INNER JOIN @ExistingBatchDetails B ON A.PrdBatId=B.PrdBatId AND A.PrdId=B.PrdId
		WHERE (B.OldLSP-A.ListPrice)<>0 AND Slno=2)
		BEGIN
			SELECT @ValDiffRefNo = dbo.Fn_GetPrimaryKeyString('ValueDifferenceClaim','ValDiffRefNo',CAST(YEAR(GetDate()) AS INT),MONTH(GETDATE()))
			
			INSERT INTO ValueDifferenceClaim(ValDiffRefNo,Date,PrdId,PrdBatId,OldPriceId,NewPriceId,OldPrice,NewPrice,Qty,
			ValueDiff,ClaimAmt,Availability,LastModBy,LastModDate,AuthId,AuthDate)
			
			SELECT @ValDiffRefNo,GETDATE(),A.PrdId,A.PrdBatID,B.PriceId,C.TransNo,B.OldLsp,C.ListPrice,
			ISNULL(SUM(A.PrdBatLcnSih+A.PrdBatLcnUih-A.PrdBatLcnRessih-A.PrdBatLcnResUih),0),B.OldLsp-C.ListPrice,
			ISNULL(SUM(A.PrdBatLcnSih+A.PrdBatLcnUih-A.PrdBatLcnRessih-A.PrdBatLcnResUih),0)*(B.OldLsp-C.ListPrice),
			1,1,GETDATE(),1,GETDATE() FROM ProductBatchLocation A INNER JOIN @ExistingBatchDetails B ON A.PrdId=B.PrdId AND A.PrdBatID=B.PrdBatId 
			INNER JOIN @ProductBatchPriceWithCounter C ON A.PrdBatId=C.PrdBatId AND A.PrdId=C.PrdId
			WHERE C.Slno=2	GROUP BY A.PrdId,A.PrdBatID,B.PriceId,C.TransNo,B.OldLsp,C.ListPrice
			
			UPDATE Counters SET CurrValue = CurrValue+1  WHERE TabName = 'ValueDifferenceClaim' AND FldName = 'ValDiffRefNo'
		END
	END
	UPDATE ProductBatch SET ProductBatch.DefaultPriceId=PBD.PriceId,ProductBatch.BatchSeqId=PBD.BatchSeqId
	FROM ProductBatchDetails PBD WITH (NOLOCK) WHERE ProductBatch.PrdBatId=PBD.PrdBatId AND PBD.DefaultPrice=1
	
	UPDATE ProductBatch SET EnableCloning=1 WHERE PrdBatId IN
	(
	 SELECT PrdBatId FROM ProductBatchDetails WITH (NOLOCK) GROUP BY PrdBatId  HAVING(COUNT(DISTINCT PriceId)>1)
	)
	
	SELECT PrdBatId INTO #ZeroBatches FROM ProductBatchDetails WITH (NOLOCK)
	GROUP BY PrdBatId HAVING SUM(DefaultPrice)=0
	
	SELECT B.PrdId,B.PrdBatId,MAX(PriceId) As PriceId INTO #ZeroMaxPrices
	FROM ProductBatchDetails A INNER JOIN ProductBatch B ON A.PrdBatId=B.PrdBatId
	INNER JOIN #ZeroBatches C ON A.PrdBatId=C.PrdBatId
	WHERE A.DefaultPrice=0 AND NOT EXISTS
	(SELECT DISTINCT PriceId FROM #BatchCloningDetails D WHERE A.PrdBatId = D.PrdBatId AND A.PriceId = D.PriceId)
	AND NOT EXISTS (SELECT DISTINCT PriceId FROM #ExistinPriceCloning E WHERE A.PrdBatId = E.PrdBatId AND A.PriceId = E.PriceId)
	GROUP BY B.PrdId,B.PrdBatId 
	
	
	UPDATE ProductBatch Set DefaultPriceId=B.PriceId FROM ProductBatch A,#ZeroMaxPrices B
	WHERE A.PrdBatId=B.PrdbatId and A.PrdId=B.PrdId 
	
	UPDATE ProductBatchDetails Set DefaultPrice=1 FROM #ZeroMaxPrices A
	WHERE ProductBatchDetails.PrdbatId=A.PrdBatId AND ProductBatchDetails.PriceId=A.PriceId
	
	SET @Po_ErrNo=0
	SELECT @OldPriceIdExt=ISNULL(MAX(PriceId),0) FROM ProductBatchDetails
	IF @ExistPrdBatMaxId>0
	BEGIN
		SELECT @NewPrdBatMaxId=ISNULL(MAX(PrdBatId),0) FROM ProductBatch
		IF @NewPrdBatMaxId>@ExistPrdBatMaxId
		BEGIN
			 

		    --Existing Contract Pricing Percentage Updated to New Batch Download
		    --Modified by Rajesh
		    
     	--    SELECT DISTINCT RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCCode,MAX(CreatedDate) AS CreatedDate INTO #SpecialRateCreatedDate
		    --FROM SpecialRateAftDownload WITH(NOLOCK) GROUP BY RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCCode ORDER BY PrdCCode
		    SELECT DISTINCT RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCCode,MAX(CreatedDate) AS CreatedDate  INTO #SpecialRateCreatedDate1  
			FROM SpecialRateAftDownload_calc WITH(NOLOCK) GROUP BY RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCCode ORDER BY PrdCCode

			SELECT DISTINCT A.RtrCtgCode,A.RtrCtgValueCode,A.RtrCode,A.PrdCCode,A.CreatedDate ,A.ApplyOn,A.TYPE INTO #SpecialRateCreatedDate
			FROM SpecialRateAftDownload_calc A WITH(NOLOCK) INNER JOIN  #SpecialRateCreatedDate1 B (NOLOCK) 
			ON A.RtrCtgCode = B.RtrCtgCode AND A.RtrCtgValueCode  = B.RtrCtgValueCode AND A.RtrCode= B.RtrCode AND A.PrdCCode= B.PrdCCode
			AND A.CreatedDate = B.CreatedDate AND A.ApplyOn is not null
			
			--SELECT DISTINCT C.PrdId,E.PrdBatId,TransNo AS PriceId,A.RtrCtgCode,A.RtrCtgValueCode,A.RtrCode,A.PrdCCode,
			--D.PrdBatCode,DiscountPerc,(MRP-(MRP*(DiscountPerc/100))) AS SplRate INTO #SpecialRateDetails 
			--FROM SpecialRateAftDownload A WITH(NOLOCK)
			--INNER JOIN #SpecialRateCreatedDate B ON A.RtrCtgCode = B.RtrCtgCode AND A.RtrCtgValueCode = B.RtrCtgValueCode 
			--AND A.RtrCode = B.RtrCode AND A.PrdCCode = B.PrdCCode AND A.CreatedDate = B.CreatedDate
			--INNER JOIN Product C WITH(NOLOCK) ON A.PrdCCode = C.PrdCCode			
			--INNER JOIN ProductBatch D WITH(NOLOCK) ON C.PrdId = D.PrdId
			--INNER JOIN @ProductBatchPriceWithCounter E ON C.PrdId = E.PrdId AND D.PrdBatId = E.PrdBatId
			--ORDER BY A.PrdCCode
			SELECT DISTINCT C.PrdId,E.PrdBatId,TransNo AS PriceId,A.RtrCtgCode,A.RtrCtgValueCode,A.RtrCode,A.PrdCCode,  
		   D.PrdBatCode,DiscountPerc,B.ApplyOn,B.Type,
		   (CASE B.ApplyOn WHEN 1 THEN 
			(CASE B.[Type] WHEN 1 THEN (MRP*100/(100+DiscountPerc)) WHEN 2 THEN MRP-(MRP*(DiscountPerc/100))
				ELSE SellingRate-(SellingRate*(DiscountPerc/100))  END)	 
			ELSE SellingRate-(SellingRate*(DiscountPerc/100)) END) AS SplRate
		   INTO #SpecialRateDetails   
		   FROM SpecialRateAftDownload_calc A WITH(NOLOCK)  
		   INNER JOIN #SpecialRateCreatedDate B ON A.RtrCtgCode = B.RtrCtgCode AND A.RtrCtgValueCode = B.RtrCtgValueCode   
		   AND A.RtrCode = B.RtrCode AND A.PrdCCode = B.PrdCCode AND A.CreatedDate = B.CreatedDate  
		   INNER JOIN Product C WITH(NOLOCK) ON A.PrdCCode = C.PrdCCode     
		   INNER JOIN ProductBatch D WITH(NOLOCK) ON C.PrdId = D.PrdId  
		   INNER JOIN @ProductBatchPriceWithCounter E ON C.PrdId = E.PrdId AND D.PrdBatId = E.PrdBatId  
		   ORDER BY A.PrdCCode 
			--Till Here			
	
			SELECT DISTINCT MAX(E.ContractId) AS ContractId,A.PrdId,A.PrdBatId,A.PriceId,B.CtgLevelId,C.CtgMainId,SplRate,RtrCtgValueCode,A.ApplyOn, A.Type,E.CtgValMainId 
			INTO #SpecialContractDetails FROM #SpecialRateDetails A WITH(NOLOCK) 
			INNER JOIN RetailerCategoryLevel B WITH(NOLOCK) ON A.RtrCtgCode = B.CtgLevelName 
			INNER JOIN RetailerCategory C WITH(NOLOCK) ON A.RtrCtgValueCode = C.CtgCode AND B.CtgLevelId = C.CtgLevelId
			INNER JOIN ContractPricingMaster D WITH(NOLOCK) ON B.CtgLevelId = D.CtgLevelId AND C.CtgMainId = D.CtgMainId 
			INNER JOIN ContractPricingDetails E WITH(NOLOCK) ON D.ContractId = E.ContractId AND A.PrdId = E.PrdId 
			GROUP BY A.PrdId,A.PrdBatId,A.PriceId,B.CtgLevelId,C.CtgMainId,SplRate,RtrCtgValueCode,A.ApplyOn, A.Type,CtgValMainId
			
			---Tax Calculation
			DECLARE @PrdIdTax as BIGINT
			DECLARE @PrdbatIdTax AS BIGINT
			DECLARE Cur_Tax CURSOR
			FOR 
			SELECT DISTINCT PrdId,PrdbatId FROM #SpecialContractDetails		
			OPEN Cur_Tax	
			FETCH NEXT FROM Cur_Tax INTO @PrdIdTax,@PrdbatIdTax
			WHILE @@FETCH_STATUS=0
			BEGIN	
					EXEC Proc_SellingTaxCalCulation @PrdIdTax,@PrdbatIdTax
			FETCH NEXT FROM Cur_Tax INTO @PrdIdTax,@PrdbatIdTax		
			END		
			CLOSE Cur_Tax
			DEALLOCATE Cur_Tax	
			--Modified by Rajesh
						
			SELECT DISTINCT A.PrdId,A.PrdBatId,PriceId,RtrCtgValueCode,DENSE_RANK ()OVER (ORDER BY A.PriceId,A.PrdbatId,RtrCtgValueCode)+ @OldPriceIdExt AS NewPriceId,
			--CAST(SplRate*100/(100+TaxPercentage) AS NUMERIC(38,6)) AS NewSelRate 
			CASE A.ApplyOn WHEN 1 THEN 
										(CASE [Type] WHEN 1 THEN (SplRate*100)/(100+TaxPercentage)
											WHEN 2 THEN (SplRate*100)/(100+TaxPercentage)	END)
			ELSE CAST(SplRate AS NUMERIC(38,6)) END AS NewSelRate
			INTO #SplProductBatchDetails
			FROM #SpecialContractDetails A WITH(NOLOCK) INNER JOIN ProductBatchTaxPercent B WITH(NOLOCK) ON A.PrdId = B.PrdId
			AND A.PrdBatId = B.PrdBatId ORDER BY A.PrdId,A.PrdBatId,PriceId,RtrCtgValueCode
			
		
			--Product Batch Details Value Added			
			INSERT INTO ProductBatchDetails (PriceId,PrdBatId,PriceCode,BatchSeqId,SLNo,PrdBatDetailValue,DefaultPrice,PriceStatus,
            Availability,LastModBy,LastModDate,AuthId,AuthDate,XMLUpload) 
            SELECT DISTINCT NewPriceId,A.PrdBatId,PriceCode+'SplRate'+CONVERT(NVARCHAR(200),B.NewSelRate)+CONVERT(NVARCHAR(10),GETDATE(),121),
            A.BatchSeqId,A.SLNo,(CASE SelRte WHEN 1 THEN B.NewSelRate ELSE PrdBatDetailValue END),0,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,
            CONVERT(NVARCHAR(10),GETDATE(),121),0
            FROM ProductBatchDetails A WITH(NOLOCK) 
            INNER JOIN #SplProductBatchDetails B ON A.PrdBatId = B.PrdBatId AND A.PriceId = B.PriceId
            INNER JOIN ProductBatch C WITH(NOLOCK) ON A.PrdBatId = C.PrdBatId
            INNER JOIN BatchCreation D WITH(NOLOCK) ON C.BatchSeqId = D.BatchSeqId AND A.SLNo = D.SlNo ORDER BY A.PrdBatId,NewPriceId 
            UPDATE Counters SET CurrValue =(SELECT MAX(PriceId) FROM ProductBatchDetails) WHERE TabName = 'ProductBatchDetails' AND FldName = 'PriceId'
            	
            --Contract Pricing Details Added
            INSERT INTO ContractPricingDetails (ContractId,PrdId,PrdBatId,PriceId,Discount,FlatAmtDisc,Availability,LastModBy,LastModDate,AuthId,
            AuthDate,CtgValMainId,ClaimablePercOnMRP)            
            SELECT DISTINCT ContractId,A.PrdId,A.PrdBatId,B.NewPriceId,0,0,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121),CtgValMainId,0
            FROM #SpecialContractDetails A INNER JOIN #SplProductBatchDetails B ON A.PrdId = B.PrdID AND A.PrdBatId = B.PrdBatId AND A.RtrCtgValueCode=B.RtrCtgValueCode
            WHERE NOT EXISTS (SELECT ContractId FROM ContractPricingDetails C WITH(NOLOCK) WHERE A.ContractId = C.ContractId 
            AND A.PrdId = C.PrdID AND A.PrdBatId = C.PrdBatId) ORDER BY ContractId,A.PrdId,A.PrdBatId,B.NewPriceId
            --Special Rate Updated
            INSERT INTO SpecialRateAftDownload (RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCCode,PrdBatCCode,SplSelRate,FromDate,CreatedDate,DownloadedDate,
            ContractPriceIds,DiscountPerc,SplrateId)
            SELECT DISTINCT RtrCtgCode,A.RtrCtgValueCode,A.RtrCode,A.PrdCCode,A.PrdBatCode,A.SplRate,CONVERT(NVARCHAR(10),GETDATE(),121),GETDATE(),GETDATE(),
            '-'+CONVERT(NVARCHAR(50),NewPriceId)+'-',DiscountPerc,0
            FROM #SpecialRateDetails A INNER JOIN #SplProductBatchDetails B ON A.PrdId = B.PrdId AND A.PrdBatId = B.PrdBatId 
            and A.RtrCtgValueCode=B.RtrCtgValueCode
            ORDER BY PrdCCode,PrdBatCode
            --Added By Rajesh
            INSERT INTO SpecialRateAftDownload_calc (RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCCode,PrdBatCCode,SplSelRate,FromDate,CreatedDate,DownloadedDate,
            ContractPriceIds,DiscountPerc,SplrateId,ApplyOn,TYPE)
            SELECT DISTINCT RtrCtgCode,A.RtrCtgValueCode,A.RtrCode,A.PrdCCode,A.PrdBatCode,A.SplRate,CONVERT(NVARCHAR(10),GETDATE(),121),GETDATE(),GETDATE(),
            '-'+CONVERT(NVARCHAR(50),NewPriceId)+'-',DiscountPerc,0,A.ApplyOn,A.TYPE
            FROM #SpecialRateDetails A INNER JOIN #SplProductBatchDetails B ON A.PrdId = B.PrdId AND A.PrdBatId = B.PrdBatId 
            and A.RtrCtgValueCode=B.RtrCtgValueCode
            ORDER BY PrdCCode,PrdBatCode
            --Till Here
            			
			SELECT * INTO #PrdBatch  FROM CONTRACTPRICINGDETAILS A WHERE NOT EXISTS (SELECT PRDID FROM ProductBatch B WHERE  A.PRDID = B.PRDID )

			TRUNCATE TABLE ProductBatchPriceWithCounter
			 
			IF EXISTS (SELECT *FROM #PrdBatch)
			BEGIN
				INSERT INTO  ProductBatchPriceWithCounter
				SELECT *  FROM @ProductBatchPriceWithCounter

				EXEC Proc_InsertContractPricingForNewProduct
			END



			--SELECT PrdId,PrdBatId,TransNo, FROM @ProductBatchPriceWithCounter INNER JOIN 
			
    		--SELECT A.PrdId,MAX(A.PrdBatId) AS PrdBatId INTO #ContractPrice FROM ProductBatch A (NOLOCK),@ProductBatchWithCounter B
			--WHERE  A.PrdId = B.PrdId AND A.PrdBatId < @ExistPrdBatMaxId AND EXISTS
			--(SELECT CPD.PrdBatId FROM ContractPricingDetails CPD (NOLOCK)
			--INNER JOIN ProductBatch PB1 (NOLOCK) ON CPD.PrdId=PB1.PrdId AND CPD.PrdBatId=PB1.PrdBatId AND A.PrdBatId=CPD.PrdBatId
			--AND CPD.PrdID IN (SELECT DISTINCT PrdId FROM @ProductBatchWithCounter))GROUP BY A.PrdId 
			
		--	INSERT INTO @ContractPrice (PrdId,PrdBatId)
		--	SELECT A.PrdId,MAX(A.PrdBatId) AS PrdBatId FROM ProductBatch A (NOLOCK),
		--	ContractPricingDetails B (NOLOCK),@ProductBatchWithCounter C
  --          WHERE A.PrdId = B.PrdId AND A.PrdBatId = B.PrdBatId AND A.PrdId = C.Prdid AND B.PrdId = C.Prdid 
  --          GROUP BY A.PrdId ORDER BY A.PrdId
			        
		--	IF EXISTS(SELECT * FROM @ContractPrice)
		--	BEGIN
						
		--		SELECT DISTINCT PrdbatId,PriceId,Max(PriceCode) as PriceCode INTO #ProductBatchDetails 
		--		FROM ProductBatchDetails
		--		GROUP BY PrdbatId,PriceId
		--		INSERT INTO @ContractBatchPrice (ContractId,CtgMainId,PrdId,PrdBatId,PriceId,PriceCode) 
		--		SELECT Max(C.ContractId) as ContractId,D.CtgMainId,E.PrdId,E.PrdBatId,C.PriceId AS PriceId,
		--		--CAST('' AS NVARCHAR(4000)) AS PriceCode
		--		PriceCode
		--		FROM  ContractPricingMaster D (NOLOCK) 
		--		INNER JOIN  ContractPricingDetails C (NOLOCK)   ON C.ContractId = D.ContractId
		--		INNER JOIN  #ProductBatchDetails A (NOLOCK) ON A.PrdBatId = C.PrdBatId AND A.PriceId = C.PriceId
		--		INNER JOIN @ContractPrice E  ON E.PrdBatId = C.PrdBatId AND E.PrdId = C.PrdId 
		--		GROUP BY D.CtgMainId,E.PrdId,E.PrdBatId,C.PriceId ,PriceCode
			
		--	    --INSERT INTO @ContractBatchPrice (ContractId,CtgMainId,PrdId,PrdBatId,PriceId,PriceCode)
		--	    --SELECT DISTINCT MAX(D.ContractId) AS ContractId,D.CtgMainId,E.PrdId,E.PrdBatId,C.PriceId AS PriceId,
		--	    --CAST('' AS NVARCHAR(4000)) AS PriceCode FROM ProductBatchDetails A (NOLOCK),
		--	    --ContractPricingDetails C (NOLOCK),ContractPricingMaster D (NOLOCK),@ContractPrice E 
		--	    --WHERE A.PrdBatId = C.PrdBatId AND A.PriceId = C.PriceId AND C.ContractId = D.ContractId AND E.PrdId = C.PrdId 
		--	    --AND E.PrdBatId = C.PrdBatId GROUP BY D.CtgMainId,E.PrdId,E.PrdBatId,C.PriceId    
			
		--	    --UPDATE A SET A.PriceCode = D.PriceCode FROM @ContractBatchPrice A,ContractPricingDetails B WITH(NOLOCK),
		--	    --ContractPricingMaster C WITH(NOLOCK),ProductBatchDetails D WITH(NOLOCK) WHERE A.PrdId = B.PrdId AND A.PrdBatId = B.PrdBatId 
		--	    --AND A.CtgMainId = C.CtgMainId AND D.PrdBatId = A.PrdBatId AND A.ContractId = C.ContractId AND B.ContractId = C.ContractId 
		--	    --UPDATE A SET A.PriceCode = D.PriceCode
		--	    --FROM @ContractBatchPrice A 
		--	    --INNER JOIN ContractPricingDetails B WITH(NOLOCK) ON A.PrdId = B.PrdId AND A.PrdBatId = B.PrdBatId 
		--	    --INNER JOIN ContractPricingMaster C WITH(NOLOCK) ON   A.CtgMainId = C.CtgMainId  AND A.ContractId = C.ContractId AND B.ContractId = C.ContractId and A.ContractId=B.ContractId
		--	    --INNER JOIN #ProductBatchDetails D WITH(NOLOCK) ON D.PrdBatId = A.PrdBatId 
			    
		--	    --select 'Botree',* from @ProductBatchPriceWithCounter
		--	    --select 'Software',* from @ContractBatchPrice
		--		SELECT DISTINCT SlNo INTO #BatchCreation FROM BatchCreation A (NOLOCK)
		--		INNER JOIN (SELECT MAX(BatchseqId)  as BatchseqId FROM BatchCreationMaster (NOLOCK))X
		--		ON A.BatchSeqId=X.BatchSeqId
			
		--	    INSERT INTO @ProductBatchDetails (PrdId,PrdBatId,PriceId,PriceCode,NewBatchId,Slno,PrdBatDetailValue,NewPriceId) 
		--		SELECT DISTINCT A.PrdId,A.PrdBatId,A.PriceId,A.PriceCode,B.PrdBatId AS NewBatchId,PBD.Slno,PrdBatDetailValue,
		--		DENSE_RANK ()OVER (ORDER BY A.PriceId,A.PrdbatId,B.PrdBatId)+ @OldPriceId AS NewPriceId 
		--		FROM @ContractBatchPrice A INNER JOIN @ProductBatchPriceWithCounter B 
		--		ON A.PrdId = B.PrdId
		--		INNER JOIN ProductBatchDetails PBD WITH(NOLOCK) ON PBD.PrdBatId=A.PrdBatId and PBD.PriceId=A.PriceId 
		--		INNER JOIN #BatchCreation C WITH(NOLOCK) ON C.SlNo=PBD.Slno
		--		ORDER BY A.PrdId,A.PrdBatId,A.PriceId,B.PrdBatId
															            
		--		IF(SELECT COUNT(*) FROM BatchCreation WHERE BatchSeqId=@BatSeqId)=4
		--		BEGIN
		--			INSERT INTO ProductBatchDetails(PriceId,PrdBatId,PriceCode,BatchSeqId,SLNo,PrdBatDetailValue,DefaultPrice,
		--		    PriceStatus,Availability,LastModBy,LastModDate,AuthId,AuthDate)
		--			SELECT DISTINCT NewPriceId,NewBatchId,PriceCode,@BatSeqId,SlNo,PrdBatDetailValue,0,1,
		--			1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) 
		--			FROM @ProductBatchDetails
					
		--			UPDATE A SET A.PrdBatDetailValue = B.MRP FROM ProductBatchDetails A,@ProductBatchPriceWithCounter B
		--			WHERE A.PrdBatId = B.PrdBatId AND A.Slno = 1
					
		--			UPDATE A SET A.PrdBatDetailValue = B.ListPrice FROM ProductBatchDetails A,@ProductBatchPriceWithCounter B
		--			WHERE A.PrdBatId = B.PrdBatId AND A.Slno = 2
					
		--			UPDATE A SET A.PrdBatDetailValue = B.ClaimRate FROM ProductBatchDetails A,@ProductBatchPriceWithCounter B
		--			WHERE A.PrdBatId = B.PrdBatId AND A.Slno = 4 
		--		END
		--		ELSE IF (SELECT COUNT(*) FROM BatchCreation WHERE BatchSeqId=@BatSeqId)=5
		--		BEGIN
		--			INSERT INTO ProductBatchDetails(PriceId,PrdBatId,PriceCode,BatchSeqId,SLNo,PrdBatDetailValue,DefaultPrice,
		--			PriceStatus,Availability,LastModBy,LastModDate,AuthId,AuthDate)
		--			SELECT DISTINCT NewPriceId,NewBatchId,PriceCode,@BatSeqId,SlNo,PrdBatDetailValue,0,1,
		--			1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) 
  --                  FROM @ProductBatchDetails
  --                  UPDATE A SET A.PrdBatDetailValue = B.MRP FROM ProductBatchDetails A,@ProductBatchPriceWithCounter B
		--			WHERE A.PrdBatId = B.PrdBatId AND A.Slno = 1
					
		--			UPDATE A SET A.PrdBatDetailValue = B.ListPrice FROM ProductBatchDetails A,@ProductBatchPriceWithCounter B
		--			WHERE A.PrdBatId = B.PrdBatId AND A.Slno = 2
					
		--			UPDATE A SET A.PrdBatDetailValue = B.ClaimRate FROM ProductBatchDetails A,@ProductBatchPriceWithCounter B
		--			WHERE A.PrdBatId = B.PrdBatId AND A.Slno = 4
					
		--			UPDATE A SET A.PrdBatDetailValue = B.AddRate1 FROM ProductBatchDetails A,@ProductBatchPriceWithCounter B
		--			WHERE A.PrdBatId = B.PrdBatId AND A.Slno = 5
					
		--		END	
				
		--		    IF EXISTS (SELECT * FROM @ProductBatchDetails)
		--		    BEGIN
		--				INSERT INTO ContractPricingDetails(ContractId,PrdId,PrdBatId,PriceId,Discount,FlatAmtDisc,
		--				Availability,LastModBy,LastModDate,AuthId,AuthDate,CtgValMainId)
		--				SELECT DISTINCT ContractId,A.PrdId,NewBatchId,NewPriceId,Discount,FlatAmtDisc,
		--				Availability,LastModBy,GETDATE(),AuthId,GETDATE(),CtgValMainId
		--				FROM ContractPricingDetails	A,@ProductBatchDetails B WHERE A.PrdId = B.PrdId 
		--				AND A.PrdBatId = B.PrdBatId	AND A.PriceId = B.PriceId
		--			END	
						--UPDATE Counters SET CurrValue = (SELECT MAX(PriceId) FROM ProductBatchDetails) 
						--WHERE TabName = 'ProductBatchDetails' AND FldName = 'PriceId'				 
		--	END
		END
	END
	
	SELECT @NewPriceId=CurrValue FROM Counters (NOLOCK)	WHERE TabName='ProductBatchDetails' AND FldName='PriceId' 		
	IF @NewPriceId>@OldPriceId
	BEGIN
		IF EXISTS(SELECT * FROM Configuration(NOLOCK) WHERE ModuleId='BotreeRateForOldBatch'
		AND ModuleName='Botree Product Batch Download' AND Status=1)
		BEGIN
			EXEC Proc_DefaultPriceUpdation @ExistPrdBatMaxId,@OldPriceId,1
		END
	END
	IF EXISTS(SELECT * FROM ProductBatchDetails WHERE PriceId>=@OldPriceId)
	BEGIN
		EXEC Proc_DefaultPriceHistory 0,0,@NewPriceId,2,1
	END
	---MOORTHI  START
	IF @ExistPrdBatMaxId>0
	BEGIN		
		SET @BatchTransfer=0
		SELECT @BatchTransfer=Status FROM Configuration WHERE ModuleId='BotreeAutoBatchTransfer'
		IF @BatchTransfer=1
		BEGIN
			EXEC Proc_AutoBatchTransfer @ExistPrdBatMaxId,@Po_ErrNo = @Po_BatchTransfer OUTPUT
			IF @Po_BatchTransfer=1
			BEGIN
				INSERT INTO Errorlog VALUES (1,'Cn2Cs_Prk_BLProductBatch','Product Batch-Auto Batch Transfer',
				'Auto Batch Transfer is not done properly')           	
				SET @Po_ErrNo=1				
			END
		END
	END	
	--END
	
	UPDATE Cn2Cs_Prk_ProductBatch SET DownLoadFlag='Y' 
	WHERE PrdCCode+'~'+PrdBatCode IN (SELECT P.PrdCCode+'~'+PB.PrdBatCode
	FROM Product P,ProductBatch PB WHERE P.PrdId=PB.PrdId)	
	RETURN		
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_CalculateSpecialDiscountAftRate' AND TYPE='P')
DROP PROCEDURE Proc_CalculateSpecialDiscountAftRate
GO
--EXEC Proc_CalculateSpecialDiscountAftRate
CREATE PROCEDURE Proc_CalculateSpecialDiscountAftRate
AS  
/*
--------------------------------------------------------------------------------------------------------------------------------------------------  
* [DATE]      [DEVELOPER]		[USER_STORY_ID]			[CR/BUG]    [DESCRIPTION]
* 22-09-2018   VASANTHARAJ		  ILCRSTPAR2104	  BUG		System is considering random  special rate and applying same to Billing Screen
* 06-06-2019	MOHANA		 	  CRCRSTPAR0058	  CR  		INCLUDED CATEGORY WISE DOWNLOAD FOR SPL RATE
--------------------------------------------------------------------------------------------------------------------------------------------------
*/ 
SET NOCOUNT ON  
BEGIN
     --Added by SAthishkumar Veeramani 2015/04/01
	 DECLARE @SplDiscountToAvoid TABLE
	 (
	   RetCategoryLevel       NVARCHAR(100),
	   RetCatLevelValue       NVARCHAR(100),
	   PrdCategoryLevel       NVARCHAR(100),
	   PrdCategoryLevelValue  NVARCHAR(100)
	 )    
     INSERT INTO @SplDiscountToAvoid (RetCategoryLevel,RetCatLevelValue,PrdCategoryLevel,PrdCategoryLevelValue)
     SELECT DISTINCT RetCategoryLevel,RetCatLevelValue,PrdCategoryLevel,PrdCategoryLevelValue 
     FROM Cn2Cs_Prk_SpecialDiscount (NOLOCK) WHERE (ApplyOn = '' OR ApplyOn IS NULL)
     INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	 SELECT DISTINCT 1,'Cn2Cs_Prk_SpecialDiscount','Apply On','Apply On Should Not be Empty or Null-'+PrdCategoryLevelValue 
     FROM Cn2Cs_Prk_SpecialDiscount (NOLOCK) WHERE (ApplyOn = '' OR ApplyOn IS NULL)
     INSERT INTO @SplDiscountToAvoid (RetCategoryLevel,RetCatLevelValue,PrdCategoryLevel,PrdCategoryLevelValue)
     SELECT DISTINCT RetCategoryLevel,RetCatLevelValue,PrdCategoryLevel,PrdCategoryLevelValue 
     FROM Cn2Cs_Prk_SpecialDiscount (NOLOCK) WHERE UPPER(LTRIM(RTRIM(ApplyOn))) NOT IN ('MRP','SELLINGRATE','PURCHASERATE')
     INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	 SELECT DISTINCT 1,'Cn2Cs_Prk_SpecialDiscount','Apply On','Apply On Should Not be in MRP Or SELLINGRATE Or PURCHASERATE-'+PrdCategoryLevelValue 
     FROM Cn2Cs_Prk_SpecialDiscount (NOLOCK) WHERE UPPER(LTRIM(RTRIM(ApplyOn))) NOT IN ('MRP','SELLINGRATE','PURCHASERATE')
     --Till Here
	 INSERT INTO @SplDiscountToAvoid (RetCategoryLevel,RetCatLevelValue,PrdCategoryLevel,PrdCategoryLevelValue)
     SELECT DISTINCT RetCategoryLevel,RetCatLevelValue,PrdCategoryLevel,PrdCategoryLevelValue 
     FROM Cn2Cs_Prk_SpecialDiscount (NOLOCK) WHERE UPPER(LTRIM(RTRIM(ApplyOn))) IN ('MRP') AND ISNULL([Type],'')=''
     INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	 SELECT DISTINCT 1,'Cn2Cs_Prk_SpecialDiscount','Type','Type Should Not be Empty For Appy On MRP-'+PrdCategoryLevelValue 
     FROM Cn2Cs_Prk_SpecialDiscount (NOLOCK) WHERE UPPER(LTRIM(RTRIM(ApplyOn))) IN ('MRP') AND ISNULL([Type],'')=''
     INSERT INTO @SplDiscountToAvoid (RetCategoryLevel,RetCatLevelValue,PrdCategoryLevel,PrdCategoryLevelValue)
     SELECT DISTINCT RetCategoryLevel,RetCatLevelValue,PrdCategoryLevel,PrdCategoryLevelValue 
     FROM Cn2Cs_Prk_SpecialDiscount (NOLOCK) WHERE UPPER(LTRIM(RTRIM(ApplyOn))) IN ('MRP') AND 
     UPPER(LTRIM(RTRIM(ISNULL([Type],'')))) NOT IN ('MARK DOWN','MARK UP')
     INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	 SELECT DISTINCT 1,'Cn2Cs_Prk_SpecialDiscount','Type','Type Should be Mark Up/Mark Down For Appy On MRP-'+PrdCategoryLevelValue 
     FROM Cn2Cs_Prk_SpecialDiscount (NOLOCK) WHERE UPPER(LTRIM(RTRIM(ApplyOn))) IN ('MRP') AND 
     UPPER(LTRIM(RTRIM(ISNULL([Type],'')))) NOT IN ('MARK DOWN','MARK UP')

	 EXEC Proc_GR_Build_PH  

	 TRUNCATE TABLE TempSpecialRateDiscountProduct
	 DELETE FROM Cn2Cs_Prk_SpecialDiscount where DownLoadFlag='Y'
	  -- Added by Vasantharaj on 22/09/2018 , PMS NO : ILCRSTPAR2104
	  SELECT RetCategoryLevel ,RetCatLevelValue,PrdCategoryLevel ,PrdCategoryLevelValue,DiscPer,MAX(CreatedDate) Createddate INTO #Cn2Cs_Prk_SpecialDiscount FROM Cn2Cs_Prk_SpecialDiscount
	  GROUP BY RetCategoryLevel ,RetCatLevelValue,PrdCategoryLevel ,PrdCategoryLevelValue,DiscPer
	  
	  DELETE A FROM  Cn2Cs_Prk_SpecialDiscount A INNER JOIN #Cn2Cs_Prk_SpecialDiscount C ON A.RetCategoryLevel=C.RetCategoryLevel
	  AND A.PrdCategoryLevel=C.PrdCategoryLevel AND A.RetCatLevelValue=C.RetCatLevelValue AND A.PrdCategoryLevelValue=C.PrdCategoryLevelValue
	  AND A.DiscPer=C.DiscPer AND A.CreatedDate<>C.Createddate
	  --Till Here	  
	 INSERT INTO TempSpecialRateDiscountProduct (CtgLevelName,CtgCode,RtrCode,PrdCCode,PrdBatCode,DiscPer,SpecialSellingRate,EffectiveFromDate,
     	 EffectiveToDate,CreatedDate,ApplyOn,[Type], PrdCtgValMainId,CPRefCode,CPRefName)
	 SELECT DISTINCT A.RetCategoryLevel,A.RetCatLevelValue,'ALL',ProductCode,PrdBatCode,DiscPer,
	 --PrdBatDetailValue-(PrdBatDetailValue*(DiscPer/100)) SplRate,
	 (CASE ApplyOn WHEN 1 THEN 
		 (CASE [Type] WHEN 1 THEN (PrdBatDetailValue*100/(100+DiscPer)) WHEN 2 THEN PrdBatDetailValue-(PrdBatDetailValue*(DiscPer/100))
			ELSE PrdBatDetailValue-(PrdBatDetailValue*(DiscPer/100))  END)	 
	 ELSE PrdBatDetailValue-(PrdBatDetailValue*(DiscPer/100)) END) AS SplRate,	 
	 EffFromDate,EffToDate,CreatedDate,ApplyOn,[Type],A.PrdCtgValMainId	,CPRefCode,CPRefName 
	 FROM (  
	 SELECT CP.PrdCategoryLevel,CP.PrdCategoryLevelValue,CP.RetCatLevelValue,CP.RetCategoryLevel,Prdid,T.ProductCode,DiscPer,EffFromDate,
	 EffToDate,CreatedDate,(CASE UPPER(LTRIM(RTRIM(CP.ApplyOn))) WHEN 'SELLINGRATE' THEN 3 WHEN 'PURCHASERATE' THEN 2 ELSE 1 END) AS ApplyOn,
	 CASE UPPER(LTRIM(RTRIM([Type]))) WHEN 'MARK UP' THEN 1 WHEN 'MARK DOWN' THEN 2 ELSE 0 END AS [Type],cOMPANY_ID as PrdCtgValMainId,CPRefCode,CPRefName
	 FROM Cn2Cs_Prk_SpecialDiscount CP INNER JOIN TBL_GR_BUILD_PH T on CP.PrdCategoryLevelValue=T.COMPANY_Code  
	 WHERE CP.PrdCategoryLevel='COMPANY' and CP.DownloadFlag='D' AND NOT EXISTS 
	 (SELECT DISTINCT RetCategoryLevel,RetCatLevelValue,PrdCategoryLevel,PrdCategoryLevelValue FROM @SplDiscountToAvoid SA 
	 WHERE CP.RetCategoryLevel = SA.RetCategoryLevel AND CP.RetCatLevelValue = SA.RetCatLevelValue AND CP.PrdCategoryLevel = SA.PrdCategoryLevel
	 AND CP.PrdCategoryLevelValue = SA.PrdCategoryLevelValue) 
	 UNION   
	 SELECT CP.PrdCategoryLevel,CP.PrdCategoryLevelValue,CP.RetCatLevelValue,CP.RetCategoryLevel,Prdid,T.ProductCode,DiscPer,EffFromDate,
	 EffToDate,CreatedDate,(CASE UPPER(LTRIM(RTRIM(CP.ApplyOn))) WHEN 'SELLINGRATE' THEN 3 WHEN 'PURCHASERATE' THEN 2 ELSE 1 END) AS ApplyOn,
	 CASE UPPER(LTRIM(RTRIM([Type]))) WHEN 'MARK UP' THEN 1 WHEN 'MARK DOWN' THEN 2 ELSE 0 END AS [Type],Category_iD as PrdCtgValMainId,CPRefCode,CPRefName
	 FROM Cn2Cs_Prk_SpecialDiscount CP INNER JOIN TBL_GR_BUILD_PH T on CP.PrdCategoryLevelValue=T.Category_Code  
	 WHERE CP.PrdCategoryLevel='Category'and CP.DownloadFlag='D' AND NOT EXISTS 
	 (SELECT DISTINCT RetCategoryLevel,RetCatLevelValue,PrdCategoryLevel,PrdCategoryLevelValue FROM @SplDiscountToAvoid SA 
	 WHERE CP.RetCategoryLevel = SA.RetCategoryLevel AND CP.RetCatLevelValue = SA.RetCatLevelValue AND CP.PrdCategoryLevel = SA.PrdCategoryLevel
	 AND CP.PrdCategoryLevelValue = SA.PrdCategoryLevelValue) 
	 UNION  
	 SELECT CP.PrdCategoryLevel,CP.PrdCategoryLevelValue,CP.RetCatLevelValue,CP.RetCategoryLevel,Prdid,T.ProductCode,DiscPer,EffFromDate,
	 EffToDate,CreatedDate,(CASE UPPER(LTRIM(RTRIM(CP.ApplyOn))) WHEN 'SELLINGRATE' THEN 3 WHEN 'PURCHASERATE' THEN 2 ELSE 1 END) AS ApplyOn,
	 CASE UPPER(LTRIM(RTRIM([Type]))) WHEN 'MARK UP' THEN 1 WHEN 'MARK DOWN' THEN 2 ELSE 0 END AS [Type],Brand_ID as PrdCtgValMainId,CPRefCode,CPRefName
	 FROM Cn2Cs_Prk_SpecialDiscount CP INNER JOIN TBL_GR_BUILD_PH T on CP.PrdCategoryLevelValue=T.Brand_Code  
	 WHERE CP.PrdCategoryLevel='Brand'and CP.DownloadFlag='D' AND NOT EXISTS 
	 (SELECT DISTINCT RetCategoryLevel,RetCatLevelValue,PrdCategoryLevel,PrdCategoryLevelValue FROM @SplDiscountToAvoid SA 
	 WHERE CP.RetCategoryLevel = SA.RetCategoryLevel AND CP.RetCatLevelValue = SA.RetCatLevelValue AND CP.PrdCategoryLevel = SA.PrdCategoryLevel
	 AND CP.PrdCategoryLevelValue = SA.PrdCategoryLevelValue) 
	 UNION  
	 SELECT CP.PrdCategoryLevel,CP.PrdCategoryLevelValue,CP.RetCatLevelValue,CP.RetCategoryLevel,Prdid,T.ProductCode,DiscPer,EffFromDate,
	 EffToDate,CreatedDate,(CASE UPPER(LTRIM(RTRIM(CP.ApplyOn))) WHEN 'SELLINGRATE' THEN 3 WHEN 'PURCHASERATE' THEN 2 ELSE 1 END) AS ApplyOn,
	 CASE UPPER(LTRIM(RTRIM([Type]))) WHEN 'MARK UP' THEN 1 WHEN 'MARK DOWN' THEN 2 ELSE 0 END AS [Type] ,PriceSlot_ID as PrdCtgValMainId,CPRefCode,CPRefName
	 FROM Cn2Cs_Prk_SpecialDiscount CP INNER JOIN TBL_GR_BUILD_PH T on CP.PrdCategoryLevelValue=T.PriceSlot_Code  
	 WHERE CP.PrdCategoryLevel='PriceSlot'and CP.DownloadFlag='D' AND NOT EXISTS 
	 (SELECT DISTINCT RetCategoryLevel,RetCatLevelValue,PrdCategoryLevel,PrdCategoryLevelValue FROM @SplDiscountToAvoid SA 
	 WHERE CP.RetCategoryLevel = SA.RetCategoryLevel AND CP.RetCatLevelValue = SA.RetCatLevelValue AND CP.PrdCategoryLevel = SA.PrdCategoryLevel
	 AND CP.PrdCategoryLevelValue = SA.PrdCategoryLevelValue)  
	 UNION  
	 SELECT CP.PrdCategoryLevel,CP.PrdCategoryLevelValue,CP.RetCatLevelValue,CP.RetCategoryLevel,Prdid,T.ProductCode,DiscPer,EffFromDate,
	 EffToDate,CreatedDate,(CASE UPPER(LTRIM(RTRIM(CP.ApplyOn))) WHEN 'SELLINGRATE' THEN 3 WHEN 'PURCHASERATE' THEN 2 ELSE 1 END) AS ApplyOn ,
	 CASE UPPER(LTRIM(RTRIM([Type]))) WHEN 'MARK UP' THEN 1 WHEN 'MARK DOWN' THEN 2 ELSE 0 END AS [Type],Flavor_ID as PrdCtgValMainId,CPRefCode,CPRefName
	 FROM Cn2Cs_Prk_SpecialDiscount CP INNER JOIN TBL_GR_BUILD_PH T on CP.PrdCategoryLevelValue=T.Flavor_Code  
	 WHERE CP.PrdCategoryLevel='Flavor'and CP.DownloadFlag='D' AND NOT EXISTS 
	 (SELECT DISTINCT RetCategoryLevel,RetCatLevelValue,PrdCategoryLevel,PrdCategoryLevelValue FROM @SplDiscountToAvoid SA 
	 WHERE CP.RetCategoryLevel = SA.RetCategoryLevel AND CP.RetCatLevelValue = SA.RetCatLevelValue AND CP.PrdCategoryLevel = SA.PrdCategoryLevel
	 AND CP.PrdCategoryLevelValue = SA.PrdCategoryLevelValue)
	 UNION  
	 SELECT CP.PrdCategoryLevel,CP.PrdCategoryLevelValue,CP.RetCatLevelValue,CP.RetCategoryLevel,Prdid,T.ProductCode,DiscPer,EffFromDate,
	 EffToDate,CreatedDate,(CASE UPPER(LTRIM(RTRIM(CP.ApplyOn))) WHEN 'SELLINGRATE' THEN 3 WHEN 'PURCHASERATE' THEN 2 ELSE 1 END) AS ApplyOn,
	 CASE UPPER(LTRIM(RTRIM([Type]))) WHEN 'MARK UP' THEN 1 WHEN 'MARK DOWN' THEN 2 ELSE 0 END AS [Type],0 as PrdCtgValMainId,CPRefCode,CPRefName
	 FROM Cn2Cs_Prk_SpecialDiscount CP INNER JOIN TBL_GR_BUILD_PH T on CP.PrdCategoryLevelValue=T.ProductCode  
	 WHERE CP.PrdCategoryLevel='Product'and CP.DownloadFlag='D' AND NOT EXISTS 
	 (SELECT DISTINCT RetCategoryLevel,RetCatLevelValue,PrdCategoryLevel,PrdCategoryLevelValue FROM @SplDiscountToAvoid SA 
	 WHERE CP.RetCategoryLevel = SA.RetCategoryLevel AND CP.RetCatLevelValue = SA.RetCatLevelValue AND CP.PrdCategoryLevel = SA.PrdCategoryLevel
	 AND CP.PrdCategoryLevelValue = SA.PrdCategoryLevelValue)
	 UNION
	 SELECT CP.PrdCategoryLevel,CP.PrdCategoryLevelValue,CP.RetCatLevelValue,CP.RetCategoryLevel,Prdid,T.ProductCode,DiscPer,EffFromDate,
	 EffToDate,CreatedDate,(CASE UPPER(LTRIM(RTRIM(CP.ApplyOn))) WHEN 'SELLINGRATE' THEN 3 WHEN 'PURCHASERATE' THEN 2 ELSE 1 END) AS ApplyOn,
	 CASE UPPER(LTRIM(RTRIM([Type]))) WHEN 'MARK UP' THEN 1 WHEN 'MARK DOWN' THEN 2 ELSE 0 END AS [Type],0 as PrdCtgValMainId,CPRefCode,CPRefName
	 FROM Cn2Cs_Prk_SpecialDiscount CP INNER JOIN TBL_GR_BUILD_PH T on CP.PrdCategoryLevelValue=T.ProductCode  
	 WHERE CP.DownloadFlag='D' AND NOT EXISTS (SELECT DISTINCT RetCategoryLevel,RetCatLevelValue,PrdCategoryLevel,PrdCategoryLevelValue 
	 FROM @SplDiscountToAvoid SA WHERE CP.RetCategoryLevel = SA.RetCategoryLevel AND CP.RetCatLevelValue = SA.RetCatLevelValue 
	 AND CP.PrdCategoryLevel = SA.PrdCategoryLevel AND CP.PrdCategoryLevelValue = SA.PrdCategoryLevelValue))A  
	 INNER JOIN Product P (NOLOCK) ON P.PrdId=A.PrdId and A.ProductCode=P.PrdCCode  
	 INNER JOIN ProductBatch PB (NOLOCK) ON PB.PrdId=P.PrdId  
	 INNER JOIN ProductBatchDetails PBD (NOLOCK) ON PBD.PrdBatId=PB.PrdBatId  
	 INNER JOIN BatchCreation BC (NOLOCK) ON BC.SlNo=PBD.SLNo AND BC.SlNo = A.ApplyOn
	 --INNER JOIN Configuration C (NOLOCK) ON BC.SlNo = ISNULL(CAST(C.ConfigValue AS INT),0)
	 WHERE PBD.DefaultPrice=1 --AND C.ModuleId = 'SPLDISC'
	 
END
GO
--CRCRSTPAR0056	(STO(Service to Outlet) or Distributor incentive logic to be incorporated and debit note should upload to console)
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE xtype='TF' AND NAME='Fn_ReturnPDFReportName')
DROP FUNCTION Fn_ReturnPDFReportName
GO
--select * From Fn_ReturnPDFReportName(292)
CREATE FUNCTION Fn_ReturnPDFReportName(@RptId AS INT,@UsrId	INT)
RETURNS @PDFReportName TABLE
(
	LaserRptName	VARCHAR(100),
	GenericRptName	VARCHAR(100),
	RptCaption		VARCHAR(100)
)
AS
/************************************************
* FUNCTION : Proc_RptDebitNoteTopSheetNew    
* PURPOSE : Debit Note Top Sheet in Crystal format
* CREATED : S.MOORTHI   
* CREATED DATE :03-05-2019    
* NOTE  : Parle Function to Return Rpt File Selection for Debit Note Top Sheet    
* MODIFIED     
*************************************************************************
* DATE       AUTHOR   CR/BZ USER STORY ID           DESCRIPTION                             
**************************************************************************
24-06-2019  S.MOORTHI		SR		ILCRSTPAR4278       Debit note sheet report (Design in Crystal Reports)
*********************************************************************************/         
BEGIN

	IF EXISTS(SELECT SelValue FROM ReportFilterDt  WHERE RptId=292 and SelId=176 AND SelValue=0 AND UsrId=@UsrId)
	BEGIN
			INSERT INTO @PDFReportName(LaserRptName,GenericRptName,RptCaption)
			SELECT 'RptDebitNoteTopSheet_Laser.Rpt','RptDebitNoteTopSheet.rpt',RptCaption+' '+replace(convert(VARCHAR(20),GETDATE(),105)+''+left(convert(VARCHAR(20),GETDATE(),108),5) ,':','') 
			FROM RptHeader Where RptId=292		
	END
	ELSE
	BEGIN
			INSERT INTO @PDFReportName(LaserRptName,GenericRptName,RptCaption)
			SELECT 'RptDebitNoteTopSheet_Laser.Rpt','RptDebitNoteTopSheet_Laser.rpt',RptCaption+' '+replace(convert(VARCHAR(20),GETDATE(),105)+''+left(convert(VARCHAR(20),GETDATE(),108),5) ,':','') 
			FROM RptHeader Where RptId=292	
	END	
	
	--IF EXISTS(SELECT * from MANUALCONFIGURATION WHERE MODULEID='REPORTPRINT' AND PROJECTNAME='PARLE' and STATUS=1)
	--BEGIN
		--IF @RptId=292
		--BEGIN
		--	INSERT INTO @PDFReportName(LaserRptName,GenericRptName,RptCaption)
		--	SELECT 'RptDebitNoteTopSheet_Laser.Rpt',RptName,RptCaption+' '+replace(convert(VARCHAR(20),GETDATE(),105)+''+left(convert(VARCHAR(20),GETDATE(),108),5) ,':','')FROM RptHeader Where RptId=292		
			
		--	--SELECT 'RptDebitNoteTopSheet_Laser.Rpt',RptName,RptCaption FROM RptHeader Where RptId=292		
		--	--SELECT 'RptDebitNoteTopSheet_Laser.Rpt',RptName,RptCaption+'_'+convert(VARCHAR(20),GETDATE(),105) FROM RptHeader Where RptId=292		
		--END
	--END


RETURN
END
GO
DELETE FROM CustomUpdownload WHERE Module in ('DistributorIncentiveMaster') and UpDownload='Download'
INSERT INTO CustomUpdownload(SlNo,SeqNo,Module,Screen,ExportFnName,ImportProcName,
ParkTable,ValidateProcName,TranType,UpDownload,MandatoryFile)
SELECT 281,1,'DistributorIncentiveMaster','DistributorIncentiveMaster','Proc_Cn2Cs_Dummy','',
'Cn2CS_Prk_DistributorIncentiveMaster','Proc_Cn2Cs_DistributorIncentiveMaster','Master','Download',1 
GO
DELETE FROM Tbl_DownloadIntegration WHERE  ProcessName in ('DistributorIncentiveMaster','DistributorIncentiveSlabs')
INSERT INTO Tbl_DownloadIntegration(SequenceNo,ProcessName,PrkTableName,SPName,TRowCount,SelectCount,CreatedDate)
SELECT 91,'DistributorIncentiveMaster','Cn2CS_Prk_DistributorIncentiveMaster','',0,500,CONVERT(VARCHAR(10),GETDATE(),121) UNION
SELECT 92,'DistributorIncentiveSlabs','Cn2CS_Prk_DistributorIncentiveSlabs','',0,500,CONVERT(VARCHAR(10),GETDATE(),121)
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Cn2CS_Prk_DistributorIncentiveMaster]') AND type in (N'U'))
DROP TABLE [dbo].[Cn2CS_Prk_DistributorIncentiveMaster]
GO
CREATE TABLE [dbo].[Cn2CS_Prk_DistributorIncentiveMaster](
	[DistCode] [nvarchar](50) NULL,
	[DistIRefno] [nvarchar](100) NULL,
	[DistIRefDesc] [nvarchar](200) NULL,
	[IncFromDate] [Datetime] NULL,
	[IncToDate] [Datetime]  NULL,
	[DistIStatus]	[varchar](100) NULL, --Active/InActive
	[DownloadFlag] [varchar](1) NULL,
	[CreatedDate] [datetime] NULL
) ON [PRIMARY]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Cn2CS_Prk_DistributorIncentiveSlabs]') AND type in (N'U'))
DROP TABLE [dbo].[Cn2CS_Prk_DistributorIncentiveSlabs]
GO
CREATE TABLE [dbo].[Cn2CS_Prk_DistributorIncentiveSlabs](
	[DistCode] [nvarchar](50) NOT NULL,
	[DistIRefno] [nvarchar](100) NOT NULL,
	[Slab]  TINYINT NOT NULL,
	[FromRange] NUMERIC(36,8),
	[ToRange] NUMERIC(36,8),
	[DistIncentivePerc] NUMERIC(36,8),
	[DownloadFlag] [varchar](1) NULL,
	[CreatedDate] [datetime] NULL
) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE name='DistributorIncentiveMaster' AND xtype='U')
BEGIN
CREATE TABLE [dbo].[DistributorIncentiveMaster](
	[DistIRefno] [nvarchar](50) NOT NULL,
	[DistIRefDesc] [nvarchar](100) NULL,
	[IncFromDate] [Datetime] NOT NULL,
	[IncToDate] [Datetime] NOT NULL,
	[IncMonth] [nvarchar](20) NOT NULL,
	[Incyear] [int] NOT NULL,
	[DistIRefStatus] TinyInt NOT NULL, 
	[IncentiveGenerated] TinyInt NOT NULL, 
	[GeneratedOn] [DATETIME] NULL, 
	[Upload] [tinyint] NOT NULL,
	[Availability] [tinyint] NOT NULL,
	[LastModBy] [tinyint] NOT NULL,
	[LastModDate] [datetime] NOT NULL,
	[AuthId] [tinyint] NOT NULL,
	[AuthDate] [datetime] NOT NULL,
 CONSTRAINT [PK_DistributorIncentiveMaster_DistIRefno] PRIMARY KEY CLUSTERED 
(
	[DistIRefno] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
IF NOT  EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='DistributorIncentiveSlabs' AND xtype='U')
BEGIN
CREATE TABLE [DistributorIncentiveSlabs](
	[DistIRefno] [nvarchar](50) NOT NULL,
	[Slab] [int] NOT NULL,
	[FromRange] [numeric](36, 3) NULL,
	[ToRange] [numeric](36, 3) NULL,
	[DistIncentivePerc] [numeric](36, 3) NULL,
	[Availability] [tinyint] NULL,
	[LastModBy] [tinyint] NULL,
	[LastModDate] [datetime] NULL,
	[AuthId] [tinyint] NULL,
	[AuthDate] [datetime] NULL,
 CONSTRAINT [PK_DistributorIncentiveSlabs_DistIRefno] PRIMARY KEY CLUSTERED 
(
	[DistIRefno] ASC,
	[Slab] ASC
),
CONSTRAINT [FK_DistributorIncentiveSlabs_DistIRefno] FOREIGN KEY ([DistIRefno])
	REFERENCES DistributorIncentiveMaster
) ON [PRIMARY]
END
GO
--Drop table DistributorIncentiveAchDetail
IF NOT  EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='DistributorIncentiveAchDetail' AND xtype='U')
BEGIN
CREATE TABLE [DistributorIncentiveAchDetail](
	[DistIRefno] [nvarchar](50) NOT NULL,
	[GeneratedOn]	[datetime] NOT  NULL,
	[SMId] [int] NOT NULL,	
	[AchSales] [numeric](36, 3)  NOT NULL,
	[AchSlab] INT  NOT NULL,
	[IncPerc] [numeric](36, 3) NULL,
	[IncAmount] [numeric](36, 3) NULL,
	[Upload] [tinyint] NOT NULL,
	[DebitNoteUpload] [tinyint] NOT NULL,
	[Availability] [tinyint] NOT NULL,
	[LastModBy] [tinyint] NOT NULL,
	[LastModDate] [datetime] NOT NULL,
	[AuthId] [tinyint] NOT NULL,
	[AuthDate] [datetime] NOT NULL,
 CONSTRAINT [PK_DistributorIncentiveAchDetail_DistIRefno] PRIMARY KEY CLUSTERED 
(
	[DistIRefno] ASC,
	[SMId] ASC	
),
CONSTRAINT [FK_DistributorIncentiveAchDetail_DistIRefno] FOREIGN KEY ([DistIRefno]) REFERENCES DistributorIncentiveMaster,
CONSTRAINT [FK_DistributorIncentiveAchDetail_SMId] FOREIGN KEY ([SMId]) REFERENCES SalesMan
) ON [PRIMARY]
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE name='DistributorIncentiveAchDetailRouteLevel' AND xtype='U')
BEGIN
CREATE TABLE DistributorIncentiveAchDetailRouteLevel
(
	DistIRefNo				[nvarchar](50),
	SMID					INT,
	RMID					INT,
	NoOfActiveRetailer		INT,
	NoOfEffectiveRetailer	INT,
	PercEffectivity			NUMERIC(18,2),
	NoOfBillsGenerated		INT,
	PercOpportunityUtil		NUMERIC(18,2),
	TotalSales				NUMERIC(18,3),
	DepthPerRoute			NUMERIC(18,0),
	DepthPerBill			NUMERIC(18,0),
	[WeeklyCalc]			INT,
	GeneratedOn				DATETIME,
	UserId					INT,
	CONSTRAINT [FK_DistributorIncentiveAchDetailRouteLevel_DistIRefno] FOREIGN KEY ([DistIRefno]) REFERENCES DistributorIncentiveMaster
)
END
GO
IF EXISTS (SELECT * FROM Sysobjects WHERE XTYPE = 'P' AND name = 'Proc_Cn2Cs_DistributorIncentiveMaster')
DROP PROCEDURE Proc_Cn2Cs_DistributorIncentiveMaster
GO
/*
BEGIN TRAN
DELETE FROM  ERRORLOG
EXEC [Proc_Cn2Cs_DistributorIncentiveMaster] 0
SELECT * FROM DistributorIncentiveMaster
SELECT * from DistributorIncentiveSlabs
SELECT * FROM DistributorIncentiveProducts
select * from ERRORLOG
ROLLBACK TRAN
*/
CREATE PROCEDURE [Proc_Cn2Cs_DistributorIncentiveMaster]
(
	@Po_ErrNo INT OUTPUT
)
AS
/**************************************************************************************************************************************************************************************
* PROCEDURE		: Proc_Cn2Cs_DistributorIncentiveMaster
* PURPOSE		: To Validate Distributor Incentive Data & insert into Disttributor incentive master and detail table
* CREATED		: S.Moorthi
* CREATED DATE	: 27/05/2019
* MODIFIED
**************************************************************************************************************************************************************************************
* VERSION    |  DATE      |	  PERSON	  | USER STORY ID  |  CR/BZ |   REMARKS                      | CODE REVIEW BY     | REVIEW DATE
**************************************************************************************************************************************************************************************
  441		 27/05/2019	    S.Moorthi		CRCRSTPAR0056	 CR		   STO(Service to Outlet) or Distributor service invoice logic to be incorporated and debit note should upload to console
**************************************************************************************************************************************************************************************/
SET NOCOUNT ON
BEGIN
	SET @Po_ErrNo=0
	
	
	DECLARE @CmpId as INT
	SELECT @CmpId=CmpId from Company Where DefaultCompany=1
	
	
	CREATE TABLE #AvoidProgram
	(
		DistIRefno Varchar(50)
	)
	
	CREATE TABLE #Cn2CS_Prk_DistributorIncentiveMaster(
	[DistIRefno] [nvarchar](100) NULL,
	[DistIRefDesc] [nvarchar](200) NULL,
	[IncFromDate] [Datetime] NOT NULL,
	[IncToDate] [Datetime] NOT NULL,
	[DistIStatus]	[VARCHAR](100) NULL,
	[DownloadFlag] [varchar](1) NULL	
	)

	CREATE TABLE #Cn2CS_Prk_DistributorIncentiveSlabs(
		[DistIRefno] [nvarchar](100) NOT NULL,
		[Slab]  TINYINT NOT NULL,
		[FromRange] NUMERIC(36,8),
		[ToRange] NUMERIC(36,8),
		[DistIncentivePerc] NUMERIC(36,8),
		[DownloadFlag] [varchar](1) NULL		
	)
	
	DELETE FROM Cn2CS_Prk_DistributorIncentiveMaster WHERE DownLoadFlag='Y'
	DELETE FROM Cn2CS_Prk_DistributorIncentiveSlabs WHERE DownLoadFlag='Y'
	

	SELECT DistIRefno,MAX(CreatedDate) as CreatedDate
	INTO #PrgMaxDate
	FROM Cn2CS_Prk_DistributorIncentiveMaster (NOLOCK) 
	WHERE DownLoadFlag='D' GROUP BY DistIRefno
	
	SELECT DistIRefno,Slab,MAX(CreatedDate) as CreatedDate
	INTO #PrgslbMxDate
	FROM Cn2CS_Prk_DistributorIncentiveSlabs (NOLOCK)
	WHERE DownloadFlag='D'
	GROUP BY DistIRefno,Slab
	
	INSERT INTO #Cn2CS_Prk_DistributorIncentiveMaster
	(DistIRefno,DistIRefDesc,IncFromDate,IncToDate,[DistIStatus],DownloadFlag)
	SELECT DISTINCT A.DistIRefno,DistIRefDesc,IncFromDate,IncToDate,[DistIStatus],DownloadFlag
	FROM Cn2CS_Prk_DistributorIncentiveMaster A (NOLOCK) 
	INNER JOIN #PrgMaxDate B ON A.DistIRefno=B.DistIRefno and A.CreatedDate=B.CreatedDate
	WHERE DownLoadFlag='D'
	
	INSERT INTO #Cn2CS_Prk_DistributorIncentiveSlabs
	(DistIRefno,Slab,FromRange,ToRange,DistIncentivePerc,DownloadFlag)
	SELECT DISTINCT A.DistIRefno,A.Slab,FromRange,ToRange,DistIncentivePerc,DownloadFlag
	FROM Cn2CS_Prk_DistributorIncentiveSlabs A (NOLOCK) 
	INNER JOIN #PrgslbMxDate B ON A.DistIRefno=B.DistIRefno and A.CreatedDate=B.CreatedDate
	WHERE DownLoadFlag='D'
		
	SELECT DISTINCT A.DistIRefno,A.IncFromDate,A.IncToDate
	INTO #DistributorIncentiveMaster
	FROM #Cn2CS_Prk_DistributorIncentiveMaster A 
	INNER JOIN #Cn2CS_Prk_DistributorIncentiveSlabs B ON A.DistIRefno=B.DistIRefno
	
	--SELECT DISTINCT A.DistIRefno,A.IncFromDate,A.IncToDate
	--INTO #DistributorIncentiveToInActive
	--FROM #DistributorIncentiveMaster A 
	--INNER JOIN DistributorIncentiveMaster SM  ON A.IncFromDate=Sm.IncFromDate AND A.IncToDate=Sm.IncToDate
	--WHERE SM.DistIRefStatus=1
	
	INSERT INTO #AvoidProgram(DistIRefno)
	SELECT A.DistIRefno FROM #Cn2CS_Prk_DistributorIncentiveMaster  A WHERE A.[DistIStatus]='Active' 
	and EXISTS(SELECT  DistIRefno FROM DistributorIncentiveMaster B (NOLOCK) WHERE A.DistIRefno=B.DistIRefno)
	
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 1,'DistributorIncentiveMaster','IncentiveMaster','Incentive Master Already downloaded: '+ A.DistIRefno
	FROM #Cn2CS_Prk_DistributorIncentiveMaster  A WHERE A.[DistIStatus]='Active' 
	and EXISTS(SELECT  DistIRefno FROM DistributorIncentiveMaster B (NOLOCK) WHERE A.DistIRefno=B.DistIRefno)
	
	DELETE A FROM #Cn2CS_Prk_DistributorIncentiveMaster A WHERE NOT EXISTS(SELECT B.DistIRefno FROM #DistributorIncentiveMaster B WHERE A.DistIRefno=B.DistIRefno)
	DELETE A FROM #Cn2CS_Prk_DistributorIncentiveSlabs A WHERE NOT EXISTS(SELECT B.DistIRefno FROM #DistributorIncentiveMaster B WHERE A.DistIRefno=B.DistIRefno)

	---DistributorIncentive Master Mandatory Column Validate		
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 1,'DistributorIncentiveMaster','DistributorIncentiveMaster','DistIRefno,DistIRefnodesc,
	DistIRefno Details Should not be empty' FROM #Cn2CS_Prk_DistributorIncentiveMaster
	WHERE (RTRIM(LTRIM(ISNULL(DistIRefno,'')))='' 
	OR RTRIM(LTRIM(ISNULL([IncFromDate],'')))=''
	OR RTRIM(LTRIM(ISNULL([IncToDate],'')))='')
	
	
	--DistributorIncentiveSlabs Mandatory Column Validate
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 1,'DistributorIncentiveMasterSlabs','DistributorIncentiveMaster',
	'DistributorIncentiveSlabs Mandatory Details Should not be empty' 
	FROM #Cn2CS_Prk_DistributorIncentiveSlabs
	WHERE (RTRIM(LTRIM(ISNULL([DistIRefno],'')))='' 
	OR RTRIM(LTRIM(ISNULL(Slab,0)))='' 
	OR RTRIM(LTRIM(ISNULL(FromRange,0)))=''
	OR RTRIM(LTRIM(ISNULL(ToRange,0)))=''
	OR ISNULL(DistIncentivePerc,0)<=0)
	
	INSERT INTO #AvoidProgram(DistIRefno)
	SELECT DistIRefno FROM #Cn2CS_Prk_DistributorIncentiveMaster
	WHERE (RTRIM(LTRIM(ISNULL(DistIRefno,'')))='' 
	OR RTRIM(LTRIM(ISNULL([IncFromDate],'')))=''
	OR RTRIM(LTRIM(ISNULL([IncToDate],'')))='')
	
	INSERT INTO #AvoidProgram(DistIRefno)
	SELECT DistIRefno FROM #Cn2CS_Prk_DistributorIncentiveSlabs
	WHERE (RTRIM(LTRIM(ISNULL([DistIRefno],'')))='' 
	OR RTRIM(LTRIM(ISNULL(Slab,0)))='' 
	OR RTRIM(LTRIM(ISNULL(FromRange,0)))=''
	OR RTRIM(LTRIM(ISNULL(ToRange,0)))=''
	OR ISNULL(DistIncentivePerc,0)<=0)
	
	INSERT INTO #AvoidProgram(DistIRefno)
	SELECT A.DistIRefno FROM #Cn2CS_Prk_DistributorIncentiveMaster A 
	INNER JOIN DistributorIncentiveMaster SM  ON A.IncFromDate=Sm.IncFromDate AND A.IncToDate=Sm.IncToDate
	WHERE SM.DistIRefStatus=1 AND SM.IncentiveGenerated=1
	
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 1,'DistributorIncentiveMasterSlabs','DistributorIncentiveMaster',
	'Incentive already generated for period of Ref No.'+A.DistIRefno 
	FROM #Cn2CS_Prk_DistributorIncentiveMaster A 
	INNER JOIN DistributorIncentiveMaster SM  ON A.IncFromDate=Sm.IncFromDate AND A.IncToDate=Sm.IncToDate
	WHERE SM.DistIRefStatus=1 AND SM.IncentiveGenerated=1
	
	SELECT DISTINCT DistIRefno
	INTO #ExistsIncentiveMaster
	FROM(
		SELECT DISTINCT A.DistIRefno FROM #Cn2CS_Prk_DistributorIncentiveMaster A 
		INNER JOIN DistributorIncentiveMaster B ON A.DistIRefno=B.DistIRefno 
		UNION ALL
		SELECT DISTINCT A.DistIRefno FROM #Cn2CS_Prk_DistributorIncentiveSlabs A 
		INNER JOIN DistributorIncentiveSlabs B ON A.DistIRefno=B.DistIRefno 
	)X
	
	----In Active From console
	UPDATE SM SET SM.DistIRefStatus=0 FROM #Cn2CS_Prk_DistributorIncentiveMaster A 
	INNER JOIN DistributorIncentiveMaster SM  ON A.IncFromDate=Sm.IncFromDate AND A.IncToDate=Sm.IncToDate AND A.DistIRefno=SM.DistIRefno 
	WHERE SM.DistIRefStatus=1 AND A.[DistIStatus]='InActive' AND SM.IncentiveGenerated=0
	
	INSERT INTO #ExistsIncentiveMaster(DistIRefno)
	SELECT DISTINCT A.DistIRefno FROM #Cn2CS_Prk_DistributorIncentiveMaster A 
	INNER JOIN DistributorIncentiveMaster SM  ON A.IncFromDate=Sm.IncFromDate AND A.IncToDate=Sm.IncToDate AND A.DistIRefno=SM.DistIRefno 
	WHERE SM.DistIRefStatus=0 AND A.[DistIStatus]='InActive' AND SM.IncentiveGenerated=0
	
	---Delete Master data from # table
	DELETE A FROM #Cn2CS_Prk_DistributorIncentiveMaster A 
	INNER JOIN DistributorIncentiveMaster SM  ON A.IncFromDate=Sm.IncFromDate AND A.IncToDate=Sm.IncToDate AND A.DistIRefno=SM.DistIRefno 
	WHERE SM.DistIRefStatus=0 AND A.[DistIStatus]='InActive' AND SM.IncentiveGenerated=0
	
	---Delete Master data from # table
	DELETE B FROM #Cn2CS_Prk_DistributorIncentiveMaster A 
	INNER JOIN #Cn2CS_Prk_DistributorIncentiveSlabs B ON A.DistIRefno=B.DistIRefno 
	INNER JOIN DistributorIncentiveMaster SM  ON A.IncFromDate=Sm.IncFromDate AND A.IncToDate=Sm.IncToDate AND A.DistIRefno=SM.DistIRefno 
	WHERE SM.DistIRefStatus=0 AND A.[DistIStatus]='InActive'
	
	---To InActive Old Incentive Reference	
	UPDATE SM SET SM.DistIRefStatus=0 FROM #DistributorIncentiveMaster A 
	INNER JOIN DistributorIncentiveMaster SM  ON A.IncFromDate=Sm.IncFromDate AND A.IncToDate=Sm.IncToDate
	WHERE SM.DistIRefStatus=1 AND A.DistIRefno<>SM.DistIRefno 
	and NOT EXISTS(SELECT * FROM #AvoidProgram B WHERE B.DistIRefno=A.DistIRefno AND B.DistIRefno=SM.DistIRefno)

--Incentive Header		
	INSERT INTO DistributorIncentiveMaster(DistIRefno,DistIRefDesc,IncFromDate,IncToDate,
	IncMonth,Incyear,DistIRefStatus,IncentiveGenerated,Upload,Availability,LastModBy,LastModDate,AuthId,AuthDate)
	SELECT DISTINCT A.DistIRefno,DistIRefDesc,A.IncFromDate,A.IncToDate,DATENAME(MM,A.IncFromDate),
	YEAR(A.IncFromDate),CASE WHEN [DistIStatus]='InActive' THEN 0 ELSE 1 END AS Active,0 as IncentiveGenerated,0 as Upload,1 as Availability,1 as LastModBy,
	Getdate() LastModdate,1 as AuthId,Getdate() Authdate FROM #Cn2CS_Prk_DistributorIncentiveMaster A 
	INNER JOIN #DistributorIncentiveMaster B ON A.DistIRefno=B.DistIRefno
	WHERE NOT EXISTS(SELECT * FROM #AvoidProgram M WHERE M.DistIRefno=A.DistIRefno AND M.DistIRefno=B.DistIRefno)
	AND NOT EXISTS(SELECT * FROM #ExistsIncentiveMaster N WHERE N.DistIRefno=A.DistIRefno AND N.DistIRefno=B.DistIRefno)
	
	---Incentive Slabs
	INSERT INTO DistributorIncentiveSlabs(DistIRefno,Slab,FromRange,ToRange,DistIncentivePerc,Availability,LastModBy,LastModDate,AuthId,AuthDate)
	SELECT DISTINCT A.DistIRefno,Slab,FromRange,ToRange,DistIncentivePerc,1 as Availability, 1 as LastModBy,Getdate() LastModdate,1 as AuthId,Getdate() Authdate
	FROM #Cn2CS_Prk_DistributorIncentiveSlabs A 
	INNER JOIN #DistributorIncentiveMaster B ON A.DistIRefno=B.DistIRefno
	WHERE NOT EXISTS(SELECT * FROM #AvoidProgram M WHERE M.DistIRefno=A.DistIRefno AND M.DistIRefno=B.DistIRefno)
	AND NOT EXISTS(SELECT * FROM #ExistsIncentiveMaster N WHERE N.DistIRefno=A.DistIRefno AND N.DistIRefno=B.DistIRefno)
	
	UPDATE C SET DownloadFlag='Y' FROM  Cn2CS_Prk_DistributorIncentiveMaster C 
	INNER JOIN DistributorIncentiveMaster M ON M.DistIRefno=C.DistIRefno 
	WHERE NOT EXISTS(SELECT * FROM #AvoidProgram M WHERE M.DistIRefno=C.DistIRefno)	
	
	UPDATE C SET DownloadFlag='Y' FROM  Cn2CS_Prk_DistributorIncentiveSlabs C 
	INNER JOIN DistributorIncentiveMaster M ON M.DistIRefno=C.DistIRefno 
	WHERE NOT EXISTS(SELECT * FROM #AvoidProgram M WHERE M.DistIRefno=C.DistIRefno)	
	
RETURN  
	 
END
GO
DELETE FROM CustomUpdownload WHERE Module in ('DistributorIncentiveAchievement') and UpDownload='Upload'
INSERT INTO CustomUpdownload(SlNo,SeqNo,Module,Screen,ExportFnName,ImportProcName,
ParkTable,ValidateProcName,TranType,UpDownload,MandatoryFile)
SELECT 168,1,'DistributorIncentiveAchievement','DistributorIncentiveAchievement','Proc_Cs2Cn_DistributorIncentiveAchievement','',
'Cs2cn_Prk_DistributorIncentiveAchievement','Proc_Cn2Cs_Dummy','Master','Upload',1  UNION
SELECT 169,1,'DebitNoteTopSheet6','DebitNoteTopSheet6','Proc_Cs2Cn_DebitNoteTopSheet6','',
'Cs2cn_Prk_DebitNoteTopSheet6','Proc_Cn2Cs_Dummy','Master','Upload',1  
GO
DELETE FROM Tbl_UploadIntegration WHERE  ProcessName in ('DistributorIncentiveAchievement','DebitNoteTopSheet6')
INSERT INTO Tbl_UploadIntegration(SequenceNo,ProcessName,FolderName,PrkTableName,CreatedDate)
SELECT 67,'DistributorIncentiveAchievement','','Cs2cn_Prk_DistributorIncentiveAchievement',CONVERT(VARCHAR(10),GETDATE(),121) UNION
SELECT 68,'DebitNoteTopSheet6','','Cs2cn_Prk_DebitNoteTopSheet6',CONVERT(VARCHAR(10),GETDATE(),121) 
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Cs2cn_Prk_DebitNoteTopSheet6]') AND type in (N'U'))
DROP TABLE [Cs2cn_Prk_DebitNoteTopSheet6]
GO
CREATE TABLE [Cs2cn_Prk_DebitNoteTopSheet6](
	[SlNo] [numeric](38, 0) IDENTITY(1,1) NOT NULL,
	[DistCode] [nvarchar](50) NULL,
	[DistIRefno]   [nvarchar](100) NULL,
	[GeneratedOn]	[Datetime] null,
	[TotalSalesman] INT,
	[TotalAchSales] NUMERIC(18,6),
	[IncAmount] NUMERIC(18,6),
	[UploadFlag] [nvarchar](10) NULL,
	[SyncId] [numeric](38, 0) NULL,
	[ServerDate] [datetime] NULL
) ON [PRIMARY]
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE name='Cs2cn_Prk_DistributorIncentiveAchievement' AND XTYPE='U')
DROP TABLE [Cs2cn_Prk_DistributorIncentiveAchievement]
GO
CREATE TABLE [Cs2cn_Prk_DistributorIncentiveAchievement](
	[SlNo] [numeric](38, 0) IDENTITY(1,1) NOT NULL,
	[DistCode]		[nvarchar](50) NULL,
	[DistIRefno]	[nvarchar](100) NULL,
	[DistIRefDesc]  [nvarchar](100) NULL,
	[FromDate]		[DateTime] NULL,
	[ToDate]		[DateTime] NULL,
	[SalesManCode]  [nvarchar](100) NULL,
	[SalesManName]  [nvarchar](100) NULL,	
	[TotalAchSales] [NUMERIC](18,6)NULL,
	[AchSlab]		[VARCHAR](100)NULL,
	[FromSlab]		[NUMERIC](18,6)NULL,
	[ToSlab]		[NUMERIC](18,6)NULL,
	[IncPerc]		[NUMERIC](18,6)NULL,
	[IncAmount]		[NUMERIC](18,6)NULL,
	[UploadFlag]	[nvarchar](10) NULL,
	[SyncId]		[numeric](38, 0) NULL,
	[ServerDate]	[datetime] NULL
) ON [PRIMARY]
GO
IF EXISTS (SELECT * FROM Sysobjects WHERE XTYPE = 'P' AND name = 'Proc_Cs2Cn_DebitNoteTopSheet6')
DROP PROCEDURE Proc_Cs2Cn_DebitNoteTopSheet6
GO
/*
BEGIN TRAN
EXEC Proc_Cs2Cn_DebitNoteTopSheet6 0,'2019-05-29'
SELECT * FROM Cs2cn_Prk_DebitNoteTopSheet6
SELECT * FROM DistributorIncentiveAchDetail
ROLLBACK TRAN
*/
CREATE PROCEDURE Proc_Cs2Cn_DebitNoteTopSheet6
(
	@Po_ErrNo INT OUTPUT,
	@ServerDate DATETIME 
)
AS
/*******************************************************************************************************************
* PROCEDURE: Proc_Cs2Cn_DistributorIncentiveAchievement  
* PURPOSE: Upload Distributor Incentive  
* NOTES:  
* CREATED: S.Moorthi
* DATE  : 29-05-2019
* MODIFIED  
**************************************************************************************************************************************************************************************
* VERSION    |  DATE      |	  PERSON			  | USER STORY ID  |  CR/BZ |  REMARKS                      | CODE REVIEW BY     | REVIEW DATE
**************************************************************************************************************************************************************************************
  441		   29-05-2019	S.Moorthi				CRCRSTPAR0056	 CR			STO(Service to Outlet) or Distributor service invoice logic to be incorporated and debit note should upload to console
**********************************************************************************************************************/
SET NOCOUNT ON 
BEGIN
	DECLARE @Distcode AS Varchar(50)
  	SET @Po_ErrNo=0
  	SELECT @Distcode=DistributorCode FROM Distributor
	DELETE FROM Cs2cn_Prk_DebitNoteTopSheet6 WHERE UploadFlag='Y'
	
	INSERT INTO Cs2cn_Prk_DebitNoteTopSheet6 (DistCode,DistIRefno,GeneratedOn,TotalSalesman,
	TotalAchSales,IncAmount,UploadFlag,ServerDate)
	SELECT @Distcode,A.DistIRefno,C.GeneratedOn,COUNT(SMID),SUM(C.AchSales) as TotalAchSales,SUM(C.IncAmount),'N',@ServerDate
	FROM DistributorIncentiveMaster A (NOLOCK)  
	INNER JOIN DistributorIncentiveAchDetail C(NOLOCK) ON C.DistIRefno=A.DistIRefno 
	WHERE C.DebitNoteUpload=0   AND IncentiveGenerated=1
	GROUP BY A.DistIRefno,C.GeneratedOn,IncAmount
	
	Update S SET DebitNoteUpload=1  FROM DistributorIncentiveAchDetail S 
	INNER JOIN DistributorIncentiveMaster DI ON DI.DistIRefno=S.DistIRefno 
	INNER JOIN Cs2cn_Prk_DebitNoteTopSheet6 CS ON S.DistIRefno=CS.DistIRefno AND CS.DistIRefno=DI.DistIRefno 
	AND S.DebitNoteUpload=0  AND IncentiveGenerated=1
  	
END
GO
IF EXISTS (SELECT * FROM Sysobjects WHERE XTYPE = 'P' AND name = 'Proc_Cs2Cn_DistributorIncentiveAchievement')
DROP PROCEDURE Proc_Cs2Cn_DistributorIncentiveAchievement
GO
/*
BEGIN TRAN
EXEC Proc_Cs2Cn_DistributorIncentiveAchievement 0,'2019-05-29'
SELECT * FROM Cs2cn_Prk_DistributorIncentiveAchievement
SELECT * FROM DistributorIncentiveMaster
ROLLBACK TRAN
*/
CREATE PROCEDURE Proc_Cs2Cn_DistributorIncentiveAchievement
(
	@Po_ErrNo INT OUTPUT,
	@ServerDate DATETIME 
)
AS
/*******************************************************************************************************************
* PROCEDURE: Proc_Cs2Cn_DistributorIncentiveAchievement  
* PURPOSE: Upload Distributor Incentive  
* NOTES:  
* CREATED: S.Moorthi
* DATE  : 29-05-2019
* MODIFIED  
**************************************************************************************************************************************************************************************
* VERSION    |  DATE      |	  PERSON			  | USER STORY ID  |  CR/BZ |  REMARKS                      | CODE REVIEW BY     | REVIEW DATE
**************************************************************************************************************************************************************************************
  441		   29-05-2019	S.Moorthi				CRCRSTPAR0056	 CR			STO(Service to Outlet) or Distributor service invoice logic to be incorporated and debit note should upload to console
**********************************************************************************************************************/
SET NOCOUNT ON 
BEGIN
	DECLARE @Distcode AS Varchar(50)
  	SET @Po_ErrNo=0
  	SELECT @Distcode=DistributorCode FROM Distributor
	DELETE FROM Cs2cn_Prk_DistributorIncentiveAchievement WHERE UploadFlag='Y'
	
	INSERT INTO Cs2cn_Prk_DistributorIncentiveAchievement (DistCode,DistIRefno,DistIRefDesc,FromDate,ToDate,
	SalesManCode,SalesManName,TotalAchSales,AchSlab,FromSlab,ToSlab,IncPerc,IncAmount,UploadFlag,ServerDate)
	SELECT @Distcode,A.DistIRefno,A.DistIRefDesc,A.IncFromDate,A.IncToDate,SMCode,SMName,
	C.AchSales,'SLAB'+'-'+CAST(C.AchSlab AS VARCHAR(10)),D.FromRange,D.ToRange,C.IncPerc,C.IncAmount,'N',@ServerDate
	 FROM DistributorIncentiveMaster A (NOLOCK)  
	INNER JOIN DistributorIncentiveAchDetail C(NOLOCK) ON C.DistIRefno=A.DistIRefno 
	INNER JOIN DistributorIncentiveSlabs D(NOLOCK) ON D.DistIRefno=C.DistIRefno AND D.DistIRefno=A.DistIRefno and D.Slab=C.AchSlab 
	INNER JOIN Salesman S(NOLOCK) ON S.SMId=C.SMId
	WHERE A.Upload=0 AND IncentiveGenerated=1
	
	Update DI SET Upload=1  FROM DistributorIncentiveAchDetail S 
	INNER JOIN DistributorIncentiveMaster DI ON DI.DistIRefno=S.DistIRefno 
	INNER JOIN Cs2cn_Prk_DistributorIncentiveAchievement CS ON S.DistIRefno=CS.DistIRefno AND CS.DistIRefno=DI.DistIRefno 
	AND S.Upload=0 AND IncentiveGenerated=1
  	
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE name='TempDistributorUserTrack' and xtype='U')
DROP TABLE TempDistributorUserTrack
GO
CREATE TABLE TempDistributorUserTrack
(
    UsrId		INT,
    TransId		INT
)
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE name='TempDistributorIncentiveCalculation' AND xtype='U')
DROP TABLE TempDistributorIncentiveCalculation
GO
CREATE TABLE TempDistributorIncentiveCalculation
(
	DistIRefNo				VARCHAR(100),
	SMID					INT,
	RMID					INT,
	NoOfActiveRetailer		INT,
	NoOfEffectiveRetailer	INT,
	PercEffectivity			NUMERIC(18,2),
	NoOfBillsGenerated		INT,
	PercOpportunityUtil		NUMERIC(18,2),
	TotalSales				NUMERIC(18,3),
	DepthPerRoute			NUMERIC(18,0),
	DepthPerBill			NUMERIC(18,0),
	[WeeklyCalc]			INT,
	UserId					INT
)
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_TempDistributorIncentiveCalculation' AND TYPE ='P')
DROP PROCEDURE Proc_TempDistributorIncentiveCalculation
GO
/*
BEGIN TRAN
EXEC Proc_TempDistributorIncentiveCalculation 1000,'2019-07-01','2019-07-10'
SELECT * FROM TempDistributorIncentiveCalculation
ROLLBACK TRAN
*/
CREATE PROCEDURE Proc_TempDistributorIncentiveCalculation
(
@Pi_UserId AS INT,
@Pi_TransDate AS DATETIME,
@Pi_ToDate AS DATETIME
)
AS
/**************************************************************************************************************************************************************************************
* PROCEDURE		: Proc_TempDistributorIncentiveCalculation
* PURPOSE		: Distributor Incentive Master data prepared
* CREATED		: S.Moorthi
* CREATED DATE	: 27/05/2019
* MODIFIED
**************************************************************************************************************************************************************************************
* VERSION    |  DATE      |	  PERSON			  | USER STORY ID  |  CR/BZ |  REMARKS                      | CODE REVIEW BY     | REVIEW DATE
**************************************************************************************************************************************************************************************
  441		   27-05-2019	 S.Moorthi				CRCRSTPAR0056	 CR			STO(Service to Outlet) or Distributor service invoice logic to be incorporated and debit note should upload to console
  441          08-07-2019    M.Lakshman             ILCRSTPAR5086    BZ         while generate dynamic report Divided by zero error validation added in core stocky 
**************************************************************************************************************************************************************************************/
SET NOCOUNT ON
BEGIN	
		
		CREATE TABLE #DistributorIncentiveMaster
		(
			DistIRefno		VARCHAR(100),
			IncFromDate		DATETIME,
			IncToDate		DATETIME
		)
		
		DELETE FROM TempDistributorIncentiveCalculation WHERE UserId=@Pi_UserId
		
		if @Pi_UserId=1000
		BEGIN
			INSERT INTO #DistributorIncentiveMaster(DistIRefno,IncFromDate,IncToDate)
			SELECT DISTINCT DistIRefno,IncFromDate,IncToDate FROM DistributorIncentiveMaster A   
			WHERE (@Pi_TransDate BETWEEN IncFromDate AND IncToDate OR @Pi_ToDate BETWEEN IncFromDate AND IncToDate 
			OR IncFromDate BETWEEN @Pi_TransDate AND @Pi_ToDate OR IncToDate BETWEEN @Pi_TransDate AND @Pi_ToDate) 
			
		END
		ELSE
		BEGIN
			 
			SELECT DISTINCT DistIRefno,IncFromDate,IncToDate INTO #TempDistInc FROM DistributorIncentiveMaster(nolock) 
			WHERE  IncentiveGenerated=0 and DistIRefStatus=1 AND @Pi_TransDate>IncToDate   --@Pi_TransDate>=IncToDate   
			
			INSERT INTO #DistributorIncentiveMaster(DistIRefno,IncFromDate,IncToDate)
			SELECT B.DistIRefno,B.IncFromDate,B.IncToDate FROM JCMonth A, 
			#TempDistInc B,JCMonthEnd M WHERE B.IncToDate BETWEEN A.JcmSdt AND A.JcmEdt 
			AND M.JcmEdt=A.JcmEdt AND M.JcmSdt=A.JcmSdt
			
			DELETE B FROM SalesInvoice A (NOLOCK),#DistributorIncentiveMaster B
			WHERE A.SalInvDate BETWEEN B.IncFromDate AND B.IncToDate AND A.DlvSts<2	

		END
		
		--SET @DATEVALE=1
		--IF EXISTS (SELECT * FROM CONFIGURATION WHERE MODULENAME='Day End Process' AND ModuleId='DAYENDPROCESS4' AND Status=1)
		--BEGIN
		--	SELECT @DATEVALE=ISNULL(Condition,0) FROM CONFIGURATION WHERE MODULENAME='Day End Process' AND ModuleId='DAYENDPROCESS4' AND Status=1
		--	IF ISNULL(@DATEVALE,0)=0
		--	BEGIN
		--		SET @DATEVALE=3
		--	END
		--END

		IF @Pi_UserId=1000
		BEGIN

			INSERT INTO TempDistributorIncentiveCalculation(DistIRefNo,SMID,RMID,NoOfActiveRetailer,NoOfEffectiveRetailer,
			PercEffectivity,NoOfBillsGenerated,PercOpportunityUtil,TotalSales,DepthPerRoute,DepthPerBill,WeeklyCalc,UserId)
			SELECT A.DistIRefNo,SMID,RMID,NoOfActiveRetailer,NoOfEffectiveRetailer,
			PercEffectivity,NoOfBillsGenerated,PercOpportunityUtil,TotalSales,DepthPerRoute,DepthPerBill,WeeklyCalc,@Pi_UserId 
			FROM #DistributorIncentiveMaster A INNER JOIN DistributorIncentiveAchDetailRouteLevel B ON A.DistIRefno=B.DistIRefno
			
		END
		DELETE A FROM #DistributorIncentiveMaster A 
		INNER JOIN DistributorIncentiveAchDetailRouteLevel B ON A.DistIRefno=B.DistIRefno
		
		IF NOT EXISTS(SELECT * FROM #DistributorIncentiveMaster)
		BEGIN
			RETURN
		END
		
		CREATE TABLE #TempDistributorIncentive
		(
			DistIRefNo				VARCHAR(100),
			SMID					INT,
			RMID					INT,
			NoOfActiveRetailer		INT,
			NoOfEffectiveRetailer	INT,
			PercEffectivity			NUMERIC(18,2),
			NoOfBillsGenerated		INT,
			PercOpportunityUtil		NUMERIC(18,2),
			TotalSales				NUMERIC(18,3),
			DepthPerRoute			NUMERIC(18,0),
			DepthPerBill			NUMERIC(18,0),
			[WeeklyCalc]			INT
		)
		INSERT INTO #TempDistributorIncentive(DistIRefNo,SMID,RMID,NoOfActiveRetailer,NoOfEffectiveRetailer,
		PercEffectivity,NoOfBillsGenerated,PercOpportunityUtil,TotalSales,DepthPerRoute,DepthPerBill,WeeklyCalc)
		SELECT DISTINCT DistIRefNo,SMId,RMId,0 NoOfActiveRetailer,0 NoOfEffectiveRetailer,
		0 PercEffectivity,0 NoOfBillsGenerated,0 PercOpportunityUtil,0 TotalSales,0 DepthPerRoute,0 DepthPerBill,0 WeeklyCalc 
		FROM SalesmanMarket A CROSS JOIN #DistributorIncentiveMaster 
		
		---Sales Update
		
		--SELECT DistIRefno,SMId,RMID,SUM(Sales) Sales into #DistTotalSales
		--FROM (
		--	SELECT DIM.DistIRefno,SS.SMId,SS.RMID,SUM(SIP.PrdNetAmount)  Sales FROM SalesInvoice SS (NOLOCK) 
		--	INNER JOIN Salesinvoiceproduct  SIP (NOLOCK) ON SS.SalId=SIP.SalId
		--	INNER JOIN #DistributorIncentiveMaster DIM ON SS.SalInvDate BETWEEN DIM.IncFromDate AND DIM.IncToDate
		--	WHERE SS.Dlvsts>3  
		--	GROUP  BY DIM.DistIRefno,SS.SMId,SS.RMID
		--	UNION ALL
		--	SELECT DIM.DistIRefno,SS.SMId,SS.RMID,-SUM(SIP.PrdNetAmt)  Sales FROM Returnheader SS (NOLOCK) 
		--	INNER JOIN Returnproduct  SIP (NOLOCK) ON SS.returnid=Sip.returnid 
		--	INNER JOIN #DistributorIncentiveMaster DIM ON SS.ReturnDate BETWEEN DIM.IncFromDate AND DIM.IncToDate
		--	WHERE SS.Status=0  
		--	GROUP  BY DIM.DistIRefno,SS.SMId,SS.RMID
		--) A
		--GROUP BY DistIRefno,SMId,RMID
		
		
		----Sales Calculate with LCTR 
		DECLARE @FromDate AS DATETIME
		DECLARE @ToDate AS DATETIME
		SET @FromDate=(SELECT MIN(IncFromDate) FROM #DistributorIncentiveMaster)
		SET @ToDate=(SELECT MAX(IncToDate) FROM #DistributorIncentiveMaster)
		
		EXEC Proc_ReturnSalesProductTaxPercentage @FromDate,@ToDate      
		SELECT * INTO #ParleOutputTaxPercentage FROM ParleOutputTaxPercentage (NOLOCK)   
		--SELECT StockTypeId FROM STOCKTYPE WHERE SystemStockType = 1
		--ROUND(((R.BaseQty *(R.PrdUnitSelRate))+(R.BaseQty*R.PrdUnitSelRate)*(T.TaxPerc/100)),2) 
		SELECT DistIRefno,SMId,RMID,SUM(Sales) Sales into #DistTotalSales
		FROM (
			SELECT DIM.DistIRefno,SS.SMId,SS.RMID,
			ROUND(SUM(((SIP.BaseQty*PBD.PrdBatDetailValue)+((SIP.BaseQty*PBD.PrdBatDetailValue)*(PO.TaxPerc/100)))),2) Sales 
			FROM SalesInvoice SS (NOLOCK) INNER JOIN Salesinvoiceproduct  SIP (NOLOCK) ON SS.SalId=SIP.SalId 
			INNER JOIN ProductBatch PB (NOLOCK) ON PB.PrdId=SIP.PrdId and PB.PrdBatId=SIP.PrdBatId 
			INNER JOIN ProductBatchDetails PBD (NOLOCK) ON PBD.PrdBatId=PB.PrdBatId AND PBD.PrdBatId=SIP.PrdBatId AND DefaultPrice=1 AND PBD.SLNo=3
			INNER JOIN #ParleOutputTaxPercentage PO (NOLOCK) ON PO.SalId=SS.SalId AND PO.SalId=SIP.SalId AND PO.PrdSlno=SIP.SlNo and PO.TransId=1
			INNER JOIN #DistributorIncentiveMaster DIM ON SS.SalInvDate BETWEEN DIM.IncFromDate AND DIM.IncToDate
			WHERE SS.Dlvsts>3  
			GROUP  BY DIM.DistIRefno,SS.SMId,SS.RMID
			UNION ALL
			SELECT DIM.DistIRefno,SS.SMId,SS.RMID,
			-1*ROUND(SUM(((SIP.BaseQty*PBD.PrdBatDetailValue)+((SIP.BaseQty*PBD.PrdBatDetailValue)*(PO.TaxPerc/100)))),2)  Sales 
			FROM Returnheader SS (NOLOCK) INNER JOIN Returnproduct  SIP (NOLOCK) ON SS.returnid=Sip.returnid 
			INNER JOIN STOCKTYPE ST (NOLOCK) ON ST.StockTypeId=SIP.StockTypeId AND ST.SystemStockType=1
			INNER JOIN ProductBatch PB (NOLOCK) ON PB.PrdId=SIP.PrdId and PB.PrdBatId=SIP.PrdBatId 
			INNER JOIN ProductBatchDetails PBD (NOLOCK) ON PBD.PrdBatId=PB.PrdBatId AND PBD.PrdBatId=SIP.PrdBatId AND DefaultPrice=1  AND PBD.SLNo=3
			INNER JOIN #ParleOutputTaxPercentage PO (NOLOCK) ON PO.SalId=SS.ReturnID AND PO.SalId=SIP.ReturnID AND PO.PrdSlno=SIP.SlNo and PO.TransId=2
			INNER JOIN #DistributorIncentiveMaster DIM ON SS.ReturnDate BETWEEN DIM.IncFromDate AND DIM.IncToDate
			WHERE SS.Status=0  
			GROUP  BY DIM.DistIRefno,SS.SMId,SS.RMID
		) A
		GROUP BY DistIRefno,SMId,RMID
		-----Sales Calculation
		
		UPDATE A SET A.TotalSales=B.Sales FROM #TempDistributorIncentive A 
		INNER JOIN #DistTotalSales B ON A.DistIRefNo=B.DistIRefno AND A.SMID=B.SMId AND A.RMID=B.RMId
		
		---IF SALESMAN/ROUTE NOW CHANGED BUT BILLED WITH DIFFERENT MAPPING
		INSERT INTO #TempDistributorIncentive(DistIRefNo,SMID,RMID,NoOfActiveRetailer,NoOfEffectiveRetailer,
		PercEffectivity,NoOfBillsGenerated,PercOpportunityUtil,TotalSales,DepthPerRoute,DepthPerBill,WeeklyCalc)
		SELECT DISTINCT DistIRefNo,SMId,RMId,0 NoOfActiveRetailer,0 NoOfEffectiveRetailer,
		0 PercEffectivity,0 NoOfBillsGenerated,0 PercOpportunityUtil,A.Sales,0 DepthPerRoute,0 DepthPerBill,0 WeeklyCalc  FROM #DistTotalSales A WHERE 
		NOT EXISTS(SELECT * FROM #TempDistributorIncentive B WHERE A.SMId=B.SMID AND A.RMId=B.RMID AND A.DistIRefno=B.DistIRefNo) 
		
		
		---SalesMan Wise Effective Outlet
		SELECT DIM.DistIRefno,SS.SMId,SS.RMID,COUNT(DISTINCT RtrId)  EffectiveRtrCount INTO #EffectiveOutlet FROM SalesInvoice SS (NOLOCK) 
		INNER JOIN #DistributorIncentiveMaster DIM ON SS.SalInvDate BETWEEN DIM.IncFromDate AND DIM.IncToDate
		WHERE SS.Dlvsts>3  GROUP BY DIM.DistIRefno,SS.SMId,SS.RMID
		
		UPDATE A SET A.NoOfEffectiveRetailer=B.EffectiveRtrCount FROM #TempDistributorIncentive A 
		INNER JOIN #EffectiveOutlet B ON A.DistIRefNo=B.DistIRefno AND A.SMID=B.SMId AND A.RMID=B.RMId
		
		
		----No of Active Retailers
		SELECT SMId,SM.RMId,COUNT(DISTINCT RM.RtrId) ActiveRtrCount INTO #ActiveRetailers FROM SalesmanMarket SM (NOLOCK)
		INNER JOIN RetailerMarket RM(NOLOCK) ON SM.RMId=RM.RMId 
		INNER JOIN Retailer R(NOLOCK) ON R.RtrId=RM.RtrId 
		WHERE R.RtrStatus=1 GROUP BY SMId,SM.RMId
		
		UPDATE A SET A.NoOfActiveRetailer=B.ActiveRtrCount FROM #TempDistributorIncentive A 
		INNER JOIN #ActiveRetailers B ON A.SMID=B.SMId AND A.RMID=B.RMId
		

		---PercEffectivity Update
		UPDATE A SET A.PercEffectivity=isnull(CAST(NoOfEffectiveRetailer AS NUMERIC(18,3))/CAST(nullif(NoOfActiveRetailer,0) AS NUMERIC(18,3)),0)*100 --------- added by lakshman M (Divided by zero error validation added.)
		FROM #TempDistributorIncentive A WHERE NoOfEffectiveRetailer<>0
		
		
		-----No Of Bill count
		SELECT DIM.DistIRefno,SS.SMId,SS.RMID,COUNT(SS.SalId)  BillBount INTO #TempBillCount FROM SalesInvoice SS (NOLOCK) 
		INNER JOIN #DistributorIncentiveMaster DIM ON SS.SalInvDate BETWEEN DIM.IncFromDate AND DIM.IncToDate
		WHERE SS.Dlvsts>3  GROUP  BY DIM.DistIRefno,SS.SMId,SS.RMID
		
		
		UPDATE A SET A.NoOfBillsGenerated=B.BillBount FROM #TempDistributorIncentive A 
		INNER JOIN #TempBillCount B ON A.DistIRefNo=B.DistIRefno and A.SMID=B.SMId AND A.RMID=B.RMId
		
		/*
			--Weekly  - 0		--> 4
			--Bi-Weekly - 1		--> 8
			--Fort Nightly -2   --> 2
			--Monthly	3
			--Daily 4
		
		*/
		----------weekly/Bi Weekly Count
		SELECT SMM.SMId,A.RMId,R.RtrId,(CASE WHEN RtrFrequency=0 THEN 4 
					WHEN RtrFrequency=1 THEN 8
					WHEN RtrFrequency=2 THEN 2
					WHEN RtrFrequency=3 THEN 1
					WHEN RtrFrequency=4 THEN 30 ELSE 4 END) as RtrFrequency INTO #TempRtrFrequency1
		FROM RetailerMarket A 
		INNER JOIN Retailer R ON A.RtrId=R.RtrId 
		INNER JOIN SalesmanMarket SMM ON SMM.RMId=A.RMId  
		WHERE RtrStatus=1
		
		SELECT SMId,RMId,RtrFrequency,COUNT(RtrId) as RtrCount INTO #TempRtrFreq2  FROM #TempRtrFrequency1 GROUP BY SMId,RMId,RtrFrequency
		
		SELECT SMId,RMId,SUM(RtrFrequency*RtrCount) AS [WeeklyCalc] INTO #WeeklyCalc FROM #TempRtrFreq2 GROUP BY SMId,RMId
		UPDATE B SET B.WeeklyCalc=A.WeeklyCalc FROM #WeeklyCalc A
		INNER JOIN #TempDistributorIncentive B ON A.SMID=B.SMID AND A.RMID=B.RMID 
		
		---Opportunity Utilization
		UPDATE A SET A.PercOpportunityUtil=ISNULL(CAST(NoOfBillsGenerated AS NUMERIC(18,3))/CAST(NULLIF(WeeklyCalc,0) AS NUMERIC(18,3)),0)*100
		FROM #TempDistributorIncentive A WHERE WeeklyCalc<>0
		
		---Depth Per Route
		UPDATE A SET A.DepthPerRoute=ISNULL(CAST(TotalSales AS NUMERIC(18,3))/CAST(NULLIF(NoOfEffectiveRetailer,0) AS NUMERIC(18,3)),0)
		FROM #TempDistributorIncentive A WHERE NoOfEffectiveRetailer<>0
		
		---Depth Per Bill
		UPDATE A SET A.DepthPerBill=ISNULL(CAST(TotalSales AS NUMERIC(18,3))/CAST(NULLIF(NoOfBillsGenerated,0) AS NUMERIC(18,3)),0)
		FROM #TempDistributorIncentive A WHERE NoOfBillsGenerated<>0
		
		
		INSERT INTO TempDistributorIncentiveCalculation(DistIRefNo,SMID,RMID,NoOfActiveRetailer,NoOfEffectiveRetailer,
		PercEffectivity,NoOfBillsGenerated,PercOpportunityUtil,TotalSales,DepthPerRoute,DepthPerBill,WeeklyCalc,UserId)
		SELECT DistIRefNo,SMID,RMID,NoOfActiveRetailer,NoOfEffectiveRetailer,PercEffectivity,NoOfBillsGenerated,
		PercOpportunityUtil,TotalSales,DepthPerRoute,DepthPerBill,WeeklyCalc,@Pi_UserId FROM #TempDistributorIncentive
	
RETURN
END 
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS A WHERE name='SalesmanRouteRetailerSnapShot' and xtype='U')
BEGIN
CREATE TABLE SalesmanRouteRetailerSnapShot(
SlNo		NUMERIC(18,0) IDENTITY(1,1) NOT NULL,
JcmId		INT,
JcmJc		INT,
SMID		INT,
RMID		INT,
RtrId		INT,
CreatedDate	DATETIME
)
END
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Proc_DistributorIncentiveCalculation]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Proc_DistributorIncentiveCalculation]
GO
/*
BEGIN TRAN
--SELECT * FROM DistributorIncentiveMaster
--update DistributorIncentiveMaster set incentivegenerated=0
EXEC Proc_DistributorIncentiveCalculation 2,'2019-07-19',0,''
SELECT * FROM DistributorIncentiveAchDetail
SELECT * FROM DistributorIncentiveAchDetailRouteLevel
SELECT * FROM DistributorIncentiveMaster
ROLLBACK TRAN
*/
CREATE PROCEDURE [dbo].[Proc_DistributorIncentiveCalculation]
(
@Pi_UserId AS INT,
@Pi_TransDate AS DATETIME,
@Po_ErrNo AS TinyINT OUTPUT,
@Po_ErrorMessage AS Varchar(4000) OUTPUT
)
AS
/**************************************************************************************************************************************************************************************
* PROCEDURE		: Proc_Cn2Cs_DistributorIncentiveMaster
* PURPOSE		: Calculate Distributor incentive master and detail
* CREATED		: S.Moorthi
* CREATED DATE	: 27/05/2019
* MODIFIED
**************************************************************************************************************************************************************************************
* VERSION    |  DATE      |	  PERSON			  | USER STORY ID  |  CR/BZ |  REMARKS                      | CODE REVIEW BY     | REVIEW DATE
**************************************************************************************************************************************************************************************
  441		   27-05-2019	S.Moorthi				CRCRSTPAR0056	 CR			STO(Service to Outlet) or Distributor service invoice logic to be incorporated and debit note should upload to console
**************************************************************************************************************************************************************************************/
SET NOCOUNT ON
BEGIN	
			 
	DECLARE @DbNoteNumber AS NVARCHAR(100)
	DECLARE @CoaId AS INT
	DECLARE @ReasonId AS INT
	DECLARE @ErrStatus AS INT
	DECLARE @SpmId AS INT
	
	SET @Po_ErrNo=0
	SET @Po_ErrorMessage=''
	
		
		DECLARE @JcmSdt AS DATETIME
		SET @JcmSdt=(SELECT JcmSdt FROM JCMonth WHERE CONVERT(VARCHAR(10),@Pi_TransDate,121) BETWEEN JcmSdt AND JcmEdt)
				
		IF NOT EXISTS(SELECT * FROM SalesmanRouteRetailerSnapShot A WHERE EXISTS(
		SELECT JcmEdt,JcmJc,JcmId FROM JCMonth B WHERE JcmEdt=DATEADD(D,-1,@JcmSdt) AND A.JcmJc=B.JcmJc AND A.JcmId=B.JcmId))
		BEGIN
			DECLARE @JcmId AS INT
			DECLARE @JcmJc AS INT
			SELECT @JcmJc=JcmJc,@JcmId=JcmId FROM JCMonth B WHERE JcmEdt=DATEADD(D,-1,@JcmSdt)
			
			INSERT INTO SalesmanRouteRetailerSnapShot(JcmId,JcmJc,SMID,RMID,RtrId,CreatedDate)
			SELECT @JcmId,@JcmJc,A.SMId,C.RMId,R.RtrId,GETDATE() FROM SalesMan A
			INNER JOIN SalesmanMarket B ON A.SMId=B.SMId 
			INNER JOIN RetailerMarket C ON C.RMId=B.RMId 
			INNER JOIN Retailer R ON R.RtrId=C.RtrId 
			
		END

	--drop table #TempDistInc
		SELECT DISTINCT DistIRefno,IncFromDate,IncToDate INTO #TempDistInc FROM DistributorIncentiveMaster(nolock) 
		WHERE  IncentiveGenerated=0 and DistIRefStatus=1 AND @Pi_TransDate>=IncToDate   

		SELECT B.DistIRefno,B.IncFromDate,B.IncToDate INTO #DistributorIncentiveMaster FROM JCMonth A, 
		#TempDistInc B,JCMonthEnd M WHERE B.IncToDate BETWEEN A.JcmSdt AND A.JcmEdt 
		AND M.JcmEdt=A.JcmEdt AND M.JcmSdt=A.JcmSdt

		IF NOT EXISTS(SELECT * FROM  #DistributorIncentiveMaster)
		BEGIN
			SET @Po_ErrNo=0
			RETURN
		END
		
			DELETE FROM TempDistributorIncentiveCalculation WHERE UserId=@Pi_UserId
			EXEC Proc_TempDistributorIncentiveCalculation @Pi_UserId,@Pi_TransDate,@Pi_TransDate
		
			IF NOT EXISTS(SELECT * FROM TempDistributorIncentiveCalculation (NOLOCK) WHERE UserId=@Pi_UserId)
			BEGIN
				SET @Po_ErrNo=0
				RETURN
			END
			
			--If Already Generated		
			DELETE B from DistributorIncentiveAchDetail A INNER JOIN TempDistributorIncentiveCalculation B ON A.DistIRefno=B.DistIRefno
			
			IF EXISTS(SELECT * FROM TempDistributorUserTrack WHERE UsrId<>@Pi_UserId)
			BEGIN
				RETURN
			END
			
			BEGIN TRY
			BEGIN TRAN

				DELETE FROM TempDistributorUserTrack WHERE UsrId=@Pi_UserId
				INSERT INTO TempDistributorUserTrack(UsrId,TransId)
				SELECT @Pi_UserId,5000
			
				CREATE TABLE #TempSMWiseIncentive
				(
					DistIRefNo				VARCHAR(100),
					SMID					INT,
					NoOfActiveRetailer		INT,
					NoOfEffectiveRetailer	INT,
					PercEffectivity			NUMERIC(18,2),
					NoOfBillsGenerated		INT,
					PercOpportunityUtil		NUMERIC(18,2),
					TotalSales				NUMERIC(18,3),
					DepthPerRoute			NUMERIC(18,0),
					DepthPerBill			NUMERIC(18,0),
					[WeeklyCalc]			INT,
					incentivePerc			NUMERIC(18,3),
					Slab					INT,
					IncentiveAmt			numeric(18,3)
				)
			
				INSERT INTO #TempSMWiseIncentive(DistIRefNo,SMID,NoOfActiveRetailer,NoOfEffectiveRetailer,
				PercEffectivity,NoOfBillsGenerated,PercOpportunityUtil,TotalSales,DepthPerRoute,DepthPerBill,WeeklyCalc,incentivePerc,Slab,IncentiveAmt)
				SELECT DISTINCT DistIRefNo,SMID,SUM(NoOfActiveRetailer),SUM(NoOfEffectiveRetailer),0	PercEffectivity,
				SUM(NoOfBillsGenerated),0 PercOpportunityUtil,SUM(TotalSales),0 DepthPerRoute,0 DepthPerBill,SUM(WeeklyCalc),0 incentivePerc,0 Slab,0 IncentiveAmt 
				FROM TempDistributorIncentiveCalculation WHERE UserId=@Pi_UserId 
				GROUP BY DistIRefNo,SMID
			
				---PercEffectivity Update
				UPDATE A SET A.PercEffectivity=CAST(NoOfEffectiveRetailer AS NUMERIC(18,3))/CAST(NoOfActiveRetailer AS NUMERIC(18,3))*100
				FROM #TempSMWiseIncentive A WHERE NoOfEffectiveRetailer<>0
			
				---Opportunity Utilization
				UPDATE A SET A.PercOpportunityUtil=CAST(NoOfBillsGenerated AS NUMERIC(18,3))/CAST(WeeklyCalc AS NUMERIC(18,3))*100
				FROM #TempSMWiseIncentive A WHERE WeeklyCalc<>0
			
				---Depth Per Route
				UPDATE A SET A.DepthPerRoute=CAST(TotalSales AS NUMERIC(18,3))/CAST(NoOfEffectiveRetailer AS NUMERIC(18,3))
				FROM #TempSMWiseIncentive A WHERE NoOfEffectiveRetailer<>0
			
				---Depth Per Bill
				UPDATE A SET A.DepthPerBill=CAST(TotalSales AS NUMERIC(18,3))/CAST(NoOfBillsGenerated AS NUMERIC(18,3))
				FROM #TempSMWiseIncentive A WHERE NoOfBillsGenerated<>0
			
			
				SELECT S.DistIRefno,S.Slab,FromRange,ToRange,DistIncentivePerc,B.SMID,PercOpportunityUtil 
				INTO #DistributorIncentiveSlabs 
				FROM DistributorIncentiveSlabs  S (NOLOCK)   
				INNER JOIN  #TempSMWiseIncentive B ON B.DistIRefno=S.DistIRefno
				WHERE PercOpportunityUtil>0
			
				SELECT DistIRefno,SMID,MAX(Slab) AS Slab INTO #DistActualIncentiveSlab
				FROM (
					SELECT DistIRefno,SMID,MAX(Slab) AS Slab FROM #DistributorIncentiveSlabs (NOLOCK) 
					WHERE PercOpportunityUtil>=FromRange and PercOpportunityUtil<=ToRange
					GROUP BY DistIRefno,SMID,DistIncentivePerc
					UNION ALL
					SELECT DistIRefno,SMID,MAX(Slab) AS Slab FROM #DistributorIncentiveSlabs (NOLOCK) 
					WHERE PercOpportunityUtil>=FromRange and PercOpportunityUtil>ToRange
					GROUP BY DistIRefno,SMID
				) A GROUP BY DistIRefno,SMID

		
		
				IF @Po_ErrNo=0
				BEGIN

					INSERT INTO DistributorIncentiveAchDetail(DistIRefno,GeneratedOn,SMId,AchSales,AchSlab,IncPerc,IncAmount,
					Upload,DebitNoteUpload,Availability,LastModBy,LastModDate,AuthId,AuthDate)
					SELECT A.DistIRefNo,@Pi_TransDate,A.SMID,A.TotalSales,B.Slab,C.DistIncentivePerc,
					(TotalSales*C.DistIncentivePerc)/100,0 AS upload,0 DebitNoteUpload,1 AS Availability,@Pi_UserId AS LastModBy,GETDATE() AS  LastModDate,
					@Pi_UserId AS AuthId, GETDATE() AuthDate FROM #TempSMWiseIncentive A 
					INNER JOIN #DistActualIncentiveSlab B ON A.DistIRefNo=B.DistIRefno AND B.SMID=A.SMID 
					INNER JOIN DistributorIncentiveSlabs C(NOLOCK) ON C.DistIRefno=B.DistIRefno AND C.DistIRefno=A.DistIRefNo AND B.Slab=C.Slab
					INNER JOIN DistributorIncentiveMaster  SM (NOLOCK) ON SM.DistIRefno=C.DistIRefno AND SM.DistIRefno=B.DistIRefno AND SM.DistIRefno=A.DistIRefNo 
					WHERE SM.IncentiveGenerated=0 and TotalSales>0
				
					INSERT INTO DistributorIncentiveAchDetailRouteLevel(DistIRefNo,SMID,RMID,NoOfActiveRetailer,NoOfEffectiveRetailer,
					PercEffectivity,NoOfBillsGenerated,PercOpportunityUtil,TotalSales,DepthPerRoute,DepthPerBill,WeeklyCalc,GeneratedOn,UserId)
					SELECT DistIRefNo,SMID,RMID,NoOfActiveRetailer,NoOfEffectiveRetailer,PercEffectivity,NoOfBillsGenerated,PercOpportunityUtil,
					TotalSales,DepthPerRoute,DepthPerBill,WeeklyCalc,GETDATE(),@Pi_UserId
					FROM TempDistributorIncentiveCalculation WHERE UserId=@Pi_UserId 
				
					UPDATE DistributorIncentiveMaster SET IncentiveGenerated=1  FROM  DistributorIncentiveMaster S 
					INNER JOIN DistributorIncentiveAchDetail  SM ON SM.DistIRefno=S.DistIRefno 
					WHERE S.IncentiveGenerated=0 AND SM.UPLOAD=0
				
				END
	
				DELETE FROM TempDistributorUserTrack
			
				COMMIT TRAN
		
			END TRY	
			BEGIN CATCH  
			  SET @Po_ErrNo=1 
			  ROLLBACK TRAN  
			  RETURN    
			END CATCH    

RETURN
END  
GO
IF NOT EXISTS(SELECT * FROM Tbl_Generic_Reports  WHERE Rptname='Distributor Incentive Master Report')
BEGIN
	DECLARE @Rptid  int 
	SELECT @Rptid=MAX(Rptid) from Tbl_Generic_Reports
		
	INSERT INTO TBL_GENERIC_REPORTS(RptId,RptName,SPName,Instructions,DrillDown)
	SELECT @Rptid+1,'Distributor Incentive Master Report','Proc_GR_DistributorIncentiveMaster','Distributor Incentive Master Report','Not Available'

	INSERT INTO Tbl_Generic_Reports_Filters(RptId,FilterId,FilterCaption,ParamName,rptname)
	SELECT @Rptid+1,1,'Reference No','Proc_GR_DistributorIncentiveMaster_Values','Distributor Incentive Master Report' UNION ALL
	SELECT @Rptid+1,2,'Description','Proc_GR_DistributorIncentiveMaster_Values','Distributor Incentive Master Report'  UNION ALL
	SELECT @Rptid+1,3,'Not Applicable','Proc_GR_DistributorIncentiveMaster_Values','Distributor Incentive Master Report' UNION ALL
	SELECT @Rptid+1,4,'Not Applicable','Proc_GR_DistributorIncentiveMaster_Values','Distributor Incentive Master Report'  UNION ALL
	SELECT @Rptid+1,5,'Not Applicable','Proc_GR_DistributorIncentiveMaster_Values','Distributor Incentive Master Report'   UNION ALL
	SELECT @Rptid+1,6,'Not Applicable','Proc_GR_DistributorIncentiveMaster_Values','Distributor Incentive Master Report' 

END
GO
IF EXISTS (SELECT * FROM Sysobjects WHERE XTYPE = 'P' AND name = 'Proc_GR_DistributorIncentiveMaster_Values')
DROP PROCEDURE Proc_GR_DistributorIncentiveMaster_Values
GO
CREATE PROCEDURE Proc_GR_DistributorIncentiveMaster_Values
(
		@FILTERCAPTION  NVARCHAR(100),
		@TEXTLIKE  NVARCHAR(100)
)
AS
/*********************************
* PROCEDURE	: Proc_GR_DistributorIncentiveMaster
* PURPOSE	: Incentive Report
* CREATED	: S.Moorthi
* CREATED DATE	: 23-05-2019
* MODIFIED
**************************************************************************************************************************************************************************************
* DATE        |	PERSON			  | USER STORY ID  |  CR/BZ |  REMARKS                      | CODE REVIEW BY     | REVIEW DATE
**************************************************************************************************************************************************************************************
  27-05-2019	S.Moorthi			CRCRSTPAR0056	 CR			STO(Service to Outlet) or Distributor service invoice logic to be incorporated and debit note should upload to console
**************************************************************************************************************************************************************************************/

BEGIN
		SET @TEXTLIKE='%'+ISNULL(@TEXTLIKE,'')+'%'
		
		--print @filtercaption

		IF @FILTERCAPTION='Reference No' 
		BEGIN
			SELECT DISTINCT DistIRefno as FilterValues FROM DistributorIncentiveMaster WHERE DistIRefno LIKE @textlike
		END
		
		IF @FILTERCAPTION='Description' 
		BEGIN
			SELECT DISTINCT DistIRefDesc as FilterValues FROM DistributorIncentiveMaster WHERE DistIRefDesc LIKE @textlike
		END
		
END
GO
IF EXISTS (SELECT 'C' FROM SYSOBJECTS WHERE XTYPE = 'U' AND NAME = 'RptDebitNoteTopSheet_Excel5')
DROP TABLE RptDebitNoteTopSheet_Excel5        
GO
CREATE TABLE RptDebitNoteTopSheet_Excel5     
(      
	[Dist. Incentive Ref. No.] NVARCHAR(200),      
	[No of Salesman] INT,    
	[Total Sales Value] NUMERIC(18,2),       
	[Incentive Amount] NUMERIC(18,2)      
)
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_GR_DistributorIncentiveMaster' AND xtype='P')
DROP PROCEDURE Proc_GR_DistributorIncentiveMaster
GO
--Exec Proc_GR_DistributorIncentiveMaster 'DistributorIncentiveMaster','2019-07-01','2019-07-05','','','','','',''
CREATE PROCEDURE [dbo].[Proc_GR_DistributorIncentiveMaster]
(    
  @Pi_RptName  NVARCHAR(100),    
  @Pi_FromDate DATETIME,    
  @Pi_ToDate   DATETIME,    
  @Pi_Filter1  NVARCHAR(100),    
  @Pi_Filter2  NVARCHAR(100),
  @Pi_Filter3  NVARCHAR(100),
  @Pi_Filter4  NVARCHAR(100),
  @Pi_Filter5  NVARCHAR(100),
  @Pi_Filter6  NVARCHAR(100)
)
/*********************************
* PROCEDURE	: Proc_GR_DistributorIncentiveMaster
* PURPOSE	: Incentive Report
* CREATED	: S.Moorthi
* CREATED DATE	: 23-05-2019
* MODIFIED
**************************************************************************************************************************************************************************************
* DATE        |	PERSON			  | USER STORY ID  |  CR/BZ |  REMARKS                      | CODE REVIEW BY     | REVIEW DATE
**************************************************************************************************************************************************************************************
  27-05-2019	S.Moorthi			CRCRSTPAR0056	 CR			STO(Service to Outlet) or Distributor service invoice logic to be incorporated and debit note should upload to console
  08-07-2019    M.Lakshman          ILCRSTPAR5086    BZ         while generate dynamic report Divided by zero error validation added in core stocky.
  12-07-2019    M.Lakshman          ILCRSTPAR5151    BZ         Dummy sales man not considered in dynamaic report validation added in core stocky.
**************************************************************************************************************************************************************************************/
AS     
BEGIN    
	SET @Pi_FILTER1='%'+ISNULL(@Pi_FILTER1,'')+'%'            
	SET @Pi_FILTER2='%'+ISNULL(@Pi_FILTER2,'')+'%'
	SET @Pi_FILTER3='%'+ISNULL(@Pi_FILTER3,'')+'%'             
	SET @Pi_FILTER4='%'+ISNULL(@Pi_FILTER4,'')+'%' 
	SET @Pi_FILTER5='%'+ISNULL(@Pi_FILTER5,'')+'%'      
	SET @Pi_FILTER6='%'+ISNULL(@Pi_FILTER6,'')+'%' 
	
	DECLARE @Pi_UserId AS INT 
	SET @Pi_UserId=1000
	
	SELECT DISTINCT DistIRefno into #TempDistIncentiveList FROM DistributorIncentiveMaster A   
	WHERE (@Pi_FromDate BETWEEN IncFromDate AND IncToDate OR @Pi_ToDate BETWEEN IncFromDate AND IncToDate 
	OR IncFromDate BETWEEN @Pi_FromDate AND @Pi_ToDate OR IncToDate BETWEEN @Pi_FromDate AND @Pi_ToDate )  
	AND A.DistIRefno Like @Pi_Filter1  
	AND DistIRefDesc Like @Pi_FILTER2  
				
		SELECT 'Distributor Incentive Master',A.DistIRefno as [DistributorIncentiveRefno],
		CONVERT(VARCHAR(10),IncFromDate,105) AS [From Date],CONVERT(VARCHAR(10),IncToDate,105) AS [To Date],
		CASE DISTIRefStatus WHEN 0 THEN 'InActive' ELSE 'Active' END [Incentive Status],
		CASE A.IncentiveGenerated WHEN 1 THEN 'Yes' ELSE 'No' END [Payout Generated] 
		FROM DistributorIncentiveMaster A (NOLOCK)  
		INNER JOIN #TempDistIncentiveList B ON A.DistIRefno=B.DistIRefno
		ORDER BY  A.DistIRefno
	
	
		-----DistributorIncentiveMaster
		SELECT 'Distributor Incentive Slab ',A.DistIRefno as [DistributorIncentiveRefno],
		Slab,CAST(B.FromRange AS VARCHAR(500)) +' ~ ' + CAST (B.ToRange AS VARCHAR(500)) AS IncentiveSlabs,
		B.DistIncentivePerc as [IncPercentage]
		FROM DistributorIncentiveMaster A (NOLOCK)  
		INNER JOIN DistributorIncentiveSlabs B ON A.DistIRefno=B.DistIRefno
		INNER JOIN #TempDistIncentiveList TD ON TD.DistIRefno=B.DistIRefno AND TD.DistIRefno=A.DistIRefno
		ORDER BY  A.DistIRefno
	
		EXEC Proc_TempDistributorIncentiveCalculation @Pi_UserId,@Pi_FromDate,@Pi_ToDate
		
		CREATE TABLE #TempSMWiseIncentive
		(
			[SMREF]						VARCHAR(100),
			DistIRefNo					VARCHAR(100),
			[From Date]					VARCHAR(20),
			[To Date]					VARCHAR(20),
			[Salesman Code]				VARCHAR(100),
			[Salesman Name]				VARCHAR(100),
			[SMID]						[INT],
			[Route Name]				VARCHAR(100),
			[No.of Active Retailer]		INT,
			[No. of effecitve Outlet]	INT,
			[% Effectivity]				NUMERIC(18,2),
			[No.of Bills Generated]		INT,
			[% opportunity utilization]	NUMERIC(18,2),
			[Total Sales Amount]		NUMERIC(18,3),
			[Depth Per Route]			NUMERIC(18,0),
			[Depth Per bill]			NUMERIC(18,0),
			[WeeklyCalc]				INT,
			[Total incentive Percentage]	NUMERIC(18,3),
			[Slab]						INT,
			[Total Incentive Amount]	numeric(18,3)
		)
		
	INSERT INTO #TempSMWiseIncentive([SMREF],DistIRefNo,[From Date],[To Date],[SMID],[Salesman Code],[Salesman Name],
	[Route Name],[No.of Active Retailer],[No. of effecitve Outlet],[% Effectivity],[No.of Bills Generated],[% opportunity utilization],
	[Total Sales Amount],[Depth Per Route],[Depth Per bill],[WeeklyCalc],[Total incentive Percentage],[Slab],[Total Incentive Amount])	
	SELECT DISTINCT  SM.SMCode+A.DistIRefNo+'A',A.DistIRefNo,CONVERT(VARCHAR(10),D.IncFromDate,105),CONVERT(VARCHAR(10),D.IncToDate,105),SM.[SMID],SM.SMCode [Salesman Code],SM.SMName [Salesman Name],
	RM.RMName [Route Name],SUM(NoOfActiveRetailer),SUM(NoOfEffectiveRetailer),0 [% Effectivity],SUM(NoOfBillsGenerated),
	0 PercOpportunityUtil,SUM(TotalSales),0 DepthPerRoute,0 DepthPerBill,SUM(WeeklyCalc),
	0 [Total incentive Percentage],0 [Slab],0 [Total Incentive Amount]
	FROM TempDistributorIncentiveCalculation A 
	INNER JOIN DistributorIncentiveMaster D ON D.DistIRefno=A.DistIRefno
	INNER JOIN #TempDistIncentiveList T ON T.DistIRefno=D.DistIRefno AND T.DistIRefno=A.DistIRefNo 
	INNER JOIN SalesMan SM (NOLOCK) ON A.SMID=SM.SMId 
	INNER JOIN RouteMaster RM (NOLOCK) ON A.RMID=RM.RMId 
	WHERE UserId=@Pi_UserId  and DistIRefStatus=1 AND SM.SMCode NOT IN('SMDummy01')  ---- addded by lakshman M Dated ON 12-07-2019 PMS ID: ILCRSTPAR5151
	GROUP BY A.DistIRefNo,D.IncFromDate,D.IncToDate,SM.SMId,SM.SMCode,SM.SMName,RM.RMName
	UNION ALL
	SELECT DISTINCT SM.SMCode+A.DistIRefNo+'Total',A.DistIRefNo,CONVERT(VARCHAR(10),D.IncFromDate,105),CONVERT(VARCHAR(10),D.IncToDate,105),SM.SMId,'' [Salesman Code],'' [Salesman Name],
	'Total' [Route Name],SUM(NoOfActiveRetailer),SUM(NoOfEffectiveRetailer),0 [% Effectivity],SUM(NoOfBillsGenerated),
	0 PercOpportunityUtil,SUM(TotalSales),0 DepthPerRoute,0 DepthPerBill,SUM(WeeklyCalc),
	0 [Total incentive Percentage],0 [Slab],0 [Total Incentive Amount]
	FROM TempDistributorIncentiveCalculation A 
	INNER JOIN DistributorIncentiveMaster D ON D.DistIRefno=A.DistIRefno
	INNER JOIN #TempDistIncentiveList T ON T.DistIRefno=D.DistIRefno AND T.DistIRefno=A.DistIRefNo 
	INNER JOIN SalesMan SM (NOLOCK) ON A.SMID=SM.SMId 
	WHERE UserId=@Pi_UserId and DistIRefStatus=1  AND SM.SMCode NOT IN('SMDummy01') ---- addded by lakshman M Dated ON 12-07-2019  PMS iD: ILCRSTPAR5151
	GROUP BY A.DistIRefNo,D.IncFromDate,D.IncToDate,SM.SMId,SM.SMCode,SM.SMName
	
	
	
	-----PercEffectivity Update
	---- added by lakshman M PMS DI: ILCRSTPAR5086 Dated On 08-07-2019 
	UPDATE A SET A.[% Effectivity]=ISNULL(CAST([No. of effecitve Outlet] AS NUMERIC(18,3))/CAST(NULLIF([No.of Active Retailer],0) AS NUMERIC(18,3)),0)*100  
	FROM #TempSMWiseIncentive A WHERE [No. of effecitve Outlet]<>0
	
	---Opportunity Utilization
	UPDATE A SET A.[% opportunity utilization]=ISNULL(CAST([No.of Bills Generated] AS NUMERIC(18,3))/CAST(NULLIF(WeeklyCalc,0) AS NUMERIC(18,3)),0)*100
	FROM #TempSMWiseIncentive A WHERE WeeklyCalc<>0
	
	---Depth Per Route
	UPDATE A SET A.[Depth Per Route]=ISNULL(CAST([Total Sales Amount] AS NUMERIC(18,3))/CAST(NULLIF([No. of effecitve Outlet],0) AS NUMERIC(18,3)),0)
	FROM #TempSMWiseIncentive A WHERE [No. of effecitve Outlet]<>0
	
	---Depth Per Bill
	UPDATE A SET A.[Depth Per bill]=ISNULL(CAST([Total Sales Amount] AS NUMERIC(18,3))/CAST(NULLIF([No.of Bills Generated],0) AS NUMERIC(18,3)),0)
	FROM #TempSMWiseIncentive A WHERE [No.of Bills Generated]<>0
	----------till here  ------------
	
	SELECT S.DistIRefno,S.Slab,FromRange,ToRange,DistIncentivePerc,B.SMID,[% opportunity utilization] 
	INTO #DistributorIncentiveSlabs 
	FROM DistributorIncentiveSlabs  S (NOLOCK)   
	INNER JOIN  #TempSMWiseIncentive B ON B.DistIRefno=S.DistIRefno
	WHERE [% opportunity utilization]>0 AND [SMREF] like '%Total'

	--select * from #DistributorIncentiveSlabs where distirefno='DISC000000089'
	
	--Exec Proc_GR_DistributorIncentiveMaster 'DistributorIncentiveMaster','2019-08-01','2019-08-05','','','','','',''
	
	SELECT DistIRefno,SMID,MAX(Slab) AS Slab INTO #DistActualIncentiveSlab
	FROM (
		SELECT DistIRefno,SMID,MAX(Slab) AS Slab FROM #DistributorIncentiveSlabs (NOLOCK) 
		WHERE [% opportunity utilization]>=FromRange and [% opportunity utilization]<=ToRange
		GROUP BY DistIRefno,SMID,DistIncentivePerc
		UNION ALL
		SELECT DistIRefno,SMID,MAX(Slab) AS Slab FROM #DistributorIncentiveSlabs (NOLOCK) 
		WHERE [% opportunity utilization]>=FromRange and [% opportunity utilization]>ToRange		
		GROUP BY DistIRefno,SMID
	) A GROUP BY DistIRefno,SMID

	--select * from #DistActualIncentiveSlab where distirefno='DISC000000089'

	UPDATE A SET A.Slab=B.Slab,A.[Total incentive Percentage]=C.DistIncentivePerc,
	A.[Total Incentive Amount]=(A.[Total Sales Amount]*C.DistIncentivePerc)/100 FROM #TempSMWiseIncentive A 
	INNER JOIN #DistActualIncentiveSlab B ON A.DistIRefNo=B.DistIRefno AND B.SMID=A.SMID 
	INNER JOIN DistributorIncentiveSlabs C(NOLOCK) ON C.DistIRefno=B.DistIRefno AND C.DistIRefno=A.DistIRefNo AND B.Slab=C.Slab
	INNER JOIN DistributorIncentiveMaster  SM (NOLOCK) ON SM.DistIRefno=C.DistIRefno AND SM.DistIRefno=B.DistIRefno AND SM.DistIRefno=A.DistIRefNo 
	WHERE A.[Total Sales Amount]>0 and [SMREF] like '%Total'
	
		--INSERT INTO #DistActualIncentiveSlab(DistIRefno,Slab)
		--SELECT  DISTINCT B.DistIRefno,1  FROM  #SMIncentive B 
		--WHERE  NOT EXISTS (SELECT * FROM #DistributorIncentiveSlabs A WHERE A.DistIRefno=B.DistIRefno) 
	--Exec Proc_GR_DistributorIncentiveMaster 'DistributorIncentiveMaster','2019-05-01','2019-05-25','','','','','',''
	SELECT 'DISTRIBUTOR INCENTIVE TARGET VS ACHIEVED',DistIRefNo,[From Date],[To Date],[Salesman Code],[Salesman Name],
	[Route Name],[No.of Active Retailer],[No. of effecitve Outlet],[% Effectivity],[No.of Bills Generated],[% opportunity utilization],
	[Total Sales Amount],[Depth Per Route],[Depth Per bill],[WeeklyCalc],[Total incentive Percentage],[Slab],[Total Incentive Amount] 
	FROM  #TempSMWiseIncentive S (NOLOCK) ORDER BY DistIRefNo,[SMREF] ASC
			
	
END
GO
IF EXISTS (SELECT 'C' FROM SYSOBJECTS WHERE XTYPE = 'U' AND NAME = 'RptDebitNoteTopSheet_Excel5WID')       
DROP TABLE RptDebitNoteTopSheet_Excel5WID
GO
CREATE TABLE RptDebitNoteTopSheet_Excel5WID    
(    
[Dist. Incentive Ref. No.] NVARCHAR(200),      
[No of Salesman] INT,    
[Total Sales Value] NUMERIC(18,2),       
[Incentive Amount] NUMERIC(18,2),
SubLinkId		INT    
)
GO
---Added by S.Moorthi CRCRSTPAR0070
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE name='CSTimerServerDate' AND xtype='U')
BEGIN
CREATE TABLE [CSTimerServerDate](
	[SyncId] [numeric](38, 0) NULL,
	[ServerDate] [datetime] NULL,
	[CSDate] [datetime] NULL,
	[LocalDate] [datetime] NULL,
	[Upload] [tinyint] NULL
) ON [PRIMARY]
END
GO
IF EXISTS(SELECT * FROM CSTimer(NOLOCK))
BEGIN
	IF NOT EXISTS(SELECT * FROM CSTimerServerDate(NOLOCK))
	BEGIN
		INSERT INTO CSTimerServerDate(SyncId,ServerDate,CSDate,LocalDate,Upload) 
		SELECT SyncId,ServerDate,CSDate,LocalDate,Upload FROM CSTimer (NOLOCK)
	END 
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE name='Proc_Cn2Cs_Timer' AND xtype='P')
DROP PROCEDURE Proc_Cn2Cs_Timer
GO
CREATE PROCEDURE Proc_Cn2Cs_Timer  
(    
 @SyncId NUMERIC(38,0),    
 @ServerDate DATETIME    
)    
AS  
/*********************************  
* PROCEDURE  : Proc_Cn2Cs_Timer  
* PURPOSE  : To Validate the Server Date Details  
* CREATED BY : S.MOORTHI  
* CREATED DATE : 06/11/2018  
* MODIFIED  
* DATE        AUTHOR   CR/BZ USER STORY ID  DESCRIPTION           
-----------------------------------------------------------------------        
 06/11/2018  S.Moorthi   CR  CRCRSTPAR0034       currently month end is happening on 6th day of month, this is happening based on system date. Is internet connection not available.   
												Need to get console server date through sync and validate user to perform month end process  
 24/06/2019	 S.Moorthi	 CR	CRCRSTPAR0070		Login validation with server date
*********************************/   
BEGIN    
SET NOCOUNT ON    
 IF NOT EXISTS (SELECT SyncId FROM CSTimer T (NOLOCK))    
 BEGIN    
  INSERT INTO CSTimer(SyncId,ServerDate,CSDate,LocalDate,Upload)    
  SELECT @SyncId,@ServerDate,@ServerDate,GETDATE(),0
  
  DELETE FROM CSTimerServerDate
  INSERT INTO CSTimerServerDate(SyncId,ServerDate,CSDate,LocalDate,Upload)    
  SELECT @SyncId,@ServerDate,@ServerDate,GETDATE(),0 
      
 END    
 ELSE    
 BEGIN    
  INSERT INTO CSTimerHistory(SyncId,ServerDate,CSDate,LocalDate,Upload)    
  SELECT SyncId,ServerDate,CSDate,LocalDate,Upload FROM CSTimer T (NOLOCK)    
      
  UPDATE T SET T.SyncId = @SyncId, T.ServerDate = @ServerDate, T.CSDate = @ServerDate,LocalDate = GETDATE(),Upload = 0    
  FROM CSTimer T (NOLOCK)
  
  UPDATE T SET T.SyncId = @SyncId, T.ServerDate = @ServerDate, T.CSDate = @ServerDate,LocalDate = GETDATE(),Upload = 0    
  FROM CSTimerServerDate T (NOLOCK)    
      
 END    
END
GO
DELETE FROM ManualConfiguration WHERE ModuleId='CSTimer3'
INSERT INTO ManualConfiguration(ProjectName,ModuleId,ModuleName,Description,Status,Condition,ConfigValue,SeqNo)
SELECT 'PARLE','CSTimer3','CS Timer','Future Date allow days with server date',1,'',1.00,1
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE name='Proc_ValidateCSTimer' AND xtype='P')
DROP PROCEDURE Proc_ValidateCSTimer
GO
/*
begin tran
 exec Proc_ValidateCSTimer '2019-06-24',0,206
 SELECT * FROM CSTimer (NOLOCK)
rollback tran
*/
CREATE PROCEDURE Proc_ValidateCSTimer
(
@gServerDate DATETIME,
@iMode INT,
@TransId	INT
)
AS
/********************************************************************************************************************************************************************************
* PROCEDURE		: Proc_ValidateCSTimer
* PURPOSE		: To Validate the Server Date Details
* CREATED BY	: S.MOORTHI
* CREATED DATE	: 06/11/2018
* MODIFIED
* DATE        AUTHOR			CR/BZ	USER STORY ID		DESCRIPTION         
-----------------------------------------------------------------------      
 06-11-2018  S.Moorthi			CR		CRCRSTPAR0034       currently month end is happening on 6th day of month, this is happening based on system date. Is internet connection not available. 
															Need to get console server date through sync and validate user to perform month end process
 06-11-2018  S.Moorthi			CR		CRCRSTPAR0036       Back Date transaction should be allowed
 06-12-2018  M Lakshman         SR      ILCRSTPAR2752       In core stocky Proc_ValidateCSTimer fresh DB using that time stock ledger no records available. 
															Now validation added script level changes has been done.
 13-12-2018  M Lakshman         SR      ILCRSTPAR2927       As per client request Future date transaction will allow only 5 days validation included in core stocky.	
 12-04-2018  M Lakshman         SR      ILCRSTPAR3870       As per client request Future date validation included allow only 5 days. 								
 24/06/2019	 S.Moorthi			CR		CRCRSTPAR0070		Login validation with server date
********************************************************************************************************************************************************************************/ 
BEGIN
SET NOCOUNT ON
	DECLARE @CSDate AS DATETIME
	DECLARE @LocalDate AS DATETIME
	
	DECLARE @BackDateAllow AS DATETIME
	declare @TimInterval  AS NUMERIC(8,0)
	DECLARE @CSDateDD INT
	DECLARE @BackDateDays AS INT
	DECLARE @MonthEndDate AS DATETIME
	DECLARE @MaxTransDate AS DATETIME
	DECLARE @ValidateMsg AS VARCHAR(200)
	DECLARE @MonthEndDt AS DATETIME
	DECLARE @JCMONTHDT AS DATETIME
	DECLARE @ActMonthEndDt AS DATETIME
	DECLARE @MonthEndConfigDays AS INT
	DECLARE @csdateNew AS datetime
	DECLARE @csServerNew AS datetime
	
	IF NOT EXISTS(SELECT * FROM CSTimer (NOLOCK))
	BEGIN
		SELECT '' ValidMsg
		RETURN 
	END
	
	IF NOT EXISTS(SELECT * FROM StockLedger (NOLOCK))
	BEGIN
		SELECT '' ValidMsg
		RETURN 
	END
	SELECT @CSDate = CONVERT(VARCHAR(10),CSDate,121),@LocalDate = GETDATE() FROM CSTimer (NOLOCK)
	
	SELECT @MaxTransDate=ISNULL(MAX(TransDate),GETDATE()) FROM StockLedger (NOLOCK)


	IF EXISTS(SELECT * FROM ManualConfiguration WHERE ModuleId='CSTimer3' AND STATUS=1)
	BEGIN
		DECLARE @FutureDays AS INT
		DECLARE @LastSyncDate AS DATETIME
		SET @FutureDays=(SELECT ConfigValue FROM ManualConfiguration WHERE ModuleId='CSTimer3' AND STATUS=1)
		IF EXISTS(SELECT *fROM CSTimerServerDate(NOLOCK))
		BEGIN
			SELECT @LastSyncDate=ISNULL(CONVERT(VARCHAR(10),ServerDate,121),@gServerDate) fROM CSTimerServerDate(NOLOCK)
			
			IF @gServerDate>DATEADD(D,@FutureDays,@LastSyncDate)
			BEGIN
				--SELECT 'Previous Sync Date is '+CONVERT(VARCHAR(10),@LastSyncDate,105) +',System will be allow till '+CONVERT(varchar(10),DATEADD(D,@FutureDays,@LastSyncDate),105) ValidMsg
				  SELECT 'Previous Sync Date is '+CONVERT(VARCHAR(10),@LastSyncDate,105) +',Please do sync to continue login' ValidMsg
				--SELECT 'Please Change the System Date future date transaction will be allow only'+ CAST(@FutureDays AS VARCHAR(10)) +' days after last Sync date' ValidMsg
				RETURN
			END
			
		END
	END
	
	-- SELECT  @csdateNew  = CSdate+4  from CSTimer (NOLOCK)
	---------- Added by lakshman M Dated ON 12-04-2018 PMS ID: ILCRSTPAR3870 --------------
	--SELECT @CSDATENEW = convert(varchar(10),getdate(),121)
	--SELECT  @csServerNew = @gServerDate + 4

	--IF @csServerNew < @csdateNew
	--BEGIN
	--	--IF @csdateNew <= @gServerDate
	--	--BEGIN	
	--		IF NOT EXISTS(SELECT * FROM CSTimer (NOLOCK) WHERE convert(varchar(10),CSDate,121) Between CONVERT(VARCHAR(10),@csdateNew,121) AND CONVERT (VARCHAR(10),@gServerDate,121) )
	--		BEGIN
	--			SELECT 'Please Change the System Date future date transaction will allow for only 5 days' ValidMsg
	--			RETURN 
	--		END
	--	--END
	--END 
	------------------------- Till here --------------------------------------
	IF @MaxTransDate>@CSDate
	BEGIN
		SET @CSDate=@MaxTransDate		
		UPDATE CSTimer SET CSDate=@MaxTransDate
	END
	
	IF @iMode=1000 AND @TransId=206
	BEGIN
		IF @gServerDate>@CSDate
		BEGIN
			SET @CSDate=@gServerDate

			INSERT INTO CSTimerHistory(SyncId,ServerDate,CSDate,LocalDate,Upload)  
			SELECT SyncId,@gServerDate,@gServerDate,GETDATE(),Upload FROM CSTimer T (NOLOCK) 
			
			UPDATE CSTimer SET CSDate=@CSDate,ServerDate=@gServerDate,LocalDate=GETDATE()
		END
	END
	
	--select @BackDateDays,@CSDate
	IF EXISTS(SELECT * FROM CONFIGURATION WHERE MODULENAME='Month End Process' AND MODULEID='DAYMONTHEND1' AND CONFIGVALUE>0)
	BEGIN
		IF @iMode=0 AND @TransId=206
		BEGIN
			IF EXISTS(SELECT * fROM MANUALCONFIGURATION WHERE Moduleid='MonthEndServerDate' and status=1)
			BEGIN 
				goto xy
			END
		END
		
		SELECT @MonthEndConfigDays= ConfigValue FROM CONFIGURATION WHERE MODULENAME='Month End Process' AND MODULEID='DAYMONTHEND1'
		SET @ActMonthEndDt = dateadd(d,@MonthEndConfigDays,@gServerDate)
	
		SELECT @JCMONTHDT=Jcmsdt FROM JCMonth(NOLOCK) WHERE @CSDate BETWEEN JcmSdt AND JcmEdt 
		SET @MonthEndDt=dateadd(d,@MonthEndConfigDays,@JCMONTHDT)
	
		IF NOT EXISTS(SELECT * FROM JCMonthEnd (NOLOCK)	WHERE JcmEdt=DATEADD(D,-1,@JCMONTHDT) AND Status = 1)
		BEGIN
			IF @CSDate >= @MonthEndDt
			BEGIN
				IF @CSDate <> @gServerDate
					BEGIN
						SELECT 'Please change the System date with '+ CONVERT(NVARCHAR(20),@CSDate,103)+' and do Month End for '+DATENAME(M,DATEADD(D,-1,@JCMONTHDT))+' - '+CAST(YEAR(DATEADD(D,-1,@JCMONTHDT)) AS NVARCHAR(10)) as ValidMsg
						RETURN
						--SET @ValidateMsg='System Date does not match with Server Date. Please correct the system date and restart Sehyog to proceed.'
					END
			END
		END
	END
	xy:
	
	--select @BackDateAllow,@gServerDate
	IF EXISTS(SELECT * FROM ManualConfiguration(NOLOCK) WHERE ModuleId='CSTimer2' AND STATUS=1)
	BEGIN
		SELECT @BackDateDays = ISNULL(ConfigValue,0) FROM ManualConfiguration(NOLOCK) WHERE ModuleId='CSTimer2'
		SET @BackDateAllow=CONVERT(VARCHAR(10),DATEADD(D,-@BackDateDays+1,@CSDate),121)
		IF @BackDateAllow>@gServerDate
		BEGIN
			SELECT 'Back Date should be allow till '+ CONVERT(NVARCHAR(20),@BackDateAllow,103)+', Please Change the System Date and re-open Sehyog to continue ' ValidMsg
			--SELECT 'Back Date should be allow till '+ CONVERT(NVARCHAR(20),@BackDateAllow,103)+', Please Change System Date to '+ CONVERT(NVARCHAR(20),@CSDate,103)+' and re-open Sehyog to continue ' ValidMsg
			RETURN
		END
	END
	
	
	--Back Date Transaction Not Allowed, Please Change System Date to 
	--IF @CSDate>@gServerDate
	--BEGIN
	--	SELECT 	'Please change System date to '+ CONVERT(NVARCHAR(20),@CSDate,103)+' and re-open Sehyog to continue ' ValidMsg
	--	RETURN
	--END
	
	SELECT '' ValidMsg
	
RETURN 
END
GO
DELETE FROM ManualConfiguration WHERE ModuleId='RETAILERBLOCK1'
INSERT INTO ManualConfiguration(ProjectName,ModuleId,ModuleName,Description,Status,Condition,ConfigValue,SeqNo)
SELECT 'PARLE','RETAILERBLOCK1','Retailer','Retailer mandatory columns block',1,'',0.00,1
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME ='Fn_ReturnToBloackRetailerColumns' AND TYPE ='FN')
DROP FUNCTION Fn_ReturnToBloackRetailerColumns
GO
--SELECT DBO.Fn_ReturnToBloackRetailerColumns(68,0,'NewSalesman',1,2) AS Validate
CREATE FUNCTION Fn_ReturnToBloackRetailerColumns(@TransId	INT,
@RefId		INT,
@ColumnName	VARCHAR(100),
@Mode AS INT,
@UsrId	INT
)
RETURNS VARCHAR(100)
AS
/********************************************************************************************************************** 
* FUNCTION  :	 Fn_ReturnToBloackRetailerColumns  
* PURPOSE  :	 To Validate Columns to Edit
* CREATED BY :	 S.MOORTHI  
* CREATED DATE : 24/06/2019  
* MODIFIED  
* DATE        AUTHOR   CR/BZ	    USER STORY ID		DESCRIPTION           
-----------------------------------------------------------------------        
 26/06/2019	 S.Moorthi	  CR		CRCRSTPAR0071		Salesman and Route master access level changes in user login
 25-07-2019  Lakshman M   SR        ILCRSTPAR5307       userlogin retailer route and value class edit valiation included.
***********************************************************************************************************************/ 
BEGIN
DECLARE @ReturMsg AS VARCHAR(1000)
SET @ReturMsg=''
DECLARE @DisplayMsg AS VARCHAR(100)
SET @DisplayMsg=''
	
	IF @UsrId<>1000 ---1000 AS ETL
	BEGIN	
		IF NOT EXISTS(SELECT * FROM Users WHERE UserId=@UsrId and UPPER(UserName) in ('SA','SMADMIN'))
		BEGIN
			IF @TransId=79 AND @Mode=2
			BEGIN
				IF @ColumnName IN ('DlvRMId','SalesRMIdAdd','SalesRMIdRemove','Frequency','ValueClassAdd','ValueClassRemove') 
				BEGIN
					SET @ReturMsg='Access Denied'
				END
			END
			
			IF @TransId=68
			BEGIN
				IF @ColumnName IN ('NewSalesman') AND @Mode=1
				BEGIN
					SET @ReturMsg='Access Denied'
				END
				
				IF @ColumnName IN ('RouteRemove','RouteAdd','SMCODE') AND @Mode=2
				BEGIN
					SET @ReturMsg='Access Denied'
				END				
			END
			
			
			IF @TransId=78 AND @Mode=2
			BEGIN
				IF @ColumnName IN ('FraDays') 
				BEGIN
					SET @ReturMsg='Access Denied'
				END
			END
			
			IF @TransId=78 AND @Mode=1
			BEGIN
				IF @ColumnName IN ('NewRoute') 
				BEGIN
					SET @ReturMsg='Access Denied'
				END
			END
		END
	END
	
	IF @ReturMsg<>''
	BEGIN
		RETURN @ReturMsg
	END
	
	IF EXISTS(SELECT * FROM ManualConfiguration WHERE ModuleId='RETAILERBLOCK1' AND Status=1)
	BEGIN
	
		IF @TransId=79 AND @RefId<>0
		BEGIN
			----------- added by lakshman M Dated ON 25-07-2019 PMS ID: ILCRSTPAR5307
				IF @ColumnName IN ('RtrName','RtrStatus','ValueClassAdd','ValueClassRemove','Geography','GeographyLevel') AND @Mode<>1 AND @usrid <>(SELECT userid FROM Users WHERE UserId=@UsrId and UPPER(UserName)  NOT IN ('SA','SMADMIN'))
				BEGIN				
					SET @ReturMsg='Access Denied,Can''''t be modify in locally'
				END
			--------------- Till here -------------------
		END
		IF @TransId=227
		BEGIN
			IF @ColumnName IN ('NewChangeReq','LoadRetailer') AND @Mode<>1
			BEGIN				
				SET @ReturMsg='Retailer Classification details can not be modify in locally '
			END	
		END
	END
RETURN @ReturMsg
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE name='Proc_ValidateRetailerValueClassMap' AND xtype='P')
DROP PROCEDURE Proc_ValidateRetailerValueClassMap
GO
CREATE PROCEDURE Proc_ValidateRetailerValueClassMap
(
	@Po_ErrNo INT OUTPUT
)
AS
/********************************************************************************************
* PROCEDURE	: Proc_ValidateRetailerValueClassMap
* PURPOSE	: To Insert and Update records  from xml file in the Table RetailerValueClassMap 
* CREATED	: MarySubashini.S
* CREATED DATE	: 13/09/2007
* MODIFIED 
  * DATE         AUTHOR				CR/BZ	   USER STORY ID   DESCRIPTION                         
*****************************************************************************************************
  2013/10/10   Sathishkumar V		CR						  Junk Characters Removed  
  10/05/2018   S.Moorthi			CR        CRCRSTPAR0001   Retailer Approval process - Manual
  26/06/2019   S.Moorthi			CR		  CRCRSTPAR0071	  Salesman and Route master access level changes in user login
***********************************************************************************************/ 
SET NOCOUNT ON
BEGIN
	DECLARE @RetailerCode AS NVARCHAR(100)
	DECLARE @ValueClassCode AS NVARCHAR(100)
	DECLARE @CtgCode AS NVARCHAR(100)
	DECLARE @RtrId AS INT
	DECLARE @RtrValueClassId AS INT
	DECLARE @Taction AS INT
	DECLARE @Tabname AS NVARCHAR(100)
	DECLARE @TransType AS INT 
	DECLARE @SelectionType AS NVARCHAR(100)
	DECLARE @ErrDesc AS NVARCHAR(1000)
	DECLARE @sSql AS NVARCHAR(4000)
	DECLARE @CtgMainId AS NVARCHAR(100)
	DECLARE @CmpId AS NVARCHAR(100)
	
	SET @Taction=1
	SET @Po_ErrNo=0
	SET @TransType=1
	SET @Tabname='ETL_Prk_RetailerValueClassMap'
	DECLARE Cur_RetailerValueClassMap CURSOR 
	FOR SELECT dbo.Fn_Removejunk(ISNULL([Retailer Code],'')),dbo.Fn_Removejunk(ISNULL([Value Class Code],'')),
	ISNULL([CateGOry Level Value],''),ISNULL([Selection Type],'')
	FROM ETL_Prk_RetailerValueClassMap WITH(NOLOCK) ORDER BY [Retailer Code]
	OPEN Cur_RetailerValueClassMap
	FETCH NEXT FROM Cur_RetailerValueClassMap INTO @RetailerCode,@ValueClassCode,@CtgCode,@SelectionType
	WHILE @@FETCH_STATUS=0
	BEGIN	
		SET @CmpId=0
		IF NOT EXISTS (SELECT * FROM Retailer WHERE RtrCode = @RetailerCode)    
  		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Retailer Code ' + @RetailerCode + ' does not exist'  		 
			INSERT INTO Errorlog VALUES (1,@Tabname,'RetailerCode',@ErrDesc)
		END
		ELSE
		BEGIN						
			SELECT @RtrId =RtrId FROM Retailer WHERE RtrCode = @RetailerCode
		END
		IF NOT EXISTS (SELECT * FROM RetailerCateGOry WHERE  CtgCode=@CtgCode)    
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'CateGOry Code ' + @CtgCode + ' does not exist'  		 
			INSERT INTO Errorlog VALUES (2,@Tabname,'CateGOry Code',@ErrDesc)
		END
		ELSE
		BEGIN
			SELECT @CtgMainId =CtgMainId FROM RetailerCateGOry WHERE CtgCode=@CtgCode
		END
		
		IF NOT EXISTS  (SELECT * FROM RetailerValueClass WHERE  ValueClassCode=@ValueClassCode AND CtgMainId=@CtgMainId )    
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Value Class Code ' + @ValueClassCode + ' does not exist'  		 
			INSERT INTO Errorlog VALUES (3,@Tabname,'ValueClassCode',@ErrDesc)
		END
		ELSE
		BEGIN						
			SELECT @RtrValueClassId =RtrClassId,@CmpId=CmpId FROM RetailerValueClass WITH (NOLOCK)
			WHERE ValueClassCode=@ValueClassCode AND CtgMainId=@CtgMainId 
		END
		IF EXISTS (SELECT * FROM RetailerValueClassMap WHERE  RtrValueClassId=@RtrValueClassId AND RtrId=@RtrId)    
		BEGIN
			SET @Taction=2
		END
		ELSE
		BEGIN
			SET @Taction=1				
		END
		
		IF LTRIM(RTRIM(@SelectionType))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Value Class Selection Type should not be empty'  		 
			INSERT INTO Errorlog VALUES (4,@Tabname,'SelectionType',@ErrDesc)
		END
		ELSE
		BEGIN
			IF LTRIM(RTRIM(@SelectionType))='ADD' OR LTRIM(RTRIM(@SelectionType))='REDUCE'
			BEGIN
				IF LTRIM(RTRIM(@SelectionType))='ADD' 
				BEGIN
					SET @TransType=1
				END
				IF LTRIM(RTRIM(@SelectionType))='REDUCE' 
				BEGIN
					SET @TransType=2
				END
			END
			ELSE 
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Value Class Type '+@SelectionType+' is not available'  		 
				INSERT INTO Errorlog VALUES (5,@Tabname,'SelectionType',@ErrDesc)
			END
		END
		
		IF @Po_ErrNo=0
		BEGIN
			DECLARE @MSG AS VARCHAR(MAX)						
			SET @MSG=''
			SELECT @MSG=DBO.Fn_RetailerApprovalStatus(@RtrId)
			IF ISNULL(@MSG,'')<>''
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0				
				SET @ErrDesc =@MSG
				INSERT INTO Errorlog VALUES (20,@Tabname,'Status',@MSG)
			END
		END
		
		IF EXISTS(SELECT * FROM RetailerValueClassMap(NOLOCK) WHERE RtrId=@RtrId)
		BEGIN
			DECLARE @ReturnMsg AS VARCHAR(100)
			SET @ReturnMsg=(SELECT DBO.Fn_ReturnToBloackRetailerColumns(79,@RtrId,'ValueClassAdd',2,1000))
			IF RTRIM(LTRIM(@ReturnMsg))<>''
			BEGIN
				INSERT INTO Errorlog VALUES (21,@Tabname,'ValueClassAdd',@ReturnMsg)
				SET @Po_ErrNo=1
			END
		END
		
		IF @TransType=1 
		BEGIN
			IF  @Po_ErrNo=0 
			BEGIN
				DECLARE @OldCtgMainId	NUMERIC(38,0)
				DECLARE @OldCtgLevelId	NUMERIC(38,0)
				DECLARE @OldRtrClassId	NUMERIC(38,0)
				DECLARE @NewCtgMainId	NUMERIC(38,0)
				DECLARE @NewCtgLevelId	NUMERIC(38,0)
				DECLARE @NewRtrClassId	NUMERIC(38,0)
				DECLARE @RtrCnt			NUMERIC(38,0)
				SET @RtrCnt=0
				IF EXISTS(SELECT * FROM RetailerValueClassMap WHERE RtrId=@RtrId AND RtrValueClassId IN
						(SELECT RtrClassId FROM RetailerValueClass WHERE CmpId=@CmpId))
				BEGIN
			
					SELECT @OldCtgMainId=A.CtgMainId,@OldCtgLevelId=B.CtgLevelId,@OldRtrClassId=C.RtrClassId 
					FROM RetailerCateGOry A INNER JOIN RetailerCateGOryLevel B ON A.CtgLevelId=B.CtgLevelId
					INNER JOIN RetailerValueClass C ON A.CtgMainId=C.CtgMainId
					INNER JOIN RetailerValueClassMap D ON C.RtrClassId=RtrValueClassId
					WHERE D.RtrId=@RtrId
					SET @RtrCnt=1
				END
				--DELETE FROM RetailerValueClassMap WHERE RtrId=@RtrId AND RtrValueClassId=@RtrValueClassId
				--added by S.Moorthi
				DECLARE @ValueClassShift AS INT
				SET @ValueClassShift=1
				
				IF EXISTS(SELECT * FROM RetailerValueClassMap(nolock) WHERE RtrId=@RtrId)
				BEGIN
					IF NOT EXISTS(SELECT * FROM RetailerValueClassMap WHERE RtrId=@RtrId 
					AND RtrValueClassId=@RtrValueClassId)
					BEGIN
						SET @ValueClassShift=0	
					END				
				END
				
				IF @ValueClassShift=1
				BEGIN
					DELETE FROM RetailerValueClassMap WHERE RtrId=@RtrId AND RtrValueClassId IN
					(SELECT RtrClassId FROM RetailerValueClass WHERE CmpId=@CmpId)
					
					SET @sSql='DELETE FROM RetailerValueClassMap WHERE RtrId='+CAST(@RtrId AS VARCHAR(10))+
					' AND RtrValueClassId='+CAST(@RtrValueClassId AS NVARCHAR(10))
					INSERT INTO Translog(strSql1) VALUES (@sSql)
					INSERT INTO RetailerValueClassMap 
					(RtrId,RtrValueClassId,Availability,LastModBy,LastModDate,AuthId,AuthDate)
					VALUES(@RtrId,@RtrValueClassId,
					1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121))
					IF @RtrCnt=1
					BEGIN
						SELECT @OldCtgMainId=A.CtgMainId,@OldCtgLevelId=B.CtgLevelId,@OldRtrClassId=C.RtrClassId 
						FROM RetailerCateGOry A INNER JOIN RetailerCateGOryLevel B ON A.CtgLevelId=B.CtgLevelId
						INNER JOIN RetailerValueClass C ON A.CtgMainId=C.CtgMainId
						INNER JOIN RetailerValueClassMap D ON C.RtrClassId=RtrValueClassId
						WHERE D.RtrId=@RtrId
						INSERT INTO Track_RtrCateGOryandClassChange
						SELECT -4000,@RtrId,@OldCtgLevelId,@OldCtgMainId,@OldRtrClassId,@NewCtgLevelId,@NewCtgMainId, 
						@NewRtrClassId,CONVERT(NVARCHAR(10),GETDATE(),121),CONVERT(NVARCHAR(23),GETDATE(),121),5					
					END
				END
				ELSE
				BEGIN
					IF NOT EXISTS (SELECT DISTINCT RtrId FROM RetailerApprovalStatus WHERE RtrId = @RtrId)
					BEGIN
						INSERT INTO RetailerApprovalStatus(RtrId,RtrCtgId,RtrClassId,
						RtrStatus,RtrName,Geoid,Upload,Mode,ModDate)
						SELECT @RtrId,0,@RtrValueClassId,2,'',0,0,2,GETDATE()
					END
					ELSE
					BEGIN
						UPDATE RetailerApprovalStatus SET RtrCtgId = 0,RtrClassId = @RtrValueClassId,Mode = 2
						WHERE RtrId = @RtrId
					END
				END
				
				SET @sSql='INSERT INTO RetailerValueClassMap 
				(RtrId,RtrValueClassId,Availability,LastModBy,LastModDate,AuthId,AuthDate)
				VALUES('+CAST(@RtrId AS VARCHAR(10))+','+CAST(@RtrValueClassId AS VARCHAR(10))+', 
				1,1,'''+CONVERT(NVARCHAR(10),GETDATE(),121)+''',1,'''+CONVERT(NVARCHAR(10),GETDATE(),121)+''')'
				INSERT INTO Translog(strSql1) VALUES (@sSql)
			END
		END
			
		IF @TransType=2 
		BEGIN
			IF @Po_ErrNo=0
			BEGIN
				DELETE FROM RetailerValueClassMap WHERE RtrId=@RtrId AND RtrValueClassId=@RtrValueClassId
				SET @sSql='DELETE FROM RetailerValueClassMap WHERE RtrId='+CAST(@RtrId AS VARCHAR(10))+' AND RtrValueClassId='+CAST(@RtrValueClassId AS VARCHAR(10))+''
				INSERT INTO Translog(strSql1) VALUES (@sSql)
			END
		END
		
		FETCH NEXT FROM Cur_RetailerValueClassMap INTO @RetailerCode,@ValueClassCode,@CtgCode,@SelectionType		
	END
	CLOSE Cur_RetailerValueClassMap
	DEALLOCATE Cur_RetailerValueClassMap
	--->Added By Nanda on 04/03/2010
	IF EXISTS(SELECT * FROM Retailer WHERE RtrId NOT IN (SELECT DISTINCT RtrId FROM RetailerValueClassMap))
	BEGIN		
		INSERT INTO Errorlog(SlNo,TableName,FieldName,ErrDesc) 
		SELECT 100,'Retailer','Value Class','Value Class is not mapped correctly for Retailer Code:'+RtrCode
		FROM Retailer WHERE RtrId NOT IN (SELECT DISTINCT RtrId FROM RetailerValueClassMap)
		DELETE FROM CoaMaster WHERE CoaId IN (SELECT CoaId FROM Retailer WHERE RtrId NOT IN (SELECT RtrId FROM RetailerValueClassMap))
		DELETE FROM Retailer WHERE RtrId NOT IN (SELECT DISTINCT RtrId FROM RetailerValueClassMap)
		SET @sSql='DELETE FROM CoaMaster WHERE CoaId IN (SELECT CoaId FROM Retailer WHERE RtrId NOT IN (SELECT RtrId FROM RetailerValueClassMap))'
		INSERT INTO Translog(strSql1) VALUES (@sSql)
		SET @sSql='DELETE FROM Retailer WHERE RtrId NOT IN (SELECT DISTINCT RtrId FROM RetailerValueClassMap)'
		INSERT INTO Translog(strSql1) VALUES (@sSql)
	END
	--->Till Here
	RETURN
END
GO
DELETE FROM CustomUpdownload WHERE Module in ('Retailer Master Update') and UpDownload='Download'
INSERT INTO CustomUpdownload(SlNo,SeqNo,Module,Screen,ExportFnName,ImportProcName,
ParkTable,ValidateProcName,TranType,UpDownload,MandatoryFile)
SELECT 282,1,'Retailer Master Update','Retailer Master Update','Proc_Cn2Cs_Dummy','',
'Cn2CS_Prk_RetailerMasterUpdate','Proc_Cn2Cs_RetailerMasterUpdate','Master','Download',1 
GO
DELETE FROM Tbl_DownloadIntegration WHERE  ProcessName in ('Retailer Master Update')
INSERT INTO Tbl_DownloadIntegration(SequenceNo,ProcessName,PrkTableName,SPName,TRowCount,SelectCount,CreatedDate)
SELECT 93,'Retailer Master Update','Cn2CS_Prk_RetailerMasterUpdate','',0,500,CONVERT(VARCHAR(10),GETDATE(),121)
GO
IF  EXISTS (SELECT * FROM sysobjects where NAME='Cn2CS_Prk_RetailerMasterUpdate' AND xtype='U')
DROP TABLE Cn2CS_Prk_RetailerMasterUpdate
GO
CREATE TABLE Cn2CS_Prk_RetailerMasterUpdate(
	[DistCode]			[nvarchar](50) NULL,
	[RtrCode]			[nvarchar](50) NULL,
	[RetailerName]		[nvarchar](100) NULL,
	[RetailerChannal]	[nvarchar](50) NULL,
	[RetailerGroup]		[nvarchar](50) NULL,
	[RetailerClass]		[nvarchar](50) NULL,
	[RetailerStatus]	[nvarchar](50) NULL,	--Active/InActive
	[DownloadFlag]		[varchar](1) NULL,
	[CreatedDate]		[datetime] NULL
) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sysobjects where NAME='RetailerMasterUpdateTrack' AND xtype='U')
BEGIN
CREATE TABLE RetailerMasterUpdateTrack(
	[SlNo]				INT identity(1,1) NOT NULL,
	[RtrCode]			[nvarchar](50) NULL,
	[RetailerName]		[nvarchar](100) NULL,
	[RetailerChannal]	[nvarchar](50) NULL,
	[RetailerGroup]		[nvarchar](50) NULL,
	[RetailerClass]		[nvarchar](50) NULL,
	[RetailerStatus]	[nvarchar](50) NULL,	--Active/InActive
	[OldRetailerName]	[nvarchar](100) NULL,
	[OldRetailerGroup]	[nvarchar](50) NULL,
	[OldRetailerClass]	[nvarchar](50) NULL,
	[OldRetailerStatus]	[int] NULL,
	[CreatedDate]		[datetime] NULL
) ON [PRIMARY]
END
GO
IF EXISTS(SELECT * fROM SYSOBJECTS WHERE NAME='Proc_Cn2Cs_RetailerMasterUpdate' AND xtype='P')
DROP PROCEDURE Proc_Cn2Cs_RetailerMasterUpdate
GO
/*
BEGIN TRAN
--DELETE FROM  ERRORLOG
--SELECT RTRSTATUS,RTRNAME,A.RTRCODE,B.RTRVALUECLASSID from Retailer A
--INNER JOIN RETAILERVALUECLASSMAP B ON A.RTRID=B.RTRID WHERE A.RtrId  IN (1,2,3,6,5)
--SELECT * from RetailerValueClassMAP WHERE RtrId  IN (1,2,3,6,5)
EXEC [Proc_Cn2Cs_RetailerMasterUpdate] 0
select * from RetailerMasterUpdateTrack
--SELECT * FROM Cn2CS_Prk_RetailerMasterUpdate
--SELECT RTRSTATUS,RTRNAME,A.RTRCODE,B.RTRVALUECLASSID from Retailer A
--INNER JOIN RETAILERVALUECLASSMAP B ON A.RTRID=B.RTRID WHERE A.RtrId  IN (1,2,3,6,5)
--SELECT * from RetailerValueClassMAP WHERE RtrId  IN (1,2,3,6,5)
--select * from ERRORLOG
ROLLBACK TRAN
*/
CREATE PROCEDURE Proc_Cn2Cs_RetailerMasterUpdate
(
	@Po_ErrNo INT OUTPUT
)
AS
/**************************************************************************************************************************************************************************************
* PROCEDURE		: Proc_Cn2Cs_RetailerMasterUpdate
* PURPOSE		: To Validate Retailer Master data update from Console
* CREATED		: S.Moorthi
* CREATED DATE	: 25/06/2019
* MODIFIED
**************************************************************************************************************************************************************************************
* VERSION    |  DATE      |	  PERSON	  | USER STORY ID  |  CR/BZ |   REMARKS                      | CODE REVIEW BY     | REVIEW DATE
**************************************************************************************************************************************************************************************
  441		 25/06/2019	    S.Moorthi		CRCRSTPAR0069	 CR		   Need to block the edit option in Sehyog and the group, channel and status should be allowed to edit in console end and this will download and update in 
																		Sehyog end. Excel upload facility require in Console    
**************************************************************************************************************************************************************************************/
SET NOCOUNT ON
BEGIN
	SET @Po_ErrNo=0
	
	CREATE TABLE #ToAvoidRetailer
	(
		RtrCode [nvarchar](50)
	)
	CREATE TABLE #Cn2CS_Prk_RetailerMasterUpdate(
	[RtrCode]			[nvarchar](50),
	[RetailerName]		[nvarchar](100),
	[RetailerChannal]	[nvarchar](50),
	[RetailerGroup]		[nvarchar](50),
	[RetailerClass]		[nvarchar](50),
	[RetailerStatus]	[nvarchar](50)
	)
	
	DELETE FROM Cn2CS_Prk_RetailerMasterUpdate WHERE DownLoadFlag='Y'
	SELECT RtrCode,MAX(CreatedDate) as CreatedDate
	INTO #PrgMaxDate
	FROM Cn2CS_Prk_RetailerMasterUpdate (NOLOCK) 
	WHERE DownLoadFlag='D' GROUP BY RtrCode
	
	INSERT INTO #Cn2CS_Prk_RetailerMasterUpdate
	([RtrCode],[RetailerName],[RetailerChannal],[RetailerGroup],[RetailerClass],[RetailerStatus])
	SELECT DISTINCT A.[RtrCode],[RetailerName],[RetailerChannal],[RetailerGroup],[RetailerClass],[RetailerStatus]
	FROM Cn2CS_Prk_RetailerMasterUpdate A (NOLOCK) 
	INNER JOIN #PrgMaxDate B ON A.RtrCode=B.RtrCode and A.CreatedDate=B.CreatedDate
	WHERE DownLoadFlag='D'
	
	INSERT INTO #ToAvoidRetailer(RtrCode)
	SELECT DISTINCT RtrCode FROM #Cn2CS_Prk_RetailerMasterUpdate M WHERE RetailerStatus NOT IN ('Active','InActive')
	
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 1,'RetailerMasterUpdate','RtrCode','Retailer Status shoud be Active/InActive '+ M.RtrCode FROM
	#Cn2CS_Prk_RetailerMasterUpdate M WHERE RetailerStatus NOT IN ('Active','InActive')

		
	INSERT INTO #ToAvoidRetailer(RtrCode)
	SELECT DISTINCT RtrCode FROM #Cn2CS_Prk_RetailerMasterUpdate M WHERE NOT EXISTS(SELECT * FROM RETAILER R WHERE R.CmpRtrCode=M.RtrCode)
	
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 1,'RetailerMasterUpdate','RtrCode','Retailer Code Not Available '+ M.RtrCode 
	FROM #Cn2CS_Prk_RetailerMasterUpdate M WHERE NOT EXISTS(SELECT * FROM RETAILER R WHERE R.CmpRtrCode=M.RtrCode)
	
	
	INSERT INTO #ToAvoidRetailer(RtrCode)
	SELECT DISTINCT RtrCode FROM #Cn2CS_Prk_RetailerMasterUpdate M WHERE 
	(ISNULL(RetailerStatus,'')='' OR ISNULL([RetailerChannal],'')='' OR ISNULL([RetailerGroup],'')='' 
	 OR ISNULL([RetailerName],'')='' OR ISNULL([RetailerClass],'')='')
	
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 1,'RetailerMasterUpdate','RtrCode','Retailer Status/Name/Channel/Group/Class can not be blank '+ RtrCode
	FROM #Cn2CS_Prk_RetailerMasterUpdate M WHERE 
	(ISNULL(RetailerStatus,'')='' OR ISNULL([RetailerChannal],'')='' OR ISNULL([RetailerGroup],'')='' 
	 OR ISNULL([RetailerName],'')='' OR ISNULL([RetailerClass],'')='')
	
	
	INSERT INTO #ToAvoidRetailer(RtrCode)
	SELECT DISTINCT RtrCode FROM #Cn2CS_Prk_RetailerMasterUpdate M WHERE NOT EXISTS(
	SELECT A.CtgCode,A.CtgLevelId,B.CtgCode,B.CtgLevelId,ValueClassCode  FROM RetailerCategory A 
	INNER JOIN RetailerCategory B ON B.CtgLinkId=A.CtgMainId  
	INNER JOIN RetailerValueClass C ON C.CtgMainId=B.CtgMainId 
	WHERE M.RetailerChannal=A.CtgCode AND M.RetailerGroup=B.CtgCode AND M.RetailerClass=C.ValueClassCode)
	
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 1,'RetailerMasterUpdate','RtrCode','Retailer Channel/Group/Value Class details not available '+ M.RtrCode FROM
	#Cn2CS_Prk_RetailerMasterUpdate M WHERE NOT EXISTS(
	SELECT A.CtgCode,A.CtgLevelId,B.CtgCode,B.CtgLevelId,ValueClassCode  FROM RetailerCategory A 
	INNER JOIN RetailerCategory B ON B.CtgLinkId=A.CtgMainId  
	INNER JOIN RetailerValueClass C ON C.CtgMainId=B.CtgMainId 
	WHERE M.RetailerChannal=A.CtgCode AND M.RetailerGroup=B.CtgCode AND M.RetailerClass=C.ValueClassCode) 
	
	INSERT INTO RetailerMasterUpdateTrack(RtrCode,RetailerName,RetailerChannal,RetailerGroup,RetailerClass,
	RetailerStatus,OldRetailerName,OldRetailerGroup,OldRetailerClass,OldRetailerStatus,CreatedDate)	
	SELECT B.RtrCode,B.RetailerName,RetailerChannal,RetailerGroup,RetailerClass,
	RetailerStatus,A.RtrName,RC.CtgCode,RVC.ValueClassCode,A.RtrStatus,GETDATE() 
	FROM Retailer A (NOLOCK)
	INNER JOIN RetailerValueClassMap RVCM(NOLOCK) ON A.RtrId=RVCM.RtrId 
	INNER JOIN RetailerValueClass RVC(NOLOCK) ON RVC.RtrClassId=RVCM.RtrValueClassId 
	INNER JOIN RetailerCategory RC(NOLOCK) ON RC.CtgMainId=RVC.CtgMainId 	
	INNER JOIN #Cn2CS_Prk_RetailerMasterUpdate B ON A.CmpRtrCode=B.RtrCode 
	WHERE NOT EXISTS(SELECT * FROM #ToAvoidRetailer N  WHERE A.CmpRtrCode=N.RtrCode AND B.RtrCode=N.RtrCode)  
	
	UPDATE A SET A.RtrName=B.RetailerName,A.RtrStatus=(CASE WHEN B.RetailerStatus='Active' THEN 1 ELSE 0 END) FROM Retailer A 
	INNER JOIN #Cn2CS_Prk_RetailerMasterUpdate B ON A.CmpRtrCode=B.RtrCode 
	WHERE NOT EXISTS(SELECT * FROM #ToAvoidRetailer N  WHERE A.CmpRtrCode=N.RtrCode AND B.RtrCode=N.RtrCode)
	
	UPDATE A SET A.RtrValueClassId=RVC.RtrClassId FROM RetailerValueClassMap A 
	INNER JOIN Retailer B ON A.RtrId=B.RtrId
	INNER JOIN #Cn2CS_Prk_RetailerMasterUpdate M ON M.RtrCode=B.CmpRtrCode 
	INNER JOIN RetailerValueClass RVC(NOLOCK) ON RVC.ValueClassCode=M.RetailerClass
	INNER JOIN RetailerCategory RC(NOLOCK) ON RC.CtgCode=M.RetailerGroup AND RC.CtgMainId=RVC.CtgMainId 
	INNER JOIN RetailerCategory RC1(NOLOCK) ON RC1.CtgCode=M.RetailerChannal AND RC1.CtgMainId=RC.CtgLinkId  
	
	
	UPDATE C SET DownloadFlag='Y' FROM  Cn2CS_Prk_RetailerMasterUpdate C 
	INNER JOIN #Cn2CS_Prk_RetailerMasterUpdate M ON M.RtrCode=C.RtrCode 
	WHERE NOT EXISTS(SELECT * FROM #ToAvoidRetailer N  WHERE C.RtrCode=N.RtrCode) 
	
RETURN 
END
GO
--Till Here S.Moorthi
--CRCRSTPAR0064(Include validation procedure)
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='ETLRetailerErrorlog' AND TYPE='U')
DROP TABLE ETLRetailerErrorlog
GO
CREATE TABLE ETLRetailerErrorlog
(
	[SlNo] [int] NULL,
	[RtrCode] [nvarchar](100) NULL,
	[ErrDesc] [nvarchar](500) NULL
)
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_Validate_ETLRetailerDetails' AND TYPE='P')
DROP PROCEDURE Proc_Validate_ETLRetailerDetails
GO
CREATE PROCEDURE Proc_Validate_ETLRetailerDetails
AS
/************************************************
* FUNCTION	 : Fn_ValidateParentChild
* PURPOSE    : TO RETURN MISMATCH CHILD DETAILS FOR THE SELECTED RETAILER
* CREATED BY : MOHANA S 
* CREATED ON : 2019-06-25
* PMS NO	 : CRCRSTPAR0064 
*************************************************/   
BEGIN

TRUNCATE TABLE ETLRetailerErrorlog

CREATE TABLE #AVOIDRETAILER
(
RTRCODE NVARCHAR(100)
)

--SELECT * FROM ETL_PRK_RETAILER
INSERT INTO ETLRetailerErrorlog 
SELECT 1000,A.[Retailer Code],'GEO NOT AVAILABLE' FROM ETL_PRK_RETAILER A WHERE NOT EXISTS (SELECT  GeoCode FROM Geography B WHERE A.[Geography Hierarchy Value] = B.GeoCode )
INSERT INTO #AVOIDRETAILER 
SELECT A.[Retailer Code]  FROM ETL_PRK_RETAILER A WHERE NOT EXISTS (SELECT  GeoCode FROM Geography B WHERE A.[Geography Hierarchy Value] = B.GeoCode )

INSERT INTO ETLRetailerErrorlog 
SELECT 1000,A.[Retailer Code],'DELIVERY CODE NOT AVAILABLE' FROM ETL_PRK_RETAILER A WHERE NOT EXISTS (SELECT  RMCODE FROM RouteMaster B WHERE A.[Delivery Route Code] = B.RMCODE )
INSERT INTO #AVOIDRETAILER 
SELECT A.[Retailer Code] FROM ETL_PRK_RETAILER A WHERE NOT EXISTS (SELECT  RMCODE FROM RouteMaster B WHERE A.[Delivery Route Code] = B.RMCODE )

--INSERT INTO ETLRetailerErrorlog 
--SELECT 1000,A.[Retailer Code],'Potential Class Code Not Available' FROM ETL_PRK_RETAILER A WHERE NOT EXISTS (SELECT  PotentialClassCode FROM RetailerPotentialClass B WHERE  B.PotentialClassCode = A.[Potential Class Code] )
--INSERT INTO #AVOIDRETAILER 
--SELECT A.[Retailer Code] FROM ETL_PRK_RETAILER A WHERE NOT EXISTS (SELECT  PotentialClassCode FROM RetailerPotentialClass B WHERE  B.PotentialClassCode = A.[Potential Class Code] )

INSERT INTO ETLRetailerErrorlog 
SELECT 1000,A.[Retailer Code],'Retailer Tax Group Not Available' FROM ETL_PRK_RETAILER A WHERE NOT EXISTS (SELECT  RtrGroup FROM TaxGroupSetting B WHERE  B.RtrGroup = A.[Tax Group] )
INSERT INTO #AVOIDRETAILER 
SELECT A.[Retailer Code] FROM ETL_PRK_RETAILER A  WHERE NOT EXISTS (SELECT  RtrGroup FROM TaxGroupSetting B WHERE  B.RtrGroup = A.[Tax Group] )
--INSERT INTO ETLRetailerErrorlog 
--SELECT 1000,A.[Retailer Code],'Village Code Code Not Available' FROM ETL_PRK_RETAILER A WHERE NOT EXISTS (SELECT  VillageCode FROM RouteVillage B WHERE  B.VillageCode = A.[Village Code] )
--INSERT INTO #AVOIDRETAILER 
--SELECT A.[Retailer Code] FROM ETL_PRK_RETAILER A  WHERE NOT EXISTS (SELECT  VillageCode FROM RouteVillage B WHERE  B.VillageCode = A.[Village Code] )
INSERT INTO ETLRetailerErrorlog 
SELECT 1000,[Retailer Code],'Retailer Code/Name Should not Empty' FROM ETL_PRK_RETAILER WHERE ISNULL([Retailer Code],'') = '' OR ISNULL([Retailer Name] ,'')= ''
INSERT INTO #AVOIDRETAILER 
SELECT [Retailer Code]    FROM ETL_PRK_RETAILER WHERE ISNULL([Retailer Code],'') = '' OR ISNULL([Retailer Name] ,'')= ''

INSERT INTO ETLRetailerErrorlog 
SELECT 1000,[Retailer Code],'Retailer Address  should not be empty' FROM ETL_PRK_RETAILER WHERE ISNULL(Address1,'') = '' 
INSERT INTO #AVOIDRETAILER 
SELECT [Retailer Code]    FROM ETL_PRK_RETAILER WHERE ISNULL(Address1,'') = '' 

INSERT INTO ETLRetailerErrorlog 
SELECT 1000,[Retailer Code],'Retailer Pincode  should not be empty' FROM ETL_PRK_RETAILER WHERE len([Pin Code]) = 0 
INSERT INTO #AVOIDRETAILER 
SELECT [Retailer Code]    FROM ETL_PRK_RETAILER WHERE len([Pin Code]) = 0 

INSERT INTO ETLRetailerErrorlog 
SELECT 1000,[Retailer Code],'Key Account  should not be empty' FROM ETL_PRK_RETAILER WHERE isnull([Key Account],'') = '' 
INSERT INTO #AVOIDRETAILER 
SELECT [Retailer Code]    FROM ETL_PRK_RETAILER WHERE  isnull([Key Account],'') = '' 

INSERT INTO ETLRetailerErrorlog 
SELECT 1000,[Retailer Code],'Coverage Mode Type does not exists' FROM ETL_PRK_RETAILER WHERE   LTRIM(RTRIM([Coverage Mode]))NOT IN ('Order Booking','Van Sales','Counter Sales')
INSERT INTO #AVOIDRETAILER 
SELECT [Retailer Code]    FROM ETL_PRK_RETAILER WHERE  LTRIM(RTRIM([Coverage Mode])) NOT IN ('Order Booking','Van Sales','Counter Sales')
	 
INSERT INTO ETLRetailerErrorlog 
SELECT 1000,[Retailer Code],'Registration Date should not be empty' FROM ETL_PRK_RETAILER WHERE LTRIM(RTRIM([Registration Date]))='' OR ISDATE([Registration Date])=0
INSERT INTO #AVOIDRETAILER 
SELECT [Retailer Code]    FROM ETL_PRK_RETAILER WHERE  LTRIM(RTRIM([Registration Date]))='' OR ISDATE([Registration Date])=0
INSERT INTO ETLRetailerErrorlog 
SELECT 1000,[Retailer Code],'Registration Date should not be empty' FROM ETL_PRK_RETAILER WHERE LTRIM(RTRIM([Day Off]))=''
INSERT INTO #AVOIDRETAILER 
SELECT [Retailer Code]    FROM ETL_PRK_RETAILER WHERE LTRIM(RTRIM([Day Off]))='' 
 		 
INSERT INTO ETLRetailerErrorlog 
SELECT 1000,[Retailer Code],'Day Off Type is not available' FROM ETL_PRK_RETAILER WHERE  LTRIM(RTRIM([Day Off])) NOT IN ('Sunday','Monday' ,'Tuesday','Wednesday','Thursday','Friday','Saturday')
INSERT INTO #AVOIDRETAILER 
SELECT [Retailer Code]    FROM ETL_PRK_RETAILER WHERE  LTRIM(RTRIM([Day Off])) NOT IN ('Sunday','Monday' ,'Tuesday','Wednesday','Thursday','Friday','Saturday')

INSERT INTO ETLRetailerErrorlog 
SELECT 1000,[Retailer Code],'Taxable should not be empty' FROM ETL_PRK_RETAILER WHERE  LTRIM(RTRIM(Taxable))=''
INSERT INTO #AVOIDRETAILER 
SELECT [Retailer Code]    FROM ETL_PRK_RETAILER WHERE  LTRIM(RTRIM(Taxable))=''

INSERT INTO ETLRetailerErrorlog 
SELECT 1000,[Retailer Code],'Taxable should not be empty' FROM ETL_PRK_RETAILER WHERE  LTRIM(RTRIM(status ))=''
INSERT INTO #AVOIDRETAILER 
SELECT [Retailer Code]    FROM ETL_PRK_RETAILER WHERE  LTRIM(RTRIM(status))=''

INSERT INTO ETLRetailerErrorlog 
SELECT 1000,[Retailer Code],'TaxType should not be empty' FROM ETL_PRK_RETAILER WHERE  LTRIM(RTRIM([Tax Type]))=''
INSERT INTO #AVOIDRETAILER 
SELECT [Retailer Code]    FROM ETL_PRK_RETAILER WHERE  LTRIM(RTRIM([Tax Type]))=''

 
INSERT INTO ETLRetailerErrorlog 
select 1000,[Retailer Code]  ,'Phone No must be in unique'
  FRom ETL_Prk_Retailer WHERE [Phone No] IN (
select [Phone No] from (
SELECT [Phone No] ,Count([retailer code]) cnt from ETL_PRK_RETAILER group by  [Phone No] having count([retailer code])>1)A)
 
 insert into #AVOIDRETAILER 
 select  [Retailer Code]  
  FRom ETL_Prk_Retailer WHERE [Phone No] IN (
select [Phone No] from (
SELECT [Phone No] ,Count([retailer code]) cnt from ETL_PRK_RETAILER group by  [Phone No] having count([retailer code])>1)A)


INSERT INTO ETLRetailerErrorlog 
select 1000,[Retailer Code]  ,'Phone No should not be empty'  FRom ETL_Prk_Retailer WHERE ISNULL([Phone No] ,'') =''
 
 insert into #AVOIDRETAILER 
select  [Retailer Code]  FRom ETL_Prk_Retailer WHERE ISNULL([Phone No] ,'') ='' 

--INSERT INTO ETLRetailerErrorlog 
--SELECT 1000,[Retailer Code],'Credit Bills value Should be Number' FROM ETL_PRK_RETAILER WHERE   (LTRIM(RTRIM([Credit Limit]))=0)  or (ISNUMERIC([Credit Limit])=0)
--INSERT INTO #AVOIDRETAILER 
--SELECT [Retailer Code]    FROM ETL_PRK_RETAILER WHERE  (LTRIM(RTRIM([Credit Limit]))=0)  or (ISNUMERIC([Credit Limit])=0)
--INSERT INTO ETLRetailerErrorlog 
--SELECT 1000,[Retailer Code],'Credit Days value Should be Number' FROM ETL_PRK_RETAILER WHERE  (LTRIM(RTRIM([Credit Days]))=0) OR  (ISNUMERIC([Credit Days])=0)
--INSERT INTO #AVOIDRETAILER 
--SELECT [Retailer Code]    FROM ETL_PRK_RETAILER WHERE (LTRIM(RTRIM([Credit Days]))=0) OR  (ISNUMERIC([Credit Days])=0)
--INSERT INTO ETLRetailerErrorlog 
--SELECT 1000,[Retailer Code],'Cash Discount Percentage value Should be Number' FROM ETL_PRK_RETAILER WHERE  (LTRIM(RTRIM([Cash Discount Percentage]))=0) OR  (ISNUMERIC([Cash Discount Percentage] )=0)
--INSERT INTO #AVOIDRETAILER 
--SELECT [Retailer Code]    FROM ETL_PRK_RETAILER WHERE  LTRIM(RTRIM([Cash Discount Percentage]))=0 OR  ISNUMERIC([Cash Discount Percentage] )=0
--INSERT INTO ETLRetailerErrorlog 
--SELECT 1000,[Retailer Code],'License Number Expiry Date should not be empty' FROM ETL_PRK_RETAILER WHERE  LTRIM(RTRIM([License Number]))<>'' OR LTRIM(RTRIM([License Number]))=''
--INSERT INTO #AVOIDRETAILER 
--SELECT [Retailer Code]    FROM ETL_PRK_RETAILER WHERE LTRIM(RTRIM([License Number]))<>'' OR LTRIM(RTRIM([License Number]))=''
--INSERT INTO ETLRetailerErrorlog 
--SELECT 1000,[Retailer Code],'License Number Expiry Date should not be empty' FROM ETL_PRK_RETAILER WHERE LTRIM(RTRIM([Drug License Number]))<>'' OR  LTRIM(RTRIM([Drug License Number]))=''
--INSERT INTO #AVOIDRETAILER 
--SELECT [Retailer Code]    FROM ETL_PRK_RETAILER WHERE LTRIM(RTRIM([Drug License Number]))<>'' OR  LTRIM(RTRIM([Drug License Number]))=''
INSERT INTO ETLRetailerErrorlog 
SELECT 1000,[Retailer Code],'Retailer Frequency  should not be empty' FROM ETL_PRK_RETAILER WHERE  LTRIM(RTRIM([Retailer Frequency]))='' OR LTRIM(RTRIM([Retailer Frequency])) NOT IN ('Weekly','Bi-Weekly','Fort Nightly','Monthly','Daily')
INSERT INTO #AVOIDRETAILER 
SELECT [Retailer Code] FROM ETL_PRK_RETAILER WHERE   (LTRIM(RTRIM([Retailer Frequency]))='') OR (LTRIM(RTRIM([Retailer Frequency])) NOT IN ('Weekly','Bi-Weekly','Fort Nightly','Monthly','Daily'))

--RETIALER ROUTE
INSERT INTO ETLRetailerErrorlog 
SELECT 1000,[Retailer Code],'ROUTE CODE NOT AVAILABLE' FROM  ETL_PRK_RETAILERROUTE  A 
WHERE NOT EXISTS (SELECT RMCODE FROM ROUTEMASTER B WHERE A.[Route Code] = B.RMCode )
INSERT INTO #AVOIDRETAILER 
SELECT [Retailer Code] FROM ETL_PRK_RETAILERROUTE  A WHERE NOT EXISTS (SELECT RMCODE FROM ROUTEMASTER B WHERE A.[Route Code] = B.RMCode )
		  
INSERT INTO ETLRetailerErrorlog 
SELECT 1000,[Retailer Code],'SELECTION TYPE NOT AVAILABLE' FROM  ETL_PRK_RETAILERROUTE  A WHERE A.[Selection Type] =''
INSERT INTO #AVOIDRETAILER 
SELECT [Retailer Code] FROM ETL_PRK_RETAILERROUTE  A WHERE A.[Selection Type] ='' 

--RETAILER SHIPPING ADDRESS
INSERT INTO ETLRetailerErrorlog 
SELECT 1000,[Retailer Code],'Retailer Not available in Retailer Shipping Address' FROM ETL_Prk_Retailer A WHERE [Retailer Code]
 NOT IN (SELECT [Retailer Code] FROM  ETL_Prk_RetailerShippingAddress )
INSERT INTO #AVOIDRETAILER
SELECT [Retailer Code] FROM ETL_Prk_Retailer A WHERE [Retailer Code] NOT IN (SELECT [Retailer Code] FROM  ETL_Prk_RetailerShippingAddress )

--RETAILER SELECTION TYPE
INSERT INTO ETLRetailerErrorlog 
SELECT 1000,[Retailer Code],'Value Class Selection Type should not be empty in Retailer VALUE CLASS'  FROM ETL_Prk_RetailerValueClassMap WHERE ISNULL([Selection Type],'') = ''
INSERT INTO #AVOIDRETAILER
SELECT [Retailer Code] FROM ETL_Prk_RetailerValueClassMap WHERE ISNULL([Selection Type],'') = ''

--RETAILER CATEGORY AND CLASS
INSERT INTO ETLRetailerErrorlog
SELECT  1000,[Retailer Code],'CLASS AND CATEGORY MAPPING NOT DONE PROPERLY FOR RETAILER'
FROM ETL_Prk_RetailerValueClassMap E
WHERE NOT EXISTS (
SELECT DISTINCT Rc.CtgCode ,ValueClassCode 
FROM RetailerCategory R
INNER JOIN RetailerCategory RC  ON R.CtgMainId  = RC.CtgLinkId 
INNER JOIN RetailerValueClass RVC ON  RC.CtgMainId=RVC.CtgMainId
WHERE RC.CtgCode = E.[Category Level Value] 
AND E.[Value Class Code] = RVC.ValueClassCode)

INSERT INTO #AVOIDRETAILER 
SELECT [Retailer Code]  FROM ETL_Prk_RetailerValueClassMap E
WHERE NOT EXISTS (
SELECT DISTINCT Rc.CtgCode ,ValueClassCode 
FROM RetailerCategory R
INNER JOIN RetailerCategory RC  ON R.CtgMainId  = RC.CtgLinkId 
INNER JOIN RetailerValueClass RVC ON  RC.CtgMainId=RVC.CtgMainId
WHERE RC.CtgCode = E.[Category Level Value] 
AND E.[Value Class Code] = RVC.ValueClassCode)

DELETE FROM ETL_Prk_Retailer WHERE [Retailer Code] IN (SELECT RTRCODE FROM #AVOIDRETAILER)
DELETE FROM ETL_Prk_RetailerShippingAddress WHERE [Retailer Code] IN (SELECT RTRCODE FROM #AVOIDRETAILER)
DELETE FROM ETL_Prk_RetailerValueClassMap  WHERE [Retailer Code] IN (SELECT RTRCODE FROM #AVOIDRETAILER)
DELETE FROM ETL_Prk_RetailerRoute WHERE [Retailer Code] IN (SELECT RTRCODE FROM #AVOIDRETAILER)
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_ValidateRetailerMaster' AND TYPE='P')
DROP PROCEDURE Proc_ValidateRetailerMaster
GO
/*
BEGIN TRANSACTION
Exec Proc_ValidateRetailerMaster 0
SELECT * FROM Retailer
SELECT * FROM ErrorLog
ROLLBACK TRANSACTION
*/
CREATE PROCEDURE Proc_ValidateRetailerMaster
(
	@Po_ErrNo INT OUTPUT
)
AS
/*********************************
* PROCEDURE		: Proc_ValidateRetailerMaster
* PURPOSE		: To Insert and Update records  from xml file in the Table Retailer
* CREATED		: MarySubashini.S
* CREATED DATE	: 13/09/2007
* MODIFIED
  * DATE         AUTHOR				CR/BZ	   USER STORY ID	DESCRIPTION                         
*****************************************************************************************************
  2013/10/10   Sathishkumar V		CR								Junk Characters Removed  
  10/05/2018   S.Moorthi			CR         CRCRSTPAR0001		Retailer Approval process - Manual
  24-06-2019   S.Mohana				CR		   CRCRSTPAR0064		Include validation procedure 
  26/06/2019   S.Moorthi			CR		  CRCRSTPAR0071	  Salesman and Route master access level changes in user login
*****************************************************************************/ 
SET NOCOUNT ON
BEGIN
	DECLARE @RetailerCode AS NVARCHAR(100)
	DECLARE @RetailerName AS NVARCHAR(100)
	DECLARE	@Address1 AS NVARCHAR(100)
	DECLARE	@Address2 AS NVARCHAR(100)
	DECLARE	@Address3 AS NVARCHAR(100)
	DECLARE	@PinCode AS NVARCHAR(100)
	DECLARE	@PhoneNo AS NVARCHAR(100)
	DECLARE	@EmailId AS NVARCHAR(100)
	DECLARE	@KeyAccount AS NVARCHAR(100)
	DECLARE	@CoverageMode AS NVARCHAR(100)
	DECLARE	@RegistrationDate AS DATETIME
	DECLARE	@DayOff	AS NVARCHAR(100)
	DECLARE	@Status	AS NVARCHAR(100)
	DECLARE	@Taxable AS NVARCHAR(100)
	DECLARE	@TaxType AS NVARCHAR(100)
	DECLARE	@TINNumber AS NVARCHAR(100)
	DECLARE @CSTNumber AS NVARCHAR(100)
	DECLARE	@TaxGroup AS NVARCHAR(100)
	DECLARE	@CreditBills AS NVARCHAR(100)
	DECLARE	@CreditLimit AS NVARCHAR(100)
	DECLARE	@CreditDays AS NVARCHAR(100)
	DECLARE	@CashDiscountPercentage AS NVARCHAR(100)
	DECLARE	@CashDiscountCondition AS NVARCHAR(100)
	DECLARE	@CashDiscountLimitValue AS NVARCHAR(100)
	DECLARE	@LicenseNumber AS NVARCHAR(100)
	DECLARE	@LicNumberExDate AS NVARCHAR(10)
	DECLARE	@DrugLicNumber AS NVARCHAR(100)
	DECLARE	@DrugLicExDate AS NVARCHAR(10)
	DECLARE	@PestLicNumber	AS NVARCHAR(100)
	DECLARE	@PestLicExDate AS NVARCHAR(10)
	DECLARE	@GeographyHierarchyValue AS NVARCHAR(100)
	DECLARE	@DeliveryRoute	AS NVARCHAR(100)
	DECLARE	@ResidencePhoneNo AS NVARCHAR(100)
	DECLARE	@OfficePhoneNo 	AS NVARCHAR(100)
	DECLARE	@DepositAmount 	AS NVARCHAR(100)
	DECLARE	@VillageCode 	AS NVARCHAR(100)
	DECLARE	@PotentialClassCode AS NVARCHAR(100)
	DECLARE	@RetailerType AS NVARCHAR(100)
	DECLARE	@RetailerFrequency AS NVARCHAR(100)
	DECLARE	@RtrCrDaysAlert AS NVARCHAR(100)
	DECLARE	@RtrCrBillAlert AS NVARCHAR(100)
	DECLARE	@RtrCrLimitAlert AS NVARCHAR(100)
	DECLARE @GeoMainId AS INT
	DECLARE @RMId AS INT
	DECLARE @VillageId AS INT
	DECLARE @RtrId AS INT
	DECLARE @TaxGroupId AS INT
	DECLARE @RtrClassId AS INT
	DECLARE @Taction AS INT
	DECLARE @Tabname AS NVARCHAR(100)
	DECLARE @CntTabname AS NVARCHAR(100)
	DECLARE @Fldname AS NVARCHAR(100)
	DECLARE @ErrDesc AS NVARCHAR(1000)
	DECLARE @sSql AS NVARCHAR(4000)
	DECLARE @CoaId AS INT
	DECLARE @AcCode AS NVARCHAR(1000)
	DECLARE @CmpRtrCode AS NVARCHAR(200)	
	

	EXEC Proc_Validate_ETLRetailerDetails --added by Mohana 


	SET @CntTabname='Retailer'
	SET @Fldname='RtrId'
	SET @Tabname = 'ETL_Prk_Retailer'
	SET @Taction=0
	SET @Po_ErrNo=0
	SET @VillageId=0
	DECLARE Cur_Retailer CURSOR
	FOR SELECT dbo.Fn_Removejunk(ISNULL([Retailer Code],'')),dbo.Fn_Removejunk(ISNULL([Retailer Name],'')),dbo.Fn_Removejunk(ISNULL([Address1],'')),
		dbo.Fn_Removejunk(ISNULL([Address2],'')),dbo.Fn_Removejunk(ISNULL([Address3],'')),
		ISNULL([Pin Code],'0'),ISNULL([Phone No],'0'),dbo.Fn_Removejunk(ISNULL(EmailId,'')),ISNULL([Key Account],''),
		ISNULL([Coverage Mode],''),CAST([Registration Date] AS DATETIME) AS [Registration Date],ISNULL([Day Off],''),
		ISNULL([Status],''),ISNULL([Taxable],''),ISNULL([Tax Type],''),ISNULL([TIN Number],''),
		ISNULL([CST Number],''),ISNULL([Tax Group],''),ISNULL([Credit Bills],'0'),ISNULL([Credit Limit],'0'),
		ISNULL([Credit Days],'0'),ISNULL([Cash Discount Percentage],'0'),ISNULL([Cash Discount Condition],''),
		ISNULL([Cash Discount Limit Value],'0'),ISNULL([License Number],''),
		ISNULL([License Number Expiry Date],NULL),
		ISNULL([Drug License Number],''),ISNULL([Drug License Number Expiry Date],NULL),
		ISNULL([Pesticide License Number],''),ISNULL([Pesticide License Number Expiry Date],NULL),
		ISNULL([Geography Hierarchy Value],''),ISNULL([Delivery Route Code],''),ISNULL([Village Code],''),
		ISNULL([Residence Phone No],''),ISNULL([Office Phone No],''),ISNULL([Deposit Amount],'0'),
		ISNULL([Potential Class Code],''),
		ISNULL([Retailer Type],'') ,
		ISNULL([Retailer Frequency],''),ISNULL([Credit Days Alert],'') ,
		ISNULL([Credit Bills Alert],'') ,ISNULL([Credit Limit Alert],'')
	FROM ETL_Prk_Retailer WITH(NOLOCK) ORDER BY [Retailer Code]
	OPEN Cur_Retailer
	FETCH NEXT FROM Cur_Retailer INTO @RetailerCode,@RetailerName,@Address1,@Address2,@Address3,@PinCode,@PhoneNo,@EmailId,@KeyAccount,@CoverageMode,@RegistrationDate,@DayOff,
	@Status,@Taxable,@TaxType,@TINNumber,@CSTNumber,@TaxGroup,@CreditBills,@CreditLimit,@CreditDays,
	@CashDiscountPercentage,@CashDiscountCondition,@CashDiscountLimitValue,@LicenseNumber,
	@LicNumberExDate,@DrugLicNumber,@DrugLicExDate,@PestLicNumber,@PestLicExDate,@GeographyHierarchyValue,
	@DeliveryRoute,@VillageCode,@ResidencePhoneNo,@OfficePhoneNo,@DepositAmount,@PotentialClassCode,
	@RetailerType,@RetailerFrequency,@RtrCrDaysAlert,@RtrCrBillAlert,@RtrCrLimitAlert
	WHILE @@FETCH_STATUS=0		
	BEGIN
		SET @RtrId=0
		
		IF NOT EXISTS  (SELECT * FROM Geography WHERE GeoCode = @GeographyHierarchyValue )
  		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Geogrpahy Code: ' + @GeographyHierarchyValue + ' is not available'  		
			INSERT INTO Errorlog VALUES (1,@Tabname,'GeographyHierarchyValue',@ErrDesc)
		END
		ELSE
		BEGIN
			SELECT @GeoMainId =GeoMainId FROM Geography WHERE GeoCode = @GeographyHierarchyValue
		END
		IF NOT EXISTS  (SELECT * FROM RouteMaster WHERE RMCode = @DeliveryRoute AND RMSRouteType=2 )
  		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Route Code ' + @DeliveryRoute + ' is not available'  		
			INSERT INTO Errorlog VALUES (2,@Tabname,'DeliveryRoute',@ErrDesc)
		END
		ELSE
		BEGIN		
			SELECT @RMId =RMId FROM RouteMaster WHERE RMCode = @DeliveryRoute
		END
		IF LTRIM(RTRIM(@PotentialClassCode)) <> ''
		BEGIN
			IF NOT EXISTS  (SELECT * FROM RetailerPotentialClass WHERE PotentialClassCode = @PotentialClassCode )
	  		BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Potential Class Code ' + @PotentialClassCode + ' is not available'  		
				INSERT INTO Errorlog VALUES (3,@Tabname,'PotentialClassCode',@ErrDesc)
			END
			ELSE
			BEGIN
				SELECT @RtrClassId =RtrClassId FROM RetailerPotentialClass WHERE PotentialClassCode = @PotentialClassCode
			END
		END
		SELECT @TaxGroupId = 0
		IF LTRIM(RTRIM(@TaxGroup)) <> ''
		BEGIN
			IF NOT EXISTS  (SELECT * FROM TaxGroupSetting WHERE RtrGroup = @TaxGroup)
	  		BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Retailer Tax Group Code ' + @TaxGroup + ' is not available'  		
				INSERT INTO Errorlog VALUES (4,@Tabname,'TaxGroup',@ErrDesc)
			END
			ELSE
			BEGIN
				SELECT @TaxGroupId =TaxGroupId FROM TaxGroupSetting WHERE RtrGroup = @TaxGroup
			END
		END
		IF LTRIM(RTRIM(@VillageCode)) <> ''
		BEGIN
			IF NOT EXISTS  (SELECT * FROM RouteVillage WHERE VillageCode = @VillageCode)
	  		BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Village Code ' + @VillageCode + ' is not available'  		
				INSERT INTO Errorlog VALUES (5,@Tabname,'VillageCode',@ErrDesc)
			END
			ELSE
			BEGIN
				SELECT @VillageId =VillageId FROM RouteVillage WHERE VillageCode = @VillageCode
			END
		END
		IF LTRIM(RTRIM(@RetailerCode))<>''
		BEGIN
			IF EXISTS  (SELECT * FROM Retailer WHERE RtrCode = @RetailerCode )
			BEGIN
				SET @Taction=2
				SELECT @RtrId=RtrId from Retailer WHERE RtrCode = @RetailerCode
			END
			ELSE
			BEGIN
				SET @Taction=1
			END
		END
		ELSE
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Retailer Code should not be empty '  		
			INSERT INTO Errorlog VALUES (6,@Tabname,'RetailerCode',@ErrDesc)
		END
		IF LTRIM(RTRIM(@RetailerName))=''
		BEGIN
			SET @Po_ErrNo=1	
			SET @Taction=0
			SET @ErrDesc = 'Retailer Name should not be empty'		
			INSERT INTO Errorlog VALUES (7,@Tabname,'RetailerName',@ErrDesc)
		END	
		IF LTRIM(RTRIM(@Address1))=''
		BEGIN
			SET @Po_ErrNo=1	
			SET @Taction=0
			SET @ErrDesc = 'Retailer Address  should not be empty'		
			INSERT INTO Errorlog VALUES (8,@Tabname,'Address',@ErrDesc)
		END
		IF LEN(@PinCode)<>0
		BEGIN
			IF ISNUMERIC(@PinCode)=0
			BEGIN
				SET @Po_ErrNo=1	
				SET @Taction=0
				SET @ErrDesc = 'PinCode is not in correct format'		
				INSERT INTO Errorlog VALUES (9,@Tabname,'PinCode',@ErrDesc)
			END	
		END					
				
		IF LTRIM(RTRIM(@KeyAccount))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'KeyAccount should not be empty'		
			INSERT INTO Errorlog VALUES (10,@Tabname,'KeyAccount',@ErrDesc)
		END
		ELSE
		BEGIN
			IF LTRIM(RTRIM(@KeyAccount))='Yes' OR LTRIM(RTRIM(@KeyAccount))='No'
			BEGIN
				IF @Po_ErrNo=0
				BEGIN
					SET @Po_ErrNo=0	
				END
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Key Account Type '+@KeyAccount+ ' is not available'		
				INSERT INTO Errorlog VALUES (11,@Tabname,'KeyAccount',@ErrDesc)
			END
		END
		IF LTRIM(RTRIM(@CoverageMode))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Coverage Mode should not be empty'		
			INSERT INTO Errorlog VALUES (12,@Tabname,'CoverageMode',@ErrDesc)
		END
		ELSE
			BEGIN
			IF LTRIM(RTRIM(@CoverageMode))='Order Booking' OR LTRIM(RTRIM(@CoverageMode))='Van Sales' OR LTRIM(RTRIM(@CoverageMode))='Counter Sales'
			BEGIN
				IF @Po_ErrNo=0
				BEGIN
					SET @Po_ErrNo=0	
				END	
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Coverage Mode Type '+@CoverageMode+ ' does not exists'		
				INSERT INTO Errorlog VALUES (13,@Tabname,'CoverageMode',@ErrDesc)
			END
		END
		
		IF LTRIM(RTRIM(@RegistrationDate))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Registration Date should not be empty'		
			INSERT INTO Errorlog VALUES (14,@Tabname,'RegistrationDate',@ErrDesc)
		END
		ELSE
		BEGIN
			IF ISDATE(@RegistrationDate)=0
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Registration Date '+@RegistrationDate+ ' not in date format'		
				INSERT INTO Errorlog VALUES (15,@Tabname,'RegistrationDate',@ErrDesc)
			END
			ELSE
			BEGIN
				IF @RegistrationDate > (CONVERT(NVARCHAR(11),GETDATE(),121))
				BEGIN
					SET @Po_ErrNo=1		
					SET @Taction=0
					SET @ErrDesc = 'Invalid Registration Date'		
					INSERT INTO Errorlog VALUES (16,@Tabname,'RegistrationDate',@ErrDesc)
				END
			END
		END
		IF LTRIM(RTRIM(@DayOff))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Day Off should not be empty'		
			INSERT INTO Errorlog VALUES (17,@Tabname,'DayOff',@ErrDesc)
		END
		ELSE
		BEGIN
			IF LTRIM(RTRIM(@DayOff))='Sunday' OR LTRIM(RTRIM(@DayOff))='Monday' OR LTRIM(RTRIM(@DayOff))='Tuesday' OR
			LTRIM(RTRIM(@DayOff))='Wednesday' OR LTRIM(RTRIM(@DayOff))='Thursday' OR LTRIM(RTRIM(@DayOff))='Friday' OR
			LTRIM(RTRIM(@DayOff))='Saturday'
			BEGIN
				IF @Po_ErrNo=0
				BEGIN
					SET @Po_ErrNo=0	
				END	
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Day Off Type '+@DayOff+ ' is not available'		
				INSERT INTO Errorlog VALUES (18,@Tabname,'DayOff',@ErrDesc)
			END
		END
		IF LTRIM(RTRIM(@Status))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Status should not be empty'		
			INSERT INTO Errorlog VALUES (19,@Tabname,'Status',@ErrDesc)
		END
		ELSE
		BEGIN
			IF LTRIM(RTRIM(@Status))='Active' OR LTRIM(RTRIM(@Status))='Inactive'
			BEGIN
				IF @Po_ErrNo=0
				BEGIN
					SET @Po_ErrNo=0	
				END
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Status Type '+@Status+ ' is not available'		
				INSERT INTO Errorlog VALUES (20,@Tabname,'Status',@ErrDesc)
			END
		END
		IF LTRIM(RTRIM(@Taxable))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Taxable should not be empty'		
			INSERT INTO Errorlog VALUES (21,@Tabname,'Taxable',@ErrDesc)
		END
		ELSE
		BEGIN
			IF LTRIM(RTRIM(@Taxable))='Yes' OR LTRIM(RTRIM(@Taxable))='No'
			BEGIN
				IF @Po_ErrNo=0
				BEGIN
					SET @Po_ErrNo=0	
				END	
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Taxable Type '+@Taxable+ ' is not available'		
				INSERT INTO Errorlog VALUES (22,@Tabname,'Taxable',@ErrDesc)
			END
		END
		IF LTRIM(RTRIM(@TaxType))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'TaxType should not be empty'		
			INSERT INTO Errorlog VALUES (23,@Tabname,'TaxType',@ErrDesc)
		END
		ELSE
		BEGIN
			IF LTRIM(RTRIM(@TaxType))='VAT' OR LTRIM(RTRIM(@TaxType))='NON VAT'
			BEGIN
				IF @Po_ErrNo=0
				BEGIN
					SET @Po_ErrNo=0	
				END	
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'TaxType Type '+@TaxType+ ' is not available'		
				INSERT INTO Errorlog VALUES (24,@Tabname,'TaxType',@ErrDesc)
			END
		END
		IF @TaxType='VAT'
		BEGIN
			IF LTRIM(RTRIM(@TINNumber))=''
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'TIN Number should not be empty'		
				INSERT INTO Errorlog VALUES (25,@Tabname,'TINNumber',@ErrDesc)
			END
			ELSE
			BEGIN
				IF LEN(@TINNumber)>11
				BEGIN
					SET @Po_ErrNo=1
					SET @Taction=0
					SET @ErrDesc = 'TIN Number Maximum Length should be 11'		
					INSERT INTO Errorlog VALUES (26,@Tabname,'TINNumber',@ErrDesc)
				END
			END
		END
		IF LTRIM(RTRIM(@CreditBills))<>''
		BEGIN
			IF ISNUMERIC(@CreditBills)=0
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Credit Bills value Should be Number'		
				INSERT INTO Errorlog VALUES (27,@Tabname,'CreditBills',@ErrDesc)
			END
		END
		IF LTRIM(RTRIM(@CreditLimit))<>''
		BEGIN
			IF ISNUMERIC(@CreditLimit)=0
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Credit Limit value Should be Number'		
				INSERT INTO Errorlog VALUES (28,@Tabname,'CreditLimit',@ErrDesc)
			END
		END
		IF LTRIM(RTRIM(@CreditDays))<>''
		BEGIN
			IF ISNUMERIC(@CreditDays)=0
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Credit Days value Should be Number'		
				INSERT INTO Errorlog VALUES (29,@Tabname,'CreditDays',@ErrDesc)
			END
		END
		IF LTRIM(RTRIM(@CashDiscountPercentage))<>''
		BEGIN
			IF ISNUMERIC(@CashDiscountPercentage)=0
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Cash Discount Percentage value Should be Number'		
				INSERT INTO Errorlog VALUES (30,@Tabname,'CashDiscountPercentage',@ErrDesc)
			END
		END
		
		IF LTRIM(RTRIM(@CashDiscountPercentage))<>''
		BEGIN
			IF ISNUMERIC(@CashDiscountPercentage)=0
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Cash Discount Percentage value Should be Number'		
				INSERT INTO Errorlog VALUES (31,@Tabname,'CashDiscountPercentage',@ErrDesc)
			END
		END
		IF LTRIM(RTRIM(@CashDiscountCondition))<>''
		BEGIN
			IF LTRIM(RTRIM(@CashDiscountCondition))='>=' OR LTRIM(RTRIM(@CashDiscountCondition))='<='
			BEGIN
				IF @Po_ErrNo=0
				BEGIN
					SET @Po_ErrNo=0	
				END	
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Cash Discount Condition Type '+@CashDiscountCondition+ ' is not available'		
				INSERT INTO Errorlog VALUES (32,@Tabname,'CashDiscountCondition',@ErrDesc)
			END
		END
			
	
		IF LTRIM(RTRIM(@CashDiscountLimitValue))<>''
		BEGIN
			IF ISNUMERIC(@CashDiscountLimitValue)=0
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Cash Discount Limit Value value Should be Number'		
				INSERT INTO Errorlog VALUES (33,@Tabname,'CashDiscountLimitValue',@ErrDesc)
			END
		END
		
		IF LTRIM(RTRIM(@LicenseNumber))<>''
		BEGIN
			IF LTRIM(RTRIM(@LicNumberExDate))=''
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'License Number Expiry Date  should not be empty'		
				INSERT INTO Errorlog VALUES (34,@Tabname,'LicenseNumberExpiryDate',@ErrDesc)
			END
			ELSE
			BEGIN
				IF ISDATE(CONVERT(NVARCHAR(10),@LicNumberExDate,121))=0
				BEGIN
					SET @Po_ErrNo=1		
					SET @Taction=0
					SET @ErrDesc = 'License Number Expiry Date '+@LicNumberExDate+ 'not in date format'		
					INSERT INTO Errorlog VALUES (35,@Tabname,'LicenseNumberExpiryDate',@ErrDesc)
				END
				ELSE
				BEGIN
					IF  (CONVERT(NVARCHAR(10),@LicNumberExDate,121)) < CONVERT(NVARCHAR(10),GETDATE(),121)
					BEGIN
						SET @Po_ErrNo=1		
						SET @Taction=0
						SET @ErrDesc = 'Invalid License Number Expiry Date'		
						INSERT INTO Errorlog VALUES (36,@Tabname,'LicenseNumberExpiryDate',@ErrDesc)
					END
				END
			END
		END
		IF LTRIM(RTRIM(@DrugLicNumber))<>''
		BEGIN
			IF LTRIM(RTRIM(@DrugLicExDate))=''
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Drug License Number Expiry Date  should not be empty'		
				INSERT INTO Errorlog VALUES (37,@Tabname,'DrugLicenseNumberExpiryDate',@ErrDesc)
			END
			ELSE
			BEGIN
				IF ISDATE(CONVERT(NVARCHAR(10),@DrugLicExDate,121))=0
				BEGIN
					SET @Po_ErrNo=1		
					SET @Taction=0
					SET @ErrDesc = 'Drug License Number Expiry Date '+@DrugLicExDate+ 'not in date format'		
					INSERT INTO Errorlog VALUES (38,@Tabname,'DrugLicenseNumberExpiryDate',@ErrDesc)
				END
				ELSE
				BEGIN
					IF (CONVERT(NVARCHAR(10),@DrugLicExDate,121))< CONVERT(NVARCHAR(10),GETDATE(),121)
					BEGIN
						SET @Po_ErrNo=1		
						SET @Taction=0
						SET @ErrDesc = 'Invalid Drug License Number Expiry Date'		
						INSERT INTO Errorlog VALUES (39,@Tabname,'DrugLicenseNumberExpiryDate',@ErrDesc)
					END
				END
			END
		END
		IF LTRIM(RTRIM(@PestLicNumber))<>''
		BEGIN
			IF LTRIM(RTRIM(@PestLicExDate))=''
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Pesticide License Number Expiry Date  was not given'		
				INSERT INTO Errorlog VALUES (40,@Tabname,'PesticideLicenseNumberExpiryDate',@ErrDesc)
			END
			ELSE
			BEGIN
				IF ISDATE(CONVERT(NVARCHAR(10),@PestLicExDate,121))=0
					BEGIN
						SET @Po_ErrNo=1		
						SET @Taction=0
						SET @ErrDesc = 'Pesticide License Number Expiry Date '+@PestLicExDate+ 'not in date format'		
						INSERT INTO Errorlog VALUES (41,@Tabname,'PesticideLicenseNumberExpiryDate',@ErrDesc)
					END
				ELSE
				BEGIN
					IF (CONVERT(NVARCHAR(10),@PestLicExDate,121)) < CONVERT(NVARCHAR(10),GETDATE(),121)
					BEGIN
						SET @Po_ErrNo=1		
						SET @Taction=0
						SET @ErrDesc = 'Invalid Pesticide License Number Expiry Date '		
						INSERT INTO Errorlog VALUES (42,@Tabname,'PesticideLicenseNumberExpiryDate',@ErrDesc)
					END
				END
			END
		END
		IF LTRIM(RTRIM(@RetailerType))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Retailer Type should not be empty'		
			INSERT INTO Errorlog VALUES (43,@Tabname,'Retailer Type',@ErrDesc)
		END
		ELSE
		BEGIN
			IF LTRIM(RTRIM(@RetailerType))='Retailer' OR LTRIM(RTRIM(@RetailerType))='Sub Stockist'
			BEGIN
				IF @Po_ErrNo=0
				BEGIN
					SET @Po_ErrNo=0	
				END
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Retailer Type '+@RetailerType+ ' is not available'		
				INSERT INTO Errorlog VALUES (44,@Tabname,'Retailer Type',@ErrDesc)
			END
		END
		IF LTRIM(RTRIM(@RetailerFrequency))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Retailer Frequency should not be empty'		
			INSERT INTO Errorlog VALUES (45,@Tabname,'Retailer Frequency',@ErrDesc)
		END
		ELSE
		BEGIN
			IF LTRIM(RTRIM(@RetailerFrequency))='Weekly' OR LTRIM(RTRIM(@RetailerFrequency))='Bi-Weekly' OR LTRIM(RTRIM(@RetailerFrequency))='Fort Nightly' OR LTRIM(RTRIM(@RetailerFrequency))='Monthly' OR LTRIM(RTRIM(@RetailerFrequency))='Daily'
			BEGIN
				IF @Po_ErrNo=0
				BEGIN
					SET @Po_ErrNo=0	
				END
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Retailer Frequency '+@RetailerFrequency+ ' is not available'		
				INSERT INTO Errorlog VALUES (46,@Tabname,'Retailer Frequency',@ErrDesc)
			END
		END
		IF LTRIM(RTRIM(@RtrCrDaysAlert))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Credit Days Alert should not be empty'		
			INSERT INTO Errorlog VALUES (47,@Tabname,'Credit Days Alert',@ErrDesc)
		END
		ELSE
		BEGIN
			IF LTRIM(RTRIM(@RtrCrDaysAlert))='None' OR LTRIM(RTRIM(@RtrCrDaysAlert))='Alert & Allow' OR LTRIM(RTRIM(@RtrCrDaysAlert))='Alert & Stop'
			BEGIN
				IF @Po_ErrNo=0
				BEGIN
					SET @Po_ErrNo=0	
				END
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Credit Days Alert '+@RtrCrDaysAlert+ ' is not available'		
				INSERT INTO Errorlog VALUES (48,@Tabname,'Credit Days Alert',@ErrDesc)
			END
		END
		
		IF LTRIM(RTRIM(@RtrCrBillAlert))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Credit Bills Alert should not be empty'		
			INSERT INTO Errorlog VALUES (49,@Tabname,'Credit Bills Alert',@ErrDesc)
		END
		ELSE
		BEGIN
			IF LTRIM(RTRIM(@RtrCrBillAlert))='None' OR LTRIM(RTRIM(@RtrCrBillAlert))='Alert & Allow' OR LTRIM(RTRIM(@RtrCrBillAlert))='Alert & Stop'
			BEGIN
				IF @Po_ErrNo=0
				BEGIN
					SET @Po_ErrNo=0	
				END
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Credit Days Alert '+@RtrCrBillAlert+ ' is not available'		
				INSERT INTO Errorlog VALUES (50,@Tabname,'Credit Bills Alert',@ErrDesc)
			END
		END
		IF LTRIM(RTRIM(@RtrCrLimitAlert))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Credit Limit Alert should not be empty'		
			INSERT INTO Errorlog VALUES (51,@Tabname,'Credit Days Alert',@ErrDesc)
		END
		ELSE
		BEGIN
			IF LTRIM(RTRIM(@RtrCrLimitAlert))='None' OR LTRIM(RTRIM(@RtrCrLimitAlert))='Alert & Allow' OR LTRIM(RTRIM(@RtrCrLimitAlert))='Alert & Stop'
			BEGIN
				IF @Po_ErrNo=0
				BEGIN
					SET @Po_ErrNo=0	
				END
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Credit Limit Alert '+@RtrCrLimitAlert+ ' is not available'		
				INSERT INTO Errorlog VALUES (52,@Tabname,'Credit Limit Alert',@ErrDesc)
			END
		END
		
		IF @Taction=1
		BEGIN
			SET @CmpRtrCode=''
			SELECT @RtrId=dbo.Fn_GetPrimaryKeyInteger(@CntTabname,@FldName,CAST(YEAR(GetDate()) AS INT),MONTH(GETDATE()))
			SELECT @CoaId=dbo.Fn_GetPrimaryKeyInteger('CoaMaster','CoaId',CAST(YEAR(GetDate()) AS INT),MONTH(GETDATE()))
			SELECT @AcCode=AcCode+1 FROM COAMaster WHERE CoaId=(SELECT MAX(A.CoaId) FROM COAMaster A Where A.MainGroup=2 and A.AcCode LIKE '216%')	
			IF (SELECT Status FROM Configuration WHERE ModuleId='RET33' AND ModuleName='Retailer')=1
			BEGIN			
				IF NOT EXISTS(SELECT * FROM Retailer)
				BEGIN
					UPDATE CompanyCounters SET CurrValue = 0 WHERE Tabname =  'Retailer' AND Fldname = 'CmpRtrCode'	
				END
				SELECT @CmpRtrCode=dbo.Fn_GetPrimaryKeyCmpString('Retailer','CmpRtrCode',CAST(YEAR(GetDate()) AS INT),MONTH(GETDATE()))			
			END
			ELSE
			BEGIN
				SET @CmpRtrCode=@RetailerCode
			END
			IF @CmpRtrCode=''
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Company Retailer Code should not be empty'		
				INSERT INTO Errorlog VALUES (43,@Tabname,'Counter Value',@ErrDesc)
			END
		END
		
		
		
		IF @RtrId=0
		BEGIN
			SET @Po_ErrNo=1		
			SET @Taction=0
			SET @ErrDesc = 'Reset the Counter Year Value '		
			INSERT INTO Errorlog VALUES (43,@Tabname,'Counter Value',@ErrDesc)
		END
		
		IF EXISTS (SELECT '*' FROM Configuration WHERE ModuleId = 'GENCONFIG30' AND ModuleName = 'General Configuration' AND Status = 1)
		BEGIN
			IF LTRIM(RTRIM(@PhoneNo))=''
			BEGIN
				--IF EXISTS (SELECT RtrPhoneNo from Retailer (Nolock) where RtrPhoneNo = @PhoneNo AND RtdId NOT IN (@RetailerCode))
				IF EXISTS (SELECT RtrPhoneNo from Retailer (Nolock) where RtrPhoneNo = @PhoneNo AND RtrCode NOT IN (@RetailerCode))
				BEGIN
					SET @Po_ErrNo=1		
					SET @Taction=0
					SET @ErrDesc = 'Retailer Phone Number not be Empty '		
					INSERT INTO Errorlog VALUES (43,@Tabname,'Phone Number',@ErrDesc)
				END
			END			
		END
		
		IF LTRIM(RTRIM(@PhoneNo))<>''
		BEGIN
			--IF EXISTS (SELECT RtrPhoneNo from Retailer (Nolock) where RtrPhoneNo = @PhoneNo AND RtrId  NOT IN (@RetailerCode))
			IF EXISTS (SELECT RtrPhoneNo from Retailer (Nolock) where RtrPhoneNo = @PhoneNo AND RtrCode  NOT IN (@RetailerCode))
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Retailer Phone Number should be unique '		
				INSERT INTO Errorlog VALUES (43,@Tabname,'Phone Number',@ErrDesc)
			END
		END
		IF LTRIM(RTRIM(@TINNumber))<>''
		BEGIN
			--IF EXISTS (SELECT RtrTINNo from Retailer (Nolock) where RtrTINNo = @TINNumber AND RtrId NOT IN (@RetailerCode))
			IF EXISTS (SELECT RtrTINNo from Retailer (Nolock) where RtrTINNo = @TINNumber AND RtrCode NOT IN (@RetailerCode))
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Retailer Tin Number Should be unique '		
				INSERT INTO Errorlog VALUES (43,@Tabname,'TiN Number',@ErrDesc)
			END
		END
		
		IF @Po_ErrNo=0
		BEGIN		
			DECLARE @MSG AS VARCHAR(100)
			SET @MSG=''
			SELECT @MSG=DBO.Fn_RetailerApprovalStatus(@RtrId)
			IF ISNULL(@MSG,'')<>''
			BEGIN
				INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)  
				SELECT DISTINCT 5,'Retailer ApprovalStatus','ApprovalStatus',@MSG 
				SET @Po_ErrNo =1 
			END
		END
				
		IF  @Taction=1 AND @Po_ErrNo=0
		BEGIN	
			INSERT INTO Retailer(RtrId,RtrCode,CmpRtrCode,RtrName,RtrAdd1,RtrAdd2,RtrAdd3,RtrPinNo,RtrPhoneNo,RtrEmailId,RtrKeyAcc,RtrCovMode,
			RtrRegDate,RtrDayOff,RtrStatus,RtrTaxable,RtrTaxType,RtrTINNo,RtrCSTNo,TaxGroupId,RtrCrBills,RtrCrLimit,RtrCrDays,
			RtrCashDiscPerc,RtrCashDiscCond,RtrCashDiscAmt,RtrLicNo,RtrLicExpiryDate,RtrDrugLicNo,RtrDrugExpiryDate,
			RtrPestLicNo,RtrPestExpiryDate,GeoMainId,RMId,VillageId,RtrResPhone1,RtrOffPhone1,RtrDepositAmt,RtrAnniversary,RtrDOB,CoaId,RtrOnAcc,
			RtrShipId,RtrType,RtrFrequency,RtrCrDaysAlert,RtrCrBillsAlert,RtrCrLimitAlert,Upload,Approved,XmlUpload,
			Availability,LastModBy,LastModDate,AuthId,AuthDate,RtrUniqueCode)--Gopi at 08/11/2016
			VALUES(@RtrId,@RetailerCode,@CmpRtrCode,@RetailerName,@Address1,@Address2,@Address3,CAST(@PinCode AS INT),@PhoneNo,@EmailId,
			(CASE @KeyAccount WHEN 'Yes' THEN 1 ELSE 0 END),
			(CASE @CoverageMode WHEN 'Order Booking' THEN 1 WHEN 'Counter Sales' THEN 2 WHEN 'Van Sales' THEN 3 END),
			@RegistrationDate,
			(CASE @DayOff WHEN 'Sunday' THEN 0 WHEN 'Monday' THEN 1 WHEN 'Tuesday' THEN 2 WHEN 'Wednesday' THEN 3 WHEN 'Thursday' THEN 4 WHEN 'Friday' THEN 5 WHEN 'Saturday' THEN 6 END),
			(CASE @Status WHEN 'Active' THEN 1 ELSE 0 END),
			(CASE @Taxable WHEN 'Yes' THEN 1 ELSE 0 END),
			(CASE @TaxType WHEN 'VAT' THEN 0 ELSE 1 END),@TINNumber,@CSTNumber,@TaxGroupId,CAST(@CreditBills AS INT),CAST(@CreditLimit AS NUMERIC(18,2)),CAST(@CreditDays AS INT),
			(CAST(@CashDiscountPercentage AS NUMERIC(18,2))),(CASE @CashDiscountCondition WHEN '>=' THEN 1 ELSE 0 END),CAST(@CashDiscountLimitValue AS NUMERIC (18,2)),
			@LicenseNumber,CONVERT(NVARCHAR(10),@LicNumberExDate,121),@DrugLicNumber,CONVERT(NVARCHAR(10),@DrugLicExDate,121),
			@PestLicNumber,CONVERT(NVARCHAR(10),@PestLicExDate,121),@GeoMainId,@RMId,@VillageId,@ResidencePhoneNo,@OfficePhoneNo,
			CAST(@DepositAmount AS NUMERIC(18,2)),CONVERT(NVARCHAR(10),GETDATE(),121),CONVERT(NVARCHAR(10),GETDATE(),121),@CoaId,0,0,
			(CASE @RetailerType WHEN 'Retailer' THEN 1 WHEN 'Sub Stockist' THEN 2 END),
			(CASE @RetailerFrequency WHEN 'Weekly' THEN 0 WHEN 'Bi-Weekly' THEN 1 WHEN 'Fort Nightly' THEN 2 WHEN 'Monthly' THEN 3 WHEN 'Daily' THEN 4 END),
			(CASE @RtrCrDaysAlert WHEN 'None' THEN 0 WHEN 'Alert & Allow' THEN 1 WHEN 'Alert & Stop' THEN 2 END),
			(CASE @RtrCrBillAlert WHEN 'None' THEN 0 WHEN 'Alert & Allow' THEN 1 WHEN 'Alert & Stop' THEN 2 END),
			(CASE @RtrCrLimitAlert WHEN 'None' THEN 0 WHEN 'Alert & Allow' THEN 1 WHEN 'Alert & Stop' THEN 2 END),
			'N',0,0,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121),'')
			UPDATE CompanyCounters SET CurrValue = CurrValue+1 WHERE Tabname =  'Retailer' AND Fldname = 'CmpRtrCode'
			SET @sSql='UPDATE CompanyCounters SET CurrValue =CurrValue'+'+1'+' WHERE Tabname =''Retailer'' AND Fldname =''CmpRtrCode'''
			INSERT INTO Translog(strSql1) VALUES (@sSql) 
			SET @sSql='INSERT INTO Retailer(RtrId,RtrCode,CmpRtrCode,RtrName,RtrAdd1,RtrAdd2,RtrAdd3,RtrPinNo,RtrPhoneNo,RtrEmailId,RtrKeyAcc,RtrCovMode,
			RtrRegDate,RtrDayOff,RtrStatus,RtrTaxable,RtrTaxType,RtrTINNo,RtrCSTNo,TaxGroupId,RtrCrBills,RtrCrLimit,RtrCrDays,RtrCashDiscPerc,
			RtrCashDiscCond,RtrCashDiscAmt,RtrLicNo,RtrDrugLicNo,RtrPestLicNo,GeoMainId,RMId,VillageId,RtrResPhone1,RtrOffPhone1,RtrDepositAmt,RtrAnniversary,RtrDOB,CoaId,RtrOnAcc,
			RtrShipId,RtrType,RtrFrequency,RtrCrDaysAlert,RtrCrBillsAlert,RtrCrLimitAlert,Upload,XmlUpload,Availability,LastModBy,LastModDate,AuthId,AuthDate,RtrLicExpiryDate,RtrDrugExpiryDate,RtrPestExpiryDate,Approved)
			VALUES('+CAST(@RtrId AS VARCHAR(10))+','''+@RetailerCode+''','''+@CmpRtrCode+''','''+@RetailerName+''','''+@Address1+''','''+@Address2+''','''+@Address3+''','+CAST(CAST(@PinCode AS INT)AS VARCHAR(10))+','''+@PhoneNo+''','''+@EmailId+''',
			'+CAST((CASE @KeyAccount WHEN 'Yes' THEN 1 ELSE 0 END)AS VARCHAR(10))+',
			'+CAST((CASE @CoverageMode WHEN 'Order Booking' THEN 1 WHEN 'Counter Sales' THEN 2 WHEN 'Van Sales' THEN 3 END)AS VARCHAR(10))+',
			'''+CAST(@RegistrationDate AS VARCHAR(12))+''',
			'+CAST((CASE @DayOff WHEN 'Sunday' THEN 0 WHEN 'Monday' THEN 1 WHEN 'Tuesday' THEN 2 WHEN 'Wednesday' THEN 3 WHEN 'Thursday' THEN 4 WHEN 'Friday' THEN 5 WHEN 'Saturday' THEN 6 END)AS VARCHAR(10))+',
			'+CAST((CASE @Status WHEN 'Active' THEN 1 ELSE 0 END)AS VARCHAR(10))+',
			'+CAST((CASE @Taxable WHEN 'Yes' THEN 1 ELSE 0 END)AS VARCHAR(10))+',
			'+CAST((CASE @TaxType WHEN 'VAT' THEN 0 ELSE 1 END)AS VARCHAR(10))+','''+@TINNumber+''','''+@CSTNumber+''','+CAST(@TaxGroupId AS VARCHAR(10))+','+CAST(CAST(@CreditBills AS INT) AS VARCHAR(10))+','+CAST(CAST(@CreditLimit AS NUMERIC(18,2)) AS VARCHAR(20))+','+CAST(CAST(@CreditDays AS INT) AS VARCHAR(10))+',
			'+CAST((CAST(@CashDiscountPercentage AS NUMERIC(18,2)))AS VARCHAR(20))+','+CAST((CASE @CashDiscountCondition WHEN '>=' THEN 1 ELSE 0 END)AS VARCHAR(10))+','+CAST(CAST(@CashDiscountLimitValue AS NUMERIC (18,2))AS VARCHAR(20))+',
			'''+@LicenseNumber+''','''+@DrugLicNumber+''',
			'''+@PestLicNumber+''','+CAST(@GeoMainId AS VARCHAR(10))+','+CAST(@RMId AS VARCHAR(10))+','+CAST(@VillageId AS VARCHAR(10))+','''+@ResidencePhoneNo+''','''+@OfficePhoneNo+''',
			'+CAST(CAST(@DepositAmount AS NUMERIC(18,2))AS VARCHAR(20))+','''+CONVERT(NVARCHAR(10),GETDATE(),121)+''','''+CONVERT(NVARCHAR(10),GETDATE(),121)+''','+CAST(@CoaId AS VARCHAR(10))+',0,0
			,'+CAST((CASE @RetailerType WHEN 'Retailer' THEN 1 WHEN 'Sub Stockist' THEN 2 END) AS VARCHAR(10))+'
			,'+CAST((CASE @RetailerFrequency WHEN 'Weekly' THEN 0 WHEN 'Bi-Weekly' THEN 1 WHEN 'Fort Nightly' THEN 2 WHEN 'Monthly' THEN 3 WHEN 'Daily' THEN 4 END) AS VARCHAR(10))+'
			,'+CAST((CASE @RtrCrDaysAlert WHEN 'None' THEN 0 WHEN 'Alert & Allow' THEN 1 WHEN 'Alert & Stop' THEN 2 END) AS VARCHAR(10))+'
			,'+CAST((CASE @RtrCrBillAlert WHEN 'None' THEN 0 WHEN 'Alert & Allow' THEN 1 WHEN 'Alert & Stop' THEN 2 END) AS VARCHAR(10))+'
			,'+CAST((CASE @RtrCrLimitAlert WHEN 'None' THEN 0 WHEN 'Alert & Allow' THEN 1 WHEN 'Alert & Stop' THEN 2 END)AS VARCHAR(10))+'
			,''N'',0,0,1,1,'''+CONVERT(NVARCHAR(10),GETDATE(),121)+''',1,'''+CONVERT(NVARCHAR(10),GETDATE(),121)+''',0'
			
			IF LTRIM(RTRIM(@LicNumberExDate)) IS NULL
			BEGIN
				SET @sSql=@sSql + ',Null'
			END
			ELSE
			BEGIN
				SET @sSql=@sSql + ','''+CONVERT(NVARCHAR(10),@LicNumberExDate,121)+''''
			END
			IF LTRIM(RTRIM(@DrugLicExDate))IS NULL
			BEGIN
				SET @sSql=@sSql + ',Null'
			END
			ELSE
			BEGIN
				SET @sSql=@sSql + ','''+CONVERT(NVARCHAR(10),@DrugLicExDate,121)+''''
			END
			IF LTRIM(RTRIM(@PestLicExDate))IS NULL
			BEGIN
				SET @sSql=@sSql + ',Null)'
			END
			ELSE
			BEGIN
				SET @sSql=@sSql + ','''+CONVERT(NVARCHAR(10),@PestLicExDate,121)+''')'
			END
			INSERT INTO Translog(strSql1) VALUES (@sSql)
			UPDATE Counters SET CurrValue = CurrValue+1 WHERE Tabname =  @CntTabname AND Fldname = @FldName
			SET @sSql='UPDATE Counters SET CurrValue =CurrValue'+'+1'+' WHERE Tabname ='''+@CntTabname+''' AND Fldname ='''+@FldName+''''
			INSERT INTO Translog(strSql1) VALUES (@sSql)
			IF EXISTS (SELECT * FROM Retailer WHERE RtrId=@RtrId)
			BEGIN
				INSERT INTO CoaMaster (CoaId,AcCode,AcName,AcLevel,MainGroup,Status,Availability,LastModBy,LastModDate,AuthId,AuthDate)
				VALUES (@CoaId,@AcCode,@RetailerName,4,2,2,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121))
				SET @sSql='INSERT INTO CoaMaster (CoaId,AcCode,AcName,AcLevel,MainGroup,Status,Availability,LastModBy,LastModDate,AuthId,AuthDate)
				VALUES ('+CAST(@CoaId AS VARCHAR(10))+','''+@AcCode+''','''+@RetailerName+''',4,2,2,1,1,'''+CONVERT(NVARCHAR(10),GETDATE(),121)+''',1,'''+CONVERT(NVARCHAR(10),GETDATE(),121)+''')'
				INSERT INTO Translog(strSql1) VALUES (@sSql)
				
				IF @PotentialClassCode<>''
				BEGIN
					DELETE FROM RetailerPotentialClassMap WHERE RtrId=@RtrId
					SET @sSql='DELETE FROM RetailerPotentialClassMap WHERE RtrId='+CAST(@RtrId AS VARCHAR(10))+''
					INSERT INTO RetailerPotentialClassMap (RtrId,RtrPotentialClassId,Availability,LastModBy,LastModDate,AuthId,AuthDate) VALUES(@RtrId,@RtrClassId,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121))
					SET @sSql='INSERT INTO RetailerPotentialClassMap (RtrId,RtrPotentialClassId,Availability,LastModBy,LastModDate,AuthId,AuthDate)
					VALUES('+CAST(@RtrId AS VARCHAR(10))+','+CAST(@RtrClassId AS VARCHAR(10))+',1,1,'''+CONVERT(NVARCHAR(10),GETDATE(),121)+''',1,'''+CONVERT(NVARCHAR(10),GETDATE(),121)+''')'
				END
				UPDATE Counters SET CurrValue = CurrValue+1 WHERE Tabname =  'CoaMaster' AND Fldname = 'CoaId'
				SET @sSql='UPDATE Counters SET CurrValue =CurrValue'+'+1'+' WHERE Tabname =  ''CoaMaster'' AND Fldname = ''CoaId'''
				INSERT INTO Translog(strSql1) VALUES (@sSql)
			END			
		END
		IF  @Taction=2 AND @Po_ErrNo=0
		BEGIN
			--CRCRSTPAR0070
			IF @Taction=2
			BEGIN
				DECLARE @ReturnMsg AS VARCHAR(100)
				SET @ReturnMsg=(SELECT DBO.Fn_ReturnToBloackRetailerColumns(79,@RtrId,'RtrName',@Taction,1000))
				IF RTRIM(LTRIM(@ReturnMsg))<>''
					BEGIN
					SET @RetailerName=(SELECT RtrName FROM Retailer WHERE RtrCode=@RetailerCode)
				END
				
				SET @ReturnMsg=''
				SET @ReturnMsg=(SELECT DBO.Fn_ReturnToBloackRetailerColumns(79,@RtrId,'RtrStatus',@Taction,1000))
				IF RTRIM(LTRIM(@ReturnMsg))<>''
				BEGIN
					SET @Status=(SELECT CASE RTRSTATUS WHEN 1 THEN 'Active' ELSE 'InActive' END FROM Retailer 
					WHERE RtrCode=@RetailerCode)					
				END
				
				SET @ReturnMsg=''
				SET @ReturnMsg=(SELECT DBO.Fn_ReturnToBloackRetailerColumns(79,@RtrId,'Geography',@Taction,1000))
				IF RTRIM(LTRIM(@ReturnMsg))<>''
				BEGIN
					SET @GeoMainId=(SELECT GeoMainId FROM Retailer WHERE RtrCode=@RetailerCode)
				END
			END
			
			--Added By S.Moorthi CRCRSTPAR0001
				IF EXISTS (SELECT '*' FROM Retailer (NOLOCK) WHERE RTRID = @RtrId and (RtrName<>@RetailerName
				or RtrStatus<>(CASE @Status WHEN 'Active' THEN 1 ELSE 0 END) or ISNULL(GeoMainId,0)<>ISNULL(@GeoMainId,0)))
				BEGIN
					IF NOT EXISTS (SELECT DISTINCT RtrId FROM RetailerApprovalStatus WHERE RtrId = @RtrId)
					BEGIN
						INSERT INTO RetailerApprovalStatus(RtrId,RtrCtgId,RtrClassId,RtrStatus,
						Rtrname,Geoid,Upload,Mode,ModDate)
						SELECT @RtrId,0,0,
						CASE WHEN RtrStatus=(CASE @Status WHEN 'Active' THEN 1 ELSE 0 END) THEN 2 ELSE (CASE @Status WHEN 'Active' THEN 1 ELSE 0 END) END,
						CASE WHEN RtrName=@RetailerName THEN '' ELSE @RetailerName END,
						CASE WHEN GeoMainId=@GeoMainId THEN 0 ELSE @GeoMainId END,
						0,2,GETDATE() FROM Retailer (NOLOCK) WHERE RtrId = @RtrId
					END
								  
					UPDATE A SET RtrName = CASE WHEN RTRIM(LTRIM(B.RtrName))=RTRIM(LTRIM(@RetailerName)) THEN '' ELSE @RetailerName END,
					RtrStatus=CASE WHEN B.RtrStatus=(CASE @Status WHEN 'Active' THEN 1 ELSE 0 END) THEN 2 ELSE (CASE @Status WHEN 'Active' THEN 1 ELSE 0 ENd) END,
					GeoId=CASE WHEN GeoMainId=@GeoMainId THEN 0 ELSE @GeoMainId END FROM RetailerApprovalStatus A INNER JOIN Retailer B ON A.RtrId=B.RtrId
					WHERE A.RtrId = @RtrId 
					SELECT @RetailerName=CASE WHEN RtrName=@RetailerName THEN @RetailerName ELSE RtrName END,
					@GeoMainId=CASE WHEN GeoMainId=@GeoMainId THEN @GeoMainId ELSE GeoMainId END,	
					@Status= CASE WHEN RtrStatus=(CASE @Status WHEN 'Active' THEN 1 ELSE 0 END) THEN (CASE @Status WHEN 'Active' THEN 1 ELSE 0 END) ELSE RtrStatus END 
					FROM Retailer (NOLOCK) WHERE RtrId = @RtrId
					UPDATE R SET R.Upload='N' FROM RetailerApprovalStatus A(NOLOCK)     
					INNER JOIN  RETAILER R (NOLOCK) ON A.RTRID=R.RTRID    
					WHERE A.Upload=0 AND R.RtrId=@RtrId    
						
				END
			--Till Here
			
			UPDATE Retailer SET  RtrName=@RetailerName,RtrAdd1=@Address1,RtrAdd2=@Address2,RtrAdd3=@Address3,
			RtrPinNo=CAST (@PinCode AS INT),RtrPhoneNo=@PhoneNo,
			RtrEmailId=@EmailId,
			RtrKeyAcc=(CASE @KeyAccount WHEN 'Yes' THEN 1 ELSE 0 END),
			RtrCovMode=(CASE @CoverageMode WHEN 'Order Booking' THEN 1 WHEN 'Counter Sales' THEN 2 WHEN 'Van Sales' THEN 3 END)
			,RtrRegDate=CONVERT(NVARCHAR(10),@RegistrationDate,121),
			RtrDayOff=(CASE @DayOff WHEN 'Sunday' THEN 0 WHEN 'Monday' THEN 1 WHEN 'Tuesday' THEN 2 WHEN 'Wednesday' THEN 3 WHEN 'Thursday' THEN 4 WHEN 'Friday' THEN 5 WHEN 'Saturday' THEN 6 END),
			RtrStatus=(CASE @Status WHEN 'Active' THEN 1 ELSE 0 END),
			RtrTaxable=(CASE @Taxable WHEN 'Yes' THEN 1 ELSE 0 END),
			RtrTaxType=(CASE @TaxType WHEN 'VAT' THEN 0 ELSE 1 END),
			RtrTINNo=@TINNumber,
			RtrCSTNo=@CSTNumber,TaxGroupId=@TaxGroupId,RtrCrBills=CAST(@CreditBills AS INT),RtrCrLimit=CAST(@CreditLimit AS NUMERIC(18,2)),RtrCrDays=CAST(@CreditDays AS INT),
			RtrCashDiscPerc=CAST(@CashDiscountPercentage AS NUMERIC(18,2)),
			RtrCashDiscCond=(CASE @CashDiscountCondition WHEN '>=' THEN 1 ELSE 0 END),RtrCashDiscAmt=CAST(@CashDiscountLimitValue AS NUMERIC(18,2)),
			RtrLicNo=@LicenseNumber,RtrLicExpiryDate=CONVERT(NVARCHAR(10),@LicNumberExDate,121),RtrDrugLicNo=@DrugLicNumber,
			RtrDrugExpiryDate=CONVERT(NVARCHAR(10),@DrugLicExDate,121),RtrPestLicNo=@PestLicNumber,
			RtrPestExpiryDate=CONVERT(NVARCHAR(10),@PestLicExDate,121),GeoMainId=@GeoMainId,
			RMId=@RMId,VillageId=@VillageId,RtrResPhone1=@ResidencePhoneNo,RtrOffPhone1=@OfficePhoneNo,RtrDepositAmt=CAST(@DepositAmount AS NUMERIC(18,2)), 
			RtrType=(CASE @RetailerType WHEN 'Retailer' THEN 1 WHEN 'Sub Stockist' THEN 2 END),
			RtrFrequency=(CASE @RetailerFrequency WHEN 'Weekly' THEN 0 WHEN 'Bi-Weekly' THEN 1 WHEN 'Fort Nightly' THEN 2 WHEN 'Monthly' THEN 3 WHEN 'Daily' THEN 4 END),
			RtrCrDaysAlert=(CASE @RtrCrDaysAlert WHEN 'None' THEN 0 WHEN 'Alert & Allow' THEN 1 WHEN 'Alert & Stop' THEN 2 END),
			RtrCrBillsAlert=(CASE @RtrCrBillAlert WHEN 'None' THEN 0 WHEN 'Alert & Allow' THEN 1 WHEN 'Alert & Stop' THEN 2 END),
			RtrCrLimitAlert=(CASE @RtrCrLimitAlert WHEN 'None' THEN 0 WHEN 'Alert & Allow' THEN 1 WHEN 'Alert & Stop' THEN 2 END)
			WHERE RtrCode=@RetailerCode
			SET @sSql='UPDATE Retailer SET  RtrName='''+@RetailerName+''',RtrAdd1='''+@Address1+''',RtrAdd2='''+@Address2+''',RtrAdd3='''+@Address3+''',
			RtrPinNo='+CAST(CAST(@PinCode AS INT) AS VARCHAR(20))+',RtrPhoneNo='''+@PhoneNo+''',
			RtrEmailId='''+@EmailId+''',
			RtrKeyAcc='+CAST((CASE @KeyAccount WHEN 'Yes' THEN 1 ELSE 0 END)AS VARCHAR(10))+',
			RtrCovMode='+CAST((CASE @CoverageMode WHEN 'Order Booking' THEN 1 WHEN 'Counter Sales' THEN 2 WHEN 'Van Sales' THEN 3 END)AS VARCHAR(10))+'
			,RtrRegDate='''+CONVERT(NVARCHAR(10),@RegistrationDate,121)+''',
			RtrDayOff='+CAST((CASE @DayOff WHEN 'Sunday' THEN 0 WHEN 'Monday' THEN 1 WHEN 'Tuesday' THEN 2 WHEN 'Wednesday' THEN 3 WHEN 'Thursday' THEN 4 WHEN 'Friday' THEN 5 WHEN 'Saturday' THEN 6 END)AS VARCHAR(10))+',
			RtrStatus='+CAST((CASE @Status WHEN 'Active' THEN 1 ELSE 0 END)AS VARCHAR(10))+',
			RtrTaxable='+CAST((CASE @Taxable WHEN 'Yes' THEN 1 ELSE 0 END)AS VARCHAR(10))+',
			RtrTaxType='+CAST((CASE @TaxType WHEN 'VAT' THEN 0 ELSE 1 END)AS VARCHAR(10))+',
			RtrTINNo='''+@TINNumber+''',
			RtrCSTNo='''+@CSTNumber+''',TaxGroupId='+CAST(@TaxGroupId AS VARCHAR(10))+',RtrCrBills='+CAST(CAST(@CreditBills AS INT) AS VARCHAR(10))+',RtrCrLimit='+CAST(CAST(@CreditLimit AS NUMERIC(18,2)) AS VARCHAR(20))+',RtrCrDays='+CAST(CAST(@CreditDays AS INT) AS VARCHAR(10))+',
			RtrCashDiscPerc='+CAST(CAST(@CashDiscountPercentage AS NUMERIC(18,2)) AS VARCHAR(20))+',
			RtrCashDiscCond='+CAST((CASE @CashDiscountCondition WHEN '>=' THEN 1 ELSE 0 END)AS VARCHAR(10))+',RtrCashDiscAmt='+CAST(CAST(@CashDiscountLimitValue AS NUMERIC(18,2)) AS VARCHAR(20))+',
			RtrLicNo='''+@LicenseNumber+''',RtrDrugLicNo='''+@DrugLicNumber+''',RtrPestLicNo='''+@PestLicNumber+''',GeoMainId='+CAST(@GeoMainId AS VARCHAR(10))+',
			RMId='+CAST(@RMId AS VARCHAR(20))+',VillageId='+CAST(@VillageId AS VARCHAR(20))+',RtrResPhone1='''+@ResidencePhoneNo+''',RtrOffPhone1='''+@OfficePhoneNo+''',RtrDepositAmt='+CAST(CAST(@DepositAmount AS NUMERIC(18,2)) AS VARCHAR(20))+''
					
			IF LTRIM(RTRIM(@LicNumberExDate)) IS NULL
			BEGIN
				SET @sSql=@sSql + ',RtrLicExpiryDate=Null'
			END
			ELSE
			BEGIN
				SET @sSql=@sSql + ',RtrLicExpiryDate='''+CONVERT(NVARCHAR(10),@LicNumberExDate,121)+''''
			END
			IF LTRIM(RTRIM(@DrugLicExDate))IS NULL
			BEGIN
				SET @sSql=@sSql + ',RtrDrugExpiryDate=Null'
			END
			ELSE
			BEGIN
				SET @sSql=@sSql + ',RtrDrugExpiryDate='''+CONVERT(NVARCHAR(10),@DrugLicExDate,121)+''''
			END
			IF LTRIM(RTRIM(@PestLicExDate))IS NULL
			BEGIN
				SET @sSql=@sSql + ',RtrPestExpiryDate=Null'
			END
			ELSE
			BEGIN
				SET @sSql=@sSql + ',RtrPestExpiryDate='''+CONVERT(NVARCHAR(10),@PestLicExDate,121)+''''
			END
			SET @sSql=@sSql + ',RtrType='+CAST((CASE @RetailerType WHEN 'Retailer' THEN 1 WHEN 'Sub Stockist' THEN 2 END) AS VARCHAR(10))+'
			,RtrFrequency='+CAST((CASE @RetailerFrequency WHEN 'Weekly' THEN 0 WHEN 'Bi-Weekly' THEN 1 WHEN 'Fort Nightly' THEN 2 WHEN 'Monthly' THEN 3 WHEN 'Daily' THEN 4 END) AS VARCHAR(10))+'
			,RtrCrDaysAlert='+CAST((CASE @RtrCrDaysAlert WHEN 'None' THEN 0 WHEN 'Alert & Allow' THEN 1 WHEN 'Alert & Stop' THEN 2 END) AS VARCHAR(10))+'
			,RtrCrBillsAlert='+CAST((CASE @RtrCrBillAlert WHEN 'None' THEN 0 WHEN 'Alert & Allow' THEN 1 WHEN 'Alert & Stop' THEN 2 END) AS VARCHAR(10))+'
			,RtrCrLimitAlert='+CAST((CASE @RtrCrLimitAlert WHEN 'None' THEN 0 WHEN 'Alert & Allow' THEN 1 WHEN 'Alert & Stop' THEN 2 END)AS VARCHAR(10))+''
			SET @sSql=@sSql +' WHERE RtrCode='''+@RetailerCode+''''
			INSERT INTO Translog(strSql1) VALUES (@sSql)
			SELECT @CoaId=CoaId FROM Retailer WHERE RtrCode=@RetailerCode
			UPDATE CoaMAster SET AcName=@RetailerName WHERE CoaId=@CoaId
			SET @sSql='UPDATE CoaMaster SET AcName='''+@RetailerName+''' WHERE CoaId='+CAST(@CoaId AS VARCHAR(10))+''
			INSERT INTO Translog(strSql1) VALUES (@sSql)
			SELECT @RtrId=RtrId FROM Retailer WHERE RtrCode=@RetailerCode
			IF @PotentialClassCode<>''
			BEGIN
				DELETE FROM RetailerPotentialClassMap WHERE RtrId=@RtrId
				SET @sSql='DELETE FROM RetailerPotentialClassMap WHERE RtrId='+CAST(@RtrId AS VARCHAR(10))+''
				INSERT INTO Translog(strSql1) VALUES (@sSql)
				INSERT INTO RetailerPotentialClassMap (RtrId,RtrPotentialClassId,Availability,LastModBy,LastModDate,AuthId,AuthDate)
				VALUES(@RtrId,@RtrClassId,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121))
				SET @sSql='INSERT INTO RetailerPotentialClassMap (RtrId,RtrPotentialClassId,Availability,LastModBy,LastModDate,AuthId,AuthDate)
				VALUES('+CAST(@RtrId AS VARCHAR(10))+','+CAST(@RtrClassId AS VARCHAR(10))+',1,1,'''+CONVERT(NVARCHAR(10),GETDATE(),121)+''',1,'''+CONVERT(NVARCHAR(10),GETDATE(),121)+''')'
				INSERT INTO Translog(strSql1) VALUES (@sSql)
			END
		END
		FETCH NEXT FROM Cur_Retailer INTO @RetailerCode,@RetailerName,@Address1,@Address2,@Address3,@PinCode,@PhoneNo,@EmailId,@KeyAccount,@CoverageMode,@RegistrationDate,@DayOff,
		@Status,@Taxable,@TaxType,@TINNumber,@CSTNumber,@TaxGroup,@CreditBills,@CreditLimit,@CreditDays,
		@CashDiscountPercentage,@CashDiscountCondition,@CashDiscountLimitValue,@LicenseNumber,
		@LicNumberExDate,@DrugLicNumber,@DrugLicExDate,@PestLicNumber,@PestLicExDate,@GeographyHierarchyValue,
		@DeliveryRoute,@VillageCode,@ResidencePhoneNo,@OfficePhoneNo,@DepositAmount,@PotentialClassCode,
		@RetailerType,@RetailerFrequency,@RtrCrDaysAlert,@RtrCrBillAlert,@RtrCrLimitAlert
	END
	CLOSE Cur_Retailer
	DEALLOCATE Cur_Retailer
	RETURN
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Fn_ValidateParentChild' AND XTYPE IN ('TF','FN'))
DROP FUNCTION Fn_ValidateParentChild
GO
CREATE FUNCTION Fn_ValidateParentChild (@Pi_ParentID BIGINT,@Pi_ChildID BIGINT,@PI_ParetClassID BIGINT)
RETURNS NVARCHAR(100)
AS
/************************************************
* FUNCTION	 : Fn_ValidateParentChild
* PURPOSE    : TO RETURN MISMATCH CHILD DETAILS FOR THE SELECTED RETAILER
* CREATED BY : MOHANA S 
* CREATED ON : 2019-06-25
* PMS NO	 : CRCRSTPAR0064 
*************************************************/   
BEGIN

DECLARE @Msg NVARCHAR(100)

SET @Msg = ''

	IF NOT EXISTS (SELECT * FROM RetailerCategory A INNER JOIN RetailerValueClass B ON A.CtgMainId = B.CtgMainId 
	INNER JOIN RetailerValueClassmap C ON B.RtrClassId = C.RtrValueClassId AND Rtrid = @Pi_ChildID AND C.RtrValueClassId = @PI_ParetClassID)
	BEGIN
			SET @Msg = 'Child Category is different for the Selected Parent Retailer'
	END

RETURN (@Msg)

END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_ValidateRouteMaster' AND TYPE='P')
DROP PROCEDURE Proc_ValidateRouteMaster
GO
-- exec Proc_ValidateRouteMaster 0
CREATE PROCEDURE Proc_ValidateRouteMaster
(
       @Po_ErrNo int OUTPUT
)
AS
/*************************************************************************************************
* PROCEDURE: Proc_ValidateRouteMaster
* PURPOSE: To Insert and Update records  from xml file in the Table Route Master
* CREATED: Gunasekaran.D. 17/09/2007
**************************************************************************************************
*25-06-2019	S.MOHANA		CR			CRCRSTPAR0064			INCLUDE THE VALIDATION FOR ONE MANDATORY CAL DAYS
**************************************************************************************************/
BEGIN
	DECLARE @hDoc INTEGER
	DECLARE @InsertCount INTEGER
	DECLARE @Taction Int
	DECLARE @StateId Int
	DECLARE @ErrDesc Varchar(1000)
	DECLARE @rno int
	DECLARE @Tabname Varchar(50)
	DECLARE @RMId int
    DECLARE @RMCode Varchar(50)
    DECLARE @RMName Varchar(100)
    DECLARE @CmpCode Varchar(50)
    DECLARE @CmpId Int
    DECLARE @Dis Varchar(20)
    DECLARE @Pop Varchar(20)
    DECLARE @GeoMainId int
    DECLARE @HierVal Varchar(100)
    DECLARE @VanRoute Varchar(5)
    DECLARE @RMTypeId int
    DECLARE @RMType Varchar(50)
    DECLARE @LclUpId int
    DECLARE @LclUp Varchar(50)
    DECLARE @RMMon Varchar(5)
    DECLARE @RMTue Varchar(5)
    DECLARE @RMWed Varchar(5)
    DECLARE @RMThu Varchar(5)
    DECLARE @RMFri Varchar(5)
    DECLARE @RMSat Varchar(5)
    DECLARE @RMSun Varchar(5)
	DECLARE @sStr nVarchar(4000)

    Set @Tabname = 'ETL_Prk_RouteMaster'
    SET @Po_ErrNo = 0
    DECLARE Cur_ImpRoute CURSOR
            FOR SELECT * FROM ETL_Prk_RouteMaster

    OPEN Cur_ImpRoute

    FETCH NEXT FROM Cur_ImpRoute INTO
          @RMCode,@RMName,@CmpCode,@Dis,@Pop,@HierVal,@VanRoute,@RMType,@LclUp,
          @RMMon,@RMTue,@RMWed,@RMThu,@RMFri,@RMSat,@RMSun
    Set @Rno = 0
    WHILE @@FETCH_STATUS=0
    BEGIN
	     Set @Rno = @Rno + 1
	     Set @Taction = 2 -- Insert
	
	     -- Validate Mandatory field is empty or null string
		 IF IsNull(@RMCode,'') = ''
	     BEGIN
	          SET @ErrDesc = 'In Row ' + cast (@Rno as varchar(10)) + ' Route Master Code is empty'
         	  INSERT INTO Errorlog VALUES (1,@TabName,'RMCode',@ErrDesc)           	
		 	  SET @Taction = 0
		 	  SET @Po_ErrNo = 1
         END	
         ELSE IF exists (SELECT *  FROM RouteMaster WHERE RMCode = @RMCode) and IsNull(@RMCode,'') <> ''
         BEGIN
         	SET @Taction = 1
         	--SELECT '5'
         END

         -- Route Master Name
	     IF IsNull(@RMName,'') = ''
	     BEGIN
	          SET @ErrDesc = 'In Row ' + cast (@Rno as varchar(10)) + ' Route Master Name is empty'
        	  INSERT INTO Errorlog VALUES (2,@TabName,'RMName',@ErrDesc)           	
			  SET @Taction = 0
			  SET @Po_ErrNo = 1
         END	
	     -- Company
	     IF IsNull(@CmpCode,'') = ''
	     BEGIN
	          SET @ErrDesc = 'In Row ' + cast (@Rno as varchar(10)) + ' Company Code is empty'
        	  INSERT INTO Errorlog VALUES (3,@TabName,'CmpCode',@ErrDesc)           	
			  SET @Taction = 0
			  SET @Po_ErrNo = 1
         END	
         ELSE IF NOT exists (SELECT * FROM Company WHERE CmpCode = @CmpCode ) and IsNull(@CmpCode,'') <> ''
		 BEGIN
	          SET @ErrDesc = 'In Row ' + cast (@Rno as varchar(10)) + ' Company Code '+ @CmpCode + ' Not found '
        	  INSERT INTO Errorlog VALUES (4,@TabName,'CmpCode',@ErrDesc)           	
			  SET @Taction = 0
			  SET @Po_ErrNo = 1
         END
         ELSE IF exists (SELECT * FROM Company WHERE CmpCode = @CmpCode ) and IsNull(@CmpCode,'') <> ''
         BEGIN
              SELECT @CmpId = CmpId FROM Company WHERE CmpCode = @CmpCode
         END
         -- Distance
	     IF IsNull(@Dis,'') = ''
	     BEGIN
	          SET @Dis = 0
         END
         ELSE IF ISNUMERIC(@Dis) = 0
         BEGIN
	          SET @ErrDesc = 'In Row ' + cast (@Rno as varchar(10)) + ' Distance is not a numeric value'
        	  INSERT INTO Errorlog VALUES (4,@TabName,'Distance',@ErrDesc)           	
			  SET @Taction = 0
			  SET @Po_ErrNo = 1
         END
         -- Population
	     IF IsNull(@Pop,'') = ''
	     BEGIN
	          SET @Pop = 0
         END
         ELSE IF ISNUMERIC(@Pop) = 0
         BEGIN
	          SET @ErrDesc = 'In Row ' + cast (@Rno as varchar(10)) + ' Population is not a numeric value'
        	  INSERT INTO Errorlog VALUES (5,@TabName,'Population',@ErrDesc)           	
			  SET @Taction = 0
			  SET @Po_ErrNo = 1
         END
         -- Geo Value
	     IF IsNull(@HierVal,'') = ''
	     BEGIN
	          SET @ErrDesc = 'In Row ' + cast (@Rno as varchar(10)) + ' Geography value is empty'
        	  INSERT INTO Errorlog VALUES (6,@TabName,'GeoName',@ErrDesc)           	
			  SET @Taction = 0
			  SET @Po_ErrNo = 1
         END	
         ELSE IF NOT exists (SELECT * FROM Geography WHERE GeoName = @HierVal ) and IsNull(@HierVal,'') <> ''
		 BEGIN
	          SET @ErrDesc = 'In Row ' + cast (@Rno as varchar(10)) + ' Geography Name '+ @HierVal + ' Not found '
        	  INSERT INTO Errorlog VALUES (7,@TabName,'GeoName',@ErrDesc)           	
			  SET @Taction = 0
			  SET @Po_ErrNo = 1
         END
         ELSE IF exists (SELECT * FROM Geography WHERE GeoName = @HierVal ) and IsNull(@HierVal,'') <> ''
         BEGIN
              SELECT @GeoMainId = GeoMainId FROM Geography WHERE GeoName = @HierVal
         END
         -- Van route
	     IF IsNull(@VanRoute,'') = ''
	     BEGIN
	          SET @ErrDesc = 'In Row ' + cast (@Rno as varchar(10)) + ' Van Route is empty'
        	  INSERT INTO Errorlog VALUES (8,@TabName,'VanRoute',@ErrDesc)           	
			  SET @Taction = 0
			  SET @Po_ErrNo = 1
         END
         ELSE IF ISNUMERIC(@VanRoute) = 0
         BEGIN
	          SET @ErrDesc = 'In Row ' + cast (@Rno as varchar(10)) + ' Van route is not a numeric value'
        	  INSERT INTO Errorlog VALUES (9,@TabName,'Van route',@ErrDesc)           	
			  SET @Taction = 0
			  SET @Po_ErrNo = 1
         END
         -- Route Type
	     IF IsNull(@RMType,'') = ''
	     BEGIN
	          SET @ErrDesc = 'In Row ' + cast (@Rno as varchar(10)) + ' Route Type is empty'
        	  INSERT INTO Errorlog VALUES (10,@TabName,'Route Type',@ErrDesc)           	
			  SET @Taction = 0
			  SET @Po_ErrNo = 1
         END
         ELSE IF Upper(@RMType) = 'SALES ROUTE'
         BEGIN
              SET @RMTypeId = 1
         END
         ELSE IF Upper(@RMType) = 'DELIVERY ROUTE'
         BEGIN
              SET @RMTypeId = 2
         END
         ELSE IF Upper(@RMType) = 'MERCHANDISING ROUTE'
         BEGIN
              SET @RMTypeId = 3
         END
         ELSE
         BEGIN
	          SET @ErrDesc = 'In Row ' + cast (@Rno as varchar(10)) + ' Route is wrong'
        	  INSERT INTO Errorlog VALUES (12,@TabName,'Route',@ErrDesc)           	
			  SET @Taction = 0
			  SET @Po_ErrNo = 1
         END
         -- Local / Upcountry
	     IF IsNull(@LclUp,'') = ''
	     BEGIN
	          SET @ErrDesc = 'In Row ' + cast (@Rno as varchar(10)) + ' Local/upcoutry is empty'
        	  INSERT INTO Errorlog VALUES (11,@TabName,'Local/Upcountry',@ErrDesc)           	
			  SET @Taction = 0
			  SET @Po_ErrNo = 1
         END
         ELSE IF Upper(@LclUp) = 'LOCAL'
         BEGIN
              SET @LclUpId = 1
         END
         ELSE IF Upper(@RMType) = 'UPCOUNTRY'
         BEGIN
              SET @LclUpId = 2
         END
         ELSE
         BEGIN
	          SET @ErrDesc = 'In Row ' + cast (@Rno as varchar(10)) + ' Local Upcountry is wrong'
        	  INSERT INTO Errorlog VALUES (12,@TabName,'Local/Upcoutnry',@ErrDesc)           	
			  SET @Taction = 0
			  SET @Po_ErrNo = 1
         END
         -- Monday
	     IF IsNull(@RMMon,'') = ''
	     BEGIN
	          SET @RMMon = 0
         END
         ELSE IF ISNUMERIC(@RMMon) = 0
         BEGIN
	          SET @ErrDesc = 'In Row ' + cast (@Rno as varchar(10)) + ' Call Days - Mon is not a numeric value'
        	  INSERT INTO Errorlog VALUES (12,@TabName,'RMMon',@ErrDesc)           	
			  SET @Taction = 0
			  SET @Po_ErrNo = 1
         END
         -- Tuesday
	     IF IsNull(@RMTue,'') = ''
	     BEGIN
	          SET @RMTue = 0
         END
         ELSE IF ISNUMERIC(@RMTue) = 0
         BEGIN
	          SET @ErrDesc = 'In Row ' + cast (@Rno as varchar(10)) + ' Call Days - Tue is not a numeric value'
        	  INSERT INTO Errorlog VALUES (13,@TabName,'RMTue',@ErrDesc)           	
			  SET @Taction = 0
			  SET @Po_ErrNo = 1
         END
         -- Wednesday
	     IF IsNull(@RMWed,'') = ''
	     BEGIN
	          SET @RMWed = 0
         END
         ELSE IF ISNUMERIC(@RMWed) = 0
         BEGIN
	          SET @ErrDesc = 'In Row ' + cast (@Rno as varchar(10)) + ' Call Days - Wed is not a numeric value'
        	  INSERT INTO Errorlog VALUES (14,@TabName,'RMWed',@ErrDesc)           	
			  SET @Taction = 0
			  SET @Po_ErrNo = 1
         END
         -- Thursday
	     IF IsNull(@RMThu,'') = ''
	     BEGIN
	          SET @RMThu = 0
         END
         ELSE IF ISNUMERIC(@RMThu) = 0
         BEGIN
	          SET @ErrDesc = 'In Row ' + cast (@Rno as varchar(10)) + ' Call Days - Thu is not a numeric value'
        	  INSERT INTO Errorlog VALUES (15,@TabName,'RMThu',@ErrDesc)           	
			  SET @Taction = 0
			  SET @Po_ErrNo = 1
         END
         -- Friday
	     IF IsNull(@RMFri,'') = ''
	     BEGIN
	          SET @RMFri = 0
         END
         ELSE IF ISNUMERIC(@RMFri) = 0
         BEGIN
	          SET @ErrDesc = 'In Row ' + cast (@Rno as varchar(10)) + ' Call Days - Fri is not a numeric value'
        	  INSERT INTO Errorlog VALUES (61,@TabName,'RMFri',@ErrDesc)           	
			  SET @Taction = 0
			  SET @Po_ErrNo = 1
         END
         -- Saturday
	     IF IsNull(@RMSat,'') = ''
	     BEGIN
	          SET @RMSat = 0
         END
         ELSE IF ISNUMERIC(@RMSat) = 0
         BEGIN
	          SET @ErrDesc = 'In Row ' + cast (@Rno as varchar(10)) + ' Call Days - Sat is not a numeric value'
        	  INSERT INTO Errorlog VALUES (17,@TabName,'RMSat',@ErrDesc)           	
			  SET @Taction = 0
			  SET @Po_ErrNo = 1
         END
         -- Sunday
	     IF IsNull(@RMSun,'') = ''
	     BEGIN
	          SET @RMSun = 0
         END
         ELSE IF ISNUMERIC(@RMSun) = 0
         BEGIN
	          SET @ErrDesc = 'In Row ' + cast (@Rno as varchar(10)) + ' Call Days - Sun is not a numeric value'
        	  INSERT INTO Errorlog VALUES (18,@TabName,'RMSun',@ErrDesc)           	
			  SET @Taction = 0
			  SET @Po_ErrNo = 1
         END
		--	CRCRSTPAR0064
		IF (@RMSun = 0 AND @RMMon  = 0 AND @RMTue  = 0 AND @RMWed = 0 AND @RMThu = 0 AND @RMFri = 0 AND @RMSat = 0 )
		BEGIN 
			  SET @ErrDesc = 'In Row ' + cast (@Rno as varchar(10)) + ' ATLEAST ONE CALL DAY NEEDS TO DEFINE'
        	  INSERT INTO Errorlog VALUES (18,@TabName,'CAL DAYS',@ErrDesc)           	
			  SET @Taction = 0
			  SET @Po_ErrNo = 1
		END
		--CRCRSTPAR0064

		 IF @Taction = 1
	     BEGIN
               -- Dependancy check Company
	           EXEC Proc_DependencyCheck 'RouteMaster',@CmpId
		       IF (SELECT COUNT(*) FROM TempDepCheck) > 0
	           BEGIN
		            SET @ErrDesc = 'Transaction Exists ' + CAST(@CmpId AS VARCHAR(6))
		 	        INSERT INTO Errorlog VALUES (19,@TabName,'CmpId',@ErrDesc)
		 	        SET @Taction = 0
		 	        SET @Po_ErrNo = 1
               END
               -- Dependancy check Geography value
	           EXEC Proc_DependencyCheck 'RouteMaster',@GeoMainId
		       IF (SELECT COUNT(*) FROM TempDepCheck) > 0
	           BEGIN
		            SET @ErrDesc = 'Transaction Exists ' + CAST(@GeoMainId AS VARCHAR(6))
		 	        INSERT INTO Errorlog VALUES (20,@TabName,'GeoMainId',@ErrDesc)
		 	        SET @Taction = 0
		 	        SET @Po_ErrNo = 1
               END
		 END
         --- Insert / Update to Master Table
	     IF @Taction = 1
	     BEGIN
	          UPDATE RouteMaster
		      SET RouteMaster.RMName = @RMName ,
		      RouteMaster.CmpId = @CmpId ,
		      RouteMaster.RMDistance = @Dis ,
		      RouteMaster.RMPopulation = @Pop ,
		      RouteMaster.GeoMainId = @GeoMainId ,
		      RouteMaster.RMVanRoute = @VanRoute ,
		      RouteMaster.RMSRouteType = @RMTypeId ,
		      RouteMaster.RMLocalUpcountry = @LclUpId ,
		      RouteMaster.RMMon = @RMMon ,
		      RouteMaster.RMTue = @RMTue ,
		      RouteMaster.RMWed = @RMWed ,
		      RouteMaster.RMThu = @RMThu ,
		      RouteMaster.RMFri = @RMFri ,
		      RouteMaster.RMSat = @RMSat ,
		      RouteMaster.RMSun = @RMSun
		      WHERE   RouteMaster.RMCode = @RMCode
		      
	          SET @sStr = 'UPDATE RouteMaster
		      SET RouteMaster.RMName = ''' + @RMName + ''',
		      RouteMaster.CmpId = ' + CAST(@CmpId as Varchar(6)) + ',
		      RouteMaster.RMDistance = ' + CAST(@Dis as Varchar(10)) + ',
		      RouteMaster.RMPopulation = ' + CAST(@Pop as Varchar(10)) + ',
		      RouteMaster.GeoMainId = ' + CAST(@GeoMainId as Varchar(6)) + ',
		      RouteMaster.RMVanRoute = ''' + @VanRoute + ''',
		      RouteMaster.RMSRouteType = ' + CAST(@RMTypeId as Varchar(10)) + ',
		      RouteMaster.RMLocalUpcountry = ' + CAST(@LclUpId as Varchar(6)) + ',
		      RouteMaster.RMMon = ' + @RMMon + ',
		      RouteMaster.RMTue = ' + @RMTue   + ',
		      RouteMaster.RMWed = ' + @RMWed + ',
		      RouteMaster.RMThu = ' + @RMThu + ',
		      RouteMaster.RMFri = ' + @RMFri + ',
		      RouteMaster.RMSat = ' + @RMSat + ',
		      RouteMaster.RMSun = ' + @RMSun + '
		      WHERE   RouteMaster.RMCode = ''' + @RMCode + ''''
			  
			  INSERT INTO Translog(strSql1) Values (@sstr)
		
		
         END
	     ELSE IF @Taction = 2
	     BEGIN
	          SET @RMId = dbo.Fn_GetPrimaryKeyInteger('RouteMaster','RMId',CAST(YEAR(GetDate()) AS INT),Month(GetDate()))
              INSERT INTO RouteMaster (RMId,RMCode,RMName,CmpId,RMDistance,RMPopulation,GEOMainId,RMVanRoute,RMSRouteType,RMLocalUpCountry,RMMon,RMTue,RMWed,RMThu,RMFri,RMSat,RMSun,RMstatus,Upload,Availability,LastModBy,LastModDate,AuthId,AuthDate) VALUES
              (@RMId,@RMCode,@RMName,@CmpId,@Dis,@Pop,@GeoMainId,@VanRoute,@RMTypeId,
                @LclUpId,@RMMon,@RMTue,@RMWed,@RMThu,@RMFri,@RMSat,@RMSun,1,'N',1,1,convert(varchar(10),getdate(),121),1,convert(varchar(10),getdate(),121))

              SET @sStr = 'INSERT INTO RouteMaster (RMId,RMCode,RMName,CmpId,RMDistance,RMPopulation,GEOMainId,RMVanRoute,RMSRouteType,RMLocalUpCountry,RMMon,RMTue,RMWed,RMThu,RMFri,RMSat,RMSun,RMstatus,Upload,Availability,LastModBy,LastModDate,AuthId,AuthDate) VALUES
              (' + CAST(@RMId as Varchar(6)) + ',''' + @RMCode + ''',''' + @RMName + ''',' + CAST(@CmpId as Varchar(6)) + ',' + CAST(@Dis as Varchar(10)) + ',' + CAST(@Pop as Varchar(10)) + ',' + CAST(@GeoMainId as Varchar(6)) + ',' + CAST(@VanRoute as Varchar(6)) + ',' + CAST(@RMTypeId as Varchar(6)) + ',' +
                CAST(@LclUpId as Varchar(6)) + ',' + @RMMon + ',' + @RMTue + ',' + @RMWed + ',' + @RMThu + ',' + @RMFri + ',' + @RMSat + ',' + @RMSun + ',1,''N'',1,1,''' + convert(varchar(10),getdate(),121) + ''',1,''' + convert(varchar(10),getdate(),121) + ''')'
			  
			  INSERT INTO Translog(strSql1) Values (@sstr)


              UPDATE Counters SET currvalue = @RMId WHERE Tabname = 'RouteMaster' and fldname = 'RMId'
              SET @sStr = 'UPDATE Counters SET currvalue = ' + CAST(@RMId as VArchar(6)) + ' WHERE Tabname = ' + '''RouteMaster''' + ' and fldname = ' + '''RMId'''
			  
			  INSERT INTO Translog(strSql1) Values (@sstr)

         END
         FETCH NEXT FROM Cur_ImpRoute INTO
                @RMCode,@RMName,@CmpCode,@Dis,@Pop,@HierVal,@VanRoute,@RMType,@LclUp,
                @RMMon,@RMTue,@RMWed,@RMThu,@RMFri,@RMSat,@RMSun

      END
      CLOSE Cur_ImpRoute
      DEALLOCATE Cur_ImpRoute
END
GO
--CRCRSTPAR0066	(In core stocky duplicate saleman for HHT Device Serial Number validated)
IF NOT EXISTS (SELECT A.NAME FROM SysObjects A INNER JOIN SysColumns B 
ON A.id=B.id AND A.name='Cs2Cn_Prk_Salesman' AND B.name='HHTDeviceSerialNumber')      
BEGIN     
	ALTER TABLE Cs2Cn_Prk_Salesman ADD HHTDeviceSerialNumber VARCHAR(100)       
END
GO
UPDATE A SET Upload='N' from salesman A where LEN(LTRIM(RTRIM(HHTDEVICESERIALNUMBER)))>0
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_Cs2Cn_Salesman' AND TYPE ='P')
DROP PROCEDURE Proc_Cs2Cn_Salesman
GO
/*
BEGIN TRANSACTION
EXEC Proc_Cs2Cn_Salesman 0
SELECT * FROM Cs2Cn_Prk_Salesman ORDER BY SlNo
SELECT * FROM Retailer
ROLLBACK TRANSACTION
*/
CREATE PROCEDURE Proc_Cs2Cn_Salesman
(
	@Po_ErrNo	INT OUTPUT,
	@ServerDate DATETIME
)
AS
SET NOCOUNT ON
BEGIN
/*********************************
* PROCEDURE		: Proc_Cs2Cn_Salesman
* PURPOSE		: To Extract Salesman Details from CoreStocky to upload to Console
* CREATED		: Nandakumar R.G
* CREATED DATE	: 22/06/2010
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}

***************************************************************************************************
* DATE       AUTHOR        CR/BZ	USER STORY ID           DESCRIPTION                         
***************************************************************************************************
16-08-2018  Amuthakumar P   CR     CRCRSTPAR0016		  Returns Configuration for HHT Device Serial Number
25-06-2019  lakshman M      CR      CRCRSTPAR0066           In core stocky duplicate saleman for HHT Device Serial Number validated.
***************************************************************************************************/ 
	DECLARE @DistCode	As nVarchar(50)
	
	SET @Po_ErrNo=0
	DELETE FROM Cs2Cn_Prk_Salesman WHERE UploadFlag = 'Y'
	
	SELECT @DistCode = DistributorCode FROM Distributor
	INSERT INTO Cs2Cn_Prk_Salesman
	(
		DistCode,
		SMId,
		SMCode,
		SMName,
		SMPhoneNo,
		SMEmail,
		SMOtherDetails,
		SMDailyAllowance,
		SMMonthlySalary,
		SMMktCredit,
		SMCreditDays,
		Status,
		RMId,
		RMCode,
		RMName,
		UploadFlag,
		HHTDEVICESERIALNUMBER
	)
	SELECT
		@DistCode,
		SM.SMId,
		SM.SMCode,
		SM.SMName,
		SM.SMPhoneNumber,
		SM.SMEmailID,
		SM.SMOtherDetails,
		SM.SMDailyAllowance,
		SM.SMMonthlySalary,
		SM.SMMktCredit,
		SM.SMCreditDays,
		(CASE SM.Status WHEN 0 THEN 'InActive' ELSE 'Active' END) AS Status,
		ISNULL(SMR.RMId,0) AS RMId,
		ISNULL(RM.RMCode,'') AS RMCode,
		ISNULL(RM.RMName,'') AS RMName,
		'N'	As Uploadflag,
		SM.HHTDeviceSerialNumber			
	FROM		
		Salesman SM LEFT OUTER JOIN  SalesmanMarket SMR
		ON SM.SMId=SMR.SMId
		LEFT OUTER JOIN  RouteMaster RM ON SMR.RMId=RM.RMId
	WHERE SM.Upload = 'N' 

	UPDATE Salesman SET Upload='Y'
	WHERE SMCode IN (SELECT SMCode FROM Cs2Cn_Prk_Salesman)
	UPDATE Cs2Cn_Prk_Salesman SET ServerDate=@ServerDate
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME ='Fn_SalesmanHHTDDevicevaldate' AND Type ='TF')
DROP FUNCTION Fn_SalesmanHHTDDevicevaldate
GO
CREATE function Fn_SalesmanHHTDDevicevaldate (@Smcode varchar(50),@HHTDDeviceno AS varchar(100),@iMode INT)
RETURNS @ReturnHHTDError TABLE
(
	ErrorMessage  Varchar(500)
)
AS
/***************************************************************************************************
* DATE       AUTHOR        CR/BZ	USER STORY ID           DESCRIPTION                         
***************************************************************************************************
25-06-2019  lakshman M     CR     CRCRSTPAR0066           In core stocky duplicate saleman for HHT Device Serial Number validated.
***************************************************************************************************/ 
BEGIN		
		--IF @iMode=1 --Add
		--BEGIN
		   IF EXISTS (SELECT * FROM salesman WHERE HHTDeviceSerialNumber=@HHTDDeviceno AND Smcode <> @Smcode)
		   BEGIN
			   INSERT INTO @ReturnHHTDError(ErrorMessage)
			   SELECT Top 1 'Device serial No already exists for the SalesMan '+' ~ ' + smcode From Salesman where HHTDeviceSerialNumber=@HHTDDeviceno
			   RETURN
		   END
		   ELSe 
		   BEGIN
				INSERT INTO @ReturnHHTDError(ErrorMessage)
			    SELECT ' ' 
		   END
		--END

		--IF @iMode=2 --Edit
		--BEGIN
		--   IF EXISTS (SELECT * FROM salesman WHERE HHTDeviceSerialNumber=@HHTDDeviceno)
		--   BEGIN
		--	   INSERT INTO @ReturnTaxError(ErrorMessage)
		--	   SELECT 'Device serial No already exists for the SalesMan' + + smcode From Salesman
		--	   RETURN
		--   END
		--END
	Return
END
GO
DELETE FROM profiledt WHERE Menuid ='mCus14' and BtnIndex =8
INSERT INTO PROFILEDT (PrfId,MenuId,BtnIndex,BtnDescription,BtnStatus,Availability,LastModBy,LastModDate,AuthId,AuthDate)
SELECT Prfid,'mCus14',8,'Order Cancellation',1,1,1,Getdate(),1,Getdate() FROM PROFILEHD
GO
DELETE FROM CustomCaptions WHERE transid =1 and Ctrlid= 1000 and SubCtrlid = 30
INSERT INTO CustomCaptions (TransId,CtrlId,SubCtrlId,CtrlName,Caption,PnlMsg,MsgBox,LngId,Availability,LastModBy,LastModDate,AuthId,AuthDate,DefaultCaption,DefaultPnlMsg,DefaultMsgBox,Visibility,[Enabled])
SELECT 1,1000,30,'MsgBox-1-1000-30','','','Order has been Cancelled Successfully-',1,1,1,Getdate(),1,Getdate(),'','','Order has been Cancelled Successfully-',1,1
GO
DELETE FROM CustomCaptions WHERE transid =1 and Ctrlid= 1000 and SubCtrlid = 31
INSERT INTO CustomCaptions (TransId,CtrlId,SubCtrlId,CtrlName,Caption,PnlMsg,MsgBox,LngId,Availability,LastModBy,LastModDate,AuthId,AuthDate,DefaultCaption,DefaultPnlMsg,DefaultMsgBox,Visibility,[Enabled])
SELECT 1,1000,31,'MsgBox-1-1000-31','','','Order Already Billed,You Cant Cancel the Order Number-',1,1,1,GETDATE(),1,GETDATE(),'','','Order Already Billed,You Cant Cancel the Order Number-',1,1
GO
DELETE FROM CustomCaptions WHERE transid =1 and Ctrlid= 1000 and SubCtrlid = 32
INSERT INTO CustomCaptions (TransId,CtrlId,SubCtrlId,CtrlName,Caption,PnlMsg,MsgBox,LngId,Availability,LastModBy,LastModDate,AuthId,AuthDate,DefaultCaption,DefaultPnlMsg,DefaultMsgBox,Visibility,[Enabled])
SELECT 1,1000,32,'MsgBox-1-1000-32','','','Order has been Cancelled,You cant to do Billing',1,1,1,GETDATE(),1,GETDATE(),'','','Order has been Cancelled,You cant to do Billing',1,1
GO
--CRCRSTPAR0072,CRCRSTPAR0073
Update Configuration SET  Status =  1  WHERE ModuleId = 'BCD13' 
GO
Delete  From  ManualConfiguration  Where ProjectName  = 'PARLE'  and ModuleId = 'AutoInsCRNoteAdj'
GO
Insert Into ManualConfiguration  (ProjectName,ModuleId,ModuleName,[Description],[Status],Condition,ConfigValue,SeqNo )
Values('PARLE','AutoInsCRNoteAdj','Billing','Auto Institutional CR Note Adjumnet',1,'',0,1)
GO
Delete  From  ManualConfiguration  Where ProjectName  = 'PARLE'  and ModuleId = 'AutoInsCRDateConfig'
GO
Insert Into ManualConfiguration  (ProjectName,ModuleId,ModuleName,[Description],[Status],Condition,ConfigValue,SeqNo )
Values('PARLE','AutoInsCRDateConfig','Billing','Auto Institutional CR Note Date Condiion',1,'2019-06-01',0,1)
GO
IF EXISTS (SELECT * FROM sys.objects WHERE NAME='Fn_InsCRNotePending' AND TYPE in ('FN','TF') )
DROP FUNCTION Fn_InsCRNotePending
GO
/*
Begin Tran
SELECT * From Fn_InsCRNotePending(232)      
RollBack Tran
*/
CREATE FUNCTION [dbo].[Fn_InsCRNotePending](@RtrId  INT) 
RETURNS @ReturnLoadGR TABLE
(
	RefCode			Varchar(100),
	CRAdjAmount     Numeric(18,6) 
)
AS
/******************************************************************************************************************************
* Details    : Fn_InsCRNotePending
* PURPOSE    : 
* CREATED BY : Panneer
* CREATED ON : 20-05-2019
*****************************************************************************************************************************
* DATE        AUTHOR			CR/BZ		USER STORY ID   DESCRIPTION   
***************************************************************************************************************************** 
*25-06-2019	  Panneer			CR			CRCRSTPAR0073   Auto  Institutions CR Note Applied  In Billing
*******************************************************************************************************************************/
BEGIN
	Declare @Configval INT
	Declare @ReasonId  INT
	Declare @CoaId     INT

	DECLARE @CRDATE			 DateTime 
	DECLARE @CRDATEGETDATE    DateTime 
	SELECT  @CRDATEGETDATE =  CONVERT(Varchar(10),GETDATE(),121) 

	Select  @CRDATE =  CONVERT(Varchar(10),Condition,121)      From  ManualConfiguration (Nolock)  Where ProjectName  = 'PARLE'  and ModuleId = 'AutoInsCRDateConfig'
	SET @CRDATE = Isnull(@CRDATE,@CRDATEGETDATE) 

	Select  @Configval = [Status]  From  ManualConfiguration (Nolock)  Where ProjectName  = 'PARLE'  and ModuleId = 'AutoInsCRNoteAdj'
	SET @Configval = Isnull(@Configval,0)

	Select  @ReasonId =  ReasonId from  ReasonMaster (Nolock) Where  [Description] = 'Institutions Target Setting'
	SET @ReasonId = ISnull(@ReasonId,0)

	Select  @CoaId =  CoaId from  COAMaster (Nolock) Where  AcName = 'Institutions Target Setting'
	SET @CoaId = ISnull(@CoaId,0)


	IF   @Configval = 1 and @ReasonId <> 0 and  @CoaId <> 0 
	BEGIN
		Insert Into  @ReturnLoadGR
		Select  Distinct  CrNoteNumber,Amount - CrAdjAmount  from  CreditNoteRetailer (NolocK) 
		Where Remarks like '%Download from Console%'   and CoaId = @CoaId  and  ReasonId =  @ReasonId and Status =  1
		AND  RtrId  =  @RtrId  and  CrNoteDate >= @CRDATE

		Delete From  @ReturnLoadGR   Where CRAdjAmount = 0 
	END

RETURN
END
GO
IF EXISTS (SELECT * FROM sys.objects WHERE NAME='Fn_AutoFillRetailerCreditNote' AND TYPE in ('FN','TF') )
DROP FUNCTION Fn_AutoFillRetailerCreditNote
GO
-- SELECT DISTINCT * FROM Dbo.Fn_AutoFillRetailerCreditNote(163,272,0,'2019-06-26')
CREATE FUNCTION [dbo].[Fn_AutoFillRetailerCreditNote]	(  @Pi_RtrId AS NUMERIC(18,0),@Pi_SalNetAmt AS NUMERIC(38,2),
														   @Pi_SalId AS NUMERIC(18,0),@Pi_BillDate AS DATETIME
													    )
RETURNS @AutoFillRetailerCreditNote TABLE
(
    CrNoteNumber    NVARCHAR(200),
	ReasonName      NVARCHAR(200),
	CreditNoteAmt   NUMERIC(18,2),
	AdjustSofarAmt  NUMERIC(18,2),
	AvlAmount       NUMERIC(18,2),
	AdjustAmount    NUMERIC(18,2),
	Remarks			NVARCHAR(200) ,
	DLCRStatus		INT
 )
AS
BEGIN
/******************************************************************************************************************************
* Details    : Fn_InsCRNotePending
* PURPOSE    : 
* CREATED BY : Panneer
* CREATED ON : 20-05-2019
*****************************************************************************************************************************
* DATE        AUTHOR			CR/BZ		USER STORY ID   DESCRIPTION   
***************************************************************************************************************************** 
*25-06-2019	  Panneer			CR			CRCRSTPAR0073   Auto  Institutions CR Note Applied  In Billing		 
*******************************************************************************************************************************/

DECLARE @CreditNoteNo AS NVARCHAR(200)
DECLARE @CrdAvlAmount AS NUMERIC(38,2)
DECLARE @SalNetAmount AS NUMERIC(38,2)    
DECLARE @IN_RETURN AS INT

DECLARE @CRDATE			 DateTime 
DECLARE @CRDATEGETDATE    DateTime 
SELECT  @CRDATEGETDATE =  CONVERT(Varchar(10),GETDATE(),121) 

Select  @CRDATE =  CONVERT(Varchar(10),Condition,121)      From  ManualConfiguration (Nolock)  Where ProjectName  = 'PARLE'  and ModuleId = 'AutoInsCRDateConfig'
SET @CRDATE = Isnull(@CRDATE,@CRDATEGETDATE) 

 
DECLARE @AutoCR TABLE
(
    CrNoteNumber    NVARCHAR(200) 
)


SET @SalNetAmount = @Pi_SalNetAmt - 1

SET @IN_RETURN=0
   
	INSERT INTO @AutoFillRetailerCreditNote(CrNoteNumber,ReasonName,CreditNoteAmt,AdjustSofarAmt,AvlAmount,AdjustAmount,Remarks)
    SELECT DISTINCT 
		A.CrNoteNumber,[Description] AS ReasonName,Amount AS CreditNoteAmt,ISNULL(CrdAdjAmt,0) AS AdjustSofarAmt,
		(Amount-ISNULL(CrdAdjAmt,0)) AS AvlAmount,0 AS AdjustAmount ,A.Remarks  
    FROM 
			CreditNoteRetailer A (NOLOCK) 
			INNER JOIN ReasonMaster RM (NOLOCK) ON A.ReasonId = RM.ReasonId  
			LEFT OUTER JOIN (
									SELECT CrNoteNumber,RtrId,SUM(CrdAdjAmt)CrdAdjAmt FROM
									( 
			
										SELECT CrNoteNumber,A.RtrId,ISNULL(SUM(CrdAdjAmt),0)CrdAdjAmt FROM (
										SELECT CrNoteNumber,A.RtrId,ISNULL(SUM(A.CrAdjAmount),0) AS CrdAdjAmt 
										FROM SalInvCrNoteAdj A (NOLOCK)
										INNER JOIN SalesInvoice SI (NOLOCK) ON A.SalId = SI.SalId WHERE DlvSts <> 3 AND A.RtrId = @Pi_RtrId 
										AND A.SalId <> @Pi_SalId GROUP BY CrNoteNumber,A.RtrId
									)A
									GROUP BY  CrNoteNumber,A.RtrId	
									UNION
									SELECT NoteNo AS CrNoteNumber,RTRID,SUM(AdjAmount) AS CrAdjAmount 
									FROM CRDBNoteAdjustment (Nolock)  WHERE RtrId= @Pi_RtrId GROUP BY NoteNo,RTRID 
									)A GROUP BY CrNoteNumber,RtrId    
							)SCA ON A.CrNoteNumber = SCA.CrNoteNumber 
							AND A.RtrId = SCA.RtrId 
	WHERE (Amount-ISNULL(CrdAdjAmt,0)) > 0 
		  AND [Status] = 1   and  CrNoteDate >= @CRDATE
		  AND A.RtrId = @Pi_RtrId  
    ORDER BY A.CrNoteNumber
  
	Insert Into  @AutoCR
	Select  Distinct A.CrNoteNumber	
	From @AutoFillRetailerCreditNote A ,  CreditNoteRetailer B (Nolock) 
	Where A.CrNoteNumber = B.CrNoteNumber AND  A.Remarks Like '%Download from Console%' and A.ReasonName = 'Institutions Target Setting'

	Update  @AutoFillRetailerCreditNote Set  DLCRStatus =  0

	Update  @AutoFillRetailerCreditNote Set  DLCRStatus =  1
	From @AutoFillRetailerCreditNote A,@AutoCR B  WHere A.CrNoteNumber = B.CrNoteNumber
	
	WHILE EXISTS (SELECT CrNoteNumber FROM @AutoFillRetailerCreditNote 
				  WHERE (AvlAmount-AdjustAmount) > 0 and  ReasonName = 'Institutions Target Setting' 
				  AND  Remarks  like  '%Download from Console%' )  AND @SalNetAmount > 0
	BEGIN
		SELECT TOP(1) @CreditNoteNo = CrNoteNumber,@CrdAvlAmount = AvlAmount 
		FROM @AutoFillRetailerCreditNote  
		WHERE (AvlAmount-AdjustAmount) > 0	and  ReasonName = 'Institutions Target Setting' 
				  AND  Remarks  like  '%Download from Console%' 
		ORDER BY CrNoteNumber

		IF @SalNetAmount >= @CrdAvlAmount
		BEGIN
			UPDATE @AutoFillRetailerCreditNote SET AdjustAmount = ISNULL(@CrdAvlAmount,0) 
			WHERE CrNoteNumber = @CreditNoteNo and  ReasonName = 'Institutions Target Setting'   AND  Remarks  like '%Download from Console%'
			SET @SalNetAmount = @SalNetAmount-@CrdAvlAmount  
		END
		ELSE
		BEGIN
			UPDATE @AutoFillRetailerCreditNote SET AdjustAmount = ISNULL(@SalNetAmount,0) 
			WHERE CrNoteNumber = @CreditNoteNo and  ReasonName = 'Institutions Target Setting'  AND  Remarks  like '%Download from Console%'
			SET @SalNetAmount = 0
		END
	END	
RETURN 
END
GO
IF EXISTS (SELECT * FROM sys.objects WHERE NAME='Fn_ValidateRetailerCreditNote' AND TYPE in ('FN','TF') )
DROP FUNCTION Fn_ValidateRetailerCreditNote
GO
--SELECT DISTINCT Dbo.Fn_ValidateRetailerCreditNote(163,227,0,0,'2016-11-21') AS Approved
CREATE FUNCTION [dbo].[Fn_ValidateRetailerCreditNote](		@Pi_RtrId AS NUMERIC(18,0),
															@Pi_SalNetAmt AS NUMERIC(38,2),@Pi_CrdAdjAmt AS NUMERIC(38,2),
															@Pi_SalId AS NUMERIC(18,0),@Pi_BillDate AS DATETIME)
RETURNS TINYINT
AS
BEGIN
/******************************************************************************************************************************
* Details    : Fn_InsCRNotePending
* PURPOSE    : 
* CREATED BY : Panneer
* CREATED ON : 20-05-2019
*****************************************************************************************************************************
* DATE        AUTHOR			CR/BZ		USER STORY ID   DESCRIPTION   
***************************************************************************************************************************** 
*25-06-2019	  Panneer			CR			CRCRSTPAR0073   Auto  Institutions CR Note Applied  In Billing		 
*******************************************************************************************************************************/
DECLARE @Approved AS TINYINT
DECLARE @CreditAmount AS NUMERIC(18,2)
DECLARE @IN_RETURN AS INT

DECLARE @CRDATE			 DateTime 
DECLARE @CRDATEGETDATE    DateTime 
SELECT  @CRDATEGETDATE =  CONVERT(Varchar(10),GETDATE(),121) 

Select  @CRDATE =  CONVERT(Varchar(10),Condition,121)      From  ManualConfiguration (Nolock)  Where ProjectName  = 'PARLE'  and ModuleId = 'AutoInsCRDateConfig'
SET @CRDATE = Isnull(@CRDATE,@CRDATEGETDATE) 



SET @IN_RETURN=0
SET @Approved = 0  

   SELECT @CreditAmount = SUM(CreditAmount) 
   FROM (
		SELECT DISTINCT ISNULL((Amount-ISNULL(CrdAdjAmt,0)),0) CreditAmount 
		FROM CreditNoteRetailer A(NOLOCK) 
			LEFT OUTER JOIN	(
			SELECT CrNoteNumber,RtrId,SUM(CrdAdjAmt)CrdAdjAmt FROM
				( 
				SELECT CrNoteNumber,A.RtrId,ISNULL(SUM(CrdAdjAmt),0)CrdAdjAmt 
				FROM ( 
					SELECT CrNoteNumber,A.RtrId,ISNULL(SUM(A.CrAdjAmount),0) AS CrdAdjAmt 
					FROM SalInvCrNoteAdj A (NOLOCK) 
					INNER JOIN SalesInvoice SI (NOLOCK) ON A.SalId = SI.SalId WHERE Dlvsts <> 3 AND A.RtrId = @Pi_RtrId 
					AND A.SalId <> @Pi_SalId GROUP BY CrNoteNumber,A.RtrId
				)A
				GROUP BY  CrNoteNumber,A.RtrId
				UNION
				SELECT NoteNo AS CrNoteNumber,RTRID,SUM(AdjAmount) AS CrAdjAmount 
				FROM CRDBNoteAdjustment WHERE RtrId= @Pi_RtrId GROUP BY NoteNo,RTRID		 
				)A GROUP BY CrNoteNumber,RtrId
    )SCA ON A.CrNoteNumber = SCA.CrNoteNumber AND A.RtrId = SCA.RtrId
    LEFT OUTER JOIN CRDBNoteAdjustment C ON C.NoteNo=A.CrNoteNumber
	WHERE	[Status] = 1 
			 AND A.CrNoteDate >=  @CRDATE AND A.RtrId = @Pi_RtrId    -----  AND A.CrNoteDate <= @Pi_BillDate
			 AND  A.ReasonId in (Select  ReasonId From  ReasonMaster ( Nolock) Where  [Description] = 'Institutions Target Setting') 
			 AND  Remarks  like '%Download from Console%' 
)AA
	 
	IF (@Pi_CrdAdjAmt < @CreditAmount) AND @CreditAmount > 0
	BEGIN
		 IF (@Pi_SalNetAmt-@Pi_CrdAdjAmt) > 1 OR (@Pi_SalNetAmt-@Pi_CrdAdjAmt) < 0
		 BEGIN
			SET @Approved = 1
		 END  
	END  

RETURN(@Approved) 

END
GO
IF EXISTS (SELECT * FROM sys.objects WHERE NAME='Fn_ReturnCreditNoteAvaialble' AND TYPE in ('FN','TF') )
DROP FUNCTION Fn_ReturnCreditNoteAvaialble
GO
--SELECT DISTINCT Dbo.Fn_ReturnCreditNoteAvaialble(188,0)
CREATE FUNCTION [dbo].[Fn_ReturnCreditNoteAvaialble](@Pi_RtrId AS NUMERIC(18,0),@Pi_SalId AS NUMERIC(18,0))
RETURNS TINYINT
AS
BEGIN
/******************************************************************************************************************************
* Details    : Fn_InsCRNotePending
* PURPOSE    : 
* CREATED BY : Panneer
* CREATED ON : 20-05-2019
*****************************************************************************************************************************
* DATE        AUTHOR			CR/BZ		USER STORY ID   DESCRIPTION   
***************************************************************************************************************************** 
*25-06-2019	  Panneer			CR			CRCRSTPAR0073   Auto  Institutions CR Note Applied  In Billing			 
*******************************************************************************************************************************/
DECLARE @AvlStatus AS TINYINT
DECLARE @IN_RETURN AS INT
SET @IN_RETURN=0
SET @AvlStatus = 0

DECLARE @CRDATE			 DateTime 
DECLARE @CRDATEGETDATE    DateTime 
SELECT  @CRDATEGETDATE =  CONVERT(Varchar(10),GETDATE(),121) 

Select  @CRDATE =  CONVERT(Varchar(10),Condition,121)      From  ManualConfiguration (Nolock)  Where ProjectName  = 'PARLE'  and ModuleId = 'AutoInsCRDateConfig'
SET @CRDATE = Isnull(@CRDATE,@CRDATEGETDATE) 



	IF EXISTS ( SELECT DISTINCT A.CrNoteNumber,SUM(Amount-ISNULL(CrdAdjAmt,0)) AS CreditAmount 
				FROM CreditNoteRetailer A (NOLOCK) 
				LEFT OUTER JOIN	(
									SELECT A.CrNoteNumber,A.RtrId,ISNULL(SUM(A.CrAdjAmount),0) AS CrdAdjAmt 
									FROM SalInvCrNoteAdj A (NOLOCK) INNER JOIN SalesInvoice SI (NOLOCK) ON A.SalId = SI.SalId  
									WHERE Dlvsts <> 3 AND A.RtrId = @Pi_RtrId 
										AND A.SalId <> @Pi_SalId GROUP BY A.CrNoteNumber,A.RtrId
								)SCA 
								ON A.CrNoteNumber = SCA.CrNoteNumber AND A.RtrId = SCA.RtrId 
				WHERE [Status] = 1   AND A.RtrId = @Pi_RtrId  and  CrNoteDate >= @CRDATE
					AND A.ReasonId In (Select ReasonId From  ReasonMaster (Nolock) Where [Description] = 'Institutions Target Setting'  ) 
					AND  Remarks  like '%Download from Console%'
				GROUP BY A.CrNoteNumber HAVING SUM(Amount-ISNULL(CrdAdjAmt,0)) > 0)

	BEGIN
		SET @AvlStatus = 1
	END
	
RETURN(@AvlStatus) 
END
GO
IF EXISTS (SELECT * FROM sys.objects WHERE NAME='FN_ReturnCreditnotedetails' AND TYPE in ('FN','TF') )
DROP FUNCTION FN_ReturnCreditnotedetails
GO
---  SELECT DISTINCT Dbo.Fn_ReturnCreditNoteAvaialble(196,9188) AS AvlStatus
CREATE FUNCTION [dbo].[FN_ReturnCreditnotedetails] (@Rtrid INT,@SalId INT,@BillDate DATETIME)
RETURNS @ReturnCreditnotedetails TABLE
(
	CrNoteNumber	VARCHAR(50),
	[Description]	NVARCHAR(100),
	Amount			NUMERIC(18,2),
	CrAdjAmount		NUMERIC (18,2),
	AvailAmount		NUMERIC(18,2),
	Status INT,
	DLCRStatus INT
)
AS
/******************************************************************************************************************************
* Details    : Fn_InsCRNotePending
* PURPOSE    : 
* CREATED BY : Panneer
* CREATED ON : 20-05-2019
*****************************************************************************************************************************
* DATE        AUTHOR			CR/BZ		USER STORY ID   DESCRIPTION   
***************************************************************************************************************************** 
*25-06-2019	  Panneer			CR			CRCRSTPAR0073   Auto  Institutions CR Note Applied  In Billing		 
*******************************************************************************************************************************/
BEGIN
DECLARE @IN_RETURN AS INT
	SET @IN_RETURN=0

DECLARE @CRDATE			 DateTime 
DECLARE @CRDATEGETDATE    DateTime 
SELECT  @CRDATEGETDATE =  CONVERT(Varchar(10),GETDATE(),121) 

Select  @CRDATE =  CONVERT(Varchar(10),Condition,121)      From  ManualConfiguration (Nolock)  Where ProjectName  = 'PARLE'  and ModuleId = 'AutoInsCRDateConfig'
SET @CRDATE = Isnull(@CRDATE,@CRDATEGETDATE) 


	DECLARE @AutoCR TABLE (  CrNoteNumber    NVARCHAR(200) )


	INSERT INTO @ReturnCreditnotedetails
	SELECT CrNoteNumber,[Description],Amount,CrAdjAmount,AvailAmount,[Status]	,0  DLCRStatus
	FROM	
		(	
			SELECT	CRR.CrNoteNumber , R.Description , CRR.Amount , 
					CRR.CrAdjAmount - CASE ISNULL(A1.Dlvsts,0) WHEN 3 THEN 0 ELSE ISNULL(C.CrAdjAmount,0) END as CrAdjAmount, 
					(CRR.Amount + CASE ISNULL(A1.Dlvsts,0) WHEN 3 THEN 0 ELSE ISNULL(C.CrAdjAmount,0) END - CRR.CrAdjAmount) AvailAmount,CRR.Status 
			FROM CreditNoteRetailer CRR (Nolock)
							INNER JOIN ReasonMaster R (Nolock)  ON CRR.ReasonId = R.ReasonId and CRR.RtrId = @Rtrid 
							LEFT OUTER JOIN SalInvCrNoteAdj C (Nolock)  On C.CrNoteNumber = CRR.CrNoteNumber 
							AND C.SalId = @SalId LEFT OUTER JOIN SALESINVOICE A1  (Nolock)  ON A1.SalId = c.SalId
			Where Status = 1   and CrNoteDate >=  @CRDATE
		) AS A 

		Update @ReturnCreditnotedetails Set  DLCRStatus = 0 

		Insert Into  @AutoCR
		Select  Distinct A.CrNoteNumber	
		From @ReturnCreditnotedetails A ,  CreditNoteRetailer B (Nolock) 
		Where A.CrNoteNumber = B.CrNoteNumber AND  B.Remarks Like '%Download from Console%' 
		and B.ReasonId In (Select  ReasonId From ReasonMaster (Nolock) Where  Description = 'Institutions Target Setting' )

		UPdate  @ReturnCreditnotedetails Set DLCRStatus =  1
		From  @ReturnCreditnotedetails A,@AutoCR B Where A.CrNoteNumber = B.CrNoteNumber 

		 
RETURN
END
GO
----  Sales Panel
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'Prk_SalInvCrNoteAdj') AND type in (N'U'))
BEGIN
CREATE TABLE  Prk_SalInvCrNoteAdj 
(
	[SalId]			[bigint] NOT NULL,
	[CrNoteNumber]	[nvarchar](25) NOT NULL,
	[AdjSofar]		[numeric](18, 2) NOT NULL,
	[CrAdjAmount]	[numeric](18, 2) NOT NULL,
	[RtrId]			[int] NOT NULL,
	[Availability]	[tinyint] NOT NULL,
	[LastModBy]		[tinyint] NOT NULL,
	[LastModDate]	[datetime] NOT NULL,
	[AuthId]		[tinyint] NOT NULL,
	[AuthDate]	[datetime] NOT NULL
) ON [PRIMARY]
END
GO
Delete from CustomCaptions where TransId  =  25  and  ctrlId  =  1000  and SubCtrlId  =  101
GO
Insert Into CustomCaptions (TransId,CtrlId,SubCtrlId,CtrlName,Caption,PnlMsg,MsgBox,LngId,Availability,
							LastModBy,LastModDate,AuthId,AuthDate,DefaultCaption,DefaultPnlMsg,DefaultMsgBox,Visibility,Enabled)
Values(25,1000,101,'MsgBox-25-1000-101','','','Save Failed While Updating SalesInvoice Credit Note',1,1,1,GetDate (),1,GETDATE(),
		'','','  Save Failed While Updating SalesInvoice Credit Note  ',1,1)
GO
Delete from CustomCaptions     where TransId  =  25  and  ctrlId  =  1000  and SubCtrlId  =  102
GO
Insert Into CustomCaptions (TransId,CtrlId,SubCtrlId,CtrlName,Caption,PnlMsg,MsgBox,LngId,Availability,
							LastModBy,LastModDate,AuthId,AuthDate,DefaultCaption,DefaultPnlMsg,DefaultMsgBox,Visibility,Enabled)
Values(25,1000,102,'MsgBox-25-1000-102','','','Net Amount should be greater than zero for Order ',1,1,1,GetDate (),1,GETDATE(),
		'','','  Net Amount should be greater than zero for Order  ',1,1)
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE NAME='Fn_ValidateCreditNoteInBilling' AND TYPE in ('FN','TF') )
DROP FUNCTION Fn_ValidateCreditNoteInBilling
GO
CREATE FUNCTION [dbo].[Fn_ValidateCreditNoteInBilling](@SalId AS BIGINT,@UsrId AS INT)
RETURNS VARCHAR(3000)
/******************************************************************************************************************************
* Details    : Fn_InsCRNotePending
* PURPOSE    : 
* CREATED BY : Panneer
* CREATED ON : 20-05-2019
*****************************************************************************************************************************
* DATE        AUTHOR			CR/BZ		USER STORY ID   DESCRIPTION   
***************************************************************************************************************************** 
*25-06-2019	  Panneer			CR			CRCRSTPAR0073   Auto  Institutions CR Note Applied  In Billing		 
*******************************************************************************************************************************/
BEGIN
DECLARE @ReturnMsg AS VARCHAR(3000)
SET @ReturnMsg=''

	IF EXISTS(	SELECT A.Amount,A.CrAdjAmount as AdjAmount FROM CreditNoteRetailer A (NOLOCK)
				INNER JOIN Prk_SalInvCrNoteAdj B (NOLOCK) ON A.RtrId=B.RtrId and A.CrNoteNumber=B.CrNoteNumber
				WHERE B.AuthId=@UsrId and B.SalId=@SalId
				and A.Amount-A.CrAdjAmount<0)
	BEGIN
		SET @ReturnMsg='Adjustment amount mismatch for the Credit Note No. :'+(SELECT TOP 1 CrNoteNumber FROM Prk_SalInvCrNoteAdj (NOLOCK) WHERE SalId=@SalId and AuthId=@UsrId)
	END	
RETURN @ReturnMsg
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_AutoAdjustmentRetailerCreditNote' AND XTYPE='P')
DROP PROCEDURE Proc_AutoAdjustmentRetailerCreditNote
GO
/*
begin tran  
EXEC Proc_AutoAdjustmentRetailerCreditNote 1444,'2017-01-09',565,892.5,1,0,0,0,''  
SELECT * FROM SalInvCrNoteAdj (NOLOCK) WHERE SalId = 12  
SELECT * FROM CreditNoteRetailer (NOLOCK) WHERE RtrId = 34  
ROLLBACK TRANSACTION  
*/  
CREATE PROCEDURE Proc_AutoAdjustmentRetailerCreditNote    
(  
 @Pi_SalId          BIGINT,  
 @Pi_SalInvDate      DATETIME,  
 @Pi_RtrId          BIGINT,  
 @Pi_SalNetAmt        NUMERIC(36,6),  
 @Pi_UsrId            BIGINT,  
 @Pi_NetAmount        NUMERIC(36,6) OUTPUT,  
 @Pi_CreditAmount     NUMERIC(36,6) OUTPUT,  
 @Pi_CreditError      TINYINT OUTPUT,  
 @Pi_CreditErrorMsg  Varchar(3000) OUTPUT  
)  
AS  
/****************************************************************************  
* PROCEDURE: Proc_AutoAdjustmentRetailerCreditNote  
* PURPOSE  : Auto Adjustment Retailer Credit Note  
* NOTES    :  
* CREATED  : Sathishkumar Veeramani 2015/04/20  
* MODIFIED  
* DATE         AUTHOR     DESCRIPTION  
------------------------------------------------------------------------------  
*****************************************************************************/  
SET NOCOUNT ON  
BEGIN  
DECLARE @CreditNote AS NVARCHAR(100)  
DECLARE @CreditAmt AS NUMERIC(36,6)  
DECLARE @ReasonId AS INT  
SET @ReasonId=0  
    SET @Pi_NetAmount = @Pi_SalNetAmt-1  
    BEGIN TRY  
    SET @Pi_CreditError=0  
    SET @Pi_CreditErrorMsg=''  
  
    SELECT @ReasonId=ISNULL(ReasonId,0) FROM ReasonMaster (NOLOCK) WHERE DESCRIPTION='Institutions Target Setting'     
  
     DECLARE @CRDATE    DateTime   
  DECLARE @CRDATEGETDATE    DateTime   
  SELECT  @CRDATEGETDATE =  CONVERT(Varchar(10),GETDATE(),121)   
  
  Select  @CRDATE =  CONVERT(Varchar(10),Condition,121)      From  ManualConfiguration (Nolock)  Where ProjectName  = 'PARLE'  and ModuleId = 'AutoInsCRDateConfig'  
  SET @CRDATE = Isnull(@CRDATE,@CRDATEGETDATE)   
  
  
      
    DELETE A FROM Prk_SalInvCrNoteAdj A WHERE SalId=@Pi_SalId  
      
    SELECT DISTINCT CrNoteNumber,RtrId,(SUM(Amount)-SUM(CrAdjAmount)) AS CreditAmount  INTO #RetailerCreditNoteDetails   
    FROM CreditNoteRetailer (NOLOCK)   
    WHERE [Status] = 1   and Remarks like '%Download from Console%' AND CrNoteDate >=  @CRDATE  
     --AND CrNoteDate <=@Pi_SalInvDate   
     AND RtrId = @Pi_RtrId AND ReasonId=@ReasonId GROUP BY CrNoteNumber,RtrId   
    HAVING (SUM(Amount)-SUM(CrAdjAmount)) > 0  
      
     IF NOT EXISTS (SELECT DISTINCT CrNoteNumber FROM #RetailerCreditNoteDetails)  
     BEGIN  
         SET @Pi_NetAmount = @Pi_SalNetAmt  
         SET @Pi_CreditAmount = 0  
         RETURN  
     END  
       
     WHILE EXISTS (SELECT DISTINCT CrNoteNumber FROM #RetailerCreditNoteDetails)  
	  BEGIN   
				 SELECT TOP(1) @CreditNote = CrNoteNumber,@CreditAmt = SUM(CreditAmount) FROM #RetailerCreditNoteDetails  
				 GROUP BY CrNoteNumber HAVING SUM(CreditAmount) > 0  
				 WHILE @CreditAmt > 0 AND @Pi_NetAmount > 0  
				 BEGIN  
					  IF @Pi_NetAmount >= @CreditAmt  
					  BEGIN                        
						 INSERT INTO Prk_SalInvCrNoteAdj (SalId,CrNoteNumber,AdjSofar,CrAdjAmount,RtrId,Availability,LastModBy,LastModDate,AuthId,AuthDate)  
						 SELECT DISTINCT @Pi_SalId,@CreditNote,0,@CreditAmt,@Pi_RtrId,1,@Pi_UsrId,  
						 CONVERT(NVARCHAR(10),GETDATE(),121),@Pi_UsrId,CONVERT(NVARCHAR(10),GETDATE(),121)           
	                    
						 UPDATE CreditNoteRetailer SET CrAdjAmount = CrAdjAmount+@CreditAmt WHERE RtrId = @Pi_RtrId AND CrNoteNumber = @CreditNote  
						 SET @Pi_NetAmount = @Pi_NetAmount-@CreditAmt  
						 SET @CreditAmt = 0  
					  END  
					  ELSE  
					  BEGIN  
					  
						 INSERT INTO Prk_SalInvCrNoteAdj (SalId,CrNoteNumber,AdjSofar,CrAdjAmount,RtrId,Availability,LastModBy,LastModDate,AuthId,AuthDate)  
						 SELECT DISTINCT @Pi_SalId,@CreditNote,0,@Pi_NetAmount,@Pi_RtrId,1,@Pi_UsrId,  
						 CONVERT(NVARCHAR(10),GETDATE(),121),@Pi_UsrId,CONVERT(NVARCHAR(10),GETDATE(),121)           
	                    
						 UPDATE CreditNoteRetailer SET CrAdjAmount = CrAdjAmount+@Pi_NetAmount WHERE RtrId = @Pi_RtrId AND CrNoteNumber = @CreditNote  
						 SET @Pi_NetAmount=0
						 --SET @CreditAmt = 0  
						 --SET @Pi_CreditError=1  
						 --SET @Pi_CreditErrorMsg='Credit Note value is lesser than Bill Value, Please increase the sales. Order No. :'                                            
					  END   
				 END  
	  DELETE FROM #RetailerCreditNoteDetails WHERE CrNoteNumber = @CreditNote   
	  END  
	  
	  
  SET @Pi_NetAmount = @Pi_NetAmount+1  
  SELECT @Pi_CreditAmount = ISNULl(SUM(CrAdjAmount),0) FROM Prk_SalInvCrNoteAdj (NOLOCK) WHERE RtrId = @Pi_RtrId AND SalId = @Pi_SalId  
    
  END TRY  
  BEGIN CATCH  
    SET @Pi_CreditError=1  
    SET @Pi_CreditErrorMsg=ERROR_MESSAGE() + ' Error in CreditNote Adjustment'  
  END CATCH  
  
  SELECT @Pi_NetAmount,@Pi_CreditAmount,@Pi_CreditError,@Pi_CreditErrorMsg   
RETURN  
END
GO
UPDATE Configuration SET Status=1 WHERE ModuleName='RetailerClassShift' AND ModuleId='RCS1'
GO
UPDATE Configuration SET Status=1 WHERE ModuleName='RetailerClassShift' AND ModuleId='RCS5'
GO
UPDATE Configuration SET Status=1 WHERE ModuleName='RetailerClassShift' AND ModuleId='RCS6'
GO
UPDATE Configuration SET Status=1 WHERE ModuleName='RetailerClassShift' AND ModuleId='RCS2'
GO
UPDATE Configuration SET Status=1 WHERE ModuleName='RetailerClassShift' AND ModuleId='RCS3'
GO
UPDATE Configuration SET Status=0 WHERE ModuleName='RetailerClassShift' AND ModuleId='RCS4'
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[FN_ReturnJcDetails]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [FN_ReturnJcDetails]
GO
--SELECT * FROM FN_ReturnJcDetails()
CREATE FUNCTION [FN_ReturnJcDetails]()
RETURNS @ReturnJC TABLE
(
	CurMonStartDate		DATETIME,
	CurMonEndDate		DATETIME,
	LastMonStartDate	DATETIME,
	LastMonEndDate		DATETIME,
	NextMonStartDate	DATETIME,
	NextMonEndDate		DATETIME,
	CurJcmId			INT,
	CurJcmJc			INT,	
	LastJcmId			INT,
	LastJcmJc			INT,
	NextJcmId			INT,
	NextJcmJc			INT
)
AS
/*********************************
* FUNCTION: FN_ReturnJcDetails
* PURPOSE: Return JC Month Start,End Date,JcmJc,JcmId
* NOTES:
* CREATED:  Kalai	26-06-2019
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
*
*********************************/
BEGIN
	DECLARE @CurMonStartDate AS DATETIME
	DECLARE @CurMonEndDate AS DATETIME
	DECLARE @CurJcmJc AS INT
	DECLARE @CurJcmId AS INT
	DECLARE @LastMonStartDate AS DATETIME
	DECLARE @LastMonEndDate AS DATETIME
	DECLARE @LastJcmJc AS INT
	DECLARE @LastJcmId AS INT
	DECLARE @NextStartDate AS DATETIME
	DECLARE @NextEndDate AS DATETIME
	DECLARE @NextMonJcmJc AS INT
	DECLARE @NextMonJcmId AS INT	
	
	---Previous Month
	SELECT @LastMonStartDate=A.JcmSdt,@LastMonEndDate=A.JcmEdt,@LastJcmId=A.JcmId,@LastJcmJc=JcmJc FROM JCMonth A 
	INNER JOIN JCMast B ON A.JcmId=B.JcmId 
	WHERE JcmEdt=(SELECT DATEADD(D,-1,A.JcmSdt) FROM JCMonth A INNER JOIN JCMast B ON A.JcmId=B.JcmId 
					WHERE CONVERT(VARCHAR(10),GETDATE(),121) BETWEEN JcmSdt AND JcmEdt)
	
	---Next Month
	SELECT @NextStartDate=A.JcmSdt,@NextEndDate=A.JcmEdt,@NextMonJcmId=A.JcmId,@NextMonJcmJc=JcmJc FROM JCMonth A 
	INNER JOIN JCMast B ON A.JcmId=B.JcmId 
	WHERE JcmSdt=(SELECT DATEADD(D,+1,A.JcmEdt) FROM JCMonth A INNER JOIN JCMast B ON A.JcmId=B.JcmId 
					WHERE CONVERT(VARCHAR(10),GETDATE(),121) BETWEEN JcmSdt AND JcmEdt)
	
	--Current Month	
	SELECT @CurMonStartDate=A.JcmSdt,@CurMonEndDate=A.JcmEdt,@CurJcmId=A.JcmId,@CurJcmJc=JcmJc FROM JCMonth A 
	INNER JOIN JCMast B ON A.JcmId=B.JcmId WHERE CONVERT(VARCHAR(10),GETDATE(),121) BETWEEN JcmSdt AND JcmEdt
			
	INSERT INTO @ReturnJC(CurMonStartDate,CurMonEndDate,LastMonStartDate,LastMonEndDate,
	CurJcmJc,CurJcmId,LastJcmJc,LastJcmId,NextMonStartDate,NextMonEndDate,NextJcmId,NextJcmJc)	
	SELECT @CurMonStartDate,@CurMonEndDate,@LastMonStartDate,@LastMonEndDate,@CurJcmJc,@CurJcmId,@LastJcmJc,
	@LastJcmId,@NextStartDate,@NextEndDate,@NextMonJcmId,@NextMonJcmJc

RETURN
END
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Proc_UpdateRetailerClassShift]') AND type in (N'P', N'PC'))
DROP PROCEDURE Proc_UpdateRetailerClassShift
GO
/*
Begin Tran
--update salesinvoice Set Dlvsts=2 where salid=245167
--update RetailerValueClassMap set RtrValueclassid=80  Where Rtrid=8433
	Exec Proc_UpdateRetailerClassShift 2
	--select * From AutoRetailerClassShift Where Rtrid=8462 Order by 1 desc 
	select * From AutoRetailerClassShift Where Rtrid in (8433,9250) Order by 1 desc 
Rollback Tran
*/
CREATE PROCEDURE [dbo].[Proc_UpdateRetailerClassShift]
(
	@Pi_UsrId INT
)
AS
/************************************************************
* VIEW	: [Proc_UpdateRetailerClassShift]
* PURPOSE	: To Update Retailer Class Values
* CREATED BY	: MarySubashini.S
* CREATED DATE	: 19/04/2010
* NOTE		:
* MODIFIED
* DATE		 AUTHOR				 CR/BZ		USER STORY ID		DESCRIPTION					
-------------------------------------------------------------
26-Jun-19	Kalai                CR         CRCRSTPAR0072      1.Retailer class shift logic in Core stocky instead of system date , it should consider JC calendar only
															   2.Negative value should be updated to lowest class  
*************************************************************/
BEGIN
SET NOCOUNT ON
	DECLARE @NoOfMonths AS INT 
	DECLARE @CmpId AS INT 
	DECLARE @GrossorNet AS INT 
	DECLARE @Return AS INT 
	DECLARE @FromDate AS DATETIME 
	DECLARE @ToDate AS DATETIME 
	DECLARE @RtrClassId AS INT
	DECLARE @OldRtrClassId AS INT
	DECLARE @NewCtgMainId AS INT 
	DECLARE @OldCtgMainId AS INT 
	DECLARE @NewCtgLevelId AS INT 
	DECLARE @OldCtgLevelId AS INT 
	DECLARE @RtrId AS INT 
	DECLARE @Amount AS INT 
	DECLARE @CtgMainId AS INT 
	DECLARE @MaxAmount AS NUMERIC(38,2)
	DECLARE @MinAmount AS NUMERIC(38,2)
	DECLARE @MaxRtrClassId AS INT
	DECLARE @MinRtrClassId AS INT
	DECLARE @JCEDate AS DATETIME
	DECLARE @JCLEDate AS DATETIME
	DECLARE @EffDate AS DATETIME  
	 
	SELECT @CmpId=CmpId FROM Company WHERE DefaultCompany=1
	DECLARE @RetailerClassShift  TABLE
	(
		RtrId INT,
		SalesGrossAmount NUMERIC(38,6),
		SalesNetAmount NUMERIC(38,6),
		SalesRtnGrossAmount NUMERIC(38,6),
		SalesRtnNetAmount NUMERIC(38,6),
		RtrValueClassId INT,
		TurnOver NUMERIC(38,6),
		RtrClassId  INT ,
		CtgMainId INT ,
		CtgLevelId INT,
		NewClassId INT
	)
	DECLARE @RetailerNewClass TABLE
	(
		RtrId INT,
		Amount NUMERIC(38,6),
		CtgMainId INT
	)
	DECLARE @JcMonth AS INT
	SELECT @JcMonth=ISNULL(ConfigValue,0)  FROM Configuration WHERE ModuleName='RetailerClassShift' AND ModuleId='RCS5' AND Status=1
	IF @JcMonth=1
	BEGIN
		--IF EXISTS(SELECT BasedOnLastMonth FROM RetailerAutoClass (NOLOCK))
		--BEGIN
		--	SELECT @NoOfMonths=-1*ISNULL(BasedOnLastMonth,3) FROM RetailerAutoClass (NOLOCK)
		--	IF @NoOfMonths IS NULL OR @NoOfMonths=''
		--	BEGIN
		--		SET @NoOfMonths=-3
		--	END
		--END
		--ELSE
		IF NOT EXISTS (SELECT *  FROM Configuration WHERE ModuleName='RetailerClassShift' AND ModuleId='RCS2' AND Status=1)
		BEGIN
			SET @NoOfMonths=-3
		END
		ELSE
		BEGIN
			SELECT @NoOfMonths=(-1)*CAST(ConfigValue AS INT) FROM Configuration WHERE ModuleName='RetailerClassShift' AND ModuleId='RCS2'
		END
	END
	ELSE
	BEGIN
		IF NOT EXISTS (SELECT *  FROM Configuration WHERE ModuleName='RetailerClassShift' AND ModuleId='RCS2' AND Status=1)
		BEGIN
			SET @NoOfMonths=-3
		END
		ELSE
		BEGIN
			SELECT @NoOfMonths=(-1)*CAST(ConfigValue AS INT) FROM Configuration WHERE ModuleName='RetailerClassShift' AND ModuleId='RCS2'
		END
	END
	
	SET @FromDate='2011-06-18' --CONVERT(NVARCHAR(10),GETDATE(),121)
	--Added by Mohanakrishna A.B ICRSTJNJ4218
	SELECT   @JCEDate=CurMonEndDate,@JCLEDate=LastMonEndDate   FROM FN_ReturnJcDetails() 
	----SET @EffDate= (SELECT Distinct EffectiveDate  FROM RetailerAutoClass (NOLOCK))
	
	----IF CONVERT(NVARCHAR(10),(@EffDate),121)= CONVERT(NVARCHAR(10),GETDATE(),121)
	----	BEGIN
	----		SET @FromDate=CONVERT(NVARCHAR(10),DATEADD(M,@NoOfMonths,@JCEDate),121)
	----		SET @ToDate=CONVERT(NVARCHAR(10),@JCEDate,121)
	----	END
	----ELSE
	----	BEGIN
			SET @FromDate=CONVERT(NVARCHAR(10),DATEADD(M,@NoOfMonths,@JCLEDate),121)
			SET @ToDate=CONVERT(NVARCHAR(10),@JCLEDate,121)
		--END
	
	--SET @FromDate=CONVERT(NVARCHAR(10),DATEADD(M,@NoOfMonths,@JCEDate),121) Commented by Mohanakrishna A.B
	--SET @ToDate=CONVERT(NVARCHAR(10),GETDATE(),121) Commented by Mohanakrishna A.B
	 
	-- SELECT   CurMonEndDate,*  FROM FN_ReturnJcDetails() 
	
	-- select @FromDate,@ToDate,@NoOfMonths
	--Till END
	
	
	EXEC Proc_ReturnSalesProductTaxPercentage @FromDate,@ToDate 
	 
	 
	IF  EXISTS (SELECT *  FROM Configuration WHERE ModuleName='RetailerClassShift' AND ModuleId='RCS3' AND Status=1)
	BEGIN
		SET @GrossorNet=1
	END
	ELSE
	BEGIN
		SELECT @GrossorNet=ConfigValue FROM Configuration WHERE ModuleName='RetailerClassShift' AND ModuleId='RCS3'
	END 
	IF NOT EXISTS (SELECT *  FROM Configuration WHERE ModuleName='RetailerClassShift' AND ModuleId='RCS4' AND Status=1)
	BEGIN
		SET @Return=0
	END
	ELSE
	BEGIN
		SET @Return=1
	END
	
	CREATE TABLE #TempCategory
	(
		CtgMainId	INT
	)
	
	--IF EXISTS(SELECT * FROM RetailerAutoClass (NOLOCK))
	--BEGIN
	--	INSERT INTO #TempCategory
	--	SELECT DISTINCT CtgMainId FROM RetailerCategory A,
	--	(SELECT A.CtgLinkCode FROM RetailerCategory A (NOLOCK)
	--	INNER JOIN RetailerAutoClass B (NOLOCK) ON A.CtgLevelId=B.CtgLevelId AND A.CtgMainId=B.CtgMainId) B 
	--	WHERE A.CtgLinkCode LIKE B.CtgLinkCode+'%' and A.CtgLevelId<>1
	--END
	--ELSE
	--BEGIN
		INSERT INTO #TempCategory
		SELECT DISTINCT CtgMainId FROM RetailerCategory A
		WHERE A.CtgLevelId<>1
	--END
	
	INSERT INTO @RetailerClassShift (RtrId,SalesGrossAmount,SalesNetAmount,SalesRtnGrossAmount,
		SalesRtnNetAmount,RtrValueClassId,TurnOver,RtrClassId,CtgMainId,CtgLevelId,NewClassId)
			
	SELECT RtrId,SUM(GrossAmount),SUM(NetAmount),SUM(ReturnGrossAmt),SUM(ReturnNetAmt),
		RtrValueClassId,Turnover,RtrClassId,CtgMainId,CtgLevelId,NewClassId
	FROM (
	--SELECT SI.RtrId,SUM(SI.SalGrossAmount) AS GrossAmount,SUM(SI.SalNetAmt) AS NetAmount,0 AS ReturnGrossAmt,0 AS ReturnNetAmt, Commented by Mohanakrishna A.B
	SELECT SI.RtrId,SUM(SP.PrdGrossAmount+SP.PrdTaxAmount) AS GrossAmount,SUM ((SP.PrdGrossAmount)-(SP.PrdSplDiscAmount+SP.PrdSchDiscAmount+SP.PrdDBDiscAmount+SP.PrdCDAmount)+(SP.PrdTaxAmount)) AS NetAmount,---ICRSTJNJ4218
	0 AS ReturnGrossAmt,0 AS ReturnNetAmt,
	RVC.RtrValueClassId,RC.Turnover,RC.RtrClassId,
	RCC.CtgMainId,RCL.CtgLevelId,0 AS NewClassId FROM SalesInvoice SI (Nolock)
	LEFT OUTER JOIN Retailer RTR ON RTR.RtrId = SI.RTRId 
	LEFT OUTER JOIN  RetailerValueClassmap RVC ON RVC.RtrId = SI.RtrId 
	INNER JOIN SalesInvoiceProduct SP (Nolock) ON SI.SalId =SP.SalId 
	INNER JOIN RetailerValueClass RC ON RVC.RtrValueClassId = RC.RtrClassId and RC.CmpId= @CmpId
	INNER JOIN RetailerCategory RCC ON RCC.CtgMainId = RC.CtgMainId
	INNER JOIN RetailerCategoryLevel RCL ON RCL.CtgLevelId = RCC.CtgLevelId and RCL.CmpId=@CmpId
	INNER JOIN #TempCategory TC ON TC.CtgMainId=RCC.CtgMainId 
	WHERE SI.OrderDate BETWEEN @FromDate AND @ToDate AND SI.DlvSts IN (4,5)
	GROUP BY SI.RtrId,RVC.RtrValueClassId,RCC.CtgMainId,RCL.CtgLevelId,RC.Turnover,RC.RtrClassId
	UNION 
	--SELECT SI.RtrId,0 AS GrossAmount,0  AS NetAmount,SUM(SI.RtnGrossAmt) AS ReturnGrossAmt,SUM(SI.RtnNetAmt)AS ReturnNetAmt, Commented by Mohanakrishna A.B
	SELECT SI.RtrId,0 AS GrossAmount,0  AS NetAmount,SUM(RP.PrdGrossAmt+PrdTaxAmt) AS ReturnGrossAmt,SUM((RP.PrdGrossAmt)- (RP.PrdSplDisAmt+RP.PrdSplDisAmt+RP.PrdSchDisAmt+RP.PrdCDDisAmt+RP.PrdDBDisAmt)+(PrdTaxAmt))AS ReturnNetAmt,---ICRSTJNJ4218
	RVC.RtrValueClassId,RC.TurnOver,RC.RtrClassId,
	RCC.CtgMainId,RCL.CtgLevelId,0 FROM ReturnHeader SI 
	LEFT OUTER JOIN Retailer RTR ON RTR.RtrId = SI.RTRId 
	LEFT OUTER JOIN  RetailerValueClassmap RVC ON RVC.RtrId = SI.RtrId 
	INNER JOIN ReturnProduct RP ON SI.ReturnID =RP.ReturnID 
	INNER JOIN RetailerValueClass RC ON RVC.RtrValueClassId = RC.RtrClassId and RC.CmpId= @CmpId
	INNER JOIN RetailerCategory RCC ON RCC.CtgMainId = RC.CtgMainId
	INNER JOIN RetailerCategoryLevel RCL ON RCL.CtgLevelId = RCC.CtgLevelId and RCL.CmpId=@CmpId
	INNER JOIN #TempCategory TC ON TC.CtgMainId=RCC.CtgMainId 
	WHERE SI.ReturnDate BETWEEN @FromDate AND @ToDate AND SI.ReturnType=2 AND SI.Status=0
	GROUP BY SI.RtrId,RVC.RtrValueClassId,RCC.CtgMainId,RCL.CtgLevelId,RC.Turnover,RC.RtrClassId) A
	GROUP BY  RtrId,RtrValueClassId,Turnover,RtrClassId,CtgMainId,CtgLevelId,NewClassId
	
	--select * from @RetailerClassShift -- Where Rtrid=8462
	--select * from @RetailerClassShift --Where Rtrid=8433	
	
	IF @GrossorNet=1 
		BEGIN
			IF @Return=1
			BEGIN 
				INSERT INTO @RetailerNewClass (RtrId,Amount,CtgMainId)
				SELECT RtrId,(CAST((SalesGrossAmount-SalesRtnGrossAmount) AS NUMERIC(38,6)) / CAST (ABS(@NoOfMonths) AS  NUMERIC(38,6))) AS Amount ,CtgMainId FROM @RetailerClassShift 
			END 
			ELSE
			BEGIN 
				INSERT INTO @RetailerNewClass (RtrId,Amount,CtgMainId)
				SELECT RtrId, (CAST(SalesGrossAmount AS NUMERIC(38,6)) / CAST (ABS(@NoOfMonths) AS  NUMERIC(38,6))) AS Amount,CtgMainId FROM @RetailerClassShift 
				
				
			END 
		END
	ELSE
		BEGIN
			IF @Return=1
			BEGIN 
				INSERT INTO @RetailerNewClass (RtrId,Amount,CtgMainId)
				SELECT RtrId,(CAST((SalesNetAmount-SalesRtnNetAmount) AS NUMERIC(38,6)) / CAST (ABS(@NoOfMonths) AS  NUMERIC(38,6))) AS Amount,CtgMainId FROM @RetailerClassShift 
			END 
			ELSE
			BEGIN 
				INSERT INTO @RetailerNewClass (RtrId,Amount,CtgMainId)
				SELECT RtrId,(CAST(SalesNetAmount AS NUMERIC(38,6)) / CAST (ABS(@NoOfMonths) AS  NUMERIC(38,6))) AS Amount,CtgMainId FROM @RetailerClassShift 
			END 
		END 
		
		select * from @RetailerNewClass --Where Rtrid=8433
	DECLARE @MainRtrDt TABLE
	(
		Mode		INT,
		RtrId		INT,
		CtgMainId	INT,
		RtrClassId	INT,
		TurnOver	NUMERIC(18,6),
		Amount		NUMERIC(18,6)
	)
	DELETE FROM AutoRetailerClassShift WHERE ShiftDate=CONVERT(NVARCHAR(10),GETDATE(),121)
	DECLARE Cur_RetailerSlassShift CURSOR
          FOR SELECT RtrId,CtgMainId,Amount FROM @RetailerNewClass
    OPEN Cur_RetailerSlassShift
	FETCH NEXT FROM Cur_RetailerSlassShift INTO @RtrId,@CtgMainId,@Amount
	WHILE @@FETCH_STATUS=0
    BEGIN
   --- Added  By Mohanakrishna A.B ICRSTJNJ4218
		IF @Amount<0 
		BEGIN
			INSERT INTO @MainRtrDt
			SELECT 1,@RtrId,@CtgMainId,RtrClassId,TurnOver,@Amount FROM RetailerValueClass WHERE CtgMainId=@CtgMainId
				AND TurnOver IN
			 (SELECT MIN(TurnOver) FROM RetailerValueClass WHERE  CtgMainId=@CtgMainId AND 
				TurnOver > @Amount AND  CmpId = @CmpId) AND CmpId=@CmpId
		END
		ELSE
		BEGIN
			INSERT INTO @MainRtrDt
			SELECT 1,@RtrId,@CtgMainId,RtrClassId,TurnOver,@Amount FROM RetailerValueClass WHERE CtgMainId=@CtgMainId
				AND TurnOver IN
			 (SELECT MAX(TurnOver) FROM RetailerValueClass WHERE  CtgMainId=@CtgMainId AND 
				TurnOver > @Amount AND  CmpId = @CmpId) AND CmpId=@CmpId
		END
	---	Till End
	
   /* Commented By Mohanakrishna A.B
		INSERT INTO @MainRtrDt
		SELECT 1,@RtrId,@CtgMainId,RtrClassId,TurnOver,@Amount FROM RetailerValueClass WHERE CtgMainId=@CtgMainId
			AND TurnOver IN
		 (SELECT MAX(TurnOver) FROM RetailerValueClass WHERE  CtgMainId=@CtgMainId AND 
			TurnOver > @Amount AND  CmpId = @CmpId) AND CmpId=@CmpId
	*/	
		INSERT INTO @MainRtrDt
		SELECT 2,@RtrId,@CtgMainId,RtrClassId,TurnOver,@Amount FROM RetailerValueClass WHERE CtgMainId=@CtgMainId
			AND TurnOver IN
		 (SELECT MAX(TurnOver) FROM RetailerValueClass WHERE  CtgMainId=@CtgMainId AND 
			TurnOver < @Amount AND  CmpId = @CmpId) AND CmpId=@CmpId
			
		INSERT INTO @MainRtrDt
		SELECT 3,@RtrId,@CtgMainId,A.RtrClassId,A.TurnOver,@Amount FROM RetailerValueClass A 
		INNER JOIN RetailerValueClassMap B On A.RtrClassId=B.RtrValueClassId WHERE A.CtgMainId=@CtgMainId
		AND B.RtrId=@RtrId
	
    FETCH NEXT FROM Cur_RetailerSlassShift INTO  @RtrId,@CtgMainId,@Amount
    END
    CLOSE Cur_RetailerSlassShift
    DEALLOCATE Cur_RetailerSlassShift
		IF EXISTS (SELECT * FROM @MainRtrDt)
		BEGIN
			IF EXISTS (SELECT RtrValueClassId FROM RetailerValueClassMap WHERE RtrId=@RtrId )
			BEGIN
				UPDATE A SET A.RtrValueClassId=B.RtrClassId FROM RetailerValueClassMap A
				INNER JOIN 
						(SELECT A.RtrId,B.RtrClassId FROM @MainRtrDt B INNER JOIN 
							(SELECT DISTINCT Max(Mode) As Mode,RtrId FROM @MainRtrDt WHERE Mode<3 GROUP BY RtrId) A
							ON A.RtrId=B.RtrId AND A.Mode=B.Mode) B ON A.RtrId=B.RtrId
					
					select 'aa',B.RtrClassId,a.* FROM RetailerValueClassMap A
				INNER JOIN 
						(SELECT A.RtrId,B.RtrClassId FROM @MainRtrDt B INNER JOIN 
							(SELECT DISTINCT Max(Mode) As Mode,RtrId FROM @MainRtrDt WHERE Mode<3 GROUP BY RtrId) A
							ON A.RtrId=B.RtrId AND A.Mode=B.Mode) B ON A.RtrId=B.RtrId
							
				--INSERT INTO RetailerClassUpdateStatus
				--SELECT GETDATE(),@Pi_UsrId
				
				INSERT INTO AutoRetailerClassShift (ShiftDate,RtrId,OldRtrClassId,NewRtrClassId)
				SELECT CONVERT(NVARCHAR(10),GETDATE(),121),A.RtrId,A.RtrClassId,B.RtrClassId
				FROM (SELECT DISTINCT RtrId,RtrClassId FROM @MainRtrDt WHERE Mode=3) A INNER JOIN
				(SELECT A.RtrId,B.RtrClassId FROM @MainRtrDt B INNER JOIN 
						(SELECT DISTINCT Max(Mode) As Mode,RtrId FROM @MainRtrDt WHERE Mode<3 GROUP BY RtrId) A
					ON A.RtrId=B.RtrId AND A.Mode=B.Mode) B ON A.RtrId=B.RtrId
				INSERT INTO Track_RtrCategoryandClassChange
				SELECT -1000,A.RtrId,C.CtgLevelId,A.CtgMainId,A.RtrClassId,C.CtgLevelId,A.CtgMainId,B.RtrClassId,
				CONVERT(NVARCHAR(10),GETDATE(),121),CONVERT(NVARCHAR(23),GETDATE(),121),2 FROM 
				(SELECT DISTINCT RtrId,CtgMainId,RtrClassId FROM @MainRtrDt WHERE Mode=3) A INNER JOIN
				(SELECT A.RtrId,B.RtrClassId FROM @MainRtrDt B INNER JOIN 
						(SELECT DISTINCT Max(Mode) As Mode,RtrId FROM @MainRtrDt WHERE Mode<3 GROUP BY RtrId) A
					ON A.RtrId=B.RtrId AND A.Mode=B.Mode) B ON A.RtrId=B.RtrId
				INNER JOIN RetailerCategory C ON A.CtgMainId=C.CtgMainId
				WHERE A.RtrClassId<>B.RtrClassId
				UPDATE Retailer SET Upload='N' WHERE RtrId IN (SELECT RtrId FROM AutoRetailerClassShift WHERE ShiftDate=CONVERT(NVARCHAR(10),GETDATE(),121) )
			END
		END
RETURN
END
GO
--ILCRSTPAR5007 (All schemes loading and current month active schemes loading in scheme master screen Check box option valiation inclueded.)
DELETE FROM CustomCaptions where transid=45 and ctrlid=1000 AND Subctrlid = 110
INSERT INTO CustomCaptions (TransId, CtrlId, SubCtrlId, CtrlName, Caption, PnlMsg, MsgBox, LngId, Availability, LastModBy, LastModDate, AuthId, AuthDate, DefaultCaption, DefaultPnlMsg, DefaultMsgBox, Visibility, Enabled)
SELECT 45,1000,110,'PnlMsg-45-1000-110','','UnSelect to show current month Schemes','',1,1,1,GETDATE(),1,GETDATE(),'','UnSelect to show the All Scheme Details','',1,1
GO
DELETE FROM HotSearchEditorHd WHERE formid =10211 
INSERT INTO HotSearchEditorHd (FormId,FormName,ControlName,SltString,Remainsltstring)
SELECT 10211,'SchemeMaster','Scheme','select','SELECT SchId,SchCode,CmpSchCode,SchDsc,MasterType   FROM (SELECT SchId,SchCode,CmpSchCode,SchDsc,(CASE MasterType WHEN 1 THEN ''Scheme'' ELSE ''Discount'' END) AS MasterType    FROM SchemeMaster with (nolock) WHERE CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121)  BETWEEN SchValidFrom AND SchValidTill) AS A '
GO
IF EXISTS(SELECT * FROM CUSTOMCAPTIONS WHERE CtrlName = 'PnlMsg-45-1000-108')
BEGIN
UPDATE A SET Pnlmsg ='Select To show the All Schemes' FROM CustomCaptions A WHERE  transid=45 and ctrlid=1000 AND Subctrlid = 108
END
GO
--ILCRSTPAR5131,32,33
DELETE FROM Tbl_Generic_Reports WHERE RptName='Order Details Report'
INSERT INTO Tbl_Generic_Reports
SELECT 23,'Order Details Report','Proc_GR_OrderDetail','Order Details Report','Not Available'
GO
DELETE FROM Tbl_Generic_Reports_Filters WHERE RptName='Order Details Report'
INSERT INTO Tbl_Generic_Reports_Filters 
SELECT 23,1,'Not Applicable','Proc_GR_OrderDetail_Values','Order Details Report'
UNION ALL 
SELECT 23,2,'Not Applicable','Proc_GR_OrderDetail_Values','Order Details Report' 
UNION ALL 
SELECT 23,3,'Not Applicable','Proc_GR_OrderDetail_Values','Order Details Report'
UNION ALL 
SELECT 23,4,'Not Applicable','Proc_GR_OrderDetail_Values','Order Details Report'
UNION ALL 
SELECT 23,5,'Not Applicable','Proc_GR_OrderDetail_Values','Order Details Report'
UNION ALL 
SELECT 23,6,'Not Applicable','Proc_GR_OrderDetail_Values','Order Details Report'
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE NAME='Proc_GR_OrderDetail_Values' AND TYPE='P')
DROP PROCEDURE Proc_GR_OrderDetail_Values
GO
CREATE PROCEDURE Proc_GR_OrderDetail_Values  
(  
  @FILTERCAPTION  NVARCHAR(100),  
  @TEXTLIKE  NVARCHAR(100)  
)  
AS  
/*******************************************************************************************************************
* PROCEDURE	    : Proc_GR_OrderDetail_Values
* PURPOSE	    : To reflect Order Details
* Author	    : Mohana 
* CREATED DATE	: 11-07-2019
* PMS NO		: ILCRSTPAR5133
**********************************************************************************************************************************************/
BEGIN  
   
	PRINT 'No Records'   

END
GO
IF EXISTS (SELECT '*' FROM sys.objects WHERE NAME='Proc_GR_OrderDetail' AND TYPE='P')
DROP PROCEDURE Proc_GR_OrderDetail
GO
CREATE PROCEDURE Proc_GR_OrderDetail
(
		@Pi_RptName		NVARCHAR(100),
		@Pi_FromDate	DATETIME,
		@Pi_ToDate		DATETIME,
		@Pi_Filter1		NVARCHAR(100),
		@Pi_Filter2		NVARCHAR(100),
		@Pi_Filter3		NVARCHAR(100),
		@Pi_Filter4		NVARCHAR(100),
		@Pi_Filter5		NVARCHAR(100),
		@Pi_Filter6		NVARCHAR(100)
)
AS 
/*******************************************************************************************************************
* PROCEDURE	    : Proc_GR_OrderDetail
* PURPOSE	    : To reflect Order Details
* Author	    : Mohana 
* CREATED DATE	: 11-07-2019
* PMS NO		: ILCRSTPAR5133
**********************************************************************************************************************************************/
BEGIN

	SET @Pi_FILTER1='%'+ISNULL(@Pi_FILTER1,'')+'%'        
	SET @Pi_FILTER2='%'+ISNULL(@Pi_FILTER2,'')+'%'        
	SET @Pi_FILTER3='%'+ISNULL(@Pi_FILTER3,'')+'%'        
	SET @Pi_FILTER4='%'+ISNULL(@Pi_FILTER4,'')+'%'        
	SET @Pi_FILTER5='%'+ISNULL(@Pi_FILTER5,'')+'%'  
	SET @Pi_FILTER6='%'+ISNULL(@Pi_FILTER6,'')+'%'

	SELECT  'Order Details Report',[Order Number],[Order Date],DocrefNo,[Order Status] FROM
	(
	SELECT DISTINCT A.OrderNo [Order Number],A.OrderDate [Order Date],CASE [Status] WHEN 1 THEN S.SalInvNo ELSE DocRefNo END AS DocrefNo,
	CASE [Status] WHEN 0 THEN 'PENDING' WHEN 1 THEN 'BILLED' WHEN 2 THEN 'CANCELLED' END AS [Order Status]    
	FROM OrderBooking A 
	LEFT OUTER JOIN SalesInvoiceOrderBooking B ON  B.OrderNo = A.orderNO
	LEFT OUTER JOIN SalesInvoice S ON B.SalId = S.SalId 
	WHERE A.OrderDate BETWEEN @Pi_FromDate AND @Pi_ToDate
	)A	 
		 
END
GO
DELETE FROM Tbl_Generic_Reports WHERE RptName='Retailer Master Report'
INSERT INTO Tbl_Generic_Reports
SELECT 22,'Retailer Master Report','Proc_GR_RetailerMaster','Retailer Master Report','Not Available'
GO
DELETE FROM Tbl_Generic_Reports_Filters WHERE RptName='Retailer Master Report'
INSERT INTO Tbl_Generic_Reports_Filters 
SELECT 22,1,'Salesman Name','Proc_GR_RetailerMaster_Values','Retailer Master Report'
UNION ALL 
SELECT 22,2,'Route Name','Proc_GR_RetailerMaster_Values','Retailer Master Report' 
UNION ALL 
SELECT 22,3,'Retailer Name','Proc_GR_RetailerMaster_Values','Retailer Master Report'
UNION ALL 
SELECT 22,4,'Status','Proc_GR_RetailerMaster_Values','Retailer Master Report'
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE NAME='Proc_GR_RetailerMaster_Values' AND TYPE='P')
DROP PROCEDURE Proc_GR_RetailerMaster_Values
GO
CREATE PROCEDURE Proc_GR_RetailerMaster_Values  
(  
  @FILTERCAPTION  NVARCHAR(100),  
  @TEXTLIKE  NVARCHAR(100)  
)  
AS  
/*******************************************************************************************************************
* PROCEDURE	    : Proc_GR_RetailerMaster_Values
* PURPOSE	    : To reflect Retailer Details
* Author	    : Mohana 
* CREATED DATE	: 11-07-2019
* PMS NO		: ILCRSTPAR5131
**********************************************************************************************************************************************/
BEGIN  
 
	SET @TEXTLIKE='%'+ISNULL(@TEXTLIKE,'')+'%'
	
	
	IF @FILTERCAPTION='SalesMan Name'   
	BEGIN  
		SELECT DISTINCT SMName as FilterValues FROM Salesman WHERE SMName LIKE @TEXTLIKE
	END 
	 
	IF @FILTERCAPTION='Route Name'   
	BEGIN  
		SELECT DISTINCT RMName  as FilterValues FROM RouteMaster WHERE RMName LIKE @TEXTLIKE
	END

	IF @FILTERCAPTION='Retailer Name'   
	BEGIN  
		SELECT DISTINCT RtrName as FilterValues FROM 	Retailer WHERE RtrName LIKE @TEXTLIKE
	END 

	IF @FILTERCAPTION='Status'   
	BEGIN  
			SELECT 'ALL' AS FilterValues
			UNION
			SELECT 'ACTIVE' AS FilterValues  
			UNION
			SELECT 'INACTIVE' AS FilterValues 
	END

END
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE NAME='Proc_GR_RetailerMaster' AND TYPE='P')
DROP PROCEDURE Proc_GR_RetailerMaster
GO
--exec Proc_GR_RetailerMaster '','','','','','','INACTIVE','',''
CREATE PROCEDURE Proc_GR_RetailerMaster
(
		@Pi_RptName		NVARCHAR(100),
		@Pi_FromDate	DATETIME,
		@Pi_ToDate		DATETIME,
		@Pi_Filter1		NVARCHAR(100),
		@Pi_Filter2		NVARCHAR(100),
		@Pi_Filter3		NVARCHAR(100),
		@Pi_Filter4		NVARCHAR(100),
		@Pi_Filter5		NVARCHAR(100),
		@Pi_Filter6		NVARCHAR(100)
)
AS 
/*******************************************************************************************************************
* PROCEDURE	    : Proc_GR_RetailerMaster
* PURPOSE	    : To reflect Retailer Details
* Author	    : Mohana 
* CREATED DATE	: 11-07-2019
* PMS NO		: ILCRSTPAR5131
**********************************************************************************************************************************************/
BEGIN

	SET @Pi_FILTER1='%'+ISNULL(@Pi_FILTER1,'')+'%'        
	SET @Pi_FILTER2='%'+ISNULL(@Pi_FILTER2,'')+'%'        
	SET @Pi_FILTER3='%'+ISNULL(@Pi_FILTER3,'')+'%'        
	SET @Pi_FILTER4=ISNULL(@Pi_FILTER4,'')      
	SET @Pi_FILTER5='%'+ISNULL(@Pi_FILTER5,'')+'%'  
	SET @Pi_FILTER6='%'+ISNULL(@Pi_FILTER6,'')+'%'

	CREATE TABLE #Status 
	(
	StNo INT,
	RtrStatus VARCHAR(50)
	)
	IF UPPER(LTRIM(RTRIM(@Pi_Filter4))) ='INACTIVE'
	BEGIN 
		INSERT INTO #Status 
		SELECT 0,'INACTIVE'
	END

	IF UPPER(LTRIM(RTRIM(@Pi_Filter4))) ='ACTIVE'
	BEGIN 
		INSERT INTO #Status 
		SELECT 1,'ACTIVE'
	END

	IF ((@Pi_Filter4 ='') OR (UPPER(LTRIM(RTRIM(@Pi_Filter4)))='ALL'))
	BEGIN 
		INSERT INTO #Status 
		SELECT 0,'INACTIVE'
		UNION ALL
		SELECT 1,'ACTIVE'
	END

	
	CREATE TABLE #RetailerMaster
	(
		RtrId		  INT,
		RtrCode		  NVARCHAR(100),    
		RtrName		  NVARCHAR(100),
		RtrAdd1		  NVARCHAR(100),    
		RtrAdd2		  NVARCHAR(100),
		RtrAdd3		  NVARCHAR(100),    
		RtrPinNo	  NVARCHAR(100),
		RtrPhoneNo	  NVARCHAR(100),    
		RtrEmailId	  NVARCHAR(100) ,
		RtrKeyAcc	  NVARCHAR(100),    
		RtrTINNo	  NVARCHAR(100),
		RtrCovMode	  NVARCHAR(100),           
		RtrStatus	  NVARCHAR(100),
		RtrCrBills	  INT,
		RtrCrLimit	  NUMERIC(18,3),    
		RtrCrDays	  INT,
		GeoName		  NVARCHAR(100),
		SalesRoute	  NVARCHAR(100),    
		DelvRoute	  NVARCHAR(100),
		MerRoute	  NVARCHAR(100),    
		CategoryLevel NVARCHAR(100),
		Category	  NVARCHAR(100),
		Class         NVARCHAR(100),    
		RtrRelation	  NVARCHAR(100),
		ParentId		  INT,
		ParentName	  NVARCHAR(100),
		ParentCode	  NVARCHAR(100)
	)  
 

	INSERT INTO #RetailerMaster (RtrId,RtrCode,RtrName,RtrAdd1,RtrAdd2,RtrAdd3,RtrPinNo,RtrPhoneNo,RtrEmailId,RtrKeyAcc,RtrTINNo,RtrCovMode,RtrStatus,RtrCrBills,
	RtrCrLimit,RtrCrDays,GeoName,SalesRoute,DelvRoute,MerRoute,CategoryLevel,Category,Class,RtrRelation,ParentId)
	SELECT  Distinct R.RtrId,R.RtrCode,R.RtrName,RtrAdd1,RtrAdd2,RtrAdd3,RtrPinNo,RtrPhoneNo,RtrEmailId,
	CASE RtrKeyAcc  WHEN 1 THEN 'Yes' ELSE 'No' END AS RtrKeyAcc,RtrTINNo,CASE RtrCovMode WHEN 1 THEN 'Order Booking'     
	WHEN 2 THEN 'Van Sales' WHEN 3 THEN 'Counter Sales'  END AS RtrCovMode,CASE RtrStatus  WHEN 1 THEN 'Active' ELSE 'InActive' END AS RtrStatus,
	RtrCrBills,RtrCrLimit,RtrCrDays,G.GeoName,RMName AS SalesRoute, '' AS DelvRoute,'' AS MerRoute,RCL.CtgLevelName CategoryLevel, RC.CtgName AS Category,
	RVC.ValueClassName AS Class, CASE ISNULL(RtrRlStatus,1) WHEN 1 THEN 'Independent'   WHEN 2 THEN 'Parent' WHEN 3 THEN 'Child' END AS RELATION , RR.RtrId
	FROM Retailer R 
	LEFT OUTER JOIN Retailermarket RM ON R.Rtrid =RM.Rtrid 
	LEFT OUTER JOIN SalesmanMarket SM ON SM.Rmid =RM.Rmid 
	LEFT OUTER JOIN SalesMan S ON S.SMId =SM.smid 
	INNER JOIN RouteMaster ROT ON ROT.Rmid =Rm.RMId
	INNER JOIN RetailerValueClassMap RVCM ON RVCM.Rtrid =R.Rtrid
	INNER JOIN RetailerValueClass RVC ON RVC.RtrClassId = RVCM.RtrValueClassId
	INNER JOIN RetailerCategory RC ON RC.CtgMainId =RVC.Ctgmainid
	INNER JOIN RetailerCategoryLevel RCL ON RCL.Ctglevelid =Rc.CtgLevelId
	INNER JOIN Geography G ON R.GeoMainId = G.GeoMainId AND RtrStatus IN (SELECT STNO FROM #Status)
	LEFT OUTER JOIN RetailerRelation RR ON R.RtrId = RR.RtrChildId  
	WHERE ROT.RMSRouteType in (1,2)	
	AND RtrName LIKE @Pi_FILTER3
	AND SMName LIKE @Pi_FILTER1
	AND RMName LIKE @Pi_FILTER2

	  /*   Sales Route Update */   
   SELECT DISTINCT R.RtrId,RtrCode,ROT.RMName  INTO #SalRoute FROM RouteMaster ROT,Retailer R     
   WHERE RMSRouteType = 2 AND R.RtrId IN ( SELECT DISTINCT  RtrId FROM #RetailerMaster)    
      AND R.RMId = ROt.RMId    

   UPDATE #RetailerMaster  SET DelvRoute = RMName FROM #RetailerMaster a,#SalRoute B WHERE A.RtrId = B.RtrId 
      
     /*   Merchandising Route Update */    
   SELECT DISTINCT R.RtrId,RtrCode,ROT.RMName INTO #MerRoute FROM RouteMaster ROT,Retailer R,RetailerMarket RM     
   WHERE RMSRouteType = 3 AND R.RtrId IN( SELECT DISTINCT  RtrId FROM #RetailerMaster)    
   AND R.RtrId = RM.RtrId AND RM.RMId = ROt.RMId  
	     
   UPDATE #RetailerMaster  SET MerRoute = RMName FROM #RetailerMaster a,#MerRoute B WHERE A.RtrId = B.RtrId   

   UPDATE A SET A.ParentCode =B.RTRCODE,A.ParentName=B.RTRNAME FROM  #RetailerMaster A  
   INNER JOIN Retailer B ON A.ParentId = B.Rtrid 
   
   SELECT 'Retailer Master',RtrCode,RtrName,RtrAdd1,RtrAdd2,RtrAdd3,RtrPinNo,RtrPhoneNo,RtrEmailId,RtrKeyAcc,RtrTINNo,RtrCovMode,RtrStatus,RtrCrBills,
   RtrCrLimit,RtrCrDays,GeoName,SalesRoute,DelvRoute,MerRoute,CategoryLevel,Category,Class,RtrRelation,ParentCode ,ParentName 
   FROM #RetailerMaster
END
GO
------------ ADDED BY LAKSHMAN M DATED ON 15-07-2019 PMS ID: ILCRSTPAR5175  ------------
IF EXISTS(SELECT * FROM MENUDEF WHERE FORMNAME ='FRMRETAILERMASTER')
BEGIN
	UPDATE A SET BTNSTATUS =1 FROM PROFILEDT A WHERE MENUID ='MCUS4' AND BTNDESCRIPTION IN('Sales Route Add','Sales Route Remove','Value Class Add','Value Class Remove') AND  PRFID IN (SELECT PRFID FROM USERS WHERE USERNAME NOT IN('SMADMIN','SA'))
END
GO
--ILCRSTPAR5223  (Returns the Total Stock For a Product)
IF EXISTS (SELECT '*' FROM sysobjects WHERE Name = 'Fn_ReturnStockInHand' AND type IN('TF','FN'))
DROP FUNCTION dbo.Fn_ReturnStockInHand
GO
CREATE  FUNCTION dbo.Fn_ReturnStockInHand (@PiPrdid INTEGER, @PrdbatId AS INTEGER)
RETURNS @TotalStock table
(
Prdid  Int,
Prdbatid  Int,
StockInhand  Int
)
AS
BEGIN
/*********************************
* FUNCTION: Fn_ReturnStkInHand
* PURPOSE: Returns the Total Stock For a Product
* NOTES: 
* CREATED: lakshman	M  dated ON 18-07-2019 
* PMS ID: ILCRSTPAR5223
* MODIFIED 
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* 
*********************************/

	INSERT INTO @TotalStock
	SELECT Prdid,Prdbatid,ISNULL(SUM((PrdbatLcnSih+prdBatLcnFre)-(prdBatLcnressih+PrdBatLcnResFre)),0)  AS TotalStock FROM ProductBatchlocation 
	WHERE PrdId=@PiPrdid AND Prdbatid =@PrdbatId
	group by prdid,prdbatid

RETURN 
END
GO
--ILCRSTPAR5199
IF EXISTS (SELECT * FROM sys.objects WHERE NAME='Proc_RptDebitNoteTopSheet' AND TYPE='P')
DROP PROCEDURE Proc_RptDebitNoteTopSheet
GO
/*  
BEGIN TRAN  
EXEC Proc_RptDebitNoteTopSheet 291,1,0,'',0,0,1      
SELECT * FROM RptDebitNoteTopSheet_Excel1      
SELECT * FROM RptDebitNoteTopSheet_Excel2   
SELECT * FROM RptDebitNoteTopSheet_Excel3   
SELECT * FROM RptDebitNoteTopSheet_Excel6  
SELECT * FROM RptDebitNoteTopSheet_Excel_GrandTotal  
ROLLBACK TRAN      
*/      
CREATE PROCEDURE Proc_RptDebitNoteTopSheet
(      
 @Pi_RptId   INT,      
 @Pi_UsrId   INT,      
 @Pi_SnapId   INT,      
 @Pi_DbName   NVARCHAR(50),      
 @Pi_SnapRequired INT,@Pi_GetFromSnap  INT,      
 @Pi_CurrencyId  INT      
)      
AS      
/************************************************************************************************************************************      
* PROCEDURE : Proc_RptDebitNoteTopSheet      
* PURPOSE : To Return the Scheme Utilization Details      
* CREATED : Aravindh Deva C      
* CREATED DATE : 27 05 2016      
* NOTE  : Parle SP for Debit Note Top Sheet      
* MODIFIED       
*************************************************************************************************************************************      
* DATE			AUTHOR			CR/BZ			USER STORY ID           DESCRIPTION                               
*************************************************************************************************************************************      
10-10-2017		Mohana.S			CR			CCRSTPAR0172        Included Circular Date and scheme Budget       
04-12-2017		Mohana				BZ			ICRSTPAR6760		Added New Function for calculating Scheme utilized for selected month      
07-12-2017		Mary.S				BZ			ICRSTPAR6933		Excel Sheet row Witdth change          
13-12-2017		Mohana.S			CR			ICRSTPAR6933		Changed Sampling Amount as Zero (default)         
09-01-2018		Lakshman M			BZ			ICRSTPAR7284        LCTR Formula validation changed.(special price not consider in LCTR Value).      
26-03-2018		Mohana S			CR			CCRSTPAR0187		TOT Diff Claims Report Created.       
08-05-2018		Mohana S			SR			ILCRSTPAR0500       included Removed Scheme Products.       
09-05-2018		Mohana S			BZ			ILCRSTPAR0506       chaged the target data selection      
10-05-2018		Mohana S			BZ			ILCRSTPAR0546		Sales return issue fix in Trade schemes      
08-06-2018		Muthulakshmi.V		BZ			ILCRSTPAR0909       Scheme valid date checking condition changed      
25-07-2018		Lakshman M			BZ			ILCRSTPAR1496       Scheme code valdiation included from CS.      
30-08-2018		Amuthakumar P		BZ			ILCRSTPAR1917		Changed Sampling Amount from Sample Issue ( FreeIssueDt)      
19-09-2018		Amuthakumar P		BZ			CRCRSTPAR0023		Debit note Top Sheet not Consider un-salable Sales return / Manual Claim Report Inserted      
09-10-2018		Mohana P			BZ			ILCRSTPAR2313       TAX CALCULATION CHANGED AS PER CLIENT REQUEST      
12-10-2018		Mohana P			BZ			ILCRSTPAR2343       TAX CALCULATION CHANGED AS PER CLIENT REQUEST      
16-10-2018		Mohana P			BZ			ILCRSTPAR2343       Incorprated LIVE Changes in UAT (AS per Awanish discussion, LIVE REport is correct. So we have changed based on live)      
07-12-2018		Lakshman M			BZ			ILCRSTPAR2760       As per Client request manual claim valdaition included.      
19-12-2018		Vasantharaj R		SR			ILCRSTPAR2868       As per Client request [All the report must be generate based on Date range selection.]       
12-03-2019		Lakshman M			SR			CRCRSTPAR0037       As per Client request scheme category type validation included from CS.      
15-03-2019		Lakshman M			SR			ILCRSTPAR3767       As per Client request scheme category non trade scheme Sec sales qty and sec sales values validation included from CS.       
17-04-2019		Lakshman M			CR			CRCRSTPAR0042       In Report Grand Total values added report wise.  
25-04-2019		lakshman M			SR			ILCRSTPAR4201       IN Report GRAND Total validation included.  
30-04-2019		Lakshman M			SR			ILCRSTPAR4224       column name altered for this report  
21-06-2019		S.MOORTHI			CR			CRCRSTPAR0056       STO(Service to Outlet) or Distributor incentive logic to be incorporated and debit note should upload to console  
11-07-2019		S.Mohana			CR			ILCRSTPAR5132		Included General Scheme In Trade Scheme Part
17-07-2019		S.MOHANA			CR			ILCRSTPAR5199		INCLUDED SM INCENTIVE DETAILS 
************************************************************************************************************************************/           
BEGIN      
 SET NOCOUNT ON      
 DECLARE @FromDate   AS DATETIME      
 DECLARE @ToDate    AS DATETIME      
 SELECT @FromDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,10,@Pi_UsrId)      
 SELECT @ToDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,11,@Pi_UsrId)      
 --Report 1      
 DECLARE @CityName AS NVARCHAR(100)      
 DECLARE @DistributorCode AS NVARCHAR(40)      
 DECLARE @DistributorName AS NVARCHAR(100)      
 DECLARE @DBMonth As INT     
 --SELECT @FromDate,@ToDate    
 EXEC Proc_SchUtilization_Report @FromDate,@ToDate      
 SELECT @DistributorCode = DistributorCode, @DistributorName = DistributorName,      
 @CityName = G.GeoName      
 FROM Distributor D (NOLOCK),      
 Geography G (NOLOCK) WHERE D.GeoMainId = G.GeoMainId      
 --Added By Mohana       
 --SELECT @DBMonth = COUNT(*) FROM ACMaster  A INNER JOIN ACPeriod B ON A.AcmId=B.AcmId WHERE AcmYr = YEAR (GETDATE()) AND AcmSdt < =@ToDate      
 SELECT @DBMonth = CASE MONTH (@ToDate)       
  WHEN 4 THEN 1      
  WHEN 5 THEN 2      
  WHEN 6 THEN 3      
  WHEN 7 THEN 4      
  WHEN 8 THEN 5      
  WHEN 9 THEN 6      
  WHEN 10 THEN 7      
  WHEN 11 THEN 8      
  WHEN 12 THEN 9      
  WHEN 1 THEN 10      
  WHEN 2 THEN 11      
  WHEN 3 THEN 12      
 END       
 --Report 1      
 --Report 2      
 DECLARE @slno AS INT      
 DECLARE @SamplingAmount AS NUMERIC(18,2)      
 SELECT @slno = SlNo FROM BatchCreation WHERE FieldDesc = 'Selling Price'      
 --- Change by Amuthakumar P ILCRSTPAR1917      
 SELECT @SamplingAmount = ISNULL(SUM(D.TotalAmt),0)      
 FROM FreeIssueHd J (NOLOCK),      
 FreeIssueDt D (NOLOCK),      
 ProductBatchDetails P (NOLOCK)      
 WHERE J.IssueId = D.IssueId       
 AND P.PrdBatId = D.PrdBatId AND P.PriceId = D.PriceId       
 AND P.SLNo = 3 AND J.IssueDate BETWEEN @FromDate AND @ToDate      
--*****************************************************************************Report 2*******************************************************************************
 --- Till Here ILCRSTPAR1917      
 --Report 3      
 EXEC Proc_ReturnSalesProductTaxPercentage @FromDate,@ToDate      
 SELECT * INTO #ParleOutputTaxPercentage FROM ParleOutputTaxPercentage (NOLOCK)       
 -------------------- Added by Lakshman M On 07/11/2017 PMS_ICRSTPAR6575-------------------      
  -------------- Scheme code validation added by LAkshman M Dated By On 25/07/2018 PMS ID:ILCRSTPAR1496 ------------      
  SELECT S.SalId,S.SalInvNo,S.SalInvDate,S.RtrId,SP.PrdId,SP.PrdBatId,SP.BaseQty BaseQty,          
  B.DefaultPriceId ActualPriceId,SP.SlNo,sp.PrdTaxAmount,PrdUnitSelRate,PrdBatDetailValue,CAST(0 AS Int) AS Schid          
  INTO #BillingDetails          
  FROM SalesInvoice S (NOLOCK)          
  INNER JOIN SalesInvoiceProduct SP (NOLOCK) ON S.SalId = SP.SalId          
  INNER JOIN ProductBatch B (NOLOCK) ON SP.PrdBatId = B.PrdBatId       
  INNER JOIN ProductBatchDetails PBD (NOLOCK) ON PBD.PrdBatId =B.PrdBatId and DefaultPrice =1        
  --INNER JOIN Debitnote_Scheme D ON D.Salid = S.SalId AND SP.SalId = D.Salid AND D.Prdid =SP.PrdID AND D.linetype = 1      
  WHERE S.SalInvDate BETWEEN @FromDate AND @ToDate AND S.DlvSts > 3 and PBD.SLNo =3      
  SELECT S.ReturnID,S.ReturnCode,S.ReturnDate,S.RtrId,SP.PrdId,SP.PrdBatId,-1 * SP.BaseQty BaseQty,SP.PrdUnitMRP MRP,          
  B.DefaultPriceId,SP.SlNo,SP.PrdEditSelRte,sp.PrdTaxAmt as prdtaxamount,PrdUnitSelRte as  PrdUnitSelRate,PrdBatDetailValue,CAST(0 AS Int) AS Schid          
  INTO #ReturnDetails          
  FROM ReturnHeader S (NOLOCK)          
  INNER JOIN ReturnProduct SP (NOLOCK) ON S.ReturnID = SP.ReturnID          
  INNER JOIN ProductBatch B (NOLOCK) ON SP.PrdBatId = B.PrdBatId          
  INNER JOIN ProductBatchDetails PBD (NOLOCK) ON PBD.PrdBatId =B.PrdBatId and DefaultPrice =1      
  and StockTypeId IN (SELECT StockTypeId FROM STOCKTYPE WHERE SystemStockType = 1)       
 --INNER JOIN Debitnote_Scheme D ON D.Salid = S.ReturnID AND SP.ReturnID = D.Salid AND D.linetype = 2      
  WHERE S.ReturnDate BETWEEN  @FromDate AND @ToDate AND S.[Status] = 0 and PBD.SLNo =3      
  SELECT TransType,RtrId,SalId,TransDate,PrdId,PrdBatId,BaseQty,ActualPriceId,SlNo,CAST (0 AS NUMERIC(18,6)) AS ActualSellRate,prdtaxamount,      
PrdBatDetailValue as PrdUnitSelRate,Schid,         
  CAST (0 AS NUMERIC(18,6)) AS LCTR      
  INTO #DebitSalesDetails          
  FROM           
  (          
  SELECT 1 TransType,RtrId,SalId,SalInvDate TransDate,PrdId,PrdBatId,BaseQty,ActualPriceId,SlNo,prdtaxamount,PrdBatDetailValue,Schid  FROM #BillingDetails         
  UNION ALL          
  SELECT 2 TransType,RtrId,ReturnID,ReturnDate TransDate,PrdId,PrdBatId,BaseQty,DefaultPriceId ,SlNo,prdtaxamount,PrdBatDetailValue,Schid  FROM #ReturnDetails          
  ) Consolidated       
 ------------------ Till Here ----------------------      
  UPDATE M SET M.ActualSellRate = round(D.PrdBatDetailValue,2)          
  FROM #DebitSalesDetails M (NOLOCK),          
  ProductBatchDetails D (NOLOCK)           
  WHERE M.ActualPriceId = D.PriceId AND D.SLNo = 3       
 ---------------- commented by Lakshman M on 07/11/2017 ---------------        
 --UPDATE R SET R.LCTR = R.BaseQty * (R.ActualSellRate+(R.ActualSellRate*(T.TaxPerc/100)))      
 --FROM #DebitSalesDetails R (NOLOCK),      
 --#ParleOutputTaxPercentage T (NOLOCK)      
 --WHERE R.SalId = T.Salid AND R.Slno = T.PrdSlno AND T.TransId = R.TransType      
  -----------------------      
  UPDATE R SET R.LCTR = ROUND(((R.BaseQty *(R.PrdUnitSelRate))+(R.BaseQty*R.PrdUnitSelRate)*(T.TaxPerc/100)),2)            
  FROM #DebitSalesDetails R (NOLOCK),          
  #ParleOutputTaxPercentage T (NOLOCK)      
  WHERE R.SalId = T.Salid AND R.Slno = T.PrdSlno AND T.TransId = R.TransType        
 CREATE TABLE #ApplicableProduct      
 (      
  SchId  INT,      
  PrdId   INT      
 )      
 INSERT INTO #ApplicableProduct(SchId,PrdId)      
 SELECT DISTINCT A.SchId,B.Prdid      
  FROM SchemeMaster A      
  INNER JOIN SchemeProducts B ON A.Schid = B.Schid      
  INNER JOIN Product C On B.Prdid = C.PrdId      
  WHERE A.SchemeLvlMode = 0 AND B.PrdId <> 0      
 UNION ALL      
 SELECT DISTINCT A.SchId,E.Prdid      
  FROM SchemeMaster A      
  INNER JOIN SchemeProducts B ON A.Schid = B.Schid      
  INNER JOIN ProductCategoryValue C ON       
  B.PrdCtgValMainId = C.PrdCtgValMainId       
  INNER JOIN ProductCategoryValue D ON      
  D.PrdCtgValLinkCode LIKE Cast(c.PrdCtgValLinkCode as nvarchar(1000)) + '%'      
  INNER JOIN Product E On      
  D.PrdCtgValMainId = E.PrdCtgValMainId       
  INNER JOIN ProductBatch F On      
  F.PrdId = E.Prdid      
  WHERE A.SchemeLvlMode = 0 AND B.PrdCtgValMainId <> 0      
 UNION ALL      
 SELECT DISTINCT S.SchId,B.MasterRecordId      
  FROM SchemeProducts A       
  INNER JOIN UdcDetails B on B.UDCUniqueId =A.PrdCtgValMainId       
  INNER JOIN SchemeMaster S ON A.SchId = S.SchId      
  WHERE S.SchemeLvlMode = 1      
  --added by mohana ILCRSTPAR0500       
 INSERT INTO #ApplicableProduct(SchId,PrdId)      
 SELECT Schid ,PrdId FROM SchemeMasterControlHistory A INNER JOIN SchemeMaster B ON A.CmpSchCode = B.CmpSchCode      
 INNER JOIN Product C ON c.PrdCCode = A.FromValue      
 WHERE ChangeType='Remove'   AND B.SchId in (SELECT SchId FROM SchemeProducts Where PrdCtgValMainId = 0 )      
 INSERT INTO #ApplicableProduct(SchId,PrdId)        
 SELECT DISTINCT A.SchId,E.Prdid      
 FROM SchemeMaster A      
 INNER JOIN SchemeMasterControlHistory B ON A.CmpSchCode = B.CmpSchCode      
 INNER JOIN ProductCategoryValue C ON       
 B.FromValue = C.PrdCtgValCode      
 INNER JOIN ProductCategoryValue D ON      
 D.PrdCtgValLinkCode LIKE Cast(c.PrdCtgValLinkCode as nvarchar(1000)) + '%'      
 INNER JOIN Product E On      
 D.PrdCtgValMainId = E.PrdCtgValMainId       
 INNER JOIN ProductBatch F On      
 F.PrdId = E.Prdid      
 WHERE A.SchemeLvlMode = 0  AND A.SchId in (SELECT SchId FROM SchemeProducts Where PrdId = 0 )      
 AND ChangeType='Remove'        
 CREATE TABLE #ApplicableScheme      
 (      
  SchId   INT,      
  SchDsc   NVARCHAR(100),      
  SchValidFrom DATETIME,      
  SchValidTill DATETIME,       
  Budget   NUMERIC(18,2),      
  BudgetAllocationNo VARCHAR(100),      
  PrdId   INT      
 )      
 INSERT INTO #ApplicableScheme (SchId,SchDsc,SchValidFrom,SchValidTill,Budget,BudgetAllocationNo,PrdId)         
 SELECT DISTINCT A.SchId,S.SchDsc,S.SchValidFrom,S.SchValidTill,S.Budget,S.BudgetAllocationNo, A.PrdId      
 FROM #ApplicableProduct A (NOLOCK),      
 SchemeMaster S (NOLOCK)      
 WHERE A.SchId = S.SchId AND A.SchId  IN (SELECT SCHID FROM Debitnote_Scheme)       
 AND S.Claimable = 1      
 --Added CircularNo and date By Mohana      
 --SELECT S.SchId,S.SchDsc,S.SchValidFrom,S.SchValidTill,SC.SchemeBudget,CircularNo, CircularDate,      
 --SUM(B.BaseQty) [SecSalesQty],CAST(SUM(B.LCTR) AS NUMERIC(18,6)) [SecSalesVal],CAST(0 AS NUMERIC(18,6)) Liab,      
 --CAST(0 AS NUMERIC(18,6)) Amount      
 --INTO #SchemeDebit      
 --FROM #ApplicableScheme S (NOLOCK),      
 --#DebitSalesDetails B (NOLOCK) ,      
 --SchemeMaster SM LEFT Outer JOIN SchemeCirculardetails SC ON SM.CmpSchCode=SC.CmpSchcode       
 --WHERE S.PrdId = B.PrdId AND S.SchId=SM.SchId AND S.SchId in (SELECT DISTINCT  SCHID FROM DEbitnote_Scheme)       
 --GROUP BY S.SchId,S.SchDsc,S.SchValidFrom,S.SchValidTill,SC.SchemeBudget,CircularNo,CircularDate      
 --ORDER BY S.SchId      
 --SchemeCirculardetails      
 SELECT S.SchId,S.SchDsc,S.SchValidFrom,S.SchValidTill,SC.SchemeBudget,CircularNo, CircularDate,      
 SUM(B.BaseQty) [SecSalesQty],CAST(SUM(B.LCTR) AS NUMERIC(18,6)) [SecSalesVal],CAST(0 AS NUMERIC(18,6)) Liab,      
 CAST(0 AS NUMERIC(18,6)) Amount      
 INTO #SchemeDebit1      
 FROM #ApplicableScheme S (NOLOCK),      
 #DebitSalesDetails B (NOLOCK) ,      
 SchemeMaster SM LEFT Outer JOIN SchemeCirculardetails SC ON SM.CmpSchCode=SC.CmpSchcode-- added By Mohana      
 WHERE S.PrdId = B.PrdId AND S.SchId=SM.SchId  and Transtype=1 AND      
 --PMS NO:ILCRSTPAR0909      
 --S.SchValidFrom BETWEEN @FromDate AND @ToDate      
 --AND S.SchValidTill  BETWEEN @FromDate AND @ToDate      
 --(S.SchValidFrom BETWEEN @FromDate AND @ToDate      
 --or S.SchValidTill  BETWEEN @FromDate AND @ToDate)      
 (B.Transdate BETWEEN @FromDate AND @ToDate      
 OR B.TransDate BETWEEN @FromDate AND @ToDate)----PMS NO:ILCRSTPAR1309 Till Here      
 AND SM.cmpschcode in (select Cmpschcode from SchemeCategorydetails where Schcategory_type IN ('Trade Scheme','General Scheme'))  --ILCRSTPAR5132    
 GROUP BY S.SchId,S.SchDsc,S.SchValidFrom,S.SchValidTill,SC.SchemeBudget,CircularNo,CircularDate,Transdate      
 ORDER BY S.SchId      
 ---------------------- Added By lakshman  Dated On 16-03-2019 PMS ID: ILCRSTPAR3767      
 --INSERT INTO #SchemeDebit1       
 --SELECT DISTINCT APS.Schid,APS.SchDsc,APS.SchValidFrom,APS.SchValidTill,SC.SchemeBudget,CircularNo, CircularDate,      
 --SUM(SP.BaseQty) [SecSalesQty],CAST(SUM(SP.PrdActualNetAmount) AS NUMERIC(18,6)) [SecSalesVal],CAST(0 AS NUMERIC(18,6)) Liab,CAST(0 AS NUMERIC(18,6)) Amount      
 --from SalesInvoice S       
 --inner join SalesInvoiceproduct SP ON S.salid =sp.salid       
 --inner join SalesInvoiceSchemeLineWise SIL ON SIL.salid=s.salid and SIL.salid =SP.salid AND SIL.prdid =sp.prdid and sil.prdbatid =sp.PrdBatId       
 --inner join #DebitSalesDetails DS ON DS.salid =S.salid AND DS.salid =SP.salid AND DS.salid =SIl.salid and DS.prdid =SP.prdid and DS.prdbatid = SP.prdbatid AND DS.prdid =SP.prdid and DS.prdbatid =SIl.prdbatid        
 --inner join #ApplicableScheme APS ON APS.schid = SIL.schid AND APS.prdid =DS.prdid AND APS.Prdid =SIL.Prdid       
 --inner join SchemeMaster SM ON SM.schid =SIL.Schid AND SM.Schid =APS.Schid       
 --LEFT Outer JOIN SchemeCirculardetails SC ON SM.CmpSchCode=SC.CmpSchcode-- added By Mohana  
 --WHERE APS.PrdId = DS.PrdId AND APS.SchId=SM.SchId  and Transtype=1 AND      
 ----PMS NO:ILCRSTPAR0909      
 ----S.SchValidFrom BETWEEN @FromDate AND @ToDate      
 ----AND S.SchValidTill  BETWEEN @FromDate AND @ToDate      
 ----(S.SchValidFrom BETWEEN @FromDate AND @ToDate      
 ----or S.SchValidTill  BETWEEN @FromDate AND @ToDate)      
 --(DS.Transdate BETWEEN @FromDate AND @ToDate      
 --OR DS.TransDate BETWEEN @FromDate AND @ToDate)----PMS NO:ILCRSTPAR1309 Till Here      
 --AND SM.cmpschcode in (select Cmpschcode from SchemeCategorydetails where Schcategory_type not IN ('Trade Scheme','General Scheme'))      
 --GROUP BY APS.SchId,APS.SchDsc,APS.SchValidFrom,APS.SchValidTill,SC.SchemeBudget,CircularNo,CircularDate      
 --ORDER BY APS.SchId      
INSERT INTO #SchemeDebit1       
SELECT APS.Schid,APS.SchDsc,APS.SchValidFrom,APS.SchValidTill,SC.SchemeBudget,CircularNo, CircularDate,      
 SUM(SP.BaseQty) [SecSalesQty],Round(CAST((sum(SP.BaseQty*PrdBatDetailValue)+ (sum(SP.BaseQty*PrdBatDetailValue)*(T.TaxPerc/100))) AS Numeric(18,2)),2)  AS  [SecSalesVal],      
 CAST(0 AS NUMERIC(18,6)) Liab,CAST(0 AS NUMERIC(18,6)) Amount      
 from SalesInvoice S       
 inner join SalesInvoiceproduct SP ON S.salid =sp.salid       
 inner join SalesInvoiceSchemeLineWise SIL ON SIL.salid=s.salid and SIL.salid =SP.salid AND SIL.prdid =sp.prdid and sil.prdbatid =sp.PrdBatId       
 inner join #DebitSalesDetails DS ON DS.salid =S.salid AND DS.salid =SP.salid AND DS.salid =SIl.salid and DS.prdid =SP.prdid and DS.prdbatid = SP.prdbatid AND DS.prdid =SP.prdid and DS.prdbatid =SIl.prdbatid        
 inner join #ApplicableScheme APS ON APS.schid = SIL.schid AND APS.prdid =DS.prdid AND APS.Prdid =SIL.Prdid       
 inner join SchemeMaster SM ON SM.schid =SIL.Schid AND SM.Schid =APS.Schid       
 inner join #ParleOutputTaxPercentage T ON T.salid =DS.salid and S.salid =T.salid and SP.Salid =T.salid AND SP.Salid =SIL.Salid and DS.slno =T.PrdSlno and T.TransId = DS.TransType       
 LEFT Outer JOIN SchemeCirculardetails SC ON SM.CmpSchCode=SC.CmpSchcode-- added By Mohana      
 inner join ProductBatchDetails D on D.prdbatid=SIL.prdbatid and D.prdbatid=Sp.prdbatid and D.SlNo=3 and DefaultPrice=1      
 WHERE APS.PrdId = DS.PrdId AND APS.SchId=SM.SchId  and Transtype=1 AND      
 --PMS NO:ILCRSTPAR0909      
 --S.SchValidFrom BETWEEN @FromDate AND @ToDate      
 --AND S.SchValidTill  BETWEEN @FromDate AND @ToDate      
 --(S.SchValidFrom BETWEEN @FromDate AND @ToDate      
 --or S.SchValidTill  BETWEEN @FromDate AND @ToDate)      
 (DS.Transdate BETWEEN @FromDate AND @ToDate      
 OR DS.TransDate BETWEEN @FromDate AND @ToDate)----PMS NO:ILCRSTPAR1309 Till Here      
 AND SM.cmpschcode in (select Cmpschcode from SchemeCategorydetails where Schcategory_type NOT IN ('Trade Scheme','General Scheme'))      --ILCRSTPAR5132  
 GROUP BY APS.SchId,APS.SchDsc,APS.SchValidFrom,APS.SchValidTill,SC.SchemeBudget,CircularNo,CircularDate,SP.BaseQty,PrdBatDetailValue,T.TaxPerc      
 ORDER BY APS.SchId      
 ---------------- Till here -----------------      
 INSERT INTO #SchemeDebit1      
 SELECT S.SchId,S.SchDsc,S.SchValidFrom,S.SchValidTill,SC.SchemeBudget,CircularNo, CircularDate,      
 SUM(B.BaseQty) [SecSalesQty],CAST(SUM(B.LCTR) AS NUMERIC(18,6)) [SecSalesVal],CAST(0 AS NUMERIC(18,6)) Liab,      
 CAST(0 AS NUMERIC(18,6)) Amount      
 FROM #ApplicableScheme S (NOLOCK),      
 #DebitSalesDetails B (NOLOCK) ,      
 SchemeMaster SM LEFT Outer JOIN SchemeCirculardetails SC ON SM.CmpSchCode=SC.CmpSchcode-- added By Mohana      
 WHERE S.PrdId = B.PrdId AND S.SchId=SM.SchId  and Transtype=2 AND       
 --PMSNo:ILCRSTPAR0909      
 --S.SchValidFrom BETWEEN @FromDate AND @ToDate      
 --AND S.SchValidTill  BETWEEN @FromDate AND @ToDate      
 --(S.SchValidFrom BETWEEN @FromDate AND @ToDate      
 --or S.SchValidTill  BETWEEN @FromDate AND @ToDate)      
 (B.Transdate BETWEEN @FromDate AND @ToDate      
 OR  B.Transdate  BETWEEN @FromDate AND @ToDate)     
 AND SM.cmpschcode in (select Cmpschcode from SchemeCategorydetails where Schcategory_type  IN ('Trade Scheme','General Scheme'))       --ILCRSTPAR5132 
 GROUP BY S.SchId,S.SchDsc,S.SchValidFrom,S.SchValidTill,SC.SchemeBudget,CircularNo,CircularDate,Transdate       
 ORDER BY S.SchId      
 ----------------- Added By lakshman M ON Dated ON 15-03-2019  PMS ID: ILCRSTPAR3767      
 INSERT INTO #SchemeDebit1      
 SELECT  APS.Schid,APS.SchDsc,APS.SchValidFrom,APS.SchValidTill,SC.SchemeBudget,CircularNo, CircularDate,      
 SUM(SP.BaseQty) [SecSalesQty],Round(cast((sum(SP.BaseQty*PrdBatDetailValue)+ (sum(SP.BaseQty*PrdBatDetailValue)*(T.TaxPerc/100))) AS Numeric(18,6)),2) AS  [SecSalesVal],CAST(0 AS NUMERIC(18,6)) Liab,CAST(0 AS NUMERIC(18,6)) Amount      
 from Returnheader S       
 inner join Returnproduct SP ON S.Returnid =sp.Returnid       
 inner join ReturnSchemeLineDt SIL ON SIL.Returnid=s.Returnid and SIL.Returnid =SP.Returnid AND SIL.prdid =sp.prdid and sil.prdbatid =sp.PrdBatId       
 inner join #DebitSalesDetails DS ON DS.salid =S.Returnid AND DS.salid =SP.Returnid AND DS.salid =SIl.Returnid and DS.prdid =SP.prdid and DS.prdbatid = SP.prdbatid AND DS.prdid =SP.prdid and DS.prdbatid =SIl.prdbatid        
 inner join #ApplicableScheme APS ON APS.schid = SIL.schid AND APS.prdid =DS.prdid AND APS.Prdid =SIL.Prdid       
 inner join SchemeMaster SM ON SM.schid =SIL.Schid AND SM.Schid =APS.Schid       
 inner join #ParleOutputTaxPercentage T ON T.salid =DS.salid and S.Returnid =T.salid and SP.Salid =T.salid AND SP.Salid =SIL.Returnid       
 and DS.slno =T.PrdSlno and T.TransId = DS.TransType       
 LEFT Outer JOIN SchemeCirculardetails SC ON SM.CmpSchCode=SC.CmpSchcode-- added By Mohana       
 inner join ProductBatchDetails D on D.prdbatid=SIL.prdbatid and D.prdbatid=Sp.prdbatid and D.SlNo=3 and DefaultPrice=1      
 WHERE APS.PrdId = DS.PrdId AND APS.SchId=SM.SchId  and Transtype=2 AND      
 --PMS NO:ILCRSTPAR0909      
 --S.SchValidFrom BETWEEN @FromDate AND @ToDate      
 --AND S.SchValidTill  BETWEEN @FromDate AND @ToDate      
 --(S.SchValidFrom BETWEEN @FromDate AND @ToDate      
 --or S.SchValidTill  BETWEEN @FromDate AND @ToDate)      
 (DS.Transdate BETWEEN @FromDate AND @ToDate      
 OR DS.TransDate BETWEEN @FromDate AND @ToDate)----PMS NO:ILCRSTPAR1309 Till Here      
 AND SM.cmpschcode in (select Cmpschcode from SchemeCategorydetails where Schcategory_type not IN ('Trade Scheme','General Scheme'))       --ILCRSTPAR5132 
 GROUP BY APS.SchId,APS.SchDsc,APS.SchValidFrom,APS.SchValidTill,SC.SchemeBudget,CircularNo,CircularDate,SP.BaseQty,PrdBatDetailValue,T.TaxPerc      
 ORDER BY APS.SchId      
 ----------------- Till here ----------------      
 DELETE FROM #SchemeDebit1 WHERE SchId NOT IN (SELECT Schid FROM Debitnote_Scheme WHERE Linetype=1)            
 INSERT INTO #SchemeDebit1      
 SELECT  S.SchId,S.SchDsc,S.SchValidFrom,S.SchValidTill,SC.SchemeBudget,CircularNo, CircularDate,      
 SUM(B.BaseQty) [SecSalesQty],CAST(SUM(B.LCTR) AS NUMERIC(18,6)) [SecSalesVal],CAST(0 AS NUMERIC(18,6)) Liab,      
 CAST(0 AS NUMERIC(18,6)) Amount      
 FROM #ApplicableScheme S (NOLOCK),      
 #DebitSalesDetails B (NOLOCK) ,      
 SchemeMaster SM LEFT Outer JOIN SchemeCirculardetails SC ON SM.CmpSchCode=SC.CmpSchcode-- added By Mohana      
 ,Debitnote_Scheme D         
 WHERE S.PrdId = B.PrdId AND S.SchId=SM.SchId  and Transtype=2        
 AND S.Schid = D.Schid AND B.Prdid =D.Prdid AND B.Salid =D.Salid       
 AND S.SchId NOT IN (SELECT schid FROM #SchemeDebit1)      
 GROUP BY S.SchId,S.SchDsc,S.SchValidFrom,S.SchValidTill,SC.SchemeBudget,CircularNo,CircularDate      
 ORDER BY S.SchId      
  --- added on 12-MAr-2019      
  --INSERT INTO #SchemeDebit1       
  --SELECT  S.SchId,S.SchDsc,S.SchValidFrom,S.SchValidTill,SC.SchemeBudget,CircularNo, CircularDate,      
  --SUM(B.BaseQty) [SecSalesQty],CAST(SUM(B.LCTR) AS NUMERIC(18,6)) [SecSalesVal],CAST(0 AS NUMERIC(18,6)) Liab,      
  --CAST(0 AS NUMERIC(18,6)) Amount      
  --FROM #ApplicableScheme S (NOLOCK),      
  --#DebitSalesDetails B (NOLOCK) ,      
  --SchemeMaster SM LEFT Outer JOIN SchemeCirculardetails SC ON SM.CmpSchCode=SC.CmpSchcode-- added By Mohana      
  --,Debitnote_Scheme D         
  --WHERE S.PrdId = B.PrdId AND S.SchId=SM.SchId  and Transtype=2        
  --AND S.Schid = D.Schid AND B.Prdid =D.Prdid AND B.Salid =D.Salid       
  --AND S.SchId NOT IN (SELECT schid FROM #SchemeDebit1)      
  --AND SM.cmpschcode in (select Cmpschcode from SchemeCategorydetails where Schcategory_type IN ('Trade Scheme','General Scheme'))      
  --GROUP BY S.SchId,S.SchDsc,S.SchValidFrom,S.SchValidTill,SC.SchemeBudget,CircularNo,CircularDate      
  --ORDER BY S.SchId      
  --INSERT INTO #SchemeDebit1       
  --SELECT  S.SchId,S.SchDsc,S.SchValidFrom,S.SchValidTill,SC.SchemeBudget,CircularNo, CircularDate,      
  --SUM(B.BaseQty) [SecSalesQty],CAST(SUM(B.LCTR) AS NUMERIC(18,6)) [SecSalesVal],CAST(0 AS NUMERIC(18,6)) Liab,      
  --CAST(0 AS NUMERIC(18,6)) Amount      
  --FROM #ApplicableScheme S (NOLOCK),      
  --#DebitSalesDetails B (NOLOCK) ,      
  --SchemeMaster SM LEFT Outer JOIN SchemeCirculardetails SC ON SM.CmpSchCode=SC.CmpSchcode-- added By Mohana      
  --,Debitnote_Scheme D         
  --WHERE S.PrdId = B.PrdId AND S.SchId=SM.SchId  and Transtype=2        
  --AND S.Schid = D.Schid AND B.Prdid =D.Prdid AND B.Salid =D.Salid       
  --AND S.SchId NOT IN (SELECT schid FROM #SchemeDebit1)      
  --AND SM.cmpschcode in (select Cmpschcode from SchemeCategorydetails where Schcategory_type NOT IN ('Trade Scheme','General Scheme'))      
  --GROUP BY S.SchId,S.SchDsc,S.SchValidFrom,S.SchValidTill,SC.SchemeBudget,CircularNo,CircularDate      
  --ORDER BY S.SchId      
  -- end here 12-Mar-2019      
 SELECT  A.SchId,A.SchDsc,A.SchValidFrom,A.SchValidTill,SchemeBudget,CircularNo, CircularDate,      
 SUM(SecSalesQty) SecSalesQty,CAST(SUM(SecSalesVal) AS NUMERIC(18,6)) [SecSalesVal],CAST(0 AS NUMERIC(18,6)) Liab,      
 CAST(0 AS NUMERIC(18,6)) Amount      
 INTO #SchemeDebit       
 from #SchemeDebit1 A      
 INNER JOIN SCHEMEMASTER B ON A.schid=B.schid and B.cmpschcode in (select Cmpschcode from SchemeCategorydetails where Schcategory_type IN ('Trade Scheme','General Scheme') )        --ILCRSTPAR5132
 GROUP BY A.SchId,A.SchDsc,a.SchValidFrom,a.SchValidTill,SchemeBudget,CircularNo, CircularDate      
 INSERT  INTO #SchemeDebit      
 SELECT  A.SchId,A.SchDsc,A.SchValidFrom,A.SchValidTill,SchemeBudget,CircularNo, CircularDate,      
 SUM(SecSalesQty) SecSalesQty,CAST(SUM(SecSalesVal) AS NUMERIC(18,6)) [SecSalesVal],CAST(0 AS NUMERIC(18,6)) Liab,      
 CAST(0 AS NUMERIC(18,6)) Amount      
 from #SchemeDebit1 A      
 INNER JOIN SCHEMEMASTER B ON A.schid=B.schid and B.cmpschcode in (select Cmpschcode from SchemeCategorydetails where Schcategory_type NOT IN ('Trade Scheme','General Scheme') )      --ILCRSTPAR5132  
 GROUP BY A.SchId,A.SchDsc,a.SchValidFrom,a.SchValidTill,SchemeBudget,CircularNo, CircularDate      
   --ILCRSTPAR2868      
 SELECT DISTINCT TaxPerc,B.SalId,B.PrdId  INTO #TaxPerc FROM SalesInvoiceProduct B       
 INNER JOIN ParleOutputTaxPercentage P ON P.SalId = B.SalId and  B.SlNo = P.PrdSlno AND TRANSID = 1       
 --Till Here       
 SELECT Schid,SUM(Schamt) SchAmt ,Sum(taxamt) TaxAmt INTO #SchFinal FROM       
  (      
  SELECT A.SchId,SUM(A.schamt) SchAmt, (SUM(A.schamt)*(TaxPerc/100)) TaxAmt       
   FROM (      
  --ILCRSTPAR2868      
  --SELECT Schid ,a.PRDID,TaxPerc,SUM (FlatAmount+DiscountPer+FreeValue+GiftValue)schamt FROM Debitnote_Scheme A       
  --INNER JOIN SalesInvoiceProduct B ON A.Salid = b.SalId AND a.Prdid = b.PrdId        
  --INNER JOIN ParleOutputTaxPercentage P ON P.SalId = B.SalId AND A.Salid = P.SalId AND B.SlNo = P.PrdSlno AND TRANSID = 1 AND Linetype = 1      
  --GROUP BY  A.PRDID,A.SchId,TaxPerc      
  SELECT  Schid ,a.PRDID,TaxPerc,SUM (FlatAmount+DiscountPer+FreeValue+GiftValue)schamt FROM Debitnote_Scheme A       
  INNER JOIN #TaxPerc B ON A.Salid = b.SalId AND a.Prdid = b.PrdId AND Linetype = 1       
  GROUP BY  A.PRDID,A.SchId,TaxPerc      
  --Till Here      
  )A      
  GROUP BY A.SchId,TaxPerc      
  )B Group by  sCHID       
  insert into #SchFinal      
  SELECT Schid,SUM(Schamt) SchAmt ,Sum(taxamt) TaxAmt FROM       
  (      
  SELECT A.SchId,SUM(A.schamt) SchAmt, (SUM(A.schamt)*(TaxPerc/100)) TaxAmt          
  FROM (      
  SELECT Schid ,a.PRDID,TaxPerc,SUM (FlatAmount+DiscountPer+FreeValue+GiftValue)schamt FROM Debitnote_Scheme A INNER JOIN RETURNPRODUCT B ON A.Salid = b.ReturnID AND a.Prdid = b.PrdId       
  INNER JOIN ParleOutputTaxPercentage P ON P.SalId = B.ReturnID AND A.Salid = P.SalId AND B.SlNo = P.PrdSlno AND TRANSID = 2 AND a.Linetype =2      
  and StockTypeId IN (SELECT StockTypeId FROM STOCKTYPE WHERE SystemStockType = 1)        
  GROUP BY  A.PRDID,A.SchId,TaxPerc      
  )A      
  GROUP BY A.SchId,TaxPerc      
  )B Group by  sCHID       
 UPDATE SD SET SD.Amount = CASE S.ApplyTaxForClaim WHEN 0 THEN schamt ELSE  (SchAmt+TaxAmt) END      
 FROM #SchemeDebit SD (NOLOCK) INNER JOIN (SELECT Schid,SUM(SchAmt) SchAmt ,Sum(Taxamt) TaxAmt FROM  #SchFinal GROUP BY Schid) D  ON SD.Schid = D.Schid --CHANGED FOR CLAIMAMT MISMATCH      
 INNER JOIN SchemeMaster S ON S.SchId = D.SCHID AND S.SchId = SD.SCHID       
 UPDATE SD SET SD.Liab = CAST(( SD.Amount / SD.[SecSalesVal]) AS NUMERIC(18,6))      
 FROM #SchemeDebit SD (NOLOCK)      
 WHERE SD.[SecSalesVal] <> 0      
 --*********************************************************************Report 3**********************************************************************************

 DECLARE @TargetNo AS INT      
 DECLARE @InsFromDate AS DATETIME       
 DECLARE @InsToDate  AS DATETIME      
 DECLARE @Year AS INT       
 DECLARE @Month  AS INT      
 DECLARE @MonthName as Nvarchar(100) 
      
 --Changed by Mohana ILCRSTPAR0506       
 SELECT   TOP 1 @TargetNo = InsId,@Month=TargetMonth,@Year=TargetYear,      
 @InsFromDate = CAST(TargetYear AS VARCHAR(5))+ '-' + CAST(TargetMonth AS VARCHAR(2)) + '-01',      
 @InsToDate = DATEADD(DD,-1,DATEADD(MM,1,CAST(TargetYear AS VARCHAR(5))+ '-' + CAST(TargetMonth AS VARCHAR(2)) + '-01'))       
 FROM InsTargetHD H (NOLOCK)       
 INNER JOIN  JCMonth A  ON H.TargetMonth = A.JcmJc      
 INNER JOIN    JCMast b on a.JcmId = b.JcmId AND H.TargetYear =  B.JcmYr      
 WHERE A.JcmEdt  BETWEEN @FromDate AND @ToDate AND H.[Status] = 1       
 ORDER BY InsId DESC 
      
 SELECT @MonthName=MonthName FROM MonthDt (NOLOCK) WHERE MonthId=@Month  
     
 UPDATE InsTargetHD SET TargetMonth=EffFromMonthId WHERE TargetMonth=0   
    
 --EXEC Proc_LoadingInstitutionsTarget @TargetNo,@Pi_UsrId      
 EXEC Proc_LoadingInstitutionsTarget @Year,@Month,@MonthName,@Pi_UsrId   
    
 SELECT CtgMainId,CtgName,@InsFromDate FromDate,@InsToDate ToDate,SUM([Target]) [Target],SUM(ClmAmount) DiscAmount,      
 CAST(0 AS NUMERIC(18,6)) L2MSales,CAST(0 AS NUMERIC(18,6)) CurMSales,CAST(0 AS NUMERIC(18,0)) Outlet      
 INTO #Institutions      
 FROM InsTargetDetailsTrans (NOLOCK) WHERE CtgName <>''      
 --WHERE UserId = @Pi_UsrId AND SlNo <> 0 and SlNo<>9999      
 GROUP BY CtgMainId,CtgName     
  
 SELECT DISTINCT R.RtrId,RC.CtgMainId      
 INTO #FilterRetailer      
 FROM Retailer R (NOLOCK),      
 RetailerValueClassMap RVCM (NOLOCK),      
 RetailerValueClass RVC (NOLOCK),      
 RetailerCategory RC (NOLOCK),      
 RetailerCategoryLevel RCL (NOLOCK)      
 WHERE R.Rtrid = RVCM.RtrId AND RVCM.RtrValueClassId = RVC.RtrClassId      
 AND  RVC.CtgMainId=RC.CtgMainId AND  RCL.CtgLevelId=RC.CtgLevelId      
 AND EXISTS (SELECT '' FROM #Institutions I (NOLOCK) WHERE I.CtgMainId = RC.CtgMainId)  
    
 SELECT S.CtgMainId,CAST(SUM(S.Sales) AS NUMERIC(18,2)) Sales      
 INTO #CurrentSales      
 FROM       
 (      
 SELECT R.CtgMainId,SUM(S.SalGrossAmount) Sales FROM SalesInvoice S (NOLOCK),      
 #FilterRetailer R      
 WHERE S.SalInvDate BETWEEN @InsFromDate AND @InsToDate AND S.DlvSts > 3      
 AND S.RtrId = R.RtrId      
 GROUP BY R.CtgMainId      
 UNION ALL      
 SELECT F.CtgMainId,-1 * SUM(R.RtnGrossAmt) FROM ReturnHeader R (NOLOCK),      
 #FilterRetailer F      
 WHERE R.ReturnDate BETWEEN @InsFromDate AND @InsToDate AND R.Status = 0      
 AND F.RtrId = R.RtrId      
 GROUP BY F.CtgMainId      
 ) AS S GROUP BY S.CtgMainId   
    
 SELECT R.CtgMainId,COUNT(DISTINCT S.RtrId) Outlet      
 INTO #NoOfOutlet      
 FROM SalesInvoice S (NOLOCK),      
 #FilterRetailer R      
 WHERE S.SalInvDate BETWEEN @InsFromDate AND @InsToDate AND S.DlvSts > 3      
 AND S.RtrId = R.RtrId      
 GROUP BY R.CtgMainId   
     
 --Last Two Month Sales      
 SELECT @InsToDate = DATEADD (D,-1,@InsFromDate)       
 SELECT @InsFromDate = DATEADD (MONTH,-2,@InsFromDate)       
 SELECT S.CtgMainId,CAST(SUM(S.Sales) AS NUMERIC(18,2)) Sales      
 INTO #L2MSales      
 FROM       
 (      
 SELECT R.CtgMainId,SUM(S.SalGrossAmount) Sales FROM SalesInvoice S (NOLOCK),      
 #FilterRetailer R      
 WHERE S.SalInvDate BETWEEN @InsFromDate AND @InsToDate AND S.DlvSts > 3      
 AND S.RtrId = R.RtrId      
GROUP BY R.CtgMainId      
 UNION ALL      
 SELECT F.CtgMainId,-1 * SUM(R.RtnGrossAmt) FROM ReturnHeader R (NOLOCK),      
 #FilterRetailer F      
 WHERE R.ReturnDate BETWEEN @InsFromDate AND @InsToDate AND R.Status = 0      
 AND F.RtrId = R.RtrId      
 GROUP BY F.CtgMainId      
 ) AS S GROUP BY S.CtgMainId  
     
 UPDATE I SET I.CurMSales = C.Sales      
 FROM #Institutions I (NOLOCK),      
 #CurrentSales C (NOLOCK)      
 WHERE I.CtgMainId = C.CtgMainId 
      
 UPDATE I SET I.L2MSales = C.Sales / 2      
 FROM #Institutions I (NOLOCK),      
 #L2MSales C (NOLOCK)      
 WHERE I.CtgMainId = C.CtgMainId      

 UPDATE I SET I.Outlet = C.Outlet      
 FROM #Institutions I (NOLOCK),      
 #NoOfOutlet C (NOLOCK)      
 WHERE I.CtgMainId = C.CtgMainId  
 
     
--Nagarajan on 28.Aug.2017      
 IF EXISTS (SELECT 'C' FROM SYSOBJECTS WHERE XTYPE = 'U' AND NAME = 'RptDebitNoteTopSheet_Excel1')      
 BEGIN      
  DROP TABLE RptDebitNoteTopSheet_Excel1       
 END       
 CREATE TABLE RptDebitNoteTopSheet_Excel1      
 (      
 [Scheme Description] VARCHAR(100),      
 [From] VARCHAR(10),      
 [To] VARCHAR(10),      
 [Circular No] VARCHAR(100),      
 [Date] NVARCHAR(10),      
 [Scheme Budget] NUMERIC(18,6),      
 [Sec Sales Qty] BIGINT,      
 [Sec Sales Value] NUMERIC(18,6),      
 [% Lib on Sec Sales] NUMERIC(18,6),      
 [Claim Amount] NUMERIC(18,6)      
 )         
 UPDATE #SchemeDebit SET Liab = (Amount / SecSalesVal) * 100 WHERE Liab > 0 
      
 SELECT S.SchDsc [Scheme Description],CONVERT(VARCHAR(10),S.SchValidFrom,103) [From],CONVERT(VARCHAR(10),S.SchValidTill,103) [To],ISNULL(S.CircularNo,'') [Circular No],      
  CONVERT(VARCHAR(10),S.CircularDate,103)  [Date],S.SchemeBudget [Scheme Budget],[SecSalesQty] [Sec Sales Qty],[SecSalesVal] [Sec Sales Value],CAST(Round(Liab,2) AS Numeric(18,2)) AS [% Liability on Sec Sales],      
  cast(round(Amount,2) as Numeric(18,2)) as  [Claim Amount],'A' As Dummy      
 INTO #RptDebitNoteTopSheet_Excel1      
 FROM #SchemeDebit S (NOLOCK) --WHERE Amount > 0       
 WHERE Amount <> 0 --- CRCRSTPAR0023  IF Difference of Claim Amt is Zero need not Shown --Changed as not equal to 
       
 IF (SELECT COUNT(*) FROM #RptDebitNoteTopSheet_Excel1) > 0      
 BEGIN      
  INSERT INTO #RptDebitNoteTopSheet_Excel1 ([Scheme Description],[Circular No],[Scheme Budget],[Sec Sales Qty],[Sec Sales Value],[Claim Amount],Dummy)  
  SELECT 'Total' [Scheme Description], '' AS [Circular No],0 AS [Scheme Budget],      
  SUM([Sec Sales Qty]) AS [Sec Sales Qty],SUM([Sec Sales Value]) AS [Sec Sales Value],SUM([Claim Amount]) [Claim Amount],'B' Dummy      
  FROM  #RptDebitNoteTopSheet_Excel1     
 END
       
 SELECT * INTO #Excel1 FROM #RptDebitNoteTopSheet_Excel1 ORDER BY Dummy 
      
 DECLARE @RecCount AS BIGINT      
 SELECT @RecCount = COUNT(7) FROM #RptDebitNoteTopSheet_Excel1 
      
 INSERT INTO RptDebitNoteTopSheet_Excel1      
 SELECT [Scheme Description],Cast(isnull([From],' ') As Varchar(10)) [From],Cast(isnull([To],' ') As Varchar(10)) [To],[Circular No],ISNULL([Date],' ') AS [Date] ,[Scheme Budget],      
 [Sec Sales Qty],[Sec Sales Value],[% Liability on Sec Sales] ,[Claim Amount]      
 FROM #Excel1 ORDER BY Dummy  

 IF EXISTS (SELECT 'C' FROM SYSOBJECTS WHERE XTYPE = 'U' AND NAME = 'RptDebitNoteTopSheet_Excel2')      
 BEGIN      
  DROP TABLE RptDebitNoteTopSheet_Excel2       
 END        
 CREATE TABLE RptDebitNoteTopSheet_Excel2      
 (      
  [Name Of the Category] NVARCHAR(200),      
  [From] VARCHAR(10),      
  [TO] VARCHAR(10),      
  [Circular No] VARCHAR(50),      
  [Monthly Target] NUMERIC(38,6),      
  [Last 2 Mont Avg Sal] NUMERIC(18,6),      
  [Current Month] NUMERIC(18,6),      
  [No of Incent Outlets] NUMERIC(18,0),      
  [Total Discount Amount] NUMERIC(38,6)      
 )
       
 SELECT CtgName [Name Of the Category],convert(varchar(10),FromDate,103) [From],convert(varchar(10),ToDate,103) [To],'' [Circular No],[Target] [Monthly Target],      
 L2MSales [Last 2 Months Avg Sales],CurMSales [Current Month],Outlet [No of Incentive Outlets],DiscAmount [Total Discount Amount],'A' Dummy      
 INTO #RptDebitNoteTopSheet_Excel2      
 FROM #Institutions (NOLOCK)   

 IF (SELECT COUNT(*) FROM #RptDebitNoteTopSheet_Excel2) > 0      
 BEGIN      
 ----------------- modified by lakshman M on 04/10/2017----------------          
  --INSERT INTO #RptDebitNoteTopSheet_Excel2          
  --SELECT 'Total' As [Name Of the Category],'' As [From],'' As [To],0 As [Circular No],0 As [Monthly Target],          
  --0 As [Last 2 Months Avg Sales],0 As [Current Month],0 As [No of Incentive Outlets],sum([Total Discount Amount]) [Total Discount Amount],'B' Dummy          
  --FROM #RptDebitNoteTopSheet_Excel2       
  Update A set [Name Of the Category]= null ,[From]=null,[To]=null,[Monthly Target]=null,[Last 2 Months Avg Sales]=null        
  ,[Current Month]=null,[No of Incentive Outlets]=null, [Total Discount Amount]=null,[Circular No]='' from #RptDebitNoteTopSheet_Excel2 A where Dummy ='B'        
    -------------------- Till here -----------------------------       
 END  
     
 SELECT * INTO #Excel2 FROM #RptDebitNoteTopSheet_Excel2 ORDER BY Dummy  
     
 INSERT INTO RptDebitNoteTopSheet_Excel2      
 SELECT [Name Of the Category],[From],[To],[Circular No],[Monthly Target],      
 [Last 2 Months Avg Sales],[Current Month],[No of Incentive Outlets],[Total Discount Amount]      
 FROM #Excel2   
  
 --------------- added by lakshman M Dated ON 20-08-2019 PMS ID: CRCRSTPAR0042  -------------------  
 IF(SELECT COUNT(*) FROM RptDebitNoteTopSheet_Excel2) > 0  
 BEGIN  
 INSERT INTO RptDebitNoteTopSheet_Excel2    
  SELECT 'Total' AS [Name Of the Category],' '[From],' '[To],' ' AS [Circular No],SUM([Monthly Target]) AS [Monthly Target],      
 SUM([Last 2 Months Avg Sales]) AS [Last 2 Months Avg Sales],SUM([Current Month]) AS [Current Month],SUM([No of Incentive Outlets])  AS [No of Incentive Outlets],SUM([Total Discount Amount]) AS [Total Discount Amount]  
 FROM #Excel2  
 END  

 ----------------------------------------------------TOT CLAIM Added By Mohana REPORT 4-------------------------------------------------------------------      
 DECLARE @RecCount1 INT      
 SELECT @RecCount1  = COUNT(*) FROM RptDebitNoteTopSheet_Excel2      
 CREATE Table #TotClaimFinal       
 (      
 CtgName  NVARCHAR(100),      
 Fromdate DATETIME,      
 Todate DATETIME,      
 NrmlRate NUMERIC (18,2),      
 SecSalesTot NUMERIC (18,2),      
 DiffClaims NUMERIC (18,2)       
 )  
    
 SELECT S.SalId,S.SalInvNo,S.SalInvDate,S.RtrId,SP.PrdId,SP.PrdBatId,SP.BaseQty BaseQty,
 CASE SP.SplPriceId WHEN 0 THEN 0 ELSE SP.Priceid END As  Priceid,         
 B.DefaultPriceId ActualPriceId,SP.SlNo,sp.PrdTaxAmount,PrdUnitSelRate,PrdBatDetailValue         
 INTO #BillingDetails1          
 FROM SalesInvoice S (NOLOCK)          
 INNER JOIN SalesInvoiceProduct SP (NOLOCK) ON S.SalId = SP.SalId          
 INNER JOIN ProductBatch B (NOLOCK) ON SP.PrdBatId = B.PrdBatId       
 INNER JOIN ProductBatchDetails PBD (NOLOCK) ON PBD.PrdBatId =B.PrdBatId and DefaultPrice =1         
 WHERE SalInvDate BETWEEN @FromDate AND @ToDate AND S.DlvSts > 3 and PBD.SLNo =3  
     
 SELECT S.ReturnID,S.ReturnCode,S.ReturnDate,S.RtrId,SP.PrdId,SP.PrdBatId,-1 * SP.BaseQty BaseQty,SP.PrdUnitMRP MRP,CASE SP.SplPriceId WHEN 0 THEN 0 ELSE SP.Priceid END As  Priceid,        
 B.DefaultPriceId ActualPriceId,SP.SlNo,SP.PrdEditSelRte,sp.PrdTaxAmt as prdtaxamount,PrdUnitSelRte as  PrdUnitSelRate,PrdBatDetailValue        
 INTO #ReturnDetails1          
 FROM ReturnHeader S (NOLOCK)          
 INNER JOIN ReturnProduct SP (NOLOCK) ON S.ReturnID = SP.ReturnID AND StockTypeid in (select stocktypeid from  stocktype where systemstocktype =1)         
 INNER JOIN ProductBatch B (NOLOCK) ON SP.PrdBatId = B.PrdBatId          
 INNER JOIN ProductBatchDetails PBD (NOLOCK) ON PBD.PrdBatId =B.PrdBatId and DefaultPrice =1      
 WHERE ReturnDate BETWEEN @FromDate AND @ToDate AND S.[Status] = 0 and PBD.SLNo =3
   
 SELECT DISTINCT R.RtrId,RC.CtgMainId,RC.CtgName      
 INTO #Retailer      
 FROM Retailer R (NOLOCK),      
 RetailerValueClassMap RVCM (NOLOCK),      
 RetailerValueClass RVC (NOLOCK),      
 RetailerCategory RC (NOLOCK),      
 RetailerCategoryLevel RCL (NOLOCK)      
 WHERE R.Rtrid = RVCM.RtrId AND RVCM.RtrValueClassId = RVC.RtrClassId      
 AND  RVC.CtgMainId=RC.CtgMainId AND  RCL.CtgLevelId=RC.CtgLevelId
       
 SELECT tranid,Refid,Rtrid,CtgName,RefDate,Prdid,Prdbatid,BaseQty,Priceid,ActualPriceid,SelRate,CAST(0 AS NUMERIC(18,2)) Nrmlrate,CAST(0 AS NUMERIC(18,2)) SplRate,CAST(0 AS NUMERIC(18,2)) Diff,Slno      
 INTO #TotClaim FROM(      
 SELECT 1 tranid,Salid Refid,A.Rtrid,CtgName,Salinvdate RefDate,Prdid,Prdbatid,BaseQty,Priceid,ActualPriceid,PrdbatDetailvalue SelRate,Slno FROM #BillingDetails1 A  INNER JOIN #Retailer B ON A.Rtrid = B.Rtrid       
 UNION       
 SELECT 2 Transid,ReturnID Refid,A.Rtrid,CtgName,ReturnDate RefDate,Prdid,Prdbatid,BaseQty,Priceid,ActualPriceid,PrdbatDetailvalue SelRate,Slno FROM #ReturnDetails1  A  INNER JOIN #Retailer B ON A.Rtrid = B.Rtrid       
 )A    
   
 SELECT DISTINCT Priceid,PrdBatDetailValue SplSelRate  INTO #ExistingSpecialPrice FROM      
 (      
 SELECT D.PriceId,D.PrdBatDetailValue       
 FROM #TotClaim M (NOLOCK),      
 ProductBatchDetails D (NOLOCK)       
 WHERE M.PriceId = D.PriceId AND D.SLNo = 3      
 AND PriceCode LIKE '%-Spl Rate-%'         
 UNION       
 SELECT D.PriceId,D.PrdBatDetailValue       
 FROM #TotClaim M (NOLOCK),      
 ProductBatchDetails D (NOLOCK)       
 WHERE M.PriceId = D.PriceId AND D.SLNo = 3      
 AND PriceCode LIKE '%SplRate%'        
 )A 
      
  UPDATE A SET A.SplRate = (BaseQty*((B.SplselRate)+(B.SplselRate*(p.TaxPerc/100)))) FROM  #TotClaim A INNER JOIN #ExistingSpecialPrice B      
  ON A.Priceid = B.Priceid  
       
  INNER JOIN  ParleOutputtaxPercentage P ON A.Refid = p.salid and A.slno = p.prdslno AND A.Tranid=P.Transid      
  WHERE A.Priceid <>0  
      
  UPDATE A SET A.SplRate = (BaseQty*(( SelRate)+(SelRate*(P.TaxPerc/100)))) FROM  #TotClaim A       
   INNER JOIN  #ParleOutputtaxPercentage P ON A.Refid = p.salid and a.slno = p.prdslno AND A.Tranid=P.Transid      
  WHERE A.Priceid =0
        
  UPDATE A SET A.NrmlRate = (BaseQty*(( SelRate)+(SelRate*(P.TaxPerc/100)))) FROM  #TotClaim A       
  INNER JOIN  #ParleOutputtaxPercentage P ON A.Refid = p.salid and a.slno = p.prdslno AND A.Tranid=P.Transid 
       
  UPDATE A SET A.Diff = (NrmlRate-SplRate) FROM  #TotClaim A        
  INSERT INTO #TotClaimFinal(CtgName,NrmlRate,SecSalesTot,DiffClaims)      
  SELECT CtgName,SUM(NrmlRate),SUM(SplRate),SUM(Diff) FROM #TotClaim      
  GROUP BY Ctgname  
       
  UPDATE A SET Fromdate = B.Frmdt ,Todate = B.todt FROM #TotClaimFinal A  INNER JOIN (SELECT Ctgname,MIn(RefDate) Frmdt,Max(RefDate) todt FROM #TotClaim GROUP BY CtgName) B ON A.CtgName = B.Ctgname      

 IF EXISTS (SELECT 'C' FROM SYSOBJECTS WHERE XTYPE = 'U' AND NAME = 'RptDebitNoteTopSheet_Excel3')      
 BEGIN      
  DROP TABLE RptDebitNoteTopSheet_Excel3       
 END        
 CREATE TABLE RptDebitNoteTopSheet_Excel3      
 (      
  [Name Of the Category] NVARCHAR(200),      
  [From] VARCHAR(12),      
  [TO] VARCHAR(12),      
  [Total Normal Amount] NUMERIC(18,2),      
     [Total Normal Sec Sales AS Per TOT] NUMERIC(18,2),    ------------ column name altered by lakshman M Dated On 30-04-2019 PMS ID: ILCRSTPAR4224  
     [TOT Diff claims] NUMERIC(18,2)       
 ) 
      
  INSERT INTO RptDebitNoteTopSheet_Excel3      
  SELECT * FROM #TotClaimFinal WHERE DiffClaims > 0 --- CRCRSTPAR0023  IF Difference of Claim Amt is Zero need not Shown      

  ----------- added by lakshman M Dated ON 20-08-2019 PMS ID: CRCRSTPAR0042   
IF( SELECT COUNT(*) FROM RptDebitNoteTopSheet_Excel3)> 0  
BEGIN  
INSERT INTO RptDebitNoteTopSheet_Excel3   
SELECT 'Total' AS CtgName,' ' AS Fromdate,' ' AS Todate ,SUM(NrmlRate) AS NrmlRate, SUM(SecSalesTot) AS SecSalesTot ,sum(DiffClaims) AS DiffClaims from #TotClaimFinal WHERE DiffClaims > 0  
--UPDATE A SET [From] =' ' ,[TO] =' '  from RptDebitNoteTopSheet_Excel3 A WHERE [TOT Diff claims] > 0 AND [Name Of the Category] ='Total'  
END  

SET @RecCount = @RecCount + 1      
SET @RecCount1 = @RecCount1 +@RecCount + 1      
-- Till here      
 ----------------------------------------MANUAL CLAIM Added By Amuthakumar CRCRSTAPAR0023 ---------------------------------------------      
---------------- Added By Lakshman M Dated ON 07-12-2018 PMS ID: ILCRSTPAR2760 -----------       
 --SELECT MCD.DESCRIPTION,MCM.MacDate As [From], MCM.MacDate AS [To],MCM.MacRefNo,ProposedLibPercent,TotalSales,ActualLibPercent,ClaimAmt      
 --INTO #TotManualClaim      
 --FROM ManualClaimMaster MCM INNER JOIN ManualClaimDetails MCD ON MCM.MacRefNo = MCD.MacRefNo      
 --WHERE MacDate BETWEEN @FromDate AND @ToDate ------- commented by lakshman M on dated on 07-12-2018      
 SELECT MCD.DESCRIPTION,A.MacDate As [From], A.MacDate AS [To],MCD.CircularNo,ProposedLibPercent,TotalSales,ActualLibPercent,ClaimAmt      
 INTO #TotManualClaim from ManualClaimMaster A       
 INNER JOIN ManualClaimDetails MCD ON A.MacRefNo = MCD.MacRefNo      
 INNER JOIN  JCMonth B ON A.Jcmid = B.Jcmid AND A.FromJcmJcid = B.JcmJc AND A.ToJcmJcId = B.JcmJc       
 WHERE Jcmsdt  between @FromDate   AND @ToDate AND JcmEdt between @FromDate   AND @ToDate      
 ----------------- Till Here -------------      
 
 IF EXISTS (SELECT 'C' FROM SYSOBJECTS WHERE XTYPE = 'U' AND NAME = 'RptDebitNoteTopSheet_Excel4')      
 BEGIN      
  DROP TABLE RptDebitNoteTopSheet_Excel4       
 END        
 
 CREATE TABLE RptDebitNoteTopSheet_Excel4      
 (      
  [Scheme Description] NVARCHAR(200),      
  [From] DATETIME,      
  [TO] DATETIME,      
  [Circular No] NVARCHAR(100),      
  [Scheme Budget] NUMERIC(18,2),      
  [Sec Sales Value] NUMERIC(18,2),      
  [% Lib on Sec Sales] NUMERIC(18,2),      
  [Claim Amount] NUMERIC(18,2)      
 )      
INSERT INTO RptDebitNoteTopSheet_Excel4      
SELECT * FROM #TotManualClaim  
  
----------- added by lakshman M Dated ON 20-08-2019 PMS ID: CRCRSTPAR0042   
IF (SELECT count(*) FROM RptDebitNoteTopSheet_Excel4) >0  
BEGIN  
INSERT INTO RptDebitNoteTopSheet_Excel4 ([Scheme Description],[Sec Sales Value],[Claim Amount])  
SELECT 'Total' AS [Scheme Description],ISNULL(SUM(TotalSales),0) AS [Sec Sales Value],ISNULL(SUM(ClaimAmt),0) AS [Claim Amount]   
FROM #TotManualClaim  
END   
  -----CRCRSTPAR0056
IF EXISTS (SELECT 'C' FROM SYSOBJECTS WHERE XTYPE = 'U' AND NAME = 'RptDebitNoteTopSheet_Excel5')      
BEGIN      
	DROP TABLE RptDebitNoteTopSheet_Excel5       
END  
	      
CREATE TABLE RptDebitNoteTopSheet_Excel5     
(      
[Dist. Incentive Ref. No.]	varchar(100),    
[No of Salesman] INT,    
[Total Sales Value] NUMERIC(18,2),       
[Incentive Amount] NUMERIC(18,2)      
) 
	 
INSERT INTO RptDebitNoteTopSheet_Excel5([Dist. Incentive Ref. No.],[No of Salesman],[Total Sales Value],[Incentive Amount])
SELECT A.DistIRefno,COUNT(SMID),SUM(C.AchSales) as TotalAchSales,SUM(C.IncAmount)
FROM DistributorIncentiveMaster A (NOLOCK)  
INNER JOIN DistributorIncentiveAchDetail C(NOLOCK) ON C.DistIRefno=A.DistIRefno 
WHERE C.GeneratedOn BETWEEN @FromDate AND @ToDate  
--WHERE (A.IncFromDate BETWEEN @FromDate AND @ToDate OR A.IncToDate BETWEEN @FromDate AND @ToDate)
--Jcmsdt  between @FromDate   AND @ToDate AND JcmEdt between @FromDate   AND @ToDate   
GROUP BY A.DistIRefno
	
IF (SELECT COUNT(*) FROM RptDebitNoteTopSheet_Excel5) >0  
BEGIN  
	INSERT INTO RptDebitNoteTopSheet_Excel5 ([Dist. Incentive Ref. No.],[Total Sales Value],[Incentive Amount])  
	SELECT 'Total' AS [Dist. Incentive Ref. No.],ISNULL(SUM([Total Sales Value]),0) AS [Total Sales Value],ISNULL(SUM([Incentive Amount]),0) AS [Incentive Amount]   
	FROM RptDebitNoteTopSheet_Excel5  
END
	
----CRCRSTPAR0056
DECLARE @RecCount2 INT    
DECLARE @RecCountAct2 INT      
SELECT @RecCount2  = COUNT(*) FROM RptDebitNoteTopSheet_Excel3      
set @RecCount1 = @RecCount1+1      
SET @RecCount2 = @RecCount2 + @RecCount1 + 1      
-- Till Here CRCRSTAPAR0023  

--**************************************************************SALESMAN INCENTIVE ILCRSTPAR5199 ********************************************************************

IF EXISTS (SELECT 'C' FROM SYSOBJECTS WHERE XTYPE = 'U' AND NAME = 'RptDebitNoteTopSheet_Excel6')      
BEGIN      
	DROP TABLE RptDebitNoteTopSheet_Excel6     
END 
    					 
CREATE TABLE RptDebitNoteTopSheet_Excel6
(
	SMIRefNo VARCHAR(100),
	IncMonth VARCHAR(50),
	IncYear   INT,
	SMName	  VARCHAR(100),
	[TotalAchSales] Numeric(18,6),
	[From Range] Numeric(18,4),
	[To Range] Numeric(18,4),
	FixedPay Numeric(18,6),
	VariablePay Numeric(18,6),
	IncPerc Numeric(18,6),
	IncAmount Numeric(18,6),
	[Total Incentive Amount] Numeric(18,6)
)

	DECLARE @Month1 VARCHAR(100)
	DECLARE @Year1 INT
	SET @Month1=DATENAME(MM, @FromDate)
	SET @Year1=YEAR(@ToDate)
 
	INSERT INTO  RptDebitNoteTopSheet_Excel6(SMIRefNo,IncMonth,IncYear,SMName,[From Range],[To Range],[TotalAchSales],FixedPay,VariablePay,IncPerc,IncAmount,[Total Incentive Amount])
	SELECT S.SMIRefNo,S.IncMonth,S.IncYear,SMName,[FromRange],[ToRange],AchSales,FixedPay,VariablePay,IncPerc,IncAmount,TotalIncAmount 
	FROM SalesManIncentiveMaster S INNER JOIN SalesManincentiveDetail SD
	ON S.SMIRefno = SD.SMIRefno 
	INNER JOIN SalesmanIncentiveSlabs SS ON SS.SMIRefno = S.SMIRefno AND SD.SMIRefno=SS.SMIRefno AND SD.AchSlab = SS.Slab 
	INNER JOIN SalesMan A ON SD.SMid = A.SMId 
	WHERE  SMCODE NOT IN('SMDUMMY01') AND S.IncMonth =@Month1 AND S.Incyear =@Year1   AND SMIrefStatus=1
 

IF (SELECT count(*) FROM RptDebitNoteTopSheet_Excel6) >0  
BEGIN  
INSERT INTO RptDebitNoteTopSheet_Excel6 (SMiREfno,TotalAchSales,[Total Incentive Amount])  
	SELECT 'Total' AS SMiREfno,ISNULL(SUM(TotalAchSales),0) AS TotalAchSales,ISNULL(SUM([Total Incentive Amount]),0) AS [Total Incentive Amount]   
	FROM RptDebitNoteTopSheet_Excel6   
END 

 DECLARE @RecCount3 INT      
 SELECT @RecCount3  = COUNT(*) FROM RptDebitNoteTopSheet_Excel6
 SELECT @RecCount3  = @RecCount2+ @RecCount3  + 1  

  -------------- Added by lakshmn M Dated ON 25-04-2019 PMS ID: ILCRSTPAR4201  --------------  
truncate table RptDebitNoteTopSheet_Excel_GrandTotal  
INSERT INTO RptDebitNoteTopSheet_Excel_GrandTotal   
--SELECT 'GRAND TOTAL','','','',0,0,SUM([Claim Amount]) [Claim Amount],SUM([TOT Diff claims]) [TOT Diff claims],SUM([Total disc Amount]) [Total disc Amount],SUM([claim amount1]) [claim amount1]  
SELECT 'GRAND TOTAL','','','','','','','','',SUM([Claim Amount]) +SUM([TOT Diff claims]) +SUM([Total discount Amount]) +SUM([claim amount1]) [claim amount1]  
FROM (  
SELECT 0 [Claim Amount],0 [TOT Diff claims],0 [Total discount Amount],[claim amount] [claim amount1] FROM RptDebitNoteTopSheet_Excel1  WHERE [Scheme Description] ='Total'  
UNION ALL   
SELECT 0,0, [Total discount Amount],0 FROM RptDebitNoteTopSheet_Excel2 WHERE [Name Of the Category] ='Total'  
UNION ALL   
SELECT 0,[TOT Diff claims],0,0 FROM RptDebitNoteTopSheet_Excel3 WHERE [Name Of the Category] = 'Total'  
UNION ALL   
SELECT  [Claim Amount],0,0,0 FROM RptDebitNoteTopSheet_Excel4 WHERE [SCHEMe description] ='Total' 
UNION ALL   
SELECT  [Incentive Amount],0,0,0 FROM RptDebitNoteTopSheet_Excel5 WHERE [Dist. Incentive Ref. No.] ='Total' 
UNION ALL   
SELECT  [Total Incentive Amount] ,0,0,0 FROM RptDebitNoteTopSheet_Excel6 WHERE SMIREFNO ='Total'     
)A  


 DECLARE @RecCount4 INT      
 SELECT @RecCount4  = COUNT(*) FROM RptDebitNoteTopSheet_Excel5 
 SELECT @RecCount4  = @RecCount3+ @RecCount4  + 1    

---------- till here ------------------  


 TRUNCATE TABLE RptExcelDebitNote        
 INSERT INTO RptExcelDebitNote(Row,Col,MergeCells,Value)      
 SELECT 1,1,'A1:J1','PARLE - DEBIT NOTE / CREDIT NOTE'      
 UNION ALL      
 SELECT 2,1,'A2:J2',''   --ICRSTPAR6933 (Row Number Changed OlRowNo+1)      
 UNION ALL      
 SELECT 3,1,'A3:H3','Name of the Town : ' + ISNULL(@CityName,'')      
 UNION ALL      
 SELECT 3,9,'I3:J3','Passed by SO / SE :'      
 UNION ALL      
 SELECT 4,1,'A4:F4','Name of the Wholesaler : ' + ISNULL(@DistributorName,'')      
 UNION ALL      
 SELECT 4,7,'G4:H4','Debit Note No :' + CONVERT(NVARCHAR(10),@DBMonth)      
 UNION ALL      
 SELECT 4,9,'I4:J4','Verified by ASM :'      
 UNION ALL      
 SELECT 5,1,'A5:F5','Wholesaler Code : ' + ISNULL(@DistributorCode,'')      
 UNION ALL      
 SELECT 5,7,'G5:H5','Credit Note No :'      
 UNION ALL      
 SELECT 5,9,'I5:J5','Authorized by DSM :'      
 UNION ALL      
 SELECT 6,1,'A6:F6','Name of the Division :'      
 UNION ALL      
 SELECT 6,7,'G6:H6','Credit Note Date :'      
 UNION ALL      
 SELECT 6,9,'I6:J6','Value of Approved credit note :'      
 UNION ALL      
 SELECT 7,1,'A7:J7',''      
 UNION ALL       
 SELECT 8,1,'A8:J8','1.SAMPLING'      
 UNION ALL      
 SELECT 9,1,'A9:E9','DSM Sanction Letter Date '      
 UNION ALL      
 SELECT 9,6,'F9:J9','Sampling Amount : ' + CAST(@SamplingAmount AS VARCHAR(30))      
 UNION ALL      
 SELECT 10,1,'A10:D10','Product Sampled during the period  '      
 UNION ALL      
 SELECT 10,5,'E10:G10','From : ' + CONVERT(VARCHAR(11),@FromDate,105)      
 UNION ALL      
 SELECT 10,8,'H10:J10','To : ' + CONVERT(VARCHAR(11),@ToDate,105)      
 UNION ALL      
 SELECT 11,1,'A11:J11',''       
 UNION ALL      
 SELECT 12,1,'A12:J12','2.TRADE SCHEME'       
 UNION ALL      
 SELECT 13,C.colid,'',C.name FROM SYSOBJECTS O ,SYSCOLUMNS C WHERE O.id = C.id AND O.name = 'RptDebitNoteTopSheet_Excel1'      
 UNION ALL      
 SELECT 14,1,'A14','1R'       
 UNION ALL      
 SELECT 14 + @RecCount + 1,1,'A' + CAST(14 + @RecCount + 1 AS VARCHAR(10)) + ':J' + CAST(14 + @RecCount + 1 AS VARCHAR(10)) ,'3.INSTITUTIONAL SALES'       
 UNION ALL      
 SELECT 14 + @RecCount + 2,C.colid,'',C.name FROM SYSOBJECTS O ,SYSCOLUMNS C WHERE O.id = C.id AND O.name = 'RptDebitNoteTopSheet_Excel2'      
 UNION ALL      
 SELECT 14 + @RecCount + 3,1,'A' + CAST(14 + @RecCount + 3 AS VARCHAR(10)),'2R'      
 UNION ALL      
 SELECT 14 + @RecCount,1,'A' + CAST(14 + @RecCount AS VARCHAR(10)) + ':' + 'J' + CAST(14 + @RecCount AS VARCHAR(10)),''       
 UNION ALL--Added By Mohana      
 SELECT 15,1,'A15','1R'      
 UNION ALL      
 SELECT 15 + @RecCount1 + 2,1,'A' + CAST(15 + @RecCount1 + 2 AS VARCHAR(10)) + ':J' + CAST(15 + @RecCount1 + 2 AS VARCHAR(10)) ,'4.TOT DIFF CLAIMS'       
 UNION ALL      
  SELECT 15 + @RecCount1 + 4,C.colid,'',C.name FROM SYSOBJECTS O ,SYSCOLUMNS C WHERE O.id = C.id AND O.name = 'RptDebitNoteTopSheet_Excel3'      
  UNION ALL      
  SELECT 15 + @RecCount1 + 6,1,'A' + CAST(15 + @RecCount1 + 6 AS VARCHAR(10)),'3R'      
 UNION ALL      
 SELECT 15 + @RecCount1+5,1,'A' + CAST(15 + @RecCount1+5 AS VARCHAR(10)) + ':' + 'J' + CAST(15 + @RecCount1+5 AS VARCHAR(10)),''       
 UNION ALL--Till Here      
 --Added By Amuthakumar  CRCRSTAPAR0023      
 SELECT 16,1,'A14','1R'      
 UNION ALL      
 SELECT 16 + @RecCount2 + 9,1,'A' + CAST(16 + @RecCount2 + 9 AS VARCHAR(10)) + ':J' + CAST(16 + @RecCount2 + 9 AS VARCHAR(10)) ,'5.MANUAL CLAIM'       
 UNION ALL      
  SELECT 16 + @RecCount2 + 11,C.colid,'',C.name FROM SYSOBJECTS O ,SYSCOLUMNS C WHERE O.id = C.id AND O.name = 'RptDebitNoteTopSheet_Excel4'      
  UNION ALL      
  SELECT 16 + @RecCount2 + 13,1,'A' + CAST(16 + @RecCount2 + 13 AS VARCHAR(10)),'4R'      
 UNION ALL      
 SELECT 16 + @RecCount2 + 12,1,'A' + CAST(16 + @RecCount2+12 AS VARCHAR(10)) + ':' + 'J' + CAST(16 + @RecCount2+12 AS VARCHAR(10)),''     
 UNION ALL          
  SELECT 17 + @RecCount3 + 15,1,'A' + CAST(16 + @RecCount3 + 13 AS VARCHAR(10)),'5R' -------------- Added by lakshmn M Dated ON 25-04-2019 PMS ID: ILCRSTPAR4201  --------------  
  UNION ALL      
  SELECT 18 + @RecCount2 + 11,C.colid,'',C.name FROM SYSOBJECTS O ,SYSCOLUMNS C WHERE O.id = C.id AND O.name = 'RptDebitNoteTopSheet_Excel6' 
  UNION ALL          
  SELECT 17 + @RecCount3 + 15,1,'A' + CAST(16 + @RecCount3 + 13 AS VARCHAR(10)),'6R' -------------- Added by lakshmn M Dated ON 25-04-2019 PMS ID: ILCRSTPAR4201  --------------  
  UNION ALL      
  SELECT 18 + @RecCount2 + 11,C.colid,'',C.name FROM SYSOBJECTS O ,SYSCOLUMNS C WHERE O.id = C.id AND O.name = 'RptDebitNoteTopSheet_Excel5' 
 -- UNION ALL  
 --SELECT 17 + '@RecCount3 + 15, C.colid,'',C.name FROM SYSOBJECTS O ,SYSCOLUMNS C WHERE O.id = C.id AND O.name = 'RptDebitNoteTopSheet_Excel_GrandTotal'        
 UNION ALL--Till Here  CRCRSTAPAR0023      
 SELECT 0,10,'B15','ColumnWidth'        
 UNION ALL      
 SELECT 0,10,'C14','ColumnWidth'       
 UNION ALL      
 SELECT 1,1,'-4108','HorizontalAlignment'      
 UNION ALL      
 SELECT 2,25,'2:6','RowHeight' --ICRSTPAR6933      
 RETURN       
END
GO
IF EXISTS (SELECT 'C' FROM SYSOBJECTS WHERE XTYPE = 'U' AND NAME = 'RptDebitNoteTopSheet_Excel6WID')       
DROP TABLE RptDebitNoteTopSheet_Excel6WID
GO
CREATE TABLE RptDebitNoteTopSheet_Excel6WID
(
	SMIRefNo VARCHAR(100),
	IncMonth VARCHAR(50),
	IncYear   INT,
	SMName	  VARCHAR(100),
	[TotalAchSales] Numeric(18,6),
	[From Range] Numeric(18,4),
	[To Range] Numeric(18,4),
	FixedPay Numeric(18,6),
	VariablePay Numeric(18,6),
	IncPerc Numeric(18,6),
	IncAmount Numeric(18,6),
	[Total Incentive Amount] Numeric(18,6),
	SubLinkId INT
)
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE NAME='Proc_RptDebitNoteTopSheetNew' AND TYPE='P')
DROP PROCEDURE Proc_RptDebitNoteTopSheetNew
GO
/*
BEGIN TRAN
EXEC Proc_RptDebitNoteTopSheetNew 292,1,0,'',0,0,1    
SELECT * FROM RptDebitNoteTopSheet_Excel1    
SELECT * FROM RptDebitNoteTopSheet_Excel2 
SELECT * FROM RptDebitNoteTopSheet_Excel3 
SELECT * FROM RptDebitNoteTopSheet_Excel6WID
SELECT * FROM RptDebitNoteTopSheet_Excel_GrandTotal
ROLLBACK TRAN    
*/
CREATE PROCEDURE Proc_RptDebitNoteTopSheetNew
(    
 @Pi_RptId   INT,    
 @Pi_UsrId   INT,    
 @Pi_SnapId   INT,    
 @Pi_DbName   NVARCHAR(50),    
 @Pi_SnapRequired INT,@Pi_GetFromSnap  INT,    
 @Pi_CurrencyId  INT    
)    
AS    
/************************************************************************************************************************************    
* PROCEDURE : Proc_RptDebitNoteTopSheetNew    
* PURPOSE : Debit Note Top Sheet in Crystal format
* CREATED : S.MOORTHI   
* CREATED DATE :03-05-2019    
* NOTE  : Parle SP for Debit Note Top Sheet    
* MODIFIED     
*************************************************************************************************************************************    
* DATE       AUTHOR   CR/BZ USER STORY ID           DESCRIPTION                             
*************************************************************************************************************************************    
03-05-2019  S.MOORTHI		SR		ILCRSTPAR4278       Debit note sheet report (Design in Crystal Reports)
21-06-2019  S.MOORTHI		CR		CRCRSTPAR0056       STO(Service to Outlet) or Distributor incentive logic to be incorporated and debit note should upload to console
17-07-2019	S.MOHANA		CR		ILCRSTPAR5199	    INCLUDED NEW SUB REPORT -- SMINCENTIVE DETAILS
************************************************************************************************************************************/         
BEGIN    
 SET NOCOUNT ON    
     
 DECLARE @FromDate   AS DATETIME    
 DECLARE @ToDate    AS DATETIME    
 SELECT @FromDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,10,@Pi_UsrId)    
 SELECT @ToDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,11,@Pi_UsrId)    
      
 --Report 1    
 DECLARE @CityName AS NVARCHAR(100)    
 DECLARE @DistributorCode AS NVARCHAR(40)    
 DECLARE @DistributorName AS NVARCHAR(100)    
 DECLARE @DBMonth As INT    
   
 SELECT @DistributorCode = DistributorCode, @DistributorName = DistributorName,    
 @CityName = G.GeoName    
 FROM Distributor D (NOLOCK),    
 Geography G (NOLOCK) WHERE D.GeoMainId = G.GeoMainId    
     
 --Added By Mohana     
     
 --SELECT @DBMonth = COUNT(*) FROM ACMaster  A INNER JOIN ACPeriod B ON A.AcmId=B.AcmId WHERE AcmYr = YEAR (GETDATE()) AND AcmSdt < =@ToDate    
 SELECT @DBMonth = CASE MONTH (@ToDate)     
  WHEN 4 THEN 1    
  WHEN 5 THEN 2    
  WHEN 6 THEN 3    
  WHEN 7 THEN 4    
  WHEN 8 THEN 5    
  WHEN 9 THEN 6    
  WHEN 10 THEN 7    
  WHEN 11 THEN 8    
  WHEN 12 THEN 9    
  WHEN 1 THEN 10    
  WHEN 2 THEN 11    
  WHEN 3 THEN 12    
 END     
 --Report 1    
      
 --Report 2    
 DECLARE @slno AS INT    
     
 DECLARE @SamplingAmount AS NUMERIC(18,2)    
 SELECT @slno = SlNo FROM BatchCreation WHERE FieldDesc = 'Selling Price'    
     
 --- Change by Amuthakumar P ILCRSTPAR1917    
 SELECT @SamplingAmount = ISNULL(SUM(D.TotalAmt),0)    
 FROM FreeIssueHd J (NOLOCK),    
 FreeIssueDt D (NOLOCK),    
 ProductBatchDetails P (NOLOCK)    
 WHERE J.IssueId = D.IssueId     
 AND P.PrdBatId = D.PrdBatId AND P.PriceId = D.PriceId     
 AND P.SLNo = 3 AND J.IssueDate BETWEEN @FromDate AND @ToDate    
 --Report 2    
 
	DELETE FROM REPORTFILTERDT WHERE RPTID=291
	INSERT INTO REPORTFILTERDT(RptId,SelId,SelValue,SelDate,UsrId,LikeOn,LikeText,FilterDate)
	SELECT 291,SelId,SelValue,SelDate,UsrId,LikeOn,LikeText,FilterDate from ReportFilterDt WHERE RptId=@Pi_RptId
     
     EXEC Proc_RptDebitNoteTopSheet  @Pi_RptId,@Pi_UsrId,@Pi_SnapId,@Pi_DbName,@Pi_SnapRequired,@Pi_GetFromSnap,@Pi_CurrencyId
     
 ---ILCRSTPAR4278	
	TRUNCATE TABLE RptDebitNoteTopSheet_Excel1WID
	TRUNCATE TABLE RptDebitNoteTopSheet_Excel2WID
	TRUNCATE TABLE RptDebitNoteTopSheet_Excel3WID
	TRUNCATE TABLE RptDebitNoteTopSheet_Excel4WID
	TRUNCATE TABLE RptDebitNoteTopSheet_Excel5WID
	TRUNCATE TABLE RptDebitNoteTopSheet_Excel6WID
	
	INSERT INTO RptDebitNoteTopSheet_Excel1WID([Scheme Description],[From],[To],[Circular No],
	[Date],[Scheme Budget],[Sec Sales Qty],[Sec Sales Value],[% Lib on Sec Sales],[Claim Amount],SubLinkId)
	SELECT [Scheme Description],[From],[To],[Circular No],
	[Date],[Scheme Budget],[Sec Sales Qty],[Sec Sales Value],[% Lib on Sec Sales],[Claim Amount],@DBMonth FROM RptDebitNoteTopSheet_Excel1(NOLOCK)
	WHERE [Scheme Description]<>'Total'
		
	
	DELETE FROM RptDataCount WHERE RptId = @Pi_RptId AND UserId = @Pi_UsrId  
	INSERT INTO RptDataCount (RptId,RecCount,ErrNo,UserId)  
	SELECT @Pi_RptId,Count(*) as RecCount,0,@Pi_UsrId FROM RptDebitNoteTopSheet_Excel1WID(NOLOCK)	
	
	DELETE FROM RPTFORMULA WHERE RptId=@Pi_RptId
	INSERT INTO RPTFORMULA([RptId],[SlNo],[Formula],[FormulaValue],[LcId],[SelcId]) 
	SELECT @Pi_RptId,1,'SamplingAmount','Sampling Amount : ' + CAST(@SamplingAmount AS VARCHAR(30)),1,0 UNION
	SELECT @Pi_RptId,2,'From','From : ' + CONVERT(VARCHAR(11),@FromDate,105) ,1,0 UNION
	SELECT @Pi_RptId,3,'To','To : ' + CONVERT(VARCHAR(11),@ToDate,105),1,0 UNION
	SELECT @Pi_RptId,4,'Heading1','PARLE - DEBIT NOTE / CREDIT NOTE' ,1,0 UNION
	SELECT @Pi_RptId,5,'WholesalerName','Name of the Wholesaler : ' + ISNULL(@DistributorName,'') ,1,0 UNION
	SELECT @Pi_RptId,6,'Town','Name of the Town : ' + ISNULL(@CityName,'') ,1,0 UNION
	SELECT @Pi_RptId,7,'DebitNoteNo','Debit Note No :' + CONVERT(NVARCHAR(10),@DBMonth)  ,1,0 UNION
	SELECT @Pi_RptId,8,'WholesalerCode','Wholesaler Code : ' + ISNULL(@DistributorCode,'') ,1,0 UNION
	SELECT @Pi_RptId,9,'ProductSampled','Product Sampled during the period  '  ,1,0  UNION
	SELECT top 1 @Pi_RptId,10,'GrandTotal',CONVERT(NVARCHAR(10),Column6)  ,1,0 from RptDebitNoteTopSheet_Excel_GrandTotal(NOLOCK) 
	
	
	INSERT INTO RptDebitNoteTopSheet_Excel2WID([Name Of the Category],[From],[TO],[Circular No],[Monthly Target],
	[Last 2 Mont Avg Sal],[Current Month],[No of Incent Outlets],[Total Discount Amount],SubLinkId)
	SELECT [Name Of the Category],[From],[TO],[Circular No],[Monthly Target],
	[Last 2 Mont Avg Sal],[Current Month],[No of Incent Outlets],[Total Discount Amount],@DBMonth FROM RptDebitNoteTopSheet_Excel2(NOLOCK)
	WHERE [Name Of the Category]<>'Total'
	
	INSERT INTO RptDebitNoteTopSheet_Excel3WID([Name Of the Category],[From],[TO],[Total Normal Amount],
	[Total Normal Sec Sales AS Per TOT],[TOT Diff claims],SubLinkId)
	SELECT [Name Of the Category],[From],[TO],[Total Normal Amount],
	[Total Normal Sec Sales AS Per TOT],[TOT Diff claims],@DBMonth FROM RptDebitNoteTopSheet_Excel3(NOLOCK)
	WHERE [Name Of the Category]<>'Total'
	
	INSERT INTO RptDebitNoteTopSheet_Excel4WID([Scheme Description],[From],[TO],[Circular No],[Scheme Budget],
	[Sec Sales Value],[% Lib on Sec Sales],[Claim Amount],SubLinkId)
	SELECT [Scheme Description],[From],[TO],[Circular No],[Scheme Budget],[Sec Sales Value],
	[% Lib on Sec Sales],[Claim Amount],@DBMonth SubLinkId FROM RptDebitNoteTopSheet_Excel4(NOLOCK)
	WHERE [Scheme Description]<>'Total'
	
	INSERT INTO RptDebitNoteTopSheet_Excel5WID([Dist. Incentive Ref. No.],
	[No of Salesman],[Total Sales Value],[Incentive Amount],SubLinkId)
	SELECT [Dist. Incentive Ref. No.],[No of Salesman],[Total Sales Value],[Incentive Amount],@DBMonth SubLinkId   
	FROM RptDebitNoteTopSheet_Excel5  (NOLOCK)
	WHERE [Dist. Incentive Ref. No.]<>'Total'	

	INSERT INTO RptDebitNoteTopSheet_Excel6WID(SMIRefNo,IncMonth,IncYear,SMName,TotalAchSales,[From Range],[To Range],FixedPay,
	VariablePay,IncPerc,IncAmount,[Total Incentive Amount],SubLinkId )
	SELECT SMIRefNo,IncMonth,IncYear,SMName,TotalAchSales,[From Range],[To Range],FixedPay,
	VariablePay,IncPerc,IncAmount,[Total Incentive Amount],@DBMonth SubLinkId
	FROM RptDebitNoteTopSheet_Excel6 (NOLOCK)
	WHERE SMIRefNo<>'Total'	
	
	
	SELECT * FROM RptDebitNoteTopSheet_Excel1WID
	---ILCRSTPAR4278
 
 RETURN     
END
GO
DELETE FROM CustomUpdownload WHERE Module in ('DebitNoteTopSheet7') and UpDownload='Upload'
INSERT INTO CustomUpdownload(SlNo,SeqNo,Module,Screen,ExportFnName,ImportProcName,ParkTable,ValidateProcName,TranType,UpDownload,MandatoryFile)
SELECT 170,1,'DebitNoteTopSheet7','DebitNoteTopSheet7','Proc_Cs2Cn_DebitNoteTopSheet7','','Cs2cn_Prk_DebitNoteTopSheet7','Proc_Cn2Cs_Dummy','Master','Upload',1  
GO
DELETE FROM Tbl_UploadIntegration WHERE  ProcessName in ('DebitNoteTopSheet7')
INSERT INTO Tbl_UploadIntegration(SequenceNo,ProcessName,FolderName,PrkTableName,CreatedDate)
SELECT 69,'DebitNoteTopSheet7','','Cs2cn_Prk_DebitNoteTopSheet7',CONVERT(VARCHAR(10),GETDATE(),121) 
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Cs2cn_Prk_DebitNoteTopSheet7]') AND type in (N'U'))
DROP TABLE [Cs2cn_Prk_DebitNoteTopSheet7]
GO
CREATE TABLE [Cs2cn_Prk_DebitNoteTopSheet7]
(
	[SlNo] [numeric](38, 0) IDENTITY(1,1) NOT NULL,
	[DistCode] [nvarchar](50) NULL,
	SMIRefNo VARCHAR(100),
	IncMonth VARCHAR(50),
	IncYear   INT,
	SMName	  VARCHAR(100),
	[TotalAchSales] Numeric(18,6),
	[FromRange] Numeric(18,4),
	[ToRange] Numeric(18,4),
	FixedPay Numeric(18,6),
	VariablePay Numeric(18,6),
	[TotalIncentiveAmount] Numeric(18,6),
	[UploadFlag] [nvarchar](10) NULL,
	[SyncId] [numeric](38, 0) NULL,
	[ServerDate] [datetime] NULL
)
GO
IF EXISTS (SELECT * FROM Sysobjects WHERE XTYPE = 'P' AND name = 'Proc_Cs2Cn_DebitNoteTopSheet7')
DROP PROCEDURE Proc_Cs2Cn_DebitNoteTopSheet7
GO
/*
BEGIN TRAN
update salesmanincentivemaster set IncentiveGenerated = 1
EXEC Proc_Cs2Cn_DebitNoteTopSheet7 0,'2019-05-29'
SELECT * FROM Cs2cn_Prk_DebitNoteTopSheet7
SELECT * FROM salesmanincentiveDETAIL
ROLLBACK TRAN
*/
CREATE PROCEDURE Proc_Cs2Cn_DebitNoteTopSheet7
(
	@Po_ErrNo INT OUTPUT,
	@ServerDate DATETIME 
)
AS
/*******************************************************************************************************************
* PROCEDURE	: Proc_Cs2Cn_DebitNoteTopSheet7  
* PURPOSE	: Upload SalesManIncentive details
* NOTES		:  
* CREATED	: S.MOHANA 
* DATE		: 17-07-2019
* PMS		: ILCRSTPAR5199  
**********************************************************************************************************************/
SET NOCOUNT ON 
BEGIN
	DECLARE @Distcode AS Varchar(50)
  	DECLARE @Month1 VARCHAR(100)
	DECLARE @Year1 INT

	SET @Po_ErrNo=0
  	
	SELECT @Distcode=DistributorCode FROM Distributor

	DELETE FROM Cs2cn_Prk_DebitNoteTopSheet7 WHERE UploadFlag='Y' 

	INSERT INTO  Cs2cn_Prk_DebitNoteTopSheet7(Distcode,SMIRefNo,IncMonth,IncYear,SMName,[FromRange],[ToRange],[TotalAchSales],FixedPay,VariablePay,[TotalIncentiveAmount],UPloadflag,ServerDate)
	SELECT @Distcode,S.SMIRefNo,S.IncMonth,S.IncYear,SMName,[FromRange],[ToRange],AchSales,FixedPay,VariablePay,TotalIncAmount,'N',@SERVERDATE FROM SalesManIncentiveMaster S INNER JOIN SalesManincentiveDetail SD
	ON S.SMIRefno = SD.SMIRefno 
	INNER JOIN SalesmanIncentiveSlabs SS ON SS.SMIRefno = S.SMIRefno AND SD.SMIRefno=SS.SMIRefno AND SD.AchSlab = SS.Slab 
	INNER JOIN SalesMan A ON SD.SMid = A.SMId 
	WHERE  SMCODE NOT IN('SMDUMMY01') AND S.IncentiveGenerated = 1 AND S.Upload = 0 AND SMIrefStatus=1
	 
	 
	UPDATE S SET Upload=1  FROM SalesManIncentiveMaster S 
	INNER JOIN Cs2cn_Prk_DebitNoteTopSheet7 CS ON S.SMIRefno=CS.SMIRefno
	AND S.Upload=0  AND IncentiveGenerated=1
  	

	UPDATE S SET Upload=1  FROM SalesManIncentiveDETAIL S 
	INNER JOIN Cs2cn_Prk_DebitNoteTopSheet7 CS ON S.SMIRefno=CS.SMIRefno
	AND S.Upload=0  
END
GO
IF EXISTS(SELECT 'X' FROM SYSOBJECTS WHERE XTYPE='P' AND NAME='PROC_SMIncentiveCalculation')
DROP PROCEDURE PROC_SMIncentiveCalculation
GO
/*
BEGIN TRAN
DELETE FROM SalesManincentiveDetail
update SalesManIncentiveMaster set IncentiveGenerated=0
EXEC PROC_SMIncentiveCalculation 2,0 
SELECT * FROM SalesManincentiveDetail
ROLLBACK TRAN
*/
CREATE PROCEDURE [dbo].[PROC_SMIncentiveCalculation]
(
@Pi_UserId AS INT,
@Po_ErrNo AS TinyINT OUTPUT
)
AS
/**************************************************************************************************************************************************************************************
* PROCEDURE		: PROC_SMIncentiveCalculation
* PURPOSE		: To Validate SalesMan incetive Data and insert into SalesMan incentive master and detail table
* CREATED		: Govindaraj.P
* CREATED DATE	: 02/03/2018
* MODIFIED
**************************************************************************************************************************************************************************************
* DATE      |	  PERSON			  | USER STORY ID  |	  CR/BZ		|       REMARKS                      
**************************************************************************************************************************************************************************************
* 16-05-2019		Govindaraj.P			CRCRSTPAR0054		CR			SalesMan incentive Calculation
* 18-07-2019		MOHANA S				ILCRSTPAR5199		BZ			VALIDATION HAS BEEN INCLUDED TO GET THE MONTH
**************************************************************************************************************************************************************************************/
SET NOCOUNT ON
BEGIN	
 BEGIN TRY
			 
	DECLARE @Month AS  VARCHAR(50) 
	DECLARE @Year AS  INT
	DECLARE @MCnt AS INT
	
	DECLARE @date as DATETIME
	--SET @date=GETDATE()
	SET @date=GETDATE()
	
	SELECT @MCnt=MONTH(@date)-1
	SELECT @Month=DATENAME( MONTH , DATEADD( MONTH , @MCNT , 0 ) - 1 )
	SELECT @Year= YEAR(@date)
	--select @Month,@Year
	SET @Po_ErrNo=0
		IF NOT  EXISTS( SELECT A.JcmId,A.JcmJc,JcmSdt,JcmEdt,JcmYr
			FROM JCMonthEnd A INNER JOIN JcMast B ON A.JcmId=B.JcmId WHERE A.JcmId IN(SELECT JcmId FROM JCMast WHERE JcmYr=@Year)
			and JcmSdt<@date)
		BEGIN
			SET @Po_ErrNo=0
			RETURN
		END
		ELSE
		IF NOT  EXISTS (SELECT * FROM SalesManIncentiveMaster WHERE  SMIRefStatus=1 AND  IncMonth=@Month AND Incyear=@Year)
		BEGIN
			SET @Po_ErrNo=0
			RETURN
		END
		
		INSERT INTO MultiUserTransValidation(UserId,UserName,TransId,TransName,LockedDate)
		SELECT @Pi_UserId,'',174,'SalesMan Incentive',@date

		SELECT  SMIRefno,incmonth,Incyear ,SMID into  #SalesManIncentiveMaster  
		FROM SalesManIncentiveMaster CROSS JOIN SalesMan 
		WHERE SMCODE NOT IN('SMDUMMY01')AND  IncMonth=@Month AND Incyear=@Year
		AND SMIrefStatus=1

		SELECT DISTINCT  Prdid,SMIRefno  INTO  #IncentiveProducts
		 FROM (
			SELECT DISTINCT E.Prdid ,B.SMIRefno  AS SMIRefno  FROM SMincentiveProducts  B
			INNER JOIN #SalesManIncentiveMaster SS ON SS.SMIRefno=B.Smirefno 
			INNER JOIN ProductCateGOryValue C (Nolock) ON B.PrdCtgValMainId = C.PrdCtgValMainId 
			INNER JOIN ProductCateGOryValue D (Nolock) ON D.PrdCtgValLinkCode  LIKE Cast(c.PrdCtgValLinkCode as nvarchar(1000)) + '%'
			INNER JOIN Product E  (Nolock) On	D.PrdCtgValMainId = E.PrdCtgValMainId  
			WHERE SS.IncMonth=@Month  AND Incyear=@Year AND B.ActStatus=1
			UNION
			SELECT DISTINCT E.Prdid,SS.SMIRefno  AS SMIRefno  FROM SMincentiveProducts  B
			INNER JOIN #SalesManIncentiveMaster SS ON SS.SMIRefno=B.Smirefno 
			INNER JOIN Product E  (Nolock) On	E.Prdid = B.Prdid
			WHERE SS.IncMonth=@Month  AND Incyear=@Year AND B.ActStatus=1			
		) A	
		

		CREATE TABLE #SMIncentive(
		SMIrefno		VARCHAR(100),
		SMID			INT,
		Sales			NUMERIC(18,3)
		)

		INSERT INTO #SMIncentive(SMIrefno,SMID,Sales)	
		SELECT DISTINCT A.SMIRefno,A.SMID,0  FROM #SalesManIncentiveMaster A
		CROSS JOIN (Select Smid From Salesman where SMCODE NOT IN('SMDUMMY01') ) B

		SELECT SMIrefno,SMID,SUM(Sales) Sales into #SMIncentive1
		 FROM (
			SELECT IP.SMIRefno,SS.SMID,Sum(Sip.prdnetamount)  Sales FROM SalesInvoice SS (NOLOCK) INNER JOIN Salesinvoiceproduct  SIP (NOLOCK) 
			ON SS.Salid=Sip.Salid
			INNER JOIN #IncentiveProducts IP (NOLOCK)  ON   IP.Prdid=Sip.prdid 
			WHERE SS.Dlvsts>3 AND DATENAME(MM,(SS.SalInvDate))=@Month AND Year(SS.Salinvdate)=@Year --ILCRSTPAR5199
			GROUP  by SS.SMID,IP.SMIRefno
			UNION ALL
			SELECT IP.SMIrefno,SS.SMID,-Sum(Sip.prdnetamt)  Sales FROM Returnheader SS (NOLOCK)
			 INNER JOIN Returnproduct  SIP (NOLOCK) ON SS.returnid=Sip.returnid  and StockTypeId IN (SELECT StockTypeId FROM STOCKTYPE WHERE SystemStockType = 1) 
			INNER JOIN #IncentiveProducts IP (NOLOCK)  ON   IP.Prdid=Sip.prdid   
			WHERE SS.Status=0 AND DATENAME(MM,(SS.Returndate))=@Month  AND Year(SS.Returndate)=@Year --ILCRSTPAR5199
			GROUP  by SS.SMID,IP.SMIRefno
		) A
		GROUP BY SMID,SMIRefno
		
		UPDATE A SET A.SALES=B.SALES FROM #SMIncentive A
		INNER JOIN #SMIncentive1 B ON A.SMIrefno=B.SMIRefno AND A.SMID=B.SMID
		
		----Added by S.Moorthi
		SELECT DISTINCT SMID INTO #SMNoSales FROM #SalesManIncentiveMaster A 
		WHERE NOT EXISTS(SELECT * FROM #SMIncentive B WHERE A.SMIRefno=B.SMIRefno AND A.SMID=B.SMID)
		
		INSERT INTO #SMIncentive(SMIrefno,SMID,Sales)
		SELECT DISTINCT A.SMIRefno,B.SMID,0 FROM #SMIncentive A CROSS JOIN #SMNoSales B	
		---S.Moorthi Till Here
			
		
		SELECT S.*,#SMIncentive.Sales,#SMIncentive.SMID AS SMID INTO #SalesmanIncentiveSlabs 
		FROM SalesmanIncentiveSlabs  S (NOLOCK)  
		INNER JOIN #SalesManIncentiveMaster SM (NOLOCK)  ON S.SMIRefno=Sm.SMIRefno 
		CROSS JOIN  #SMIncentive
		
		
		CREATE TABLE #SMincentiveSlabs
		(
		SMID INT,
		SMIRefNo Varchar(50),
		Slab INT,
		FromRange  Numeric(18,6),
		ToRange  Numeric(18,6),
		Eligible	INT
		)
		INSERT INTO #SMincentiveSlabs(SMID,SMIRefNo,Slab,FromRange,ToRange,Eligible)
		SELECT SMID,SMIRefNo, Slab ,FromRange,ToRange,1 AS Eligible
		FROM #SalesmanIncentiveSlabs (NOLOCK) 
		WHERE (Sales >= FromRange AND 	(Sales <= torange or ToRange <= 0))
	
	----Added by S.Moorthi for All Salesman Fixpay should be eligible
		SELECT SMIRefNo,MIN(SLAB) Slab INTO #MinSlab FROM 
		#SalesmanIncentiveSlabs GROUP BY SMIRefNo
		
		INSERT INTO #SMincentiveSlabs(SMID,SMIRefNo,Slab,FromRange,ToRange,Eligible)
		SELECT DISTINCT A.SMID,A.SMIRefNo,A.Slab ,FromRange,ToRange,0 AS Eligible FROM #SalesmanIncentiveSlabs A 
		INNER JOIN #MinSlab B ON A.SMIRefNo=B.SMIRefNo AND A.Slab=B.Slab 
		WHERE NOT EXISTS(SELECT * fROM #SMincentiveSlabs M WHERE A.SMIRefNo=M.SMIRefNo AND A.SMID=M.SMID)
		
	---S.Moorthi Till Here
		
		CREATE TABLE #SalesManincentive
		(
		 SMIRefNo VARCHAR(100),
		 IncMonth VARCHAR(50),
		 IncYear   INT,
		 SMID INT,
		 AchSales Numeric(18,6),
		 FixedPay Numeric(18,6),
		 VariablePay Numeric(18,6),
		 Slab INT,
		 IncPerc Numeric(18,6),
		 IncAmount Numeric(18,6)
		 )
		
		--S.Moorthi added Un Eligible Sales man Fixed Pay
		INSERT INTO  #SalesManincentive(SMIRefNo,IncMonth,IncYear,SMID,AchSales,FixedPay,VariablePay,Slab,IncPerc,IncAmount)
		SELECT S.SMIRefno,S.incmonth,S.Incyear,SS.SMID,SS.Sales,Sm.Fixedpay,
		CASE WHEN Eligible=1 THEN Sm.VariablePay ELSE 0 END,Sl.Slab AS Slab,SIL.SMIncentivePerc,
		CASE WHEN Eligible=1 THEN SM.VariablePay *(SIL.SMIncentivePerc/100.00) ELSE 0 END AS Incentive FROM  #SalesManIncentiveMaster  S INNER JOIN 
		#SMIncentive SS  (NOLOCK)  ON S.SMID=SS.Smid
		INNER JOIN SalesmanIncentiveSlabs SIL (NOLOCK) ON SIL.SMIRefno=S.SMIRefno
		INNER JOIN  #SMincentiveSlabs SL (NOLOCK)  ON SL.SMIRefno=S.SMIRefno AND Sl.Slab=Sil.Slab AND Sl.Smid=SS.SMid
		INNER JOIN SalesManIncentiveMaster  SM  (NOLOCK)  ON SM.SMIRefno=S.SMIRefno  AND SM.incmonth=S.incmonth AND SM.Incyear=S.Incyear
		WHERE SM.IncentiveGenerated=0
	
		
	  BEGIN TRANSACTION	
		INSERT INTO  SalesManincentiveDetail(SMIRefno,IncMonth,Incyear,SMID,AchSales,AchSlab,IncPerc,IncAmount,[TotalIncAmount],Upload,Availability,LastModBy
		,LastModDate,AuthId,AuthDate)
		SELECT DISTINCT SMIRefno,IncMonth,Incyear,SMID,AchSales,Slab,IncPerc,IncAmount,
		Fixedpay+IncAmount as  [TotalIncAmount],
		0 AS upload,1 AS Availability,@Pi_UserId AS LastModBy,GETDATE() 
		AS  LastModDate,
		@Pi_UserId AS AuthId, GETDATE() AuthDate 
		FROM  #SalesManincentive
		
		UPDATE SalesManIncentiveMaster SET IncentiveGenerated=1  FROM  SalesManIncentiveMaster S 
		INNER JOIN SalesManincentiveDetail  SM ON SM.SMIRefno=S.SMIRefno 
		WHERE S.IncentiveGenerated=0 AND SM.UPLOAD=0
		
		DELETE FROM MultiUserTransValidation  WHERE TransId=174
	  COMMIT TRANSACTION
 END TRY
 BEGIN CATCH
	  ROLLBACK TRANSACTION	
	  SET @Po_ErrNo=1
 END CATCH
RETURN
END
GO
IF EXISTS (SELECT *FROM SYSOBJECTS WHERE NAME ='Fn_ValidateMonthEnd' AND TYPE='FN')
DROP FUNCTION Fn_ValidateMonthEnd
GO
CREATE FUNCTION Fn_ValidateMonthEnd (@Pi_RptId INT,@Pi_UsrId INT)
RETURNS VARCHAR(500) 
AS
/*******************************************************************************************************************
* PROCEDURE	: Fn_ValidateMonthEnd  
* PURPOSE	: To validate month end details before generating debit note top sheet report
* NOTES		:  
* CREATED	: S.MOHANA 
* DATE		: 17-07-2019
* PMS		: ILCRSTPAR5200  
**********************************************************************************************************************/
BEGIN
DECLARE @ValidateMsg AS VARCHAR(500)
DECLARE @MonthEndDt AS DATETIME

SET @ValidateMsg=''
	
DECLARE @FromDate   AS DATETIME    
DECLARE @ToDate    AS DATETIME    
SELECT @FromDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,10,@Pi_UsrId)    
SELECT @ToDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,11,@Pi_UsrId)   
	
	IF EXISTS(SELECT * FROM JCMonthEnd)
	BEGIN
		SELECT @MonthEndDt=MAX(JcmEdt) FROM JCMonthEnd
		IF @ToDate>@MonthEndDt
		BEGIN
			SET @ValidateMsg='Month end not completed for selected period . Hence Debit Note Top Sheet Report Cannot generate'
		END
	END
	
RETURN @ValidateMsg

END
GO
---Tally Consolitated Script--PARLE
IF NOT EXISTS(SELECT A.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.ID WHERE 
A.NAME='CRDBNoteAdjustment' AND B.NAME='InvRcpNo' AND A.Xtype='U')
BEGIN
	ALTER TABLE CRDBNoteAdjustment ADD InvRcpNo NVARCHAR(50) 
	CONSTRAINT DF_CRDBNoteAdjustment_InvRcpNo DEFAULT '' WITH VALUES
END
GO
IF NOT EXISTS (SELECT * FROM CoaMaster WHERE AcName = 'Purchase Discount Allowed')
BEGIN
	DECLARE @CoaId		AS INT
	DECLARE @MaxCoaId	AS INT
	DECLARE @AccCode	AS VARCHAR(200)
	
	SELECT @MaxCoaId = ISNULL((MAX(CoaId)),1) FROM COAMaster WHERE AcLevel = 4 AND MainGroup = 4
	SELECT @CoaId = ISNULL((MAX(CoaId)+1),1) FROM COAMaster WITH (NOLOCK)
	SELECT @AccCode = ISNULL(AcCode+1,'4110001') FROM COAMaster WITH (NOLOCK) WHERE AcLevel = 4 AND MainGroup = 4 AND CoaId = @MaxCoaId
		      
	INSERT INTO COAMaster (CoaId,AcCode,AcName,AcLevel,MainGroup,Status,Availability,LastModBy,LastModDate,AuthId,AuthDate)
	SELECT @CoaId,@AccCode,'Purchase Discount Allowed',4,4,0,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121)

	UPDATE Counters SET CurrValue = @CoaId WHERE TabName = 'CoaMaster' AND FldName = 'CoaId'
END
GO
IF NOT EXISTS (SELECT * FROM CoaMaster WHERE AcName = 'Sales Account for All Discounts')
BEGIN
	DECLARE @CoaId AS INT
	DECLARE @MaxCoaId AS INT
	DECLARE @AccCode AS VARCHAR(200)
	
	SELECT @MaxCoaId = ISNULL((MAX(CoaId)),1) from COAMaster WHERE AcLevel = 4 AND MainGroup = 3
	SELECT @CoaId = ISNULL((MAX(CoaId)+1),1) FROM COAMaster WITH (NOLOCK)
	SELECT @AccCode = ISNULL(AcCode+1,'3110001') FROM COAMaster WITH (NOLOCK) WHERE AcLevel = 4 AND MainGroup = 3 AND CoaId = @MaxCoaId
		      
	INSERT INTO COAMaster (CoaId,AcCode,AcName,AcLevel,MainGroup,Status,Availability,LastModBy,LastModDate,AuthId,AuthDate)
	SELECT @CoaId,@AccCode,'Sales Account for All Discounts',4,3,0,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121)

	UPDATE Counters SET CurrValue = @CoaId WHERE TabName = 'CoaMaster' AND FldName = 'CoaId'
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='U' AND NAME='TempVoucherHeader')
DROP TABLE TempVoucherHeader
GO
CREATE TABLE [dbo].[TempVoucherHeader](
	[Account Code] [nvarchar](75) NULL,
	[Account Name] [nvarchar](128) NULL,
	[Account Level] [nvarchar](100) NULL,
	[Main Group] [nvarchar](75) NULL,
	[Sub Group] [nvarchar](128) NULL,
	[Account Group] [nvarchar](128) NULL,
	[TinNumber] [varchar](100) NULL
) ON [PRIMARY]
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='U' AND NAME='TempVoucherDetails')
DROP TABLE TempVoucherDetails
GO
CREATE TABLE [dbo].[TempVoucherDetails](
	[Voucher No] [nvarchar](25) NULL,
	[Voucher Date] [datetime] NULL,
	[Account Code] [nvarchar](100) NULL,
	[Type Cr /Db] [nvarchar](25) NULL,
	[Amount] [numeric](18, 6) NULL,
	[Narration] [nvarchar](203) NULL,
	[VocType] [nvarchar](20) NULL,
	[AccCode] [varchar](200) NULL,
	[Invoice_Number] [varchar](100) NULL,
	[Invoice_Date] [varchar](20) NULL,
	[Party_Id] [varchar](100) NULL,
	[Party_Name] [varchar](200) NULL
) ON [PRIMARY]
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='U' AND name='TaxAccountConfig')
DROP TABLE TaxAccountConfig
GO
CREATE TABLE [dbo].[TaxAccountConfig](
	[TaxId] [int] NULL,
	[TaxPerc] [numeric](16, 2) NULL,
	[AcName] [varchar](200) NULL,
	[Accode] [varchar](50) NULL,
	[TaxType] [varchar](20) NULL,
	[AcLevel] [int] NULL,
	[maingroup] [int] NULL
) ON [PRIMARY]
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='P' AND name='Proc_COACreation')
DROP PROCEDURE Proc_COACreation
GO
CREATE PROCEDURE Proc_COACreation
AS
BEGIN
	DECLARE @Prdid AS INT
	DECLARE @Prdbatid AS INT
    DELETE FROM ProductBatchTaxPercent
	DECLARE Cur_CalculateTax CURSOR 
	FOR SELECT DISTINCT PrdId,PrdBatID FROM productbatch where Status=1
	OPEN Cur_CalculateTax 
	FETCH NEXT FROM Cur_CalculateTax INTO @Prdid,@Prdbatid    
	WHILE @@FETCH_STATUS = 0        
	BEGIN   
		EXEC Proc_TaxCalCulation @Prdid,@Prdbatid 
	FETCH NEXT FROM Cur_CalculateTax INTO @Prdid,@Prdbatid          
	END        
	CLOSE Cur_CalculateTax        
	DEALLOCATE Cur_CalculateTax 
	
	DELETE FROM TaxAccountConfig
	SELECT MAX(Cast(Accode as Numeric(36,0))) as Accode INTO #T 
	FROM COAMaster WHERE AcCode like (SELECT SUBSTRING(accode,1,3)+'%' from coamaster where ACNAME ='output tax')
	SELECT MAX(Cast(Accode as Numeric(36,0))) as Accode INTO #T1 
	FROM COAMaster WHERE AcCode like (SELECT SUBSTRING(accode,1,3)+'%' from coamaster where ACNAME ='input tax')
	SELECT MAX(Cast(Accode as Numeric(36,0))) as Accode INTO #T2 
	FROM COAMaster WHERE AcCode like (SELECT SUBSTRING(accode,1,3)+'%' from coamaster where ACNAME ='Sales Accounts')
	SELECT MAX(Cast(Accode as Numeric(36,0))) as Accode INTO #T3 
	FROM COAMaster WHERE AcCode like (SELECT SUBSTRING(accode,1,3)+'%' from coamaster where ACNAME ='Purchase Accounts')
	SELECT DISTINCT S.taxid,taxperc,REPLACE (T.TaxName,'%','')+ CONVERT(NVARCHAR(9),CAST(TaxPerc AS NUMERIC(18,1))) +'%'+' OutPut' as AcName,
	'Sales Account '+REPLACE (T.TaxName,'%','')+ CONVERT(NVARCHAR(9),CAST(TaxPerc AS NUMERIC(18,1))) +'%' as AcName1 ,
	'Sales Return Account '+REPLACE (T.TaxName,'%','')+ CONVERT(NVARCHAR(9),CAST(TaxPerc AS NUMERIC(18,1))) +'%' as AcName2
	INTO #Sales
	FROM SalesInvoiceProductTax S
	INNER JOIN TaxConfiguration T on S.TaxId=T.TaxId and TaxableAmount>0
	SELECT DISTINCT S.taxid,taxperc,REPLACE (T.TaxName,'%','')+ CONVERT(NVARCHAR(9),CAST(TaxPerc AS NUMERIC(18,1))) +'%'+' InPut'as AcName,
	'Purchase Account '+REPLACE (T.TaxName,'%','')+ CONVERT(NVARCHAR(9),CAST(TaxPerc AS NUMERIC(18,1))) +'%'as AcName1,
	'Purchase Return Account '+REPLACE (T.TaxName,'%','')+ CONVERT(NVARCHAR(9),CAST(TaxPerc AS NUMERIC(18,1))) +'%'as AcName2
	INTO #Purchase
	from PurchaseReceiptProductTax S
	INNER JOIN TaxConfiguration T on S.TaxId=T.TaxId and TaxableAmount>0
	SELECT TaxId,TaxPerc,AcName,Accode,TaxType,
	AcLevel,maingroup
	INTO #TaxCoaMaster
	FROM (
		SELECT TaxId,TaxPerc,AcName,Accode+ROW_NUMBER() OVER(Order by Taxid,AcName,Taxperc) as Accode, 'OPTax' as TaxType,
		4  as AcLevel,1 as maingroup 
		FROM #Sales
		CROSS JOIN #T A
		UNION ALL
		SELECT TaxId,TaxPerc,AcName,Accode+ROW_NUMBER() OVER(Order by Taxid,AcName,Taxperc) as Accode, 'INTax' as TaxType ,
		4  as AcLevel,2 as maingroup 
		FROM #Purchase
		CROSS JOIN #T1 A
		UNION ALL
		SELECT TaxId,TaxPerc,AcName,Accode +ROW_NUMBER() OVER(Order by Taxid,AcName,Taxperc) as Accode,TaxType,
		4  as AcLevel,3 as maingroup  
		FROM 
		(
			SELECT TaxId,TaxPerc,AcName1 as AcName,Accode, 'SAOPTax' as TaxType 
			FROM #Sales
			CROSS JOIN #T2 A
			UNION
			SELECT TaxId,TaxPerc,AcName2 as AcName,Accode,'SROPTax' as TaxType 
			FROM #Sales
			CROSS JOIN #T2 A
		)X	
		UNION ALL
		SELECT TaxId,TaxPerc,AcName,Accode+ROW_NUMBER() OVER(Order by Taxid,AcName,Taxperc) as Accode,TaxType,
		4  as AcLevel,4 as maingroup
		FROM(
		SELECT TaxId,TaxPerc,AcName1 as AcName,Accode,'PAIPTax' as TaxType  FROM
		#Purchase
		CROSS JOIN #T3 A
		UNION 
		SELECT TaxId,TaxPerc,AcName2 as AcName,Accode,'PRIPTax' as TaxType 
		FROM #Purchase
		CROSS JOIN #T3 A) X
	)Y 
	INSERT INTO TaxAccountConfig(TaxId,TaxPerc,AcName,Accode,TaxType,
	AcLevel,maingroup)
	SELECT TaxId,TaxPerc,A.AcName,B.Accode,TaxType,
	B.AcLevel,B.maingroup
	FROM #TaxCoaMaster A INNER JOIN Coamaster B ON A.AcName=B.AcName
	
	DELETE A FROM #TaxCoaMaster A INNER JOIN Coamaster B ON A.AcName=B.AcName
	DECLARE @MaxId AS NUMERIC(36,0)
	SELECT @MaxId=ISNULL(MAX(CoaId ),0) FROM COAMaster
	INSERT INTO Coamaster(CoaId,AcCode,AcName,AcLevel,MainGroup,Status,Availability,LastModBy,
	LastModDate,AuthId,AuthDate)
	SELECT @MaxId+ROW_NUMBER() OVER(Order by Taxid,AcName,Taxperc,TaxType) as CoaId,Accode,AcName,AcLevel,MainGroup,0,1,1,'2013-10-01',1,'2013-10-01'  FROM #TaxCoaMaster 
	
	INSERT INTO TaxAccountConfig(TaxId,TaxPerc,AcName,Accode,TaxType,
	AcLevel,maingroup)
	SELECT TaxId,TaxPerc,AcName,Accode,TaxType,
	AcLevel,maingroup FROM #TaxCoaMaster 
END
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE name='EXPORT_TALLY_PRICEDETAILS' AND XTYPE='U')
BEGIN
CREATE TABLE [dbo].[EXPORT_TALLY_PRICEDETAILS](
	[PRDID] [int] NULL,
	[PRDBATID] [int] NULL,
	[MRP] [numeric](18, 6) NULL,
	[ListPrice] [numeric](18, 6) NULL,
	[SellingRate] [numeric](18, 6) NULL,
	[EFFECTIVEDATE] [datetime] NULL,
	[TAXGROUPID] [int] NULL,
	[TALLYEPORTFLAG] [int] NULL
) ON [PRIMARY]
END
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE name='TallyRtrVoucher' AND XTYPE='U')
BEGIN
CREATE TABLE TallyRtrVoucher(
	[TaxType] [nvarchar](50) NULL,
	[RtrTaxableType] [int] NULL
) ON [PRIMARY]
END
GO
IF  EXISTS (SELECT * FROM SYSOBJECTS WHERE name='TempTallyVoucher' AND XTYPE='U')
DROP TABLE TempTallyVoucher
GO
CREATE TABLE TempTallyVoucher
(
	[Voucher] [varchar](100) NULL
)
GO
IF  EXISTS (SELECT * FROM SYSOBJECTS WHERE name='TempTaxTallyVoucher' AND XTYPE='U')
DROP TABLE TempTaxTallyVoucher
GO
CREATE TABLE TempTaxTallyVoucher
(
	[TaxCode] [varchar](200) NULL
)
GO
IF  EXISTS (SELECT * FROM SYSOBJECTS WHERE name='Export_BtnVoucher' AND XTYPE='U')
DROP TABLE Export_BtnVoucher
GO
CREATE TABLE Export_BtnVoucher(
	[WithInv] [varchar](25) NULL,
	[Withoutinv] [varchar](25) NULL,
	[Chkmaster] [int] NULL,
	[ChkProduct] [int] NULL
)
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE name='TallyVoucherType' AND XTYPE='U')
CREATE TABLE TallyVoucherType
(
	[Slno] [int] NULL,
	[Voucher] [varchar](200) NULL
)
GO
DELETE FROM TallyRtrVoucher
INSERT INTO TallyRtrVoucher
SELECT 'With Tax',0 UNION
SELECT 'WithOut Tax',1
GO
DELETE FROM TempTallyVoucher
INSERT INTO TempTallyVoucher
SELECT 'Contra' UNION
SELECT 'Credit Note' UNION
SELECT 'Debit' Note UNION
SELECT 'Journal' UNION
SELECT 'Memo' UNION
SELECT 'Payment' UNION
SELECT 'Purchase' UNION
SELECT 'Purchase Return' UNION
SELECT 'Receipt' UNION
SELECT 'Sales' UNION
SELECT 'Sales Return' UNION
SELECT 'StockTransfer' 
GO
IF exists (SELECT * FROM Sysobjects where name='Proc_ExportTaxTypeVoucher' and XTYPE='P')
DROP PROCEDURE Proc_ExportTaxTypeVoucher
GO
CREATE PROCEDURE [dbo].[Proc_ExportTaxTypeVoucher]
AS
/***************************************************************************************************
* FUNCTION	: Proc_ExportTaxTypeVoucher
* PURPOSE	: Returns the Tax details IN EXCEL
* NOTES		:
* CREATED	: Gopikrishnan.R - 04.02.2013
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
-------------------------------------------------------------------------------------------------
**************************************************************************************************/
BEGIN
EXEC Proc_COACreation
delete from TempTaxTallyVoucher
Insert into TempTaxTallyVoucher
select Taxcode from (
--select Distinct 1 as Slno,'Purchase Account '+ TaxCode+ ' Input'+ '-'+Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc))+'%'+' for '+ Group_Caption as TaxCode
--from PurchaseReceiptProductTax  SIPT (NOLOCK)
--INNER JOIN PurchaseReceiptProduct SIP (NOLOCK) ON SIPT.PrdSlNo=SIPT.PrdSlNo
--INNER JOIN Tbl_GR_Build_PH TGL (NOLOCK) ON TGL.PrdId=SIP.PRDID
--INNER JOIN TaxConfiguration TC (NOLOCK) ON TC.TaxId=SIPT.TaxId AND SIPT.TaxId in (2,3)
--where TaxableAmount>0 
--UNION
--select Distinct 2 as Slno,'Sales Account '+ TaxCode+ ' Output'+ '-'+Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc))+'%'+' for '+ Group_Caption as TaxCode
-- from salesinvoiceproducttax  SIPT (NOLOCK)
--INNER JOIN SalesInvoiceProduct SIP (NOLOCK) ON SIPT.PrdSlNo=SIPT.PrdSlNo
--INNER JOIN Tbl_GR_Build_PH TGL (NOLOCK) ON TGL.PrdId=SIP.PRDID
--INNER JOIN TaxConfiguration TC (NOLOCK) ON TC.TaxId=SIPT.TaxId AND SIPT.TaxId in (2,3)
--where TaxableAmount>0 
--UNION
--select Distinct 3 as slno,'Purchase Return Account '+ TaxCode+ ' Input'+ '-'+Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc))+'%'+' for '+ Group_Caption as TaxCode
-- from ReturnProducttax  SIPT (NOLOCK)
--INNER JOIN ReturnProduct SIP (NOLOCK) ON SIPT.PrdSlNo=SIPT.PrdSlNo
--INNER JOIN Tbl_GR_Build_PH TGL (NOLOCK) ON TGL.PrdId=SIP.PRDID
--INNER JOIN TaxConfiguration TC (NOLOCK) ON TC.TaxId=SIPT.TaxId AND SIPT.TaxId in (2,3)
--where TaxableAmt>0 
--UNION
--select Distinct 4 as Slno,'Sales Return Account '+ TaxCode+ ' Output'+ '-'+Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc))+'%'+' for '+ Group_Caption as TaxCode
-- from ReturnProducttax  SIPT (NOLOCK)
--INNER JOIN ReturnProduct SIP (NOLOCK) ON SIPT.PrdSlNo=SIPT.PrdSlNo
--INNER JOIN Tbl_GR_Build_PH TGL (NOLOCK) ON TGL.PrdId=SIP.PRDID
--INNER JOIN TaxConfiguration TC (NOLOCK) ON TC.TaxId=SIPT.TaxId AND SIPT.TaxId in (2,3)
--where TaxableAmt>0 
--UNION
select distinct 7 AS Slno,TaxCode+' '+Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc))+'%' as TaxCode
from SalesinvoiceproductTax SIPT INNER JOIN Salesinvoice SI ON SI.SALID=SIPT.SALID
Inner Join TaxConfiguration Tg (NOLOCK) on TG.Taxid=SIPT.Taxid 
where SIPT.TaxableAmount>0
UNION
select distinct 8 AS Slno,TaxCode+' '+Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc))+'%' as TaxCode 
from Returnproducttax SIPT (NOLOCK) inner Join  ReturnHeader SI (NOLOCK) ON SIPT.Returnid=SI.Returnid
Inner Join TaxConfiguration Tg (NOLOCK) on TG.Taxid=SIPT.Taxid 
Where  SIPT.TaxableAmt>0 Group By Tg.Taxid,sipt.Taxperc,TaxCode
UNION
select distinct 5 as Slno,TaxCode+' '+Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc))+'%' as TaxCode
from PurchaseReceiptProductTax SIPT (NOLOCK) inner Join  PurchaseReceipt SI (NOLOCK) ON SIPT.Purrcptid=SI.Purrcptid
Inner Join TaxConfiguration Tg (NOLOCK) on TG.Taxid=SIPT.Taxid 
Where  SIPT.TaxableAmount>0
UNION
select distinct 6 as slno,TaxCode+' '+Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc))+'%' as TaxCode
from PurchaseReturnProductTax SIPT (NOLOCK) inner Join  PurchaseReturn SI (NOLOCK) ON SIPT.Purretid=SI.Purretid 
Inner Join TaxConfiguration Tg (NOLOCK) on TG.Taxid=SIPT.Taxid 
Where SIPT.TaxableAmount>0) A Order By Slno
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE name='Fn_ExportVoucherTaxExcel' AND XTYPE='TF')
DROP FUNCTION Fn_ExportVoucherTaxExcel
GO
CREATE FUNCTION [dbo].[Fn_ExportVoucherTaxExcel]()
RETURNS @ExportVoucherTaxExcel TABLE
(
	[Tally Sales and Tax Name] Varchar(200), 
	[Sales and TaxCode] Varchar(200)
)
AS
/***************************************************************************************************
* FUNCTION	: Fn_ExportVoucherTaxExcel
* PURPOSE	: Returns the Tax details IN EXCEL
* NOTES		:
* CREATED	: Gopikrishnan.R - 04.02.2013
* MODIFIED
* DATE       AUTHOR       DESCRIPTION
* 21/02/2012 Gopikrishnan  Nolock is added
-------------------------------------------------------------------------------------------------
**************************************************************************************************/
BEGIN
INSERT INTO @ExportVoucherTaxExcel
SELECT DISTINCT  '' AS [Tally Sales and Tax Name], TaxCode AS [Sales and TaxCode] from TempTaxTallyVoucher (NOLOCK)
Return
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE name='Fn_ExportVoucherProductExcel' AND XTYPE='TF')
DROP FUNCTION Fn_ExportVoucherProductExcel
GO
CREATE Function [dbo].[Fn_ExportVoucherProductExcel]()
RETURNS @ExportVoucherProductExcel TABLE
(
    Prdname Varchar(200),
    Prdccode    varchar(200)
	
)
AS
/***************************************************************************************************
* FUNCTION	: Fn_ExportVoucherProductExcel
* PURPOSE	: Returns the Product Master in Mapping Excel for Tally
* NOTES		:
* CREATED	: GOPIKRISHNAN
* MODIFIED
* DATE          AUTHOR        DESCRIPTION
* 21-02-2013  GOPIKRISHNAN    Nolock is added   
-------------------------------------------------------------------------------------------------
**************************************************************************************************/
BEGIN
	Insert into @ExportVoucherProductExcel
	select Prdname+'~'+PrdCCode,PrdCCode from Product (NOLOCK) order by Prdid
	RETURN
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE name='Fn_ExportVoucherXmlExcel' AND XTYPE='TF')
DROP  FUNCTION Fn_ExportVoucherXmlExcel
GO
CREATE Function [dbo].[Fn_ExportVoucherXmlExcel]()
RETURNS @ExportVoucherXmlExcel TABLE
(
    Prdname Varchar(200)
	
)
AS
/***************************************************************************************************
* FUNCTION	: Fn_ExportVoucherXmlExcel
* PURPOSE	: Returns the Voucher Type to Excel
* NOTES		:
* CREATED	: Gopikrishnan
* MODIFIED
* DATE            AUTHOR        DESCRIPTION
* 21-02-2013    Gopikrishnan   StockTransfer is added
-------------------------------------------------------------------------------------------------
**************************************************************************************************/
BEGIN
 Insert into @ExportVoucherXmlExcel
  select 'Contra'
  Union 
  select 'Payment'
  Union 
  select 'Receipt'
  Union
  select 'Journal' 
  Union
  select 'Sales' 
  Union
  select 'Sales With Tax' 
  Union
  select 'Sales Return'
  Union
  select 'Sales Return With Tax'
  Union
  select 'Sales Return WithOut Tax'
  Union
  select 'Purchase'
  Union
  select 'Purchase Return'
  Union
  select 'Credit Note'
  Union
  Select 'Debit Note'
  Union
  Select 'StockTransfer'
 RETURN
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE name='Fn_ProductPriceXmlExport' AND XTYPE='TF')
DROP  FUNCTION Fn_ProductPriceXmlExport
GO
CREATE Function Fn_ProductPriceXmlExport ()
RETURNS @ProductPriceXmlExport TABLE
(
    ProductCode    varchar(200),
	StandardCost Numeric(18,6),
	SellingPrice Numeric(18,6),
	EffectiveDate varchar(10)
)
AS
/***************************************************************************************************
* FUNCTION	: Fn_ProductPriceXmlExport
* PURPOSE	: Returns the Product Price 
* NOTES		:
* CREATED	: Karthick - 16.01.2013
* MODIFIED
* DATE      AUTHOR         DESCRIPTION
*21/02/2013 Gopikrishnan   Nolock is added
-------------------------------------------------------------------------------------------------
**************************************************************************************************/
BEGIN
  Insert into @ProductPriceXmlExport
 SELECT PrdCCode,PBD1.PrdBatDetailValue,PBD.PrdBatDetailValue,MnfDate
  from  Product P WITH (NOLOCK)
  Inner Join Tbl_GR_Build_PH TG WITH (NOLOCK) ON TG.Prdid=P.prdid
  Inner Join ProductBatch PB WITH (NOLOCK) on PB.PrdId=P.PrdId
  Inner join ProductbatchDetails PBD WITH (NOLOCK) on pbd.Prdbatid=PB.PrdBatId and PBD.DefaultPrice=1 
  Inner Join BatchCreation BC WITH (NOLOCK) On BC.SlNo=PBD.SLNo AND BC.SelRte=1
  Inner join ProductbatchDetails PBD1 WITH (NOLOCK) on pbd1.Prdbatid=PB.PrdBatId and PBD1.DefaultPrice=1 
  Inner Join BatchCreation BC1 WITH (NOLOCK) On BC1.SlNo=PBD1.SLNo AND BC1.ListPrice=1
RETURN
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE name='Fn_LocationXmlExport' AND XTYPE='TF')
DROP  FUNCTION Fn_LocationXmlExport
GO
CREATE Function Fn_LocationXmlExport()
RETURNS @LocationXmlExport TABLE
(
	LocationCode			VARCHAR(200),
	LocationName			VARCHAR(200),
	LocationAddress			        VARCHAR(200),
	DefaultLocation			VARCHAR(10)
	
)
AS
/***************************************************************************************************
* FUNCTION	: Fn_LocationXmlExport
* PURPOSE	: Returns the Location Details
* NOTES		:
* CREATED	: Gopikrishnan.R - 12.12.2012
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
-------------------------------------------------------------------------------------------------
**************************************************************************************************/
BEGIN
INSERT INTO @LocationXmlExport
Select LcnCode as LocationCode,LcnName as LocationName,LcnAddress1 as LocationAddress,
Case DefaultLocation When 1 then 'Yes' else 'No' End as DefaultLocation  from Location (NOLOCK)
Where Availability=1
Order by Lcnid
RETURN
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE name='Fn_VoucherMasterXml' AND XTYPE='TF')
DROP  FUNCTION Fn_VoucherMasterXml
GO
CREATE Function Fn_VoucherMasterXml()
RETURNS @VoucherMasterXml TABLE
(
	CoaId			BigInt,
	Name			Nvarchar(400),
	Alias			Nvarchar(100),
	GroupName		Nvarchar(400)
)
AS
/***************************************************************************************************
* FUNCTION	: Fn_VoucherMasterXml
* PURPOSE	: Returns the Coa Master  and Bank Master data
* NOTES		:
* CREATED	: Gopikrishnan.R - 21.02.2013
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
-------------------------------------------------------------------------------------------------
**************************************************************************************************/
BEGIN
INSERT INTO @VoucherMasterXml
SELECT  AC.CoaId,AC.AcName AS 'Name', Ac.AcCode AS 'Alias',AC1.AcName AS 'GroupName'FROM COAMaster 
AC INNER JOIN  COAMaster AC1 WITH (NOLOCK)ON AC1.AcCode LIKE CAST(LEFT(AC.AcCode,3) AS NVARCHAR(3))+'0000' 
Union 
select 999999 as Coaid,Bnkname as 'Name',Bnkcode as Alias,'Bank Accounts' as GroupNAME FROM BANK WITH (NOLOCK)
RETURN
END
GO
IF EXISTS(SELECT 'X' FROM SYSOBJECTS WHERE XTYPE='TF' AND NAME='Fn_VoucherExportNode1')
DROP FUNCTION Fn_VoucherExportNode1
GO
--SELECT * FROM Fn_VoucherExportNode1('SALES','SAL1702915','PM0S01751700417')
--SELECT * FROM Fn_VoucherExportNode1('SALES','SAL1710487','N1703809')
CREATE FUNCTION [Fn_VoucherExportNode1]    
(    
 @sVocType  AS VARCHAR(200),    
 @PiValue  AS VARCHAR(200),    
 @VoucherRefNo AS VARCHAR(200)    
)    
RETURNS @VoucherExportNode1 TABLE    
(    
 LedgerName VARCHAR(200),    
 Amount  NUMERIC(18,6),    
 Coaid  INT    
)    
AS    
/***************************************************************************************************    
* FUNCTION : Fn_VoucherExportNode1    
* PURPOSE : Returns the Account Details of Voucher    
* NOTES  :    
* CREATED : Gopikrishnan.R - 12.12.2012    
* MODIFIED
* DATE            AUTHOR        CR/BZ			USERT STORY ID				DESCRIPTION
* 20/02/2013	  Gopikrishnan												Location Transfer is export to Tally
* 21/03/2013      Gopikrishnan												Cancelled Bill Details flow to Tally
* 15/05/2013      Gopikrishnan												To split cash and Invoice discount Seperately
* 03/09/2013      Gopikrishnan												Rtrname is combined with Cmprtrcode in PartyLedgerName
* 08/01/2014      Gopi														NEFT (Bank Name Conversion Included) for Receipt
* 02/11/2017      Murugan.R		CR				CCRSTAML1028				IDT Transaction Added
************************************************************************************************
DATE			AUTHOR			CR/BZ	  USER STORY ID		DESCRIPTION                         
************************************************************************************************
10/05/2018		Kishore R		  CR	  ILCRSTAML0087		Round 0.01 Differnces 	
19/09/2018      Raja    C         CR      ILCRSTPAR2118     Round off issue fix	
************************************************************************************************/    
BEGIN    
DECLARE @A AS INT    
DECLARE @Amt1 NUMERIC(18,6)    
DECLARE @Amt2 NUMERIC(18,6)    
DECLARE @Diff NUMERIC(18,6) 

DECLARE @TaxPercent Table  
(
  RefId BIGINT,
  Prdslno INT,
  TaxPerc Numeric(18,2)	,
   TaxableAmount Numeric(18,6)
)  

DECLARE @IDTTaxPercent Table  
(
  RefId Varchar(50),
  Prdslno INT,
  TaxPerc Numeric(18,2)	
) 
DECLARE @Diffvalue Table 
(
	Inventorytype varchar(200),
	SALESVALUE numeric(18,6) 
)
DELETE FROM @TaxPercent
   
If UPPER(@sVocType)='RECEIPT'     
BEGIN    
 INSERT INTO @VoucherExportNode1    --Updated by BHaraneedhar for tally export issue
  SELECT isnull(CAST(R.CmpRtrCode+ '~' + replace(R.Rtrname,'&','&amp;') AS Varchar(200)),COA.AcName) AS LedgerName,(CASE VDT.DebitCredit WHEN 1 THEN (-1*ISNULL(VDT.Amount,0)) WHEN 2 THEN ISNULL((VDT.Amount),0)END) AS Amount,VDT.CoaId    
  FROM StdvocDetails VDT (NOLOCK)    
  INNER JOIN CoaMaster COA (NOLOCK) ON VDT.CoaId=COA.CoaId     
  Inner Join StdVocMaster VDT1 (NOLOCK) ON VDT1.VocRefNo=VDT.VocRefNo AND Remarks not like '%Cheque%' AND Remarks not like '%NEFT%'  AND Remarks not like '%RTGS%' And AutoGen=1    
  Left Outer join  Retailer R (NOLOCK) on R.coaid=Coa.coaid Where VDT.VocRefNo=@PiValue     
  Union ---Added by Gopi at 08-01-2014    
  SELECT Isnull(isnull(CAST(R.CmpRtrCode+ '~' +  replace(R.Rtrname,'&','&amp;') AS Varchar(200)),B.BnkName),COA.AcName) AS LedgerName,(CASE VDT.DebitCredit WHEN 1 THEN (-1*ISNULL(VDT.Amount,0)) WHEN 2 THEN ISNULL((VDT.Amount),0)END) AS Amount,VDT.CoaId    
  FROM StdvocDetails VDT (NOLOCK)     
  INNER JOIN CoaMaster COA (NOLOCK) ON VDT.CoaId=COA.CoaId     
  Inner Join StdVocMaster VDT1 (NOLOCK) ON VDT1.VocRefNo=VDT.VocRefNo AND Remarks  like '%Cheque%' AND Remarks not like '%NEFT%' AND Remarks not like '%RTGS%' And AutoGen=1    
  Left Outer join  Retailer R (NOLOCK) on R.coaid=Coa.coaid     
  Left Outer join BankBranch BB (NOLOCK) ON BB.CoaId=VDT.COAID and COA.AcName=BB.BnkBrName    
  Left Outer join Bank B (NOLOCK) ON B.BnkId=BB.BnkId where  VDT.VocRefNo=@PiValue     
  Union     
  SELECT Isnull(isnull(CAST(R.CmpRtrCode+ '~' +  replace(R.Rtrname,'&','&amp;') AS Varchar(200)),B.BnkName),COA.AcName) AS LedgerName,(CASE VDT.DebitCredit WHEN 1 THEN (-1*ISNULL(VDT.Amount,0)) WHEN 2 THEN ISNULL((VDT.Amount),0)END) AS Amount,VDT.CoaId    
  FROM StdvocDetails VDT (NOLOCK)     
  INNER JOIN CoaMaster COA (NOLOCK) ON VDT.CoaId=COA.CoaId     
  Inner Join StdVocMaster VDT1 (NOLOCK) ON VDT1.VocRefNo=VDT.VocRefNo AND Remarks  not like '%Cheque%' AND Remarks  not like '%NEFT%' AND Remarks  like '%RTGS%' And AutoGen=1    
  Left Outer join  Retailer R (NOLOCK) on R.coaid=Coa.coaid     
  Left Outer join BankBranch BB (NOLOCK) ON BB.CoaId=VDT.COAID and COA.AcName=BB.BnkBrName    
  Left Outer join Bank B (NOLOCK) ON B.BnkId=BB.BnkId where  VDT.VocRefNo=@PiValue     
  Union     
  SELECT Isnull(isnull(CAST(R.CmpRtrCode+ '~' +  replace(R.Rtrname,'&','&amp;') AS Varchar(200)),B.BnkName),COA.AcName) AS LedgerName,(CASE VDT.DebitCredit WHEN 1 THEN (-1*ISNULL(VDT.Amount,0)) WHEN 2 THEN ISNULL((VDT.Amount),0)END) AS Amount,VDT.CoaId    
  FROM StdvocDetails VDT (NOLOCK)     
  INNER JOIN CoaMaster COA (NOLOCK) ON VDT.CoaId=COA.CoaId     
  Inner Join StdVocMaster VDT1 (NOLOCK) ON VDT1.VocRefNo=VDT.VocRefNo AND Remarks  not like '%Cheque%' AND Remarks  like '%NEFT%' AND Remarks not like '%RTGS%' And AutoGen=1    
  Left Outer join  Retailer R (NOLOCK) on R.coaid=Coa.coaid     
  Left Outer join BankBranch BB (NOLOCK) ON BB.CoaId=VDT.COAID and COA.AcName=BB.BnkBrName    
  Left Outer join Bank B (NOLOCK) ON B.BnkId=BB.BnkId where  VDT.VocRefNo=@PiValue     
        Union     
  SELECT isnull(CAST(R.CmpRtrCode+ '~' +  replace(R.Rtrname,'&','&amp;') AS Varchar(200)),COA.AcName) AS LedgerName,(CASE VDT.DebitCredit WHEN 1 THEN (-1*ISNULL(VDT.Amount,0)) WHEN 2 THEN ISNULL((VDT.Amount),0)END) AS Amount,VDT.CoaId    
  FROM StdvocDetails VDT (NOLOCK) INNER JOIN CoaMaster COA (NOLOCK) ON VDT.CoaId=COA.CoaId     
  Inner Join StdVocMaster VDT1 (NOLOCK) ON VDT1.VocRefNo=VDT.VocRefNo AND AutoGen=0    
  Left Outer join  Retailer R (NOLOCK) on R.coaid=Coa.coaid Where VDT.VocRefNo=@PiValue     
END    
IF UPPER(@sVocType)='PAYMENT'     
BEGIN    
IF UPPER(@VoucherRefNo)<>'MANUAL ENTRY'    
BEGIN    
  INSERT INTO @VoucherExportNode1    
  SELECT COA.AcName AS LedgerName,(CASE VDT.DebitCredit WHEN 1 THEN (-1*ISNULL(VDT.Amount,0)) WHEN 2 THEN ISNULL((VDT.Amount),0)END) AS Amount,VDT.CoaId    
  FROM StdvocDetails VDT (NOLOCK)     
  INNER JOIN CoaMaster COA (NOLOCK) ON VDT.CoaId=COA.CoaId     
  Inner Join StdVocMaster VDT1 (NOLOCK) ON VDT1.VocRefNo=VDT.VocRefNo AND Remarks not like '%Cheque%' AND Remarks Not like '%RTGS%' AND Remarks Not like '%DD%'    
  Left Outer join  Retailer R (NOLOCK) on R.coaid=Coa.coaid Where VDT.VocRefNo=@PiValue     
  Union    
  SELECT isnull(CAST(B.BnkName AS Varchar(200)),COA.AcName) AS LedgerName,(CASE VDT.DebitCredit WHEN 1 THEN (-1*ISNULL(VDT.Amount,0)) WHEN 2 THEN ISNULL((VDT.Amount),0)END) AS Amount,VDT.CoaId    
  FROM StdvocDetails VDT (NOLOCK) INNER JOIN CoaMaster COA (NOLOCK) ON VDT.CoaId=COA.CoaId     
  Inner Join StdVocMaster VDT1 (NOLOCK) ON VDT1.VocRefNo=VDT.VocRefNo AND Remarks  Like '%RTGS%'     
  Left Outer join BankBranch BB (NOLOCK) ON BB.CoaId=VDT.COAID and COA.AcName=BB.BnkBrName    
  Left Outer join Bank B (NOLOCK) ON B.BnkId=BB.BnkId where  VDT.VocRefNo=@PiValue      
  Union    
  SELECT isnull(CAST(B.BnkName AS Varchar(200)),COA.AcName) AS LedgerName,(CASE VDT.DebitCredit WHEN 1 THEN (-1*ISNULL(VDT.Amount,0)) WHEN 2 THEN ISNULL((VDT.Amount),0)END) AS Amount,VDT.CoaId    
  FROM StdvocDetails VDT (NOLOCK) INNER JOIN CoaMaster COA (NOLOCK) ON VDT.CoaId=COA.CoaId     
  Inner Join StdVocMaster VDT1 (NOLOCK) ON VDT1.VocRefNo=VDT.VocRefNo AND Remarks  like '%DD%'    
  Left Outer join BankBranch BB (NOLOCK) ON BB.CoaId=VDT.COAID and COA.AcName=BB.BnkBrName    
  Left Outer join Bank B (NOLOCK) ON B.BnkId=BB.BnkId where  VDT.VocRefNo=@PiValue    
END    
IF UPPER(@VoucherRefNo)='MANUAL ENTRY'    
BEGIN    
  INSERT INTO @VoucherExportNode1    --Updated by BHaraneedhar for tally export issue
  SELECT isnull(CAST(R.CmpRtrCode+ '~' +  replace(R.Rtrname,'&','&amp;') AS Varchar(200)),COA.AcName) AS LedgerName,(CASE VDT.DebitCredit WHEN 1 THEN (-1*ISNULL(VDT.Amount,0)) WHEN 2 THEN ISNULL((VDT.Amount),0)END) AS Amount,VDT.CoaId    
  FROM StdvocDetails VDT (NOLOCK)     
  INNER JOIN CoaMaster COA (NOLOCK) ON VDT.CoaId=COA.CoaId     
  Inner Join StdVocMaster VDT1 (NOLOCK) ON VDT1.VocRefNo=VDT.VocRefNo    
  Left Outer join  Retailer R (NOLOCK) on R.coaid=Coa.coaid Where VDT.VocRefNo=@PiValue       
END    
END    
IF UPPER(@sVocType)='JOURNAL'    
BEGIN    
IF UPPER(@VoucherRefNo)<>'MANUAL ENTRY'    
BEGIN    
INSERT INTO @VoucherExportNode1    --Updated by BHaraneedhar for tally export issue
  SELECT isnull(CAST(R.CmpRtrCode+ '~' +  replace(R.Rtrname,'&','&amp;') AS Varchar(200)),COA.AcName) AS LedgerName,(CASE VDT.DebitCredit WHEN 1 THEN (-1*ISNULL(VDT.Amount,0)) WHEN 2 THEN ISNULL((VDT.Amount),0)END) AS Amount,VDT.CoaId    
  FROM StdvocDetails VDT (NOLOCK) INNER JOIN CoaMaster COA (NOLOCK) ON VDT.CoaId=COA.CoaId     
  Left Outer join  Retailer R (NOLOCK) on R.coaid=Coa.coaid Where VDT.VocRefNo=@PiValue     
  --if exists (select 'A' from @VoucherExportNode1 A INNER JOIN Retailer R (NOLOCK) on R.coaid=A.coaid having COUNT(A.coaid)>1)    
  --BEGIN    
  --Update A set Coaid=0  from @VoucherExportNode1  A inner join CoaMaster COA (NOLOCK) ON A.CoaId=COA.CoaId     
  --INNER JOIN StdVocDetails VDT (NOLOCK) ON VDT.CoaId=COA.CoaId     
  --INNER JOIN StdVocMaster VH (NOLOCK) ON VH.VocRefNo=VDT.VocRefNo AND Remarks LIKE '%POSTED FROM DEBIT NOTE%' AND VDT.VocRefNo=@PiValue and A.Amount>0    
  --END    
END    
IF UPPER(@VoucherRefNo)='MANUAL ENTRY'    
BEGIN    
  INSERT INTO @VoucherExportNode1   --Updated by BHaraneedhar for tally export issue 
  SELECT isnull(CAST(R.CmpRtrCode+ '~' +  replace(R.Rtrname,'&','&amp;') AS Varchar(200)),COA.AcName) AS LedgerName,    
  (CASE VDT.DebitCredit WHEN 1 THEN (-1*ISNULL(VDT.Amount,0)) WHEN 2 THEN ISNULL((VDT.Amount),0)END) AS Amount,VDT.CoaId    
  FROM StdvocDetails VDT (NOLOCK) INNER JOIN CoaMaster COA (NOLOCK) ON VDT.CoaId=COA.CoaId     
  Left Outer join  Retailer R (NOLOCK) on R.coaid=Coa.coaid Where VDT.VocRefNo=@PiValue     
END    
END    
IF UPPER(@PiValue)<>'NULL'    
BEGIN    
IF UPPER(@sVocType)='SALES'     
BEGIN    
    
--SELECT * FROM dbo.Fn_VoucherExportNode1('Sales','SAL1605400','AM1600001')Order By Amount     
    
		INSERT INTO @VoucherExportNode1    --Updated by BHaraneedhar for tally export issue
		SELECT DISTINCT ISNULL(CAST(R.CmpRtrCode+ '~' +  replace(R.Rtrname,'&','&amp;') AS Varchar(200)),COA.AcName) AS LedgerName,    
		(CASE VDT.DebitCredit WHEN 1 THEN (-1*ISNULL(VDT.Amount,0)) WHEN 2 THEN ISNULL((VDT.Amount),0)END) AS Amount,VDT.CoaId    
		FROM StdvocDetails VDT (NOLOCK)     
		INNER JOIN CoaMaster COA (NOLOCK) ON VDT.CoaId=COA.CoaId AND COA.CoaId NOT IN (SELECT Outputtaxid from TaxConfiguration (NOLOCK))     
		LEFT OUTER JOIN  Retailer R (NOLOCK) ON R.coaid=Coa.coaid     
		WHERE VDT.VocRefNo=@PiValue   and 
		AcName NOT IN(
			'Scheme Discount Received','Discount Allowed','Scheme Discount Allowed','Distributor Discount Allowed',
		'Cash Discount Allowed','Special Discount Allowed','Rate Diff. Discount Allowed'
		,'RD Discount','Vending Discount','Key A/c Discount')
		---SUM the total Discounts
		INSERT INTO @VoucherExportNode1    
		SELECT 'Sales Discounts' AS LedgerName,    
		(CASE VDT.DebitCredit WHEN 1 THEN (-1*ISNULL(SUM(VDT.Amount),0)) WHEN 2 THEN ISNULL((SUM(VDT.Amount)),0)END) AS Amount,0 as CoaId    
		FROM StdvocDetails VDT (NOLOCK)     
		INNER JOIN CoaMaster COA (NOLOCK) ON VDT.CoaId=COA.CoaId AND COA.CoaId NOT IN (SELECT Outputtaxid from TaxConfiguration (NOLOCK))     
		LEFT OUTER JOIN  Retailer R (NOLOCK) ON R.coaid=Coa.coaid     
		WHERE VDT.VocRefNo=@PiValue   and 
		AcName  IN(
			'Scheme Discount Received','Discount Allowed','Scheme Discount Allowed','Distributor Discount Allowed',
		'Cash Discount Allowed','Special Discount Allowed','Rate Diff. Discount Allowed'
		,'RD Discount','Vending Discount','Key A/c Discount') 
		GROUP BY  VDT.DebitCredit
		  

		DELETE FROM @VoucherExportNode1 where LedgerName='Sales Account'  


		INSERT INTO @TaxPercent (RefId,Prdslno,TaxPerc, TaxableAmount) 
		SELECT A.SalId,A.PrdSlNo,SUM(A.TaxPerc) as TaxPerc ,SUM(DISTINCT TaxableAmount)  as TaxableAmount
		FROM SalesInvoiceProductTax A(NOLOCK)     
		INNER JOIN SalesInvoice B(NOLOCK) ON A.SalId = B.SalId     
		WHERE B.SalInvNo = @VoucherRefNo AND A.TaxableAmount > 0      
		GROUP BY A.SalId,A.PrdSlNo  

		INSERT INTO @VoucherExportNode1 
		SELECT LedgerName,SUM(Amount) as Amount,0 as CoaId
		FROM (
				SELECT 
				CASE WHEN VatGst='VAT' THEN
				'Sales Account VAT '+Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc))+'%' 
				ELSE 
				'Sales Account GST '+Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc))+'%' END AS LedgerName ,    
				CONVERT(NUMERIC(18,6),SUM(PrdGrossAmount)) AS Amount,SIP.Slno,0 as Coaid
				--CONVERT(NUMERIC(18,2),SUM(TaxableAmount)) AS Amount,SIP.Slno,0 as Coaid  
				FROM SalesInvoice SI (NOLOCK)     
				INNER JOIN SalesInvoiceProduct SIP (NOLOCK) ON SI.SalId=SIP.SalId    
				INNER JOIN @TaxPercent C ON C.RefId=SI.SalId and C.RefId=SIP.SalId and    SIP.Slno=C.Prdslno 
				INNER JOIN StdVocMaster VDT (NOLOCK) on SI.SalInvNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,20,CHARINDEX(' Dated',VDT.Remarks)-20)))
				WHERE VDT.VocRefNo= @PiValue    
				AND SI.SalInvNo = @VoucherRefNo
				GROUP BY Taxperc,  SIP.Slno ,VatGst
		) X GROUP BY LedgerName   
  
  
     
 ---Added by Gopikrishnan at 15-05-2013 to split the cash and Invoice Discount to tally    
 DELETE FROM @VoucherExportNode1 WHERE Ledgername='Cash Discount Allowed'    
 IF EXISTS (SELECT Salid FROM SalesInvoice(NOLOCK) WHERE SalInvNo=@VoucherRefNo AND DlvSts>3 GROUP BY Salid HAVING SUM(SalCdAmount+SalInvLvlDisc)>0)    
 BEGIN    
  INSERT INTO @VoucherExportNode1    
  --SELECT 'Cash Discount Allowed' AS LedgerName,-SUM(SalCdAmount+SalInvLvlDisc) AS Amount,0 AS Coaid FROM SalesInvoice(NOLOCK) WHERE SalInvNo=@VoucherRefNo  and DlvSts>3  
   SELECT 'Cash Discount Allowed' AS LedgerName,-SUM(SalInvLvlDisc) AS Amount,0 AS Coaid FROM SalesInvoice(NOLOCK) WHERE SalInvNo=@VoucherRefNo  and DlvSts>3  
 END    
      
 SELECT @Amt1 = SUM(Amount) FROM @VoucherExportNode1    
 SELECT @Amt2 = SUM(Amount) FROM [dbo].[Fn_VoucherExportNode2]('SALES',@PiValue,@VoucherRefNo)    
     
 SELECT @Diff = @Amt1 + @Amt2    
     
 IF @Diff <> 0      
 BEGIN      
  IF(@Diff <= 5  AND  @Diff >=  -5 )    
  BEGIN    
   IF EXISTS (SELECT * FROM @VoucherExportNode1 WHERE LedgerName IN('Round Off Expenses','Round Off Incomes'))    
   BEGIN     
       UPDATE TOP (1) @VoucherExportNode1  SET Amount = Amount - @Diff WHERE LedgerName IN('Round Off Expenses','Round Off Incomes')    
   END    
   ELSE    
   BEGIN    
    IF @Diff > 0    
    BEGIN    
     INSERT INTO @VoucherExportNode1     
     SELECT AcName,-1*@Diff,CoaId FROM COAMaster(NOLOCK) WHERE AcCode ='4210001'    
    END    
    ELSE    
    BEGIN    
     INSERT INTO @VoucherExportNode1     
     SELECT AcName,-1*@Diff,CoaId FROM COAMaster(NOLOCK) WHERE AcCode ='3220001'      
    END    
   END    
   --DELETE FROM @VoucherExportNode1 WHERE LedgerName IN('Round Off Expenses','Round Off Incomes') AND Amount = 0    
  END    
 END    
  --If exists (SELECT Salid FROM SalesInvoice WHERE SalInvNo=@VoucherRefNo  and DlvSts>3 Group by Salid Having SUM(SalInvLvlDisc)>0)    
  --begin    
  --INSERT INTO @VoucherExportNode1    
  --Select 'Invoice Discount Allowed' AS LedgerName,-SUM(SalInvLvlDisc) as Amount,0 as Coaid from SalesInvoice WHERE SalInvNo=@VoucherRefNo and DlvSts>3    
  --End    
  ---Till Here    
END    
END    
----Added by Gopikrishnan at 21/03/2013 for Cancelled Bill Changes    
IF UPPER(@PiValue)='NULL'    
BEGIN    
If UPPER(@sVocType)='SALES'     
BEGIN    
  INSERT INTO @VoucherExportNode1    --Updated by BHaraneedhar for tally export issue
  SELECT R.CmpRtrCode+ '~' +  replace(R.Rtrname,'&','&amp;') as LedgerName,-(SalNetAmt - ReplacementDiffAmount +CRAdjAmount -DBAdjAmount + OnAccountAmount) as Amount,R.COAID as Coaid  
  from Retailer R (NOLOCK) 
  inner Join SalesInvoice SI (NOLOCK) ON R.RtrId=SI.RtrId and DlvSts=3    
  INNER JOIN CoaMaster COA (NOLOCK) ON COA.CoaId=R.COAID    
  and SalInvNo=@VoucherRefNo    
  
  DELETE FROM @VoucherExportNode1 where LedgerName='Sales Account'  
  
	INSERT INTO @TaxPercent (RefId,Prdslno,TaxPerc) 
	SELECT A.SalId,A.PrdSlNo,SUM(A.TaxPerc) as TaxPerc 
	FROM SalesInvoiceProductTax A(NOLOCK)     
	INNER JOIN SalesInvoice B(NOLOCK) ON A.SalId = B.SalId     
	WHERE B.SalInvNo = @VoucherRefNo AND A.TaxableAmount > 0     and B.dlvsts=3    
	GROUP BY A.SalId,A.PrdSlNo  

	INSERT INTO @VoucherExportNode1 
	SELECT LedgerName,SUM(Amount) as Amount,0 as CoaId
	FROM (
			SELECT 
			CASE WHEN VatGst='VAT' THEN
			'Sales Account VAT '+Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc))+'%'
			ELSE
			'Sales Account GST '+Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc))+'%' END AS LedgerName,    
			CONVERT(NUMERIC(18,6),SUM(PrdGrossAmount)) AS Amount,SIP.Slno,0 as Coaid 
			FROM SalesInvoice SI (NOLOCK)     
			INNER JOIN SalesInvoiceProduct SIP (NOLOCK) ON SI.SalId=SIP.SalId    
			INNER JOIN @TaxPercent C ON C.RefId=SI.SalId and C.RefId=SIP.SalId and    SIP.Slno=C.Prdslno 
			INNER JOIN StdVocMaster VDT (NOLOCK) on SI.SalInvNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,20,CHARINDEX(' Dated',VDT.Remarks)-20)))
			WHERE VDT.VocRefNo= @PiValue    and si.dlvsts=3  
			AND SI.SalInvNo = @VoucherRefNo
			GROUP BY Taxperc,  SIP.Slno ,VatGst
	) X GROUP BY LedgerName
  
 
      
  --- Commented and Added by Gopikrishnan at 15-05-2013 to split the cash and Invoice Discount to tally for Cancelled Bills    
  --If exists (SELECT Salid FROM SalesInvoice WHERE SalInvNo=@VoucherRefNo and DlvSts=3 Group by Salid Having SUM(SalCdAmount+SalInvLvlDiscPer)>0)    
  --begin    
  --INSERT INTO @VoucherExportNode1    
  --Select 'Cash Discount Allowed' AS LedgerName,-SUM(SalCdAmount+SalInvLvlDiscPer) as Amount,0 as Coaid from SalesInvoice WHERE SalInvNo=@VoucherRefNo and DlvSts=3    
  --End    
  If exists (SELECT Salid FROM SalesInvoice WHERE SalInvNo=@VoucherRefNo  and DlvSts=3 Group by Salid Having SUM(SalCdAmount)>0)    
  begin    
  INSERT INTO @VoucherExportNode1    
  Select 'Cash Discount Allowed' AS LedgerName,-SUM(SalCdAmount) as Amount,0 as Coaid from SalesInvoice WHERE SalInvNo=@VoucherRefNo  and DlvSts=3    
  End    
  If exists (SELECT Salid FROM SalesInvoice WHERE SalInvNo=@VoucherRefNo  and DlvSts=3 Group by Salid Having SUM(SalInvLvlDisc)>0)    
  begin    
  INSERT INTO @VoucherExportNode1    
  Select 'Invoice Discount Allowed' AS LedgerName,-SUM(SalInvLvlDisc) as Amount,0 as Coaid from SalesInvoice WHERE SalInvNo=@VoucherRefNo and DlvSts=3    
  End    
  --- Till Here    
  If exists (SELECT SalRoundOffamt FROM SalesInvoice WHERE SalInvNo=@VoucherRefNo AND SalRoundOffamt>0 and DlvSts=3)    
  begin    
  INSERT INTO @VoucherExportNode1    
  Select 'Round Off Incomes' AS LedgerName,SalRoundOffamt as Amount,0 as Coaid from SalesInvoice WHERE SalInvNo=@VoucherRefNo and DlvSts=3    
  End    
  If exists (SELECT SalRoundOffamt FROM SalesInvoice WHERE SalInvNo=@VoucherRefNo AND SalRoundOffamt<0 and DlvSts=3)    
  begin    
  INSERT INTO @VoucherExportNode1    
  Select 'Round Off Expenses' AS LedgerName,SalRoundOffamt as Amount,0 as Coaid from SalesInvoice WHERE SalInvNo=@VoucherRefNo and DlvSts=3    
  End    
  If exists (SELECT SalDBDiscAmount FROM SalesInvoice WHERE SalInvNo=@VoucherRefNo AND SalDBDiscAmount>0 and DlvSts=3)    
  begin    
  INSERT INTO @VoucherExportNode1    
  Select 'Distributor Discount Allowed' AS LedgerName,-SalDBDiscAmount as Amount,0 as Coaid from SalesInvoice WHERE SalInvNo=@VoucherRefNo and DlvSts=3    
  End    
END    
END    
If  UPPER(@sVocType)='SALES RETURN'    
BEGIN    
  INSERT INTO @VoucherExportNode1    --Updated by BHaraneedhar for tally export issue
  SELECT * FROM     
  (    
   SELECT   isnull(CAST(R.CmpRtrCode+ '~' +  replace(R.Rtrname,'&','&amp;') AS Varchar(200)),COA.AcName) AS LedgerName,    
   (CASE VDT.DebitCredit WHEN 1 THEN (-1*ISNULL(VDT.Amount,0)) WHEN 2 THEN ISNULL((VDT.Amount),0)END) AS Amount,VDT.CoaId    
   FROM StdvocDetails VDT (NOLOCK)     
   INNER JOIN CoaMaster COA (NOLOCK) ON VDT.CoaId=COA.CoaId AND COA.CoaId NOT IN (SELECT Outputtaxid FROM TaxConfiguration (NOLOCK))    
   LEFT OUTER JOIN  Retailer R (NOLOCK) on R.coaid=Coa.coaid Where VDT.VocRefNo=@PiValue 
   AND AcName NOT IN(
			'Scheme Discount Received','Discount Allowed','Scheme Discount Allowed','Distributor Discount Allowed',
		'Cash Discount Allowed','Special Discount Allowed','Rate Diff. Discount Allowed'
		,'RD Discount','Vending Discount','Key A/c Discount')
      
   UNION    
   SELECT CmpRtrCode AS LedgerName,0 AS Amount,R.COAID AS Coaid  FROM Retailer R (NOLOCK)     
   INNER JOIN SalesInvoice SI (NOLOCK) ON R.RtrId=SI.RtrId and DlvSts=3    
   INNER JOIN CoaMaster COA (NOLOCK) ON COA.CoaId=R.COAID AND SalInvNo=@VoucherRefNo    
  ) A   
  

	---SUM the total Discounts
	INSERT INTO @VoucherExportNode1    
	SELECT 'Sales Discounts' AS LedgerName,    
	(CASE VDT.DebitCredit WHEN 1 THEN (-1*ISNULL(SUM(VDT.Amount),0)) WHEN 2 THEN ISNULL((SUM(VDT.Amount)),0)END) AS Amount,0 as CoaId    
	FROM StdvocDetails VDT (NOLOCK)     
	INNER JOIN CoaMaster COA (NOLOCK) ON VDT.CoaId=COA.CoaId AND COA.CoaId NOT IN (SELECT Outputtaxid from TaxConfiguration (NOLOCK))     
	LEFT OUTER JOIN  Retailer R (NOLOCK) ON R.coaid=Coa.coaid     
	WHERE VDT.VocRefNo=@PiValue   and 
	AcName  IN(
		'Scheme Discount Received','Discount Allowed','Scheme Discount Allowed','Distributor Discount Allowed',
	'Cash Discount Allowed','Special Discount Allowed','Rate Diff. Discount Allowed'
	,'RD Discount','Vending Discount','Key A/c Discount') 
	GROUP BY  VDT.DebitCredit
        
      
	DELETE FROM @VoucherExportNode1 where LedgerName='Sales Return Account' 


	INSERT INTO @TaxPercent (RefId,Prdslno,TaxPerc) 
	SELECT A.ReturnId,A.PrdSlNo,SUM(A.TaxPerc) as TaxPerc 
	FROM ReturnProductTax A(NOLOCK)     
	INNER JOIN ReturnHeader B(NOLOCK) ON A.ReturnId = B.ReturnId     
	WHERE B.ReturnCode = @VoucherRefNo AND A.TaxableAmt > 0 
	GROUP BY A.ReturnId,A.PrdSlNo  

	INSERT INTO @VoucherExportNode1 
	SELECT LedgerName,-1*SUM(Amount) as Amount,0 as CoaId
	FROM (
			SELECT 
			CASE WHEN VatGst='VAT' THEN	
			'Sales Return Account VAT '+Convert(nvarchar(10),Convert(Numeric(18,2),ISNULL(Taxperc,0)))+'%' 
			ELSE 'Sales Return Account GST '+Convert(nvarchar(10),Convert(Numeric(18,2),ISNULL(Taxperc,0)))+'%' END AS LedgerName,    
			CONVERT(NUMERIC(18,6),SUM(PrdActualGross)) as Amount,SIP.Slno,0 as Coaid 
			FROM ReturnHeader SI (NOLOCK)     
			INNER JOIN ReturnProduct SIP (NOLOCK) ON SI.ReturnId=SIP.ReturnId    
			LEFT OUTER JOIN @TaxPercent C ON C.RefId=SI.ReturnId and C.RefId=SIP.ReturnId and    SIP.Slno=C.Prdslno 
			INNER JOIN StdVocMaster VDT (NOLOCK) on SI.ReturnCode=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,24,CHARINDEX(' Dated',VDT.Remarks)-24)))  
			WHERE VDT.VocRefNo= @PiValue 
			AND SI.ReturnCode = @VoucherRefNo
			GROUP BY Taxperc,  SIP.Slno,VatGst 
	) X GROUP BY LedgerName
    
      
  --If Exists (select * from @VoucherExportNode1 where LedgerName='Rate Diff. Discount Allowed')    
  --BEGIN    
  ----UPDATE @VoucherExportNode1 set Amount=(select SUM(Amount) from @VoucherExportNode1 where LedgerName in ('Rate Diff. Discount Allowed','Sales Return Account')) where LedgerName='Sales Return Account'    
  --DELETE FROM @VoucherExportNode1 where LedgerName='Rate Diff. Discount Allowed'    
  --END    
  --IF Exists (select * from @VoucherExportNode1 where LedgerName='Rate Diff. Discount Received')    
  --BEGIN    
  -----UPDATE @VoucherExportNode1 set Amount=(select SUM(Amount) from @VoucherExportNode1 where LedgerName in ('Rate Diff. Discount Received','Sales Return Account')) where LedgerName='Sales Return Account'    
  --DELETE FROM @VoucherExportNode1 where LedgerName='Rate Diff. Discount Received'    
  --END    
      
  ---Added by Gopikrishnan at 15-05-2013 to Rename the posting ledger name into Original ledger name for invoice discount    
  DELETE FROM @VoucherExportNode1 where Ledgername='Cash Discount Allowed'    
  IF EXISTS (SELECT Returnid FROM ReturnHeader WHERE ReturnCode=@VoucherRefNo GROUP BY Returnid HAVING SUM(RtnCashDisAmt)>0)    
  BEGIN    
  INSERT INTO @VoucherExportNode1    
  SELECT 'Cash Discount Allowed' AS LedgerName,SUM(RtnInvLvlDisc) AS Amount,0 AS Coaid     
  FROM ReturnHeader WHERE ReturnCode=@VoucherRefNo     
  END    
  ---Till Here    
      
  
     
 SELECT @Amt1 = SUM(Amount) FROM @VoucherExportNode1    
 SELECT @Amt2 = SUM(Amount) FROM [dbo].[Fn_VoucherExportNode2]('SALES RETURN',@PiValue,@VoucherRefNo)    
     
 SELECT @Diff = @Amt1 + @Amt2    
     
 IF @Diff <> 0    
 BEGIN    
  IF(@Diff <= 5  AND  @Diff >=  -5 )    
  BEGIN    
   IF EXISTS (SELECT * FROM @VoucherExportNode1 WHERE LedgerName IN('Round Off Expenses','Round Off Incomes'))    
   BEGIN     
       UPDATE TOP (1) @VoucherExportNode1  SET Amount = Amount - @Diff WHERE LedgerName IN('Round Off Expenses','Round Off Incomes')    
   END    
   ELSE    
   BEGIN    
    IF @Diff > 0    
    BEGIN    
     INSERT INTO @VoucherExportNode1     
     SELECT AcName,-1*@Diff,CoaId FROM COAMaster(NOLOCK) WHERE AcCode ='3220001'    
    END    
    ELSE    
    BEGIN    
     INSERT INTO @VoucherExportNode1     
     SELECT AcName,-1*@Diff,CoaId FROM COAMaster(NOLOCK) WHERE AcCode ='4210001'      
    END    
   END    
       
   DELETE FROM @VoucherExportNode1 WHERE LedgerName IN('Round Off Expenses','Round Off Incomes') AND Amount = 0    
  END    
      
 END    
END    
If UPPER(@sVocType)='PURCHASE'      
BEGIN    
 INSERT INTO @VoucherExportNode1    
 SELECT   COA.AcName AS LedgerName,(CASE VDT.DebitCredit WHEN 1 THEN (-1*ISNULL(VDT.Amount,0)) WHEN 2 THEN ISNULL((VDT.Amount),0)END) AS Amount,VDT.CoaId    
 FROM StdvocDetails VDT (NOLOCK)     
 INNER JOIN CoaMaster COA (NOLOCK) ON VDT.CoaId=COA.CoaId AND COA.CoaId Not in (select Inputtaxid from TaxConfiguration (NOLOCK))    
 LEFT OUTER JOIN  Retailer R (NOLOCK) on R.coaid=Coa.coaid Where VDT.VocRefNo=@PiValue    
 
DELETE FROM @VoucherExportNode1 where LedgerName='Purchase Account'    



DELETE FROM @TaxPercent
 
 
 
INSERT INTO @TaxPercent (RefId,Prdslno,TaxPerc	) 
SELECT A.PurRcptId,A.PrdSlNo,SUM(A.TaxPerc) as TaxPerc 
FROM PurchaseReceiptProductTax A(NOLOCK)     
INNER JOIN PurchaseReceipt B(NOLOCK) ON A.PurRcptId = B.PurRcptId     
WHERE B.CmpInvNo = @VoucherRefNo AND A.TaxableAmount > 0      
GROUP BY A.PurRcptId,A.PrdSlNo  

INSERT INTO @VoucherExportNode1 
SELECT LedgerName,-1*SUM(Amount) as Amount,0 as CoaId
FROM (
		SELECT 
		CASE WHEN VatGst='VAT' THEN
		'Purchase Account VAT '+Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc))+'%' 
		ELSE 'Purchase Account GST '+Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc))+'%'  END AS LedgerName,
		 CONVERT(NUMERIC(18,6),SUM(PrdGrossAmount)) as Amount,SIP.PrdSlNo,0 as Coaid 
		FROM PurchaseReceipt SI (NOLOCK)     
		INNER JOIN PurchaseReceiptProduct SIP (NOLOCK) ON SI.PurRcptId=SIP.PurRcptId    
		INNER JOIN @TaxPercent C ON C.RefId=SI.PurRcptId and C.RefId=SIP.PurRcptId and    SIP.PrdSlNo=C.Prdslno 
		INNER JOIN StdVocMaster VDT (NOLOCK) on SI.PurRcptRefNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,16,CHARINDEX(' Dated',VDT.Remarks)-16)))
		WHERE VDT.VocRefNo= @PiValue    
		AND SI.CmpInvNo = @VoucherRefNo
		GROUP BY Taxperc,  SIP.PrdSlNo ,VatGst
) X GROUP BY LedgerName  
     
 SELECT @Amt1 = SUM(Amount) FROM @VoucherExportNode1    
 SELECT @Amt2 = SUM(Amount) FROM [dbo].[Fn_VoucherExportNode2]('PURCHASE',@PiValue,@VoucherRefNo)    
     
 SELECT @Diff = @Amt1 + @Amt2    
     
 IF @Diff <> 0    
 BEGIN    
  IF(@Diff <= 5  AND  @Diff >=  -5 )    
  BEGIN    
   IF EXISTS (SELECT * FROM @VoucherExportNode1 WHERE LedgerName IN('Round Off Expenses','Round Off Incomes'))    
   BEGIN     
       UPDATE TOP (1) @VoucherExportNode1  SET Amount = Amount - @Diff WHERE LedgerName IN('Round Off Expenses','Round Off Incomes')    
   END    
   ELSE    
   BEGIN    
    IF @Diff > 0    
    BEGIN    
     INSERT INTO @VoucherExportNode1     
     SELECT AcName,-1*@Diff,CoaId FROM COAMaster(NOLOCK) WHERE AcCode ='3220001'    
    END    
    ELSE    
    BEGIN    
     INSERT INTO @VoucherExportNode1     
     SELECT AcName,-1*@Diff,CoaId FROM COAMaster(NOLOCK) WHERE AcCode ='4210001'      
    END    
   END    
   DELETE FROM @VoucherExportNode1 WHERE LedgerName IN('Round Off Expenses','Round Off Incomes') AND Amount = 0    
  END    
 END    
      
END    
If UPPER(@sVocType)='PURCHASE RETURN'    
BEGIN    
 INSERT INTO @VoucherExportNode1    
 SELECT   COA.AcName AS LedgerName,(CASE VDT.DebitCredit WHEN 1 THEN (-1*ISNULL(VDT.Amount,0)) WHEN 2 THEN ISNULL((VDT.Amount),0)END) AS Amount,    
 VDT.CoaId    
 FROM StdvocDetails VDT (NOLOCK)    
 INNER JOIN CoaMaster COA (NOLOCK) ON VDT.CoaId=COA.CoaId AND COA.CoaId Not in (select Inputtaxid from TaxConfiguration (NOLOCK))    
 LEFT OUTER JOIN  Retailer R (NOLOCK) on R.coaid=Coa.coaid Where VDT.VocRefNo=@PiValue    
     
 DELETE FROM @VoucherExportNode1 where LedgerName='Purchase Return Account'    
   
  DELETE FROM @TaxPercent
 
 
 
INSERT INTO @TaxPercent (RefId,Prdslno,TaxPerc	) 
SELECT A.PurRetId,A.PrdSlNo,SUM(A.TaxPerc) as TaxPerc 
FROM PurchaseReturnProductTax A(NOLOCK)     
INNER JOIN PurchaseReturn B(NOLOCK) ON A.PurRetId = B.PurRetId     
WHERE B.PurRetRefNo = @VoucherRefNo AND A.TaxableAmount > 0      
GROUP BY A.PurRetId,A.PrdSlNo  

INSERT INTO @VoucherExportNode1 
SELECT LedgerName,SUM(Amount) as Amount,0 as CoaId
FROM (
		SELECT 
		CASE WHEN VatGst='VAT' THEN
		'Purchase Return Account VAT '+Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc))+'%' 
		ELSE 'Purchase Return Account GST '+Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc))+'%' END AS LedgerName,
		SUM(PrdGrossAmount) as Amount,SIP.PrdSlNo,0 as Coaid 
		FROM PurchaseReturn SI (NOLOCK)     
		INNER JOIN PurchaseReturnProduct SIP (NOLOCK) ON SI.PurRetId=SIP.PurRetId    
		INNER JOIN @TaxPercent C ON C.RefId=SI.PurRetId and C.RefId=SIP.PurRetId and    SIP.PrdSlNo=C.Prdslno 
		INNER JOIN StdVocMaster VDT (NOLOCK) on SI.PurRetRefNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,28,CHARINDEX(' Dated',VDT.Remarks)-28)))    
		WHERE VDT.VocRefNo= @PiValue    
		AND SI.PurRetRefNo = @VoucherRefNo
		GROUP BY Taxperc,  SIP.PrdSlNo,VatGst
) X GROUP BY LedgerName
 
     
 SELECT @Amt1 = SUM(Amount) FROM @VoucherExportNode1    
 SELECT @Amt2 = SUM(Amount) FROM [dbo].[Fn_VoucherExportNode2]('PURCHASE RETURN',@PiValue,@VoucherRefNo)    
     
 SELECT @Diff = @Amt1 + @Amt2    
     
 IF @Diff <> 0    
 BEGIN    
  IF(@Diff <= 5  AND  @Diff >=  -5 )    
  BEGIN    
   IF EXISTS (SELECT * FROM @VoucherExportNode1 WHERE LedgerName IN('Round Off Expenses','Round Off Incomes'))    
   BEGIN     
       UPDATE TOP (1) @VoucherExportNode1  SET Amount = Amount - @Diff WHERE LedgerName IN('Round Off Expenses','Round Off Incomes')    
   END    
   ELSE    
   BEGIN    
    IF @Diff > 0    
    BEGIN    
     INSERT INTO @VoucherExportNode1     
     SELECT AcName,-1*@Diff,CoaId FROM COAMaster(NOLOCK) WHERE AcCode ='4210001'     
    END    
    ELSE    
    BEGIN    
     INSERT INTO @VoucherExportNode1         
     SELECT AcName,-1*@Diff,CoaId FROM COAMaster(NOLOCK) WHERE AcCode ='3220001'     
    END    
   END    
   DELETE FROM @VoucherExportNode1 WHERE LedgerName IN('Round Off Expenses','Round Off Incomes') AND Amount = 0    
  END    
 END 
END    
If UPPER(@sVocType)='SALES- REPLACEMENT IN'    
BEGIN    
Insert Into @VoucherExportNode1    
Select 'Null',0,0    
End

--CCRSTAML1028 Start

DECLARE @IDTVoucher TABLE
(
	Coaid INT,
	ACName Varchar(300)
)	

If UPPER(@sVocType)='IDT'  
BEGIN
	
	INSERT INTO @IDTVoucher(Coaid,ACName)
	SELECT Coaid, AcName FROM COAMaster WHERE AcName='Sales Account'
	
	INSERT INTO @VoucherExportNode1
	SELECT CASE COA.AcName WHEN 'Purchase Return Account' THEN (SELECT AcName FROM @IDTVoucher) ELSE COA.AcName END as LedgerName
	,(CASE VDT.DebitCredit WHEN 1 THEN (-1*ISNULL(VDT.Amount,0)) WHEN 2 THEN ISNULL((VDT.Amount),0)END) AS Amount,
	
	CASE COA.AcName WHEN 'Purchase Return Account' THEN (SELECT CoaId FROM @IDTVoucher) ELSE COA.CoaId END 
	FROM StdvocDetails VDT (NOLOCK) 
	INNER JOIN CoaMaster COA (NOLOCK) ON VDT.CoaId=COA.CoaId 
	AND COA.CoaId Not in (select InputTaxId from TaxConfiguration (NOLOCK))
	LEFT OUTER JOIN  IDTMASTER R (NOLOCK) on R.coaid=Coa.coaid Where VDT.VocRefNo=@PiValue
	
	DELETE FROM @VoucherExportNode1 where LedgerName='Sales Account' 
	
	INSERT INTO @IDTTaxPercent (RefId,Prdslno,TaxPerc) 
	SELECT A.IDTMngRefNo,A.PrdSlNo,SUM(A.TaxPerc) as TaxPerc 
	FROM IDTManagementProductTax A(NOLOCK)     
	INNER JOIN IDTManagement B(NOLOCK) ON A.IDTMngRefNo = B.IDTMngRefNo     
	WHERE B.IDTMngRefNo = @VoucherRefNo AND A.TaxableAmount > 0  and B.StkMgmtTypeId=2
	GROUP BY A.IDTMngRefNo,A.PrdSlNo  

	INSERT INTO @VoucherExportNode1 
	SELECT LedgerName,SUM(Amount) as Amount,0 as CoaId
	FROM (
			SELECT
			CASE WHEN IDTMngDate<='2017-06-30' THEN 
			'Sales Account VAT '+Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc))+'%' 
			ELSE
			'Sales Account GST '+Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc))+'%' END AS LedgerName,
			CONVERT(NUMERIC(18,6),SUM(PrdGrossAmount)) as Amount,SIP.Prdslno,0 as Coaid 
			FROM IDTManagement SI (NOLOCK)     
			INNER JOIN IDTManagementProduct SIP (NOLOCK) ON SI.IDTMngRefNo=SIP.IDTMngRefNo    
			INNER JOIN @IDTTaxPercent C ON C.RefId=SI.IDTMngRefNo and C.RefId=SIP.IDTMngRefNo and    SIP.Prdslno=C.Prdslno 
			INNER JOIN StdVocMaster VDT (NOLOCK) on SI.IDTMngRefNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,26,CHARINDEX(' Dated',VDT.Remarks)-26)))  
			WHERE VDT.VocRefNo= @PiValue  and SI.StkMgmtTypeId=2
			AND SI.IDTMngRefNo = @VoucherRefNo
			GROUP BY Taxperc,  SIP.Prdslno ,IDTMngDate
	) X GROUP BY LedgerName
		
	UPDATE @VoucherExportNode1 SET LedgerName=(SELECT AcName FROM CoaMaster where  AcName='Sales Account')
	WHERE LedgerName='IDT'
	
	UPDATE @VoucherExportNode1 SET Coaid=(SELECT Coaid FROM CoaMaster where  AcName='Sales Account')
	WHERE LedgerName='IDT'
	
	SELECT @Amt1 = SUM(Amount) FROM @VoucherExportNode1 where LedgerName='IDT'
	SELECT @Amt2 = SUM(Amount) FROM [dbo].[Fn_VoucherExportNode2]('IDT',@PiValue,@VoucherRefNo)
	
	SELECT @Diff = @Amt1 + @Amt2
	
	IF @Diff <> 0
	BEGIN
		IF(@Diff <= 5  AND  @Diff >=  -5 )
		BEGIN
			IF EXISTS (SELECT * FROM @VoucherExportNode1 WHERE LedgerName IN('Round Off Expenses','Round Off Incomes'))
			BEGIN 
				   UPDATE TOP (1) @VoucherExportNode1  SET Amount = Amount - @Diff WHERE LedgerName IN('Round Off Expenses','Round Off Incomes')
			END
			ELSE
			BEGIN
				IF @Diff > 0
				BEGIN
					INSERT INTO @VoucherExportNode1 
					SELECT AcName,-1*@Diff,CoaId FROM COAMaster(NOLOCK) WHERE AcCode ='3220001'
				END
				ELSE
				BEGIN
					INSERT INTO @VoucherExportNode1 
					SELECT AcName,-1*@Diff,CoaId FROM COAMaster(NOLOCK) WHERE AcCode ='4210001'		
				END
			END
			DELETE FROM @VoucherExportNode1 WHERE LedgerName IN('Round Off Expenses','Round Off Incomes') AND Amount = 0
		END
	END
			
END

If UPPER(@sVocType)='IDT IN'  
BEGIN

	INSERT INTO @IDTVoucher(Coaid,ACName)
	SELECT Coaid, AcName FROM COAMaster WHERE AcName='Purchase Account'

	INSERT INTO @VoucherExportNode1
	SELECT    CASE COA.AcName WHEN 'Purchase Return Account' THEN (SELECT AcName FROM @IDTVoucher) ELSE COA.AcName END as LedgerName,	
	(CASE VDT.DebitCredit WHEN 1 THEN (-1*ISNULL(VDT.Amount,0)) WHEN 2 THEN ISNULL((VDT.Amount),0)END) AS Amount,	
	CASE COA.AcName WHEN 'Purchase Return Account' THEN (SELECT CoaId FROM @IDTVoucher) ELSE COA.CoaId END 
	FROM StdvocDetails VDT (NOLOCK) 
	INNER JOIN CoaMaster COA (NOLOCK) ON VDT.CoaId=COA.CoaId 
	AND COA.CoaId Not in (select InputTaxId from TaxConfiguration (NOLOCK))
	LEFT OUTER JOIN  IDTMASTER R (NOLOCK) on R.coaid=Coa.coaid Where VDT.VocRefNo=@PiValue
	
	DELETE FROM @VoucherExportNode1 where LedgerName='Purchase Account'
	
	
	INSERT INTO @IDTTaxPercent (RefId,Prdslno,TaxPerc) 
	SELECT A.IDTMngRefNo,A.PrdSlNo,SUM(A.TaxPerc) as TaxPerc 
	FROM IDTManagementProductTax A(NOLOCK)     
	INNER JOIN IDTManagement B(NOLOCK) ON A.IDTMngRefNo = B.IDTMngRefNo     
	WHERE B.IDTMngRefNo = @VoucherRefNo AND A.TaxableAmount > 0  and B.StkMgmtTypeId=1
	GROUP BY A.IDTMngRefNo,A.PrdSlNo  

	INSERT INTO @VoucherExportNode1 
	SELECT LedgerName,-SUM(Amount) as Amount,0 as CoaId
	FROM (
			SELECT 
			CASE WHEN IDTMngDate<='2017-06-30' THEN 
			'Purchase Account VAT '+Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc))+'%' 
			ELSE
			'Purchase Account GST '+Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc))+'%' END AS LedgerName,
			CONVERT(NUMERIC(18,6),SUM(PrdGrossAmount)) as Amount,SIP.Prdslno,0 as Coaid 
			FROM IDTManagement SI (NOLOCK)     
			INNER JOIN IDTManagementProduct SIP (NOLOCK) ON SI.IDTMngRefNo=SIP.IDTMngRefNo    
			INNER JOIN @IDTTaxPercent C ON C.RefId=SI.IDTMngRefNo and C.RefId=SIP.IDTMngRefNo and    SIP.Prdslno=C.Prdslno 
			INNER JOIN StdVocMaster VDT (NOLOCK) on SI.IDTMngRefNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,26,CHARINDEX(' Dated',VDT.Remarks)-26)))  
			WHERE VDT.VocRefNo= @PiValue  and SI.StkMgmtTypeId=1
			AND SI.IDTMngRefNo = @VoucherRefNo
			GROUP BY Taxperc,  SIP.Prdslno ,IDTMngDate
	) X GROUP BY LedgerName

	
	UPDATE @VoucherExportNode1 SET LedgerName=(SELECT AcName FROM CoaMaster where  AcName='Purchase Account')
	WHERE LedgerName='Purchase Account'
	
	UPDATE @VoucherExportNode1 SET Coaid=(SELECT Coaid FROM CoaMaster where  AcName='Purchase Account')
	WHERE LedgerName='Purchase Account'
	
	
	SELECT @Amt1 = SUM(Amount) FROM @VoucherExportNode1 where LedgerName='Purchase Account'
	SELECT @Amt2 = SUM(Amount) FROM [dbo].[Fn_VoucherExportNode2]('Purchase Account',@PiValue,@VoucherRefNo)
	
	SELECT @Diff = @Amt1 + @Amt2
	
	IF @Diff <> 0
	BEGIN
		IF(@Diff <= 5  AND  @Diff >=  -5 )
		BEGIN
			IF EXISTS (SELECT * FROM @VoucherExportNode1 WHERE LedgerName IN('Round Off Expenses','Round Off Incomes'))
			BEGIN 
				   UPDATE TOP (1) @VoucherExportNode1  SET Amount = Amount - @Diff WHERE LedgerName IN('Round Off Expenses','Round Off Incomes')
			END
			ELSE
			BEGIN
				IF @Diff > 0
				BEGIN
					INSERT INTO @VoucherExportNode1 
					SELECT AcName,-1*@Diff,CoaId FROM COAMaster(NOLOCK) WHERE AcCode ='3220001'
				END
				ELSE
				BEGIN
					INSERT INTO @VoucherExportNode1 
					SELECT AcName,-1*@Diff,CoaId FROM COAMaster(NOLOCK) WHERE AcCode ='4210001'		
				END
			END
			DELETE FROM @VoucherExportNode1 WHERE LedgerName IN('Round Off Expenses','Round Off Incomes') AND Amount = 0
		END
	END

END
--CCRSTAML1028 END
--Added By Kishore (ILCRSTAML0087)
IF UPPER(@sVocType)='SALES'
BEGIN      
	DECLARE @DIFFRND  AS NUMERIC(18,4)
	INSERT INTO @Diffvalue
	select Inventorytype,SUM(SALESVALUE) SALESVALUE from Fn_VoucherExportNode3('SALES',@PiValue,@VoucherRefNo)    
	GROUP BY Inventorytype

	SELECT @DIFFRND = isnull(SUM((A.SALESVALUE - B.Amount)),0) FROM @Diffvalue A INNER JOIN @VoucherExportNode1 B ON A.Inventorytype = B.LedgerName
	where (A.SALESVALUE - B.Amount) between -0.02 AND 0.02 AND (A.SALESVALUE - B.Amount) <> 0
	
	IF EXISTS (SELECT TOP 1 * FROM @VoucherExportNode1 where LedgerName IN ('Round Off Incomes','Round Off Expenses'))
	BEGIN
		UPDATE X SET X.Amount = X.Amount - @DIFFRND from
		(
		SELECT TOP 1 * FROM @VoucherExportNode1 where LedgerName IN ('Round Off Incomes','Round Off Expenses')
		) X    
	END
	ELSE
	BEGIN
		INSERT INTO @VoucherExportNode1
		SELECT AcName,ISNULL(-@DIFFRND,0),CoaId FROM CoaMaster WHERE AcName = 'Round Off Incomes' 
	END    
    UPDATE A SET A.Amount = A.Amount- ISNULL((A.Amount - B.SalesValue),0) FROM @VoucherExportNode1 A INNER JOIN @Diffvalue B
	ON A.LedgerName = B.Inventorytype WHERE (A.Amount - B.SalesValue) BETWEEN -0.02 AND 0.02
END
-- Till Here (ILCRSTAML0087)
--> Added by Raja C for ILCRSTPAR2118
IF UPPER(@sVocType)='SALES'
BEGIN      
	DECLARE @DbAmt  AS NUMERIC(18,4)
	DECLARE @CrAmt  AS NUMERIC(18,4)
	DECLARE @DiffAmt   AS NUMERIC(18,4)
	SELECT @DbAmt=SUM(CONVERT(NUMERIC(18,2),Amount)) FROM @VoucherExportNode1 WHERE LedgerName NOT LIKE '%Sales Account%'
	SELECT @CrAmt=SUM(Amount) FROM (
	SELECT SUM(CONVERT(NUMERIC(18,2),Amount))Amount FROM Fn_VoucherExportNode2('SALES',@PiValue,@VoucherRefNo) UNION ALL
	SELECT SUM(CONVERT(NUMERIC(18,2),Salesvalue)) Amount FROM Fn_VoucherExportNode3('SALES',@PiValue,@VoucherRefNo))A
	SELECT @DiffAmt=@DbAmt+@CrAmt
	IF @DiffAmt<>0
	BEGIN
	    IF(@DiffAmt <= 5  AND  @DiffAmt >=  -5 )
		BEGIN
			IF EXISTS (SELECT TOP 1 * FROM @VoucherExportNode1 where LedgerName IN ('Round Off Incomes','Round Off Expenses'))
			BEGIN
				UPDATE X SET X.Amount = X.Amount - @DiffAmt from
				(
				SELECT TOP 1 * FROM @VoucherExportNode1 where LedgerName IN ('Round Off Incomes','Round Off Expenses')
				) X    
			END
			ELSE
			BEGIN
				INSERT INTO @VoucherExportNode1
				SELECT AcName,ISNULL(-@DiffAmt,0),CoaId FROM CoaMaster WHERE AcName = 'Round Off Incomes' 
			END 
       END
    END		   
END

IF UPPER(@sVocType)='PURCHASE'
BEGIN      
	SET @DbAmt =0
	SET @CrAmt =0
	SET @DiffAmt =0
	SELECT @DbAmt=SUM(CONVERT(NUMERIC(18,2),Amount)) FROM @VoucherExportNode1 WHERE LedgerName NOT LIKE '%Purchase Account%'
	SELECT @CrAmt=SUM(Amount) FROM (
	SELECT -1*SUM(CONVERT(NUMERIC(18,2),Amount)) Amount FROM Fn_VoucherExportNode2('PURCHASE',@PiValue,@VoucherRefNo) UNION ALL
	SELECT SUM(CONVERT(NUMERIC(18,2),Salesvalue)) Amount FROM Fn_VoucherExportNode3('PURCHASE',@PiValue,@VoucherRefNo))A
	SELECT @DiffAmt=@DbAmt-@CrAmt
	IF @DiffAmt<>0
	BEGIN
	    IF(@DiffAmt <= 5  AND  @DiffAmt >=  -5 )
		BEGIN
			IF EXISTS (SELECT TOP 1 * FROM @VoucherExportNode1 where LedgerName IN ('Round Off Incomes','Round Off Expenses'))
			BEGIN
				UPDATE X SET X.Amount = X.Amount - @DiffAmt from
				(
				SELECT TOP 1 * FROM @VoucherExportNode1 where LedgerName IN ('Round Off Incomes','Round Off Expenses')
				) X    
			END
			ELSE
			BEGIN
				INSERT INTO @VoucherExportNode1
				SELECT AcName,ISNULL(-@DiffAmt,0),CoaId FROM CoaMaster WHERE AcName = 'Round Off Incomes' 
			END 
       END
    END		   
END

--Till Here

---Added by Gopikrishnan at 20/02/2013    
IF NOT EXISTS (SELECT * FROM @VoucherExportNode1)    
BEGIN    
 INSERT INTO @VoucherExportNode1    
 SELECT COA.AcName AS LedgerName,(CASE VDT.DebitCredit WHEN 1 THEN (-1*ISNULL(VDT.Amount,0)) WHEN 2 THEN ISNULL((VDT.Amount),0)END) AS Amount,VDT.CoaId    
 FROM StdvocDetails VDT (NOLOCK)     
 INNER JOIN CoaMaster COA (NOLOCK) ON VDT.CoaId=COA.CoaId WHERE VDT.VocRefNo=@PiValue    
END    
If UPPER(@sVocType)='Stock Ledger'    
BEGIN    
Insert Into @VoucherExportNode1    
Select 'Physical Inventory',0,0    
End    
RETURN    
END
GO
IF EXISTS(SELECT 'X' FROM SYSOBJECTS WHERE XTYPE='TF' AND NAME='Fn_VoucherExportNode2')
DROP FUNCTION Fn_VoucherExportNode2
GO
--SELECT * FROM [dbo].[Fn_VoucherExportNode2]('SALES','SAL1702915','PM0S01751700417')
--SELECT * FROM [dbo].[Fn_VoucherExportNode2]('IDT','PUR1702478','TE.50354')
CREATE FUNCTION [Fn_VoucherExportNode2]
(
	@sVocType		AS VARCHAR(200),
	@PiValue		AS VARCHAR(200),
	@VoucherRefNo	AS Varchar(200)
)
RETURNS @VoucherExportNode2 TABLE
(
	LedgerName	  VARCHAR(50),
	TaxType       VARCHAR(50),
	TaxRate       VARCHAR(10),
	Amount		  NUMERIC(18,6),
	AssableAmount NUMERIC(18,6),
	Taxid       INT
	
)
AS
/***************************************************************************************************
* FUNCTION	: Fn_VoucherExportNode2
* PURPOSE	: Returns the Tax Bifurication details
* NOTES		:
* CREATED	: Gopikrishnan.R - 12.12.2012
* MODIFIED
* DATE            AUTHOR        CR/BZ			USERT STORY ID				DESCRIPTION
* 21/02/2013	Gopikrishnan												Nolock is added
* 21/03/2013    Gopikrishnan												Cancelled Bill Details flow to Tally
* 02/11/2017    Murugan.R		CR				CCRSTAML1028				IDT Transaction Added
-------------------------------------------------------------------------------------------------
**************************************************************************************************/
BEGIN
DECLARE @Amount1 NUMERIC(18,6)
DECLARE @Amount2 NUMERIC(18,6)
DECLARE @Diff NUMERIC(18,6)
DECLARE @TempVoucherExportNode TABLE
(
	LedgerName	  VARCHAR(50),
	TaxType       VARCHAR(50),
	TaxRate       VARCHAR(10),
	Amount		  NUMERIC(18,6),
	AssableAmount NUMERIC(18,6),	
	Taxid       INT	
)
IF UPPER(@sVocType)='SALES'
BEGIN
	
	INSERT INTO @VoucherExportNode2
	SELECT LedgerName,TaxType,TaxRate,CONVERT(NUMERIC(18,6),SUM(Amount))Amount,CONVERT(NUMERIC(18,6),SUM(AssableAmount))AssableAmount,Taxid 
	FROM 
	 (
		SELECT TaxCode+' '+CONVERT(NVARCHAR(10),CONVERT(NUMERIC(18,2),Taxperc))+'%' AS LedgerName,TaxCode AS TaxType,
		CONVERT(NVARCHAR(10),CONVERT(NUMERIC(18,2),Taxperc)) AS TaxRate,
		CONVERT(NUMERIC(18,6),TaxAmount) AS Amount,CONVERT(NUMERIC(18,6),TaxableAmount) AS AssableAmount,Tg.Taxid 
		FROM SalesinvoiceproductTax SIPT WITH (NOLOCK) 
		INNER JOIN Salesinvoice SI WITH (NOLOCK) ON SI.SALID=SIPT.SALID
		INNER JOIN TaxConfiguration Tg WITH (NOLOCK) ON TG.Taxid=SIPT.Taxid 
		INNER JOIN StdVocMaster VDT WITH (NOLOCK) ON SI.Salinvno=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,20,CHARINDEX(' Dated',VDT.Remarks)-20)))
		INNER JOIN StdvocDetails VDD WITH (NOLOCK) ON VDT.VocRefNo=VDD.VocRefNo 
		INNER JOIN CoaMaster COA WITH (NOLOCK) ON VDD.CoaId=COA.CoaId 
		INNER JOIN Retailer R ON R.Coaid=COA.Coaid AND R.rtrid=Si.rtrid AND VDD.Coaid=R.Coaid
		WHERE VDT.VocRefNo=@PiValue and SIPT.TaxableAmount>0 
		--GROUP BY Tg.Taxid,sipt.Taxperc,TaxCode 
		UNION ALL
		---Modified by Gopikrishnan at 21-03-2013 for Cancelled Bill Changes
		--select distinct 'Null' as LedgerName,'null' as TaxType,'0' as TaxRate,0 as Amount,0 AS AssableAmount,0 as Taxid from Salesinvoice SI WITH (NOLOCK) 
		--Where SalInvNo=@VoucherRefNo and (DlvSts=3 OR SalId NOT IN (select distinct SalId FROM SalesInvoiceProductTax WITH (NOLOCK)))) A order by taxid
		SELECT TaxCode+' '+CONVERT(NVARCHAR(10),CONVERT(NUMERIC(18,2),Taxperc))+'%' AS LedgerName,TaxCode AS TaxType,
		CONVERT(NVARCHAR(10),CONVERT(NUMERIC(18,2),Taxperc)) AS TaxRate,CONVERT(NUMERIC(18,6),TaxAmount) AS Amount,
		CONVERT(NUMERIC(18,6),TaxableAmount) AS AssableAmount,Tg.Taxid 
		FROM SalesinvoiceproductTax SIPT WITH (NOLOCK) 
		INNER JOIN Salesinvoice SI WITH (NOLOCK) ON SI.SALID=SIPT.SALID
		INNER JOIN TaxConfiguration Tg WITH (NOLOCK) ON TG.Taxid=SIPT.Taxid 
		INNER JOIN Retailer R ON R.rtrid=Si.rtrid AND DlvSts=3 AND si.salinvno=@VoucherRefNo
		WHERE SIPT.TaxableAmount>0 
		--GROUP BY Tg.Taxid,sipt.Taxperc,TaxCode 
	) A 
	GROUP BY LedgerName,TaxType,TaxRate,Taxid
	ORDER BY taxid		 			
End 
IF UPPER(@sVocType)='SALES RETURN'
BEGIN
	--INSERT INTO @VoucherExportNode2
	-- SELECT Distinct LedgerName,TaxType,TaxRate,Amount,AssableAmount,Taxid from (
	--	select distinct TaxCode+' '+Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc))+'%' as LedgerName,TaxCode as TaxType,
	--	Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc)) as TaxRate,-(Sum(TaxAmt)) as Amount,-(SUM(TaxableAmt)) AS AssableAmount,Tg.Taxid  
	--	from Returnproducttax SIPT WITH (NOLOCK) inner Join  ReturnHeader SI WITH (NOLOCK) ON SIPT.Returnid=SI.Returnid
	--	Inner Join TaxConfiguration Tg WITH (NOLOCK) on TG.Taxid=SIPT.Taxid Inner join StdVocMaster VDT WITH (NOLOCK) on SI.ReturnCode=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,24,CHARINDEX(' Dated',VDT.Remarks)-24)))
	--	Inner Join StdvocDetails VDD WITH (NOLOCK) on VDT.VocRefNo=VDD.VocRefNo Inner Join CoaMaster COA WITH (NOLOCK) ON VDD.CoaId=COA.CoaId Inner Join Retailer R WITH (NOLOCK) on R.Coaid=COA.Coaid and R.rtrid=Si.rtrid AND VDD.Coaid=R.Coaid
	--	Where VDT.VocRefNo=@PiValue and SIPT.TaxableAmt>0 Group By Tg.Taxid,sipt.Taxperc,TaxCode
	--    UNION ALL
	--    select distinct 'Null' as LedgerName,'null' as TaxType,'0' as TaxRate,0 as Amount,0 AS AssableAmount,0 as Taxid  from ReturnHeader SI WITH (NOLOCK)
	--	Where ReturnCode=@VoucherRefNo and Returnid Not in (select distinct Returnid FROM Returnproducttax WITH (NOLOCK))) A order by taxid
	 INSERT INTO @VoucherExportNode2
	 SELECT LedgerName,TaxType,TaxRate,Convert(Numeric(18,6),SUM(Amount))Amount,Convert(Numeric(18,6),SUM(AssableAmount))AssableAmount,Taxid 
	 FROM 
	 (
		SELECT TaxCode+' '+Convert(nvarchar(10),Convert(Numeric(18,2),ISNULL(Taxperc,0)))+'%' as LedgerName,TaxCode as TaxType,
		Convert(nvarchar(10),Convert(Numeric(18,6),ISNULL(Taxperc,0))) as TaxRate,-(Convert(Numeric(18,6),ISNULL(TaxAmt,0))) as Amount,
		-(Convert(Numeric(18,6),ISNULL(TaxableAmt,0))) AS AssableAmount,Tg.Taxid  
		FROM ReturnHeader  SI WITH (NOLOCK) 
		LEFT OUTER JOIN  Returnproducttax SIPT WITH (NOLOCK) ON SIPT.Returnid=SI.Returnid  
		LEFT OUTER JOIN  TaxConfiguration Tg WITH (NOLOCK) on TG.Taxid=SIPT.Taxid 
		INNER JOIN StdVocMaster VDT WITH (NOLOCK) on SI.ReturnCode=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,24,CHARINDEX(' Dated',VDT.Remarks)-24)))
		INNER JOIN StdvocDetails VDD WITH (NOLOCK) on VDT.VocRefNo=VDD.VocRefNo 
		INNER JOIN CoaMaster COA WITH (NOLOCK) ON VDD.CoaId=COA.CoaId 
		INNER JOIN Retailer R WITH (NOLOCK) on R.Coaid=COA.Coaid and R.rtrid=Si.rtrid AND VDD.Coaid=R.Coaid
		WHERE VDT.VocRefNo=@PiValue and SIPT.TaxableAmt>0
		--Group By Tg.Taxid,sipt.Taxperc,TaxCode
		UNION ALL
		SELECT DISTINCT 'Null' as LedgerName,'null' as TaxType,'0' as TaxRate,0 as Amount,0 AS AssableAmount,0 as Taxid  
		FROM ReturnHeader SI WITH (NOLOCK)
		WHERE ReturnCode= @VoucherRefNo and Returnid Not in (select distinct Returnid FROM Returnproducttax WITH (NOLOCK))
	) A
	GROUP BY LedgerName,TaxType,TaxRate,Taxid
	ORDER BY Taxid	
END
IF UPPER(@sVocType)='PURCHASE'
BEGIN
	IF EXISTS (SELECT * FROM StdVocMaster WHERE VocRefNo=@PiValue AND Remarks LIKE 'Posted From Stock Adjustment%' )
	BEGIN
		INSERT INTO @TempVoucherExportNode
		SELECT DISTINCT 'Null' AS LedgerName,'null' AS TaxType,'0' AS TaxRate,0 AS Amount,0 AS AssableAmount,0 AS Taxid
	END
	ELSE
	BEGIN
		--INSERT INTO @VoucherExportNode2
		--SELECT Distinct LedgerName,TaxType,TaxRate,Amount,AssableAmount,Taxid from (
		--select distinct TaxCode+' '+Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc))+'%' as LedgerName,TaxCode as TaxType,
		--Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc)) as TaxRate,-(Sum(sipt.TaxAmount)) as Amount,
		---(SUM(SIPT.TaxableAmount)) AS AssableAmount,Tg.Taxid 
		--from PurchaseReceiptProductTax SIPT WITH (NOLOCK) inner Join  PurchaseReceipt SI WITH (NOLOCK) ON SIPT.Purrcptid=SI.Purrcptid
		--Inner Join TaxConfiguration Tg WITH (NOLOCK) on TG.Taxid=SIPT.Taxid Inner join StdVocMaster VDT WITH (NOLOCK) on SI.PurRcptRefNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,16,CHARINDEX(' Dated',VDT.Remarks)-16))) 
		--Where VDT.VocRefNo=@PiValue and SIPT.TaxableAmount>0 Group By Tg.Taxid,sipt.Taxperc,TaxCode
		--UNION ALL
		--select distinct 'Null' as LedgerName,'null' as TaxType,'0' as TaxRate,0 as Amount,0 AS AssableAmount,0 as Taxid FROM PurchaseReceipt SI WITH (NOLOCK)
		--Where PurRcptRefNo=@VoucherRefNo and Purrcptid Not in (select distinct Purrcptid FROM PurchaseReceiptProductTax WITH (NOLOCK)))A Order by Taxid 
		INSERT INTO @VoucherExportNode2
		SELECT LedgerName,TaxType,TaxRate,CONVERT(NUMERIC(18,6),SUM(Amount))Amount,CONVERT(NUMERIC(18,6),SUM(AssableAmount))AssableAmount,Taxid 
		FROM 
		(
			SELECT TaxCode+' '+Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc))+'%' AS LedgerName,TaxCode AS TaxType,
			Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc)) AS TaxRate,-(CONVERT(NUMERIC(18,6),sipt.TaxAmount)) AS Amount,
			-(CONVERT(NUMERIC(18,6),SIPT.TaxableAmount)) AS AssableAmount,Tg.Taxid 
			FROM PurchaseReceiptProductTax SIPT WITH (NOLOCK) 
			INNER JOIN PurchaseReceipt SI WITH (NOLOCK) ON SIPT.Purrcptid=SI.Purrcptid
			INNER JOIN TaxConfiguration Tg WITH (NOLOCK) on TG.Taxid=SIPT.Taxid 
			INNER JOIN StdVocMaster VDT WITH (NOLOCK) on SI.PurRcptRefNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,16,CHARINDEX(' Dated',VDT.Remarks)-16))) 
			WHERE VDT.VocRefNo=@PiValue AND SIPT.TaxableAmount>0 
			--Group By Tg.Taxid,sipt.Taxperc,TaxCode
			UNION ALL
			SELECT DISTINCT 'Null' as LedgerName,'null' as TaxType,'0' as TaxRate,0 as Amount,0 AS AssableAmount,0 as Taxid 
			FROM PurchaseReceipt SI WITH (NOLOCK)
			Where PurRcptRefNo=@VoucherRefNo and Purrcptid Not in (select distinct Purrcptid FROM PurchaseReceiptProductTax WITH (NOLOCK))
				
		)A
		GROUP BY LedgerName,TaxType,TaxRate,Taxid
		ORDER BY Taxid 
	
	END
END
IF UPPER(@sVocType)='PURCHASE RETURN'
BEGIN
	--INSERT INTO @VoucherExportNode2
	-- SELECT Distinct LedgerName,TaxType,TaxRate,Amount,AssableAmount,Taxid from (
	--	select distinct TaxCode+' '+Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc))+'%' as LedgerName,TaxCode as TaxType,
	--	Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc)) as TaxRate,(Sum(sipt.TaxAmount)) as Amount,SUM(SIPT.TaxableAmount) AS AssableAmount,Tg.Taxid  
	--	from PurchaseReturnProductTax SIPT WITH (NOLOCK) inner Join  PurchaseReturn SI WITH (NOLOCK) ON SIPT.Purretid=SI.Purretid 
	--	Inner Join TaxConfiguration Tg WITH (NOLOCK) on TG.Taxid=SIPT.Taxid Inner join StdVocMaster VDT WITH (NOLOCK) on SI.PurretRefno=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,28,CHARINDEX(' Dated',VDT.Remarks)-28)))  
	--	Where VDT.VocRefNo=@PiValue and SIPT.TaxableAmount>0 Group By Tg.Taxid,sipt.Taxperc,TaxCode
	--	UNION ALL
	--	select distinct 'Null' as LedgerName,'null' as TaxType,'0' as TaxRate,0 as Amount,0 AS AssableAmount,0 as Taxid  from PurchaseReturn SI WITH (NOLOCK)
	--	Where PurretRefno=@VoucherRefNo and Purretid Not in (select distinct Purretid FROM PurchaseReturnProductTax WITH (NOLOCK))) A order by taxid
	 INSERT INTO @VoucherExportNode2
	 SELECT LedgerName,TaxType,TaxRate,Convert(NUMERIC(18,6),SUM(Amount))Amount,Convert(NUMERIC(18,6),SUM(AssableAmount))AssableAmount,Taxid 
	 FROM 
	 (
			SELECT TaxCode+' '+Convert(NVARCHAR(10),Convert(NUMERIC(18,2),Taxperc))+'%' AS LedgerName,TaxCode AS TaxType,
			Convert(NVARCHAR(10),Convert(NUMERIC(18,2),Taxperc)) AS TaxRate,(Convert(NUMERIC(18,6),sipt.TaxAmount)) AS Amount,
			Convert(NUMERIC(18,6),SIPT.TaxableAmount) AS AssableAmount,Tg.Taxid  
			FROM PurchaseReturnProductTax SIPT WITH (NOLOCK) 
			INNER JOIN PurchaseReturn SI WITH (NOLOCK) ON SIPT.Purretid=SI.Purretid 
			INNER JOIN TaxConfiguration Tg WITH (NOLOCK) ON TG.Taxid=SIPT.Taxid 
			INNER JOIN StdVocMaster VDT WITH (NOLOCK) ON SI.PurretRefno=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,28,CHARINDEX(' Dated',VDT.Remarks)-28)))  
			WHERE VDT.VocRefNo=@PiValue AND SIPT.TaxableAmount>0 
			--GROUP BY Tg.Taxid,sipt.Taxperc,TaxCode
			UNION ALL
			SELECT DISTINCT 'Null' AS LedgerName,'null' AS TaxType,'0' AS TaxRate,0 AS Amount,0 AS AssableAmount,0 AS Taxid  
			FROM PurchaseReturn SI WITH (NOLOCK)
			WHERE PurretRefno=@VoucherRefNo AND Purretid NOT IN (select distinct Purretid FROM PurchaseReturnProductTax WITH (NOLOCK))
	) A 
	GROUP BY LedgerName,TaxType,TaxRate,Taxid
	ORDER BY Taxid					
END
--CCRSTAML1028 Start
IF UPPER(@sVocType)='IDT'--IDT OUT
BEGIN
	 INSERT INTO @VoucherExportNode2
	 SELECT LedgerName,TaxType,TaxRate,Convert(NUMERIC(18,6),SUM(Amount))Amount,Convert(NUMERIC(18,6),SUM(AssableAmount))AssableAmount,Taxid 
	 FROM 
	 (
			SELECT TaxCode+' '+Convert(NVARCHAR(10),Convert(NUMERIC(18,2),Taxperc))+'%' AS LedgerName,TaxCode AS TaxType,
			Convert(NVARCHAR(10),Convert(NUMERIC(18,2),Taxperc)) AS TaxRate,(Convert(NUMERIC(18,6),sipt.TaxAmount)) AS Amount,
			Convert(NUMERIC(18,6),SIPT.TaxableAmount) AS AssableAmount,Tg.Taxid  
			FROM IDTManagementProductTax SIPT WITH (NOLOCK) 
			INNER JOIN IDTManagement SI WITH (NOLOCK) ON SIPT.IDTMngRefNo=SI.IDTMngRefNo 
			INNER JOIN TaxConfiguration Tg WITH (NOLOCK) ON TG.Taxid=SIPT.Taxid 
			INNER JOIN StdVocMaster VDT WITH (NOLOCK) ON SI.IDTMngRefNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,26,CHARINDEX(' Dated',VDT.Remarks)-26)))  
			WHERE VDT.VocRefNo=@PiValue AND SIPT.TaxableAmount>0 and SI.StkMgmtTypeId=2
			UNION ALL
			SELECT DISTINCT 'Null' AS LedgerName,'null' AS TaxType,'0' AS TaxRate,0 AS Amount,0 AS AssableAmount,0 AS Taxid  
			FROM IDTManagement SI WITH (NOLOCK)
			WHERE IDTMngRefNo=@VoucherRefNo AND IDTMngRefNo NOT IN (select distinct IDTMngRefNo FROM IDTManagementProductTax WITH (NOLOCK))
			and SI.StkMgmtTypeId=2
	) A 
	GROUP BY LedgerName,TaxType,TaxRate,Taxid
	ORDER BY Taxid					
END
IF UPPER(@sVocType)='IDT IN'--IDT IN
BEGIN
	 INSERT INTO @VoucherExportNode2
	 SELECT LedgerName,TaxType,TaxRate,Convert(NUMERIC(18,6),SUM(Amount))Amount,Convert(NUMERIC(18,6),SUM(AssableAmount))AssableAmount,Taxid 
	 FROM 
	 (
			SELECT TaxCode+' '+Convert(NVARCHAR(10),Convert(NUMERIC(18,2),Taxperc))+'%' AS LedgerName,TaxCode AS TaxType,
			Convert(NVARCHAR(10),Convert(NUMERIC(18,2),Taxperc)) AS TaxRate,-1*(Convert(NUMERIC(18,6),sipt.TaxAmount)) AS Amount,
			-1*Convert(NUMERIC(18,6),SIPT.TaxableAmount) AS AssableAmount,Tg.Taxid  
			FROM IDTManagementProductTax SIPT WITH (NOLOCK) 
			INNER JOIN IDTManagement SI WITH (NOLOCK) ON SIPT.IDTMngRefNo=SI.IDTMngRefNo 
			INNER JOIN TaxConfiguration Tg WITH (NOLOCK) ON TG.Taxid=SIPT.Taxid 
			INNER JOIN StdVocMaster VDT WITH (NOLOCK) ON SI.IDTMngRefNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,26,CHARINDEX(' Dated',VDT.Remarks)-26)))  
			WHERE VDT.VocRefNo=@PiValue AND SIPT.TaxableAmount>0 and SI.StkMgmtTypeId=1
			UNION ALL
			SELECT DISTINCT 'Null' AS LedgerName,'null' AS TaxType,'0' AS TaxRate,0 AS Amount,0 AS AssableAmount,0 AS Taxid  
			FROM IDTManagement SI WITH (NOLOCK)
			WHERE IDTMngRefNo=@VoucherRefNo AND IDTMngRefNo NOT IN (select distinct IDTMngRefNo FROM IDTManagementProductTax WITH (NOLOCK))
			and SI.StkMgmtTypeId=1
	) A 
	GROUP BY LedgerName,TaxType,TaxRate,Taxid
	ORDER BY Taxid					
END
--CCRSTAML1028 END
IF UPPER(@sVocType)<>'SALES' AND (@sVocType)<>'SALES RETURN' AND UPPER(@sVocType)<>'PURCHASE RETURN' AND  UPPER(@sVocType)<>'PURCHASE' 
	AND  UPPER(@sVocType)<>'IDT' AND  UPPER(@sVocType)<>'IDT IN'-- CCRSTAML1028
BEGIN
	INSERT INTO @VoucherExportNode2
	SELECT DISTINCT 'Null' AS LedgerName,'null' AS TaxType,'0' AS TaxRate,0 AS Amount,0 AS AssableAmount,0 AS Taxid
END
RETURN
END
GO
IF EXISTS(SELECT 'X' FROM SYSOBJECTS WHERE XTYPE='TF' AND NAME='Fn_VoucherExportNode3')
DROP FUNCTION Fn_VoucherExportNode3
GO
--select * from SalesInvoice where Salinvno='PM0S01751700417'
--Select * from SalesInvoiceProduct where Salid=2908
--select * from Fn_VoucherExportNode3('SALES','SAL1702915','PM0S01751700417')
CREATE FUNCTION [Fn_VoucherExportNode3]
(
	@sVocType		as varchar(200),
	@PiValue		as varchar(200),
	@VoucherRefNo	AS Varchar(200)
)
RETURNS @VoucherExportNode3 TABLE
(
    Inventorytype varchar(200),
    LocationName      Varchar(200),
    ProductCode    varchar(200),
    ProductName    Varchar(500),
	Quantity			Int,
	SalesValue		Numeric(18,6),
	Discounts		Numeric(18,6)
)
AS
/***************************************************************************************************
* FUNCTION	: Fn_VoucherExportNode3
* PURPOSE	: Returns the Inventeory Details
* NOTES		:
* CREATED	: Gopikrishnan.R - 12.12.2012
* MODIFIED
* DATE            AUTHOR        CR/BZ			USERT STORY ID				DESCRIPTION
* 13-02-2013	Gopikrishnan												Location Name Column Added
* 21/03/2013    Gopikrishnan												Cancelled Bill Details flow to Tally
* 18/06/2013    Gopikrishnan												SalesReturn Location name HardCored Remove
* 03/09/2013    Gopikrishnan												ProductName Column Added
* 02/11/2017    Murugan.R		CR				CCRSTAML1028				ProductName Column Added
-------------------------------------------------------------------------------------------------
**************************************************************************************************/
BEGIN


DECLARE @TaxPercent Table  
(
  RefId BIGINT,
  Prdslno INT,
  TaxPerc Numeric(18,6)	,
  TaxableAmount Numeric(18,6)
)  

DECLARE @IDTTaxPercent Table  
(
  RefId Varchar(50),
  Prdslno INT,
  TaxPerc Numeric(18,6)	
) 

DECLARE @PurchaseTaxPercent Table  
(
  RefId Varchar(50),
  Prdslno INT,
  TaxPerc Numeric(18,6),
  TaxableAmount  Numeric(18,6)	
)

If UPPER(@PiValue)<>'NULL'
BEGIN
If UPPER(@sVocType)='SALES'
BEGIN
	DELETE FROM @TaxPercent

	INSERT INTO @TaxPercent (RefId,Prdslno,TaxPerc,TaxableAmount) 	
	SELECT A.Salid,A.PrdSlNo,SUM(A.TaxPerc) as TaxPerc ,SUM(DISTINCT TaxableAmount)  as TaxableAmount
	FROM SalesInvoiceProductTax A(NOLOCK)     
	INNER JOIN Salesinvoice B(NOLOCK) ON A.Salid = B.Salid     
	WHERE B.SalInvNo = @VoucherRefNo AND A.TaxableAmount > 0  
	GROUP BY A.Salid,A.PrdSlNo 
	
	INSERT INTO @VoucherExportNode3
	SELECT  Inventorytype,LocationName,ProductCode,ProductName,SUM(Quantity) as Quantity,CONVERT(Numeric(18,6),SUM(SalesValue)) as SalesValue,
	SUM(Discounts) as Discounts  
	FROM (
		SELECT 
		CASE WHEN VatGst='VAT' THEN
		'Sales Account VAT '+CONVERT(nvarchar(10),CONVERT(Numeric(18,2),Taxperc))+'%' 
		ELSE
		'Sales Account GST '+CONVERT(nvarchar(10),CONVERT(Numeric(18,2),Taxperc))+'%' 
		END	AS Inventorytype,
		LcnName as LocationName,
		Prdccode as ProductCode,PrdName+'~'+Prdccode as ProductName,(BaseQty) as Quantity,
		--TaxableAmount  as SalesValue,SIP.SlNo
		(PrdGrossAmount) as SalesValue,SIP.SlNo,
		-1*(SplDiscAmount+prdSplDiscAmount+PrdSchDiscAmount+PrdDBDiscAmount+PrdCDAmount) as Discounts
		FROM Salesinvoice SI (NOLOCK)     
		INNER JOIN Salesinvoiceproduct SIP (NOLOCK) ON SI.Salid=SIP.Salid    
		INNER JOIN @TaxPercent C ON C.RefId=SI.Salid and C.RefId=SIP.Salid and    SIP.SlNo=C.Prdslno 
		INNER JOIN StdVocMaster VDT WITH (NOLOCK) on SI.Salinvno=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,20,CHARINDEX(' Dated',VDT.Remarks)-20)))
		INNER JOIN Location L WITH (NOLOCK) on l.LcnId=SI.Lcnid
		INNER JOIN Product P WITH (NOLOCK) on P.prdid=Sip.prdid 
		WHERE SI.SalInvNo = @VoucherRefNo AND VDT.VocRefNo=@PiValue
	) X GROUP BY Inventorytype,LocationName,ProductCode,ProductName 

End 
END
----Added by Gopikrishnan at 21-03-2013 for Cancelled Bill Changes
If UPPER(@PiValue)='NULL'
BEGIN
If UPPER(@sVocType)='SALES'
BEGIN

	DELETE FROM @TaxPercent

	INSERT INTO @TaxPercent (RefId,Prdslno,TaxPerc) 	
	SELECT A.Salid,A.PrdSlNo,SUM(A.TaxPerc) as TaxPerc 
	FROM SalesInvoiceProductTax A(NOLOCK)     
	INNER JOIN Salesinvoice B(NOLOCK) ON A.Salid = B.Salid     
	WHERE B.SalInvNo = @VoucherRefNo AND A.TaxableAmount > 0  AND DlvSts=3     
	GROUP BY A.Salid,A.PrdSlNo 
	
	INSERT INTO @VoucherExportNode3
	SELECT  Inventorytype,LocationName,ProductCode,ProductName,SUM(Quantity) as Quantity,CONVERT(Numeric(18,6),SUM(SalesValue)) as SalesValue ,
	SUM(Discounts) as Discounts
	FROM (
		SELECT 
		CASE WHEN VatGst='VAT' THEN
		'Sales Account VAT '+Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc))+'%' 
		ELSE 'Sales Account GST '+Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc))+'%' END	AS Inventorytype,		
		LcnName as LocationName,
		Prdccode as ProductCode,PrdName+'~'+Prdccode as ProductName,(BaseQty) as Quantity,(PrdGrossAmount) as SalesValue,SIP.SlNo,
		-1*(SplDiscAmount+prdSplDiscAmount+PrdSchDiscAmount+PrdDBDiscAmount+PrdCDAmount) as Discounts
		FROM Salesinvoice SI (NOLOCK)     
		INNER JOIN Salesinvoiceproduct SIP (NOLOCK) ON SI.Salid=SIP.Salid    
		INNER JOIN @TaxPercent C ON C.RefId=SI.Salid and C.RefId=SIP.Salid and    SIP.SlNo=C.Prdslno 
		INNER JOIN Location L WITH (NOLOCK) on l.LcnId=SI.Lcnid
		INNER JOIN Product P WITH (NOLOCK) on P.prdid=Sip.prdid 
		WHERE SI.SalInvNo = @VoucherRefNo	 AND DlvSts=3      
	) X GROUP BY Inventorytype,LocationName,ProductCode,ProductName 


End 
END
If UPPER(@sVocType)='SALES RETURN'
BEGIN

	DELETE FROM @TaxPercent

	INSERT INTO @TaxPercent (RefId,Prdslno,TaxPerc) 	
	SELECT A.Returnid,A.PrdSlNo,SUM(A.TaxPerc) as TaxPerc 
	FROM ReturnProductTax A(NOLOCK)     
	INNER JOIN ReturnHeader B(NOLOCK) ON A.Returnid = B.Returnid     
	WHERE B.ReturnCode = @VoucherRefNo AND A.TaxableAmt > 0      
	GROUP BY A.Returnid,A.PrdSlNo 
	
	INSERT INTO @VoucherExportNode3
	SELECT  Inventorytype,LocationName,ProductCode,ProductName,SUM(Quantity) as Quantity,CONVERT(Numeric(18,6),SUM(SalesValue)) as SalesValue ,
	SUM(Discounts) as Discounts
	FROM (
		SELECT 
		CASE WHEN VatGst='VAT' THEN
		'Sales Return Account VAT '+Convert(nvarchar(10),Convert(Numeric(18,2),isnull(Taxperc,0)))+'%' 
		ELSE 'Sales Return Account GST '+Convert(nvarchar(10),Convert(Numeric(18,2),isnull(Taxperc,0)))+'%'  END	AS Inventorytype,
		L.LcnName as  LocationName,
		Prdccode as ProductCode,PrdName+'~'+Prdccode as ProductName,(BaseQty) as Quantity,CONVERT(NUMERIC(18,6),PrdActualGross) as SalesValue,
		SIP.SlNo,
		-1*(PrdSplDisAmt+PrdSchDisAmt+PrdDBDisAmt+PrdCDDisAmt) as Discounts
		FROM ReturnHeader SI (NOLOCK)     
		INNER JOIN ReturnProduct SIP (NOLOCK) ON SI.Returnid=SIP.Returnid    
		LEFT OUTER JOIN @TaxPercent C ON C.RefId=SI.Returnid and C.RefId=SIP.Returnid and    SIP.SlNo=C.Prdslno 
		INNER JOIN StdVocMaster VDT (NOLOCK) on SI.ReturnCode=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,24,CHARINDEX(' Dated',VDT.Remarks)-24)))
		INNER JOIN StockType ST ON ST.StockTypeId=SIP.StockTypeId
		INNER JOIN Location L WITH (NOLOCK) on l.LcnId=ST.LCNID
		INNER JOIN Product P WITH (NOLOCK) on P.prdid=Sip.prdid 
		WHERE VDT.VocRefNo= @PiValue    
		AND SI.ReturnCode = @VoucherRefNo	
	) X GROUP BY Inventorytype,LocationName,ProductCode,ProductName 


END
If UPPER(@sVocType)='PURCHASE'
BEGIN

DELETE FROM @PurchaseTaxPercent

INSERT INTO @PurchaseTaxPercent (RefId,Prdslno,TaxPerc,TaxableAmount) 
--SELECT A.PurRcptId,A.PrdSlNo,SUM(A.TaxPerc) as TaxPerc ,SUM(CASE WHEN TaxCode NOT IN('InputGSTCess') THEN 0 ELSE DISTINCT A.TaxableAmount END) as TaxableAmount
--FROM PurchaseReceiptProductTax A(NOLOCK)     
--INNER JOIN PurchaseReceipt B(NOLOCK) ON A.PurRcptId = B.PurRcptId 
--INNER JOIN TaxConfiguration T (NOLOCK) ON T.TaxId=A.TaxId    
--WHERE B.CmpInvNo = @VoucherRefNo AND A.TaxableAmount > 0  
--GROUP BY A.PurRcptId,A.PrdSlNo 

SELECT  X.PurRcptId,X.PrdSlNo,SUM(X.TaxPerc) as TaxPerc,SUM(DISTINCT TaxableAmount) as TaxableAmount
FROM (
SELECT A.PurRcptId,A.PrdSlNo,(A.TaxPerc) as TaxPerc ,(CASE WHEN TaxCode IN('InputGSTCess') THEN 0 ELSE A.TaxableAmount END) as TaxableAmount
FROM PurchaseReceiptProductTax A(NOLOCK)     
INNER JOIN PurchaseReceipt B(NOLOCK) ON A.PurRcptId = B.PurRcptId 
INNER JOIN TaxConfiguration T (NOLOCK) ON T.TaxId=A.TaxId    
WHERE B.CmpInvNo = @VoucherRefNo AND A.TaxableAmount > 0 
  )X
GROUP BY X.PurRcptId,X.PrdSlNo 


INSERT INTO @VoucherExportNode3
SELECT  Inventorytype,LocationName,ProductCode,ProductName,SUM(Quantity) as Quantity,CONVERT(Numeric(18,6),SUM(SalesValue)) as SalesValue ,
SUM(Discounts) as Discounts
FROM (
		SELECT 
		CASE WHEN VatGst='VAT' THEN
		'Purchase Account VAT '+Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc))+'%' 
		ELSE
		'Purchase Account GST '+Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc))+'%' END AS Inventorytype
		
		,LcnName as LocationName,
		Prdccode as ProductCode,PrdName+'~'+Prdccode as ProductName,(InvBaseQty) as Quantity,
		--(TaxableAmount) as SalesValue,SIP.PrdSlNo
		(PrdGrossAmount) as SalesValue,SIP.PrdSlNo,
		(PrdDiscount) as Discounts	
		FROM PurchaseReceipt SI (NOLOCK)     
		INNER JOIN PurchaseReceiptProduct SIP (NOLOCK) ON SI.PurRcptId=SIP.PurRcptId    
		INNER JOIN @PurchaseTaxPercent C ON C.RefId=SI.PurRcptId and C.RefId=SIP.PurRcptId and    SIP.PrdSlNo=C.Prdslno 
		INNER JOIN StdVocMaster VDT (NOLOCK) on SI.PurRcptRefNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,16,CHARINDEX(' Dated',VDT.Remarks)-16)))
		INNER JOIN Location L WITH (NOLOCK) on l.LcnId=SI.Lcnid
		INNER JOIN Product P WITH (NOLOCK) on P.prdid=Sip.prdid 
		WHERE VDT.VocRefNo= @PiValue    
		AND SI.CmpInvNo = @VoucherRefNo	
) X GROUP BY Inventorytype,LocationName,ProductCode,ProductName 
END
If UPPER(@sVocType)='JOURNAL'
BEGIN
	INSERT INTO @VoucherExportNode3
	SELECT DISTINCT 'Physical Inventory' AS Inventorytype,LcnName AS LocationName,Prdccode AS ProductCode,PrdName+'~'+Prdccode AS ProductName,
	SUM(TotalQty) AS Quantity,SUM(SIP.Amount) AS SalesValue ,
	0 as Discounts 
	FROM StockManagementProduct SIP 
	INNER JOIN StockManagement SI ON SI.StkMngRefNo=SIP.StkMngRefNo 
	INNER JOIN StdVocMaster VDT WITH (NOLOCK) on SI.StkMngRefNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,29,CHARINDEX(' Dated',VDT.Remarks)-29))) 
	INNER JOIN Product P WITH (NOLOCK) on P.prdid=Sip.prdid 
	INNER JOIN Location L WITH (NOLOCK) on l.LcnId=SI.Lcnid
	WHERE VDT.VocRefNo=@PiValue and VDT.Remarks Like '%Posted from stock%' Group by Prdccode,LcnName,PrdName
	UNION ALL
	SELECT DISTINCT 'Physical Inventory' AS Inventorytype,LcnName AS LocationName,Prdccode AS ProductCode,PrdName+'~'+Prdccode AS ProductName,
	SUM(TransferQty) AS Quantity,SUM(LD.TransferQty*PrdBatDetailValue) AS SalesValue ,
	0 as Discounts
	from LocationTransferDetails LD 
	INNER JOIN Product P on P.prdid=LD.prdid 
	INNER JOIN ProductbatchDetails PBD1 (Nolock) on pbd1.Prdbatid=LD.PrdBatId and PBD1.DefaultPrice=1 
	INNER JOIN BatchCreation BC (Nolock) On BC.SlNo=PBD1.SLNo AND BC.SelRte=1
	INNER JOIN LocationTransferMaster LM WITH (NOLOCK) ON LM.LcnRefNo=LD.LcnRefNo
	INNER JOIN Location L WITH (NOLOCK) on l.LcnId=LM.ToLcnid
	AND LD.LcnRefNo=@PiValue  Group by Prdccode,LcnName,PrdName
END
If UPPER(@sVocType)='PURCHASE RETURN'
BEGIN


INSERT INTO @PurchaseTaxPercent (RefId,Prdslno,TaxPerc,TaxableAmount) 
--SELECT A.PurRetId,A.PrdSlNo,SUM(A.TaxPerc) as TaxPerc ,SUM(DISTINCT A.TaxableAmount) as TaxableAmount
--FROM PurchaseReturnProductTax A(NOLOCK)     
--INNER JOIN PurchaseReturn B(NOLOCK) ON A.PurRetId = B.PurRetId  
--INNER JOIN TaxConfiguration T (NOLOCK) ON T.TaxId=A.TaxId      
--WHERE B.PurRetRefNo = @VoucherRefNo AND A.TaxableAmount > 0      and TaxCode NOT IN('InputGSTCess') 
--GROUP BY A.PurRetId,A.PrdSlNo  

SELECT  X.PurRetId,X.PrdSlNo,SUM(X.TaxPerc) as TaxPerc,SUM(DISTINCT TaxableAmount) as TaxableAmount
FROM (
SELECT A.PurRetId,A.PrdSlNo,(A.TaxPerc) as TaxPerc ,(CASE WHEN TaxCode IN('InputGSTCess') THEN 0 ELSE A.TaxableAmount END) as TaxableAmount
FROM PurchaseReturnProductTax A(NOLOCK)     
INNER JOIN PurchaseReturn B(NOLOCK) ON A.PurRetId = B.PurRetId 
INNER JOIN TaxConfiguration T (NOLOCK) ON T.TaxId=A.TaxId    
WHERE B.PurRetRefNo = @VoucherRefNo AND A.TaxableAmount > 0 
  )X
GROUP BY X.PurRetId,X.PrdSlNo 

INSERT INTO @VoucherExportNode3 
SELECT Inventorytype,LocationName,ProductCode,ProductName,SUM(Quantity)Quantity,CONVERT(Numeric(18,6),SUM(SalesValue))SalesValue,
SUM(Discounts) as Discounts
FROM (
		SELECT 
		CASE WHEN VatGst='VAT' THEN
		'Purchase Return Account VAT '+Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc))+'%' 
		ELSE 
		'Purchase Return Account GST '+Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc))+'%'
		END	AS Inventorytype,LcnName as LocationName,
		Prdccode as ProductCode,PrdName+'~'+Prdccode as ProductName,(RetInvBaseQty) as Quantity,
		(PrdGrossAmount) as SalesValue,SIP.PrdSlNo ,
		-1*(PrdDiscount) as Discounts	
		--(TaxableAmount) as SalesValue,SIP.PrdSlNo 
		FROM PurchaseReturn SI (NOLOCK)     
		INNER JOIN PurchaseReturnProduct SIP (NOLOCK) ON SI.PurRetId=SIP.PurRetId    
		INNER JOIN @PurchaseTaxPercent C ON C.RefId=SI.PurRetId and C.RefId=SIP.PurRetId and    SIP.PrdSlNo=C.Prdslno 
		INNER JOIN StdVocMaster VDT (NOLOCK) on SI.PurRetRefNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,28,CHARINDEX(' Dated',VDT.Remarks)-28))) 
		INNER JOIN Location L WITH (NOLOCK) ON l.LcnId=SI.Lcnid   
		INNER JOIN Product P WITH (NOLOCK) on P.prdid=Sip.prdid
		WHERE VDT.VocRefNo= @PiValue    
		AND SI.PurRetRefNo = @VoucherRefNo		
) X GROUP BY  Inventorytype,LocationName,ProductCode,ProductName
END
If UPPER(@sVocType)='SALES- REPLACEMENT OUT'
	Begin
		INSERT INTO @VoucherExportNode3
		select distinct 'Sales Account' as Inventorytype,'LcnName' as LocationName,Prdccode as ProductCode,PrdName+'~'+Prdccode as ProductName,
		sum(RepQty) as Quantity,Sum(RepAmount) as SalesValue ,
		0 as Discounts
		from ReplacementOut SIP WITH (NOLOCK) 
		Inner Join Product P WITH (NOLOCK) on P.prdid=Sip.prdid
		Inner join StdVocMaster VDT WITH (NOLOCK) on SIP.RepRefno=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,34,CHARINDEX(' Dated',VDT.Remarks)-34)))
		Where VDT.VocRefNo=@PiValue Group by Prdccode,PrdName
	END
If UPPER(@sVocType)='SALES- REPLACEMENT IN'
	Begin
	INSERT INTO @VoucherExportNode3
		select distinct 'Sales Account' as Inventorytype,'LcnName' as LocationName,Prdccode as ProductCode,PrdName+'~'+Prdccode as ProductName,
		sum(RtnQty) as Quantity,Sum(RtnAmount) as SalesValue ,
		0 as Discounts 
		from ReplacementIn SIP WITH (NOLOCK) 
		Inner Join Product P WITH (NOLOCK) on P.prdid=Sip.prdid
		Inner join StdVocMaster VDT WITH (NOLOCK) on SIP.RepRefno=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,34,CHARINDEX(' Dated',VDT.Remarks)-34)))
		Where VDT.VocRefNo=@PiValue Group by Prdccode,PrdName
	END
If UPPER(@sVocType)='Stock Ledger'
BEGIN
	
		DECLARE @ProdDetail TABLE
		(
			lcnid	INT,
			PrdId	INT,
			PrdBatId INT,
			TransDate DATETIME
		)
		
		INSERT INTO @ProdDetail
		select lcnid,PrdId,prdbatid ,max(TransDate) as TransDate FROM StockLedger Stk (nolock)
			WHERE Stk.TransDate < @VoucherRefNo
		Group by lcnid,PrdId,prdbatid
		
		INSERT INTO @VoucherExportNode3
		select 'Physical Inventory' as Inventorytype,l.LcnName AS LocationName,PRD.PrdcCode AS ProductCode,PRD.PrdName+'~'+Prdccode AS ProductName,
		(sl.SalClsStock+sl.UnSalClsStock+sl.OfferClsStock) as Quantity,
		(ISNULL((sl.SalClsStock+sl.UnSalClsStock+sl.OfferClsStock),0)* PBD.PrdBatDetailValue) AS salesvalue,
		0 as Discounts
		--,PDC.PrdBatCode
		--sl.LcnId,sl.PrdId,sl.PrdBatId 
		FROM StockLedger sl (NOLOCK)
		INNER JOIN @ProdDetail  PrdDet ON Sl.PrdBatId= PrdDet.PrdBatId and sl.PrdId = PrdDet.PrdId 
		INNER JOIN Location L (NOLOCK) ON L.LcnId = PrdDet.lcnid
		INNER JOIN Product PRD (NOLOCK) ON PRD.PrdId = sl.PrdId
		INNER JOIN ProductbatchDetails PBD (NOLOCK) ON pbd.Prdbatid=sl.PrdBatId and PBD.DefaultPrice=1 
		INNER JOIN BatchCreation BC WITH (NOLOCK) On BC.SlNo=PBD.SLNo AND BC.SelRte=1
		INNER JOIN ProductBatch PDC WITH (NOLOCK) ON PDC.PrdBatId = PrdDet.PrdBatId AND PDC.PrdId = PrdDet.PrdId
		AND Sl.lcnid = PrdDet.lcnid AND Sl.TransDate = PrdDet.TransDate	
		where (sl.SalClsStock+sl.UnSalClsStock+sl.OfferClsStock) <> 0
		ORDER BY sl.PrdId
END
If UPPER(@sVocType)='IDT'
BEGIN
		INSERT INTO @IDTTaxPercent (RefId,Prdslno,TaxPerc	) 
		SELECT A.IDTMngRefNo,A.PrdSlNo,SUM(A.TaxPerc) as TaxPerc 
		FROM IDTManagementProductTax A(NOLOCK)     
		INNER JOIN IDTManagement B(NOLOCK) ON A.IDTMngRefNo = B.IDTMngRefNo     
		WHERE B.IDTMngRefNo = @VoucherRefNo AND A.TaxableAmount > 0	 and StkMgmtTypeId=2	  
		GROUP BY A.IDTMngRefNo,A.PrdSlNo  

		INSERT INTO @VoucherExportNode3 
		SELECT Inventorytype,LocationName,ProductCode,ProductName,SUM(Quantity)Quantity,CONVERT(Numeric(18,6),SUM(SalesValue))SalesValue,
		0 as Discounts
		FROM (
		SELECT 
		CASE WHEN IDTMngDate<='2017-06-30' THEN
		'Sales Account VAT '+Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc))+'%' 
		ELSE
		'Sales Account GST '+Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc))+'%' END AS Inventorytype,LcnName as LocationName,
			Prdccode as ProductCode,PrdName+'~'+Prdccode as ProductName,(Qty) as Quantity,(PrdGrossAmount) as SalesValue ,SIP.PrdSlNo 
		FROM IDTManagement SI (NOLOCK)     
		INNER JOIN IDTManagementProduct SIP (NOLOCK) ON SI.IDTMngRefNo=SIP.IDTMngRefNo    
		INNER JOIN @IDTTaxPercent C ON C.RefId=SI.IDTMngRefNo and C.RefId=SIP.IDTMngRefNo and    SIP.PrdSlNo=C.Prdslno 
		INNER JOIN StdVocMaster VDT (NOLOCK) on SI.IDTMngRefNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,26,CHARINDEX(' Dated',VDT.Remarks)-26)))
		INNER JOIN Location L WITH (NOLOCK) ON l.LcnId=SI.Lcnid   
		INNER JOIN Product P WITH (NOLOCK) on P.prdid=Sip.prdid
		WHERE VDT.VocRefNo= @PiValue     and StkMgmtTypeId=2
		AND SI.IDTMngRefNo = @VoucherRefNo		
		) X GROUP BY  Inventorytype,LocationName,ProductCode,ProductName
END

If UPPER(@sVocType)='IDT IN'
BEGIN

		INSERT INTO @IDTTaxPercent (RefId,Prdslno,TaxPerc	) 
		SELECT A.IDTMngRefNo,A.PrdSlNo,SUM(A.TaxPerc) as TaxPerc 
		FROM IDTManagementProductTax A(NOLOCK)     
		INNER JOIN IDTManagement B(NOLOCK) ON A.IDTMngRefNo = B.IDTMngRefNo     
		WHERE B.IDTMngRefNo = @VoucherRefNo AND A.TaxableAmount > 0	 and StkMgmtTypeId=1	  
		GROUP BY A.IDTMngRefNo,A.PrdSlNo  

		INSERT INTO @VoucherExportNode3 
		SELECT Inventorytype,LocationName,ProductCode,ProductName,SUM(Quantity)Quantity,CONVERT(Numeric(18,6),SUM(SalesValue))SalesValue,
		0 as Discounts
		FROM (
		SELECT 
		CASE WHEN IDTMngDate<='2017-06-30' THEN
		'Purchase Account VAT '+Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc))+'%' 
		ELSE 'Purchase Account GST '+Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc))+'%' END
		AS Inventorytype,LcnName as LocationName,
			Prdccode as ProductCode,PrdName+'~'+Prdccode as ProductName,(Qty) as Quantity,(PrdGrossAmount) as SalesValue ,SIP.PrdSlNo 
		FROM IDTManagement SI (NOLOCK)     
		INNER JOIN IDTManagementProduct SIP (NOLOCK) ON SI.IDTMngRefNo=SIP.IDTMngRefNo    
		INNER JOIN @IDTTaxPercent C ON C.RefId=SI.IDTMngRefNo and C.RefId=SIP.IDTMngRefNo and    SIP.PrdSlNo=C.Prdslno 
		INNER JOIN StdVocMaster VDT (NOLOCK) on SI.IDTMngRefNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,26,CHARINDEX(' Dated',VDT.Remarks)-26))) 
		INNER JOIN Location L WITH (NOLOCK) ON l.LcnId=SI.Lcnid   
		INNER JOIN Product P WITH (NOLOCK) on P.prdid=Sip.prdid
		WHERE VDT.VocRefNo= @PiValue     and StkMgmtTypeId=1
		AND SI.IDTMngRefNo = @VoucherRefNo		
		) X GROUP BY  Inventorytype,LocationName,ProductCode,ProductName
END

If UPPER(@sVocType)<>'SALES' AND UPPER(@sVocType)<>'SALES- REPLACEMENT IN' AND UPPER(@sVocType)<>'SALES- REPLACEMENT OUT' 
AND UPPER(@sVocType)<>'PURCHASE RETURN' AND UPPER(@sVocType)<>'PURCHASE' AND UPPER(@sVocType)<>'SALES RETURN' and UPPER(@sVocType)<>'JOURNAL'
AND UPPER(@sVocType)<>'Stock Ledger' AND UPPER(@sVocType)<>'IDT' AND  UPPER(@sVocType)<>'IDT IN'
	Begin
		INSERT INTO @VoucherExportNode3
		Select 'Null' as  Inventorytype,'Null' as LocationName,'Null' as ProductCode,'Null' as ProductName,0 as Quantity,0 as salesvalue,
		0 as Discounts
		End
		If Not exists (select * from @VoucherExportNode3)
		Begin
		INSERT INTO @VoucherExportNode3
		Select 'Null' as  Inventorytype,'Null' as LocationName,'Null' as ProductCode,'Null' as ProductName,0 as Quantity,0 as salesvalue,
		0 as Discounts
	END
RETURN
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE name='Fn_VoucherExportNode4' AND XTYPE='TF')
DROP  FUNCTION Fn_VoucherExportNode4
GO
CREATE FUNCTION Fn_VoucherExportNode4(@sVocType as varchar(200),@PiValue as varchar(200),@VoucherRefNo AS Varchar(200))
RETURNS @VoucherExportNode4 TABLE
(
	BillNo		varchar(50),
	Amount		Numeric(18,6),
	DealerName		varchar(50)
)
AS
/***************************************************************************************************
* FUNCTION	: Fn_VoucherExportNode4
* PURPOSE	: Returns the Adjustment Details of Bill
* NOTES		:
* CREATED	: Gopikrishnan.R - 12.12.2012
* MODIFIED
* DATE			AUTHOR			DESCRIPTION
*21/02/2013		Gopikrishnan	Nolock is added
-------------------------------------------------------------------------------------------------
**************************************************************************************************/
BEGIN
If @VoucherRefNo<>'Manual Entry'
Begin
If UPPER(@sVocType)='SALES' 
BEGIN
	INSERT INTO @VoucherExportNode4
		select Distinct * from 
		(
		Select distinct CDH.Srno as BillNo,-(DiffAmount) AS Amount,CmpRtrCode from ReplacementHd RH WITH (NOLOCK) Inner Join SalesInvoice SI WITH (NOLOCK) on si.SalId=RH.Salid
		inner join CreditNoteReplacementDT CDT WITH (NOLOCK) on cdt.RepNo=RH.RepRefNo  and cdt.Replacement=1
		inner join CreditNoteReplacementHD CDH WITH (NOLOCK) on cdh.CNRRefNo=cdt.CNRRefNo 
		and SalInvNo=@VoucherRefNo 
		INNER JOIN Retailer R WITH (NOLOCK) ON SI.RtrId=R.RtrId
		UNION
		SELECT DISTINCT CrNoteNumber as BillNo,-(RH.CrAdjAmount) as Amount,CmpRtrCode from SalInvCrNoteAdj RH WITH (NOLOCK) Inner join SalesInvoice SI WITH (NOLOCK) on SI.SalId=RH.Salid and SalInvNo=@VoucherRefNo and Dlvsts not in (3)
		INNER JOIN Retailer R WITH (NOLOCK) ON SI.RtrId=R.RtrId		
		UNION
		SELECT DISTINCT DbNoteNumber as BillNo,(RH.DbAdjAmount) as Amount,CmpRtrCode from SalInvDBNoteAdj RH WITH (NOLOCK) Inner join SalesInvoice SI WITH (NOLOCK) on SI.SalId=RH.Salid and SalInvNo=@VoucherRefNo and Dlvsts not in (3)
		INNER JOIN Retailer R WITH (NOLOCK) ON SI.RtrId=R.RtrId
		Union 
		SELECT Distinct 'Null' as Billno,0 as  Amount,'Null' RtrName from SalesInvoice WITH (NOLOCK) where salinvno not in (select Distinct salinvno from 
		(Select distinct Salinvno from ReplacementHd RH WITH (NOLOCK) Inner Join SalesInvoice SI WITH (NOLOCK) on si.SalId=RH.Salid 
		and SalInvNo=@VoucherRefNo 
		UNION
		SELECT distinct Salinvno from SalInvCrNoteAdj RH WITH (NOLOCK)Inner join SalesInvoice SI WITH (NOLOCK) on SI.SalId=RH.Salid and SalInvNo=@VoucherRefNo and Dlvsts not in (3)
		UNION
		SELECT distinct Salinvno from SalInvDBNoteAdj RH WITH (NOLOCK) Inner join SalesInvoice SI WITH (NOLOCK) on SI.SalId=RH.Salid and SalInvNo=@VoucherRefNo and Dlvsts not in (3)) B) and SalInvNo=@VoucherRefNo)A
--UNION
--SELECT distinct 'Invoice Discount' as BillNo,SalInvLvlDisc as Amount from  SalesInvoice where  SalInvNo=@VoucherRefNo  and SalInvLvlDisc>0
--UNION
--SELECT distinct 'OnAccount' as BillNo,OnAccountAmount as Amount from  SalesInvoice where  SalInvNo=@VoucherRefNo  and OnAccountAmount>0
End
--If UPPER(@sVocType)<>'SALES' AND (@sVocType)<>'RECEIPT' 
--Begin
--INSERT INTO @VoucherExportNode4
--select distinct 'Null' as Billno,0 as Amount 
--END
If UPPER(@sVocType)='RECEIPT'
BEGIN
If Exists (select Voctype from Stdvocmaster where Remarks lIKE '%' + CAST(@VoucherRefNo as nVarChar(25)) + '%' and Remarks Not like '%Posted from Receipt Cancellation%' and VocRefNo=@PiValue 
Group by VocType having count(Vocrefno)>1)
---vOCREFNO=@Pivalue is added by Gopikrishnan at 04/05/2013
BEGIN
	INSERT INTO @VoucherExportNode4
	SELECT Distinct si.salinvno as BillNo,RI.SALINVAMT as Amount,CmpRtrCode from ReceiptInvoice RI WITH (NOLOCK)
	inner join StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,21,CHARINDEX('(',VDT.Remarks)-21)))
	Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId and Si.SalInvNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,40,CHARINDEX('(',VDT.Remarks)-22)))
	AND RI.InvRcpNo=@VoucherRefNo and VDT.VocRefNo=@PiValue 
	INNER JOIN Retailer R WITH (NOLOCK) ON SI.RtrId=R.RtrId
	Union all
	SELECT Distinct si.salinvno as BillNo,RI.SALINVAMT  as Amount,CmpRtrCode  from ReceiptInvoice RI WITH (NOLOCK)
	inner join StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,21,CHARINDEX('(',VDT.Remarks)-21)))
	Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId and Si.SalInvNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,40,CHARINDEX('(',VDT.Remarks)-21))) 
	AND RI.InvRcpNo=@VoucherRefNo and VDT.VocRefNo=@PiValue 
	INNER JOIN Retailer R WITH (NOLOCK) ON SI.RtrId=R.RtrId
	Union all
	SELECT Distinct si.salinvno as BillNo,RI.SALINVAMT  as Amount,CmpRtrCode  from ReceiptInvoice RI
	inner join StdvocMaster VDT on RI.InvRcpNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,21,CHARINDEX('(',VDT.Remarks)-21)))
	Inner Join SalesInvoice si on si.SalId=RI.SalId and Si.SalInvNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,40,CHARINDEX('(',VDT.Remarks)-14))) 
	AND RI.InvRcpNo=@VoucherRefNo and VDT.VocRefNo=@PiValue 
	INNER JOIN Retailer R WITH (NOLOCK) ON SI.RtrId=R.RtrId
	Union all
	SELECT Distinct si.salinvno as BillNo,RI.SALINVAMT  as Amount,CmpRtrCode  from ReceiptInvoice RI WITH (NOLOCK)
	inner join StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,21,CHARINDEX('(',VDT.Remarks)-21)))
	Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId and Si.SalInvNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,40,CHARINDEX('(',VDT.Remarks)-17))) 
	AND RI.InvRcpNo=@VoucherRefNo and VDT.VocRefNo=@PiValue 
	INNER JOIN Retailer R WITH (NOLOCK) ON SI.RtrId=R.RtrId
	Union all
	SELECT Distinct si.salinvno as BillNo,RI.SALINVAMT  as Amount,CmpRtrCode from ReceiptInvoice RI WITH (NOLOCK)
	inner join StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,21,CHARINDEX('(',VDT.Remarks)-21)))
	Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId and Si.SalInvNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,40,CHARINDEX('(',VDT.Remarks)-18))) 
	AND RI.InvRcpNo=@VoucherRefNo and VDT.VocRefNo=@PiValue 
	INNER JOIN Retailer R WITH (NOLOCK) ON SI.RtrId=R.RtrId
	Union all
	SELECT Distinct si.salinvno as BillNo,RI.SALINVAMT  as Amount,CmpRtrCode   from ReceiptInvoice RI WITH (NOLOCK)
	inner join StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,21,CHARINDEX('(',VDT.Remarks)-21)))
	Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId and Si.SalInvNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,40,CHARINDEX('(',VDT.Remarks)-19))) 
	AND RI.InvRcpNo=@VoucherRefNo
	and VDT.VocRefNo=@PiValue
	INNER JOIN Retailer R WITH (NOLOCK) ON SI.RtrId=R.RtrId
	Union all
	SELECT Distinct si.salinvno as BillNo,RI.SALINVAMT  as Amount,CmpRtrCode from ReceiptInvoice RI WITH (NOLOCK)
	inner join StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,35,CHARINDEX('(',VDT.Remarks)-35)))
	Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId and VDT.Remarks like '%Posted From Receipt Cash Discount%'
	 AND RI.InvRcpNo=Right(@VoucherRefNo,10) and VDT.VocRefNo=@PiValue
	 INNER JOIN Retailer R WITH (NOLOCK) ON SI.RtrId=R.RtrId 
	Union all
	SELECT Distinct CNA.NoteNo as BillNo,(Salinvamt) as Amount,CmpRtrCode from ReceiptInvoice RI WITH (NOLOCK)
	inner join StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,21,CHARINDEX('(',VDT.Remarks)-21)))
	Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId and Si.SalInvNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,40,CHARINDEX('(',VDT.Remarks)-22))) 
	Inner Join CRDBNoteAdjustment CNA WITH (NOLOCK) ON CNA.SalId=Si.SalId and CNA.SalId=RI.SalId 
	Inner Join DebitNoteRetailer DBN WITH (NOLOCK) ON DBN.DbNoteNumber=CNA.NoteNo AND RI.InvRcpNo=CNA.InvRcpNo AND RI.InvRcpNo=@VoucherRefNo
	and VDT.VocRefNo=@PiValue AND InvRcpMode=6 and SalInvAmt>0
	INNER JOIN Retailer R ON SI.RtrId=R.RtrId
	Union all
	SELECT Distinct CNA.NoteNo as BillNo,Salinvamt as Amount,CmpRtrCode from ReceiptInvoice RI WITH (NOLOCK)
	inner join StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,21,CHARINDEX('(',VDT.Remarks)-21)))
	Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId and Si.SalInvNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,40,CHARINDEX('(',VDT.Remarks)-14))) 
	Inner Join CRDBNoteAdjustment CNA WITH (NOLOCK) ON CNA.SalId=Si.SalId and CNA.SalId=RI.SalId 
	Inner Join DebitNoteRetailer DBN WITH (NOLOCK) ON DBN.DbNoteNumber=CNA.NoteNo AND RI.InvRcpNo=CNA.InvRcpNo AND RI.InvRcpNo=@VoucherRefNo
	and VDT.VocRefNo=@PiValue AND InvRcpMode=6 and SalInvAmt>0
	INNER JOIN Retailer R WITH (NOLOCK) ON SI.RtrId=R.RtrId
	Union all
	SELECT Distinct CNA.NoteNo as BillNo,Salinvamt as Amount,CmpRtrCode from ReceiptInvoice RI WITH (NOLOCK)
	inner join StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,21,CHARINDEX('(',VDT.Remarks)-21)))
	Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId and Si.SalInvNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,40,CHARINDEX('(',VDT.Remarks)-17))) 
	Inner Join CRDBNoteAdjustment CNA WITH (NOLOCK) ON CNA.SalId=Si.SalId and CNA.SalId=RI.SalId 
	Inner Join DebitNoteRetailer DBN WITH (NOLOCK) ON DBN.DbNoteNumber=CNA.NoteNo AND RI.InvRcpNo=CNA.InvRcpNo AND RI.InvRcpNo=@VoucherRefNo
	and VDT.VocRefNo=@PiValue AND InvRcpMode=6 and SalInvAmt>0
	INNER JOIN Retailer R WITH (NOLOCK) ON SI.RtrId=R.RtrId
	Union all
	SELECT Distinct CNA.NoteNo as BillNo,Salinvamt as Amount,CmpRtrCode from ReceiptInvoice RI WITH (NOLOCK)
	inner join StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,21,CHARINDEX('(',VDT.Remarks)-21)))
	Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId and Si.SalInvNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,40,CHARINDEX('(',VDT.Remarks)-18))) 
	Inner Join CRDBNoteAdjustment CNA WITH (NOLOCK) ON CNA.SalId=Si.SalId and CNA.SalId=RI.SalId 
	Inner Join DebitNoteRetailer DBN WITH (NOLOCK) ON DBN.DbNoteNumber=CNA.NoteNo AND RI.InvRcpNo=CNA.InvRcpNo AND RI.InvRcpNo=@VoucherRefNo
	and VDT.VocRefNo=@PiValue AND InvRcpMode=6 and SalInvAmt>0
	INNER JOIN Retailer R WITH (NOLOCK) ON SI.RtrId=R.RtrId
	Union all
	SELECT Distinct CNA.NoteNo as BillNo,Salinvamt as Amount,CmpRtrCode from ReceiptInvoice RI WITH (NOLOCK)
	inner join StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,21,CHARINDEX('(',VDT.Remarks)-21)))
	Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId and Si.SalInvNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,40,CHARINDEX('(',VDT.Remarks)-21))) 
	Inner Join CRDBNoteAdjustment CNA WITH (NOLOCK) ON CNA.SalId=Si.SalId and CNA.SalId=RI.SalId 
	Inner Join DebitNoteRetailer DBN WITH (NOLOCK) ON DBN.DbNoteNumber=CNA.NoteNo AND RI.InvRcpNo=CNA.InvRcpNo AND RI.InvRcpNo=@VoucherRefNo
	and VDT.VocRefNo=@PiValue AND InvRcpMode=6 and SalInvAmt>0
	INNER JOIN Retailer R WITH (NOLOCK) ON SI.RtrId=R.RtrId
	Union all
	SELECT Distinct CNA.NoteNo as BillNo,Salinvamt as Amount,CmpRtrCode from ReceiptInvoice RI WITH (NOLOCK)
	inner join StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,21,CHARINDEX('(',VDT.Remarks)-21)))
	Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId and Si.SalInvNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,40,CHARINDEX('(',VDT.Remarks)-19))) 
	Inner Join CRDBNoteAdjustment CNA WITH (NOLOCK) ON CNA.SalId=Si.SalId and CNA.SalId=RI.SalId 
	Inner Join DebitNoteRetailer DBN WITH (NOLOCK) ON DBN.DbNoteNumber=CNA.NoteNo AND RI.InvRcpNo=CNA.InvRcpNo AND RI.InvRcpNo=@VoucherRefNo
	and VDT.VocRefNo=@PiValue AND InvRcpMode=6 and SalInvAmt>0
	INNER JOIN Retailer R WITH (NOLOCK) ON SI.RtrId=R.RtrId
	Union all
	SELECT Distinct CNA.NoteNo as BillNo,-(Salinvamt) as Amount,CmpRtrCode from ReceiptInvoice RI WITH (NOLOCK)
	inner join StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,21,CHARINDEX('(',VDT.Remarks)-21)))
	Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId and Si.SalInvNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,40,CHARINDEX('(',VDT.Remarks)-22))) 
	Inner Join CRDBNoteAdjustment CNA WITH (NOLOCK) ON CNA.SalId=Si.SalId and CNA.SalId=RI.SalId 
	Inner Join CreditNoteRetailer DBN WITH (NOLOCK) ON DBN.CrNoteNumber=CNA.NoteNo AND RI.InvRcpNo=CNA.InvRcpNo AND RI.InvRcpNo=@VoucherRefNo
	and VDT.VocRefNo=@PiValue AND InvRcpMode=5 and SalInvAmt>0
	INNER JOIN Retailer R WITH (NOLOCK) ON SI.RtrId=R.RtrId
	Union all
	SELECT Distinct CNA.NoteNo as BillNo,-(Salinvamt) as Amount,CmpRtrCode from ReceiptInvoice RI WITH (NOLOCK)
	inner join StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,21,CHARINDEX('(',VDT.Remarks)-21)))
	Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId and Si.SalInvNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,40,CHARINDEX('(',VDT.Remarks)-21))) 
	Inner Join CRDBNoteAdjustment CNA WITH (NOLOCK) ON CNA.SalId=Si.SalId and CNA.SalId=RI.SalId 
	Inner Join CreditNoteRetailer DBN WITH (NOLOCK) ON DBN.CrNoteNumber=CNA.NoteNo AND RI.InvRcpNo=CNA.InvRcpNo AND RI.InvRcpNo=@VoucherRefNo
	and VDT.VocRefNo=@PiValue AND InvRcpMode=5 and SalInvAmt>0
	INNER JOIN Retailer R WITH (NOLOCK) ON SI.RtrId=R.RtrId
	Union all
	SELECT Distinct CNA.NoteNo as BillNo,-(Salinvamt) as Amount,CmpRtrCode from ReceiptInvoice RI WITH (NOLOCK)
	inner join StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,21,CHARINDEX('(',VDT.Remarks)-21)))
	Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId and Si.SalInvNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,40,CHARINDEX('(',VDT.Remarks)-14))) 
	Inner Join CRDBNoteAdjustment CNA WITH (NOLOCK) ON CNA.SalId=Si.SalId and CNA.SalId=RI.SalId 
	Inner Join CreditNoteRetailer DBN WITH (NOLOCK) ON DBN.CrNoteNumber=CNA.NoteNo AND RI.InvRcpNo=CNA.InvRcpNo AND RI.InvRcpNo=@VoucherRefNo
	and VDT.VocRefNo=@PiValue AND InvRcpMode=5 and SalInvAmt>0
	INNER JOIN Retailer R WITH (NOLOCK) ON SI.RtrId=R.RtrId
	Union all
	SELECT Distinct CNA.NoteNo as BillNo,-(Salinvamt) as Amount,CmpRtrCode from ReceiptInvoice RI WITH (NOLOCK)
	inner join StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,21,CHARINDEX('(',VDT.Remarks)-21)))
	Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId and Si.SalInvNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,40,CHARINDEX('(',VDT.Remarks)-17))) 
	Inner Join CRDBNoteAdjustment CNA WITH (NOLOCK) ON CNA.SalId=Si.SalId and CNA.SalId=RI.SalId 
	Inner Join CreditNoteRetailer DBN WITH (NOLOCK) ON DBN.CrNoteNumber=CNA.NoteNo AND RI.InvRcpNo=CNA.InvRcpNo AND RI.InvRcpNo=@VoucherRefNo
	and VDT.VocRefNo=@PiValue AND InvRcpMode=5 and SalInvAmt>0
	INNER JOIN Retailer R WITH (NOLOCK) ON SI.RtrId=R.RtrId
	Union all
	SELECT Distinct CNA.NoteNo as BillNo,-(Salinvamt) as Amount,CmpRtrCode from ReceiptInvoice RI WITH (NOLOCK)
	inner join StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,21,CHARINDEX('(',VDT.Remarks)-21)))
	Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId and Si.SalInvNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,40,CHARINDEX('(',VDT.Remarks)-18))) 
	Inner Join CRDBNoteAdjustment CNA WITH (NOLOCK) ON CNA.SalId=Si.SalId and CNA.SalId=RI.SalId 
	Inner Join CreditNoteRetailer DBN WITH (NOLOCK) ON DBN.CrNoteNumber=CNA.NoteNo AND RI.InvRcpNo=CNA.InvRcpNo AND RI.InvRcpNo=@VoucherRefNo
	and VDT.VocRefNo=@PiValue AND InvRcpMode=5 and SalInvAmt>0
	INNER JOIN Retailer R WITH (NOLOCK) ON SI.RtrId=R.RtrId
	UNION all
	SELECT DISTINCT CNA.NoteNo as BillNo,-(Salinvamt) as Amount,CmpRtrCode from ReceiptInvoice RI WITH (NOLOCK)
	inner join StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,21,CHARINDEX('(',VDT.Remarks)-21)))
	Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId and Si.SalInvNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,40,CHARINDEX('(',VDT.Remarks)-19))) 
	Inner Join CRDBNoteAdjustment CNA WITH (NOLOCK) ON CNA.SalId=Si.SalId and CNA.SalId=RI.SalId 
	Inner Join CreditNoteRetailer DBN WITH (NOLOCK) ON DBN.CrNoteNumber=CNA.NoteNo AND RI.InvRcpNo=CNA.InvRcpNo AND RI.InvRcpNo=@VoucherRefNo
	AND VDT.VocRefNo=@PiValue AND InvRcpMode=5 AND SalInvAmt>0
	INNER JOIN Retailer R WITH (NOLOCK) ON  SI.RtrId=R.RtrId
END
ELSE
BEGIN
	INSERT INTO @VoucherExportNode4
	SELECT Distinct si.salinvno as BillNo,RI.SALINVAMT  as Amount,CmpRtrCode from ReceiptInvoice RI WITH (NOLOCK)
	inner join StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=Right(Left(VDT.Remarks,30),10)
	Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId AND RI.InvRcpNo=@VoucherRefNo and VDT.VocRefNo=@PiValue 
	INNER JOIN Retailer R WITH (NOLOCK) ON SI.RtrId=R.RtrId	
	Union all
	SELECT Distinct CNA.NoteNo as BillNo,(Salinvamt) as Amount,CmpRtrCode from ReceiptInvoice RI WITH (NOLOCK)
	inner join StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=Right(Left(VDT.Remarks,30),10)
	Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId 
	Inner Join CRDBNoteAdjustment CNA WITH (NOLOCK) ON CNA.SalId=Si.SalId and CNA.SalId=RI.SalId 
	Inner Join DebitNoteRetailer DBN WITH (NOLOCK) ON DBN.DbNoteNumber=CNA.NoteNo AND RI.InvRcpNo=CNA.InvRcpNo AND RI.InvRcpNo=@VoucherRefNo
	and VDT.VocRefNo=@PiValue AND InvRcpMode=6 and SalInvAmt>0
	INNER JOIN Retailer R WITH (NOLOCK) ON SI.RtrId=R.RtrId
	Union all
	SELECT DISTINCT CNA.NoteNo as BillNo,-(Salinvamt) as Amount,CmpRtrCode from ReceiptInvoice RI WITH (NOLOCK)
	inner join StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=Right(Left(VDT.Remarks,30),10)
	Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId 
	Inner Join CRDBNoteAdjustment CNA WITH (NOLOCK) ON CNA.SalId=Si.SalId and CNA.SalId=RI.SalId 
	Inner Join CreditNoteRetailer DBN WITH (NOLOCK) ON DBN.CrNoteNumber=CNA.NoteNo AND RI.InvRcpNo=CNA.InvRcpNo AND RI.InvRcpNo=@VoucherRefNo
	and VDT.VocRefNo=@PiValue AND InvRcpMode=5 and SalInvAmt>0
	INNER JOIN Retailer R WITH (NOLOCK) ON SI.RtrId=R.RtrId
END
End
If UPPER(@sVocType)='PAYMENT'
BEGIN
INSERT INTO @VoucherExportNode4
SELECT DISTINCT Cmpinvno as Billno,-(PPG.PayAmount) as Amount,SpmName  from PurchaseReceipt PR WITH (NOLOCK) inner join PurchasePaymentGRN PPG WITH (NOLOCK) ON PR.PurRcptId=PPG.PurRcptId Inner Join
PurchasePayment PP WITH (NOLOCK) ON PP.PayAdvNo=PPG.PayAdvNo and PPG.PayAdvNo=LEFT(@VoucherRefNo,10)
INNER JOIN StdVocMaster VDT WITH (NOLOCK) on PP.PayAdvNo=LEFT(@VoucherRefNo,10)
and VDT.Vocrefno=@PiValue and VDT.Remarks  like '%Cheque%' 
INNER JOIN Supplier S WITH (NOLOCK) ON PP.SpmId=S.SpmId
Union
SELECT DISTINCT Cmpinvno as Billno,-(PPG.PayAmount) as Amount,SpmName from PurchaseReceipt PR WITH (NOLOCK) inner join PurchasePaymentGRN PPG WITH (NOLOCK) ON PR.PurRcptId=PPG.PurRcptId Inner Join
PurchasePayment PP WITH (NOLOCK) ON PP.PayAdvNo=PPG.PayAdvNo and PPG.PayAdvNo=Left(@VoucherRefNo,10)
Inner join StdVocMaster VDT WITH (NOLOCK) on PP.PayAdvNo=Left(@VoucherRefNo,10)
and VDT.Vocrefno=@PiValue and VDT.Remarks  like '%RTGS%' 
INNER JOIN Supplier S WITH (NOLOCK) ON PP.SpmId=S.SpmId
Union
SELECT DISTINCT Cmpinvno as Billno,-(PPG.PayAmount) as Amount,SpmName CmpRtrCode from PurchaseReceipt PR WITH (NOLOCK) inner join PurchasePaymentGRN PPG WITH (NOLOCK) ON PR.PurRcptId=PPG.PurRcptId Inner Join
PurchasePayment PP WITH (NOLOCK) ON PP.PayAdvNo=PPG.PayAdvNo and PPG.PayAdvNo=Left(@VoucherRefNo,10)
Inner join StdVocMaster VDT WITH (NOLOCK) on PP.PayAdvNo=Left(@VoucherRefNo,10)
and VDT.Vocrefno=@PiValue and  VDT.Remarks  like '%DD%'
INNER JOIN Supplier S WITH (NOLOCK) ON PP.SpmId=S.SpmId
UNION
SELECT DISTINCT Cmpinvno as Billno,-(PPG.PayAmount) as Amount,SpmName from PurchaseReceipt PR WITH (NOLOCK) inner join PurchasePaymentGRN PPG WITH (NOLOCK) ON PR.PurRcptId=PPG.PurRcptId Inner Join
PurchasePayment PP WITH (NOLOCK) ON PP.PayAdvNo=PPG.PayAdvNo and PPG.PayAdvNo=Left(@VoucherRefNo,10)
Inner join StdVocMaster VDT WITH (NOLOCK) on PP.PayAdvNo=Left(@VoucherRefNo,10)
and VDT.Vocrefno=@PiValue and VDT.Remarks Like '%Posted from Payment Register%' and VDT.Remarks not like '%Cheque%' and VDT.Remarks not like '%RTGS%' and VDT.Remarks not like '%DD%'  and AutoGen=1
INNER JOIN Supplier S WITH (NOLOCK) ON PP.SpmId=S.SpmId
--Added By Sathishkumar Veeramani 2013/01/18
UNION 
--Credit Note
SELECT DISTINCT CDA.NoteNo,AdjAmount AS Amount,SpmName FROM PurchaseReceipt PR WITH (NOLOCK)
INNER JOIN PurchasePaymentGRN PPG WITH (NOLOCK) ON PR.PurRcptId=PPG.PurRcptId 
INNER JOIN PurchasePayment PP WITH (NOLOCK) ON PP.PayAdvNo=PPG.PayAdvNo AND PPG.PayAdvNo=LEFT(@VoucherRefNo,10)
INNER JOIN StdVocMaster VDT WITH (NOLOCK) on PP.PayAdvNo=LEFT(@VoucherRefNo,10)
INNER JOIN CRDBNotePayAdjustment CDA WITH (NOLOCK) ON PP.PayAdvNo = CDA.PayAdvNo AND CDA.AdjMode = 2
INNER JOIN Supplier S WITH (NOLOCK) ON PP.SpmId=S.SpmId
UNION
--Debit Note
SELECT DISTINCT CDA.NoteNo,-1 * AdjAmount AS Amount,SpmName FROM PurchaseReceipt PR WITH (NOLOCK)
INNER JOIN PurchasePaymentGRN PPG WITH (NOLOCK) ON PR.PurRcptId=PPG.PurRcptId 
INNER JOIN PurchasePayment PP WITH (NOLOCK) ON PP.PayAdvNo=PPG.PayAdvNo AND PPG.PayAdvNo=LEFT(@VoucherRefNo,10)
INNER JOIN StdVocMaster VDT WITH (NOLOCK) on PP.PayAdvNo=LEFT(@VoucherRefNo,10)
INNER JOIN CRDBNotePayAdjustment CDA WITH (NOLOCK) ON PP.PayAdvNo = CDA.PayAdvNo AND CDA.AdjMode = 1
INNER JOIN Supplier S WITH (NOLOCK) ON PP.SpmId=S.SpmId
END--Till Here
If UPPER(@sVocType)='JOURNAL' 
BEGIN
INSERT INTO @VoucherExportNode4
SELECT Distinct si.salinvno as BillNo,RI.SALINVAMT  as Amount,'Null' RtrName  from ReceiptInvoice RI WITH (NOLOCK)
inner join StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,33,CHARINDEX('(',VDT.Remarks)-33)))
Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId and Si.SalInvNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,53,CHARINDEX('(',VDT.Remarks)-32)))
AND RI.InvRcpNo=@VoucherRefNo and VDT.VocRefNo=@PiValue and VDT.Remarks like '%Posted From Receipt CanCellation%' 
UNION
SELECT Distinct si.salinvno as BillNo,RI.SALINVAMT  as Amount,'Null' RtrName  from ReceiptInvoice RI WITH (NOLOCK)
inner join StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,33,CHARINDEX('(',VDT.Remarks)-33)))
Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId and Si.SalInvNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,53,CHARINDEX('(',VDT.Remarks)-33)))
AND RI.InvRcpNo=@VoucherRefNo and VDT.VocRefNo=@PiValue and VDT.Remarks like '%Posted From Receipt CanCellation%' 
UNION
SELECT Distinct si.salinvno as BillNo,RI.SALINVAMT  as Amount,'Null' RtrName  from ReceiptInvoice RI WITH (NOLOCK)
inner join StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,33,CHARINDEX('(',VDT.Remarks)-33)))
Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId and Si.SalInvNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,53,CHARINDEX('(',VDT.Remarks)-37)))
AND RI.InvRcpNo=@VoucherRefNo and VDT.VocRefNo=@PiValue and VDT.Remarks like '%Posted From Receipt CanCellation%' 
UNION
SELECT Distinct si.salinvno as BillNo,RI.SALINVAMT  as Amount,'Null' RtrName  from ReceiptInvoice RI WITH (NOLOCK)
inner join StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,33,CHARINDEX('(',VDT.Remarks)-33)))
Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId and Si.SalInvNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,53,CHARINDEX('(',VDT.Remarks)-35))) 
AND RI.InvRcpNo=@VoucherRefNo and VDT.VocRefNo=@PiValue and VDT.Remarks like '%Posted From Receipt CanCellation%' 
UNION
SELECT Distinct si.salinvno as BillNo,RI.SALINVAMT  as Amount,'Null' RtrName  from ReceiptInvoice RI WITH (NOLOCK)
inner join StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,33,CHARINDEX('(',VDT.Remarks)-33)))
Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId and Si.SalInvNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,53,CHARINDEX('(',VDT.Remarks)-30)))
AND RI.InvRcpNo=@VoucherRefNo and VDT.VocRefNo=@PiValue and VDT.Remarks like '%Posted From Receipt CanCellation%' 
UNION
SELECT Distinct si.salinvno as BillNo,RI.SALINVAMT  as Amount,'Null' RtrName  from ReceiptInvoice RI WITH (NOLOCK)
inner join StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,33,CHARINDEX('(',VDT.Remarks)-33)))
Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId and Si.SalInvNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,53,CHARINDEX('(',VDT.Remarks)-34))) 
AND RI.InvRcpNo=@VoucherRefNo and VDT.VocRefNo=@PiValue and VDT.Remarks like '%Posted From Receipt CanCellation%'
--Added By Sathishkumar Veeramani 2013/01/18  
--Credit Note Details 
UNION  
SELECT DISTINCT SI.SalInvNo AS BillNo,SCR.CrAdjAmount AS Amount,RtrName FROM StdVocMaster A WITH (NOLOCK) 
INNER JOIN CreditNoteRetailer PR WITH (NOLOCK) ON PR.CrNoteNumber = SUBSTRING(A.Remarks,34,LEN(PR.CrNoteNumber))AND PR.CrNoteNumber = @VoucherRefNo
INNER JOIN SalInvCrNoteAdj SCR WITH (NOLOCK) ON SCR.CrNoteNumber = PR.CrNoteNumber
INNER JOIN SalesInvoice SI WITH (NOLOCK) ON SI.SalId = SCR.SalId
INNER JOIN Retailer R WITH (NOLOCK)ON SI.RtrId = R.RtrId 
WHERE A.Remarks LIKE '%Credit Note Retailer%'
UNION
SELECT DISTINCT RI.InvRcpNo AS BillNo,SCR.AdjAmount AS Amount,RtrName FROM StdVocMaster A WITH (NOLOCK)
INNER JOIN CreditNoteRetailer PR WITH (NOLOCK) ON PR.CrNoteNumber = SUBSTRING(A.Remarks,34,LEN(PR.CrNoteNumber)) AND PR.CrNoteNumber = @VoucherRefNo
INNER JOIN CRDBNoteAdjustment SCR WITH (NOLOCK)ON PR.CrNoteNumber = SCR.NoteNo AND AdjMode = 5 
INNER JOIN SalesInvoice SI WITH (NOLOCK)ON SI.SalId = SCR.SalId AND SCR.SalId = SI.SalId
INNER JOIN ReceiptInvoice RI WITH (NOLOCK)ON RI.SalId = SI.SalId AND RI.InvRcpNo = SCR.InvRcpNo
INNER JOIN Retailer R WITH (NOLOCK)ON SI.RtrId = R.RtrId
WHERE A.Remarks LIKE '%Credit Note Retailer%'
UNION
SELECT DISTINCT C.PayAdvNo AS BillNo,AdjAmount,SpmName FROM StdVocMaster A WITH (NOLOCK) 
INNER JOIN CreditNoteSupplier PR WITH (NOLOCK) ON PR.CrNoteNumber = SUBSTRING(A.Remarks,34,LEN(PR.CrNoteNumber)) AND PR.CrNoteNumber = @VoucherRefNo
INNER JOIN CRDBNotePayAdjustment B WITH (NOLOCK) ON PR.CrNoteNumber = B.NoteNo AND AdjMode = 2
INNER JOIN PurchasePayment C WITH (NOLOCK) ON C.PayAdvNo = B.PayAdvNo
INNER JOIN Supplier D WITH (NOLOCK) ON C.SpmId = D.SpmId
WHERE A.Remarks LIKE '%Credit Note Supplier%'
--Debit Note Details
UNION
SELECT DISTINCT SI.SalInvNo AS BillNo,SCR.DbAdjAmount AS Amount,RtrName FROM StdVocMaster A WITH (NOLOCK) 
INNER JOIN DebitNoteRetailer PR WITH (NOLOCK) ON PR.DbNoteNumber = SUBSTRING(A.Remarks,33,LEN(PR.DbNoteNumber)) AND PR.DbNoteNumber = @VoucherRefNo
INNER JOIN SalInvDbNoteAdj SCR WITH (NOLOCK) ON SCR.DbNoteNumber = PR.DbNoteNumber
INNER JOIN SalesInvoice SI WITH (NOLOCK) ON SI.SalId = SCR.SalId
INNER JOIN Retailer R WITH (NOLOCK)ON SI.RtrId = R.RtrId
WHERE A.Remarks LIKE '%Debit Note Retailer%' 
UNION
SELECT DISTINCT RI.InvRcpNo AS BillNo,SCR.AdjAmount AS Amount,RtrName FROM StdVocMaster A WITH (NOLOCK)
INNER JOIN DebitNoteRetailer PR WITH (NOLOCK) ON PR.DbNoteNumber = SUBSTRING(A.Remarks,33,LEN(PR.DbNoteNumber)) AND PR.DbNoteNumber = @VoucherRefNo
INNER JOIN CRDBNoteAdjustment SCR WITH (NOLOCK)ON PR.DbNoteNumber = SCR.NoteNo AND AdjMode = 6 
INNER JOIN SalesInvoice SI WITH (NOLOCK)ON SI.SalId = SCR.SalId AND SCR.SalId = SI.SalId
INNER JOIN ReceiptInvoice RI WITH (NOLOCK)ON RI.SalId = SI.SalId AND RI.InvRcpNo = SCR.InvRcpNo
INNER JOIN Retailer R WITH (NOLOCK)ON SI.RtrId = R.RtrId
WHERE A.Remarks LIKE '%Debit Note Retailer%'
UNION
SELECT DISTINCT C.PayAdvNo AS BillNo,AdjAmount as Amount,SpmName FROM StdVocMaster A WITH (NOLOCK) 
INNER JOIN DebitNoteSupplier PR WITH (NOLOCK) ON PR.DbNoteNumber = SUBSTRING(A.Remarks,33,LEN(PR.DbNoteNumber)) AND PR.DbNoteNumber = @VoucherRefNo
INNER JOIN CRDBNotePayAdjustment B WITH (NOLOCK) ON PR.DbNoteNumber = B.NoteNo AND AdjMode = 1
INNER JOIN PurchasePayment C WITH (NOLOCK) ON C.PayAdvNo = B.PayAdvNo
INNER JOIN Supplier D WITH (NOLOCK) ON C.SpmId = D.SpmId
WHERE A.Remarks LIKE '%Debit Note Supplier%'
END--Till Here
IF NOT EXISTS (select * from @VoucherExportNode4)
BEGIN
INSERT INTO @VoucherExportNode4
SELECT DISTINCT 'Null' as Billno,0 as Amount,'Null' RtrName
END
END
ELSE
BEGIN
INSERT INTO @VoucherExportNode4
SELECT DISTINCT 'Null' as Billno,0 as Amount,'Null' RtrName
END
RETURN
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE name='Fn_VoucherExportNode5' AND XTYPE='TF')
DROP FUNCTION Fn_VoucherExportNode5
GO
CREATE FUNCTION Fn_VoucherExportNode5(@sVocType as varchar(200),@PiValue as varchar(200),@VoucherRefNo as Varchar(200))
RETURNS @VoucherExportNode5 TABLE
(
	ChequeNo			VARCHAR(200),
	ChequeDate		Datetime,
	BankName			varchar(150)
)
AS
/*
	SELECT * FROM DBO.Fn_VoucherExportNode4('RECEIPT','RCP1200061','RCP1200108')
*/
/***************************************************************************************************
* FUNCTION	: Fn_VoucherExportNode5
* PURPOSE	: Returns the Cheque Details of Collection
* NOTES		:
* CREATED	: Gopikrishnan.R - 12.12.2012
* MODIFIED
* DATE        AUTHOR     DESCRIPTION
* 08/01/2013  Gopi       NEFT details Included
-------------------------------------------------------------------------------------------------
**************************************************************************************************/
BEGIN
If UPPER(@VoucherRefNo)<>'MANUAL ENTRY'
BEGIN
If UPPER(@sVocType)='RECEIPT'
BEGIN
If Exists (select Voctype from Stdvocmaster WITH (NOLOCK) where Remarks lIKE '%' + CAST(@VoucherRefNo as nVarChar(25)) + '%' Group by VocType having count(Vocrefno)>1)
BEGIN
	INSERT INTO @VoucherExportNode5
	select Distinct * from 
		(SELECT Distinct Invinsno + '-'+ Convert(nvarchar(10),Invinsamt)+'-'+RtrName as ChequeNo,
		Invinsdate as ChequeDate,B.Bnkname as BankName from ReceiptInvoice RI WITH (NOLOCK) inner join Bank B WITH (NOLOCK) On
		RI.Bnkid=B.Bnkid and RI.Invrcpno=@VoucherRefNo and InvRcpMode in (3,4,8,10)
		inner Join  StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,21,CHARINDEX('(',VDT.Remarks)-21))) and VDT.Vocrefno=@PiValue
		Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId and Si.SalInvNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,40,CHARINDEX('(',VDT.Remarks)-21))) 
		Inner join Retailer R WITH (NOLOCK) ON SI.RtrId=R.RtrId 
		 and VDT.Remarks Like '%cheque%' Or VDT.Remarks Like '%NEFT%' Or VDT.Remarks Like '%RTGS%'
Union All
		SELECT Distinct Invinsno + '-'+ Convert(nvarchar(10),Invinsamt)+'-'+RtrName  as ChequeNo,Invinsdate as ChequeDate,B.Bnkname as BankName from ReceiptInvoice RI WITH (NOLOCK) inner join Bank B WITH (NOLOCK) On
		RI.Bnkid=B.Bnkid and RI.Invrcpno=@VoucherRefNo and InvRcpMode in (3,4,8,10)
		inner Join  StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,21,CHARINDEX('(',VDT.Remarks)-21))) and VDT.Vocrefno=@PiValue
		Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId and Si.SalInvNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,40,CHARINDEX('(',VDT.Remarks)-21)))  
		Inner join Retailer R WITH (NOLOCK) ON SI.RtrId=R.RtrId 
		and VDT.Remarks Like '%cheque%' Or VDT.Remarks Like '%NEFT%' Or VDT.Remarks Like '%RTGS%'
Union All
		SELECT Distinct  Invinsno + '-'+ Convert(nvarchar(10),Invinsamt)+'-'+RtrName  as ChequeNo,Invinsdate as ChequeDate,B.Bnkname as BankName from ReceiptInvoice RI WITH (NOLOCK) inner join Bank B WITH (NOLOCK) On
		RI.Bnkid=B.Bnkid and RI.Invrcpno=@VoucherRefNo and InvRcpMode in (3,4,8,10)
		inner Join  StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,21,CHARINDEX('(',VDT.Remarks)-21))) and VDT.Vocrefno=@PiValue
		Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId and Si.SalInvNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,40,CHARINDEX('(',VDT.Remarks)-19)))  
		Inner join Retailer R WITH (NOLOCK) ON SI.RtrId=R.RtrId 
		 and VDT.Remarks Like '%cheque%' Or VDT.Remarks Like '%NEFT%' Or VDT.Remarks Like '%RTGS%'
Union all
		SELECT Distinct  Invinsno + '-'+ Convert(nvarchar(10),Invinsamt)+'-'+RtrName  as ChequeNo,Invinsdate as ChequeDate,B.Bnkname as BankName from ReceiptInvoice RI WITH (NOLOCK) inner join Bank B WITH (NOLOCK) On
		RI.Bnkid=B.Bnkid and RI.Invrcpno=@VoucherRefNo and InvRcpMode in (3,4,8,10)
		inner Join  StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,21,CHARINDEX('(',VDT.Remarks)-21))) and VDT.Vocrefno=@PiValue
		Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId and Si.SalInvNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,40,CHARINDEX('(',VDT.Remarks)-18)))  
		Inner join Retailer R WITH (NOLOCK) ON SI.RtrId=R.RtrId 
		 and VDT.Remarks Like '%cheque%' Or VDT.Remarks Like '%NEFT%' Or VDT.Remarks Like '%RTGS%'
Union all
		SELECT Distinct  Invinsno + '-'+ Convert(nvarchar(10),Invinsamt)+'-'+RtrName  as ChequeNo,Invinsdate as ChequeDate,B.Bnkname as BankName from ReceiptInvoice RI WITH (NOLOCK) inner join Bank B WITH (NOLOCK) On
		RI.Bnkid=B.Bnkid and RI.Invrcpno=@VoucherRefNo and InvRcpMode in (3,4,8,10)
		inner Join  StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,21,CHARINDEX('(',VDT.Remarks)-21)))and VDT.Vocrefno=@PiValue 
		Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId and Si.SalInvNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,40,CHARINDEX('(',VDT.Remarks)-17)))  
		Inner join Retailer R WITH (NOLOCK) ON SI.RtrId=R.RtrId 
		and VDT.Remarks Like '%cheque%' Or VDT.Remarks Like '%NEFT%' Or VDT.Remarks Like '%RTGS%'
Union All
		SELECT Distinct  Invinsno + '-'+ Convert(nvarchar(10),Invinsamt)+'-'+RtrName  as ChequeNo,Invinsdate as ChequeDate,B.Bnkname as BankName from ReceiptInvoice RI WITH (NOLOCK) inner join Bank B WITH (NOLOCK) On
		RI.Bnkid=B.Bnkid and RI.Invrcpno=@VoucherRefNo and InvRcpMode in (3,4,8,10)
		inner Join  StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,21,CHARINDEX('(',VDT.Remarks)-21))) and VDT.Vocrefno=@PiValue 
		Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId and Si.SalInvNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,40,CHARINDEX('(',VDT.Remarks)-14)))  
		Inner join Retailer R WITH (NOLOCK) ON SI.RtrId=R.RtrId 
		and VDT.Remarks Like '%cheque%' Or VDT.Remarks Like '%NEFT%' Or VDT.Remarks Like '%RTGS%'
Union all
		select 'Null' as ChequeNo,'' as Chequedate,'null' as Bankname from ReceiptInvoice WITH (NOLOCK) where InvRcpNo=@VoucherRefNo and InvRcpMode not in (3)
		and InvRcpNo not in (select RI.Invrcpno from  ReceiptInvoice RI WITH (NOLOCK) inner join Bank B WITH (NOLOCK) On
		RI.Bnkid=B.Bnkid and RI.Invrcpno=@VoucherRefNo and InvRcpMode in (3,4,8,10)
		inner Join  StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,21,CHARINDEX('(',VDT.Remarks)-21))) and VDT.Vocrefno=@PiValue
		Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId and Si.SalInvNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,40,CHARINDEX('(',VDT.Remarks)-22)))  
		 and VDT.Remarks Like '%cheque%' Or VDT.Remarks Like '%NEFT%' Or VDT.Remarks Like '%RTGS%'
Union All
		SELECT Distinct Invrcpno from ReceiptInvoice RI WITH (NOLOCK) inner join Bank B WITH (NOLOCK) On
		RI.Bnkid=B.Bnkid and RI.Invrcpno=@VoucherRefNo and InvRcpMode in (3,4,8,10)
		inner Join  StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,21,CHARINDEX('(',VDT.Remarks)-21)))and VDT.Vocrefno=@PiValue
		Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId and Si.SalInvNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,40,CHARINDEX('(',VDT.Remarks)-21)))  
		 and VDT.Remarks Like '%cheque%' Or VDT.Remarks Like '%NEFT%' Or VDT.Remarks Like '%RTGS%'
Union All
		SELECT Distinct Invrcpno from ReceiptInvoice RI WITH (NOLOCK) inner join Bank B WITH (NOLOCK) On
		RI.Bnkid=B.Bnkid and RI.Invrcpno=@VoucherRefNo and InvRcpMode in (3,4,8,10)
		inner Join  StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,21,CHARINDEX('(',VDT.Remarks)-21)))and VDT.Vocrefno=@PiValue
		Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId and Si.SalInvNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,40,CHARINDEX('(',VDT.Remarks)-19)))  
		 and VDT.Remarks Like '%cheque%' Or VDT.Remarks Like '%NEFT%' Or VDT.Remarks Like '%RTGS%'
Union All
		SELECT Distinct Invrcpno from ReceiptInvoice RI WITH (NOLOCK) inner join Bank B WITH (NOLOCK) On
		RI.Bnkid=B.Bnkid and RI.Invrcpno=@VoucherRefNo and InvRcpMode in (3,4,8,10)
		inner Join  StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,21,CHARINDEX('(',VDT.Remarks)-21)))and VDT.Vocrefno=@PiValue
		Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId and Si.SalInvNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,40,CHARINDEX('(',VDT.Remarks)-18)))  
		 and VDT.Remarks Like '%cheque%' Or VDT.Remarks Like '%NEFT%' Or VDT.Remarks Like '%RTGS%'
Union All
		SELECT Distinct Invrcpno from ReceiptInvoice RI WITH (NOLOCK) inner join Bank B WITH (NOLOCK) On
		RI.Bnkid=B.Bnkid and RI.Invrcpno=@VoucherRefNo and InvRcpMode in (3,4,8,10)
		inner Join  StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,21,CHARINDEX('(',VDT.Remarks)-21)))and VDT.Vocrefno=@PiValue
		Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId and Si.SalInvNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,40,CHARINDEX('(',VDT.Remarks)-17)))  
		 and VDT.Remarks Like '%cheque%' Or VDT.Remarks Like '%NEFT%' Or VDT.Remarks Like '%RTGS%'
Union All
		SELECT Distinct Invrcpno from ReceiptInvoice RI WITH (NOLOCK) inner join Bank B WITH (NOLOCK) On
		RI.Bnkid=B.Bnkid and RI.Invrcpno=@VoucherRefNo and InvRcpMode in (3,4,8,10)
		inner Join  StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,21,CHARINDEX('(',VDT.Remarks)-21))) and VDT.Vocrefno=@PiValue
		Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId and Si.SalInvNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,40,CHARINDEX('(',VDT.Remarks)-14)))  
		 and VDT.Remarks Like '%cheque%' Or VDT.Remarks Like '%NEFT%' Or VDT.Remarks Like '%RTGS%') )A
END
ELSE
BEGIN
   INSERT INTO @VoucherExportNode5
        SELECT Distinct  Invinsno + '-'+ Convert(nvarchar(10),Invinsamt) as ChequeNo,Invinsdate as ChequeDate,B.Bnkname as BankName from ReceiptInvoice RI WITH (NOLOCK) inner join Bank B WITH (NOLOCK) On
		RI.Bnkid=B.Bnkid and RI.Invrcpno=@VoucherRefNo and InvRcpMode in (3,4,8,10)
		inner Join  StdvocMaster VDT WITH (NOLOCK) on RI.InvRcpNo=Right(Left(VDT.Remarks,30),10)
		Inner Join SalesInvoice si WITH (NOLOCK) on si.SalId=RI.SalId 
		and VDT.Vocrefno=@PiValue and VDT.Remarks Like '%cheque%' Or VDT.Remarks Like '%NEFT%' Or VDT.Remarks Like '%RTGS%'
END
END
If UPPER(@sVocType)='PAYMENT'
BEGIN
	INSERT INTO @VoucherExportNode5
	SELECT DISTINCT Payinsno + '-'+ Convert(nvarchar(10),Payinsamt) as ChequeNo,Payinsdate as Chequedate,B.Bnkname as BankName from PurchasePaymentDetails PPD WITH (NOLOCK) inner join Bank B WITH (NOLOCK)
	on PPD.BnkId=B.BnkId Inner join StdVocMaster VDT WITH (NOLOCK) on ppd.PayAdvNo=LEFT(@VoucherRefNo,10)
	and VDT.Vocrefno=@PiValue and VDT.Remarks Like '%cheque%'
 Union All
	SELECT DISTINCT Payinsno + '-'+ Convert(nvarchar(10),Payinsamt) as ChequeNo,Payinsdate as Chequedate,B.Bnkname as BankName from PurchasePaymentDetails PPD WITH (NOLOCK) inner join Bank B WITH (NOLOCK)
	on PPD.BnkId=B.BnkId Inner join StdVocMaster VDT WITH (NOLOCK) on ppd.PayAdvNo=LEFT(@VoucherRefNo,10)
	and VDT.Vocrefno=@PiValue and VDT.Remarks Not Like '%Cheque%'
END
If UPPER(@sVocType)='JOURNAL'
BEGIN
IF EXISTS (SELECT * FROM STDVOCMASTER WHERE VOCREFNO=@PiValue  and Remarks  Like '%Posted from ChequePayment%')
BEGIN
    INSERT INTO @VoucherExportNode5
	SELECT distinct  ChequeNo + '-'+ Convert(nvarchar(10),Invinsamt),Invinsdate AS ChequeDate,B.Bnkname as BankName from ChequePayment CP WITH (NOLOCK) Inner Join ReceiptInvoice RI WITH (NOLOCK) ON CP.Chequeno=RI.Invinsno
	INNER JOIN Bank B On B.Bnkid=CP.BnkId Inner join StdVocMaster VDT WITH (NOLOCK) on VDT.Vocrefno=@PiValue 
	and ChequePayid=@VoucherRefNo and VDT.Remarks  Like '%Posted from ChequePayment%'
END
END
END
IF NOT EXISTS (select * from @VoucherExportNode5)
Begin
	INSERT INTO @VoucherExportNode5
	SELECT 'Null' as ChequeNo,'' as Chequedate,'null' as Bankname
END
RETURN
END
GO
IF EXISTS(SELECT 'X' FROM SYSOBJECTS WHERE XTYPE='TF' AND NAME='Fn_VoucherExportNode6')
DROP FUNCTION Fn_VoucherExportNode6
GO
-- SELECT * FROM dbo.Fn_VoucherExportNode6('Stock Ledger','2016-08-23','2016-08-22','AFCCP01') 
CREATE Function [Fn_VoucherExportNode6]
(
	@sVocType		as varchar(200),
	@PiValue		as varchar(200),
	@VoucherRefNo	as Varchar(200),
	@Prdcode		as varchar(200)
)
RETURNS @VoucherExportNode6 TABLE
(
	BatchCode	VARCHAR(200)
	
)
AS
/***************************************************************************************************
* FUNCTION	: Fn_VoucherExportNode6
* PURPOSE	: Returns the IMEINO details of product
* NOTES		:
* CREATED	: Gopikrishnan.R - 12.12.2012
* MODIFIED
* DATE            AUTHOR		CR/BZ			USER STORY ID				DESCRIPTION
* 13.02.2013	Gopikrishnan												Journal Type Imei Number Added
* 02/11/2017    Murugan.R		CR				CCRSTAML1028				IDT Transaction Added
-------------------------------------------------------------------------------------------------
**************************************************************************************************/
BEGIN
DECLARE @QTY AS INT
DECLARE @CNT AS INT
If UPPER(@sVocType)='SALES'
BEGIN
	INSERT INTO @VoucherExportNode6
	SELECT PrdBatCode 
	FROM
	(
		SELECT PrdBatId,PrdBatCode + '~' + CAST(SUM(BaseQty) AS VARCHAR(20))+ '~' + CAST(SUM(PrdGrossAmount) AS VARCHAR(20))AS PrdBatCode	 
		FROM
		(
			SELECT PB.PrdBatId,PrdBatCode,BaseQty,CONVERT(NUMERIC(18,6),PrdGrossAmount)PrdGrossAmount 
			FROM SalesInvoice SI(NOLOCK) 
			INNER JOIN SalesInvoiceProduct SIP(NOLOCK) ON SI.SALID=SIP.SalId 
			INNER JOIN Product P(NOLOCK) ON P.PrdId=SIP.PrdId
			INNER JOIN ProductBatch PB(NOLOCK) ON PB.PrdId=P.PrdId AND PB.PrdId=SIP.PrdId AND PB.PRDBATID=SIP.PrdBatId
			WHERE SalInvNo=@VoucherRefNo AND PrdCCode=@Prdcode
		)A
		GROUP BY PrdBatId,PrdBatCode
	)A
	ORDER BY PrdBatId		
END
If UPPER(@sVocType)='PURCHASE'
BEGIN
	INSERT INTO @VoucherExportNode6
	SELECT PrdBatCode FROM
	(
		SELECT PrdBatId,PrdBatCode + '~' + CAST(SUM(BaseQty) AS VARCHAR(20))+ '~' + CAST(SUM(PrdGrossAmount) AS VARCHAR(20))AS PrdBatCode	 
		FROM
		(
			SELECT PB.PrdBatId,PrdBatCode,InvBaseQty AS BaseQty,CONVERT(NUMERIC(18,6),PrdGrossAmount)PrdGrossAmount 
			FROM PurchaseReceipt SI(NOLOCK)
			INNER JOIN PurchaseReceiptProduct SIP(NOLOCK) ON SI.PurRcptId=SIP.PurRcptId
			INNER JOIN Product P(NOLOCK) ON P.PrdId=SIP.PrdId
			INNER JOIN ProductBatch PB(NOLOCK) ON PB.PrdId=P.PrdId AND PB.PrdId=SIP.PrdId AND PB.PRDBATID=SIP.PrdBatId	
			WHERE Cmpinvno=@VoucherRefNo and PrdCCode=@Prdcode
		)A
		GROUP BY PrdBatId,PrdBatCode
	)A
	ORDER BY PrdBatId		
END
If UPPER(@sVocType)='PURCHASE RETURN'
BEGIN
	INSERT INTO @VoucherExportNode6
	SELECT PrdBatCode 
	FROM
	(
		SELECT PrdBatId,PrdBatCode + '~' + CAST(SUM(BaseQty) AS VARCHAR(20))+ '~' + CAST(SUM(PrdGrossAmount) AS VARCHAR(20))AS PrdBatCode	 
		FROM
		(		
			SELECT PB.PrdBatId,PrdBatCode,RetInvBaseQty AS BaseQty,CONVERT(NUMERIC(18,6),PrdGrossAmount)PrdGrossAmount 
			FROM PurchaseReturn SI(NOLOCK) 
			INNER JOIN PurchaseReturnProduct SIP(NOLOCK) ON SI.PurRetId=SIP.PurRetId
			INNER JOIN Product P(NOLOCK) ON P.PrdId=SIP.PrdId
			INNER JOIN ProductBatch PB(NOLOCK) ON PB.PrdId=P.PrdId AND PB.PrdId=SIP.PrdId AND PB.PRDBATID=SIP.PrdBatId	
			WHERE PurRetRefNo=@VoucherRefNo and PrdCCode=@Prdcode
		)A
		GROUP BY PrdBatId,PrdBatCode
	)A	
	ORDER BY PrdBatId				
END
If UPPER(@sVocType)='SALES RETURN'
BEGIN
	INSERT INTO @VoucherExportNode6
	SELECT PrdBatCode 
	FROM
	(
		SELECT PrdBatId,PrdBatCode + '~' + CAST(SUM(BaseQty) AS VARCHAR(20))+ '~' + CAST(SUM(PrdGrossAmount) AS VARCHAR(20))AS PrdBatCode	 
		FROM
		(			
			SELECT PB.PrdBatId,PrdBatCode,BaseQty,CONVERT(NUMERIC(18,6),PrdActualGross)PrdGrossAmount 
			FROM ReturnHeader SI(NOLOCK) 
			INNER JOIN ReturnProduct SIP(NOLOCK) ON SI.ReturnID=SIP.ReturnID
			INNER JOIN Product P(NOLOCK) ON P.PrdId=SIP.PrdId
			INNER JOIN ProductBatch PB(NOLOCK) ON PB.PrdId=P.PrdId AND PB.PrdId=SIP.PrdId AND PB.PRDBATID=SIP.PrdBatId	
			WHERE SI.ReturnCode =@VoucherRefNo and PrdCCode=@Prdcode
		)A
		GROUP BY PrdBatId,PrdBatCode
	)A	
	ORDER BY PrdBatId				
			
END
If UPPER(@sVocType)='Journal'
BEGIN
	INSERT INTO @VoucherExportNode6
	SELECT PrdBatCode 
	FROM
	(
		SELECT PrdBatId,PrdBatCode + '~' + CAST(SUM(BaseQty) AS VARCHAR(20))+ '~' + CAST(SUM(PrdGrossAmount) AS VARCHAR(20))AS PrdBatCode	 
		FROM
		(		
			SELECT PB.PrdBatId,PrdBatCode,TotalQty AS BaseQty,CONVERT(NUMERIC(18,6),Amount)PrdGrossAmount 
			FROM StockManagement SI(NOLOCK)  
			INNER JOIN StockManagementProduct SIP(NOLOCK)  ON SI.StkMngRefNo=SIP.StkMngRefNo
			INNER JOIN Product P(NOLOCK)  ON P.PrdId=SIP.PrdId
			INNER JOIN ProductBatch PB(NOLOCK)  ON PB.PrdId=P.PrdId AND PB.PrdId=SIP.PrdId AND PB.PRDBATID=SIP.PrdBatId	
			WHERE SI.StkMngRefNo =@VoucherRefNo and PrdCCode=@Prdcode
		)A
		GROUP BY PrdBatId,PrdBatCode
	)A	
	ORDER BY PrdBatId			
END
If UPPER(@sVocType)='Stock Ledger'
BEGIN
		DECLARE @ProdDetail TABLE
		(
			lcnid	INT,
			PrdId	INT,
			PrdBatId INT,
			TransDate DATETIME
		)
		
		INSERT INTO @ProdDetail
		select lcnid,PrdId,prdbatid ,max(TransDate) as TransDate FROM StockLedger Stk (nolock)
			WHERE Stk.TransDate < @VoucherRefNo 
		Group by lcnid,PrdId,prdbatid
		
		INSERT INTO @VoucherExportNode6
		SELECT PrdBatCode + '~' + CAST((sl.SalClsStock+sl.UnSalClsStock+sl.OfferClsStock) AS VARCHAR(20))+ '~' + 
		CAST((ISNULL((sl.SalClsStock+sl.UnSalClsStock+sl.OfferClsStock),0)* PBD.PrdBatDetailValue) AS VARCHAR(20))AS PrdBatCode
		FROM StockLedger sl (NOLOCK)
		INNER JOIN @ProdDetail  PrdDet ON Sl.PrdBatId= PrdDet.PrdBatId and sl.PrdId = PrdDet.PrdId 
		INNER JOIN Location L (NOLOCK) ON L.LcnId = PrdDet.lcnid
		INNER JOIN Product PRD (NOLOCK) ON PRD.PrdId = sl.PrdId
		INNER JOIN ProductbatchDetails PBD (NOLOCK) ON pbd.Prdbatid=sl.PrdBatId and PBD.DefaultPrice=1 
		INNER JOIN BatchCreation BC WITH (NOLOCK) On BC.SlNo=PBD.SLNo AND BC.SelRte=1
		INNER JOIN ProductBatch PDC WITH (NOLOCK) ON PDC.PrdBatId = PrdDet.PrdBatId AND PDC.PrdId = PrdDet.PrdId
		AND Sl.lcnid = PrdDet.lcnid AND Sl.TransDate = PrdDet.TransDate	
		where (sl.SalClsStock+sl.UnSalClsStock+sl.OfferClsStock) <> 0 AND PrdCCode =@Prdcode
		ORDER BY sl.PrdId		
END
--CCRSTAML1028 Start
If UPPER(@sVocType)='IDT'
BEGIN
	INSERT INTO @VoucherExportNode6
	SELECT PrdBatCode 
	FROM
	(
		SELECT PrdBatId,PrdBatCode + '~' + CAST(SUM(BaseQty) AS VARCHAR(20))+ '~' + CAST(SUM(PrdGrossAmount) AS VARCHAR(20))AS PrdBatCode	 
		FROM
		(		
			SELECT PB.PrdBatId,PrdBatCode,Qty AS BaseQty,CONVERT(NUMERIC(18,6),PrdGrossAmount)PrdGrossAmount 
			FROM IDTManagement SI(NOLOCK) 
			INNER JOIN IDTManagementProduct SIP(NOLOCK) ON SI.IDTMngRefNo=SIP.IDTMngRefNo
			INNER JOIN Product P(NOLOCK) ON P.PrdId=SIP.PrdId
			INNER JOIN ProductBatch PB(NOLOCK) ON PB.PrdId=P.PrdId AND PB.PrdId=SIP.PrdId AND PB.PRDBATID=SIP.PrdBatId	
			WHERE SI.IDTMngRefNo=@VoucherRefNo and PrdCCode=@Prdcode and SI.StkMgmtTypeId=2
		)A
		GROUP BY PrdBatId,PrdBatCode
	)A	
	ORDER BY PrdBatId				
END
If UPPER(@sVocType)='IDT IN'
BEGIN
	INSERT INTO @VoucherExportNode6
	SELECT PrdBatCode 
	FROM
	(
		SELECT PrdBatId,PrdBatCode + '~' + CAST(SUM(BaseQty) AS VARCHAR(20))+ '~' + CAST(SUM(PrdGrossAmount) AS VARCHAR(20))AS PrdBatCode	 
		FROM
		(		
			SELECT PB.PrdBatId,PrdBatCode,Qty AS BaseQty,CONVERT(NUMERIC(18,6),PrdGrossAmount)PrdGrossAmount 
			FROM IDTManagement SI(NOLOCK) 
			INNER JOIN IDTManagementProduct SIP(NOLOCK) ON SI.IDTMngRefNo=SIP.IDTMngRefNo
			INNER JOIN Product P(NOLOCK) ON P.PrdId=SIP.PrdId
			INNER JOIN ProductBatch PB(NOLOCK) ON PB.PrdId=P.PrdId AND PB.PrdId=SIP.PrdId AND PB.PRDBATID=SIP.PrdBatId	
			WHERE SI.IDTMngRefNo=@VoucherRefNo and PrdCCode=@Prdcode and SI.StkMgmtTypeId=1
		)A
		GROUP BY PrdBatId,PrdBatCode
	)A	
	ORDER BY PrdBatId				
END
--CCRSTAML1028 END

RETURN
END
GO
IF EXISTS(SELECT 'X' FROM SYSOBJECTS WHERE XTYPE='TF' AND NAME='Fn_VoucherExportNode7')
DROP FUNCTION Fn_VoucherExportNode7
GO
CREATE FUNCTION [Fn_VoucherExportNode7]
(
	@sVocType as varchar(200),
	@PiValue as varchar(200),
	@VoucherRefNo as Varchar(200),
	@Prdcode as varchar(200)
)
RETURNS @VoucherExportNode7 TABLE
(
	TaxRate			Nvarchar(400),
	TaxAmount		Numeric(18,6)
	
)
AS
/***************************************************************************************************
* FUNCTION	: Fn_VoucherExportNode7
* PURPOSE	: Returns the Tax details of product
* NOTES		:
* CREATED	: Gopikrishnan.R - 12.12.2012
* MODIFIED
* DATE            AUTHOR		CR/BZ			USER STORY ID				DESCRIPTION
* 15-02-2013  Gopikrishnan													Tax Amount Column Added	
* 02/11/2017  Murugan.R			CR				CCRSTAML1028				Cancelled Bill Details flow to Tally
-------------------------------------------------------------------------------------------------
**************************************************************************************************/
BEGIN
If UPPER (@VoucherRefNo)<>'MANUAL ENTRY'
BEGIN
IF UPPER(@PiValue)<>'NULL'
BEGIN
If UPPER(@sVocType)='SALES'
BEGIN
	INSERT INTO @VoucherExportNode7
	SELECT TaxRate,SUM(TaxAmount)TaxAmount
	FROM 
	(	
		SELECT TaxCode+' '+Convert(nvarchar(10),Convert(Numeric(18,6),Taxperc))+'%' as TaxRate,Convert(Numeric(18,6),TaxAmount) as TaxAmount 
		FROM Salesinvoiceproduct SIP (NOLOCK) 
		INNER JOIN Salesinvoice SI (NOLOCK) ON SI.Salid=SIP.Salid 
		INNER JOIN StdVocMaster VDT (NOLOCK) on SI.Salinvno=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,20,CHARINDEX(' Dated',VDT.Remarks)-20)))
		INNER JOIN StdvocDetails VDD (NOLOCK) on VDT.VocRefNo=VDD.VocRefNo 
		INNER JOIN CoaMaster COA (NOLOCK) ON VDD.CoaId=COA.CoaId 
		INNER JOIN Retailer R (NOLOCK) on R.Coaid=COA.Coaid and R.rtrid=Si.rtrid AND VDD.Coaid=R.Coaid
		INNER JOIN Product P (NOLOCK) on P.prdid=Sip.prdid 
		INNER JOIN SalesInvoiceProductTax SIPT (NOLOCK) on Sipt.PrdSlNo=SIP.SlNo AND SIPT.SalId=SIP.SalId AND SIPT.SalId=SI.SALid and Sipt.TaxableAmount>0 --and TaxId in (2,3,4,5)
		INNER JOIN TaxConfiguration TC (NOLOCK) ON TC.TaxId=SIPT.TaxId
		WHERE VDT.VocRefNo=@PiValue AND P.PrdCCode=@Prdcode
	)A
	GROUP BY TaxRate
	--INSERT INTO @VoucherExportNode7
	--SELECT DISTINCT TaxCode+' '+Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc))+'%' as TaxRate,TaxAmount as TaxAmount 
	--from Salesinvoiceproduct SIP (NOLOCK) inner join Salesinvoice SI (NOLOCK) ON SI.Salid=SIP.Salid 
	--Inner join 
	--StdVocMaster VDT (NOLOCK) on SI.Salinvno=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,20,CHARINDEX(' Dated',VDT.Remarks)-20)))
	--Inner Join StdvocDetails VDD (NOLOCK) on VDT.VocRefNo=VDD.VocRefNo Inner Join CoaMaster COA (NOLOCK) ON VDD.CoaId=COA.CoaId Inner Join Retailer R (NOLOCK) on R.Coaid=COA.Coaid 
	--and R.rtrid=Si.rtrid AND VDD.Coaid=R.Coaid
	--Inner Join Product P (NOLOCK) on P.prdid=Sip.prdid Inner join SalesInvoiceProductTax SIPT (NOLOCK) on Sipt.PrdSlNo=SIP.SlNo 
	--AND SIPT.SalId=SIP.SalId AND SIPT.SalId=SI.SALid and Sipt.TaxableAmount>0 --and TaxId in (2,3,4,5)
	--Inner Join TaxConfiguration TC (NOLOCK) ON TC.TaxId=SIPT.TaxId
	--Where VDT.VocRefNo=@PiValue and P.PrdCCode=@Prdcode
	
END 
END
---Added by Gopikrishnan at 21-03-2013 for Cancelled Bill Changes
IF UPPER(@PiValue)='NULL'
BEGIN
If UPPER(@sVocType)='SALES'
BEGIN
	INSERT INTO @VoucherExportNode7
	SELECT DISTINCT TaxCode+' '+Convert(nvarchar(10),Convert(Numeric(18,6),Taxperc))+'%' as TaxRate,TaxAmount as TaxAmount from Salesinvoiceproduct SIP (NOLOCK) inner join Salesinvoice SI (NOLOCK) ON SI.Salid=SIP.Salid Inner join 
    Retailer R (NOLOCK) on  R.rtrid=Si.rtrid 
	Inner Join Product P (NOLOCK) on P.prdid=Sip.prdid Inner join SalesInvoiceProductTax SIPT (NOLOCK) on Sipt.PrdSlNo=SIP.SlNo 
	AND SIPT.SalId=SIP.SalId AND SIPT.SalId=SI.SALid and Sipt.TaxableAmount>0 --and TaxId in (2,3,4,5)
	Inner Join TaxConfiguration TC (NOLOCK) ON TC.TaxId=SIPT.TaxId
	Where P.PrdCCode=@Prdcode AND SI.SalInvNo=@VoucherRefNo AND DlvSts=3
END 
END
If UPPER(@sVocType)='SALES RETURN'
BEGIN
	INSERT INTO @VoucherExportNode7
	SELECT TaxRate,SUM(TaxAmount)TaxAmount
	FROM 
	(	
		SELECT TaxCode+' '+Convert(nvarchar(10),Convert(Numeric(18,6),Taxperc))+'%' as TaxRate,-CONVERT(NUMERIC(18,6),(TaxAmt)) as TaxAmount 
		FROM ReturnProduct SIP (NOLOCK) 
		INNER JOIN ReturnHeader SI (NOLOCK) ON SI.Returnid=SIP.Returnid 
		INNER JOIN StdVocMaster VDT (NOLOCK) on SI.ReturnCode=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,24,CHARINDEX(' Dated',VDT.Remarks)-24)))
		INNER JOIN StdvocDetails VDD (NOLOCK) on VDT.VocRefNo=VDD.VocRefNo
		INNER JOIN CoaMaster COA (NOLOCK) ON VDD.CoaId=COA.CoaId 
		INNER JOIN Retailer R (NOLOCK) on R.Coaid=COA.Coaid and R.rtrid=Si.rtrid AND VDD.Coaid=R.Coaid
		INNER JOIN ReturnProductTax rtp (NOLOCK) on RTP.PrdSlno=SIP.Slno AND RTP.ReturnId=sip.ReturnID and RTP.ReturnId=SI.ReturnID and rtp.TaxableAmt>0 --and TaxId in (2,3)
		INNER JOIN TaxConfiguration TC (NOLOCK) ON TC.TaxId=RTP.TaxId
		INNER JOIN Product P (NOLOCK) on P.prdid=Sip.prdid Where VDT.VocRefNo=@PiValue and P.PrdCCode=@Prdcode
	)A
	GROUP BY TaxRate
	--INSERT INTO @VoucherExportNode7
	--SELECT DISTINCT TaxCode+' '+Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc))+'%' as TaxRate,-(TaxAmt) as TaxAmount from ReturnProduct SIP (NOLOCK) inner join ReturnHeader SI (NOLOCK) ON SI.Returnid=SIP.Returnid 
	--	Inner join StdVocMaster VDT (NOLOCK) on SI.ReturnCode=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,24,CHARINDEX(' Dated',VDT.Remarks)-24)))
	--	Inner Join StdvocDetails VDD (NOLOCK) on VDT.VocRefNo=VDD.VocRefNo
	--	Inner Join CoaMaster COA (NOLOCK) ON VDD.CoaId=COA.CoaId Inner Join Retailer R (NOLOCK) on R.Coaid=COA.Coaid and R.rtrid=Si.rtrid AND VDD.Coaid=R.Coaid
	--	Inner Join ReturnProductTax rtp (NOLOCK) on RTP.PrdSlno=SIP.Slno AND RTP.ReturnId=sip.ReturnID and RTP.ReturnId=SI.ReturnID and rtp.TaxableAmt>0 --and TaxId in (2,3)
	--	Inner Join TaxConfiguration TC (NOLOCK) ON TC.TaxId=RTP.TaxId
	--	Inner Join Product P (NOLOCK) on P.prdid=Sip.prdid Where VDT.VocRefNo=@PiValue and P.PrdCCode=@Prdcode
END
If UPPER(@sVocType)='PURCHASE'
BEGIN
	INSERT INTO @VoucherExportNode7
	SELECT TaxRate,SUM(TaxAmount)TaxAmount
	FROM 
	(	
		SELECT DISTINCT TaxCode+' '+Convert(nvarchar(10),Convert(Numeric(18,6),Taxperc))+'%' AS TaxRate,-CONVERT(NUMERIC(18,6),(PRPT.TaxAmount)) as TaxAmount 
		FROM PurchaseReceiptProduct SIP (NOLOCK) 
		INNER JOIN PurchaseReceipt SI (NOLOCK) ON SI.Purrcptid=SIP.Purrcptid 
		INNER JOIN StdVocMaster VDT (NOLOCK) on SI.PurrcptRefno=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,16,CHARINDEX(' Dated',VDT.Remarks)-16))) 
		INNER JOIN PurchaseReceiptProductTax PRPT (NOLOCK) on PRPT.Purrcptid=SI.Purrcptid AND PRPT.Purrcptid=SIP.Purrcptid AND PRPT.PrdSlNo=SIP.PrdSlNo AND PRPT.TaxableAmount>0 --and TaxId in (2,3)
		INNER JOIN TaxConfiguration TC (NOLOCK) ON TC.TaxId=PRPT.TaxId
		INNER JOIN Product P (NOLOCK) on P.prdid=Sip.prdid Where VDT.VocRefNo=@PiValue and P.PrdCCode=@Prdcode
	)A
	GROUP BY TaxRate
	--INSERT INTO @VoucherExportNode7
	--select distinct TaxCode+' '+Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc))+'%' AS TaxRate,-(PRPT.TaxAmount) as TaxAmount from PurchaseReceiptProduct SIP (NOLOCK) 
 --   inner join PurchaseReceipt SI (NOLOCK) ON SI.Purrcptid=SIP.Purrcptid 
	--Inner join StdVocMaster VDT (NOLOCK) on SI.PurrcptRefno=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,16,CHARINDEX(' Dated',VDT.Remarks)-16))) 
	--iNNER join PurchaseReceiptProductTax PRPT (NOLOCK) on PRPT.Purrcptid=SI.Purrcptid AND PRPT.Purrcptid=SIP.Purrcptid AND PRPT.PrdSlNo=SIP.PrdSlNo AND PRPT.TaxableAmount>0 --and TaxId in (2,3)
	--Inner Join TaxConfiguration TC (NOLOCK) ON TC.TaxId=PRPT.TaxId
	--Inner Join Product P (NOLOCK) on P.prdid=Sip.prdid Where VDT.VocRefNo=@PiValue and P.PrdCCode=@Prdcode
END
If UPPER(@sVocType)='PURCHASE RETURN'
BEGIN
		INSERT INTO @VoucherExportNode7
		SELECT TaxRate,SUM(TaxAmount)TaxAmount
		FROM 
		(	
			SELECT DISTINCT TaxCode+' '+Convert(nvarchar(10),Convert(Numeric(18,6),Taxperc))+'%' as TaxRate,CONVERT(NUMERIC(18,6),PRP.TaxAmount) as TaxAmount  
			FROM PurchaseReturnProduct SIP (NOLOCK)
			INNER JOIN PurchaseReturn SI (NOLOCK) ON SI.Purretid=SIP.Purretid 
			INNER JOIN StdVocMaster VDT (NOLOCK) on SI.PurretRefno=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,28,CHARINDEX(' Dated',VDT.Remarks)-28))) 
			INNER JOIN PurchaseReturnProductTax PRP (NOLOCK) ON PRP.PrdSlNo=SIP.PrdSlNo AND PRP.PurRetId=SIP.PurRetId AND PRP.PurRetId=SI.PurRetId and PRP.TaxableAmount>0 --and TaxId in (2,3)
			INNER JOIN Product P (NOLOCK) on P.prdid=Sip.prdid
			INNER JOIN TaxConfiguration TC (NOLOCK) ON TC.TaxId=PRP.TaxId
			WHERE VDT.VocRefNo=@PiValue and P.PrdCCode=@Prdcode 
			UNION 
			SELECT DISTINCT 'Null' as TaxRate,0.00 AS TaxAmount  
			FROM PurchaseReturnProduct SIP (NOLOCK) 
			INNER JOIN PurchaseReturn SI (NOLOCK) ON SI.Purretid=SIP.Purretid 
			INNER JOIN StdVocMaster VDT (NOLOCK) on SI.PurretRefno=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,28,CHARINDEX(' Dated',VDT.Remarks)-28))) 
			INNER JOIN Product P (NOLOCK) on P.prdid=Sip.prdid and SI.PurRetId NOT IN (SELECT DISTINCT PurRetId FROM PurchaseReturnProductTax (NOLOCK))
			WHERE VDT.VocRefNo=@PiValue and P.PrdCCode=@Prdcode
		)A
		GROUP BY TaxRate
	--INSERT INTO @VoucherExportNode7
	--select distinct TaxCode+' '+Convert(nvarchar(10),Convert(Numeric(18,2),Taxperc))+'%' as TaxRate,PRP.TaxAmount as TaxAmount  from PurchaseReturnProduct SIP (NOLOCK)
	--    inner join PurchaseReturn SI (NOLOCK) ON SI.Purretid=SIP.Purretid 
	--	Inner join StdVocMaster VDT (NOLOCK) on SI.PurretRefno=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,28,CHARINDEX(' Dated',VDT.Remarks)-28))) 
	--	Inner Join PurchaseReturnProductTax PRP (NOLOCK) ON PRP.PrdSlNo=SIP.PrdSlNo AND PRP.PurRetId=SIP.PurRetId AND PRP.PurRetId=SI.PurRetId and PRP.TaxableAmount>0 --and TaxId in (2,3)
	--	Inner Join Product P (NOLOCK) on P.prdid=Sip.prdid
	--	Inner Join TaxConfiguration TC (NOLOCK) ON TC.TaxId=PRP.TaxId
	--	Where VDT.VocRefNo=@PiValue and P.PrdCCode=@Prdcode 
	--UNION 
	--SELECT DISTINCT 'Null' as TaxRate,0.00 AS TaxAmount  from PurchaseReturnProduct SIP (NOLOCK) inner join PurchaseReturn SI (NOLOCK) ON SI.Purretid=SIP.Purretid 
	--Inner join StdVocMaster VDT (NOLOCK) on SI.PurretRefno=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,28,CHARINDEX(' Dated',VDT.Remarks)-28))) 
	--Inner Join Product P (NOLOCK) on P.prdid=Sip.prdid and SI.PurRetId NOT IN (SELECT DISTINCT PurRetId FROM PurchaseReturnProductTax (NOLOCK))
	--Where VDT.VocRefNo=@PiValue and P.PrdCCode=@Prdcode 
END
--CCRSTAML1028 Start
IF UPPER(@sVocType)='IDT'
BEGIN
		INSERT INTO @VoucherExportNode7
		SELECT TaxRate,SUM(TaxAmount)TaxAmount
		FROM 
		(	
			SELECT DISTINCT TaxCode+' '+Convert(nvarchar(10),Convert(Numeric(18,6),Taxperc))+'%' as TaxRate,CONVERT(NUMERIC(18,6),PRP.TaxAmount) as TaxAmount  
			FROM IDTManagementProduct SIP (NOLOCK)
			INNER JOIN IDTManagement SI (NOLOCK) ON SI.IDTMngRefNo=SIP.IDTMngRefNo 
			INNER JOIN StdVocMaster VDT (NOLOCK) on SI.IDTMngRefNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,25,CHARINDEX(' Dated',VDT.Remarks)-25))) 
			INNER JOIN IDTManagementProductTax PRP (NOLOCK) ON PRP.PrdSlNo=SIP.PrdSlNo AND PRP.IDTMngRefNo=SIP.IDTMngRefNo AND PRP.IDTMngRefNo=SI.IDTMngRefNo and PRP.TaxableAmount>0 --and TaxId in (2,3)
			INNER JOIN Product P (NOLOCK) on P.prdid=Sip.prdid
			INNER JOIN TaxConfiguration TC (NOLOCK) ON TC.TaxId=PRP.TaxId
			WHERE VDT.VocRefNo=@PiValue and P.PrdCCode=@Prdcode and SI.StkMgmtTypeId=2
			UNION 
			SELECT DISTINCT 'Null' as TaxRate,0.00 AS TaxAmount  
			FROM IDTManagementProduct SIP (NOLOCK) 
			INNER JOIN IDTManagement SI (NOLOCK) ON SI.IDTMngRefNo=SIP.IDTMngRefNo 
			INNER JOIN StdVocMaster VDT (NOLOCK) on SI.IDTMngRefNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,26,CHARINDEX(' Dated',VDT.Remarks)-26))) 
			INNER JOIN Product P (NOLOCK) on P.prdid=Sip.prdid and SI.IDTMngRefNo NOT IN (SELECT DISTINCT IDTMngRefNo FROM IDTManagementProductTax (NOLOCK))
			WHERE VDT.VocRefNo=@PiValue and P.PrdCCode=@Prdcode  and SI.StkMgmtTypeId=2
		)A
		GROUP BY TaxRate
END
IF UPPER(@sVocType)='IDT IN'
BEGIN
		INSERT INTO @VoucherExportNode7
		SELECT TaxRate,SUM(TaxAmount)TaxAmount
		FROM 
		(	
			SELECT DISTINCT TaxCode+' '+Convert(nvarchar(10),Convert(Numeric(18,6),Taxperc))+'%' as TaxRate,CONVERT(NUMERIC(18,6),PRP.TaxAmount) as TaxAmount  
			FROM IDTManagementProduct SIP (NOLOCK)
			INNER JOIN IDTManagement SI (NOLOCK) ON SI.IDTMngRefNo=SIP.IDTMngRefNo 
			INNER JOIN StdVocMaster VDT (NOLOCK) on SI.IDTMngRefNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,26,CHARINDEX(' Dated',VDT.Remarks)-26))) 
			INNER JOIN IDTManagementProductTax PRP (NOLOCK) ON PRP.PrdSlNo=SIP.PrdSlNo AND PRP.IDTMngRefNo=SIP.IDTMngRefNo AND PRP.IDTMngRefNo=SI.IDTMngRefNo and PRP.TaxableAmount>0 --and TaxId in (2,3)
			INNER JOIN Product P (NOLOCK) on P.prdid=Sip.prdid
			INNER JOIN TaxConfiguration TC (NOLOCK) ON TC.TaxId=PRP.TaxId
			WHERE VDT.VocRefNo=@PiValue and P.PrdCCode=@Prdcode and SI.StkMgmtTypeId=1
			UNION 
			SELECT DISTINCT 'Null' as TaxRate,0.00 AS TaxAmount  
			FROM IDTManagementProduct SIP (NOLOCK) 
			INNER JOIN IDTManagement SI (NOLOCK) ON SI.IDTMngRefNo=SIP.IDTMngRefNo 
			INNER JOIN StdVocMaster VDT (NOLOCK) on SI.IDTMngRefNo=LTRIM(RTRIM(SUBSTRING(VDT.Remarks,26,CHARINDEX(' Dated',VDT.Remarks)-26))) 
			INNER JOIN Product P (NOLOCK) on P.prdid=Sip.prdid and SI.IDTMngRefNo NOT IN (SELECT DISTINCT IDTMngRefNo FROM IDTManagementProductTax (NOLOCK))
			WHERE VDT.VocRefNo=@PiValue and P.PrdCCode=@Prdcode  and SI.StkMgmtTypeId=1
		)A
		GROUP BY TaxRate
END
--CCRSTAML1028 END
END
IF NOT EXISTS (SELECT * FROM @VoucherExportNode7)
BEGIN
	INSERT INTO @VoucherExportNode7
	SELECT 'Null' as TaxRate,0.00 as TaxAmount
END
RETURN
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE name='Fn_VoucherExportNode8' AND XTYPE='TF')
DROP  FUNCTION Fn_VoucherExportNode8
GO
CREATE FUNCTION Fn_VoucherExportNode8(@sVocType as varchar(200),@PiValue as varchar(200),@VoucherRefNo AS Varchar(200))
RETURNS @VoucherExportNode3 TABLE
(
    FromLocationName varchar(200),
    ToLocationName      Varchar(200),
    ProductCode    varchar(200),
    ProductName    varchar(500),
	Quantity			Int,
	Value		Numeric(18,6)
)
AS
/***************************************************************************************************
* FUNCTION	: Fn_VoucherExportNode8
* PURPOSE	: Returns the Location Transfer Details
* NOTES		:
* CREATED	: Gopikrishnan.R - 20-02-2013
* MODIFIED
* DATE           AUTHOR         DESCRIPTION
-------------------------------------------------------------------------------------------------
**************************************************************************************************/
BEGIN
If UPPER(@sVocType)='SALES- REPLACEMENT IN'
Begin
INSERT INTO @VoucherExportNode3
select distinct L.Lcnname as FromLocationName,L1.LcnName as ToLocationName,P.PrdCCode as ProductCode,P.PrdName+'~'+P.PrdCCode as ProductName,
SUM(TransferQty) as Quantity,SUM(TransferQty*PBD.PrdbatDetailValue) AS Value from Location L WITH (NOLOCK)
inner join LocationTransferMaster LT WITH (NOLOCK) ON LT.FromLcnId=L.LcnId
INNER JOIN LOCATION L1 WITH (NOLOCK) ON L1.LcnId=LT.ToLcnId
INNER JOIN LocationTransferDetails LTD WITH (NOLOCK) ON LT.LcnRefNo=LTD.LcnRefNo AND LT.LcnRefNo=@VoucherRefNo
INNER JOIN Product P WITH (NOLOCK) ON P.PrdId=LTD.PRDID
Inner Join ProductBatch PB WITH (NOLOCK) on PB.PrdId=P.PrdId and LTD.PrdId=PB.prdid
Inner join ProductbatchDetails PBD WITH (NOLOCK) on pbd.Prdbatid=PB.PrdBatId  AND PBD.Prdbatid=LTD.PRDBATID and PBD.DefaultPrice=1 
Inner Join BatchCreation BC WITH (NOLOCK) On BC.SlNo=PBD.SLNo AND BC.SelRte=1
GROUP BY P.PrdCCode, L.Lcnname,L1.LcnName,P.PrdName 
END
If Not exists (select * from @VoucherExportNode3)
Begin
INSERT INTO @VoucherExportNode3
Select 'Null' as  Inventorytype,'Null' as LocationName,'Null' as ProductCode,'Null' as ProductName,0 as Quantity,0 as salesvalue
END
RETURN
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE name='Fn_VoucherExportNode9' AND XTYPE='TF')
DROP  FUNCTION Fn_VoucherExportNode9
GO
CREATE Function [dbo].[Fn_VoucherExportNode9](@sVocType as varchar(200),@PiValue as varchar(200),@VoucherRefNo as Varchar(200),@Prdcode as varchar(200))
RETURNS @VoucherExportNode9 TABLE
(
	BatchCode		VARCHAR(200)
	
)
AS
/***************************************************************************************************
* FUNCTION	: Fn_VoucherExportNode9
* PURPOSE	: Returns the IMEINO details of Location Transfer product
* NOTES		:
* CREATED	: Gopikrishnan.R - 20.02.2013
* MODIFIED
* DATE            AUTHOR           DESCRIPTION
-------------------------------------------------------------------------------------------------
**************************************************************************************************/
BEGIN
DECLARE @QTY AS INT
DECLARE @CNT AS INT
If UPPER(@sVocType)='SALES- REPLACEMENT IN'
BEGIN
INSERT INTO @VoucherExportNode9
	SELECT DISTINCT PrdBatCode FROM LocationTransferMaster SI JOIN LocationTransferDetails SIP ON SI.LcnRefNo=SIP.LcnRefNo
	INNER JOIN Product P ON P.PrdId=SIP.PrdId
	INNER JOIN ProductBatch PB ON PB.PrdId=P.PrdId AND PB.PrdId=SIP.PrdId AND PB.PRDBATID=SIP.PrdBatId	
	WHERE SI.LcnRefNo =@VoucherRefNo and PrdCCode=@Prdcode
END
RETURN
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='FN_VoucherExport' AND XTYPE='TF')
DROP FUNCTION FN_VoucherExport
GO
--select * from dbo.FN_VoucherExport ('2017-11-15','2017-11-15')
CREATE FUNCTION [dbo].[FN_VoucherExport](@Pi_FromDate DATETIME,@Pi_ToDate DATETIME)  
RETURNS @VoucherExport TABLE
(	
	slno            int,
	Voucher			VARCHAR(200),
	VoucherNo		VARCHAR(200),
	VoucherDate		DATETIME,
	VoucherRefNo	VARCHAR(200),
	CompanyCode     varchar(100),
	Salesman        VARCHAR(250),
	DocRefNo        VARCHAR(250),
	Remarks         VARCHAR(250),
	Narration		VARCHAR(500),
	InvoiceDate     DATETIME
)
AS
/***************************************************************************************************
* FUNCTION	: FN_VoucherExport
* PURPOSE	: Returns the Voucher Details of Selected Date range
* NOTES		:
* CREATED	: Gopikrishnan.R - 12.12.2012
* MODIFIED
* DATE            AUTHOR        CR/BZ			USERT STORY ID				DESCRIPTION
* 20/02/2013	Gopikrishnan												Location Tranfer Details are Added
* 22/02/2013    Gopikrishnan												Voucher Split Coding is Added
* 21/03/2013    Gopikrishnan												Cancelled Bill Details flow to Tally and Tax Type Changes
* 08/04/2013    Gopikrishnan												Salesman and DocRefNo Column added
* 22/05/2013    Gopikrishnan												InvoiceDate Column Added
* 03/09/2013    Gopikrishnan												Remarks Column Added
* 28/02/2014    Gopi														Status 1 added in stock transfer to export confirmed loc transfer trans to tally
* 17-04-2014    Gopi														Collection Remarks Column Exported  to Tally if entered in collection Related screens
* 02-11-2017	Murugan.R		CR				CCRSTAML1028				IDT Transaction Added
* 12-07-2019    Raja C          SR              ILCRSTPVM0364               Request to show sales invoice date in tally date field for with Reference sales Rerturns.
-------------------------------------------------------------------------------------------------
**************************************************************************************************/
BEGIN
    IF EXISTS (SELECT * FROM TempTallyVoucher (NOLOCK) where UPPER(Voucher)='PURCHASE')
    BEGIN
	  INSERT INTO @VoucherExport
		SELECT 1,'Purchase' AS Voucher,VocRefNo AS VoucherNo,VocDate AS VoucherDate,'Manual Entry' AS VoucherRefNo,D.DistributorCode as CompanyCode,'Null' as SalesMan,'Null' as DocRefNo,'Null' as Remarks,A.Remarks AS Narration,'' AS InvoiceDate 
		FROM StdVocMaster A (NOLOCK) Left Join Distributor D (NOLOCK) on D.Availability=1 WHERE VocDate BETWEEN @Pi_FromDate AND @Pi_ToDate AND A.AutoGen=0 and VocType=5 ORDER BY VoucherDate
	END
   IF EXISTS (SELECT * FROM TempTallyVoucher (NOLOCK) where UPPER(Voucher)='JOURNAL')
    BEGIN
	  INSERT INTO @VoucherExport
		SELECT 7,'Journal' AS Voucher,
			VocRefNo AS VoucherNo,VocDate AS VoucherDate,SM.StkMngRefNo AS VoucherRefNo,D.DistributorCode as CompanyCode,'Null' as SalesMan,'Null' as DocRefNo,Isnull(SM.ReMarks,'Null') as Remarks,A.Remarks AS Narration,'' AS InvoiceDate 
			FROM StdVocMaster A (NOLOCK) INNER JOIN StockManagement SM (NOLOCK) ON SM.StkMngRefNo=LTRIM(RTRIM(SUBSTRING(A.Remarks,29,CHARINDEX(' Dated',A.Remarks)-29)))
			Left Join Distributor D (NOLOCK) on D.Availability=1
			WHERE VocDate BETWEEN @Pi_FromDate AND @Pi_ToDate	AND VocType=5 AND A.Remarks LIKE 'Posted From Stock Adjustment%' AND A.AutoGen=1
			
			Update R set DocRefno=si.DocRefno FROM StockManagement si inner Join @VoucherExport  R on R.VoucherRefNo=Si.StkMngRefNo AND SI.DocRefno<>''
	END
	IF EXISTS (SELECT * FROM TempTallyVoucher (NOLOCK) where UPPER(Voucher)='SALES')
    BEGIN
	 INSERT INTO @VoucherExport
		SELECT 2,'Sales' AS Voucher,VocRefNo AS VoucherNo,VocDate AS VoucherDate,'Manual Entry' AS VoucherRefNo,D.DistributorCode as CompanyCode,'Null' as SalesMan,'Null' as DocRefNo,'Null' AS Remarks,A.Remarks AS Narration,'' AS InvoiceDate  
		FROM StdVocMaster A (NOLOCK) Left Join Distributor D (NOLOCK) on D.Availability=1 WHERE VocDate BETWEEN @Pi_FromDate AND @Pi_ToDate AND A.AutoGen=0 and VocType=4 ORDER BY VoucherDate
    END
	IF EXISTS (SELECT * FROM TempTallyVoucher (NOLOCK) where UPPER(Voucher)='PAYMENT')
    BEGIN
     INSERT INTO @VoucherExport
		SELECT 5,'Payment' AS Voucher,
			VocRefNo AS VoucherNo,VocDate AS VoucherDate,Right(Left(Remarks,39),10) AS VoucherRefNo,D.DistributorCode as CompanyCode,'Null' as SalesMan,'Null' as DocRefNo,'Null' as Remarks,A.Remarks AS Narration,'' AS InvoiceDate 
			FROM StdVocMaster A (NOLOCK)--INNER JOIN PurchasePayment PP ON PP.PayAdvNo=LTRIM(RTRIM(SUBSTRING(A.Remarks,29,CHARINDEX(' Dated',A.Remarks)-29)))
			Left Join Distributor D (NOLOCK) on D.Availability=1
			WHERE VocDate BETWEEN @Pi_FromDate AND @Pi_ToDate	AND VocType=1 AND A.Remarks LIKE 'Posted From Payment Register%' AND AutoGen=1
	Union
		SELECT 5,'Payment' AS Voucher,VocRefNo AS VoucherNo,VocDate AS VoucherDate,'Manual Entry' AS VoucherRefNo,D.DistributorCode as CompanyCode,'Null' as SalesMan,'Null' as DocRefNo,'Null' as Remarks,A.Remarks AS Narration,'' AS InvoiceDate   
		FROM StdVocMaster A (NOLOCK) Left Join Distributor D (NOLOCK) on D.Availability=1 WHERE VocDate BETWEEN @Pi_FromDate AND @Pi_ToDate AND A.AutoGen=0 and VocType=1 ORDER BY VoucherDate
	END
	IF EXISTS (SELECT * FROM TempTallyVoucher (NOLOCK)where UPPER(Voucher)='RECEIPT')
    BEGIN
     INSERT INTO @VoucherExport
		SELECT 6,'Receipt' AS Voucher,
			VocRefNo AS VoucherNo,VocDate AS VoucherDate,Right(Left(Remarks,30),10) AS VoucherRefNo,D.DistributorCode as CompanyCode,'Null' as SalesMan,'Null' as DocRefNo,'Null' as Remarks,A.Remarks AS Narration,'' AS InvoiceDate 
			FROM StdVocMaster A (NOLOCK)--INNER JOIN Receipt PP ON PP.InvRcpNo=LTRIM(RTRIM(SUBSTRING(A.Remarks,20,CHARINDEX('(',A.Remarks)-20)))
			Left Join Distributor D (NOLOCK) on D.Availability=1
			WHERE VocDate BETWEEN @Pi_FromDate AND @Pi_ToDate AND VocType=2 AND A.Remarks LIKE 'Posted From Receipt%' And A.Remarks Not LIKE 'Posted From Receipt Cancellation%' and A.Remarks Not like '%Posted From Receipt Cash Discount Reversal%' AND A.AutoGen=1
	Union
		SELECT 6,'Receipt' AS Voucher,VocRefNo AS VoucherNo,VocDate AS VoucherDate,'Manual Entry' AS VoucherRefNo,D.DistributorCode as CompanyCode,'Null' as SalesMan,'Null' as DocRefNo,'Null' as Remarks,A.Remarks AS Narration,'' AS InvoiceDate  
		FROM StdVocMaster A (NOLOCK) Left Join Distributor D (NOLOCK) on D.Availability=1 WHERE VocDate BETWEEN @Pi_FromDate AND @Pi_ToDate AND A.AutoGen=0 and VocType=2 ORDER BY VoucherDate
		
	END
	
	IF EXISTS (SELECT * FROM TempTallyVoucher where UPPER(Voucher)='CREDIT NOTE')
    BEGIN
       INSERT INTO @VoucherExport
       SELECT DISTINCT 8,Voucher,VoucherNo,VoucherDate,VoucherRefNo,CompanyCode,'Null' as SalesMan,'Null' as DocRefNo,'Null' as Remarks,Narration,'' AS InvoiceDate  FROM
		(
		SELECT DISTINCT 'Credit Note' AS Voucher,
		VocRefNo AS VoucherNo,VocDate AS VoucherDate,Pr.CrNoteNumber AS VoucherRefNo,D.DistributorCode as CompanyCode ,A.Remarks AS Narration
		FROM StdVocMaster A (NOLOCK) INNER JOIN CreditNoteRetailer PR (NOLOCK) ON Pr.CrNoteNumber=LTRIM(RTRIM(SUBSTRING(A.Remarks,33,CHARINDEX(' Dated',A.Remarks)-33)))
		LEFT JOIN Distributor D (NOLOCK) on D.Availability=1
		WHERE VocDate BETWEEN @Pi_FromDate AND @Pi_ToDate	AND VocType=3 AND A.Remarks LIKE 'Posted From Credit Note%' AND A.AutoGen=1
		UNION
		SELECT DISTINCT 'Credit Note' AS Voucher,
		VocRefNo AS VoucherNo,VocDate AS VoucherDate,Pr.CrNoteNumber AS VoucherRefNo,D.DistributorCode as CompanyCode ,A.Remarks AS Narration
		FROM StdVocMaster A (NOLOCK) INNER JOIN CreditNoteSupplier PR (NOLOCK) ON Pr.CrNoteNumber=LTRIM(RTRIM(SUBSTRING(A.Remarks,33,CHARINDEX(' Dated',A.Remarks)-33)))
		LEFT JOIN Distributor D (NOLOCK) on D.Availability=1
		WHERE VocDate BETWEEN @Pi_FromDate AND @Pi_ToDate	AND VocType=3 AND A.Remarks LIKE 'Posted From Credit Note%' AND A.AutoGen=1 )A
	END
	
------Till Here	
	IF EXISTS (SELECT * FROM TempTallyVoucher (NOLOCK) where UPPER(Voucher)='DEBIT NOTE')
    BEGIN	
		INSERT INTO @VoucherExport
		select Distinct 9,Voucher,VoucherNo,VoucherDate,VoucherRefNo,CompanyCode,'Null' as SalesMan,'Null' as DocRefNo,'Null' as Remarks,Narration,'' AS InvoiceDate  FROM
		(
        SELECT 'Debit Note' AS Voucher,
		VocRefNo AS VoucherNo,VocDate AS VoucherDate,Pr.DbNoteNumber AS VoucherRefNo,D.DistributorCode as CompanyCode,A.Remarks AS Narration
		FROM StdVocMaster A (NOLOCK) INNER JOIN DebitNoteRetailer PR (NOLOCK) ON Pr.DbNoteNumber=LTRIM(RTRIM(SUBSTRING(A.Remarks,33,CHARINDEX(' Dated',A.Remarks)-33)))
		LEFT JOIN Distributor D (NOLOCK) on D.Availability=1
		WHERE VocDate BETWEEN @Pi_FromDate AND @Pi_ToDate	AND VocType=3 AND A.Remarks LIKE 'Posted From Debit Note%' AND A.AutoGen=1 
        UNION   		
        SELECT 'Debit Note' AS Voucher,
		VocRefNo AS VoucherNo,VocDate AS VoucherDate,Pr.DbNoteNumber AS VoucherRefNo,D.DistributorCode as CompanyCode,A.Remarks AS Narration
		FROM StdVocMaster A (NOLOCK) INNER JOIN DebitNoteSupplier PR (NOLOCK) ON Pr.DbNoteNumber=LTRIM(RTRIM(SUBSTRING(A.Remarks,33,CHARINDEX(' Dated',A.Remarks)-33)))
		LEFT JOIN Distributor D (NOLOCK) on D.Availability=1
		WHERE VocDate BETWEEN @Pi_FromDate AND @Pi_ToDate	AND VocType=3 AND A.Remarks LIKE 'Posted From Debit Note%' AND A.AutoGen=1 )A
	END	
		
	IF EXISTS (SELECT * FROM TempTallyVoucher (NOLOCK) where UPPER(Voucher)='JOURNAL')
    BEGIN
			INSERT INTO @VoucherExport
			SELECT 7,'Journal' AS Voucher,
			VocRefNo AS VoucherNo,VocDate AS VoucherDate,LTRIM(RTRIM(SUBSTRING(A.Remarks,33,CHARINDEX('(',A.Remarks)-33)))AS VoucherRefNo,D.DistributorCode as CompanyCode,'Null' as SalesMan,'Null' as DocRefNo,'Null' as Remarks,A.Remarks AS Narration,'' AS InvoiceDate 
			FROM StdVocMaster A (NOLOCK) --INNER JOIN Receipt PP ON PP.InvRcpNo=LTRIM(RTRIM(SUBSTRING(A.Remarks,20,CHARINDEX('(',A.Remarks)-20)))
			Left Join Distributor D (NOLOCK) on D.Availability=1
			WHERE VocDate BETWEEN @Pi_FromDate AND @Pi_ToDate AND VocType=2 AND A.Remarks LIKE '%Posted From Receipt Cancellation%' AND A.AutoGen=1
	Union
		SELECT 7,'Journal' AS Voucher,
			VocRefNo AS VoucherNo,VocDate AS VoucherDate,LTRIM(RTRIM(SUBSTRING(Remarks,26,CHARINDEX(' Dated',Remarks)-25))) AS VoucherRefNo,D.DistributorCode as CompanyCode,'Null' as SalesMan,'Null' as DocRefNo,'Null' as Remarks,A.Remarks AS Narration,'' AS InvoiceDate 
			FROM StdVocMaster A (NOLOCK) --INNER JOIN PurchasePayment PP ON PP.PayAdvNo=LTRIM(RTRIM(SUBSTRING(A.Remarks,29,CHARINDEX(' Dated',A.Remarks)-29)))
			Left Join Distributor D (NOLOCK) on D.Availability=1
			WHERE VocDate BETWEEN @Pi_FromDate AND @Pi_ToDate	AND VocType=1 AND A.Remarks LIKE 'Posted From ChequePayment%' AND AutoGen=1
	UNION
			SELECT 7,'Journal' AS Voucher,
			VocRefNo AS VoucherNo,VocDate AS VoucherDate,LTRIM(RTRIM(SUBSTRING(A.Remarks,20,CHARINDEX('(',A.Remarks)-20))) AS VoucherRefNo,D.DistributorCode as CompanyCode,'Null' as SalesMan,'Null' as DocRefNo,'Null' as Remarks,A.Remarks AS Narration,'' AS InvoiceDate 
			FROM StdVocMaster A (NOLOCK)--INNER JOIN Receipt PP ON PP.InvRcpNo=LTRIM(RTRIM(SUBSTRING(A.Remarks,20,CHARINDEX('(',A.Remarks)-20)))
			Left Join Distributor D (NOLOCK) on D.Availability=1
			WHERE VocDate BETWEEN @Pi_FromDate AND @Pi_ToDate AND VocType=2 AND A.Remarks like '%Posted From Receipt Cash Discount Reversal%' AND A.AutoGen=1
   	Union
		SELECT 7,'Journal' AS Voucher,VocRefNo AS VoucherNo,VocDate AS VoucherDate,'Manual Entry' AS VoucherRefNo,D.DistributorCode as CompanyCode,'Null' as SalesMan,'Null' as DocRefNo,'Null' as Remarks,A.Remarks AS Narration,'' AS InvoiceDate   
		FROM StdVocMaster A (NOLOCK) Left Join Distributor D (NOLOCK) on D.Availability=1 WHERE VocDate BETWEEN @Pi_FromDate AND @Pi_ToDate AND A.AutoGen=0 and VocType=3 ORDER BY VoucherDate
	END 
	IF EXISTS (SELECT * FROM TempTallyVoucher (NOLOCK) where UPPER(Voucher)='CONTRA')
    BEGIN
      INSERT INTO @VoucherExport	
		SELECT 10,'contra' AS Voucher,
		VocRefNo AS VoucherNo,VocDate AS VoucherDate,'Manual Entry' AS VoucherRefNo,D.DistributorCode as CompanyCode,'Null' as SalesMan,'Null' as DocRefNo,'Null' as Remarks,A.Remarks AS Narration,'' AS InvoiceDate   
		FROM StdVocMaster A (NOLOCK) Left Join Distributor D (NOLOCK) on D.Availability=1 WHERE VocDate BETWEEN @Pi_FromDate AND @Pi_ToDate AND A.AutoGen=0 and VocType=0 ORDER BY VoucherDate
  END
  	IF EXISTS (SELECT * FROM TempTallyVoucher (NOLOCK) where UPPER(Voucher)='MEMO')
    BEGIN
      INSERT INTO @VoucherExport	
		SELECT 11,'Memo' AS Voucher,
		VocRefNo AS VoucherNo,VocDate AS VoucherDate,'Manual Entry' AS VoucherRefNo,D.DistributorCode as CompanyCode,'Null' as SalesMan,'Null' as DocRefNo,'Null' as Remarks,A.Remarks AS Narration,'' AS InvoiceDate   
		FROM StdVocMaster A (NOLOCK) Left Join Distributor D (NOLOCK) on D.Availability=1 WHERE VocDate BETWEEN @Pi_FromDate AND @Pi_ToDate AND A.AutoGen=0 and VocType=7 ORDER BY VoucherDate
	END
	----Added by Gopikrishnan at 20/02/2013 for Location Transfer
	IF EXISTS (SELECT * FROM TempTallyVoucher (NOLOCK) where UPPER(Voucher)='STOCKTRANSFER')
    BEGIN
      INSERT INTO @VoucherExport	
		SELECT 12,'StockTransfer' AS Voucher,
		LcnRefNo + 'A' AS VoucherNo,LcnTrfDate AS VoucherDate,LcnRefNo AS VoucherRefNo,D.DistributorCode as CompanyCode,'Null' as SalesMan,'Null' as DocRefNo,Isnull(A.Remarks,'Null') as Remarks,
		'Goods Transfer From '+L.LcnName+' to '+   L1.LcnName + '' AS Narration,'' AS InvoiceDate  
		FROM LocationTransferMaster A (NOLOCK) Inner Join Location L (NOLOCK) on A.FromLcnId=l.LcnId ---Status added by Gopi at 28-02-2014
		Inner Join Location L1 (NOLOCK) ON L1.LcnId=A.ToLcnId
		Left Join Distributor D (NOLOCK) on D.Availability=1 
		WHERE LcnTrfDate BETWEEN @Pi_FromDate AND @Pi_ToDate ORDER BY VoucherDate
		
		Update R set DocRefno=si.DocRefno FROM LocationTransferMaster si inner Join @VoucherExport  R on R.VoucherRefNo=Si.LcnRefNo AND SI.DocRefno<>''
	END
	
	IF EXISTS (SELECT * FROM TempTallyVoucher (NOLOCK) where UPPER(Voucher)='SALES')
    BEGIN
			INSERT INTO @VoucherExport	
			SELECT DISTINCT  2,'Sales' AS Voucher,
			    VocRefNo AS VoucherNo,Salinvdate AS VoucherDate,S.SalInvNo AS VoucherRefNo,D.DistributorCode as CompanyCode,'Null' as SalesMan,'Null' as DocRefNo,'Null' as Remarks,A.Remarks AS Narration,'' AS InvoiceDate 
				FROM StdVocMaster A (NOLOCK) INNER JOIN SalesInvoice S (NOLOCK) ON S.SalInvNo=LTRIM(RTRIM(SUBSTRING(A.Remarks,20,CHARINDEX(' Dated',A.Remarks)-20)))
				inner Join SalesInvoiceProduct SIP (NOLOCK) on SIP.Salid=S.Salid --and DlvSts<>3
				Inner Join Tbl_GR_Build_PH TG (NOLOCK) on SIP.PrdId=TG.prdid
				Left Join Distributor D (NOLOCK) on D.Availability=1
				WHERE VocDate BETWEEN @Pi_FromDate AND @Pi_ToDate	AND VocType=4 AND A.Remarks LIKE 'Posted From Billing%'	AND A.AutoGen=1
				Group by VocRefNo,Salinvdate,S.SalInvNo,D.DistributorCode,A.Remarks
				
			Update R set SalesMan=SMNAME FROM Salesman S inner join SalesInvoice si on s.SMId=si.SMId 
			inner Join @VoucherExport  R on R.VoucherRefNo=Si.Salinvno
			
			Update R set DocRefno=SalinvRef FROM SalesInvoice si inner Join @VoucherExport  R on R.VoucherRefNo=Si.Salinvno and si.SalinvRef<>''
			
			Update R set Remarks=SI.Remarks FROM SalesInvoice si inner Join @VoucherExport  R on R.VoucherRefNo=Si.Salinvno and si.Remarks<>''
	
	 END
	IF EXISTS (SELECT * FROM TempTallyVoucher (NOLOCK) where UPPER(Voucher)='PURCHASE')
	BEGIN
		 INSERT INTO @VoucherExport	
		  Select Distinct 1,'Purchase' AS Voucher,
		  VocRefNo AS VoucherNo,VocDate AS VoucherDate,Pr.Cmpinvno AS VoucherRefNo,D.DistributorCode as CompanyCode,'Null' as SalesMan,'Null' as DocRefNo,'Null' as Remarks,Remarks AS Narration,InvDate AS InvoiceDate 
		  from StdVocMaster A (NOLOCK) INNER JOIN PurchaseReceipt PR (NOLOCK) ON Pr.PurRcptRefNo=LTRIM(RTRIM(SUBSTRING(A.Remarks,16,CHARINDEX(' Dated',A.Remarks)-16)))
		  INNER JOIN PurchaseReceiptProduct  SIP (NOLOCK) ON PR.PurRcptId=SIP.PurRcptId 
		  Inner Join Tbl_GR_Build_PH TG  (NOLOCK) on SIP.PrdId=TG.prdid
		  Left Join Distributor D (NOLOCK) on D.Availability=1
		  WHERE VocDate BETWEEN @Pi_FromDate AND @Pi_ToDate	AND VocType=5 AND Remarks LIKE 'Posted From GRN%' AND A.AutoGen=1
		  Group by VocRefNo,VocDate,Pr.Cmpinvno,D.DistributorCode,Remarks,pr.InvDate
   END
	IF EXISTS (SELECT * FROM TempTallyVoucher (NOLOCK) where UPPER(Voucher)='PURCHASE RETURN')
	BEGIN
		INSERT INTO @VoucherExport
		SELECT 3,'Purchase Return' AS Voucher,
			VocRefNo AS VoucherNo,VocDate AS VoucherDate,
			PR.PurRetRefNo AS VoucherRefNo,D.DistributorCode as CompanyCode,'Null' as SalesMan,'Null' as DocRefNo,'Null' as Remarks,A.Remarks AS Narration,'' as InvoiceDate
			FROM StdVocMaster A (NOLOCK) INNER JOIN PurchaseReturn  PR (NOLOCK) ON PR.PurRetRefNo=LTRIM(RTRIM(SUBSTRING(A.Remarks,28,CHARINDEX(' Dated',A.Remarks)-28)))
			INNER JOIN PurchaseReturnProduct  SIP (NOLOCK) ON PR.PurRetId=SIP.PurRetId 
			Inner Join Tbl_GR_Build_PH TG  (NOLOCK) on SIP.PrdId=TG.prdid
			Left Join Distributor D (NOLOCK) on D.Availability=1
			WHERE VocDate BETWEEN @Pi_FromDate AND @Pi_ToDate	AND VocType=5 AND A.Remarks LIKE 'Posted From Purchase Return%' AND A.AutoGen=1
			Group by VocRefNo,VocDate,PR.PurRetRefNo,D.DistributorCode,A.Remarks 
			
	END
	
    IF EXISTS (SELECT * FROM TempTallyVoucher (NOLOCK) where UPPER(Voucher)='SALES RETURN')
    BEGIN
			    INSERT INTO @VoucherExport
				SELECT 4,'Sales Return' AS Voucher,
					VocRefNo AS VoucherNo,VocDate AS VoucherDate,RH.ReturnCode AS VoucherRefNo,D.DistributorCode as CompanyCode,'Null' as SalesMan,'Null' as DocRefNo,'Null' as Remarks,A.Remarks AS Narration,ISNULL(S.SalInvDate,'') as InvoiceDate
					FROM StdVocMaster A (NOLOCK) INNER JOIN ReturnHeader RH (NOLOCK) ON RH.ReturnCode=LTRIM(RTRIM(SUBSTRING(A.Remarks,24,CHARINDEX(' Dated',A.Remarks)-24)))
					INNER JOIN ReturnProduct  SIP (NOLOCK) ON RH.ReturnID=SIP.ReturnID 
					Inner Join Tbl_GR_Build_PH TG  (NOLOCK) on SIP.PrdId=TG.prdid
					Inner join Retailer R1 (NOLOCK) ON R1.RtrId=RH.Rtrid
				    Left Join Distributor D (NOLOCK) on D.Availability=1
					Left Join Salesinvoice S(NOLOCK) ON RH.Salid=S.Salid --> ILCRSTPVM0364
					WHERE VocDate BETWEEN @Pi_FromDate AND @Pi_ToDate	AND VocType=4 AND A.Remarks LIKE 'Posted From SalesReturn%'	AND A.AutoGen=1
					Group by VocRefNo,VocDate,RH.ReturnCode,D.DistributorCode,A.Remarks,S.SalInvDate
					
				Update R set SalesMan=SMNAME FROM Salesman S inner join ReturnHeader si on s.SMId=si.SMId 
				inner Join @VoucherExport  R on R.VoucherRefNo=Si.ReturnCode
				
				Update R set DocRefno=SI.DocRefNo FROM ReturnHeader si inner Join @VoucherExport  R on R.VoucherRefNo=Si.ReturnCode and si.Docrefno<>''
	END
	--Added by Kishore
	IF EXISTS (SELECT '*' FROM TempTallyVoucher (NOLOCK) where UPPER(Voucher)='STOCK LEDGER')
	BEGIN
			INSERT INTO @VoucherExport	
			SELECT DISTINCT  2,'Stock Ledger' AS Voucher,
		    convert(varchar(10),@Pi_FromDate,121) AS VoucherNo,@Pi_FromDate AS VoucherDate,convert(varchar(10),@Pi_ToDate -1,121) AS VoucherRefNo,
		    D.DistributorCode as CompanyCode,'Null' as SalesMan,'Null' as DocRefNo,'Null' as Remarks,
		    'Posted From Stock ledger Dated ' + CONVERT(varchar(10), @Pi_FromDate , 121) AS Narration,'' AS InvoiceDate 
			FROM Distributor D (NOLOCK)
	END 
	-- Till Here	  
	
	----CCRSTAML1028 Start
	IF EXISTS (SELECT '*' FROM TempTallyVoucher (NOLOCK) where UPPER(Voucher)='IDT')
	BEGIN
			INSERT INTO @VoucherExport
			SELECT 13,'IDT' AS Voucher,
			VocRefNo AS VoucherNo,VocDate AS VoucherDate,Pr.IDTMngRefNo AS VoucherRefNo,D.DistributorCode as CompanyCode,'Null' as SalesMan,'Null' as DocRefNo,'Null' as Remarks,
			A.Remarks AS Narration,'' AS InvoiceDate 
			from StdVocMaster A (NOLOCK) 
			INNER JOIN IDTManagement PR (NOLOCK) ON Pr.IDTMngRefNo=LTRIM(RTRIM(SUBSTRING(A.Remarks,26,CHARINDEX(' Dated',A.Remarks)-26)))
			INNER JOIN IDTManagementProduct  SIP (NOLOCK) ON PR.IDTMngRefNo=SIP.IDTMngRefNo 
			INNER JOIN Tbl_GR_Build_PH TG  (NOLOCK) on SIP.PrdId=TG.prdid
			LEFT JOIN Distributor D (NOLOCK) on D.Availability=1
			WHERE VocDate BETWEEN @Pi_FromDate AND @Pi_ToDate	AND VocType=5 AND A.Remarks LIKE 'Posted From IDT Stock Out%' AND A.AutoGen=1
			and PR.StkMgmtTypeId=2
			GROUP BY VocRefNo,VocDate,Pr.IDTMngRefNo,D.DistributorCode,A.Remarks,pr.IDTMngDate
	END 	
	
	IF EXISTS (SELECT '*' FROM TempTallyVoucher (NOLOCK) where UPPER(Voucher)='IDT In')
	BEGIN
			INSERT INTO @VoucherExport
			SELECT 14,'IDT In' AS Voucher,
			VocRefNo AS VoucherNo,VocDate AS VoucherDate,Pr.IDTMngRefNo AS VoucherRefNo,D.DistributorCode as CompanyCode,'Null' as SalesMan,'Null' as DocRefNo,'Null' as Remarks,
			A.Remarks AS Narration,'' AS InvoiceDate 
			from StdVocMaster A (NOLOCK) 
			INNER JOIN IDTManagement PR (NOLOCK) ON Pr.IDTMngRefNo=LTRIM(RTRIM(SUBSTRING(A.Remarks,25,CHARINDEX(' Dated',A.Remarks)-25)))
			INNER JOIN IDTManagementProduct  SIP (NOLOCK) ON PR.IDTMngRefNo=SIP.IDTMngRefNo 
			INNER JOIN Tbl_GR_Build_PH TG  (NOLOCK) on SIP.PrdId=TG.prdid
			LEFT JOIN Distributor D (NOLOCK) on D.Availability=1
			WHERE VocDate BETWEEN @Pi_FromDate AND @Pi_ToDate	AND VocType=5 AND A.Remarks LIKE 'Posted From IDT Stock In%' AND A.AutoGen=1
			and PR.StkMgmtTypeId=1
			GROUP BY VocRefNo,VocDate,Pr.IDTMngRefNo,D.DistributorCode,A.Remarks,pr.IDTMngDate
	END 	
	----CCRSTAML1028 END
RETURN
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE name='ProductBatchTaxPercent' AND XTYPE='U')
DROP TABLE ProductBatchTaxPercent
GO
CREATE TABLE ProductBatchTaxPercent
(
	[PrdId] [int] NULL,
	[PrdBatId] [int] NULL,
	[TaxPercentage] [numeric](18, 5) NULL
)
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE name='TempProductTax' AND XTYPE='U')
DROP TABLE TempProductTax
GO
CREATE TABLE TempProductTax
(
	[PrdId] [int] NULL,
	[PrdBatId] [int] NULL,
	[TaxId] [int] NULL,
	[TaxSlabId] [int] NULL,
	[TaxPercentage] [numeric](5, 2) NULL,
	[TaxAmount] [numeric](18, 5) NULL
)
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE name='Proc_TaxCalCulation' AND XTYPE='P')
DROP PROCEDURE Proc_TaxCalCulation
GO
--EXEc Proc_TaxCalCulation 13,5842
CREATE PROCEDURE Proc_TaxCalCulation  
 (  
  @Prdid AS INT,  
  @Prdbatid AS INT  
 )  
 AS  
 BEGIN  
   DECLARE @TaxSettingDet TABLE         
   (        
    TaxSlab   INT,        
    ColNo   INT,        
    SlNo   INT,        
    BillSeqId  INT,        
    TaxSeqId  INT,        
    ColType   INT,         
    ColId   INT,        
    ColVal   NUMERIC(38,2)        
   )     
   DECLARE @PrdBatTaxGrp AS INT  
   DECLARE @PurSeqId AS INT  
   DECLARE @BillSeqId AS INT  
   DECLARE @RtrTaxGrp AS INT     
   DECLARE @TaxSlab  INT    
   DECLARE @MRP INT      
   DECLARE @TaxableAmount  NUMERIC(28,10)        
   DECLARE @ParTaxableAmount NUMERIC(28,10)        
   DECLARE @TaxPer   NUMERIC(38,2)       
   DECLARE @TaxPercentage   NUMERIC(38,5)     
   DECLARE @TaxId   INT      
   SELECT @PrdBatTaxGrp = TaxGroupId FROM ProductBatch A (NOLOCK) WHERE Prdid=@Prdid and  Prdbatid=@Prdbatid   
   SELECT @BillSeqId = MAX(BillSeqId)  FROM BillSequenceMaster (NOLOCK)  
    SELECT @RtrTaxGrp=MIN(Distinct RtriD) FROM TaxSettingMaster A (NOLOCK) INNER JOIN TaxGroupSetting B ON A.Rtrid =B.Taxgroupid WHERE RtrGroup='RTRINTRA' AND
   Prdid =@PrdBatTaxGrp
   INSERT INTO @TaxSettingDet (TaxSlab,ColNo,SlNo,BillSeqId,TaxSeqId,ColType,ColId,ColVal)        
   SELECT B.RowId,B.ColNo,B.SlNo,B.BillSeqId,B.TaxSeqId,B.ColType,B.ColId,B.ColVal        
   FROM TaxSettingMaster A (NOLOCK) INNER JOIN        
   TaxSettingDetail B (NOLOCK) ON A.TaxSeqId = B.TaxSeqId        
   AND B.BillSeqId=@BillSeqId  and Coltype IN(1,3)      
   WHERE A.RtrId = @RtrTaxGrp AND A.Prdid = @PrdBatTaxGrp       
   AND A.TaxSeqId in (Select ISNULL(Max(TaxSeqId),0) FROM TaxSettingMaster WHERE        
   RtrId = @RtrTaxGrp AND Prdid = @PrdBatTaxGrp  
   and CONVERT(DATETIME,CONVERT(VARCHAR(10),EffectiveFrom,121),121)<=CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121)  
   )
   SET @MRP=1  
   TRUNCATE TABLE TempProductTax  
   DECLARE  CurTax CURSOR FOR        
    SELECT DISTINCT TaxSlab FROM @TaxSettingDet        
   OPEN CurTax          
   FETCH NEXT FROM CurTax INTO @TaxSlab        
   WHILE @@FETCH_STATUS = 0          
   BEGIN        
   SET @TaxableAmount = 0        
   IF EXISTS (SELECT * FROM @TaxSettingDet WHERE TaxSlab = @TaxSlab AND ColType = 1        
   AND ColId = 0 and ColVal >= 0)        
   BEGIN        
   SELECT @TaxPer = ColVal FROM @TaxSettingDet WHERE TaxSlab = @TaxSlab AND ColType = 1        
   AND ColId = 0        
   SELECT @TaxId = Cast(ColVal as INT) FROM @TaxSettingDet WHERE TaxSlab = @TaxSlab AND ColType = 1        
   AND ColId > 0        
   SET @TaxableAmount = ISNULL(@TaxableAmount,0) + @MRP   
   SELECT @ParTaxableAmount =  ISNULL(SUM(TaxAmount),0) FROM TempProductTax A        
   INNER JOIN @TaxSettingDet B ON A.TaxId = B.ColVal and    
   B.ColType = 3 AND B.TaxSlab = @TaxSlab   
   If @ParTaxableAmount>0  
   BEGIN  
    Set @TaxableAmount=@ParTaxableAmount  
   END   
   ELSE  
   BEGIN  
    Set @TaxableAmount = @TaxableAmount  
   END      
   INSERT INTO TempProductTax (PrdId,PrdBatId,TaxId,TaxSlabId,TaxPercentage,        
   TaxAmount)        
   SELECT @Prdid,@Prdbatid,@TaxId,@TaxSlab,@TaxPer,        
   cast(@TaxableAmount*(@TaxPer / 100 ) AS NUMERIC(28,10))        
   END        
   FETCH NEXT FROM CurTax INTO @TaxSlab        
   END          
   CLOSE CurTax          
   DEALLOCATE CurTax        
   SELECT @TaxPercentage=Cast(ISNULL(SUM(TaxAmount)*100,0) as Numeric(18,5))  
   FROM TempProductTax WHERE Prdid=@Prdid and Prdbatid=@Prdbatid  
   PRINT @TaxPercentage  
   IF EXISTS(SELECT * FROM ProductBatchTaxPercent WHERE Prdid=@Prdid and Prdbatid=@Prdbatid)  
   BEGIN     
    UPDATE ProductBatchTaxPercent  SET TaxPercentage=@TaxPercentage  
    WHERE Prdid=@Prdid and Prdbatid=@Prdbatid  
   END   
   ELSE  
   BEGIN     
    INSERT INTO ProductBatchTaxPercent(Prdid,Prdbatid,TaxPercentage)  
   SELECT @Prdid,@Prdbatid,@TaxPercentage  
   END  
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE name='Fn_ProductXmlExport' AND XTYPE='TF')
DROP  FUNCTION Fn_ProductXmlExport
GO
--select * FROM Fn_ProductXmlExport()
CREATE FUNCTION Fn_ProductXmlExport()
RETURNS @ProductXmlExport TABLE
(
    ProductCode    varchar(200),
	ProductName	Varchar(200),
	LandingPrice Numeric(18,6),
	Price Numeric(18,6),
	EffectiveDate varchar(10),
	Tax Varchar(25)
)
AS
/***************************************************************************************************
* FUNCTION	: Fn_ProductXmlExport
* PURPOSE	: Returns the Product Master
* NOTES		:
* CREATED	: Gopikrishnan
* MODIFIED
* DATE			AUTHOR			DESCRIPTION
*21-02-2013   Gopikrishnan    Nolock is Added
-------------------------------------------------------------------------------------------------
**************************************************************************************************/
BEGIN
DECLARE @TaxGroupid AS int
Declare @Seqid as Int
Declare @BillSeqId as Int
Declare @TaxGroup as int
  Insert into @ProductXmlExport
  select Distinct Prdccode  as ProductCode,PrdName+'~'+Prdccode as ProductName,
  PBD1.PrdbatDetailValue as LandingPrice,PBD.PrdbatDetailValue as Price,Convert(varchar(10),MnfDate,105) as EffectiveDate,
  Convert(nvarchar(10),'') AS Tax
  FROM  Product P WITH (NOLOCK)
  --Inner Join Tbl_GR_Build_PH TG WITH (NOLOCK) ON TG.Prdid=P.prdid
  INNER JOIN ProductBatch PB WITH (NOLOCK) on PB.PrdId=P.PrdId
  INNER JOIN ProductbatchDetails PBD WITH (NOLOCK) on pbd.Prdbatid=PB.PrdBatId and PBD.DefaultPrice=1 
  INNER JOIN BatchCreation BC WITH (NOLOCK) On BC.SlNo=PBD.SLNo AND BC.SelRte=1
  INNER JOIN ProductbatchDetails PBD1 WITH (NOLOCK) on pbd1.Prdbatid=PB.PrdBatId and PBD1.DefaultPrice=1 
  INNER JOIN BatchCreation BC1 WITH (NOLOCK) On BC1.SlNo=PBD1.SLNo AND BC1.ListPrice=1
  --Inner Join ProductBatchTaxPercent A WITH (NOLOCK) on A.PrdId=P.PrdId AND A.PrdBatId=PB.PrdBatId AND A.PrdId=TG.PrdId
  Order by ProductCode
RETURN
END
GO
DELETE FROM TallyVoucherType
INSERT INTO TallyVoucherType
SELECT 1,'Purchase' UNION
SELECT 2,'Purchase Return' UNION
SELECT 3,'Journal' UNION
SELECT 4,'Sales' UNION
SELECT 5,'Sales Return' UNION
SELECT 6,'Receipt' UNION
SELECT 7,'Payment' UNION 
SELECT 8,'Memo' UNION
SELECT 9,'Contra' UNION
SELECT 10,'Credit Note' UNION
SELECT 11,'Debit Note'UNION 
SELECT 12,'StockTransfer'
GO
DELETE FROM Export_BtnVoucher
INSERT INTO Export_BtnVoucher
SELECT 'TRUE','FALSE','1','0'
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE name='Fn_ExportVoucherRetailerExcel' AND XTYPE='TF')
DROP FUNCTION Fn_ExportVoucherRetailerExcel
GO
CREATE Function Fn_ExportVoucherRetailerExcel()
RETURNS @ExportVoucherRetailerExcel TABLE
(
    RtrName Varchar(200),
    CmpRtrCode    varchar(200)
	
)
AS
/***************************************************************************************************
* FUNCTION	: Fn_ExportVoucherRetailerExcel
* PURPOSE	: Returns the Retailer master in Mapping excel for Tally
* NOTES		:
* CREATED	: Gopikrishnan
* MODIFIED
* DATE           AUTHOR        DESCRIPTION
*21-02-2013     Gopikrishnan   Nolock is added
-------------------------------------------------------------------------------------------------
**************************************************************************************************/
BEGIN
	Insert into @ExportVoucherRetailerExcel
	select RtrName,CmpRtrCode from retailer (NOLOCK) order by rtrid
	RETURN
END
GO
IF EXISTS(SELECT 'x' FROM SYSOBJECTS WHERE XTYPE='TF' AND NAME='FN_VoucherGSTInfoNode10')
DROP FUNCTION FN_VoucherGSTInfoNode10
GO
--SELECT * FROM DBO.FN_VoucherGSTInfoNode10 ('PURCHASE RETURN','PUR1700687','PRT1700001')
CREATE FUNCTION [FN_VoucherGSTInfoNode10](@VocType as Varchar(100),@VoucherNo Varchar(100),@VoucherRefNo Varchar(100))  
RETURNS @VoucherExport TABLE
(	
	STATENAME		Varchar(150),
	PARTYGSTIN		Varchar(30),
	PLACEOFSUPPLY	Varchar(150),
	CONSIGNEESTATENAME Varchar(150)	,
	CONSIGNEEGSTIN	Varchar(30),
	CREDITNOTENUMBER Varchar(50),
	CREDITNOTEDATE	DATETIME,
	REFERENCENO Varchar(50)
)
AS
/***************************************************************************************************
* FUNCTION	: FN_VoucherGSTInfo
* PURPOSE	: Returns the Gst Information
* NOTES		:
* CREATED	: Murugan.R - 11/10/2017 USERSTORYID CCRSTAML1028
* MODIFIED
* DATE            AUTHOR       CR/BZ	USERSTORYID		DESCRIPTION
-------------------------------------------------------------------------------------------------
**************************************************************************************************/
BEGIN

	DECLARE @RetailerGSTIN TABLE
	(
		RtrId INT,
		GSTIN Varchar(30)
	)
	DECLARE @RetailerState TABLE
	(
		RtrId INT,
		Statename Varchar(150)
	)
	
	DECLARE @SupplierGSTIN TABLE
	(
		SpmId INT,
		GSTIN Varchar(30)
	)
	DECLARE @SupplierState TABLE
	(
		SpmId INT,
		Statename Varchar(150)
	)
	DECLARE @DistStatName Varchar(150)
	DECLARE @DistGSTTIN Varchar(30)
	SET @DistStatName='Null'
	SET @DistGSTTIN='Null'
	
	SELECT @DistGSTTIN=ColumnValue		
	FROM UdcHD A (NOLOCK)
	INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId
	INNER JOIN UdcDetails C (NOLOCK) ON C.MasterId=B.MasterId and C.MasterId=A.MasterId
	and C.UdcMasterId=B.UdcMasterId 
	INNER JOIN Distributor P (NOLOCK) ON P.DistributorId=C.MasterRecordId
	WHERE A.MasterName='Distributor Info Master' and B.ColumnName='GSTIN'
	
		
	SELECT @DistStatName=
	Case WHEN ColumnValue ='Orissa' THEN 'Odisha' 
		 WHEN ColumnValue ='Andaman and Nicobar Islands' THEN 'Andaman & Nicobar Islands'
		 WHEN ColumnValue ='Dadra and Nagar Haveli' THEN 'Dadra & Nagar Haveli'
		 WHEN ColumnValue ='Daman and Diu' THEN 'Daman & Diu'
		 WHEN ColumnValue ='Jammu and Kashmir' THEN 'Jammu & Kashmir'
	ELSE 	ColumnValue	END	
	FROM UdcHD A (NOLOCK)
	INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId
	INNER JOIN UdcDetails C (NOLOCK) ON C.MasterId=B.MasterId and C.MasterId=A.MasterId
	and C.UdcMasterId=B.UdcMasterId 
	INNER JOIN Distributor P (NOLOCK) ON P.DistributorId=C.MasterRecordId
	INNER JOIN StateMaster S (NOLOCK) ON S.StateName=C.ColumnValue
	WHERE A.MasterName='Distributor Info Master' and B.ColumnName='State Name'
		
	INSERT INTO @RetailerGSTIN(RtrId,GSTIN)
	SELECT DISTINCT  R.RtrId as RtrId,UT.ColumnValue 
	FROM UDCHD U 
	INNER JOIN UDCMASTER UD ON U.MasterId=UD.MasterId
	INNER JOIN UdcDetails UT ON UT.MasterId=UD.MasterId and UT.UdcMasterId=UD.UdcMasterId
	INNER JOIN Retailer R ON R.RtrId=UT.MasterRecordId
	WHERE U.MasterId=2 and ColumnName='GSTIN'
	
	INSERT INTO @RetailerState(RtrId,Statename)
	SELECT DISTINCT  R.RtrId as RtrId,
	Case WHEN UT.ColumnValue ='Orissa' THEN 'Odisha' 
		 WHEN UT.ColumnValue ='Andaman and Nicobar Islands' THEN 'Andaman & Nicobar Islands'
		 WHEN UT.ColumnValue ='Dadra and Nagar Haveli' THEN 'Dadra & Nagar Haveli'
		 WHEN UT.ColumnValue ='Daman and Diu' THEN 'Daman & Diu'
		 WHEN UT.ColumnValue ='Jammu and Kashmir' THEN 'Jammu & Kashmir'
	ELSE 	UT.ColumnValue	END		
	FROM UDCHD U 
	INNER JOIN UDCMASTER UD ON U.MasterId=UD.MasterId
	INNER JOIN UdcDetails UT ON UT.MasterId=UD.MasterId and UT.UdcMasterId=UD.UdcMasterId
	INNER JOIN Retailer R ON R.RtrId=UT.MasterRecordId
	WHERE U.MasterId=2 and ColumnName='State Name'
	
	INSERT INTO @SupplierGSTIN(SpmId,GSTIN)
	SELECT DISTINCT   R.SpmId as SpmId,UT.ColumnValue 
	FROM UDCHD U 
	INNER JOIN UDCMASTER UD ON U.MasterId=UD.MasterId
	INNER JOIN UdcDetails UT ON UT.MasterId=UD.MasterId and UT.UdcMasterId=UD.UdcMasterId
	INNER JOIN Supplier R ON R.SpmId=UT.MasterRecordId
	WHERE U.MasterId=8 and ColumnName='GSTIN'
	UNION
	SELECT DISTINCT   R.SpmId as SpmId,UT.ColumnValue 
	FROM UDCHD U 
	INNER JOIN UDCMASTER UD ON U.MasterId=UD.MasterId
	INNER JOIN UdcDetails UT ON UT.MasterId=UD.MasterId and UT.UdcMasterId=UD.UdcMasterId
	INNER JOIN IDTMaster R ON R.SpmId=UT.MasterRecordId
	WHERE U.MasterId=8 and ColumnName='GSTIN'
	
	
	INSERT INTO @SupplierState(SpmId,Statename)
	SELECT DISTINCT  R.SpmId as SpmId,UT.ColumnValue 
	FROM UDCHD U 
	INNER JOIN UDCMASTER UD ON U.MasterId=UD.MasterId
	INNER JOIN UdcDetails UT ON UT.MasterId=UD.MasterId and UT.UdcMasterId=UD.UdcMasterId
	INNER JOIN Supplier R ON R.SpmId=UT.MasterRecordId
	WHERE U.MasterId=8 and ColumnName='State Name'
	UNION
	SELECT DISTINCT   R.SpmId as SpmId,UT.ColumnValue 
	FROM UDCHD U 
	INNER JOIN UDCMASTER UD ON U.MasterId=UD.MasterId
	INNER JOIN UdcDetails UT ON UT.MasterId=UD.MasterId and UT.UdcMasterId=UD.UdcMasterId
	INNER JOIN IDTMaster R ON R.SpmId=UT.MasterRecordId
	WHERE U.MasterId=8 and ColumnName='State Name'
	
	IF 
		(
		UPPER(@VocType)='JOURNAL' OR  UPPER(@VocType)='CONTRA' 
		OR  UPPER(@VocType)='MEMO' OR  UPPER(@VocType)='STOCKTRANSFER'
		OR UPPER(@VocType)='RECEIPT' OR UPPER(@VocType)='PAYMENT'
		OR UPPER(@VocType)='JOURNAL' OR UPPER(@VocType)='STOCK LEDGER'
		)
    BEGIN
		INSERT INTO @VoucherExport(STATENAME,PARTYGSTIN,PLACEOFSUPPLY,CONSIGNEESTATENAME,CONSIGNEEGSTIN,CREDITNOTENUMBER,CREDITNOTEDATE,REFERENCENO)
		SELECT'Null' as STATENAME,'Null' as PARTYGSTIN,'Null' as PLACEOFSUPPLY,@DistStatName as CONSIGNEESTATENAME,@DistGSTTIN as CONSIGNEEGSTIN,
		'' as CREDITNOTENUMBER,CONVERT(DATETIME,CONVERT(Varchar(10),GETDATE(),121),121) as CREDITNOTEDATE,'Null'
	END 
	

	IF UPPER(@VocType)='CREDIT NOTE'
    BEGIN
		INSERT INTO @VoucherExport(STATENAME,PARTYGSTIN,PLACEOFSUPPLY,CONSIGNEESTATENAME,CONSIGNEEGSTIN,CREDITNOTENUMBER,CREDITNOTEDATE,REFERENCENO)
		SELECT DISTINCT ISNULL(RS.STATENAME,'Null'),ISNULL(RG.GSTIN,'Null'),ISNULL(RS.STATENAME,'Null'),
		@DistStatName as CONSIGNEESTATENAME,@DistGSTTIN as CONSIGNEEGSTIN,
		CrNoteNumber as CREDITNOTENUMBER,CrNoteDate as CREDITNOTEDATE,ISNULL(PostedFrom,'Null')
		FROM StdVocMaster A (NOLOCK) INNER JOIN CreditNoteRetailer PR (NOLOCK) ON Pr.CrNoteNumber=LTRIM(RTRIM(SUBSTRING(A.Remarks,33,CHARINDEX(' Dated',A.Remarks)-33)))
		LEFT JOIN Distributor D (NOLOCK) on D.Availability=1
		LEFT OUTER JOIN @RetailerGSTIN RG ON RG.RtrId=PR.RtrId
		LEFT OUTER JOIN @RetailerState RS ON RS.RtrId=PR.RtrId
		WHERE VocType=3 AND A.Remarks LIKE 'Posted From Credit Note%' AND A.AutoGen=1
		and VocRefNo =@VoucherNo and PR.CrNoteNumber=@VoucherRefNo
		
		INSERT INTO @VoucherExport(STATENAME,PARTYGSTIN,PLACEOFSUPPLY,CONSIGNEESTATENAME,CONSIGNEEGSTIN,
		CREDITNOTENUMBER,CREDITNOTEDATE,REFERENCENO)
		SELECT DISTINCT ISNULL(RS.STATENAME,'Null'),ISNULL(RG.GSTIN,'Null'),ISNULL(RS.STATENAME,'Null'),
		@DistStatName as CONSIGNEESTATENAME,@DistGSTTIN as CONSIGNEEGSTIN,
		Pr.CrNoteNumber as CREDITNOTENUMBER,Pr.CrNoteDate as CREDITNOTEDATE,ISNULL(PostedFrom,'Null')
		FROM StdVocMaster A (NOLOCK) 
		INNER JOIN CreditNoteSupplier PR (NOLOCK) ON Pr.CrNoteNumber=LTRIM(RTRIM(SUBSTRING(A.Remarks,33,CHARINDEX(' Dated',A.Remarks)-33)))
		LEFT JOIN Distributor D (NOLOCK) on D.Availability=1
		LEFT OUTER JOIN @SupplierGSTIN RG ON RG.SpmId=PR.SpmId
		LEFT OUTER JOIN @SupplierState RS ON RS.SpmId=PR.SpmId
		WHERE VocType=3 AND A.Remarks LIKE 'Posted From Credit Note%' AND A.AutoGen=1 
		and VocRefNo =@VoucherNo and PR.CrNoteNumber=@VoucherRefNo
	END
	
------Till Here	
	IF UPPER(@VocType)='DEBIT NOTE'
    BEGIN	
		INSERT INTO @VoucherExport(STATENAME,PARTYGSTIN,PLACEOFSUPPLY,CONSIGNEESTATENAME,CONSIGNEEGSTIN,
		CREDITNOTENUMBER,CREDITNOTEDATE,REFERENCENO)
		SELECT DISTINCT ISNULL(RS.STATENAME,'Null'),ISNULL(RG.GSTIN,'Null'),ISNULL(RS.STATENAME,'Null'),
		@DistStatName as CONSIGNEESTATENAME,@DistGSTTIN as CONSIGNEEGSTIN,
		Pr.DbNoteNumber,DbNoteDate,ISNULL(PostedFrom,'Null')
		FROM StdVocMaster A (NOLOCK) 
		INNER JOIN DebitNoteRetailer PR (NOLOCK) ON Pr.DbNoteNumber=LTRIM(RTRIM(SUBSTRING(A.Remarks,33,CHARINDEX(' Dated',A.Remarks)-33)))
		LEFT JOIN Distributor D (NOLOCK) on D.Availability=1
		LEFT OUTER JOIN @RetailerGSTIN RG ON RG.RtrId=PR.RtrId
		LEFT OUTER JOIN @RetailerState RS ON RS.RtrId=PR.RtrId
		WHERE VocType=3 AND A.Remarks LIKE 'Posted From Debit Note%' AND A.AutoGen=1 
		and VocRefNo =@VoucherNo and PR.DbNoteNumber=@VoucherRefNo
       
        INSERT INTO @VoucherExport(STATENAME,PARTYGSTIN,PLACEOFSUPPLY,CONSIGNEESTATENAME,CONSIGNEEGSTIN,CREDITNOTENUMBER,CREDITNOTEDATE,REFERENCENO)
		SELECT DISTINCT ISNULL(RS.STATENAME,'Null'),ISNULL(RG.GSTIN,'Null'),ISNULL(RS.STATENAME,'Null'),
		@DistStatName as CONSIGNEESTATENAME,@DistGSTTIN as CONSIGNEEGSTIN,
		Pr.DbNoteNumber,DbNoteDate,ISNULL(PostedFrom,'Null')
		FROM StdVocMaster A (NOLOCK) 
		INNER JOIN DebitNoteSupplier PR (NOLOCK) ON Pr.DbNoteNumber=LTRIM(RTRIM(SUBSTRING(A.Remarks,33,CHARINDEX(' Dated',A.Remarks)-33)))
		LEFT JOIN Distributor D (NOLOCK) on D.Availability=1
		LEFT OUTER JOIN @SupplierGSTIN RG ON RG.SpmId=PR.SpmId
		LEFT OUTER JOIN @SupplierState RS ON RS.SpmId=PR.SpmId
		WHERE VocType=3 AND A.Remarks LIKE 'Posted From Debit Note%' AND A.AutoGen=1
		and VocRefNo =@VoucherNo and PR.DbNoteNumber=@VoucherRefNo
		
	END	
		
	
	
	IF UPPER(@VocType)='SALES'
    BEGIN
		INSERT INTO @VoucherExport(STATENAME,PARTYGSTIN,PLACEOFSUPPLY,CONSIGNEESTATENAME,CONSIGNEEGSTIN,CREDITNOTENUMBER,CREDITNOTEDATE,REFERENCENO)
		SELECT DISTINCT ISNULL(RS.STATENAME,'Null'),ISNULL(RG.GSTIN,'Null'),ISNULL(RS.STATENAME,'Null'),
		@DistStatName as CONSIGNEESTATENAME,@DistGSTTIN as CONSIGNEEGSTIN,
		'' as CREDITNOTENUMBER,CONVERT(DATETIME,CONVERT(Varchar(10),GETDATE(),121),121) as CREDITNOTEDATE,SalInvNo
		FROM StdVocMaster A (NOLOCK) 
		INNER JOIN SalesInvoice S (NOLOCK) ON S.SalInvNo=LTRIM(RTRIM(SUBSTRING(A.Remarks,20,CHARINDEX(' Dated',A.Remarks)-20)))
		LEFT OUTER JOIN @RetailerGSTIN RG ON RG.RtrId=S.RtrId
		LEFT OUTER JOIN @RetailerState RS ON RS.RtrId=S.RtrId
		WHERE VocType=4 AND A.Remarks LIKE 'Posted From Billing%'	AND A.AutoGen=1
		and VocRefNo =@VoucherNo and S.SalInvNo=@VoucherRefNo	
	END
	IF UPPER(@VocType)='PURCHASE'
	BEGIN
		INSERT INTO @VoucherExport(STATENAME,PARTYGSTIN,PLACEOFSUPPLY,CONSIGNEESTATENAME,CONSIGNEEGSTIN,CREDITNOTENUMBER,CREDITNOTEDATE,REFERENCENO)
		SELECT DISTINCT ISNULL(RS.STATENAME,'Null'),ISNULL(RG.GSTIN,'Null'),ISNULL(RS.STATENAME,'Null'),
		@DistStatName as CONSIGNEESTATENAME,@DistGSTTIN as CONSIGNEEGSTIN,
		'' as CREDITNOTENUMBER,CONVERT(DATETIME,CONVERT(Varchar(10),GETDATE(),121),121) as CREDITNOTEDATE,CmpInvNo
		from StdVocMaster A (NOLOCK) 
		INNER JOIN PurchaseReceipt PR (NOLOCK) ON Pr.PurRcptRefNo=LTRIM(RTRIM(SUBSTRING(A.Remarks,16,CHARINDEX(' Dated',A.Remarks)-16)))
		LEFT OUTER JOIN @SupplierGSTIN RG ON RG.SpmId=PR.SpmId
		LEFT OUTER JOIN @SupplierState RS ON RS.SpmId=PR.SpmId
		WHERE VocType=5 AND Remarks LIKE 'Posted From GRN%' AND A.AutoGen=1
		and VocRefNo =@VoucherNo and PR.CmpInvNo=@VoucherRefNo		
   END
	IF UPPER(@VocType)='PURCHASE RETURN'
	BEGIN
		INSERT INTO @VoucherExport(STATENAME,PARTYGSTIN,PLACEOFSUPPLY,CONSIGNEESTATENAME,CONSIGNEEGSTIN,CREDITNOTENUMBER,CREDITNOTEDATE,REFERENCENO)
		--WITHOUT Reference
		SELECT DISTINCT ISNULL(RS.STATENAME,'Null'),ISNULL(RG.GSTIN,'Null'),ISNULL(RS.STATENAME,'Null'),
		@DistStatName as CONSIGNEESTATENAME,@DistGSTTIN as CONSIGNEEGSTIN,
		ISNULL(DbNoteNumber,''),ISNULL(DbNoteDate,CONVERT(DATETIME,CONVERT(Varchar(10),GETDATE(),121),121)) as CREDITNOTEDATE,CmpInvNo
		FROM StdVocMaster A (NOLOCK) 
		INNER JOIN PurchaseReturn  PR (NOLOCK) ON PR.PurRetRefNo=LTRIM(RTRIM(SUBSTRING(A.Remarks,28,CHARINDEX(' Dated',A.Remarks)-28)))
		LEFT OUTER JOIN @SupplierGSTIN RG ON RG.SpmId=PR.SpmId
		LEFT OUTER JOIN @SupplierState RS ON RS.SpmId=PR.SpmId
		LEFT OUTER JOIN DebitNoteSupplier DS (NOLOCK) ON DS.SpmId=PR.SpmId and DS.SpmId=RG.SpmId and DS.SpmId=RS.SpmId
		and DS.PostedFrom=PR.PurRetRefNo
		WHERE VocType=5 AND A.Remarks LIKE 'Posted From Purchase Return%' AND A.AutoGen=1
		and VocRefNo =@VoucherNo and  PR.PurRetRefNo=@VoucherRefNo
					
	END
	
    IF UPPER(@VocType)='SALES RETURN'
    BEGIN
		INSERT INTO @VoucherExport(STATENAME,PARTYGSTIN,PLACEOFSUPPLY,CONSIGNEESTATENAME,CONSIGNEEGSTIN,CREDITNOTENUMBER,CREDITNOTEDATE,REFERENCENO)
		SELECT DISTINCT ISNULL(RS.STATENAME,'Null'),ISNULL(RG.GSTIN,'Null'),ISNULL(RS.STATENAME,'Null'),
		@DistStatName as CONSIGNEESTATENAME,@DistGSTTIN as CONSIGNEEGSTIN,
		ISNULL(CrNoteNumber,''),ISNULL(CrNoteDate,CONVERT(DATETIME,CONVERT(Varchar(10),GETDATE(),121),121))   as CREDITNOTEDATE,ISNULL(SalInvNo,'Null')
		FROM StdVocMaster A (NOLOCK) 
		INNER JOIN ReturnHeader RH (NOLOCK) ON RH.ReturnCode=LTRIM(RTRIM(SUBSTRING(A.Remarks,24,CHARINDEX(' Dated',A.Remarks)-24)))
		LEFT OUTER JOIN SalesInvoice S (NOLOCK) ON S.Salid=RH.SalId
		LEFT OUTER JOIN @RetailerGSTIN RG ON RG.RtrId=RH.RtrId
		LEFT OUTER JOIN @RetailerState RS ON RS.RtrId=RH.RtrId	
		LEFT OUTER JOIN CreditNoteRetailer CN ON CN.RtrId=RH.RtrId and CN.RtrId=RG.RtrId and CN.RtrId=RS.RtrId	
		and CN.PostedFrom=RH.ReturnCode
		WHERE  VocType=4 AND A.Remarks LIKE 'Posted From SalesReturn%'	AND A.AutoGen=1
		and VocRefNo =@VoucherNo and RH.ReturnCode=@VoucherRefNo
					
	END		  
	
	IF UPPER(@VocType)='IDT'
    BEGIN
		INSERT INTO @VoucherExport(STATENAME,PARTYGSTIN,PLACEOFSUPPLY,CONSIGNEESTATENAME,CONSIGNEEGSTIN,CREDITNOTENUMBER,CREDITNOTEDATE,REFERENCENO)
		SELECT DISTINCT ISNULL(RS.STATENAME,'Null'),ISNULL(RG.GSTIN,'Null'),ISNULL(RS.STATENAME,'Null'),
		@DistStatName as CONSIGNEESTATENAME,@DistGSTTIN as CONSIGNEEGSTIN,
		'' as CREDITNOTENUMBER,CONVERT(DATETIME,CONVERT(Varchar(10),GETDATE(),121),121) as CREDITNOTEDATE,'Null'
		FROM StdVocMaster A (NOLOCK) 
		INNER JOIN IDTManagement RH (NOLOCK) ON RH.IDTMngRefNo=LTRIM(RTRIM(SUBSTRING(A.Remarks,26,CHARINDEX(' Dated',A.Remarks)-26)))
		LEFT OUTER JOIN @SupplierGSTIN RG ON RG.SpmId=RH.SpmId
		LEFT OUTER JOIN @SupplierState RS ON RS.SpmId=RH.SpmId				
		WHERE  VocType=5 AND A.Remarks LIKE 'Posted From IDT Stock Out%'	AND A.AutoGen=1
		and VocRefNo =@VoucherNo and RH.IDTMngRefNo=@VoucherRefNo	and StkMgmtTypeId=2		
	END	
	IF UPPER(@VocType)='IDT IN'
    BEGIN
		INSERT INTO @VoucherExport(STATENAME,PARTYGSTIN,PLACEOFSUPPLY,CONSIGNEESTATENAME,CONSIGNEEGSTIN,CREDITNOTENUMBER,CREDITNOTEDATE,REFERENCENO)
		SELECT DISTINCT ISNULL(RS.STATENAME,'Null'),ISNULL(RG.GSTIN,'Null'),ISNULL(RS.STATENAME,'Null'),
		@DistStatName as CONSIGNEESTATENAME,@DistGSTTIN as CONSIGNEEGSTIN,
		'' as CREDITNOTENUMBER,CONVERT(DATETIME,CONVERT(Varchar(10),GETDATE(),121),121) as CREDITNOTEDATE,'Null'
		FROM StdVocMaster A (NOLOCK) 
		INNER JOIN IDTManagement RH (NOLOCK) ON RH.IDTMngRefNo=LTRIM(RTRIM(SUBSTRING(A.Remarks,26,CHARINDEX(' Dated',A.Remarks)-26)))
		LEFT OUTER JOIN @SupplierGSTIN RG ON RG.SpmId=RH.SpmId
		LEFT OUTER JOIN @SupplierState RS ON RS.SpmId=RH.SpmId				
		WHERE  VocType=5 AND A.Remarks LIKE 'Posted From IDT Stock In%'	AND A.AutoGen=1
		and VocRefNo =@VoucherNo and RH.IDTMngRefNo=@VoucherRefNo	and StkMgmtTypeId=1		
	END	
RETURN
END
GO
IF EXISTS(SELECT 'x' FROM SYSOBJECTS WHERE XTYPE='TF' AND NAME='FN_RetailerTallyGSTInfo')
DROP FUNCTION FN_RetailerTallyGSTInfo
GO
--Select * from Retailer where RtrId=47
--SELECT * FROM DBO.FN_RetailerTallyGSTInfo ('000200683600047')
CREATE FUNCTION [FN_RetailerTallyGSTInfo](@CoaId as BIGINT)  
RETURNS @RetailerGSTinfoExport TABLE
(	
	RtrId			INT,
	CmpRtrCode		Varchar(50),
	PARTYGSTIN		Varchar(30),
	LEDSTATENAME		Varchar(150),
	COUNTRYNAME	Varchar(20),
	GSTREGISTRATIONTYPE Varchar(50),
	MasterType TinyInt
	
)
AS
/***************************************************************************************************
* FUNCTION	: FN_RetailerTallyGSTInfo
* PURPOSE	: Returns the Retailer Gst Information
* NOTES		:
* CREATED	: Murugan.R - 11/10/2017 USERSTORYID CCRSTAML1028
* MODIFIED
* DATE            AUTHOR       CR/BZ	USERSTORYID		DESCRIPTION
-------------------------------------------------------------------------------------------------
**************************************************************************************************/
BEGIN

	DECLARE @RetailerGSTIN TABLE
	(
		RtrId INT,
		GSTIN Varchar(30)
	)
	DECLARE @RetailerState TABLE
	(
		RtrId INT,
		Statename Varchar(150)
	)
	
	INSERT INTO @RetailerGSTinfoExport(RtrId,CmpRtrCode,PARTYGSTIN,LEDSTATENAME,COUNTRYNAME,GSTREGISTRATIONTYPE,MasterType)
	SELECT RtrId,CmpRtrCode,'' as PARTYGSTIN ,'' as LEDSTATENAME,'India','' as GSTREGISTRATIONTYPE,1
	FROM Retailer (NOLOCK)
	WHERE CoaId=@CoaId
	UNION ALL
	SELECT SpmId,SpmCode,'' as PARTYGSTIN ,'' as LEDSTATENAME,'India','Regular' as GSTREGISTRATIONTYPE,2
	FROM Supplier (NOLOCK)
	WHERE CoaId=@CoaId
	UNION ALL
	SELECT SpmId,SpmCode,'' as PARTYGSTIN ,'' as LEDSTATENAME,'India','Regular' as GSTREGISTRATIONTYPE,3
	FROM IDTMaster (NOLOCK)
	WHERE CoaId=@CoaId

	---Retailer GSTIN Update	
	UPDATE A SET A.PARTYGSTIN=ColumnValue FROM @RetailerGSTinfoExport A INNER JOIN 
	(SELECT DISTINCT  R.RtrId as RtrId,UT.ColumnValue 
	FROM UDCHD U 
	INNER JOIN UDCMASTER UD ON U.MasterId=UD.MasterId
	INNER JOIN UdcDetails UT ON UT.MasterId=UD.MasterId and UT.UdcMasterId=UD.UdcMasterId
	INNER JOIN Retailer R ON R.RtrId=UT.MasterRecordId
	WHERE U.MasterId=2 and ColumnName='GSTIN') B ON A.Rtrid=B.Rtrid
	WHERE MasterType=1
	
	---Supplier GSTIN Update	
	UPDATE A SET A.PARTYGSTIN=ColumnValue FROM @RetailerGSTinfoExport A INNER JOIN 
	(SELECT DISTINCT  R.SpmId as RtrId,UT.ColumnValue 
	FROM UDCHD U 
	INNER JOIN UDCMASTER UD ON U.MasterId=UD.MasterId
	INNER JOIN UdcDetails UT ON UT.MasterId=UD.MasterId and UT.UdcMasterId=UD.UdcMasterId
	INNER JOIN Supplier R ON R.SpmId=UT.MasterRecordId
	WHERE U.MasterId=8 and ColumnName='GSTIN') B ON A.Rtrid=B.Rtrid
	WHERE MasterType=2
	
	---IDTMaster GSTIN Update	
	UPDATE A SET A.PARTYGSTIN=ColumnValue FROM @RetailerGSTinfoExport A INNER JOIN 
	(SELECT DISTINCT  R.SpmId as RtrId,UT.ColumnValue 
	FROM UDCHD U 
	INNER JOIN UDCMASTER UD ON U.MasterId=UD.MasterId
	INNER JOIN UdcDetails UT ON UT.MasterId=UD.MasterId and UT.UdcMasterId=UD.UdcMasterId
	INNER JOIN IDTMaster R ON R.SpmId=UT.MasterRecordId
	WHERE U.MasterId=8 and ColumnName='GSTIN') B ON A.Rtrid=B.Rtrid
	WHERE MasterType=3
	
	
	
	---Retailer State Update
	UPDATE A SET A.LEDSTATENAME=ColumnValue FROM @RetailerGSTinfoExport A INNER JOIN
	( 
	SELECT DISTINCT  R.RtrId as RtrId,
	Case WHEN UT.ColumnValue ='Orissa' THEN 'Odisha' 
		 WHEN UT.ColumnValue ='Andaman and Nicobar Islands' THEN 'Andaman & Nicobar Islands'
		 WHEN UT.ColumnValue ='Dadra and Nagar Haveli' THEN 'Dadra & Nagar Haveli'
		 WHEN UT.ColumnValue ='Daman and Diu' THEN 'Daman & Diu'
		 WHEN UT.ColumnValue ='Jammu and Kashmir' THEN 'Jammu & Kashmir'
	ELSE 	UT.ColumnValue	END	 as ColumnValue	
	FROM UDCHD U 
	INNER JOIN UDCMASTER UD ON U.MasterId=UD.MasterId
	INNER JOIN UdcDetails UT ON UT.MasterId=UD.MasterId and UT.UdcMasterId=UD.UdcMasterId
	INNER JOIN Retailer R ON R.RtrId=UT.MasterRecordId
	WHERE U.MasterId=2 and ColumnName='State Name') B ON A.RtrId=B.RtrId
	WHERE   MasterType=1
	
	---Supplier State Update
	UPDATE A SET A.LEDSTATENAME=ColumnValue FROM @RetailerGSTinfoExport A INNER JOIN
	( 
	SELECT DISTINCT  R.SpmId as RtrId,
	Case WHEN UT.ColumnValue ='Orissa' THEN 'Odisha' 
		 WHEN UT.ColumnValue ='Andaman and Nicobar Islands' THEN 'Andaman & Nicobar Islands'
		 WHEN UT.ColumnValue ='Dadra and Nagar Haveli' THEN 'Dadra & Nagar Haveli'
		 WHEN UT.ColumnValue ='Daman and Diu' THEN 'Daman & Diu'
		 WHEN UT.ColumnValue ='Jammu and Kashmir' THEN 'Jammu & Kashmir'
	ELSE 	UT.ColumnValue	END	 as ColumnValue	
	FROM UDCHD U 
	INNER JOIN UDCMASTER UD ON U.MasterId=UD.MasterId
	INNER JOIN UdcDetails UT ON UT.MasterId=UD.MasterId and UT.UdcMasterId=UD.UdcMasterId
	INNER JOIN Supplier R ON R.SpmId=UT.MasterRecordId
	WHERE U.MasterId=8 and ColumnName='State Name') B ON A.RtrId=B.RtrId
	WHERE   MasterType=2
	
	
	---IDT Master State Update
	UPDATE A SET A.LEDSTATENAME=ColumnValue FROM @RetailerGSTinfoExport A INNER JOIN
	( 
	SELECT DISTINCT  R.SpmId as RtrId,
	Case WHEN UT.ColumnValue ='Orissa' THEN 'Odisha' 
		 WHEN UT.ColumnValue ='Andaman and Nicobar Islands' THEN 'Andaman & Nicobar Islands'
		 WHEN UT.ColumnValue ='Dadra and Nagar Haveli' THEN 'Dadra & Nagar Haveli'
		 WHEN UT.ColumnValue ='Daman and Diu' THEN 'Daman & Diu'
		 WHEN UT.ColumnValue ='Jammu and Kashmir' THEN 'Jammu & Kashmir'
	ELSE 	UT.ColumnValue	END	 as ColumnValue	
	FROM UDCHD U 
	INNER JOIN UDCMASTER UD ON U.MasterId=UD.MasterId
	INNER JOIN UdcDetails UT ON UT.MasterId=UD.MasterId and UT.UdcMasterId=UD.UdcMasterId
	INNER JOIN IDTMaster R ON R.SpmId=UT.MasterRecordId
	WHERE U.MasterId=8 and ColumnName='State Name') B ON A.RtrId=B.RtrId
	WHERE   MasterType=3
	
	UPDATE A SET A.GSTREGISTRATIONTYPE=ColumnValue FROM @RetailerGSTinfoExport A INNER JOIN
	(SELECT DISTINCT  R.RtrId as RtrId,
	CASE WHEN UT.ColumnValue='Registered' THEN 'Regular'
		   ELSE UT.ColumnValue END as ColumnValue
	FROM UDCHD U 
	INNER JOIN UDCMASTER UD ON U.MasterId=UD.MasterId
	INNER JOIN UdcDetails UT ON UT.MasterId=UD.MasterId and UT.UdcMasterId=UD.UdcMasterId
	INNER JOIN Retailer R ON R.RtrId=UT.MasterRecordId
	WHERE U.MasterId=2 and ColumnName='Retailer Type') B ON A.RtrId=B.RtrId
	WHERE MasterType=1
	
	UPDATE A SET A.GSTREGISTRATIONTYPE='Composition' FROM @RetailerGSTinfoExport A INNER JOIN
	(SELECT DISTINCT  R.RtrId as RtrId,
	ColumnValue
	FROM UDCHD U 
	INNER JOIN UDCMASTER UD ON U.MasterId=UD.MasterId
	INNER JOIN UdcDetails UT ON UT.MasterId=UD.MasterId and UT.UdcMasterId=UD.UdcMasterId
	INNER JOIN Retailer R ON R.RtrId=UT.MasterRecordId
	WHERE U.MasterId=2 and ColumnName='Composition' and ColumnValue='Yes') B ON A.RtrId=B.RtrId
	WHERE  MasterType=1

	RETURN
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='U' AND NAME='ProductTallyXmlExport')
DROP TABLE ProductTallyXmlExport
GO
CREATE TABLE ProductTallyXmlExport
(
ProductCode    varchar(200),
ProductName	Varchar(200),
LandingPrice Numeric(18,6),
Price Numeric(18,6),
EffectiveDate varchar(10),
Tax Varchar(25),
HsnCode Varchar(30),
CentralTax Numeric(10,2),
StateTax	Numeric(10,2),
IntegratedTax	 Numeric(10,2),
CessTax		Numeric(10,2),
TaxType Varchar(50),
TypeOfSupply Varchar(50)
)
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='P' AND NAME='Proc_ProductTallyXmlExport')
DROP PROCEDURE Proc_ProductTallyXmlExport
GO
--EXEC Proc_ProductTallyXmlExport
CREATE PROCEDURE [Proc_ProductTallyXmlExport]
AS
/***************************************************************************************************
* PROCEDURE	: Proc_ProductTallyXmlExport
* PURPOSE	: Returns the Product Master
* NOTES		:
* CREATED	: Murugan.R 16/10/2017 CCRSTGCP0370
* MODIFIED
* DATE			AUTHOR		CR/BZ		USER STORY ID		DESCRIPTION
*16/10/2017   Murugan.R		CR			CCRSTGCP0370		Nolock is Added
-------------------------------------------------------------------------------------------------
**************************************************************************************************/
BEGIN
	TRUNCATE TABLE ProductTallyXmlExport	
	
	DECLARE @PrdBatTaxGrp AS INT
	DECLARE @RtrTaxGrp1 AS INT
	DECLARE @PurSeqId AS INT
	DECLARE @BillSeqId AS INT
	DECLARE @RtrTaxGrp AS INT		 
	DECLARE @TaxSlab  INT  
	DECLARE @MRP INT    
	DECLARE @TaxableAmount  NUMERIC(28,10)      
	DECLARE @ParTaxableAmount NUMERIC(28,10)      
	DECLARE @TaxPer   NUMERIC(38,2)     
	DECLARE @TaxPercentage   NUMERIC(38,5)   
	DECLARE @TaxId   INT 
	DECLARE @MaxSlno   INT
	DECLARE @MinSlno   INT
	DECLARE @Prdid INT
	DECLARE @TaxCode AS VARCHAR(50)
	SET @MinSlno=1
	
		DECLARE @TaxSettingDet TABLE       
		(      
		TaxSlab   INT,      
		ColNo   INT,      
		SlNo   INT,      
		BillSeqId  INT,      
		TaxSeqId  INT,      
		ColType   INT,       
		ColId   INT,      
		ColVal   NUMERIC(38,2),
		TaxCode Varchar(50)      
		) 
		CREATE TABLE #TempProductTax
		(
			Prdid INT,
			TaxId INT,
			TaxSlabId INT,
			TaxPercentage Numeric(5,2),
			TaxAmount Numeric (18,5)
		)
	
		CREATE TABLE #ProductLst
		(
			Slno INT IDENTITY(1,1),	
			TaxSeqId INT,	
			Prdid INT,
			RtrId INT
		)	
		
		CREATE TABLE #ProductZeroTax(
		TaxGroupId [int] NULL,
		--TaxCode Varchar(100),
		--TaxId INT,
		CentralTax [numeric](18, 5) NULL,
		StateTax [numeric](18, 5) NULL	,
		UTTax Numeric(18,5) NULL,
		IntegratedTax 	 [numeric](18, 5) NULL	,
		CessTax	[numeric](18, 5) NULL	
		) 
	
		CREATE TABLE #TableTax
		(
			RowId INT,
			TaxId INT,
			TaxCode Varchar(50)
		)	
		
		CREATE TABLE #RtrGroup
		(
			TaxSeqId INT,
			RtrId	INT,
			PrdId	INT
		)	
		
	SELECT Distinct Prdccode,ColumnValue as HSNCode
	INTO #ProductHsnCode
	FROM UDCHD U 
	INNER JOIN UDCMASTER UD ON U.MasterId=UD.MasterId
	INNER JOIN UdcDetails UT ON UT.MasterId=UD.MasterId and UT.UdcMasterId=UD.UdcMasterId
	INNER JOIN Product R ON R.Prdid=UT.MasterRecordId
	WHERE U.MasterId=1 and ColumnName='HSN Code' 
	
	----Retailer Tax
	SELECT @RtrTaxGrp=TaxGroupId FROM TaxGroupSetting (NOLOCK) WHERE RtrGroup='RTRINTRA'
   
	INSERT INTO #RtrGroup(TaxSeqId,RtrId,PrdId)
	SELECT TaxSeqId,RtrId,PrdId FROM TaxSettingMaster WHERE      
	RtrId = @RtrTaxGrp 
	and CONVERT(DATETIME,CONVERT(VARCHAR(10),EffectiveFrom,121),121)<=CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121)

	INSERT INTO #ProductLst (TaxSeqId,Prdid,RtrId)
	SELECT Max(A.TaxSeqId),A.Prdid,A.RtrId		
	FROM #RtrGroup A INNER JOIN TaxSettingMaster B ON A.RtrId=B.RtrId and A.Prdid=B.Prdid
	GROUP BY A.Prdid,A.RtrId
	
    SELECT @MaxSlno=MAX(Slno) FROM #ProductLst
    WHILE @MinSlno<=@MaxSlno
    BEGIN
			
			DELETE FROM @TaxSettingDet	
			DELETE FROM #TableTax
			SELECT @PrdBatTaxGrp=Prdid, @RtrTaxGrp=RtrId FROM  #ProductLst WHERE Slno=@MinSlno
			--To Take the Batch TaxGroup Id      
							
			SELECT @BillSeqId = MAX(BillSeqId)  FROM BillSequenceMaster (NOLOCK)
			
			INSERT INTO #TableTax(	RowId,TaxId,TaxCode)	
			SELECT ROWID,Taxid,TaxCode 
			FROM TaxSettingDetail A (NOLOCK) INNER JOIN TaxConfiguration B (NOLOCK) ON B.TaxId=A.ColVal
			WHERE ColType = 1    AND ColId > 0  
			and TaxSeqId IN
			(Select ISNULL(Max(TaxSeqId),0) FROM TaxSettingMaster WHERE
			RtrId = @RtrTaxGrp AND Prdid = @PrdBatTaxGrp
			and CONVERT(DATETIME,CONVERT(VARCHAR(10),EffectiveFrom,121),121)<=CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121)   )
			
					
			INSERT INTO @TaxSettingDet (TaxSlab,ColNo,SlNo,BillSeqId,TaxSeqId,ColType,ColId,ColVal,TaxCode)      
			SELECT B.RowId,B.ColNo,B.SlNo,B.BillSeqId,B.TaxSeqId,B.ColType,B.ColId,B.ColVal  , TaxCode   
			FROM TaxSettingMaster A (NOLOCK) INNER JOIN      
			TaxSettingDetail B (NOLOCK) ON A.TaxSeqId = B.TaxSeqId 
			INNER JOIN #TableTax C (NOLOCK) ON C.RowId=B.RowId     
			AND B.BillSeqId=@BillSeqId  and Coltype IN(1,3)    
			WHERE A.RtrId = @RtrTaxGrp AND A.Prdid = @PrdBatTaxGrp     
			AND A.TaxSeqId in (Select ISNULL(Max(TaxSeqId),0) FROM TaxSettingMaster WHERE      
			RtrId = @RtrTaxGrp AND Prdid = @PrdBatTaxGrp
			and CONVERT(DATETIME,CONVERT(VARCHAR(10),EffectiveFrom,121),121)<=CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121)
			)   and  TaxCode IN('CGST','SGST','OutputSGST','OutputCGST','UTGST','OutputUTGST')
			
			SET @MRP=1
			TRUNCATE TABLE #TempProductTax
			DECLARE  CurTax CURSOR FOR      
				SELECT DISTINCT TaxSlab FROM @TaxSettingDet      
			OPEN CurTax        
			FETCH NEXT FROM CurTax INTO @TaxSlab      
			WHILE @@FETCH_STATUS = 0        
			BEGIN      
			SET @TaxableAmount = 0      
			--To Filter the Records Which Has Tax Percentage (>=0)      
			IF EXISTS (SELECT * FROM @TaxSettingDet WHERE TaxSlab = @TaxSlab AND ColType = 1      
			AND ColId = 0 and ColVal >= 0)      
			BEGIN      
			--To Get the Tax Percentage for the selected slab      
			SELECT @TaxPer = ColVal,@TaxCode=TaxCode FROM @TaxSettingDet WHERE TaxSlab = @TaxSlab AND ColType = 1      
			AND ColId = 0      
			--To Get the TaxId for the selected slab      
			SELECT @TaxId = Cast(ColVal as INT) FROM @TaxSettingDet WHERE TaxSlab = @TaxSlab AND ColType = 1      
			AND ColId > 0      
			SET @TaxableAmount = ISNULL(@TaxableAmount,0) + @MRP 
			--To Get the Parent Taxable Amount for the Tax Slab      
			SELECT @ParTaxableAmount =  ISNULL(SUM(TaxAmount),0) FROM #TempProductTax A      
			INNER JOIN @TaxSettingDet B ON A.TaxId = B.ColVal and  
			B.ColType = 3 AND B.TaxSlab = @TaxSlab 
			If @ParTaxableAmount>0
			BEGIN
				Set @TaxableAmount=@ParTaxableAmount
			END 
			ELSE
			BEGIN
				Set @TaxableAmount = @TaxableAmount
			END    
			    
			INSERT INTO #TempProductTax (PrdId,TaxId,TaxSlabId,TaxPercentage,      
			TaxAmount)      
			SELECT @PrdBatTaxGrp,@TaxId,@TaxSlab,@TaxPer,      
			cast(@TaxableAmount*(@TaxPer / 100 ) AS NUMERIC(28,10))  
			
			IF NOT EXISTS(SELECT   'X' FROM #ProductZeroTax WHERE  TaxGroupId=@PrdBatTaxGrp)
			BEGIN			 
				INSERT INTO #ProductZeroTax(TaxGroupId,CentralTax,StateTax,UTTax,IntegratedTax,CessTax	)
				SELECT @PrdBatTaxGrp, 
				CASE WHEN @TaxCode IN('CGST','OutputCGST')
					THEN Cast((cast(@TaxableAmount*(@TaxPer / 100 ) AS NUMERIC(28,10)) *100) as Numeric(18,5))
					ELSE 0 END as CentralTax,
				CASE WHEN @TaxCode IN('SGST','OutputSGST')
					THEN Cast((cast(@TaxableAmount*(@TaxPer / 100 ) AS NUMERIC(28,10)) *100) as Numeric(18,5))
					ELSE 0 END as StateTax,
				CASE WHEN @TaxCode IN('UTGST','OutputUTGST')
					THEN Cast((cast(@TaxableAmount*(@TaxPer / 100 ) AS NUMERIC(28,10)) *100) as Numeric(18,5))
					ELSE 0 END as UTTax	
					,0,0
			END	
			ELSE
			BEGIN
				UPDATE #ProductZeroTax SET 
				CentralTax=CASE	WHEN @TaxCode IN('CGST','OutputCGST')
								THEN Cast((cast(@TaxableAmount*(@TaxPer / 100 ) AS NUMERIC(28,10)) *100) as Numeric(18,5))
								ELSE CentralTax END ,
				StateTax=CASE	WHEN @TaxCode IN('SGST','OutputSGST')
								THEN Cast((cast(@TaxableAmount*(@TaxPer / 100 ) AS NUMERIC(28,10)) *100) as Numeric(18,5))
								ELSE StateTax END ,
					
				UTTax=CASE		WHEN @TaxCode IN('UTGST','OutputUTGST')
								THEN Cast((cast(@TaxableAmount*(@TaxPer / 100 ) AS NUMERIC(28,10)) *100) as Numeric(18,5))
								ELSE UTTax END 
						
				WHERE 	TaxGroupId=@PrdBatTaxGrp 
				
			END 
			  
			END      
			FETCH NEXT FROM CurTax INTO @TaxSlab      
			END        
			CLOSE CurTax        
			DEALLOCATE CurTax     
				
			SET @MinSlno=@MinSlno+1	
END	

			DELETE FROM #RtrGroup
			DELETE FROM #ProductLst
		
			---Supplier Integreated Tax and CESS tax Only
			SELECT @RtrTaxGrp=TaxGroupId FROM TaxGroupSetting (NOLOCK) WHERE RtrGroup='SUPINTER'
			
			INSERT INTO #RtrGroup(TaxSeqId,RtrId,PrdId)
			SELECT TaxSeqId,RtrId,PrdId FROM TaxSettingMaster WHERE      
			RtrId = @RtrTaxGrp 
			and CONVERT(DATETIME,CONVERT(VARCHAR(10),EffectiveFrom,121),121)<=CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121)
			
			INSERT INTO #ProductLst (TaxSeqId,Prdid,RtrId)
			SELECT Max(A.TaxSeqId),A.Prdid,A.RtrId		
			FROM #RtrGroup A INNER JOIN TaxSettingMaster B ON A.RtrId=B.RtrId and A.Prdid=B.Prdid
			GROUP BY A.Prdid,A.RtrId
			
		
			SET @MinSlno=1
			SELECT @MaxSlno=MAX(Slno) FROM #ProductLst
			WHILE @MinSlno<=@MaxSlno
			BEGIN
					
					DELETE FROM @TaxSettingDet	
					DELETE FROM #TableTax
					SELECT @PrdBatTaxGrp=Prdid, @RtrTaxGrp=RtrId FROM  #ProductLst WHERE Slno=@MinSlno
					--To Take the Batch TaxGroup Id      
									
					SELECT @BillSeqId = MAX(BillSeqId)  FROM BillSequenceMaster (NOLOCK)
					
					INSERT INTO #TableTax(	RowId,TaxId,TaxCode)	
					SELECT ROWID,Taxid,TaxCode 
					FROM TaxSettingDetail A (NOLOCK) INNER JOIN TaxConfiguration B (NOLOCK) ON B.TaxId=A.ColVal
					WHERE ColType = 1    AND ColId > 0  
					and TaxSeqId IN
					(Select ISNULL(Max(TaxSeqId),0) FROM TaxSettingMaster WHERE
					RtrId = @RtrTaxGrp AND Prdid = @PrdBatTaxGrp
					and CONVERT(DATETIME,CONVERT(VARCHAR(10),EffectiveFrom,121),121)<=CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121)   )
					
							
					INSERT INTO @TaxSettingDet (TaxSlab,ColNo,SlNo,BillSeqId,TaxSeqId,ColType,ColId,ColVal,TaxCode)      
					SELECT B.RowId,B.ColNo,B.SlNo,B.BillSeqId,B.TaxSeqId,B.ColType,B.ColId,B.ColVal  , TaxCode   
					FROM TaxSettingMaster A (NOLOCK) INNER JOIN      
					TaxSettingDetail B (NOLOCK) ON A.TaxSeqId = B.TaxSeqId 
					INNER JOIN #TableTax C (NOLOCK) ON C.RowId=B.RowId     
					AND B.BillSeqId=@BillSeqId  and Coltype IN(1,3)    
					WHERE A.RtrId = @RtrTaxGrp AND A.Prdid = @PrdBatTaxGrp     
					AND A.TaxSeqId in (Select ISNULL(Max(TaxSeqId),0) FROM TaxSettingMaster WHERE      
					RtrId = @RtrTaxGrp AND Prdid = @PrdBatTaxGrp
					and CONVERT(DATETIME,CONVERT(VARCHAR(10),EffectiveFrom,121),121)<=CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121)
					)   and  TaxCode IN('InputIGST','IGST','InputGSTCess')
					
					SET @MRP=1
					TRUNCATE TABLE #TempProductTax
					DECLARE  CurTax CURSOR FOR      
						SELECT DISTINCT TaxSlab FROM @TaxSettingDet      
					OPEN CurTax        
					FETCH NEXT FROM CurTax INTO @TaxSlab      
					WHILE @@FETCH_STATUS = 0        
					BEGIN      
					SET @TaxableAmount = 0      
					--To Filter the Records Which Has Tax Percentage (>=0)      
					IF EXISTS (SELECT * FROM @TaxSettingDet WHERE TaxSlab = @TaxSlab AND ColType = 1      
					AND ColId = 0 and ColVal >= 0)      
					BEGIN      
					--To Get the Tax Percentage for the selected slab      
					SELECT @TaxPer = ColVal,@TaxCode=TaxCode FROM @TaxSettingDet WHERE TaxSlab = @TaxSlab AND ColType = 1      
					AND ColId = 0      
					--To Get the TaxId for the selected slab      
					SELECT @TaxId = Cast(ColVal as INT) FROM @TaxSettingDet WHERE TaxSlab = @TaxSlab AND ColType = 1      
					AND ColId > 0      
					SET @TaxableAmount = ISNULL(@TaxableAmount,0) + @MRP 
					--To Get the Parent Taxable Amount for the Tax Slab      
					SELECT @ParTaxableAmount =  ISNULL(SUM(TaxAmount),0) FROM #TempProductTax A      
					INNER JOIN @TaxSettingDet B ON A.TaxId = B.ColVal and  
					B.ColType = 3 AND B.TaxSlab = @TaxSlab 
					If @ParTaxableAmount>0
					BEGIN
						Set @TaxableAmount=@ParTaxableAmount
					END 
					ELSE
					BEGIN
						Set @TaxableAmount = @TaxableAmount
					END    
					    
					INSERT INTO #TempProductTax (PrdId,TaxId,TaxSlabId,TaxPercentage,      
					TaxAmount)      
					SELECT @PrdBatTaxGrp,@TaxId,@TaxSlab,@TaxPer,      
					cast(@TaxableAmount*(@TaxPer / 100 ) AS NUMERIC(28,10)) 
					
					
					IF NOT EXISTS(SELECT   'X' FROM #ProductZeroTax WHERE  TaxGroupId=@PrdBatTaxGrp)
					BEGIN			 
						INSERT INTO #ProductZeroTax(TaxGroupId,IntegratedTax,CessTax)
						SELECT @PrdBatTaxGrp,
						CASE WHEN @TaxCode IN('InputIGST','IGST')
							THEN Cast((cast(@TaxableAmount*(@TaxPer / 100 ) AS NUMERIC(28,10)) *100) as Numeric(18,5))
							ELSE 0 END as IntegratedTax,
						CASE WHEN @TaxCode IN('InputGSTCess')
							THEN Cast((cast(@TaxableAmount*(@TaxPer / 100 ) AS NUMERIC(28,10)) *100) as Numeric(18,5))
							ELSE 0 END as CessTax	
					END	
					ELSE
					BEGIN
						UPDATE #ProductZeroTax SET 
						IntegratedTax=CASE WHEN @TaxCode IN('InputIGST','IGST')
							THEN Cast((cast(@TaxableAmount*(@TaxPer / 100 ) AS NUMERIC(28,10)) *100) as Numeric(18,5))
							 ELSE IntegratedTax END ,
						CessTax=CASE WHEN @TaxCode IN('InputGSTCess')
							THEN Cast((cast(@TaxableAmount*(@TaxPer / 100 ) AS NUMERIC(28,10)) *100) as Numeric(18,5))
							ELSE CessTax END 
						WHERE 	TaxGroupId=@PrdBatTaxGrp 
						
					END 
					  
					END      
					FETCH NEXT FROM CurTax INTO @TaxSlab      
					END        
					CLOSE CurTax        
					DEALLOCATE CurTax     
						
					SET @MinSlno=@MinSlno+1	
		END
		
		
			DELETE FROM #RtrGroup
			DELETE FROM #ProductLst
		
			---Supplier Integreated Tax and CESS tax Only
			SELECT @RtrTaxGrp=TaxGroupId FROM TaxGroupSetting (NOLOCK) WHERE RtrGroup='SUPINTRA'
			
			INSERT INTO #RtrGroup(TaxSeqId,RtrId,PrdId)
			SELECT TaxSeqId,RtrId,PrdId FROM TaxSettingMaster WHERE      
			RtrId = @RtrTaxGrp 
			and CONVERT(DATETIME,CONVERT(VARCHAR(10),EffectiveFrom,121),121)<=CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121)
			
			INSERT INTO #ProductLst (TaxSeqId,Prdid,RtrId)
			SELECT Max(A.TaxSeqId),A.Prdid,A.RtrId		
			FROM #RtrGroup A INNER JOIN TaxSettingMaster B ON A.RtrId=B.RtrId and A.Prdid=B.Prdid
			GROUP BY A.Prdid,A.RtrId
			
		
			SET @MinSlno=1
			SELECT @MaxSlno=MAX(Slno) FROM #ProductLst
			WHILE @MinSlno<=@MaxSlno
			BEGIN
					
					DELETE FROM @TaxSettingDet	
					DELETE FROM #TableTax
					SELECT @PrdBatTaxGrp=Prdid, @RtrTaxGrp=RtrId FROM  #ProductLst WHERE Slno=@MinSlno
					--To Take the Batch TaxGroup Id      
									
					SELECT @BillSeqId = MAX(BillSeqId)  FROM BillSequenceMaster (NOLOCK)
					
					INSERT INTO #TableTax(	RowId,TaxId,TaxCode)	
					SELECT ROWID,Taxid,TaxCode 
					FROM TaxSettingDetail A (NOLOCK) INNER JOIN TaxConfiguration B (NOLOCK) ON B.TaxId=A.ColVal
					WHERE ColType = 1    AND ColId > 0  
					and TaxSeqId IN
					(Select ISNULL(Max(TaxSeqId),0) FROM TaxSettingMaster WHERE
					RtrId = @RtrTaxGrp AND Prdid = @PrdBatTaxGrp
					and CONVERT(DATETIME,CONVERT(VARCHAR(10),EffectiveFrom,121),121)<=CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121)   )
					
							
					INSERT INTO @TaxSettingDet (TaxSlab,ColNo,SlNo,BillSeqId,TaxSeqId,ColType,ColId,ColVal,TaxCode)      
					SELECT B.RowId,B.ColNo,B.SlNo,B.BillSeqId,B.TaxSeqId,B.ColType,B.ColId,B.ColVal  , TaxCode   
					FROM TaxSettingMaster A (NOLOCK) INNER JOIN      
					TaxSettingDetail B (NOLOCK) ON A.TaxSeqId = B.TaxSeqId 
					INNER JOIN #TableTax C (NOLOCK) ON C.RowId=B.RowId     
					AND B.BillSeqId=@BillSeqId  and Coltype IN(1,3)    
					WHERE A.RtrId = @RtrTaxGrp AND A.Prdid = @PrdBatTaxGrp     
					AND A.TaxSeqId in (Select ISNULL(Max(TaxSeqId),0) FROM TaxSettingMaster WHERE      
					RtrId = @RtrTaxGrp AND Prdid = @PrdBatTaxGrp
					and CONVERT(DATETIME,CONVERT(VARCHAR(10),EffectiveFrom,121),121)<=CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121)
					)   and  TaxCode IN('InputGSTCess')
					
					SET @MRP=1
					TRUNCATE TABLE #TempProductTax
					DECLARE  CurTax CURSOR FOR      
						SELECT DISTINCT TaxSlab FROM @TaxSettingDet      
					OPEN CurTax        
					FETCH NEXT FROM CurTax INTO @TaxSlab      
					WHILE @@FETCH_STATUS = 0        
					BEGIN      
					SET @TaxableAmount = 0      
					--To Filter the Records Which Has Tax Percentage (>=0)      
					IF EXISTS (SELECT * FROM @TaxSettingDet WHERE TaxSlab = @TaxSlab AND ColType = 1      
					AND ColId = 0 and ColVal >= 0)      
					BEGIN      
					--To Get the Tax Percentage for the selected slab      
					SELECT @TaxPer = ColVal,@TaxCode=TaxCode FROM @TaxSettingDet WHERE TaxSlab = @TaxSlab AND ColType = 1      
					AND ColId = 0      
					--To Get the TaxId for the selected slab      
					SELECT @TaxId = Cast(ColVal as INT) FROM @TaxSettingDet WHERE TaxSlab = @TaxSlab AND ColType = 1      
					AND ColId > 0      
					SET @TaxableAmount = ISNULL(@TaxableAmount,0) + @MRP 
					--To Get the Parent Taxable Amount for the Tax Slab      
					SELECT @ParTaxableAmount =  ISNULL(SUM(TaxAmount),0) FROM #TempProductTax A      
					INNER JOIN @TaxSettingDet B ON A.TaxId = B.ColVal and  
					B.ColType = 3 AND B.TaxSlab = @TaxSlab 
					If @ParTaxableAmount>0
					BEGIN
						Set @TaxableAmount=@ParTaxableAmount
					END 
					ELSE
					BEGIN
						Set @TaxableAmount = @TaxableAmount
					END    
					    
					INSERT INTO #TempProductTax (PrdId,TaxId,TaxSlabId,TaxPercentage,      
					TaxAmount)      
					SELECT @PrdBatTaxGrp,@TaxId,@TaxSlab,@TaxPer,      
					cast(@TaxableAmount*(@TaxPer / 100 ) AS NUMERIC(28,10)) 
					
					
					IF NOT EXISTS(SELECT   'X' FROM #ProductZeroTax WHERE  TaxGroupId=@PrdBatTaxGrp)
					BEGIN			 
						INSERT INTO #ProductZeroTax(TaxGroupId,CessTax)
						SELECT @PrdBatTaxGrp,						
						CASE WHEN @TaxCode IN('InputGSTCess')
							THEN Cast((cast(@TaxableAmount*(@TaxPer / 100 ) AS NUMERIC(28,10)) *100) as Numeric(18,5))
							ELSE 0 END as CessTax	
					END	
					ELSE
					BEGIN
						UPDATE #ProductZeroTax SET 
						CessTax=CASE WHEN @TaxCode IN('InputGSTCess')
							THEN Cast((cast(@TaxableAmount*(@TaxPer / 100 ) AS NUMERIC(28,10)) *100) as Numeric(18,5))
							ELSE CessTax END 
						WHERE 	TaxGroupId=@PrdBatTaxGrp 
						
					END 
					  
					END      
					FETCH NEXT FROM CurTax INTO @TaxSlab      
					END        
					CLOSE CurTax        
					DEALLOCATE CurTax     
						
					SET @MinSlno=@MinSlno+1	
		END
		


		INSERT INTO ProductTallyXmlExport(ProductCode,ProductName,LandingPrice,Price,
		EffectiveDate,Tax,HsnCode,CentralTax,StateTax,IntegratedTax,CessTax,TaxType,TypeOfSupply)
		SELECT DISTINCT Prdccode  as ProductCode,PrdName+'~'+Prdccode as ProductName,
		PBD1.PrdbatDetailValue as LandingPrice,PBD.PrdbatDetailValue as Price,Convert(varchar(10),MnfDate,105) as EffectiveDate,
		Convert(nvarchar(10),'NULL') AS Tax,'' as HsnCode,0 as CentralTax,0 as StateTax,0 as IntegratedTax,0 as CessTax,
		'Taxable' as TaxType,'Goods'
		FROM  Product P WITH (NOLOCK)
		INNER JOIN ProductBatch PB WITH (NOLOCK) on PB.PrdId=P.PrdId
		INNER JOIN ProductbatchDetails PBD WITH (NOLOCK) on pbd.Prdbatid=PB.PrdBatId and PBD.DefaultPrice=1 
		INNER JOIN BatchCreation BC WITH (NOLOCK) On BC.SlNo=PBD.SLNo AND BC.SelRte=1
		INNER JOIN ProductbatchDetails PBD1 WITH (NOLOCK) on pbd1.Prdbatid=PB.PrdBatId and PBD1.DefaultPrice=1 
		INNER JOIN BatchCreation BC1 WITH (NOLOCK) On BC1.SlNo=PBD1.SLNo AND BC1.ListPrice=1
		Order by ProductCode
		
		UPDATE A SET A.CentralTax=ISNULL(B.CentralTax,0),A.StateTax=ISNULL(B.StateTax,0)+ISNULL(B.UTTax,0), 
		A.IntegratedTax=ISNULL(B.IntegratedTax,0) ,A.CessTax=ISNULL(B.CessTax,0)
		FROM ProductTallyXmlExport A
		INNER JOIN Product C ON  A.ProductCode=C.Prdccode
		INNER JOIN #ProductZeroTax B ON C.TaxGroupId=B.TaxGroupId
		
		UPDATE A SET A.CessTax=ISNULL(B.CessTax,0)
		FROM ProductTallyXmlExport A
		INNER JOIN Product C ON  A.ProductCode=C.Prdccode
		INNER JOIN #ProductZeroTax B ON C.TaxGroupId=B.TaxGroupId
		
		UPDATE A SET A.HsnCode=B.HSNCode FROM  ProductTallyXmlExport A
		INNER JOIN #ProductHsnCode B ON  A.ProductCode=B.Prdccode 
		
		UPDATE ProductTallyXmlExport SET TaxType='Nil Rated'
		WHERE (CentralTax+StateTax+IntegratedTax+CessTax)=0
		 
		
		
		SELECT Max(ServiceTaxSeqId) as ServiceTaxSeqId,ServiceGroupId 
		INTO #ServiceSeq
		FROM ServiceTaxGroupSetting
		GROUP BY ServiceGroupId
		
		INSERT INTO ProductTallyXmlExport(ProductCode,ProductName,LandingPrice,Price,
		EffectiveDate,Tax,HsnCode,CentralTax,StateTax,IntegratedTax,CessTax,TaxType,TypeOfSupply)
		SELECT SerCode,SerACName,0,0,CONVERT(DATETIME,CONVERT(VARCHAR(10),Getdate(),121),121),0,SerACCode,SUM(CentralTax) as CentralTax,
		SUM(StateTax+UTTax) as StateTax,SUM(IntegratedTax) as IntegratedTax,0 as CessTax,'Taxable' as TaxType,
		'Services'
		FROM (
			SELECT SerCode,SerACName,SerACCode,	
			CASE WHEN TaxCode IN('CGST','OutputCGST','InputCGST')
			THEN ServiceTaxPer
			ELSE 0 END as CentralTax,
			CASE WHEN TaxCode IN('SGST','OutputSGST','InputSGST')
			THEN ServiceTaxPer
			ELSE 0 END as StateTax,
			CASE WHEN TaxCode IN('UTGST','OutputUTGST','InputUTGST')
			THEN ServiceTaxPer
			ELSE 0 END as UTTax	,
			CASE WHEN TaxCode IN('InputIGST','IGST','OutputIGST')
			THEN ServiceTaxPer
			ELSE 0 END as IntegratedTax			
			FROM ServiceMaster A (NOLOCK) 
			INNER JOIN ServiceTaxGroupMaster B (NOLOCK) ON A.TaxGroupId=ServiceGroupId
			INNER JOIN ServiceTaxGroupSetting C (NOLOCK) ON C.ServiceGroupId=B.ServiceGroupId
			INNER JOIN #ServiceSeq D ON D.ServiceGroupId=C.ServiceGroupId and D.ServiceGroupId=B.ServiceGroupId and D.ServiceTaxSeqId=C.ServiceTaxSeqid
			INNER JOIN TaxConfiguration E (NOLOCK) ON E.TaxId=C.TaxId
		)X GROUP BY 	SerCode,SerACName,SerACCode
		
		UPDATE ProductTallyXmlExport SET IntegratedTax=CentralTax+StateTax WHERE IntegratedTax=0
	
RETURN
END
GO
IF EXISTS(SELECT 'X' FROM SYSOBJECTS WHERE XTYPE='TF' AND NAME='Fn_ServiceInvoiceVoucherExportNode1')
DROP FUNCTION Fn_ServiceInvoiceVoucherExportNode1
GO
--SELECT * FROM Serviceclaimapproval
--SELECT * FROM Fn_ServiceInvoiceVoucherExportNode1('GSTSALES','LCSC036551700001','LCSC036551700001')
--SELECT * FROM Fn_VoucherExportNode1('SALES','SAL1710487','N1703809')
CREATE FUNCTION [Fn_ServiceInvoiceVoucherExportNode1]    
(    
 @sVocType  AS VARCHAR(200),    
 @PiValue  AS VARCHAR(200),    
 @VoucherRefNo AS VARCHAR(200)    
)    
RETURNS @VoucherExportNode1 TABLE    
(    
 LedgerName VARCHAR(200),    
 Amount  NUMERIC(18,6),    
 Coaid  INT    
)    
AS    
/***************************************************************************************************    
* FUNCTION : Fn_ServiceInvoiceVoucherExportNode1    
* PURPOSE : Returns the Account Details of Voucher    
* NOTES  :    
* CREATED : Murugan.R 22/11/2017  
* MODIFIED
* DATE            AUTHOR        CR/BZ			USERT STORY ID				DESCRIPTION
* 22/11/2017      Murugan.R		CR				CCRSTLOR0261				Service Invoice Voucher Extract
**************************************************************************************************/    
BEGIN 
		IF UPPER(@sVocType)='GSTSALES'
		BEGIN
			INSERT INTO @VoucherExportNode1(LedgerName,Amount,Coaid)
			SELECT DISTINCT ISNULL(CAST(D.SpmName+ '~' +  D.SpmCode AS Varchar(200)),B.AcName) AS LedgerName ,
			(-1*ISNULL(A.TotalAmount,0)) AS Amount,D.CoaId
			FROM ServiceInvoiceHd A (NOLOCK) 
			INNER JOIN Supplier D (NOLOCK) ON A.ServiceToId=D.SpmId  
			INNER JOIN CoaMaster B (NOLOCK) ON D.CoaId=B.CoaId
			WHERE ServiceInvRefNo=@VoucherRefNo
			
				
			
			INSERT INTO @VoucherExportNode1(LedgerName,Amount,Coaid) 			
			SELECT LedgerName,SUM(Amount) as TaxableAmount,CoaId
			FROM(   
					SELECT AcName +' '+Convert(nvarchar(10),Convert(Numeric(18,6),SUM(Taxperc)))+'%' as LedgerName,
					CONVERT(NUMERIC(18,6),SUM(DISTINCT A.TaxableAmount)) as Amount,C.CoaId
					FROM ServiceInvoiceTaxDetails A(NOLOCK)     
					INNER JOIN ServiceInvoiceHd B(NOLOCK) ON A.ServiceInvId = B.ServiceInvId 
					INNER JOIN ClaimGroupMaster C ON C.ClmGrpId= B.ClmGrpId  
					INNER JOIN COAMaster CM ON CM.CoaId= C.CoaId   
					WHERE A.TaxableAmount > 0  
					AND B.ServiceInvRefNo = @VoucherRefNo
					GROUP BY A.RowNo,CM.AcName, C.CoaId   
				) X GROUP BY 	LedgerName,CoaId
		
			
		END	
		
		IF UPPER(@sVocType)='GSTPURCHASE'
		BEGIN
			INSERT INTO @VoucherExportNode1(LedgerName,Amount,Coaid) --Updated by BHaraneedhar for tally export issue
			SELECT DISTINCT ISNULL(CAST(D.CmpRtrCode+ '~' +  replace(D.Rtrname,'&','&amp;')   AS Varchar(200)),B.AcName) AS LedgerName , --Updated by BHaraneedhar for tally export issue
			(ISNULL(A.TotalAmount,0)) AS Amount,D.CoaId
			FROM ServiceInvoiceHd A (NOLOCK) 
			INNER JOIN Retailer D (NOLOCK) ON A.ServiceFromId=D.RtrId  
			INNER JOIN CoaMaster B (NOLOCK) ON D.CoaId=B.CoaId
			WHERE  ServiceInvRefNo=@VoucherRefNo
			
			
			INSERT INTO @VoucherExportNode1(LedgerName,Amount,Coaid) 
			SELECT LedgerName,-1*SUM(Amount) as TaxableAmount,CoaId
			FROM(   
					SELECT AcName +' '+Convert(nvarchar(10),Convert(Numeric(18,6),SUM(Taxperc)))+'%' as LedgerName,
					CONVERT(NUMERIC(18,6),SUM(DISTINCT A.TaxableAmount)) as Amount,C.CoaId
					FROM ServiceInvoiceTaxDetails A(NOLOCK)     
					INNER JOIN ServiceInvoiceHd B(NOLOCK) ON A.ServiceInvId = B.ServiceInvId 
					INNER JOIN ClaimGroupMaster C ON C.ClmGrpId= B.ClmGrpId  
					INNER JOIN COAMaster CM ON CM.CoaId= C.CoaId   
					WHERE A.TaxableAmount > 0 					
					AND B.ServiceInvRefNo = @VoucherRefNo
					GROUP BY A.RowNo,CM.AcName, C.CoaId 
				)X GROUP BY LedgerName,CoaId	  
		END	
			

RETURN    
END 
GO
IF EXISTS(SELECT 'X' FROM SYSOBJECTS WHERE XTYPE='TF' AND NAME='Fn_ServiceInvoiceVoucherExportNode2')
DROP FUNCTION Fn_ServiceInvoiceVoucherExportNode2
GO
--SELECT * FROM [dbo].[Fn_ServiceInvoiceVoucherExportNode2]('GSTSALES','LCSC036551700001','LCSC036551700001')
--SELECT * FROM [dbo].[Fn_VoucherExportNode2]('IDT','PUR1702478','TE.50354')
CREATE FUNCTION [Fn_ServiceInvoiceVoucherExportNode2]
(
	@sVocType		AS VARCHAR(200),
	@PiValue		AS VARCHAR(200),
	@VoucherRefNo	AS Varchar(200)
)
RETURNS @VoucherExportNode2 TABLE
(
	LedgerName	  VARCHAR(50),
	TaxType       VARCHAR(50),
	TaxRate       VARCHAR(10),
	Amount		  NUMERIC(18,6),
	AssableAmount NUMERIC(18,6),
	Taxid       INT
	
)
AS
/***************************************************************************************************
* FUNCTION	: Fn_ServiceInvoiceVoucherExportNode2
* PURPOSE	: Returns the Tax Bifurication details
* NOTES		:
* CREATED	: Murugan.R 22/11/2017
* MODIFIED
* DATE            AUTHOR        CR/BZ			USERT STORY ID				DESCRIPTION
* 02/11/2017    Murugan.R		CR				CCRSTLOR0261				Tax Split For Service Invoice
-------------------------------------------------------------------------------------------------
**************************************************************************************************/
BEGIN
DECLARE @Amount1 NUMERIC(18,6)
DECLARE @Amount2 NUMERIC(18,6)
DECLARE @Diff NUMERIC(18,6)
DECLARE @TempVoucherExportNode TABLE
(
	LedgerName	  VARCHAR(50),
	TaxType       VARCHAR(50),
	TaxRate       VARCHAR(10),
	Amount		  NUMERIC(18,6),
	AssableAmount NUMERIC(18,6),	
	Taxid       INT	
)


		INSERT INTO @VoucherExportNode2
		SELECT LedgerName,TaxType,TaxRate,CONVERT(NUMERIC(18,6),-1*SUM(Amount)) as Amount,CONVERT(NUMERIC(18,6),SUM(AssableAmount))AssableAmount,Taxid 
		FROM 
		 (

			SELECT TaxCode+' '+CONVERT(NVARCHAR(10),CONVERT(NUMERIC(18,6),Taxperc))+'%' AS LedgerName,TaxCode AS TaxType,
			CONVERT(NVARCHAR(10),CONVERT(NUMERIC(18,6),Taxperc)) AS TaxRate,CONVERT(NUMERIC(18,6),TaxAmount) AS Amount,
			CONVERT(NUMERIC(18,6),TaxableAmount) AS AssableAmount,Tg.Taxid 
			FROM ServiceInvoiceTaxDetails SIPT WITH (NOLOCK) 
			INNER JOIN ServiceInvoiceHd SI WITH (NOLOCK) ON SI.ServiceInvId=SIPT.ServiceInvId
			INNER JOIN TaxConfiguration Tg WITH (NOLOCK) ON TG.Taxid=SIPT.Taxid 
			WHERE Si.ServiceInvRefNo=@VoucherRefNo and SIPT.TaxableAmount>0 
			

		) A 
		GROUP BY LedgerName,TaxType,TaxRate,Taxid
		ORDER BY taxid		 			

RETURN
END
GO
IF EXISTS(SELECT 'x' FROM SYSOBJECTS WHERE XTYPE='TF' AND NAME='FN_VoucherServiceInvoiceGSTInfoNode3')
DROP FUNCTION FN_VoucherServiceInvoiceGSTInfoNode3
GO
--SELECT * FROM DBO.FN_VoucherServiceInvoiceGSTInfoNode3 ('','SVI17000005','SVI17000005')
CREATE FUNCTION [FN_VoucherServiceInvoiceGSTInfoNode3](@VocType as Varchar(100),@VoucherNo Varchar(100),@VoucherRefNo Varchar(100))  
RETURNS @VoucherExport TABLE
(	
	STATENAME		Varchar(150),
	PARTYGSTIN		Varchar(30),
	PLACEOFSUPPLY	Varchar(150),
	CONSIGNEESTATENAME Varchar(150),
	CONSIGNEEGSTIN	Varchar(30),
	ADDRESS1		Varchar(200),
	ADDRESS2		Varchar(200),
	ADDRESS3		Varchar(200)
)
AS
/***************************************************************************************************
* FUNCTION	: FN_VoucherServiceInvoiceGSTInfoNode3
* PURPOSE	: Returns the Gst Information
* NOTES		:
* CREATED	: Murugan.R - 22/11/2017 USERSTORYID CCRSTLOR0261
* MODIFIED
* DATE            AUTHOR       CR/BZ	USERSTORYID		DESCRIPTION
-------------------------------------------------------------------------------------------------
**************************************************************************************************/
BEGIN

	DECLARE @RetailerGSTIN TABLE
	(
		RtrId INT,
		GSTIN Varchar(30)
	)
	DECLARE @RetailerState TABLE
	(
		RtrId INT,
		Statename Varchar(150)
	)
	
	DECLARE @SupplierGSTIN TABLE
	(
		SpmId INT,
		GSTIN Varchar(30)
	)
	DECLARE @SupplierState TABLE
	(
		SpmId INT,
		Statename Varchar(150)
	)
	DECLARE @DistStatName Varchar(150)
	DECLARE @DistGSTTIN Varchar(30)
	SET @DistStatName='Null'
	SET @DistGSTTIN='Null'
	
	SELECT @DistGSTTIN=ColumnValue		
	FROM UdcHD A (NOLOCK)
	INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId
	INNER JOIN UdcDetails C (NOLOCK) ON C.MasterId=B.MasterId and C.MasterId=A.MasterId
	and C.UdcMasterId=B.UdcMasterId 
	INNER JOIN Distributor P (NOLOCK) ON P.DistributorId=C.MasterRecordId
	WHERE A.MasterName='Distributor Info Master' and B.ColumnName='GSTIN'
	
		
	SELECT @DistStatName=
	Case WHEN ColumnValue ='Orissa' THEN 'Odisha' 
		 WHEN ColumnValue ='Andaman and Nicobar Islands' THEN 'Andaman & Nicobar Islands'
		 WHEN ColumnValue ='Dadra and Nagar Haveli' THEN 'Dadra & Nagar Haveli'
		 WHEN ColumnValue ='Daman and Diu' THEN 'Daman & Diu'
		 WHEN ColumnValue ='Jammu and Kashmir' THEN 'Jammu & Kashmir'
	ELSE 	ColumnValue	END	
	FROM UdcHD A (NOLOCK)
	INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId
	INNER JOIN UdcDetails C (NOLOCK) ON C.MasterId=B.MasterId and C.MasterId=A.MasterId
	and C.UdcMasterId=B.UdcMasterId 
	INNER JOIN Distributor P (NOLOCK) ON P.DistributorId=C.MasterRecordId
	INNER JOIN StateMaster S (NOLOCK) ON S.StateName=C.ColumnValue
	WHERE A.MasterName='Distributor Info Master' and B.ColumnName='State Name'
		
	INSERT INTO @RetailerGSTIN(RtrId,GSTIN)
	SELECT DISTINCT  R.RtrId as RtrId,UT.ColumnValue 
	FROM UDCHD U 
	INNER JOIN UDCMASTER UD ON U.MasterId=UD.MasterId
	INNER JOIN UdcDetails UT ON UT.MasterId=UD.MasterId and UT.UdcMasterId=UD.UdcMasterId
	INNER JOIN Retailer R ON R.RtrId=UT.MasterRecordId
	WHERE U.MasterId=2 and ColumnName='GSTIN'
	
	INSERT INTO @RetailerState(RtrId,Statename)
	SELECT DISTINCT  R.RtrId as RtrId,
	Case WHEN UT.ColumnValue ='Orissa' THEN 'Odisha' 
		 WHEN UT.ColumnValue ='Andaman and Nicobar Islands' THEN 'Andaman & Nicobar Islands'
		 WHEN UT.ColumnValue ='Dadra and Nagar Haveli' THEN 'Dadra & Nagar Haveli'
		 WHEN UT.ColumnValue ='Daman and Diu' THEN 'Daman & Diu'
		 WHEN UT.ColumnValue ='Jammu and Kashmir' THEN 'Jammu & Kashmir'
	ELSE 	UT.ColumnValue	END		
	FROM UDCHD U 
	INNER JOIN UDCMASTER UD ON U.MasterId=UD.MasterId
	INNER JOIN UdcDetails UT ON UT.MasterId=UD.MasterId and UT.UdcMasterId=UD.UdcMasterId
	INNER JOIN Retailer R ON R.RtrId=UT.MasterRecordId
	WHERE U.MasterId=2 and ColumnName='State Name'
	
	INSERT INTO @SupplierGSTIN(SpmId,GSTIN)
	SELECT DISTINCT   R.SpmId as SpmId,UT.ColumnValue 
	FROM UDCHD U 
	INNER JOIN UDCMASTER UD ON U.MasterId=UD.MasterId
	INNER JOIN UdcDetails UT ON UT.MasterId=UD.MasterId and UT.UdcMasterId=UD.UdcMasterId
	INNER JOIN Supplier R ON R.SpmId=UT.MasterRecordId
	WHERE U.MasterId=8 and ColumnName='GSTIN'
	UNION
	SELECT DISTINCT   R.SpmId as SpmId,UT.ColumnValue 
	FROM UDCHD U 
	INNER JOIN UDCMASTER UD ON U.MasterId=UD.MasterId
	INNER JOIN UdcDetails UT ON UT.MasterId=UD.MasterId and UT.UdcMasterId=UD.UdcMasterId
	INNER JOIN IDTMaster R ON R.SpmId=UT.MasterRecordId
	WHERE U.MasterId=8 and ColumnName='GSTIN'
	
	
	INSERT INTO @SupplierState(SpmId,Statename)
	SELECT DISTINCT  R.SpmId as SpmId,UT.ColumnValue 
	FROM UDCHD U 
	INNER JOIN UDCMASTER UD ON U.MasterId=UD.MasterId
	INNER JOIN UdcDetails UT ON UT.MasterId=UD.MasterId and UT.UdcMasterId=UD.UdcMasterId
	INNER JOIN Supplier R ON R.SpmId=UT.MasterRecordId
	WHERE U.MasterId=8 and ColumnName='State Name'
	UNION
	SELECT DISTINCT   R.SpmId as SpmId,UT.ColumnValue 
	FROM UDCHD U 
	INNER JOIN UDCMASTER UD ON U.MasterId=UD.MasterId
	INNER JOIN UdcDetails UT ON UT.MasterId=UD.MasterId and UT.UdcMasterId=UD.UdcMasterId
	INNER JOIN IDTMaster R ON R.SpmId=UT.MasterRecordId
	WHERE U.MasterId=8 and ColumnName='State Name'
	
	
	IF UPPER(@VocType)='GSTSALES'
	BEGIN
		INSERT INTO @VoucherExport(STATENAME,PARTYGSTIN,PLACEOFSUPPLY,CONSIGNEESTATENAME,CONSIGNEEGSTIN,ADDRESS1,ADDRESS2,ADDRESS3)
		SELECT DISTINCT ISNULL(RS.STATENAME,'Null'),ISNULL(RG.GSTIN,'Null'),ISNULL(RS.STATENAME,'Null'),
		@DistStatName as CONSIGNEESTATENAME,@DistGSTTIN as CONSIGNEEGSTIN,SpmAdd1 as ADDRESS1,
		ISNULL(SpmAdd2,'Null') as ADDRESS2,ISNULL(SpmAdd3,'Null') as ADDRESS3
		FROM ServiceInvoiceHd A (NOLOCK) 
		INNER JOIN Supplier S ON S.SpmId=A.ServiceToId	
		LEFT OUTER JOIN @SupplierGSTIN RG ON A.ServiceToId=RG.SpmId and S.SpmId=RG.SpmId
		LEFT OUTER JOIN @SupplierState RS ON A.ServiceToId=RS.SpmId and S.SpmId=RS.SpmId
		WHERE A.ServiceInvRefNo=@VoucherRefNo	
	END
	IF UPPER(@VocType)='GSTPURCHASE'
	BEGIN
		INSERT INTO @VoucherExport(STATENAME,PARTYGSTIN,PLACEOFSUPPLY,CONSIGNEESTATENAME,CONSIGNEEGSTIN,ADDRESS1,ADDRESS2,ADDRESS3)
		SELECT DISTINCT ISNULL(RS.STATENAME,'Null'),ISNULL(RG.GSTIN,'Null'),ISNULL(RS.STATENAME,'Null'),
		@DistStatName as CONSIGNEESTATENAME,@DistGSTTIN as CONSIGNEEGSTIN,RtrAdd1 as ADDRESS1,
		ISNULL(RtrAdd2,'Null') as ADDRESS2,ISNULL(RtrAdd3,'Null') as ADDRESS3
		FROM ServiceInvoiceHd A (NOLOCK) 
		INNER JOIN Retailer S ON S.RtrId=A.ServiceFromId	
		LEFT OUTER JOIN @RetailerGSTIN RG ON A.ServiceFromId=RG.RtrId and S.RtrId=RG.RtrId
		LEFT OUTER JOIN @RetailerState RS ON A.ServiceFromId=RS.RtrId and S.RtrId=RS.RtrId
		WHERE A.ServiceInvRefNo=@VoucherRefNo	
	END
RETURN
END
GO
DELETE FROM TallyVoucherType WHERE Voucher IN('IDT','IDT In')
INSERT INTO TallyVoucherType(Slno,Voucher)
SELECT MAX(SlNo)+1,'IDT' FROM TallyVoucherType
INSERT INTO TallyVoucherType(Slno,Voucher)
SELECT MAX(SlNo)+1,'IDT In' FROM TallyVoucherType
GO
--ILCRSTPAR4961 (Uploaded MRP,LSP AND Selrate)
IF EXISTS (SELECT * FROM Cs2Cn_Prk_TransactionWiseGrnTracking WHERE UPLOADFLAG='N')
BEGIN
 IF NOT EXISTS (SELECT '*' FROM SYSOBJECTS WHERE NAME = 'TEMP_GRNTRACKING' AND XTYPE = 'U')
 BEGIN
	SELECT * INTO TEMP_GRNTRACKING FROM Cs2Cn_Prk_TransactionWiseGrnTracking WHERE UPLOADFLAG='N' 
 END 	
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Cs2Cn_Prk_TransactionWiseGrnTracking' AND TYPE='U')
DROP TABLE Cs2Cn_Prk_TransactionWiseGrnTracking
GO
CREATE TABLE Cs2Cn_Prk_TransactionWiseGrnTracking
(
	[SlNo]						[NUMERIC](38, 0) IDENTITY(1,1) NOT NULL,
	[DistCode]					[NVARCHAR](50) NULL,
	[TransactionDescription]	[NVARCHAR](100) NOT NULL,
	[RefId]						[INT] NULL,
	[RefNo]						[NVARCHAR](50) NOT NULL,
	[Refdate]					[DATETIME] NOT NULL,
	[ProductCode]				[NVARCHAR](50) NULL,
	[BatchCode]					[NVARCHAR](50) NULL,
	[PrdSlno]					[INT] NOT NULL,
	[BaseQty]					[INT] NULL,
	[FreeQty]					[INT] NULL,
	[GrnPrdSlNo]				[INT] NULL,
	[GrnQty]					[INT] NOT NULL,
	[GrnFreeQty]				[INT] NULL,
	[PurRcptRefNo]				[NVARCHAR](100) NOT NULL,
	[GrnDate]					[DATETIME] NULL,
	[UploadFlag]				[VARCHAR](2) NULL,
	[SyncId]					[NUMERIC](38, 0) NULL,
	[ServerDate]				[DATETIME] NULL,
	[CmpInvNo]					[NVARCHAR](50) NULL,
	[MRP]						NUMERIC(38,6) NULL,
	[LSP]						NUMERIC(38,6) NULL,
	[SellingRate]				NUMERIC(38,6) NULL
)
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='TEMP_GRNTRACKING' AND TYPE='U')
BEGIN
		INSERT INTO Cs2Cn_Prk_TransactionWiseGrnTracking(DistCode,TransactionDescription,RefId,RefNo,Refdate,ProductCode,BatchCode,PrdSlno,BaseQty,FreeQty,
		GrnPrdSlNo,GrnQty,GrnFreeQty,PurRcptRefNo,GrnDate,UploadFlag,SyncId,ServerDate,CmpInvNo )
		SELECT DistCode,TransactionDescription,RefId,RefNo,Refdate,ProductCode,BatchCode,PrdSlno,BaseQty,FreeQty,
		GrnPrdSlNo,GrnQty,GrnFreeQty,PurRcptRefNo,GrnDate,UploadFlag,SyncId,ServerDate,CmpInvNo FROM TEMP_GRNTRACKING 
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_Cs2Cn_TransactionWiseGrnTracking' AND TYPE='P')
DROP PROCEDURE Proc_Cs2Cn_TransactionWiseGrnTracking
GO
--EXEC Proc_Cs2Cn_TransactionWiseGrnTracking 0,'2017-01-14'
CREATE PROCEDURE Proc_Cs2Cn_TransactionWiseGrnTracking
(
	@Po_ErrNo INT OUTPUT,
	@ServerDate DATETIME
)
AS
/*********************************
* PROCEDURE		: Proc_Cs2Cn_TransactionWiseGrnTracking
* PURPOSE		: To Extract Bill Wise GRN refernce from CoreStocky to   Console
* CREATED BY	: Raja C
* CREATED DATE	: 05-06-2017
* NOTE			:
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}	
***************************************************************************************************
* DATE          AUTHOR      CR/BZ	USER STORY ID           DESCRIPTION                         
***************************************************************************************************
* 21-09-2018   Lakshman M	 SR     ILCRSTPAR2151         GRN Tracking uplaod process enabled date On (21-09-2018) as per client request.
* 27-06-2018   Mohana S		 SR     ILCRSTPAR4961         Uploaded MRP,LSP AND Selrate
***************************************************************************************************/ 
SET NOCOUNT ON
BEGIN	
    SET @Po_ErrNo= 0
    -- RETURN -- > Commented By Lakshman M For GRN tracking  process enabled 
	DECLARE @DistCode	As nVarchar(50)
	SELECT @DistCode = DistributorCode FROM Distributor	(NOLOCK)	
	
	UPDATE A SET GSPUpload1 = 1 FROM TransactionWiseGrnTracking A WHERE Refdate  <'2018-09-21' ---> Add By Lakshman M PMS ID: ILCRSTPAR2151 Dated ON 21/09/2018 
	
	DELETE FROM Cs2Cn_Prk_TransactionWiseGrnTracking WHERE UploadFlag='Y'
	
	--ILCRSTPAR4961
	SELECT Prdbatid , Priceid, SUM(MRP) MRP,SUM(LSP) LSP,SUM(SelRate) SelRate
	INTO #ProductBatchDetails
	FROM
	( 
	SELECT PB.Prdbatid,PBD.Priceid,PBD.PrdbatDetailvalue AS MRP,0 LSP,0 SelRate FROM ProductBatch PB (NOLOCK)  
	INNER JOIN ProductBatchDetails PBD(NOLOCK)   ON PB.Prdbatid = PBD.PrdBatId and PBD.DefaultPrice = 1
	INNER JOIN BatchCreation B(NOLOCK)   ON PBD.SLNo = B.SLNO AND B.MRP = 1
	UNION ALL		
	SELECT PB.Prdbatid,PBD.Priceid,0,PBD.PrdbatDetailvalue AS LSP,0 FROM ProductBatch PB (NOLOCK)  
	INNER JOIN ProductBatchDetails PBD(NOLOCK)   ON PB.Prdbatid = PBD.PrdBatId and PBD.DefaultPrice = 1
	INNER JOIN BatchCreation B(NOLOCK)   ON PBD.SLNo = B.SLNO AND B.ListPrice  = 1
	UNION ALL		
	SELECT PB.Prdbatid,PBD.Priceid,0,0,PBD.PrdbatDetailvalue AS SelRate FROM ProductBatch PB (NOLOCK)  
	INNER JOIN ProductBatchDetails PBD(NOLOCK)   ON PB.Prdbatid = PBD.PrdBatId and PBD.DefaultPrice = 1
	INNER JOIN BatchCreation B(NOLOCK)   ON PBD.SLNo = B.SLNO AND B.SelRte = 1
	)A GROUP BY  PrdBatId ,PriceId 
	--ILCRSTPAR4961

	INSERT INTO Cs2Cn_Prk_TransactionWiseGrnTracking(DistCode,TransactionDescription,RefId,RefNo,Refdate,ProductCode,BatchCode,PrdSlno,BaseQty,FreeQty,
	GrnPrdSlNo,GrnQty,GrnFreeQty,PurRcptRefNo,GrnDate,UploadFlag,ServerDate,MRP ,LSP ,SellingRate)
	
	SELECT @DistCode,T.TransactionDescription AS  TransactionDescription,A.RefId,A.RefNo AS RefNo,A.Refdate AS Refdate,PrdCCode AS ProductCode,CmpBatCode AS BatchCode ,A.Slno AS PrdSlno,
	A.BaseQty AS BaseQty,A.FreeQty AS FreeQty,A.GrnPrdSlNo AS GrnPrdSlNo,A.GrnQty AS GrnQty,A.GrnFreeQty AS GrnFreeQty,A.PurRcptRefNo AS PurRcptRefNo,A.GrnDate AS GrnDate,'N',@ServerDate,
	MRP ,LSP ,SelRate 
	FROM TransactionWiseGrnTracking A(NOLOCK) INNER JOIN TransactionMaster T(NOLOCK) ON A.Transid =T.TransactionId 
	INNER JOIN Product P(NOLOCK) ON A.Prdid=P.PrdId
	INNER JOIN ProductBatch PB (NOLOCK) ON A.PrdBatid=PB.PrdBatId
	INNER JOIN #ProductBatchDetails PBD ON PB.Prdbatid = PBD.PrdBatId 
	WHERE GSPUpload1 = 0 AND Refdate >='2018-09-21' ---> Add By Lakshman M PMS ID: ILCRSTPAR2151 Dated ON 21/09/2018 
	
	UPDATE A SET A.CmpInvNo=B.CmpInvNo From Cs2Cn_Prk_TransactionWiseGrnTracking A (Nolock) Inner Join PurchaseReceipt B (Nolock)On A.PurRcptRefNo=B.PurRcptRefNo ---Added By Mohanakrishna A.B
	
	UPDATE  A  SET GSPUpload1 = 1 FROM TransactionWiseGrnTracking A WHERE EXISTS (SELECT * FROM Cs2Cn_Prk_TransactionWiseGrnTracking B(NOLOCK)
	WHERE A.RefId=B.RefId AND A.RefNo=B.RefNo )
		
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_InvoiceWiseGrnTrack' AND XTYPE='P')
DROP PROCEDURE Proc_InvoiceWiseGrnTrack
/*
--exec Proc_InvoiceWiseGrnTrack 2,2,1,1,73847,'MLBL469917002995'
 SELECT * FROM BilledPrdGRNTrack(nolock)
*/
GO
CREATE PROCEDURE Proc_InvoiceWiseGrnTrack
(
	 @Pi_TransId	 INT,
	 @Pi_CalledFrom  INT,        
	 @Pi_UserId		 INT,
	 @Pi_LcnId		 INT,
	 @Pi_RefId		 INT,
	 @Pi_RefNo		 NVARCHAR(50)
)
AS
/************************
* PROCEDURE		: Proc_InvoiceWiseGrnTrack
* PURPOSE		: GST Changes To Track Product wise GRN Details
* CREATED		: Karthick
* CREATED DATE	: 2017-04-12
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
* 27-06-2018   Mohana S		 SR     ILCRSTPAR4961         Uploaded MRP,LSP AND Selrate
***************************/
BEGIN
	DECLARE @MinRowid AS INT
	DECLARE @MaxRowid AS INT
 	DECLARE @Prdid AS INT
	DECLARE @PrdBatid AS INT
	DECLARE @BilledQty AS INT 
	DECLARE @MinSlno AS INT
	DECLARE @MaxSlno AS INT
	DECLARE @PurRcptId AS INT
	DECLARE @PurRcptRefNo AS VARCHAR(50)
	DECLARE @GrnQty AS INT
	DECLARE @RemainingQty AS INT
	DECLARE @GrnDate AS DATETIME
	DECLARE @PrdSlNo AS INT
	DECLARE @RefId AS INT 
	
	CREATE TABLE #GRNDETAILS
	(
		PurRcptId			INT,
		PurRcptRefNo		VARCHAR(50),
		PurRcptDate			DATETIME,
		PrdSlNo				INT,
		GrnQty				INT,
		Slno				INT	
	)

	CREATE TABLE #AdjustedPurchase
	(
		PurRcptId			INT,
		PurRcptRefNo		VARCHAR(50),
		PurRcptDate			DATETIME,
		Prdid				INT,
		Prdbatid			INT,
		PrdSlNo				INT,
		GrnQty				INT,
		LcnId				INT
	)
	
	CREATE TABLE #BilledDetails
	(
		Refid		INT,
		Prdid		INT,
		PrdBatId	INT,
		BaseQty		INT,
		RowId		INT
	)

 
/*
	CalledFrom-2 Billing
	CalledFrom-38 StockJournal
	CalledFrom-3 Sales Return
*/

	
	DELETE FROM BilledPrdGRNTrack WHERE UsrId = @Pi_UserId  AND TransId = @Pi_TransId  
	
	IF @Pi_TransId=2
	BEGIN	
		INSERT INTO #BilledDetails
		SELECT 0,PrdId,PrdBatId,BaseQty,SlNo FROM Salesinvoiceproduct(NOLOCK) WHERE SalId=@Pi_RefId
			
		SELECT @MinRowid=MIN(ISNULL(RowId,0)) FROM #BilledDetails 
		SELECT @MaxRowid=MAX(ISNULL(RowId,0)) FROM #BilledDetails 
	END

	IF @Pi_TransId=3
	BEGIN		
		INSERT INTO #BilledDetails
		SELECT RP.salid,PrdId,PrdBatId,BaseQty,Slno 
		FROM Returnheader RH(NOLOCK) INNER JOIN Returnproduct RP(NOLOCK) ON RH.returnid=RP.returnid
		WHERE BillRef=1 AND ReturnCode=@Pi_RefNo
		
		SELECT @MinRowid=MIN(ISNULL(RowId,0)) FROM #BilledDetails
		SELECT @MaxRowid=MAX(ISNULL(RowId,0)) FROM #BilledDetails		
	END

	IF @Pi_TransId=38
	BEGIN		
		INSERT INTO #BilledDetails
		SELECT 0,Prdid,Prdbatid,StkTransferQty,ROW_NUMBER() OVER(ORDER BY Prdid) 
		FROM StockJournal S(NOLOCK) INNER JOIN StockJournalDt SD(NOLOCK)  ON S.StkJournalRefNo=SD.StkJournalRefNo
		WHERE s.StkJournalRefNo=@Pi_RefNo AND StockTypeId=1 
		
		SELECT @MinRowid=MIN(ISNULL(RowId,0)) FROM #BilledDetails
		SELECT @MaxRowid=MAX(ISNULL(RowId,0)) FROM #BilledDetails
	END
 
	WHILE @MinRowid<=@MaxRowid
	BEGIN
	
		SELECT @Prdid=PrdId,@PrdBatid=PrdBatId,@BilledQty=BaseQty,@RefId=Refid FROM #BilledDetails WHERE RowId= @MinRowid
		
	IF (@Pi_TransId=2) OR (@Pi_TransId=38) 		
	BEGIN
		DELETE FROM #GRNDETAILS
		INSERT INTO #GRNDETAILS
		SELECT PurRcptId,PurRcptRefNo,InvDate,PrdSlNo,GrnQty,ROW_NUMBER() OVER(ORDER BY PurRcptId ASC) Slno
		FROM
		(
		SELECT PurRcptId,PurRcptRefNo,InvDate,PrdSlNo,SUM(GrnQty-AdjustedQty) AS GrnQty
		FROM
		(
			SELECT pr.PurRcptId,pr.PurRcptRefNo,(RcvdGoodBaseQty-RetRcvdBaseQty-BilledSalQty) AS GrnQty,0 AS AdjustedQty,PR.InvDate,PrdSlNo
			FROM PurchaseReceipt PR(NOLOCK) INNER JOIN PurchaseReceiptProduct PRP(NOLOCK) ON PR.PurRcptId=PRP.PurRcptId
			WHERE  PrdId=@Prdid and PrdBatId=@PrdBatid ANd Lcnid=@Pi_LcnId AND (RcvdGoodBaseQty-RetRcvdBaseQty-BilledSalQty)>0 --AND CancelInvoice=0
			UNION
			SELECT PurRcptId,PurRcptRefNo,0 AS GrnQty,GrnQty AS AdjustedQty,PurRcptDate,PrdSlNo FROM #AdjustedPurchase WHERE Prdid=@Prdid AND Prdbatid=@PrdBatid 
			AND LcnId=@Pi_LcnId
			UNION
			SELECT PurRcptId,PurRcptRefNo,0 AS GrnQty,GrnQty AS AdjustedQty,PurRcptDate,PrdSlNo FROM BilledPrdGRNTrack WHERE Prdid=@Prdid AND Prdbatid=@PrdBatid 
			AND Lcnid=@Pi_LcnId	AND UsrId = @Pi_UserId  AND TransId = @Pi_TransId   --ILCRSTPAR4961
		)A 
		GROUP BY PurRcptId,PurRcptRefNo,InvDate,PrdSlNo
		HAVING SUM(GrnQty-AdjustedQty)>0 
		)B
     END
		 
	IF (@Pi_TransId=3) 		
	BEGIN
		DELETE FROM #GRNDETAILS
		INSERT INTO #GRNDETAILS 
		SELECT PurRcptId,PurRcptRefNo,InvDate,PrdSlNo,GrnQty,ROW_NUMBER() OVER(ORDER BY PurRcptId ASC) Slno
		FROM
		(
		SELECT PurRcptId,PurRcptRefNo,InvDate,PrdSlNo,SUM(GrnQty-AdjustedQty) AS GrnQty
		FROM
		(
			SELECT PurRcptId,T.PurRcptRefNo,GrnQty ,0 AS AdjustedQty,GrnDate AS InvDate,GrnPrdSlNo AS PrdSlNo
			FROM TransactionWiseGrnTracking T(NOLOCK) INNER JOIN PurchaseReceipt P(NOLOCK) ON T.PurRcptRefNo=P.PurRcptRefNo
			WHERE Prdid=@Prdid AND PrdBatid=@PrdBatid AND RefId=@RefId AND TRANSID=2
		)A 
		GROUP BY PurRcptId,PurRcptRefNo,InvDate,PrdSlNo
		HAVING SUM(GrnQty-AdjustedQty)>0 
		)B
     END

		
		SELECT @MinSlno =MIN(Slno) FROM #GRNDETAILS
		SELECT @MaxSlno =MAX(Slno) FROM #GRNDETAILS
			
			SET @RemainingQty=@BilledQty
			
			WHILE @MinSlno<=@MaxSlno
			BEGIN
				SELECT @PurRcptId= PurRcptId,@PurRcptRefNo =PurRcptRefNo,@GrnQty=GrnQty,@GrnDate=PurRcptDate,@PrdSlNo=PrdSlNo 
						FROM #GRNDETAILS WHERE Slno=@MinSlno
			
				IF @RemainingQty>0
				 BEGIN
					 IF @GrnQty>=@RemainingQty
					 BEGIN
						INSERT INTO BilledPrdGRNTrack(RowId,Refid,RefNo,Lcnid,Prdid,PrdBatid,BaseQty,FreeQty,PurRcptId,PurRcptRefNo,PurRcptDate,PrdSlNo,GrnQty,FreeGrnQty,Usrid,Transid,CalledFrom)
						SELECT  @MinRowid,@Pi_RefId,@Pi_RefNo,@Pi_LcnId,@Prdid,@PrdBatid,@BilledQty,0,@PurRcptId,@PurRcptRefNo,@GrnDate,@PrdSlNo,@RemainingQty,0,@Pi_UserId,@Pi_TransId,@Pi_CalledFrom
						
						INSERT INTO #AdjustedPurchase
						SELECT @PurRcptId,@PurRcptRefNo,@GrnDate,@Prdid,@PrdBatid,@PrdSlNo,@RemainingQty,@Pi_LcnId
						
						BREAK 
					 END 
					 ELSE
					 BEGIN
						INSERT INTO BilledPrdGRNTrack(RowId,Refid,RefNo,Lcnid,Prdid,PrdBatid,BaseQty,FreeQty,PurRcptId,PurRcptRefNo,PurRcptDate,PrdSlNo,GrnQty,FreeGrnQty,Usrid,Transid,CalledFrom)
						SELECT  @MinRowid,@Pi_RefId,@Pi_RefNo,@Pi_LcnId,@Prdid,@PrdBatid,@BilledQty,0,@PurRcptId,@PurRcptRefNo,@GrnDate,@PrdSlNo,@GrnQty,0,@Pi_UserId,@Pi_TransId,@Pi_CalledFrom

						INSERT INTO #AdjustedPurchase
						SELECT @PurRcptId,@PurRcptRefNo,@GrnDate,@Prdid,@PrdBatid,@PrdSlNo,@GrnQty,@Pi_LcnId
						
						SET @RemainingQty=@RemainingQty-@GrnQty
					 END
				  END					
				
				SET @MinSlno=@MinSlno+1
			END
		
		SET @MinRowid=@MinRowid+1
	END	
 
END
GO
--Scrpitupdater
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='RptBillTemplate_CrDbAdjustment' AND XTYPE ='U')
DROP TABLE RptBillTemplate_CrDbAdjustment
GO
CREATE TABLE RptBillTemplate_CrDbAdjustment(
	[SalId] [int] NULL,
	[SalInvNo] [nvarchar](50) NULL,
	[NoteNumber] [nvarchar](100) NULL,
	[Amount] [numeric](18, 0) NULL,
	[PreviousAmount] [numeric](18, 0) NULL,
	[CrDbRemarks] [nvarchar](100) NULL,
	[UsrId] [int] NULL
) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Cs2cn_Prk_RDBNTrace' AND TYPE='U')
BEGIN
	CREATE TABLE Cs2cn_Prk_RDBNTrace
	(
		[Slno] [int] IDENTITY(1,1) NOT NULL,
		[DistCode] [varchar](200) NULL,
		[TransDate] [datetime] NULL,
		[BillCnt] [int] NULL,
		[SalesValue] [numeric](18, 6) NULL,
		[ReturnCnt] [int] NULL,
		[ReturnValue] [numeric](18, 6) NULL,
		[PurchaseCnt] [int] NULL,
		[PurchaseValue] [numeric](18, 6) NULL,
		[SchCnt] [int] NULL,
		[UploadFlag] [nvarchar](1) NULL,
		[Syncid] [numeric](38, 0) NULL,
		[Serverdate] [datetime] NULL
	)
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Cs2Cn_RDBN_Trace' AND TYPE='P')
DROP PROCEDURE Proc_Cs2Cn_RDBN_Trace
GO
--EXEC Proc_Cs2Cn_RDBN_Trace 0,''
CREATE PROCEDURE Proc_Cs2Cn_RDBN_Trace  
(
	@Po_ErrNo INT OUTPUT ,
	@serverdate datetime  
)
AS
/***********************************************************  
* PROCEDURE		: Proc_Cs2Cn_RDBN_Trace  
* PURPOSE		: To Insert the records From Corestocky  to Proc_Cs2Cn_RDBN_Trace for Trace
* CREATED BY	: Mohana
* USER STORY ID :  ILCRSTPAR3915
*************************************************************/  
SET NOCOUNT ON  
BEGIN  
		DECLARE @DistCode VARCHAR(100)
		DECLARE @syncid INT
		SELECT  @DistCode  = DistributorCode FROM distributor
		SELECT  @syncid =syncid from SyncStatus
		DECLARE @Fromdate DATETIME
		DECLARE @Todate DATETIME

		DELETE FROM Cs2cn_Prk_RDBNTrace WHERE UPLOADFLAG='Y'
		
		SELECT @Fromdate = '2019-01-01'
		SELECT @Todate = CONVERT(VARCHAR(10),GETDATE(),121)
		
		CREATE TABLE #Cs2Cn_Prk_SchemeUtilizationDetails
		(
			[SlNo] [numeric](38, 0) IDENTITY(1,1) NOT NULL,
			[TransName] [nvarchar](50) NULL,
			[SchUtilizeType] [nvarchar](50) NULL,
			[CmpCode] [nvarchar](100) NULL,
			[CmpSchCode] [nvarchar](50) NULL,
			[SchCode] [nvarchar](50) NULL,
			[SchDescription] [nvarchar](200) NULL,
			[SchType] [nvarchar](50) NULL,
			[SlabId] [int] NULL,
			[TransNo] [nvarchar](50) NULL,
			[TransDate] [datetime] NULL,
			[RtrId] [int] NULL,
			[CmpRtrCode] [nvarchar](50) NULL,
			[RtrCode] [nvarchar](50) NULL,
			[BilledPrdCCode] [nvarchar](50) NULL,
			[BilledPrdBatCode] [nvarchar](50) NULL,
			[BilledQty] [int] NULL,
			[SchUtilizedAmt] [numeric](38, 6) NULL,
			[SchDiscPerc] [numeric](38, 6) NULL,
			[FreePrdCCode] [nvarchar](50) NULL,
			[FreePrdBatCode] [nvarchar](50) NULL,
			[FreeQty] [int] NULL,
			[NoOfTimes] [int] NULL	
		) 

		INSERT INTO #Cs2Cn_Prk_SchemeUtilizationDetails
	(
		TransName,SchUtilizeType,CmpCode,CmpSchCode,SchCode,SchDescription,SchType,SlabId,TransNo,TransDate,RtrId,CmpRtrCode,RtrCode,
		BilledPrdCCode,BilledPrdBatCode,BilledQty,SchUtilizedAmt,SchDiscPerc,FreePrdCCode,FreePrdBatCode,FreeQty,NoOfTimes
	)
	SELECT 'Billing','Amount',CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,
	CASE SM.SchType WHEN 1 THEN 'Quantity Based' WHEN 2 THEN 'Amount Based' WHEN 3 THEN 'Weight Based' WHEN 4 THEN 'Display' END,
	A.SlabId,B.SalInvNo,B.SalInvDate,B.RtrId,R.CmpRtrCode,R.RtrCode,
	P.PrdCCode,PB.PrdBatCode,SIP.BaseQty,(ISNULL(SUM(FlatAmount),0)+ISNULL(SUM(DiscountPerAmount),0)) AS Utilized,		
	A.DiscPer,'','',0,0
	FROM SalesInvoiceSchemeLineWise A(NOLOCK) 
	INNER JOIN SalesInvoice B(NOLOCK) ON A.SalId = B.SalId 
	INNER JOIN SchemeMaster SM(NOLOCK) ON A.Schid = SM.SchId 
	INNER JOIN Company CM(NOLOCK) ON SM.CmpId = CM.CmpId
	INNER JOIN Retailer R(NOLOCK) ON R.RtrId = B.RtrId
	INNER JOIN Product P(NOLOCK) ON A.PrdId=P.PrdId
	INNER JOIN ProductBatch PB(NOLOCK) ON PB.PrdId=P.PrdId AND A.PrdBatId=PB.PrdBatId
	INNER JOIN SalesInvoiceProduct SIP(NOLOCK) ON SIP.SalId = B.SalId AND A.SalId=SIP.SalId AND SIP.PrdId=A.PrdID AND SIP.PrdBatId=A.PrdBatId
	WHERE DlvSts in (4,5) AND CM.CmpID = 1 AND SalinvDate BETWEEN @Fromdate AND @Todate  AND (FlatAmount+DiscountPerAmount)>0
	GROUP BY CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SM.SchType,A.SlabId,B.SalInvNo,B.SalInvDate,
	B.RtrId,R.CmpRtrCode,R.RtrCode,P.PrdCCode,PB.PrdBatCode,SIP.BaseQty,A.DiscPer
	
	INSERT INTO #Cs2Cn_Prk_SchemeUtilizationDetails
	(
		TransName,SchUtilizeType,CmpCode,CmpSchCode,SchCode,SchDescription,SchType,SlabId,TransNo,TransDate,RtrId,CmpRtrCode,RtrCode,
		BilledPrdCCode,BilledPrdBatCode,BilledQty,SchUtilizedAmt,SchDiscPerc,FreePrdCCode,FreePrdBatCode,FreeQty,NoOfTimes
	)
	SELECT 'Billing','Free Product',CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,
	CASE SM.SchType WHEN 1 THEN 'Quantity Based' WHEN 2 THEN 'Amount Based' WHEN 3 THEN 'Weight Based' WHEN 4 THEN 'Display' END,
	A.SlabId,B.SalInvNo,B.SalInvDate,B.RtrId,R.CmpRtrCode,R.RtrCode,
	'Free Product','',0,ISNULL(SUM(FreeQty * D.PrdBatDetailValue),0) AS Utilized,0,
	P.PrdCCode,C.PrdBatCode,SUM(FreeQty) AS FreeQty,0
	FROM SalesInvoiceSchemeDtFreePrd A(NOLOCK) 
	INNER JOIN SalesInvoice B(NOLOCK) ON A.SalId = B.SalId
	INNER JOIN ProductBatch C (NOLOCK) ON A.FreePrdId = C.PrdId AND A.FreePrdBatId = C.PrdBatId 
	INNER JOIN ProductBatchDetails D (NOLOCK) ON C.PrdBatId = D.PrdBatId AND A.FreePriceId = D.PriceId 
	INNER JOIN BatchCreation E (NOLOCK) ON E.BatchSeqId = C.BatchSeqId AND D.SlNo = E.SlNo AND E.ClmRte = 1
	INNER JOIN SchemeMaster SM(NOLOCK) ON A.Schid = SM.SchId 
	INNER JOIN Company CM(NOLOCK) ON SM.CmpId = CM.CmpId 
	INNER JOIN Product P(NOLOCK) ON A.FreePrdId = P.PrdId
	INNER JOIN Retailer R(NOLOCK) ON R.RtrId = B.RtrId
	WHERE DlvSts in (4,5) AND CM.CmpID = 1 AND SalinvDate BETWEEN @Fromdate AND @Todate 
	GROUP BY CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SM.SchType,A.SlabId,B.SalInvNo,B.SalInvDate,
	B.RtrId,R.CmpRtrCode,R.RtrCode,P.PrdCCode,C.PrdBatCode
	
	
	INSERT INTO #Cs2Cn_Prk_SchemeUtilizationDetails
	(
		TransName,SchUtilizeType,CmpCode,CmpSchCode,SchCode,SchDescription,SchType,SlabId,TransNo,TransDate,RtrId,CmpRtrCode,RtrCode,
		BilledPrdCCode,BilledPrdBatCode,BilledQty,SchUtilizedAmt,SchDiscPerc,FreePrdCCode,FreePrdBatCode,FreeQty,NoOfTimes
	)
	SELECT 'Billing','Gift Product',CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,
	CASE SM.SchType WHEN 1 THEN 'Quantity Based' WHEN 2 THEN 'Amount Based' WHEN 3 THEN 'Weight Based' WHEN 4 THEN 'Display' END,
	A.SlabId,B.SalInvNo,B.SalInvDate,B.RtrId,R.CmpRtrCode,R.RtrCode,
	'Gift Product','',0,ISNULL(SUM(GiftQty * D.PrdBatDetailValue),0) AS Utilized,0,
	P.PrdCCode,C.PrdBatCode,SUM(GiftQty) AS GiftQty,0
	FROM SalesInvoiceSchemeDtFreePrd A 
	INNER JOIN SalesInvoice B(NOLOCK) ON A.SalId = B.SalId
	INNER JOIN ProductBatch C (NOLOCK) ON A.GiftPrdId = C.PrdId AND A.GiftPrdBatId = C.PrdBatId 
	INNER JOIN ProductBatchDetails D (NOLOCK) ON C.PrdBatId = D.PrdBatId AND A.GiftPriceId = D.PriceId 
	INNER JOIN BatchCreation E (NOLOCK) ON E.BatchSeqId = C.BatchSeqId AND D.SlNo = E.SlNo AND E.ClmRte = 1
	INNER JOIN SchemeMaster SM (NOLOCK)ON A.Schid = SM.SchId 
	INNER JOIN Company CM(NOLOCK) ON SM.CmpId = CM.CmpId 
	INNER JOIN Product P(NOLOCK) ON A.GiftPrdId = P.PrdId
	INNER JOIN Retailer R(NOLOCK) ON R.RtrId = B.RtrId
	WHERE DlvSts in (4,5) AND CM.CmpID = 1 AND SalinvDate BETWEEN @Fromdate AND @Todate 
	GROUP BY CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SM.SchType,A.SlabId,B.SalInvNo,B.SalInvDate,
	B.RtrId,R.CmpRtrCode,R.RtrCode,P.PrdCCode,C.PrdBatCode
	
	INSERT INTO #Cs2Cn_Prk_SchemeUtilizationDetails
	(
		TransName,SchUtilizeType,CmpCode,CmpSchCode,SchCode,SchDescription,SchType,SlabId,TransNo,TransDate,RtrId,CmpRtrCode,RtrCode,
		BilledPrdCCode,BilledPrdBatCode,BilledQty,SchUtilizedAmt,SchDiscPerc,FreePrdCCode,FreePrdBatCode,FreeQty,NoOfTimes
	)
	SELECT 'Billing','WDS',CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,
	CASE SM.SchType WHEN 1 THEN 'Quantity Based' WHEN 2 THEN 'Amount Based' WHEN 3 THEN 'Weight Based' WHEN 4 THEN 'Display' END,
	0,B.SalInvNo,B.SalInvDate,B.RtrId,R.CmpRtrCode,R.RtrCode,
	'','',0,ISNULL(SUM(AdjAmt),0) AS Utilized,0,'','',0,0
	FROM SalesInvoiceWindowDisplay A(NOLOCK)
	INNER JOIN SalesInvoice B(NOLOCK) ON A.SalId = B.SalId
	INNER JOIN SchemeMaster SM(NOLOCK) ON A.Schid = SM.SchId 
	INNER JOIN Company CM(NOLOCK) ON SM.CmpId = CM.CmpId
	INNER JOIN Retailer R(NOLOCK) ON R.RtrId = B.RtrId
	WHERE DlvSts in (4,5) AND CM.CmpID = 1 AND SalinvDate BETWEEN @Fromdate AND @Todate 
	GROUP BY CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SM.SchType,B.SalInvNo,B.SalInvDate,
	B.RtrId,R.CmpRtrCode,R.RtrCode
	
	INSERT INTO #Cs2Cn_Prk_SchemeUtilizationDetails
	(
		TransName,SchUtilizeType,CmpCode,CmpSchCode,SchCode,SchDescription,SchType,SlabId,TransNo,TransDate,RtrId,CmpRtrCode,RtrCode,
		BilledPrdCCode,BilledPrdBatCode,BilledQty,SchUtilizedAmt,SchDiscPerc,FreePrdCCode,FreePrdBatCode,FreeQty,NoOfTimes
	)
	SELECT 'Billing','QPS Converted Amount',CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,
	CASE SM.SchType WHEN 1 THEN 'Quantity Based' WHEN 2 THEN 'Amount Based' WHEN 3 THEN 'Weight Based' WHEN 4 THEN 'Display' END,
	A.SlabId,B.SalInvNo,B.SalInvDate,B.RtrId,R.CmpRtrCode,R.RtrCode,
	'','',0,ISNULL(SUM(A.CrNoteAmount),0) AS Utilized,0,'','',0,0
	FROM SalesInvoiceQPSSchemeAdj A (NOLOCK)
	INNER JOIN SalesInvoice B ON A.SalId = B.SalId AND Mode=1
	INNER JOIN SchemeMaster SM ON A.Schid = SM.SchId 
	INNER JOIN Company CM ON SM.CmpId = CM.CmpId 
	INNER JOIN Retailer R ON R.RtrId = B.RtrId
	WHERE DlvSts in (4,5) AND CM.CmpID = 1 AND SalinvDate BETWEEN @Fromdate AND @Todate 
	GROUP BY CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SM.SchType,A.SlabId,B.SalInvNo,B.SalInvDate,
	B.RtrId,R.CmpRtrCode,R.RtrCode
	UNION ALL
	SELECT 'Billing','QPS Converted Amount(Auto)',CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,
	CASE SM.SchType WHEN 1 THEN 'Quantity Based' WHEN 2 THEN 'Amount Based' WHEN 3 THEN 'Weight Based' WHEN 4 THEN 'Display' END,
	A.SlabId,'AutoQPSConversion' AS SalInvNo,A.LastModDate,A.RtrId,R.CmpRtrCode,R.RtrCode,
	'','',0,ISNULL(SUM(A.CrNoteAmount),0) AS Utilized,0,'','',0,0
	FROM SalesInvoiceQPSSchemeAdj A(NOLOCK) 
	INNER JOIN SchemeMaster SM ON A.Schid = SM.SchId AND Mode=2
	INNER JOIN Company CM ON SM.CmpId = CM.CmpId 
	INNER JOIN Retailer R ON R.RtrId = A.RtrId
	WHERE CM.CmpID = 1 AND A.LastModDate>='2019-01-01'
	GROUP BY CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SM.SchType,A.SlabId,A.LastModDate,
	A.RtrId,R.CmpRtrCode,R.RtrCode
	
	INSERT INTO #Cs2Cn_Prk_SchemeUtilizationDetails
	(
		TransName,SchUtilizeType,CmpCode,CmpSchCode,SchCode,SchDescription,SchType,SlabId,TransNo,TransDate,RtrId,CmpRtrCode,RtrCode,
		BilledPrdCCode,BilledPrdBatCode,BilledQty,SchUtilizedAmt,SchDiscPerc,FreePrdCCode,FreePrdBatCode,FreeQty,NoOfTimes
	)
	SELECT 'Billing','Points',CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,
	CASE SM.SchType WHEN 1 THEN 'Quantity Based' WHEN 2 THEN 'Amount Based' WHEN 3 THEN 'Weight Based' WHEN 4 THEN 'Display' END,
	A.SlabId,B.SalInvNo,B.SalInvDate,B.RtrId,R.CmpRtrCode,R.RtrCode,
	P.PrdCCode,PB.PrdBatCode,SIP.BaseQty,SUM(A.Points) AS Utilized,0,'','',0,0
	FROM SalesInvoiceSchemeDtPoints A(NOLOCK) 
	INNER JOIN SalesInvoice B(NOLOCK) ON A.SalId = B.SalId 
	INNER JOIN SchemeMaster SM ON A.Schid = SM.SchId 
	INNER JOIN Company CM ON SM.CmpId = CM.CmpId
	INNER JOIN Retailer R ON R.RtrId = B.RtrId
	INNER JOIN Product P ON A.PrdId=P.PrdId
	INNER JOIN ProductBatch PB ON PB.PrdId=P.PrdId AND A.PrdBatId=PB.PrdBatId
	INNER JOIN SalesInvoiceProduct SIP ON SIP.SalId = B.SalId AND A.SalId=SIP.SalId AND SIP.PrdId=A.PrdID AND SIP.PrdBatId=A.PrdBatId
	WHERE DlvSts in (4,5) AND CM.CmpID = 1  AND SalinvDate BETWEEN @Fromdate AND @Todate  AND A.Points>0
	GROUP BY CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SM.SchType,A.SlabId,B.SalInvNo,B.SalInvDate,
	B.RtrId,R.CmpRtrCode,R.RtrCode,P.PrdCCode,PB.PrdBatCode,SIP.BaseQty 
	
	 
	INSERT INTO #Cs2Cn_Prk_SchemeUtilizationDetails
	(
		TransName,SchUtilizeType,CmpCode,CmpSchCode,SchCode,SchDescription,SchType,SlabId,TransNo,TransDate,RtrId,CmpRtrCode,RtrCode,
		BilledPrdCCode,BilledPrdBatCode,BilledQty,SchUtilizedAmt,SchDiscPerc,FreePrdCCode,FreePrdBatCode,FreeQty,NoOfTimes
	)
	SELECT 'Sales Return','Amount',CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,
	CASE SM.SchType WHEN 1 THEN 'Quantity Based' WHEN 2 THEN 'Amount Based' WHEN 3 THEN 'Weight Based' WHEN 4 THEN 'Display' END,
	A.SlabId,B.ReturnCode,B.ReturnDate,B.RtrId,R.CmpRtrCode,R.RtrCode,
	P.PrdCCode,PB.PrdBatCode,SIP.BaseQty,-1 * (ISNULL(SUM(ReturnFlatAmount),0) + ISNULL(SUM(ReturnDiscountPerAmount),0)),0,	
	'','',0,0
	FROM ReturnSchemeLineDt A(NOLOCK) 
	INNER JOIN ReturnHeader B(NOLOCK) ON A.ReturnId = B.ReturnId
	INNER JOIN SchemeMaster SM(NOLOCK) ON A.Schid = SM.SchId 
	INNER JOIN Company CM ON SM.CmpId = CM.CmpId
	INNER JOIN Retailer R ON R.RtrId = B.RtrId
	INNER JOIN Product P ON A.PrdId=P.PrdId
	INNER JOIN ProductBatch PB ON PB.PrdId=P.PrdId AND A.PrdBatId=PB.PrdBatId
	INNER JOIN ReturnProduct SIP ON SIP.ReturnId = B.ReturnId AND A.ReturnId=SIP.ReturnId AND SIP.PrdId=A.PrdId AND SIP.PrdBatId=A.PrdBatId
	WHERE B.Status = 0 AND CM.CmpID = 1 AND ReturnDate>='2019-01-01'
	GROUP BY CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SM.SchType,A.SlabId,B.ReturnCode,B.ReturnDate,
	B.RtrId,R.CmpRtrCode,R.RtrCode,P.PrdCCode,PB.PrdBatCode,SIP.BaseQty

	INSERT INTO #Cs2Cn_Prk_SchemeUtilizationDetails
	(
		TransName,SchUtilizeType,CmpCode,CmpSchCode,SchCode,SchDescription,SchType,SlabId,TransNo,TransDate,RtrId,CmpRtrCode,RtrCode,
		BilledPrdCCode,BilledPrdBatCode,BilledQty,SchUtilizedAmt,SchDiscPerc,FreePrdCCode,FreePrdBatCode,FreeQty,NoOfTimes
	)
	SELECT 'Sales Return','Free Product',CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,
	CASE SM.SchType WHEN 1 THEN 'Quantity Based' WHEN 2 THEN 'Amount Based' WHEN 3 THEN 'Weight Based' WHEN 4 THEN 'Display' END,
	A.SlabId,B.ReturnCode,B.ReturnDate,B.RtrId,R.CmpRtrCode,R.RtrCode,
	'Free Product','',0,-1 * ISNULL(SUM(ReturnFreeQty * D.PrdBatDetailValue),0),0,
	P.PrdCCode,C.PrdBatCode,-1 * SUM(ReturnFreeQty),0
	FROM ReturnSchemeFreePrdDt A (NOLOCK)
	INNER JOIN ReturnHeader B (NOLOCK)ON A.ReturnId = B.ReturnId
	INNER JOIN ProductBatch C (NOLOCK) ON A.FreePrdId = C.PrdId AND A.FreePrdBatId = C.PrdBatId 
	INNER JOIN ProductBatchDetails D (NOLOCK) ON C.PrdBatId = D.PrdBatId AND A.FreePriceId = D.PriceId 
	INNER JOIN BatchCreation E (NOLOCK) ON E.BatchSeqId = C.BatchSeqId AND D.SlNo = E.SlNo AND E.ClmRte = 1
	INNER JOIN SchemeMaster SM ON A.Schid = SM.SchId 
	INNER JOIN Company CM ON SM.CmpId = CM.CmpId 
	INNER JOIN Product P ON A.FreePrdId = P.PrdId
	INNER JOIN Retailer R ON R.RtrId = B.RtrId
	WHERE B.Status = 0 AND CM.CmpID = 1 AND ReturnDate>='2019-01-01'
	GROUP BY CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SM.SchType,A.SlabId,B.ReturnCode,B.ReturnDate,
	B.RtrId,R.CmpRtrCode,R.RtrCode,P.PrdCCode,C.PrdBatCode
	

	INSERT INTO #Cs2Cn_Prk_SchemeUtilizationDetails
	(
		TransName,SchUtilizeType,CmpCode,CmpSchCode,SchCode,SchDescription,SchType,SlabId,TransNo,TransDate,RtrId,CmpRtrCode,RtrCode,
		BilledPrdCCode,BilledPrdBatCode,BilledQty,SchUtilizedAmt,SchDiscPerc,FreePrdCCode,FreePrdBatCode,FreeQty,NoOfTimes
	)
	SELECT 'Sales Return','Gift Product',CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,
	CASE SM.SchType WHEN 1 THEN 'Quantity Based' WHEN 2 THEN 'Amount Based' WHEN 3 THEN 'Weight Based' WHEN 4 THEN 'Display' END,
	A.SlabId,B.ReturnCode,B.ReturnDate,B.RtrId,R.CmpRtrCode,R.RtrCode,
	'Gift Product','',0,-1 * ISNULL(SUM(ReturnGiftQty * D.PrdBatDetailValue),0),0,
	P.PrdCCode,C.PrdBatCode,-1 * SUM(ReturnGiftQty),0
	FROM ReturnSchemeFreePrdDt A (NOLOCK)
	INNER JOIN ReturnHeader B(NOLOCK) ON A.ReturnId = B.ReturnId
	INNER JOIN ProductBatch C (NOLOCK) ON A.GiftPrdId = C.PrdId AND A.GiftPrdBatId = C.PrdBatId 
	INNER JOIN ProductBatchDetails D (NOLOCK) ON C.PrdBatId = D.PrdBatId AND A.GiftPriceId = D.PriceId 
	INNER JOIN BatchCreation E (NOLOCK) ON E.BatchSeqId = C.BatchSeqId AND D.SlNo = E.SlNo AND E.ClmRte = 1
	INNER JOIN SchemeMaster SM ON A.Schid = SM.SchId 
	INNER JOIN Company CM ON SM.CmpId = CM.CmpId 
	INNER JOIN Product P ON A.GiftPrdId = P.PrdId 
	INNER JOIN Retailer R ON R.RtrId = B.RtrId
	WHERE B.Status = 0 AND CM.CmpID = 1 AND ReturnDate>='2019-01-01'
	GROUP BY CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SM.SchType,A.SlabId,B.ReturnCode,B.ReturnDate,
	B.RtrId,R.CmpRtrCode,R.RtrCode,P.PrdCCode,C.PrdBatCode
	
	INSERT INTO #Cs2Cn_Prk_SchemeUtilizationDetails
	(
		TransName,SchUtilizeType,CmpCode,CmpSchCode,SchCode,SchDescription,SchType,SlabId,TransNo,TransDate,RtrId,CmpRtrCode,RtrCode,
		BilledPrdCCode,BilledPrdBatCode,BilledQty,SchUtilizedAmt,SchDiscPerc,FreePrdCCode,FreePrdBatCode,FreeQty,NoOfTimes
	)
	SELECT 'Sales Return','Points',CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,
	CASE SM.SchType WHEN 1 THEN 'Quantity Based' WHEN 2 THEN 'Amount Based' WHEN 3 THEN 'Weight Based' WHEN 4 THEN 'Display' END,
	A.SlabId,B.ReturnCode,B.ReturnDate,B.RtrId,R.CmpRtrCode,R.RtrCode,
	P.PrdCCode,PB.PrdBatCode,SIP.BaseQty,-1 * SUM(ReturnPoints),0,'','',0,0
	FROM ReturnSchemePointsDt A (NOLOCK)
	INNER JOIN ReturnHeader B(NOLOCK) ON A.ReturnId = B.ReturnId
	INNER JOIN SchemeMaster SM ON A.Schid = SM.SchId 
	INNER JOIN Company CM ON SM.CmpId = CM.CmpId
	INNER JOIN Retailer R ON R.RtrId = B.RtrId
	INNER JOIN Product P ON A.PrdId=P.PrdId
	INNER JOIN ProductBatch PB ON PB.PrdId=P.PrdId AND A.PrdBatId=PB.PrdBatId
	INNER JOIN ReturnProduct SIP ON SIP.ReturnId = B.ReturnId AND A.ReturnId=SIP.ReturnId AND SIP.PrdId=A.PrdId AND SIP.PrdBatId=A.PrdBatId
	WHERE B.Status = 0 AND CM.CmpID = 1 AND ReturnDate>='2019-01-01'
	GROUP BY CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SM.SchType,A.SlabId,B.ReturnCode,B.ReturnDate,
	B.RtrId,R.CmpRtrCode,R.RtrCode,P.PrdCCode,PB.PrdBatCode,SIP.BaseQty
 
 		IF EXISTS (SELECT * FROM DayEndProcess WHERE ProcDesc ='RDBN_TRACE' AND  DateDiff(dd,NextUpDate,Getdate())>=1)
		BEGIN
		INSERT INTO Cs2cn_Prk_RDBNTrace
		SELECT @DistCode,TransDate,SUM(BillCnt),SUM(SalesValue),SUM(ReturnCnt),SUM(ReturnValue),SUM(PurchaseCnt),SUM(PurchaseValue),SUM(SchCnt),'N' UploadFlag,@syncid,@serverdate FROM  
		(		
		SELECT A.SalInvDate Transdate,COUNT(A.SalInvNo) BillCnt,SUM(B.PrdNetAmount) Salesvalue,0 ReturnCnt,0 ReturnValue,0 AS PurchaseCnt,0 As PurchaseValue,0 As SchCnt 
		FROM Salesinvoice A (NOLOCK)
		INNER JOIN SalesInvoiceProduct B(NOLOCK) ON A.Salid = B.SalId AND A.SalInvDate  BETWEEN @Fromdate AND @Todate AND A.DlvSts in (4,5)
		GROUP BY A.SalInvDate
		UNION ALL
		SELECT A.ReturnDate Transdate,0 BillCnt,0 Salesvalue,Count(A.ReturnCode) ReturnCnt,SUM(B.PrdNetAmt) ReturnValue,0 AS PurchaseCnt,0 As PurchaseValue,0 As SchCnt 
		FROM ReturnHeader A(NOLOCK)
		INNER JOIN ReturnProduct B(NOLOCK) ON A.ReturnID = B.ReturnID AND A.ReturnDate   BETWEEN @Fromdate AND @Todate AND A.Status = 0
		GROUP BY A.ReturnDate
		UNION ALL
		SELECT Invdate Transdate,0 BillCnt,0 Salesvalue,0 ReturnCnt,0 ReturnValue,Count(PurRcptRefNo) AS PurchaseCnt,SUM(B.PrdNetAmount) As PurchaseValue,0 As SchCnt 
		FROM PurchaseReceipt A(NOLOCK)
		INNER JOIN PurchaseReceiptProduct B(NOLOCK) ON A.PurRcptId  = B.PurRcptId AND Invdate BETWEEN @Fromdate AND @Todate --AND A.Status = 1
		GROUP BY Invdate
		UNION ALL
		SELECT A.transdate Transdate,0 BillCnt,0 Salesvalue,0 ReturnCnt,0 ReturnValue,0 AS PurchaseCnt,0 As PurchaseValue,Count(*) As SchCnt 
		FROM #Cs2Cn_Prk_SchemeUtilizationDetails A
		WHERE A.transdate BETWEEN @Fromdate AND @Todate 
		GROUP BY A.transdate
		)A GROUP BY TransDate ORDER BY TransDate
		END
		
		UPDATE DayEndProcess SET ProcDate = CONVERT(VARCHAR(10),GETDATE(),121),NextUpDate =  CONVERT(VARCHAR(10),GETDATE(),121) WHERE ProcDesc ='RDBN_TRACE'
END
GO
IF NOT EXISTS (SELECT A.NAME FROM SysObjects A INNER JOIN SysColumns B ON A.id=B.id AND A.name='RptBillTemplateFinal' AND B.name='PrdtDefaultPricevalue')      
BEGIN      
ALTER TABLE RptBillTemplateFinal ADD PrdtDefaultPricevalue NUMERIC (18,2) DEFAULT 0 WITH VALUES       
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_RptBillTemplateFinal' AND TYPE ='P')
DROP PROCEDURE Proc_RptBillTemplateFinal
GO
-- EXEC PROC_RptBillTemplateFinal 16,2,0,'BILLPrintissue03012018',0,0,1,'RPTBT_VIEW_FINAL1_BILLTEMPLATE'           
CREATE PROCEDURE Proc_RptBillTemplateFinal
(      
 @Pi_RptId  INT,      
 @Pi_UsrId  INT,      
 @Pi_SnapId  INT,      
 @Pi_DbName  NVARCHAR(50),      
 @Pi_SnapRequired INT,      
 @Pi_GetFromSnap  INT,      
 @Pi_CurrencyId  INT,      
 @Pi_BTTblName    NVARCHAR(50)      
)      
AS      
/***************************************************************************************************      
* PROCEDURE : Proc_RptBillTemplateFinal      
* PURPOSE : General Procedure      
* NOTES  :        
* CREATED :      
* MODIFIED      
* DATE       AUTHOR     DESCRIPTION      
----------------------------------------------------------------------------------------------------      
* 01.10.2009  Panneer      Added Tax summary Report Part(UserId Condition)      
* 10/07/2015  PRAVEENRAJ BHASKARAN     Added Grammge For Parle  
* DATE       AUTHOR     CR/BZ	USER STORY ID           DESCRIPTION                         
***************************************************************************************************
  10-01-2018  LAKSHMAN	   BZ     ICRSTPAR7339             Bill Print Allot ment Issue
  11-04-2019  Lakshman M   SR     ILCRSTPAR4044            product default price new column added
****************************************************************************************************/      
SET NOCOUNT ON      
BEGIN      
 --Added By Murugan 04/09/2009      
 DECLARE @FieldCount AS INT      
 DECLARE @UomStatus AS INT       
 DECLARE @UOMCODE AS nVARCHAR(25)      
 DECLARE @pUOMID as INT      
 DECLARE @UomFieldList as nVARCHAR(3000)      
 DECLARE @UomFields as nVARCHAR(3000)      
 DECLARE @UomFields1 as nVARCHAR(3000)      
 --END      
 DECLARE @NewSnapId  AS INT      
 DECLARE @DBNAME  AS  nvarchar(50)      
 DECLARE @TblName  AS nvarchar(500)      
 DECLARE @TblStruct  AS nVarchar(4000)      
 DECLARE @TblFields  AS nVarchar(4000)      
 DECLARE @sSql  AS  nVarChar(4000)      
 DECLARE @ErrNo   AS INT      
 DECLARE @PurDBName AS nVarChar(50)      
 Declare @Sub_Val  AS TINYINT      
 DECLARE @FromDate AS DATETIME      
 DECLARE @ToDate   AS DATETIME      
 DECLARE @FromBillNo  AS   BIGINT      
 DECLARE @TOBillNo    AS   BIGINT      
 DECLARE @SMId   AS INT      
 DECLARE @RMId   AS INT      
 DECLARE @RtrId   AS INT      
 DECLARE @vFieldName    AS nvarchar(255)      
 DECLARE @vFieldType AS nvarchar(10)      
 DECLARE @vFieldLength as nvarchar(10)      
 DECLARE @FieldList as      nvarchar(4000)      
 DECLARE @FieldTypeList as varchar(8000)      
 DECLARE @FieldTypeList2 as varchar(8000)      
 DECLARE @DeliveredBill  AS INT      
 DECLARE @SSQL1 AS NVARCHAR(4000)      
 DECLARE @FieldList1 as      nvarchar(4000)      
 --For B&L Bill Print Configurtion      
 SELECT @DeliveredBill=Status FROM  Configuration WHERE ModuleName='Discount & Tax Collection' AND ModuleId='DISTAXCOLL5'      
 IF @DeliveredBill=1      
 BEGIN        
  DELETE FROM RptBillToPrint WHERE [Bill Number] IN(      
  SELECT SalInvNo FROM SalesInvoice WHERE DlvSts NOT IN(4,5))      
 END      
 --Till Here      
 --Added By Murugan 04/09/2009      
 --print @Pi_BTTblName      
 SET @FieldCount=0      
 SELECT @UomStatus=Isnull(Status,0) FROM configuration  WHERE ModuleName='General Configuration' and ModuleId='GENCONFIG22' and SeqNo=22      
 --Till Here      
 SET @FromDate =(SELECT  TOP 1 dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,10,@Pi_UsrId))      
 SET @ToDate = (SELECT  TOP 1 dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,11,@Pi_UsrId))      
 DECLARE CurField CURSOR FOR      
 select sc.name fieldname,st.name fieldtype,sc.length from syscolumns sc, systypes st      
 where sc.id in (select id from sysobjects where name like @Pi_BTTblName )      
 and sc.xtype = st.xtype      
 and sc.xusertype = st.xusertype      
 Set @FieldList = ''      
 Set @FieldTypeList = ''      
 OPEN CurField      
 FETCH CurField INTO @vFieldName,@vFieldType,@vFieldLength      
 WHILE @@Fetch_Status = 0      
 BEGIN      
  if len(@FieldTypeList) > 3060      
  begin      
   Set @FieldTypeList2 = @FieldTypeList      
   Set @FieldTypeList = ''      
  end      
  --->Added By Nanda on 12/03/2010      
  IF LEN(@FieldList)>3060      
  BEGIN      
   SET @FieldList1=@FieldList      
   SET @FieldList=''    
  END      
  --->Till Here      
  if @vFieldName = 'UsrId'      
  begin      
   Set @FieldList = @FieldList  + 'V.[' + @vFieldName + '] , '      
  end      
  else      
  begin      
   Set @FieldList = @FieldList + '[' + @vFieldName + '] , '      
  end      
  if @vFieldType = 'nvarchar' or @vFieldType = 'varchar' or @vFieldType = 'char'      
  begin      
   Set @FieldTypeList = @FieldTypeList + '[' + @vFieldName + '] ' + @vFieldType + '(' + @vFieldLength + ')' + ','      
  end      
  else if @vFieldType = 'numeric'      
  begin      
   Set @FieldTypeList = @FieldTypeList + '[' + @vFieldName + '] ' + @vFieldType + '(38,2)' + ','      
  end      
  else      
  begin      
   Set @FieldTypeList = @FieldTypeList + '[' + @vFieldName + '] ' + @vFieldType + ','      
  end      
  FETCH CurField INTO @vFieldName,@vFieldType,@vFieldLength      
 END      
 Set @FieldList = left(@FieldList,len(@FieldList)-1)      
 Set @FieldTypeList = left(@FieldTypeList,len(@FieldTypeList)-1)      
 CLOSE CurField      
 DEALLOCATE CurField      
 --Added by Murugan UomCoversion 04/09/2009      
 IF @UomStatus=1      
 BEGIN       
  TRUNCATE TABLE BillTemplateUomBased       
  SET @UomFieldList=''      
  SET @UomFields=''      
  SET @UomFields1=''      
  SET @FieldCount= @FieldCount+1       
  DECLARE CUR_UOM CURSOR      
  FOR SELECT UOMID,UOMCODE FROM UOMMASTER  Order BY UOMID      
  OPEN CUR_UOM      
  FETCH NEXT FROM CUR_UOM INTO @pUOMID,@UOMCODE      
  WHILE @@FETCH_STATUS=0      
  BEGIN      
   SET @FieldCount= @FieldCount+1      
   SET @UomFieldList=@UomFieldList+'['+@UOMCODE +'] INT,'      
   SET @UomFields=@UomFields+'0 AS ['+@UOMCODE +'],'      
   SET @UomFields1=@UomFields1+'['+@UOMCODE +'],'       
   INSERT INTO BillTemplateUomBased(ColId,UOMID,UomCode)      
   VALUES (@FieldCount,@pUOMID,@UOMCODE)      
  FETCH NEXT FROM CUR_UOM INTO @pUOMID,@UOMCODE      
  END       
  CLOSE CUR_UOM      
  DEALLOCATE CUR_UOM      
  SET @UomFieldList= subString(@UomFieldList,1,Len(Ltrim(rtrim(@UomFieldList)))-1)      
  SET @UomFields= subString(@UomFields,1,Len(Ltrim(rtrim(@UomFields)))-1)      
  SET @UomFields1= subString(@UomFields1,1,Len(Ltrim(rtrim(@UomFields1)))-1)        
 END      
 -----      
 SELECT @PurDBName = dbo.Fn_ReturnPurgeDBName(@FromDate,@ToDate)      
 if exists (select * from dbo.sysobjects where id = object_id(N'[RptBillTemplateFinal]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)      
 drop table [RptBillTemplateFinal]      
 IF @UomStatus=1      
 BEGIN       
  EXEC('CREATE TABLE RptBillTemplateFinal      
  (' +  @FieldTypeList2 + @FieldTypeList  + ',AmtInWrd nVarchar(500),'+ @UomFieldList +')')      
 END      
 ELSE      
 BEGIN      
  EXEC('CREATE TABLE RptBillTemplateFinal      
  (' +  @FieldTypeList2 + @FieldTypeList  + ',AmtInWrd nVarchar(500))')      
 END      
 SET @TblName = 'RptBillTemplateFinal'      
 SET @TblStruct = @FieldTypeList2 + @FieldTypeList      
 SET @TblFields = @FieldTypeList2 + @FieldTypeList      
 IF @Pi_GetFromSnap = 1      
 BEGIN      
  Select @DBNAME = DBName  FROM SnapShotHd WHERE SnapId = @Pi_SnapId      
  SET @DBNAME =   @DBNAME      
 END      
 ELSE      
 BEGIN      
  Select @DBNAME = CounterDesc  FROM CounterConfiguration WHERE SlNo =3      
  SET @DBNAME = @PI_DBNAME + @DBNAME      
 END      
 --Nanda01      
 IF @Pi_GetFromSnap = 0  --To Generate For New Report Data      
 BEGIN      
  DELETE FROM RptBillTemplateFinal Where UsrId = @Pi_UsrId      
  IF @UomStatus=1      
  BEGIN      
   EXEC ('INSERT INTO RptBillTemplateFinal (' + @FieldList1+@FieldList + ','+ @UomFields1 + ')' +      
   'Select  DISTINCT' + @FieldList1+@FieldList +','+ @UomFields+'  from ' + @Pi_BTTblName + ' V,RptBillToPrint T Where V.[Sales Invoice Number] = T.[Bill Number]')      
  END      
  ELSE      
  BEGIN      
   --SELECT 'Nanda002'       
   Exec ('INSERT INTO RptBillTemplateFinal (' +@FieldList1+ @FieldList + ')' +      
   'Select  DISTINCT' + @FieldList1+ @FieldList + '  from ' + @Pi_BTTblName + ' V,RptBillToPrint T Where V.[Sales Invoice Number] = T.[Bill Number]')      
  END      
  IF LEN(@PurDBName) > 0      
  BEGIN      
   EXEC Proc_PurgedDB @PurDBName,@TblName,@Po_PurgeErrno = @ErrNo OUTPUT      
   SET @SSQL = 'INSERT INTO RptBillTemplateFinal ' +      
    '(' + @TblFields + ')' +      
   ' SELECT DISTINCT' + @TblFields + ' FROM ['  + @PurDBName + '].dbo.' + @TblName + ' Where UsrId = ' + @Pi_UsrId      
         EXEC (@SSQL)      
   PRINT @SSQL      
   PRINT 'Retrived Data From Purged Table'      
  END      
  IF @Pi_SnapRequired = 1      
     BEGIN      
   SELECT @NewSnapId = @Pi_SnapId      
   EXEC Proc_SnapShot_Report @NewSnapId,@Pi_UsrId,@Pi_RptId,@Pi_DbName,@TblName,@TblStruct,      
    @Pi_GetFromSnap,@Po_SnapErrno = @ErrNo OUTPUT      
   IF @ErrNo = 0      
      BEGIN      
    SET @sSql = 'INSERT INTO [' + @DBNAME + '].dbo.' + @TblName +      
     '(SnapId,UserId,RptId,' + @TblFields + ')' +      
     ' SELECT ' + CAST(@NewSnapId AS VARCHAR(10)) +      
     ' ,' + CAST(@Pi_UsrId AS VARCHAR(10)) +      
     ' ,' + CAST(@Pi_RptId AS VARCHAR(10)) + ', * FROM RptBillTemplateFinal'      
    EXEC (@SSQL)      
    PRINT 'Saved Data Into SnapShot Table'      
      END      
     END      
 END      
 --Nanda02      
 ELSE    --To Retrieve Data From Snap Data      
 BEGIN      
  EXEC Proc_SnapShot_Report @Pi_SnapId,@Pi_UsrId,@Pi_RptId,@Pi_DbName,@TblName,@TblStruct,      
    @Pi_GetFromSnap,@Po_SnapErrno = @ErrNo OUTPUT      
  PRINT @ErrNo      
  IF @ErrNo = 0      
     BEGIN      
   SET @SSQL = 'INSERT INTO RptBillTemplateFinal ' +      
    '(' + @TblFields + ')' +      
    ' SELECT DISTINCT' + @TblFields + ' FROM ['  + @DBNAME + '].dbo.' + @TblName +      
    ' WHERE SNAPID = ' + CAST(@Pi_SnapId AS VARCHAR(10)) +      
    ' AND UserId = ' + CAST(@Pi_UsrId AS VARCHAR(10)) +      
    ' AND RptId = ' + CAST(@Pi_RptId AS VARCHAR(10))      
   EXEC (@SSQL)      
   PRINT 'Retrived Data From Snap Shot Table'      
     END      
  ELSE      
     BEGIN      
   PRINT 'DataBase or Table not Found'      
     END      
 END      
 --Update SplitUp Tax Amount & Perc      
 IF @UomStatus=1      
 BEGIN       
  EXEC Proc_BillTemplateUOM @Pi_UsrId      
 END      
-- EXEC Proc_BillPrintingTax @Pi_UsrId      
 IF Exists(SELECT Name FROM dbo.sysColumns where id = object_id(N'RptBillTemplateFinal') and name='Tax 1')      
 BEGIN      
  SET @SSQL1='UPDATE [RptBillTemplateFinal] SET [RptBillTemplateFinal].[Tax 1]=BillPrintTaxTemp.[Tax1Perc]      
  FROM BillPrintTaxTemp WHERE [RptBillTemplateFinal].SalId=BillPrintTaxTemp.[SalId] AND [RptBillTemplateFinal].[Product Code]=BillPrintTaxTemp.[PrdCode]      
  AND [RptBillTemplateFinal].[Batch Code] =BillPrintTaxTemp.[BatchCode]'      
  EXEC (@SSQL1)      
 END      
 IF Exists(SELECT Name FROM dbo.sysColumns where id = object_id(N'RptBillTemplateFinal') and name='Tax Amount1')      
 BEGIN      
  SET @SSQL1='UPDATE [RptBillTemplateFinal] SET [RptBillTemplateFinal].[Tax Amount1]=BillPrintTaxTemp.[Tax1Amount]      
  FROM BillPrintTaxTemp WHERE [RptBillTemplateFinal].SalId=BillPrintTaxTemp.[SalId] AND [RptBillTemplateFinal].[Product Code]=BillPrintTaxTemp.[PrdCode]      
  AND [RptBillTemplateFinal].[Batch Code] =BillPrintTaxTemp.[BatchCode]'      
  EXEC (@SSQL1)      
 END      
 IF Exists(SELECT Name FROM dbo.sysColumns where id = object_id(N'RptBillTemplateFinal') and name='Tax 2')      
 BEGIN      
  SET @SSQL1='UPDATE [RptBillTemplateFinal] SET [RptBillTemplateFinal].[Tax 2]=BillPrintTaxTemp.[Tax2Perc],[RptBillTemplateFinal].[Tax Amount2]=BillPrintTaxTemp.[Tax2Amount]      
  FROM BillPrintTaxTemp WHERE [RptBillTemplateFinal].SalId=BillPrintTaxTemp.[SalId] AND [RptBillTemplateFinal].[Product Code]=BillPrintTaxTemp.[PrdCode]      
  AND [RptBillTemplateFinal].[Batch Code] =BillPrintTaxTemp.[BatchCode]'      
  EXEC (@SSQL1)      
 END      
 IF Exists(SELECT Name FROM dbo.sysColumns where id = object_id(N'RptBillTemplateFinal') and name='Tax Amount2')      
 BEGIN      
  SET @SSQL1='UPDATE [RptBillTemplateFinal] SET [RptBillTemplateFinal].[Tax Amount2]=BillPrintTaxTemp.[Tax2Amount]      
  FROM BillPrintTaxTemp WHERE [RptBillTemplateFinal].SalId=BillPrintTaxTemp.[SalId] AND [RptBillTemplateFinal].[Product Code]=BillPrintTaxTemp.[PrdCode]      
  AND [RptBillTemplateFinal].[Batch Code] =BillPrintTaxTemp.[BatchCode]'      
  EXEC (@SSQL1)      
 END      
 IF Exists(SELECT Name FROM dbo.sysColumns where id = object_id(N'RptBillTemplateFinal') and name='Tax 3')      
 BEGIN      
  SET @SSQL1='UPDATE [RptBillTemplateFinal] SET [RptBillTemplateFinal].[Tax 3]=BillPrintTaxTemp.[Tax3Perc]      
FROM BillPrintTaxTemp WHERE [RptBillTemplateFinal].SalId=BillPrintTaxTemp.[SalId] AND [RptBillTemplateFinal].[Product Code]=BillPrintTaxTemp.[PrdCode]      
  AND [RptBillTemplateFinal].[Batch Code] =BillPrintTaxTemp.[BatchCode]'      
  EXEC (@SSQL1)      
 END      
 IF Exists(SELECT Name FROM dbo.sysColumns where id = object_id(N'RptBillTemplateFinal') and name='Tax Amount3')      
 BEGIN      
  SET @SSQL1='UPDATE [RptBillTemplateFinal] SET [RptBillTemplateFinal].[Tax Amount3] =BillPrintTaxTemp.[Tax3Amount]      
  FROM BillPrintTaxTemp WHERE [RptBillTemplateFinal].SalId=BillPrintTaxTemp.[SalId] AND [RptBillTemplateFinal].[Product Code]=BillPrintTaxTemp.[PrdCode]      
  AND [RptBillTemplateFinal].[Batch Code] =BillPrintTaxTemp.[BatchCode]'      
  EXEC (@SSQL1)      
 END      
 IF Exists(SELECT Name FROM dbo.sysColumns where id = object_id(N'RptBillTemplateFinal') and name='Tax 4')      
 BEGIN      
  SET @SSQL1='UPDATE [RptBillTemplateFinal] SET [RptBillTemplateFinal].[Tax 4]=BillPrintTaxTemp.[Tax4Perc],[RptBillTemplateFinal].[Tax Amount4]=BillPrintTaxTemp.[Tax4Amount]      
  FROM BillPrintTaxTemp WHERE [RptBillTemplateFinal].SalId=BillPrintTaxTemp.[SalId] AND [RptBillTemplateFinal].[Product Code]=BillPrintTaxTemp.[PrdCode]      
  AND [RptBillTemplateFinal].[Batch Code] =BillPrintTaxTemp.[BatchCode]'      
  EXEC (@SSQL1)      
 END      
 IF Exists(SELECT Name FROM dbo.sysColumns where id = object_id(N'RptBillTemplateFinal') and name='Tax Amount4')      
 BEGIN      
  SET @SSQL1='UPDATE [RptBillTemplateFinal] SET [RptBillTemplateFinal].[Tax Amount4]=BillPrintTaxTemp.[Tax4Amount]      
  FROM BillPrintTaxTemp WHERE [RptBillTemplateFinal].SalId=BillPrintTaxTemp.[SalId] AND [RptBillTemplateFinal].[Product Code]=BillPrintTaxTemp.[PrdCode]      
  AND [RptBillTemplateFinal].[Batch Code] =BillPrintTaxTemp.[BatchCode]'      
  EXEC (@SSQL1)      
 END      
 IF Exists(SELECT Name FROM dbo.sysColumns where id = object_id(N'RptBillTemplateFinal') and name='Tax 5')      
 BEGIN      
  SET @SSQL1='UPDATE [RptBillTemplateFinal] SET [RptBillTemplateFinal].[Tax 5]=BillPrintTaxTemp.[Tax5Perc],[RptBillTemplateFinal].[Tax Amount5]=BillPrintTaxTemp.[Tax5Amount]      
  FROM BillPrintTaxTemp WHERE [RptBillTemplateFinal].SalId=BillPrintTaxTemp.[SalId] AND [RptBillTemplateFinal].[Product Code]=BillPrintTaxTemp.[PrdCode]      
  AND [RptBillTemplateFinal].[Batch Code] =BillPrintTaxTemp.[BatchCode]'      
  EXEC (@SSQL1)      
 END      
 IF Exists(SELECT Name FROM dbo.sysColumns where id = object_id(N'RptBillTemplateFinal') and name='Tax Amount5')      
 BEGIN      
  SET @SSQL1='UPDATE [RptBillTemplateFinal] SET [RptBillTemplateFinal].[Tax Amount5]=BillPrintTaxTemp.[Tax5Amount]      
  FROM BillPrintTaxTemp WHERE [RptBillTemplateFinal].SalId=BillPrintTaxTemp.[SalId] AND [RptBillTemplateFinal].[Product Code]=BillPrintTaxTemp.[PrdCode]      
  AND [RptBillTemplateFinal].[Batch Code] =BillPrintTaxTemp.[BatchCode]'      
  EXEC (@SSQL1)  
 END      
 --Till Here      
 --- Sl No added  ---      
 IF Exists(SELECT Name FROM dbo.sysColumns where id = object_id(N'RptBillTemplateFinal') and name='Product SL No')      
 BEGIN      
  SET @SSQL1='UPDATE [RptBillTemplateFinal] SET [RptBillTemplateFinal].[Product SL No]=SalesInvoiceProduct.[SlNo]      
  FROM SalesInvoiceProduct,Product,ProductBatch WHERE [RptBillTemplateFinal].SalId=SalesInvoiceProduct.[SalId] AND [RptBillTemplateFinal].[Product Code]=Product.[PrdCCode]      
  AND Product.Prdid=SalesInvoiceProduct.prdid      
  And ProductBatch.Prdid=Product.Prdid and ProductBatch.PrdBatid=SalesInvoiceProduct.PrdBatId      
  AND [RptBillTemplateFinal].[Batch Code] =ProductBatch.[PrdBatCode]'      
  EXEC (@SSQL1)      
 END       
 --- End Sl No      
 --->Added By Nanda on 2011/02/24 for Henkel      
 if not exists (Select Id,name from Syscolumns where name = 'Product Weight' and id in (Select id from       
  Sysobjects where name ='RptBillTemplateFinal'))      
 begin      
  ALTER TABLE [dbo].[RptBillTemplateFinal]      
  ADD [Product Weight] NUMERIC(38,6) NULL DEFAULT 0 WITH VALUES      
 END      
 if not exists (Select Id,name from Syscolumns where name = 'Product UPC' and id in (Select id from       
  Sysobjects where name ='RptBillTemplateFinal'))      
 begin      
  ALTER TABLE [dbo].[RptBillTemplateFinal]      
  ADD [Product UPC] NUMERIC(38,6) NULL DEFAULT 0 WITH VALUES      
 END      
  IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND b.name='GSTTIN')      
 BEGIN      
  ALTER TABLE RptBillTemplateFinal ADD GSTTIN VARCHAR(50) DEFAULT '' WITH VALUES      
 END      
 IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='PAN Number')      
 BEGIN      
  ALTER TABLE RptBillTemplateFinal ADD [Pan Number] VARCHAR(50) DEFAULT '' WITH VALUES      
 END      
 IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='Retailer Type')      
 BEGIN      
  ALTER TABLE RptBillTemplateFinal ADD [Retailer Type] VARCHAR(50) DEFAULT '' WITH VALUES      
 END      
 IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND b.name='Composite')      
 BEGIN      
  ALTER TABLE RptBillTemplateFinal ADD Composite VARCHAR(50) DEFAULT '' WITH VALUES      
 END      
 IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND b.name='RelatedParty')      
 BEGIN      
  ALTER TABLE RptBillTemplateFinal ADD RelatedParty VARCHAR(50) DEFAULT '' WITH VALUES      
 END      
 IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='State Name')      
 BEGIN      
  ALTER TABLE RptBillTemplateFinal ADD [State Name] VARCHAR(50) DEFAULT '' WITH VALUES      
 END      
 IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='State Code')      
 BEGIN      
  ALTER TABLE RptBillTemplateFinal ADD [State Code] VARCHAR(10) DEFAULT '' WITH VALUES      
 END      
 IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='StateTinNo')      
 BEGIN      
  ALTER TABLE RptBillTemplateFinal ADD [StateTinNo] VARCHAR(10) DEFAULT '' WITH VALUES      
 END      
 IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND b.name='HSNCode')      
 BEGIN      
  ALTER TABLE RptBillTemplateFinal ADD HSNCode VARCHAR(100) DEFAULT '' WITH VALUES      
 END      
 IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND b.name='HSNDescription')      
 BEGIN      
  ALTER TABLE RptBillTemplateFinal ADD HSNDescription VARCHAR(100) DEFAULT '' WITH VALUES      
 END      
 IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='DistributorGstTin')      
 BEGIN      
  ALTER TABLE RptBillTemplateFinal ADD DistributorGstTin VARCHAR(50) DEFAULT '' WITH VALUES      
 END      
 IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='DistributorStateName')      
 BEGIN      
  ALTER TABLE RptBillTemplateFinal ADD DistributorStateName VARCHAR(50) DEFAULT '' WITH VALUES      
 END      
 IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='Distributor Type')      
 BEGIN      
  ALTER TABLE RptBillTemplateFinal ADD [Distributor Type] VARCHAR(50) DEFAULT '' WITH VALUES      
 END      
 IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='AadharNo')      
 BEGIN      
  ALTER TABLE RptBillTemplateFinal ADD AadharNo VARCHAR(50) DEFAULT '' WITH VALUES      
 END      
 IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='DistributorStateCode')      
 BEGIN      
  ALTER TABLE RptBillTemplateFinal ADD DistributorStateCode VARCHAR(10) DEFAULT '' WITH VALUES      
 END      
 IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='DistributorStateTinNo')      
 BEGIN      
  ALTER TABLE RptBillTemplateFinal ADD DistributorStateTinNo VARCHAR(10) DEFAULT '' WITH VALUES      
 END        
 IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='Dist Food Lic No')      
 BEGIN      
  ALTER TABLE RptBillTemplateFinal ADD [Dist Food Lic No] VARCHAR(50) DEFAULT '' WITH VALUES      
 END      
 IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='Dist Drug Lic no')      
 BEGIN      
  ALTER TABLE RptBillTemplateFinal ADD [Dist Drug Lic no] VARCHAR(50) DEFAULT '' WITH VALUES      
 END      
 IF NOT EXISTS(SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='SalesInvoice NetAmount Actual')      
 BEGIN      
  ALTER  TABLE RptBillTemplateFinal ADD [SalesInvoice NetAmount Actual] Numeric(18,2)      
 END      
 IF Exists(SELECT Name FROM dbo.sysColumns where id = object_id(N'RptBillTemplateFinal') and name='Product Weight')      
 BEGIN      
  SET @SSQL1='UPDATE Rpt SET Rpt.[Product Weight]=P.PrdWgt*(CASE P.PrdUnitId WHEN 2 THEN Rpt.[Base Qty]/1000 ELSE Rpt.[Base Qty] END)      
  FROM Product P,RptBillTemplateFinal Rpt WHERE P.PrdCCode=Rpt.[Product Code] AND P.PrdUnitId IN (2,3)'      
  EXEC (@SSQL1)      
 END      
 IF Exists(SELECT Name FROM dbo.sysColumns where id = object_id(N'RptBillTemplateFinal') and name='Product UPC')      
 BEGIN      
  SET @SSQL1='UPDATE Rpt SET Rpt.[Product UPC]=Rpt.[Base Qty]/P.ConversionFactor       
     FROM       
     (      
      SELECT P.PrdId,P.PrdCCode,MAX(U.ConversionFactor)AS ConversionFactor FROM Product P,UOMGroup U      
      WHERE P.UOMGroupId=U.UOMGroupId      
      GROUP BY P.PrdId,P.PrdCCode      
     ) P,RptBillTemplateFinal Rpt WHERE P.PrdCCode=Rpt.[Product Code]'      
  EXEC (@SSQL1)      
 END      
 --->Till Here      
 --Check for Report Data      
 Delete From RptDataCount Where RptId = @Pi_RptId AND UserId = @Pi_UsrId      
 INSERT INTO RptDataCount (RptId,RecCount,ErrNo,UserId)      
 SELECT @Pi_RptId,Count(*) as RecCount,@ErrNo,@Pi_UsrId FROM RptBillTemplateFinal      
 -- Till Here      
 Delete From RptBillTemplate_Tax Where UsrId = @Pi_UsrId      
 Delete From RptBillTemplate_Other Where UsrId = @Pi_UsrId      
 Delete From RptBillTemplate_Replacement Where UsrId = @Pi_UsrId      
 Delete From RptBillTemplate_CrDbAdjustment Where UsrId = @Pi_UsrId      
 Delete From RptBillTemplate_MarketReturn Where UsrId = @Pi_UsrId      
 Delete From RptBillTemplate_SampleIssue Where UsrId = @Pi_UsrId      
 Delete From RptBillTemplate_Scheme Where UsrId = @Pi_UsrId      
 Delete From RptBillTemplate_PrdUOMDetails Where UsrId = @Pi_UsrId      
 ---------------------------------TAX (SubReport)      
-- Select @Sub_Val = TaxDt  FROM BillTemplateHD WHERE TempName=substring(@Pi_BTTblName,18,len(@Pi_BTTblName))      
-- If @Sub_Val = 1      
-- Begin      
        DELETE FROM RptBillTemplate_Tax WHERE UsrId = @Pi_UsrId          
  Insert into RptBillTemplate_Tax(SalId,SalInvNo,PrdSlNo,TaxId,TaxCode,TaxName,TaxPerc,TaxableAmount,TaxAmount,UsrId)      
  SELECT SI.SalId,S.SalInvNo,0,SI.TaxId,TaxCode,TaxName,TaxPerc,SUM(TaxableAmount),SUM(TaxAmount),@Pi_UsrId      
  FROM SalesInvoiceProductTax SI , TaxConfiguration T,SalesInvoice S,RptBillToPrint B      
  WHERE SI.TaxId = T.TaxId and SI.SalId = S.SalId and S.SalInvNo = B.[Bill Number] and B.UsrId = @Pi_UsrId      
  GROUP BY SI.SalId,S.SalInvNo,SI.TaxId,TaxCode,TaxName,TaxPerc HAVING SUM(TaxableAmount) > 0 --Muthuvel      
-- End      
 ------------------------------ Other      
 --Select @Sub_Val = OtherCharges FROM BillTemplateHD WHERE TempName=substring(@Pi_BTTblName,18,len(@Pi_BTTblName))      
 --If @Sub_Val = 1      
 --Begin      
  Delete From RptBillTemplate_Other Where UsrId = @Pi_UsrId      
  Insert into RptBillTemplate_Other(SalId,SalInvNo,AccDescId,Description,Effect,Amount,UsrId)      
  SELECT SI.SalId,S.SalInvNo,      
  SI.AccDescId,P.Description,Case P.Effect When 0 Then 'Add' else 'Reduce' End Effect,      
  Adjamt Amount,@Pi_UsrId      
  FROM SalInvOtherAdj SI,PurSalAccConfig P,SalesInvoice S,RptBillToPrint B      
  WHERE P.TransactionId = 2      
  and SI.AccDescId = P.AccDescId      
  and SI.SalId = S.SalId      
  and S.SalInvNo = B.[Bill Number]      
 --End      
 ---------------------------------------Replacement      
 --Select @Sub_Val = Replacement FROM BillTemplateHD WHERE TempName=substring(@Pi_BTTblName,18,len(@Pi_BTTblName))      
 --If @Sub_Val = 1      
 --Begin      
  Delete From RptBillTemplate_Replacement Where UsrId = @Pi_UsrId      
  Insert into RptBillTemplate_Replacement(SalId,SalInvNo,RepRefNo,PrdId,PrdName,PrdBatId,PrdBatCode,Qty,Rate,Tax,Amount,UsrId)      
  SELECT H.SalId,SI.SalInvNo,H.RepRefNo,D.PrdId,P.PrdName,D.PrdBatId,PB.PrdBatCode,RepQty,SelRte,Tax,RepAmount,@Pi_UsrId      
  FROM ReplacementHd H, ReplacementOut D, Product P, ProductBatch PB,SalesInvoice SI,RptBillToPrint B      
  WHERE H.SalId <> 0      
  and H.RepRefNo = D.RepRefNo      
  and D.PrdId = P.PrdId      
  and D.PrdBatId = PB.PrdBatId      
  and H.SalId = SI.SalId      
  and SI.SalInvNo = B.[Bill Number]      
 --End      
 ----------------------------------Credit Debit Adjus      
 --Select @Sub_Val = CrDbAdj  FROM BillTemplateHD WHERE TempName=substring(@Pi_BTTblName,18,len(@Pi_BTTblName))      
 --If @Sub_Val = 1      
 --Begin      
     Delete From RptBillTemplate_CrDbAdjustment Where UsrId = @Pi_UsrId      
  Insert into RptBillTemplate_CrDbAdjustment(SalId,SalInvNo,NoteNumber,Amount,UsrId)      
  Select A.SalId,S.SalInvNo,CrNoteNumber,A.CrAdjAmount,@Pi_UsrId      
  from SalInvCrNoteAdj A,SalesInvoice S,RptBillToPrint B      
  Where A.SalId = s.SalId      
  and S.SalInvNo = B.[Bill Number]      
  Union All      
  Select A.SalId,S.SalInvNo,DbNoteNumber,A.DbAdjAmount,@Pi_UsrId      
  from SalInvDbNoteAdj A,SalesInvoice S,RptBillToPrint B      
  Where A.SalId = s.SalId      
  and S.SalInvNo = B.[Bill Number]      
 --End      
 ---------------------------------------Market Return      
-- Select @Sub_Val = MarketRet FROM BillTemplateHD WHERE TempName=substring(@Pi_BTTblName,18,len(@Pi_BTTblName))      
-- If @Sub_Val = 1      
-- Begin      
  Delete from RptBillTemplate_MarketReturn where UsrId = @Pi_UsrId      
  Insert into RptBillTemplate_MarketReturn(Type,SalId,SalInvNo,PrdId,PrdName,PrdBatId,PrdBatCode,Qty,Amount,UsrId)      
  Select 'Market Return' Type ,H.SalId,S.SalInvNo,D.PrdId,P.PrdName,      
  D.PrdBatId,PB.PrdBatCode,BaseQty,PrdNetAmt,@Pi_UsrId      
  From ReturnHeader H,ReturnProduct D,Product P,ProductBatch PB,SalesInvoice S,RptBillToPrint B      
  Where returntype = 1      
  and H.ReturnID = D.ReturnID      
  and D.PrdId = P.PrdId      
  and D.PrdBatId = PB.PrdBatId      
  and H.SalId = S.SalId      
  and S.SalInvNo = B.[Bill Number]      
  Union ALL      
  Select 'Market Return Free Product' Type,D.SalId,S.SalInvNo,D.PrdId,P.PrdName,      
  D.PrdBatId,PB.PrdBatCode,D.BaseQty,GrossAmount,@Pi_UsrId      
  From ReturnPrdHdForScheme D,Product P,ProductBatch PB,SalesInvoice S,RptBillToPrint B,ReturnHeader H,ReturnProduct T      
  WHERE returntype = 1 AND      
  D.PrdId = P.PrdId      
  and D.PrdBatId = PB.PrdBatId      
  and H.SalId = T.SalId      
  and H.ReturnID = T.ReturnID      
  and S.SalInvNo = B.[Bill Number]      
-- End      
 ------------------------------ SampleIssue      
 Select @Sub_Val = SampleIssue FROM BillTemplateHD WHERE TempName=substring(@Pi_BTTblName,18,len(@Pi_BTTblName))      
 If @Sub_Val = 1      
 Begin      
  Insert into RptBillTemplate_SampleIssue(SalId,SalInvNo,SchId,SchCode,SchName,PrdId,PrdCCode,CmpId,CmpCode,      
  CmpName,PrdDCode,PrdShrtName,PrdBatId,PrdBatCode,UomId,UomCode,Qty,TobeReturned,DueDate,UsrId)      
  SELECT A.SalId,C.SalInvNo,D.SchId,D.SchCode,D.SchDsc,B.PrdId,      
  E.PrdCCode,E.CmpId,F.CmpCode,F.CmpName,E.PrdDCode,E.PrdShrtName,B.PrdBatId,G.PrdBatCode,      
  B.IssueUomID,H.UomCode,B.IssueQty,CASE B.TobeReturned WHEN 0 THEN 'No' ELSE 'Yes' END AS TobeReturned,      
  B.DueDate,@Pi_UsrId      
  FROM SampleIssueHd A WITH (NOLOCK)      
  INNER JOIN SampleIssueDt B WITH(NOLOCK)ON A.IssueId=B.IssueID      
  INNER JOIN SalesInvoice C WITH(NOLOCK)ON A.SalId=C.SalId      
  INNER JOIN SampleSchemeMaster D WITH(NOLOCK)ON B.SchId=D.SchId      
  INNER JOIN Product E WITH (NOLOCK) ON B.PrdID=E.PrdId      
  INNER JOIN Company F WITH (NOLOCK) ON E.CmpId=F.CmpId      
  INNER JOIN ProductBatch G WITH (NOLOCK) ON E.PrdID=G.PrdID AND B.PrdBatId=G.PrdBatId      
  INNER JOIN UOMMaster H WITH (NOLOCK) ON B.IssueUomID=H.UomID      
  INNER JOIN RptBillToPrint I WITH (NOLOCK) ON C.SalInvNo=I.[Bill Number]      
 End      
 --->Added By Nanda on 10/03/2010      
 ------------------------------ Scheme      
 Select @Sub_Val = [Scheme] FROM BillTemplateHD WHERE TempName=SUBSTRING(@Pi_BTTblName,18,LEN(@Pi_BTTblName))      
 If @Sub_Val = 1      
 Begin      
  INSERT INTO RptBillTemplate_Scheme(SalId,SalInvNo,SchId,SchType,CmpSchCode,SchCode,SchName,PrdId,PrdCCode,PrdDCode,      
  PrdShrtName,PrdName,PrdBatId,PrdBatCode,Qty,Rate,SchemeValueInAmt,SchemeValueInPoints,SalInvSchemeValue,SchemeCumulativePoints,UsrId)      
  SELECT SI.SalId,SI.SalInvNo,SISL.SchId,(CASE SM.SchType WHEN 1 THEN 'Quantity' WHEN 2 THEN 'Amount' WHEN 3 THEN 'Weight'      
  WHEN 4 THEN 'Window Display' END),SM.CmpSchCode,SM.SchCode,SM.SchDsc,0,'','','','',      
  0,'',0,0,SUM(SISL.DiscountPerAmount+SISL.FlatAmount),0,0,0,@Pi_UsrId      
  FROM SalesInvoice SI,SalesInvoiceSchemeLineWise SISL,SchemeMaster SM,RptBillToPrint RBT      
  WHERE SISL.SchId=SM.SchId AND SI.SalId=SISL.SalId AND RBT.[Bill Number]=SI.SalInvNo      
  GROUP BY SI.SalId,SI.SalInvNo,SISL.SchId,SM.SchType,SM.CmpSchCode,SM.SchCode,SM.SchDsc      
  HAVING SUM(SISL.DiscountPerAmount+SISL.FlatAmount)>0      
  INSERT INTO RptBillTemplate_Scheme(SalId,SalInvNo,SchId,SchType,CmpSchCode,SchCode,SchName,PrdId,PrdCCode,PrdDCode,      
  PrdShrtName,PrdName,PrdBatId,PrdBatCode,Qty,Rate,SchemeValueInAmt,SchemeValueInPoints,SalInvSchemeValue,SchemeCumulativePoints,UsrId)      
  SELECT SI.SalId,SI.SalInvNo,SISFP.SchId,(CASE SM.SchType WHEN 1 THEN 'Quantity' WHEN 2 THEN 'Amount' WHEN 3 THEN 'Weight'      
  WHEN 4 THEN 'Window Display' END),SM.CmpSchCode,SM.SchCode,SM.SchDsc,SISFP.FreePrdId,P.PrdCCode,P.PrdDCode,P.PrdShrtName,P.PrdName,      
  SISFP.FreePrdBatId,PB.PrdBatCode,SISFP.FreeQty,PBD.PrdBatDetailValue,SISFP.FreeQty*PBD.PrdBatDetailValue,0,0,0,@Pi_UsrId      
  FROM SalesInvoice SI,SalesInvoiceSchemeDtFreePrd SISFP,SchemeMaster SM,RptBillToPrint RBT,Product P,ProductBatch PB,      
  ProductBatchDetails PBD,BatchCreation BC      
  WHERE SISFP.SchId=SM.SchId AND SI.SalId=SISFP.SalId AND RBT.[Bill Number]=SI.SalInvNo      
  AND SISFP.FreePrdId=P.PrdId AND SISFP.FreePrdBatId=PB.PrdBatId AND PB.PrdBatId=PBD.PrdBatId AND      
  PBD.DefaultPrice=1 AND PBD.BatchSeqId=BC.BatchSeqId AND BC.SlNo=PBD.SlNo AND BC.SelRte=1      
  INSERT INTO RptBillTemplate_Scheme(SalId,SalInvNo,SchId,SchType,CmpSchCode,SchCode,SchName,PrdId,PrdCCode,PrdDCode,      
  PrdShrtName,PrdName,PrdBatId,PrdBatCode,Qty,Rate,SchemeValueInAmt,SchemeValueInPoints,SalInvSchemeValue,SchemeCumulativePoints,UsrId)      
  SELECT SI.SalId,SI.SalInvNo,SISFP.SchId,(CASE SM.SchType WHEN 1 THEN 'Quantity' WHEN 2 THEN 'Amount' WHEN 3 THEN 'Weight'      
  WHEN 4 THEN 'Window Display' END),SM.CmpSchCode,SM.SchCode,SM.SchDsc,SISFP.GiftPrdId,P.PrdCCode,P.PrdDCode,P.PrdShrtName,P.PrdName,      
  SISFP.GiftPrdBatId,PB.PrdBatCode,SISFP.GiftQty,PBD.PrdBatDetailValue,SISFP.GiftQty*PBD.PrdBatDetailValue,0,0,0,@Pi_UsrId      
  FROM SalesInvoice SI,SalesInvoiceSchemeDtFreePrd SISFP,SchemeMaster SM,RptBillToPrint RBT,Product P,ProductBatch PB,      
  ProductBatchDetails PBD,BatchCreation BC      
  WHERE SISFP.SchId=SM.SchId AND SI.SalId=SISFP.SalId AND RBT.[Bill Number]=SI.SalInvNo      
  AND SISFP.GiftPrdId=P.PrdId AND SISFP.GiftPrdBatId=PB.PrdBatId AND PB.PrdBatId=PBD.PrdBatId AND      
  PBD.DefaultPrice=1 AND PBD.BatchSeqId=BC.BatchSeqId AND BC.SlNo=PBD.SlNo AND BC.SelRte=1      
  INSERT INTO RptBillTemplate_Scheme(SalId,SalInvNo,SchId,SchType,CmpSchCode,SchCode,SchName,PrdId,PrdCCode,PrdDCode,      
  PrdShrtName,PrdName,PrdBatId,PrdBatCode,Qty,Rate,SchemeValueInAmt,SchemeValueInPoints,SalInvSchemeValue,SchemeCumulativePoints,UsrId)      
  SELECT SI.SalId,SI.SalInvNo,SIWD.SchId,(CASE SM.SchType WHEN 1 THEN 'Quantity' WHEN 2 THEN 'Amount' WHEN 3 THEN 'Weight'      
  WHEN 4 THEN 'Window Display' END),SM.CmpSchCode,SM.SchCode,SM.SchDsc,0,'','','','',      
  0,'',0,0,SUM(SIWD.AdjAmt),0,0,0,@Pi_UsrId      
  FROM SalesInvoice SI,SalesInvoiceWindowDisplay SIWD,SchemeMaster SM,RptBillToPrint RBT      
  WHERE SIWD.SchId=SM.SchId AND SI.SalId=SIWD.SalId AND RBT.[Bill Number]=SI.SalInvNo      
  GROUP BY SI.SalId,SI.SalInvNo,SIWD.SchId,SM.SchType,SM.CmpSchCode,SM.SchCode,SM.SchDsc      
  UPDATE RPT SET SalInvSchemeValue=A.SalInvSchemeValue      
  FROM RptBillTemplate_Scheme RPT,(SELECT SalId,SUM(SchemeValueInAmt) AS SalInvSchemeValue FROM RptBillTemplate_Scheme GROUP BY SalId)A      
  WHERE A.SAlId=RPT.SalId      
  --->Added By Jay on 09/12/2010      
  INSERT INTO RptBillTemplate_Scheme(SalId,SalInvNo,SchId,SchType,CmpSchCode,SchCode,SchName,PrdId,PrdCCode,PrdDCode,      
  PrdShrtName,PrdName,PrdBatId,PrdBatCode,Qty,Rate,SchemeValueInAmt,SchemeValueInPoints,SalInvSchemeValue,SchemeCumulativePoints,UsrId)      
  SELECT SI.SalId,SI.SalInvNo,SISFP.SchId,(CASE SM.SchType WHEN 1 THEN 'Quantity' WHEN 2 THEN 'Amount' WHEN 3 THEN 'Weight'      
  WHEN 4 THEN 'Window Display' END),SM.CmpSchCode,SM.SchCode,SM.SchDsc,SISFP.PrdId,P.PrdCCode,P.PrdDCode,P.PrdShrtName,P.PrdName,      
  SISFP.PrdBatId,PB.PrdBatCode,0,PBD.PrdBatDetailValue,0,SUM(Points),0,0,@Pi_UsrId      
  FROM SalesInvoice SI,SalesInvoiceSchemeDtPoints SISFP,SchemeMaster SM,      
  RptBillToPrint RBT,Product P,ProductBatch PB,ProductBatchDetails PBD,BatchCreation BC      
  WHERE SI.SalId=SISFP.SalId AND SISFP.SchId=SM.SchId AND RBT.[Bill Number]=SI.SalInvNo      
  AND SISFP.PrdId=P.PrdId AND SISFP.PrdBatId=PB.PrdBatId AND RBT.UsrId=@Pi_UsrId      
  AND PB.PrdBatId=PBD.PrdBatId AND PBD.DefaultPrice=1 AND PBD.BatchSeqId=BC.BatchSeqId AND BC.SlNo=PBD.SlNo AND BC.SelRte=1 AND LEN(SISFP.ReDimRefId)=0        
  GROUP BY SI.SalId,SI.SalInvNo,SISFP.SchId,SM.SchType,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SISFP.PrdId,P.PrdCCode,P.PrdDCode,P.PrdShrtName,      
  P.PrdName,SISFP.PrdBatId,PB.PrdBatCode,PBD.PrdBatDetailValue      
  --->Till Here      
  --->Added By Nanda on 22/12/2010       
  UPDATE R SET SchemeCumulativePoints=A.CumulativePoints      
  FROM RptBillTemplate_Scheme R,SalesInvoice SI,      
  (SELECT SI.RtrId,SISP.SchId,SUM(SISP.Points-SISP.ReturnPoints) AS CumulativePoints      
  FROM SalesInvoiceSchemeDtPoints SISP      
  INNER JOIN SalesInvoice SI ON SI.SalId=SISP.SalId AND SI.DlvSts<>3      
  --INNER JOIN RptBillToPrint R ON R.[Bill Number]=SI.SalInvNo      
  GROUP BY SI.RtrId,SISP.SchId) A      
  WHERE R.SalId=SI.SalId AND A.RtrId=SI.RtrId      
  --->Till Here        
 End      
 --->Till Here       
 --->Added By Nanda on 14/03/2011      
 ------------------------------ Prd UOM Details      
 --INSERT INTO RptBillTemplate_PrdUOMDetails(SalId,SalInvNo,TotPrdVolume,TotPrdKG,TotPrdLtrs,TotPrdUnits,      
 --TotPrdDrums,TotPrdCartons,TotPrdBuckets,TotPrdPieces,TotPrdBags,UsrId)       
 --SELECT SalId,SalInvNo,SUM(TotPrdVolume) AS TotPrdVolume,SUM(TotPrdKG) AS TotPrdKG,SUM(TotPrdLtrs) AS TotPrdLtrs,SUM(TotPrdUnits) AS TotPrdUnits,      
 --SUM(TotPrdDrums) AS TotPrdDrums,SUM(TotPrdCartons) AS TotPrdCartons,SUM(TotPrdBuckets) AS TotPrdBuckets,SUM(TotPrdPieces) AS TotPrdPieces,SUM(TotPrdBags) AS TotPrdBags,@Pi_UsrId      
 --FROM      
 --(      
 -- SELECT DISTINCT SI.SalId,SI.SalInvNo,SIP.PrdId,SIP.BaseQty*dbo.Fn_ReturnProductVolumeInLtrs(SIP.PrdId) AS TotPrdVolume,      
 -- SIP.BaseQty*P.PrdUpSKU * (CASE P.PrdUnitId WHEN 2 THEN .001 WHEN 3 THEN 1 ELSE 0 END) AS TotPrdKG,      
 -- SIP.BaseQty * P.PrdWgt * (CASE P.PrdUnitId WHEN 4 THEN .001 WHEN 5 THEN 1 ELSE 0 END) AS TotPrdLtrs,      
 -- SIP.BaseQty*(CASE P.PrdUnitId WHEN 1 THEN 0 ELSE 0 END) AS TotPrdUnits,      
 -- (CASE ISNULL(UMP1.UOMId,0) WHEN 0 THEN 0 ELSE ISNULL(SIPP1.UOM1Qty,0) END)+      
 -- (CASE ISNULL(UMP2.UOMId,0) WHEN 0 THEN 0 ELSE ISNULL(SIPP2.UOM2Qty,0) END) AS TotPrdPieces,      
 -- (CASE ISNULL(UMBU1.UOMId,0) WHEN 0 THEN 0 ELSE ISNULL(SIPBU1.UOM1Qty,0) END)+      
 -- (CASE ISNULL(UMBU2.UOMId,0) WHEN 0 THEN 0 ELSE ISNULL(SIPBU2.UOM2Qty,0) END) AS TotPrdBuckets,      
 -- (CASE ISNULL(UMBA1.UOMId,0) WHEN 0 THEN 0 ELSE ISNULL(SIPBA1.UOM1Qty,0) END)+      
 -- (CASE ISNULL(UMBA2.UOMId,0) WHEN 0 THEN 0 ELSE ISNULL(SIPBA2.UOM2Qty,0) END) AS TotPrdBags,      
 -- (CASE ISNULL(UMDR1.UOMId,0) WHEN 0 THEN 0 ELSE ISNULL(SIPDR1.UOM1Qty,0) END)+      
 -- (CASE ISNULL(UMDR2.UOMId,0) WHEN 0 THEN 0 ELSE ISNULL(SIPDR2.UOM2Qty,0) END) AS TotPrdDrums,      
 -- (CASE ISNULL(UMCA1.UOMId,0) WHEN 0 THEN 0 ELSE ISNULL(SIPCA1.UOM1Qty,0) END)+      
 -- (CASE ISNULL(UMCA2.UOMId,0) WHEN 0 THEN 0 ELSE ISNULL(SIPCA2.UOM2Qty,0) END)+       
 -- CEILING((CASE ISNULL(UMCN1.UOMId,0) WHEN 0 THEN 0 ELSE CAST(ISNULL(SIPCN1.UOM1Qty,0) AS NUMERIC(38,6))/CAST(UGC1.ConvFact AS NUMERIC(38,6)) END))+      
 -- CEILING((CASE ISNULL(UMCN2.UOMId,0) WHEN 0 THEN 0 ELSE CAST(ISNULL(SIPCN2.UOM2Qty,0) AS NUMERIC(38,6))/CAST(UGC2.ConvFact AS NUMERIC(38,6)) END)) AS TotPrdCartons      
 -- FROM SalesInvoice SI INNER JOIN SalesInvoiceProduct SIP ON SI.SalId=SIP.SalId      
 -- INNER JOIN RptBillToPrint Rpt ON SI.SalInvNo = Rpt.[Bill Number] AND Rpt.UsrId=@Pi_UsrId      
 -- INNER JOIN Product P ON SIP.PrdID=P.PrdID      
 -- INNER JOIN ProductBatch PB ON SIP.PrdBatID=PB.PrdBatID AND P.PrdID=PB.PrdId      
 -- LEFT OUTER JOIN SalesInvoiceProduct SIPP1 ON SI.SalId=SIPP1.SalId AND SIP.PrdID=SIPP1.PrdID AND SIP.PrdBatID=SIPP1.PrdBatID      
 -- LEFT OUTER JOIN SalesInvoiceProduct SIPP2 ON SI.SalId=SIPP2.SalId AND SIP.PrdID=SIPP2.PrdID AND SIP.PrdBatID=SIPP2.PrdBatID      
 -- LEFT OUTER JOIN SalesInvoiceProduct SIPBU1 ON SI.SalId=SIPBU1.SalId AND SIP.PrdID=SIPBU1.PrdID AND SIP.PrdBatID=SIPBU1.PrdBatID      
 -- LEFT OUTER JOIN SalesInvoiceProduct SIPBU2 ON SI.SalId=SIPBU2.SalId AND SIP.PrdID=SIPBU2.PrdID AND SIP.PrdBatID=SIPBU2.PrdBatID        
 -- LEFT OUTER JOIN SalesInvoiceProduct SIPBA1 ON SI.SalId=SIPBA1.SalId AND SIP.PrdID=SIPBA1.PrdID AND SIP.PrdBatID=SIPBA1.PrdBatID      
 -- LEFT OUTER JOIN SalesInvoiceProduct SIPBA2 ON SI.SalId=SIPBA2.SalId AND SIP.PrdID=SIPBA2.PrdID AND SIP.PrdBatID=SIPBA2.PrdBatID      
 -- LEFT OUTER JOIN SalesInvoiceProduct SIPDR1 ON SI.SalId=SIPDR1.SalId AND SIP.PrdID=SIPDR1.PrdID AND SIP.PrdBatID=SIPDR1.PrdBatID      
 -- LEFT OUTER JOIN SalesInvoiceProduct SIPDR2 ON SI.SalId=SIPDR2.SalId AND SIP.PrdID=SIPDR2.PrdID AND SIP.PrdBatID=SIPDR2.PrdBatID      
 -- LEFT OUTER JOIN SalesInvoiceProduct SIPCA1 ON SI.SalId=SIPCA1.SalId AND SIP.PrdID=SIPCA1.PrdID AND SIP.PrdBatID=SIPCA1.PrdBatID      
 -- LEFT OUTER JOIN SalesInvoiceProduct SIPCA2 ON SI.SalId=SIPCA2.SalId AND SIP.PrdID=SIPCA2.PrdID AND SIP.PrdBatID=SIPCA2.PrdBatID      
 -- LEFT OUTER JOIN SalesInvoiceProduct SIPCN1 ON SI.SalId=SIPCN1.SalId AND SIP.PrdID=SIPCN1.PrdID AND SIP.PrdBatID=SIPCN1.PrdBatID      
 -- LEFT OUTER JOIN SalesInvoiceProduct SIPCN2 ON SI.SalId=SIPCN2.SalId AND SIP.PrdID=SIPCN2.PrdID AND SIP.PrdBatID=SIPCN2.PrdBatID      
 -- LEFT OUTER JOIN UOMMaster UMP1 ON UMP1.UOMId=SIPP1.UOM1Id AND UMP1.UOMDescription='PIECES'      
 -- LEFT OUTER JOIN UOMMaster UMP2 ON UMP1.UOMId=SIPP2.UOM2Id AND UMP2.UOMDescription='PIECES'      
 -- LEFT OUTER JOIN UOMMaster UMBU1 ON UMBU1.UOMId=SIPBU1.UOM1Id AND UMBU1.UOMDescription='BUCKETS'       
 -- LEFT OUTER JOIN UOMMaster UMBU2 ON UMBU1.UOMId=SIPBU2.UOM2Id AND UMBU2.UOMDescription='BUCKETS'      
 -- LEFT OUTER JOIN UOMMaster UMBA1 ON UMBA1.UOMId=SIPBA1.UOM1Id AND UMBA1.UOMDescription='BAGS'       
 -- LEFT OUTER JOIN UOMMaster UMBA2 ON UMBA1.UOMId=SIPBA2.UOM2Id AND UMBA2.UOMDescription='BAGS'      
 -- LEFT OUTER JOIN UOMMaster UMDR1 ON UMDR1.UOMId=SIPDR1.UOM1Id AND UMDR1.UOMDescription='DRUMS'       
 -- LEFT OUTER JOIN UOMMaster UMDR2 ON UMDR1.UOMId=SIPDR2.UOM2Id AND UMDR2.UOMDescription='DRUMS'      
 -- LEFT OUTER JOIN UOMMaster UMCA1 ON UMCA1.UOMId=SIPCA1.UOM1Id AND UMCA1.UOMDescription='CARTONS'       
 -- LEFT OUTER JOIN UOMMaster UMCA2 ON UMCA1.UOMId=SIPCA2.UOM2Id AND UMCA2.UOMDescription='CARTONS'      
 -- LEFT OUTER JOIN UOMMaster UMCN1 ON UMCN1.UOMId=SIPCN1.UOM1Id AND UMCN1.UOMDescription='CANS'       
 -- LEFT OUTER JOIN UOMMaster UMCN2 ON UMCN1.UOMId=SIPCN2.UOM2Id AND UMCN2.UOMDescription='CANS'      
 -- LEFT OUTER JOIN (      
 -- SELECT P.PrdId,MAX(UG.ConversionFactor) AS ConvFact FROM Product P,UOMGroup UG      
 -- WHERE P.UOMGroupId=UG.UOMGroupId AND UG.UOMGroupId IN (       
 -- SELECT UOMGroupId FROM UOMGroup WHERE UOMId IN (SELECT UOMId FROM UOMMAster WHERE UOMDescription LIKE 'CANS') )      
 -- GROUP BY P.PrdID) UGC1 ON SIPCN1.PrdId=UGC1.PrdID      
 -- LEFT OUTER JOIN (      
 -- SELECT P.PrdId,MAX(UG.ConversionFactor) AS ConvFact FROM Product P,UOMGroup UG      
 -- WHERE P.UOMGroupId=UG.UOMGroupId AND UG.UOMGroupId IN (       
 -- SELECT UOMGroupId FROM UOMGroup WHERE UOMId IN (SELECT UOMId FROM UOMMAster WHERE UOMDescription LIKE 'CANS') )      
 -- GROUP BY P.PrdID) UGC2 ON SIPCN2.PrdId=UGC2.PrdID      
 --) A      
 --GROUP BY SalId,SalInvNo      
 --->Till Here      
 --Added By Sathishkumar Veeramani 2012/12/13      
 IF NOT EXISTS (SELECT * FROM Syscolumns WHERE ID IN (SELECT ID FROM Sysobjects WHERE XTYPE = 'U' AND name = 'RptBillTemplateFinal')AND name = 'Payment Mode')      
 BEGIN      
      ALTER TABLE RptBillTemplateFinal ADD [Payment Mode] NVARCHAR(20)      
 END      
 IF Exists(SELECT * FROM Syscolumns WHERE ID IN (SELECT ID FROM Sysobjects WHERE XTYPE = 'U' AND name = 'RptBillTemplateFinal')AND name = 'Payment Mode')          
 BEGIN          
  SET @SSQL1='UPDATE A SET A.[Payment Mode] = Z.[Payment Mode] FROM RptBillTemplateFinal A INNER JOIN       
     (SELECT SalId,(CASE RtrPayMode WHEN 1 THEN ''Cash'' ELSE ''Cheque'' END) AS [Payment Mode] FROM SalesInvoice WITH (NOLOCK)) Z ON A.Salid = Z.SalId       
     AND A.UsrId='+ CAST(@Pi_UsrId AS VARCHAR(10))             
  EXEC (@SSQL1)          
 END      
 --Till Here      
 --->Added By Nanda on 23/03/2010-For Grouping the details based on product for nondrug products      
 IF EXISTS(SELECT * FROM Configuration WHERE ModuleId='BotreeBillPrinting01' AND ModuleName='Botree Bill Printing' AND Status=1)      
 BEGIN      
  IF EXISTS (SELECT * FROM dbo.SysObjects WHERE Id = Object_Id(N'[RptBillTemplateFinal_Group]') AND OBJECTPROPERTY(Id, N'IsUserTable') = 1)      
  DROP TABLE [RptBillTemplateFinal_Group]      
  SELECT * INTO RptBillTemplateFinal_Group FROM RptBillTemplateFinal  WHERE [Visibility]=1
  Select * from RptBillTemplateFinal_Group     
  DELETE FROM RptBillTemplateFinal    
  INSERT INTO RptBillTemplateFinal      
  (      
   [SalId],[Sales Invoice Number],[Product Code],[Product Name],[Product Short Name],[Product SL No],[Product Type],[Scheme Points],      
   [Base Qty],[Batch Code],[Batch Expiry Date],[Batch Manufacturing Date],      
   [Batch MRP],[Batch Selling Rate],[Bill Date],[Bill Doc Ref. Number],[Bill Mode],[Bill Type],      
   [CD Disc Base Qty Amount],[CD Disc Effect Amount],      
   [CD Disc Header Amount],[CD Disc LineUnit Amount],      
   [CD Disc Qty Percentage],[CD Disc Unit Percentage],      
   [CD Disc UOM Amount],[CD Disc UOM Percentage],      
   [DB Disc Base Qty Amount],[DB Disc Effect Amount],      
   [DB Disc Header Amount],[DB Disc LineUnit Amount],      
   [DB Disc Qty Percentage],[DB Disc Unit Percentage],      
   [DB Disc UOM Amount],[DB Disc UOM Percentage],      
   [Line Base Qty Amount],[Line Base Qty Percentage],      
   [Line Effect Amount],[Line Unit Amount],      
   [Line Unit Percentage],[Line UOM1 Amount],[Line UOM1 Percentage],      
   [Manual Free Qty],      
   [Sch Disc Base Qty Amount],[Sch Disc Effect Amount],      
   [Sch Disc Header Amount],[Sch Disc LineUnit Amount],      
   [Sch Disc Qty Percentage],[Sch Disc Unit Percentage],      
   [Sch Disc UOM Amount],[Sch Disc UOM Percentage],      
   [Spl. Disc Base Qty Amount],[Spl. Disc Effect Amount],      
   [Spl. Disc Header Amount],[Spl. Disc LineUnit Amount],      
   [Spl. Disc Qty Percentage],[Spl. Disc Unit Percentage],      
   [Spl. Disc UOM Amount],[Spl. Disc UOM Percentage],      
   [Tax 1],[Tax 2],[Tax 3],[Tax 4],      
   [Tax Amount1],[Tax Amount2],[Tax Amount3],[Tax Amount4],      
   [Tax Amt Base Qty Amount],[Tax Amt Effect Amount],      
   [Tax Amt Header Amount],[Tax Amt LineUnit Amount],      
   [Tax Amt Qty Percentage],[Tax Amt Unit Percentage],      
   [Tax Amt UOM Amount],[Tax Amt UOM Percentage],      
   [Uom 1 Desc],[Uom 1 Qty],[Uom 2 Desc],[Uom 2 Qty],[Vehicle Name],      
   [SalesInvoice ActNetRateAmount],[SalesInvoice CDPer],[SalesInvoice CRAdjAmount],[SalesInvoice DBAdjAmount],[SalesInvoice GrossAmount],      
   [SalesInvoice Line Gross Amount],[SalesInvoice Line Net Amount],      
   [SalesInvoice MarketRetAmount],[SalesInvoice NetAmount],[SalesInvoice NetRateDiffAmount],      
   [SalesInvoice OnAccountAmount],[SalesInvoice OtherCharges],[SalesInvoice RateDiffAmount],[SalesInvoice ReplacementDiffAmount],[SalesInvoice RoundOffAmt],      
   [SalesInvoice TotalAddition],[SalesInvoice TotalDeduction],[SalesInvoice WindowDisplayAmount],[SalesMan Code],[SalesMan Name],      
   [Route Code],[Route Name],      
   [Retailer Address1],[Retailer Address2],[Retailer Address3],[Retailer Code],[Retailer ContactPerson],[Retailer Coverage Mode],      
   [Retailer Credit Bills],[Retailer Credit Days],[Retailer Credit Limit],[Retailer CSTNo],[Retailer Deposit Amount],[Retailer Drug ExpiryDate],      
   [Retailer Drug License No],[Retailer EmailId],[Retailer GeoLevel],[Retailer License ExpiryDate],[Retailer License No],[Retailer Name],      
   [Retailer OffPhone1],[Retailer OffPhone2],[Retailer OnAccount],[Retailer Pestcide ExpiryDate],[Retailer Pestcide LicNo],[Retailer PhoneNo],      
   [Retailer Pin Code],[Retailer ResPhone1],[Retailer ResPhone2],[Retailer Ship Address1],[Retailer Ship Address2],[Retailer Ship Address3],      
   [Retailer ShipId],[Retailer TaxType],[Retailer TINNo],[Retailer Village],[Tax Type],[TIN Number],      
   [Company Address1],[Company Address2],[Company Address3],[Company Code],[Company Contact Person],      
   [Company EmailId],[Company Fax Number],[Company Name],[Company Phone Number],[Contact Person],[CST Number],      
   [DC DATE],[DC NUMBER],[Delivery Boy],[Delivery Date],[Deposit Amount],      
   [Distributor Address1],[Distributor Address2],[Distributor Address3],[Distributor Code],[Distributor Name],      
   [Drug Batch Description],[Drug Licence Number 1],[Drug Licence Number 2],[Drug1 Expiry Date],[Drug2 Expiry Date],      
   [EAN Code],[EmailID],[Geo Level],[Interim Sales],[Licence Number],      
   [LST Number],[Order Date],[Order Number],      
   [Pesticide Expiry Date],[Pesticide Licence Number],[PhoneNo],[PinCode],[Remarks],      
   [UsrId],[Visibility],[Distributor Product Code],[Allotment No],[Bx Selling Rate],[AmtInWrd]      
  )        
  SELECT      
  [SalId],      
  [Sales Invoice Number],      
  [Product Code],[Product Name],[Product Short Name],MIN([Product SL No]) AS [Product SL No],[Product Type],[Scheme Points],      
  SUM([Base Qty]) AS [Base Qty],      
  '' AS [Batch Code],MAX([Batch Expiry Date]) AS [Batch Expiry Date],MIN([Batch Manufacturing Date]) AS [Batch Manufacturing Date],      
  [Batch MRP],[Batch Selling Rate],[Bill Date],[Bill Doc Ref. Number],[Bill Mode],[Bill Type],      
  SUM([CD Disc Base Qty Amount]) AS [CD Disc Base Qty Amount],SUM([CD Disc Effect Amount]) AS [CD Disc Effect Amount],      
  SUM(DISTINCT [CD Disc Header Amount]) AS [CD Disc Header Amount],SUM([CD Disc LineUnit Amount]) AS [CD Disc LineUnit Amount],      
  --SUM([CD Disc Qty Percentage]) AS [CD Disc Qty Percentage],SUM([CD Disc Unit Percentage]) AS [CD Disc Unit Percentage],      
  [CD Disc Qty Percentage],[CD Disc Unit Percentage],      
  SUM([CD Disc UOM Amount]),SUM([CD Disc UOM Percentage]) AS [CD Disc UOM Percentage],      
  SUM([DB Disc Base Qty Amount]) AS [DB Disc Base Qty Amount],SUM([DB Disc Effect Amount]) AS [DB Disc Effect Amount],      
  SUM(DISTINCT [DB Disc Header Amount]) AS [DB Disc Header Amount],SUM([DB Disc LineUnit Amount]) AS [DB Disc LineUnit Amount],      
  --SUM([DB Disc Qty Percentage]) AS [DB Disc Qty Percentage],SUM([DB Disc Unit Percentage]) AS [DB Disc Unit Percentage],      
  [DB Disc Qty Percentage],SUM([DB Disc Unit Percentage]),      
  SUM([DB Disc UOM Amount]) AS [DB Disc UOM Amount],SUM([DB Disc UOM Percentage]) AS [DB Disc UOM Percentage],      
  SUM([Line Base Qty Amount]) AS [Line Base Qty Amount],SUM([Line Base Qty Percentage]) AS [Line Base Qty Percentage],      
  SUM([Line Effect Amount]) AS [Line Effect Amount],      
  --SUM([Line Unit Amount]) AS [Line Unit Amount],      
  [Line Unit Amount],      
  SUM([Line Unit Percentage]) AS [Line Unit Percentage],SUM([Line UOM1 Amount]) AS [Line UOM1 Amount],SUM([Line UOM1 Percentage]) AS [Line UOM1 Percentage],      
  SUM([Manual Free Qty]),      
  SUM([Sch Disc Base Qty Amount]) AS [Sch Disc Base Qty Amount],SUM([Sch Disc Effect Amount]) AS [Sch Disc Effect Amount],      
  SUM(DISTINCT [Sch Disc Header Amount]) AS [Sch Disc Header Amount],SUM([Sch Disc LineUnit Amount]) AS [Sch Disc LineUnit Amount],      
  --SUM([Sch Disc Qty Percentage]) AS [Sch Disc Qty Percentage],SUM([Sch Disc Unit Percentage]) AS [Sch Disc Unit Percentage],      
  [Sch Disc Qty Percentage],[Sch Disc Unit Percentage],      
  SUM([Sch Disc UOM Amount]) AS [Sch Disc UOM Amount],SUM([Sch Disc UOM Percentage]) AS [Sch Disc UOM Percentage],      
  SUM([Spl. Disc Base Qty Amount]) AS [Spl. Disc Base Qty Amount],SUM([Spl. Disc Effect Amount]) AS [Spl. Disc Effect Amount],      
  SUM(DISTINCT [Spl. Disc Header Amount]) AS [Spl. Disc Header Amount],SUM([Spl. Disc LineUnit Amount]) AS [Spl. Disc LineUnit Amount],      
  --SUM([Spl. Disc Qty Percentage]) AS [Spl. Disc Qty Percentage],SUM([Spl. Disc Unit Percentage]) AS [Spl. Disc Unit Percentage],      
  [Spl. Disc Qty Percentage],[Spl. Disc Unit Percentage],      
  SUM([Spl. Disc UOM Amount]) AS [Spl. Disc UOM Amount],SUM([Spl. Disc UOM Percentage]) AS [Spl. Disc UOM Percentage],      
  --SUM([Tax 1]) AS [Tax 1],SUM([Tax 2]) AS [Tax 2],SUM([Tax 3]) AS [Tax 3],SUM([Tax 4]) AS [Tax 4],      
  [Tax 1],[Tax 2],[Tax 3],[Tax 4],      
  SUM([Tax Amount1]) AS [Tax Amount1],SUM([Tax Amount2]) AS [Tax Amount2],SUM([Tax Amount3]) AS [Tax Amount3],SUM([Tax Amount4]) AS [Tax Amount4],      
  SUM([Tax Amt Base Qty Amount]) AS [Tax Amt Base Qty Amount],SUM([Tax Amt Effect Amount]) AS [Tax Amt Effect Amount],      
  SUM(DISTINCT [Tax Amt Header Amount]) AS [Tax Amt Header Amount],SUM([Tax Amt LineUnit Amount]) AS [Tax Amt LineUnit Amount],      
  SUM([Tax Amt Qty Percentage]) AS [Tax Amt Qty Percentage],SUM([Tax Amt Unit Percentage]) AS [Tax Amt Unit Percentage],      
  SUM([Tax Amt UOM Amount]) AS [Tax Amt UOM Amount],SUM([Tax Amt UOM Percentage]) AS [Tax Amt UOM Percentage],      
  '' AS [Uom 1 Desc],SUM([Base Qty]) AS [Uom 1 Qty],'' AS [Uom 2 Desc],0 AS [Uom 2 Qty],[Vehicle Name],      
  [SalesInvoice ActNetRateAmount],[SalesInvoice CDPer],[SalesInvoice CRAdjAmount],[SalesInvoice DBAdjAmount],[SalesInvoice GrossAmount],      
  SUM([SalesInvoice Line Gross Amount]) AS [SalesInvoice Line Gross Amount],SUM([SalesInvoice Line Net Amount]) AS [SalesInvoice Line Net Amount],      
  [SalesInvoice MarketRetAmount],[SalesInvoice NetAmount],[SalesInvoice NetRateDiffAmount],      
  [SalesInvoice OnAccountAmount],[SalesInvoice OtherCharges],[SalesInvoice RateDiffAmount],[SalesInvoice ReplacementDiffAmount],[SalesInvoice RoundOffAmt],      
  [SalesInvoice TotalAddition],[SalesInvoice TotalDeduction],[SalesInvoice WindowDisplayAmount],[SalesMan Code],[SalesMan Name],      
  [Route Code],[Route Name],      
  [Retailer Address1],[Retailer Address2],[Retailer Address3],[Retailer Code],[Retailer ContactPerson],[Retailer Coverage Mode],      
  [Retailer Credit Bills],[Retailer Credit Days],[Retailer Credit Limit],[Retailer CSTNo],[Retailer Deposit Amount],[Retailer Drug ExpiryDate],      
  [Retailer Drug License No],[Retailer EmailId],[Retailer GeoLevel],[Retailer License ExpiryDate],[Retailer License No],[Retailer Name],      
  [Retailer OffPhone1],[Retailer OffPhone2],[Retailer OnAccount],[Retailer Pestcide ExpiryDate],[Retailer Pestcide LicNo],[Retailer PhoneNo],      
  [Retailer Pin Code],[Retailer ResPhone1],[Retailer ResPhone2],[Retailer Ship Address1],[Retailer Ship Address2],[Retailer Ship Address3],      
  [Retailer ShipId],[Retailer TaxType],[Retailer TINNo],[Retailer Village],[Tax Type],[TIN Number],      
  [Company Address1],[Company Address2],[Company Address3],[Company Code],[Company Contact Person],      
  [Company EmailId],[Company Fax Number],[Company Name],[Company Phone Number],[Contact Person],[CST Number],      
  [DC DATE],[DC NUMBER],[Delivery Boy],[Delivery Date],[Deposit Amount],      
  [Distributor Address1],[Distributor Address2],[Distributor Address3],[Distributor Code],[Distributor Name],      
  [Drug Batch Description],[Drug Licence Number 1],[Drug Licence Number 2],[Drug1 Expiry Date],[Drug2 Expiry Date],      
  [EAN Code],[EmailID],[Geo Level],[Interim Sales],[Licence Number],      
  [LST Number],[Order Date],[Order Number],      
  [Pesticide Expiry Date],[Pesticide Licence Number],[PhoneNo],[PinCode],[Remarks],      
  [UsrId],[Visibility],[Distributor Product Code],[Allotment No],[Bx Selling Rate],[AmtInWrd]      
  FROM RptBillTemplateFinal_Group,Product P      
  WHERE P.PrdCCode=RptBillTemplateFinal_Group.[Product Code] AND P.PrdType<>5   AND  [Visibility]=1  
  GROUP BY [Batch MRP],[Batch Selling Rate],[Bill Date],[Bill Doc Ref. Number],[Bill Mode],[Bill Type],      
  [Company Address1],[Company Address2],[Company Address3],[Company Code],[Company Contact Person],      
  [Company EmailId],[Company Fax Number],[Company Name],[Company Phone Number],[Contact Person],[CST Number],      
  [DC DATE],[DC NUMBER],[Delivery Boy],[Delivery Date],[Deposit Amount],      
  [Distributor Address1],[Distributor Address2],[Distributor Address3],[Distributor Code],[Distributor Name],      
  [Drug Batch Description],[Drug Licence Number 1],[Drug Licence Number 2],[Drug1 Expiry Date],[Drug2 Expiry Date],      
  [EAN Code],[EmailID],[Geo Level],[Interim Sales],[Licence Number],      
  [LST Number],      
  [Order Date],[Order Number],      
  [Pesticide Expiry Date],[Pesticide Licence Number],[PhoneNo],[PinCode],      
  [Product Code],[Product Name],[Product Short Name],[Product Type],      
  [Remarks],      
  [Retailer Address1],[Retailer Address2],[Retailer Address3],[Retailer Code],[Retailer ContactPerson],[Retailer Coverage Mode],      
  [Retailer Credit Bills],[Retailer Credit Days],[Retailer Credit Limit],[Retailer CSTNo],[Retailer Deposit Amount],[Retailer Drug ExpiryDate],      
  [Retailer Drug License No],[Retailer EmailId],[Retailer GeoLevel],[Retailer License ExpiryDate],[Retailer License No],[Retailer Name],      
  [Retailer OffPhone1],[Retailer OffPhone2],[Retailer OnAccount],[Retailer Pestcide ExpiryDate],[Retailer Pestcide LicNo],[Retailer PhoneNo],      
  [Retailer Pin Code],[Retailer ResPhone1],[Retailer ResPhone2],[Retailer Ship Address1],[Retailer Ship Address2],[Retailer Ship Address3],      
  [Retailer ShipId],[Retailer TaxType],[Retailer TINNo],[Retailer Village],      
  [Route Code],[Route Name],      
  [Sales Invoice Number],[SalesInvoice ActNetRateAmount],[SalesInvoice CDPer],[SalesInvoice CRAdjAmount],[SalesInvoice DBAdjAmount],[SalesInvoice GrossAmount],      
  [SalesInvoice MarketRetAmount],[SalesInvoice NetAmount],[SalesInvoice NetRateDiffAmount],      
  [SalesInvoice OnAccountAmount],[SalesInvoice OtherCharges],[SalesInvoice RateDiffAmount],[SalesInvoice ReplacementDiffAmount],[SalesInvoice RoundOffAmt],      
  [SalesInvoice TotalAddition],[SalesInvoice TotalDeduction],[SalesInvoice WindowDisplayAmount],[SalesMan Code],[SalesMan Name],      
  [SalId],      
  [Scheme Points],      
  [Tax Type],[TIN Number],      
  [Vehicle Name],[Tax 1],[Tax 2],[Tax 3],[Tax 4],      
  [CD Disc Qty Percentage],[CD Disc Unit Percentage],      
  [DB Disc Qty Percentage],--[DB Disc Unit Percentage],      
  [Line Unit Amount],      
  [Sch Disc Qty Percentage],[Sch Disc Unit Percentage],      
  [Spl. Disc Qty Percentage],[Spl. Disc Unit Percentage],        
  [UsrId],[Visibility],[AmtInWrd] ,
  [Distributor Product Code],[Allotment No],[Bx Selling Rate],[AmtInWrd] ---------------- Group by columns Added by Lakshman M  on 09/01/2018    
  UNION ALL      
  SELECT [SalId],[Sales Invoice Number],[Product Code],[Product Name],[Product Short Name],[Product SL No],[Product Type],[Scheme Points],      
  [Base Qty],[Batch Code],[Batch Expiry Date],[Batch Manufacturing Date],      
  [Batch MRP],[Batch Selling Rate],[Bill Date],[Bill Doc Ref. Number],[Bill Mode],[Bill Type],      
  [CD Disc Base Qty Amount],[CD Disc Effect Amount],      
  [CD Disc Header Amount],[CD Disc LineUnit Amount],      
  [CD Disc Qty Percentage],[CD Disc Unit Percentage],      
  [CD Disc UOM Amount],[CD Disc UOM Percentage],      
  [DB Disc Base Qty Amount],[DB Disc Effect Amount],      
  [DB Disc Header Amount],[DB Disc LineUnit Amount],      
  [DB Disc Qty Percentage],[DB Disc Unit Percentage],      
  [DB Disc UOM Amount],[DB Disc UOM Percentage],      
  [Line Base Qty Amount],[Line Base Qty Percentage],      
  [Line Effect Amount],[Line Unit Amount],      
  [Line Unit Percentage],[Line UOM1 Amount],[Line UOM1 Percentage],      
  [Manual Free Qty],      
  [Sch Disc Base Qty Amount],[Sch Disc Effect Amount],      
  [Sch Disc Header Amount],[Sch Disc LineUnit Amount],      
  [Sch Disc Qty Percentage],[Sch Disc Unit Percentage],      
  [Sch Disc UOM Amount],[Sch Disc UOM Percentage],      
  [Spl. Disc Base Qty Amount],[Spl. Disc Effect Amount],      
  [Spl. Disc Header Amount],[Spl. Disc LineUnit Amount],      
  [Spl. Disc Qty Percentage],[Spl. Disc Unit Percentage],      
  [Spl. Disc UOM Amount],[Spl. Disc UOM Percentage],      
  [Tax 1],[Tax 2],[Tax 3],[Tax 4],      
  [Tax Amount1],[Tax Amount2],[Tax Amount3],[Tax Amount4],      
  [Tax Amt Base Qty Amount],[Tax Amt Effect Amount],      
  [Tax Amt Header Amount],[Tax Amt LineUnit Amount],      
  [Tax Amt Qty Percentage],[Tax Amt Unit Percentage],      
  [Tax Amt UOM Amount],[Tax Amt UOM Percentage],      
  [Uom 1 Desc],[Uom 1 Qty],[Uom 2 Desc],[Uom 2 Qty],[Vehicle Name],      
  [SalesInvoice ActNetRateAmount],[SalesInvoice CDPer],[SalesInvoice CRAdjAmount],[SalesInvoice DBAdjAmount],[SalesInvoice GrossAmount],      
  [SalesInvoice Line Gross Amount],[SalesInvoice Line Net Amount],      
  [SalesInvoice MarketRetAmount],[SalesInvoice NetAmount],[SalesInvoice NetRateDiffAmount],      
  [SalesInvoice OnAccountAmount],[SalesInvoice OtherCharges],[SalesInvoice RateDiffAmount],[SalesInvoice ReplacementDiffAmount],[SalesInvoice RoundOffAmt],      
  [SalesInvoice TotalAddition],[SalesInvoice TotalDeduction],[SalesInvoice WindowDisplayAmount],[SalesMan Code],[SalesMan Name],      
  [Route Code],[Route Name],      
  [Retailer Address1],[Retailer Address2],[Retailer Address3],[Retailer Code],[Retailer ContactPerson],[Retailer Coverage Mode],      
  [Retailer Credit Bills],[Retailer Credit Days],[Retailer Credit Limit],[Retailer CSTNo],[Retailer Deposit Amount],[Retailer Drug ExpiryDate],      
  [Retailer Drug License No],[Retailer EmailId],[Retailer GeoLevel],[Retailer License ExpiryDate],[Retailer License No],[Retailer Name],      
  [Retailer OffPhone1],[Retailer OffPhone2],[Retailer OnAccount],[Retailer Pestcide ExpiryDate],[Retailer Pestcide LicNo],[Retailer PhoneNo],      
  [Retailer Pin Code],[Retailer ResPhone1],[Retailer ResPhone2],[Retailer Ship Address1],[Retailer Ship Address2],[Retailer Ship Address3],      
  [Retailer ShipId],[Retailer TaxType],[Retailer TINNo],[Retailer Village],[Tax Type],[TIN Number],      
  [Company Address1],[Company Address2],[Company Address3],[Company Code],[Company Contact Person],      
  [Company EmailId],[Company Fax Number],[Company Name],[Company Phone Number],[Contact Person],[CST Number],      
  [DC DATE],[DC NUMBER],[Delivery Boy],[Delivery Date],[Deposit Amount],      
  [Distributor Address1],[Distributor Address2],[Distributor Address3],[Distributor Code],[Distributor Name],      
  [Drug Batch Description],[Drug Licence Number 1],[Drug Licence Number 2],[Drug1 Expiry Date],[Drug2 Expiry Date],      
  [EAN Code],[EmailID],[Geo Level],[Interim Sales],[Licence Number],      
  [LST Number],[Order Date],[Order Number],      
  [Pesticide Expiry Date],[Pesticide Licence Number],[PhoneNo],[PinCode],[Remarks],      
  [UsrId],[Visibility],[Distributor Product Code],[Allotment No],[Bx Selling Rate],[AmtInWrd]      
  FROM RptBillTemplateFinal_Group,Product P      
  WHERE P.PrdCCode=RptBillTemplateFinal_Group.[Product Code] AND P.PrdType=5   AND  [Visibility]=1   
 END       
 --->Till Here      
  IF NOT EXISTS (SELECT A.NAME FROM SysObjects A INNER JOIN SysColumns B ON A.id=B.id AND A.name='RptBillTemplateFinal' AND B.name='InvDisc')      
  BEGIN      
   ALTER TABLE RptBillTemplateFinal ADD InvDisc NUMERIC (18,2) DEFAULT 0 WITH VALUES       
  END      
  IF NOT EXISTS (SELECT A.NAME FROM SysObjects A INNER JOIN SysColumns B ON A.id=B.id AND A.name='RptBillTemplateFinal' AND B.name='InvDiscPer')      
  BEGIN      
   ALTER TABLE RptBillTemplateFinal ADD InvDiscPer NUMERIC (18,2) DEFAULT 0 WITH VALUES       
  END
  IF NOT EXISTS (SELECT A.NAME FROM SysObjects A INNER JOIN SysColumns B ON A.id=B.id AND A.name='RptBillTemplateFinal' AND B.name='SalesmanPhoneNo')      
  BEGIN      
   ALTER TABLE RptBillTemplateFinal ADD SalesmanPhoneNo NVARCHAR(100)
  END        
  IF NOT EXISTS (SELECT A.NAME FROM SysObjects A INNER JOIN SysColumns B ON A.id=B.id AND A.name='RptBillTemplateFinal' AND B.name='Grammage')      
  BEGIN      
   ALTER TABLE RptBillTemplateFinal ADD Grammage NUMERIC (38,2) DEFAULT 0 WITH VALUES       
  END      
  IF Exists(SELECT A.NAME FROM SysObjects A INNER JOIN SysColumns B ON A.id=B.id AND A.name='RptBillTemplateFinal' AND B.name='InvDisc')          
  BEGIN          
   SET @SSQL1='UPDATE A SET A.InvDisc=B.SalInvLvlDisc FROM RptBillTemplateFinal A (NOLOCK) INNER JOIN SalesInvoice B (NOLOCK)       
      ON A.[Sales Invoice Number]=B.SalInvNo AND A.UsrId='+ CAST(@Pi_UsrId AS VARCHAR(10))             
   EXEC (@SSQL1)          
  END       
  IF EXISTS(SELECT A.NAME FROM SysObjects A INNER JOIN SysColumns B ON A.id=B.id AND A.name='RptBillTemplateFinal' AND B.name='InvDiscPer')          
  BEGIN        
   SET @SSQL1='UPDATE A SET A.InvDiscPer=B.SalInvLvlDiscPer FROM RptBillTemplateFinal A (NOLOCK) INNER JOIN SalesInvoice B (NOLOCK)       
      ON A.[Sales Invoice Number]=B.SalInvNo AND A.UsrId='+ CAST(@Pi_UsrId AS VARCHAR(10))             
   EXEC (@SSQL1)      
  END      
  IF EXISTS(SELECT A.NAME FROM SysObjects A INNER JOIN SysColumns B ON A.id=B.id AND A.name='RptBillTemplateFinal' AND B.name='SalesmanPhoneNo')          
  BEGIN        
   SET @SSQL1='UPDATE A SET A.SalesmanPhoneNo=ISNULL(B.SMPhoneNumber,'''') FROM RptBillTemplateFinal A (NOLOCK) INNER JOIN SalesMan B (NOLOCK)       
      ON A.[SalesMan Code]=B.SMCode AND A.UsrId='+ CAST(@Pi_UsrId AS VARCHAR(10))             
   EXEC (@SSQL1)          
  END      
--- Added by Rajesh ICRSTPAR3196      
  IF EXISTS(SELECT A.NAME FROM SysObjects A INNER JOIN SysColumns B ON A.id=B.id AND A.name='RptBillTemplateFinal' AND B.name='bx')          
  BEGIN        
   SET @SSQL1='UPDATE A SET A.bx=bx+box FROM RptBillTemplateFinal A (NOLOCK) WHERE A.UsrId='+ CAST(@Pi_UsrId AS VARCHAR(10))      
   EXEC (@SSQL1)          
  END      
  IF EXISTS(SELECT A.NAME FROM SysObjects A INNER JOIN SysColumns B ON A.id=B.id AND A.name='RptBillTemplateFinal' AND B.name='PBG')          
  BEGIN        
   SET @SSQL1='UPDATE A SET A.PB=PB+PBG FROM RptBillTemplateFinal A (NOLOCK) WHERE A.UsrId='+ CAST(@Pi_UsrId AS VARCHAR(10))             
   EXEC (@SSQL1)          
  END      
  IF EXISTS(SELECT A.NAME FROM SysObjects A INNER JOIN SysColumns B ON A.id=B.id AND A.name='RptBillTemplateFinal' AND B.name='TIN')          
  BEGIN        
   SET @SSQL1='UPDATE A SET A.Tn=TN+TIN FROM RptBillTemplateFinal A (NOLOCK) WHERE A.UsrId='+ CAST(@Pi_UsrId AS VARCHAR(10))        
   EXEC (@SSQL1)          
  END      
  IF EXISTS(SELECT A.NAME FROM SysObjects A INNER JOIN SysColumns B ON A.id=B.id AND A.name='RptBillTemplateFinal' AND B.name='TIF')          
  BEGIN        
   SET @SSQL1='UPDATE A SET A.TIF=TIF+TBX FROM RptBillTemplateFinal A (NOLOCK) WHERE A.UsrId='+ CAST(@Pi_UsrId AS VARCHAR(10))        
   EXEC (@SSQL1)          
  END      
--Till here      
-------------------GST Changes(Mohanakrishna A.B) begins here      
 IF EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='Dist Food Lic No')      
 BEGIN      
  SET @SSQL1='UPDATE B SET B.[Dist Food Lic No]=R.DrugLicNo2       
  FROM RptBillTemplateFinal B INNER JOIN DISTRIBUTOR R ON B.[Distributor Code]=R.DistributorCode'      
  EXEC (@SSQL1)      
 END      
 IF EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='Dist Drug Lic no')      
 BEGIN      
  SET @SSQL1='UPDATE B SET B.[Dist Drug Lic no]=R.DrugLicNo1       
  FROM RptBillTemplateFinal B INNER JOIN DISTRIBUTOR R ON B.[Distributor Code]=R.DistributorCode'      
  EXEC (@SSQL1)       
 END      
 IF EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND b.name='GSTTIN')      
 BEGIN      
  SET @SSQL1='UPDATE A SET A.[GSTTIN]=B.GSTTinNo FROM RptBillTemplateFinal A       
  INNER JOIN RetailerShipAdd B ON A.[Retailer ShipId]=B.RtrShipId INNER JOIN StateMaster C ON C.StateId=B.StateId'      
  EXEC (@SSQL1)      
 END      
 IF EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='PAN Number')      
 BEGIN      
  SET @SSQL1='UPDATE B SET B.[Pan Number]=R.[ColumnValue]       
  FROM RptBillTemplateFinal B INNER JOIN (      
  SELECT R.RtrId,R.rtrcode,U.ColumnValue FROM UdcDetails u INNER JOIN UdcMaster US ON u.UdcMasterId=US.UdcMasterId      
  INNER JOIN retailer R on R.RtrId=U.MasterRecordId  WHERE US.MasterId=2   AND ColumnName=''PAN Number'' ) R ON B.[Retailer Code]=R.[rtrcode]'      
  EXEC (@SSQL1)      
 END      
 IF EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='Retailer Type')      
 BEGIN      
  SET @SSQL1='UPDATE B SET B.[Retailer Type]=R.[ColumnValue] FROM RptBillTemplateFinal B       
  INNER JOIN (SELECT R.RtrId,R.rtrcode,U.ColumnValue FROM UdcDetails u INNER JOIN UdcMaster US ON u.UdcMasterId=US.UdcMasterId      
  INNER JOIN Retailer R on R.RtrId=U.MasterRecordId  WHERE US.MasterId=2   AND ColumnName=''Retailer Type'' ) R ON B.[Retailer Code]=R.[rtrcode]'      
  EXEC (@SSQL1)      
 END      
 IF EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND b.name='RelatedParty')      
 BEGIN      
  SET @SSQL1='UPDATE B SET B.[RelatedParty]=R.[ColumnValue] FROM RptBillTemplateFinal B       
  INNER JOIN (SELECT R.RtrId,R.rtrcode,U.ColumnValue FROM UdcDetails u INNER JOIN UdcMaster US ON u.UdcMasterId=US.UdcMasterId      
  INNER JOIN Retailer R on R.RtrId=U.MasterRecordId  WHERE US.MasterId=2   AND ColumnName=''Related Party'' ) R ON B.[Retailer Code]=R.[rtrcode]'      
  EXEC (@SSQL1)      
 END      
 IF EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='State Name')      
 BEGIN      
  SET @SSQL1='UPDATE A SET A.[State Name]=C.StateName FROM RptBillTemplateFinal A       
  INNER JOIN RetailerShipAdd B ON A.[Retailer ShipId]=B.RtrShipId INNER JOIN StateMaster C ON C.StateId=B.StateId'      
  EXEC (@SSQL1)      
 END      
 IF EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='State Code')      
 BEGIN      
  SET @SSQL1='UPDATE A SET A.[State Code]=C.StateCode FROM RptBillTemplateFinal A       
  INNER JOIN RetailerShipAdd B ON A.[Retailer ShipId]=B.RtrShipId INNER JOIN StateMaster C ON C.StateId=B.StateId'      
  EXEC (@SSQL1)      
 END      
 IF EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='StateTinNo')      
 BEGIN      
  SET @SSQL1='UPDATE A SET A.[StateTinNo]=C.TinFirst2Digit FROM RptBillTemplateFinal A       
  INNER JOIN RetailerShipAdd B ON A.[Retailer ShipId]=B.RtrShipId INNER JOIN StateMaster C ON C.StateId=B.StateId'      
  EXEC (@SSQL1)       
 END      
 IF EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND b.name='HSNCode')      
 BEGIN      
  SET @SSQL1='UPDATE B SET B.[HSNCode]=R.[ColumnValue] FROM RptBillTemplateFinal B       
  INNER JOIN (select R.prdid,R.prdccode,U.ColumnValue from UdcDetails u inner JOIN UdcMaster US ON u.UdcMasterId=US.UdcMasterId      
  INNER JOIN product  R on R.prdid=U.MasterRecordId  where US.MasterId=1   and ColumnName=''HSN Code'' ) R ON B.[Product Code]=R.[prdccode]'      
  EXEC (@SSQL1)      
 END      
   IF EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND b.name='HSNDescription')      
 BEGIN      
  SET @SSQL1='UPDATE B SET B.[HSNDescription]=R.[ColumnValue] FROM RptBillTemplateFinal B       
  INNER JOIN (SELECT R.prdid,R.prdccode,U.ColumnValue FROM UdcDetails u INNER JOIN UdcMaster US ON u.UdcMasterId=US.UdcMasterId      
  INNER JOIN Product  R on R.prdid=U.MasterRecordId  WHERE US.MasterId=1   AND ColumnName=''HSN Description'' ) R ON B.[Product Code]=R.[prdccode]'      
  EXEC (@SSQL1)      
 END      
 IF EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='DistributorGstTin')      
 BEGIN      
  SET @SSQL1='UPDATE B SET B.[DistributorGstTin]=R.ColumnValue  FROM RptBillTemplateFinal B INNER JOIN (      
  SELECT D.DistributorCode,u.ColumnValue from UdcDetails u INNER JOIN UdcMaster US ON u.UdcMasterId=US.UdcMasterId      
  INNER JOIN Distributor D ON D.DistributorId=u.MasterRecordId WHERE US.MasterId=16  and ColumnName=''GSTIN'') R on B.[Distributor Code]=R.DistributorCode'      
  EXEC (@SSQL1)      
 END      
 IF EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='DistributorStateName')      
 BEGIN      
  SELECT StateCode,StateName,TinFirst2Digit,DistributorCode      
  INTO #DistState       
  FROM UDCHD A (NOLOCK)      
  INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId      
  INNER JOIN UdcDetails C (NOLOCK) ON B.MasterId=C.MasterId      
  AND B.UdcMasterId=C.UdcMasterId      
  INNER JOIN UdcDefault D (NOLOCK) ON D.MasterId=C.MasterId AND D.MasterId=B.MasterId      
  AND D.UdcMasterId=C.UdcMasterId AND D.UdcMasterId=B.UdcMasterId      
  INNER JOIN StateMaster E (NOLOCK) ON E.StateName=D.ColValue AND E.StateName=C.ColumnValue      
  INNER JOIN Distributor DB ON DB.DistributorId=C.MasterRecordId      
  WHERE MasterName='Distributor Info Master' AND ColumnName='State Name'      
  SET @SSQL1='UPDATE B SET B.[DistributorStateName]=R.StateName,DistributorStateCode=R.StateCode,       
  DistributorStateTinNo=R.TinFirst2Digit FROM RptBillTemplateFinal B INNER JOIN #DistState R ON B.[Distributor Code]=R.DistributorCode'       
  EXEC (@SSQL1)      
  DROP TABLE #DistState      
 END      
 IF EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='Distributor Type')      
 BEGIN      
  SET @SSQL1='UPDATE B SET B.[Distributor Type]=R.ColumnValue  FROM RptBillTemplateFinal B INNER JOIN (      
  SELECT D.DistributorCode,u.ColumnValue from UdcDetails u INNER JOIN UdcMaster US ON u.UdcMasterId=US.UdcMasterId      
  INNER JOIN Distributor D ON D.DistributorId=u.MasterRecordId where US.MasterId=16  AND ColumnName=''Distributor Type'') R on B.[Distributor Code]=R.DistributorCode'      
  EXEC (@SSQL1)      
 END      
 IF EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='AadharNo')      
 BEGIN      
  SET @SSQL1='UPDATE B SET B.[AadharNo]=R.ColumnValue  FROM RptBillTemplateFinal B INNER JOIN (      
  SELECT D.DistributorCode,u.ColumnValue from UdcDetails u INNER JOIN UdcMaster US ON u.UdcMasterId=US.UdcMasterId      
  INNER JOIN Distributor D ON D.DistributorId=u.MasterRecordId where US.MasterId=16  AND ColumnName=''Aadhar No'') R on B.[Distributor Code]=R.DistributorCode'      
  EXEC (@SSQL1)      
 END      
 -------------------GST Changes(Mohanakrishna) Ends here      
  IF EXISTS(SELECT A.NAME FROM SysObjects A INNER JOIN SysColumns B ON A.id=B.id AND A.name='RptBillTemplateFinal' AND B.name='Grammage')          
  BEGIN       
     --SET @SSQL1=' UPDATE RPT SET RPT.Grammage=X.Grammage FROM RptBillTemplateFinal RPT (NOLOCK)       
     --    INNER JOIN (      
     --     SELECT SP.[Sales Invoice Number],P.PRDID,P.PrdCCode,P.PrdDCode,U.PrdUnitCode,ISNULL(      
     --     CASE U.PRDUNITID WHEN 2 THEN ISNULL(SUM(PrdWgt * SP.[Base Qty]),0)/1000      
     --     WHEN 3 THEN ISNULL(SUM(PrdWgt * SP.[Base Qty]),0) END,0) AS Grammage      
     --     FROM RptBillTemplateFinal SP (NOLOCK)      
     --     INNER JOIN Product P (NOLOCK) ON P.PrdCCode=SP.[Product Code]      
     --     INNER JOIN PRODUCTUNIT U (NOLOCK) ON P.PrdUnitId=U.PrdUnitId      
     --     WHERE SP.USRID=      
     --     GROUP BY P.PRDID,P.PrdCCode,P.PrdDCode,U.PrdUnitCode,U.PRDUNITID,SP.[Sales Invoice Number]      
     --    ) X ON X.PrdCCode=RPT.[PRODUCT CODE] AND X.[Sales Invoice Number]=RPT.[Sales Invoice Number] WHERE RPT.UsrId='+CAST(@Pi_UsrId AS VARCHAR(10))+''
	                
     SET @SSQL1=' UPDATE RPT SET RPT.Grammage=X.Grammage FROM RptBillTemplateFinal RPT (NOLOCK)       
         INNER JOIN (      
          SELECT SP.[Sales Invoice Number],P.PRDID,P.PrdCCode,P.PrdDCode,P.PrdWgt Grammage      
          FROM RptBillTemplateFinal SP (NOLOCK)      
          INNER JOIN Product P (NOLOCK) ON P.PrdCCode=SP.[Product Code]      
          WHERE SP.USRID='+CAST(@Pi_UsrId AS VARCHAR(10))+'      
         ) X ON X.PrdCCode=RPT.[PRODUCT CODE] AND X.[Sales Invoice Number]=RPT.[Sales Invoice Number] WHERE RPT.UsrId='+CAST(@Pi_UsrId AS VARCHAR(10))+''               
     EXEC (@SSQL1)          
  END      
  IF EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='[SalesInvoice NetAmount Actual]')      
  BEGIN      
   SET @SSQL1='UPDATE A SET A.[SalesInvoice NetAmount Actual]=B.OrgNetAmount       
    FROM RptBillTemplateFinal A INNER JOIN SalesInvoice B (NOLOCK) ON A.Salid=B.SalId'      
   EXEC (@SSQL1)       
  END
 IF EXISTS (SELECT A.SalId FROM SalInvoiceDeliveryChallan A INNER JOIN SalesInvoice B ON A.SalId=B.SalId INNER JOIN RptBillToPrint C ON C.[Bill Number]=SalInvNo)      
	 BEGIN      
		  TRUNCATE TABLE RptFinalBillTemplate_DC      
		  INSERT INTO RptFinalBillTemplate_DC(SalId,InvNo,DCNo,DCDate)      
		  SELECT A.SalId,B.SalInvNo,A.DCNo,DCDate FROM SalInvoiceDeliveryChallan A INNER JOIN SalesInvoice B      
		  ON A.SalId=B.SalId INNER JOIN RptBillToPrint C ON C.[Bill Number]=SalInvNo      
	 END      
 ELSE      
	 BEGIN      
		TRUNCATE TABLE RptFinalBillTemplate_DC      
	 END
	 IF NOT EXISTS (SELECT A.NAME FROM SysObjects A INNER JOIN SysColumns B ON A.id=B.id AND A.name='RptBillTemplateFinal' AND B.name='PrdtDefaultPricevalue')      
	BEGIN      
	ALTER TABLE RptBillTemplateFinal ADD PrdtDefaultPricevalue NUMERIC (18,2) DEFAULT 0 WITH VALUES       
	END
	 --------------- Added by lakshman M Dated ON 11-04-2019 PMS ID: ILCRSTPAR4044 
	  UPDATE D SET D.PrdtDefaultPricevalue  = Round(cast(PBD.PrdBatDetailValue As Numeric(18,2)),2)
	  FROM SalesInvoice S (NOLOCK)        
	  INNER JOIN SalesInvoiceProduct SP (NOLOCK) ON S.SalId = SP.SalId  
	  INNER JOIn Product P ON P.Prdid =SP.Prdid       
	  INNER JOIN ProductBatch B (NOLOCK) ON SP.PrdBatId = B.PrdBatId     
	  INNER JOIN ProductBatchDetails PBD (NOLOCK) ON PBD.PrdBatId =B.PrdBatId and DefaultPrice =1     
	  INNER JOIN rptbilltemplatefinal D ON D.Salid = S.SalId AND SP.SalId = D.Salid AND D.[Distributor Product Code] =P.Prdccode   
	  WHERE PBD.SLNo =3
	  ------------ Till here ------------
 RETURN      
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME ='RptProductWiseSalesTaxGST' AND TYPE ='U')
DROP TABLE RptProductWiseSalesTaxGST
GO
CREATE TABLE RptProductWiseSalesTaxGST
(
	[SLNO] [bigint] IDENTITY(1,1) NOT NULL,
	[RtrStateCode] [varchar](20) NULL,
	[RtrStateName] [varchar](150) NULL,
	[RtrGSTIN] [varchar](20) NULL,
	[RetailerCode] [varchar](75) NULL,
	[RetailerName] [varchar](150) NULL,
	[RtrShipAdd] [varchar](150) NULL,
	[RtrShipAdd1] [varchar](150) NULL,
	[IOTaxType] [varchar](100) NULL,
	[InvDate] [datetime] NULL,
	[RefNo] [varchar](100) NULL,
	[HSN Code] [varchar](50) NULL,
	[Product Code] [varchar](75) NULL,
	[Product Name] [varchar](150) NULL,
	[UPC] [int] NULL,
	[InvQty] [int] NULL,
	[TaxableAmount] [numeric](38, 2) NULL,
	[OutputCGST Value] [numeric](36, 2) NULL,
	[OutputCGST Rate] [numeric](36, 2) NULL,
	[OutputSGST Rate] [numeric](36, 2) NULL,
	[OutputSGST Value] [numeric](36, 2) NULL,
	[LineNetAmount] [numeric](36, 2) NULL,
	[ReverseCharge] [numeric](36, 2) NULL,
	[Group Name] [varchar](100) NULL,
	[Grouptype] [tinyint] NULL,
	[UsrId] [int] NULL
) ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME ='RptPurchaseTaxGST' AND TYPE ='U')
DROP TABLE RptPurchaseTaxGST
GO
CREATE TABLE RptPurchaseTaxGST (
	[Slno] [bigint] IDENTITY(1,1) NOT NULL,
	[SupplierCode] [varchar](75) NULL,
	[SupplierName] [varchar](150) NULL,
	[SupplierAddress] [varchar](150) NULL,
	[Supplier GSTIN] [varchar](150) NULL,
	[Supplier State] [varchar](150) NULL,
	[IOTaxType] [varchar](100) NULL,
	[GRN No] [nvarchar](100) NULL,
	[GRN date] [datetime] NULL,
	[Invoice Number] [nvarchar](100) NULL,
	[Invoice Date] [datetime] NULL,
	[ODN Number] [varchar](100) NULL,
	[Product Code] [varchar](75) NULL,
	[Product Name] [varchar](150) NULL,
	[HSN Code] [varchar](50) NULL,
	[UPC] [int] NULL,
	[InvQty] [int] NULL,
	[TaxableAmount] [numeric](38, 2) NULL,
	[InputCGST Rate] [numeric](36, 2) NULL,
	[InputCGSTValue] [numeric](36, 2) NULL,
	[InputSGST Rate] [numeric](36, 2) NULL,
	[InputSGSTValue] [numeric](36, 2) NULL,
	[LineNetAmount] [numeric](36, 2) NULL,
	[Group Name] [varchar](100) NULL,
	[Grouptype] [tinyint] NULL,
	[UsrId] [int] NULL
) ON [PRIMARY]
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_RptProductWiseSalesTaxGST' AND TYPE ='P')
DROP PROCEDURE Proc_RptProductWiseSalesTaxGST
GO
---EXEC Proc_RptProductWiseSalesTaxGST 401,2,0,'',0,0,1
--Select * from RptProductWiseSalesTaxGST
CREATE PROCEDURE Proc_RptProductWiseSalesTaxGST
(
	@Pi_RptId			INT,
	@Pi_UsrId			INT,
	@Pi_SnapId			INT,
	@Pi_DbName			nvarchar(50),
	@Pi_SnapRequired	INT,
	@Pi_GetFromSnap		INT,
	@Pi_CurrencyId		INT
)
AS
/*********************************
* PROCEDURE	: Proc_RptProductWiseSalesTaxGST
* PURPOSE	: To get the Tax details
* CREATED	: Murugan.R
* CREATED DATE	: 12/05/2017
* MODIFIED
-------------------------------------------------------------------------------------------------------
* [DATE]      [DEVELOPER]         [USER_STORY_ID]   [CR/BUG]  [DESCRIPTION]
* Date            Name              PMS NO            CR/BUG      Remarks
-------------------------------------------------------------------------------------------------------
*06/10/2018    Deepak Philip      ILCRSTPAR2305        BUG      To show retailer GSTIN no in report.
*********************************/
BEGIN
SET NOCOUNT ON
	--Filter Variable
	DECLARE @FromDate		AS	DATETIME
	DECLARE @ToDate			AS	DATETIME
	DECLARE @CmpId	        AS	INT
	DECLARE @ErrNo	 	AS	INT
		
	DECLARE @SQL as Varchar(MAX)
	DECLARE @MaxId as INT
	DECLARE @ReportId as INT
	DECLARE @start INT, @end INT 
	DECLARE @Str AS VARCHAR(100)
	DECLARE @CreateTable AS VARCHAR(7000)
		
	SET @ErrNo=0
	SELECT @FromDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,10,@Pi_UsrId)
	SELECT @ToDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,11,@Pi_UsrId)
	SET @CmpId = (SElect  TOP 1 iCountid FRom Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId))
	
	
	IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='U' AND NAME='RptProductWiseSalesTaxGST')
	BEGIN
		DELETE FROM RptProductWiseSalesTaxGST WHERE UsrId=@Pi_UsrId
	END
	
		CREATE TABLE #TmpRptIOTaxSummary
		(
			[InvDate] DateTime,
			[InvId] [bigint] NULL,
			[RefNo] [varchar](100) NULL,
			[RetailerName] Varchar(150),
			[RetailerCode] Varchar(75),
			[RtrGSTIN] Varchar(20),
			RtrStateCode Varchar(20),
			RtrStateName Varchar(150) ,
			RtrShipAdd Varchar(150),
			RtrShipAdd1 Varchar(150),
			[Product Name] Varchar(150),			
			[Product Code] Varchar(75),
			[HSN Code] Varchar(75),
			[RtrId] [int] NULL,
			[Prdid] [int] NULL,
			[InvQty] [int] NULL,
			[CmpId] [int] NULL,
			[TaxPerc] [varchar](50) NULL,
			[TaxableAmount] [numeric](38,2) NULL,
			[IOTaxType] [varchar](100) NULL,
			[TaxFlag] [int] NULL,
			[TaxPercent] [numeric](38,2) NULL,
			[TaxId] [int] NULL,	
			[LineNetAmount] Numeric(36,2),
			[ReverseCharge] Numeric(36,2),
			[UPC] INT,
			[Group Name]  Varchar(200),
			[GroupType] INT,
			[UsrId] [int] NULL
		)
		
		SELECT Prdid,Max(ConversionFactor) as UPC 
		INTO #UOM
		FROM Product P (NOLOCK) INNER JOIN Uomgroup UG (NOLOCK) ON P.UomGroupId=UG.UomGroupId
		GROUP BY Prdid
		
		INSERT INTO #TmpRptIOTaxSummary([InvDate],[InvId],[RefNo],[RetailerName] ,[RetailerCode],RtrStateCode,RtrStateName,[RtrGSTIN],
		RtrShipAdd,RtrShipAdd1,[Product Name] ,[Product Code],[HSN Code],[RtrId],[Prdid],[InvQty],[CmpId],[TaxPerc],[TaxableAmount],[IOTaxType] ,
		[TaxFlag],[TaxPercent],[TaxId],LineNetAmount,[ReverseCharge],[UPC],[Group Name],[GroupType],[UsrId])
		SELECT SI.SalInvDate,SI.SalId AS InvId,SI.SalInvNo AS RefNo,RtrName,RtrCode,'' as RtrStateCode,'' as RtrStateName,'' as [RtrGSTIN],
		ISNULL(RS.RtrShipAdd1,'') as RtrShipAdd,ISNULL(RS.RtrShipAdd2,'') as RtrShipAdd1,
		PrdName,PrdCCode,'' as [HSN Code],R.RtrId AS RtrId,P.PrdId as Prdid,SUM(SIP.BaseQty) AS InvQty,  
		C.CmpId AS CmpId,TC.TaxCode +' Rate' as TaxPerc,
		SUM(TaxableAmount) as TaxableAmount,'Sales' as IOTaxType,0 as TaxFlag,TaxPerc as TaxPercent,SPT.TaxId,
		SUM(PrdNetAmount) as [LineNetAmount],0 as [ReverseCharge],[UPC] as [UPC],
		'' as [Group Name] ,2 as [GroupType],@Pi_UsrId AS UserId  
		FROM 
		SalesInvoice SI WITH (NOLOCK)  
		INNER JOIN SalesInvoiceProduct SIP WITH (NOLOCK) ON SI.SalId = SIP.SalId  
		INNER JOIN SalesInvoiceProductTax SPT WITH (NOLOCK) ON SPT.SalId = SIP.SalId AND SPT.SalId = SI.SalId AND SIP.SlNo=SPT.PrdSlNo  
		INNER JOIN Product P WITH (NOLOCK) ON P.PrdId = SIP.PrdId  
		INNER JOIN #UOM U ON U.PrdId=P.PrdId and U.PrdId=SIP.PrdId  
		INNER JOIN ProductBatch PB WITH (NOLOCK) ON PB.PrdId = SIP.PrdId AND PB.PrdBatId = SIP.PrdBatId AND PB.PrdId = P.PrdId  
		INNER JOIN Retailer R WITH (NOLOCK) ON R.RtrId = SI.RtrId
		INNER JOIN TaxConfiguration TC (NOLOCK) ON TC.TaxId =SPT.TaxId    
		LEFT OUTER JOIN Company C ON C.CmpId = P.CmpId 
		LEFT OUTER JOIN RetailerShipAdd RS ON RS.RtrId=SI.RtrId and RS.RtrShipId=SI.RtrShipId  
		WHERE SI.Salinvdate Between @FromDate and @ToDate and SI.Dlvsts >3
		AND (C.CmpId = (CASE @CmpId WHEN 0 THEN C.CmpId ELSE 0 END) OR
		C.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId)))
		Group By TaxPerc,SI.SalInvDate,C.CmpId,P.PrdId,SI.SalId,SI.SalInvNo,R.RtrId ,
		SPT.TaxId ,RtrName,RtrCode,PrdName,PrdCCode,TC.TaxCode,ISNULL(RS.RtrShipAdd1,''),ISNULL(RS.RtrShipAdd2,''),
		[UPC]
		HAVING Sum(TaxableAmount) >0  
			
		INSERT INTO #TmpRptIOTaxSummary([InvDate],[InvId],[RefNo],[RetailerName] ,[RetailerCode],RtrStateCode,RtrStateName,[RtrGSTIN],
		RtrShipAdd,RtrShipAdd1,[Product Name] ,[Product Code],[HSN Code],[RtrId],[Prdid],[InvQty],[CmpId],[TaxPerc],[TaxableAmount],[IOTaxType] ,
		[TaxFlag],[TaxPercent],[TaxId],LineNetAmount,[ReverseCharge],[UPC],[Group Name],[GroupType],[UsrId]) 
		SELECT SI.SalInvDate,SI.SalId AS InvId,SI.SalInvNo AS RefNo,RtrName,RtrCode,'' as RtrStateCode,'' as RtrStateName,'' as [RtrGSTIN],
		ISNULL(RS.RtrShipAdd1,'') as RtrShipAdd,ISNULL(RS.RtrShipAdd2,'') as RtrShipAdd1,		
		PrdName,PrdCCode,'' as [HSN Code],R.RtrId AS RtrId,P.PrdId as Prdid,SUM(SIP.BaseQty) AS InvQty,  
		C.CmpId AS CmpId,TC.TaxCode +' Value' as TaxPerc,SUM(TaxableAmount) as TaxableAmount,  
		'Sales' as IOTaxType,1 as TaxFlag,Sum(SPT.TaxAmount) as TaxPercent,
		SPT.TaxId,SUM(PrdNetAmount) as [LineNetAmount],0 as [ReverseCharge],[UPC] as [UPC],	
		'' as [Group Name] ,2 as [GroupType],@Pi_UsrId AS UserId  
		FROM 
		SalesInvoice SI WITH (NOLOCK)  
		INNER JOIN SalesInvoiceProduct SIP WITH (NOLOCK) ON SI.SalId = SIP.SalId  
		INNER JOIN SalesInvoiceProductTax SPT WITH (NOLOCK) ON SPT.SalId = SIP.SalId AND SPT.SalId = SI.SalId AND SIP.SlNo=SPT.PrdSlNo  
		INNER JOIN Product P WITH (NOLOCK) ON P.PrdId = SIP.PrdId 
		INNER JOIN #UOM U ON U.PrdId=P.PrdId and U.PrdId=SIP.PrdId   
		INNER JOIN ProductBatch PB WITH (NOLOCK) ON PB.PrdId = SIP.PrdId AND PB.PrdBatId = SIP.PrdBatId AND PB.PrdId = P.PrdId  
		INNER JOIN Retailer R WITH (NOLOCK) ON R.RtrId = SI.RtrId  
		INNER JOIN TaxConfiguration TC (NOLOCK) ON TC.TaxId =SPT.TaxId 
		LEFT OUTER JOIN Company C ON C.CmpId = P.CmpId
		LEFT OUTER JOIN RetailerShipAdd RS ON RS.RtrId=SI.RtrId and RS.RtrShipId=SI.RtrShipId   
		WHERE SI.Salinvdate Between @FromDate and @ToDate and SI.Dlvsts >3
		AND (C.CmpId = (CASE @CmpId WHEN 0 THEN C.CmpId ELSE 0 END) OR
		C.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId)))
		Group By TaxPerc,SI.SalInvDate,C.CmpId,P.PrdId,SI.SalId,SI.SalInvNo,R.RtrId ,
		SPT.TaxId ,RtrName,RtrCode,PrdName,PrdCCode,TC.TaxCode,ISNULL(RS.RtrShipAdd1,''),ISNULL(RS.RtrShipAdd2,''),[UPC]
		HAVING Sum(SPT.TaxAmount+SPT.TaxableAmount) > 0 
		
		INSERT INTO #TmpRptIOTaxSummary([InvDate],[InvId],[RefNo],[RetailerName] ,[RetailerCode],RtrStateCode,RtrStateName,[RtrGSTIN],
		RtrShipAdd,RtrShipAdd1,[Product Name] ,[Product Code],[HSN Code],[RtrId],[Prdid],[InvQty],[CmpId],[TaxPerc],[TaxableAmount],[IOTaxType] ,
		[TaxFlag],[TaxPercent],[TaxId],LineNetAmount,[ReverseCharge],[UPC],[Group Name],[GroupType],[UsrId]) 
		Select
		Rh.ReturnDate,RH.ReturnId AS InvId,RH.ReturnCode AS RefNo,RtrName,RtrCode,'' as RtrStateCode,'' as RtrStateName,'' as [RtrGSTIN],
		'' as RtrShipAdd,'' as RtrShipAdd1,PrdName,PrdCCode,'' as [HSN Code],R.RtrId AS RtrId,P.PrdId as Prdid,-1*SUM(RP.BaseQty) AS InvQty,  
		C.CmpId AS CmpId,TC.TaxCode +' Rate' as TaxPerc,-1 *SUM(TaxableAmt) as TaxableAmount,  
		'SalesReturn' as IOTaxType,0 as TaxFlag,TaxPerc as TaxPercent,
		RPT.TaxId,-1 *SUM(PrdNetAmt) as [LineNetAmount],ReverseCharges as [ReverseCharge],[UPC] as [UPC],		
		'' as [Group Name] ,2 as [GroupType],@Pi_UsrId AS UserId 
		From ReturnHeader RH WITH (NOLOCK)  
		INNER JOIN ReturnProduct RP WITH (NOLOCK) ON RH.ReturnId = RP.ReturnId ---AND RP.LineType=1  
		INNER JOIN ReturnProductTax RPT WITH (NOLOCK) ON RPT.ReturnId = RH.ReturnId AND RPT.ReturnId = RP.ReturnId AND RP.SlNo=RPT.PrdSlNo  
		INNER JOIN TaxConfiguration TC (NOLOCK) ON TC.TaxId =RPT.TaxId 
		INNER JOIN Product P WITH (NOLOCK) ON P.PrdId = RP.PrdId 
		INNER JOIN #UOM U ON U.PrdId=P.PrdId and U.PrdId=RP.PrdId      
		INNER JOIN ProductBatch PB WITH (NOLOCK) ON PB.PrdId = RP.PrdId AND PB.PrdBatId = RP.PrdBatId AND PB.PrdId = P.PrdId  
		INNER JOIN Retailer R WITH (NOLOCK) ON R.RtrId = RH.RtrId  
		LEFT OUTER JOIN Company C ON C.CmpId = P.CmpId   
		WHERE RH.Status = 0  and RH.ReturnDate  Between @FromDate and @ToDate
		AND (C.CmpId = (CASE @CmpId WHEN 0 THEN C.CmpId ELSE 0 END) OR
		C.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId))) 
		GROUP BY TaxPerc,RH.ReturnDate,P.PrdId,RH.ReturnId,RH.ReturnCode,R.RtrId,RPT.TaxId,RtrName,
		RtrCode,PrdName,PrdCCode ,RPT.TaxId ,C.CmpId,TC.TaxCode,[UPC],ReverseCharges
		HAVING Sum(TaxableAmt) > 0  
		
		INSERT INTO #TmpRptIOTaxSummary([InvDate],[InvId],[RefNo],[RetailerName] ,[RetailerCode],RtrStateCode,RtrStateName,[RtrGSTIN],
		RtrShipAdd,RtrShipAdd1,[Product Name] ,[Product Code],[HSN Code],[RtrId],[Prdid],[InvQty],[CmpId],[TaxPerc],[TaxableAmount],[IOTaxType] ,
		[TaxFlag],[TaxPercent],[TaxId],LineNetAmount,[ReverseCharge],[UPC],[Group Name],[GroupType],[UsrId]) 
		Select
		Rh.ReturnDate,RH.ReturnId AS InvId,RH.ReturnCode AS RefNo,RtrName,RtrCode,'' as RtrStateCode,'' as RtrStateName,'' as [RtrGSTIN],
		'' as RtrShipAdd,'' as RtrShipAdd1,PrdName,PrdCCode,'' as [HSN Code],R.RtrId AS RtrId,P.PrdId as Prdid,-1*SUM(RP.BaseQty) AS InvQty,  
		C.CmpId AS CmpId,TC.TaxCode +' Value' as TaxPerc,-1 *SUM(TaxableAmt) as TaxableAmount,  
		'SalesReturn' as IOTaxType,1 as TaxFlag,-1*SUM(RPT.TaxAmt) as TaxPercent,
		RPT.TaxId,-1 *SUM(PrdNetAmt) as [LineNetAmount],ReverseCharges as [ReverseCharge],[UPC] as [UPC],
		'' as [Group Name] ,2 as [GroupType],@Pi_UsrId AS UserId 
		From ReturnHeader RH WITH (NOLOCK)  
		INNER JOIN ReturnProduct RP WITH (NOLOCK) ON RH.ReturnId = RP.ReturnId ---AND RP.LineType=1  
		INNER JOIN ReturnProductTax RPT WITH (NOLOCK) ON RPT.ReturnId = RH.ReturnId AND RPT.ReturnId = RP.ReturnId AND RP.SlNo=RPT.PrdSlNo  
		INNER JOIN TaxConfiguration TC (NOLOCK) ON TC.TaxId =RPT.TaxId 
		INNER JOIN Product P WITH (NOLOCK) ON P.PrdId = RP.PrdId 
		INNER JOIN #UOM U ON U.PrdId=P.PrdId and U.PrdId=RP.PrdId      
		INNER JOIN ProductBatch PB WITH (NOLOCK) ON PB.PrdId = RP.PrdId AND PB.PrdBatId = RP.PrdBatId AND PB.PrdId = P.PrdId  
		INNER JOIN Retailer R WITH (NOLOCK) ON R.RtrId = RH.RtrId  
		LEFT OUTER JOIN Company C ON C.CmpId = P.CmpId   
		WHERE RH.Status = 0  and RH.ReturnDate  Between @FromDate and @ToDate 
		AND (C.CmpId = (CASE @CmpId WHEN 0 THEN C.CmpId ELSE 0 END) OR
		C.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId))) 
		GROUP BY RH.ReturnDate,P.PrdId,RH.ReturnId,RH.ReturnCode,R.RtrId,RPT.TaxId,RtrName,
		RtrCode,PrdName,PrdCCode ,RPT.TaxId ,C.CmpId,TC.TaxCode,[UPC],ReverseCharges
		HAVING Sum(RPT.TaxAmt+TaxableAmt) > 0 
		
		INSERT INTO #TmpRptIOTaxSummary([InvDate],[InvId],[RefNo],[RetailerName] ,[RetailerCode],RtrStateCode,RtrStateName,[RtrGSTIN],
		RtrShipAdd,RtrShipAdd1,[Product Name] ,[Product Code],[HSN Code],[RtrId],[Prdid],[InvQty],[CmpId],[TaxPerc],[TaxableAmount],[IOTaxType] ,
		[TaxFlag],[TaxPercent],[TaxId],LineNetAmount,[ReverseCharge],[UPC],[Group Name],[GroupType],[UsrId]) 
		SELECT  Null, 0 as [InvId],'' as [RefNo],'' as [RetailerName] ,'' as [RetailerCode],'' as [HSN Code],'' as RtrStateCode,'' as RtrStateName,'' as [RtrGSTIN],
		'' as RtrShipAdd,'' as RtrShipAdd1,'' as [Product Name] ,'' as [Product Code],0 as [RtrId],0 as Prdid,0 as [InvQty],0 as[CmpId],  [TaxPerc] ,0 as [TaxableAmount],'' as [IOTaxType] ,
		100 as [TaxFlag],SUM([TaxPercent]) as [TaxPercent],0 as [TaxId],0 as  LineNetAmount,
		0 as [ReverseCharge],0 as [UPC],
		'ZZZZZZ' as [Group Name],3 as [GroupType],[UsrId]
		FROM #TmpRptIOTaxSummary WHERE TaxFlag=1		
		GROUP BY [UsrId],[TaxPerc]
		
		
			
		
	
		
		UPDATE A SET A.RtrStateCode=SM.StateCode ,A.RtrStateName=SM.StateName ,A.[RtrGSTIN]=RS.GSTTinNo 
		FROM #TmpRptIOTaxSummary A 		
		INNER JOIN SalesInvoice S ON S.SalId=A.[InvId]
		INNER JOIN RetailerShipAdd RS ON RS.RtrId=S.RtrId and RS.RtrShipId=S.RtrShipId
		INNER JOIN StateMaster SM ON SM.StateId=RS.StateId
		WHERE IOTaxType='Sales'
		
			
		
		UPDATE A  SET A.RtrShipAdd=RS.RtrShipAdd1 ,A.RtrShipAdd1=RS.RtrShipAdd2 
		FROM #TmpRptIOTaxSummary A 
		INNER JOIN  ReturnHeader B ON A.InvId=B.ReturnID
		INNER JOIN SalesInvoice S ON S.SalId=B.Salid
		INNER JOIN RetailerShipAdd RS ON RS.RtrId=S.RtrId and RS.RtrShipId=S.RtrShipId
		WHERE IOTaxType='SalesReturn'
		
		
		UPDATE TR SET  [HSN Code]=C.ColumnValue
		FROM UDCHD A (NOLOCK)
		INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId
		INNER JOIN UdcDetails C (NOLOCK) ON B.MasterId=C.MasterId
		and B.UdcMasterId=C.UdcMasterId
		INNER JOIN #TmpRptIOTaxSummary TR ON TR.Prdid=C.MasterRecordId
		WHERE MasterName='Product Master'  and ColumnName='HSN Code'
		
		--Added by Deepak Philip ILCRSTPAR2305
		UPDATE A SET  A.[RtrGSTIN]=R.[ColumnValue] FROM #TmpRptIOTaxSummary A 
		INNER JOIN (SELECT R.RtrId,R.rtrcode,U.ColumnValue FROM UdcDetails u 
		INNER JOIN UdcMaster US ON u.UdcMasterId=US.UdcMasterId
		INNER JOIN retailer R on R.RtrId=U.MasterRecordId  WHERE US.MasterId=2   and ColumnName='GSTIN' ) 
		R ON A.[RetailerCode]=R.[rtrcode] WHERE IOTaxType in('SalesReturn','Sales')
		--till here
	
		IF NOT EXISTS(SELECT 'X' FROM #TmpRptIOTaxSummary)
		BEGIN
			DELETE FROM RptDataCount WHERE RptId = @Pi_RptId AND UserId = @Pi_UsrId
			INSERT INTO RptDataCount (RptId,RecCount,ErrNo,UserId)
			SELECT @Pi_RptId,Count(*) as RecCount,@ErrNo,@Pi_UsrId FROM RptProductWiseSalesTaxGST
			WHERE UsrId=@Pi_UsrId
			SELECT * FROM RptProductWiseSalesTaxGST WHERE UsrId=@Pi_UsrId
			RETURN
		END
		
		
		
--		--Remove Duplicate [TaxableAmount] and LinelevelNetAmount
		SELECT DISTINCT
		[InvDate],[InvId],[RefNo],[RetailerName] ,[RetailerCode],RtrStateCode,RtrStateName,[RtrGSTIN],
		RtrShipAdd,RtrShipAdd1,[Product Name] ,[Product Code],[HSN Code],[RtrId],[Prdid],[InvQty],[CmpId],
		[TaxableAmount],[IOTaxType],[TaxFlag],LineNetAmount,[UsrId],[ReverseCharge]
		INTO #LineLevelGross
		FROM #TmpRptIOTaxSummary WHERE UsrId=@Pi_UsrId and TaxFlag=0
	
		
		
		DECLARE @ColSelect AS Varchar(MAX)
		DECLARE @ColSelectDataType AS Varchar(5000)
		DECLARE @TableCol AS Varchar(2000)
		DECLARE @Columns1 AS Varchar(7000)
		DECLARE @OrderBy AS VARCHAR(2000)
		DECLARE @PCSelect AS VARCHAR(3000)
		SET @PCSelect=''
		SET @ColSelect=''
		SET @ColSelectDataType=''
		SET @TableCol=''
		SET @Columns1=''
		SET @CreateTable=''
		SET @OrderBy=''
		
		CREATE TABLE #DynamicCol
		(
			Slno INT IDENTITY(1,1),
			Taxperc	Varchar(50),
			TaxId INT
		)
		INSERT INTO #DynamicCol(Taxperc,TaxId)
		SELECT DISTINCT Taxperc,TaxId FROM #TmpRptIOTaxSummary WHERE TaxFlag IN(0,1) and GroupType=2
		ORDER BY TaxId
	
	
		SELECT @ColSelect=@ColSelect+'ISNULL('+QuoteName(Taxperc)+',0) as '+QuoteName(Taxperc)+',' FROM #DynamicCol ORDER BY Slno
		SELECT @PCSelect=@PCSelect+Quotename(Taxperc)+',' FROM #DynamicCol ORDER BY Slno
		SET @PCSelect=LEFT(@PCSelect,LEN(@PCSelect)-1)
		SELECT @ColSelectDataType=@ColSelectDataType+QuoteName(Taxperc)+' Numeric(36,2),' FROM #DynamicCol ORDER BY Slno
		SET @ColSelect='SELECT RtrStateCode,RtrStateName,[RtrGSTIN],[RetailerCode],[RetailerName],RtrShipAdd,RtrShipAdd1,[IOTaxType],[InvDate],[RefNo],'+
		'[HSN Code],[Product Code],[Product Name],[UPC],[InvQty],[TaxableAmount],'+@ColSelect+'LineNetAmount,[ReverseCharge],[Group Name],[GroupType],[UsrId]'
		SET @TableCol= 'SLNO BIGINT IDENTITY(1,1),RtrStateCode Varchar(20),RtrStateName Varchar(150),[RtrGSTIN] varchar(20),[RetailerCode] Varchar(75),[RetailerName] Varchar(150),'+
		'RtrShipAdd Varchar(150),RtrShipAdd1 Varchar(150),[IOTaxType] [varchar](100) NULL,[InvDate] DateTime,'+
		'[RefNo] [varchar](100) NULL,	[HSN Code] varchar(50),[Product Code] Varchar(75),	[Product Name] Varchar(150),UPC INT,'+		
		'[InvQty] [int] NULL,[TaxableAmount] [numeric](38,2) NULL,'
	
		SET @Columns1='SELECT RtrStateCode,RtrStateName,[RtrGSTIN],[RetailerCode],[RetailerName],RtrShipAdd,RtrShipAdd1,[IOTaxType],[InvDate],[RefNo],'+
		'[HSN Code],[Product Code],[Product Name] ,UPC,[InvQty],[TaxableAmount],LineNetAmount,ReverseCharge,TaxPercent ,Taxperc,[Group Name],[GroupType],[UsrId] FROM #TmpRptIOTaxSummary'
		SET @OrderBy=' ORDER BY [Group Name],[GroupType],IOTaxType,InvDate,RetailerName,[Product Name]'
		SET @CreateTable=' IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME=''RptProductWiseSalesTaxGST'' and XTYPE=''U'')'+
		' DROP TABLE RptProductWiseSalesTaxGST'+
		' CREATE TABLE RptProductWiseSalesTaxGST ('+@TableCol+@ColSelectDataType+' LineNetAmount Numeric(36,2),ReverseCharge  Numeric(36,2),[Group Name] Varchar(100),Grouptype TINYINT,UsrId INT)'
		--PRINT @CreateTable
		EXEC(@CreateTable)
		SET @SQL=' INSERT INTO RptProductWiseSalesTaxGST '+ @ColSelect+ ' FROM'+
		'('+@Columns1+
		') PS'+
		' PIVOT'+
		'('+
			' SUM(TaxPercent) FOR Taxperc IN('+@PCSelect+')'+
		')PVTTax '+ @OrderBy
		--PRINT @SQL
		EXEC(@SQL)
		----GRAND TOTAL UPDATE
		SELECT 'ZZZZZZ' as [Group Name], 3 as GroupType ,SUM([InvQty]) as [InvQty],SUM(LineNetAmount) as LineNetAmount,SUM(TaxableAmount) as TaxableAmount,SUM([ReverseCharge]) as [ReverseCharge]
		INTO #GrandTotal
		FROM #LineLevelGross WHERE TaxFlag=0 and [UsrId]=@Pi_UsrId
		UPDATE Y SET  
		Y.[InvQty]=X.[InvQty] ,Y.LineNetAmount=X.[LineNetAmount],Y.[TaxableAmount]=X.TaxableAmount,
		Y.[ReverseCharge]=X.[ReverseCharge]
		FROM RptProductWiseSalesTaxGST Y INNER JOIN #GrandTotal X ON X.[Group Name]=Y.[Group Name]
		AND X.GroupType=Y.GroupType WHERE Y.[UsrId]=@Pi_UsrId
		---TILL HERE
			DELETE FROM Report_Template_GST WHERE ReportId=1 and RptId=@Pi_RptId
			INSERT INTO Report_Template_GST(ReportId,RptId,RptName ,ColId,FieldName,FieldSize,FieldSelection,GroupField,
			FieldType,Alignment,HeaderCaption,HeaderCaption1,HeaderCaption2,
			RoundOff,CreatedDate)
			SELECT 1,401,'Product Wise Output Tax',1,'RtrStateCode',20,1,0,1,1,'Retailer','State','Code',0,GETDATE()
			UNION ALL
			SELECT 1,401,'Product Wise Output Tax',2,'RtrStateName',50,1,0,1,1,'Retailer','State','Name',0,GETDATE()
			UNION ALL
			SELECT 1,401,'Product Wise Output Tax',3,'RtrGSTIN',20,1,0,1,1,'Retailer','GST Tin','',0,GETDATE()
			UNION ALL
			SELECT 1,401,'Product Wise Output Tax',4,'RetailerCode',50,1,0,1,1,'Retailer','Code','',0,GETDATE()
			UNION ALL
			SELECT 1,401,'Product Wise Output Tax',5,'RetailerName',50,1,0,1,1,'Retailer','Name','',0,GETDATE()
			UNION ALL
			SELECT 1,401,'Product Wise Output Tax',6,'RtrShipAdd',75,1,0,1,1,'Retailer','Shipping','Address',0,GETDATE()
			UNION ALL
			SELECT 1,401,'Product Wise Output Tax',7,'RtrShipAdd1',75,1,0,1,1,'Retailer','Shipping','Address2',0,GETDATE()
			UNION ALL
			SELECT 1,401,'Product Wise Output Tax',8,'IOTaxType',75,1,0,1,1,'Sales/','Return','',0,GETDATE()
			UNION ALL
			SELECT 1,401,'Product Wise Output Tax',9,'RefNo',75,1,0,1,1,'Invoice','Number','',0,GETDATE()
			UNION ALL
			SELECT 1,401,'Product Wise Output Tax',10,'InvDate',75,1,0,1,4,'Invoice','Date','',0,GETDATE()
			UNION ALL
			SELECT 1,401,'Product Wise Output Tax',11,'Product Name',75,1,0,1,1,'Product Name','','',0,GETDATE()
			UNION ALL
			SELECT 1,401,'Product Wise Output Tax',12,'Product Code',75,1,0,1,1,'Product Code','','',0,GETDATE()
			UNION ALL
			SELECT 1,401,'Product Wise Output Tax',13,'HSN Code',75,1,0,1,1,'HSN Code','','',0,GETDATE()
			UNION ALL
			SELECT 1,401,'Product Wise Output Tax',14,'UPC',20,1,0,2,2,'UPC','','',0,GETDATE()
			UNION ALL
			SELECT 1,401,'Product Wise Output Tax',15,'InvQty',75,1,0,2,2,'Total','Quantity','',0,GETDATE()
			UNION ALL
			SELECT 1,401,'Product Wise Output Tax',16,'TaxableAmount',20,1,0,2,3,'Taxable','Amount','',2,GETDATE()
			SET @Str=''
			SELECT @MaxId=MAX(ColId)+1,@ReportId=ReportId FROM  Report_Template_GST (NOLOCK) WHERE RptId=@Pi_RptId
			GROUP BY ReportId
			SELECT @start = 1, @end = CHARINDEX(',', @PCSelect) 
			WHILE @start < LEN(@PCSelect) + 1 BEGIN 
				IF @end = 0  
				SET @end = LEN(@PCSelect) + 1
				SET @Str=SUBSTRING(@PCSelect, @start, @end - @start)
				INSERT INTO Report_Template_GST(ReportId,RptId,RptName,ColId,FieldName,FieldSize,
				FieldSelection,GroupField,FieldType,Alignment,HeaderCaption,HeaderCaption1,HeaderCaption2,RoundOff,
				CreatedDate)  
				SELECT TOP 1 ReportId,RptId,RptName,@MaxId,SUBSTRING(@PCSelect, @start, @end - @start),
				18,1,0,2,3,SUBSTRING(@PCSelect, @start, @end - @start)				
				,'','',2,Getdate()
				FROM Report_Template_GST WHERE RptId=@Pi_RptId
				
				SET @start = @end + 1 
				SET @end = CHARINDEX(',', @PCSelect, @start)
				SET @MaxId=@MaxId+1
			END 
			
			INSERT INTO Report_Template_GST(ReportId,RptId,RptName,ColId,FieldName,FieldSize,
			FieldSelection,GroupField,FieldType,Alignment,HeaderCaption,HeaderCaption1,HeaderCaption2,RoundOff,
			CreatedDate)  
			SELECT TOP 1 ReportId,RptId,RptName,@MaxId+1,'LineNetAmount',
			18,1,0,2,3,'Product','Level','NetAmount',2,Getdate()
			FROM Report_Template_GST WHERE RptId=@Pi_RptId	
			
			INSERT INTO Report_Template_GST(ReportId,RptId,RptName,ColId,FieldName,FieldSize,
			FieldSelection,GroupField,FieldType,Alignment,HeaderCaption,HeaderCaption1,HeaderCaption2,RoundOff,
			CreatedDate)  
			SELECT TOP 1 ReportId,RptId,RptName,@MaxId+2,'ReverseCharge',
			18,1,0,2,3,'Reverse','Charge','',2,Getdate()
			FROM Report_Template_GST WHERE RptId=@Pi_RptId	
			
			UPDATE Report_template_GST SET FieldName=REPLACE(REPLACE(FieldName,']',''),'[','')
			WHERE RptId=@Pi_RptId 
			DELETE FROM RptDataCount WHERE RptId = @Pi_RptId AND UserId = @Pi_UsrId
			INSERT INTO RptDataCount (RptId,RecCount,ErrNo,UserId)
			SELECT @Pi_RptId,Count(*) as RecCount,@ErrNo,@Pi_UsrId FROM RptProductWiseSalesTaxGST
			WHERE UsrId=@Pi_UsrId
			SELECT * FROM RptProductWiseSalesTaxGST WHERE UsrId=@Pi_UsrId
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_RptPurchaseTaxGST' AND TYPE ='P')
DROP PROCEDURE Proc_RptPurchaseTaxGST
GO
CREATE PROCEDURE Proc_RptPurchaseTaxGST
(
	@Pi_RptId			INT,
	@Pi_UsrId			INT,
	@Pi_SnapId			INT,
	@Pi_DbName			nvarchar(50),
	@Pi_SnapRequired	INT,
	@Pi_GetFromSnap		INT,
	@Pi_CurrencyId		INT
)
AS
/*********************************
* PROCEDURE	: Proc_RptPurchaseTaxGST
* PURPOSE	: To get the GST Purchase Tax details
* CREATED	: Raja C
* CREATED DATE	: 20/05/2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
BEGIN
SET NOCOUNT ON
	--Filter Variable
	DECLARE @FromDate		AS	DATETIME
	DECLARE @ToDate			AS	DATETIME
	DECLARE @CmpId	        AS	INT
	DECLARE @ErrNo	 	AS	INT
		
	DECLARE @SQL as Varchar(MAX)
	DECLARE @MaxId as INT
	DECLARE @ReportId as INT
	DECLARE @start INT, @end INT 
	DECLARE @Str AS VARCHAR(100)
	DECLARE @CreateTable AS VARCHAR(7000)
		
	SET @ErrNo=0
	SELECT @FromDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,10,@Pi_UsrId)
	SELECT @ToDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,11,@Pi_UsrId)
	SET @CmpId = (SElect  TOP 1 iCountid FRom Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId))	
	
	
	IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='U' AND NAME='RptPurchaseTaxGST')
	BEGIN
		DELETE FROM RptPurchaseTaxGST WHERE UsrId=@Pi_UsrId
	END
	
		CREATE TABLE #TmpRptIOTaxSummary
		(   
		    [GRN No] NVarchar(100),
            [GRN date] DateTime,
			[InvDate] DateTime,
			[InvId] [bigint] NULL,
			[RefNo] [varchar](100) NULL,
			[ODN Number] [varchar](100) NULL,
			[SupplierCode] Varchar(75),
			[SupplierName] Varchar(150),
			[SupplierAddress] Varchar(150),
			[Supplier GSTIN] Varchar(150),
			[Supplier State] Varchar(150),
			[Product Name] Varchar(150),			
			[Product Code] Varchar(75),
			[HSN Code] Varchar(75),
			[SpmId] [int] NULL,
			[Prdid] [int] NULL,
			[InvQty] [int] NULL,
			[CmpId] [int] NULL,
			[TaxPerc] [varchar](50) NULL,
			[TaxableAmount] [numeric](38,2) NULL,
			[IOTaxType] [varchar](100) NULL,
			[TaxFlag] [int] NULL,
			[TaxPercent] [numeric](38,2) NULL,
			[TaxId] [int] NULL,	
			[LineNetAmount] Numeric(36,2),
			[UPC] INT,
			[Group Name]  Varchar(200),
			[GroupType] INT,
			[UsrId] [int] NULL
		)
		
		SELECT Prdid,Max(ConversionFactor) as UPC 
		INTO #UOM
		FROM Product P (NOLOCK) INNER JOIN Uomgroup UG (NOLOCK) ON P.UomGroupId=UG.UomGroupId
		GROUP BY Prdid
		
		INSERT INTO #TmpRptIOTaxSummary([GRN No],[GRN date],[InvDate],[InvId],[RefNo],[ODN Number],[SupplierCode],[SupplierName],[SupplierAddress],
		[Supplier GSTIN],[Supplier State],[Product Name] ,[Product Code],[HSN Code],[SpmId],[Prdid],[InvQty],[CmpId],[TaxPerc],[TaxableAmount],[IOTaxType] ,
		[TaxFlag],[TaxPercent],[TaxId],LineNetAmount,[UPC],[Group Name],[GroupType],[UsrId])
		SELECT PurRcptRefNo,GoodsRcvdDate,PR.InvDate AS InvDate,PR.PurRcptId AS InvId,CmpInvNo AS RefNo,PR.PurOrderRefNo,SpmCode,SpmName,SpmAdd1,'' as SupplierGSTIN,'' as SupplierState,
		PrdName,PrdCCode,'' as [HSN Code],S.SpmId AS SpmId,P.PrdId as Prdid,SUM(PRP.RcvdGoodBaseQty) AS InvQty,  
		C.CmpId AS CmpId,TC.TaxCode +' Rate' as TaxPerc,
		SUM(TaxableAmount) as TaxableAmount,'Purchase' as IOTaxType,0 as TaxFlag,TaxPerc as TaxPercent,PRPT.TaxId,
		SUM(PrdNetAmount) as [LineNetAmount],UPC,'' as [Group Name] ,2 as [GroupType],@Pi_UsrId AS UserId  
		FROM 
		PurchaseReceipt PR WITH (NOLOCK)  
		INNER JOIN PurchaseReceiptProduct PRP WITH (NOLOCK) ON PR.PurRcptId=PRP.PurRcptId 
		INNER JOIN PurchaseReceiptProductTax PRPT WITH (NOLOCK) ON PR.PurRcptId=PRPT.PurRcptId AND  PRP.PurRcptId=PRPT.PurRcptId  AND PRP.PrdSlNo=PRPT.PrdSlNo 
		INNER JOIN Product P WITH (NOLOCK) ON P.PrdId = PRP.PrdId   
		INNER JOIN #UOM U ON U.Prdid=P.Prdid and U.PrdId=PRP.PrdId 
		INNER JOIN ProductBatch PB WITH (NOLOCK) ON PB.PrdId = PRP.PrdId AND PB.PrdBatId = PRP.PrdBatId AND PB.PrdId = P.PrdId  
		INNER JOIN Supplier S WITH (NOLOCK) ON S.SpmId = PR.SpmId
		INNER JOIN TaxConfiguration TC (NOLOCK) ON TC.TaxId =PRPT.TaxId    
		LEFT OUTER JOIN Company C ON C.CmpId = P.CmpId   
		WHERE PR.InvDate  Between @FromDate and @ToDate and PR.Status=1
		AND (C.CmpId = (CASE @CmpId WHEN 0 THEN C.CmpId ELSE 0 END) OR
		C.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId)))
		Group By PurRcptRefNo,GoodsRcvdDate,PR.PurRcptId,PR.InvDate,CmpInvNo,PR.PurOrderRefNo,SpmCode,SpmName,SpmAdd1,PrdName,PrdCCode,S.SpmId,P.PrdId,
		C.CmpId,TC.TaxCode,TaxPerc,PRPT.TaxId,[UPC]
		HAVING Sum(TaxableAmount) >0  
			
		INSERT INTO #TmpRptIOTaxSummary([GRN No],[GRN date],[InvDate],[InvId],[RefNo],[ODN Number],[SupplierCode],[SupplierName],[SupplierAddress],
		[Supplier GSTIN],[Supplier State],[Product Name] ,[Product Code],[HSN Code],[SpmId],[Prdid],[InvQty],[CmpId],[TaxPerc],[TaxableAmount],[IOTaxType] ,
		[TaxFlag],[TaxPercent],[TaxId],LineNetAmount,[UPC],[Group Name],[GroupType],[UsrId]) 
		SELECT PurRcptRefNo,GoodsRcvdDate,PR.InvDate AS InvDate,PR.PurRcptId AS InvId,CmpInvNo AS RefNo,PR.PurOrderRefNo,SpmCode,SpmName,SpmAdd1,'' as SupplierGSTIN,'' as SupplierState,
		PrdName,PrdCCode,'' as [HSN Code],S.SpmId AS SpmId,P.PrdId as Prdid,SUM(PRP.RcvdGoodBaseQty) AS InvQty,  
		C.CmpId AS CmpId,TC.TaxCode +'Value' as TaxPerc,
		SUM(TaxableAmount) as TaxableAmount,'Purchase' as IOTaxType,1 as TaxFlag,SUM(PRPT.TaxAmount) as TaxPercent,PRPT.TaxId,
		SUM(PrdNetAmount) as [LineNetAmount],UPC,'' as [Group Name] ,2 as [GroupType],@Pi_UsrId AS UserId  
		FROM 
		PurchaseReceipt PR WITH (NOLOCK)  
		INNER JOIN PurchaseReceiptProduct PRP WITH (NOLOCK) ON PR.PurRcptId=PRP.PurRcptId 
		INNER JOIN PurchaseReceiptProductTax PRPT WITH (NOLOCK) ON PR.PurRcptId=PRPT.PurRcptId AND  PRP.PurRcptId=PRPT.PurRcptId  AND PRP.PrdSlNo=PRPT.PrdSlNo 
		INNER JOIN Product P WITH (NOLOCK) ON P.PrdId = PRP.PrdId 
		INNER JOIN #UOM U ON U.Prdid=P.Prdid and U.PrdId=PRP.PrdId    
		INNER JOIN ProductBatch PB WITH (NOLOCK) ON PB.PrdId = PRP.PrdId AND PB.PrdBatId = PRP.PrdBatId AND PB.PrdId = P.PrdId  
		INNER JOIN Supplier S WITH (NOLOCK) ON S.SpmId = PR.SpmId
		INNER JOIN TaxConfiguration TC (NOLOCK) ON TC.TaxId =PRPT.TaxId    
		LEFT OUTER JOIN Company C ON C.CmpId = P.CmpId   
		AND (C.CmpId = (CASE @CmpId WHEN 0 THEN C.CmpId ELSE 0 END) OR
		C.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId)))
		WHERE PR.InvDate Between @FromDate and @ToDate and PR.Status=1
		Group By PurRcptRefNo,GoodsRcvdDate,PR.PurRcptId,PR.InvDate,CmpInvNo,PR.PurOrderRefNo,SpmCode,SpmName,SpmAdd1,PrdName,PrdCCode,S.SpmId,P.PrdId,
		C.CmpId,TC.TaxCode,TaxPerc,PRPT.TaxId,[UPC]
		HAVING  SUM(PRPT.TaxAmount+PRPT.TaxableAmount) > 0 		
		
		
		INSERT INTO #TmpRptIOTaxSummary([GRN No],[GRN date],[InvDate],[InvId],[RefNo],[ODN Number],[SupplierCode],[SupplierName],[SupplierAddress],
		[Supplier GSTIN],[Supplier State],[Product Name] ,[Product Code],[HSN Code],[SpmId],[Prdid],[InvQty],[CmpId],[TaxPerc],[TaxableAmount],[IOTaxType] ,
		[TaxFlag],[TaxPercent],[TaxId],LineNetAmount,[UPC],[Group Name],[GroupType],[UsrId]) 
		SELECT PurRcptRefNo,'' AS [GRN date],PurRetDate AS InvDate,PR.PurRetId AS InvId,PurRetRefNo AS RefNo,'',SpmCode,SpmName,SpmAdd1,'' as SupplierGSTIN,'' as SupplierState,
		PrdName,PrdCCode,'' as [HSN Code],S.SpmId AS SpmId,P.PrdId as Prdid,-1*SUM(PRP.RetInvBaseQty) AS InvQty,  
		C.CmpId AS CmpId,TC.TaxCode +' Rate' as TaxPerc,
		-1*SUM(TaxableAmount) as TaxableAmount,'PurchaseReturn' as IOTaxType,0 as TaxFlag,TaxPerc as TaxPercent,PRPT.TaxId,
		-1*SUM(PrdNetAmount) as [LineNetAmount],UPC,'' as [Group Name] ,2 as [GroupType],@Pi_UsrId AS UserId  
		FROM 
		PurchaseReturn  PR WITH (NOLOCK)  
		INNER JOIN PurchaseReturnProduct PRP WITH (NOLOCK) ON PR.PurRetId=PRP.PurRetId 
		INNER JOIN PurchaseReturnProductTax PRPT WITH (NOLOCK) ON PR.PurRetId=PRPT.PurRetId AND  PRP.PurRetId=PRPT.PurRetId  AND PRP.PrdSlNo=PRPT.PrdSlNo 
		INNER JOIN Product P WITH (NOLOCK) ON P.PrdId = PRP.PrdId
		INNER JOIN #UOM U ON U.Prdid=P.Prdid and U.PrdId=PRP.PrdId     
		INNER JOIN ProductBatch PB WITH (NOLOCK) ON PB.PrdId = PRP.PrdId AND PB.PrdBatId = PRP.PrdBatId AND PB.PrdId = P.PrdId  
		INNER JOIN Supplier S WITH (NOLOCK) ON S.SpmId = PR.SpmId
		INNER JOIN TaxConfiguration TC (NOLOCK) ON TC.TaxId =PRPT.TaxId    
		LEFT OUTER JOIN Company C ON C.CmpId = P.CmpId  
		AND (C.CmpId = (CASE @CmpId WHEN 0 THEN C.CmpId ELSE 0 END) OR
		C.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId))) 
		WHERE PR.PurRetDate Between @FromDate and @ToDate and PR.Status=1
		Group By PurRcptRefNo,PurRetDate,PR.PurRetId,PurRetRefNo,SpmCode,SpmName,SpmAdd1,PrdName,PrdCCode,S.SpmId,P.PrdId,
		C.CmpId,TC.TaxCode,TaxPerc,PRPT.TaxId,[UPC]
		HAVING SUM(TaxableAmount) >0 		
		
		
		INSERT INTO #TmpRptIOTaxSummary([GRN No],[GRN date],[InvDate],[InvId],[RefNo],[ODN Number],[SupplierCode],[SupplierName],[SupplierAddress],
		[Supplier GSTIN],[Supplier State],[Product Name] ,[Product Code],[HSN Code],[SpmId],[Prdid],[InvQty],[CmpId],[TaxPerc],[TaxableAmount],[IOTaxType] ,
		[TaxFlag],[TaxPercent],[TaxId],LineNetAmount,[UPC],[Group Name],[GroupType],[UsrId]) 
		SELECT PurRcptRefNo,'' AS [GRN date],PurRetDate AS InvDate,PR.PurRetId AS InvId,PurRetRefNo AS RefNo,'',SpmCode,SpmName,SpmAdd1,'' as SupplierGSTIN,'' as SupplierState,
		PrdName,PrdCCode,'' as [HSN Code],S.SpmId AS SpmId,P.PrdId as Prdid,-1*SUM(PRP.RetInvBaseQty) AS InvQty,  
		C.CmpId AS CmpId,TC.TaxCode +' Value' as TaxPerc,
		-1*SUM(TaxableAmount) as TaxableAmount,'PurchaseReturn' as IOTaxType,1 as TaxFlag,-1*SUM(PRPT.TaxAmount) as TaxPercent,PRPT.TaxId,
		-1*SUM(PrdNetAmount) as [LineNetAmount],UPC,'' as [Group Name] ,2 as [GroupType],@Pi_UsrId AS UserId  
		FROM 
		PurchaseReturn  PR WITH (NOLOCK)  
		INNER JOIN PurchaseReturnProduct PRP WITH (NOLOCK) ON PR.PurRetId=PRP.PurRetId 
		INNER JOIN PurchaseReturnProductTax PRPT WITH (NOLOCK) ON PR.PurRetId=PRPT.PurRetId AND  PRP.PurRetId=PRPT.PurRetId  AND PRP.PrdSlNo=PRPT.PrdSlNo 
		INNER JOIN Product P WITH (NOLOCK) ON P.PrdId = PRP.PrdId
		INNER JOIN #UOM U ON U.Prdid=P.Prdid and U.PrdId=PRP.PrdId     
		INNER JOIN ProductBatch PB WITH (NOLOCK) ON PB.PrdId = PRP.PrdId AND PB.PrdBatId = PRP.PrdBatId AND PB.PrdId = P.PrdId  
		INNER JOIN Supplier S WITH (NOLOCK) ON S.SpmId = PR.SpmId
		INNER JOIN TaxConfiguration TC (NOLOCK) ON TC.TaxId =PRPT.TaxId    
		LEFT OUTER JOIN Company C ON C.CmpId = P.CmpId 
		AND (C.CmpId = (CASE @CmpId WHEN 0 THEN C.CmpId ELSE 0 END) OR
		C.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId)))  
		WHERE PR.PurRetDate Between @FromDate and @ToDate and PR.Status=1
		Group By PurRcptRefNo,PurRetDate,PR.PurRetId,PurRetRefNo,SpmCode,SpmName,SpmAdd1,PrdName,PrdCCode,S.SpmId,P.PrdId,
		C.CmpId,TC.TaxCode,TaxPerc,PRPT.TaxId,[UPC]
		HAVING Sum(TaxableAmount+PRPT.TaxAmount) >0 
		
		INSERT INTO #TmpRptIOTaxSummary([GRN No],[GRN date],[InvDate],[InvId],[RefNo],[ODN Number],[SupplierCode],[SupplierName],[SupplierAddress],
		[Supplier GSTIN],[Supplier State],[Product Name] ,[Product Code],[HSN Code],[SpmId],[Prdid],[InvQty],[CmpId],[TaxPerc],[TaxableAmount],[IOTaxType] ,
		[TaxFlag],[TaxPercent],[TaxId],LineNetAmount,[UPC],[Group Name],[GroupType],[UsrId]) 
		SELECT  '' AS [GRN No],'' AS [GRN date],NULL, 0 [InvId],'' AS [RefNo],'' AS [ODN Number],'' AS [SupplierCode],'' AS [SupplierName],''AS [SupplierAddress],'' AS [Supplier GSTIN],
		'' AS [Supplier State],'' AS [Product Name] ,'' AS [Product Code],'' AS [HSN Code],0 [SpmId],0 as Prdid,0 as [InvQty],0 as[CmpId],  [TaxPerc] ,0 as [TaxableAmount],'' as [IOTaxType] ,
		100 as [TaxFlag],SUM([TaxPercent]) as [TaxPercent],0 as [TaxId],0 as  LineNetAmount,0 as [UPC],'ZZZZZZ' as [Group Name],3 as [GroupType],[UsrId]
		FROM #TmpRptIOTaxSummary WHERE TaxFlag=1		
		GROUP BY [UsrId],[TaxPerc]
		
		
		SELECT StateCode,StateName,TinFirst2Digit,MasterRecordId
		INTO #SupplierState 
		FROM UDCHD A (NOLOCK)
		INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId
		INNER JOIN UdcDetails C (NOLOCK) ON B.MasterId=C.MasterId
		and B.UdcMasterId=C.UdcMasterId
		INNER JOIN UdcDefault D (NOLOCK) ON D.MasterId=C.MasterId and D.MasterId=B.MasterId
		and D.UdcMasterId=C.UdcMasterId and D.UdcMasterId=B.UdcMasterId
		INNER JOIN StateMaster E (NOLOCK) ON E.StateName=D.ColValue and E.StateName=C.ColumnValue
		WHERE MasterName='Supplier Master' and ColumnName='State Name'
		
					
		UPDATE A  SET A.[Supplier State]=B.StateName 
		FROM #TmpRptIOTaxSummary A 
		INNER JOIN  #SupplierState  B  ON A.Spmid=B.MasterRecordId
		
		SELECT MasterRecordId,ColumnName AS SupplierGSTIN
		INTO #SupplierGSTIN
		FROM UDCHD A (NOLOCK)
		INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId
		INNER JOIN UdcDetails C (NOLOCK) ON B.MasterId=C.MasterId
		and B.UdcMasterId=C.UdcMasterId	
		WHERE MasterName='Supplier Master' and ColumnName='GSTIN'
		
        UPDATE A  SET A.[Supplier GSTIN]=B.SupplierGSTIN 
		FROM #TmpRptIOTaxSummary A 
		INNER JOIN  #SupplierGSTIN  B  ON A.Spmid=B.MasterRecordId
		
		
		UPDATE TR SET  [HSN Code]=C.ColumnValue
		FROM UDCHD A (NOLOCK)
		INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId
		INNER JOIN UdcDetails C (NOLOCK) ON B.MasterId=C.MasterId
		and B.UdcMasterId=C.UdcMasterId
		INNER JOIN #TmpRptIOTaxSummary TR ON TR.Prdid=C.MasterRecordId
		WHERE MasterName='Product Master' and ColumnName='HSN Code'
		
		
		IF NOT EXISTS(SELECT 'X' FROM #TmpRptIOTaxSummary)
		BEGIN
			DELETE FROM RptDataCount WHERE RptId = @Pi_RptId AND UserId = @Pi_UsrId
			INSERT INTO RptDataCount (RptId,RecCount,ErrNo,UserId)
			SELECT @Pi_RptId,Count(*) as RecCount,@ErrNo,@Pi_UsrId FROM RptProductWiseSalesTaxGST
			WHERE UsrId=@Pi_UsrId
			SELECT * FROM RptProductWiseSalesTaxGST WHERE UsrId=@Pi_UsrId
			RETURN
		END
		
		
--		--Remove Duplicate [TaxableAmount] and LinelevelNetAmount
        SELECT DISTINCT
		[GRN No],[GRN date],[InvDate],[InvId],[RefNo],[SupplierCode],[SupplierName],[SupplierAddress],
		[Supplier GSTIN],[Supplier State],[Product Name] ,[Product Code],[HSN Code],[SpmId],[Prdid],[InvQty],[CmpId],
		[TaxableAmount],[IOTaxType],[TaxFlag],LineNetAmount,[UsrId]
		INTO #LineLevelGross	
		FROM #TmpRptIOTaxSummary WHERE UsrId=@Pi_UsrId and TaxFlag=0
		DECLARE @ColSelect AS Varchar(MAX)
		DECLARE @ColSelectDataType AS Varchar(5000)
		DECLARE @TableCol AS Varchar(2000)
		DECLARE @Columns1 AS Varchar(7000)
		DECLARE @OrderBy AS VARCHAR(2000)
		DECLARE @PCSelect AS VARCHAR(3000)
		SET @PCSelect=''
		SET @ColSelect=''
		SET @ColSelectDataType=''
		SET @TableCol=''
		SET @Columns1=''
		SET @CreateTable=''
		SET @OrderBy=''
		
		CREATE TABLE #DynamicCol
		(
			Slno INT IDENTITY(1,1),
			Taxperc	Varchar(50),
			TaxId INT
		)
		INSERT INTO #DynamicCol(Taxperc,TaxId)
		SELECT DISTINCT Taxperc,TaxId FROM #TmpRptIOTaxSummary WHERE TaxFlag IN(0,1) and GroupType=2
		ORDER BY TaxId	
		SELECT @ColSelect=@ColSelect+'ISNULL('+QuoteName(Taxperc)+',0) as '+QuoteName(Taxperc)+',' FROM #DynamicCol ORDER BY Slno
		SELECT @PCSelect=@PCSelect+Quotename(Taxperc)+',' FROM #DynamicCol ORDER BY Slno
		SET @PCSelect=LEFT(@PCSelect,LEN(@PCSelect)-1)
		SELECT @ColSelectDataType=@ColSelectDataType+QuoteName(Taxperc)+' Numeric(36,2),' FROM #DynamicCol ORDER BY Slno
		SET @ColSelect='SELECT SupplierCode,SupplierName,SupplierAddress,[Supplier GSTIN],[Supplier State],IOTaxType,[GRN No],[GRN date],RefNo,'+
        'InvDate,[ODN Number],[Product Code],[Product Name],[HSN Code],[UPC],InvQty,TaxableAmount,'+@ColSelect+'LineNetAmount,[Group Name],[GroupType],[UsrId]'
		SET @TableCol= 'Slno BIGINT IDENTITY(1,1),[SupplierCode] Varchar(75),[SupplierName] Varchar(150),[SupplierAddress] Varchar(150),[Supplier GSTIN] Varchar(150),'+
        '[Supplier State] Varchar(150),[IOTaxType] [varchar](100) NULL,[GRN No] NVarchar(100),[GRN date] DateTime,[Invoice Number] NVarchar(100),[Invoice Date] Datetime,[ODN Number] Varchar(100),'+
        '[Product Code] Varchar(75),[Product Name] Varchar(150),[HSN Code] Varchar(50),UPC INT,[InvQty] [int] NULL,[TaxableAmount] [numeric](38,2) NULL,'
		SET @Columns1='SELECT SupplierCode,SupplierName,SupplierAddress,[Supplier GSTIN],[Supplier State],IOTaxType,[GRN No],[GRN date],RefNo,'+
        'Invdate,[ODN Number],[Product Code],[Product Name],[HSN Code],UPC,[InvQty],[TaxableAmount],LineNetAmount,TaxPercent ,Taxperc,[Group Name],[GroupType],[UsrId] FROM #TmpRptIOTaxSummary'
		SET @OrderBy=' ORDER BY [Group Name],[GroupType],IOTaxType,Invdate,SupplierName,[Product Name]'
		SET @CreateTable=' IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME=''RptPurchaseTaxGST'' and XTYPE=''U'')'+
		' DROP TABLE RptPurchaseTaxGST'+
		' CREATE TABLE RptPurchaseTaxGST ('+@TableCol+@ColSelectDataType+' LineNetAmount Numeric(36,2),[Group Name] Varchar(100),Grouptype TINYINT,UsrId INT)'
		--PRINT @CreateTable
	    EXEC(@CreateTable)
		SET @SQL=' INSERT INTO RptPurchaseTaxGST '+ @ColSelect+ ' FROM'+
		'('+@Columns1+
		') PS'+
		' PIVOT'+
		'('+
			' SUM(TaxPercent) FOR Taxperc IN('+@PCSelect+')'+
		')PVTTax '+ @OrderBy
		--PRINT @SQL
		EXEC(@SQL)
		----GRAND TOTAL UPDATE
		SELECT 'ZZZZZZ' as [Group Name], 3 as GroupType ,SUM([InvQty]) as [InvQty],SUM(LineNetAmount) as LineNetAmount,SUM(TaxableAmount) as TaxableAmount
		INTO #GrandTotal
		FROM #LineLevelGross WHERE TaxFlag=0 and [UsrId]=@Pi_UsrId
		UPDATE Y SET  
		Y.[InvQty]=X.[InvQty] ,Y.LineNetAmount=X.[LineNetAmount],Y.[TaxableAmount]=X.TaxableAmount 
		FROM RptPurchaseTaxGST Y INNER JOIN #GrandTotal X ON X.[Group Name]=Y.[Group Name]
		AND X.GroupType=Y.GroupType WHERE Y.[UsrId]=@Pi_UsrId
		---TILL HERE
			DELETE FROM Report_Template_GST WHERE ReportId=1 and RptId=@Pi_RptId
			INSERT INTO Report_Template_GST(ReportId,RptId,RptName ,ColId,FieldName,FieldSize,FieldSelection,GroupField,
			FieldType,Alignment,HeaderCaption,HeaderCaption1,HeaderCaption2,
			RoundOff,CreatedDate)
			SELECT 1,402,'Product Wise Input Tax',1,'Supplier State',20,1,0,1,1,'Supplier','State','Name',0,GETDATE()
			UNION ALL		
			SELECT 1,402,'Product Wise Input Tax',2,'SupplierCode',50,1,0,1,1,'Supplier','Code','',0,GETDATE()
			UNION ALL
			SELECT 1,402,'Product Wise Input Tax',3,'SupplierName',50,1,0,1,1,'Supplier','Name','',0,GETDATE()
			UNION ALL
			SELECT 1,402,'Product Wise Input Tax',4,'SupplierAddress',75,1,0,1,1,'Supplier','Address','',0,GETDATE()			
			UNION ALL		
			SELECT 1,402,'Product Wise Input Tax',5,'IOTaxType',75,1,0,1,1,'Purchase/','PurReturn','',0,GETDATE()
			UNION ALL			
			SELECT 1,402,'Product Wise Input Tax',6,'GRN No',75,1,0,1,1,'GRN.','Number','',0,GETDATE()
			UNION ALL
			SELECT 1,402,'Product Wise Input Tax',7,'GRN date',75,1,0,1,4,'GRN.','Date','',0,GETDATE()
			UNION ALL
			SELECT 1,402,'Product Wise Input Tax',8,'Invoice Number',75,1,0,1,1,'Comp InvoiceNo/','ReturnRefNo','',0,GETDATE()
			UNION ALL
			SELECT 1,402,'Product Wise Input Tax',9,'Invoice Date',75,1,0,1,4,'Invoice','Date','',0,GETDATE()
			UNION ALL
			SELECT 1,402,'Product Wise Input Tax',10,'[ODN Number]',75,1,0,1,1,'Purchase Order','Number','',0,GETDATE()
			UNION ALL			
			SELECT 1,402,'Product Wise Input Tax',11,'Product Code',75,1,0,1,1,'Product Code','','',0,GETDATE()
			UNION ALL
			SELECT 1,402,'Product Wise Input Tax',12,'Product Name',75,1,0,1,1,'Product Name','','',0,GETDATE()
			UNION ALL			
			SELECT 1,402,'Product Wise Input Tax',13,'HSN Code',75,1,0,1,1,'HSN Code','','',0,GETDATE()
			UNION ALL		
			SELECT 1,402,'Product Wise Input Tax',14,'UPC',20,1,0,2,2,'UPC','','',0,GETDATE()
			UNION ALL
			SELECT 1,402,'Product Wise Input Tax',15,'InvQty',75,1,0,2,2,'Total','Quantity','',0,GETDATE()
			UNION ALL
			SELECT 1,402,'Product Wise Input Tax',16,'TaxableAmount',20,1,0,2,3,'Taxable','Amount','',2,GETDATE()
		
			SET @Str=''
			SELECT @MaxId=MAX(ColId)+1,@ReportId=ReportId FROM  Report_Template_GST (NOLOCK) WHERE RptId=@Pi_RptId
			GROUP BY ReportId
			SELECT @start = 1, @end = CHARINDEX(',', @PCSelect) 
			WHILE @start < LEN(@PCSelect) + 1 BEGIN 
				IF @end = 0  
				SET @end = LEN(@PCSelect) + 1
				SET @Str=SUBSTRING(@PCSelect, @start, @end - @start)
				INSERT INTO Report_Template_GST(ReportId,RptId,RptName,ColId,FieldName,FieldSize,
				FieldSelection,GroupField,FieldType,Alignment,HeaderCaption,HeaderCaption1,HeaderCaption2,RoundOff,
				CreatedDate)  
				SELECT TOP 1 ReportId,RptId,RptName,@MaxId,SUBSTRING(@PCSelect, @start, @end - @start),
				18,1,0,2,3,SUBSTRING(@PCSelect, @start, @end - @start)				
				,'','',2,Getdate()
				FROM Report_Template_GST WHERE RptId=@Pi_RptId
				
				SET @start = @end + 1 
				SET @end = CHARINDEX(',', @PCSelect, @start)
				SET @MaxId=@MaxId+1
			END 
			
			INSERT INTO Report_Template_GST(ReportId,RptId,RptName,ColId,FieldName,FieldSize,
			FieldSelection,GroupField,FieldType,Alignment,HeaderCaption,HeaderCaption1,HeaderCaption2,RoundOff,
			CreatedDate)  
			SELECT TOP 1 ReportId,RptId,RptName,@MaxId+1,'LineNetAmount',
			18,1,0,2,3,'Product','Level','NetAmount',2,Getdate()
			FROM Report_Template_GST WHERE RptId=@Pi_RptId	
			
			UPDATE Report_template_GST SET FieldName=REPLACE(REPLACE(FieldName,']',''),'[','')
			WHERE RptId=@Pi_RptId 
			DELETE FROM RptDataCount WHERE RptId = @Pi_RptId AND UserId = @Pi_UsrId
			INSERT INTO RptDataCount (RptId,RecCount,ErrNo,UserId)
			SELECT @Pi_RptId,Count(*) as RecCount,@ErrNo,@Pi_UsrId FROM RptProductWiseSalesTaxGST
			WHERE UsrId=@Pi_UsrId
			SELECT * FROM RptPurchaseTaxGST WHERE UsrId=@Pi_UsrId
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_RptOutputSaleTaxGST' AND TYPE ='P')
DROP PROCEDURE Proc_RptOutputSaleTaxGST
GO
/*  
BEGIN tran  
EXEC Proc_RptOutputSaleTaxGST 404,2,0,'GSTTAX',0,0,1  
Select * from RptInputtaxCreditGST  
ROLLBACK tran   
*/  
CREATE PROCEDURE Proc_RptOutputSaleTaxGST 
(  
 @Pi_RptId   INT,  
 @Pi_UsrId   INT,  
 @Pi_SnapId   INT,  
 @Pi_DbName   NVarchar(100),  
 @Pi_SnapRequired INT,  
 @Pi_GetFromSnap  INT,  
 @Pi_CurrencyId  INT  
)  
AS  
/*********************************  
* PROCEDURE : Proc_RptOutputSaleTaxGST  
* PURPOSE : To get the Output Tax  
* CREATED : Murugan.R  
* CREATED DATE : 25/08/2017  
* MODIFIED  
* DATE      AUTHOR     DESCRIPTION  
------------------------------------------------  
* {date} {developer}  {brief modification description}  
* DATE         AUTHOR         CR/BZ	     USER STORY ID           DESCRIPTION                         
***************************************************************************************************
  25-04-2019   M LAKSHMAN	   BZ        ILCRSTPAR4195            As per client request Decimal values 2 digits validation included
****************************************************************************************************/    
BEGIN  
SET NOCOUNT ON  
 --Filter Variable  
 DECLARE @FromDate  AS DATETIME  
 DECLARE @ToDate   AS DATETIME  
 DECLARE @CmpId         AS INT  
 DECLARE @ErrNo   AS INT  
 DECLARE @SQL as Varchar(MAX)  
 DECLARE @MaxId as INT  
 DECLARE @ReportId as INT  
 DECLARE @start INT, @end INT   
 DECLARE @Str AS NVarchar(500)  
 DECLARE @CreateTable AS VARCHAR(max)  
 SET @ErrNo=0  
 SELECT @FromDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,10,@Pi_UsrId)  
 SELECT @ToDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,11,@Pi_UsrId)  
 SET @CmpId = (SElect  TOP 1 iCountid FRom Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId))  
 --SET @FromDate='2017-05-01'  
 --SET @ToDate='2017-07-30'  
 --select * from ReportFilterDt  
  TRUNCATE TABLE RptOutputSaleTaxGST  
  DECLARE @DynamicLineAmountFields as VARCHAR(300)  
  DECLARE @DynamicLineAmountFields1 as VARCHAR(300)  
  DECLARE @DynamicLineAmountFields2 as VARCHAR(300)  
  CREATE TABLE #TaxHSNSummary  
  (  
   StateCode NVarchar(500),  
   StateName NVarchar(500),  
   GSTin Varchar(1000),  
   RetailerType NVarchar(500),  
   RtrCode NVarchar(500),  
   Rtrname NVarchar(500),   
   Refid BIGINT,  
   RefNo NVarchar(500),  
   RefDate DateTime,  
   RtrId INT,  
   GrossAmount Numeric(18,4),  
   TaxableAmount Numeric(32,4),  
   NetAmount numeric(24,4),  
   Taxname NVarchar(500),  
   DynamicAmt Numeric(24,4),  
   TaxType NVarchar(500),  
   SalesOrderType TinyInt,  
   TaxFlag TinyInt ,  
   Taxper Numeric(10,2),  
   TaxId INT,  
   [Group Name] NVarchar(500),  
   [GroupType] Tinyint,  
   [UsrId] INT  
  )  
  SELECT Salid,Prdslno,SUM(TaxableAmount) as TaxableAmount  
  INTO #SalesTaxableAmount  
  FROM(  
  SELECT S.Salid,PrdSlno,SUM(DISTINCT TaxableAmount) as TaxableAmount  
  FROM SalesInvoiceProductTax  S  (NOLOCK) INNER JOIN SalesInvoice SI (NOLOCK) ON S.SalId=SI.Salid  
  WHERE  TaxableAmount>0 and DlvSts>3  
  AND SI.SalInvDate  Between @FromDate AND @ToDate and VatGST='GST'  
  GROUP BY S.Salid,PrdSlno   
  )X GROUP BY Salid,Prdslno  
  SELECT ReturnID,Prdslno,SUM(TaxableAmount) as TaxableAmount  
  INTO #RetunrTaxableAmount  
  FROM(  
  SELECT S.ReturnID,PrdSlno,SUM(DISTINCT TaxableAmt) as TaxableAmount  
  FROM ReturnProductTax  S  (NOLOCK) INNER JOIN ReturnHeader SI (NOLOCK) ON S.ReturnID=SI.ReturnID  
  WHERE  TaxableAmt>0 AND SI.ReturnDate  Between @FromDate AND @ToDate and Status=0  
  GROUP BY S.ReturnID,PrdSlno  
  )X GROUP BY  ReturnID,Prdslno  
  INSERT INTO #TaxHSNSummary (StateCode,StateName,GSTin,RetailerType,RtrCode,Rtrname,Refid,RefNo,  
  RefDate,RtrId,GrossAmount,TaxableAmount,NetAmount,Taxname,DynamicAmt,TaxType,SalesOrderType,taxFlag,  
  Taxper,TaxId,[Group Name],[GroupType],[UsrId])  
  SELECT '' as StateCode,'' as StateName,'' as GSTin,'' as RetailerType,RtrCode,Rtrname,  
  S.Salid as RefId,SalinvNo as RefNo,Salinvdate as RefDate,R.RtrId,SUM(PrdGrossAmount) as PrdGrossAmount,  
  SUM(ST.TaxableAmount),SUM(PrdNetAmount) as NetAmount,TaxCode +'~TaxableAmount~' +CAST(CAST(TaxPerc as Numeric(10,2)) as Varchar(1000)) as TaxName,  
  SUM(SPT.TaxableAmount) as DynamicAmt,'Sales of Goods' as TaxType,1 as SalesOrderType,  
  0 as TaxFlag,TaxPerc,SPT.TaxId,'' [Group Name],2 as [GroupType],@Pi_UsrId as [UsrId]  
  FROM SalesInvoice S (NOLOCK)   
  INNER JOIN SalesInvoiceProduct SIP (NOLOCK) ON S.Salid=SIP.SalId  
  INNER JOIN SalesInvoiceProductTax SPT (NOLOCK) ON SPT.SalId=SIP.SalId and SPT.SalId=S.SalId and SIP.SlNo=SPT.PrdSlNo  
  INNER JOIN #SalesTaxableAmount ST ON ST.SalId=SPT.SalId  and S.Salid=St.Salid and ST.SalId=SIP.SalId and SIP.SlNo=ST.PrdSlNo and SPT.PrdSlNo=ST.PrdSlNo  
  INNER JOIN TaxConfiguration T (NOLOCK) ON T.TaxId=SPT.TaxId  
  INNER JOIn Retailer R ON R.RtrId=S.RtrId  
  WHERE Salinvdate Between @FromDate and @ToDate and VatGST='GST'  
  and SPT.TaxableAmount>0 and DlvSts>3  
  GROUP BY S.Salid,Salinvdate,R.RtrId,TaxCode,TaxPerc,SalinvNo,SPT.TaxId,RtrCode,Rtrname  
  UNION ALL  
  SELECT  '' as StateCode,'' as StateName,'' as GSTin,'' as RetailerType,RtrCode,Rtrname,  
  S.Salid as RefId,SalinvNo as RefNo,Salinvdate as RefDate,R.RtrId,SUM(PrdGrossAmount) as PrdGrossAmount,  
  SUM(ST.TaxableAmount),SUM(PrdNetAmount) as NetAmount,  
  TaxCode +'~Taxamount~' +CAST(CAST(TaxPerc as Numeric(10,2)) as Varchar(1000)) as TaxName,  
  SUM(TaxAmount) as DynamicAmt,'Sales of Goods' as TaxType,1 as SalesOrderType,  
  1 as TaxFlag,TaxPerc,SPT.TaxId,'' [Group Name],2 as [GroupType],@Pi_UsrId as [UsrId]  
  FROM SalesInvoice S (NOLOCK)   
  INNER JOIN SalesInvoiceProduct SIP (NOLOCK) ON S.Salid=SIP.SalId  
  INNER JOIN SalesInvoiceProductTax SPT (NOLOCK) ON SPT.SalId=SIP.SalId and SPT.SalId=S.SalId and SIP.SlNo=SPT.PrdSlNo  
  INNER JOIN #SalesTaxableAmount ST ON ST.SalId=SPT.SalId  and S.Salid=St.Salid and ST.SalId=SIP.SalId and SIP.SlNo=ST.PrdSlNo and SPT.PrdSlNo=ST.PrdSlNo  
  INNER JOIN TaxConfiguration T (NOLOCK) ON T.TaxId=SPT.TaxId  
  INNER JOIn Retailer R ON R.RtrId=S.RtrId  
  WHERE Salinvdate Between @FromDate and @ToDate and VatGST='GST'  
  and SPT.TaxableAmount>0  and DlvSts>3  
  GROUP BY S.Salid,Salinvdate,R.RtrId,TaxCode,TaxPerc,SalInvNo,SPT.TaxId,RtrCode,Rtrname
  INSERT INTO #TaxHSNSummary (StateCode,StateName,GSTin,RetailerType,RtrCode,Rtrname,Refid,RefNo,  
  RefDate,RtrId,GrossAmount,TaxableAmount,NetAmount,Taxname,DynamicAmt,TaxType,SalesOrderType,taxFlag,  
  Taxper,TaxId,[Group Name],[GroupType],[UsrId])  
  SELECT '' as StateCode,'' as StateName,'' as GSTin,'' as RetailerType,RtrCode,Rtrname,  
  S.ReturnID as RefId,ReturnCode as RefNo,ReturnDate as RefDate,R.RtrId,-1*SUM(PrdGrossAmt) as PrdGrossAmount,  
  -1*SUM(TaxableAmount),-1*SUM(PrdNetAmt) as NetAmount,TaxCode +'~TaxableAmount~' +CAST(CAST(TaxPerc as Numeric(38,2)) as Varchar(1000)) as TaxName,  
  -1*SUM(TaxableAmt) as DynamicAmt,'Return of Goods from Retailer' as TaxType,2 as SalesOrderType,  
  0 as TaxFlag,TaxPerc,SPT.TaxId,'' [Group Name],2 as [GroupType],@Pi_UsrId as [UsrId]  
  FROM ReturnHeader S (NOLOCK)   
  INNER JOIN ReturnProduct SIP (NOLOCK) ON S.ReturnID=SIP.ReturnID  
  INNER JOIN ReturnProductTax SPT (NOLOCK) ON SPT.ReturnID=SIP.ReturnID and SPT.ReturnID=S.ReturnID and SIP.SlNo=SPT.PrdSlNo  
  INNER JOIN #RetunrTaxableAmount ST ON ST.ReturnID=SPT.ReturnID  and S.ReturnID=St.ReturnID and ST.ReturnID=SIP.ReturnID and SIP.SlNo=ST.PrdSlNo and SPT.PrdSlNo=ST.PrdSlNo  
  INNER JOIN TaxConfiguration T (NOLOCK) ON T.TaxId=SPT.TaxId  
  INNER JOIn Retailer R ON R.RtrId=S.RtrId  
  WHERE ReturnDate Between @FromDate and @ToDate and Status=0  
  and TaxableAmt>0  
  GROUP BY S.ReturnID,ReturnDate,R.RtrId,TaxCode,TaxPerc,ReturnCode,SPT.TaxId,RtrCode,Rtrname  
  UNION ALL  
  SELECT  '' as StateCode,'' as StateName,'' as GSTin,'' as RetailerType,RtrCode,Rtrname,  
  S.ReturnID as RefId,ReturnCode as RefNo,ReturnDate as RefDate,R.RtrId,-1*SUM(PrdGrossAmt) as PrdGrossAmount,  
  -1*SUM(TaxableAmount),-1*SUM(PrdNetAmt) as NetAmount,  
  TaxCode +'~Taxamount~' +CAST(CAST(TaxPerc as Numeric(10,2)) as Varchar(1000)) as TaxName,  
  -1*SUM(TaxAmt) as DynamicAmt,'Return of Goods from Retailer' as TaxType,2 as SalesOrderType,  
  1 as TaxFlag,TaxPerc,SPT.TaxId,'' [Group Name],2 as [GroupType],@Pi_UsrId as [UsrId]  
  FROM ReturnHeader S (NOLOCK)   
  INNER JOIN ReturnProduct SIP (NOLOCK) ON S.ReturnID=SIP.ReturnID  
  INNER JOIN ReturnProductTax SPT (NOLOCK) ON SPT.ReturnID=SIP.ReturnID and SPT.ReturnID=S.ReturnID and SIP.SlNo=SPT.PrdSlNo  
  INNER JOIN #RetunrTaxableAmount ST ON ST.ReturnID=SPT.ReturnID  and S.ReturnID=St.ReturnID and ST.ReturnID=SIP.ReturnID and SIP.SlNo=ST.PrdSlNo and SPT.PrdSlNo=ST.PrdSlNo  
  INNER JOIN TaxConfiguration T (NOLOCK) ON T.TaxId=SPT.TaxId  
  INNER JOIn Retailer R ON R.RtrId=S.RtrId    
  WHERE ReturnDate between  @FromDate and @ToDate and Status=0  
  and TaxableAmt>0  
  GROUP BY S.ReturnID,ReturnDate,R.RtrId,TaxCode,TaxPerc,ReturnCode,SPT.TaxId,RtrCode,Rtrname  
  INSERT INTO #TaxHSNSummary (StateCode,StateName,GSTin,RetailerType,RtrCode,Rtrname,  
  Refid,RefNo,RefDate,RtrId,GrossAmount,NetAmount,Taxname,DynamicAmt,TaxType,SalesOrderType,taxFlag,  
  Taxper,TaxId,[Group Name],[GroupType],[UsrId])    
  SELECT  '','','','','','', 0 as [InvId],'' as [RefNo],Null,0,0 as GrossAmount,0 as NetAmount,  
  Taxname,SUM(DynamicAmt) as DynamicAmt,'' as TaxType,3 as SalesOrderType,100 as taxFlag,  
  Taxper,TaxId,'ZZZZZ' as [Group Name],3 as [GroupType],@Pi_UsrId as [UsrId]  
  FROM #TaxHSNSummary   
  GROUP BY Taxname,Taxper,TaxId  
  --select 'TTT',* from #TaxHSNSummary  
  UPDATE B SET B.StateCode= A.StateTinFirst2Digit ,  
  B.Statename=A.StateName,  
  B.GSTIN=A.GSTIN,  
  B.RetailerType=CASE A.RetailerType WHEN 1 THEN 'Registered'  
  WHEN 2 THEN 'Unregistered' END  
  FROM DBO.FN_ReturnRetailerUDCDetails() A INNER JOIN #TaxHSNSummary B ON A.Rtrid=B.RtrId  
  SET @DynamicLineAmountFields='0 as NetAmount,'  
  SET @DynamicLineAmountFields1='NetAmount Numeric (38,2),'  --------- added by lakshman M Dated ON 25-04-2019 PMS ID: ILCRSTPAR4195
  SET @DynamicLineAmountFields2='SUM(NetAmount) as NetAmount,'  
  IF NOT EXISTS(SELECT 'X' FROM #TaxHSNSummary)  
  BEGIN  
   SELECT * FROM RptOutputSaleTaxGST WHERE UsrId=@Pi_UsrId  
   RETURN  
  END  
  DECLARE @ColSelect AS Varchar(MAX)  
  DECLARE @ColSelectDataType AS Varchar(1000)  
  DECLARE @TableCol AS Varchar(2000)  
  DECLARE @Columns1 AS Varchar(7000)  
  DECLARE @OrderBy AS VARCHAR(2000)  
  DECLARE @SumCol AS VARCHAR(MAX)  
  DECLARE @GroupByCol as VARCHAR(MAX)  
  DECLARE @PCSelect AS VARCHAR(1000)  
  SET @PCSelect=''  
  SET @ColSelect=''  
  SET @ColSelectDataType=''  
  SET @TableCol=''  
  SET @Columns1=''  
  SET @CreateTable=''  
  SET @OrderBy=''  
  SET @SumCol=''  
  SET @GroupByCol=''  
  CREATE TABLE #DynamicCol  
  (  
  Slno INT IDENTITY(1,1),  
  Taxname NVarchar(500),  
  TaxId INT,  
  TaxPer Numeric(12,2),  
  TaxFlag TinyInt    
  )  
  INSERT INTO #DynamicCol    
  SELECT DISTINCT Taxname,TaxId,Taxper,TaxFlag FROM #TaxHSNSummary WHERE TaxFlag IN(1,0) ORDER BY TaxId,Taxper,TaxFlag,Taxname  
  SELECT @ColSelect=@ColSelect+'ISNULL('+QuoteName(Taxname)+',0) as '+QuoteName(Taxname)+',' FROM #DynamicCol ORDER BY Slno  
  SELECT @PCSelect=@PCSelect+Quotename(Taxname)+',' FROM #DynamicCol ORDER BY Slno  
  SET @PCSelect=LEFT(@PCSelect,LEN(@PCSelect)-1)  
  SELECT @ColSelectDataType=@ColSelectDataType+QuoteName(Taxname)+' Numeric(38,2),' FROM #DynamicCol ORDER BY Slno  
  SELECT @SumCol=@SumCol+'ISNULL(SUM('+QuoteName(Taxname)+'),0) as '+QuoteName(Taxname)+',' FROM #DynamicCol ORDER BY Slno  
  --SET @ColSelect='SELECT StateCode,StateName,GSTin,RetailerType,RtrId,RtrCode,Rtrname,Refid,RefNo,RefDate,TaxType,SalesOrderType,TaxableAmount,'+@ColSelect+@DynamicLineAmountFields2+'[Group Name],[GroupType],[UsrId]'  
  SET @ColSelect='SELECT StateCode,StateName,GSTin,RetailerType,RtrId,RtrCode,Rtrname,Refid,RefNo,RefDate,TaxType,SalesOrderType,isnull(SUM(TaxableAmount),0) as TaxableAmount,'+@SumCol+@DynamicLineAmountFields2+'[Group Name],[GroupType],[UsrId]'  
  SET @GroupByCol=' GROUP BY StateCode,StateName,GSTin,RetailerType,RtrId,RtrCode,Rtrname,Refid,RefNo,RefDate,TaxType,SalesOrderType,[Group Name],[GroupType],[UsrId]'  
  SET @TableCol= 'SLNO BIGINT IDENTITY(1,1),'+  
  'StateCode NVarchar(500),  
  StateName NVarchar(500),  
  GSTin NVarchar(500),  
  RetailerType NVarchar(500),  
  RtrId INT,  
  RtrCode NVarchar(500),  
  Rtrname NVarchar(500),    
  Refid BIGINT,  
  RefNo NVarchar(500),  
  RefDate DateTime,   
  TaxType NVarchar(500),   
  SalesOrderType TinyInt,  
  TaxableAmount Numeric(38,2),'  
  SET @Columns1='SELECT StateCode,StateName,GSTin,RetailerType,RtrId,RtrCode,Rtrname,Refid,RefNo,RefDate,TaxType,SalesOrderType,TaxableAmount,NetAmount,DynamicAmt ,TaxName,[Group Name],[GroupType],[UsrId] FROM #TaxHSNSummary'  
  SET @OrderBy=' ORDER BY [Group Name],[GroupType],SalesOrderType,TaxType,Refdate,Refno'  
  SET @CreateTable=' IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME=''RptOutputSaleTaxGST'' and XTYPE=''U'')'+  
  ' DROP TABLE RptOutputSaleTaxGST'+  
  ' CREATE TABLE RptOutputSaleTaxGST ('+@TableCol+@ColSelectDataType+@DynamicLineAmountFields1+' [Group Name] NVarchar(500),Grouptype TINYINT,UsrId INT)'  
  PRINT @CreateTable  
  EXEC(@CreateTable)  
  SET @SQL=' INSERT INTO RptOutputSaleTaxGST '+ @ColSelect+ ' FROM'+  
  '('+@Columns1+  
  ') PS'+  
  ' PIVOT'+  
  '('+  
  ' SUM(DynamicAmt) FOR TaxName IN('+@PCSelect+')'+  
  ')PVTTax '+@GroupByCol+ @OrderBy  
  PRINT @SQL  
  EXEC(@SQL)  
  --EXEC Proc_RptOutputSaleTaxGST 404,1,0,'GSTTAX',0,0,1  
  SELECT DISTINCT  
  StateCode,StateName,GSTin,RetailerType,RtrId,RtrCode,Rtrname,Refid,RefNo,RefDate,  
  TaxableAmount,  
  NetAmount  
  INTO #LineLevelGross  
  FROM #TaxHSNSummary WHERE UsrId=@Pi_UsrId and TaxFlag=0  
  SELECT 'ZZZZZ' as [Group Name], 3 as GroupType ,  
  SUM(TaxableAmount) as TaxableAmount,  
  SUM(NetAmount) as NetAmount  
  INTO #GrandTotal  
  FROM #LineLevelGross   
  UPDATE Y SET    
  Y.TaxableAmount=X.TaxableAmount ,  
  Y.NetAmount=X.NetAmount  
  FROM RptOutputSaleTaxGST Y INNER JOIN #GrandTotal X ON X.[Group Name]=Y.[Group Name]  
  AND X.GroupType=Y.GroupType   
   DELETE FROM Report_Template_GST WHERE ReportId=1 and RptId=@Pi_RptId  
   INSERT INTO Report_Template_GST(ReportId,RptId,RptName ,ColId,FieldName,FieldSize,FieldSelection,GroupField,  
   FieldType,Alignment,HeaderCaption,HeaderCaption1,HeaderCaption2,  
   RoundOff,CreatedDate)  
   SELECT 1,404,'Output Tax Summary',1,'StateCode',20,1,0,1,1,'Retailer','State','Code',0,GETDATE()  
   UNION ALL  
   SELECT 1,404,'Output Tax Summary',2,'StateName',50,1,0,1,1,'Retailer','State','Name',0,GETDATE()  
   UNION ALL  
   SELECT 1,404,'Output Tax Summary',3,'GSTin',20,1,0,1,1,'Retailer','GST Tin','',0,GETDATE()  
   UNION ALL  
   SELECT 1,404,'Output Tax Summary',4,'RetailerType',20,1,0,1,1,'Retailer','Type','',0,GETDATE()  
   UNION ALL  
   SELECT 1,404,'Output Tax Summary',5,'RtrCode',50,1,0,1,1,'Retailer','Code','',0,GETDATE()  
   UNION ALL  
   SELECT 1,404,'Output Tax Summary',6,'Rtrname',50,1,0,1,1,'Retailer','Name','',0,GETDATE()  
   UNION ALL  
   SELECT 1,404,'Output Tax Summary',7,'RefNo',75,1,0,1,1,'Invoice','Number','',0,GETDATE()  
   UNION ALL  
   SELECT 1,404,'Output Tax Summary',8,'RefDate',75,1,0,1,4,'Invoice','Date','',0,GETDATE()  
   UNION ALL  
   SELECT 1,404,'Output Tax Summary',9,'TaxType',75,1,0,1,1,'Sales/','Return','',0,GETDATE()  
   UNION ALL  
   SELECT 1,404,'Output Tax Summary',10,'TaxableAmount',75,1,0,2,3,'Total','Taxable','Value',2,GETDATE()  
   SET @Str=''  
   SELECT @MaxId=MAX(ColId)+1,@ReportId=ReportId FROM  Report_Template_GST (NOLOCK) WHERE RptId=@Pi_RptId  
   GROUP BY ReportId  
   DECLARE @Caption1 as Varchar(300)  
   DECLARE @Caption2 as Varchar(300)  
   DECLARE @Caption3 as Varchar(300)  
   SET @Caption1=''  
   SET @Caption2=''  
   SET @Caption3=''  
   SELECT @start = 1, @end = CHARINDEX(',', @PCSelect)   
   WHILE @start < LEN(@PCSelect) + 1 BEGIN   
    IF @end = 0    
    SET @end = LEN(@PCSelect) + 1  
    SET @Str=SUBSTRING(@PCSelect, @start, @end - @start)  
    --SELECT @Str,'T'  
    SET @Caption1=LEFT(@Str,CharIndex('~',@Str)-1)  
    SET @Caption2=LEFT(SUBSTRING(@Str,CharIndex('~',@Str)+1,LEN(@Str)),CHARINDEX('~',SUBSTRING(@Str,CharIndex('~',@Str)+1,LEN(@Str)))-1)  
    SET @Caption3= REPLACE(RIGHT(@Str,6),'~','')  
    INSERT INTO Report_Template_GST(ReportId,RptId,RptName,ColId,FieldName,FieldSize,  
    FieldSelection,GroupField,FieldType,Alignment,HeaderCaption,HeaderCaption1,HeaderCaption2,RoundOff,  
    CreatedDate)    
    SELECT TOP 1 ReportId,RptId,RptName,@MaxId,SUBSTRING(@PCSelect, @start, @end - @start),  
    18,1,0,2,3,@Caption1--SUBSTRING(@PCSelect, @start, @end - @start)      
    ,@Caption2,@Caption3,2,Getdate()  
    FROM Report_Template_GST WHERE RptId=@Pi_RptId  
    SET @start = @end + 1   
    SET @end = CHARINDEX(',', @PCSelect, @start)  
    SET @MaxId=@MaxId+1  
   END   
   INSERT INTO Report_Template_GST(ReportId,RptId,RptName,ColId,FieldName,FieldSize,  
   FieldSelection,GroupField,FieldType,Alignment,HeaderCaption,HeaderCaption1,HeaderCaption2,RoundOff,  
   CreatedDate)    
   SELECT TOP 1 ReportId,RptId,RptName,@MaxId+1,'NetAmount',  
   18,1,0,2,3,'Product','Level','NetAmount',2,Getdate()  
   FROM Report_Template_GST WHERE RptId=@Pi_RptId
   UPDATE Report_template_GST SET FieldName=REPLACE(REPLACE(FieldName,']',''),'[',''),  
   HeaderCaption=REPLACE(REPLACE(HeaderCaption,']',''),'[',''),  
   HeaderCaption1=REPLACE(REPLACE(HeaderCaption1,']',''),'[',''),  
   HeaderCaption2=REPLACE(REPLACE(HeaderCaption2,']',''),'[','')  
   WHERE RptId=@Pi_RptId   
   IF NOT EXISTS(SELECT 'X' FROM RptOutputSaleTaxGST)  
   BEGIN  
    SELECT * FROM RptOutputSaleTaxGST WHERE UsrId=@Pi_UsrId  
    RETURN  
   END  
   SELECT * FROM RptOutputSaleTaxGST WHERE UsrId=@Pi_UsrId  
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME ='PROC_Validate_WS2CS_NewCustomerRequest' AND TYPE ='P')
DROP PROCEDURE PROC_Validate_WS2CS_NewCustomerRequest
GO
/*
BEGIN TRAN
DELETE FROM PDAlog
Exec PROC_Validate_WS2CS_NewCustomerRequest '1,2'
SELECT * FROM Import_WS2CS_NewCustomerRequest
SELECT * FROM PDA_NewRetailer
SELECT * FROM PDAlog
ROLLBACK TRAN
*/
CREATE PROCEDURE PROC_Validate_WS2CS_NewCustomerRequest
(      
@SalRpCode varchar(50)      
)      
AS
/*******************************************************************************************
* PROCEDURE		: PROC_Validate_WS2CS_NewCustomerRequest
* PURPOSE		: To Validate and Insert New Customer details From PDA Intermediate Database
* CREATED		: Amuthakumar P
* CREATED DATE	: 28/08/2018
* MODIFIED		:
* DATE      AUTHOR     DESCRIPTION
*****************************************************************************************************
* DATE         AUTHOR			CR/BZ	   USER STORY ID   DESCRIPTION                         
*****************************************************************************************************
  28/08/2018   Amuthakumar P	CR         CRCRSTPAR0019   Parle SFA integration to Vxceed server(Phase 2&3)
  05-04-2019   Lakshman M       BZ         ILCRSTPAR3989   while importing retailer from SFA to Core stocky retailer default Active status validation included. 
********************************************************************************************/     
DECLARE @CustomerCode AS varchar(200) 
DECLARE @CustomerName AS varchar(200)
DECLARE @CategoryCode1 AS varchar(100)
DECLARE @CategoryCode2 AS varchar(100)
DECLARE @lError AS int
DECLARE @CtgName AS nvarchar(200)
DECLARE @ValueClassName AS nvarchar(200)
DECLARE @RtrClassid int
DECLARE @CtgMainid int
DECLARE @CtgLinkid int 
DECLARE @CtgLevelId int
DECLARE @CtgLinkCode AS nvarchar(200)
DECLARE @CtgLevelName AS nvarchar(200)
DECLARE @Cmpid int 
DECLARE @CmpName AS nvarchar(200)
BEGIN      
 BEGIN TRANSACTION T1      
 DELETE FROM Import_WS2CS_NewCustomerRequest WHERE DownloadFlag='Y' 
 	DELETE FROM Import_WS2CS_NewCustomerRequest_Track WHERE CONVERT(VARCHAR(10),CreatedDate,121)<=DATEADD(M,-3,CONVERT(VARCHAR(10),GETDATE(),121))
	INSERT INTO Import_WS2CS_NewCustomerRequest_Track(RequestID,TenantCode,LocationCode,RouteCode,SalesmanCode,PostingDate,CustomerName,Address1,
			 Address2,Address3,City,State,Zip,Phone,Fax,Email,ContactPerson,Notes,GeoCodeX,GeoCodeY,CategoryCode1,CategoryCode2,CategoryCode3,
			 HierarchyCode,DateofBirth,IDNumber,DocumentType,DocumentPrefix,DocumentNumber,DownloadFlag,CreatedDate)
	SELECT RequestID,TenantCode,LocationCode,RouteCode,SalesmanCode,PostingDate,CustomerName,Address1,Address2,Address3,City,State,Zip,Phone,Fax,
			 Email,ContactPerson,Notes,GeoCodeX,GeoCodeY,CategoryCode1,CategoryCode2,CategoryCode3,HierarchyCode,DateofBirth,IDNumber,DocumentType,
			 DocumentPrefix,DocumentNumber,DownloadFlag,CreatedDate
	FROM Import_WS2CS_NewCustomerRequest
	WHERE downloadflag='N'
	
	UPDATE Import_WS2CS_NewCustomerRequest SET DOWNLOADFLAG='D' WHERE DOWNLOADFLAG='N'
	
	
 DECLARE CUR_ImportRetailer Cursor For  
 SELECT DISTINCT '' CustomerCode, CustomerName,CategoryCode1,CategoryCode2 
		From Import_WS2CS_NewCustomerRequest WHERE DownloadFlag='D'   
 OPEN CUR_ImportRetailer      
 FETCH NEXT FROM CUR_ImportRetailer INTO  @CustomerCode,@CustomerName,@CategoryCode1,@CategoryCode2
 While @@Fetch_Status = 0      
 BEGIN      
  SET @lError = 0
    	
  IF NOT EXISTS (SELECT RtrName FROM Retailer WHERE RtrName = @CustomerName )      
   BEGIN   
		--IF NOT EXISTS(SELECT * FROM RetailerCategory WHERE CtgCode=@CategoryCode1)
		--BEGIN
		--	SET @lError = 1      
		--	INSERT INTO PDALog(SrpCde,DataPoint,[Name],Description)      
		--	SELECT '' + @CategoryCode1 + '','New Retailer',@CustomerName,'Reatailer Category1 does not exists'  
		--END
		--IF NOT EXISTS(SELECT * FROM RetailerValueClass WHERE ValueClassCode=@CategoryCode2)
		--BEGIN
		--	SET @lError = 1      
		--	INSERT INTO PDALog(SrpCde,DataPoint,[Name],Description)      
		--	SELECT '' + @CategoryCode2 + '','New Retailer',@CustomerName,'Reatailer Category2 does not exists'  
		--END
	IF @lError=0 
	 BEGIN
		Select @RtrClassid=A.RtrClassId,
			   @ValueClassName=A.ValueClassName,
			   @CtgMainid=B.CtgMainId,
			   @CtgLinkid=B.CtgLinkId,
			   @CtgLevelId=B.CtgLevelId,
			   @CtgLinkCode=B.CtgLinkCode,
			   @CtgName=B.CtgName,
			   @CtgLevelName=C.CtgLevelName,
			   @Cmpid=C.CmpId,
			   @CmpName=D.CmpName 
			FROM RetailerValueClass A,RetailerCategory B,RetailerCategoryLevel C,Company D 
			WHERE A.CtgMainId=B.CtgMainId And B.CtgLevelId=C.CtgLevelId And C.CmpId=D.CmpId
			AND CtgCode=@CategoryCode1 AND a.ValueClassCode=@CategoryCode2
	 
	 END 		
	IF @lError=0 
		BEGIN
		  IF NOT EXISTS (SELECT * FROM PDA_NewRetailer WHERE CustomerName=@CustomerName)
			   BEGIN 
					INSERT INTO PDA_NewRetailer(CustomerCode,CustomerName,Address1,Address2,Address3,City,State,Zip,Phone,Fax,Email,
					RtrTINNo,ContactPerson,Notes,CustomerStatus,CtgCode,CtgName,ValueClassCode,ValueClassName,RtrClassid,CtgMainid,
					CtgLinkid,CtgLevelId,CtgLinkCode,CtgLevelName,Cmpid,CmpName,CrBills,RtrTaxable,RouteId,GeoMainId,GeoLevelName,
					GeoLevel,Longitude,Latitude,RtrMobileNo,DateOfBirth,PDAFlag) 
					SELECT (DocumentPrefix+CAST(DocumentNumber AS VARCHAR(10))) CustomerCode,CustomerName,isnull(Address1,'')Address1,isnull(Address2,'')Address2,
					isnull(Address3,'')Address3,isnull(City,'')City,isnull(State,'')State,isnull(Zip,'')Zip,isnull(Phone,'')Phone,isnull(Fax,'')Fax,isnull(Email,'')Email,
					'' RtrTINNo,isnull(ContactPerson,'')ContactPerson,isnull(Notes,'')Notes,'1' AS CustomerStatus, ----------- Added by lakshman M Dated ON 05-04-2019 PMS ID: ILCRSTPAR3989
					isnull(CategoryCode1,'')CategoryCode1,isnull(@CtgName,''),isnull(CategoryCode2,'')CategoryCode2,isnull(@ValueClassName,''),
					ISNULL(@RtrClassid,0),ISNULL(@CtgMainid,0),ISNULL(@CtgLinkid,0),ISNULL(@CtgLevelId,0),ISNULL(@CtgLinkCode,''),ISNULL(@CtgLevelName,''),
					ISNULL(@Cmpid,0),ISNULL(@CmpName,''),0,'' RtrTaxable,0,0,'' GeoLevelName,
					'' GeoLevel,isnull(GeoCodeX,'')GeoCodeX,isnull(GeoCodeY,'')GeoCodeY,''RtrMobileNo,ISNULL(CONVERT(VARCHAR(10),DateOfBirth,121),'') DateOfBirth,'WS' PDAFlag
					FROM Import_WS2CS_NewCustomerRequest WHERE CustomerName=@CustomerName
			   END 	
				UPDATE Import_WS2CS_NewCustomerRequest SET DownloadFlag='Y' WHERE CustomerName=@CustomerName
		 END 
	 END      
  ELSE      
    BEGIN      
	   INSERT INTO PDALog(SrpCde,DataPoint,[Name],Description)      
	   SELECT '' + @CustomerCode + '','New Retailer',@CustomerName,'Retailer Code Already exists'      
    END       
FETCH NEXT FROM CUR_ImportRetailer INTO @CustomerCode,@CustomerName,@CategoryCode1,@CategoryCode2
END      
CLOSE CUR_ImportRetailer      
DEALLOCATE CUR_ImportRetailer     
 IF @@ERROR = 0      
 BEGIN      
	COMMIT TRANSACTION T1      
 END      
 ELSE      
 BEGIN      
	ROLLBACK TRANSACTION T1      
 END      
END
GO
IF NOT EXISTS (SELECT * FROM sysobjects WHERE Name ='Cs2Cn_Prk_Retailer_trace' AND TYPE ='U')
BEGIN
CREATE TABLE Cs2Cn_Prk_Retailer_trace 
(
	[SlNo] [numeric](38, 0) IDENTITY(1,1) NOT NULL,
	[DistCode] [nvarchar](100) NULL,
	[RtrId] [int] NULL,
	[RtrCode] [nvarchar](100) NULL,
	[CmpRtrCode] [nvarchar](100) NULL,
	[RtrName] [nvarchar](100) NULL,
	[RtrAddress1] [nvarchar](100) NULL,
	[RtrAddress2] [nvarchar](100) NULL,
	[RtrAddress3] [nvarchar](100) NULL,
	[RtrPINCode] [nvarchar](20) NULL,
	[RtrChannelCode] [nvarchar](100) NULL,
	[RtrGroupCode] [nvarchar](100) NULL,
	[RtrClassCode] [nvarchar](100) NULL,
	[KeyAccount] [nvarchar](20) NULL,
	[RelationStatus] [nvarchar](100) NULL,
	[ParentCode] [nvarchar](100) NULL,
	[RtrRegDate] [nvarchar](100) NULL,
	[GeoLevel] [nvarchar](100) NULL,
	[GeoLevelValue] [nvarchar](100) NULL,
	[VillageId] [int] NULL,
	[VillageCode] [nvarchar](100) NULL,
	[VillageName] [nvarchar](100) NULL,
	[Status] [tinyint] NULL,
	[Mode] [nvarchar](100) NULL,
	[DrugLNo] [nvarchar](50) NULL,
	[RtrFrequency] [nvarchar](100) NULL,
	[RtrPhoneNo] [nvarchar](50) NULL,
	[RtrTINNumber] [nvarchar](50) NULL,
	[RtrTaxGroupCode] [nvarchar](200) NULL,
	[RtrCrLimit] [numeric](18, 2) NULL,
	[RtrCrDays] [int] NULL,
	[Approved] [varchar](100) NULL,
	[RtrType] [varchar](100) NULL,
	[UploadFlag] [nvarchar](10) NULL,
	[SyncId] [numeric](38, 0) NULL,
	[ServerDate] [datetime] NULL,
	[StateName] [nvarchar](100) NULL,
	[GSTTIN] [nvarchar](100) NULL,
	[PanNumber] [nvarchar](100) NULL,
	[RetailerType] [nvarchar](100) NULL,
	[Composite] [nvarchar](100) NULL,
	[RelatedParty] [nvarchar](100) NULL,
	[Uploadeddate] DATETIME
)
END
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME ='RetailerApprovalStatus_Trace' AND TYPE ='U')
BEGIN
CREATE TABLE RetailerApprovalStatus_Trace 
(
	[SLno] Bigint IDENTITY(1,1) NOT NULL,
	[RtrId] [numeric](18, 0) NULL,
	[RtrCtgId] [bigint] NULL,
	[RtrClassId] [bigint] NULL,
	[RtrStatus] [tinyint] NULL,
	[Rtrname] [nvarchar](100) NULL,
	[Geoid] [int] NULL,
	[Upload] [tinyint] NULL,
	[Mode] [tinyint] NULL,
	[ModDate] [datetime] NULL,
	[Uploadeddate] DATETIME
)
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_Cs2Cn_Retailer' AND TYPE ='P')
DROP PROCEDURE Proc_Cs2Cn_Retailer
GO
/*
BEGIN TRAN
delete FROM RETAILERvalueclassmap where rtrid in(1,2,3,5,6)
update A set upload ='N' FROM  RETAILER A 
EXEC Proc_Cs2Cn_Retailer 0,'2018-05-14'
SELECT * FROM CS2CN_PRK_RETAILER 
--SELECT * FROM RETAILER
--SELECT * FROM RETAILERvalueclassmap
--SELECT 'Approval Track After upload',* FROM RetailerApprovalStatus
ROLLBACK TRAN 
*/
CREATE PROCEDURE Proc_Cs2Cn_Retailer
(
	@Po_ErrNo	INT OUTPUT,
	@ServerDate DATETIME
)
AS
SET NOCOUNT ON
BEGIN
/*********************************
* PROCEDURE	: Proc_Cs2Cn_Retailer 0,'2016-11-11'
* PURPOSE	: Extract Retailer Details from CoreStocky to Console
* NOTES		:
* CREATED	: Nandakumar R.G 09-01-2009
* MODIFIED	:
* DATE         AUTHOR       CR/BZ	   USER STORY ID   DESCRIPTION                         
*****************************************************************************************************
  10/05/2018   S.Moorthi     CR        CRCRSTPAR0001   Retailer Approval process - Manual
  05-04-2019   M. Lkashman   BZ        ILCRSTPAR3971   Retailer values class valiation included based on retailer wise upload process.
  21-05-2019   M.Lakshman    BZ        ILCRSTPAR4514   Retailer approval process trace validation included.  
*********************************/
	DECLARE @CmpID 		AS INTEGER
	DECLARE @DistCode	As nVarchar(50)
	
	SET @Po_ErrNo=0
	
	----Commented by Moorthi CRCRSTPAR0001 --CHANGED BY MAHESH FOR ICRSTPAR1505
	--IF EXISTS (SELECT * FROM RETAILER WHERE APPROVED=0)
	--BEGIN
	--	UPDATE RETAILER SET Approved=1 WHERE Approved=0
	--END
	----Till Here
	DELETE FROM Cs2Cn_Prk_Retailer WHERE UploadFlag = 'Y'
	SELECT @CmpID = CmpId FROM Company WHERE DefaultCompany = 1	
	SELECT @DistCode = DistributorCode FROM Distributor
	-------------------- Added by lakshman M Dated ON 05-04-2019 PMS ID: ILCRSTPAR3971 ------------- 
	INSERT INTO Cs2Cn_Prk_Retailer
	(
		DistCode ,
		RtrId ,
		RtrCode ,
		CmpRtrCode,
		RtrName ,
		RtrAddress1,
		RtrAddress2,
		RtrAddress3,
		RtrPINCode,
		RtrChannelCode ,
		RtrGroupCode ,
		RtrClassCode ,
		Status,
		KeyAccount,
		RelationStatus,
		ParentCode,
		RtrRegDate,
		GeoLevel,
		GeoLevelValue,
		VillageId,
		VillageCode,
		VillageName,
		Mode,
		DrugLNo,
		RtrFrequency,
		RtrPhoneNo,
		RtrTINNumber,
		RtrTaxGroupCode,
		RtrCrLimit,
		RtrCrDays,
		Approved,
		RtrType,
		UploadFlag
		)
		
		SELECT @DistCode ,
		R.RtrId ,
		R.RtrCode ,
		R.CmpRtrCode ,
		R.RtrName ,
		R.RtrAdd1 ,
		R.RtrAdd2 ,
		R.RtrAdd3 ,
		R.RtrPinNo ,
		RC1.CtgCode ,
		RC.CtgCode,
		RVC.ValueClassCode,
		RtrStatus,	
		CASE RtrKeyAcc WHEN 0 THEN 'NO' ELSE 'YES' END AS KeyAccount,
		CASE RtrRlStatus WHEN 2 THEN 'PARENT' WHEN 3 THEN 'CHILD' WHEN 1 THEN 'INDEPENDENT' ELSE 'INDEPENDENT' END AS RelationStatus,
		(CASE RtrRlStatus WHEN 3 THEN ISNULL(RET.RtrCode,'') ELSE '' END) AS ParentCode,
		CONVERT(VARCHAR(10),R.RtrRegDate,121),'' AS GeoLevelName,'' AS GeoName,0,'','','New',R.RtrDrugLicNo,
		CASE RtrFrequency WHEN 0 THEN 'WEEKLY' WHEN 1 THEN 'BI-WEEKLY' WHEN 2 THEN 'FORT NIGHTLY' when 3 then 'MONTHLY' when 4 then 'DAILY' END AS RtrFrequency,
		ISNULL(RtrPhoneNo,''),ISNULL(RtrTINNo,''),ISNULL(TGS.RtrGroup,''),R.RtrCrLimit,
		R.RtrCrDays,(CASE ISNULL(R.Approved,0) WHEN 0 THEN 'PENDING' WHEN 1 THEN 'APPROVED' ELSE 'REJECTED' END) AS Approved,
		(CASE R.RtrType WHEN 1 THEN 'Retailer' WHEN 2 THEN 'Sub Stockist' WHEN 3 THEN 'Hub' WHEN 4 THEN 'Spoke' ELSE 'Distributor' END) AS RtrType,'N'					
		FROM Retailer R (NOLOCK)
		LEFT OUTER JOIN (SELECT K.RtrCode,RE.RtrId,RE.RtrChildId FROM RetailerRelation RE (NOLOCK)
		INNER JOIN Retailer K (NOLOCK)ON RE.RtrId=K.RtrId) RET ON RET.RtrChildId=R.RtrId
		LEFT OUTER JOIN TaxGroupSetting TGS (NOLOCK) ON R.TaxGroupId = TGS.TaxGroupId AND TGS.TaxGroup = 1
		INNER JOIN RetailerValueClassMap RVCM ON RVCM.Rtrid =R.Rtrid
		inner join RetailerValueClass RVC ON RVCM.RtrValueClassId = RVC.RtrClassId
		inner join RetailerCategory RC ON RVC.CtgMainId=RC.CtgMainId
		inner join RetailerCategoryLevel RCL ON RCL.CtgLevelId=RC.CtgLevelId
		inner join RetailerCategory RC1 ON RC.CtgLinkId = RC1.CtgMainId
		WHERE R.Upload = 'N' AND  NOT EXISTS (SELECT DISTINCT RAS.RtrId FROM RetailerApprovalStatus RAS (NOLOCK) WHERE R.RtrId = RAS.RtrId)		
	UNION
	SELECT
		@DistCode ,
		RCC.RtrId,
		R.RtrCode,
		R.CmpRtrCode,
		(CASE ISNULL(RCC.RtrName,'') WHEN '' THEN R.RtrName ELSE RCC.RtrName END) AS RtrName,
		--RCC.RtrName ,
		R.RtrAdd1 ,	
		R.RtrAdd2 ,
		R.RtrAdd3 ,
		R.RtrPinNo ,
		RC1.CtgCode ,
		RC.CtgCode,
		RVC.ValueClassCode ,
		--RtrStatus,
		(CASE ISNULL(RCC.RtrStatus,2) WHEN 2 THEN R.RtrStatus ELSE RCC.RtrStatus END) AS RtrStatus,
		CASE RtrKeyAcc WHEN 0 THEN 'NO' ELSE 'YES' END AS KeyAccount,
		CASE RtrRlStatus WHEN 2 THEN 'PARENT' WHEN 3 THEN 'CHILD' WHEN 1 THEN 'INDEPENDENT' ELSE 'INDEPENDENT' END AS RelationStatus,
		(CASE RtrRlStatus WHEN 3 THEN ISNULL(RET.RtrCode,'') ELSE '' END) AS ParentCode,
		CONVERT(VARCHAR(10),R.RtrRegDate,121),'' AS GeoLevelName,'' AS GeoName,0,'','','AP',R.RtrDrugLicNo,
		CASE RtrFrequency WHEN 0 THEN 'WEEKLY' WHEN 1 THEN 'BI-WEEKLY' WHEN 2 THEN 'FORT NIGHTLY' when 3 then 'MONTHLY' when 4 then 'DAILY' END AS RtrFrequency,
		ISNULL(RtrPhoneNo,''),ISNULL(RtrTINNo,''),ISNULL(TGS.RtrGroup,''),R.RtrCrLimit,
        R.RtrCrDays,(CASE ISNULL(R.Approved,0) WHEN 0 THEN 'PENDING' WHEN 1 THEN 'APPROVED' ELSE 'REJECTED' END) AS Approved,
        (CASE R.RtrType WHEN 1 THEN 'Retailer' WHEN 2 THEN 'Sub Stockist' WHEN 3 THEN 'Hub' WHEN 4 THEN 'Spoke' ELSE 'Distributor' END) AS RtrType,'N'									
	
	FROM 
		RetailerApprovalStatus RCC (NOLOCK)	--CRCRSTPAR0001		
		INNER JOIN Retailer R (NOLOCK) ON R.RtrId=RCC.RtrId
		LEFT OUTER JOIN (SELECT K.RtrCode,RE.RtrId,RE.RtrChildId FROM RetailerRelation RE (NOLOCK)
		INNER JOIN Retailer K (NOLOCK) ON RE.RtrId=K.RtrId) RET ON RET.RtrChildId=R.RtrId
		LEFT OUTER JOIN TaxGroupSetting TGS (NOLOCK) ON R.TaxGroupId = TGS.TaxGroupId AND TGS.TaxGroup = 1
		INNER JOIN RetailerValueClassMap RVCM ON RVCM.Rtrid =R.Rtrid
		inner join RetailerValueClass RVC ON RVCM.RtrValueClassId = RVC.RtrClassId
		inner join RetailerCategory RC ON RVC.CtgMainId=RC.CtgMainId
		inner join RetailerCategoryLevel RCL ON RCL.CtgLevelId=RC.CtgLevelId
		inner join RetailerCategory RC1 ON RC.CtgLinkId = RC1.CtgMainId
		WHERE RCC.Upload=0 
		
	--	RetailerClassficationChange RCC			
	--	INNER JOIN Retailer R ON R.RtrId=RCC.RtrId
	--	LEFT OUTER JOIN (SELECT K.RtrCode,RE.RtrId,RE.RtrChildId FROM RetailerRelation RE
	--	INNER JOIN Retailer K ON RE.RtrId=K.RtrId) RET ON RET.RtrChildId=R.RtrId
	--	LEFT OUTER JOIN TaxGroupSetting TGS (NOLOCK) ON R.TaxGroupId = TGS.TaxGroupId AND TGS.TaxGroup = 1
	--WHERE 	
	--	UpLoadFlag=0
	
	------------ commented by lakshman M dated on 05-04-2019 PMS ID: ILCRSTPAR3971 -----------
	--UPDATE ETL SET ETL.RtrChannelCode=RVC.ChannelCode,ETL.RtrGroupCode=RVC.GroupCode,ETL.RtrClassCode=RVC.ValueClassCode
	--FROM Cs2Cn_Prk_Retailer ETL,
	--(
	--	SELECT R.RtrId,RC1.CtgCode AS ChannelCode,RC.CtgCode  AS GroupCode ,RVC.ValueClassCode
	--	FROM
	--	RetailerValueClassMap RVCM ,
	--	RetailerValueClass RVC	,
	--	RetailerCategory RC ,
	--	RetailerCategoryLevel RCL,
	--	RetailerCategory RC1,
	--	Retailer R  		
	--WHERE
	--	R.Rtrid = RVCM.RtrId
	--	AND	RVCM.RtrValueClassId = RVC.RtrClassId
	--	AND	RVC.CtgMainId=RC.CtgMainId
	--	AND	RCL.CtgLevelId=RC.CtgLevelId
	--	AND	RC.CtgLinkId = RC1.CtgMainId
	--) AS RVC
	--WHERE ETL.RtrId=RVC.RtrId

	--------------------- Till here  -------------
	
	UPDATE ETL SET ETL.GeoLevel=Geo.GeoLevelName,ETL.GeoLevelValue=Geo.GeoName
	FROM Cs2Cn_Prk_Retailer ETL,
	(
		SELECT R.RtrId,ISNULL(GL.GeoLevelName,'City') AS GeoLevelName,
		ISNULL(G.GeoName,'') AS GeoName
		FROM			
		Retailer R  		
		LEFT OUTER JOIN Geography G (NOLOCK) ON R.GeoMainId=G.GeoMainId  
		LEFT OUTER JOIN GeographyLevel GL(NOLOCK) ON GL.GeoLevelId=G.GeoLevelId  
	) AS Geo
	WHERE ETL.RtrId=Geo.RtrId	
	
	UPDATE ETL SET ETL.VillageId=V.VillageId,ETL.VillageCode=V.VillageCode,ETL.VillageName=V.VillageName
	FROM Cs2Cn_Prk_Retailer ETL,
	(
		SELECT R.RtrId,R.VillageId,V.VillageCode,V.VillageName
		FROM			
		Retailer R  		
		INNER JOIN RouteVillage V ON R.VillageId=V.VillageId
	) V
	WHERE ETL.RtrId=V.RtrId	
	
	--Added By MohanaKrishna A.B For GST
	Update Cs2Cn_Prk_Retailer SET StateName='' where StateName is Null
	Update Cs2Cn_Prk_Retailer SET GSTTIN ='' where GSTTIN is Null
	Update Cs2Cn_Prk_Retailer SET PanNumber ='' where PanNumber is Null
	Update Cs2Cn_Prk_Retailer SET RetailerType ='' where RetailerType is Null
	Update Cs2Cn_Prk_Retailer SET Composite ='' where Composite is Null
	Update Cs2Cn_Prk_Retailer SET RelatedParty ='' where RelatedParty is Null
	----
	
	--Added By Mohana For GST
	SELECT C.MasterRecordId,B.ColumnName,ISNULL(C.ColumnValue,'') ColumnValue INTO #RtrUDC FROM UdcHD A INNER JOIN UdcMaster B ON A.MasterId=B.MasterId AND A.MasterName='Retailer Master'
	INNER JOIN UdcDetails C ON A.MasterId= C.MasterId AND B.UdcMasterId=C.UdcMasterId --AND masterrecordid =445
	INNER JOIN Retailer R ON R.RtrId =C.MasterRecordId AND B.ColumnName IN ('State name','GSTIN','PAN Number','Retailer Type','Related Party','Composition')
	UPDATE A SET StateName =ISNULL(C.ColumnValue,'') FROM Cs2Cn_Prk_Retailer A INNER JOIN Retailer B ON A.RtrCode=B.RtrCode
	INNER JOIN #RtrUDC C ON B.RtrId = C.MasterRecordid AND ColumnName ='State Name'
	UPDATE A SET GSTTIN = ISNULL(C.ColumnValue,'')  FROM Cs2Cn_Prk_Retailer A INNER JOIN Retailer B ON A.RtrCode=B.RtrCode
	INNER JOIN #RtrUDC C ON B.RtrId = C.MasterRecordid AND ColumnName ='GSTIN'
	UPDATE A SET PanNumber = ISNULL(C.ColumnValue,'')  FROM Cs2Cn_Prk_Retailer A INNER JOIN Retailer B ON A.RtrCode=B.RtrCode
	INNER JOIN #RtrUDC C ON B.RtrId = C.MasterRecordid AND ColumnName ='PAN Number'
	UPDATE A SET RetailerType = ISNULL(C.ColumnValue,'') FROM Cs2Cn_Prk_Retailer A INNER JOIN Retailer B ON A.RtrCode=B.RtrCode
	INNER JOIN #RtrUDC C ON B.RtrId = C.MasterRecordid AND ColumnName ='Retailer Type'
	UPDATE A SET RelatedParty = ISNULL(C.ColumnValue,'')  FROM Cs2Cn_Prk_Retailer A INNER JOIN Retailer B ON A.RtrCode=B.RtrCode
	INNER JOIN #RtrUDC C ON B.RtrId = C.MasterRecordid AND ColumnName ='Related Party'
	UPDATE A SET Composite = ISNULL(C.ColumnValue,'')  FROM Cs2Cn_Prk_Retailer A INNER JOIN Retailer B ON A.RtrCode=B.RtrCode
	INNER JOIN #RtrUDC C ON B.RtrId = C.MasterRecordid AND ColumnName ='Composition'
	--Till Here
	 --Added By lakshman M DAted ON 21-05-2019 PMS ID: ILCRSTPAR4514  
	 INSERT INTO RetailerApprovalStatus_Trace (RtrId,Rtrctgid,Rtrclassid,Rtrstatus,Rtrname,Geoid,Upload,Mode,ModDate,Uploadeddate)  
	 SELECT R.RtrId,R.Rtrctgid,R.Rtrclassid,R.Rtrstatus,R.Rtrname,R.Geoid,R.Upload,R.Mode,R.ModDate,GETDATE() AS Uploadeddate  
	 FROM RetailerApprovalStatus R (NOLOCK) WHERE R.Upload=0  
     
	 --------- Till here -------  
	--Added By S.Moorthi	
	SELECT R.RtrId,RC1.CtgCode AS ChannelCode,RC.CtgCode  AS GroupCode,RVC.ValueClassCode 
	INTO #TempCategory	
		   FROM
		   RetailerValueClass RVC (NOLOCK),  
		   RetailerCategory RC (NOLOCK) ,  
		   RetailerCategoryLevel RCL (NOLOCK),  
		   RetailerCategory RC1 (NOLOCK),    
		   RetailerApprovalStatus R (NOLOCK)  
		WHERE			
			R.RtrClassId = RVC.RtrClassId
			AND	RVC.CtgMainId=RC.CtgMainId
			AND	RCL.CtgLevelId=RC.CtgLevelId
			AND	RC.CtgLinkId = RC1.CtgMainId
			AND ISNULL(R.RtrClassId,0)<>0
			AND R.Upload=0
			
	UPDATE ETL SET ETL.RtrChannelCode=RVC.ChannelCode,ETL.RtrGroupCode=RVC.GroupCode,
	ETL.RtrClassCode=RVC.ValueClassCode
	FROM Cs2Cn_Prk_Retailer ETL (NOLOCK) 
	INNER JOIN RetailerApprovalStatus RAS (NOLOCK) ON ETL.RtrId=RAS.RtrId 
 	INNER JOIN #TempCategory RVC (NOLOCK) ON RVC.RtrId=ETL.RtrId and RVC.RtrId=RAS.RtrId  
	WHERE ETL.UploadFlag='N' AND RAS.Upload=0
	
	UPDATE ETL SET ETL.GeoLevel=Geo.GeoLevelName,ETL.GeoLevelValue=Geo.GeoName
	FROM Cs2Cn_Prk_Retailer ETL,
	(
		SELECT R.RtrId,ISNULL(GL.GeoLevelName,'City') AS GeoLevelName,
		ISNULL(G.GeoName,'') AS GeoName
		FROM			
		Retailer R  	
		INNER JOIN RetailerApprovalStatus RAS (NOLOCK) ON R.RtrId=RAS.RtrId 	
		LEFT OUTER JOIN Geography G ON R.GeoMainId=G.GeoMainId
  		LEFT OUTER JOIN GeographyLevel GL (NOLOCK) ON GL.GeoLevelId=G.GeoLevelId  
		WHERE ISNULL(RAS.Geoid,0)<>0  AND RAS.Upload=0
	) AS Geo
	WHERE ETL.RtrId=Geo.RtrId
	--UPDATE Cs2Cn_Prk_Retailer SET Mode = 'CR' WHERE ISNULL(Approved,'PENDING') IN ('APPROVED','REJECTED') AND Mode = 'New' AND UploadFlag='N'
	--UPDATE Cs2Cn_Prk_Retailer SET Mode = 'New' WHERE ISNULL(Approved,'PENDING') NOT IN ('APPROVED','REJECTED') AND UploadFlag='N'
	UPDATE Cs2Cn_Prk_Retailer SET Mode = 'CR' WHERE ISNULL(Approved,'PENDING') IN ('APPROVED') AND Mode = 'New' AND UploadFlag='N'
	UPDATE Cs2Cn_Prk_Retailer SET Mode = 'New' WHERE ISNULL(Approved,'PENDING') IN ('PENDING','REJECTED') AND UploadFlag='N'
	--Till Here
	
	UPDATE Retailer SET Upload='Y' WHERE Upload='N'
	AND CmpRtrCode IN(SELECT CmpRtrCode FROM Cs2Cn_Prk_Retailer WHERE UploadFlag='N') --WHERE Mode='New')
	
	UPDATE RetailerClassficationChange SET UpLoadFlag=1 WHERE UpLoadFlag=0
	AND RtrCode IN(SELECT RtrCode FROM Cs2Cn_Prk_Retailer WHERE Mode='AP' AND UploadFlag='N')
	
	UPDATE RetailerApprovalStatus SET Upload=1 WHERE Upload=0
	AND RtrId IN(SELECT RtrId FROM Cs2Cn_Prk_Retailer WHERE Mode='AP' AND UploadFlag='N')
	
	UPDATE Cs2Cn_Prk_Retailer SET ServerDate=@ServerDate
	 ----------- added by lakshman M Dated ON 21-05-2019 PMS ID: ILCRSTPAR4514  
	 INSERT INTO Cs2Cn_Prk_Retailer_trace (DistCode,RtrId,RtrCode,CmpRtrCode,RtrName,RtrAddress1,RtrAddress2,RtrAddress3,RtrPINCode,RtrChannelCode,RtrGroupCode,RtrClassCode,KeyAccount,RelationStatus,   
	 ParentCode,RtrRegDate,GeoLevel,GeoLevelValue,VillageId,VillageCode,VillageName,Status,Mode,DrugLNo,RtrFrequency,RtrPhoneNo,RtrTINNumber,RtrTaxGroupCode,RtrCrLimit,RtrCrDays,   
	 Approved,RtrType,UploadFlag,SyncId,ServerDate,StateName,GSTTIN,PanNumber,RetailerType,Composite,RelatedParty,Uploadeddate)  
	 SELECT DistCode,RtrId,RtrCode,CmpRtrCode,RtrName,RtrAddress1,RtrAddress2,RtrAddress3,RtrPINCode,RtrChannelCode,RtrGroupCode,RtrClassCode,KeyAccount,RelationStatus,   
	 ParentCode,RtrRegDate,GeoLevel,GeoLevelValue,VillageId,VillageCode,VillageName,Status,Mode,DrugLNo,RtrFrequency,RtrPhoneNo,RtrTINNumber,RtrTaxGroupCode,RtrCrLimit,RtrCrDays,   
	 Approved,RtrType,UploadFlag,SyncId,ServerDate,StateName,GSTTIN,PanNumber,RetailerType,Composite,RelatedParty,GETDATE() AS Uploadeddate FROM Cs2Cn_Prk_Retailer (NOLOCK) WHERE UploadFlag ='N'  
	 -------------- Till here -----------------------  
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_Validate_WS2CS_SalesOrderDetail' AND TYPE ='P')
DROP PROCEDURE Proc_Validate_WS2CS_SalesOrderDetail
GO
/*  
BEGIN TRANSACTION   
DELETE FROM ERRORLOG  
exec Proc_Validate_WS2CS_SalesOrderDetail 0   
SELECT * FROM ERRORLOG  
SELECT * FROM ORDERBOOKING ORDER BY ORDERDATE DESC  
SELECT * FROM ORDERBOOKINGPRODUCTS -- where orderno in (SELECT orderno FROM ORDERBOOKING where orderdate='2018-08-11')  
ROLLBACK TRANSACTION  
*/  
CREATE PROCEDURE Proc_Validate_WS2CS_SalesOrderDetail  
(  
 @Po_ErrNo INT OUTPUT  
)  
AS        
/*******************************************************************************************  
* PROCEDURE  : Proc_Validate_WS2CS_SalesOrderDetail  
* PURPOSE  : To Validate the Order booking details From PDA Intermediate Database  
* CREATED  : S.Moorthi  
* CREATED DATE : 24/08/2018  
* MODIFIED  :  
* DATE      AUTHOR     DESCRIPTION  
*****************************************************************************************************  
* DATE         AUTHOR       CR/BZ    USER STORY ID   DESCRIPTION                           
*****************************************************************************************************  
  24/08/2018   S.Moorthi    CR         CRCRSTPAR0020   Parle SFA integration to Vxceed server(Phase 2&3) 
  07-05-2019   Lakshman M   BZ         ILCRSTPAR4318   Request to allow the Billing if stock available in another batch automatic convert in billing screren. and Product default price validation included in CS.
********************************************************************************************/   
DECLARE @OrdKeyNo AS VARCHAR(50)        
DECLARE @CurrVal AS INT        
DECLARE @RtrId AS INT        
DECLARE @MktId AS INT  
DECLARE @Smid AS INT   
DECLARE @GetKeyStr AS Varchar(50)  
DECLARE @RtrShipId AS INT  
DECLARE @OrdPrdCnt AS INT  
DECLARE @ImpOrdPrdCnt AS INT  
DECLARE @OrderDate AS DateTime   
DECLARE @SalesmanCode NVarchar(100)  
DECLARE @RouteCode NVarchar(100)   
DECLARE @RetailerCode NVarchar(100)  
DECLARE @Remarks NVARCHAR(200)  
DECLARE @lError AS INT  
DECLARE @LAUdcMasterId AS VARCHAR(50)  
DECLARE @LOUdcMasterId AS VARCHAR(50)  
DECLARE @Longitude AS VARCHAR(50)  
DECLARE @Latitude AS VARCHAR(50)  
SET @Po_ErrNo=0  
BEGIN  
 BEGIN TRANSACTION T1  
   
 DELETE FROM Import_WS2CS_SalesOrderHeader_Track WHERE CONVERT(VARCHAR(10),CreatedDate,121)<=DATEADD(M,-3,CONVERT(VARCHAR(10),GETDATE(),121))  
 DELETE FROM Import_WS2CS_SalesOrderDetail_Track WHERE CONVERT(VARCHAR(10),CreatedDate,121)<=DATEADD(M,-3,CONVERT(VARCHAR(10),GETDATE(),121))  
   
 DELETE FROM Import_WS2CS_SalesOrderDetail WHERE DownloadFlag='Y'  
 DELETE FROM Import_WS2CS_SalesOrderHeader  WHERE DownloadFlag='Y'   
   
 SELECT DocumentPrefix+CAST(DocumentNumber AS VARCHAR(10)) AS OrderNo into #tempORDER   
 from Import_WS2CS_SalesOrderHeader WHERE DocumentAmount>=0  
   
 INSERT INTO Import_WS2CS_SalesOrderHeader_Track(TenantCode,LocationCode,RouteCode,SalesmanCode,CustomerCode,  
 DocumentType,DocumentPrefix,DocumentNumber,DocumentDate,DeliveryDate,PostingDateTime,  
 DocumentAmount,DownloadFlag,CreatedDate)  
 SELECT TenantCode,LocationCode,RouteCode,SalesmanCode,CustomerCode,  
 DocumentType,DocumentPrefix,DocumentNumber,DocumentDate,DeliveryDate,PostingDateTime,  
 DocumentAmount,DownloadFlag,CreatedDate FROM Import_WS2CS_SalesOrderHeader WHERE DownloadFlag='N'  
 and DocumentAmount>0   
 AND DocumentPrefix+CAST(DocumentNumber AS VARCHAR(10)) IN (SELECT OrderNo FROM #tempORDER)  
 INSERT INTO Import_WS2CS_SalesOrderDetail_Track(TenantCode,LocationCode,DocumentPrefix,DocumentNumber,  
 SequenceNumber,TransactionType,ItemCode,UnitsOfMeasure,ItemQuantity,ItemPrice,PromotionAmount,ItemExciseTax,  
 TotalLineAmount,IsFreeGood,DownloadFlag,CreatedDate)    
 SELECT TenantCode,LocationCode,DocumentPrefix,DocumentNumber,  
 SequenceNumber,TransactionType,ItemCode,UnitsOfMeasure,ItemQuantity,ItemPrice,PromotionAmount,ItemExciseTax,  
 TotalLineAmount,IsFreeGood,DownloadFlag,CreatedDate  FROM Import_WS2CS_SalesOrderDetail   
 WHERE DownloadFlag='N' AND DocumentPrefix+CAST(DocumentNumber AS VARCHAR(10)) IN (SELECT OrderNo FROM #tempORDER)  
   
 UPDATE Import_WS2CS_SalesOrderHeader SET CustomerCode='' WHERE CustomerCode='Dummy'   
    
 UPDATE Import_WS2CS_SalesOrderHeader SET DownloadFlag='D' WHERE DownloadFlag='N'  
 UPDATE Import_WS2CS_SalesOrderDetail SET DownloadFlag='D' WHERE DownloadFlag='N'  
   
 UPDATE A SET A.RouteCode=RM.RMCODE FROM Import_WS2CS_SalesOrderHeader A (NOLOCK)  
 INNER JOIN Salesman SM (NOLOCK) ON A.SalesmanCode=SM.SMCode     
 INNER JOIN SalesmanMarket SMM (NOLOCK) ON SMM.SMId=SM.SMId   
 INNER JOIN RouteMaster RM(NOLOCK) ON RM.RMId=SMM.RMId   
 INNER JOIN RetailerMarket RM1(NOLOCK) ON RM1.RMId=RM.RMId  
 INNER JOIN Retailer R (nolock) ON R.CmpRtrCode=A.CustomerCode and RM1.RtrId=R.RtrId   
 WHERE DownLoadFlag='D' and DocumentAmount>=0  
   
 CREATE TABLE #ProductPrice  
 (  
  Prdid  INT,   
  PrdBatid INT,  
  PriceId  INT,  
  MRP   NUMERIC(18,6)  
 )  
   
 CREATE TABLE #TEMPCHECK  
 (  
  OrderNo NVARCHAR(100) COLLATE DATABASE_DEFAULT,  
  Cnt   INT  
 )  
   
 ---ORDER FOR NEW RETAILERS   
 INSERT INTO WS2CS_SalesOrderHeader_NewRetailer(OrderNo,RouteCode,SalesmanCode,CustomerCode,DocumentType,DocumentPrefix,DocumentNumber,  
 DocumentDate,DeliveryDate,PostingDateTime,DocumentAmount,DownLoadFlag)  
 SELECT DISTINCT DocumentPrefix+CAST(DocumentNumber AS VARCHAR(10)),RouteCode,SalesmanCode,CustomerCode,DocumentType,DocumentPrefix,DocumentNumber,  
 DocumentDate,DeliveryDate,PostingDateTime,DocumentAmount,DownloadFlag FROM Import_WS2CS_SalesOrderHeader   
   WHERE DownLoadFlag='D' AND ISNULL(CustomerCode,'')=''  
   AND DocumentPrefix+CAST(DocumentNumber AS VARCHAR(10)) IN (SELECT OrderNo FROM #tempORDER)  
     
 INSERT INTO WS2CS_SalesOrderDetail_NewRetailer(OrderNo,DocumentPrefix,DocumentNumber,SequenceNumber,TransactionType,ItemCode,  
 UnitsOfMeasure,ItemQuantity,ItemPrice,PromotionAmount,ItemExciseTax,TotalLineAmount,IsFreeGood,DownLoadFlag)  
 SELECT DISTINCT DocumentPrefix+CAST(DocumentNumber AS VARCHAR(10)) OrderNo,DocumentPrefix,DocumentNumber,SequenceNumber,TransactionType,ItemCode,  
 UnitsOfMeasure,ItemQuantity,ItemPrice,PromotionAmount,ItemExciseTax,TotalLineAmount,IsFreeGood,DownLoadFlag  
 FROM Import_WS2CS_SalesOrderDetail WHERE DownLoadFlag='D' AND DocumentPrefix+CAST(DocumentNumber AS VARCHAR(10)) IN  
 (SELECT DocumentPrefix+CAST(DocumentNumber AS VARCHAR(10)) FROM Import_WS2CS_SalesOrderHeader   
 WHERE DownLoadFlag='D' AND ISNULL(CustomerCode,'')='')    
 AND DocumentPrefix+CAST(DocumentNumber AS VARCHAR(10)) IN (SELECT OrderNo FROM #tempORDER)  
   
 UPDATE B SET DownLoadFlag='Y' FROM WS2CS_SalesOrderHeader_NewRetailer A   
 INNER JOIN Import_WS2CS_SalesOrderHeader B ON A.OrderNo=B.DocumentPrefix+CAST(B.DocumentNumber AS VARCHAR(10))   
 WHERE B.DownLoadFlag='D'   
   
 UPDATE B SET DownLoadFlag='Y' FROM WS2CS_SalesOrderDetail_NewRetailer A   
 INNER JOIN Import_WS2CS_SalesOrderDetail B ON A.OrderNo=B.DocumentPrefix+CAST(B.DocumentNumber AS VARCHAR(10))   
 WHERE B.DownLoadFlag='D'   
   
   
 SELECT DISTINCT C.DocumentPrefix+CAST(C.DocumentNumber AS VARCHAR(10)) OrderNo,  
 C.SalesmanCode,C.RouteCode,C.CustomerCode,CONVERT(VARCHAR(10),C.PostingDateTime,121) OrderDt  INTO #ORDERDETAILS  
 FROM Import_WS2CS_SalesOrderHeader C   
 INNER JOIN Import_WS2CS_SalesOrderDetail CP ON C.DocumentPrefix+CAST(C.DocumentNumber AS VARCHAR(10)) =CP.DocumentPrefix+CAST(CP.DocumentNumber AS VARCHAR(10))  --AND C.SfaOrderNo=CP.SfaOrderNo   
 INNER JOIN Retailer R (NOLOCK) ON R.CmpRtrCode=C.CustomerCode   
 WHERE C.DownloadFlag='D'  --AND NewCustomerFlag='Y'  
 AND C.DocumentPrefix+CAST(C.DocumentNumber AS VARCHAR(10)) IN (SELECT OrderNo FROM #tempORDER)   
 SELECT DISTINCT C.DocumentPrefix+CAST(C.DocumentNumber AS VARCHAR(10)) OrderNo,  
 ItemCode AS ProdCode,CAST('' AS VARCHAR(100)) AS ProdBatchCode,UnitsOfMeasure AS UomCode,ItemQuantity AS OrderQty,TotalLineAmount AS OrderValue  
 INTO #Import_WS2CS_SalesOrderDetail  
 FROM Import_WS2CS_SalesOrderDetail C WHERE DownLoadFlag='D'   
 AND C.DocumentPrefix+CAST(C.DocumentNumber AS VARCHAR(10)) IN(SELECT OrderNo FROM #ORDERDETAILS)  
   
 SELECT B.PrdId,PrdCCode,MAX(PrdBatId) AS PrdBatId INTO #TempBatDt FROM #Import_WS2CS_SalesOrderDetail A   
 INNER JOIN Product B (NOLOCK) ON A.ProdCode=B.PrdCCode   
 INNER JOIN ProductBatch C (NOLOCK) ON C.PrdId=B.PrdId   
 GROUP BY B.PrdId,PrdCCode  
   
 UPDATE A SET A.ProdBatchCode=PB.PrdBatCode FROM #Import_WS2CS_SalesOrderDetail A   
 INNER JOIN #TempBatDt B ON A.ProdCode=B.PrdCCode   
 INNER JOIN ProductBatch PB ON PB.PrdBatId=B.PrdBatId AND PB.PrdId=PB.PrdId   
    
   
 SELECT OrderNo INTO #OrderNo FROM    
 #ORDERDETAILS GROUP BY OrderNo HAVING COUNT(OrderNo)>1  
   
 INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)  
 SELECT  1,'SalesOrderHeader','Import_WS2CS_SalesOrderHeader','Duplicate Order details available for '+OrderNo FROM    
 #ORDERDETAILS GROUP BY OrderNo HAVING COUNT(OrderNo)>1  
   
 SELECT UomCode INTO #TempBaseUOM FROM UomGroup UG (NOLOCK)   
 INNER JOIN UomMaster UM (NOLOCK) ON UG.UomId=UM.UomId WHERE UG.BaseUom='Y'  
 DECLARE CUR_Import CURSOR FOR  
 SELECT DISTINCT OrderNo,SalesmanCode,RouteCode,CustomerCode,OrderDt From #ORDERDETAILS   
  ORDER BY OrderDt ASC  
 OPEN CUR_Import  
 FETCH NEXT FROM CUR_Import INTO @OrdKeyNo,@SalesmanCode,@RouteCode,@RetailerCode,@OrderDate   
 While @@Fetch_Status = 0  
 BEGIN   
    
  SET @OrdPrdCnt=0  
  SET @ImpOrdPrdCnt=0  
  SET @lError = 0  
  SET @RtrId=0  
  SET @RtrShipId=0  
  SET @MktId=0   
   
   IF NOT EXISTS (SELECT DocRefNo FROM OrderBooking(NOLOCK) WHERE DocRefNo = @OrdKeyNo)  
  BEGIN   
   IF NOT EXISTS (SELECT RtrId FROM Retailer(NOLOCK) WHERE LTRIM(RTRIM(CmpRtrCode)) = @RetailerCode)-- AND RtrStatus = 1)  
   BEGIN  
    SET @lError = 1  
    INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)  
    SELECT 1,'Import_WS2CS_SalesOrderHeader','CustomerCode','Retailer Does Not Exists for the Order ' + @OrdKeyNo  
   END    
   ELSE  
   BEGIN  
     SELECT @Rtrid= RtrId FROM Retailer(NOLOCK) WHERE LTRIM(RTRIM(CmpRtrCode)) = @RetailerCode  
   END  
     
   SELECT @RtrShipId=(  
   SELECT top 1 RS.RtrShipId FROM RetailerShipAdd RS (NOLOCK) INNER JOIN Retailer R (NOLOCK) ON R.Rtrid= RS.Rtrid   
   WHERE  R.RtrId=@RtrId)  
     
   IF ISNULL(@RtrShipId,0)=0  
   BEGIN  
    SET @RtrShipId=0  
   END  
     
   IF ISNULL(@RtrShipId,0)=0  
   BEGIN  
    SET @lError = 1  
    INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)  
    SELECT  2,'Import_WS2CS_SalesOrderHeader','CustomerCode','Retailer Shipping Address Does Not Exists for the Order ' + @OrdKeyNo   
   END   
     
   IF NOT EXISTS (SELECT RMID FROM RouteMaster(NOLOCK) WHERE LTRIM(RTRIM(RMCode)) = @RouteCode AND RMstatus = 1)  
   BEGIN  
    SET @lError = 1  
    INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)  
    SELECT 3,'Import_WS2CS_SalesOrderHeader','RouteCode','Market Does Not Exists for the Order ' + @OrdKeyNo   
   END  
   ELSE  
   BEGIN  
    SELECT @MktId=RMID FROM RouteMaster(NOLOCK) WHERE LTRIM(RTRIM(RMCode)) = @RouteCode  
   END  
     
   IF NOT EXISTS (SELECT SMId FROM Salesman(NOLOCK) WHERE LTRIM(RTRIM(SMCode)) = @SalesmanCode AND Status = 1)  
   BEGIN  
    SET @lError = 1  
    INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)  
    SELECT 4,'Import_WS2CS_SalesOrderHeader','DistrSalesmanCode','Salesman Does Not Exists for the Order ' + @OrdKeyNo    
   END  
   ELSE  
   BEGIN  
     SELECT @Smid=SMId FROM Salesman(NOLOCK) WHERE LTRIM(RTRIM(SMCode)) = @SalesmanCode  
   END     
     
   --SELECT @lError,'T1'  
   IF NOT EXISTS (SELECT * FROM SalesManMarket(NOLOCK) WHERE RMID = @MktId AND SMID = @Smid)  
   BEGIN  
    SET @lError = 1  
    INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)  
    SELECT 5,'Import_WS2CS_SalesOrderHeader','DistrSalesmanCode','Market Not Maped with the Salesman for the Order ' + @OrdKeyNo   
   END  
     
   IF EXISTS(SELECT ProdCode FROM #Import_WS2CS_SalesOrderDetail WHERE ProdCode NOT IN(SELECT PrdCCode FROM PRODUCT ) AND OrderNo=@OrdKeyNo )  
   BEGIN  
    SET @lError = 1  
    INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)  
    SELECT 6,'#Import_WS2CS_SalesOrderDetail','ProdCode',ProdCode+' Product Code does not Exists for the Order ' + @OrdKeyNo   
    FROM #Import_WS2CS_SalesOrderDetail WHERE ProdCode NOT IN(SELECT PrdCCode FROM PRODUCT) AND OrderNo=@OrdKeyNo      
   END   
   IF EXISTS(SELECT ProdCode FROM #Import_WS2CS_SalesOrderDetail WHERE ProdBatchCode NOT IN(SELECT CmpBatCode FROM ProductBatch(NOLOCK)) AND OrderNo=@OrdKeyNo )  
   BEGIN  
    SET @lError = 1  
    INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)  
    SELECT 6,'#Import_WS2CS_SalesOrderDetail','ProdBatchCode',ProdBatchCode+' ProductBatch Code does not Exists for the Order ' + @OrdKeyNo   
    FROM #Import_WS2CS_SalesOrderDetail WHERE ProdBatchCode NOT IN(SELECT CmpBatCode FROM ProductBatch(NOLOCK)) AND OrderNo=@OrdKeyNo      
   END      
     
   IF EXISTS(SELECT ProdCode FROM #Import_WS2CS_SalesOrderDetail WHERE OrderQty=0 AND OrderNo=@OrdKeyNo )  
   BEGIN  
    SET @lError = 1  
    INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)  
    SELECT  8,'#Import_WS2CS_SalesOrderDetail','ProdCode',ProdCode+' Order Quantity is Zero for the Order ' + @OrdKeyNo   
    FROM #Import_WS2CS_SalesOrderDetail WHERE OrderQty=0 AND OrderNo=@OrdKeyNo    
   END    
     
   IF EXISTS(SELECT ProdCode FROM #Import_WS2CS_SalesOrderDetail WHERE ISNULL(UomCode,'')='' AND OrderNo=@OrdKeyNo )  
   BEGIN  
    SET @lError = 1  
    INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)  
    SELECT  10,'#Import_WS2CS_SalesOrderDetail','UomCode',ProdCode+' Uom is Null for the Order ' + @OrdKeyNo   
    FROM #Import_WS2CS_SalesOrderDetail WHERE ISNULL(UomCode,'')='' AND OrderNo=@OrdKeyNo  
   END       
   IF EXISTS(SELECT ProdCode FROM #Import_WS2CS_SalesOrderDetail WHERE ISNULL(UPPER(LTRIM(RTRIM(UomCode))),'')   
   NOT IN (SELECT UomCode FROM #TempBaseUOM)  AND OrderNo=@OrdKeyNo )  
   BEGIN  
    SET @lError = 1  
    INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)  
    SELECT 9,'#Import_WS2CS_SalesOrderDetail','UomCode',ProdCode+' Uom does not Exists for the Order ' + @OrdKeyNo    
    FROM #Import_WS2CS_SalesOrderDetail WHERE ISNULL(UomCode,'')   
    NOT IN (SELECT UomCode FROM #TempBaseUOM) AND OrderNo=@OrdKeyNo   
   END  
   IF EXISTS(SELECT * from #Import_WS2CS_SalesOrderDetail WHERE NOT EXISTS(  
   SELECT Prdccode FROM Product P (NOLOCK)   
   INNER JOIN #Import_WS2CS_SalesOrderDetail I ON I.ProdCode=P.Prdccode  
   INNER JOIN UOMMaster UM ON UM.UomCode=I.UomCode  
   INNER JOIN UomGroup U ON U.UomGroupId=P.UomGroupId AND UM.Uomid=U.Uomid)  
   and OrderNo=@OrdKeyNo)  
   BEGIN  
    SET @lError = 1  
    INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)  
    SELECT 10,'#Import_WS2CS_SalesOrderDetail','UomCode',ProdCode+ ' UOM does not exists for the product ' + @OrdKeyNo   
    FROM #Import_WS2CS_SalesOrderDetail WHERE NOT EXISTS(  
    SELECT Prdccode FROM Product P (NOLOCK)   
    INNER JOIN #Import_WS2CS_SalesOrderDetail I ON I.ProdCode=P.Prdccode  
    INNER JOIN UOMMaster UM ON UM.UomCode=I.UomCode  
    INNER JOIN UomGroup U ON U.UomGroupId=P.UomGroupId AND UM.Uomid=U.Uomid)  
    and OrderNo=@OrdKeyNo  
         
   END   
     
   SET @GetKeyStr=''    
   SELECT @GetKeyStr = dbo.Fn_GetPrimaryKeyString('OrderBooking','OrderNo',CAST(YEAR(GetDate())AS INT),MONTH(GETDATE()))         
    IF LEN(LTRIM(RTRIM(@GetKeyStr)))=0    
    BEGIN    
     SET @lError = 1  
     INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)  
     SELECT 11,'#Import_WS2CS_SalesOrderDetail','OrderNo','Ordered Key No not generated for ORder'+@OrdKeyNo    
     BREAK    
    END  
    SELECT @lError,@OrdKeyNo  
    IF @lError = 0    
    BEGIN  
     --SELECT @Remarks=ISNULL(Remarks,'') FROM Import_WS2CS_SalesOrderHeader WHERE OrderNo=@OrdKeyNo   
     SET @Remarks=''  
       
     INSERT INTO OrderBooking(    
     OrderNo,OrderDate,DeliveryDate,CmpId,DocRefNo,AllowBackOrder,SmId,RmId,RtrId,OrdType,    
     Priority,FillAllPrd,ShipTo,RtrShipId,Remarks,RoundOff,RndOffValue,TotalAmount,Status,    
     Availability,LastModBy,LastModDate,AuthId,AuthDate,PDADownLoadFlag,Upload)    
     SELECT @GetKeyStr,CONVERT(DATETIME,@OrderDate,121),    
     CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121),    
     0,@OrdKeyNo,0, @Smid AS Smid,    
     @MktId AS RmId,@RtrId AS RtrId,0 as OrdType,0 AS Priority,0 AS FillAllPrd,0 AS ShipTo,    
     @RtrShipId AS RtrShipId,@Remarks AS Remarks,0  AS RoundOff,0 AS RndOffValue,    
     0 AS TotalAmount,0 AS Status,1,1,CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121),    
     1,CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121),1,0  -- (PDADownloadflag as 1) Added By lakshman  M Dated ON 07-05-2019 PMS ID: ILCRSTPAR4318
     
    --DETAILS   
     DELETE FROM #ProductPrice  
     INSERT INTO #ProductPrice   
     SELECT P.Prdid,PB.PrdBatid,MAX(PriceId) AS PriceId ,PrdBatDetailValue AS MRP  
     FROM Product P (NOLOCK) INNER JOIN Productbatch PB (NOLOCK) ON P.Prdid=PB.PrdId    
     INNER JOIN #Import_WS2CS_SalesOrderDetail I ON I.ProdCode=P.Prdccode AND I.ProdBatchCode=PB.CmpBatCode  
     INNER JOIN ProductBatchDetails PBD (NOLOCK) ON PBD.PrdBatid=Pb.PrdBatid  
       AND   PBD.SLNo=1     
     WHERE OrderNo=@OrdKeyNo and PBD.DefaultPrice=1  
     GROUP BY P.Prdid,PB.PrdBatid,PrdBatDetailValue  
      
     INSERT INTO ORDERBOOKINGPRODUCTS(OrderNo,PrdId,PrdBatId,UOMId1,Qty1,ConvFact1,UOMId2,Qty2,ConvFact2,TotalQty,BilledQty,Rate,  
               MRP,GrossAmount,PriceId,Availability,LastModBy,LastModDate,AuthId,AuthDate,SlNo)    
     SELECT @GetKeyStr,Prdid,Prdbatid,UomID,SUM(OrderQty),ConversionFactor,0,0,0,SUM(OrderQty*ConversionFactor),0,  
      Rate ,MRP,SUM(GrossAmount)GrossAmount,PriceId,  
     1,1,CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121),    
     1,CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121),LineId  
     FROM (   
     SELECT  P.Prdid,PB.Prdbatid,U.UomID,OrderQty,u.ConversionFactor,    
     PBD.PrdBatDetailValue Rate,PP.Mrp,(PBD.PrdBatDetailValue*(OrderQty*ConversionFactor)) as GrossAmount,PBD.PriceId,ROW_Number()OVER(ORder by P.Prdid)LineId  
     FROM Product P (NOLOCK) INNER JOIN Productbatch PB (NOLOCK) ON P.Prdid=PB.PrdId    
     INNER JOIN #Import_WS2CS_SalesOrderDetail I ON I.ProdCode=P.Prdccode  AND I.ProdBatchCode=PB.CmpBatCode  
     INNER JOIN UOMMaster UM ON UM.UomCode=I.UOMCode  
     INNER JOIN UomGroup U ON U.UomGroupId=P.UomGroupId AND UM.Uomid=U.Uomid  
     INNER JOIN BatchCreation BC (NOLOCK) ON BC.BatchSeqId=PB.BatchSeqId  
     INNER JOIN #ProductPrice PP ON PP.Prdid=P.Prdid  AND PP.Prdbatid=PB.Prdbatid  
     INNER JOIN ProductBatchDetails PBD (NOLOCK) ON PBD.PrdBatid=Pb.PrdBatid AND PBD.Prdbatid=PP.Prdbatid  AND PP.Priceid=PBD.PriceId  
          AND BC.slno=PBD.SLNo AND BC.SelRte=1    
     WHERE OrderNo=@OrdKeyNo  
     )A  
     GROUP BY Prdid,Prdbatid,UomID,ConversionFactor,Rate,MRP,PriceId,LineId  
     ORDER BY LineId  
       
     UPDATE OB SET TotalAmount=X.TotAmt FROM OrderBooking OB INNER JOIN(SELECT ISNULL(SUM(GrossAmount),0)as TotAmt,OrderNo    
     FROM ORDERBOOKINGPRODUCTS WHERE OrderNo=@GetKeyStr GROUP BY OrderNo )X  ON X.OrderNo=OB.OrderNo     
       INSERT INTO #TEMPCHECK   
       SELECT OrderNo,Count(ProdCode)Cnt    
       FROM(     
       SELECT DISTINCT OrderNo,ProdCode,ProdBatchCode  
       FROM #Import_WS2CS_SalesOrderDetail WHERE OrderNo=@OrdKeyNo  
       )A GROUP BY OrderNo  
            
       SELECT @OrdPrdCnt=ISNULL(Count(PRDID),0) FROM ORDERBOOKINGPRODUCTS (NOLOCK) WHERE OrderNo=@GetKeyStr    
       SELECT @ImpOrdPrdCnt=ISNULL(Cnt,0) FROM #TEMPCHECK (NOLOCK) WHERE OrderNo=@OrdKeyNo  
     
      IF @OrdPrdCnt=@ImpOrdPrdCnt    
      BEGIN   
       UPDATE COUNTERS SET CurrValue=CurrValue+1 WHERE TabName='OrderBooking' and FldName='OrderNo'   
       UPDATE Import_WS2CS_SalesOrderDetail SET DownLoadFlag='Y' WHERE DocumentPrefix+CAST(DocumentNumber AS VARCHAR(10)) = @OrdKeyNo   
       UPDATE Import_WS2CS_SalesOrderHeader SET DownLoadFlag='Y' WHERE DocumentPrefix+CAST(DocumentNumber AS VARCHAR(10)) = @OrdKeyNo   
      END  
      ELSE  
      BEGIN  
       SET @lError = 1  
       INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)  
       SELECT 12,'Import_WS2CS_SalesOrderDetail','OrderNo','Imported Ordered Product Number count does not match with Processed Order ' + @OrdKeyNo    
       DELETE FROM ORDERBOOKINGPRODUCTS WHERE OrderNo=@GetKeyStr    
       DELETE FROM ORDERBOOKING WHERE OrderNo=@GetKeyStr   
       DELETE FROM  ORDERBOOKING WHERE OrderNo NOT IN (SELECT OrderNo FROM ORDERBOOKINGPRODUCTS) AND OrderNo=@GetKeyStr  
      END     
    END  
   END  
   ELSE  
   BEGIN  
    SET @lError = 1  
    INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)   
    SELECT 1,'Import_WS2CS_SalesOrderHeader','OrderNo', @OrdKeyNo+' Order Already exists'   
   END  
     
  FETCH NEXT FROM CUR_Import INTO @OrdKeyNo,@SalesmanCode,@RouteCode,@RetailerCode,@OrderDate    
 END  
 CLOSE CUR_Import  
 DEALLOCATE CUR_Import  

 --------- Added By lakshman M Dated ON 07-05-2019 PMS ID: ILCRSTPAR4318 -----
	 SELECT OB.OrderNo,P.Prdid,PB.PrdBatid,MAX(PBD.PriceId) AS PriceId ,PrdBatDetailValue AS MRP INTO #PrdPrice 
     FROM Product P (NOLOCK) INNER JOIN Productbatch PB (NOLOCK) ON P.Prdid=PB.PrdId    
     INNER JOIN orderbookingproducts OP (NOLOCK) ON OP.PrdId =P.PrdId and OP.PrdBatId =PB.PrdBatId 
     INNER JOIN OrderBooking OB (NOLOCK)ON OB.OrderNo =OP.OrderNo 
     INNER JOIN ProductBatchDetails PBD (NOLOCK) ON PBD.PrdBatid=Pb.PrdBatid AND  PBD.SLNo=1 and OP.PrdBatId = PBD.PrdBatId 
     WHERE PBD.DefaultPrice=1 AND OB.STATUS = 0 --and  OB.orderno ='ORD1901799' and p.PrdId = 147
     GROUP BY P.Prdid,PB.PrdBatid,PrdBatDetailValue,OB.OrderNo 
	 	
	UPDATE A SET A.PRICEID = B.PRICEID FROM ORDERBOOKINGPRODUCTS A (NOLOCK)  INNER JOIN #PRDPRICE B ON A.PRDID =B.PRDID AND A.PRDBATID =B.PRDBATID AND A.Orderno =B.Orderno
	INNER JOIN ORDERBOOKING OB (NOLOCK) ON OB.ORDERNO = A.ORDERNO AND OB.ORDERNO =B.ORDERNO
	WHERE OB.STATUS =0 
 ----------------------  Till here --------------------
 ---Sales Return   

 EXEC Proc_Validate_WS2CS_SalesReturnProducts 0  
   
 IF @@ERROR = 0  
 BEGIN  
  COMMIT TRANSACTION T1  
 END  
 ELSE  
 BEGIN  
  ROLLBACK TRANSACTION T1  
 ENd  
END
GO
IF EXISTS (SELECT * from SYSOBJECTS WHERE NAME ='Proc_Cs2Cn_SchemeUtilizationDetails' AND TYPE ='P')
DROP PROCEDURE Proc_Cs2Cn_SchemeUtilizationDetails
GO
/*
BEGIN TRANSACTION
EXEC Proc_Cs2Cn_SchemeUtilizationDetails 0,''
SELECT * FROM Cs2Cn_Prk_SchemeUtilizationDetails where transno ='P1900615'
--SELECT * FROM SalesInvoiceSchemeLineWise
ROLLBACK TRANSACTION
*/
CREATE PROCEDURE Proc_Cs2Cn_SchemeUtilizationDetails
(
	@Po_ErrNo	INT OUTPUT,
	@ServerDate DATETIME
)
AS
/*********************************
* PROCEDURE		: Proc_Cs2Cn_SchemeUtilizationDetails
* PURPOSE		: To Extract Scheme Utilization Details from CoreStocky to upload to Console
* CREATED BY	: Nandakumar R.G
* CREATED DATE	: 19/10/2010
* NOTE			:
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
* Date            Name              PMS NO            CR/BUG		Remarks  
-------------------------------------------------------------------------------------------------------  
*23/05/2019     Lakshman M        ILCRSTPAR4550         BUG			while uploading scheme utilization amount one product different uom done in billing. prdslno validation missing in script level.  
*********************************/
SET NOCOUNT ON
BEGIN
	DECLARE @CmpID 		AS INTEGER
	DECLARE @DistCode	AS NVARCHAR(50)
	DECLARE @ChkDate	AS DATETIME
	DECLARE @ChkSRDate	AS DATETIME
	SET @Po_ErrNo=0
	DELETE FROM Cs2Cn_Prk_SchemeUtilizationDetails WHERE UploadFlag = 'Y'
	SELECT @CmpID = CmpId FROM Company WHERE DefaultCompany = 1	
	SELECT @DistCode = DistributorCode FROM Distributor
	SELECT @ChkDate = NextUpDate FROM DayEndProcess	Where ProcId = 1
	SELECT @ChkSRDate = NextUpDate FROM DayEndProcess Where ProcId = 4
	--->Billing-Scheme Amount
	INSERT INTO Cs2Cn_Prk_SchemeUtilizationDetails
	(
		DistCode,TransName,SchUtilizeType,CmpCode,CmpSchCode,SchCode,SchDescription,SchType,SlabId,TransNo,TransDate,RtrId,CmpRtrCode,RtrCode,
		BilledPrdCCode,BilledPrdBatCode,BilledQty,SchUtilizedAmt,SchDiscPerc,FreePrdCCode,FreePrdBatCode,FreeQty,NoOfTimes,UploadFlag
	)
	SELECT @DistCode,'Billing','Amount',CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,
	CASE SM.SchType WHEN 1 THEN 'Quantity Based' WHEN 2 THEN 'Amount Based' WHEN 3 THEN 'Weight Based' WHEN 4 THEN 'Display' END,
	A.SlabId,B.SalInvNo,B.SalInvDate,B.RtrId,R.CmpRtrCode,R.RtrCode,
	P.PrdCCode,PB.PrdBatCode,SIP.BaseQty,(ISNULL(SUM(FlatAmount),0)+ISNULL(SUM(DiscountPerAmount),0)) AS Utilized,		
	A.DiscPer,'','',0,0,'N'
	FROM SalesInvoiceSchemeLineWise A 
	INNER JOIN SalesInvoice B ON A.SalId = B.SalId 
	INNER JOIN SchemeMaster SM ON A.Schid = SM.SchId 
	INNER JOIN Company CM ON SM.CmpId = CM.CmpId
	INNER JOIN Retailer R ON R.RtrId = B.RtrId
	INNER JOIN Product P ON A.PrdId=P.PrdId
	INNER JOIN ProductBatch PB ON PB.PrdId=P.PrdId AND A.PrdBatId=PB.PrdBatId
	INNER JOIN SalesInvoiceProduct SIP ON SIP.SalId = B.SalId AND A.SalId=SIP.SalId AND SIP.PrdId=A.PrdID AND SIP.PrdBatId=A.PrdBatId AND SIP.slno =A.rowid ---------> added by lakshman M  Dated ON 23-05-2019 PMS ID: ILCRSTPAR4550
	WHERE DlvSts in (4,5) AND CM.CmpID = @CmpID AND B.SchemeUpLoad=0 AND (FlatAmount+DiscountPerAmount)>0 AND SIP.PrdSchDiscAmount>0
	GROUP BY CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SM.SchType,A.SlabId,B.SalInvNo,B.SalInvDate,
	B.RtrId,R.CmpRtrCode,R.RtrCode,P.PrdCCode,PB.PrdBatCode,SIP.BaseQty,A.DiscPer
	--->Billing-Free Product
	INSERT INTO Cs2Cn_Prk_SchemeUtilizationDetails
	(
		DistCode,TransName,SchUtilizeType,CmpCode,CmpSchCode,SchCode,SchDescription,SchType,SlabId,TransNo,TransDate,RtrId,CmpRtrCode,RtrCode,
		BilledPrdCCode,BilledPrdBatCode,BilledQty,SchUtilizedAmt,SchDiscPerc,FreePrdCCode,FreePrdBatCode,FreeQty,NoOfTimes,UploadFlag
	)
	SELECT @DistCode,'Billing','Free Product',CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,
	CASE SM.SchType WHEN 1 THEN 'Quantity Based' WHEN 2 THEN 'Amount Based' WHEN 3 THEN 'Weight Based' WHEN 4 THEN 'Display' END,
	A.SlabId,B.SalInvNo,B.SalInvDate,B.RtrId,R.CmpRtrCode,R.RtrCode,
	'Free Product','',0,ISNULL(SUM(FreeQty * D.PrdBatDetailValue),0) AS Utilized,0,
	P.PrdCCode,C.PrdBatCode,SUM(FreeQty) AS FreeQty,0,'N'
	FROM SalesInvoiceSchemeDtFreePrd A 
	INNER JOIN SalesInvoice B ON A.SalId = B.SalId
	INNER JOIN ProductBatch C (NOLOCK) ON A.FreePrdId = C.PrdId AND A.FreePrdBatId = C.PrdBatId 
	INNER JOIN ProductBatchDetails D (NOLOCK) ON C.PrdBatId = D.PrdBatId AND A.FreePriceId = D.PriceId 
	INNER JOIN BatchCreation E (NOLOCK) ON E.BatchSeqId = C.BatchSeqId AND D.SlNo = E.SlNo AND E.ClmRte = 1
	INNER JOIN SchemeMaster SM ON A.Schid = SM.SchId 
	INNER JOIN Company CM ON SM.CmpId = CM.CmpId 
	INNER JOIN Product P ON A.FreePrdId = P.PrdId
	INNER JOIN Retailer R ON R.RtrId = B.RtrId
	WHERE DlvSts in (4,5) AND CM.CmpID = @CmpID AND B.SchemeUpLoad=0
	GROUP BY CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SM.SchType,A.SlabId,B.SalInvNo,B.SalInvDate,
	B.RtrId,R.CmpRtrCode,R.RtrCode,P.PrdCCode,C.PrdBatCode
	
	--->Billing-Gift Product
	INSERT INTO Cs2Cn_Prk_SchemeUtilizationDetails
	(
		DistCode,TransName,SchUtilizeType,CmpCode,CmpSchCode,SchCode,SchDescription,SchType,SlabId,TransNo,TransDate,RtrId,CmpRtrCode,RtrCode,
		BilledPrdCCode,BilledPrdBatCode,BilledQty,SchUtilizedAmt,SchDiscPerc,FreePrdCCode,FreePrdBatCode,FreeQty,NoOfTimes,UploadFlag
	)
	SELECT @DistCode,'Billing','Gift Product',CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,
	CASE SM.SchType WHEN 1 THEN 'Quantity Based' WHEN 2 THEN 'Amount Based' WHEN 3 THEN 'Weight Based' WHEN 4 THEN 'Display' END,
	A.SlabId,B.SalInvNo,B.SalInvDate,B.RtrId,R.CmpRtrCode,R.RtrCode,
	'Gift Product','',0,ISNULL(SUM(GiftQty * D.PrdBatDetailValue),0) AS Utilized,0,
	P.PrdCCode,C.PrdBatCode,SUM(GiftQty) AS GiftQty,0,'N'
	FROM SalesInvoiceSchemeDtFreePrd A 
	INNER JOIN SalesInvoice B ON A.SalId = B.SalId
	INNER JOIN ProductBatch C (NOLOCK) ON A.GiftPrdId = C.PrdId AND A.GiftPrdBatId = C.PrdBatId 
	INNER JOIN ProductBatchDetails D (NOLOCK) ON C.PrdBatId = D.PrdBatId AND A.GiftPriceId = D.PriceId 
	INNER JOIN BatchCreation E (NOLOCK) ON E.BatchSeqId = C.BatchSeqId AND D.SlNo = E.SlNo AND E.ClmRte = 1
	INNER JOIN SchemeMaster SM ON A.Schid = SM.SchId 
	INNER JOIN Company CM ON SM.CmpId = CM.CmpId 
	INNER JOIN Product P ON A.GiftPrdId = P.PrdId
	INNER JOIN Retailer R ON R.RtrId = B.RtrId
	WHERE DlvSts in (4,5) AND CM.CmpID = @CmpID AND B.SchemeUpLoad=0
	GROUP BY CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SM.SchType,A.SlabId,B.SalInvNo,B.SalInvDate,
	B.RtrId,R.CmpRtrCode,R.RtrCode,P.PrdCCode,C.PrdBatCode
	--->Billing-Window Display
	INSERT INTO Cs2Cn_Prk_SchemeUtilizationDetails
	(
		DistCode,TransName,SchUtilizeType,CmpCode,CmpSchCode,SchCode,SchDescription,SchType,SlabId,TransNo,TransDate,RtrId,CmpRtrCode,RtrCode,
		BilledPrdCCode,BilledPrdBatCode,BilledQty,SchUtilizedAmt,SchDiscPerc,FreePrdCCode,FreePrdBatCode,FreeQty,NoOfTimes,UploadFlag
	)
	SELECT @DistCode,'Billing','WDS',CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,
	CASE SM.SchType WHEN 1 THEN 'Quantity Based' WHEN 2 THEN 'Amount Based' WHEN 3 THEN 'Weight Based' WHEN 4 THEN 'Display' END,
	0,B.SalInvNo,B.SalInvDate,B.RtrId,R.CmpRtrCode,R.RtrCode,
	'','',0,ISNULL(SUM(AdjAmt),0) AS Utilized,0,'','',0,0,'N'
	FROM SalesInvoiceWindowDisplay A
	INNER JOIN SalesInvoice B ON A.SalId = B.SalId
	INNER JOIN SchemeMaster SM ON A.Schid = SM.SchId 
	INNER JOIN Company CM ON SM.CmpId = CM.CmpId
	INNER JOIN Retailer R ON R.RtrId = B.RtrId
	WHERE DlvSts in (4,5) AND CM.CmpID = @CmpID AND B.SchemeUpLoad=0--B.SalInvDate >= @ChkDate
	GROUP BY CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SM.SchType,B.SalInvNo,B.SalInvDate,
	B.RtrId,R.CmpRtrCode,R.RtrCode
	
	--->Billing-QPS Credit Note Conversion
	INSERT INTO Cs2Cn_Prk_SchemeUtilizationDetails
	(
		DistCode,TransName,SchUtilizeType,CmpCode,CmpSchCode,SchCode,SchDescription,SchType,SlabId,TransNo,TransDate,RtrId,CmpRtrCode,RtrCode,
		BilledPrdCCode,BilledPrdBatCode,BilledQty,SchUtilizedAmt,SchDiscPerc,FreePrdCCode,FreePrdBatCode,FreeQty,NoOfTimes,UploadFlag
	)
	SELECT @DistCode,'Billing','QPS Converted Amount',CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,
	CASE SM.SchType WHEN 1 THEN 'Quantity Based' WHEN 2 THEN 'Amount Based' WHEN 3 THEN 'Weight Based' WHEN 4 THEN 'Display' END,
	A.SlabId,B.SalInvNo,B.SalInvDate,B.RtrId,R.CmpRtrCode,R.RtrCode,
	'','',0,ISNULL(SUM(A.CrNoteAmount),0) AS Utilized,0,'','',0,0,'N'
	FROM SalesInvoiceQPSSchemeAdj A 
	INNER JOIN SalesInvoice B ON A.SalId = B.SalId AND Mode=1
	INNER JOIN SchemeMaster SM ON A.Schid = SM.SchId 
	INNER JOIN Company CM ON SM.CmpId = CM.CmpId 
	INNER JOIN Retailer R ON R.RtrId = B.RtrId
	WHERE DlvSts in (4,5) AND CM.CmpID = @CmpID AND A.UpLoad=0
	GROUP BY CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SM.SchType,A.SlabId,B.SalInvNo,B.SalInvDate,
	B.RtrId,R.CmpRtrCode,R.RtrCode
	UNION ALL
	SELECT @DistCode,'Billing','QPS Converted Amount(Auto)',CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,
	CASE SM.SchType WHEN 1 THEN 'Quantity Based' WHEN 2 THEN 'Amount Based' WHEN 3 THEN 'Weight Based' WHEN 4 THEN 'Display' END,
	A.SlabId,'AutoQPSConversion' AS SalInvNo,A.LastModDate,A.RtrId,R.CmpRtrCode,R.RtrCode,
	'','',0,ISNULL(SUM(A.CrNoteAmount),0) AS Utilized,0,'','',0,0,'N'
	FROM SalesInvoiceQPSSchemeAdj A 
	INNER JOIN SchemeMaster SM ON A.Schid = SM.SchId AND Mode=2
	INNER JOIN Company CM ON SM.CmpId = CM.CmpId 
	INNER JOIN Retailer R ON R.RtrId = A.RtrId
	WHERE CM.CmpID = @CmpID AND A.UpLoad=0
	GROUP BY CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SM.SchType,A.SlabId,A.LastModDate,
	A.RtrId,R.CmpRtrCode,R.RtrCode
	--->Billing-Scheme Points
	INSERT INTO Cs2Cn_Prk_SchemeUtilizationDetails
	(
		DistCode,TransName,SchUtilizeType,CmpCode,CmpSchCode,SchCode,SchDescription,SchType,SlabId,TransNo,TransDate,RtrId,CmpRtrCode,RtrCode,
		BilledPrdCCode,BilledPrdBatCode,BilledQty,SchUtilizedAmt,SchDiscPerc,FreePrdCCode,FreePrdBatCode,FreeQty,NoOfTimes,UploadFlag
	)
	SELECT @DistCode,'Billing','Points',CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,
	CASE SM.SchType WHEN 1 THEN 'Quantity Based' WHEN 2 THEN 'Amount Based' WHEN 3 THEN 'Weight Based' WHEN 4 THEN 'Display' END,
	A.SlabId,B.SalInvNo,B.SalInvDate,B.RtrId,R.CmpRtrCode,R.RtrCode,
	P.PrdCCode,PB.PrdBatCode,SIP.BaseQty,SUM(A.Points) AS Utilized,0,'','',0,0,'N'
	FROM SalesInvoiceSchemeDtPoints A 
	INNER JOIN SalesInvoice B ON A.SalId = B.SalId 
	INNER JOIN SchemeMaster SM ON A.Schid = SM.SchId 
	INNER JOIN Company CM ON SM.CmpId = CM.CmpId
	INNER JOIN Retailer R ON R.RtrId = B.RtrId
	INNER JOIN Product P ON A.PrdId=P.PrdId
	INNER JOIN ProductBatch PB ON PB.PrdId=P.PrdId AND A.PrdBatId=PB.PrdBatId
	INNER JOIN SalesInvoiceProduct SIP ON SIP.SalId = B.SalId AND A.SalId=SIP.SalId AND SIP.PrdId=A.PrdID AND SIP.PrdBatId=A.PrdBatId
	WHERE DlvSts in (4,5) AND CM.CmpID = @CmpID AND B.SchemeUpLoad=0 AND A.Points>0
	GROUP BY CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SM.SchType,A.SlabId,B.SalInvNo,B.SalInvDate,
	B.RtrId,R.CmpRtrCode,R.RtrCode,P.PrdCCode,PB.PrdBatCode,SIP.BaseQty 
	--->Cheque Disbursal
	INSERT INTO Cs2Cn_Prk_SchemeUtilizationDetails
	(
		DistCode,TransName,SchUtilizeType,CmpCode,CmpSchCode,SchCode,SchDescription,SchType,SlabId,TransNo,TransDate,RtrId,CmpRtrCode,RtrCode,
		BilledPrdCCode,BilledPrdBatCode,BilledQty,SchUtilizedAmt,SchDiscPerc,FreePrdCCode,FreePrdBatCode,FreeQty,NoOfTimes,UploadFlag
	)
	SELECT @DistCode,'Cheque Disbursal','Amount',CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,
	CASE SM.SchType WHEN 1 THEN 'Quantity Based' WHEN 2 THEN 'Amount Based' WHEN 3 THEN 'Weight Based' WHEN 4 THEN 'Display' END,
	0,B.ChqDisRefNo,A.ChqDisDate,B.RtrId,R.CmpRtrCode,R.RtrCode,
	'','',0,ISNULL(SUM(Amount),0) AS Utilized,0,'','',0,0,'N'
	FROM ChequeDisbursalMaster A
	INNER JOIN ChequeDisbursalDetails B ON A.ChqDisRefNo = B.ChqDisRefNo
	INNER JOIN SchemeMaster SM ON A.TransId = SM.SchId 
	INNER JOIN Company CM ON SM.CmpId = CM.CmpId
	INNER JOIN Retailer R ON R.RtrId = B.RtrId
	WHERE TransType = 1 AND CM.CmpID = @CmpID AND A.SchemeUpLoad=0
	GROUP BY CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SM.SchType,B.ChqDisRefNo,A.ChqDisDate,
	B.RtrId,R.CmpRtrCode,R.RtrCode
	--->Sales Return-Amount
	INSERT INTO Cs2Cn_Prk_SchemeUtilizationDetails
	(
		DistCode,TransName,SchUtilizeType,CmpCode,CmpSchCode,SchCode,SchDescription,SchType,SlabId,TransNo,TransDate,RtrId,CmpRtrCode,RtrCode,
		BilledPrdCCode,BilledPrdBatCode,BilledQty,SchUtilizedAmt,SchDiscPerc,FreePrdCCode,FreePrdBatCode,FreeQty,NoOfTimes,UploadFlag
	)
	SELECT @DistCode,'Sales Return','Amount',CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,
	CASE SM.SchType WHEN 1 THEN 'Quantity Based' WHEN 2 THEN 'Amount Based' WHEN 3 THEN 'Weight Based' WHEN 4 THEN 'Display' END,
	A.SlabId,B.ReturnCode,B.ReturnDate,B.RtrId,R.CmpRtrCode,R.RtrCode,
	P.PrdCCode,PB.PrdBatCode,SIP.BaseQty,-1 * (ISNULL(SUM(ReturnFlatAmount),0) + ISNULL(SUM(ReturnDiscountPerAmount),0)),0,	
	'','',0,0,'N'
	FROM ReturnSchemeLineDt A 
	INNER JOIN ReturnHeader B ON A.ReturnId = B.ReturnId
	INNER JOIN SchemeMaster SM ON A.Schid = SM.SchId 
	INNER JOIN Company CM ON SM.CmpId = CM.CmpId
	INNER JOIN Retailer R ON R.RtrId = B.RtrId
	INNER JOIN Product P ON A.PrdId=P.PrdId
	INNER JOIN ProductBatch PB ON PB.PrdId=P.PrdId AND A.PrdBatId=PB.PrdBatId
	INNER JOIN ReturnProduct SIP ON SIP.ReturnId = B.ReturnId AND A.ReturnId=SIP.ReturnId AND SIP.PrdId=A.PrdId AND SIP.PrdBatId=A.PrdBatId AND SIP.Slno =A.RowId ---------> added by lakshman M  Dated ON 23-05-2019 PMS ID: ILCRSTPAR4550
	WHERE B.Status = 0 AND CM.CmpID = @CmpID AND B.SchemeUpLoad=0
	GROUP BY CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SM.SchType,A.SlabId,B.ReturnCode,B.ReturnDate,
	B.RtrId,R.CmpRtrCode,R.RtrCode,P.PrdCCode,PB.PrdBatCode,SIP.BaseQty
	--->Sales Return-Free Product
	INSERT INTO Cs2Cn_Prk_SchemeUtilizationDetails
	(
		DistCode,TransName,SchUtilizeType,CmpCode,CmpSchCode,SchCode,SchDescription,SchType,SlabId,TransNo,TransDate,RtrId,CmpRtrCode,RtrCode,
		BilledPrdCCode,BilledPrdBatCode,BilledQty,SchUtilizedAmt,SchDiscPerc,FreePrdCCode,FreePrdBatCode,FreeQty,NoOfTimes,UploadFlag
	)
	SELECT @DistCode,'Sales Return','Free Product',CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,
	CASE SM.SchType WHEN 1 THEN 'Quantity Based' WHEN 2 THEN 'Amount Based' WHEN 3 THEN 'Weight Based' WHEN 4 THEN 'Display' END,
	A.SlabId,B.ReturnCode,B.ReturnDate,B.RtrId,R.CmpRtrCode,R.RtrCode,
	'Free Product','',0,-1 * ISNULL(SUM(ReturnFreeQty * D.PrdBatDetailValue),0),0,
	P.PrdCCode,C.PrdBatCode,-1 * SUM(ReturnFreeQty),0,'N'
	FROM ReturnSchemeFreePrdDt A 
	INNER JOIN ReturnHeader B ON A.ReturnId = B.ReturnId
	INNER JOIN ProductBatch C (NOLOCK) ON A.FreePrdId = C.PrdId AND A.FreePrdBatId = C.PrdBatId 
	INNER JOIN ProductBatchDetails D (NOLOCK) ON C.PrdBatId = D.PrdBatId AND A.FreePriceId = D.PriceId 
	INNER JOIN BatchCreation E (NOLOCK) ON E.BatchSeqId = C.BatchSeqId AND D.SlNo = E.SlNo AND E.ClmRte = 1
	INNER JOIN SchemeMaster SM ON A.Schid = SM.SchId 
	INNER JOIN Company CM ON SM.CmpId = CM.CmpId 
	INNER JOIN Product P ON A.FreePrdId = P.PrdId
	INNER JOIN Retailer R ON R.RtrId = B.RtrId
	WHERE B.Status = 0 AND CM.CmpID = @CmpID AND B.SchemeUpLoad=0
	GROUP BY CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SM.SchType,A.SlabId,B.ReturnCode,B.ReturnDate,
	B.RtrId,R.CmpRtrCode,R.RtrCode,P.PrdCCode,C.PrdBatCode
	--->Sales Return-Gift Product
	INSERT INTO Cs2Cn_Prk_SchemeUtilizationDetails
	(
		DistCode,TransName,SchUtilizeType,CmpCode,CmpSchCode,SchCode,SchDescription,SchType,SlabId,TransNo,TransDate,RtrId,CmpRtrCode,RtrCode,
		BilledPrdCCode,BilledPrdBatCode,BilledQty,SchUtilizedAmt,SchDiscPerc,FreePrdCCode,FreePrdBatCode,FreeQty,NoOfTimes,UploadFlag
	)
	SELECT @DistCode,'Sales Return','Gift Product',CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,
	CASE SM.SchType WHEN 1 THEN 'Quantity Based' WHEN 2 THEN 'Amount Based' WHEN 3 THEN 'Weight Based' WHEN 4 THEN 'Display' END,
	A.SlabId,B.ReturnCode,B.ReturnDate,B.RtrId,R.CmpRtrCode,R.RtrCode,
	'Gift Product','',0,-1 * ISNULL(SUM(ReturnGiftQty * D.PrdBatDetailValue),0),0,
	P.PrdCCode,C.PrdBatCode,-1 * SUM(ReturnGiftQty),0,'N'
	FROM ReturnSchemeFreePrdDt A 
	INNER JOIN ReturnHeader B ON A.ReturnId = B.ReturnId
	INNER JOIN ProductBatch C (NOLOCK) ON A.GiftPrdId = C.PrdId AND A.GiftPrdBatId = C.PrdBatId 
	INNER JOIN ProductBatchDetails D (NOLOCK) ON C.PrdBatId = D.PrdBatId AND A.GiftPriceId = D.PriceId 
	INNER JOIN BatchCreation E (NOLOCK) ON E.BatchSeqId = C.BatchSeqId AND D.SlNo = E.SlNo AND E.ClmRte = 1
	INNER JOIN SchemeMaster SM ON A.Schid = SM.SchId 
	INNER JOIN Company CM ON SM.CmpId = CM.CmpId 
	INNER JOIN Product P ON A.GiftPrdId = P.PrdId 
	INNER JOIN Retailer R ON R.RtrId = B.RtrId
	WHERE B.Status = 0 AND CM.CmpID = @CmpID AND B.SchemeUpLoad=0
	GROUP BY CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SM.SchType,A.SlabId,B.ReturnCode,B.ReturnDate,
	B.RtrId,R.CmpRtrCode,R.RtrCode,P.PrdCCode,C.PrdBatCode
	--->Sales Return-Scheme Points
	INSERT INTO Cs2Cn_Prk_SchemeUtilizationDetails
	(
		DistCode,TransName,SchUtilizeType,CmpCode,CmpSchCode,SchCode,SchDescription,SchType,SlabId,TransNo,TransDate,RtrId,CmpRtrCode,RtrCode,
		BilledPrdCCode,BilledPrdBatCode,BilledQty,SchUtilizedAmt,SchDiscPerc,FreePrdCCode,FreePrdBatCode,FreeQty,NoOfTimes,UploadFlag
	)
	SELECT @DistCode,'Sales Return','Points',CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,
	CASE SM.SchType WHEN 1 THEN 'Quantity Based' WHEN 2 THEN 'Amount Based' WHEN 3 THEN 'Weight Based' WHEN 4 THEN 'Display' END,
	A.SlabId,B.ReturnCode,B.ReturnDate,B.RtrId,R.CmpRtrCode,R.RtrCode,
	P.PrdCCode,PB.PrdBatCode,SIP.BaseQty,-1 * SUM(ReturnPoints),0,'','',0,0,'N'
	FROM ReturnSchemePointsDt A 
	INNER JOIN ReturnHeader B ON A.ReturnId = B.ReturnId
	INNER JOIN SchemeMaster SM ON A.Schid = SM.SchId 
	INNER JOIN Company CM ON SM.CmpId = CM.CmpId
	INNER JOIN Retailer R ON R.RtrId = B.RtrId
	INNER JOIN Product P ON A.PrdId=P.PrdId
	INNER JOIN ProductBatch PB ON PB.PrdId=P.PrdId AND A.PrdBatId=PB.PrdBatId
	INNER JOIN ReturnProduct SIP ON SIP.ReturnId = B.ReturnId AND A.ReturnId=SIP.ReturnId AND SIP.PrdId=A.PrdId AND SIP.PrdBatId=A.PrdBatId
	WHERE B.Status = 0 AND CM.CmpID = @CmpID AND B.SchemeUpLoad=0
	GROUP BY CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SM.SchType,A.SlabId,B.ReturnCode,B.ReturnDate,
	B.RtrId,R.CmpRtrCode,R.RtrCode,P.PrdCCode,PB.PrdBatCode,SIP.BaseQty
	SELECT SchId INTO #SchId FROM SchemeMaster WHERE SchCode IN (SELECT SchCode FROM Cs2Cn_Prk_SchemeUtilizationDetails
	WHERE UploadFlag='N')
	UPDATE SalesInvoice SET SchemeUpLoad=1 WHERE SalId IN (SELECT DISTINCT SalId FROM
	SalesInvoiceSchemeHd WHERE SchId IN (SELECT SchId FROM #SchId)) AND DlvSts IN (4,5)
	AND SalInvNo IN (SELECT TransNo FROM Cs2Cn_Prk_SchemeUtilizationDetails WHERE TransName='Billing')
	UPDATE SalesInvoice SET SchemeUpLoad=1 WHERE SalId IN (SELECT DISTINCT SalId FROM
	SalesInvoiceWindowDisplay WHERE SchId IN (SELECT SchId FROM #SchId)) AND DlvSts IN (4,5)
	AND SalInvNo IN (SELECT TransNo FROM Cs2Cn_Prk_SchemeUtilizationDetails WHERE TransName='Billing')	
	UPDATE A SET A.NoOfTimes=B.NoOfTimes
	FROM Cs2Cn_Prk_SchemeUtilizationDetails A,	
	(SELECT SI.SalInvNo,SI.SalId,SIS.SchId,SIS.SlabId,SM.CmpSchCOde,SIS.NoOfTimes FROM SalesInvoiceSchemeHd SIS,SalesInvoice SI,SchemeMaster SM
	WHERE SI.SalId=SIS.SalId AND SIS.SchId=SM.SchId) B
	WHERE A.TransName='Billing' AND A.CmpSchCode=B.CmpSchCode AND A.TransNo=B.SalInvNo
	UPDATE SalesInvoiceQPSSchemeAdj SET Upload=1
	WHERE SalId IN (SELECT SalId FROM SalesInvoice WHERE SchemeUpload=1) AND Mode=1
	UPDATE SalesInvoiceQPSSchemeAdj SET Upload=1
	WHERE SalId = -1000 AND Mode=2
	UPDATE ReturnHeader SET SchemeUpLoad=1 WHERE ReturnId IN 
	(
		SELECT DISTINCT ReturnId FROM 
		(
			SELECT ReturnId FROM ReturnSchemeFreePrdDt WHERE SchId IN (SELECT SchId FROM #SchId)
			UNION
			SELECT ReturnId FROM ReturnSchemeLineDt WHERE SchId IN (SELECT SchId FROM #SchId)
			UNION
			SELECT ReturnId FROM ReturnSchemePointsDt WHERE SchId IN (SELECT SchId FROM #SchId)
		)A
	) AND Status=0
	AND ReturnCode IN (SELECT TransNo FROM Cs2Cn_Prk_SchemeUtilizationDetails WHERE TransName='Sales Return')
	UPDATE ChequeDisbursalMaster SET SchemeUpLoad=1 WHERE ChqDisRefNo IN (SELECT DISTINCT ChqDisRefNo FROM
	ChequeDisbursalDetails WHERE TransId IN (SELECT SchId AS TransId FROM #SchId))
	AND TransType = 1 
	AND ChqDisRefNo IN (SELECT TransNo FROM Cs2Cn_Prk_SchemeUtilizationDetails WHERE TransName='Cheque Disbursal')
	UPDATE Cs2Cn_Prk_SchemeUtilizationDetails SET ServerDate=@ServerDate
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_Cn2Cs_BLUOM' AND TYPE ='P')  
DROP PROCEDURE Proc_Cn2Cs_BLUOM
GO
/*
begin tran  
delete from ErrorLog 
select * from uommaster
EXEC Proc_Cn2Cs_BLUOM 0
select * from Cn2Cs_Prk_BLUOM
--select * from ETL_Prk_UOMMaster
select * from uommaster
select * from ErrorLog  
rollback tran 
*/
CREATE PROCEDURE Proc_Cn2Cs_BLUOM  
(  
       @Po_ErrNo INT OUTPUT  
)  
AS  
/***********************************************************  
* PROCEDURE: Proc_Cn2Cs_BLUOM  
* PURPOSE: To Insert the records From Console to ETL_Prk_ProductBatch  
* SCREEN : Console Integration-Product Batch  
* CREATED BY: Nandakumar R.G 31-12-2008  
* MODIFIED :  
* DATE      AUTHOR     DESCRIPTION  
* {date} {developer}  {brief modIFication description}  
*************************************************************
-------------------------------------------------------------------------------------------------------  
*28/05/2019     Lakshman M        ILCRSTPAR4632         BUG			UOM descripttion download and update validation included from CS.
*******************************************************************/
SET NOCOUNT ON  
BEGIN  
 --BEGIN TRANSACTION  
 DECLARE @ErrStatus INT  
 TRUNCATE TABLE ETL_Prk_UOMMaster  
 TRUNCATE TABLE ETL_Prk_UOMGroup  
 DECLARE @BatchSeqCode VARCHAR(30)  
 DECLARE @TaxGroupCode VARCHAR(20)  

 INSERT INTO ETL_Prk_UOMMaster  
 SELECT UOMCode,UOMName FROM Cn2Cs_Prk_BLUOM  
 WHERE UOMCode NOT IN (SELECT UOMCode FROM UOMMaster)
 INSERT INTO ETL_Prk_UOMMaster  
 SELECT UOMCode,UOMName FROM Cn2Cs_Prk_BLUOM  
 WHERE UOMCode IN (SELECT UOMCode FROM UOMMaster)  ---ILCRSTPAR4632  
 
 INSERT INTO ETL_Prk_UOMGroup  
 SELECT UOMGroupCode,UOMGroupName,UOMCode,BaseUOM,ConvFact  
 FROM Cn2Cs_Prk_BLUOM  
 WHERE UOMGroupCode NOT IN (SELECT UOMGroupCode FROM UOMGroup)
 INSERT INTO ETL_Prk_UOMGroup  
 SELECT UOMGroupCode,UOMGroupName,UOMCode,BaseUOM,ConvFact  
 FROM Cn2Cs_Prk_BLUOM  
 WHERE UOMGroupCode IN (SELECT UOMGroupCode FROM UOMGroup)  --- ILCRSTPAR4632
   
 EXEC Proc_ValidateUOMMaster @Po_ErrNo= @ErrStatus OUTPUT  
    
 IF(@ErrStatus=0)  
 BEGIN    
  EXEC Proc_ValidateUOMGroup @Po_ErrNo= @ErrStatus OUTPUT  
  IF(@ErrStatus=0)  
  BEGIN    
   DELETE FROM Cn2Cs_Prk_BLUOM  
  END  
 END  
 SET @Po_ErrNo=@ErrStatus  
 RETURN  
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_Cs2Cn_DailySales' AND Type ='P')
DROP PROCEDURE Proc_Cs2Cn_DailySales
GO
/*    
begin tran   
delete from errorlog  
delete from Cs2Cn_Prk_DailySales  
update SalesInvoice set upload = 0 where salinvno in('P88071822390') 
EXEC Proc_Cs2Cn_DailySales 0,'2017-11-06'    
SELECT LCTRAmount,* FROM Cs2Cn_Prk_DailySales (NOLOCK) where salinvno in('P88071822390')  --and prdcode ='101701241181443312144PKT1305N'
select * from errorlog  
rollback tran     
*/    
CREATE PROCEDURE Proc_Cs2Cn_DailySales
(    
 @Po_ErrNo INT OUTPUT,    
 @ServerDate DATETIME  
)
AS    
/*********************************    
* PROCEDURE  : Proc_Cs2Cn_DailySales    
* PURPOSE  : To Extract Daily Sales Details from CoreStocky to upload to Console    
* CREATED BY : Nandakumar R.G    
* CREATED DATE : 19/03/2010    
* NOTE   :    
* MODIFIED BY : LAKSHMAN M  
* MODIFIED DATE : 06/11/2017   
* PMS ID   : ICRSTPAR6569  
* PURPOSE  : Daily Sales Details from CoreStocky upload LCTR Calculation Validation changed.    
* DATE      AUTHOR     DESCRIPTION    
------------------------------------------------    
* {date} {developer}  {brief modification description}    
21/10/2014 Jisha Mathew Included Undelivered bills New Column Added BillStatus,UploadedDate     
12/12/2015 PRAVEENRAJ BHASKARAN LCTRAmount ADDED FOR CCRSTPAR0118    
09/11/2016 Gopikrishnan RtrUniqueCode Added
* DATE       AUTHOR     CR/BZ	USER STORY ID           DESCRIPTION                         
***************************************************************************************************    
09-01-2018  lakshman M   BZ     ICRSTPAR7284          LCTR Formula velidation changed (special price not consider in LCTR Value).
06-02-2017	MOHANA		 BZ     ICRSTPAR7955		  DELVIERED BILLS NOT UPLOADED PROPERLY
25-05-2019  lakshman M   BS     ILCRSTPAR4571         While uploading dat one product done in billing different uom that time LCTR amount same amount reflct in two line level
*********************************/    
SET NOCOUNT ON    
BEGIN    
 DECLARE @CmpId    AS INT    
 DECLARE @DistCode As nVarchar(50)    
 DECLARE @DefCmpAlone AS INT    
 SET @Po_ErrNo=0    
 DELETE FROM Cs2Cn_Prk_DailySales WHERE UploadFlag = 'Y'    
 IF EXISTS (SELECT * FROM Cs2Cn_Prk_DailySales WHERE UploadFlag='N' AND Billstatus<=2)    
 BEGIN    
  DELETE FROM Cs2Cn_Prk_DailySales WHERE UploadFlag='N' AND Billstatus<=2    
 END    
 SELECT @DefCmpAlone=Status FROM Configuration WHERE ModuleId='BotreeUpload01' AND ModuleName='Botree Upload'    
 SELECT @DistCode = DistributorCode FROM Distributor     
 SELECT @CmpId = CmpId FROM Company WHERE DefaultCompany = 1     
 INSERT INTO Cs2Cn_Prk_DailySales    
 (    
  DistCode  ,    
  SalInvNo  ,    
  SalInvDate  ,    
  SalDlvDate  ,    
  SalInvMode  ,    
  SalInvType  ,    
  SalGrossAmt  ,    
  SalSplDiscAmt ,    
  SalSchDiscAmt ,    
  SalCashDiscAmt ,    
  SalDBDiscAmt ,    
  SalTaxAmt  ,    
  SalWDSAmt  ,    
  SalDbAdjAmt  ,    
  SalCrAdjAmt  ,    
  SalOnAccountAmt ,    
  SalMktRetAmt ,    
  SalReplaceAmt ,    
  SalOtherChargesAmt,    
  SalInvLevelDiscAmt,    
  SalTotDedn  ,    
  SalTotAddn  ,    
  SalRoundOffAmt ,    
  SalNetAmt  ,    
  LcnId   ,    
  LcnCode   ,    
  SalesmanCode ,    
  SalesmanName ,     
  SalesRouteCode ,    
  SalesRouteName ,    
  RtrId   ,    
  RtrCode   ,    
  RtrName   ,    
  VechName  ,    
  DlvBoyName  ,    
  DeliveryRouteCode ,     
  DeliveryRouteName ,     
  PrdCode    ,    
  PrdBatCde   ,    
  PrdQty    ,    
  PrdSelRateBeforeTax ,    
  PrdSelRateAfterTax ,    
  PrdFreeQty  ,    
  PrdGrossAmt  ,    
  PrdSplDiscAmt ,    
  PrdSchDiscAmt ,    
  PrdCashDiscAmt ,    
  PrdDBDiscAmt ,    
  PrdTaxAmt  ,    
  PrdNetAmt  ,    
  UploadFlag  ,    
  SalInvLineCount ,    
  SalInvLvlDiscPer,    
  BillStatus,    
  UploadedDate,    
  OrderRefNo,    
  SFAOrderRefNo,    
  RtrUniqueCode    
 )    
 SELECT  @DistCode,A.SalInvNo,A.SalInvDate,A.SalDlvDate,    
 (CASE A.BillMode WHEN 1 THEN 'Cash' ELSE 'Credit' END) AS BillMode,    
 (CASE A.BillType WHEN 1 THEN 'Order Booking' WHEN 2 THEN 'Ready Stock' ELSE 'Van Sales' END) AS BillType,    
 A.SalGrossAmount,A.SalSplDiscAmount,A.SalSchDiscAmount,A.SalCDAmount,A.SalDBDiscAmount,A.SalTaxAmount,    
 A.WindowDisplayAmount,A.DBAdjAmount,A.CRAdjAmount,A.OnAccountAmount,A.MarketRetAmount,A.ReplacementDiffAmount,    
 A.OtherCharges,A.SalInvLvlDisc AS InvLevelDiscAmt,A.TotalDeduction,A.TotalAddition,A.SalRoundOffAmt,A.SalNetAmt,A.LcnId,L.LcnCode,    
 B.SMCode,B.SMName,C.RMCode,C.RMName,A.RtrId,R.CmpRtrCode,R.RtrName,    
 ISNULL(E.VehicleRegNo,'') AS VehicleName,ISNULL(D.DlvBoyName,''),F.RMCode,F.RMName,H.PrdCCode,I.CmpBatCode,    
 G.BaseQty AS SalInvQty ,G.PrdUom1EditedSelRate,G.PrdUom1EditedNetRate,G.SalManFreeQty AS SalInvFree ,    
 G.PrdGrossAmount,G.PrdSplDiscAmount,G.PrdSchDiscAmount,    
 G.PrdCDAmount,G.PrdDBDiscAmount,G.PrdTaxAmount,G.PrdNetAmount,    
 'N' AS UploadFlag,0,A.SalInvLvlDiscPer,Dlvsts AS BillStatus,    
 GETDATE(),ISNULL(O.OrderNo,''),ISNULL(O.DocRefNo,''),isnull(R.RtrUniqueCode,'')     
 FROM SalesInvoice A  (NOLOCK)    
 INNER JOIN Retailer R (NOLOCK) ON A.RtrId = R.RtrId    
 INNER JOIN SalesMan B (NOLOCK) ON A.SMID = B.SmID    
 INNER JOIN RouteMaster C (NOLOCK) ON A.RMID = C.RMID    
 LEFT OUTER JOIN DeliveryBoy D  (NOLOCK) ON A.DlvBoyId = D.DlvBoyId    
 LEFT OUTER JOIN Vehicle E (NOLOCK) ON E.VehicleId = A. VehicleId    
 INNER JOIN RouteMaster F (NOLOCK) ON A.DlvRMID = F.RMID    
 INNER JOIN SalesInvoiceProduct G (NOLOCK) ON A.SalId = G.SalId    
 INNER JOIN Product H (NOLOCK) ON G.PrdId = H.PrdId    
 INNER JOIN ProductBatch I (NOLOCK) ON G.PrdBatID = I.PrdBatId AND H.PrdId=I.PrdId    
 INNER JOIN Location L (NOLOCK) ON L.LcnId=A.LcnId    
 LEFT OUTER JOIN OrderBooking O(NOLOCK) ON O.OrderNo=A.OrderKeyNo    
 WHERE A.Upload=0 ORDER BY A.SalId    
 --UPDATE A SET A.LCTRAmount=ISNULL(Z.LCTRAmt,0)    
 --FROM Cs2Cn_Prk_DailySales A (NOLOCK)    
 --INNER JOIN (    
 --SELECT SalId,SalInvNo,PrdCCode,CmpBatCode,ISNULL(GrossAmt,0) AS GrossAmt,ISNULL(TaxAmount,0) AS TaxAmount,  
 --ISNULL(GrossAmt+TaxAmount,0) AS LCTRAmt     
 --FROM(    
 --SELECT S.SALID,S.SALINVNO,P.PRDID,P.PRDCCODE,PB.CmpBatCode,SP.BASEQTY,SP.PrdUom1EditedSelRate,  
 --ISNULL((SP.BASEQTY*SP.PrdUom1EditedSelRate),0) AS GrossAmt,    
 --ISNULL(Tax.TaxAmount,0) AS TaxAmount    
 --FROM SalesInvoice S (NOLOCK)    
 --INNER JOIN SalesInvoiceProduct SP (NOLOCK) ON S.SalId=SP.SALID    
 --INNER JOIN (    
 --SELECT SalId,PrdSlno,SUM(TaxAmount) TaxAmount FROM SalesInvoiceProductTax (NOLOCK)    
 --GROUP BY SalId,PrdSlno    
 --)Tax ON Tax.SalId=S.SalId AND SP.SalId=Tax.SalId AND SP.SlNo=Tax.PrdSlNo    
 --INNER JOIN Product P (NOLOCK) ON P.PrdId=SP.PrdId    
 --INNER JOIN ProductBatch PB ON PB.PrdId=P.PrdId AND PB.PrdBatId=SP.PrdBatId    
 --) X    
 --WHERE EXISTS (SELECT SalInvNo,PrdCode,PrdBatCde FROM Cs2Cn_Prk_DailySales Y WHERE     
 --X.SalInvNo=Y.SalInvNo AND X.PrdCCode=Y.PrdCode AND X.CmpBatCode=Y.PrdBatCde)    
 --) Z ON Z.SalInvNo=A.SalInvNo AND Z.PrdCCode=A.PrdCode AND Z.CmpBatCode=A.PrdBatCde    
 ---------- Modified by Lakshman M on 06/11/2017 PMS_ICRSTPAR6569 ------------  
  UPDATE A SET A.LCTRAmount=ISNULL(Z.LCTRAmt,0)    
 FROM Cs2Cn_Prk_DailySales A (NOLOCK)    
 INNER JOIN (    
    SELECT SalID,SalInvNo,PrdId,PrdCCode,CmpBatCode,taxperc,SUM(TaxableAmount) as TaxableAmount,SUM(LCTRAmt)as LCTRAmt,BaseQty FROM (
    SELECT DISTINCT A.SalId SalID ,A.SalInvNo SalInvNo,B.PrdId PrdId,P.PrdCCode PrdCCode,PB.CmpBatCode CmpBatCode,(C.TaxPerc) As taxperc,  
  (C.TaxableAmount) AS TaxableAmount,--PBD.PrdBatDetailValue,
  ((B.BaseQty *(PBD.PrdBatDetailValue))+((B.BaseQty *(PBD.PrdBatDetailValue))*sum(c.TaxPerc/100)))  As LCTRAmt,
  B.BaseQty As BaseQty
  FROM SalesInvoice A (NOLOCK)  
  INNER JOIN SalesInvoiceProduct B (NOLOCK) ON A.SALID=B.SALID  
  INNER JOIN SalesInvoiceProductTax C (NOLOCK) ON A.SalId=C.SalId AND B.SalId=C.SalId AND B.SlNo=C.PrdSlNo  
  INNER JOIN PRODUCT P (NOLOCK) ON B.PrdId=P.PrdId  
  INNER JOIN ProductBatch PB (NOLOCK) ON PB.PrdId=P.PrdId AND PB.PrdId=B.PrdId AND PB.PrdBatId=B.PrdBatId  
  INNER JOIN ProductBatchDetails PBD (NOLOCK) ON PBD.PrdBatId =PB.PrdBatId and DefaultPrice =1	
  INNER JOIN Cs2Cn_Prk_DailySales PRK (NOLOCK)  
  ON PRK.SalInvNo=A.SalInvNo AND PRK.PrdCode=P.PrdCCode AND PRK.PrdBatCde=PB.CmpBatCode and prk.PrdQty=B.BaseQty   ------------- ILCRSTPAR4571 add by lakshman M Dated ON 25-05-2019 
  where C.TaxableAmount >0 and PBD.SLNo =3 -- AND A.salinvno ='P88071822390'-- AND b.prdid = 4777
  GROUP BY A.SalId,A.SalInvNo,B.PrdId,B.PrdUom1EditedSelRate,C.TaxPerc,P.PrdCCode,PB.CmpBatCode,C.TaxableAmount,B.PrdGrossAmount,B.PrdTaxAmount,
  B.BaseQty,B.prdtaxamount,PBD.PrdBatDetailValue--,B.PrdUnitSelRate,
  HAVING (SUM(C.TaxableAmount))>0 ) A 
  Group by  SalID,SalInvNo,PrdId,PrdCCode,CmpBatCode,taxperc,BaseQty
 ) Z ON Z.SalInvNo=A.SalInvNo AND Z.PrdCCode=A.PrdCode AND Z.CmpBatCode=A.PrdBatCde AND Z.BaseQty= A.PrdQty
   ----------------- till here --------------------  
 UPDATE DayEndProcess SET NextUpDate = CONVERT(nVarChar(10),GetDate(),121),    
 ProcDate = CONVERT(nVarChar(10),GetDate(),121)    
 Where ProcId = 1    
 UPDATE A SET SalInvLineCount=B.SalInvLineCount    
 FROM Cs2Cn_Prk_DailySales A,(SELECT SI.SalInvNo,COUNT(SIP.PrdId) AS SalInvLineCount     
 FROM SalesInvoice SI,SalesInvoiceProduct SIP WHERE     
 SI.UPload=0 AND SI.SalId=SIP.SalId    
 GROUP BY SI.SalInvNo) B    
 WHERE A.SalInvNo=B.SalInvNo    
 --->Added By Nanda on 17/08/2010    
 INSERT INTO Cs2Cn_Prk_SalesInvoiceOrders(DistCode,SalInvNo,OrderNo,OrderDate,UploadFlag)    
 SELECT DISTINCT @DistCode,SI.SalInvNo,OB.OrderNo,OB.OrderDate,'N'    
 FROM SalesInvoice SI,SalesinvoiceOrderBooking SIOB,OrderBooking OB    
 WHERE SI.SalId=SIOB.SalId AND SIOB.OrderNo=OB.OrderNo AND SI.Upload=0 AND SI.DlvSts>3  
 --->Till Here    
 --UPDATE SalesInvoice SET Upload=1 WHERE Upload=0 AND SalInvNo IN (SELECT DISTINCT    
 --SalInvNo FROM Cs2Cn_Prk_DailySales WHERE UploadFlag = 'N') AND Dlvsts IN (3,4,5)   
  	--COMMENTED AND ADDED BY MOHANA  ICRSTPAR7955 
	UPDATE SalesInvoice SET Upload=1 WHERE Upload=0 AND SalInvNo IN (SELECT DISTINCT
	 SalInvNo FROM Cs2Cn_Prk_DailySales WHERE UploadFlag = 'N' AND BillStatus in(3,4,5))
	--TILL HERE
	
	UPDATE Cs2Cn_Prk_DailySales SET ServerDate=@ServerDate   
END
GO
IF NOT EXISTS (SELECT * FROM sysobjects WHERE Name ='CS2CN_Prk_JcMonthEndClosingDt' AND type ='U')
BEGIN
CREATE TABLE CS2CN_Prk_JcMonthEndClosingDt 
(
	[SlNo] [numeric](38, 0) IDENTITY(1,1) NOT NULL,
	[DistCode] [varchar](50) NULL,
	[JcmId] [int] NULL,
	[JcmJc] [int] NULL,
	[JcmYr] [numeric](36, 0) NULL,
	[JcmSdt] [datetime] NULL,
	[JcmEdt] [datetime] NULL,
	[JcmMontEnddate] [datetime] NULL,
	[UploadFlag] [nvarchar](1) NULL,
	[SyncId] [numeric](36, 0) NULL,
	[ServerDate] [datetime] NULL
)
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_CS2CNJcMonthEndClosingDt' and type ='P')
DROP PROCEDURE Proc_CS2CNJcMonthEndClosingDt
GO
/*
begin tran
exec Proc_CS2CNJcMonthEndClosingDt 0,''
select * from  jcmonthend
select * from CS2CN_Prk_JcMonthEndClosingDt
rollback tran
*/
CREATE	PROCEDURE Proc_CS2CNJcMonthEndClosingDt
(
	@Po_ErrNo INT OUTPUT,
	@ServerDate DATETIME
)	
AS
/*********************************
* PROCEDURE	: Proc_CS2CNJcMonthEndClosingDt
* PURPOSE	: To Upload Jc Month end Details
* CREATED	: Murugan.R
* CREATED DATE	: 27/09/2013
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
	
*********************************/
SET NOCOUNT ON
BEGIN
	SET @Po_ErrNo=0
	DECLARE @DistCode	As nVarchar(50)
	
	SELECT @DistCode = DistributorCode FROM Distributor
	
	DELETE FROM CS2CN_Prk_JcMonthEndClosingDt WHERE UploadFlag='Y'
	
	INSERT INTO CS2CN_Prk_JcMonthEndClosingDt(DistCode,JcmId,JcmJc,JcmYr,JcmSdt,JcmEdt,JcmMontEnddate,UploadFlag,SyncId,ServerDate)
	SELECT @DistCode,J.JcmId,J.JcmJc,JcmYr,J.JcmSdt,J.JcmEdt,J.JcmMontEnddate,'N' ,0,@ServerDate
	FROM jcmonthend J INNER JOIN JCMonth JC ON J.JcmJc=JC.JcmJc
	INNER JOIN JCMast JM ON J.JcmId=Jm.JcmId and Jc.JcmId=JM.JcmId
	WHERE Status=1 and Upload=0
	
	UPDATE jcmonthend SET Upload=1 WHERE  Status=1 and Upload=0
	
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_Validate_PurchaseReceiptClaimScheme' AND XTYPE = 'P' )
DROP PROCEDURE Proc_Validate_PurchaseReceiptClaimScheme
GO
--Exec Proc_Validate_PurchaseReceiptClaimScheme 0
--SELECT * FROM ETL_Prk_PurchaseReceiptClaim
--SELECT * FROM ETLTempPurchaseReceiptClaimScheme
CREATE PROCEDURE Proc_Validate_PurchaseReceiptClaimScheme
(
	@Po_ErrNo INT OUTPUT
)
AS
/*********************************
* PROCEDURE		: Proc_Validate_PurchaseReceiptClaimScheme
* PURPOSE		: To Insert and Update records in the Table PurchaseReceiptClaimScheme
* CREATED		: Nandakumar R.G
* CREATED DATE	: 03/05/2010
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* [DATE]       [DEVELOPER]		[CR/BUG]      [USER_STORY_ID]          [DESCRIPTION]  
* 26-03-2018   lakshman M		  BZ	       ILCRSTPAR3871            Remove duplicate value in ETL_Prk_PurchaseReceiptClaim table  to main table (distinct values)
*********************************/
SET NOCOUNT ON
BEGIN
	DECLARE @Exist 			AS 	INT
	DECLARE @Tabname 		AS  NVARCHAR(100)
	DECLARE @DestTabname 	AS 	NVARCHAR(100)
	DECLARE @Fldname 		AS  NVARCHAR(100)
	
	DECLARE @CmpInvNo		AS 	NVARCHAR(100)
	DECLARE @Type			AS 	NVARCHAR(100)	
	DECLARE @RefCode		AS 	NVARCHAR(100)	
	DECLARE @RefDesc		AS 	NVARCHAR(100)	
	DECLARE @PrdCode		AS 	NVARCHAR(100)
	DECLARE @PrdBatCode		AS 	NVARCHAR(100)
	DECLARE @Qty			AS 	NUMERIC(38,0)
	DECLARE @StockType		AS 	NVARCHAR(100)
	DECLARE @Amt			AS 	NUMERIC(38,6)
	DECLARE @FreightAmt		AS 	NUMERIC(38,6)
	DECLARE @TypeId			AS 	INT
	DECLARE @RefId			AS 	INT
	DECLARE @PrdId			AS 	INT
	DECLARE @PrdBatId		AS 	INT
	DECLARE @StockTypeId	AS 	INT
			
	DECLARE @TransStr 		AS 	NVARCHAR(4000)
	SET @Po_ErrNo=0
	SET @Exist=0
	
	SET @DestTabname='ETLTempPurchaseReceiptClaimScheme'
	SET @Fldname='CmpInvNo'
	SET @Tabname = 'ETL_Prk_PurchaseReceiptClaim'
	SET @Exist=0
	
	DECLARE Cur_PurchaseReceiptClaim CURSOR
	FOR SELECT DISTINCT ISNULL([Company Invoice No],''),ISNULL([Type],''),ISNULL([Ref No],''),
	ISNULL([Product Code],''),ISNULL([Batch Code],''),ISNULL([Qty],0),ISNULL([Stock Type],''),
	ISNULL([Amount],0),ISNULL([FreightAmt],0) FROM ETL_Prk_PurchaseReceiptClaim WITH(NOLOCK)
	OPEN Cur_PurchaseReceiptClaim 
	FETCH NEXT FROM Cur_PurchaseReceiptClaim INTO @CmpInvNo,@Type,@RefCode,@PrdCode,@PrdBatCode,
	@Qty,@StockType,@Amt,@FreightAmt
	WHILE @@FETCH_STATUS=0
	BEGIN
		
		SET @Exist=0
		SET @PrdId=0
		SET @PrdBatId=0
		SET @StockTypeId=0		
		IF NOT EXISTS(SELECT * FROM ETLTempPurchaseReceipt WITH (NOLOCK) WHERE CmpInvNo=@CmpInvNo)
		BEGIN
			INSERT INTO Errorlog VALUES (1,@TabName,'Company Invoice No',
			'Company Invoice No:'+@CmpInvNo+' is not available')  
         	
			SET @Po_ErrNo=1
		END				
		IF @Po_ErrNo=0
		BEGIN			
			IF @Type='Claim'	
			BEGIN
				SET @TypeId=1
			END
			ELSE IF @Type='Scheme'	
			BEGIN
				SET @TypeId=2
			END
			ELSE
			BEGIN
				SET @TypeId=3
				SET @RefCode=''
			END			
		END				
		IF @Po_ErrNo=0
		BEGIN
			IF @TypeId=1 
			BEGIN
				IF NOT EXISTS(SELECT * FROM ClaimSheetHd CH,ClaimSheetDetail CD,ClaimGroupMaster CG 
				WHERE CD.Status = 1 AND CH.Confirm = 1  AND CD.Clmid = CH.ClmId 
				AND (CD.RecommendedAmount - CD.ReceivedAmount) > 0 AND CG.ClmGrpId = Ch.ClmGrpId AND CD.RefCode=@RefCode)
				BEGIN
					INSERT INTO Errorlog VALUES (1,@TabName,'Ref No',
					'Claim Group Code:'+@RefCode+' is not available in Company Invoice No:'+@CmpInvNo) 
					
					SET @Po_ErrNo=1
				END
				ELSE
				BEGIN
					SELECT @RefId=CD.ClmId,@RefDesc=CH.ClmDesc FROM ClaimSheetDetail CD WITH (NOLOCK),
					ClaimSheetHd CH WITH (NOLOCK) 
					WHERE CD.RefCode=@RefCode AND CD.ClmId=CH.ClmId
				END	
			END
			ELSE IF @TypeId=2 
			BEGIN
				IF NOT EXISTS(SELECT * FROM SchemeMaster WITH (NOLOCK) 
				WHERE SchCode=@RefCode)
				BEGIN
					INSERT INTO Errorlog VALUES (1,@TabName,'Ref No',
					'Scheme Code:'+@RefCode+' is not available in Company Invoice No:'+@CmpInvNo)           	
	
					SET @Po_ErrNo=1
				END
				ELSE
				BEGIN
					SELECT @RefId=SchId,@RefDesc=SchDsc FROM SchemeMaster WITH (NOLOCK) 
					WHERE SchCode=@RefCode
				END	
			END
			ELSE
			BEGIN
				SET @RefId=0
				SET @RefDesc='Offer'
			END
		END		
		
		SELECT @PrdId=PrdId FROM Product WITH (NOLOCK) WHERE PrdCCode=@PrdCode
		SELECT @PrdBatId=PrdBatId FROM ProductBatch WITH (NOLOCK) WHERE PrdBatCode=@PrdBatCode AND PrdId=@PrdId
		IF @PrdBatId<>0
		BEGIN
			IF (@StockType)='Saleable'
			BEGIN
				SET @StockTypeId=1
			END		
			ELSE IF (@StockType)='Offer'
			BEGIN
				SET @StockTypeId=3
			END
			ELSE
			BEGIN
				INSERT INTO Errorlog VALUES (1,@TabName,'Stock Type',
				'Stock Type should be either saleable or offer for product code:'+@PrdCode+ 'in Company Invoice No:'+@CmpInvNo)  
				SET @Po_ErrNo=1
			END	
		END
		IF @Po_ErrNo=0
		BEGIN
			IF NOT CAST(@Qty AS NUMERIC(18,0))+CAST(@Amt AS NUMERIC(18,0))>0 
			BEGIN
				INSERT INTO Errorlog VALUES (1,@TabName,'Qty/Amount',
				'Either Qty or Amount for product code:'+@PrdCode+ ' should be greater than zero in Company Invoice No:'+@CmpInvNo)  
				SET @Po_ErrNo=1
			END
		END		
		IF @Po_ErrNo=0
		BEGIN
			INSERT INTO ETLTempPurchaseReceiptClaimScheme(CmpInvNo,TypeId,RefCode,RefId,RefDescription,PrdId,
			PrdBatId,StockTypeId,Qty,Amt,FreightAmt)
			VALUES(@CmpInvNo,@TypeId,@RefCode,@RefId,@RefDesc,@PrdId,@PrdBatId,@stockTypeId,@Qty,@Amt,@FreightAmt)
		END
			
		IF @Po_ErrNo<>0
		BEGIN
			CLOSE Cur_PurchaseReceiptClaim
			DEALLOCATE Cur_PurchaseReceiptClaim
			RETURN
		END
		FETCH NEXT FROM Cur_PurchaseReceiptClaim INTO @CmpInvNo,@Type,@RefCode,@PrdCode,@PrdBatCode,
		@Qty,@StockType,@Amt,@FreightAmt
	END
	CLOSE Cur_PurchaseReceiptClaim
	DEALLOCATE Cur_PurchaseReceiptClaim
	IF @Po_ErrNo=0
	BEGIN
		TRUNCATE TABLE ETL_Prk_PurchaseReceiptClaim
	END
	RETURN	
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_ValidatePurchaseReceiptClaimScheme' AND XTYPE = 'P' )
DROP PROCEDURE Proc_ValidatePurchaseReceiptClaimScheme
GO
--Exec Proc_ValidatePurchaseReceiptClaimScheme 0
--SELECT * FROM ETL_Prk_PurchaseReceiptClaim
--SELECT * FROM ETLTempPurchaseReceiptClaimScheme
CREATE	Procedure Proc_ValidatePurchaseReceiptClaimScheme
(
	@Po_ErrNo INT OUTPUT
)
AS
/*********************************
* PROCEDURE	: Proc_ValidatePurchaseReceiptClaimScheme
* PURPOSE	: To Insert and Update records in the Table PurchaseReceiptClaimScheme
* CREATED	: Nandakumar R.G
* CREATED DATE	: 17/12/2007
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* [DATE]       [DEVELOPER]   [CR/BUG]      [USER_STORY_ID]          [DESCRIPTION]  
* 26-03-2018   lakshman M	 BZ			   ILCRSTPAR3871            Remove duplicate value in ETL_Prk_PurchaseReceiptClaim table  to main table (distinct values)
*********************************/
SET NOCOUNT ON
BEGIN

	
	DECLARE @Exist 		AS 	INT
	DECLARE @Tabname 	AS     	NVARCHAR(100)
	DECLARE @DestTabname 	AS 	NVARCHAR(100)
	DECLARE @Fldname 	AS     	NVARCHAR(100)
	
	DECLARE @CmpInvNo	AS 	NVARCHAR(100)
	DECLARE @Type		AS 	NVARCHAR(100)	
	DECLARE @RefCode	AS 	NVARCHAR(100)	
	DECLARE @RefDesc	AS 	NVARCHAR(100)	
	DECLARE @PrdCode	AS 	NVARCHAR(100)
	DECLARE @PrdBatCode	AS 	NVARCHAR(100)
	DECLARE @Qty		AS 	NVARCHAR(100)
	DECLARE @StockType	AS 	NVARCHAR(100)
	DECLARE @Amt		AS 	NVARCHAR(100)	
	

	DECLARE @TypeId		AS 	INT
	DECLARE @RefId		AS 	INT
	DECLARE @PrdId		AS 	INT
	DECLARE @PrdBatId	AS 	INT
	DECLARE @StockTypeId	AS 	INT
			
	DECLARE @TransStr 	AS 	NVARCHAR(4000)


	SET @Po_ErrNo=0
	SET @Exist=0
	
	SET @DestTabname='ETLTempPurchaseReceiptClaimScheme'
	SET @Fldname='CmpInvNo'
	SET @Tabname = 'ETL_Prk_PurchaseReceiptClaim'
	SET @Exist=0
	
	DECLARE Cur_PurchaseReceiptClaim CURSOR
	FOR SELECT distinct ISNULL([Company Invoice No],''),ISNULL([Type],''),ISNULL([Ref No],''),
	ISNULL([Product Code],''),ISNULL([Batch Code],''),ISNULL([Qty],0),ISNULL([Stock Type],''),
	ISNULL([Amount],0)
	FROM ETL_Prk_PurchaseReceiptClaim

	OPEN Cur_PurchaseReceiptClaim

	FETCH NEXT FROM Cur_PurchaseReceiptClaim INTO @CmpInvNo,@Type,@RefCode,@PrdCode,@PrdBatCode,
	@Qty,@StockType,@Amt

	WHILE @@FETCH_STATUS=0
	BEGIN
		
		SET @Exist=0
		SET @PrdId=0
		SET @PrdBatId=0
		SET @StockTypeId=0
		

		IF NOT EXISTS(SELECT * FROM ETLTempPurchaseReceipt WITH (NOLOCK) WHERE CmpInvNo=@CmpInvNo)
		BEGIN
			INSERT INTO Errorlog VALUES (1,@TabName,'Company Invoice No',
			'Company Invoice No:'+@CmpInvNo+' is not available')  
         	
			SET @Po_ErrNo=1
		END				

		IF @Po_ErrNo=0
		BEGIN			
			IF @Type='Claim'	
			BEGIN
				SET @TypeId=1
			END
			ELSE
			BEGIN
				SET @TypeId=2
			END			
		END				


		IF @Po_ErrNo=0
		BEGIN
			IF @TypeId=1 
			BEGIN
-- 				IF NOT EXISTS(SELECT * FROM ClaimSheetDetails WITH (NOLOCK) 
-- 				WHERE RefCode=@RefCode)
				IF NOT EXISTS(SELECT * FROM ClaimSheetHd CH, 
				ClaimSheetDetail CD,ClaimGroupMaster CG WHERE CD.Status = 1 AND CH.Confirm = 1  AND 
				CD.Clmid = CH.ClmId AND (CD.RecommendedAmount - CD.ReceivedAmount) > 0 AND 
				CG.ClmGrpId = Ch.ClmGrpId AND CD.RefCode=@RefCode)
				BEGIN
					INSERT INTO Errorlog VALUES (1,@TabName,'Ref No',
					'Claim Group Code:'+@RefCode+' is not available in Company Invoice No:'+@CmpInvNo) 
					
					PRINT 'Claim'          	
	
					SET @Po_ErrNo=1
				END
				ELSE
				BEGIN
					SELECT @RefId=CD.ClmId,@RefDesc=CH.ClmDesc FROM ClaimSheetDetail CD WITH (NOLOCK),
					ClaimSheetHd CH WITH (NOLOCK) 
					WHERE CD.RefCode=@RefCode AND CD.ClmId=CH.ClmId
				END	
			END
			ELSE
			BEGIN
				IF NOT EXISTS(SELECT * FROM SchemeMaster WITH (NOLOCK) 
				WHERE SchCode=@RefCode)
				BEGIN
					INSERT INTO Errorlog VALUES (1,@TabName,'Ref No',
					'Scheme Code:'+@RefCode+' is not available in Company Invoice No:'+@CmpInvNo)           	
	
					SET @Po_ErrNo=1
				END
				ELSE
				BEGIN
					SELECT @RefId=SchId,@RefDesc=SchDsc FROM SchemeMaster WITH (NOLOCK) 
					WHERE SchCode=@RefCode
				END	
			END
		END		


		IF @Po_ErrNo=0
		BEGIN
			IF NOT EXISTS(SELECT * FROM Product WITH (NOLOCK) 
			WHERE PrdDCode=@PrdCode)
			BEGIN
				INSERT INTO Errorlog VALUES (1,@TabName,'Product',
				'Product Code:'+@PrdCode+' present in Company Invoice No:'+@CmpInvNo + 'is not available')           	
				
			END
			ELSE
			BEGIN
				SELECT @PrdId=PrdId FROM Product WITH (NOLOCK) 
				WHERE PrdDCode=@PrdCode
			END
		END		


		IF @PrdId<>0
		BEGIN
			IF NOT EXISTS(SELECT * FROM ProductBatch WITH (NOLOCK) 
			WHERE PrdBatCode=@PrdBatCode)
			BEGIN
				INSERT INTO Errorlog VALUES (1,@TabName,'Product Batch',
				'Product Batch:'+@PrdBatCode+' is not available for product code:'+@PrdCode+ 'in Company Invoice No:'+@CmpInvNo)           	

			END
			ELSE
			BEGIN
				SELECT @PrdBatId=PrdBatId FROM ProductBatch WITH (NOLOCK) 
				WHERE PrdBatCode=@PrdBatCode AND PrdId=@PrdId
			END
		END		
	
		IF @PrdBatId<>0
		BEGIN
			IF (@StockType)='Saleable'
			BEGIN
				SET @StockTypeId=1
			END		
			ELSE IF (@StockType)='Offer'
			BEGIN
				SET @StockTypeId=3
			END
			ELSE
			BEGIN
				INSERT INTO Errorlog VALUES (1,@TabName,'Stock Type',
				'Stock Type should be either saleable or offer for product code:'+@PrdCode+ 'in Company Invoice No:'+@CmpInvNo)  
			END	
		END

		IF @StockTypeId<>0
		BEGIN
			IF NOT ISNUMERIC(@Qty)=1
			BEGIN
				INSERT INTO Errorlog VALUES (1,@TabName,'Quantity',
				'Quantity:'+@Qty+' should be in numeric for product code:'+@PrdCode+ 'in Company Invoice No:'+@CmpInvNo) 
			END			
		END


		IF @Po_ErrNo=0
		BEGIN
			IF NOT ISNUMERIC(@Amt)=1
			BEGIN
				INSERT INTO Errorlog VALUES (1,@TabName,'Amount',
				'Amount:'+@Amt+' should be in numeric for product code:'+@PrdCode+ 'in Company Invoice No:'+@CmpInvNo)  

				SET @Po_ErrNo=1
			END			
		END


--		PRINT '111'
--		PRINT @Po_ErrNo
--		PRINT @Qty+@Amt

		IF @Po_ErrNo=0
		BEGIN
			IF NOT CAST(@Qty AS NUMERIC(18,0))+CAST(@Amt AS NUMERIC(18,0))>0 
			BEGIN
				PRINT 'Hi111'
				SET @Po_ErrNo=1
			END
		END		

--		PRINT 'Hi'
--		PRINT @Po_ErrNo

		IF @Po_ErrNo=0
		BEGIN

--			PRINT 'Hi'

			INSERT INTO ETLTempPurchaseReceiptClaimScheme 
			(CmpInvNo,TypeId,RefCode,RefId,RefDescription,PrdId,PrdBatId,StockTypeId,Qty,Amt)
			VALUES(@CmpInvNo,@TypeId,@RefCode,@RefId,@RefDesc,@PrdId,@PrdBatId,@stockTypeId,@Qty,@Amt)
		END
			
		IF @Po_ErrNo<>0
		BEGIN
			CLOSE Cur_PurchaseReceiptClaim
			DEALLOCATE Cur_PurchaseReceiptClaim
			RETURN
		END

		FETCH NEXT FROM Cur_PurchaseReceiptClaim INTO @CmpInvNo,@Type,@RefCode,@PrdCode,@PrdBatCode,
		@Qty,@StockType,@Amt

	END
	CLOSE Cur_PurchaseReceiptClaim
	DEALLOCATE Cur_PurchaseReceiptClaim

	IF @Po_ErrNo=0
	BEGIN
		TRUNCATE TABLE ETL_Prk_PurchaseReceiptClaim
	END

	RETURN	
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_Cn2Cs_PurchaseReceipt' AND TYPE ='P')
DROP PROCEDURE Proc_Cn2Cs_PurchaseReceipt
GO
/*    
BEGIN TRANSACTION    
EXEC Proc_Cn2Cs_PurchaseReceipt 0 
select *from ETLTempPurchaseReceipt --WHERE DownLoadStatus=0
select *from etltemppurchasereceiptproduct where cmpinvno in(SELECT CmpInvNo FROM ETLTempPurchaseReceipt  WHERE DownLoadStatus=0)
SELECT * FROM ETLTempPurchaseReceiptClaimScheme 
ROLLBACK TRANSACTION    
*/    
CREATE PROCEDURE Proc_Cn2Cs_PurchaseReceipt
(    
 @Po_ErrNo INT OUTPUT    
)    
AS    
/***********************************************************    
* PROCEDURE : Proc_Cn2Cs_PurchaseReceipt    
* PURPOSE : To Insert the records FROM Console into Temp Tables    
* SCREEN : Console Integration-PurchaseReceipt    
* CREATED BY: Nandakumar R.G On 03-05-2010    
* MODIFIED :    
* DATE      AUTHOR     DESCRIPTION    
14/08/2013 Murugan.R Logistic Material Management    
* {date} {developer}  {brief modIFication description}    
* DATE       AUTHOR     CR/BZ	USER STORY ID           DESCRIPTION                         
***************************************************************************************************
29-09-2018  Lakshman M	 SR     ILCRSTPAR2251         Purchase backup date validation included from CS As per request 5 days configuration .
04-10-2018  lakshman M   BZ     ILCRSTPAR2285         purchase downloaded status validation added from CS.
28-01-2019  Lakshman M	 SR     ILCRSTPAR3256         Purchase backup date validation increased from CS As per request 10 days configuration .
05-03-2019  Lakshman M	 SR     ILCRSTPAR3638         Purchase backup date validation decreased from CS As per request 7 days only configuration.
***************************************************************************************************/  
SET NOCOUNT ON    
BEGIN    
 -- For Clearing the Prking/Temp Table -----     
 ---------------->  Added by Lakshman M on 29/09/2018  <-------------------
 DECLARE @FROMDATE AS Datetime
 DECLARE @TodayDt AS datetime
 SELECT @FROMDATE = cast(DATEADD(DAY, -7, GETDATE()) AS DATETIME)
 SELECT @FROMDATE=CONVERT(VARCHAR(11), @FROMDATE, 121)
 SELECT @TodayDt= CAST(convert(varchar,getdate()) AS DATETIME)
 SELECT @TodayDt= CONVERT(VARCHAR(11), @TodayDt, 121)
 SELECT * INTO #ETLTempPurchaseReceipt_temp FROM ETLTempPurchaseReceipt WHERE InvDate between CONVERT(VARCHAR(11), @FROMDATE, 121) and CONVERT(VARCHAR(11), @TodayDt, 121)
 UPDATE A SET A.downloadstatus = 0 FROM ETLTempPurchaseReceipt A INNER JOIN #ETLTempPurchaseReceipt_temp B ON A.CmpInvNo =B.CmpInvNo
 UPDATE A SET A.downloadstatus = 1 from ETLTempPurchaseReceipt A where CmpInvNo in(select CmpInvNo from PurchaseReceipt)   ---> added By Lakshman M PMS ID: ILCRSTPAR2285 
 SELECT * INTO #ETLTempPurchaseReceipt_temp1 FROM ETLTempPurchaseReceipt WHERE InvDate < CONVERT(VARCHAR(11),@FROMDATE, 121)
 Delete A from ETLTempPurchaseReceipt A INNER JOIN #ETLTempPurchaseReceipt_temp1 B ON A.CmpInvNo =B.CmpInvNo  
 Delete A from ETLTempPurchaseReceiptproduct A INNER JOIN #ETLTempPurchaseReceipt_temp1 B ON A.CmpInvNo =B.CmpInvNo
 Delete A from ETLTempPurchaseReceiptClaimScheme A INNER JOIN #ETLTempPurchaseReceipt_temp1 B ON A.CmpInvNo =B.CmpInvNo
 Delete A from ETLTempPurchaseReceiptClaimScheme A where A.CmpInvNo not in(select B.CmpInvNo from #ETLTempPurchaseReceipt_temp1 B)
---------------->  Till Here  <----------------------
 DELETE FROM ETLTempPurchaseReceiptOtherCharges WHERE CmpInvNo in    
 (SELECT CmpInvNo FROM ETLTempPurchaseReceipt  WHERE DownLoadStatus=1)    
 DELETE FROM ETLTempPurchaseReceiptClaimScheme WHERE CmpInvNo in    
 (SELECT CmpInvNo FROM ETLTempPurchaseReceipt  WHERE DownLoadStatus=1)     
 DELETE FROM ETLTempPurchaseReceiptPrdLineDt WHERE CmpInvNo in    
 (SELECT CmpInvNo FROM ETLTempPurchaseReceipt  WHERE DownLoadStatus=1)    
 DELETE FROM ETLTempPurchaseReceiptProduct WHERE CmpInvNo in    
 (SELECT CmpInvNo FROM ETLTempPurchaseReceipt  WHERE DownLoadStatus=1)    
 DELETE FROM ETLTempPurchaseReceiptOtherCharges WHERE CmpInvNo in     
 (SELECT CmpInvNo FROM ETLTempPurchaseReceipt  WHERE DownLoadStatus=1)     
 DELETE FROM Etl_LogisticMaterialStock WHERE InvoiceNumber IN     
 (SELECT CmpInvNo FROM ETLTempPurchaseReceipt  WHERE DownLoadStatus=1)    
 DELETE FROM ETLTempPurchaseReceipt  WHERE DownLoadStatus=1    
 DELETE FROM ETLTempPurchaseReceiptCrDbAdjustments WHERE CmpInvNo     
 IN (SELECT CmpInvNo FROM PurchaseReceipt WHERE Status = 1) AND DownloadStatus = 1    

 TRUNCATE TABLE ETL_Prk_PurchaseReceiptPrdDt    
 TRUNCATE TABLE ETL_Prk_PurchaseReceiptClaim    
 TRUNCATE TABLE ETL_Prk_PurchaseReceipt    
 TRUNCATE TABLE ETLTempPurchaseReceiptPrdLineDt    
 TRUNCATE TABLE ETL_Prk_PurchaseReceiptPrdDt    
 TRUNCATE TABLE ETL_Prk_PurchaseReceiptOtherCharges    
 TRUNCATE TABLE ETL_Prk_PurchaseReceiptCrDbAdjustments  
 --------------------------------------    
 DECLARE @ErrStatus INT    
 DECLARE @BatchNo   NVARCHAR(200)    
 DECLARE @ProductCode  NVARCHAR(100)    
 DECLARE @ListPrice   NUMERIC(38,6)    
 DECLARE @FreeSchemeFlag  NVARCHAR(5)    
 DECLARE @CompInvNo   NVARCHAR(25)    
 DECLARE @UOMCode   NVARCHAR(25)    
 DECLARE @Qty    INT    
 DECLARE @PurchaseDiscount NUMERIC(38,6)    
 DECLARE @VATTaxValue  NUMERIC(38,6)    
 DECLARE @SchemeRefrNo  NVARCHAR(25)    
 DECLARE @SupplierCode  NVARCHAR(30)    
 DECLARE @TransporterCode NVARCHAR(30)    
 DECLARE @POUOM    INT    
 DECLARE @RowId    INT    
 DECLARE @LineLvlAmt   NUMERIC(38,6)    
 DECLARE @QtyInKg   NUMERIC(38,6)    
 DECLARE @ExistCompInvNo  NVARCHAR(25)    
 DECLARE @FreightCharges  NUMERIC(38,6)    
 SET @RowId=1    
 --->Added By Nanda on 17/09/2009    
 IF EXISTS (SELECT * FROM DBO.SysObjects WHERE ID = OBJECT_ID(N'InvToAvoid')    
 AND OBJECTPROPERTY(ID, N'IsUserTable') = 1)    
 BEGIN    
  DROP TABLE InvToAvoid     
 END    
 CREATE TABLE InvToAvoid    
 (    
  CmpInvNo NVARCHAR(50)    
 )    
 IF EXISTS (SELECT DISTINCT CompInvNo,SupplierCode FROM Cn2Cs_Prk_BLPurchaseReceipt  
 WHERE UPPER(ISNULL(TaxType,'VAT')) NOT IN ('VAT','GST'))  
 BEGIN  
  INSERT INTO InvToAvoid (CmpInvNo)  
  SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt  
  WHERE UPPER(ISNULL(TaxType,'VAT')) NOT IN ('VAT','GST')  
  INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)  
  SELECT DISTINCT 1,'Purchase Receipt','Tax Type','Purchase Tax Type should be VAT or GST '+CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt  
  WHERE UPPER(ISNULL(TaxType,'VAT')) NOT IN ('VAT','GST')  
 END  
 IF EXISTS(SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt    
 WHERE CompInvNo IN (SELECT CmpInvNo FROM PurchaseReceipt))    
 BEGIN    
  INSERT INTO InvToAvoid(CmpInvNo)    
  SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt    
  WHERE CompInvNo IN (SELECT CmpInvNo FROM PurchaseReceipt)    
  INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)    
  SELECT DISTINCT 1,'Purchase Receipt','CmpInvNo','Company Invoice No:'+CompInvNo+' already Available' FROM Cn2Cs_Prk_BLPurchaseReceipt    
  WHERE CompInvNo IN (SELECT CmpInvNo FROM PurchaseReceipt)    
 END    
 IF EXISTS(SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt    
 WHERE CompInvNo IN (SELECT CmpInvNo FROM ETLTempPurchaseReceipt))    
 BEGIN    
  INSERT INTO InvToAvoid(CmpInvNo)    
  SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt    
  WHERE CompInvNo IN (SELECT CmpInvNo FROM ETLTempPurchaseReceipt)    
  INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)    
  SELECT DISTINCT 1,'Purchase Receipt','CmpInvNo','Company Invoice No:'+CompInvNo+' already downloaded and ready for invoicing' FROM Cn2Cs_Prk_BLPurchaseReceipt    
  WHERE CompInvNo IN (SELECT CmpInvNo FROM ETLTempPurchaseReceipt)    
 END    
 IF EXISTS(SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt    
 WHERE ProductCode NOT IN (SELECT PrdCCode FROM Product))    
 BEGIN    
  INSERT INTO InvToAvoid(CmpInvNo)    
  SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt    
  WHERE ProductCode NOT IN (SELECT PrdCCode FROM Product)    
  INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)    
  SELECT DISTINCT 1,'Purchase Receipt','Product','Product:'+ProductCode+' Not Available for Invoice:'+CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt    
  WHERE ProductCode NOT IN (SELECT PrdCCode FROM Product)    
  --->Added By Nanda on 05/05/2010    
  INSERT INTO ReDownloadRequest(DistCode,Process,RefNo,Download,PrdCCode,PrdBatCode,UploadFlag)    
  SELECT DISTINCT DistCode,'Purchase',CompInvNo,'Product',ProductCode,'','N' FROM Cn2Cs_Prk_BLPurchaseReceipt    
  WHERE ProductCode NOT IN (SELECT PrdCCode FROM Product)    
  --->Till Here        
 END    
 IF EXISTS(SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt    
 WHERE ProductCode+'~'+BatchNo    
 NOT IN    
 (SELECT P.PrdCCode+'~'+PB.PrdBatCode FROM Product P,ProductBatch PB WHERE P.PrdId=PB.PrdId))    
 BEGIN    
  INSERT INTO InvToAvoid(CmpInvNo)    
  SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt    
  WHERE ProductCode+'~'+BatchNo    
  NOT IN (SELECT P.PrdCCode+'~'+PB.PrdBatCode FROM Product P,ProductBatch PB WHERE P.PrdId=PB.PrdId)    
  INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)    
  SELECT DISTINCT 1,'Purchase Receipt','Product Batch','Product Batch:'+BatchNo+'Not Available for Product:'+ProductCode+' in Invoice:'+CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt    
  WHERE ProductCode+'~'+BatchNo    
  NOT IN    
  (SELECT P.PrdCCode+'~'+PB.PrdBatCode FROM Product P,ProductBatch PB WHERE P.PrdId=PB.PrdId)    
  --->Added By Nanda on 05/05/2010    
  INSERT INTO ReDownloadRequest(DistCode,Process,RefNo,Download,PrdCCode,PrdBatCode,UploadFlag)    
  SELECT DISTINCT DistCode,'Purchase',CompInvNo,'Product Batch',ProductCode,BatchNo,'N' FROM Cn2Cs_Prk_BLPurchaseReceipt    
  WHERE ProductCode+'~'+BatchNo    
  NOT IN (SELECT P.PrdCCode+'~'+PB.PrdBatCode FROM Product P,ProductBatch PB WHERE P.PrdId=PB.PrdId)    
  --->Till Here    
 END    
 --Supplier Credit Note Validations     
 IF EXISTS(SELECT DISTINCT [CompInvNo] FROM Cn2Cs_Prk_PurchaseReceiptAdjustments WHERE [RefNo] NOT IN    
 (SELECT DISTINCT PostedRefNo FROM CreditNoteSupplier WITH (NOLOCK)) AND [AdjType] = 'Credit')    
 BEGIN    
  INSERT INTO InvToAvoid(CmpInvNo)    
        SELECT DISTINCT [CompInvNo] FROM Cn2Cs_Prk_PurchaseReceiptAdjustments WHERE [RefNo] NOT IN    
    (SELECT DISTINCT PostedRefNo FROM CreditNoteSupplier WITH (NOLOCK)) AND [AdjType] = 'Credit'    
  INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)    
  SELECT DISTINCT 1,'CreditNoteSupplier','PostedRefNo','Supplier Credit Note Not Available'+[CompInvNo]    
  FROM Cn2Cs_Prk_PurchaseReceiptAdjustments WHERE [RefNo] NOT IN     
  (SELECT DISTINCT PostedRefNo FROM CreditNoteSupplier WITH (NOLOCK)) AND [AdjType] = 'Credit'      
 END    
 --Supplier Debit Note Validations     
 IF EXISTS(SELECT DISTINCT [CompInvNo] FROM Cn2Cs_Prk_PurchaseReceiptAdjustments WHERE [RefNo] NOT IN    
 (SELECT DISTINCT PostedRefNo FROM DebitNoteSupplier WITH (NOLOCK)) AND [AdjType] = 'Debit')    
 BEGIN    
  INSERT INTO InvToAvoid(CmpInvNo)    
        SELECT DISTINCT [CompInvNo] FROM Cn2Cs_Prk_PurchaseReceiptAdjustments WHERE [RefNo] NOT IN    
    (SELECT DISTINCT PostedRefNo FROM DebitNoteSupplier WITH (NOLOCK)) AND [AdjType] = 'Debit'    
  INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)    
  SELECT DISTINCT 1,'DebitNoteSupplier','PostedRefNo','Supplier Debit Note Not Available'+[CompInvNo]    
  FROM Cn2Cs_Prk_PurchaseReceiptAdjustments WHERE [RefNo] NOT IN     
  (SELECT DISTINCT PostedRefNo FROM DebitNoteSupplier WITH (NOLOCK)) AND [AdjType] = 'Debit'      
 END    
 IF EXISTS(SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt    
 WHERE CompInvDate>GETDATE())     
 BEGIN    
  INSERT INTO InvToAvoid(CmpInvNo)    
  SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt    
  WHERE CompInvDate>GETDATE()    
  INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)    
  SELECT DISTINCT 1,'Purchase Receipt','Invoice Date','Invoice Date:'+CAST(CompInvDate AS NVARCHAR(10))+' is greater than current date in Invoice:'+CompInvNo     
  FROM Cn2Cs_Prk_BLPurchaseReceipt WITH (NOLOCK) WHERE CompInvDate>GETDATE()    
 END    
--Commented and Added By Mohana.S PMS NO: DCRSTKAL0012    
 --IF EXISTS(SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt    
 --WHERE UOMCode NOT IN (SELECT UOMCode FROM UOMMaster WITH (NOLOCK)))     
 --BEGIN    
 -- INSERT INTO InvToAvoid(CmpInvNo)    
 -- SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt    
 -- WHERE UOMCode NOT IN (SELECT UOMCode FROM UOMMaster WITH (NOLOCK))    
 -- INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)    
 -- SELECT DISTINCT 1,'Purchase Receipt','Invoice UOM','UOM:'+UOMCode+' is not available for Invoice:'+CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt    
 -- WHERE UOMCode NOT IN (SELECT UOMCode FROM UOMMaster WITH (NOLOCK))    
 --END    
 IF EXISTS (SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt WHERE PRODUCTCODE+'~'+UomCode NOT IN (SELECT PrdCCode+'~'+UomCode      
 FROM UomGroup UG INNER JOIN UomMaster UM ON UG.UomId =UM.UomId INNER JOIN Product P ON P.UomGroupId = UG.UomGroupId))    
 BEGIN    
   INSERT INTO InvToAvoid(CmpInvNo)    
   SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt WHERE PRODUCTCODE+'~'+UomCode NOT IN (SELECT PrdCCode+'~'+UomCode      
   FROM UomGroup UG INNER JOIN UomMaster UM ON UG.UomId =UM.UomId INNER JOIN Product P ON P.UomGroupId = UG.UomGroupId)    
   INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)    
   SELECT DISTINCT 1,'Purchase Receipt',PRODUCTCODE+'Product UOM','UOMCode:'+UOMCode+' is not available for Invoice:'+CompInvNo     
   FROM Cn2Cs_Prk_BLPurchaseReceipt WHERE PRODUCTCODE+'~'+UomCode  NOT IN (SELECT PrdCCode+'~'+UomCode      
   FROM UomGroup UG INNER JOIN UomMaster UM ON UG.UomId =UM.UomId INNER JOIN Product P ON P.UomGroupId = UG.UomGroupId)    
 END     
 IF EXISTS(SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt    
 WHERE SupplierCode NOT IN (SELECT SpmCode FROM Supplier WITH (NOLOCK)))     
 BEGIN    
  INSERT INTO InvToAvoid(CmpInvNo)    
  SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt    
  WHERE SupplierCode NOT IN (SELECT SpmCode FROM Supplier WITH (NOLOCK))    
  INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)    
  SELECT DISTINCT 1,'Purchase Receipt','Invoice Supplier','Supplier:'+SupplierCode+' is not available for Invoice:'+CompInvNo    
  FROM Cn2Cs_Prk_BLPurchaseReceipt WITH (NOLOCK) WHERE SupplierCode NOT IN (SELECT SpmCode FROM Supplier WITH (NOLOCK))    
 END     
 --->Till Here    
 -- Eliminated Duplicate records insertion on 02/03/2015  
 SET @ExistCompInvNo=0    
 DECLARE Cur_Purchase CURSOR    
 FOR    
 SELECT DISTINCT ProductCode,BatchNo,ListPriceNSP,    
 FreeSchemeFlag,CompInvNo,UOMCode,PurQty,PurchaseDiscount,VATTaxValue,SchemeRefrNo,LineLevelAmount,CashDiscRs,0 AS BundleDeal,    
 ISNULL(FreightCharges,0) AS FreightCharges    
 FROM Cn2Cs_Prk_BLPurchaseReceipt WHERE [DownLoadFlag]='D' AND CompInvNo NOT IN(SELECT CmpInvNo FROM InvToAvoid)    
 ORDER BY CompInvNo,ProductCode,BatchNo,ListPriceNSP,    
 FreeSchemeFlag,UOMCode,PurQty,PurchaseDiscount,VATTaxValue,SchemeRefrNo,LineLevelAmount,CashDiscRs,FreightCharges    
 OPEN Cur_Purchase    
 FETCH NEXT FROM Cur_Purchase INTO @ProductCode,@BatchNo,@ListPrice,    
 @FreeSchemeFlag,@CompInvNo,@UOMCode,@Qty,    
 @PurchaseDiscount,@VATTaxValue,@SchemeRefrNo,@LineLvlAmt,@QtyInKg,@RowId,@FreightCharges     
 WHILE @@FETCH_STATUS = 0    
 BEGIN    
--  IF @ExistCompInvNo<>@CompInvNo    
--  BEGIN    
--   SET @ExistCompInvNo=@CompInvNo    
--   SET @RowId=2    
--  END    
  --To insert into ETL_Prk_PurchaseReceiptPrdDt    
  IF(@FreeSchemeFlag='0')    
  BEGIN    
   INSERT INTO  ETL_Prk_PurchaseReceiptPrdDt([Company Invoice No],[RowId],[Product Code],[Batch Code],    
   [PO UOM],[PO Qty],[UOM],[Invoice Qty],[Purchase Rate],[Gross],[Discount In Amount],[Tax In Amount],[Net Amount],FreightCharges)    
   VALUES(@CompInvNo,@RowId,@ProductCode,@BatchNo,'',0,@UOMCode,@Qty,@ListPrice,@LineLvlAmt,    
   @PurchaseDiscount,@VATTaxValue,(@ListPrice-@PurchaseDiscount+@VATTaxValue)* @Qty,@FreightCharges)    
   INSERT INTO ETL_Prk_PurchaseReceiptPrdLineDt([Company Invoice No],[RowId],[Column Code],[Value In Amount])    
   VALUES(@CompInvNo,@RowId,'C',@PurchaseDiscount)    
   INSERT INTO ETL_Prk_PurchaseReceiptPrdLineDt([Company Invoice No],[RowId],[Column Code],[Value In Amount])    
   VALUES(@CompInvNo,@RowId,'D',@VATTaxValue)    
--   INSERT INTO ETL_Prk_PurchaseReceiptPrdLineDt([Company Invoice No],[RowId],[Column Code],[Value In Amount])    
--   VALUES(@CompInvNo,@RowId,'E',@QtyInKg)    
  END    
  --To insert into ETL_Prk_PurchaseReceiptClaim    
  IF(@FreeSchemeFlag='1')    
  BEGIN    
   INSERT INTO ETL_Prk_PurchaseReceiptClaim([Company Invoice No],[Type],[Ref No],[Product Code],    
   [Batch Code],[Qty],[Stock Type],[Amount],FreightAmt)    
   VALUES(@CompInvNo,'Offer',@SchemeRefrNo,@ProductCode,@BatchNo,@Qty,'Offer',0,@FreightCharges)    
  END    
--  SET @RowId=@RowId+1    
  FETCH NEXT FROM Cur_Purchase INTO @ProductCode,@BatchNo,@ListPrice,    
  @FreeSchemeFlag,@CompInvNo,@UOMCode,@Qty,    
  @PurchaseDiscount,@VATTaxValue,@SchemeRefrNo,@LineLvlAmt,@QtyInKg,@RowId,@FreightCharges    
 END    
 CLOSE Cur_Purchase    
 DEALLOCATE Cur_Purchase    
 --To insert into ETL_Prk_PurchaseReceipt    
 SELECT @TransporterCode=TransporterCode FROM Transporter    
 WHERE TransporterId IN(SELECT MIN(TransporterId) FROM Transporter WITH(NOLOCK))    
 IF @TransporterCode=''    
 BEGIN    
  INSERT INTO Errorlog VALUES (1,'Purchase Download','Transporter','Transporter not available')    
 END    
 INSERT INTO ETL_Prk_PurchaseReceipt([Company Code],[Supplier Code],[Company Invoice No],[PO Number],  
 [Invoice Date],[Transporter Code],[NetPayable Amount],[TaxType])  
 SELECT DISTINCT C.CmpCode,SupplierCode,P.CompInvNo,'',P.CompInvDate,@TransporterCode,P.NetValue,  
 P.TaxType  
 FROM Company C,Cn2Cs_Prk_BLPurchaseReceipt P  
 WHERE  C.DefaultCompany=1 AND DownLoadFlag='D' AND CompInvNo NOT IN(SELECT CmpInvNo FROM InvToAvoid)  
 UPDATE A SET [TaxType]='VAT' FROM ETL_Prk_PurchaseReceipt A (NOLOCK)   
 INNER JOIN Cn2Cs_Prk_BLPurchaseReceipt B (NOLOCK) ON B.CompInvNo=A.[Company Invoice No]   
 AND A.[Supplier Code]=B.SupplierCode WHERE ISNULL(A.TaxType,'')=''  
 --Added By Sathishkumar Veeramani 2013/08/13    
 --INSERT INTO ETL_Prk_PurchaseReceiptOtherCharges ([Company Invoice No],[OC Description],Amount)    
 --SELECT DISTINCT CompInvNo,'Cash Discounts' AS [OC Description],CashDiscRs FROM Cn2Cs_Prk_BLPurchaseReceipt WITH (NOLOCK)    
 --WHERE CompInvNo NOT IN(SELECT CmpInvNo FROM InvToAvoid) AND DownLoadFlag='D'    
 --Added by Sathishkumar Veeramani 2013/11/22    
 INSERT INTO ETL_Prk_PurchaseReceiptCrDbAdjustments([Company Invoice No],[Adjustment Type],[Ref No],[Amount])    
 SELECT DISTINCT CompInvNo,AdjType,RefNo,Amount FROM Cn2Cs_Prk_PurchaseReceiptAdjustments WITH (NOLOCK)    
 WHERE CompInvNo NOT IN(SELECT CmpInvNo FROM InvToAvoid) AND DownLoadFlag='D'    
 EXEC Proc_Validate_PurchaseReceipt @Po_ErrNo= @ErrStatus OUTPUT    
 IF @ErrStatus =0    
 BEGIN    
  EXEC Proc_Validate_PurchaseReceiptProduct @Po_ErrNo= @ErrStatus OUTPUT    
  IF @ErrStatus =0    
  BEGIN    
   EXEC Proc_Validate_PurchaseReceiptLineDt @Po_ErrNo= @ErrStatus OUTPUT    
   IF @ErrStatus =0    
   BEGIN    
    EXEC Proc_Validate_PurchaseReceiptClaimScheme @Po_ErrNo= @ErrStatus OUTPUT    
    IF @ErrStatus =0    
    BEGIN    
       EXEC Proc_Validate_PurchaseReceiptOtherCharges @Po_ErrNo= @ErrStatus OUTPUT    
       IF @ErrStatus =0    
       BEGIN    
           EXEC Proc_Validate_PurchaseReceiptCrDbAdjustments @Po_ErrNo= @ErrStatus OUTPUT    
           IF @ErrStatus =0    
           BEGIN    
            SET @ErrStatus=@ErrStatus    
        END        
       END        
    END    
   END    
  END    
 END    
 --Proc_Validate_PurchaseReceiptCrDbAdjustments    
 --->Added By Nanda on 17/09/2009    
 DELETE FROM ETLTempPurchaseReceipt WHERE CmpInvNo NOT IN    
 (SELECT DISTINCT CmpInvNo FROM ETLTempPurchaseReceiptProduct)    
 UPDATE Cn2Cs_Prk_BLPurchaseReceipt SET DownLoadFlag='Y'    
 WHERE CompInvNo IN (SELECT DISTINCT CmpInvNo FROM EtlTempPurchaseReceipt)    
 --->Till Here    
 SET @Po_ErrNo= @ErrStatus    
 RETURN    
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE name ='Proc_Cn2Cs_SchemeCategoryDetails' and TYPE ='p')
DROP PROCEDURE Proc_Cn2Cs_SchemeCategoryDetails
GO
/*  
BEGIN TRAN  
delete from errorlog  
--delete from Cn2Cs_Prk_SchemeCategorydetails where cmpschcode not in('SCH21069')
EXEC Proc_Cn2Cs_SchemeCategoryDetails 0  
SELECT * FROM ERRoRLOG  
SELECT * FROM Cn2Cs_Prk_SchemeCategorydetails where cmpschcode in('SCH21069')
--SELECT * FROM Schememaster   
ROLLBACK TRAN  
*/  
CREATE PROCEDURE Proc_Cn2Cs_SchemeCategoryDetails  
(  
 @Po_ErrNo INT OUTPUT  
)  
AS  
/************************************************************************************************  
* PROCEDURE  : Proc_Cn2Cs_SchemeCategoryDetails  
* PURPOSE  : To validate the downloaded Scheme Category details from Console  
* CREATED  : Lakshman M  
* CREATED DATE : 11-03-2019  
* MODIFIED  
* DATE       AUTHOR     CR/BZ USER STORY ID           DESCRIPTION                           
***************************************************************************************************  
 11-03-2019  Lakshman M  CR   CRCRSTPAR0037    scheme category type validation included from CS.  
 24-04-2015  lakshman M  BZ   ILCRSTPAR4149    Duplicate records validation missing for scheme category process in core stocky.   
 13-06-2019  Lakshman M  BZ   ILCRSTPAR4802    scheme category details duplicate data validaion included. 
***************************************************************************************************/  
SET NOCOUNT ON  
BEGIN  
 SET @Po_ErrNo=0  
   
 CREATE TABLE #AvoidScheme  
 (  
  CMpSchcode NVARCHAR(50)  
 )  
 SELECT distinct CmpSchcode,MAX(Createddate)  Mxdate into  #Duplicate  
 from Cn2Cs_Prk_SchemeCategorydetails  
 GROUP BY  CmpSchcode 
 ----------------------- added by lakshman M Dated ON 13-06-2019 PMS iD: ILCRSTPAR4802  ----------------
 SELECT distinct C.* into #Cn2Cs_Prk_SchemeCategorydetails  from Cn2Cs_Prk_SchemeCategorydetails  C 
 inner join #Duplicate D on C.CmpSchcode=D.CmpSchcode and D.Mxdate=C.CreatedDate  
 
 DELETE FROM  Cn2Cs_Prk_SchemeCategorydetails  
 INSERT INTO Cn2Cs_Prk_SchemeCategorydetails  
 SELECT distinct * FROM #Cn2Cs_Prk_SchemeCategorydetails  
 ---------------------------Till Here --------------------
 DELETE FROM Cn2Cs_Prk_SchemeCategorydetails WHERE DownLoadFlag='Y'  
   
 IF NOT EXISTS(SELECT 'X' FROM Cn2Cs_Prk_SchemeCategorydetails (NOLOCK) WHERE DownLoadFlag='D')  
 BEGIN  
  RETURN  
 END  
    
 INSERT INTO #AvoidScheme  
 SELECT DISTINCT CMpSchcode FROM Cn2Cs_Prk_SchemeCategorydetails WHERE CMpSchcode NOT IN (SELECT CmpSchCode FROM SchemeMaster)  
 INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)  
 SELECT 1,'Cn2Cs_Prk_SchemeCategorydetails',CmpSchcode,'Scheme Not Available in SchemeMaster' FROM Cn2Cs_Prk_SchemeCircularDetails WHERE CMpSchcode NOT IN (SELECT CmpSchCode FROM SchemeMaster)  
    
 INSERT INTO #AvoidScheme  
 SELECT DISTINCT CmpSchCode as CmpSchcode FROM Cn2Cs_Prk_SchemeCategorydetails  
 GROUP BY CmpSchCode HAVING COUNT(CmpSchCode)>1  
   
 INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)  
 SELECT 1,'Cn2Cs_Prk_SchemeCategorydetails',CmpSchCode,'Duplicate Cmpschcode Available -'+CmpSchCode  FROM Cn2Cs_Prk_SchemeCategorydetails  
 GROUP BY CmpSchCode HAVING COUNT(CmpSchCode)>1  

 DELETE A FROM SchemeCategorydetails A INNER join Cn2Cs_Prk_SchemeCategorydetails B ON A.cmpschcode =B.cmpschcode  
   
 INSERT INTO SchemeCategorydetails  
 SELECT DISTINCT CmpSchCode,Schcategory_type,GETDATE() FROM Cn2Cs_Prk_SchemeCategorydetails WHERE CMpSchcode NOT IN (SELECT CmpSchcode FROM #AvoidScheme)  
   
 UPDATE Cn2Cs_Prk_SchemeCategorydetails SET DownloadFlag ='Y' WHERE CmpSchcode IN (SELECT CmpSchCode FROM SchemeCategorydetails)   
 RETURN  
END
GO
--ILCRSTPAR5235 (Temp table cloumn data type size is increased)
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_CutOffOverSoldSalesHistory' AND TYPE ='P')
DROP PROCEDURE Proc_CutOffOverSoldSalesHistory
GO
--EXEC Proc_CutOffOverSoldSalesHistory '2019-02-01','2019-07-22',1,5,2
CREATE PROCEDURE Proc_CutOffOverSoldSalesHistory
(
	@Pi_FromDate	 	DATETIME,
	@Pi_ToDate	 	DATETIME,
	@Pi_OvrSld		INT,
	@Pi_OrdBy		INT,
	@Pi_UserId		INT
)
AS
/*********************************
* PROCEDURE	: Proc_CutOffOverSoldSalesHistory
* PURPOSE	: To calculate the billed qty according to the previous sales
* CREATED	: Nandakumar R.G
* CREATED DATE	: 22/10/2007
* MODIFIED	:
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
/****************************************************************************************************************/
* DATE			NAME			USERSTORYID			CR/BZ				DESCRIPTION
*****************************************************************************************************************
* 23-07-2019    Lakshman M      ILCRSTPAR5235       SR                  temp table cloumn data type size is increased.
*****************************************************************************************************************/
SET NOCOUNT ON
BEGIN
	DECLARE 	@sSql 		NVARCHAR(4000)
	DECLARE 	@TotQty 	NUMERIC(38,0)
	DECLARE 	@lDefLcnId	INT

	SELECT @lDefLcnId=LcnId FROM Location WHERE DefaultLocation=1
	----------- Added by lakshman M dated ON 23-07-2019 PMS ID: ILCRSTPAR5235 -------
	CREATE          TABLE #TempCutOff
	(
		SMId		INT,
		SMName		NVARCHAR(100),
		RMId		INT,
		RMName		NVARCHAR(100),
		RtrId		INT,
		RtrName		NVARCHAR(200),
		PrdId		INT,
		PrdDCode	NVARCHAR(100),
		PrdName		NVARCHAR(100),
		OrderNo		NVARCHAR(100),
		Priority	INT,
		PriorityText	NVARCHAR(50),
		TotalQty	NUMERIC(38,6),
		NetAvlQty	NUMERIC(38,6),
		BilledQty	NUMERIC(38,6),
		IntlPer		NUMERIC(38,6),
		IntlQty		INT
	)		
	-------------Till here --------------------
	CREATE 	TABLE #Sales
	(
		RtrId	INT,
		PrdId	INT,
		BaseQty	NUMERIC(38,0),
		SalPer	NUMERIC(38,6),
		NetAvlQty NUMERIC(38,0)
	)

	CREATE TABLE #IntlTot
	(
		RtrId	INT,
		PrdId	INT,
		SumQty	NUMERIC(38,6)
	)
	
	SET @sSql = 'INSERT INTO #TempCutOff SELECT Ord.SMId,Ord.SMName,Ord.RMId,Ord.RMName,Ord.RtrId,Ord.RtrName,Ord.PrdId,Ord.PrdDCode,	
	Ord.PrdName,Ord.OrderNo,Ord.Priority,Ord.PriorityTex,
	SUM(Ord.TotalQty) AS TotalQty,SUM(Ord.NetAvlQty) AS NetAvlQty,SUM(Ord.BilledQty) AS BilledQty,0.00 IntlPer,0 AS IntlQty
	FROM
	(SELECT OB.SMId,SM.SMName,OB.RMId,RM.RMName,OB.RtrId,RE.RtrName,OBP.PrdId,P.PrdDCode,
	P.PrdName,OBP.PrdBatId,PB.PrdBatCode,OB.OrderNo,OB.Priority,
	(CASE OB.Priority WHEN 0 THEN ''Normal'' WHEN 1 THEN ''Low'' WHEN 2 THEN ''Medium'' WHEN 3 THEN ''High'' END) AS PriorityTex,
	OBP.TotalQty,0 AS NetAvlQty,ISNULL(OBP.BilledQty,0) AS BilledQty
	FROM OrderBooking OB (NOLOCK),OrderBookingProducts OBP (NOLOCK),Salesman SM (NOLOCK),RouteMaster RM (NOLOCK),
	Retailer Re (NOLOCK),Product P (NOLOCK),ProductBatch PB (NOLOCK)
	WHERE OB.OrderNo = OBP.OrderNo And OB.SMId = SM.SMId And OB.RMId = RM.RMId And OB.RtrId = Re.RtrId And OBP.PrdId = P.PrdId
	AND OBP.PrdBatId=PB.PrdBatId AND OB.OrderNo IN (SELECT OrderNo From CutOffOrders)'
	IF @Pi_OvrSld=1
	BEGIN
	SET @sSql = @sSql +' AND OBP.PrdId IN
	(SELECT Orders.PrdId FROM
	(SELECT OBP.PrdId,OBP.PrdBatId,ISNULL(PBLC.PrdBatLcnSih-PBLC.PrdBatLcnRessih,0) AS AvlStk
	FROM ProductBatchLocation PBLC (NOLOCK) RIGHT OUTER JOIN OrderBookingProducts OBP (NOLOCK)
	ON PBLC.PrdId=OBP.PrdId AND PBLC.PrdBatId=OBP.PrdBatId
	AND PBLC.LcnId ='+CAST(@lDefLcnId AS NVARCHAR(10))+'WHERE OBP.OrderNo IN (SELECT OrderNo From CutOffOrders)) AS Prdt,
	(SELECT OBPT.PrdId,OBPT.PrdBatId,OBPT.TotalQty AS TotQty
	FROM OrderBookingProducts OBPT (NOLOCK)
	WHERE OBPT.OrderNo IN (SELECT OrderNo From CutOffOrders)
	) AS Orders
	WHERE Prdt.PrdId=Orders.PrdId AND Prdt.PrdBatId=Orders.PrdBatId AND Orders.TotQty-Prdt.AvlStk>0)'
	END
	SET @sSql = @sSql +') AS Ord GROUP BY Ord.PrdId,Ord.PrdDCode,Ord.PrdName,Ord.SMId,Ord.SMName,Ord.RMId,Ord.RMName,Ord.RtrId,Ord.RtrName,
	Ord.OrderNo,Ord.Priority,Ord.PriorityTex'
	

	IF @Pi_OrdBy = 0
	BEGIN
	SET @sSql = @sSql +' ORDER BY Ord.SMId'
	END
	ELSE IF @Pi_OrdBy = 1
	BEGIN
	SET @sSql = @sSql + ' ORDER BY Ord.RMId'
	END
	ELSE IF @Pi_OrdBy = 2
	BEGIN
	SET @sSql = @sSql + ' ORDER BY Ord.RtrId'
	END
	ELSE IF @Pi_OrdBy = 3
	BEGIN
	SET @sSql = @sSql + ' ORDER BY Ord.PrdDcode'
	END
	ELSE IF @Pi_OrdBy = 4
	BEGIN
	SET @sSql = @sSql + ' ORDER BY Ord.PrdName'
	END
	ELSE IF @Pi_OrdBy = 5
	BEGIN
	SET @sSql = @sSql + ' ORDER BY Ord.OrderNo'
	END
	EXEC (@sSql)
	

	SELECT SI.RtrId,SIP.PrdId,SUM(SIP.BaseQty) AS BaseQty,0.000000 AS SalPer,
	(PBL.PrdBatLcnSih-PBL.PrdBatLcnResSih) AS NetAvlQty
	INTO #Sales1
	FROM ProductBatchLocation PBL LEFT OUTER JOIN SalesInvoiceProduct SIP ON
	SIP.PrdBatId=PBL.PrdBatId AND SIP.PrdId=PBL.PrdId AND PBL.LcnId=@lDefLcnId
	LEFT OUTER JOIN SalesInvoice SI ON SI.SalId=SIP.SalId AND SI.SalInvDate BETWEEN @Pi_FromDate AND @Pi_ToDate AND SI.DlvSts IN (4,5)
	GROUP BY SI.RtrId,SIP.PrdId,PBL.PrdBatLcnSih,PBL.PrdBatLcnResSih  	

	INSERT INTO #Sales SELECT DISTINCT S.*
	FROM #Sales1 S
	INNER JOIN #TempCutOff T ON T.RtrId=S.RtrId AND T.PrdId=S.PrdId
	WHERE S.RtrId>0 AND S.PrdId>0 AND S.BaseQty>0

	SELECT PrdId,SUM(BaseQty) AS TotQty
	INTO #TotQty FROM #Sales GROUP BY PrdId	

	UPDATE #Sales SET SalPer=#Sales.BaseQty/#TotQty.TotQty
	FROM #TotQty
	WHERE #TotQty.PrdId=#Sales.PrdId

	UPDATE #TempCutOff SET NetAvlQty=Sa.NetAvlQty
	FROM #Sales Sa
	WHERE Sa.PrdId=#TempCutOff.PrdId

	UPDATE #TempCutOff SET BilledQty=ROUND(Sa.NetAvlQty*SalPer,0)
	FROM #Sales Sa
	WHERE Sa.RtrId=#TempCutOff.RtrId AND Sa.PrdId=#TempCutOff.PrdId

	INSERT INTO #IntlTot(RtrId,PrdId,SumQty)
	SELECT RtrId,PrdId,ISNULL(SUM(TotalQty),0) AS SumQty	
	FROM #TempCutOff
	GROUP BY RtrId,PrdId	

	UPDATE #TempCutOff SET IntlPer=TotalQty/IT.SumQty
	FROM #IntlTot IT
	WHERE #TempCutOff.RtrId=IT.RtrId AND #TempCutOff.PrdId=IT.PrdId

	UPDATE #TempCutOff SET IntlQty=ROUND(BilledQty*IntlPer,0)

	SELECT SMId,SMName,RMId,RMName,RtrId,RtrName,PrdId,PrdDCode,PrdName,OrderNo,
		Priority,PriorityText,TotalQty,NetAvlQty,IntlQty AS BilledQty	
	FROM #TempCutOff
END
GO
DELETE FROM CustomUpDownload WHERE Module='GST Invoice Correction'
INSERT INTO CustomUpDownload(SlNo,SeqNo,Module,Screen,ExportFnName,ImportProcName,
ParkTable,ValidateProcName,TranType,UpDownload,MandatoryFile)
SELECT 162,1,'GST Invoice Correction','GST Invoice Correction','Proc_Cs2Cn_GSTInvoiceNumberCorrection','','Cs2Cn_Prk_GSTInvoiceNumberCorrection','','Transaction','Upload',1
GO
DELETE FROM Tbl_UploadIntegration WHERE ProcessName='GST Invoice Correction'
INSERT INTO Tbl_UploadIntegration(SequenceNo,ProcessName,FolderName,PrkTableName,CreatedDate)
SELECT 62,'GST Invoice Correction','GST Invoice Correction','Cs2Cn_Prk_GSTInvoiceNumberCorrection',GETDATE()
UPDATE UtilityProcess SET VersionId = '3.1.0.18' WHERE ProcId = 1 AND ProcessName = 'Core Stocky.Exe'
GO
DELETE FROM AppTitle
INSERT INTO AppTitle (TitleName,SynVersion)
SELECT 'Core Stocky 3.1.0.18',440
GO
IF NOT EXISTS (SELECT * FROM Hotfixlog WHERE fixid = 441)
INSERT INTO Hotfixlog(fixid,fixtype,releasedon,fixedon,fixedby,errorsfixed) 
VALUES(441,'D','2019-07-25',GETDATE(),1,'Core Stocky Service Pack 441')
GO