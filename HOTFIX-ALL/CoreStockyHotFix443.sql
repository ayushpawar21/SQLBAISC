--[Stocky HotFix Version]=443
DELETE FROM Versioncontrol WHERE Hotfixid='443'
INSERT INTO VersionControl(HotFixId,VersionNo,FixType,FixedOn,HotFixReleasedOn,VersionReleasedOn,ReplacedOn,ChangesDone) 
VALUES('443','3.1.0.21','D','2020-08-06','2020-08-06','2020-08-06',CONVERT(VARCHAR(11),GETDATE()),'Product Version-Major: Product NOV 2019-2020')
GO
/*
PARCS202100003 --> New and existing Retailer  category selection only GT in Retailer Master Module	
PARCS202100005 --> After Saving Debit note Top sheet , Sync Should Start in Sehyog to Upload the Data . (PDF file not found in report)	PARCS202100004
					Route change and Frequency change should allow in ASM Login.	
PARCS202100006 --> "It is observed , Sync is stuck in Few Process During Sync many Time . Please Find the Process name . 
					1) Upload Sales Hierarchy 					2) Retailer Re-upload New 					3) Validation in Product Batch 		4) RDBN Trace	
PARCS202100008 --> Route Bulk Upload any modification in route Master	
PARCS202100009 --> Salesman Bulk Upload any modification in Salesman master	
PARCS202100010 --> In the sampling part of issue below, edit and delete throws error while doing this during month end. 	
PARCS202100016 --> Chain Wise Bill wise report "Channel Name " and "LCTR" columns to be added in Core stocky and console. Same should replicated in Upload Process in Console reports	PARCS202100012
					Online Aggregator Change Request	
PARCS202100018 --> Utilization split up Channel,Group, Product: Brand,PriceSlot,Flavor level	
PARCS202100017 --> Data not available in salesinvoice Product	
PARCS202100024 --> Login issue when distributor not done sync from past two days. A message will show when the sync is not done for two days. If they click on ok the application is getting closed. Need to be fixed	PARCS202100023
					Circular No Saving as Integer value	
			   -->  SD.Ini File Issue	
			   --> Database Recovery Utility	
			   --> SQL Server Start Utility	
*/
--Added by Deepan
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE NAME='RtrLandLine' AND id = OBJECT_ID('RETAILER'))
BEGIN
ALTER TABLE Retailer ADD  RtrLandLine NVARCHAR(50) DEFAULT ''
END
GO
UPDATE RETAILER SET RTRLANDLINE ='' WHERE RtrLandLine IS NULL
GO
UPDATE Configuration SET Status =1 WHERE ModuleId ='RET26'
GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE NAME='Retailer' AND id = OBJECT_ID('ReasonMaster'))
BEGIN
	ALTER TABLE ReasonMaster ADD Retailer TINYINT DEFAULT 0
END
GO
UPDATE ReasonMaster SET Retailer=1 WHERE Retailer IS NULL
GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE NAME='Reason' AND id = OBJECT_ID('RETAILER'))
BEGIN
ALTER TABLE Retailer ADD  Reason INT DEFAULT 0
END
GO
UPDATE Retailer SET Reason=0 WHERE Reason IS NULL
GO
IF NOT EXISTS(SELECT 'X' FROM SYSCOLUMNS A INNER JOIN SYSOBJECTS B ON A.ID=B.ID 
WHERE B.XTYPE='U' AND A.name='RtrCodeUserInput' AND B.name='Retailer')
BEGIN
	ALTER TABLE Retailer ADD RtrCodeUserInput Varchar(100) DEFAULT '' WITH VALUES
END
GO
UPDATE Retailer SET RtrCodeUserInput=RtrCode WHERE LEN(ISNULL(RtrCodeUserInput,''))=0
GO
IF NOT EXISTS (SELECT RtrCodeUserInput,COUNT(RtrCodeUserInput) FROM Retailer (NOLOCK) 
GROUP BY RtrCodeUserInput HAVING COUNT(RtrCodeUserInput)>1)
BEGIN
	IF NOT  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Retailer]') AND name = N'UK_Retailer_RtrCodeUserInput')
	BEGIN
		ALTER TABLE Retailer  ADD CONSTRAINT UK_Retailer_RtrCodeUserInput UNIQUE(RtrCodeUserInput)
	END
END
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME = 'ContractPricingAttributes' AND TYPE='U')
BEGIN
CREATE TABLE ContractPricingAttributes
(
	[ContractId] [int] NULL,
	[AttrType] [int] NULL,
	[Attrid] [int] NULL,
	[AuthDate] [datetime] NULL
) 
END
GO
--Till Here
--Added by Mary
--PARCS202100003
IF EXISTS (SELECT * FROM Sysobjects Where name='FN_ReturnRetailerCategoryCompany' and XTYPE IN ('TF','FN'))
DROP FUNCTION FN_ReturnRetailerCategoryCompany
GO
--SELECT * FROM DBO.FN_ReturnRetailerCategoryCompany()
CREATE FUNCTION [dbo].[FN_ReturnRetailerCategoryCompany]()
RETURNS @ReturnRetailerCategoryLevels TABLE
(
	CmpId INT,
	CmpName NVARCHAR(200),
	CtgLevelId INT 
)
AS
/***************************************************************************************************************************
* FUNCTION: FN_ReturnRetailerCategoryCompany
* PURPOSE: Return Retailer Category levels
* NOTES:
* CREATED:  
* DATE			AUTHOR				USERSTORYID		CR/BZ	DESCRIPTION
---------------------------------------------------------------------------------------------------------------------------
* 18-04-2020   Mary Subashini.S		PARCS202100003		  CR    New and existing Retailer  category selection only GT in Retailer Master Module
************************************************************************************************************************************/
BEGIN
	INSERT INTO @ReturnRetailerCategoryLevels(CmpId,CmpName,CtgLevelId)
	SELECT A.CmpId, A.CmpName,ISNULL(MIN(B.CtgLevelId),0) AS CtgLevelId
		FROM Company A  (NOLOCK) 
		LEFT OUTER JOIN RetailerCategoryLevel B  (NOLOCK) 
        ON A.CmpId = B.CmpId WHERE A.CmpId<>0 GROUP BY A.CmpId, A.CmpName 
        ORDER BY A.CmpId 
RETURN
END
GO
IF EXISTS (SELECT * FROM Sysobjects Where name='FN_ReturnRetailerCategoryMinMax' and XTYPE IN ('TF','FN'))
DROP FUNCTION FN_ReturnRetailerCategoryMinMax
GO
--SELECT * FROM DBO.FN_ReturnRetailerCategoryMinMax(1)
CREATE FUNCTION [dbo].[FN_ReturnRetailerCategoryMinMax](@CmpId AS INT)
RETURNS @ReturnRetailerCategoryMinMax TABLE
(
	MinCtgLevelId INT,
	MaxCtgLevelId INT 
)
AS
/***************************************************************************************************************************
* FUNCTION: FN_ReturnRetailerCategoryCompany
* PURPOSE: Return Retailer Category levels
* NOTES:
* CREATED:  
* DATE			AUTHOR				USERSTORYID		CR/BZ	DESCRIPTION
---------------------------------------------------------------------------------------------------------------------------
* 18-04-2020   Mary Subashini.S		PARCS202100003		  CR    New and existing Retailer  category selection only GT in Retailer Master Module
************************************************************************************************************************************/
BEGIN
	INSERT INTO @ReturnRetailerCategoryMinMax(MinCtgLevelId,MaxCtgLevelId)
	
	SELECT MIN(CtgLevelId) AS MinCtgLevelId,MAX(CtgLevelId) AS MaxCtgLevelId 
    FROM RetailerCategoryLevel Where CmpId=@CmpId
    
RETURN
END
GO
IF EXISTS (SELECT * FROM Sysobjects Where name='FN_ReturnRetailerCategoryFirstLevel' and XTYPE IN ('TF','FN'))
DROP FUNCTION FN_ReturnRetailerCategoryFirstLevel
GO
--SELECT * FROM DBO.FN_ReturnRetailerCategoryFirstLevel(1)
CREATE FUNCTION [dbo].[FN_ReturnRetailerCategoryFirstLevel](@MinCatId AS INT)
RETURNS @ReturnRetailerCategoryFirstLevel TABLE
(
	CtgMainId INT,
	CtgLinkId INT,
	CtgLevelId INT,
	CtgLinkCode NVARCHAR(500),
	CtgName NVARCHAR(200),
	CmpId INT ,
	RtrClassId INT,
	ValueClassName NVARCHAR(200) 
)
AS
/***************************************************************************************************************************
* FUNCTION: FN_ReturnRetailerCategoryFirstLevel
* PURPOSE: Return Retailer Category levels -First Level
* NOTES:
* CREATED:  
* DATE			AUTHOR				USERSTORYID		CR/BZ	DESCRIPTION
---------------------------------------------------------------------------------------------------------------------------
* 18-04-2020   Mary Subashini.S		PARCS202100003		  CR    New and existing Retailer  category selection only GT in Retailer Master Module
************************************************************************************************************************************/
BEGIN
	INSERT INTO @ReturnRetailerCategoryFirstLevel(CtgMainId,CtgLinkId,CtgLevelId,CtgLinkCode,CtgName,CmpId,RtrClassId,ValueClassName)
	SELECT A.CtgMainId, A.CtgLinkId, A.CtgLevelId,A.CtgLinkCode,A.CtgName,B.CmpId,0 AS RtrClassId,'' AS ValueClassName 
	FROM RetailerCategory A (NOLOCK) 
	LEFT OUTER JOIN RetailerCategoryLevel B (NOLOCK)  ON  B.CtgLevelId = A.CtgLevelId 
	WHERE A.CtgLevelId = @MinCatId AND A.CtgCode='GT'
 
RETURN
END
GO
IF EXISTS (SELECT * FROM Sysobjects Where name='FN_ReturnRetailerCategoryChildNodes' and XTYPE IN ('TF','FN'))
DROP FUNCTION FN_ReturnRetailerCategoryChildNodes
GO
CREATE FUNCTION [dbo].[FN_ReturnRetailerCategoryChildNodes](@CtgLinkId AS INT,@CtgLevelId AS INT)
RETURNS @ReturnRetailerCategoryChildNodes TABLE
(
	CtgMainId INT,
	CtgLinkId INT,
	CtgLevelId INT,
	CtgLinkCode NVARCHAR(500),
	CtgName NVARCHAR(200),
	CmpId INT ,
	RtrClassId INT 
)
AS
/***************************************************************************************************************************
* FUNCTION: FN_ReturnRetailerCategoryChildNodes
* PURPOSE: Return Retailer Category levels -Child Nodes
* NOTES:
* CREATED:  
* DATE			AUTHOR				USERSTORYID		CR/BZ	DESCRIPTION
---------------------------------------------------------------------------------------------------------------------------
* 18-04-2020   Mary Subashini.S		PARCS202100003		  CR    New and existing Retailer  category selection only GT in Retailer Master Module
************************************************************************************************************************************/
BEGIN
	INSERT INTO @ReturnRetailerCategoryChildNodes(CtgMainId,CtgLinkId,CtgLevelId,CtgLinkCode,CtgName,CmpId,RtrClassId)
	SELECT A.CtgMainId, A.CtgLinkId, A.CtgLevelId,A.CtgLinkCode, A.CtgName,B.CmpId,0 RtrClassId 
	FROM RetailerCategory A  (NOLOCK) 
	LEFT OUTER JOIN RetailerCategoryLevel B (NOLOCK)  ON  B.CtgLevelId = A.CtgLevelId  
	WHERE A.CtgLinkId = @CtgLinkId AND A.CtgLevelId =@CtgLevelId+1
	AND A.CtgCode NOT IN('FW','OLC','CAF','VSL','ONC','ORC','SSOGT',
	'DRC','SRV','Sub-WS','FACT6','SSO1.5','SSO2.25','SSO-3','OTRGT','SS','HRC',
	'HL_15','HL_17','HL_18','HL_20','HL_22','HL_25','HL_28','HL_30','HL_16','HL_19',
	'HL_21','HL_23','HL_24','HL_26','HL_40','AIRPORT','HL_5','HL_7','HL_9','HL_12',
	'HL_13','HL_10','HL_8','MTSSO SA','HL_6','SWS(GOA)','USD','Rai-ins')
RETURN
END
GO
IF EXISTS (SELECT * FROM Sysobjects Where name='FN_ReturnRetailerCategoryClassNodes' and XTYPE IN ('TF','FN'))
DROP FUNCTION FN_ReturnRetailerCategoryClassNodes
GO
--SELECT * FROM DBO.FN_ReturnRetailerCategoryClassNodes(4)
CREATE FUNCTION [dbo].[FN_ReturnRetailerCategoryClassNodes](@CtgMainId AS INT)
RETURNS @ReturnRetailerCategoryClassNodes TABLE
(
	RtrClassId INT,
	ValueClassName NVARCHAR(100),
	CtgMainId NVARCHAR(200),
	CtgLinkId INT ,
	CtgLevelId INT ,
	CtgLinkCode NVARCHAR(500), 
	CtgCode NVARCHAR(200), 
	CtgName NVARCHAR(200),
	CtgLevelId1 INT ,
	CtgLevelName NVARCHAR(100),
	CmpId INT,
	CmpName NVARCHAR(100)
)
AS
/***************************************************************************************************************************
* FUNCTION: FN_ReturnRetailerCategoryChildNodes
* PURPOSE: Return Retailer Category levels -Value Class Nodes
* NOTES:
* CREATED:  
* DATE			AUTHOR				USERSTORYID		CR/BZ	DESCRIPTION
---------------------------------------------------------------------------------------------------------------------------
* 18-04-2020   Mary Subashini.S		PARCS202100003		  CR    New and existing Retailer  category selection only GT in Retailer Master Module
************************************************************************************************************************************/
BEGIN
	INSERT INTO @ReturnRetailerCategoryClassNodes(RtrClassId,ValueClassName,CtgMainId,CtgLinkId,CtgLevelId,CtgLinkCode,
	CtgCode,CtgName,CtgLevelId1,CtgLevelName,CmpId,CmpName)
	SELECT A.RtrClassId,A.ValueClassName,B.CtgMainId,B.CtgLinkId,B.CtgLevelId,B.CtgLinkCode,B.CtgCode,B.CtgName,
	C.CtgLevelId,C.CtgLevelName,C.CmpId,D.CmpName 
	FROM RetailerValueClass A (NOLOCK),RetailerCategory B (NOLOCK),
		RetailerCategoryLevel C (NOLOCK),Company D  (NOLOCK)
	WHERE A.CtgMainId=B.CtgMainId AND B.CtgLevelId=C.CtgLevelId 
	AND C.CmpId=D.CmpId AND B.CtgMainId=@CtgMainId
 
RETURN
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Fn_ReturnToBloackRetailerColumns' AND TYPE='Fn')
DROP FUNCTION Fn_ReturnToBloackRetailerColumns
GO
--SELECT DBO.Fn_ReturnToBloackRetailerColumns(79,0,'NewSalesman',1,2) AS Validate
CREATE FUNCTION Fn_ReturnToBloackRetailerColumns(@TransId	INT,@RefId		INT,@ColumnName	VARCHAR(100),@Mode AS INT, @UsrId	INT)
RETURNS VARCHAR(100)
AS
/********************************************************************************************************************** 
* FUNCTION  :	 Fn_ReturnToBloackRetailerColumns  
* PURPOSE  :	 To Validate Columns to Edit
* CREATED BY :	 S.MOORTHI  
* CREATED DATE : 24/06/2019  
* MODIFIED  
* DATE        AUTHOR   CR/BZ	    USER STORY ID		DESCRIPTION           
-----------------------------------------------------------------------        
 26/06/2019	 S.Moorthi	  CR		CRCRSTPAR0071		Salesman and Route master access level changes in user login
 25-07-2019  Lakshman M   SR        ILCRSTPAR5307       userlogin retailer route and value class edit valiation included.
 20-05-2020	 MOHANA	S	  SR		PARCS202100005		SALES ROUTE CHANGE ALLOWED FOR ASM USER ALSO
 23-06-2020	 MOHANA	S	  SR		PARCS202100037		SMCODE CHANGE NOT ALLOWED FOR ASM USER ALSO(UAT CHANGE)
***********************************************************************************************************************/ 
BEGIN
DECLARE @ReturMsg AS VARCHAR(1000)
SET @ReturMsg=''
DECLARE @DisplayMsg AS VARCHAR(100)
SET @DisplayMsg=''
	
	IF @UsrId<>1000 ---1000 AS ETL
	BEGIN	
		IF NOT EXISTS(SELECT * FROM Users WHERE UserId=@UsrId and UPPER(UserName) in ('SA','SMADMIN')) --PARCS202100005
		BEGIN
			IF @TransId=79 AND @Mode=2
			BEGIN
				IF NOT EXISTS(SELECT * FROM Users WHERE UserId=@UsrId and UPPER(UserName) in ('ASM'))
				BEGIN
					IF @ColumnName IN ('DlvRMId','SalesRMIdAdd','Frequency','SalesRMIdRemove')  -- Frequency UAT ISSUE
					BEGIN
						SET @ReturMsg='Access Denied'
					END
				END				
			END
			
			IF @TransId=79 AND @Mode=2
			BEGIN 
					IF @ColumnName IN ('ValueClassAdd','ValueClassRemove') 
					BEGIN
						SET @ReturMsg='Access Denied'
					END 		
			END
		END
			

			IF @TransId=68
			BEGIN
				IF NOT EXISTS(SELECT * FROM Users WHERE UserId=@UsrId and UPPER(UserName) in ('SA','SMADMIN','ASM'))
				BEGIN
					IF @ColumnName IN ('NewSalesman') AND @Mode=1
					BEGIN
						SET @ReturMsg='Access Denied'
					END
				
					IF @ColumnName IN ('RouteRemove','RouteAdd') AND @Mode=2
					BEGIN
						SET @ReturMsg='Access Denied'
					END	
				END		
					IF @ColumnName IN ('SMCODE') AND @Mode=2
					BEGIN
						SET @ReturMsg='Access Denied'
					END	
			END
			
			
			IF @TransId=78 AND @Mode=2
			BEGIN
				IF NOT EXISTS(SELECT * FROM Users WHERE UserId=@UsrId and UPPER(UserName) in ('SA','SMADMIN','ASM'))
				BEGIN
					IF @ColumnName IN ('FraDays') 
					BEGIN
						SET @ReturMsg='Access Denied'
					END
				END
			END
			
			IF @TransId=78 AND @Mode=1
			BEGIN
				IF NOT EXISTS(SELECT * FROM Users WHERE UserId=@UsrId and UPPER(UserName) in ('SA','SMADMIN','ASM'))
				BEGIN
					IF @ColumnName IN ('NewRoute') 
					BEGIN
						SET @ReturMsg='Access Denied'
					END
				END
			END
		--END

	END
	
	IF @ReturMsg<>''
	BEGIN
		RETURN @ReturMsg
	END
	
	IF EXISTS(SELECT * FROM ManualConfiguration WHERE ModuleId='RETAILERBLOCK1' AND Status=1)
	BEGIN
		
		IF @TransId=79 AND @RefId<>0
		BEGIN
			----------- added by lakshman M Dated ON 25-07-2019 PMS ID: ILCRSTPAR5307
				IF @ColumnName IN ('RtrName','RtrStatus','ValueClassAdd','ValueClassRemove','Geography','GeographyLevel') AND @Mode<>1 AND @usrid <>(SELECT userid FROM Users WHERE UserId=@UsrId and UPPER(UserName)  NOT IN ('SA','SMADMIN'))
				BEGIN				
					SET @ReturMsg='Access Denied,Can''''t be modify in locally'
				END
			--------------- Till here -------------------
		END
		IF @TransId=68 AND @RefId<>0
		BEGIN
			IF NOT EXISTS(SELECT * FROM Users WHERE UserId=@UsrId and UPPER(UserName) in ('SA','SMADMIN','ASM'))
			BEGIN
			----------- added by lakshman M Dated ON 25-07-2019 PMS ID: ILCRSTPAR5307
				IF @ColumnName IN ('RtrName','RtrStatus','ValueClassAdd','ValueClassRemove','Geography','GeographyLevel') AND @Mode<>1 AND @usrid <>(SELECT userid FROM Users WHERE UserId=@UsrId and UPPER(UserName)  NOT IN ('SA','SMADMIN','ASM'))
				BEGIN				
					SET @ReturMsg='Access Denied,Can''''t be modify in locally'
				END
			END
			--------------- Till here -------------------
		END
		IF @TransId=227
		BEGIN
			IF @ColumnName IN ('NewChangeReq','LoadRetailer') AND @Mode<>1
			BEGIN				
				SET @ReturMsg='Retailer Classification details can not be modify in locally '
			END	
		END
	END
RETURN @ReturMsg
END
GO
IF EXISTS(SELECT 'X' FROM SYSOBJECTS WHERE XTYPE='P' AND NAME='Proc_ValidateRetailerValueClassMap')
DROP PROCEDURE Proc_ValidateRetailerValueClassMap
GO
CREATE PROCEDURE [Proc_ValidateRetailerValueClassMap]
(
	@Po_ErrNo INT OUTPUT
)
AS
/********************************************************************************************
* PROCEDURE	: Proc_ValidateRetailerValueClassMap
* PURPOSE	: To Insert and Update records  from xml file in the Table RetailerValueClassMap 
* CREATED	: MarySubashini.S
* CREATED DATE	: 13/09/2007
* MODIFIED 
  * DATE         AUTHOR				CR/BZ	   USER STORY ID   DESCRIPTION                         
*****************************************************************************************************
  2013/10/10   Sathishkumar V		CR						  Junk Characters Removed  
  10/05/2018   S.Moorthi			CR        CRCRSTPAR0001   Retailer Approval process - Manual
  26/06/2019   S.Moorthi			CR		  CRCRSTPAR0071	  Salesman and Route master access level changes in user login
  18/04/2020   Mary Subashini.S		CR        PARCS202100003  New and existing Retailer  category selection only GT in Retailer Master Module
  24/07/2020   Murugan.R			CR        PARCS202100043  Retailer Code Auto Generate.
***********************************************************************************************/ 
SET NOCOUNT ON
BEGIN
	DECLARE @RetailerCode AS NVARCHAR(100)
	DECLARE @ValueClassCode AS NVARCHAR(100)
	DECLARE @CtgCode AS NVARCHAR(100)
	DECLARE @RtrId AS INT
	DECLARE @RtrValueClassId AS INT
	DECLARE @Taction AS INT
	DECLARE @Tabname AS NVARCHAR(100)
	DECLARE @TransType AS INT 
	DECLARE @SelectionType AS NVARCHAR(100)
	DECLARE @ErrDesc AS NVARCHAR(1000)
	DECLARE @sSql AS NVARCHAR(4000)
	DECLARE @CtgMainId AS NVARCHAR(100)
	DECLARE @CmpId AS NVARCHAR(100)
	
	SET @Taction=1
	SET @Po_ErrNo=0
	SET @TransType=1
	SET @Tabname='ETL_Prk_RetailerValueClassMap'
	
	DECLARE @AutoRtrCodeConfig AS TINYINT
	SET @AutoRtrCodeConfig=0
	IF EXISTS(SELECT 'X' FROM Configuration (NOLOCK) where ModuleId='RET26' and Status=1)
	BEGIN
		SET @AutoRtrCodeConfig=1
	END
	
	DECLARE Cur_RetailerValueClassMap CURSOR 
	FOR SELECT dbo.Fn_Removejunk(ISNULL([Retailer Code],'')),dbo.Fn_Removejunk(ISNULL([Value Class Code],'')),
	ISNULL([CateGOry Level Value],''),ISNULL([Selection Type],'')
	FROM ETL_Prk_RetailerValueClassMap WITH(NOLOCK) ORDER BY [Retailer Code]
	OPEN Cur_RetailerValueClassMap
	FETCH NEXT FROM Cur_RetailerValueClassMap INTO @RetailerCode,@ValueClassCode,@CtgCode,@SelectionType
	WHILE @@FETCH_STATUS=0
	BEGIN	
		SET @CmpId=0
		IF @AutoRtrCodeConfig=0
		BEGIN
			IF NOT EXISTS (SELECT * FROM Retailer WHERE (RtrCode = @RetailerCode ))    
  			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Retailer Code ' + @RetailerCode + ' does not exist'  		 
				INSERT INTO Errorlog VALUES (1,@Tabname,'RetailerCode',@ErrDesc)
			END
			ELSE
			BEGIN						
				SELECT @RtrId =RtrId FROM Retailer WHERE (RtrCode = @RetailerCode)
			END
		END	
		ELSE
		BEGIN
			IF NOT EXISTS (SELECT * FROM Retailer WHERE (RtrCodeUserInput=@RetailerCode))    
  			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Retailer Code ' + @RetailerCode + ' does not exist'  		 
				INSERT INTO Errorlog VALUES (1,@Tabname,'RetailerCode',@ErrDesc)
			END
			ELSE
			BEGIN						
				SELECT @RtrId =RtrId FROM Retailer WHERE (RtrCodeUserInput=@RetailerCode)
			END
		END	
		IF NOT EXISTS (SELECT * FROM RetailerCateGOry WHERE  CtgCode=@CtgCode)    
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Category Code ' + @CtgCode + ' does not exist'  		 
			INSERT INTO Errorlog VALUES (2,@Tabname,'Category Code',@ErrDesc)
		END
		ELSE
		BEGIN
			SELECT @CtgMainId =CtgMainId FROM RetailerCateGOry WHERE CtgCode=@CtgCode
			
			--PARCS202100003
			IF NOT EXISTS (
					SELECT DISTINCT D.CtgMainId FROM RetailerCategory A
					INNER JOIN RetailerCategory D  ON
					D.CtgLinkCode LIKE CAST(A.CtgLinkCode AS NVARCHAR(1000)) + '%' 
					WHERE A.CtgCode='GT' AND D.CtgMainId =@CtgMainId)
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Category Code ' + @CtgCode + ' not in GT-GT Category Only allowed for Retailer'  		 
				INSERT INTO Errorlog VALUES (2,@Tabname,'Category Code',@ErrDesc)
				INSERT INTO ETLRetailerErrorlog VALUES (21,@RetailerCode,@ErrDesc)
			END
				
			--PARCS202100003
	
		END
		
		IF NOT EXISTS  (SELECT * FROM RetailerValueClass WHERE  ValueClassCode=@ValueClassCode AND CtgMainId=@CtgMainId )    
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Value Class Code ' + @ValueClassCode + ' does not exist'  		 
			INSERT INTO Errorlog VALUES (3,@Tabname,'ValueClassCode',@ErrDesc)
		END
		ELSE
		BEGIN						
			SELECT @RtrValueClassId =RtrClassId,@CmpId=CmpId FROM RetailerValueClass WITH (NOLOCK)
			WHERE ValueClassCode=@ValueClassCode AND CtgMainId=@CtgMainId 
		END
		IF EXISTS (SELECT * FROM RetailerValueClassMap WHERE  RtrValueClassId=@RtrValueClassId AND RtrId=@RtrId)    
		BEGIN
			SET @Taction=2
		END
		ELSE
		BEGIN
			SET @Taction=1				
		END
		
		IF LTRIM(RTRIM(@SelectionType))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Value Class Selection Type should not be empty'  		 
			INSERT INTO Errorlog VALUES (4,@Tabname,'SelectionType',@ErrDesc)
		END
		ELSE
		BEGIN
			IF LTRIM(RTRIM(@SelectionType))='ADD' OR LTRIM(RTRIM(@SelectionType))='REDUCE'
			BEGIN
				IF LTRIM(RTRIM(@SelectionType))='ADD' 
				BEGIN
					SET @TransType=1
				END
				IF LTRIM(RTRIM(@SelectionType))='REDUCE' 
				BEGIN
					SET @TransType=2
				END
			END
			ELSE 
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Value Class Type '+@SelectionType+' is not available'  		 
				INSERT INTO Errorlog VALUES (5,@Tabname,'SelectionType',@ErrDesc)
			END
		END
		
		IF @Po_ErrNo=0
		BEGIN
			DECLARE @MSG AS VARCHAR(MAX)						
			SET @MSG=''
			SELECT @MSG=DBO.Fn_RetailerApprovalStatus(@RtrId)
			IF ISNULL(@MSG,'')<>''
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0				
				SET @ErrDesc =@MSG
				INSERT INTO Errorlog VALUES (20,@Tabname,'Status',@MSG)
			END
		END
		
		IF EXISTS(SELECT * FROM RetailerValueClassMap(NOLOCK) WHERE RtrId=@RtrId)
		BEGIN
			DECLARE @ReturnMsg AS VARCHAR(100)
			SET @ReturnMsg=(SELECT DBO.Fn_ReturnToBloackRetailerColumns(79,@RtrId,'ValueClassAdd',2,1000))
			IF RTRIM(LTRIM(@ReturnMsg))<>''
			BEGIN
				INSERT INTO Errorlog VALUES (21,@Tabname,'ValueClassAdd',@ReturnMsg)
				SET @Po_ErrNo=1
			END
		END
		
		IF @TransType=1 
		BEGIN
			IF  @Po_ErrNo=0 
			BEGIN
				DECLARE @OldCtgMainId	NUMERIC(38,0)
				DECLARE @OldCtgLevelId	NUMERIC(38,0)
				DECLARE @OldRtrClassId	NUMERIC(38,0)
				DECLARE @NewCtgMainId	NUMERIC(38,0)
				DECLARE @NewCtgLevelId	NUMERIC(38,0)
				DECLARE @NewRtrClassId	NUMERIC(38,0)
				DECLARE @RtrCnt			NUMERIC(38,0)
				SET @RtrCnt=0
				IF EXISTS(SELECT * FROM RetailerValueClassMap WHERE RtrId=@RtrId AND RtrValueClassId IN
						(SELECT RtrClassId FROM RetailerValueClass WHERE CmpId=@CmpId))
				BEGIN
			
					SELECT @OldCtgMainId=A.CtgMainId,@OldCtgLevelId=B.CtgLevelId,@OldRtrClassId=C.RtrClassId 
					FROM RetailerCateGOry A INNER JOIN RetailerCateGOryLevel B ON A.CtgLevelId=B.CtgLevelId
					INNER JOIN RetailerValueClass C ON A.CtgMainId=C.CtgMainId
					INNER JOIN RetailerValueClassMap D ON C.RtrClassId=RtrValueClassId
					WHERE D.RtrId=@RtrId
					SET @RtrCnt=1
				END
				--DELETE FROM RetailerValueClassMap WHERE RtrId=@RtrId AND RtrValueClassId=@RtrValueClassId
				--added by S.Moorthi
				DECLARE @ValueClassShift AS INT
				SET @ValueClassShift=1
				
				IF EXISTS(SELECT * FROM RetailerValueClassMap(nolock) WHERE RtrId=@RtrId)
				BEGIN
					IF NOT EXISTS(SELECT * FROM RetailerValueClassMap WHERE RtrId=@RtrId 
					AND RtrValueClassId=@RtrValueClassId)
					BEGIN
						SET @ValueClassShift=0	
					END				
				END
				
				IF @ValueClassShift=1
				BEGIN
					DELETE FROM RetailerValueClassMap WHERE RtrId=@RtrId AND RtrValueClassId IN
					(SELECT RtrClassId FROM RetailerValueClass WHERE CmpId=@CmpId)
					
					SET @sSql='DELETE FROM RetailerValueClassMap WHERE RtrId='+CAST(@RtrId AS VARCHAR(10))+
					' AND RtrValueClassId='+CAST(@RtrValueClassId AS NVARCHAR(10))
					INSERT INTO Translog(strSql1) VALUES (@sSql)
					INSERT INTO RetailerValueClassMap 
					(RtrId,RtrValueClassId,Availability,LastModBy,LastModDate,AuthId,AuthDate)
					VALUES(@RtrId,@RtrValueClassId,
					1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121))
					IF @RtrCnt=1
					BEGIN
						SELECT @OldCtgMainId=A.CtgMainId,@OldCtgLevelId=B.CtgLevelId,@OldRtrClassId=C.RtrClassId 
						FROM RetailerCateGOry A INNER JOIN RetailerCateGOryLevel B ON A.CtgLevelId=B.CtgLevelId
						INNER JOIN RetailerValueClass C ON A.CtgMainId=C.CtgMainId
						INNER JOIN RetailerValueClassMap D ON C.RtrClassId=RtrValueClassId
						WHERE D.RtrId=@RtrId
						INSERT INTO Track_RtrCateGOryandClassChange
						SELECT -4000,@RtrId,@OldCtgLevelId,@OldCtgMainId,@OldRtrClassId,@NewCtgLevelId,@NewCtgMainId, 
						@NewRtrClassId,CONVERT(NVARCHAR(10),GETDATE(),121),CONVERT(NVARCHAR(23),GETDATE(),121),5					
					END
				END
				ELSE
				BEGIN
					IF NOT EXISTS (SELECT DISTINCT RtrId FROM RetailerApprovalStatus WHERE RtrId = @RtrId)
					BEGIN
						INSERT INTO RetailerApprovalStatus(RtrId,RtrCtgId,RtrClassId,
						RtrStatus,RtrName,Geoid,Upload,Mode,ModDate)
						SELECT @RtrId,0,@RtrValueClassId,2,'',0,0,2,GETDATE()
					END
					ELSE
					BEGIN
						UPDATE RetailerApprovalStatus SET RtrCtgId = 0,RtrClassId = @RtrValueClassId,Mode = 2
						WHERE RtrId = @RtrId
					END
				END
				
				SET @sSql='INSERT INTO RetailerValueClassMap 
				(RtrId,RtrValueClassId,Availability,LastModBy,LastModDate,AuthId,AuthDate)
				VALUES('+CAST(@RtrId AS VARCHAR(10))+','+CAST(@RtrValueClassId AS VARCHAR(10))+', 
				1,1,'''+CONVERT(NVARCHAR(10),GETDATE(),121)+''',1,'''+CONVERT(NVARCHAR(10),GETDATE(),121)+''')'
				INSERT INTO Translog(strSql1) VALUES (@sSql)
			END
		END
			
		IF @TransType=2 
		BEGIN
			IF @Po_ErrNo=0
			BEGIN
				DELETE FROM RetailerValueClassMap WHERE RtrId=@RtrId AND RtrValueClassId=@RtrValueClassId
				SET @sSql='DELETE FROM RetailerValueClassMap WHERE RtrId='+CAST(@RtrId AS VARCHAR(10))+' AND RtrValueClassId='+CAST(@RtrValueClassId AS VARCHAR(10))+''
				INSERT INTO Translog(strSql1) VALUES (@sSql)
			END
		END
		
		FETCH NEXT FROM Cur_RetailerValueClassMap INTO @RetailerCode,@ValueClassCode,@CtgCode,@SelectionType		
	END
	CLOSE Cur_RetailerValueClassMap
	DEALLOCATE Cur_RetailerValueClassMap
	--->Added By Nanda on 04/03/2010
	IF EXISTS(SELECT * FROM Retailer WHERE RtrId NOT IN (SELECT DISTINCT RtrId FROM RetailerValueClassMap))
	BEGIN		
		INSERT INTO Errorlog(SlNo,TableName,FieldName,ErrDesc) 
		SELECT 100,'Retailer','Value Class','Value Class is not mapped correctly for Retailer Code:'+RtrCode
		FROM Retailer WHERE RtrId NOT IN (SELECT DISTINCT RtrId FROM RetailerValueClassMap)
		DELETE FROM CoaMaster WHERE CoaId IN (SELECT CoaId FROM Retailer WHERE RtrId NOT IN (SELECT RtrId FROM RetailerValueClassMap))
		DELETE FROM Retailer WHERE RtrId NOT IN (SELECT DISTINCT RtrId FROM RetailerValueClassMap)
		SET @sSql='DELETE FROM CoaMaster WHERE CoaId IN (SELECT CoaId FROM Retailer WHERE RtrId NOT IN (SELECT RtrId FROM RetailerValueClassMap))'
		INSERT INTO Translog(strSql1) VALUES (@sSql)
		SET @sSql='DELETE FROM Retailer WHERE RtrId NOT IN (SELECT DISTINCT RtrId FROM RetailerValueClassMap)'
		INSERT INTO Translog(strSql1) VALUES (@sSql)
	END
	--->Till Here
	RETURN
END
GO
--Added by Mohana.S
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_Cs2Cn_RDBN_Trace' AND TYPE='P')
DROP PROCEDURE Proc_Cs2Cn_RDBN_Trace
GO
--EXEC Proc_Cs2Cn_RDBN_Trace 0,''
CREATE PROCEDURE Proc_Cs2Cn_RDBN_Trace  
(
	@Po_ErrNo INT OUTPUT ,
	@serverdate datetime  
)
AS
/***********************************************************  
* PROCEDURE		: Proc_Cs2Cn_RDBN_Trace  
* PURPOSE		: To Insert the records From Corestocky  to Proc_Cs2Cn_RDBN_Trace for Trace
* CREATED BY	: Mohana
* USER STORY ID :  ILCRSTPAR3915
* DATE       AUTHOR     CR/BZ	USER STORY ID           DESCRIPTION                         
***************************************************************************************************    
29-04-2020	MOHANA		 CR		PARCS202100006		 Optimization Done
*************************************************************/  
SET NOCOUNT ON  
BEGIN  
		DECLARE @DistCode VARCHAR(100)
		DECLARE @syncid INT
		SELECT  @DistCode  = DistributorCode FROM distributor
		SELECT  @syncid =syncid from SyncStatus
		DECLARE @Fromdate DATETIME
		DECLARE @Todate DATETIME
		DELETE FROM Cs2cn_Prk_RDBNTrace WHERE UPLOADFLAG='Y'
		
		SELECT @Fromdate = DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())-2, 0)  -- INSTEAD OF 2019-01-01 CHANGED FOR 2 MONTH DATA
		SELECT @Todate = CONVERT(VARCHAR(10),GETDATE(),121)

IF EXISTS (SELECT * FROM DayEndProcess WHERE ProcDesc ='RDBN_TRACE' AND  DateDiff(dd,NextUpDate,Getdate())>=1)
BEGIN
		
		CREATE TABLE #Cs2Cn_Prk_SchemeUtilizationDetails
		(
			[SlNo] [numeric](38, 0) IDENTITY(1,1) NOT NULL,
			[TransName] [nvarchar](50) NULL,
			[SchUtilizeType] [nvarchar](50) NULL,
			[CmpCode] [nvarchar](100) NULL,
			[CmpSchCode] [nvarchar](50) NULL,
			[SchCode] [nvarchar](50) NULL,
			[SchDescription] [nvarchar](200) NULL,
			[SchType] [nvarchar](50) NULL,
			[SlabId] [int] NULL,
			[TransNo] [nvarchar](50) NULL,
			[TransDate] [datetime] NULL,
			[RtrId] [int] NULL,
			[CmpRtrCode] [nvarchar](50) NULL,
			[RtrCode] [nvarchar](50) NULL,
			[BilledPrdCCode] [nvarchar](50) NULL,
			[BilledPrdBatCode] [nvarchar](50) NULL,
			[BilledQty] [int] NULL,
			[SchUtilizedAmt] [numeric](38, 6) NULL,
			[SchDiscPerc] [numeric](38, 6) NULL,
			[FreePrdCCode] [nvarchar](50) NULL,
			[FreePrdBatCode] [nvarchar](50) NULL,
			[FreeQty] [int] NULL,
			[NoOfTimes] [int] NULL	
		) 
		INSERT INTO #Cs2Cn_Prk_SchemeUtilizationDetails
	(
		TransName,SchUtilizeType,CmpCode,CmpSchCode,SchCode,SchDescription,SchType,SlabId,TransNo,TransDate,RtrId,CmpRtrCode,RtrCode,
		BilledPrdCCode,BilledPrdBatCode,BilledQty,SchUtilizedAmt,SchDiscPerc,FreePrdCCode,FreePrdBatCode,FreeQty,NoOfTimes
	)
	SELECT 'Billing','Amount',CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,
	CASE SM.SchType WHEN 1 THEN 'Quantity Based' WHEN 2 THEN 'Amount Based' WHEN 3 THEN 'Weight Based' WHEN 4 THEN 'Display' END,
	A.SlabId,B.SalInvNo,B.SalInvDate,B.RtrId,R.CmpRtrCode,R.RtrCode,
	P.PrdCCode,PB.PrdBatCode,SIP.BaseQty,(ISNULL(SUM(FlatAmount),0)+ISNULL(SUM(DiscountPerAmount),0)) AS Utilized,		
	A.DiscPer,'','',0,0
	FROM SalesInvoiceSchemeLineWise A(NOLOCK) 
	INNER JOIN SalesInvoice B(NOLOCK) ON A.SalId = B.SalId 
	INNER JOIN SchemeMaster SM(NOLOCK) ON A.Schid = SM.SchId 
	INNER JOIN Company CM(NOLOCK) ON SM.CmpId = CM.CmpId
	INNER JOIN Retailer R(NOLOCK) ON R.RtrId = B.RtrId
	INNER JOIN Product P(NOLOCK) ON A.PrdId=P.PrdId
	INNER JOIN ProductBatch PB(NOLOCK) ON PB.PrdId=P.PrdId AND A.PrdBatId=PB.PrdBatId
	INNER JOIN SalesInvoiceProduct SIP(NOLOCK) ON SIP.SalId = B.SalId AND A.SalId=SIP.SalId AND SIP.PrdId=A.PrdID AND SIP.PrdBatId=A.PrdBatId
	WHERE DlvSts in (4,5) AND CM.CmpID = 1 AND SalinvDate BETWEEN @Fromdate AND @Todate  AND (FlatAmount+DiscountPerAmount)>0
	GROUP BY CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SM.SchType,A.SlabId,B.SalInvNo,B.SalInvDate,
	B.RtrId,R.CmpRtrCode,R.RtrCode,P.PrdCCode,PB.PrdBatCode,SIP.BaseQty,A.DiscPer
	
	INSERT INTO #Cs2Cn_Prk_SchemeUtilizationDetails
	(
		TransName,SchUtilizeType,CmpCode,CmpSchCode,SchCode,SchDescription,SchType,SlabId,TransNo,TransDate,RtrId,CmpRtrCode,RtrCode,
		BilledPrdCCode,BilledPrdBatCode,BilledQty,SchUtilizedAmt,SchDiscPerc,FreePrdCCode,FreePrdBatCode,FreeQty,NoOfTimes
	)
	SELECT 'Billing','Free Product',CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,
	CASE SM.SchType WHEN 1 THEN 'Quantity Based' WHEN 2 THEN 'Amount Based' WHEN 3 THEN 'Weight Based' WHEN 4 THEN 'Display' END,
	A.SlabId,B.SalInvNo,B.SalInvDate,B.RtrId,R.CmpRtrCode,R.RtrCode,
	'Free Product','',0,ISNULL(SUM(FreeQty * D.PrdBatDetailValue),0) AS Utilized,0,
	P.PrdCCode,C.PrdBatCode,SUM(FreeQty) AS FreeQty,0
	FROM SalesInvoiceSchemeDtFreePrd A(NOLOCK) 
	INNER JOIN SalesInvoice B(NOLOCK) ON A.SalId = B.SalId
	INNER JOIN ProductBatch C (NOLOCK) ON A.FreePrdId = C.PrdId AND A.FreePrdBatId = C.PrdBatId 
	INNER JOIN ProductBatchDetails D (NOLOCK) ON C.PrdBatId = D.PrdBatId AND A.FreePriceId = D.PriceId 
	INNER JOIN BatchCreation E (NOLOCK) ON E.BatchSeqId = C.BatchSeqId AND D.SlNo = E.SlNo AND E.ClmRte = 1
	INNER JOIN SchemeMaster SM(NOLOCK) ON A.Schid = SM.SchId 
	INNER JOIN Company CM(NOLOCK) ON SM.CmpId = CM.CmpId 
	INNER JOIN Product P(NOLOCK) ON A.FreePrdId = P.PrdId
	INNER JOIN Retailer R(NOLOCK) ON R.RtrId = B.RtrId
	WHERE DlvSts in (4,5) AND CM.CmpID = 1 AND SalinvDate BETWEEN @Fromdate AND @Todate 
	GROUP BY CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SM.SchType,A.SlabId,B.SalInvNo,B.SalInvDate,
	B.RtrId,R.CmpRtrCode,R.RtrCode,P.PrdCCode,C.PrdBatCode
	
	
	INSERT INTO #Cs2Cn_Prk_SchemeUtilizationDetails
	(
		TransName,SchUtilizeType,CmpCode,CmpSchCode,SchCode,SchDescription,SchType,SlabId,TransNo,TransDate,RtrId,CmpRtrCode,RtrCode,
		BilledPrdCCode,BilledPrdBatCode,BilledQty,SchUtilizedAmt,SchDiscPerc,FreePrdCCode,FreePrdBatCode,FreeQty,NoOfTimes
	)
	SELECT 'Billing','Gift Product',CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,
	CASE SM.SchType WHEN 1 THEN 'Quantity Based' WHEN 2 THEN 'Amount Based' WHEN 3 THEN 'Weight Based' WHEN 4 THEN 'Display' END,
	A.SlabId,B.SalInvNo,B.SalInvDate,B.RtrId,R.CmpRtrCode,R.RtrCode,
	'Gift Product','',0,ISNULL(SUM(GiftQty * D.PrdBatDetailValue),0) AS Utilized,0,
	P.PrdCCode,C.PrdBatCode,SUM(GiftQty) AS GiftQty,0
	FROM SalesInvoiceSchemeDtFreePrd A 
	INNER JOIN SalesInvoice B(NOLOCK) ON A.SalId = B.SalId
	INNER JOIN ProductBatch C (NOLOCK) ON A.GiftPrdId = C.PrdId AND A.GiftPrdBatId = C.PrdBatId 
	INNER JOIN ProductBatchDetails D (NOLOCK) ON C.PrdBatId = D.PrdBatId AND A.GiftPriceId = D.PriceId 
	INNER JOIN BatchCreation E (NOLOCK) ON E.BatchSeqId = C.BatchSeqId AND D.SlNo = E.SlNo AND E.ClmRte = 1
	INNER JOIN SchemeMaster SM (NOLOCK)ON A.Schid = SM.SchId 
	INNER JOIN Company CM(NOLOCK) ON SM.CmpId = CM.CmpId 
	INNER JOIN Product P(NOLOCK) ON A.GiftPrdId = P.PrdId
	INNER JOIN Retailer R(NOLOCK) ON R.RtrId = B.RtrId
	WHERE DlvSts in (4,5) AND CM.CmpID = 1 AND SalinvDate BETWEEN @Fromdate AND @Todate 
	GROUP BY CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SM.SchType,A.SlabId,B.SalInvNo,B.SalInvDate,
	B.RtrId,R.CmpRtrCode,R.RtrCode,P.PrdCCode,C.PrdBatCode
	
	INSERT INTO #Cs2Cn_Prk_SchemeUtilizationDetails
	(
		TransName,SchUtilizeType,CmpCode,CmpSchCode,SchCode,SchDescription,SchType,SlabId,TransNo,TransDate,RtrId,CmpRtrCode,RtrCode,
		BilledPrdCCode,BilledPrdBatCode,BilledQty,SchUtilizedAmt,SchDiscPerc,FreePrdCCode,FreePrdBatCode,FreeQty,NoOfTimes
	)
	SELECT 'Billing','WDS',CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,
	CASE SM.SchType WHEN 1 THEN 'Quantity Based' WHEN 2 THEN 'Amount Based' WHEN 3 THEN 'Weight Based' WHEN 4 THEN 'Display' END,
	0,B.SalInvNo,B.SalInvDate,B.RtrId,R.CmpRtrCode,R.RtrCode,
	'','',0,ISNULL(SUM(AdjAmt),0) AS Utilized,0,'','',0,0
	FROM SalesInvoiceWindowDisplay A(NOLOCK)
	INNER JOIN SalesInvoice B(NOLOCK) ON A.SalId = B.SalId
	INNER JOIN SchemeMaster SM(NOLOCK) ON A.Schid = SM.SchId 
	INNER JOIN Company CM(NOLOCK) ON SM.CmpId = CM.CmpId
	INNER JOIN Retailer R(NOLOCK) ON R.RtrId = B.RtrId
	WHERE DlvSts in (4,5) AND CM.CmpID = 1 AND SalinvDate BETWEEN @Fromdate AND @Todate 
	GROUP BY CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SM.SchType,B.SalInvNo,B.SalInvDate,
	B.RtrId,R.CmpRtrCode,R.RtrCode
	
	INSERT INTO #Cs2Cn_Prk_SchemeUtilizationDetails
	(
		TransName,SchUtilizeType,CmpCode,CmpSchCode,SchCode,SchDescription,SchType,SlabId,TransNo,TransDate,RtrId,CmpRtrCode,RtrCode,
		BilledPrdCCode,BilledPrdBatCode,BilledQty,SchUtilizedAmt,SchDiscPerc,FreePrdCCode,FreePrdBatCode,FreeQty,NoOfTimes
	)
	SELECT 'Billing','QPS Converted Amount',CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,
	CASE SM.SchType WHEN 1 THEN 'Quantity Based' WHEN 2 THEN 'Amount Based' WHEN 3 THEN 'Weight Based' WHEN 4 THEN 'Display' END,
	A.SlabId,B.SalInvNo,B.SalInvDate,B.RtrId,R.CmpRtrCode,R.RtrCode,
	'','',0,ISNULL(SUM(A.CrNoteAmount),0) AS Utilized,0,'','',0,0
	FROM SalesInvoiceQPSSchemeAdj A (NOLOCK)
	INNER JOIN SalesInvoice B ON A.SalId = B.SalId AND Mode=1
	INNER JOIN SchemeMaster SM ON A.Schid = SM.SchId 
	INNER JOIN Company CM ON SM.CmpId = CM.CmpId 
	INNER JOIN Retailer R ON R.RtrId = B.RtrId
	WHERE DlvSts in (4,5) AND CM.CmpID = 1 AND SalinvDate BETWEEN @Fromdate AND @Todate 
	GROUP BY CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SM.SchType,A.SlabId,B.SalInvNo,B.SalInvDate,
	B.RtrId,R.CmpRtrCode,R.RtrCode
	UNION ALL
	SELECT 'Billing','QPS Converted Amount(Auto)',CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,
	CASE SM.SchType WHEN 1 THEN 'Quantity Based' WHEN 2 THEN 'Amount Based' WHEN 3 THEN 'Weight Based' WHEN 4 THEN 'Display' END,
	A.SlabId,'AutoQPSConversion' AS SalInvNo,A.LastModDate,A.RtrId,R.CmpRtrCode,R.RtrCode,
	'','',0,ISNULL(SUM(A.CrNoteAmount),0) AS Utilized,0,'','',0,0
	FROM SalesInvoiceQPSSchemeAdj A(NOLOCK) 
	INNER JOIN SchemeMaster SM ON A.Schid = SM.SchId AND Mode=2
	INNER JOIN Company CM ON SM.CmpId = CM.CmpId 
	INNER JOIN Retailer R ON R.RtrId = A.RtrId
	WHERE CM.CmpID = 1 AND A.LastModDate>=@Fromdate
	GROUP BY CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SM.SchType,A.SlabId,A.LastModDate,
	A.RtrId,R.CmpRtrCode,R.RtrCode
	
	INSERT INTO #Cs2Cn_Prk_SchemeUtilizationDetails
	(
		TransName,SchUtilizeType,CmpCode,CmpSchCode,SchCode,SchDescription,SchType,SlabId,TransNo,TransDate,RtrId,CmpRtrCode,RtrCode,
		BilledPrdCCode,BilledPrdBatCode,BilledQty,SchUtilizedAmt,SchDiscPerc,FreePrdCCode,FreePrdBatCode,FreeQty,NoOfTimes
	)
	SELECT 'Billing','Points',CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,
	CASE SM.SchType WHEN 1 THEN 'Quantity Based' WHEN 2 THEN 'Amount Based' WHEN 3 THEN 'Weight Based' WHEN 4 THEN 'Display' END,
	A.SlabId,B.SalInvNo,B.SalInvDate,B.RtrId,R.CmpRtrCode,R.RtrCode,
	P.PrdCCode,PB.PrdBatCode,SIP.BaseQty,SUM(A.Points) AS Utilized,0,'','',0,0
	FROM SalesInvoiceSchemeDtPoints A(NOLOCK) 
	INNER JOIN SalesInvoice B(NOLOCK) ON A.SalId = B.SalId 
	INNER JOIN SchemeMaster SM ON A.Schid = SM.SchId 
	INNER JOIN Company CM ON SM.CmpId = CM.CmpId
	INNER JOIN Retailer R ON R.RtrId = B.RtrId
	INNER JOIN Product P ON A.PrdId=P.PrdId
	INNER JOIN ProductBatch PB ON PB.PrdId=P.PrdId AND A.PrdBatId=PB.PrdBatId
	INNER JOIN SalesInvoiceProduct SIP ON SIP.SalId = B.SalId AND A.SalId=SIP.SalId AND SIP.PrdId=A.PrdID AND SIP.PrdBatId=A.PrdBatId
	WHERE DlvSts in (4,5) AND CM.CmpID = 1  AND SalinvDate BETWEEN @Fromdate AND @Todate  AND A.Points>0
	GROUP BY CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SM.SchType,A.SlabId,B.SalInvNo,B.SalInvDate,
	B.RtrId,R.CmpRtrCode,R.RtrCode,P.PrdCCode,PB.PrdBatCode,SIP.BaseQty 
	
	 
	INSERT INTO #Cs2Cn_Prk_SchemeUtilizationDetails
	(
		TransName,SchUtilizeType,CmpCode,CmpSchCode,SchCode,SchDescription,SchType,SlabId,TransNo,TransDate,RtrId,CmpRtrCode,RtrCode,
		BilledPrdCCode,BilledPrdBatCode,BilledQty,SchUtilizedAmt,SchDiscPerc,FreePrdCCode,FreePrdBatCode,FreeQty,NoOfTimes
	)
	SELECT 'Sales Return','Amount',CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,
	CASE SM.SchType WHEN 1 THEN 'Quantity Based' WHEN 2 THEN 'Amount Based' WHEN 3 THEN 'Weight Based' WHEN 4 THEN 'Display' END,
	A.SlabId,B.ReturnCode,B.ReturnDate,B.RtrId,R.CmpRtrCode,R.RtrCode,
	P.PrdCCode,PB.PrdBatCode,SIP.BaseQty,-1 * (ISNULL(SUM(ReturnFlatAmount),0) + ISNULL(SUM(ReturnDiscountPerAmount),0)),0,	
	'','',0,0
	FROM ReturnSchemeLineDt A(NOLOCK) 
	INNER JOIN ReturnHeader B(NOLOCK) ON A.ReturnId = B.ReturnId
	INNER JOIN SchemeMaster SM(NOLOCK) ON A.Schid = SM.SchId 
	INNER JOIN Company CM ON SM.CmpId = CM.CmpId
	INNER JOIN Retailer R ON R.RtrId = B.RtrId
	INNER JOIN Product P ON A.PrdId=P.PrdId
	INNER JOIN ProductBatch PB ON PB.PrdId=P.PrdId AND A.PrdBatId=PB.PrdBatId
	INNER JOIN ReturnProduct SIP ON SIP.ReturnId = B.ReturnId AND A.ReturnId=SIP.ReturnId AND SIP.PrdId=A.PrdId AND SIP.PrdBatId=A.PrdBatId
	WHERE B.Status = 0 AND CM.CmpID = 1 AND ReturnDate>=@Fromdate
	GROUP BY CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SM.SchType,A.SlabId,B.ReturnCode,B.ReturnDate,
	B.RtrId,R.CmpRtrCode,R.RtrCode,P.PrdCCode,PB.PrdBatCode,SIP.BaseQty
	INSERT INTO #Cs2Cn_Prk_SchemeUtilizationDetails
	(
		TransName,SchUtilizeType,CmpCode,CmpSchCode,SchCode,SchDescription,SchType,SlabId,TransNo,TransDate,RtrId,CmpRtrCode,RtrCode,
		BilledPrdCCode,BilledPrdBatCode,BilledQty,SchUtilizedAmt,SchDiscPerc,FreePrdCCode,FreePrdBatCode,FreeQty,NoOfTimes
	)
	SELECT 'Sales Return','Free Product',CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,
	CASE SM.SchType WHEN 1 THEN 'Quantity Based' WHEN 2 THEN 'Amount Based' WHEN 3 THEN 'Weight Based' WHEN 4 THEN 'Display' END,
	A.SlabId,B.ReturnCode,B.ReturnDate,B.RtrId,R.CmpRtrCode,R.RtrCode,
	'Free Product','',0,-1 * ISNULL(SUM(ReturnFreeQty * D.PrdBatDetailValue),0),0,
	P.PrdCCode,C.PrdBatCode,-1 * SUM(ReturnFreeQty),0
	FROM ReturnSchemeFreePrdDt A (NOLOCK)
	INNER JOIN ReturnHeader B (NOLOCK)ON A.ReturnId = B.ReturnId
	INNER JOIN ProductBatch C (NOLOCK) ON A.FreePrdId = C.PrdId AND A.FreePrdBatId = C.PrdBatId 
	INNER JOIN ProductBatchDetails D (NOLOCK) ON C.PrdBatId = D.PrdBatId AND A.FreePriceId = D.PriceId 
	INNER JOIN BatchCreation E (NOLOCK) ON E.BatchSeqId = C.BatchSeqId AND D.SlNo = E.SlNo AND E.ClmRte = 1
	INNER JOIN SchemeMaster SM ON A.Schid = SM.SchId 
	INNER JOIN Company CM ON SM.CmpId = CM.CmpId 
	INNER JOIN Product P ON A.FreePrdId = P.PrdId
	INNER JOIN Retailer R ON R.RtrId = B.RtrId
	WHERE B.Status = 0 AND CM.CmpID = 1 AND ReturnDate>=@Fromdate
	GROUP BY CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SM.SchType,A.SlabId,B.ReturnCode,B.ReturnDate,
	B.RtrId,R.CmpRtrCode,R.RtrCode,P.PrdCCode,C.PrdBatCode
	
	INSERT INTO #Cs2Cn_Prk_SchemeUtilizationDetails
	(
		TransName,SchUtilizeType,CmpCode,CmpSchCode,SchCode,SchDescription,SchType,SlabId,TransNo,TransDate,RtrId,CmpRtrCode,RtrCode,
		BilledPrdCCode,BilledPrdBatCode,BilledQty,SchUtilizedAmt,SchDiscPerc,FreePrdCCode,FreePrdBatCode,FreeQty,NoOfTimes
	)
	SELECT 'Sales Return','Gift Product',CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,
	CASE SM.SchType WHEN 1 THEN 'Quantity Based' WHEN 2 THEN 'Amount Based' WHEN 3 THEN 'Weight Based' WHEN 4 THEN 'Display' END,
	A.SlabId,B.ReturnCode,B.ReturnDate,B.RtrId,R.CmpRtrCode,R.RtrCode,
	'Gift Product','',0,-1 * ISNULL(SUM(ReturnGiftQty * D.PrdBatDetailValue),0),0,
	P.PrdCCode,C.PrdBatCode,-1 * SUM(ReturnGiftQty),0
	FROM ReturnSchemeFreePrdDt A (NOLOCK)
	INNER JOIN ReturnHeader B(NOLOCK) ON A.ReturnId = B.ReturnId
	INNER JOIN ProductBatch C (NOLOCK) ON A.GiftPrdId = C.PrdId AND A.GiftPrdBatId = C.PrdBatId 
	INNER JOIN ProductBatchDetails D (NOLOCK) ON C.PrdBatId = D.PrdBatId AND A.GiftPriceId = D.PriceId 
	INNER JOIN BatchCreation E (NOLOCK) ON E.BatchSeqId = C.BatchSeqId AND D.SlNo = E.SlNo AND E.ClmRte = 1
	INNER JOIN SchemeMaster SM ON A.Schid = SM.SchId 
	INNER JOIN Company CM ON SM.CmpId = CM.CmpId 
	INNER JOIN Product P ON A.GiftPrdId = P.PrdId 
	INNER JOIN Retailer R ON R.RtrId = B.RtrId
	WHERE B.Status = 0 AND CM.CmpID = 1 AND ReturnDate>=@Fromdate
	GROUP BY CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SM.SchType,A.SlabId,B.ReturnCode,B.ReturnDate,
	B.RtrId,R.CmpRtrCode,R.RtrCode,P.PrdCCode,C.PrdBatCode
	
	INSERT INTO #Cs2Cn_Prk_SchemeUtilizationDetails
	(
		TransName,SchUtilizeType,CmpCode,CmpSchCode,SchCode,SchDescription,SchType,SlabId,TransNo,TransDate,RtrId,CmpRtrCode,RtrCode,
		BilledPrdCCode,BilledPrdBatCode,BilledQty,SchUtilizedAmt,SchDiscPerc,FreePrdCCode,FreePrdBatCode,FreeQty,NoOfTimes
	)
	SELECT 'Sales Return','Points',CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,
	CASE SM.SchType WHEN 1 THEN 'Quantity Based' WHEN 2 THEN 'Amount Based' WHEN 3 THEN 'Weight Based' WHEN 4 THEN 'Display' END,
	A.SlabId,B.ReturnCode,B.ReturnDate,B.RtrId,R.CmpRtrCode,R.RtrCode,
	P.PrdCCode,PB.PrdBatCode,SIP.BaseQty,-1 * SUM(ReturnPoints),0,'','',0,0
	FROM ReturnSchemePointsDt A (NOLOCK)
	INNER JOIN ReturnHeader B(NOLOCK) ON A.ReturnId = B.ReturnId
	INNER JOIN SchemeMaster SM ON A.Schid = SM.SchId 
	INNER JOIN Company CM ON SM.CmpId = CM.CmpId
	INNER JOIN Retailer R ON R.RtrId = B.RtrId
	INNER JOIN Product P ON A.PrdId=P.PrdId
	INNER JOIN ProductBatch PB ON PB.PrdId=P.PrdId AND A.PrdBatId=PB.PrdBatId
	INNER JOIN ReturnProduct SIP ON SIP.ReturnId = B.ReturnId AND A.ReturnId=SIP.ReturnId AND SIP.PrdId=A.PrdId AND SIP.PrdBatId=A.PrdBatId
	WHERE B.Status = 0 AND CM.CmpID = 1 AND ReturnDate>=@Fromdate
	GROUP BY CM.CmpCode,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SM.SchType,A.SlabId,B.ReturnCode,B.ReturnDate,
	B.RtrId,R.CmpRtrCode,R.RtrCode,P.PrdCCode,PB.PrdBatCode,SIP.BaseQty

 		
	INSERT INTO Cs2cn_Prk_RDBNTrace
	SELECT @DistCode,TransDate,SUM(BillCnt),SUM(SalesValue),SUM(ReturnCnt),SUM(ReturnValue),SUM(PurchaseCnt),SUM(PurchaseValue),SUM(SchCnt),'N' UploadFlag,@syncid,@serverdate FROM  
	(		
		SELECT A.SalInvDate Transdate,COUNT(A.SalInvNo) BillCnt,SUM(B.PrdNetAmount) Salesvalue,0 ReturnCnt,0 ReturnValue,0 AS PurchaseCnt,0 As PurchaseValue,0 As SchCnt 
		FROM Salesinvoice A (NOLOCK)
		INNER JOIN SalesInvoiceProduct B(NOLOCK) ON A.Salid = B.SalId AND A.SalInvDate  BETWEEN @Fromdate AND @Todate AND A.DlvSts in (4,5)
		GROUP BY A.SalInvDate
		UNION ALL
		SELECT A.ReturnDate Transdate,0 BillCnt,0 Salesvalue,Count(A.ReturnCode) ReturnCnt,SUM(B.PrdNetAmt) ReturnValue,0 AS PurchaseCnt,0 As PurchaseValue,0 As SchCnt 
		FROM ReturnHeader A(NOLOCK)
		INNER JOIN ReturnProduct B(NOLOCK) ON A.ReturnID = B.ReturnID AND A.ReturnDate   BETWEEN @Fromdate AND @Todate AND A.Status = 0
		GROUP BY A.ReturnDate
		UNION ALL
		SELECT Invdate Transdate,0 BillCnt,0 Salesvalue,0 ReturnCnt,0 ReturnValue,Count(PurRcptRefNo) AS PurchaseCnt,SUM(B.PrdNetAmount) As PurchaseValue,0 As SchCnt 
		FROM PurchaseReceipt A(NOLOCK)
		INNER JOIN PurchaseReceiptProduct B(NOLOCK) ON A.PurRcptId  = B.PurRcptId AND Invdate BETWEEN @Fromdate AND @Todate --AND A.Status = 1
		GROUP BY Invdate
		UNION ALL
		SELECT A.transdate Transdate,0 BillCnt,0 Salesvalue,0 ReturnCnt,0 ReturnValue,0 AS PurchaseCnt,0 As PurchaseValue,Count(*) As SchCnt 
		FROM #Cs2Cn_Prk_SchemeUtilizationDetails A
		WHERE A.transdate BETWEEN @Fromdate AND @Todate 
		GROUP BY A.transdate
	)A GROUP BY TransDate ORDER BY TransDate	
	END
		
	UPDATE DayEndProcess SET ProcDate = CONVERT(VARCHAR(10),GETDATE(),121),NextUpDate =  CONVERT(VARCHAR(10),GETDATE(),121) WHERE ProcDesc ='RDBN_TRACE'
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_Cs2Cn_DailySalesHierarchy' AND TYPE='P')
DROP PROCEDURE Proc_Cs2Cn_DailySalesHierarchy
GO
CREATE PROCEDURE Proc_Cs2Cn_DailySalesHierarchy
(    
@Po_ErrNo INT OUTPUT,    
@ServerDate DATETIME  
)
AS    
/*********************************    
* PROCEDURE  : Proc_Cs2Cn_DailySalesHierarchy    
* PURPOSE  : To Extract Daily Sales Hierarchy   from CoreStocky to upload to Console    
* CREATED BY : Deepan
* CREATED DATE : 10/01/2020    
* NOTE   :    
* MODIFIED BY : 
* MODIFIED DATE : 
* DATE      AUTHOR     DESCRIPTION    
------------------------------------------------    
* DATE       AUTHOR     CR/BZ	USER STORY ID           DESCRIPTION                         
***************************************************************************************************    
10-01-2020  Deepan       CR     CRCRSTPAR0089         Category and Value Class and channel Added
29-04-2020	MOHANA		 CR		PARCS202100006		 Optimization Done
* 06-07-2020    Deepak Philip   BZ          PARLESECS/0720/027      Upload blocked.
*********************************/    
SET NOCOUNT ON    
BEGIN    
	DECLARE @DistCode As nVarchar(50)    
	SET @Po_ErrNo=0    
	DELETE FROM Cs2Cn_Prk_DailySalesHierarchy WHERE UploadFlag = 'Y'
	    
	RETURN  
	  
	SELECT @DistCode = DistributorCode FROM Distributor     
	
	INSERT INTO Cs2Cn_Prk_DailySalesHierarchy    
	(    
	DistCode  ,    
	SalInvNo,
	RtrId,
	CmpRtrCode,
	BillStatus,
	UploadFlag      
	)    
	SELECT  @DistCode,A.SalInvNo,A.RtrId,ISNULL(R.CmpRtrCode,'') AS CmpRtrCode,
	A.Dlvsts, 'N' AS UploadFlag
	FROM SalesInvoice A  (NOLOCK)    
	INNER JOIN Retailer R (NOLOCK) ON A.RtrId = R.RtrId    
	WHERE A.SalInvDate >='2019-12-20' AND A.DlvSts >2 AND A.SalInvNo NOT IN(
	SELECT SalInvNo FROM DailySalesHierarchy)

	--commented and added PARCS202100005

	--UPDATE  Cs2Cn_Prk_DailySalesHierarchy SET ValueClassCode=RC.ValueClassCode,ValueClassName=RC.ValueClassName,
	--CtgCode= RY.CtgCode,CtgName=RY.CtgName,ChannelCode=RCY.CtgCode,ChannelName=RCY.CtgName
	--FROM Cs2Cn_Prk_DailySalesHierarchy C(NOLOCK) INNER JOIN SALESINVOICE S(NOLOCK) ON C.SALINVNO=S.SALINVNO
	--AND C.RtrId =S.RtrId 
	--INNER JOIN RetailerValueClass RC(NOLOCK) ON S.RtrValueClassId =RC.RtrClassId
	--INNER JOIN RetailerCategory RY ON RC.CtgMainId = RY.CtgMainId
	--INNER JOIN RetailerCategoryLevel RCL ON RY.CtgLevelId = RCL.CtgLevelId
	--INNER JOIN RetailerCategory RCY ON  RY.CtgLinkId=RCY.CtgMainId



	SELECT   C.SalInvNo,S.RtrId,RC.ValueClassCode,RC.ValueClassName,RY.CtgCode,RY.CtgName,RCY.CtgCode AS ChannelCode,RCY.CtgName AS ChannelName 
	INTO #CtgDetails
	FROM Cs2Cn_Prk_DailySalesHierarchy C(NOLOCK) INNER JOIN SALESINVOICE S(NOLOCK) ON C.SALINVNO=S.SALINVNO
	AND C.RtrId =S.RtrId 
	INNER JOIN RetailerValueClass RC(NOLOCK) ON S.RtrValueClassId =RC.RtrClassId
	INNER JOIN RetailerCategory RY(NOLOCK)  ON RC.CtgMainId = RY.CtgMainId
	INNER JOIN RetailerCategoryLevel RCL(NOLOCK)  ON RY.CtgLevelId = RCL.CtgLevelId
	INNER JOIN RetailerCategory RCY(NOLOCK)  ON  RY.CtgLinkId=RCY.CtgMainId

	UPDATE  Cs2Cn_Prk_DailySalesHierarchy SET ValueClassCode=S.ValueClassCode,ValueClassName=S.ValueClassName,
	CtgCode= S.CtgCode,CtgName=S.CtgName,ChannelCode=S.ChannelCode,ChannelName=S.ChannelName
	FROM Cs2Cn_Prk_DailySalesHierarchy C(NOLOCK) INNER JOIN #CtgDetails S(NOLOCK) ON C.SALINVNO=S.SALINVNO
	AND C.RtrId =S.RtrId 	
	
	INSERT INTO DailySalesHierarchy(SalInvNo,RtrId,CmpRtrCode,BillStatus,CtgCode,CtgName,ValueClassCode,ValueClassName,
	ChannelCode,ChannelName,Availability,LastModBy,LastModDate,AuthId,AuthDate)
	SELECT SalInvNo,RtrId,CmpRtrCode,BillStatus,CtgCode,CtgName,ValueClassCode,ValueClassName,
	ChannelCode,ChannelName,1,1,GETDATE(),1,GETDATE() FROM  Cs2Cn_Prk_DailySalesHierarchy WHERE
	SalInvNo NOT IN(SELECT SALINVNO FROM  DailySalesHierarchy)
	UPDATE Cs2Cn_Prk_DailySalesHierarchy SET ServerDate=@ServerDate   
END
GO
DELETE FROM ManualConfiguration WHERE ModuleId='Route_Master' 
INSERT INTO ManualConfiguration 
SELECT 'PARLE','Route_Master','Route Master','Restrict Route Edit Expect ASM',1,0,0,1
GO
IF EXISTS (SELECT * FROM  SYSOBJECTS WHERE NAME ='Fn_ReturnRMBlock' AND TYPE='FN')
DROP FUNCTION Fn_ReturnRMBlock
GO
--SELECT DBO.Fn_ReturnRMBlock(2) AS Validate
CREATE FUNCTION Fn_ReturnRMBlock
(
	@UsrId	INT
)
RETURNS VARCHAR(100)
AS
/********************************************************************************************************************** 
* FUNCTION  :	 Fn_ReturnRMBlock  
* PURPOSE  :	 To Validate Columns to Edit
* CREATED BY :	 S.MOHANA   
* CREATED DATE : 27-04-2020
* PMS NO :   PARCS202100005
* DATE        AUTHOR   CR/BZ	    USER STORY ID		DESCRIPTION           
***********************************************************************************************************************/ 
BEGIN
DECLARE @ReturMsg AS VARCHAR(1000)

SET @ReturMsg=''

 
IF NOT EXISTS(SELECT * FROM Users  WHERE UserId=@UsrId and UPPER(UserName) in ('ASM'))
BEGIN

	BEGIN
		SET @ReturMsg='Access Denied'
	END

END
			 
RETURN @ReturMsg
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='FN_GetUploadDetails' AND TYPE='FN')
DROP FUNCTION FN_GetUploadDetails
GO
CREATE FUNCTION FN_GetUploadDetails(@Type INT)
RETURNS INT
AS
BEGIN
DECLARE @Status INT

SET @Status = 0

IF @Type =1 
BEGIN
	IF EXISTS (SELECT * FROM Salesman WHERE UpLoad ='N')
	BEGIN
		SET @Status = 1
	END
END

IF @Type =2 
BEGIN
	IF EXISTS (SELECT * FROM RouteMaster WHERE UpLoad ='N')
	BEGIN
		SET @Status = 1
	END
END

RETURN @Status
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_Cs2Cn_Route' AND TYPE='P')
DROP PROCEDURE Proc_Cs2Cn_Route
GO
/*
BEGIN TRANSACTION
EXEC Proc_Cs2Cn_Route 0
SELECT * FROM Cs2Cn_Prk_Route ORDER BY SlNo
SELECT * FROM RouteMaster
ROLLBACK TRANSACTION
*/
CREATE PROCEDURE Proc_Cs2Cn_Route
(
	@Po_ErrNo	INT OUTPUT,	
	@ServerDate DATETIME
)
AS
SET NOCOUNT ON
BEGIN
/*********************************
* PROCEDURE		: Proc_Cs2Cn_Route
* PURPOSE		: To Extract Route Details from CoreStocky to upload to Console
* CREATED		: Nandakumar R.G
* CREATED DATE	: 22/06/2010
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* 02-05-2020	MOHANA S	PARCS202100008 CR		All the route get upload to Console 
*********************************/
	DECLARE @DistCode	As nVarchar(50)
	
	SET @Po_ErrNo=0
	DELETE FROM Cs2Cn_Prk_Route WHERE UploadFlag = 'Y'
	
	IF EXISTS (SELECT * FROM RouteMaster WHERE UpLoad ='N')
	BEGIN
			UPDATE RouteMaster SET UpLoad ='N'
	END

	SELECT @DistCode = DistributorCode FROM Distributor
	INSERT INTO Cs2Cn_Prk_Route
	(
		DistCode,
		RMId,
		RMCode,
		RMName,
		Distance,
		RMPopulation,
		VanRoute,
		RouteType,
		LocalUpCountry,
		GeoLevel,
		GeoValue,
		Status,
		MonDay,
		TuesDay,
		WednesDay,
		ThursDay,
		FriDay,
		SaturDay,
		SunDay,
		UploadFlag
	)
	SELECT
		@DistCode,
		RM.RMId,
		RM.RMCode,
		RM.RMName,
		RM.RMDistance,
		RM.RMPopulation,
		RM.RMVanRoute,
		RM.RMSRouteType,
		RM.RMLocalUpcountry,
		'' AS GeoLevel,
		'' AS GeoValue,
		(CASE RM.RMstatus WHEN 0 THEN 'InActive' ELSE 'Active' END) AS Status,
		(CASE RM.RMMon WHEN 1 THEN 'Yes' ELSE 'No' END),
		(CASE RM.RMTue WHEN 1 THEN 'Yes' ELSE 'No' END),
		(CASE RM.RMWed WHEN 1 THEN 'Yes' ELSE 'No' END),
		(CASE RM.RMThu WHEN 1 THEN 'Yes' ELSE 'No' END),
		(CASE RM.RMFri WHEN 1 THEN 'Yes' ELSE 'No' END),
		(CASE RM.RMSat WHEN 1 THEN 'Yes' ELSE 'No' END),
		(CASE RM.RMSun WHEN 1 THEN 'Yes' ELSE 'No' END),		
		'N'				
	FROM		
		RouteMaster RM
	WHERE			
		RM.Upload = 'N'
	UPDATE A SET A.GeoLevel=B.GeoLevelName,A.GeoValue=B.GeoCode
	FROM Cs2Cn_Prk_Route A,
	(SELECT RM.RMId,GL.GeoLevelName,G.GeoCode FROM RouteMaster RM,Geography G,GeographyLevel GL
	WHERE RM.GeoMainId=G.GeoMainId AND G.GeoLevelId=GL.GeoLevelId AND RM.Upload='N') B
	WHERE A.RMid=B.RMId
	UPDATE RouteMaster  SET Upload='Y' 	WHERE RMCode IN (SELECT RMCode FROM Cs2Cn_Prk_Route)
	UPDATE Cs2Cn_Prk_Route SET ServerDate=@ServerDate
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_Cs2Cn_Salesman' AND TYPE='P')
DROP PROCEDURE Proc_Cs2Cn_Salesman
GO
/*
BEGIN TRANSACTION
EXEC Proc_Cs2Cn_Salesman 0
SELECT * FROM Cs2Cn_Prk_Salesman ORDER BY SlNo
SELECT * FROM Retailer
ROLLBACK TRANSACTION
*/
CREATE PROCEDURE Proc_Cs2Cn_Salesman
(
	@Po_ErrNo	INT OUTPUT,
	@ServerDate DATETIME
)
AS
SET NOCOUNT ON
BEGIN
/*********************************
* PROCEDURE		: Proc_Cs2Cn_Salesman
* PURPOSE		: To Extract Salesman Details from CoreStocky to upload to Console
* CREATED		: Nandakumar R.G
* CREATED DATE	: 22/06/2010
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
***************************************************************************************************
* DATE       AUTHOR        CR/BZ	USER STORY ID           DESCRIPTION                         
***************************************************************************************************
16-08-2018  Amuthakumar P   CR     CRCRSTPAR0016		  Returns Configuration for HHT Device Serial Number
25-06-2019  lakshman M      CR      CRCRSTPAR0066         In core stocky duplicate saleman for HHT Device Serial Number validated.
* 02-05-2020	MOHANA S	CR		PARCS202100009        All the route get upload to Console 
***************************************************************************************************/ 
	DECLARE @DistCode	As nVarchar(50)
	
	SET @Po_ErrNo=0
	DELETE FROM Cs2Cn_Prk_Salesman WHERE UploadFlag = 'Y'

	IF EXISTS (SELECT * FROM Salesman WHERE UpLoad ='N')
	BEGIN
			UPDATE Salesman SET UpLoad ='N'

	END
	
	SELECT @DistCode = DistributorCode FROM Distributor
	INSERT INTO Cs2Cn_Prk_Salesman
	(
		DistCode,
		SMId,
		SMCode,
		SMName,
		SMPhoneNo,
		SMEmail,
		SMOtherDetails,
		SMDailyAllowance,
		SMMonthlySalary,
		SMMktCredit,
		SMCreditDays,
		Status,
		RMId,
		RMCode,
		RMName,
		UploadFlag,
		HHTDEVICESERIALNUMBER
	)
	SELECT
		@DistCode,
		SM.SMId,
		SM.SMCode,
		SM.SMName,
		SM.SMPhoneNumber,
		SM.SMEmailID,
		SM.SMOtherDetails,
		SM.SMDailyAllowance,
		SM.SMMonthlySalary,
		SM.SMMktCredit,
		SM.SMCreditDays,
		(CASE SM.Status WHEN 0 THEN 'InActive' ELSE 'Active' END) AS Status,
		ISNULL(SMR.RMId,0) AS RMId,
		ISNULL(RM.RMCode,'') AS RMCode,
		ISNULL(RM.RMName,'') AS RMName,
		'N'	As Uploadflag,
		SM.HHTDeviceSerialNumber			
	FROM		
		Salesman SM LEFT OUTER JOIN  SalesmanMarket SMR
		ON SM.SMId=SMR.SMId
		LEFT OUTER JOIN  RouteMaster RM ON SMR.RMId=RM.RMId
	WHERE SM.Upload = 'N' 

	UPDATE Salesman SET Upload='Y' 	WHERE SMCode IN (SELECT SMCode FROM Cs2Cn_Prk_Salesman)

	UPDATE Cs2Cn_Prk_Salesman SET ServerDate=@ServerDate
END
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Cs2Cn_Prk_ChainWiseBillDetails_HF443' AND TYPE='U')
BEGIN
	SELECT * INTO Cs2Cn_Prk_ChainWiseBillDetails_HF443 FROM Cs2Cn_Prk_ChainWiseBillDetails WHERE UploadFlag ='N'
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Cs2Cn_Prk_ChainWiseBillDetails' AND TYPE='U')
DROP TABLE Cs2Cn_Prk_ChainWiseBillDetails
GO
CREATE TABLE Cs2Cn_Prk_ChainWiseBillDetails
(
      [SlNo] [numeric](38, 0) IDENTITY(1,1) NOT NULL,
      [DistCode] [nvarchar](50) NULL,
      [BillNo] [nvarchar](100) NULL,
      [BillDate] [datetime] NULL,
      [CmpRtrCode] [nvarchar](50) NULL,
      [PrdCCode] [nvarchar](100) NULL,
      [PktWgt] [numeric](18, 4) NULL,
      [PktMRP] [numeric](18, 6) NULL,
      [QtyInPkt] [numeric](18, 0) NULL,
      [ChainLandRate] [numeric](18, 6) NULL,
      [Amount] [numeric](18, 6) NULL,
      [UploadFlag] [nvarchar](10) NULL,
      [SyncId] [numeric](38, 0) NULL,
      [ServerDate] [datetime] NULL,
      [Channel] [nvarchar](100) NULL,
      [LCTR] [numeric](18, 6) NULL,
) ON [PRIMARY]
GO
IF EXISTS (SELECT * FROM Cs2Cn_Prk_ChainWiseBillDetails_HF443)
BEGIN
	
	INSERT INTO Cs2Cn_Prk_ChainWiseBillDetails(DistCode,BillNo,BillDate,CmpRtrCode,PrdCCode,PktWgt,PktMRP,QtyInPkt,ChainLandRate,Amount,UploadFlag,SyncId,ServerDate)
	SELECT DistCode,BillNo,BillDate,CmpRtrCode,PrdCCode,PktWgt,PktMRP,QtyInPkt,ChainLandRate,Amount,UploadFlag,SyncId,ServerDate FROM Cs2Cn_Prk_ChainWiseBillDetails_HF443

END
GO
IF EXISTS (SELECT 'C' FROM SYSOBJECTS WHERE XTYPE = 'U' AND NAME = 'RptChainWiseBillDetails_Excel')
DROP TABLE RptChainWiseBillDetails_Excel
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_RptChainWiseBillDetails_withTax' AND TYPE='P')
DROP PROCEDURE Proc_RptChainWiseBillDetails_withTax
GO
/*
	BEGIN TRAN
	EXEC Proc_RptChainWiseBillDetails 288,1,0,'PARLE_CR',0,0,1
	ROLLBACK TRAN
*/
CREATE PROCEDURE Proc_RptChainWiseBillDetails_withTax
(
	@Pi_RptId			INT,
	@Pi_UsrId			INT,
	@Pi_SnapId			INT,
	@Pi_DbName			NVARCHAR(50),
	@Pi_SnapRequired	INT,
	@Pi_GetFromSnap		INT,
	@Pi_CurrencyId		INT
)
AS
/***********************************************************************************************************************************
* PROCEDURE	: Proc_RptChainWiseBillDetails_withTax
* PURPOSE	: 
* CREATED	: Aravindh Deva C
* CREATED DATE : 27 05 2016
* NOTE		: Parle SP for Trade Promotion Reports
* MODIFIED 
************************************************************************************************************************************
* DATE        AUTHOR			CR/BZ		USER STORY ID       DESCRIPTION   
 14-12-2017   S.Moorthi			CR			ICRSTPAR7049		1. Chain lending rate should display the net rate in billing screen
																2. Bill number column should be after the party name column 
************************************************************************************************************************************												  
 19-12-2017   S.Mohana			CR			ICRSTPAR7049		3. Added SubTotal in Excel 
************************************************************************************************************************************
 23-12-2017	  S.MOHANA			SR			ICRSTPAR7809		1.INCLUDED SALES RETURN
																2.REMOVED TAX CALCULATION
																3.ADDED RATE-SCHEMEDISCOUNT , GRANDTOTAL
************************************************************************************************************************************
 26-03-2018	  S.MOHANA			 CR			CCRSTPAR0186		Retailer Wise Sub Total Included. 
 12-07-2018   Lakshman M		 BZ         ILCRSTPAR1325       negative values validataion added from core stocky.
 17-09-2018   Amuthakumar P		 CR			CRCRSTPAR0021		Promotion claim should be calculating with tax
 09-10-2018   Mohana S		     BZ		    ILCRSTPAR2313	    TAX CALCULATION CHANGED AS PER CLIENT REQUEST
 14-10-2018	  Mohana S			 SR			ILCRSTPAR6289		Included GT Category
 08-05-2020	  Mohana S			CR			PARCS202100012		Included Channel and LCTR	
 23-05-2020	  Mohana S			BZ			PARCS202100013		Category taken based on Transaction	
 31-03-2020	  MOHANA S           CR         PARCS202100002		Contract Pricing Optimization	
************************************************************************************************************************************/  
BEGIN
	SET NOCOUNT ON
	
	DECLARE @FromDate			AS	DATETIME
	DECLARE @ToDate				AS	DATETIME
	DECLARE @CmpId				AS  INT 
	DECLARE @CtgLevelId			AS  INT  
	DECLARE @CtgMainId			AS  INT	
	DECLARE @CmpPrdCtgId		AS INT
	DECLARE @PrdCtgValMainId	AS INT	
	
	DECLARE @ReportType	AS INT	
	--Added By Mohana
	CREATE TABLE #Chain
	(
		[SalId] [bigint] NOT NULL,
		[BillNo] [nvarchar](50) NOT NULL,
		[BillDate] NVARCHAR(100),
		[RtrId] [int] NOT NULL,
		RtrName NVARCHAR(100),
		Ctgname NVARCHAR(100) NOT NULL,
		[PrdId] [int] NOT NULL,
		PrdName NVARCHAR(100),
		PktWgt [numeric](18, 6),
		[MRP] [numeric](18, 6) NOT NULL,
		QtyInPkt [numeric](38, 0) NULL,		
		[ChainLandRate] [numeric](18, 6) NULL,
		Amount [numeric](38, 6) NULL,
		[GrpName] NVARCHAR(100),
		[Grpid] INT,
		LCTR	[numeric](18, 6) NULL,
		Channel VARCHAR(100)
	)  

	--CHANGED BY MOHANA ILCRSTPAR2313
	CREATE TABLE #ChainSalesDetails
	(
		[TransType] INT NOT NULL,
		[SalId] [bigint] NOT NULL,
		[SalInvNo] [nvarchar](50) NOT NULL,
		[SalInvDate] [datetime] NOT NULL,
		[RtrId] [int] NOT NULL,
		[PrdId] [int] NOT NULL,
		[TotalPCS] [numeric](38, 0) NULL,
		[MRP] [numeric](18, 6) NOT NULL,
		[PriceId] [int] NOT NULL,
		[PrdBatid] [int] NOT NULL,
		[ChainLandRate] [numeric](18, 6) NULL,
		[SchemeDiscount] [numeric](18, 6) NULL,
		[PRDSLNO] INT NOT NULL,
		LCTR	[numeric](18, 6) NULL,
		RtrValueClassId INT

	)

	SELECT @FromDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,10,@Pi_UsrId)
	SELECT @ToDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,11,@Pi_UsrId)
	SET @CmpId =(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId))  
	SET @CtgLevelId =(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,29,@Pi_UsrId))    
	SET @CtgMainId=(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,30,@Pi_UsrId))
	SET @CmpPrdCtgId = (SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,16,@Pi_UsrId))
	SET @PrdCtgValMainId = (SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,21,@Pi_UsrId))
	
	SET @ReportType = (SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,315,@Pi_UsrId))
	--To Filter Retailers

	SELECT DISTINCT R.RtrId,RC.CtgCode,Ctgname,RC.CtgMainId,RtrValueClassId 
	INTO #FilterRetailer
	FROM Retailer R (NOLOCK),
	--RetailerValueClassMap RVCM (NOLOCK),
	Salesinvoice RVCM (NOLOCK),
	RetailerValueClass RVC (NOLOCK),
	RetailerCategory RC (NOLOCK),
	RetailerCategoryLevel RCL (NOLOCK)	
	WHERE R.Rtrid = RVCM.RtrId AND RVCM.RtrValueClassId = RVC.RtrClassId
	AND  RVC.CtgMainId=RC.CtgMainId AND  RCL.CtgLevelId=RC.CtgLevelId 
	--and  CtgLinkId IN (SELECT CtgMainId FROM RetailerCategory A(NOLOCK) where CtgCode NOT IN ('GT'))
	AND (RVC.CmpId=(CASE @CmpId WHEN 0 THEN RVC.CmpId ELSE 0 END) OR
	RVC.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId)))
	AND (RCL.CtgLevelId=(CASE @CtgLevelId WHEN 0 THEN RCL.CtgLevelId ELSE 0 END) OR  
	RCL.CtgLevelId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,29,@Pi_UsrId)))
	AND (RC.CtgMainId=(CASE @CtgMainId WHEN 0 THEN RC.CtgMainId ELSE 0 END) OR  
	RC.CtgMainId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,30,@Pi_UsrId)))
	--To Filter Retailers
	--To Filter Products

	SELECT DISTINCT E.PrdId
	INTO #FilterProduct
	FROM ProductCategoryValue C (NOLOCK)
	INNER JOIN ProductCategoryValue D (NOLOCK) ON
	D.PrdCtgValLinkCode LIKE Cast(C.PrdCtgValLinkCode AS NVARCHAR(1000)) + '%'
	INNER JOIN Product E (NOLOCK) ON D.PrdCtgValMainId = E.PrdCtgValMainId
	INNER JOIN ProductCategoryLevel L (NOLOCK) ON L.CmpPrdCtgId = C.CmpPrdCtgId	
	WHERE 
	(L.CmpId=(CASE @CmpId WHEN 0 THEN L.CmpId ELSE 0 END) OR
	L.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId))) AND
	
	(L.CmpPrdCtgId = (CASE @CmpPrdCtgId  WHEN 0 THEN L.CmpPrdCtgId ELSE 0 END) OR
	L.CmpPrdCtgId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,16,@Pi_UsrId)))
	
	AND (C.PrdCtgValMainId = (CASE @PrdCtgValMainId  WHEN 0 THEN C.PrdCtgValMainId ELSE 0 END) OR 
	C.PrdCtgValMainId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId ,21, @Pi_UsrId)))
	--To Filter Products
	
	INSERT INTO #ChainSalesDetails
	SELECT 1 AS TRANSID,S.SalId,S.SalInvNo,S.SalInvDate,S.RtrId,SP.PrdId,SUM(SP.BaseQty) TotalPCS,SP.PrdUnitMRP MRP,CASE SP.SplPriceid WHEN 0 THEN 0 ELSE  SP.Priceid END AS Priceid,SP.PrdBatid,
	--SUM(CAST(SP.PrdUom1NetRate AS NUMERIC(18,6))/Uom1ConvFact) as ChainLandRate --ICRSTPAR7049
	CAST(0 AS NUMERIC(18,6)) ChainLandRate,SUM(SP.PrdSchDiscAmount) SchDisc,SP.SlNo,0,RtrValueClassId --ADDED BY MOHANA ILCRSTPAR2313
	FROM SalesInvoice S (NOLOCK)
	INNER JOIN SalesInvoiceProduct SP (NOLOCK) ON S.SalId = SP.SalId
	WHERE SalInvDate BETWEEN @FromDate AND @ToDate AND S.DlvSts > 3
	AND EXISTS (SELECT 'C' FROM #FilterRetailer FR (NOLOCK) WHERE S.RtrId = FR.RtrId)
	AND EXISTS (SELECT 'C' FROM #FilterProduct FP (NOLOCK) WHERE SP.PrdId = FP.PrdId)
	GROUP BY S.SalId,S.SalInvNo,S.SalInvDate,S.RtrId,SP.PrdId,SP.PrdUnitMRP,SP.PriceId,SP.SplPriceid,SP.PrdBatid,SP.SlNo,RtrValueClassId 
	UNION ALL
	SELECT 2 AS TRANSID,S.ReturnID,S.ReturnCode,S.ReturnDate,S.RtrId,SP.PrdId,SUM(-1*SP.BaseQty) TotalPCS,SP.PrdUnitMRP MRP,CASE SP.SplPriceid WHEN 0 THEN 0 ELSE  SP.Priceid END AS Priceid,SP.PrdBatid,
	--SUM(CAST(SP.PrdUom1NetRate AS NUMERIC(18,6))/Uom1ConvFact) as ChainLandRate --ICRSTPAR7049
	CAST(0 AS NUMERIC(18,6)) ChainLandRate,SUM(SP.PrdSchDisAmt) SchDisc,SP.SlNo,0,RtrValueClassId  --ADDED BY MOHANA ILCRSTPAR2313
	FROM ReturnHeader S (NOLOCK)
	INNER JOIN ReturnProduct SP (NOLOCK) ON S.ReturnID = SP.ReturnID AND SP.StockTypeId IN (SELECT StockTypeId FROM StockType WHERE SystemStockType = 1)
	WHERE S.ReturnDate BETWEEN @FromDate AND @ToDate AND S.Status = 0
	AND EXISTS (SELECT 'C' FROM #FilterRetailer FR (NOLOCK) WHERE S.RtrId = FR.RtrId)
	AND EXISTS (SELECT 'C' FROM #FilterProduct FP (NOLOCK) WHERE SP.PrdId = FP.PrdId)
	GROUP BY S.ReturnID,S.ReturnCode,S.ReturnDate,S.RtrId,SP.PrdId,SP.PrdUnitMRP,SP.SplPriceid,SP.PriceId,SP.PrdBatid,SP.SlNo,RtrValueClassId 
	
	------------- commented By lakshman M ON 12/07/2018 PMS ID : ILCRSTPAR1325
	--UPDATE #ChainSalesDetails SET SchemeDiscount = abs(SchemeDiscount/TotalPCS)
	 --ADDED BY MOHANA ILCRSTPAR2313
	EXEC Proc_ReturnSalesProductTaxPercentage  @FromDate,@ToDate
	
	SELECT * INTO #ParleOutputTaxPercentage
	FROM ParleOutputTaxPercentage (NOLOCK)	
	 
	UPDATE #ChainSalesDetails SET SchemeDiscount =abs (SchemeDiscount/TotalPCS)

	UPDATE A SET SchemeDiscount =  SchemeDiscount + (SchemeDiscount *(B.TaxPerc/100)) FROM #ChainSalesDetails a 
	INNER JOIN #ParleOutputTaxPercentage B ON A.TransType=B.TRANSID
	AND A.SalId = B.SALID AND A.PRDSLNO = B.PRDSLNO

	--TILL HERE  ILCRSTPAR2313
	-------------------- Till here ----------------------------
	--ICRSTPAR7049 Till Here
	--SELECT R.PriceId,C.SplSelRate 
	--INTO #ExistingSpecialPrice
	--FROM #ChainSalesDetails R (NOLOCK),
	--SpecialRateAftDownLoad_Calc C (NOLOCK)
	--WHERE R.PriceId = CAST(REPLACE(C.ContractPriceIds,'-','') AS BIGINT)
	
	SELECT DISTINCT C.PrdBatid,C.Priceid,C.PrdbatDetailValue INTO #NormalPrice FROM #ChainSalesDetails A INNER JOIN Productbatch B ON A.Prdbatid=B.PrdBatid
	INNER JOIN ProductBatchDetails C ON  B.PRDBATID = C.PRDBATID AND DEFAULTPRICE = 1
	and SLNO=3	
	


	--ADDED BY MOHANA
	
	--SELECT DISTINCT Priceid,PrdBatDetailValue SplSelRate  INTO #ExistingSpecialPrice FROM
	--(
	--SELECT D.PriceId,D.PrdBatDetailValue 
	--FROM #ChainSalesDetails M (NOLOCK),
	--ProductBatchDetails D (NOLOCK) 
	--WHERE M.PriceId = D.PriceId AND D.SLNo = 3
	--AND PriceCode LIKE '%-Spl Rate-%'   
	--UNION 
	--SELECT D.PriceId,D.PrdBatDetailValue 
	--FROM #ChainSalesDetails M (NOLOCK),
	--ProductBatchDetails D (NOLOCK) 
	--WHERE M.PriceId = D.PriceId AND D.SLNo = 3
	--AND PriceCode LIKE '%SplRate%'  
	--)A
	
	SELECT A.SalId ,A.PrdId,A.PrdBatid,A.TransType,A.PRDSLNO,SplRate INTO #Sales  FROM #ChainSalesDetails A  
	INNER JOIN SalesInvoiceProduct B ON A.Salid = B.Salid AND A.Prdid =B.PrdId AND A.PrdBatid = B.PrdBatId AND A.PRDSLNO = B.SlNo AND TransType = 1
	AND SplRate <>0
	SELECT  A.SalId ,A.PrdId,A.PrdBatid,A.TransType,A.PRDSLNO,SplRate INTO #Return FROM #ChainSalesDetails A  
	INNER JOIN ReturnHeader B ON A.SalId = B.ReturnID AND TransType = 2 
	INNER JOIN ReturnProduct C ON C.ReturnID = B.ReturnID 
	INNER JOIN SalesInvoiceProduct D ON B.Salid = D.Salid AND D.Prdid =C.PrdId AND D.PrdBatid = C.PrdBatId AND D.SLNO = C.ActSalRowId  AND SplRate <>0
	 --ADDED BY MOHANA ILCRSTPAR2313
	
	--UPDATE R SET R.ChainLandRate = (S.SplSelRate + (S.SplSelRate *(P.TaxPerc/100))-R.SchemeDiscount) 
	--FROM #ChainSalesDetails R (NOLOCK),
	--#ExistingSpecialPrice S (NOLOCK),
	-- #ParleOutputTaxPercentage P 
	--WHERE R.PriceId = S.PriceId	and	  R.TransType=P.TRANSID
	--AND R.SalId = P.SALID AND R.PRDSLNO = P.PRDSLNO
	UPDATE R SET R.ChainLandRate = (S.SplRate  + (S.SplRate *(P.TaxPerc/100))-R.SchemeDiscount) 
	FROM #ChainSalesDetails R (NOLOCK) INNER JOIN #Sales  S (NOLOCK) ON R.SalId =S.SalId AND R.Prdid = S.Prdid 
	AND R.Prdbatid = S.PrdBatid AND R.Prdslno =S.PRDSLNO AND R.TransType =S.TransType 
	INNER JOIN #ParleOutputTaxPercentage P ON R.Salid = P.Salid AND P.SalId = S.Salid AND P.PrdSlno = R.PRDSLNO AND S.PRDSLNO =P.PrdSlno 
	 AND  R.TransType=P.TRANSID AND R.PriceId <>0

	UPDATE R SET R.ChainLandRate = (S.SplRate  + (S.SplRate *(P.TaxPerc/100))-R.SchemeDiscount) 
	FROM #ChainSalesDetails R (NOLOCK) INNER JOIN #Return S (NOLOCK) ON R.SalId =S.SalId AND R.Prdid = S.Prdid 
	AND R.Prdbatid = S.PrdBatid AND R.Prdslno =S.PRDSLNO AND R.TransType =S.TransType 
	INNER JOIN #ParleOutputTaxPercentage P ON R.Salid = P.Salid AND P.SalId = S.Salid AND P.PrdSlno = R.PRDSLNO AND S.PRDSLNO =P.PrdSlno 
	 AND  R.TransType=P.TRANSID AND R.PriceId <>0
	--Till Here ICRSTPAR7049
	
	UPDATE A SET A.ChainLandRate = ((B.PrdbatDetailValue + (B.PrdbatDetailValue *(P.TaxPerc/100))) -A.SchemeDiscount) 
	FROM #ChainSalesDetails A INNER JOIN #NORMALPRICE B ON A.PRDBATID=B.PRDBATID
	INNER JOIN #ParleOutputTaxPercentage P ON  A.TransType=P.TRANSID
	AND A.SalId = P.SALID AND A.PRDSLNO = P.PRDSLNO
	WHERE A.ChainLandRate=0  
	--TILL HERE

	--UAT CHANGES
	 
	UPDATE #ChainSalesDetails SET LCTR = 0

	UPDATE A SET LCTR = PrdBatDetailValue*A.TotalPcs FROM #ChainSalesDetails A 
	INNER JOIN ProductBatchDetails C(NOLOCK) ON  A.PRDBATID = C.PRDBATID AND DEFAULTPRICE = 1 and SLNO=5
	 
	
	--UPDATE A SET LCTR = ROUND(((A.TotalPCS *(C.PrdBatDetailValue))+(A.TotalPCS*C.PrdBatDetailValue)*(P.TaxPerc/100)),2)   
	--FROM #ChainSalesDetails A INNER JOIN Productbatch B ON A.Prdbatid=B.PrdBatid
	--INNER JOIN ProductBatchDetails C ON  B.PRDBATID = C.PRDBATID AND DEFAULTPRICE = 1 AND B.DefaultPriceId = C.Priceid and SLNO=3	
	--INNER JOIN #ParleOutputTaxPercentage P ON A.SalId = P.SalId AND A.TransType = P.TransId AND P.PrdSlno = A.PRDSLNO AND LCTR=0

	--TILL HERE
	
	INSERT INTO #Chain(SalId,BillNo,BillDate,RtrId,RtrName,Ctgname,PrdId,PrdName,PktWgt,MRP,QtyInPkt,ChainLandRate,Amount,channel,LCTR)
	SELECT S.SalId,S.SalInvNo BillNo,CONVERT(VARCHAR(10),S.SalInvDate,121) as  BillDate,S.RtrId,R.RtrName,F.CtgName,P.PrdId,P.PrdName,
	PrdWgt PktWgt,MRP,TotalPCS QtyInPkt,ChainLandRate, --ICRSTPAR7049
	CAST(0 AS NUMERIC(18,6)) Amount,RC1.CtgName,LCTR 
	FROM #ChainSalesDetails S (NOLOCK)
	INNER JOIN Product P (NOLOCK) ON S.PrdId = P.PrdId
	INNER JOIN Retailer R (NOLOCK) ON S.RtrId = R.RtrId
	INNER JOIN #FilterRetailer F ON S.Rtrid = F.Rtrid AND R.Rtrid = F.Rtrid AND F.RtrvalueClassId = S.RtrValueClassId
	INNER JOIN RetailerCategory RC ON RC.CtgMainId = F.CtgMainId 
	INNER JOIN RetailerCategory RC1 ON RC1.CtgMainId = RC.CTGLINKID 
	
	--- Added by Amuthakumar on 17-09-2018 CRCRSTPAR0021
	UPDATE C SET C.Amount = QtyInPkt * ChainLandRate
	FROM #Chain C (NOLOCK)
	
	--Nagarajan on 29.08.2017 as per PMS : ICRSTPAR5917
	SELECT S.SalId,S.RtrId,SP.PrdId,SUM(SPT.TaxAmount) TaxAmount
	INTO #SalesInvoiceProductTax
	FROM SalesInvoice S (NOLOCK)
	INNER JOIN SalesInvoiceProduct SP (NOLOCK) ON S.SalId = SP.SalId
	INNER JOIN SalesInvoiceProductTax SPT (NOLOCK) ON SPT.SalId = SP.SalId AND SPT.PrdSlNo = SP.SlNo 
	WHERE SalInvDate BETWEEN @FromDate AND @ToDate AND S.DlvSts > 3 AND SPT.TaxAmount > 0
	AND EXISTS (SELECT 'C' FROM #FilterRetailer FR (NOLOCK) WHERE S.RtrId = FR.RtrId)
	AND EXISTS (SELECT 'C' FROM #FilterProduct FP (NOLOCK) WHERE SP.PrdId = FP.PrdId)
	GROUP BY S.SalId,S.RtrId,SP.PrdId
	
	--UPDATE C SET C.Amount = C.Amount + ISNULL(SPT.TaxAmount,0)
	--FROM #Chain C (NOLOCK)
	--INNER JOIN #SalesInvoiceProductTax SPT ON SPT.SalId=C.SalId AND SPT.RtrId = C.SalId AND SPT.PrdId=C.PrdId
	--WHERE C.Amount > 0
	-- ICRSTPAR7049 Bill No Column Change
	--Till here CRCRSTPAR0021
	
	
	IF EXISTS (SELECT 'C' FROM SYSOBJECTS WHERE XTYPE = 'U' AND NAME = 'RptChainWiseBillDetails_Excel')
	DROP TABLE RptChainWiseBillDetails_Excel
		 
	
	SELECT SalId,CHannel,Ctgname,RtrName,BillNo,BillDate,RtrId,PrdId,PrdName,PktWgt,MRP,QtyInPkt,ROUND(ChainLandRate,2,1) ChainLandRate,Amount,LCTR,Grpid,GrpName
	INTO RptChainWiseBillDetails_Excel
	FROM #Chain (NOLOCK) Order by  Ctgname,RtrName
	
	UPDATE RptChainWiseBillDetails_Excel SET Grpname='Retailer'
	
 	SELECT  Row_numbeR() Over(Order by  Ctgname,Rtrid Asc) as Row ,Rtrid,Rtrname,Ctgname INTO #Excel  from RptChainWiseBillDetails_Excel  GROUP BY Rtrid ,Rtrname,Ctgname
 	UPDATE A SET A.Grpid = B.row from RptChainWiseBillDetails_Excel A INNER JOIN #Excel B ON A.Rtrid = B.Rtrid 
	 	
	DELETE FROM RptDataCount WHERE RptId = @Pi_RptId AND UserId = @Pi_UsrId
	INSERT INTO RptDataCount (RptId,RecCount,ErrNo,UserId)
	SELECT @Pi_RptId,Count(*) as RecCount,0,@Pi_UsrId FROM RptChainWiseBillDetails_Excel
	
	SELECT * FROM RptChainWiseBillDetails_Excel Order By Ctgname,BillNo
	
	--INSERT INTO RptChainWiseBillDetails_Excel
	--SELECT 0 SalId,'' Ctgname,'' RtrName,'TOTAL ' BillNo,'' BillDate,0 RtrId,0 PrdId, '' PrdName,0 PktWgt,0 MRP,SUM(QtyInPkt) QtyInPkt,SUM(ChainLandRate) ChainLandRate,
	--SUM(Amount) Amount,1000,CtgName  FROM RptChainWiseBillDetails_Excel	
	--group by CtgName
	--UNION  
	--SELECT 0 SalId,'' Ctgname,'' RtrName,'Grand Total ' BillNo,'' BillDate,0 RtrId,0 PrdId, '' PrdName,0 PktWgt,0 MRP,SUM(QtyInPkt) QtyInPkt,SUM(ChainLandRate) ChainLandRate,
	--SUM(Amount) Amount,10000,'zzzzzz' FROM RptChainWiseBillDetails_Excel	
	INSERT INTO RptChainWiseBillDetails_Excel
	SELECT 0 SalId,'' Channel ,'' Ctgname,'' RtrName,'SUB TOTAL ' BillNo,'' BillDate,RtrId,0 PrdId, '' PrdName,0 PktWgt,0 MRP,SUM(QtyInPkt) QtyInPkt,SUM(ChainLandRate) ChainLandRate,
	SUM(Amount) Amount,0 LCTR,Max(Grpid),'SubTotal' FROM RptChainWiseBillDetails_Excel 
	group by RtrId
	UNION   
	SELECT 0 SalId,'' Channel,Ctgname,'' RtrName,'TOTAL ' BillNo,'' BillDate,0 RtrId,0 PrdId, '' PrdName,0 PktWgt,0 MRP,SUM(QtyInPkt) QtyInPkt,SUM(ChainLandRate) ChainLandRate,
	SUM(Amount) Amount,0 LCTR,Max(Grpid),'ZSubStotal'  FROM RptChainWiseBillDetails_Excel 
	group by   Ctgname
	UNION  
	SELECT 0 SalId,'' Channel,'' Ctgname,'' RtrName,'Grand Total ' BillNo,'' BillDate,0 RtrId,0 PrdId, '' PrdName,0 PktWgt,0 MRP,SUM(QtyInPkt) QtyInPkt,SUM(ChainLandRate) ChainLandRate,
	SUM(Amount) Amount,0 LCTR,1000000,'zzzzzzzzz' FROM RptChainWiseBillDetails_Excel	
	
	DELETE FROM RptExcelHeaders WHERE RptId = 288
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,1,'SalId','SalId',0,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,2,'Channel','Channel',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,3,'CtgName','Category Name',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,4,'RtrName','Party Name',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,5,'BillNo','BillNo',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,6,'BillDate','BillDate',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,7,'RtrId','RtrId',0,1)
 	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,8,'PrdId','PrdId',0,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,9,'PrdName','Product Name',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,10,'PktWgt','Pkt Wgt',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,11,'MRP','MRP',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,12,'QtyInPkt','Quantity in Pkts',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,13,'ChainLandRate','Chain Landing Rate',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,14,'Amount','Amount',1,1)	
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,15,'LCTR','LCTR',1,1)	
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,16,'Grpid','Grpid',0,1)	
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,17,'GrpName','GrpName',0,1)	
	RETURN
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_RptChainWiseBillDetails' AND TYPE='P')
DROP PROCEDURE Proc_RptChainWiseBillDetails
GO
/*
BEGIN TRAN
EXEC Proc_RptChainWiseBillDetails 288,1,0,'PARLE_CR',0,0,1
ROLLBACK TRAN
*/
CREATE PROCEDURE Proc_RptChainWiseBillDetails
(
	@Pi_RptId			INT,
	@Pi_UsrId			INT,
	@Pi_SnapId			INT,
	@Pi_DbName			NVARCHAR(50),
	@Pi_SnapRequired	INT,
	@Pi_GetFromSnap		INT,
	@Pi_CurrencyId		INT
)
AS
/***********************************************************************************************************************************
* PROCEDURE	: Proc_RptChainWiseBillDetsils
* PURPOSE	: 
* CREATED	: Aravindh Deva C
* CREATED DATE	: 27 05 2016
* NOTE		: Parle SP for Trade Promotion Reports
* MODIFIED 
************************************************************************************************************************************
* DATE        AUTHOR      CR/BZ			USER STORY ID       DESCRIPTION   
 14-12-2017   S.Moorthi   CR			ICRSTPAR7049		1. Chain lending rate should display the net rate in billing screen
															2. Bill number column should be after the party name column 
************************************************************************************************************************************
 19-12-2017   S.Mohana    CR			ICRSTPAR7049		3. Added SubTotal in Excel 
************************************************************************************************************************************
 23-12-2017	  S.MOHANA	  SR			ICRSTPAR7809		1.INCLUDED SALES RETURN
															2.REMOVED TAX CALCULATION
															3.ADDED RATE-SCHEMEDISCOUNT , GRANDTOTAL
************************************************************************************************************************************
 26-03-2018	  S.MOHANA	  CR			CCRSTPAR0186		Retailer Wise Sub Total Included. 
 12-07-2018   Lakshman M  BZ            ILCRSTPAR1325       negative values validataion added from core stocky.
 27-09-2018   Amuthakumar CR            CRCRSTPAR0031       Enable Configuration with Tax in Reports				
 14-10-2018	  Mohana S	  SR			ILCRSTPAR6289		Included GT Category										
 08-05-2020	  Mohana S	  CR			PARCS202100012		Included Channel and LCTR		
 23-05-2020	  Mohana S			BZ			PARCS202100013		Category taken based on Transaction	
 30-03-2020		MOHANA S     CR   PARCS202100002  Contract Pricing Optimization									
************************************************************************************************************************************/ 
BEGIN
	--- Added by Amuthakumar on 27/09/2018 CRCRSTPAR0031
	IF EXISTS(SELECT 'X' FROM MANUALCONFIGURATION (NOLOCK)	WHERE  ModuleId='Report_withTax' AND ModuleName='Report with Tax' AND Status=1 and SeqNo=1)
	BEGIN
		EXEC Proc_RptChainWiseBillDetails_withTax @Pi_RptId,@Pi_UsrId,@Pi_SnapId,@Pi_DbName,@Pi_SnapRequired,@Pi_GetFromSnap,@Pi_CurrencyId
		RETURN
	END
	-- Till Here CRCRSTPAR0031
	SET NOCOUNT ON
	
	DECLARE @FromDate			AS	DATETIME
	DECLARE @ToDate				AS	DATETIME
	DECLARE @CmpId				AS  INT 
	DECLARE @CtgLevelId			AS  INT  
	DECLARE @CtgMainId			AS  INT	
	DECLARE @CmpPrdCtgId		AS INT
	DECLARE @PrdCtgValMainId	AS INT	
	
	DECLARE @ReportType	AS INT	
	--Added By Mohana
	CREATE TABLE #Chain
	(
		[SalId] [bigint] NOT NULL,
		[BillNo] [nvarchar](50) NOT NULL,
		[BillDate] NVARCHAR(100),
		[RtrId] [int] NOT NULL,
		RtrName NVARCHAR(100),
		Ctgname NVARCHAR(100) NOT NULL,
		[PrdId] [int] NOT NULL,
		PrdName NVARCHAR(100),
		PktWgt [numeric](18, 6),
		[MRP] [numeric](18, 6) NOT NULL,
		QtyInPkt [numeric](38, 0) NULL,		
		[ChainLandRate] [numeric](18, 6) NULL,
		Amount [numeric](38, 2) NULL,
		[GrpName] NVARCHAR(100),
		[Grpid] INT,
		LCTR	[numeric](18, 6) NULL,
		Channel VARCHAR(100)
	)  
	
	
	CREATE TABLE #ChainSalesDetails
	(
		[TransType] INT NOT NULL,
		[SalId] [bigint] NOT NULL,
		[SalInvNo] [nvarchar](50) NOT NULL,
		[SalInvDate] [datetime] NOT NULL,
		[RtrId] [int] NOT NULL,
		[PrdId] [int] NOT NULL,
		[TotalPCS] [numeric](38, 0) NULL,
		[MRP] [numeric](18, 6) NOT NULL,
		[PriceId] [int] NOT NULL,
		[PrdBatid] [int] NOT NULL,
		[ChainLandRate] [numeric](18, 6) NULL,
		[SchemeDiscount] [numeric](18, 6) NULL,
		[PRDSLNO] INT NOT NULL,
		LCTR	[numeric](18, 6) NULL,
		RtrValueClassId INT
	)

	SELECT @FromDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,10,@Pi_UsrId)
	SELECT @ToDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,11,@Pi_UsrId)

	SET @CmpId =(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId))  
	SET @CtgLevelId =(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,29,@Pi_UsrId))    
	SET @CtgMainId=(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,30,@Pi_UsrId))
	SET @CmpPrdCtgId = (SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,16,@Pi_UsrId))
	SET @PrdCtgValMainId = (SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,21,@Pi_UsrId))
	
	SET @ReportType = (SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,315,@Pi_UsrId))
	--To Filter Retailers
	SELECT DISTINCT R.RtrId,RC.CtgCode,Ctgname,RC.CtgMainId,RtrValueClassId 
	INTO #FilterRetailer
	FROM Retailer R (NOLOCK),
	--RetailerValueClassMap RVCM (NOLOCK),
	Salesinvoice RVCM (NOLOCK),
	RetailerValueClass RVC (NOLOCK),
	RetailerCategory RC (NOLOCK),
	RetailerCategoryLevel RCL (NOLOCK)	
	WHERE R.Rtrid = RVCM.RtrId AND RVCM.RtrValueClassId = RVC.RtrClassId
	AND  RVC.CtgMainId=RC.CtgMainId AND  RCL.CtgLevelId=RC.CtgLevelId 
	--and  CtgLinkId IN (SELECT CtgMainId FROM RetailerCategory A(NOLOCK) where CtgCode NOT IN ('GT'))
	AND (RVC.CmpId=(CASE @CmpId WHEN 0 THEN RVC.CmpId ELSE 0 END) OR
	RVC.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId)))
	AND (RCL.CtgLevelId=(CASE @CtgLevelId WHEN 0 THEN RCL.CtgLevelId ELSE 0 END) OR  
	RCL.CtgLevelId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,29,@Pi_UsrId)))
	AND (RC.CtgMainId=(CASE @CtgMainId WHEN 0 THEN RC.CtgMainId ELSE 0 END) OR  
	RC.CtgMainId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,30,@Pi_UsrId)))
	--To Filter Retailers
	--To Filter Products
	SELECT DISTINCT E.PrdId
	INTO #FilterProduct
	FROM ProductCategoryValue C (NOLOCK)
	INNER JOIN ProductCategoryValue D (NOLOCK) ON
	D.PrdCtgValLinkCode LIKE Cast(C.PrdCtgValLinkCode AS NVARCHAR(1000)) + '%'
	INNER JOIN Product E (NOLOCK) ON D.PrdCtgValMainId = E.PrdCtgValMainId
	INNER JOIN ProductCategoryLevel L (NOLOCK) ON L.CmpPrdCtgId = C.CmpPrdCtgId	
	WHERE 
	(L.CmpId=(CASE @CmpId WHEN 0 THEN L.CmpId ELSE 0 END) OR
	L.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId))) AND
	
	(L.CmpPrdCtgId = (CASE @CmpPrdCtgId  WHEN 0 THEN L.CmpPrdCtgId ELSE 0 END) OR
	L.CmpPrdCtgId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,16,@Pi_UsrId)))
	
	AND (C.PrdCtgValMainId = (CASE @PrdCtgValMainId  WHEN 0 THEN C.PrdCtgValMainId ELSE 0 END) OR 
	C.PrdCtgValMainId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId ,21, @Pi_UsrId)))
	--To Filter Products
	
	INSERT INTO #ChainSalesDetails
	SELECT 1 AS TRANSID,S.SalId,S.SalInvNo,S.SalInvDate,S.RtrId,SP.PrdId,SUM(SP.BaseQty) TotalPCS,SP.PrdUnitMRP MRP,CASE SP.SplPriceid WHEN 0 THEN 0 ELSE  SP.Priceid END AS Priceid,SP.PrdBatid,
	--SUM(CAST(SP.PrdUom1NetRate AS NUMERIC(18,6))/Uom1ConvFact) as ChainLandRate --ICRSTPAR7049
	CAST(0 AS NUMERIC(18,6)) ChainLandRate,SUM(SP.PrdSchDiscAmount) SchDisc,SP.SlNo,0,RtrValueClassId --ADDED BY MOHANA ILCRSTPAR2313
	FROM SalesInvoice S (NOLOCK)
	INNER JOIN SalesInvoiceProduct SP (NOLOCK) ON S.SalId = SP.SalId
	WHERE SalInvDate BETWEEN @FromDate AND @ToDate AND S.DlvSts > 3
	AND EXISTS (SELECT 'C' FROM #FilterRetailer FR (NOLOCK) WHERE S.RtrId = FR.RtrId)
	AND EXISTS (SELECT 'C' FROM #FilterProduct FP (NOLOCK) WHERE SP.PrdId = FP.PrdId)
	GROUP BY S.SalId,S.SalInvNo,S.SalInvDate,S.RtrId,SP.PrdId,SP.PrdUnitMRP,SP.PriceId,SP.SplPriceid,SP.PrdBatid,SP.SlNo,RtrValueClassId 
	UNION ALL
	SELECT 2 AS TRANSID,S.ReturnID,S.ReturnCode,S.ReturnDate,S.RtrId,SP.PrdId,SUM(-1*SP.BaseQty) TotalPCS,SP.PrdUnitMRP MRP,CASE SP.SplPriceid WHEN 0 THEN 0 ELSE  SP.Priceid END AS Priceid,SP.PrdBatid,
	--SUM(CAST(SP.PrdUom1NetRate AS NUMERIC(18,6))/Uom1ConvFact) as ChainLandRate --ICRSTPAR7049
	CAST(0 AS NUMERIC(18,6)) ChainLandRate,SUM(SP.PrdSchDisAmt) SchDisc,SP.SlNo,0,RtrValueClassId  --ADDED BY MOHANA ILCRSTPAR2313
	FROM ReturnHeader S (NOLOCK)
	INNER JOIN ReturnProduct SP (NOLOCK) ON S.ReturnID = SP.ReturnID AND SP.StockTypeId IN (SELECT StockTypeId FROM StockType WHERE SystemStockType = 1)
	WHERE S.ReturnDate BETWEEN @FromDate AND @ToDate AND S.Status = 0
	AND EXISTS (SELECT 'C' FROM #FilterRetailer FR (NOLOCK) WHERE S.RtrId = FR.RtrId)
	AND EXISTS (SELECT 'C' FROM #FilterProduct FP (NOLOCK) WHERE SP.PrdId = FP.PrdId)
	GROUP BY S.ReturnID,S.ReturnCode,S.ReturnDate,S.RtrId,SP.PrdId,SP.PrdUnitMRP,SP.SplPriceid,SP.PriceId,SP.PrdBatid,SP.SlNo,RtrValueClassId 
	
	------------- commented By lakshman M ON 12/07/2018 PMS ID : ILCRSTPAR1325
	--UPDATE #ChainSalesDetails SET SchemeDiscount = abs(SchemeDiscount/TotalPCS)
	 --ADDED BY MOHANA ILCRSTPAR2313
	EXEC Proc_ReturnSalesProductTaxPercentage  @FromDate,@ToDate
	SELECT * INTO #ParleOutputTaxPercentage
	FROM ParleOutputTaxPercentage (NOLOCK)	
	UPDATE #ChainSalesDetails SET SchemeDiscount =abs (SchemeDiscount/TotalPCS)
	-------------------- Till here ----------------------------
	--ICRSTPAR7049 Till Here
	--SELECT R.PriceId,C.SplSelRate 
	--INTO #ExistingSpecialPrice
	--FROM #ChainSalesDetails R (NOLOCK),
	--SpecialRateAftDownLoad_Calc C (NOLOCK)
	--WHERE R.PriceId = CAST(REPLACE(C.ContractPriceIds,'-','') AS BIGINT)
	
	SELECT DISTINCT C.PrdBatid,C.Priceid,C.PrdbatDetailValue INTO #NormalPrice FROM #ChainSalesDetails A INNER JOIN Productbatch B ON A.Prdbatid=B.PrdBatid
	INNER JOIN ProductBatchDetails C ON  B.PRDBATID = C.PRDBATID AND DEFAULTPRICE = 1
	and SLNO=3	
	
	--ADDED BY MOHANA
	
	--SELECT DISTINCT Priceid,PrdBatDetailValue SplSelRate  INTO #ExistingSpecialPrice FROM
	--(
	--SELECT D.PriceId,D.PrdBatDetailValue 
	--FROM #ChainSalesDetails M (NOLOCK),
	--ProductBatchDetails D (NOLOCK) 
	--WHERE M.PriceId = D.PriceId AND D.SLNo = 3
	--AND PriceCode LIKE '%-Spl Rate-%'   
	--UNION 
	--SELECT D.PriceId,D.PrdBatDetailValue 
	--FROM #ChainSalesDetails M (NOLOCK),
	--ProductBatchDetails D (NOLOCK) 
	--WHERE M.PriceId = D.PriceId AND D.SLNo = 3
	--AND PriceCode LIKE '%SplRate%'  
	--)A
	
	SELECT A.SalId ,A.PrdId,A.PrdBatid,A.TransType,A.PRDSLNO,SplRate INTO #Sales  FROM #ChainSalesDetails A  
	INNER JOIN SalesInvoiceProduct B ON A.Salid = B.Salid AND A.Prdid =B.PrdId AND A.PrdBatid = B.PrdBatId AND A.PRDSLNO = B.SlNo AND TransType = 1
	SELECT  A.SalId ,A.PrdId,A.PrdBatid,A.TransType,A.PRDSLNO,SplRate INTO #Return FROM #ChainSalesDetails A  
	INNER JOIN ReturnHeader B ON A.SalId = B.ReturnID AND TransType = 2 
	INNER JOIN ReturnProduct C ON C.ReturnID = B.ReturnID 
	INNER JOIN SalesInvoiceProduct D ON B.Salid = D.Salid AND D.Prdid =C.PrdId AND D.PrdBatid = C.PrdBatId AND D.SLNO = C.ActSalRowId 
	
	--UPDATE R SET R.ChainLandRate = (S.SplSelRate-R.SchemeDiscount)
	--FROM #ChainSalesDetails R (NOLOCK),
	--#ExistingSpecialPrice S (NOLOCK)
	--WHERE R.PriceId = S.PriceId		
	UPDATE R SET R.ChainLandRate = (S.SplRate -R.SchemeDiscount) 
	FROM #ChainSalesDetails R (NOLOCK) INNER JOIN #Sales  S (NOLOCK) ON R.SalId =S.SalId AND R.Prdid = S.Prdid 
	AND R.Prdbatid = S.PrdBatid AND R.Prdslno =S.PRDSLNO AND R.TransType =S.TransType 
	INNER JOIN #ParleOutputTaxPercentage P ON R.Salid = P.Salid AND P.SalId = S.Salid AND P.PrdSlno = R.PRDSLNO AND S.PRDSLNO =P.PrdSlno 
	 AND  R.TransType=P.TRANSID AND R.PriceId <>0

	 UPDATE R SET R.ChainLandRate = (S.SplRate-R.SchemeDiscount) 
	FROM #ChainSalesDetails R (NOLOCK) INNER JOIN #Return S (NOLOCK) ON R.SalId =S.SalId AND R.Prdid = S.Prdid 
	AND R.Prdbatid = S.PrdBatid AND R.Prdslno =S.PRDSLNO AND R.TransType =S.TransType 
	INNER JOIN #ParleOutputTaxPercentage P ON R.Salid = P.Salid AND P.SalId = S.Salid AND P.PrdSlno = R.PRDSLNO AND S.PRDSLNO =P.PrdSlno 
	 AND  R.TransType=P.TRANSID AND R.PriceId <>0
	--Till Here ICRSTPAR7049
	
	--UPDATE A SET A.ChainLandRate = (B.PrdbatDetailValue-A.SchemeDiscount) FROM #ChainSalesDetails A INNER JOIN #NORMALPRICE B ON A.PRDBATID=B.PRDBATID WHERE A.ChainLandRate=0  
	
	UPDATE A SET A.ChainLandRate = (B.PrdbatDetailValue -A.SchemeDiscount) 
	FROM #ChainSalesDetails A INNER JOIN #NORMALPRICE B ON A.PRDBATID=B.PRDBATID
	INNER JOIN #ParleOutputTaxPercentage P ON  A.TransType=P.TRANSID
	AND A.SalId = P.SALID AND A.PRDSLNO = P.PRDSLNO
	WHERE A.ChainLandRate=0  
	--TILL HERE
	
	UPDATE A SET LCTR = ROUND(((A.TotalPCS *(C.PrdBatDetailValue))+(A.TotalPCS*C.PrdBatDetailValue)*(P.TaxPerc/100)),2)   
	FROM #ChainSalesDetails A INNER JOIN Productbatch B ON A.Prdbatid=B.PrdBatid
	INNER JOIN ProductBatchDetails C ON  B.PRDBATID = C.PRDBATID AND DEFAULTPRICE = 1 AND B.DefaultPriceId = C.Priceid and SLNO=3	
	INNER JOIN #ParleOutputTaxPercentage P ON A.SalId = P.SalId AND A.TransType = P.TransId AND P.PrdSlno = A.PRDSLNO 
	INSERT INTO #Chain(SalId,BillNo,BillDate,RtrId,RtrName,Ctgname,PrdId,PrdName,PktWgt,MRP,QtyInPkt,ChainLandRate,Amount,channel,LCTR)
	SELECT S.SalId,S.SalInvNo BillNo,CONVERT(VARCHAR(10),S.SalInvDate,121) as  BillDate,S.RtrId,R.RtrName,F.CtgName,P.PrdId,P.PrdName,
	PrdWgt PktWgt,MRP,TotalPCS QtyInPkt,ChainLandRate, --ICRSTPAR7049
	CAST(0 AS NUMERIC(18,6)) Amount,RC1.CtgName,LCTR 
	FROM #ChainSalesDetails S (NOLOCK)
	INNER JOIN Product P (NOLOCK) ON S.PrdId = P.PrdId
	INNER JOIN Retailer R (NOLOCK) ON S.RtrId = R.RtrId
	INNER JOIN #FilterRetailer F ON S.Rtrid = F.Rtrid AND R.Rtrid = F.Rtrid AND F.RtrvalueClassId = S.RtrValueClassId
	INNER JOIN RetailerCategory RC ON RC.CtgMainId = F.CtgMainId 
	INNER JOIN RetailerCategory RC1 ON RC1.CtgMainId = RC.CTGLINKID 
	UPDATE C SET C.Amount = QtyInPkt * ChainLandRate
	FROM #Chain C (NOLOCK)
	
	--Nagarajan on 29.08.2017 as per PMS : ICRSTPAR5917
	--SELECT S.SalId,S.RtrId,SP.PrdId,SUM(SPT.TaxAmount) TaxAmount
	--INTO #SalesInvoiceProductTax
	--FROM SalesInvoice S (NOLOCK)
	--INNER JOIN SalesInvoiceProduct SP (NOLOCK) ON S.SalId = SP.SalId
	--INNER JOIN SalesInvoiceProductTax SPT (NOLOCK) ON SPT.SalId = SP.SalId AND SPT.PrdSlNo = SP.SlNo 
	--WHERE SalInvDate BETWEEN @FromDate AND @ToDate AND S.DlvSts > 3 AND SPT.TaxAmount > 0
	--AND EXISTS (SELECT 'C' FROM #FilterRetailer FR (NOLOCK) WHERE S.RtrId = FR.RtrId)
	--AND EXISTS (SELECT 'C' FROM #FilterProduct FP (NOLOCK) WHERE SP.PrdId = FP.PrdId)
	--GROUP BY S.SalId,S.RtrId,SP.PrdId
	
	--UPDATE C SET C.Amount = C.Amount + ISNULL(SPT.TaxAmount,0)
	--FROM #Chain C (NOLOCK)
	--INNER JOIN #SalesInvoiceProductTax SPT ON SPT.SalId=C.SalId AND SPT.RtrId = C.SalId AND SPT.PrdId=C.PrdId
	--WHERE C.Amount > 0
	--Till here
	-- ICRSTPAR7049 Bill No Column Change
	
	
	IF EXISTS (SELECT 'C' FROM SYSOBJECTS WHERE XTYPE = 'U' AND NAME = 'RptChainWiseBillDetails_Excel')
	DROP TABLE RptChainWiseBillDetails_Excel
		 
	
	SELECT SalId,CHannel,Ctgname,RtrName,BillNo,BillDate,RtrId,PrdId,PrdName,PktWgt,MRP,QtyInPkt,ROUND(ChainLandRate,2,1) ChainLandRate,Amount,LCTR,Grpid,GrpName
	INTO RptChainWiseBillDetails_Excel
	FROM #Chain (NOLOCK) Order by  Ctgname,RtrName
	
	UPDATE RptChainWiseBillDetails_Excel SET Grpname='Retailer'
	
 	SELECT  Row_numbeR() Over(Order by  Ctgname,Rtrid Asc) as Row ,Rtrid,Rtrname,Ctgname INTO #Excel  from RptChainWiseBillDetails_Excel  GROUP BY Rtrid ,Rtrname,Ctgname
 	UPDATE A SET A.Grpid = B.row from RptChainWiseBillDetails_Excel A INNER JOIN #Excel B ON A.Rtrid = B.Rtrid 
	 	
	DELETE FROM RptDataCount WHERE RptId = @Pi_RptId AND UserId = @Pi_UsrId
	INSERT INTO RptDataCount (RptId,RecCount,ErrNo,UserId)
	SELECT @Pi_RptId,Count(*) as RecCount,0,@Pi_UsrId FROM RptChainWiseBillDetails_Excel
	
	SELECT * FROM RptChainWiseBillDetails_Excel Order By Ctgname,BillNo
	
	--INSERT INTO RptChainWiseBillDetails_Excel
	--SELECT 0 SalId,'' Ctgname,'' RtrName,'TOTAL ' BillNo,'' BillDate,0 RtrId,0 PrdId, '' PrdName,0 PktWgt,0 MRP,SUM(QtyInPkt) QtyInPkt,SUM(ChainLandRate) ChainLandRate,
	--SUM(Amount) Amount,1000,CtgName  FROM RptChainWiseBillDetails_Excel	
	--group by CtgName
	--UNION  
	--SELECT 0 SalId,'' Ctgname,'' RtrName,'Grand Total ' BillNo,'' BillDate,0 RtrId,0 PrdId, '' PrdName,0 PktWgt,0 MRP,SUM(QtyInPkt) QtyInPkt,SUM(ChainLandRate) ChainLandRate,
	--SUM(Amount) Amount,10000,'zzzzzz' FROM RptChainWiseBillDetails_Excel	

	INSERT INTO RptChainWiseBillDetails_Excel
	SELECT 0 SalId,'' Channel ,'' Ctgname,'' RtrName,'SUB TOTAL ' BillNo,'' BillDate,RtrId,0 PrdId, '' PrdName,0 PktWgt,0 MRP,SUM(QtyInPkt) QtyInPkt,SUM(ChainLandRate) ChainLandRate,
	SUM(Amount) Amount,0 LCTR,Max(Grpid),'SubTotal' FROM RptChainWiseBillDetails_Excel 
	group by RtrId
	UNION   
	SELECT 0 SalId,'' Channel,Ctgname,'' RtrName,'TOTAL ' BillNo,'' BillDate,0 RtrId,0 PrdId, '' PrdName,0 PktWgt,0 MRP,SUM(QtyInPkt) QtyInPkt,SUM(ChainLandRate) ChainLandRate,
	SUM(Amount) Amount,0 LCTR,Max(Grpid),'ZSubStotal'  FROM RptChainWiseBillDetails_Excel 
	group by   Ctgname
	UNION  
	SELECT 0 SalId,'' Channel,'' Ctgname,'' RtrName,'Grand Total ' BillNo,'' BillDate,0 RtrId,0 PrdId, '' PrdName,0 PktWgt,0 MRP,SUM(QtyInPkt) QtyInPkt,SUM(ChainLandRate) ChainLandRate,
	SUM(Amount) Amount,0 LCTR,1000000,'zzzzzzzzz' FROM RptChainWiseBillDetails_Excel
	
		
	DELETE FROM RptExcelHeaders WHERE RptId = 288
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,1,'SalId','SalId',0,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,2,'Channel','Channel',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,3,'CtgName','Category Name',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,4,'RtrName','Party Name',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,5,'BillNo','BillNo',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,6,'BillDate','BillDate',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,7,'RtrId','RtrId',0,1)
 	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,8,'PrdId','PrdId',0,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,9,'PrdName','Product Name',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,10,'PktWgt','Pkt Wgt',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,11,'MRP','MRP',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,12,'QtyInPkt','Quantity in Pkts',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,13,'ChainLandRate','Chain Landing Rate',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,14,'Amount','Amount',1,1)	
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,15,'LCTR','LCTR',1,1)	
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,16,'Grpid','Grpid',0,1)	
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,17,'GrpName','GrpName',0,1)	
	RETURN
END
GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE NAME='RtrLevel' AND id = OBJECT_ID('ContractPricingMaster'))
BEGIN
	ALTER TABLE ContractPricingMaster ADD RtrLevel INT 
END
GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE NAME='SplRate' AND id = OBJECT_ID('SalesInvoiceProduct'))
BEGIN
	ALTER TABLE SalesInvoiceProduct ADD SplRate NUMERIC(38,6) DEFAULT 0
END
GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE NAME='OrgSelRate' AND id = OBJECT_ID('SalesInvoiceProduct'))
BEGIN
	ALTER TABLE SalesInvoiceProduct ADD OrgSelRate NUMERIC(38,6)   DEFAULT 0
END
GO
IF NOT EXISTS(SELECT * FROM SySObjects WHERE NAME ='NewContractPricingCreation' AND TYPE='U')
BEGIN
	CREATE TABLE NewContractPricingCreation
	(
		CPRefNo		NVARCHAR(100),
		Status		INT,
		CreatedDate	DATETIME
	)

END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_NewSpecialRateInsert' AND TYPE='P')
DROP PROCEDURE Proc_NewSpecialRateInsert
GO
CREATE PROCEDURE Proc_NewSpecialRateInsert
AS
BEGIN
	
	IF EXISTS (SELECT * FROM NewContractPricingCreation)
	BEGIN
		RETURN
	END

	--PRICE UPDATION
	SELECT DISTINCT SalId,Prdbatid,PriceId,SplPriceId,CAST (0 AS NUMERIC(38,6)) Splrate,CAST (0 AS NUMERIC(38,6)) OrgSelRate INTO #PriceUpdate FROM SalesInvoiceProduct  
	WHERE SPLPRICEID <>0 ORDER BY  1 DESC

	SELECT DISTINCT SalId,Prdbatid,PriceId, CAST (0 AS NUMERIC(38,6)) OrgSelRate INTO #SelrateUpdate FROM SalesInvoiceProduct  
	WHERE SPLPRICEID =0 ORDER BY  1 DESC

	UPDATE B SET Splrate = PrdBatDetailValue  FROM ProductBatchDetails A INNER JOIN #PriceUpdate B ON A.PriceId = B.PriceId AND A.PrdBatId = B.PrdBatId  AND SLno = 3

	UPDATE B SET OrgSelRate = PrdBatDetailValue  FROM ProductBatchDetails A INNER JOIN #PriceUpdate B ON A.PriceId = B.SplPriceId AND A.PrdBatId = B.PrdBatId  AND SLno = 3

	UPDATE B SET OrgSelRate = PrdBatDetailValue  FROM ProductBatchDetails A INNER JOIN #SelrateUpdate B ON A.PriceId = B.PriceId AND A.PrdBatId = B.PrdBatId  AND SLno = 3

	UPDATE SalesInvoiceProduct SET Splrate =0,OrgSelRate=0

	UPDATE A SET Splrate = B.Splrate ,OrgSelRate=B.OrgSelRate  FROM SalesInvoiceProduct A 
	INNER JOIN #PriceUpdate B ON A.SalId = B.SalId AND A.PriceId =B.PriceId AND A.SplPriceId =B.SplPriceId AND A.Prdbatid =B.Prdbatid
 
	UPDATE A SET  OrgSelRate=B.OrgSelRate  FROM SalesInvoiceProduct A 
	INNER JOIN #SelrateUpdate B ON A.SalId = B.SalId AND A.PriceId =B.PriceId AND A.Prdbatid =B.Prdbatid
	-- TILL HERE

	SELECT DISTINCT RtrCtgCode,CASE RtrCode WHEN 'ALL' THEN RtrCtgValueCode ELSE 'ALL' END RtrCtgValueCode,Rtrcode,PrdCtgLevel,ValidFromDate,ValidTillDate,CreatedDate,
	CPRefNO,ComConRefName,Prdccode ,PrdCtgcode,DiscountPerc,ApplyOn,Type    
	INTO #SpecialRate
	FROM SpecialRate_Track A INNER JOIN ContractPricingMaster B ON A.CPRefno = B.ComConRefNo AND ValidFromDate>='2020-06-01'
	ORDER BY CPRefno


	INSERT INTO #SpecialRate
	SELECT DISTINCT RetCategoryLevel,RetCatLevelValue,CASE RetCategoryLevel WHEN 'RETAILER' THEN RetCatLevelValue ELSE 'ALL' END AS RTRCODE,
	PrdCategoryLevel,EffFromDate,EffToDate,CreatedDate,CPRefCode,CPRefName , CASE PrdCategoryLevel WHEN 'PRODUCT' THEN PrdCategoryLevelValue ELSE '' END AS PrdCcode,
	PrdCategoryLevelValue,DiscPer,ApplyOn,Type 
	FROM
	(
	SELECT DISTINCT RetCategoryLevel,RetCatLevelValue,PrdCategoryLevel,PrdCategoryLevelValue,EffFromDate,EffToDate,CreatedDate,SPWTax,CPRefCode,CPRefName,DiscPer,ApplyOn,Type 
	FROM Cn2Cs_Prk_SpecialDiscount_NP WHERE EffFromDate>='2020-06-01'
	UNION
	SELECT DISTINCT RetCategoryLevel,RetCatLevelValue,PrdCategoryLevel,PrdCategoryLevelValue,EffFromDate,EffToDate,CreatedDate,SPWTax,CPRefCode,CPRefName,DiscPer,ApplyOn,Type 
	FROM CN2CS_PRK_SPECIALDISCOUNT WHERE EffFromDate>='2020-06-01'
	 )A


	SELECT  DISTINCT RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCtgLevel,ValidFromDate,ValidTillDate,CreatedDate,CPRefNO ,ComConRefName,
	CASE PrdCtgLevel  WHEN 'PRODUCT' THEN 0 ELSE 1 END DisplayMode,
	CASE ApplyOn  WHEN 'MRP' THEN 1 WHEN 'SELLINGRATE' THEN 3 WHEN 'PURCHASERATE' THEN 2 END AllowDiscount
	INTO #SpecialRate_Final  
	FROM #SpecialRate
	ORDER BY CreatedDate,CPRefNO 

	SELECT ROW_NUMBER() OVER (ORDER BY Createddate,CPRefNO,CtgLevelId,CmpPrdCtgId) row_num,
	CtgLevelId,CmpPrdCtgId,CPRefNO,ComConRefName,Createddate,ValidFromDate,ValidTillDate,
	 Rtrtype,DisplayMode,AllowDiscount,0 STATUS
	INTO #SplRate_Header
	FROM (
	SELECT DISTINCT CtgLevelId,CmpPrdCtgId,CPRefNO,ComConRefName,Createddate,ValidFromDate,ValidTillDate,CASE UPPER(RTRCODE) WHEN 'ALL' THEN 0 ELSE 1 END Rtrtype,
	DisplayMode,AllowDiscount 
	FROM #SpecialRate_Final A INNER JOIN RetailerCategoryLevel B ON A.RTRCTGCODE =B.CtgLevelName AND RtrCode = 'ALL' 
	INNER JOIN ProductCategoryLevel C ON A.PrdCtgLevel  = C.CmpPrdCtgName
	UNION 
	SELECT DISTINCT 0 CtgLevelId,CmpPrdCtgId,CPRefNO,ComConRefName,Createddate,ValidFromDate,ValidTillDate,CASE UPPER(A.RTRCODE) WHEN 'ALL' THEN 0 ELSE 1 END Rtrtype,
	DisplayMode,ALLOWDISCOUNT
	FROM #SpecialRate_Final A INNER JOIN Retailer B ON A.RtrCode =B.CmpRtrCode AND A.RtrCode <> 'ALL' 
	INNER JOIN ProductCategoryLevel C ON A.PrdCtgLevel = C.CmpPrdCtgName
	)A ORDER BY CreatedDate,CPRefNO 


	UPDATE A SET STATUS = B.Status   FROM #SplRate_Header A 
	INNER JOIN (SELECT DISTINCT ComConRefNo,STATUS  FROM ContractPricingMaster WHERE  ValidFromDate>='2020-06-01')B ON B.ComConRefNo = A.CPRefNO 
	AND ComConRefNo IS NOT NULL

	UPDATE ContractPricingMaster  SET Status = 0 WHERE ComConRefNo  IS NULL

	UPDATE ContractPricingMaster SET Status = 0 WHERE ComConRefNo  IN(SELECT CPRefNO FROM #SplRate_Header)
	 
	--/*
	--ADD CMP ID
	--ADD RTRGROUP ID
	--ADD CONREFNO
	-- If rtrcategory -- for 2 is o else rtrid
	--*/
	 
	DECLARE @ContractId INT
	DECLARE @CmpId INT
	SELECT @CmpId = CmpiD FROM Company WHERE CmpcOde='PRL'
	SELECT @ContractId = MAX(ContractId)FROM ContractPricingMaster 

	INSERT INTO ContractPricingMaster (ContractId,CmpId,CtgLevelId,CtgMainId,RtrClassId,CmpPrdCtgId,PrdCtgValMainId,RtrId,RtrTaxGroupId,Availability,
		LastModBy,LastModDate,AuthId,AuthDate,DisplayMode,ConRefNo,ConDate,ValidFromDate,ValidTillDate,Status,AllowDiscount,ComConRefNo,ComConRefName,RtrLevel) 
	SELECT @ContractId + row_num,@CmpId,CtgLevelId,0,0,CmpPrdCtgId ,0,0,0,1,1,GETDATE(),1,GETDATE(),DisplayMode,'',GETDATE(),ValidFromDate, 
	ValidTillDate,Status,ALLOWDISCOUNT,CPRefNO,ComConRefName,RTRTYPE 
	 FROM #SplRate_Header

	INSERT INTO ContractPricingAttributes(ContractId,AttrType,Attrid,AuthDate)
	SELECT DISTINCT @ContractId +row_num ,1,CtgMainId,GETDATE () from #SPECIALRATE_FINAL A 
	INNER JOIN  RetailerCategory R ON A.RtrCtgValueCode=R.CtgCode
	INNER JOIN #SplRate_Header B ON A.CPRefNO=B.CPRefNO WHERE  B.CtgLevelId <>0
	UNION ALL
	SELECT  @ContractId +row_num,2,0,GETDATE()	FROM #SplRate_Header B WHERE CtgLevelId <>0
	UNION ALL
	select DISTINCT @ContractId +row_num ,1,0 CtgMainId,GETDATE () from #SPECIALRATE_FINAL A  
	INNER JOIN #SplRate_Header B ON A.CPRefNO=B.CPRefNO WHERE  B.CtgLevelId = 0 AND RtrCtgValueCode = 'ALL'
	UNION ALL
	SELECT  @ContractId +row_num,2,RtrId,GETDATE()	FROM #SplRate_Header B INNER JOIN #SPECIALRATE_FINAL A 
	ON A.CPRefNO = B.CPRefNO AND A.RtrCtgCode ='Retailer'
	INNER JOIN Retailer C ON A.Rtrcode = C.CmpRtrCode
	WHERE CtgLevelId =0 AND RtrCtgValueCode= 'ALL'

	INSERT INTO ContractPricingDetails (ContractId,PrdId,PrdBatId,PriceId,Discount,FlatAmtDisc,Availability,LastModBy,LastModDate,AuthId,AuthDate,
	CtgValMainId,ClaimablePercOnMRP,ApplyOn,WithTax,SpecialPrice)
	SELECT DISTINCT @ContractId+b.row_num,C.PrdCtgValMainId,0,0,DiscountPerc,0,1,99,GETDATE(),1,GETDATE(),0,0,
	CASE UPPER(LTRIM(RTRIM([Type]))) WHEN 'MARK UP' THEN 1 WHEN 'MARK DOWN' THEN 2 ELSE 0 END  AS ApplyOn,0,0
	FROM #SPECIALRATE A INNER JOIN #SplRate_Header B ON A.CPRefNO=B.CPRefNO 
	INNER JOIN ProductCategoryValue C ON C.PrdCtgValCode = A.PrdCtgcode 
 
	UPDATE Counters SET CurrValue = (SELECT ISNULL(MAX(CONTRACTID),0) FROM ContractPricingMaster) WHERE TabName ='ContractPricingMaster'

	

	INSERT INTO NewContractPricingCreation(CPRefNo,Status,CreatedDate)
	SELECT DISTINCT CPRefNO,Status,GETDATE() FROM #SplRate_Header 

	IF NOT EXISTS (SELECT * FROM NewContractPricingCreation)
	BEGIN
		INSERT INTO NewContractPricingCreation(CPRefNo,Status,CreatedDate)
		SELECT 'NOCPAvailable',0,GETDATE()
	END
END
GO
EXEC Proc_NewSpecialRateInsert
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_Cn2Cs_ProductBatch' AND TYPE='P')
DROP PROCEDURE Proc_Cn2Cs_ProductBatch
GO
/*   
   BEGIN TRANSACTION  
   delete FROM Errorlog
   --delete from Productbatchdetails where PrdbatId =965
   --delete from productbatchlocation where prdid = 2370 and prdbatid = 965
   --delete from stockledger where prdid = 2370 and prdbatid = 965
   --delete from Productbatch where PrdId =2370
   --exec Proc_Cn2Cs_Product 0  
   EXEC Proc_Cn2Cs_ProductBatch 0  
   --select * from contractpricingdetails where prdid =4676  
   --SELECT * FROM Productbatch WITH(NOLOCK) where PrdId =2370 order by 2 desc  
   --SELECT * FROM Productbatchdetails WITH(NOLOCK)   order by 1 desc  
   --select 'Ad',* from specialrateaftdownload where prdccode ='10310116150141114PKT00110N'
   --SELECT 'A',* FROM ProductBatchPriceWithCounter WITH(NOLOCK) 
   select *from errorlog  
   ROLLBACK TRANSACTION  
*/  
CREATE PROCEDURE Proc_Cn2Cs_ProductBatch
(  
       @Po_ErrNo INT OUTPUT  
)  
AS  
/***************************************************************************************************  
* PROCEDURE  : Proc_Cn2Cs_ProductBatch  
* PURPOSE  : To Insert and Update records in the Tables ProductBatch and ProductBatchDetails  
* CREATED BY : Nandakumar R.G  
* CREATED DATE : 12/04/2010  
* MODIFIED      : Sathishkumar Veeramani  
* PURPOSE  : New Product Batch - Special Rate Created  
* MODIFIED DATE : 13/09/2012  
* MODIFIED      : Murugan.R  
* PURPOSE  : Batch Optimization  and Akzonabal Price change  
* MODIFIED DATE : 13/09/2012  
* DATE      AUTHOR     DESCRIPTION  
-----------------------------------------------------------------------------------------------------  
* 06-06-2019 MOHANA       CR   CRCRSTPAR0058   INCLUDED CATEGORY WISE DOWNLOAD FOR SPL RATE  
* 13-08-2019 Lakshman M   BZ   ILCRSTPAR5522   While downlaod new product specail discount create validation missing in core stocky.
* 18-09-2019 Lakshman M   BZ   ILCRSTPAR5989   while download contarct pricing taking time script level validation optimised script has been changed. 
* 05-12-2019 Deepan       CR   CRCRSTPAR0083   LCTR Amount Included 
* 23-03-2020 MOHANA S     CR   PARCS202100002  Contract Pricing Optimization
*****************************************************************************************************/  
SET NOCOUNT ON  
BEGIN  
 SET @Po_ErrNo =0  
 IF NOT EXISTS(SELECT DISTINCT PrdCCode FROM Cn2Cs_Prk_ProductBatch WITH (NOLOCK) WHERE DownLoadFlag='D') RETURN  
 --Product batch configuration  For Aznoble Client  
 IF EXISTS(SELECT Status FROM Configuration where ModuleId='GENCONFIG33' and Status=1)  
  BEGIN  
   DELETE FROM ProductBatchEeffectiveDate WHERE UpdateFlag='Y'  
   INSERT INTO ProductBatchEeffectiveDate(PrdCCode,PrdBatCode,ManufacturingDate,ExpiryDate,  
   EffectiveDate,MRP,ListPrice,SellingRate,ClaimRate,AddRate1,AddRate2,  
   AddRate3,AddRate4,AddRate5,AddRate6,UpdateFlag)      
   SELECT PrdCCode,PrdBatCode,ManufacturingDate,ExpiryDate,EffectiveDate,  
   MRP,ListPrice,SellingRate,ClaimRate,AddRate1,AddRate2,AddRate3,  
   AddRate4,AddRate5,AddRate6,'N'   
   FROM Cn2Cs_Prk_ProductBatch(nolock) WHERE DownLoadFlag='D' AND EffectiveDate>CONVERT(DATETIME ,CONVERT(VARCHAR(10),GETDATE(),121),121)  
   ORDER BY ManufacturingDate ASC --Muthuvel  
   DELETE FROM Cn2Cs_Prk_ProductBatch  WHERE DownLoadFlag='D' AND EffectiveDate>CONVERT(DATETIME ,CONVERT(VARCHAR(10),GETDATE(),121),121)  
   --Product Batch and Price Insert For Aznoble Client  
   EXEC Proc_ValidateBatchLDEeffectiveDate  
   RETURN  
  END  
 IF EXISTS (SELECT * FROM SysObjects WHERE Name = 'PrdBatToAvoid' AND XTYPE = 'U')  
 BEGIN  
  DROP TABLE PrdBatToAvoid   
 END  
 CREATE TABLE PrdBatToAvoid  
 (  
  PrdCCode NVARCHAR(200),  
  PrdBatCode NVARCHAR(200)  
 )  
 DECLARE @ExistingBatchDetails TABLE  
 (  
  PrdId  NUMERIC(18,0),  
  PrdCCode VARCHAR(100),  
  PrdBatCode VARCHAR(100),  
  PriceCode VARCHAR(500),  
  OldLSP  NUMERIC(18,0),  
  PrdBatId NUMERIC(18,0),  
  PriceId  NUMERIC(18,0)  
 )  
 DECLARE @ProductBatchWithCounter TABLE  
 (  
  Slno   NUMERIC(18,0) IDENTITY(1,1),  
  TransNo   NUMERIC(18,0),  
  PrdId   NUMERIC(18,0),  
  PrdCCode  VARCHAR(100),  
  PrdBatCode  VARCHAR(100),  
  MnfDate   DATETIME,  
  ExpDate   DATETIME    
 )   
 DECLARE @ProductBatchPriceWithCounter TABLE  
 (  
  Slno   NUMERIC(18,0) IDENTITY(1,1),  
  TransNo   NUMERIC(18,0),  
  PrdId   NUMERIC(18,0),  
  PrdBatId  NUMERIC(18,0),  
  PriceCode  NVARCHAR(1000),  
  MRP    NUMERIC(18,6),  
  ListPrice  NUMERIC(18,6),  
  SellingRate  NUMERIC(18,6),  
  ClaimRate  NUMERIC(18,6),  
  AddRate1  NUMERIC(18,6)  
 )  
 DECLARE @ContractPrice TABLE  
 (  
    PrdId NUMERIC(18,0),  
    PrdBatId NUMERIC(18,0)  
 )  
 DECLARE @ContractBatchPrice TABLE  
    (  
    ContractId       NUMERIC(18,0),  
    CtgMainId        NUMERIC(18,0),  
    PrdId            NUMERIC(18,0),  
    PrdBatId         NUMERIC(18,0),  
    PriceId          NUMERIC(18,0),  
    PriceCode        NVARCHAR(500)  
    )  
    DECLARE @ProductBatchDetails TABLE  
 (  
    PrdId                NUMERIC(18,0),  
    PrdBatId      NUMERIC(18,0),  
    PriceId              NUMERIC(18,0),  
    PriceCode            NVARCHAR(500),  
    NewBatchId           NUMERIC(18,0),  
    Slno                 INT,  
    PrdBatDetailValue    NUMERIC(36,4),  
    NewPriceId           NUMERIC(18,0)  
 )  
 --Added By Sathishkumar Veeramani 2015/01/08  
 DECLARE @ExistingSellingPriceDetails TABLE  
 (  
     PrdId        NUMERIC(18,0),  
     PrdBatId     NUMERIC(18,0),  
     PriceId      NUMERIC(18,0)  
 )  
 DECLARE @ExistingListPriceDetails TABLE  
 (  
     PrdId        NUMERIC(18,0),  
     PrdBatId     NUMERIC(18,0),  
     PriceId      NUMERIC(18,0)  
 )  
 --Till Here    
 DECLARE @BatSeqId   AS INT  
 DECLARE @ValDiffRefNo  AS VARCHAR(100)  
 DECLARE @ExistPrdBatMaxId AS  INT  
 DECLARE @NewPrdBatMaxId  AS  INT   
 DECLARE @ContPriceId  AS  NUMERIC(18,0)  
 DECLARE @OldPriceIdExt   AS  NUMERIC(18,0)  
 DECLARE @OldPriceId   AS  NUMERIC(18,0)  
 DECLARE @NewPriceId   AS  INT  
 DECLARE @ContPrdId          AS  INT  
    DECLARE @ContPrdBatId       AS  INT  
    DECLARE @ContPriceId1       AS  INT  
    DECLARE @PriceId            AS  INT   
    DECLARE @PriceBatch         AS  INT  
    DECLARE @BatchTransfer  AS INT  
 DECLARE @Po_BatchTransfer AS INT  
 SELECT @OldPriceId=ISNULL(MAX(PriceId),0) FROM ProductBatchDetails WITH (NOLOCK)    
 SELECT @BatSeqId=MAX(BatchSeqId) FROM BatchCreationMaster WITH (NOLOCK)  
 SELECT @ExistPrdBatMaxId=ISNULL(MAX(PrdBatId),0) FROM ProductBatch WITH (NOLOCK)  
 SET @Po_ErrNo =0  
 IF EXISTS(SELECT DISTINCT PrdCCode FROM Cn2Cs_Prk_ProductBatch WITH (NOLOCK)  
 WHERE PrdCCode NOT IN (SELECT PrdCCode FROM Product WITH (NOLOCK)) AND DownLoadFlag='D')  
 BEGIN  
  INSERT INTO PrdBatToAvoid(PrdCCode,PrdBatCode)  
  SELECT DISTINCT PrdCCode,PrdBatCode FROM Cn2Cs_Prk_ProductBatch WITH (NOLOCK)  
  WHERE PrdCCode NOT IN (SELECT PrdCCode FROM Product WITH (NOLOCK)) AND DownLoadFlag='D'  
  INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)  
  SELECT DISTINCT 1,'Product Batch','PrdCCode','Product :'+PrdCCode+' not available'  
  FROM Cn2Cs_Prk_ProductBatch WITH (NOLOCK) WHERE PrdCCode NOT IN (SELECT PrdCCode FROM Product WITH (NOLOCK))   
  AND DownLoadFlag='D'  
  --->Added By Nanda on 05/05/2010  
  INSERT INTO ReDownloadRequest(DistCode,Process,RefNo,Download,PrdCCode,PrdBatCode,UploadFlag)  
  SELECT DISTINCT DistCode,'Product Batch',PrdBatCode,'Product',PrdCCode,'','N' FROM Cn2Cs_Prk_ProductBatch WITH (NOLOCK)   
  WHERE PrdCCode NOT IN (SELECT PrdCCode FROM Product WITH (NOLOCK)) AND DownLoadFlag='D'  
  --->Till Here      
 END  
 IF EXISTS(SELECT DISTINCT PrdCCode FROM Cn2Cs_Prk_ProductBatch WITH (NOLOCK)  
 WHERE LEN(ISNULL(PrdBatCode,''))=0  AND DownLoadFlag='D')  
 BEGIN  
  INSERT INTO PrdBatToAvoid(PrdCCode,PrdBatCode)  
  SELECT DISTINCT PrdCCode,PrdBatCode FROM Cn2Cs_Prk_ProductBatch WITH (NOLOCK)  
  WHERE LEN(ISNULL(PrdBatCode,''))=0 AND DownLoadFlag='D'  
  INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)  
  SELECT DISTINCT 1,'Product Batch','PrdBatCode','Batch Code should not be empty for Product:'+PrdCCode  
  FROM Cn2Cs_Prk_ProductBatch WITH (NOLOCK)  
  WHERE LEN(ISNULL(PrdBatCode,''))=0 AND DownLoadFlag='D'  
 END  
 INSERT INTO @ExistingBatchDetails (PrdId,PrdCCode,PrdBatCode,PriceCode,OldLSP,PrdBatId,PriceId)  
 SELECT DISTINCT B.PrdId,B.PrdCCode,A.PrdBatCode,A.PrdBatCode+'-'+CAST(MRP AS NVARCHAR(25))+'-'+CAST(ListPrice AS NVARCHAR(25))+'-'+  
 CAST(SellingRate AS NVARCHAR(25))+'-'+CAST(ClaimRate AS NVARCHAR(25))+'-'+CAST(AddRate1 AS NVARCHAR(25)) AS PriceCode,  
 ISNULL(D.PrdBatDetailValue,0) AS OldLSP,C.PrdBatId,D.PrdBatId FROM Cn2Cs_Prk_ProductBatch A (NOLOCK)   
 INNER JOIN Product B (NOLOCK) ON A.PrdCCode=B.PrdCCode  
 INNER JOIN ProductBatch C (NOLOCK)ON A.PrdBatCode=C.PrdBatCode AND B.PrdId=C.PrdId  
 INNER JOIN ProductBatchDetails D (NOLOCK) ON  D.PrdBatId=C.PrdBatId AND D.DefaultPrice=1 AND D.SlNo=2  
 WHERE A.PrdBatCode NOT IN (SELECT PrdBatCode FROM PrdBatToAvoid) AND DownLoadFlag='D'  
 --Added By Sathishkumar Veeramani 2015/01/08  
 --Selling Rate Validation  
 INSERT INTO @ExistingSellingPriceDetails (PrdId,PrdBatId,PriceId)  
 SELECT DISTINCT PrdId,B.PrdBatId,C.PriceId FROM Cn2Cs_Prk_ProductBatch A (NOLOCK)   
 INNER JOIN @ExistingBatchDetails B ON A.PrdCCode = B.PrdCCode AND A.PrdBatCode = B.PrdBatCode  
 INNER JOIN ProductBatchDetails C (NOLOCK) ON B.PrdBatId = C.PrdBatId AND A.SellingRate = C.PrdBatDetailValue  
 WHERE C.SLNo = 3  
 --List Price Validation  
 INSERT INTO @ExistingListPriceDetails (PrdId,PrdBatId,PriceId)  
 SELECT DISTINCT PrdId,B.PrdBatId,C.PriceId FROM Cn2Cs_Prk_ProductBatch A (NOLOCK)   
 INNER JOIN @ExistingBatchDetails B ON A.PrdCCode = B.PrdCCode AND A.PrdBatCode = B.PrdBatCode  
 INNER JOIN ProductBatchDetails C (NOLOCK) ON B.PrdBatId = C.PrdBatId AND A.ListPrice = C.PrdBatDetailValue  
 WHERE C.SLNo = 2  
 SELECT DISTINCT A.PrdId,A.PrdBatId,MAX(A.PriceId) AS PriceId INTO #ExistinPriceCloning   
 FROM @ExistingSellingPriceDetails A   
 INNER JOIN @ExistingListPriceDetails B ON A.PrdId = B.PrdId  
 AND A.PrdBatId = B.PrdBatId AND A.PriceId = B.PriceId GROUP BY A.PrdId,A.PrdBatId  
 IF EXISTS (SELECT DISTINCT PrdId,PrdBatId,PriceId FROM #ExistinPriceCloning)  
 BEGIN  
     UPDATE A SET A.DefaultPrice = 0 FROM ProductBatchDetails A (NOLOCK)   
     INNER JOIN #ExistinPriceCloning B ON A.PrdBatId = B.PrdBatId  
     UPDATE A SET A.DefaultPrice = 1 FROM ProductBatchDetails A (NOLOCK)  
     INNER JOIN #ExistinPriceCloning B ON A.PrdBatId = B.PrdBatId AND A.PriceId = B.PriceId  
     UPDATE A SET A.DefaultPriceId = B.PriceId FROM ProductBatch A (NOLOCK)   
     INNER JOIN #ExistinPriceCloning B ON A.PrdBatId = B.PrdBatId  
	 
     IF EXISTS (SELECT PriceId ,Count(Priceid) Cnt  FROM ProductBatchDetails group by PriceId HAVING COUNT(Priceid)>5  )
	BEGIN 
		SELECT Prdbatid,PriceId ,Count(Priceid) Cnt
		INTO #PrdBatch
		FROM ProductBatchDetails 
		group by Prdbatid,PriceId HAVING COUNT(Priceid)>5
		  
		SELECT  DISTINCT A.PrdBatid,B.Priceid  INTO #Price  FROM ProductBatch  A INNER JOIN PRODUCTBATCHDETAILS B ON A.PrdBatId = B.PrdBatid AND A.LastModDate = B.LastModDate 
		and b.PrdBatId IN (select Prdbatid FROM #PrdBatch)
		and PriceCode NOT LIKE '%Splrate%'  
		
		UPDATE A SET DefaultPriceId=B.PriceId FROM ProductBatch  A INNER JOIN PRODUCTBATCHDETAILS B ON A.PrdBatId = B.PrdBatid AND A.LastModDate = B.LastModDate 
		and  PriceCode NOT LIKE '%Splrate%'  and b.PrdBatId IN (select Prdbatid FROM #PrdBatch)

		UPDATE PRODUCTBATCHDETAILS SET DefaultPrice =1 WHERE Priceid in (select priceid FROM #Price)  and PrdBatId IN (select Prdbatid FROM #PrdBatch)

		UPDATE PRODUCTBATCHDETAILS SET DefaultPrice =0 WHERE Priceid NOt in (select priceid FROM #Price) 
		and  PrdBatId IN (select Prdbatid FROM #PrdBatch)

	END  
 END  
 --Till Here  
 --Added By Sathishkumar Veeramani 2015/01/08  
 --Batch Cloning Details  
    DECLARE @BatchPriceId AS NUMERIC(18,0)  
    SELECT @BatchPriceId = ISNULL(MAX(PriceId),0) FROM ProductBatchDetails (NOLOCK)  
 SELECT DISTINCT CAST(DENSE_RANK() OVER (ORDER BY MAX(PrdBatId),MRP,ListPrice,SellingRate,ClaimRate) AS NUMERIC(18,0))+@BatchPriceId AS PriceId,  
 MAX(PrdBatId) AS PrdBatId,A.PrdBatCode+'-'+CAST(MRP AS NVARCHAR(25))+'-'+CAST(ListPrice AS NVARCHAR(25))+'-'+CAST(SellingRate AS NVARCHAR(25))+'-'+  
 CAST(ClaimRate AS NVARCHAR(25))+'-'+CAST(AddRate1 AS NVARCHAR(25)) AS PriceCode,MRP,ListPrice,  
 SellingRate,ClaimRate,AddRate1 as LCTRAmount INTO #BatchCloningDetails FROM Cn2Cs_Prk_ProductBatch A (NOLOCK)  
 INNER JOIN Product B (NOLOCK) ON A.PrdCCode = B.PrdCCode   
 INNER JOIN ProductBatch C (NOLOCK) ON B.PrdId = C.PrdId AND A.PrdBatCode = C.PrdBatCode WHERE DownloadFlag = 'D'  
 AND NOT EXISTS (SELECT DISTINCT PrdId,PrdBatId FROM #ExistinPriceCloning D WHERE C.PrdId = D.PrdId AND C.PrdBatId = D.PrdBatId)   
 GROUP BY A.PrdBatCode,MRP,ListPrice,SellingRate,ClaimRate,AddRate1  
 IF EXISTS (SELECT DISTINCT PrdBatId FROM #BatchCloningDetails)  
 BEGIN  
     UPDATE A SET DefaultPrice = 0 FROM ProductBatchDetails A WITH(NOLOCK)   
  INNER JOIN #BatchCloningDetails B ON A.PrdBatId = B.PrdBatId  
  --CRCRSTPAR0083
  INSERT INTO ProductBatchDetails (PriceId,PrdBatId,PriceCode,BatchSeqId,SLNo,PrdBatDetailValue,DefaultPrice,PriceStatus,  
  Availability,LastModBy,LastModDate,AuthId,AuthDate,XMLUpload)  
  SELECT DISTINCT PriceId,PrdBatId,PriceCode,1,SlNo,Rate,1,1,1,1,GETDATE(),1,GETDATE(),0 FROM(  
  SELECT DISTINCT PriceId,PrdBatId,PriceCode,1 AS SlNo,MRP AS Rate FROM #BatchCloningDetails UNION  
  SELECT DISTINCT PriceId,PrdBatId,PriceCode,2 AS SlNo,ListPrice AS Rate FROM #BatchCloningDetails UNION  
  SELECT DISTINCT PriceId,PrdBatId,PriceCode,3 AS SlNo,SellingRate AS Rate FROM #BatchCloningDetails UNION  
  SELECT DISTINCT PriceId,PrdBatId,PriceCode,4 AS SlNo,ClaimRate AS Rate FROM #BatchCloningDetails UNION
  SELECT DISTINCT PriceId,PrdBatId,PriceCode,5 AS SlNo,LCTRAmount AS Rate FROM #BatchCloningDetails)Qry ORDER BY PrdBatId  
  SELECT @BatchPriceId = ISNULL(MAX(PriceId),0) FROM ProductBatchDetails (NOLOCK)  
  UPDATE Counters SET CurrValue = @BatchPriceId WHERE TabName = 'ProductBatchDetails' AND FldName = 'PriceId'  
        UPDATE A SET DefaultPriceId = B.PriceId FROM ProductBatch A WITH(NOLOCK)   
  INNER JOIN #BatchCloningDetails B ON A.PrdBatId = B.PrdBatId  
    END  
 --Till Here  
 IF EXISTS (SELECT * FROM @ExistingBatchDetails)  
 BEGIN  
  UPDATE A SET MnfDate=C.ManufacturingDate,ExpDate=ExpiryDate  
  FROM ProductBatch A (NOLOCK) INNER JOIN @ExistingBatchDetails B ON A.PrdId=B.PrdId AND A.PrdBatId=B.PrdBatId  
  INNER JOIN Cn2Cs_Prk_ProductBatch C (NOLOCK) ON A.PrdBatCode=C.PrdBatCode  AND B.PrdCCode=C.PrdCCode  
  WHERE C.DownLoadFlag='D'  
  UPDATE Cn2Cs_Prk_ProductBatch SET DownLoadFlag='Y'   
  WHERE PrdCCode+'~'+PrdBatCode IN (SELECT PrdCCode+'~'+PrdBatCode FROM @ExistingBatchDetails) AND DownLoadFlag='D'   
 END  
 DECLARE @Count1 NUMERIC(18,0)  
 DECLARE @Count2 NUMERIC(18,0)  
 SELECT @Count1=COUNT(*) FROM Cn2Cs_Prk_ProductBatch  
 SELECT @Count2=COUNT(*) FROM @ExistingBatchDetails  
 IF @Count1<>@Count2  
  BEGIN  
 --IF NOT EXISTS (SELECT * FROM @ExistingBatchDetails)  
 --BEGIN  
 ---New ProductBatch    
  INSERT INTO @ProductBatchWithCounter  
  SELECT DISTINCT (SELECT CurrValue FROM Counters (NOLOCK) WHERE TabName='ProductBatch' AND FldName='PrdBatId'),  
  B.PrdId,A.PrdCCode,A.PrdBatCode,ManufacturingDate,ExpiryDate FROM Cn2Cs_Prk_ProductBatch A (NOLOCK)   
  INNER JOIN Product B (NOLOCK) ON A.PrdCCode=B.PrdCCode WHERE NOT EXISTS (SELECT PrdBatCode FROM ProductBatch C (NOLOCK)   
  WHERE C.PrdBatCode=A.PrdBatCode AND B.PrdId=C.PrdId)AND   
  A.PrdCCode+'~'+A.PrdBatCode NOT IN (SELECT PrdCCode+'~'+PrdBatCode FROM PrdBatToAvoid) AND A.DownLoadFlag='D'  
  ORDER BY ManufacturingDate ASC --Muthuvel  
  UPDATE @ProductBatchWithCounter SET TransNo=TransNo+Slno  
 --Existing ProductBatch   
   INSERT INTO @ProductBatchWithCounter  
   SELECT DISTINCT C.PrdBatId,B.PrdId,A.PrdCCode,A.PrdBatCode,  
   ManufacturingDate,ExpiryDate FROM Cn2Cs_Prk_ProductBatch A (NOLOCK) INNER JOIN Product B (NOLOCK) ON A.PrdCCode=B.PrdCCode  
   INNER JOIN ProductBatch C ON B.PrdId = C.PrdId AND C.PrdBatCode = A.PrdBatCode WHERE   
   NOT EXISTS (SELECT PrdBatId FROM ProductBatchDetails D(NOLOCK) WHERE D.PrdBatId = C.PrdBatId AND D.PriceId = C.DefaultPriceId)   
   AND  A.PrdCCode+'~'+A.PrdBatCode NOT IN (SELECT PrdCCode+'~'+PrdBatCode FROM PrdBatToAvoid) AND A.DownLoadFlag='D'  
   AND  A.PrdCCode+'~'+A.PrdBatCode NOT IN (SELECT PrdCCode+'~'+PrdBatCode FROM @ProductBatchWithCounter)  
  --Product Batch     
  INSERT INTO ProductBatch(PrdId,PrdBatId,PrdBatCode,CmpBatCode,MnfDate,ExpDate,Status,  
  TaxGroupId,BatchSeqId,DecPoints,DefaultPriceId,EnableCloning,Availability,LastModBy,LastModDate,AuthId,AuthDate)  
  SELECT DISTINCT A.PrdId,TransNo,PrdBatCode,PrdBatCode,MnfDate,ExpDate,1,B.TaxGroupId,@BatSeqId,  
  6,0,0,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchWithCounter A   
  INNER JOIN Product B ON A.PrdId=B.PrdId WHERE NOT EXISTS (SELECT PrdBatCode FROM ProductBatch C WHERE A.PrdId = C.PrdId   
  AND A.PrdBatCode = C.PrdBatCode)  
    --END   
  END  
 IF EXISTS (SELECT * FROM @ProductBatchWithCounter)   
 BEGIN  
  UPDATE Counters SET CurrValue = (SELECT MAX(PrdBatId) FROM ProductBatch) WHERE TabName = 'ProductBatch' AND FldName = 'prdbatid'  
  INSERT INTO @ProductBatchPriceWithCounter  
  SELECT DISTINCT (SELECT CurrValue FROM Counters (NOLOCK) WHERE TabName='ProductBatchDetails' AND FldName='PriceId'),A.PrdId,A.TransNo,  
  A.PrdBatCode+'-'+CAST(MRP AS NVARCHAR(25))+'-'+CAST(ListPrice AS NVARCHAR(25))+'-'+  
  CAST(SellingRate AS NVARCHAR(25))+'-'+CAST(ClaimRate AS NVARCHAR(25))+'-'+CAST(AddRate1 AS NVARCHAR(25)),MRP,ListPrice,  
  SellingRate,ClaimRate,AddRate1 FROM @ProductBatchWithCounter A INNER JOIN Cn2Cs_Prk_ProductBatch B WITH (NOLOCK)  
  ON A.PrdCCode=B.PrdCCode AND A.PrdBatCode=B.PrdBatCode WHERE B.DownLoadFlag='D'  
  UPDATE @ProductBatchPriceWithCounter SET TransNo=TransNo+Slno  
  UPDATE A SET A.DefaultPrice=0 FROM ProductBatchDetails A WITH (NOLOCK),@ProductBatchPriceWithCounter B    
     WHERE A.PrdBatId = B.PrdBatId  
     END     
 IF (SELECT COUNT(*) FROM BatchCreation WHERE BatchSeqId=@BatSeqId)=5  
 BEGIN  
 --CRCRSTPAR0083
  INSERT INTO ProductBatchDetails(PriceId,PrdBatId,PriceCode,BatchSeqId,SLNo,PrdBatDetailValue,  
  DefaultPrice,PriceStatus,Availability,LastModBy,LastModDate,AuthId,AuthDate)  
  SELECT DISTINCT TransNo,PrdBatId,PriceCode,@BatSeqId,1,MRP,1,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchPriceWithCounter  
  UNION  
  SELECT DISTINCT TransNo,PrdBatId,PriceCode,@BatSeqId,2,ListPrice,1,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchPriceWithCounter  
  UNION  
  SELECT DISTINCT TransNo,PrdBatId,PriceCode,@BatSeqId,3,SellingRate,1,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchPriceWithCounter  
  UNION  
  SELECT DISTINCT TransNo,PrdBatId,PriceCode,@BatSeqId,4,ClaimRate,1,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchPriceWithCounter  
  UNION
  SELECT DISTINCT TransNo,PrdBatId,PriceCode,@BatSeqId,5,AddRate1 AS LCTRAmount,1,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchPriceWithCounter
 END  
 ELSE IF (SELECT COUNT(*) FROM BatchCreation WHERE BatchSeqId=@BatSeqId)=5  
 BEGIN  
  INSERT INTO ProductBatchDetails(PriceId,PrdBatId,PriceCode,BatchSeqId,SLNo,PrdBatDetailValue,  
  DefaultPrice,PriceStatus,Availability,LastModBy,LastModDate,AuthId,AuthDate)  
  SELECT DISTINCT TransNo,PrdBatId,PriceCode,@BatSeqId,1,MRP,1,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchPriceWithCounter  
  UNION  
  SELECT DISTINCT TransNo,PrdBatId,PriceCode,@BatSeqId,2,ListPrice,1,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchPriceWithCounter  
  UNION  
  SELECT DISTINCT TransNo,PrdBatId,PriceCode,@BatSeqId,3,SellingRate,1,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchPriceWithCounter  
  UNION  
  SELECT DISTINCT TransNo,PrdBatId,PriceCode,@BatSeqId,4,ClaimRate,1,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchPriceWithCounter  
  UNION  
  SELECT DISTINCT TransNo,PrdBatId,PriceCode,@BatSeqId,5,AddRate1 AS LCTRAmount,1,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchPriceWithCounter  
 END   
 UPDATE A SET DefaultPriceId=C.TransNo FROM ProductBatch A INNER JOIN @ProductBatchPriceWithCounter C ON C.PrdBatId=A.PrdBatId AND A.PrdId=C.PrdId   
 IF EXISTS(SELECT * FROM @ProductBatchPriceWithCounter)   
 BEGIN  
  UPDATE Counters SET CurrValue = (SELECT MAX(PriceId) FROM ProductBatchDetails)  WHERE TabName = 'ProductBatchDetails' AND FldName = 'PriceId'   
 END  
 --Batch Cloning Price Details  
 IF EXISTS(SELECT * FROM Configuration WHERE ModuleId='BotreeRateForOldBatch' AND ModuleName='Botree Product Batch Download' AND Status=1)  
 BEGIN  
  IF EXISTS(SELECT * FROM @ProductBatchPriceWithCounter A INNER JOIN @ExistingBatchDetails B ON A.PrdBatId=B.PrdBatId AND A.PrdId=B.PrdId  
  WHERE (B.OldLSP-A.ListPrice)<>0 AND Slno=2)  
  BEGIN  
   SELECT @ValDiffRefNo = dbo.Fn_GetPrimaryKeyString('ValueDifferenceClaim','ValDiffRefNo',CAST(YEAR(GetDate()) AS INT),MONTH(GETDATE()))  
   INSERT INTO ValueDifferenceClaim(ValDiffRefNo,Date,PrdId,PrdBatId,OldPriceId,NewPriceId,OldPrice,NewPrice,Qty,  
   ValueDiff,ClaimAmt,Availability,LastModBy,LastModDate,AuthId,AuthDate)  
   SELECT @ValDiffRefNo,GETDATE(),A.PrdId,A.PrdBatID,B.PriceId,C.TransNo,B.OldLsp,C.ListPrice,  
   ISNULL(SUM(A.PrdBatLcnSih+A.PrdBatLcnUih-A.PrdBatLcnRessih-A.PrdBatLcnResUih),0),B.OldLsp-C.ListPrice,  
   ISNULL(SUM(A.PrdBatLcnSih+A.PrdBatLcnUih-A.PrdBatLcnRessih-A.PrdBatLcnResUih),0)*(B.OldLsp-C.ListPrice),  
   1,1,GETDATE(),1,GETDATE() FROM ProductBatchLocation A INNER JOIN @ExistingBatchDetails B ON A.PrdId=B.PrdId AND A.PrdBatID=B.PrdBatId   
   INNER JOIN @ProductBatchPriceWithCounter C ON A.PrdBatId=C.PrdBatId AND A.PrdId=C.PrdId  
   WHERE C.Slno=2 GROUP BY A.PrdId,A.PrdBatID,B.PriceId,C.TransNo,B.OldLsp,C.ListPrice  
   UPDATE Counters SET CurrValue = CurrValue+1  WHERE TabName = 'ValueDifferenceClaim' AND FldName = 'ValDiffRefNo'  
  END  
 END  
 UPDATE ProductBatch SET ProductBatch.DefaultPriceId=PBD.PriceId,ProductBatch.BatchSeqId=PBD.BatchSeqId  
 FROM ProductBatchDetails PBD WITH (NOLOCK) WHERE ProductBatch.PrdBatId=PBD.PrdBatId AND PBD.DefaultPrice=1  
 UPDATE ProductBatch SET EnableCloning=1 WHERE PrdBatId IN  
 (  
  SELECT PrdBatId FROM ProductBatchDetails WITH (NOLOCK) GROUP BY PrdBatId  HAVING(COUNT(DISTINCT PriceId)>1)  
 )  
 SELECT PrdBatId INTO #ZeroBatches FROM ProductBatchDetails WITH (NOLOCK)  
 GROUP BY PrdBatId HAVING SUM(DefaultPrice)=0  
 SELECT B.PrdId,B.PrdBatId,MAX(PriceId) As PriceId INTO #ZeroMaxPrices  
 FROM ProductBatchDetails A INNER JOIN ProductBatch B ON A.PrdBatId=B.PrdBatId  
 INNER JOIN #ZeroBatches C ON A.PrdBatId=C.PrdBatId  
 WHERE A.DefaultPrice=0 AND NOT EXISTS  
 (SELECT DISTINCT PriceId FROM #BatchCloningDetails D WHERE A.PrdBatId = D.PrdBatId AND A.PriceId = D.PriceId)  
 AND NOT EXISTS (SELECT DISTINCT PriceId FROM #ExistinPriceCloning E WHERE A.PrdBatId = E.PrdBatId AND A.PriceId = E.PriceId)  
 GROUP BY B.PrdId,B.PrdBatId   
 UPDATE ProductBatch Set DefaultPriceId=B.PriceId FROM ProductBatch A,#ZeroMaxPrices B  
 WHERE A.PrdBatId=B.PrdbatId and A.PrdId=B.PrdId   
 UPDATE ProductBatchDetails Set DefaultPrice=1 FROM #ZeroMaxPrices A  
 WHERE ProductBatchDetails.PrdbatId=A.PrdBatId AND ProductBatchDetails.PriceId=A.PriceId  
 SET @Po_ErrNo=0  
 SELECT @OldPriceIdExt=ISNULL(MAX(PriceId),0) FROM ProductBatchDetails
   
 --IF @ExistPrdBatMaxId>0  
 --BEGIN  
 -- SELECT @NewPrdBatMaxId=ISNULL(MAX(PrdBatId),0) FROM ProductBatch  
 -- IF @NewPrdBatMaxId>@ExistPrdBatMaxId  
 -- BEGIN  
 --     --Existing Contract Pricing Percentage Updated to New Batch Download  
 --     --Modified by Rajesh  
 --     --    SELECT DISTINCT RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCCode,MAX(CreatedDate) AS CreatedDate INTO #SpecialRateCreatedDate  
 --     --FROM SpecialRateAftDownload WITH(NOLOCK) GROUP BY RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCCode ORDER BY PrdCCode  
 --  SELECT DISTINCT RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCCode,MAX(CreatedDate) AS CreatedDate  INTO #SpecialRateCreatedDate1    
 --  FROM SpecialRateAftDownload_calc WITH(NOLOCK) GROUP BY RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCCode ORDER BY PrdCCode  
 --  SELECT DISTINCT A.RtrCtgCode,A.RtrCtgValueCode,A.RtrCode,A.PrdCCode,A.CreatedDate ,A.ApplyOn,A.TYPE INTO #SpecialRateCreatedDate  
 --  FROM SpecialRateAftDownload_calc A WITH(NOLOCK) INNER JOIN  #SpecialRateCreatedDate1 B (NOLOCK)   
 --  ON A.RtrCtgCode = B.RtrCtgCode AND A.RtrCtgValueCode  = B.RtrCtgValueCode AND A.RtrCode= B.RtrCode AND A.PrdCCode= B.PrdCCode  
 --  AND A.CreatedDate = B.CreatedDate AND A.ApplyOn is not null  
 --  --SELECT DISTINCT C.PrdId,E.PrdBatId,TransNo AS PriceId,A.RtrCtgCode,A.RtrCtgValueCode,A.RtrCode,A.PrdCCode,  
 --  --D.PrdBatCode,DiscountPerc,(MRP-(MRP*(DiscountPerc/100))) AS SplRate INTO #SpecialRateDetails   
 --  --FROM SpecialRateAftDownload A WITH(NOLOCK)  
 --  --INNER JOIN #SpecialRateCreatedDate B ON A.RtrCtgCode = B.RtrCtgCode AND A.RtrCtgValueCode = B.RtrCtgValueCode   
 --  --AND A.RtrCode = B.RtrCode AND A.PrdCCode = B.PrdCCode AND A.CreatedDate = B.CreatedDate  
 --  --INNER JOIN Product C WITH(NOLOCK) ON A.PrdCCode = C.PrdCCode     
 --  --INNER JOIN ProductBatch D WITH(NOLOCK) ON C.PrdId = D.PrdId  
 --  --INNER JOIN @ProductBatchPriceWithCounter E ON C.PrdId = E.PrdId AND D.PrdBatId = E.PrdBatId  
 --  --ORDER BY A.PrdCCode  
 --    SELECT DISTINCT C.PrdId,E.PrdBatId,TransNo AS PriceId,A.RtrCtgCode,A.RtrCtgValueCode,A.RtrCode,A.PrdCCode,    
 --    D.PrdBatCode,DiscountPerc,B.ApplyOn,B.Type,  
 --    (CASE B.ApplyOn WHEN 1 THEN   
 --    (CASE B.[Type] WHEN 1 THEN (MRP*100/(100+DiscountPerc)) WHEN 2 THEN MRP-(MRP*(DiscountPerc/100))  
 --    ELSE SellingRate-(SellingRate*(DiscountPerc/100))  END)    
 --    ELSE SellingRate-(SellingRate*(DiscountPerc/100)) END) AS SplRate  
 --    INTO #SpecialRateDetails     
 --    FROM SpecialRateAftDownload_calc A WITH(NOLOCK)    
 --    INNER JOIN #SpecialRateCreatedDate B ON A.RtrCtgCode = B.RtrCtgCode AND A.RtrCtgValueCode = B.RtrCtgValueCode     
 --    AND A.RtrCode = B.RtrCode AND A.PrdCCode = B.PrdCCode AND A.CreatedDate = B.CreatedDate    
 --    INNER JOIN Product C WITH(NOLOCK) ON A.PrdCCode = C.PrdCCode       
 --    INNER JOIN ProductBatch D WITH(NOLOCK) ON C.PrdId = D.PrdId    
 --    INNER JOIN @ProductBatchPriceWithCounter E ON C.PrdId = E.PrdId AND D.PrdBatId = E.PrdBatId    
 --    ORDER BY A.PrdCCode   
 --  --Till Here     
 --  SELECT DISTINCT MAX(E.ContractId) AS ContractId,A.PrdId,A.PrdBatId,A.PriceId,B.CtgLevelId,C.CtgMainId,SplRate,RtrCtgValueCode,A.ApplyOn, A.Type,E.CtgValMainId   
 --  INTO #SpecialContractDetails FROM #SpecialRateDetails A WITH(NOLOCK)   
 --  INNER JOIN RetailerCategoryLevel B WITH(NOLOCK) ON A.RtrCtgCode = B.CtgLevelName   
 --  INNER JOIN RetailerCategory C WITH(NOLOCK) ON A.RtrCtgValueCode = C.CtgCode AND B.CtgLevelId = C.CtgLevelId  
 --  INNER JOIN ContractPricingMaster D WITH(NOLOCK) ON B.CtgLevelId = D.CtgLevelId AND C.CtgMainId = D.CtgMainId   
 --  INNER JOIN ContractPricingDetails E WITH(NOLOCK) ON D.ContractId = E.ContractId AND A.PrdId = E.PrdId  AND CtgValMainId=0
 --  GROUP BY A.PrdId,A.PrdBatId,A.PriceId,B.CtgLevelId,C.CtgMainId,SplRate,RtrCtgValueCode,A.ApplyOn, A.Type,CtgValMainId  
 --  ---Tax Calculation  
 --  DECLARE @PrdIdTax as BIGINT  
 --  DECLARE @PrdbatIdTax AS BIGINT  
 --  DECLARE Cur_Tax CURSOR  
 --  FOR   
 --  SELECT DISTINCT PrdId,PrdbatId FROM #SpecialContractDetails    
 --  OPEN Cur_Tax   
 --  FETCH NEXT FROM Cur_Tax INTO @PrdIdTax,@PrdbatIdTax  
 --  WHILE @@FETCH_STATUS=0  
 --  BEGIN   
 --    EXEC Proc_SellingTaxCalCulation @PrdIdTax,@PrdbatIdTax  
 --  FETCH NEXT FROM Cur_Tax INTO @PrdIdTax,@PrdbatIdTax    
 --  END    
 --  CLOSE Cur_Tax  
 --  DEALLOCATE Cur_Tax   
 --  --Modified by Rajesh  
 --  SELECT DISTINCT A.PrdId,A.PrdBatId,PriceId,RtrCtgValueCode,DENSE_RANK ()OVER (ORDER BY A.PriceId,A.PrdbatId,RtrCtgValueCode)+ @OldPriceIdExt AS NewPriceId,  
 --  --CAST(SplRate*100/(100+TaxPercentage) AS NUMERIC(38,6)) AS NewSelRate   
 --  CASE A.ApplyOn WHEN 1 THEN   
 --         (CASE [Type] WHEN 1 THEN (SplRate*100)/(100+TaxPercentage)  
 --          WHEN 2 THEN (SplRate*100)/(100+TaxPercentage) END)  
 --  ELSE CAST(SplRate AS NUMERIC(38,6)) END AS NewSelRate  
 --  INTO #SplProductBatchDetails  
 --  FROM #SpecialContractDetails A WITH(NOLOCK) INNER JOIN ProductBatchTaxPercent B WITH(NOLOCK) ON A.PrdId = B.PrdId  
 --  AND A.PrdBatId = B.PrdBatId ORDER BY A.PrdId,A.PrdBatId,PriceId,RtrCtgValueCode  
 --  --Product Batch Details Value Added     
	--INSERT INTO ProductBatchDetails (PriceId,PrdBatId,PriceCode,BatchSeqId,SLNo,PrdBatDetailValue,DefaultPrice,PriceStatus,  
 --   Availability,LastModBy,LastModDate,AuthId,AuthDate,XMLUpload)   
 --   SELECT DISTINCT NewPriceId,A.PrdBatId,PriceCode+'SplRate'+CONVERT(NVARCHAR(200),B.NewSelRate)+CONVERT(NVARCHAR(10),GETDATE(),121),  
 --   A.BatchSeqId,A.SLNo,(CASE SelRte WHEN 1 THEN B.NewSelRate ELSE PrdBatDetailValue END),0,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,  
 --   CONVERT(NVARCHAR(10),GETDATE(),121),0  
 --   FROM ProductBatchDetails A WITH(NOLOCK)   
 --   INNER JOIN #SplProductBatchDetails B ON A.PrdBatId = B.PrdBatId AND A.PriceId = B.PriceId  
 --   INNER JOIN ProductBatch C WITH(NOLOCK) ON A.PrdBatId = C.PrdBatId  
 --   INNER JOIN BatchCreation D WITH(NOLOCK) ON C.BatchSeqId = D.BatchSeqId AND A.SLNo = D.SlNo ORDER BY A.PrdBatId,NewPriceId   
 --   UPDATE Counters SET CurrValue =(SELECT MAX(PriceId) FROM ProductBatchDetails) WHERE TabName = 'ProductBatchDetails' AND FldName = 'PriceId'  
 --   --Contract Pricing Details Added  
 --   INSERT INTO ContractPricingDetails (ContractId,PrdId,PrdBatId,PriceId,Discount,FlatAmtDisc,Availability,LastModBy,LastModDate,AuthId,  
 --   AuthDate,CtgValMainId,ClaimablePercOnMRP)              
 --   SELECT DISTINCT ContractId,A.PrdId,A.PrdBatId,B.NewPriceId,0,0,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121),CtgValMainId,0  
 --   FROM #SpecialContractDetails A INNER JOIN #SplProductBatchDetails B ON A.PrdId = B.PrdID AND A.PrdBatId = B.PrdBatId AND A.RtrCtgValueCode=B.RtrCtgValueCode  
 --   WHERE NOT EXISTS (SELECT ContractId FROM ContractPricingDetails C WITH(NOLOCK) WHERE A.ContractId = C.ContractId   
 --   AND A.PrdId = C.PrdID AND A.PrdBatId = C.PrdBatId) ORDER BY ContractId,A.PrdId,A.PrdBatId,B.NewPriceId  
 --   --Special Rate Updated  
 --   INSERT INTO SpecialRateAftDownload (RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCCode,PrdBatCCode,SplSelRate,FromDate,CreatedDate,DownloadedDate,  
 --   ContractPriceIds,DiscountPerc,SplrateId)  
 --   SELECT DISTINCT RtrCtgCode,A.RtrCtgValueCode,A.RtrCode,A.PrdCCode,A.PrdBatCode,A.SplRate,CONVERT(NVARCHAR(10),GETDATE(),121),GETDATE(),GETDATE(),  
 --   '-'+CONVERT(NVARCHAR(50),NewPriceId)+'-',DiscountPerc,0  
 --   FROM #SpecialRateDetails A INNER JOIN #SplProductBatchDetails B ON A.PrdId = B.PrdId AND A.PrdBatId = B.PrdBatId   
 --   and A.RtrCtgValueCode=B.RtrCtgValueCode  
 --   ORDER BY PrdCCode,PrdBatCode  
 --   --Added By Rajesh  
 --   INSERT INTO SpecialRateAftDownload_calc (RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCCode,PrdBatCCode,SplSelRate,FromDate,CreatedDate,DownloadedDate,  
 --   ContractPriceIds,DiscountPerc,SplrateId,ApplyOn,TYPE)  
 --   SELECT DISTINCT RtrCtgCode,A.RtrCtgValueCode,A.RtrCode,A.PrdCCode,A.PrdBatCode,A.SplRate,CONVERT(NVARCHAR(10),GETDATE(),121),GETDATE(),GETDATE(),  
 --   '-'+CONVERT(NVARCHAR(50),NewPriceId)+'-',DiscountPerc,0,A.ApplyOn,A.TYPE  
 --   FROM #SpecialRateDetails A INNER JOIN #SplProductBatchDetails B ON A.PrdId = B.PrdId AND A.PrdBatId = B.PrdBatId   
 --   and A.RtrCtgValueCode=B.RtrCtgValueCode  
 --   ORDER BY PrdCCode,PrdBatCode  
 --   --Till Here  
 -- --SELECT * INTO #PrdBatch  FROM CONTRACTPRICINGDETAILS A WHERE NOT EXISTS (SELECT PRDID FROM ProductBatch B WHERE  A.PRDID = B.PRDID )  
 --  --TRUNCATE TABLE ProductBatchPriceWithCounter  
 --  --IF EXISTS (SELECT *FROM #PrdBatch)  
 --  --BEGIN 
 --    TRUNCATE TABLE ProductBatchPriceWithCounter
 --   INSERT INTO  ProductBatchPriceWithCounter  
 --   SELECT *  FROM @ProductBatchPriceWithCounter  
 --   EXEC Proc_InsertContractPricingForNewProduct  
 --  --END 
 --  --SELECT PrdId,PrdBatId,TransNo, FROM @ProductBatchPriceWithCounter INNER JOIN   
 --     --SELECT A.PrdId,MAX(A.PrdBatId) AS PrdBatId INTO #ContractPrice FROM ProductBatch A (NOLOCK),@ProductBatchWithCounter B  
 --  --WHERE  A.PrdId = B.PrdId AND A.PrdBatId < @ExistPrdBatMaxId AND EXISTS  
 --  --(SELECT CPD.PrdBatId FROM ContractPricingDetails CPD (NOLOCK)  
 --  --INNER JOIN ProductBatch PB1 (NOLOCK) ON CPD.PrdId=PB1.PrdId AND CPD.PrdBatId=PB1.PrdBatId AND A.PrdBatId=CPD.PrdBatId  
 --  --AND CPD.PrdID IN (SELECT DISTINCT PrdId FROM @ProductBatchWithCounter))GROUP BY A.PrdId   
 -- -- INSERT INTO @ContractPrice (PrdId,PrdBatId)  
 -- -- SELECT A.PrdId,MAX(A.PrdBatId) AS PrdBatId FROM ProductBatch A (NOLOCK),  
 -- -- ContractPricingDetails B (NOLOCK),@ProductBatchWithCounter C  
 -- --          WHERE A.PrdId = B.PrdId AND A.PrdBatId = B.PrdBatId AND A.PrdId = C.Prdid AND B.PrdId = C.Prdid   
 -- --          GROUP BY A.PrdId ORDER BY A.PrdId  
 -- -- IF EXISTS(SELECT * FROM @ContractPrice)  
 -- -- BEGIN  
 -- --  SELECT DISTINCT PrdbatId,PriceId,Max(PriceCode) as PriceCode INTO #ProductBatchDetails   
 -- --  FROM ProductBatchDetails  
 -- --  GROUP BY PrdbatId,PriceId  
 -- --  INSERT INTO @ContractBatchPrice (ContractId,CtgMainId,PrdId,PrdBatId,PriceId,PriceCode)   
 -- --  SELECT Max(C.ContractId) as ContractId,D.CtgMainId,E.PrdId,E.PrdBatId,C.PriceId AS PriceId,  
 -- --  --CAST('' AS NVARCHAR(4000)) AS PriceCode  
 -- --  PriceCode  
 -- --  FROM  ContractPricingMaster D (NOLOCK)   
 -- --  INNER JOIN  ContractPricingDetails C (NOLOCK)   ON C.ContractId = D.ContractId  
 -- --  INNER JOIN  #ProductBatchDetails A (NOLOCK) ON A.PrdBatId = C.PrdBatId AND A.PriceId = C.PriceId  
 -- --  INNER JOIN @ContractPrice E  ON E.PrdBatId = C.PrdBatId AND E.PrdId = C.PrdId   
 -- --  GROUP BY D.CtgMainId,E.PrdId,E.PrdBatId,C.PriceId ,PriceCode  
 -- --     --INSERT INTO @ContractBatchPrice (ContractId,CtgMainId,PrdId,PrdBatId,PriceId,PriceCode)  
 -- --     --SELECT DISTINCT MAX(D.ContractId) AS ContractId,D.CtgMainId,E.PrdId,E.PrdBatId,C.PriceId AS PriceId,  
 -- --     --CAST('' AS NVARCHAR(4000)) AS PriceCode FROM ProductBatchDetails A (NOLOCK),  
 -- --     --ContractPricingDetails C (NOLOCK),ContractPricingMaster D (NOLOCK),@ContractPrice E   
 -- --     --WHERE A.PrdBatId = C.PrdBatId AND A.PriceId = C.PriceId AND C.ContractId = D.ContractId AND E.PrdId = C.PrdId   
 -- --     --AND E.PrdBatId = C.PrdBatId GROUP BY D.CtgMainId,E.PrdId,E.PrdBatId,C.PriceId      
 -- --     --UPDATE A SET A.PriceCode = D.PriceCode FROM @ContractBatchPrice A,ContractPricingDetails B WITH(NOLOCK),  
 -- --     --ContractPricingMaster C WITH(NOLOCK),ProductBatchDetails D WITH(NOLOCK) WHERE A.PrdId = B.PrdId AND A.PrdBatId = B.PrdBatId   
 -- --     --AND A.CtgMainId = C.CtgMainId AND D.PrdBatId = A.PrdBatId AND A.ContractId = C.ContractId AND B.ContractId = C.ContractId   
 -- --     --UPDATE A SET A.PriceCode = D.PriceCode  
 -- --     --FROM @ContractBatchPrice A   
 -- --     --INNER JOIN ContractPricingDetails B WITH(NOLOCK) ON A.PrdId = B.PrdId AND A.PrdBatId = B.PrdBatId   
 -- --     --INNER JOIN ContractPricingMaster C WITH(NOLOCK) ON   A.CtgMainId = C.CtgMainId  AND A.ContractId = C.ContractId AND B.ContractId = C.ContractId and A.ContractId=B.ContractId  
 -- --     --INNER JOIN #ProductBatchDetails D WITH(NOLOCK) ON D.PrdBatId = A.PrdBatId   
 -- --     --select 'Botree',* from @ProductBatchPriceWithCounter  
 -- --     --select 'Software',* from @ContractBatchPrice  
 -- --  SELECT DISTINCT SlNo INTO #BatchCreation FROM BatchCreation A (NOLOCK)  
 -- --  INNER JOIN (SELECT MAX(BatchseqId)  as BatchseqId FROM BatchCreationMaster (NOLOCK))X  
 -- --  ON A.BatchSeqId=X.BatchSeqId  
 -- --     INSERT INTO @ProductBatchDetails (PrdId,PrdBatId,PriceId,PriceCode,NewBatchId,Slno,PrdBatDetailValue,NewPriceId)   
 -- --  SELECT DISTINCT A.PrdId,A.PrdBatId,A.PriceId,A.PriceCode,B.PrdBatId AS NewBatchId,PBD.Slno,PrdBatDetailValue,  
 -- --  DENSE_RANK ()OVER (ORDER BY A.PriceId,A.PrdbatId,B.PrdBatId)+ @OldPriceId AS NewPriceId   
 -- --  FROM @ContractBatchPrice A INNER JOIN @ProductBatchPriceWithCounter B   
 -- --  ON A.PrdId = B.PrdId  
 -- --  INNER JOIN ProductBatchDetails PBD WITH(NOLOCK) ON PBD.PrdBatId=A.PrdBatId and PBD.PriceId=A.PriceId   
 -- --  INNER JOIN #BatchCreation C WITH(NOLOCK) ON C.SlNo=PBD.Slno  
 -- --  ORDER BY A.PrdId,A.PrdBatId,A.PriceId,B.PrdBatId  
 -- --  IF(SELECT COUNT(*) FROM BatchCreation WHERE BatchSeqId=@BatSeqId)=4  
 -- --  BEGIN  
 -- --   INSERT INTO ProductBatchDetails(PriceId,PrdBatId,PriceCode,BatchSeqId,SLNo,PrdBatDetailValue,DefaultPrice,  
 -- --      PriceStatus,Availability,LastModBy,LastModDate,AuthId,AuthDate)  
 -- --   SELECT DISTINCT NewPriceId,NewBatchId,PriceCode,@BatSeqId,SlNo,PrdBatDetailValue,0,1,  
 -- --   1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121)   
 -- --   FROM @ProductBatchDetails  
 -- --   UPDATE A SET A.PrdBatDetailValue = B.MRP FROM ProductBatchDetails A,@ProductBatchPriceWithCounter B  
 -- --   WHERE A.PrdBatId = B.PrdBatId AND A.Slno = 1  
 -- --   UPDATE A SET A.PrdBatDetailValue = B.ListPrice FROM ProductBatchDetails A,@ProductBatchPriceWithCounter B  
 -- --   WHERE A.PrdBatId = B.PrdBatId AND A.Slno = 2  
 -- --   UPDATE A SET A.PrdBatDetailValue = B.ClaimRate FROM ProductBatchDetails A,@ProductBatchPriceWithCounter B  
 -- --   WHERE A.PrdBatId = B.PrdBatId AND A.Slno = 4   
 -- --  END  
 -- --  ELSE IF (SELECT COUNT(*) FROM BatchCreation WHERE BatchSeqId=@BatSeqId)=5  
 -- --  BEGIN  
 -- --   INSERT INTO ProductBatchDetails(PriceId,PrdBatId,PriceCode,BatchSeqId,SLNo,PrdBatDetailValue,DefaultPrice,  
 -- --   PriceStatus,Availability,LastModBy,LastModDate,AuthId,AuthDate)  
 -- --   SELECT DISTINCT NewPriceId,NewBatchId,PriceCode,@BatSeqId,SlNo,PrdBatDetailValue,0,1,  
 -- --   1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121)   
 -- --                  FROM @ProductBatchDetails  
 -- --                  UPDATE A SET A.PrdBatDetailValue = B.MRP FROM ProductBatchDetails A,@ProductBatchPriceWithCounter B  
 -- --   WHERE A.PrdBatId = B.PrdBatId AND A.Slno = 1  
 -- --   UPDATE A SET A.PrdBatDetailValue = B.ListPrice FROM ProductBatchDetails A,@ProductBatchPriceWithCounter B  
 -- --   WHERE A.PrdBatId = B.PrdBatId AND A.Slno = 2  
 -- --   UPDATE A SET A.PrdBatDetailValue = B.ClaimRate FROM ProductBatchDetails A,@ProductBatchPriceWithCounter B  
 -- --   WHERE A.PrdBatId = B.PrdBatId AND A.Slno = 4  
 -- --   UPDATE A SET A.PrdBatDetailValue = B.AddRate1 FROM ProductBatchDetails A,@ProductBatchPriceWithCounter B  
 -- --   WHERE A.PrdBatId = B.PrdBatId AND A.Slno = 5  
 -- --  END   
 -- --      IF EXISTS (SELECT * FROM @ProductBatchDetails)  
 -- --      BEGIN  
 -- --    INSERT INTO ContractPricingDetails(ContractId,PrdId,PrdBatId,PriceId,Discount,FlatAmtDisc,  
 -- --    Availability,LastModBy,LastModDate,AuthId,AuthDate,CtgValMainId)  
 -- --    SELECT DISTINCT ContractId,A.PrdId,NewBatchId,NewPriceId,Discount,FlatAmtDisc,  
 -- --    Availability,LastModBy,GETDATE(),AuthId,GETDATE(),CtgValMainId  
 -- --    FROM ContractPricingDetails A,@ProductBatchDetails B WHERE A.PrdId = B.PrdId   
 -- --    AND A.PrdBatId = B.PrdBatId AND A.PriceId = B.PriceId  
 -- --   END   
 --     --UPDATE Counters SET CurrValue = (SELECT MAX(PriceId) FROM ProductBatchDetails)   
 --     --WHERE TabName = 'ProductBatchDetails' AND FldName = 'PriceId'       
 -- -- END  
 -- END  
 --END  
 SELECT @NewPriceId=CurrValue FROM Counters (NOLOCK) WHERE TabName='ProductBatchDetails' AND FldName='PriceId'     
 IF @NewPriceId>@OldPriceId  
 BEGIN  
  IF EXISTS(SELECT * FROM Configuration(NOLOCK) WHERE ModuleId='BotreeRateForOldBatch'  
  AND ModuleName='Botree Product Batch Download' AND Status=1)  
  BEGIN  
   EXEC Proc_DefaultPriceUpdation @ExistPrdBatMaxId,@OldPriceId,1  
  END  
 END  
 IF EXISTS(SELECT * FROM ProductBatchDetails WHERE PriceId>=@OldPriceId)  
 BEGIN  
  EXEC Proc_DefaultPriceHistory 0,0,@NewPriceId,2,1  
 END  
 ---MOORTHI  START  
 IF @ExistPrdBatMaxId>0  
 BEGIN    
  SET @BatchTransfer=0  
  SELECT @BatchTransfer=Status FROM Configuration WHERE ModuleId='BotreeAutoBatchTransfer'  
  IF @BatchTransfer=1  
  BEGIN  
   EXEC Proc_AutoBatchTransfer @ExistPrdBatMaxId,@Po_ErrNo = @Po_BatchTransfer OUTPUT  
   IF @Po_BatchTransfer=1  
   BEGIN  
    INSERT INTO Errorlog VALUES (1,'Cn2Cs_Prk_BLProductBatch','Product Batch-Auto Batch Transfer',  
    'Auto Batch Transfer is not done properly')              
    SET @Po_ErrNo=1      
   END  
  END  
 END   
 --END  
 UPDATE Cn2Cs_Prk_ProductBatch SET DownLoadFlag='Y'   
 WHERE PrdCCode+'~'+PrdBatCode IN (SELECT P.PrdCCode+'~'+PB.PrdBatCode  
 FROM Product P,ProductBatch PB WHERE P.PrdId=PB.PrdId)   
 RETURN    
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_Cn2Cs_ProductBatch_GST' AND TYPE='P')
DROP PROCEDURE Proc_Cn2Cs_ProductBatch_GST
GO
/* 
   BEGIN TRANSACTION
   delete FROM Errorlog 
   EXEC Proc_Cn2Cs_ProductBatch_GST 0
   SELECT * FROM Productbatch WITH(NOLOCK) where prdid =5567
   --WHERE PrdBatId = 29809
   SELECT * FROM Productbatchdetails WITH(NOLOCK) 
   --WHERE PrdBatId = 29809
   --SELECT * FROM ProductBatch (NOLOCK) WHERE PrdId = 1741
   SELECT * FROM Errorlog WITH(NOLOCK)
   ROLLBACK TRANSACTION
*/
CREATE PROCEDURE Proc_Cn2Cs_ProductBatch_GST
(
       @Po_ErrNo INT OUTPUT
)
AS
/***************************************************************************************************
* PROCEDURE		: Proc_Cn2Cs_ProductBatch_GST
* PURPOSE		: To Insert and Update records in the Tables ProductBatch and ProductBatchDetails
* CREATED BY	: Murugan.R
* CREATED DATE	: 11/05/2017
* DATE      AUTHOR     DESCRIPTION
-----------------------------------------------------------------------------------------------------
* {date} {developer}  {brief modification description}
* 07/11/2019 Deepan	 LCTR Amount added (Pms ID :CRCRSTPAR0083)
* 23-03-2020 MOHANA S     CR   PARCS202100002  Contract Pricing Optimization
*****************************************************************************************************/
SET NOCOUNT ON
BEGIN
	SET @Po_ErrNo =0
	DECLARE @GSTEnabled as TINYINT
	DELETE FROM Cn2Cs_Prk_ProductBatch_GST WHERE   DownLoadFlag='Y'
	INSERT INTO ProductBatch_Temp_GST(DistCode,PrdCCode,PrdBatCode,ManufacturingDate,ExpiryDate,EffectiveDate,MRP,
	ListPrice,SellingRate,ClaimRate,AddRate1,AddRate2,AddRate3,AddRate4,AddRate5,
	AddRate6,DownLoadFlag,BatchStkStatus)	
	SELECT DISTINCT DistCode,PrdCCode,PrdBatCode,ManufacturingDate,ExpiryDate,EffectiveDate,MRP,
	ListPrice,SellingRate,ClaimRate,AddRate1,AddRate2,AddRate3,AddRate4,AddRate5,
	AddRate6,DownLoadFlag,0 as BatchStkStatus
	FROM Cn2Cs_Prk_ProductBatch_GST A WHERE 
	NOT EXISTS (
	SELECT PrdCCode,PrdBatCode,MRP FROM ProductBatch_Temp_GST  B WHERE 
	A.PrdCCode=B.PrdCCode and A.PrdBatCode=B.PrdBatCode AND CAST(A.MRP as Numeric(18,6))=CAST(B.MRP as Numeric(18,6)))
	AND A.DownLoadFlag='D'
	SET @GSTEnabled=0
	IF EXISTS(SELECT 'X' FROM GSTConfiguration WHERE ActivationStatus=1 and AcknowledgeStatus=1 and ConsoleAckStatus=1)
	BEGIN
		SET @GSTEnabled=1
	END
	
	IF EXISTS (SELECT * FROM SysObjects WHERE Name = 'PrdBatToAvoid' AND XTYPE = 'U')
	BEGIN
		DROP TABLE PrdBatToAvoid	
	END
	CREATE TABLE PrdBatToAvoid
	(
		PrdCCode NVARCHAR(200),
		PrdBatCode NVARCHAR(200)
	)
	DECLARE @ExistingBatchDetails	TABLE
	(
		PrdId		NUMERIC(18,0),
		PrdCCode	VARCHAR(100),
		PrdBatCode	VARCHAR(100),
		PriceCode	VARCHAR(500),
		OldLSP		NUMERIC(18,0),
		PrdBatId	NUMERIC(18,0),
		PriceId		NUMERIC(18,0)
	)
	DECLARE @ProductBatchWithCounter TABLE
	(
		Slno			NUMERIC(18,0) IDENTITY(1,1),
		TransNo			NUMERIC(18,0),
		PrdId			NUMERIC(18,0),
		PrdCCode		VARCHAR(100),
		PrdBatCode		VARCHAR(100),
		MnfDate			DATETIME,
		ExpDate			DATETIME		
	)	
	DECLARE @ProductBatchPriceWithCounter TABLE
	(
		Slno			NUMERIC(18,0) IDENTITY(1,1),
		TransNo			NUMERIC(18,0),
		PrdId			NUMERIC(18,0),
		PrdBatId		NUMERIC(18,0),
		PriceCode		NVARCHAR(1000),
		MRP				NUMERIC(18,6),
		ListPrice		NUMERIC(18,6),
		SellingRate		NUMERIC(18,6),
		ClaimRate		NUMERIC(18,6),
		AddRate1		NUMERIC(18,6)
		
	)
	DECLARE @ContractPrice TABLE
	(
	   PrdId NUMERIC(18,0),
	   PrdBatId NUMERIC(18,0)
	)
	
	DECLARE @ContractBatchPrice TABLE
    (
	   ContractId       NUMERIC(18,0),
	   CtgMainId        NUMERIC(18,0),
	   PrdId            NUMERIC(18,0),
	   PrdBatId         NUMERIC(18,0),
	   PriceId          NUMERIC(18,0),
	   PriceCode        NVARCHAR(500)
    )
    DECLARE @ProductBatchDetails TABLE
	(
	   PrdId                NUMERIC(18,0),
	   PrdBatId      NUMERIC(18,0),
	   PriceId              NUMERIC(18,0),
	   PriceCode            NVARCHAR(500),
	   NewBatchId           NUMERIC(18,0),
	   Slno                 INT,
	   PrdBatDetailValue    NUMERIC(36,4),
	   NewPriceId           NUMERIC(18,0)
	)
	--Added By Sathishkumar Veeramani 2015/01/08
	DECLARE @ExistingSellingPriceDetails TABLE
	(
	    PrdId        NUMERIC(18,0),
	    PrdBatId     NUMERIC(18,0),
	    PriceId      NUMERIC(18,0)
	)
	DECLARE @ExistingListPriceDetails TABLE
	(
	    PrdId        NUMERIC(18,0),
	    PrdBatId     NUMERIC(18,0),
	    PriceId      NUMERIC(18,0)
	)
	--Till Here  
	
	DECLARE @BatSeqId			AS	INT
	DECLARE @ValDiffRefNo		AS	VARCHAR(100)
	DECLARE @ExistPrdBatMaxId	AS 	INT
	DECLARE @NewPrdBatMaxId		AS 	INT	
	DECLARE @ContPriceId		AS 	NUMERIC(18,0)
	DECLARE @OldPriceIdExt 		AS 	NUMERIC(18,0)
	DECLARE @OldPriceId 		AS 	NUMERIC(18,0)
	DECLARE @NewPriceId			AS  INT
	DECLARE @ContPrdId          AS  INT
    DECLARE @ContPrdBatId       AS  INT
    DECLARE @ContPriceId1       AS  INT
    DECLARE @PriceId            AS  INT 
    DECLARE @PriceBatch         AS  INT
    DECLARE @BatchTransfer		AS	INT
	DECLARE @Po_BatchTransfer	AS	INT
	
	SELECT @OldPriceId=ISNULL(MAX(PriceId),0) FROM ProductBatchDetails WITH (NOLOCK)		
	SELECT @BatSeqId=MAX(BatchSeqId) FROM BatchCreationMaster WITH (NOLOCK)
	SELECT @ExistPrdBatMaxId=ISNULL(MAX(PrdBatId),0) FROM ProductBatch WITH (NOLOCK)
	SET @Po_ErrNo =0
	IF EXISTS(SELECT DISTINCT PrdCCode FROM Cn2Cs_Prk_ProductBatch_GST WITH (NOLOCK)
	WHERE PrdCCode NOT IN (SELECT PrdCCode FROM Product WITH (NOLOCK)) AND DownLoadFlag='D')
	BEGIN
		INSERT INTO PrdBatToAvoid(PrdCCode,PrdBatCode)
		SELECT DISTINCT PrdCCode,PrdBatCode FROM Cn2Cs_Prk_ProductBatch_GST WITH (NOLOCK)
		WHERE PrdCCode NOT IN (SELECT PrdCCode FROM Product WITH (NOLOCK)) AND DownLoadFlag='D'
		
		INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
		SELECT DISTINCT 1,'Product Batch','PrdCCode','Product :'+PrdCCode+' not available'
		FROM Cn2Cs_Prk_ProductBatch_GST	WITH (NOLOCK) WHERE PrdCCode NOT IN (SELECT PrdCCode FROM Product WITH (NOLOCK)) 
		AND DownLoadFlag='D'
		
		--->Added By Nanda on 05/05/2010
		INSERT INTO ReDownloadRequest(DistCode,Process,RefNo,Download,PrdCCode,PrdBatCode,UploadFlag)
		SELECT DISTINCT DistCode,'Product Batch',PrdBatCode,'Product',PrdCCode,'','N' FROM Cn2Cs_Prk_ProductBatch_GST WITH (NOLOCK) 
		WHERE PrdCCode NOT IN (SELECT PrdCCode FROM Product WITH (NOLOCK)) AND DownLoadFlag='D'
		--->Till Here				
	END
	IF EXISTS(SELECT DISTINCT PrdCCode FROM Cn2Cs_Prk_ProductBatch_GST WITH (NOLOCK)
	WHERE LEN(ISNULL(PrdBatCode,''))=0  AND DownLoadFlag='D')
	BEGIN
		INSERT INTO PrdBatToAvoid(PrdCCode,PrdBatCode)
		SELECT DISTINCT PrdCCode,PrdBatCode FROM Cn2Cs_Prk_ProductBatch_GST WITH (NOLOCK)
		WHERE LEN(ISNULL(PrdBatCode,''))=0 AND DownLoadFlag='D'
		
		INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
		SELECT DISTINCT 1,'Product Batch','PrdBatCode','Batch Code should not be empty for Product:'+PrdCCode
		FROM Cn2Cs_Prk_ProductBatch_GST WITH (NOLOCK)
		WHERE LEN(ISNULL(PrdBatCode,''))=0 AND DownLoadFlag='D'
	END
		
	INSERT INTO @ExistingBatchDetails (PrdId,PrdCCode,PrdBatCode,PriceCode,OldLSP,PrdBatId,PriceId)
	SELECT DISTINCT B.PrdId,B.PrdCCode,A.PrdBatCode,A.PrdBatCode+'-'+CAST(MRP AS NVARCHAR(25))+'-'+CAST(ListPrice AS NVARCHAR(25))+'-'+
	--Code Added and commented by Deepan 07/11/2019
	--CAST(SellingRate AS NVARCHAR(25))+'-'+CAST(ClaimRate AS NVARCHAR(25))+'-'+CAST(AddRate1 AS NVARCHAR(25))+'-'+CAST(LCTRAmount AS NVARCHAR(25)) AS PriceCode,
	CAST(SellingRate AS NVARCHAR(25))+'-'+CAST(ClaimRate AS NVARCHAR(25))+'-'+CAST(AddRate1 AS NVARCHAR(25)) AS PriceCode,
	ISNULL(D.PrdBatDetailValue,0) AS OldLSP,C.PrdBatId,D.PrdBatId FROM Cn2Cs_Prk_ProductBatch_GST A (NOLOCK) 
	INNER JOIN Product B (NOLOCK) ON A.PrdCCode=B.PrdCCode
	INNER JOIN ProductBatch C (NOLOCK)ON A.PrdBatCode=C.PrdBatCode AND B.PrdId=C.PrdId
	INNER JOIN ProductBatchDetails D (NOLOCK) ON  D.PrdBatId=C.PrdBatId AND D.DefaultPrice=1 AND D.SlNo=2
	WHERE A.PrdBatCode NOT IN (SELECT PrdBatCode FROM PrdBatToAvoid) AND DownLoadFlag='D'
	
	--Added By Sathishkumar Veeramani 2015/01/08
	--Selling Rate Validation
	INSERT INTO @ExistingSellingPriceDetails (PrdId,PrdBatId,PriceId)
	SELECT DISTINCT PrdId,B.PrdBatId,C.PriceId FROM Cn2Cs_Prk_ProductBatch_GST A (NOLOCK) 
	INNER JOIN @ExistingBatchDetails B ON A.PrdCCode = B.PrdCCode AND A.PrdBatCode = B.PrdBatCode
	INNER JOIN ProductBatchDetails C (NOLOCK) ON B.PrdBatId = C.PrdBatId AND A.SellingRate = C.PrdBatDetailValue
	WHERE C.SLNo = 3
	
	--List Price Validation
	INSERT INTO @ExistingListPriceDetails (PrdId,PrdBatId,PriceId)
	SELECT DISTINCT PrdId,B.PrdBatId,C.PriceId FROM Cn2Cs_Prk_ProductBatch_GST A (NOLOCK) 
	INNER JOIN @ExistingBatchDetails B ON A.PrdCCode = B.PrdCCode AND A.PrdBatCode = B.PrdBatCode
	INNER JOIN ProductBatchDetails C (NOLOCK) ON B.PrdBatId = C.PrdBatId AND A.ListPrice = C.PrdBatDetailValue
	WHERE C.SLNo = 2
	
	SELECT DISTINCT A.PrdId,A.PrdBatId,MAX(A.PriceId) AS PriceId INTO #ExistinPriceCloning 
	FROM @ExistingSellingPriceDetails A 
	INNER JOIN @ExistingListPriceDetails B ON A.PrdId = B.PrdId
	AND A.PrdBatId = B.PrdBatId AND A.PriceId = B.PriceId GROUP BY A.PrdId,A.PrdBatId
	
	IF EXISTS (SELECT DISTINCT PrdId,PrdBatId,PriceId FROM #ExistinPriceCloning)
	BEGIN
	    UPDATE A SET A.DefaultPrice = 0 FROM ProductBatchDetails A (NOLOCK) 
	    INNER JOIN #ExistinPriceCloning B ON A.PrdBatId = B.PrdBatId
	    
	    UPDATE A SET A.DefaultPrice = 1 FROM ProductBatchDetails A (NOLOCK)
	    INNER JOIN #ExistinPriceCloning B ON A.PrdBatId = B.PrdBatId AND A.PriceId = B.PriceId
	    
	    UPDATE A SET A.DefaultPriceId = B.PriceId FROM ProductBatch A (NOLOCK) 
	    INNER JOIN #ExistinPriceCloning B ON A.PrdBatId = B.PrdBatId	    
	END
	--Till Here
	
	--Added By Sathishkumar Veeramani 2015/01/08
	--Batch Cloning Details
    DECLARE @BatchPriceId AS NUMERIC(18,0)
    SELECT @BatchPriceId = ISNULL(MAX(PriceId),0) FROM ProductBatchDetails (NOLOCK)
	SELECT DISTINCT CAST(DENSE_RANK() OVER (ORDER BY MAX(PrdBatId),MRP,ListPrice,SellingRate,ClaimRate,AddRate1) AS NUMERIC(18,0))+@BatchPriceId AS PriceId,
	MAX(PrdBatId) AS PrdBatId,A.PrdBatCode+'-'+CAST(MRP AS NVARCHAR(25))+'-'+CAST(ListPrice AS NVARCHAR(25))+'-'+CAST(SellingRate AS NVARCHAR(25))+'-'+
	--Code Added and commented by Deepan 07/11/2019
	--CAST(ClaimRate AS NVARCHAR(25))+'-'+CAST(AddRate1 AS NVARCHAR(25))+'-'+CAST(LCTRAmount AS NVARCHAR(25)) AS PriceCode,MRP,ListPrice,
	CAST(ClaimRate AS NVARCHAR(25))+'-'+CAST(AddRate1 AS NVARCHAR(25))AS PriceCode,MRP,ListPrice,
	SellingRate,ClaimRate,AddRate1 AS LCTRAmount INTO #BatchCloningDetails FROM Cn2Cs_Prk_ProductBatch_GST A (NOLOCK)
	INNER JOIN Product B (NOLOCK) ON A.PrdCCode = B.PrdCCode 
	INNER JOIN ProductBatch C (NOLOCK) ON B.PrdId = C.PrdId AND A.PrdBatCode = C.PrdBatCode WHERE DownloadFlag = 'D'
	AND NOT EXISTS (SELECT DISTINCT PrdId,PrdBatId FROM #ExistinPriceCloning D WHERE C.PrdId = D.PrdId AND C.PrdBatId = D.PrdBatId) 
	GROUP BY A.PrdBatCode,MRP,ListPrice,SellingRate,ClaimRate,AddRate1
	
	
	
	IF EXISTS (SELECT DISTINCT PrdBatId FROM #BatchCloningDetails)
	BEGIN
	    UPDATE A SET DefaultPrice = 0 FROM ProductBatchDetails A WITH(NOLOCK) 
		INNER JOIN #BatchCloningDetails B ON A.PrdBatId = B.PrdBatId
			    
		INSERT INTO ProductBatchDetails (PriceId,PrdBatId,PriceCode,BatchSeqId,SLNo,PrdBatDetailValue,DefaultPrice,PriceStatus,
		Availability,LastModBy,LastModDate,AuthId,AuthDate,XMLUpload)
		SELECT DISTINCT PriceId,PrdBatId,PriceCode,1,SlNo,Rate,1,1,1,1,GETDATE(),1,GETDATE(),0 FROM(
		SELECT DISTINCT PriceId,PrdBatId,PriceCode,1 AS SlNo,MRP AS Rate FROM #BatchCloningDetails UNION
		SELECT DISTINCT PriceId,PrdBatId,PriceCode,2 AS SlNo,ListPrice AS Rate FROM #BatchCloningDetails UNION
		SELECT DISTINCT PriceId,PrdBatId,PriceCode,3 AS SlNo,SellingRate AS Rate FROM #BatchCloningDetails UNION
		SELECT DISTINCT PriceId,PrdBatId,PriceCode,4 AS SlNo,ClaimRate AS Rate FROM #BatchCloningDetails UNION
		SELECT DISTINCT PriceId,PrdBatId,PriceCode,5 AS SlNo,LCTRAmount AS Rate FROM #BatchCloningDetails)Qry ORDER BY PrdBatId
		SELECT @BatchPriceId = ISNULL(MAX(PriceId),0) FROM ProductBatchDetails (NOLOCK)
		UPDATE Counters SET CurrValue = @BatchPriceId WHERE TabName = 'ProductBatchDetails' AND FldName = 'PriceId'
		
        UPDATE A SET DefaultPriceId = B.PriceId FROM ProductBatch A WITH(NOLOCK) 
		INNER JOIN #BatchCloningDetails B ON A.PrdBatId = B.PrdBatId
    END
	--Till Here
		
	IF EXISTS (SELECT * FROM @ExistingBatchDetails)
	BEGIN
		UPDATE A SET MnfDate=C.ManufacturingDate,ExpDate=ExpiryDate
		FROM ProductBatch A (NOLOCK) INNER JOIN @ExistingBatchDetails B ON A.PrdId=B.PrdId AND A.PrdBatId=B.PrdBatId
		INNER JOIN Cn2Cs_Prk_ProductBatch_GST C (NOLOCK) ON A.PrdBatCode=C.PrdBatCode  AND B.PrdCCode=C.PrdCCode
		WHERE C.DownLoadFlag='D'
	
		UPDATE Cn2Cs_Prk_ProductBatch_GST SET DownLoadFlag='Y' 
		WHERE PrdCCode+'~'+PrdBatCode IN (SELECT PrdCCode+'~'+PrdBatCode FROM @ExistingBatchDetails) AND DownLoadFlag='D' 
	END
	
	DECLARE @Count1	NUMERIC(18,0)
	DECLARE @Count2	NUMERIC(18,0)
	SELECT @Count1=COUNT(*) FROM Cn2Cs_Prk_ProductBatch_GST
	SELECT @Count2=COUNT(*) FROM @ExistingBatchDetails
	IF @Count1<>@Count2
		BEGIN
	--IF NOT EXISTS (SELECT * FROM @ExistingBatchDetails)
	--BEGIN
	---New ProductBatch		
		INSERT INTO @ProductBatchWithCounter
		SELECT DISTINCT (SELECT CurrValue FROM Counters (NOLOCK) WHERE TabName='ProductBatch' AND FldName='PrdBatId'),
		B.PrdId,A.PrdCCode,A.PrdBatCode,ManufacturingDate,ExpiryDate FROM Cn2Cs_Prk_ProductBatch_GST A (NOLOCK) 
		INNER JOIN Product B (NOLOCK) ON A.PrdCCode=B.PrdCCode WHERE NOT EXISTS (SELECT PrdBatCode FROM ProductBatch C (NOLOCK) 
		WHERE C.PrdBatCode=A.PrdBatCode AND B.PrdId=C.PrdId)AND 
		A.PrdCCode+'~'+A.PrdBatCode NOT IN (SELECT PrdCCode+'~'+PrdBatCode FROM PrdBatToAvoid) AND A.DownLoadFlag='D'
		ORDER BY ManufacturingDate ASC --Muthuvel
		
			
		UPDATE @ProductBatchWithCounter SET TransNo=TransNo+Slno
	--Existing ProductBatch 
			INSERT INTO @ProductBatchWithCounter
			SELECT DISTINCT C.PrdBatId,B.PrdId,A.PrdCCode,A.PrdBatCode,
			ManufacturingDate,ExpiryDate FROM Cn2Cs_Prk_ProductBatch_GST A (NOLOCK) INNER JOIN Product B (NOLOCK) ON A.PrdCCode=B.PrdCCode
			INNER JOIN ProductBatch C ON B.PrdId = C.PrdId AND C.PrdBatCode = A.PrdBatCode WHERE 
			NOT EXISTS (SELECT PrdBatId FROM ProductBatchDetails D(NOLOCK) WHERE D.PrdBatId = C.PrdBatId AND D.PriceId = C.DefaultPriceId)	
			AND  A.PrdCCode+'~'+A.PrdBatCode NOT IN (SELECT PrdCCode+'~'+PrdBatCode FROM PrdBatToAvoid) AND A.DownLoadFlag='D'
			AND  A.PrdCCode+'~'+A.PrdBatCode NOT IN (SELECT PrdCCode+'~'+PrdBatCode FROM @ProductBatchWithCounter)
	
	 --Product Batch   
		INSERT INTO ProductBatch(PrdId,PrdBatId,PrdBatCode,CmpBatCode,MnfDate,ExpDate,Status,
		TaxGroupId,BatchSeqId,DecPoints,DefaultPriceId,EnableCloning,Availability,LastModBy,LastModDate,AuthId,AuthDate)
		SELECT DISTINCT A.PrdId,TransNo,PrdBatCode,PrdBatCode,MnfDate,ExpDate,
		CASE @GSTEnabled WHEN 1 THEN 1 ELSE 0 END as Status,
		B.TaxGroupId,@BatSeqId,
		6,0,0,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchWithCounter A 
		INNER JOIN Product B ON A.PrdId=B.PrdId WHERE NOT EXISTS (SELECT PrdBatCode FROM ProductBatch C WHERE A.PrdId = C.PrdId 
		AND A.PrdBatCode = C.PrdBatCode)
    --END 
		END
	IF EXISTS (SELECT * FROM @ProductBatchWithCounter) 
	BEGIN
		UPDATE Counters SET CurrValue = (SELECT MAX(PrdBatId) FROM ProductBatch) WHERE TabName = 'ProductBatch' AND FldName = 'prdbatid'
	
		INSERT INTO @ProductBatchPriceWithCounter
		SELECT DISTINCT (SELECT CurrValue FROM Counters (NOLOCK) WHERE TabName='ProductBatchDetails' AND FldName='PriceId'),A.PrdId,A.TransNo,
		A.PrdBatCode+'-'+CAST(MRP AS NVARCHAR(25))+'-'+CAST(ListPrice AS NVARCHAR(25))+'-'+
		--Code Added and commented by Deepan 07/11/2019
		--CAST(SellingRate AS NVARCHAR(25))+'-'+CAST(ClaimRate AS NVARCHAR(25))+'-'+CAST(AddRate1 AS NVARCHAR(25))+'-'+CAST(LCTRAmount AS NVARCHAR(25)),MRP,ListPrice,
		CAST(SellingRate AS NVARCHAR(25))+'-'+CAST(ClaimRate AS NVARCHAR(25))+'-'+CAST(AddRate1 AS NVARCHAR(25)),MRP,ListPrice,
		SellingRate,ClaimRate,AddRate1 FROM @ProductBatchWithCounter A INNER JOIN Cn2Cs_Prk_ProductBatch_GST B WITH (NOLOCK)
		ON A.PrdCCode=B.PrdCCode AND A.PrdBatCode=B.PrdBatCode WHERE B.DownLoadFlag='D'
		
		UPDATE @ProductBatchPriceWithCounter SET TransNo=TransNo+Slno
				
		UPDATE A SET A.DefaultPrice=0 FROM ProductBatchDetails A WITH (NOLOCK),@ProductBatchPriceWithCounter B  
	    WHERE A.PrdBatId = B.PrdBatId
		
	END			
	
	IF (SELECT COUNT(*) FROM BatchCreation WHERE BatchSeqId=@BatSeqId)=5
	BEGIN
		INSERT INTO ProductBatchDetails(PriceId,PrdBatId,PriceCode,BatchSeqId,SLNo,PrdBatDetailValue,
		DefaultPrice,PriceStatus,Availability,LastModBy,LastModDate,AuthId,AuthDate)
		SELECT DISTINCT TransNo,PrdBatId,PriceCode,@BatSeqId,1,MRP,1,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchPriceWithCounter
		UNION
		SELECT DISTINCT TransNo,PrdBatId,PriceCode,@BatSeqId,2,ListPrice,1,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchPriceWithCounter
		UNION
		SELECT DISTINCT TransNo,PrdBatId,PriceCode,@BatSeqId,3,SellingRate,1,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchPriceWithCounter
		UNION
		SELECT DISTINCT TransNo,PrdBatId,PriceCode,@BatSeqId,4,ClaimRate,1,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchPriceWithCounter
		UNION
		SELECT DISTINCT TransNo,PrdBatId,PriceCode,@BatSeqId,5,AddRate1 AS LCTRAmount,1,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchPriceWithCounter
	END
	ELSE IF (SELECT COUNT(*) FROM BatchCreation WHERE BatchSeqId=@BatSeqId)=5
	BEGIN
		INSERT INTO ProductBatchDetails(PriceId,PrdBatId,PriceCode,BatchSeqId,SLNo,PrdBatDetailValue,
		DefaultPrice,PriceStatus,Availability,LastModBy,LastModDate,AuthId,AuthDate)
		SELECT DISTINCT TransNo,PrdBatId,PriceCode,@BatSeqId,1,MRP,1,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchPriceWithCounter
		UNION
		SELECT DISTINCT TransNo,PrdBatId,PriceCode,@BatSeqId,2,ListPrice,1,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchPriceWithCounter
		UNION
		SELECT DISTINCT TransNo,PrdBatId,PriceCode,@BatSeqId,3,SellingRate,1,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchPriceWithCounter
		UNION
		SELECT DISTINCT TransNo,PrdBatId,PriceCode,@BatSeqId,4,ClaimRate,1,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchPriceWithCounter
		UNION
		SELECT DISTINCT TransNo,PrdBatId,PriceCode,@BatSeqId,5,AddRate1 AS LCTRAmount,1,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchPriceWithCounter
		
	END	
	UPDATE A SET DefaultPriceId=C.TransNo FROM ProductBatch A INNER JOIN @ProductBatchPriceWithCounter C ON C.PrdBatId=A.PrdBatId AND A.PrdId=C.PrdId	
	
	IF EXISTS(SELECT * FROM @ProductBatchPriceWithCounter) 
	BEGIN
		UPDATE Counters SET CurrValue = (SELECT MAX(PriceId) FROM ProductBatchDetails) 	WHERE TabName = 'ProductBatchDetails' AND FldName = 'PriceId'	
	END
	
	--Batch Cloning Price Details
	
	IF EXISTS(SELECT * FROM Configuration WHERE ModuleId='BotreeRateForOldBatch' AND ModuleName='Botree Product Batch Download' AND Status=1)
	BEGIN
		IF EXISTS(SELECT * FROM @ProductBatchPriceWithCounter A INNER JOIN @ExistingBatchDetails B ON A.PrdBatId=B.PrdBatId AND A.PrdId=B.PrdId
		WHERE (B.OldLSP-A.ListPrice)<>0 AND Slno=2)
		BEGIN
			SELECT @ValDiffRefNo = dbo.Fn_GetPrimaryKeyString('ValueDifferenceClaim','ValDiffRefNo',CAST(YEAR(GetDate()) AS INT),MONTH(GETDATE()))
			
			INSERT INTO ValueDifferenceClaim(ValDiffRefNo,Date,PrdId,PrdBatId,OldPriceId,NewPriceId,OldPrice,NewPrice,Qty,
			ValueDiff,ClaimAmt,Availability,LastModBy,LastModDate,AuthId,AuthDate)
			
			SELECT @ValDiffRefNo,GETDATE(),A.PrdId,A.PrdBatID,B.PriceId,C.TransNo,B.OldLsp,C.ListPrice,
			ISNULL(SUM(A.PrdBatLcnSih+A.PrdBatLcnUih-A.PrdBatLcnRessih-A.PrdBatLcnResUih),0),B.OldLsp-C.ListPrice,
			ISNULL(SUM(A.PrdBatLcnSih+A.PrdBatLcnUih-A.PrdBatLcnRessih-A.PrdBatLcnResUih),0)*(B.OldLsp-C.ListPrice),
			1,1,GETDATE(),1,GETDATE() FROM ProductBatchLocation A INNER JOIN @ExistingBatchDetails B ON A.PrdId=B.PrdId AND A.PrdBatID=B.PrdBatId 
			INNER JOIN @ProductBatchPriceWithCounter C ON A.PrdBatId=C.PrdBatId AND A.PrdId=C.PrdId
			WHERE C.Slno=2	GROUP BY A.PrdId,A.PrdBatID,B.PriceId,C.TransNo,B.OldLsp,C.ListPrice
			
			UPDATE Counters SET CurrValue = CurrValue+1  WHERE TabName = 'ValueDifferenceClaim' AND FldName = 'ValDiffRefNo'
		END
	END
	UPDATE ProductBatch SET ProductBatch.DefaultPriceId=PBD.PriceId,ProductBatch.BatchSeqId=PBD.BatchSeqId
	FROM ProductBatchDetails PBD WITH (NOLOCK) WHERE ProductBatch.PrdBatId=PBD.PrdBatId AND PBD.DefaultPrice=1
	
	UPDATE ProductBatch SET EnableCloning=1 WHERE PrdBatId IN
	(
	 SELECT PrdBatId FROM ProductBatchDetails WITH (NOLOCK) GROUP BY PrdBatId  HAVING(COUNT(DISTINCT PriceId)>1)
	)
	
	SELECT PrdBatId INTO #ZeroBatches FROM ProductBatchDetails WITH (NOLOCK)
	GROUP BY PrdBatId HAVING SUM(DefaultPrice)=0
	
	SELECT B.PrdId,B.PrdBatId,MAX(PriceId) As PriceId INTO #ZeroMaxPrices
	FROM ProductBatchDetails A INNER JOIN ProductBatch B ON A.PrdBatId=B.PrdBatId
	INNER JOIN #ZeroBatches C ON A.PrdBatId=C.PrdBatId
	WHERE A.DefaultPrice=0 AND NOT EXISTS
	(SELECT DISTINCT PriceId FROM #BatchCloningDetails D WHERE A.PrdBatId = D.PrdBatId AND A.PriceId = D.PriceId)
	AND NOT EXISTS (SELECT DISTINCT PriceId FROM #ExistinPriceCloning E WHERE A.PrdBatId = E.PrdBatId AND A.PriceId = E.PriceId)
	GROUP BY B.PrdId,B.PrdBatId 
	
	
	UPDATE ProductBatch Set DefaultPriceId=B.PriceId FROM ProductBatch A,#ZeroMaxPrices B
	WHERE A.PrdBatId=B.PrdbatId and A.PrdId=B.PrdId 
	
	UPDATE ProductBatchDetails Set DefaultPrice=1 FROM #ZeroMaxPrices A
	WHERE ProductBatchDetails.PrdbatId=A.PrdBatId AND ProductBatchDetails.PriceId=A.PriceId
	
	SET @Po_ErrNo=0
	SELECT @OldPriceIdExt=ISNULL(MAX(PriceId),0) FROM ProductBatchDetails
	--IF @ExistPrdBatMaxId>0
	--BEGIN
	--	SELECT @NewPrdBatMaxId=ISNULL(MAX(PrdBatId),0) FROM ProductBatch
	--	IF @NewPrdBatMaxId>@ExistPrdBatMaxId
	--	BEGIN
		    
	--	    --Existing Contract Pricing Percentage Updated to New Batch Download
	--	    --Modified by Rajesh
		    
 --    	--    SELECT DISTINCT RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCCode,MAX(CreatedDate) AS CreatedDate INTO #SpecialRateCreatedDate
	--	    --FROM SpecialRateAftDownload WITH(NOLOCK) GROUP BY RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCCode ORDER BY PrdCCode
	--	    SELECT DISTINCT RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCCode,MAX(CreatedDate) AS CreatedDate  INTO #SpecialRateCreatedDate1  
	--		FROM SpecialRateAftDownload_calc WITH(NOLOCK) GROUP BY RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCCode ORDER BY PrdCCode
	--		SELECT DISTINCT A.RtrCtgCode,A.RtrCtgValueCode,A.RtrCode,A.PrdCCode,A.CreatedDate ,A.ApplyOn,A.TYPE INTO #SpecialRateCreatedDate
	--		FROM SpecialRateAftDownload_calc A WITH(NOLOCK) INNER JOIN  #SpecialRateCreatedDate1 B (NOLOCK) 
	--		ON A.RtrCtgCode = B.RtrCtgCode AND A.RtrCtgValueCode  = B.RtrCtgValueCode AND A.RtrCode= B.RtrCode AND A.PrdCCode= B.PrdCCode
	--		AND A.CreatedDate = B.CreatedDate AND A.ApplyOn is not null
	--		SELECT DISTINCT C.PrdId,E.PrdBatId,TransNo AS PriceId,A.RtrCtgCode,A.RtrCtgValueCode,A.RtrCode,A.PrdCCode,  
	--	   D.PrdBatCode,DiscountPerc,B.ApplyOn,B.Type,
	--	   (CASE B.ApplyOn WHEN 1 THEN 
	--		(CASE B.[Type] WHEN 1 THEN (MRP*100/(100+DiscountPerc)) WHEN 2 THEN MRP-(MRP*(DiscountPerc/100))
	--			ELSE SellingRate-(SellingRate*(DiscountPerc/100))  END)	 
	--		ELSE SellingRate-(SellingRate*(DiscountPerc/100)) END) AS SplRate
	--	   INTO #SpecialRateDetails   
	--	   FROM SpecialRateAftDownload_calc A WITH(NOLOCK)  
	--	   INNER JOIN #SpecialRateCreatedDate B ON A.RtrCtgCode = B.RtrCtgCode AND A.RtrCtgValueCode = B.RtrCtgValueCode   
	--	   AND A.RtrCode = B.RtrCode AND A.PrdCCode = B.PrdCCode AND A.CreatedDate = B.CreatedDate  
	--	   INNER JOIN Product C WITH(NOLOCK) ON A.PrdCCode = C.PrdCCode     
	--	   INNER JOIN ProductBatch D WITH(NOLOCK) ON C.PrdId = D.PrdId  
	--	   INNER JOIN @ProductBatchPriceWithCounter E ON C.PrdId = E.PrdId AND D.PrdBatId = E.PrdBatId  
	--	   ORDER BY A.PrdCCode 
	--		--Till Here			
	
	--		SELECT DISTINCT MAX(E.ContractId) AS ContractId,A.PrdId,A.PrdBatId,A.PriceId,B.CtgLevelId,C.CtgMainId,SplRate,RtrCtgValueCode,A.ApplyOn, A.Type
	--		INTO #SpecialContractDetails FROM #SpecialRateDetails A WITH(NOLOCK) 
	--		INNER JOIN RetailerCategoryLevel B WITH(NOLOCK) ON A.RtrCtgCode = B.CtgLevelName 
	--		INNER JOIN RetailerCategory C WITH(NOLOCK) ON A.RtrCtgValueCode = C.CtgCode AND B.CtgLevelId = C.CtgLevelId
	--		INNER JOIN ContractPricingMaster D WITH(NOLOCK) ON B.CtgLevelId = D.CtgLevelId AND C.CtgMainId = D.CtgMainId 
	--		INNER JOIN ContractPricingDetails E WITH(NOLOCK) ON D.ContractId = E.ContractId AND A.PrdId = E.PrdId 
	--		GROUP BY A.PrdId,A.PrdBatId,A.PriceId,B.CtgLevelId,C.CtgMainId,SplRate,RtrCtgValueCode,A.ApplyOn, A.Type
			
	--		---Tax Calculation
	--		DECLARE @PrdIdTax as BIGINT
	--		DECLARE @PrdbatIdTax AS BIGINT
	--		DECLARE Cur_Tax CURSOR
	--		FOR 
	--		SELECT DISTINCT PrdId,PrdbatId FROM #SpecialContractDetails		
	--		OPEN Cur_Tax	
	--		FETCH NEXT FROM Cur_Tax INTO @PrdIdTax,@PrdbatIdTax
	--		WHILE @@FETCH_STATUS=0
	--		BEGIN	
	--				EXEC Proc_SellingTaxCalCulation @PrdIdTax,@PrdbatIdTax
	--		FETCH NEXT FROM Cur_Tax INTO @PrdIdTax,@PrdbatIdTax		
	--		END		
	--		CLOSE Cur_Tax
	--		DEALLOCATE Cur_Tax	
	--		--Modified by Rajesh
						
	--		SELECT DISTINCT A.PrdId,A.PrdBatId,PriceId,RtrCtgValueCode,DENSE_RANK ()OVER (ORDER BY A.PriceId,A.PrdbatId,RtrCtgValueCode)+ @OldPriceIdExt AS NewPriceId,
	--		--CAST(SplRate*100/(100+TaxPercentage) AS NUMERIC(38,6)) AS NewSelRate 
	--		CASE A.ApplyOn WHEN 1 THEN 
	--									(CASE [Type] WHEN 1 THEN (SplRate*100)/(100+TaxPercentage)
	--										WHEN 2 THEN (SplRate*100)/(100+TaxPercentage)	END)
	--		ELSE CAST(SplRate AS NUMERIC(38,6)) END AS NewSelRate
	--		INTO #SplProductBatchDetails
	--		FROM #SpecialContractDetails A WITH(NOLOCK) INNER JOIN ProductBatchTaxPercent B WITH(NOLOCK) ON A.PrdId = B.PrdId
	--		AND A.PrdBatId = B.PrdBatId ORDER BY A.PrdId,A.PrdBatId,PriceId,RtrCtgValueCode
			
		
	--		--Product Batch Details Value Added			
	--		INSERT INTO ProductBatchDetails (PriceId,PrdBatId,PriceCode,BatchSeqId,SLNo,PrdBatDetailValue,DefaultPrice,PriceStatus,
 --           Availability,LastModBy,LastModDate,AuthId,AuthDate,XMLUpload) 
 --           SELECT DISTINCT NewPriceId,A.PrdBatId,PriceCode+'SplRate'+CONVERT(NVARCHAR(200),B.NewSelRate)+CONVERT(NVARCHAR(10),GETDATE(),121),
 --           A.BatchSeqId,A.SLNo,(CASE SelRte WHEN 1 THEN B.NewSelRate ELSE PrdBatDetailValue END),0,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,
 --           CONVERT(NVARCHAR(10),GETDATE(),121),0
 --           FROM ProductBatchDetails A WITH(NOLOCK) 
 --           INNER JOIN #SplProductBatchDetails B ON A.PrdBatId = B.PrdBatId AND A.PriceId = B.PriceId
 --           INNER JOIN ProductBatch C WITH(NOLOCK) ON A.PrdBatId = C.PrdBatId
 --           INNER JOIN BatchCreation D WITH(NOLOCK) ON C.BatchSeqId = D.BatchSeqId AND A.SLNo = D.SlNo ORDER BY A.PrdBatId,NewPriceId 
 --           UPDATE Counters SET CurrValue =(SELECT MAX(PriceId) FROM ProductBatchDetails) WHERE TabName = 'ProductBatchDetails' AND FldName = 'PriceId'
            	
 --           --Contract Pricing Details Added
 --           INSERT INTO ContractPricingDetails (ContractId,PrdId,PrdBatId,PriceId,Discount,FlatAmtDisc,Availability,LastModBy,LastModDate,AuthId,
 --           AuthDate,CtgValMainId,ClaimablePercOnMRP)            
 --           SELECT DISTINCT ContractId,A.PrdId,A.PrdBatId,B.NewPriceId,0,0,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121),0,0
 --        FROM #SpecialContractDetails A INNER JOIN #SplProductBatchDetails B ON A.PrdId = B.PrdID AND A.PrdBatId = B.PrdBatId AND A.RtrCtgValueCode=B.RtrCtgValueCode
 --           WHERE NOT EXISTS (SELECT ContractId FROM ContractPricingDetails C WITH(NOLOCK) WHERE A.ContractId = C.ContractId 
 --           AND A.PrdId = C.PrdID AND A.PrdBatId = C.PrdBatId) ORDER BY ContractId,A.PrdId,A.PrdBatId,B.NewPriceId
 --           --Special Rate Updated
 --           INSERT INTO SpecialRateAftDownload (RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCCode,PrdBatCCode,SplSelRate,FromDate,CreatedDate,DownloadedDate,
 --           ContractPriceIds,DiscountPerc,SplrateId)
 --           SELECT DISTINCT RtrCtgCode,A.RtrCtgValueCode,A.RtrCode,A.PrdCCode,A.PrdBatCode,A.SplRate,CONVERT(NVARCHAR(10),GETDATE(),121),GETDATE(),GETDATE(),
 --           '-'+CONVERT(NVARCHAR(50),NewPriceId)+'-',DiscountPerc,0
 --           FROM #SpecialRateDetails A INNER JOIN #SplProductBatchDetails B ON A.PrdId = B.PrdId AND A.PrdBatId = B.PrdBatId 
 --           and A.RtrCtgValueCode=B.RtrCtgValueCode
 --           ORDER BY PrdCCode,PrdBatCode
 --           --Added By Rajesh
 --           INSERT INTO SpecialRateAftDownload_calc (RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCCode,PrdBatCCode,SplSelRate,FromDate,CreatedDate,DownloadedDate,
 --           ContractPriceIds,DiscountPerc,SplrateId,ApplyOn,TYPE)
 --           SELECT DISTINCT RtrCtgCode,A.RtrCtgValueCode,A.RtrCode,A.PrdCCode,A.PrdBatCode,A.SplRate,CONVERT(NVARCHAR(10),GETDATE(),121),GETDATE(),GETDATE(),
 --           '-'+CONVERT(NVARCHAR(50),NewPriceId)+'-',DiscountPerc,0,A.ApplyOn,A.TYPE
 --           FROM #SpecialRateDetails A INNER JOIN #SplProductBatchDetails B ON A.PrdId = B.PrdId AND A.PrdBatId = B.PrdBatId 
 --           and A.RtrCtgValueCode=B.RtrCtgValueCode
 --           ORDER BY PrdCCode,PrdBatCode
 --           --Till Here
	--	END
	--END
	
	SELECT @NewPriceId=CurrValue FROM Counters (NOLOCK)	WHERE TabName='ProductBatchDetails' AND FldName='PriceId' 		
	IF @NewPriceId>@OldPriceId
	BEGIN
		IF EXISTS(SELECT * FROM Configuration(NOLOCK) WHERE ModuleId='BotreeRateForOldBatch'
		AND ModuleName='Botree Product Batch Download' AND Status=1)
		BEGIN
			EXEC Proc_DefaultPriceUpdation @ExistPrdBatMaxId,@OldPriceId,1
		END
	END
	IF EXISTS(SELECT * FROM ProductBatchDetails WHERE PriceId>=@OldPriceId)
	BEGIN
		EXEC Proc_DefaultPriceHistory 0,0,@NewPriceId,2,1
	END
	
	UPDATE Cn2Cs_Prk_ProductBatch_GST SET DownLoadFlag='Y' 
	WHERE PrdCCode+'~'+PrdBatCode IN (SELECT P.PrdCCode+'~'+PB.PrdBatCode
	FROM Product P,ProductBatch PB WHERE P.PrdId=PB.PrdId)	
	RETURN		
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_ReturnSplDiscount' AND TYPE='P')
DROP PROCEDURE Proc_ReturnSplDiscount
GO
--EXEC Proc_ReturnSplDiscount 1117,1846,125,'2020-03-30',0,0,0,0,0,0,0,101
CREATE PROCEDURE Proc_ReturnSplDiscount
(
	@Pi_PrdId				INT,
	@Pi_PrdBatId			INT,
	@Pi_RtrId				INT,	
	@Pi_InvDate				DATETIME,
	@Po_SplDiscount			NUMERIC(38,6) 	OUTPUT,
	@Po_SplFlatAmount		NUMERIC(38,6) 	OUTPUT,
	@Po_SplPriceId			INT 			OUTPUT,
	@Po_MRP					NUMERIC(38,6) 	OUTPUT,
	@Po_SellRate			NUMERIC(38,6) 	OUTPUT,
	@Po_ClaimablePercOnMRP	NUMERIC(38,6) 	OUTPUT,
	@Po_ContractId			INT OUTPUT,
	@Pi_RtrShipId			INT=NULL
)
AS
/*********************************
* PROCEDURE	: Proc_ReturnSplDiscount
* PURPOSE	: To Return the Special Discount for the Selected Retailer and Product
* CREATED	: Karthick
* CREATED DATE	: 01-03-2015
* NOTE		: General SP for Returning the Special Discount for the Selected Retailer and Product
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* 23-03-2020 MOHANA S     CR   PARCS202100002  Contract Pricing Optimization
*********************************/
SET NOCOUNT ON
BEGIN
	DECLARE @ContractId		  AS INT
	DECLARE @RtrTaxGroupId    AS INT
	DECLARE @PrdCtgValMainId  AS INT
	DECLARE @DiscAlone		  AS INT
	DECLARE @DisplayDisc      AS INT
	
	SET @ContractId = 0
	SET @Po_SplDiscount = 0
	SET @Po_SplFlatAmount = 0
	SET @Po_SplPriceId = 0
	SET @Po_MRP = 0
	SET @Po_SellRate = 0
	SET @DiscAlone=0
	SET @DisplayDisc=0
	SET @Po_ContractId=0
	
	--GST Change
	SELECT @RtrTaxGroupId=A.TaxGroupId FROM RetailerShipAdd A (NOLOCK) INNER JOIN Retailer B (NOLOCK) ON A.RtrId=B.RtrId
	WHERE A.RtrId=@Pi_RtrId and A.RtrShipId=@Pi_RtrShipId
	
	IF ISNULL(@RtrTaxGroupId,0)=0
	BEGIN
		SELECT @RtrTaxGroupId=TaxGroupId FROM Retailer (NOLOCK) WHERE RtrId=@Pi_RtrId
	END
	--Till Here
	
	CREATE TABLE #CONTRACTPRODUCTS
	(
		ContractId		INT,
		Prdid			INT,
		DiscountType    INT,
		Discount		NUMERIC(18,2),
		FlatAmount		NUMERIC(18,6),
		SpecialPrice	NUMERIC(18,6),
		ApplyOn         INT,
		WithTax			INT
	)
	CREATE TABLE #CONTRACTDETAILS
	(
		ContractId		INT,
		Prdid			INT,
		DiscountType    INT,
		Discount		NUMERIC(18,2),
		FlatAmount		NUMERIC(18,6),
		SpecialPrice	NUMERIC(18,6),
		ApplyOn         INT,
		WithTax			INT,
		AllowDisc		INT
	)
	SELECT @PrdCtgValMainId=PrdCtgValMainId FROM Product WHERE PrdId=@Pi_PrdId
	SELECT @DisplayDisc=ISNULL(Status,0) FROM Configuration where moduleid='SplPrice2'
	
	SELECT DISTINCT P.PRDID,PrdCtgValMainId INTO #TEMPRODUCT FROM Product P (NOLOCK) INNER JOIN ProductBatch PB(NOLOCK)
	ON P.PrdId=PB.PrdId  WHERE P.PrdStatus=1 AND PB.Status=1 
	
	INSERT INTO #CONTRACTPRODUCTS
	SELECT DISTINCT A.contractid,E.Prdid,AllowDiscount,Discount,FlatAmtDisc,SpecialPrice,ApplyOn,WithTax   
	FROM contractpricingmaster A(NOLOCK)
	INNER JOIN ContractPricingDetails B(NOLOCK) ON A.ContractId=b.ContractId
	INNER JOIN #TEMPRODUCT E On E.Prdid = B.Prdid
	WHERE E.PRDID=@Pi_PrdId AND A.Status=1 AND @Pi_InvDate BETWEEN A.ValidFromDate AND A.ValidTillDate AND DisplayMode=1
	
	INSERT INTO #CONTRACTPRODUCTS
	SELECT DISTINCT A.contractid,E.PrdId,AllowDiscount,Discount,FlatAmtDisc,SpecialPrice,ApplyOn,WithTax 
	FROM contractpricingmaster A(NOLOCK)
	INNER JOIN ContractPricingDetails B(NOLOCK) ON A.ContractId=b.ContractId
	INNER JOIN ProductCategoryValue C(NOLOCK) ON  C.PrdCtgValMainId=B.PRDID
	INNER JOIN ProductCategoryValue D(NOLOCK) ON D.PrdCtgValLinkCode LIKE CAST(c.PrdCtgValLinkCode AS NVARCHAR(1000)) + '%'
	INNER JOIN  #TEMPRODUCT  E On D.PrdCtgValMainId = E.PrdCtgValMainId 
	WHERE DisplayMode=1 AND E.PRDID=@Pi_PrdId AND A.Status=1 AND @Pi_InvDate BETWEEN A.ValidFromDate AND A.ValidTillDate 		
	
	--Return Contract Price Id if set at Retailer Level
	INSERT INTO #CONTRACTDETAILS
	SELECT  MAX(R.ContractId),Prdid,AllowDiscount,Discount,FLATAMOUNT,SpecialPrice,ApplyOn,WithTax,AllowDiscount 
	FROM Contractpricingmaster R 
	INNER JOIN ContractPricingAttributes CA ON CA.ContractId=R.ContractId
	INNER JOIN #CONTRACTPRODUCTS C ON R.ContractId=C.ContractId AND C.ContractId=CA.ContractId
	INNER JOIN Retailer RE on RE.RtrId=CA.Attrid AND AttrType=2		
	WHERE RE.RtrId =@Pi_RtrId AND RtrLevel=1 AND Status=1 AND @Pi_InvDate BETWEEN ValidFromDate AND ValidTillDate
	GROUP BY Prdid,AllowDiscount,Discount,FLATAMOUNT,SpecialPrice,ApplyOn,WithTax
	--Return Contract Price Id if set at Category Level
	INSERT INTO #CONTRACTDETAILS
	SELECT  MAX(CP.ContractId),cpd.Prdid,AllowDiscount,Discount,FLATAMOUNT,SpecialPrice,ApplyOn,WithTax,AllowDiscount  
		FROM ContractPricingMaster CP INNER JOIN ContractPricingAttributes CA ON CP.ContractId=CA.ContractId AND ATTRTYPE=1
		INNER JOIN RetailerCategory RC ON RC.CtgMainId=CASE CA.Attrid WHEN 0 THEN RC.CtgMainId ELSE CA.Attrid END 
		INNER JOIN RetailerCategory RC1 ON RC1.CtgLinkCode LIKE CAST(RC.CtgLinkCode AS NVARCHAR(1000)) + '%'
		INNER JOIN RetailerValueClass RVC ON RVC.CtgMainId=RC1.CtgMainId 
		INNER JOIN RetailerValueClassMap RVCM ON RVCM.RtrValueClassId=RVC.RtrClassId AND RVCM.RtrValueClassId=CASE CP.RtrClassId WHEN 0 THEN RVCM.RtrValueClassId ELSE CP.RtrClassId END
		INNER JOIN RETAILER R ON R.RtrId=RVCM.RtrId
		INNER JOIN #CONTRACTPRODUCTS CPD ON CP.ContractId= CPD.ContractId 
		WHERE R.RtrId =@Pi_RtrId AND CP.Status=1 AND @Pi_InvDate BETWEEN CP.ValidFromDate AND CP.ValidTillDate
			  AND CP.RtrLevel = 0
		GROUP BY cpd.Prdid,AllowDiscount,Discount,FLATAMOUNT,SpecialPrice,ApplyOn,WithTax
		
	SELECT MAX(ContractId)ContractId INTO #TEMPDETAILS FROM #CONTRACTDETAILS
	DELETE FROM #CONTRACTDETAILS WHERE ContractId NOT IN(SELECT ContractId FROM #TEMPDETAILS)
	
	
	SELECT * FROM #CONTRACTDETAILS
	
	IF NOT EXISTS(SELECT * FROM #CONTRACTDETAILS)
	BEGIN
		SET @Po_SplDiscount = 0
		SET @Po_SplFlatAmount = 0
		SET @Po_SplPriceId = 0
		SET @Po_MRP = 0
		SET @Po_SellRate = 0
		SET @Po_ClaimablePercOnMRP = 0
		SET @Po_ContractId=0
	END
	ELSE
	BEGIN
		
		EXEC Proc_SellingTaxCalCulation @Pi_PrdId,@Pi_PrdBatId
 		IF @DisplayDisc=0 
		BEGIN
			
			SELECT @Po_SplPriceId=ContractId,
				   @Po_SellRate = DISCOUNT,
				   @Po_SplFlatAmount=0,
				   @Po_ClaimablePercOnMRP=0,
				   @Po_SplDiscount = 0,
				   @Po_MRP = MRP,
				   @Po_ContractId=ContractId
			FROM 
			(SELECT ContractId,
			CASE ApplyOn WHEN 1 THEN CAST(DISCOUNT*100/(100+TaxPercentage) AS NUMERIC(38,6))
						 WHEN 2 THEN CAST(DISCOUNT*100/(100+TaxPercentage) AS NUMERIC(38,6))
						 WHEN 3 THEN DISCOUNT 
						 WHEN 0 THEN DISCOUNT END DISCOUNT,
			0 SpecialPrice,MRP
			FROM 
	
			 (
			 SELECT ContractId,(CASE AllowDisc WHEN 1 THEN 
												(CASE ApplyOn WHEN 1 THEN (PBD.PrdBatDetailValue*100/(100+Discount))
												WHEN 2 THEN PBD.PrdBatDetailValue-(PBD.PrdBatDetailValue*(Discount/100))	
												ELSE PBD.PrdBatDetailValue-(PBD.PrdBatDetailValue*(Discount/100))  END)			
								ELSE PBD.PrdBatDetailValue-(PBD.PrdBatDetailValue*(Discount/100)) END) AS Discount,
								TaxPercentage,PBD.PrdBatDetailValue Rate,ApplyOn,PBD1.PrdBatDetailValue MRP
			FROM #CONTRACTDETAILS P(NOLOCK) 
			INNER JOIN ProductBatch PB(NOLOCK) ON P.Prdid=PB.PrdId AND PB.PrdBatId=@Pi_PrdBatId
			INNER JOIN ProductBatchDetails PBD(NOLOCK) ON PBD.PrdBatId=PB.PrdBatId AND PBD.DefaultPrice =1
			INNER JOIN BatchCreation BC (NOLOCK) ON BC.SlNo=PBD.SLNo AND BC.SLNo=CASE P.AllowDisc	WHEN 0 THEN 3
																									WHEN 1 THEN 1
																									WHEN 2 THEN 2
																									WHEN 3 THEN 3 END
			INNER JOIN ProductBatchTaxPercent PT ON PT.PrdId=P.Prdid AND PT.PrdBatId=PB.PrdBatId 
			INNER JOIN ProductBatchDetails PBD1 (NOLOCK) ON PBD1.PrdBatId=PB.PrdBatId AND PBD1.DefaultPrice =1 AND PBD1.SLNo=1
			)A
			)B
		END
	 
	END
		SELECT @Po_SplDiscount disc,@Po_SplFlatAmount flat,@Po_SplPriceId priceid,@Po_MRP mrp,@Po_SellRate selling,@Po_ClaimablePercOnMRP 
RETURN
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME = 'Proc_Cn2Cs_DiscountMaster_New' AND TYPE='P')
DROP PROCEDURE Proc_Cn2Cs_DiscountMaster_New
GO
/*
BEGIN TRANSACTION
delete from errorlog
EXEC Proc_Cn2Cs_DiscountMaster 0
Select * from SplRateToAvoidNew (NOLOCK)
Select * from Cn2Cs_Prk_ContractPricing_Header (NOLOCK)
Select * from Cn2Cs_Prk_ContractPricing_dETAIL (NOLOCK)
Select * from ContractPricingMaster (NOLOCK) WHERE CONTRACTID >= 355
Select * from ContractPricingDetails (NOLOCK) WHERE CONTRACTID >= 355
Select * from ContractPricingAttributes (NOLOCK) WHERE CONTRACTID = 355
select * from ErrorLog
ROLLBACK TRANSACTION
*/
CREATE PROCEDURE Proc_Cn2Cs_DiscountMaster_New
(
	@Po_ErrNo INT OUTPUT
)
AS
/*********************************
* PROCEDURE		: Proc_Cn2Cs_DiscountMaster
* PURPOSE		: To Insert and Update Special Rate records in the Table  
* CREATED		: Karthick
* CREATED DATE	: 10-03-2015
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date}		{developer}  {brief modification description}
* 24-03-2020	MOHANA S     CR   PARCS202100002  Contract Pricing Optimization
*********************************/
SET NOCOUNT ON
BEGIN
	 
	DECLARE @CmpPrdCtgName			AS NVARCHAR(50)
	DECLARE @ErrStatus				AS	INT
	
	SET @Po_ErrNo=0
	SET @ErrStatus=0

	DELETE FROM Cn2Cs_Prk_ContractPricing_Header WHERE DownloadFlag='Y'
	DELETE FROM Cn2Cs_Prk_ContractPricing_Detail WHERE DownloadFlag='Y'
	
	IF EXISTS (SELECT * FROM DBO.SysObjects WHERE ID = OBJECT_ID(N'SplRateToAvoidNew')
	AND OBJECTPROPERTY(ID, N'IsUserTable') = 1)
	BEGIN
		DROP TABLE SplRateToAvoidNew
	END
	CREATE TABLE SplRateToAvoidNew
	(
		CPRefCode Nvarchar(50)
	)
 
   
	INSERT INTO SplRateToAvoidNew  
	SELECT DISTINCT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Header   
	WHERE (ISNULL(CPRefCode,'')='' OR   ISNULL(DiscType,'')='' OR  
	ISNULL(RtrType,'')='' OR     ISNULL(CPStatus,'')='' OR  
	ISNULL(RtrCatLvl,'')='' OR   ISNULL(RtrCatCode,'')='' OR  
	ISNULL(ClassCode,'')='' OR   ISNULL(RtrCode,'')='' )  AND UPPER(rtrType)<>'RETAILER'

	INSERT INTO SplRateToAvoidNew  
	SELECT DISTINCT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Header WHERE CPRefCode  IN  
	(SELECT ComConRefNo FROM contractpricingmaster)  
   
	INSERT INTO SplRateToAvoidNew  
	SELECT DISTINCT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Header WHERE CPRefCode NOT IN  
	(SELECT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Detail)  
	INSERT INTO SplRateToAvoidNew  
	SELECT DISTINCT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Detail  WHERE CPRefCode NOT IN  
	(SELECT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Header)  
   
	INSERT INTO SplRateToAvoidNew   
	SELECT DISTINCT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Header   
	WHERE Rtrcatlvl NOT IN (SELECT CtgLevelName FROM RetailerCategoryLevel)   AND UPPER(RtrType) <>'RETAILER'  
	INSERT INTO SplRateToAvoidNew   
	SELECT DISTINCT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Header  
	WHERE RtrCatCode NOT IN (SELECT CtgCode FROM RetailerCategory) AND UPPER(RtrType) <>'RETAILER'  
    
	INSERT INTO SplRateToAvoidNew   
	SELECT DISTINCT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Header  
	WHERE RtrCode NOT IN (SELECT CmpRtrCode  FROM Retailer ) AND UPPER(RtrType) ='RETAILER'  
   
	INSERT INTO SplRateToAvoidNew  
	SELECT DISTINCT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Detail   
	WHERE ISNULL(PrdCatLvl,'')='' OR ISNULL(PrdCatCode,'')=''  
   
	INSERT INTO SplRateToAvoidNew  
	SELECT DISTINCT A.CPRefCode FROM Cn2Cs_Prk_ContractPricing_Header A INNER JOIN Cn2Cs_Prk_ContractPricing_Detail B  
	ON A.CPRefCode=B.CPRefCode AND UPPER(DiscType) IN ('DISCPER','FLATAMT')  
	WHERE ISNULL(ApplyOn,'')=''  
   
	INSERT INTO SplRateToAvoidNew  
	SELECT DISTINCT A.CPRefCode FROM Cn2Cs_Prk_ContractPricing_Header A INNER JOIN Cn2Cs_Prk_ContractPricing_Detail B  
	ON A.CPRefCode=B.CPRefCode AND UPPER(DiscType) IN ('SPLPRICE')  
	WHERE ISNULL(SPWTax,'')=''  

	INSERT INTO SplRateToAvoidNew  
	SELECT DISTINCT A.CPRefCode FROM Cn2Cs_Prk_ContractPricing_Header A INNER JOIN Cn2Cs_Prk_ContractPricing_Detail B  
	ON A.CPRefCode=B.CPRefCode AND UPPER(CPStatus) NOT IN ('ACTIVE','INACTIVE') 
	  
	INSERT INTO SplRateToAvoidNew  
	SELECT DISTINCT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Detail WHERE PrdCatLvl NOT IN(SELECT CmpPrdCtgName FROM ProductCategoryLevel)    
   
	INSERT INTO ErrorLog   
	SELECT DISTINCT 1,'Discount Master','Contract RefCode','Discount Details Not Available'+CPRefCode   
	FROM Cn2Cs_Prk_ContractPricing_Header WHERE CPRefCode NOT IN (SELECT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Detail)  
	UNION ALL  
	SELECT DISTINCT 2,'Discount Master','Contract RefCode','Header Details Not Available'+CPRefCode   
	FROM Cn2Cs_Prk_ContractPricing_Detail WHERE CPRefCode NOT IN (SELECT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Header)  
	UNION ALL  
	SELECT  DISTINCT 3,'Discount Master','','Mandatory Fields Cannot be Null'+CPRefCode  FROM Cn2Cs_Prk_ContractPricing_Header WHERE ( ISNULL(CPRefCode,'')='' OR   ISNULL(DiscType,'')='' OR ISNULL(RtrType,'')='' OR       
	ISNULL(CPStatus,'')='' OR ISNULL(RtrCatLvl,'')='' OR   ISNULL(RtrCatCode,'')='' OR ISNULL(ClassCode,'')='' OR   ISNULL(RtrCode,'')='' ) AND UPPER(rtrType)<>'RETAILER'  
	UNION ALL  
	SELECT DISTINCT 3,'Discount Master','Retailer Category Level','Retailer Category Level Not Available'+CPRefCode   
	FROM Cn2Cs_Prk_ContractPricing_Header WHERE Rtrcatlvl NOT IN (SELECT CtgLevelName FROM RetailerCategoryLevel)   AND UPPER(RtrType)<>'RETAILER'  
	UNION ALL  
	SELECT DISTINCT 4,'Discount Master','Retailer Category Level Value','Retailer Category Code Not Available'+CPRefCode   
	FROM Cn2Cs_Prk_ContractPricing_Header WHERE RtrCatCode NOT IN (SELECT CtgCode FROM RetailerCategory)    AND UPPER(RtrType)<>'RETAILER' 
	UNION ALL    
	SELECT DISTINCT 5,'Discount Master','Retailer Code','Retailer Code Not Available'+CPRefCode    
	FROM Cn2Cs_Prk_ContractPricing_Header WHERE RtrCode NOT IN (SELECT cmpRtrCode FROM Retailer ) AND UPPER(RtrType) ='RETAILER'  
	UNION ALL  
	SELECT DISTINCT 6,'Discount Master','Product Category Level','Mandatory Fields Cannot be Null'+CPRefCode     
	FROM Cn2Cs_Prk_ContractPricing_Detail WHERE ISNULL(PrdCatLvl,'')='' OR ISNULL(PrdCatCode,'')=''    
	UNION ALL  
	SELECT DISTINCT 8,'Discount Master','ApllyOn','Aplly On Cannot be Null'+A.CPRefCode   
	FROM Cn2Cs_Prk_ContractPricing_Header A INNER JOIN Cn2Cs_Prk_ContractPricing_Detail B ON A.CPRefCode=B.CPRefCode   
	AND UPPER(DiscType) IN ('DISCPER','FLATAMT') WHERE ISNULL(ApplyOn,'')=''  
	UNION ALL  
	SELECT DISTINCT 9,'Discount Master','WithTax','With Tax Cannot be Null'+A.CPRefCode    
	FROM Cn2Cs_Prk_ContractPricing_Header A INNER JOIN Cn2Cs_Prk_ContractPricing_Detail B ON A.CPRefCode=B.CPRefCode   
	AND UPPER(DiscType) IN ('SPLPRICE') WHERE ISNULL(SPWTax,'')=''  
	UNION ALL  
	SELECT DISTINCT 10,'Discount Master','Status','Status Cannot be Null'+A.CPRefCode     
	FROM Cn2Cs_Prk_ContractPricing_Header A INNER JOIN Cn2Cs_Prk_ContractPricing_Detail B ON A.CPRefCode=B.CPRefCode   
	AND UPPER(CPStatus) NOT IN ('ACTIVE','INACTIVE')  
	UNION ALL  
	SELECT DISTINCT 11,'Discount Master','PrdCatLvl','Product Category Level Not Available'+CPRefCode      
	FROM Cn2Cs_Prk_ContractPricing_Detail WHERE PrdCatLvl NOT IN(SELECT CmpPrdCtgName FROM ProductCategoryLevel) AND UPPER(PrdCatLvl)<>(UPPER(@CmpPrdCtgName))   
	UNION ALL  
	SELECT DISTINCT 12,'Discount Master','PrdCatCode','Product Code Not Available'+CPRefCode       
	FROM Cn2Cs_Prk_ContractPricing_Detail  WHERE UPPER(PrdCatLvl)=UPPER(@CmpPrdCtgName)   
	AND PrdCatCode NOT IN(SELECT PRDCCODE FROM Product) AND UPPER(PrdCatLvl) =(UPPER(@CmpPrdCtgName))   
	UNION ALL  
	SELECT DISTINCT 13,'Discount Master','PrdCatCode','Product Category Level Value Not Available'+CPRefCode        
	FROM Cn2Cs_Prk_ContractPricing_Detail  WHERE UPPER(PrdCatLvl)<>UPPER(@CmpPrdCtgName)  
	AND PrdCatCode NOT IN(SELECT PrdCtgValCode FROM ProductCategoryValue)  
    
	SELECT DISTINCT * INTO  #Cn2Cs_Prk_ContractPricing_Header FROM Cn2Cs_Prk_ContractPricing_Header  WHERE CPRefCode NOT IN (SELECT CPRefCode FROM SplRateToAvoidNew) AND DOWNLOADFLAG='D'  
	SELECT DISTINCT * INTO  #Cn2Cs_Prk_ContractPricing_DETAIL FROM Cn2Cs_Prk_ContractPricing_DETAIL  WHERE CPRefCode NOT IN (SELECT CPRefCode FROM SplRateToAvoidNew) AND DOWNLOADFLAG='D' 

	DELETE FROM #Cn2Cs_Prk_ContractPricing_DETAIL  WHERE PrdCatCode NOT IN(SELECT PrdCtgValCode FROM ProductCategoryValue) AND UPPER(PrdCatLvl)<>UPPER(@CmpPrdCtgName)  
  
	DELETE FROM #Cn2Cs_Prk_ContractPricing_DETAIL WHERE PrdCatCode NOT IN(SELECT PRDCCODE FROM Product) AND UPPER(PrdCatLvl)=UPPER(@CmpPrdCtgName)  
  
	SELECT CPRefCode ,MAX(CreatedDate) CREATEDDATE INTO  #MAXRECORDS_HEADER FROM Cn2Cs_Prk_ContractPricing_Header GROUP BY CPRefCode  

	SELECT CPRefCode ,MAX(CreatedDate) CREATEDDATE INTO  #MAXRECORDS_DETAILS FROM Cn2Cs_Prk_ContractPricing_DETAIL GROUP BY CPRefCode  

	DELETE A  FROM #Cn2Cs_Prk_ContractPricing_Header A WHERE NOT EXISTS (SELECT CPRefCode,CREATEDDATE FROM #MAXRECORDS_HEADER B WHERE A.CPRefCode =B.CPRefCode AND A.CREATEDDATE = B.CREATEDDATE)  

	DELETE A  FROM #Cn2Cs_Prk_ContractPricing_DETAIL A WHERE NOT EXISTS (SELECT CPRefCode,CREATEDDATE FROM #MAXRECORDS_DETAILS B WHERE A.CPRefCode =B.CPRefCode 
	AND A.CREATEDDATE = B.CREATEDDATE)  
	AND DOWNLOADFLAG='D'  

	SELECT DISTINCT CmpCode,PrdCtgValCode,PrdCtgValMainId INTO #ProductCategoryValue 
	FROM ProductCategoryValue A
	INNER JOIN ProductCategoryLevel B ON A.CmpPrdCtgId=B.CmpPrdCtgId
	INNER JOIN Company C ON C.CmpId=B.CmpId
		
	DECLARE @ConRefNo AS NVARCHAR(50)
	DECLARE @PrdCatLvl AS NVARCHAR(50)
	DECLARE @ContractId AS INT
	DECLARE @Year AS INT
	DECLARE @Month AS INT
	DECLARE @CPRefCode AS NVARCHAR(50)
	
	SELECT @Year=YEAR(GETDATE()),@Month=Month(GETDATE())
	SELECT @ContractId=CurrValue+1 from Counters WHERE TabName='ContractPricingMaster' and fldname='ContractId'
	
	
	DECLARE CUR_Contract Cursor
	FOR SELECT DISTINCT CPRefCode from #Cn2Cs_Prk_ContractPricing_Header	where CPRefCode Not in(select CPRefCode from SplRateToAvoidNew)
		AND DOWNLOADFLAG='D'
	OPEN CUR_Contract 
	FETCH NEXT FROM CUR_Contract  INTO	@CPRefCode
	WHILE @@FETCH_STATUS=0
	BEGIN
		SELECT  @ConRefNo=dbo.Fn_GetPrimaryKeyString ('ContractPricingMaster','ConRefNo',@Year,@Month)
	 
	IF EXISTS(SELECT * FROM #Cn2Cs_Prk_ContractPricing_Header WHERE CPRefCode=@CPRefCode AND  UPPER(ProductLvl) ='PRODUCT')
	BEGIN
	
			
		INSERT INTO ContractPricingMaster
					(ContractId,CmpId,CtgLevelId,CtgMainId,RtrClassId,CmpPrdCtgId,PrdCtgValMainId,
					RtrId,RtrTaxGroupId,Availability,LastModBy,LastModDate,AuthId,AuthDate,DisplayMode,ConRefNo,ConDate,
					ValidFromDate,ValidTillDate,Status,AllowDiscount,ComConRefNo,RtrLevel,ComConRefName)
		--SELECT DISTINCT @ContractId,1,0,0,0,0,0,0 AS Rtrid,0 AS RtrTaxGroupId,
		SELECT DISTINCT @ContractId,CP.CmpId,0,0,0,0,0,0 AS Rtrid,0 AS RtrTaxGroupId, 
		1,1,GETDATE(),1,GETDATE(),1 ,@ConRefNo,
		CONVERT(VARCHAR(10),GETDATE(),121),CONVERT(VARCHAR(10),EffFromDate,121),CONVERT(VARCHAR(10),EffToDate,121),
		CASE UPPER(CPStatus) WHEN 'ACTIVE' THEN 1 ELSE 0 END,
		CASE UPPER(ApplyON) WHEN 'MRP' then 1 WHEN 'SellingRate' THEN 3 WHEN 'PurchaseRate' THEN 2 END AllowDiscount,
		@CPRefCode,CASE UPPER(Rtrtype) WHEN 'RTRCATEGORY' THEN 0 WHEN 'RETAILER' THEN 1 END,CPRefName															
		FROM (SELECT DISTINCT CmpCode,CPRefCode,DiscType,Rtrtype,CPStatus,CPRefName,EffFromDate,EffToDate,RtrCatLvl FROM #Cn2Cs_Prk_ContractPricing_Header) C
		INNER JOIN (SELECT DISTINCT PrdCatLvl,CPRefCode,Applyon FROM #Cn2Cs_Prk_ContractPricing_Detail) CD ON CD.CPRefCode=C.CPRefCode
		LEFT OUTER JOIN RetailerCategoryLevel RC	ON C.RtrCatLvl =RC.CtgLevelName
		INNER JOIN Company CP ON CP.CmpCode=C.CmpCode
		WHERE C.CPRefCode=@CPRefCode

		INSERT INTO ContractPricingDetails
					(ContractId,PrdId,PrdBatId,PriceId,Discount,FlatAmtDisc,Availability,LastModBy,
					LastModDate,AuthId,AuthDate,CtgValMainId,ClaimablePercOnMRP,ApplyOn,WithTax,SpecialPrice)
		SELECT DISTINCT @ContractId,PrdId,0,0,CD.DiscPer,CD.FlatAmt,1,1,GETDATE(),1,GETDATE(),0,0,
			     CASE UPPER(CD.ApplyOn) WHEN 'SellingRate' THEN 0 ELSE
						CASE UPPER(C.dISCTYPE) WHEN 'Mark Up' THEN 1 WHEN 'Mark Down' THEN 2 END END,SPWTax,CD.SplPrice --MARK UP /MARK DOWN,CD.SplPrice
		FROM #Cn2Cs_Prk_ContractPricing_Header C
		INNER JOIN #Cn2Cs_Prk_ContractPricing_Detail CD ON CD.CPRefCode=C.CPRefCode
		INNER JOIN Company D ON D.CmpCode=C.CmpCode
		INNER JOIN Product P ON P.PrdCCode=CD.PrdCatCode and D.CmpId=P.CmpId		
		WHERE C.CPRefCode=@CPRefCode  AND UPPER(ProductLvl) ='PRODUCT'
	END

	IF EXISTS(SELECT * FROM #Cn2Cs_Prk_ContractPricing_Header WHERE CPRefCode=@CPRefCode AND  UPPER(ProductLvl) ='OTHERLEVEL')
	BEGIN
		INSERT INTO ContractPricingMaster
					(ContractId,CmpId,CtgLevelId,CtgMainId,RtrClassId,CmpPrdCtgId,PrdCtgValMainId,
					RtrId,RtrTaxGroupId,Availability,LastModBy,LastModDate,AuthId,AuthDate,DisplayMode,ConRefNo,ConDate,
					ValidFromDate,ValidTillDate,Status,AllowDiscount,ComConRefNo,RtrLevel,ComConRefName)
					
		--SELECT DISTINCT @ContractId,1,RC.CtgLevelId,0,0,PC.CmpPrdCtgId,0,0 AS Rtrid,0 AS RtrTaxGroupId,
		SELECT DISTINCT @ContractId,CP.CmpId,0,0,0,PC.CmpPrdCtgId,0,0 AS Rtrid,0 AS RtrTaxGroupId, -- CmpId = 0 Added by Aravindh Deva C UAT Support
		1,1,GETDATE(),1,GETDATE(),1,@ConRefNo,
		CONVERT(VARCHAR(10),GETDATE(),121),CONVERT(VARCHAR(10),EffFromDate,121),CONVERT(VARCHAR(10),EffToDate,121),
		CASE UPPER(CPStatus) WHEN 'ACTIVE' THEN 1 ELSE 0 END,
		CASE UPPER(ApplyON) WHEN 'MRP' then 1 WHEN 'SellingRate' THEN 3 WHEN 'PurchaseRate' THEN 2 END AllowDiscount, --MRP/SELLING RATE
		@CPRefCode,CASE UPPER(Rtrtype) WHEN 'RTRCATEGORY' THEN 0 WHEN 'RETAILER' THEN 1 END,CPRefName															
		FROM (SELECT DISTINCT CmpCode,CPRefCode,DiscType,Rtrtype,CPStatus,CPRefName,EffFromDate,EffToDate,RtrCatLvl FROM #Cn2Cs_Prk_ContractPricing_Header) C
		INNER JOIN (SELECT DISTINCT PrdCatLvl,CPRefCode,ApplyON FROM #Cn2Cs_Prk_ContractPricing_Detail) CD ON CD.CPRefCode=C.CPRefCode
		LEFT OUTER JOIN RetailerCategoryLevel RC	ON C.RtrCatLvl =RC.CtgLevelName
		INNER JOIN ProductCategoryLevel PC ON PC.CmpPrdCtgName=CD.PrdCatLvl
		INNER JOIN Company CP ON CP.CmpCode=C.CmpCode and Pc.CmpId=CP.CmpId
		WHERE C.CPRefCode=@CPRefCode 
		
		INSERT INTO ContractPricingDetails
					(ContractId,PrdId,PrdBatId,PriceId,Discount,FlatAmtDisc,Availability,LastModBy,
					LastModDate,AuthId,AuthDate,CtgValMainId,ClaimablePercOnMRP,ApplyOn,WithTax,SpecialPrice)
		SELECT DISTINCT @ContractId,p.PrdCtgValMainId,0,0,CD.DiscPer,CD.FlatAmt,1,1,GETDATE(),1,GETDATE(),0,0,
			   CASE UPPER(CD.ApplyOn) WHEN 'SellingRate' THEN 0 ELSE
						CASE UPPER(C.dISCTYPE) WHEN 'Mark Up' THEN 1 WHEN 'Mark Down' THEN 2 END END,SPWTax,CD.SplPrice --MARK UP /MARK DOWN
		FROM #Cn2Cs_Prk_ContractPricing_Header C
		INNER JOIN #Cn2Cs_Prk_ContractPricing_Detail CD ON CD.CPRefCode=C.CPRefCode
		INNER JOIN #ProductCategoryValue P ON P.PrdCtgValCode =CD.PrdCatCode and P.Cmpcode=C.CmpCode		
		WHERE C.CPRefCode=@CPRefCode AND  UPPER(ProductLvl) ='OTHERLEVEL'		
	END


	IF EXISTS(SELECT * FROM #Cn2Cs_Prk_ContractPricing_Header WHERE CPRefCode=@CPRefCode AND UPPER(RtrType) = 'RTRCATEGORY')
	BEGIN
		INSERT INTO ContractPricingAttributes
		SELECT @ContractId,1,R.CtgMainId,GETDATE() FROM #Cn2Cs_Prk_ContractPricing_Header C  INNER JOIN RetailerCategory R
				ON C.RtrCatCode=R.CtgCode WHERE UPPER(RtrType) = 'RTRCATEGORY' AND CPRefCode=@CPRefCode 
		UNION
		SELECT @ContractId,2,0,GETDATE()		
	END
	


	IF EXISTS(SELECT * FROM #Cn2Cs_Prk_ContractPricing_Header WHERE CPRefCode=@CPRefCode AND UPPER(RtrType) = 'RETAILER')
	BEGIN
		INSERT INTO ContractPricingAttributes
		SELECT @ContractId,1,0,GETDATE() FROM #Cn2Cs_Prk_ContractPricing_Header C 
				 WHERE UPPER(RtrType) = 'RETAILER' AND CPRefCode=@CPRefCode 
		UNION
		SELECT @ContractId,2,RtrId,GETDATE() FROM #Cn2Cs_Prk_ContractPricing_Header C INNER JOIN Retailer R
		ON C.RtrCode =R.CmpRTRCODE WHERE UPPER(C.RtrType) = 'RETAILER' AND CPRefCode=@CPRefCode 
	END

	
	UPDATE counters SET currvalue=@ContractId WHERE TabName='ContractPricingMaster' and fldname='ContractId'
	UPDATE counters SET currvalue=@ContractId WHERE TabName='ContractPricingMaster' and fldname='ConRefNo' 
	
	SET @ContractId=@ContractId+1 	
	FETCH NEXT FROM CUR_Contract  INTO	@CPRefCode
	END
	CLOSE CUR_Contract  
	DEALLOCATE CUR_Contract  		
	
	UPDATE C SET DOWNLOADFLAG='Y' FROM Cn2Cs_Prk_ContractPricing_Header C INNER JOIN ContractPricingMaster CP
	ON C.CPRefCode=CP.ComConRefNo 

	--UPDATE C SET DOWNLOADFLAG='Y' FROM Cn2Cs_Prk_ContractPricing_Detail C INNER JOIN ContractPricingMaster CP
	--ON C.CPRefCode=CP.ComConRefNo	

	UPDATE C SET DOWNLOADFLAG='Y' FROM Cn2Cs_Prk_ContractPricing_Detail C  
	INNER JOIN #Cn2Cs_Prk_ContractPricing_DETAIL A ON A. CPRefCode =C.CPRefCode 
	AND C.PrdCatCode = A.PrdCatCode AND C.CPRefCode IN (SELECT ComConRefNo FROM ContractPricingMaster)

	UPDATE B SET B.DownloadFlag ='D'  FROM Cn2Cs_Prk_ContractPricing_Detail A 
	INNER JOIN Cn2Cs_Prk_ContractPricing_Header B ON A.CPRefCode =B.CPRefCode  WHERE A.DownloadFlag ='D'

	
	RETURN
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME = 'Proc_Cn2Cs_DiscountMaster' AND TYPE='P')
DROP PROCEDURE Proc_Cn2Cs_DiscountMaster
GO
/*  
BEGIN TRANSACTION  
delete from errorlog
EXEC Proc_Cn2Cs_DiscountMaster 0  
select distinct * from cn2cs_prk_ContractPricing_header
select * from cn2cs_prk_ContractPricing_detail
Select * from Cn2Cs_Prk_SpecialDiscount
ROLLBACK TRANSACTION
*/  
CREATE PROCEDURE Proc_Cn2Cs_DiscountMaster  
(  
 @Po_ErrNo INT OUTPUT  
)  
AS  
/*********************************  
* PROCEDURE  : Proc_Cn2Cs_DiscountMaster  
* PURPOSE  : To Insert and Update Special Rate records in the Table    
* CREATED  : MOHANA S  
* CREATED DATE : 11-06-2019  
* USER STORY ID : CRCRSTPAR0058 
--------------------------------------------------------------------------------------------------------------------------------------------------  
* [DATE]      [DEVELOPER]		[USER_STORY_ID]			[CR/BUG]    [DESCRIPTION] 
* 04-09-2019    MOHANA S	      ILCRSTPAR5800			SR			INCLUDED RETAILER WISE CONTRACT PRICING 
* 24-03-2020	MOHANA S          PARCS202100002		CR			 Contract Pricing Optimization
--------------------------------------------------------------------------------------------------------------------------------------------------
*/  
SET NOCOUNT ON  
BEGIN  
   
 DECLARE @CmpPrdCtgName   AS NVARCHAR(50)  
 DECLARE @ErrStatus    AS INT  
   
 SET @Po_ErrNo=0  
 SET @ErrStatus=0  
   
 IF EXISTS (SELECT * FROM DBO.SysObjects WHERE ID = OBJECT_ID(N'SplRateToAvoidNew')  
 AND OBJECTPROPERTY(ID, N'IsUserTable') = 1)  
 BEGIN  
  DROP TABLE SplRateToAvoidNew  
 END  
   
 CREATE TABLE SplRateToAvoidNew  
 (  
  CPRefCode Nvarchar(50)  
 )

 
 EXEC Proc_Cn2Cs_DiscountMaster_new @Po_ErrNo

RETURN

	--DELETE FROM Cn2Cs_Prk_ContractPricing_Detail WHERE DownloadFlag ='Y'

	--UPDATE B SET B.DownloadFlag ='D'  FROM Cn2Cs_Prk_ContractPricing_Detail A 
	--INNER JOIN Cn2Cs_Prk_ContractPricing_Header B ON A.CPRefCode =B.CPRefCode  WHERE A.DownloadFlag ='D'

	--DELETE FROM Cn2Cs_Prk_ContractPricing_Header  WHERE DownloadFlag ='Y'

 
	--INSERT INTO SplRateToAvoidNew  
	--SELECT DISTINCT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Header   
	--WHERE (ISNULL(CPRefCode,'')='' OR   ISNULL(DiscType,'')='' OR  
	--ISNULL(RtrType,'')='' OR     ISNULL(CPStatus,'')='' OR  
	--ISNULL(RtrCatLvl,'')='' OR   ISNULL(RtrCatCode,'')='' OR  
	--ISNULL(ClassCode,'')='' OR   ISNULL(RtrCode,'')='' )  AND UPPER(rtrType)<>'RETAILER'

	--INSERT INTO SplRateToAvoidNew  
	--SELECT DISTINCT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Header WHERE CPRefCode  IN  
	--(SELECT ComConRefNo FROM contractpricingmaster)  
   
	--INSERT INTO SplRateToAvoidNew  
	--SELECT DISTINCT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Header WHERE CPRefCode NOT IN  
	--(SELECT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Detail)  
	--INSERT INTO SplRateToAvoidNew  
	--SELECT DISTINCT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Detail  WHERE CPRefCode NOT IN  
	--(SELECT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Header)  
   
	--INSERT INTO SplRateToAvoidNew   
	--SELECT DISTINCT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Header   
	--WHERE Rtrcatlvl NOT IN (SELECT CtgLevelName FROM RetailerCategoryLevel)   AND UPPER(RtrType) <>'RETAILER'  
	--INSERT INTO SplRateToAvoidNew   
	--SELECT DISTINCT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Header  
	--WHERE RtrCatCode NOT IN (SELECT CtgCode FROM RetailerCategory) AND UPPER(RtrType) <>'RETAILER'  
    
	--INSERT INTO SplRateToAvoidNew   
	--SELECT DISTINCT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Header  
	--WHERE RtrCode NOT IN (SELECT CmpRtrCode  FROM Retailer ) AND UPPER(RtrType) ='RETAILER'  
   
	--INSERT INTO SplRateToAvoidNew  
	--SELECT DISTINCT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Detail   
	--WHERE ISNULL(PrdCatLvl,'')='' OR ISNULL(PrdCatCode,'')=''    
    
	----INSERT INTO SplRateToAvoidNew  
	----SELECT DISTINCT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Detail   
	----WHERE ISNULL(DiscPer,0)+ ISNULL(FlatAmt,0)+ISNULL(SplPrice,0)=0  
   
	--INSERT INTO SplRateToAvoidNew  
	--SELECT DISTINCT A.CPRefCode FROM Cn2Cs_Prk_ContractPricing_Header A INNER JOIN Cn2Cs_Prk_ContractPricing_Detail B  
	--ON A.CPRefCode=B.CPRefCode AND UPPER(DiscType) IN ('DISCPER','FLATAMT')  
	--WHERE ISNULL(ApplyOn,'')=''  
   
	--INSERT INTO SplRateToAvoidNew  
	--SELECT DISTINCT A.CPRefCode FROM Cn2Cs_Prk_ContractPricing_Header A INNER JOIN Cn2Cs_Prk_ContractPricing_Detail B  
	--ON A.CPRefCode=B.CPRefCode AND UPPER(DiscType) IN ('SPLPRICE')  
	--WHERE ISNULL(SPWTax,'')=''  

	--INSERT INTO SplRateToAvoidNew  
	--SELECT DISTINCT A.CPRefCode FROM Cn2Cs_Prk_ContractPricing_Header A INNER JOIN Cn2Cs_Prk_ContractPricing_Detail B  
	--ON A.CPRefCode=B.CPRefCode AND UPPER(CPStatus) NOT IN ('ACTIVE','INACTIVE') 
	  
	--INSERT INTO SplRateToAvoidNew  
	--SELECT DISTINCT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Detail WHERE PrdCatLvl NOT IN(SELECT CmpPrdCtgName FROM ProductCategoryLevel)  
 
   
   
	--INSERT INTO ErrorLog   
	--SELECT DISTINCT 1,'Discount Master','Contract RefCode','Discount Details Not Available'+CPRefCode   
	--FROM Cn2Cs_Prk_ContractPricing_Header WHERE CPRefCode NOT IN (SELECT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Detail)  
	--UNION ALL  
	--SELECT DISTINCT 2,'Discount Master','Contract RefCode','Header Details Not Available'+CPRefCode   
	--FROM Cn2Cs_Prk_ContractPricing_Detail WHERE CPRefCode NOT IN (SELECT CPRefCode FROM Cn2Cs_Prk_ContractPricing_Header)  
	--UNION ALL  
	--SELECT  DISTINCT 3,'Discount Master','','Mandatory Fields Cannot be Null'+CPRefCode  FROM Cn2Cs_Prk_ContractPricing_Header WHERE ( ISNULL(CPRefCode,'')='' OR   ISNULL(DiscType,'')='' OR ISNULL(RtrType,'')='' OR       
	--ISNULL(CPStatus,'')='' OR ISNULL(RtrCatLvl,'')='' OR   ISNULL(RtrCatCode,'')='' OR ISNULL(ClassCode,'')='' OR   ISNULL(RtrCode,'')='' ) AND UPPER(rtrType)<>'RETAILER'  
	--UNION ALL  
	--SELECT DISTINCT 3,'Discount Master','Retailer Category Level','Retailer Category Level Not Available'+CPRefCode   
	--FROM Cn2Cs_Prk_ContractPricing_Header WHERE Rtrcatlvl NOT IN (SELECT CtgLevelName FROM RetailerCategoryLevel)   AND UPPER(RtrType)<>'RETAILER'  
	--UNION ALL  
	--SELECT DISTINCT 4,'Discount Master','Retailer Category Level Value','Retailer Category Code Not Available'+CPRefCode   
	--FROM Cn2Cs_Prk_ContractPricing_Header WHERE RtrCatCode NOT IN (SELECT CtgCode FROM RetailerCategory)    AND UPPER(RtrType)<>'RETAILER' 
	--UNION ALL    
	--SELECT DISTINCT 5,'Discount Master','Retailer Code','Retailer Code Not Available'+CPRefCode    
	--FROM Cn2Cs_Prk_ContractPricing_Header WHERE RtrCode NOT IN (SELECT cmpRtrCode FROM Retailer ) AND UPPER(RtrType) ='RETAILER'  
	--UNION ALL  
	--SELECT DISTINCT 6,'Discount Master','Product Category Level','Mandatory Fields Cannot be Null'+CPRefCode     
	--FROM Cn2Cs_Prk_ContractPricing_Detail WHERE ISNULL(PrdCatLvl,'')='' OR ISNULL(PrdCatCode,'')=''    
	--UNION ALL  
	--SELECT DISTINCT 8,'Discount Master','ApllyOn','Aplly On Cannot be Null'+A.CPRefCode   
	--FROM Cn2Cs_Prk_ContractPricing_Header A INNER JOIN Cn2Cs_Prk_ContractPricing_Detail B ON A.CPRefCode=B.CPRefCode   
	--AND UPPER(DiscType) IN ('DISCPER','FLATAMT') WHERE ISNULL(ApplyOn,'')=''  
	--UNION ALL  
	--SELECT DISTINCT 9,'Discount Master','WithTax','With Tax Cannot be Null'+A.CPRefCode    
	--FROM Cn2Cs_Prk_ContractPricing_Header A INNER JOIN Cn2Cs_Prk_ContractPricing_Detail B ON A.CPRefCode=B.CPRefCode   
	--AND UPPER(DiscType) IN ('SPLPRICE') WHERE ISNULL(SPWTax,'')=''  
	--UNION ALL  
	--SELECT DISTINCT 10,'Discount Master','Status','Status Cannot be Null'+A.CPRefCode     
	--FROM Cn2Cs_Prk_ContractPricing_Header A INNER JOIN Cn2Cs_Prk_ContractPricing_Detail B ON A.CPRefCode=B.CPRefCode   
	--AND UPPER(CPStatus) NOT IN ('ACTIVE','INACTIVE')  
	--UNION ALL  
	--SELECT DISTINCT 11,'Discount Master','PrdCatLvl','Product Category Level Not Available'+CPRefCode      
	--FROM Cn2Cs_Prk_ContractPricing_Detail WHERE PrdCatLvl NOT IN(SELECT CmpPrdCtgName FROM ProductCategoryLevel) AND UPPER(PrdCatLvl)<>(UPPER(@CmpPrdCtgName))   
	--UNION ALL  
	--SELECT DISTINCT 12,'Discount Master','PrdCatCode','Product Code Not Available'+CPRefCode       
	--FROM Cn2Cs_Prk_ContractPricing_Detail  WHERE UPPER(PrdCatLvl)=UPPER(@CmpPrdCtgName)   
	--AND PrdCatCode NOT IN(SELECT PRDCCODE FROM Product) AND UPPER(PrdCatLvl) =(UPPER(@CmpPrdCtgName))   
	--UNION ALL  
	--SELECT DISTINCT 13,'Discount Master','PrdCatCode','Product Category Level Value Not Available'+CPRefCode        
	--FROM Cn2Cs_Prk_ContractPricing_Detail  WHERE UPPER(PrdCatLvl)<>UPPER(@CmpPrdCtgName)  
	--AND PrdCatCode NOT IN(SELECT PrdCtgValCode FROM ProductCategoryValue)  
    
	--SELECT DISTINCT * INTO  #Cn2Cs_Prk_ContractPricing_Header FROM Cn2Cs_Prk_ContractPricing_Header  WHERE CPRefCode NOT IN (SELECT CPRefCode FROM SplRateToAvoidNew) AND DOWNLOADFLAG='D'  
	--SELECT DISTINCT * INTO  #Cn2Cs_Prk_ContractPricing_DETAIL FROM Cn2Cs_Prk_ContractPricing_DETAIL  WHERE CPRefCode NOT IN (SELECT CPRefCode FROM SplRateToAvoidNew) AND DOWNLOADFLAG='D' 

	--DELETE FROM #Cn2Cs_Prk_ContractPricing_DETAIL  WHERE PrdCatCode NOT IN(SELECT PrdCtgValCode FROM ProductCategoryValue) AND UPPER(PrdCatLvl)<>UPPER(@CmpPrdCtgName)  
  
	--DELETE FROM #Cn2Cs_Prk_ContractPricing_DETAIL WHERE PrdCatCode NOT IN(SELECT PRDCCODE FROM Product) AND UPPER(PrdCatLvl)=UPPER(@CmpPrdCtgName)  
  
	--SELECT CPRefCode ,MAX(CreatedDate) CREATEDDATE INTO  #MAXRECORDS_HEADER FROM Cn2Cs_Prk_ContractPricing_Header GROUP BY CPRefCode  

	--SELECT CPRefCode ,MAX(CreatedDate) CREATEDDATE INTO  #MAXRECORDS_DETAILS FROM Cn2Cs_Prk_ContractPricing_DETAIL GROUP BY CPRefCode  

	--DELETE A  FROM #Cn2Cs_Prk_ContractPricing_Header A WHERE NOT EXISTS (SELECT CPRefCode,CREATEDDATE FROM #MAXRECORDS_HEADER B WHERE A.CPRefCode =B.CPRefCode AND A.CREATEDDATE = B.CREATEDDATE)  

	--DELETE A  FROM #Cn2Cs_Prk_ContractPricing_DETAIL A WHERE NOT EXISTS (SELECT CPRefCode,CREATEDDATE FROM #MAXRECORDS_DETAILS B WHERE A.CPRefCode =B.CPRefCode AND A.CREATEDDATE = B.CREATEDDATE)  
	--AND DOWNLOADFLAG='D'  

	--INSERT INTO Cn2Cs_Prk_SpecialDiscount 
	--SELECT DISTINCT DistCode,RTRCATLVL,RTRCATCODE,ProductLvl,PRDCATCODE,DiscPer,
	--EffFromDate,EffToDate,DownLoadFlag,CreatedDate,ApplyOn,Type,FlatAmt,SplPrice,SPWTax,CPRefCode,
	--CPRefName FROM  
	--( 
	--SELECT A.DISTCODE,RTRCATLVL,RTRCATCODE,CASE WHEN ProductLvl <> 'PRODUCT' THEN PrdCatLvl ELSE 'PRODUCT' END ProductLvl ,PRDCATCODE,DISCPER,  
	--EffFromDate ,EffToDate ,'D' DownLoadFlag,A.CreatedDate ,APPLYON,CASE   WHEN ApplyOn<>'MRP' THEN '' ELSE  DiscType  END Type,  
	--FlatAmt , SplPrice ,SPWTax ,A.CPRefCode ,A.CPRefName   
	--FROM #Cn2Cs_Prk_ContractPricing_Header A INNER JOIN #Cn2Cs_Prk_ContractPricing_DETAIL B ON A.CPRefCode =B.CPREFCODE  
	--AND A.DOWNLOADFLAG='D' AND RtrType <>'Retailer' 
	--UNION ALL
	--SELECT A.DISTCODE,'RETAILER',RtrCode ,CASE WHEN ProductLvl <> 'PRODUCT' THEN PrdCatLvl ELSE 'PRODUCT' END ,PRDCATCODE,DISCPER,
	--EffFromDate ,EffToDate ,'D',A.CreatedDate,APPLYON, CASE   (CONVERT(DECIMAL(18, 2),DISCPER ))WHEN 0 THEN '' ELSE  DiscType  END,
	--FlatAmt , SplPrice ,SPWTax ,A.CPRefCode ,A.CPRefName 
	--FROM #Cn2Cs_Prk_ContractPricing_Header A INNER JOIN #Cn2Cs_Prk_ContractPricing_DETAIL B ON A.CPRefCode =B.CPREFCODE
	--AND A.DOWNLOADFLAG='D' AND RtrType ='Retailer' 
	--)A ORDER BY CreatedDate,CPRefCode
   
	--UPDATE C SET DOWNLOADFLAG='Y' FROM Cn2Cs_Prk_ContractPricing_Header C INNER JOIN Cn2Cs_Prk_SpecialDiscount CP  
	--ON C.CPRefCode=CP.CPRefCode

	--UPDATE C SET DOWNLOADFLAG='Y' FROM Cn2Cs_Prk_ContractPricing_Detail C  
	--INNER JOIN #Cn2Cs_Prk_ContractPricing_DETAIL A ON A. CPRefCode =C.CPRefCode 
	--AND C.PrdCatCode = A.PrdCatCode AND C.CPRefCode IN (SELECT CPRefCode FROM Cn2Cs_Prk_SpecialDiscount)
   
 RETURN
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Fn_GetOrgSelRate' AND TYPE='FN')
DROP FUNCTION Fn_GetOrgSelRate
GO
/*
* ****************************************************************************
* PROCEDURE	:  Fn_GetOrgSelRate
* PURPOSE	:  TO GET THE NORMAL SELLING RATE
* DATE		:  24-03-2020
* CREATED	:  MOHANA S
* PMS NO	:  PARCS202100002
***************************************************************************************************************/
CREATE FUNCTION Fn_GetOrgSelRate(@PrdBatid INT)
RETURNS  NUMERIC(38,6)
AS
BEGIN
DECLARE @Rate NUMERIC(38,6)

SELECT DISTINCT @Rate = PrdBatDetailValue   FROM ProductBatchDetails(NOLOCK) WHERE Prdbatid = @PrdBatid AND Slno =3 AND DefaultPrice = 1

RETURN (@Rate)
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Proc_TOTClaimDetails_NEW' AND TYPE='P')
DROP PROCEDURE Proc_TOTClaimDetails_NEW
GO
--EXEC Proc_TOTClaimDetails 2020,1,0,0
CREATE PROCEDURE Proc_TOTClaimDetails_NEW
(
	@Pi_Year	int,
	@Pi_Month	INT,
	@Pi_Usrid	INT,
	@Pi_Transid	INT
)
AS
/****************************************************************************
* PROCEDURE	:  Proc_TOTClaimDetails
* PURPOSE	:  TO LOAD TOT CLAIM DETAILS
* DATE		:  14-11-2019
* CREATED	:  MOHANA S
* PMS NO	:  CRCRSTPAR0079
**********************************************************************************************************************

* 24-03-2020	MOHANA S     CR   PARCS202100002  Contract Pricing Optimization
**********************************************************************************************************************/
BEGIN
SET NOCOUNT ON
	CREATE Table #TotClaimFinal       
	(      
	CtgName		NVARCHAR(100),
	Rtrid		INT,
	Prdid		INT,      
	Fromdate	DATETIME,      
	Todate		DATETIME,      
	NrmlRate	NUMERIC (18,2),      
	SecSalesTot NUMERIC (18,2),      
	DiffClaims	NUMERIC (18,2)       
	)
	DELETE FROM  TempTOTClaimDetails  
	DECLARE @FromDate  DATETIME
	DECLARE @ToDate	   DATETIME
	SELECT @FromDate= DATEADD(MONTH, (@Pi_Month)-1,DATEADD(YEAR, @Pi_Year - 1900, 0))
	SELECT @ToDate = DATEADD(dd, -1, DATEADD(MONTH, @Pi_Month,DATEADD(YEAR, @Pi_Year - 1900, 0)))
			 
	EXEC Proc_ReturnSalesProductTaxPercentage @FromDate,@ToDate 
			     
	SELECT * INTO #ParleOutputTaxPercentage FROM ParleOutputTaxPercentage (NOLOCK)    
			
	--SELECT PRDBATID INTO #PRDBATID FROM (
	--SELECT PrdBatid FROM SalesInvoice S (NOLOCK) INNER JOIN SalesInvoiceProduct SP (NOLOCK) ON S.SalId = SP.SalId WHERE SalInvDate BETWEEN @FromDate AND @ToDate AND S.DlvSts > 3
	--UNION
	--SELECT PrdBatid FROM ReturnHeader S (NOLOCK) INNER JOIN ReturnProduct SP (NOLOCK) ON S.ReturnID = SP.ReturnID WHERE ReturnDate BETWEEN @FromDate AND @ToDate AND S.[Status] = 0
	--)A

	--SELECT * INTO #ProductBatchDetails FROM ProductBatchDetails WHERE PrdBatid in (SELECT * FROM #PrdBatid) and slno=3

	SELECT S.SalId,S.SalInvNo,S.SalInvDate,S.RtrId,SP.PrdId,SP.PrdBatId,SP.BaseQty BaseQty,
	CASE SP.SplPriceId WHEN 0 THEN 0 ELSE SP.SplRate END As  SalSplRate,         
	SP.OrgSelRate AS ActualSelRate,SP.SlNo,sp.PrdTaxAmount,PrdUnitSelRate ,RtrValueClassId        
	INTO #BillingDetails1          
	FROM SalesInvoice S (NOLOCK)          
	INNER JOIN SalesInvoiceProduct SP (NOLOCK) ON S.SalId = SP.SalId          
	WHERE SalInvDate BETWEEN @FromDate AND @ToDate AND S.DlvSts > 3  
  
			
	SELECT S.ReturnID,S.ReturnCode,S.ReturnDate,S.RtrId,SP.PrdId,SP.PrdBatId,-1 * SP.BaseQty BaseQty,SP.PrdUnitMRP MRP,
	CASE SP.SplPriceId WHEN 0 THEN 0 ELSE SIP.SplRate END As  SalSplRate,         
	SIP.OrgSelRate AS ActualSelRate,SP.SlNo,SP.PrdEditSelRte,sp.PrdTaxAmt as prdtaxamount,PrdUnitSelRte as  PrdUnitSelRate,RtrValueClassId         
	INTO #ReturnDetails1          
	FROM ReturnHeader S (NOLOCK)          
	INNER JOIN ReturnProduct SP (NOLOCK) ON S.ReturnID = SP.ReturnID AND StockTypeid in (select stocktypeid from  stocktype where systemstocktype =1)  
	INNER JOIN SalesInvoiceProduct SIP ON S.SAlid = SIP.SalId AND SP.PrdId = SIP.PrdId AND SP.PrdBatId = SIP.PrdBatId AND SIP.SLno = SP.ActSalRowId
	WHERE ReturnDate BETWEEN @FromDate AND @ToDate AND S.[Status] = 0  
			
	SELECT DISTINCT R.RtrId,RC.CtgMainId,CtgCode,RC.CtgName,RtrValueClassId       
	INTO #Retailer      
	FROM Retailer R (NOLOCK),      
	RetailerValueClassMap RVCM (NOLOCK),      
	RetailerValueClass RVC (NOLOCK),      
	RetailerCategory RC (NOLOCK),      
	RetailerCategoryLevel RCL (NOLOCK)      
	WHERE R.Rtrid = RVCM.RtrId AND RVCM.RtrValueClassId = RVC.RtrClassId 	     
	AND  RVC.CtgMainId=RC.CtgMainId AND  RCL.CtgLevelId=RC.CtgLevelId
			
	SELECT tranid,Refid,Rtrid,CtgName,RefDate,Prdid,Prdbatid,BaseQty,SalSplRate,ActualSelRate, ActualSelRate SelRate,CAST(0 AS NUMERIC(18,2)) Nrmlrate,CAST(0 AS NUMERIC(18,2)) SplRate,CAST(0 AS NUMERIC(18,2)) Diff,Slno      
	INTO #TotClaim FROM(      
	SELECT 1 tranid,Salid Refid,A.Rtrid,CtgName,Salinvdate RefDate,Prdid,Prdbatid,BaseQty,SalSplRate,ActualSelRate,Slno  
	FROM #BillingDetails1 A  INNER JOIN #Retailer B ON A.Rtrid = B.Rtrid  --and A.RtrValueClassId = B.RtrValueClassId 
	UNION       
	SELECT 2 Transid,ReturnID Refid,A.Rtrid,CtgName,ReturnDate RefDate,Prdid,Prdbatid,BaseQty,SalSplRate,ActualSelRate,Slno  
	FROM #ReturnDetails1  A  INNER JOIN #Retailer B ON A.Rtrid = B.Rtrid    --and A.RtrValueClassId = B.RtrValueClassId     
	)A  

	select * from #TotClaim

	--SELECT DISTINCT Priceid,PrdBatDetailValue SplSelRate  INTO #ExistingSpecialPrice FROM      
	--(      
	--SELECT D.PriceId,D.PrdBatDetailValue       
	--FROM #TotClaim M (NOLOCK),      
	--#ProductBatchDetails D (NOLOCK)       
	--WHERE M.PriceId = D.PriceId AND D.SLNo = 3      
	--AND PriceCode LIKE '%-Spl Rate-%'         
	--UNION       
	--SELECT D.PriceId,D.PrdBatDetailValue       
	--FROM #TotClaim M (NOLOCK),      
	--#ProductBatchDetails D (NOLOCK)       
	--WHERE M.PriceId = D.PriceId AND D.SLNo = 3      
	--AND PriceCode LIKE '%SplRate%'        
	--)A 

	UPDATE A SET A.SplRate = (BaseQty*((A.SalSplRate)+(A.SalSplRate*(p.TaxPerc/100)))) FROM  #TotClaim A 
	INNER JOIN  #ParleOutputtaxPercentage P ON A.Refid = p.salid and A.slno = p.prdslno AND A.Tranid=P.Transid      
	WHERE A.SalSplRate <>0  

	UPDATE A SET A.SplRate = (BaseQty*(( SelRate)+(SelRate*(P.TaxPerc/100)))) FROM  #TotClaim A       
	INNER JOIN  #ParleOutputtaxPercentage P ON A.Refid = p.salid and a.slno = p.prdslno AND A.Tranid=P.Transid      
	WHERE A.SalSplRate =0

	UPDATE A SET A.NrmlRate = (BaseQty*(( ActualSelRate)+(ActualSelRate*(P.TaxPerc/100)))) FROM  #TotClaim A       
	INNER JOIN  #ParleOutputtaxPercentage P ON A.Refid = p.salid and a.slno = p.prdslno AND A.Tranid=P.Transid 

	UPDATE A SET A.Diff = (NrmlRate-SplRate) FROM  #TotClaim A    
			
	SELECT DISTINCT  B.CtgName,AttrCode ,MAX(CREATEDDATE) CREATEDDATE INTO #MAXDATE FROM SchemeClaimCircular A --WHERE  
	INNER JOIN RetailerCategory B ON A.AttrCode = B.CtgCode AND A.AttrType<>'Class'
	INNER JOIN #Retailer R ON B.CtgCode=R.CtgCode AND A.AttrCode = R.CtgCode
	AND ((@FromDate  BETWEEN  SchValidFrom AND SchValidTill  ) OR (@ToDate  BETWEEN  SchValidFrom AND SchValidTill)) 
		WHERE ClaimType='TOT Claim' GROUP BY B.CtgName,AttrCode
	SELECT CtgName,CircularNo INTO #CIRCULAR FROM SchemeClaimCircular A INNER JOIN #MAXDATE B ON A.AttrCode = B.AttrCode AND A.CreatedDate =B.CREATEDDATE 
			  
	INSERT INTO #TotClaimFinal(CtgName,Rtrid,Prdid,NrmlRate,SecSalesTot,DiffClaims)      
	SELECT CtgName,Rtrid,Prdid,SUM(NrmlRate),SUM(SplRate),SUM(Diff) FROM #TotClaim      
	GROUP BY Ctgname,Rtrid,Prdid
			
	UPDATE A SET Fromdate = B.Frmdt ,Todate = B.todt FROM #TotClaimFinal A  
	INNER JOIN (SELECT Ctgname,MIn(RefDate) Frmdt,Max(RefDate) todt FROM #TotClaim GROUP BY CtgName) B ON A.CtgName = B.Ctgname    
			
	INSERT INTO TempTOTClaimDetails       
	SELECT CtgName,Rtrid,Prdid,Fromdate,Todate,'',SUM(NrmlRate),SUM(SecSalesTot),SUM(DiffClaims),@Pi_Usrid,@Pi_Transid
	FROM #TotClaimFinal
	WHERE DiffClaims > 0   -- SHOWING ONLY +VE VALUE AS PER AWINASH REQUEST ON 19-12-2019
	GROUP BY CtgName,Rtrid,Prdid,Fromdate,Todate
	UPDATE A SET A.CirNO = ISNULL(CircularNo,'') FROM TempTOTClaimDetails A  
	INNER JOIN #CIRCULAR B ON A.CtgName = B.CTGNAME
			
	DELETE FROM TempTOTClaimDetails WHERE ISNULL(CirNo,'')=''
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Proc_TOTClaimDetails' AND TYPE='P')
DROP PROCEDURE Proc_TOTClaimDetails
GO
CREATE PROCEDURE Proc_TOTClaimDetails
(
	@Pi_Year	int,
	@Pi_Month	INT,
	@Pi_Usrid	INT,
	@Pi_Transid	INT
)
AS
/****************************************************************************
* PROCEDURE	:  Proc_TOTClaimDetails
* PURPOSE	:  TO LOAD TOT CLAIM DETAILS
* DATE		:  14-11-2019
* CREATED	:  MOHANA S
* PMS NO	:  CRCRSTPAR0079
**********************************************************************************************************************
* Date			Author				userStoryid			CR/BZ				Descriptiom
* 11-01-2020	MOHANA S			ILCRSTPAR7388    	SR					Retailer value class Removed
* 16-01-2020	MOHANA S			ILCRSTPAR7420		BZ					as per live (without class checking)
* 24-03-2020	MOHANA S		    PARCS202100002		CR					Contract Pricing Optimization
**********************************************************************************************************************/
BEGIN
SET NOCOUNT ON

EXEC Proc_TOTClaimDetails_NEW @Pi_Year,@Pi_Month,@Pi_Usrid,@Pi_Transid

RETURN

	CREATE Table #TotClaimFinal       
	(      
	CtgName		NVARCHAR(100),
	Rtrid		INT,
	Prdid		INT,      
	Fromdate	DATETIME,      
	Todate		DATETIME,      
	NrmlRate	NUMERIC (18,2),      
	SecSalesTot NUMERIC (18,2),      
	DiffClaims	NUMERIC (18,2)       
	)
	DELETE FROM  TempTOTClaimDetails  
	DECLARE @FromDate  DATETIME
	DECLARE @ToDate	   DATETIME
	SELECT @FromDate= DATEADD(MONTH, (@Pi_Month)-1,DATEADD(YEAR, @Pi_Year - 1900, 0))
	SELECT @ToDate = DATEADD(dd, -1, DATEADD(MONTH, @Pi_Month,DATEADD(YEAR, @Pi_Year - 1900, 0)))
			 
	EXEC Proc_ReturnSalesProductTaxPercentage @FromDate,@ToDate 
			     
	SELECT * INTO #ParleOutputTaxPercentage FROM ParleOutputTaxPercentage (NOLOCK)    
			
	SELECT PRDBATID INTO #PRDBATID FROM (
	SELECT PrdBatid FROM SalesInvoice S (NOLOCK) INNER JOIN SalesInvoiceProduct SP (NOLOCK) ON S.SalId = SP.SalId WHERE SalInvDate BETWEEN @FromDate AND @ToDate AND S.DlvSts > 3
	UNION
	SELECT PrdBatid FROM ReturnHeader S (NOLOCK) INNER JOIN ReturnProduct SP (NOLOCK) ON S.ReturnID = SP.ReturnID WHERE ReturnDate BETWEEN @FromDate AND @ToDate AND S.[Status] = 0
	)A
	SELECT * INTO #ProductBatchDetails FROM ProductBatchDetails WHERE PrdBatid in (SELECT * FROM #PrdBatid) and slno=3
	SELECT S.SalId,S.SalInvNo,S.SalInvDate,S.RtrId,SP.PrdId,SP.PrdBatId,SP.BaseQty BaseQty,
	CASE SP.SplPriceId WHEN 0 THEN 0 ELSE SP.Priceid END As  Priceid,         
	B.DefaultPriceId ActualPriceId,SP.SlNo,sp.PrdTaxAmount,PrdUnitSelRate,PrdBatDetailValue ,RtrValueClassId        
	INTO #BillingDetails1          
	FROM SalesInvoice S (NOLOCK)          
	INNER JOIN SalesInvoiceProduct SP (NOLOCK) ON S.SalId = SP.SalId          
	INNER JOIN ProductBatch B (NOLOCK) ON SP.PrdBatId = B.PrdBatId       
	INNER JOIN #ProductBatchDetails PBD (NOLOCK) ON PBD.PrdBatId =B.PrdBatId and DefaultPrice =1         
	WHERE SalInvDate BETWEEN @FromDate AND @ToDate AND S.DlvSts > 3 and PBD.SLNo =3  
	SELECT S.ReturnID,S.ReturnCode,S.ReturnDate,S.RtrId,SP.PrdId,SP.PrdBatId,-1 * SP.BaseQty BaseQty,SP.PrdUnitMRP MRP,CASE SP.SplPriceId WHEN 0 THEN 0 ELSE SP.Priceid END As  Priceid,        
	B.DefaultPriceId ActualPriceId,SP.SlNo,SP.PrdEditSelRte,sp.PrdTaxAmt as prdtaxamount,PrdUnitSelRte as  PrdUnitSelRate,PrdBatDetailValue,RtrValueClassId         
	INTO #ReturnDetails1          
	FROM ReturnHeader S (NOLOCK)          
	INNER JOIN ReturnProduct SP (NOLOCK) ON S.ReturnID = SP.ReturnID AND StockTypeid in (select stocktypeid from  stocktype where systemstocktype =1)         
	INNER JOIN ProductBatch B (NOLOCK) ON SP.PrdBatId = B.PrdBatId          
	INNER JOIN #ProductBatchDetails PBD (NOLOCK) ON PBD.PrdBatId =B.PrdBatId and DefaultPrice =1      
	WHERE ReturnDate BETWEEN @FromDate AND @ToDate AND S.[Status] = 0 and PBD.SLNo =3
			
	SELECT DISTINCT R.RtrId,RC.CtgMainId,CtgCode,RC.CtgName,RtrValueClassId       
	INTO #Retailer      
	FROM Retailer R (NOLOCK),      
	RetailerValueClassMap RVCM (NOLOCK),      
	RetailerValueClass RVC (NOLOCK),      
	RetailerCategory RC (NOLOCK),     
	RetailerCategoryLevel RCL (NOLOCK)      
	WHERE R.Rtrid = RVCM.RtrId AND RVCM.RtrValueClassId = RVC.RtrClassId 	     
	AND  RVC.CtgMainId=RC.CtgMainId AND  RCL.CtgLevelId=RC.CtgLevelId
	SELECT tranid,Refid,Rtrid,CtgName,RefDate,Prdid,Prdbatid,BaseQty,Priceid,ActualPriceid,SelRate,CAST(0 AS NUMERIC(18,2)) Nrmlrate,CAST(0 AS NUMERIC(18,2)) SplRate,CAST(0 AS NUMERIC(18,2)) Diff,Slno      
	INTO #TotClaim FROM(      
	SELECT 1 tranid,Salid Refid,A.Rtrid,CtgName,Salinvdate RefDate,Prdid,Prdbatid,BaseQty,Priceid,ActualPriceid,PrdbatDetailvalue SelRate,Slno  
	FROM #BillingDetails1 A  INNER JOIN #Retailer B ON A.Rtrid = B.Rtrid  --and A.RtrValueClassId = B.RtrValueClassId 
	UNION       
	SELECT 2 Transid,ReturnID Refid,A.Rtrid,CtgName,ReturnDate RefDate,Prdid,Prdbatid,BaseQty,Priceid,ActualPriceid,PrdbatDetailvalue SelRate,Slno  
	FROM #ReturnDetails1  A  INNER JOIN #Retailer B ON A.Rtrid = B.Rtrid    --and A.RtrValueClassId = B.RtrValueClassId     
	)A  
	SELECT DISTINCT Priceid,PrdBatDetailValue SplSelRate  INTO #ExistingSpecialPrice FROM      
	(      
	SELECT D.PriceId,D.PrdBatDetailValue       
	FROM #TotClaim M (NOLOCK),      
	#ProductBatchDetails D (NOLOCK)       
	WHERE M.PriceId = D.PriceId AND D.SLNo = 3      
	AND PriceCode LIKE '%-Spl Rate-%'         
	UNION       
	SELECT D.PriceId,D.PrdBatDetailValue       
	FROM #TotClaim M (NOLOCK),      
	#ProductBatchDetails D (NOLOCK)       
	WHERE M.PriceId = D.PriceId AND D.SLNo = 3      
	AND PriceCode LIKE '%SplRate%'        
	)A 
	UPDATE A SET A.SplRate = (BaseQty*((B.SplselRate)+(B.SplselRate*(p.TaxPerc/100)))) FROM  #TotClaim A 
	INNER JOIN #ExistingSpecialPrice B ON A.Priceid = B.Priceid  
	INNER JOIN  #ParleOutputtaxPercentage P ON A.Refid = p.salid and A.slno = p.prdslno AND A.Tranid=P.Transid      
	WHERE A.Priceid <>0  
	UPDATE A SET A.SplRate = (BaseQty*(( SelRate)+(SelRate*(P.TaxPerc/100)))) FROM  #TotClaim A       
	INNER JOIN  #ParleOutputtaxPercentage P ON A.Refid = p.salid and a.slno = p.prdslno AND A.Tranid=P.Transid      
	WHERE A.Priceid =0
	UPDATE A SET A.NrmlRate = (BaseQty*(( SelRate)+(SelRate*(P.TaxPerc/100)))) FROM  #TotClaim A       
	INNER JOIN  #ParleOutputtaxPercentage P ON A.Refid = p.salid and a.slno = p.prdslno AND A.Tranid=P.Transid 
	UPDATE A SET A.Diff = (NrmlRate-SplRate) FROM  #TotClaim A    
			
	SELECT DISTINCT  B.CtgName,AttrCode ,MAX(CREATEDDATE) CREATEDDATE INTO #MAXDATE FROM SchemeClaimCircular A --WHERE  
	INNER JOIN RetailerCategory B ON A.AttrCode = B.CtgCode AND A.AttrType<>'Class'
	INNER JOIN #Retailer R ON B.CtgCode=R.CtgCode AND A.AttrCode = R.CtgCode
	AND ((@FromDate  BETWEEN  SchValidFrom AND SchValidTill  ) OR (@ToDate  BETWEEN  SchValidFrom AND SchValidTill)) 
		WHERE ClaimType='TOT Claim' GROUP BY B.CtgName,AttrCode
	SELECT CtgName,CircularNo INTO #CIRCULAR FROM SchemeClaimCircular A INNER JOIN #MAXDATE B ON A.AttrCode = B.AttrCode AND A.CreatedDate =B.CREATEDDATE 
			  
	INSERT INTO #TotClaimFinal(CtgName,Rtrid,Prdid,NrmlRate,SecSalesTot,DiffClaims)      
	SELECT CtgName,Rtrid,Prdid,SUM(NrmlRate),SUM(SplRate),SUM(Diff) FROM #TotClaim      
	GROUP BY Ctgname,Rtrid,Prdid
			
	UPDATE A SET Fromdate = B.Frmdt ,Todate = B.todt FROM #TotClaimFinal A  
	INNER JOIN (SELECT Ctgname,MIn(RefDate) Frmdt,Max(RefDate) todt FROM #TotClaim GROUP BY CtgName) B ON A.CtgName = B.Ctgname    
			
	INSERT INTO TempTOTClaimDetails       
	SELECT CtgName,Rtrid,Prdid,Fromdate,Todate,'',SUM(NrmlRate),SUM(SecSalesTot),SUM(DiffClaims),@Pi_Usrid,@Pi_Transid
	FROM #TotClaimFinal
	WHERE DiffClaims > 0   -- SHOWING ONLY +VE VALUE AS PER AWINASH REQUEST ON 19-12-2019
	GROUP BY CtgName,Rtrid,Prdid,Fromdate,Todate
	UPDATE A SET A.CirNO = ISNULL(CircularNo,'') FROM TempTOTClaimDetails A  
	INNER JOIN #CIRCULAR B ON A.CtgName = B.CTGNAME
			
	DELETE FROM TempTOTClaimDetails WHERE ISNULL(CirNo,'')=''
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Proc_ReturnSplDiscountClaim_New' AND TYPE='P')
DROP PROCEDURE Proc_ReturnSplDiscountClaim_New
GO
/* 
 BEGIN TRAN 
 EXEC Proc_ReturnSplDiscountClaim 0,'2018-04-01','2018-10-05',1,1  
 SELECT * FROM ReturnSplDiscountClaimAmt  
 ROLLBACK TRAN
*/ 
CREATE PROCEDURE Proc_ReturnSplDiscountClaim_New
(  
@Pi_ClmId INT,  
@Pi_FrmDate DateTime,  
@Pi_ToDate DateTime,  
@Pi_CmpId INT,  
@Pi_UsrID INT  
)  
AS  
BEGIN  
/*********************************  
* FUNCTION: Proc_ReturnSplDiscountClaim  
* PURPOSE: Returns the Special Discount Claim  
* NOTES:   
* CREATED: Thrinath Kola 12-12-2007  
* MODIFIED  
* DATE      AUTHOR     DESCRIPTION  
------------------------------------------------ 
* DATE       AUTHOR     CR/BZ	USER STORY ID           DESCRIPTION                         
***************************************************************************************************
29-03-2018  lakshman M   BZ     ICRSTPAR8158            sales Product id,batch id & base qty script validation added in CS .
09-04-2018	Mohana S	 BZ		ILCRSTPAR0085			Special Discount Claim Value mismatch
14-09-2018  Lakshman M   SR     ILCRSTPAR2050           Special Discount Claim Negative value consider in core stocky script has been changed.
25-09-2018  Vasantharaj  SR     ILCRSTPAR2190           Special Discount claim should load only With Negative and Positive Values (Zero value is not Loaded).
09-10-2018  Amuthakumar  BZ     CRCRSTPAR0031			Ignore Unsaleable Sales Return Products when claim
25-03-2020	MOHANA S     CR   PARCS202100002  Contract Pricing Optimization
**************************************************************************************************************/  
 CREATE TABLE #SalesTax  
 (  
  Salid NUMERIC(36,0),  
  PrdSlno INT,  
  TaxPerc NUMERIC(36,4),  
  TaxValue NumeriC(32,4),  
  TaxableAmount NUMERIC(36,4)  
 )  
 CREATE TABLE #ReturnSalesTax  
 (  
  ReturnId NUMERIC(36,0),  
  PrdSlno INT,  
  TaxPerc NUMERIC(36,4),  
  TaxValue NumeriC(32,4),  
  TaxableAmount NUMERIC(36,4)  
 )  

 DELETE A FROM ReturnSplDiscountClaimAmt A (NOLOCK) WHERE UsrId=@Pi_UsrID  

 INSERT INTO #SalesTax(Salid,PrdSlno,TaxPerc,TaxValue,TaxableAmount)  
 SELECT S.Salid,PrdSlno,SUM(TaxPerc) as TaxPerc,CASE VatGst WHEN 'VAT' THEN 0 ELSE SUM(TaxPerc)/100 END ,TaxableAmount   
 FROM SalesInvoiceProductTax  S  (NOLOCK) INNER JOIN SalesInvoice SI (NOLOCK) ON S.SalId=SI.Salid  
 WHERE  TaxableAmount>0 and DlvSts in (4,5)  
 AND SI.SalInvDate  Between @Pi_FrmDate and @Pi_ToDate 
 --and SI.SalInvDate Between '2017-02-03' AND '2017-06-03'   
 GROUP BY S.Salid,PrdSlno,TaxableAmount,VatGst ORDER BY Prdslno  
 SELECT Salid,PrdSlno Into #TaxCess   
 FROM #SalesTax   
 GROUP BY Salid,PrdSlno  
 HAVING Count(PrdSlno)>1 
  
 SELECT TT.Salid,TT.PrdSlno, TaxPerc,TaxableAmount INTO #TaxCess1   
 FROM #SalesTax TT  
 INNER JOIN #TaxCess T ON T.SalId= TT.Salid and T.PrdSlNo=TT.PrdSlno  
 DELETE A FROM #SalesTax  A INNER JOIN #TaxCess B ON A.Salid=B.Salid and A.PrdSlno=B.PrdSlno  
 INSERT INTO #ReturnSalesTax(ReturnId,PrdSlno,TaxPerc,TaxValue,TaxableAmount)  
 SELECT S.ReturnId,PrdSlno,SUM(TaxPerc) as TaxPerc,CASE VatGst WHEN 'VAT' THEN 0 ELSE SUM(TaxPerc)/100 END,TaxableAmt   
 FROM ReturnProductTax S (NOLOCK) INNER JOIN ReturnHeader SI (NOLOCK) ON S.ReturnId=SI.ReturnId  
 WHERE  TaxableAmt>0 and SI.Status=0  
 AND SI.ReturnDate Between @Pi_FrmDate and @Pi_ToDate 
 GROUP BY S.ReturnId,PrdSlno,TaxableAmt,VatGst ORDER BY PrdSlno
   
 SELECT ReturnId,PrdSlno Into #ReturnTaxCess FROM #ReturnSalesTax   
 GROUP BY ReturnId,PrdSlno  
 HAVING Count(PrdSlno)>1  
 SELECT TT.ReturnId,TT.PrdSlno, TaxPerc,TaxableAmount INTO #ReturnTaxCess1   
 FROM #ReturnSalesTax TT  
 INNER JOIN #ReturnTaxCess T ON T.ReturnId= TT.ReturnId and T.PrdSlNo=TT.PrdSlno  

 DELETE A FROM #ReturnSalesTax  A INNER JOIN #ReturnTaxCess B ON A.ReturnId=B.ReturnId and A.PrdSlno=B.PrdSlno  

  INSERT INTO ReturnSplDiscountClaimAmt (SalID,SalInvNo,Status,RtrName,SpentAmt,SpentTaxAmt,TotalSpentAmt,TaxPercent,RecAmt,Type,UsrId)  
  SELECT A.SalId,A.SalInvno,0 as Status,R.RtrName,  
  SUM(PrdSplDiscAmount) as SpentAmt,  
  ISNULL(SUM(PrdSplDiscAmount*TaxValue),0),   
  ISNULL(SUM(PrdSplDiscAmount)+SUM(PrdSplDiscAmount*TaxValue),0),  
  ISNULL(TaxPerc,0),0 as RecAmt,1,@Pi_UsrID  
  FROM SalesInvoice A (NOLOCK) INNER JOIN SalesInvoiceProduct B  (NOLOCK) 
  ON A.SalId = B.SalId INNER JOIN Retailer R ON A.RtrId = R.RtrId   
  INNER JOIN Product P(NOLOCK) ON B.PrdId = P.PrdId  
  LEFT OUTER JOIN #SalesTax PT ON PT.SalId=B.SalId and PT.SalId=A.SalId and PT.PrdSlNo=B.SlNo    
  where B.SPLDiscClaimId IN (0,0) AND P.CmpId = 1 AND   
  A.SalInvDate Between @Pi_FrmDate and @Pi_ToDate    
  --A.SalInvDate Between '2017-02-03' AND '2017-06-03'  
  AND A.Dlvsts in (4,5)  
  GROUP BY A.SalId,A.SalInvno,R.RtrName,TaxPerc  
 --  Having SUM(PrdSplDiscAmount) > 0  ------  commented by Lakshman M dated ON 14-09-2019 PMS ID: ILCRSTPAR2050
  Having SUM(PrdSplDiscAmount) <> 0   -- PMS ID: ILCRSTPAR2190 ON 25-09-2018


  SELECT B.* INTO #ProductBatchDetails FROM  ProductBatch A (NOLOCK)    
  INNER JOIN ProductBatchDetails B (NOLOCK) ON A.PrdBatId = B.PrdBatID  
  INNER JOIN BatchCreation C (NOLOCK) ON  
  C.BatchSeqId = A.BatchSeqId And B.SlNo = C.SlNo And C.SelRte = 1   


	INSERT INTO ReturnSplDiscountClaimAmt (SalID,SalInvNo,Status,RtrName,SpentAmt,SpentTaxAmt,TotalSpentAmt,TaxPercent,RecAmt,Type,UsrId)  
	SELECT SI.SalId,SI.SalInvNo,0 as Status,RT.RtrName,  
	SUM(Sp.BaseQty * (Orgselrate-Splrate)) as SpentAmt,  
	ISNULL(SUM((Sp.BaseQty * (Orgselrate-Splrate))*TaxValue),0),  
	ISNULL(SUM(Sp.BaseQty * (Orgselrate-Splrate))+SUM((Sp.BaseQty * (Orgselrate-Splrate))*TaxValue),0),  
	ISNULL(TaxPerc,0),  
	0.00 as RecAmt,1,@Pi_UsrID  
	from SalesInvoice SI INNER JOIN Retailer RT ON SI.RtrId=RT.RtrId   
	INNER JOIN SalesInvoiceProduct SP ON SI.SalID = SP.SalID  
	LEFT OUTER JOIN #SalesTax PT ON PT.SalId=SI.SalId and PT.SalId=SP.SalId and PT.PrdSlNo=SP.SlNo   
	--INNER JOIN Product PR WITH (NOLOCK) ON SP.PrdId = PR.PrdId   
	--INNER JOIN ProductBatch A (NOLOCK) ON A.PrdId = PR.PrdId AND A.PrdBatId = SP.PrdBatID  
	--INNER JOIN #ProductBatchDetails B (NOLOCK) ON A.PrdBatId = B.PrdBatID  
	--INNER JOIN BatchCreation C (NOLOCK) ON  
	--C.BatchSeqId = A.BatchSeqId And B.SlNo = C.SlNo And C.SelRte = 1  
	--AND B.PriceId=SP.SplPriceId    
	--INNER JOIN #ProductBatchDetails D (NOLOCK) ON A.PrdBatId = D.PrdBatID
	--AND D.PriceId=SP.PriceId 
	--INNER JOIN BatchCreation E (NOLOCK) ON
	--E.BatchSeqId = A.BatchSeqId And D.SlNo = E.SlNo And E.SelRte = 1 AND
	--A.PrdId=SP.PrdId AND A.PrdBatId= SP.PrdBatId
	--INNER JOIN Contractpricingmaster CM on CM.ContractId=Sp.splpriceid     
	WHERE   
	SI.SalInvDate Between @Pi_FrmDate and @Pi_ToDate
	AND SI.dlvsts in (4,5) AND SP.SplDiscClaimId IN (0,@Pi_ClmId)
	--AND PR.CmpId= @Pi_CmpId		
	GROUP BY SI.SalId,SI.SalInvNo,RT.RtrName,TaxPerc,sp.prdid,sp.prdbatid,sp.baseqty
	-- Having SUM(Sp.BaseQty * (B.PrdBatDetailValue-D.PrdBatDetailValue)) > 0   ------  commented by Lakshman M dated ON 14-09-2019 PMS ID: ILCRSTPAR2050
	Having SUM(Sp.BaseQty * (Orgselrate-Splrate)) <> 0    -- PMS ID: ILCRSTPAR2190 ON 25-09-2018



	---Sales Return  
	INSERT INTO ReturnSplDiscountClaimAmt (SalID,SalInvNo,Status,RtrName,SpentAmt,SpentTaxAmt,TotalSpentAmt,TaxPercent,RecAmt,Type,UsrId)  
	SELECT A.ReturnId,A.ReturnCode,0 as Status,R.RtrName,-1 * SUM(PrdSplDisAmt) as SpentAmt,  
	-1 * ISNULL(SUM(PrdSplDisAmt*TaxValue),0),  ISNULL(-1*(SUM(PrdSplDisAmt)+SUM(PrdSplDisAmt*TaxValue)),0),ISNULL(TaxPerc,0),  
	0 as RecAmt,2,@Pi_UsrID  
	FROM ReturnHeader A   
	INNER JOIN ReturnProduct B  ON A.ReturnId = B.ReturnId  
	AND B.StockTypeId IN (SELECT StockTypeId FROM StockType WHERE SystemStockType = 1) --- Added By Amuthakumar on 09/10/2018 CRCRSTPAR0031
	LEFT OUTER JOIN #ReturnSalesTax RS ON  A.ReturnId =RS.ReturnId and RS.ReturnId= B.ReturnId  and RS.PrdSlno=B.Slno  
	INNER JOIN Retailer R ON A.RtrId = R.RtrId    
	INNER JOIN Product P ON B.PrdId = P.PrdId   
	where B.SPLDiscClaimId IN (0,@Pi_ClmId) AND P.CmpId = @Pi_CmpId AND   
	A.ReturnDate Between @Pi_FrmDate AND @Pi_ToDate AND A.Status = 0  
	GROUP BY A.ReturnId,A.ReturnCode,R.RtrName,TaxPerc,B.prdid,B.prdbatid,B.baseqty ---------- Added By Lakshman M On 29-03-2018 Pms id:ICRSTPAR8158   
	-- Having SUM(PrdSplDisAmt) > 0  ------  commented by Lakshman M dated ON 14-09-2019 PMS ID: ILCRSTPAR2050
	 Having SUM(PrdSplDisAmt) <> 0   -- PMS ID: ILCRSTPAR2190 ON 25-09-2018  
	
	INSERT INTO ReturnSplDiscountClaimAmt (SalID,SalInvNo,Status,RtrName,SpentAmt,SpentTaxAmt,TotalSpentAmt,TaxPercent,RecAmt,Type,UsrId)  --ADDED BY MOHANA ILCRSTPAR0085
	SELECT SI.ReturnId,SI.ReturnCode,0 as Status,RT.RtrName,  
	-1 * SUM(Sp.BaseQty * (Orgselrate-SplRate)) as SpentAmt,  
	ISNULL(-1 * SUM((Sp.BaseQty * (Orgselrate-SplRate))*Taxvalue) ,0),  
	-1*(ISNULL(SUM(Sp.BaseQty * (Orgselrate-SplRate)),0) +ISNULL(SUM((Sp.BaseQty * (Orgselrate-SplRate))*Taxvalue) ,0)),  
	ISNULL(TaxPerc,0),0.00 as RecAmt,2,@Pi_UsrID  
	from ReturnHeader SI   
	INNER JOIN Retailer RT ON SI.RtrId=RT.RtrId   
	INNER JOIN ReturnProduct SP ON SI.ReturnId = SP.ReturnId  
	AND SP.StockTypeId IN (SELECT StockTypeId FROM StockType WHERE SystemStockType = 1) --- Added By Amuthakumar on 09/10/2018 CRCRSTPAR0031
	INNER JOIN SalesInvoiceProduct SIP ON SIP.SALID =SI.SALID AND SP.Prdid = SIP.Prdid AND SIP.PrdBatId = SP.PrdBatId AND SP.ActSalRowid = SIP.Slno 
	LEFT OUTER JOIN #ReturnSalesTax RS ON  SI.ReturnId =RS.ReturnId and RS.ReturnId= SP.ReturnId  and RS.PrdSlno=SP.Slno  
	--INNER JOIN Product PR WITH (NOLOCK) ON SP.PrdId = PR.PrdId   
	--INNER JOIN ProductBatch A (NOLOCK) ON A.PrdId = PR.PrdId AND A.PrdBatId = SP.PrdBatID  
	--INNER JOIN #ProductBatchDetails B (NOLOCK) ON A.PrdBatId = B.PrdBatID  
	--INNER JOIN BatchCreation C (NOLOCK) ON  
	--C.BatchSeqId = A.BatchSeqId And B.SlNo = C.SlNo And C.SelRte = 1  
	--AND B.PriceId=SP.SplPriceId
	--INNER JOIN #ProductBatchDetails D (NOLOCK) ON A.PrdBatId = D.PrdBatID
	--AND D.PriceId=SP.PriceId 
	--INNER JOIN BatchCreation E (NOLOCK) ON
	--E.BatchSeqId = A.BatchSeqId And D.SlNo = E.SlNo And E.SelRte = 1 AND
	--A.PrdId=SP.PrdId AND A.PrdBatId= SP.PrdBatId
	where SI.ReturnDate Between @Pi_FrmDate and @Pi_ToDate
	AND SI.Status = 0 AND SP.SplDiscClaimId IN (0,@Pi_ClmId)
	--AND PR.CmpId= @Pi_CmpId 
	GROUP BY SI.ReturnId,SI.ReturnCode,RT.RtrName,RS.TaxPerc,sp.prdid,sp.prdbatid,sp.baseqty ---------- Added By Lakshman M On 29-03-2018 Pms id:ICRSTPAR8158
	-- Having SUM(Sp.BaseQty * (B.PrdBatDetailValue-D.PrdBatDetailValue)) > 0 ------  commented by Lakshman M dated ON 14-09-2019 PMS ID: ILCRSTPAR2050
	 Having SUM(Sp.BaseQty * (Orgselrate-SplRate)) <> 0  -- PMS ID: ILCRSTPAR2190 ON 25-09-2018
RETURN  
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Proc_ReturnSplDiscountClaim' AND TYPE='P')
DROP PROCEDURE Proc_ReturnSplDiscountClaim
GO
/* 
 BEGIN TRAN 
 EXEC Proc_ReturnSplDiscountClaim 0,'2018-04-01','2018-10-05',1,1  
 SELECT * FROM ReturnSplDiscountClaimAmt  
 ROLLBACK TRAN
*/  
CREATE PROCEDURE Proc_ReturnSplDiscountClaim
(  
@Pi_ClmId INT,  
@Pi_FrmDate DateTime,  
@Pi_ToDate DateTime,  
@Pi_CmpId INT,  
@Pi_UsrID INT  
)  
AS  
BEGIN  
/*********************************  
* FUNCTION: Proc_ReturnSplDiscountClaim  
* PURPOSE: Returns the Special Discount Claim  
* NOTES:   
* CREATED: Thrinath Kola 12-12-2007  
* MODIFIED  
* DATE      AUTHOR     DESCRIPTION  
------------------------------------------------ 
* DATE       AUTHOR     CR/BZ	USER STORY ID           DESCRIPTION                         
***************************************************************************************************
29-03-2018  lakshman M   BZ     ICRSTPAR8158            sales Product id,batch id & base qty script validation added in CS .
09-04-2018	Mohana S	 BZ		ILCRSTPAR0085			Special Discount Claim Value mismatch
14-09-2018  Lakshman M   SR     ILCRSTPAR2050           Special Discount Claim Negative value consider in core stocky script has been changed.
25-09-2018  Vasantharaj  SR     ILCRSTPAR2190           Special Discount claim should load only With Negative and Positive Values (Zero value is not Loaded).
09-10-2018  Amuthakumar  BZ     CRCRSTPAR0031			Ignore Unsaleable Sales Return Products when claim

* 24-03-2020	MOHANA S     CR   PARCS202100002  Contract Pricing Optimization
*********************************/  


EXEC Proc_ReturnSplDiscountClaim_New @Pi_ClmId ,@Pi_FrmDate, @Pi_ToDate, @Pi_CmpId, @Pi_UsrID  
RETURN
									 
 CREATE TABLE #SalesTax  			   
 (  								  
  Salid NUMERIC(36,0),  			
  PrdSlno INT,  
  TaxPerc NUMERIC(36,4),  
  TaxValue NumeriC(32,4),  
  TaxableAmount NUMERIC(36,4)  
 )  
 CREATE TABLE #ReturnSalesTax  
 (  
  ReturnId NUMERIC(36,0),  
  PrdSlno INT,  
  TaxPerc NUMERIC(36,4),  
  TaxValue NumeriC(32,4),  
  TaxableAmount NUMERIC(36,4)  
 )  
 DELETE A FROM ReturnSplDiscountClaimAmt A (NOLOCK) WHERE UsrId=@Pi_UsrID  
 INSERT INTO #SalesTax(Salid,PrdSlno,TaxPerc,TaxValue,TaxableAmount)  
 SELECT S.Salid,PrdSlno,SUM(TaxPerc) as TaxPerc,CASE VatGst WHEN 'VAT' THEN 0 ELSE SUM(TaxPerc)/100 END ,TaxableAmount   
 FROM SalesInvoiceProductTax  S  (NOLOCK) INNER JOIN SalesInvoice SI (NOLOCK) ON S.SalId=SI.Salid  
 WHERE  TaxableAmount>0 and DlvSts in (4,5)  
 AND SI.SalInvDate  Between @Pi_FrmDate and @Pi_ToDate 
 --and SI.SalInvDate Between '2017-02-03' AND '2017-06-03'   
 GROUP BY S.Salid,PrdSlno,TaxableAmount,VatGst ORDER BY Prdslno  
 SELECT Salid,PrdSlno Into #TaxCess   
 FROM #SalesTax   
 GROUP BY Salid,PrdSlno  
 HAVING Count(PrdSlno)>1  
 SELECT TT.Salid,TT.PrdSlno, TaxPerc,TaxableAmount INTO #TaxCess1   
 FROM #SalesTax TT  
 INNER JOIN #TaxCess T ON T.SalId= TT.Salid and T.PrdSlNo=TT.PrdSlno  
 DELETE A FROM #SalesTax  A INNER JOIN #TaxCess B ON A.Salid=B.Salid and A.PrdSlno=B.PrdSlno  
 INSERT INTO #ReturnSalesTax(ReturnId,PrdSlno,TaxPerc,TaxValue,TaxableAmount)  
 SELECT S.ReturnId,PrdSlno,SUM(TaxPerc) as TaxPerc,CASE VatGst WHEN 'VAT' THEN 0 ELSE SUM(TaxPerc)/100 END,TaxableAmt   
 FROM ReturnProductTax S (NOLOCK) INNER JOIN ReturnHeader SI (NOLOCK) ON S.ReturnId=SI.ReturnId  
 WHERE  TaxableAmt>0 and SI.Status=0  
 AND SI.ReturnDate Between @Pi_FrmDate and @Pi_ToDate 
 GROUP BY S.ReturnId,PrdSlno,TaxableAmt,VatGst ORDER BY PrdSlno  
 SELECT ReturnId,PrdSlno Into #ReturnTaxCess FROM #ReturnSalesTax   
 GROUP BY ReturnId,PrdSlno  
 HAVING Count(PrdSlno)>1  
 SELECT TT.ReturnId,TT.PrdSlno, TaxPerc,TaxableAmount INTO #ReturnTaxCess1   
 FROM #ReturnSalesTax TT  
 INNER JOIN #ReturnTaxCess T ON T.ReturnId= TT.ReturnId and T.PrdSlNo=TT.PrdSlno  
 DELETE A FROM #ReturnSalesTax  A INNER JOIN #ReturnTaxCess B ON A.ReturnId=B.ReturnId and A.PrdSlno=B.PrdSlno  
  INSERT INTO ReturnSplDiscountClaimAmt (SalID,SalInvNo,Status,RtrName,SpentAmt,SpentTaxAmt,TotalSpentAmt,TaxPercent,RecAmt,Type,UsrId)  
  SELECT A.SalId,A.SalInvno,0 as Status,R.RtrName,  
  SUM(PrdSplDiscAmount) as SpentAmt,  
  ISNULL(SUM(PrdSplDiscAmount*TaxValue),0),   
  ISNULL(SUM(PrdSplDiscAmount)+SUM(PrdSplDiscAmount*TaxValue),0),  
  ISNULL(TaxPerc,0),0 as RecAmt,1,@Pi_UsrID  
  FROM SalesInvoice A (NOLOCK) INNER JOIN SalesInvoiceProduct B  (NOLOCK) 
  ON A.SalId = B.SalId INNER JOIN Retailer R ON A.RtrId = R.RtrId   
  INNER JOIN Product P(NOLOCK) ON B.PrdId = P.PrdId  
  LEFT OUTER JOIN #SalesTax PT ON PT.SalId=B.SalId and PT.SalId=A.SalId and PT.PrdSlNo=B.SlNo    
  where B.SPLDiscClaimId IN (0,0) AND P.CmpId = 1 AND   
  A.SalInvDate Between @Pi_FrmDate and @Pi_ToDate    
  --A.SalInvDate Between '2017-02-03' AND '2017-06-03'  
  AND A.Dlvsts in (4,5)  
  GROUP BY A.SalId,A.SalInvno,R.RtrName,TaxPerc  
 --  Having SUM(PrdSplDiscAmount) > 0  ------  commented by Lakshman M dated ON 14-09-2019 PMS ID: ILCRSTPAR2050
  Having SUM(PrdSplDiscAmount) <> 0   -- PMS ID: ILCRSTPAR2190 ON 25-09-2018
  SELECT B.* INTO #ProductBatchDetails FROM  ProductBatch A (NOLOCK)    
  INNER JOIN ProductBatchDetails B (NOLOCK) ON A.PrdBatId = B.PrdBatID  
  INNER JOIN BatchCreation C (NOLOCK) ON  
  C.BatchSeqId = A.BatchSeqId And B.SlNo = C.SlNo And C.SelRte = 1   
	INSERT INTO ReturnSplDiscountClaimAmt (SalID,SalInvNo,Status,RtrName,SpentAmt,SpentTaxAmt,TotalSpentAmt,TaxPercent,RecAmt,Type,UsrId)  
	SELECT SI.SalId,SI.SalInvNo,0 as Status,RT.RtrName,  
	SUM(Sp.BaseQty * (B.PrdBatDetailValue-D.PrdBatDetailValue)) as SpentAmt,  
	ISNULL(SUM((Sp.BaseQty * (B.PrdBatDetailValue-D.PrdBatDetailValue))*TaxValue),0),  
	ISNULL(SUM(Sp.BaseQty * (B.PrdBatDetailValue-D.PrdBatDetailValue))+SUM((Sp.BaseQty * (B.PrdBatDetailValue-D.PrdBatDetailValue))*TaxValue),0),  
	ISNULL(TaxPerc,0),  
	0.00 as RecAmt,1,@Pi_UsrID  
	from SalesInvoice SI INNER JOIN Retailer RT ON SI.RtrId=RT.RtrId   
	INNER JOIN SalesInvoiceProduct SP ON SI.SalID = SP.SalID  
	LEFT OUTER JOIN #SalesTax PT ON PT.SalId=SI.SalId and PT.SalId=SP.SalId and PT.PrdSlNo=SP.SlNo   
	INNER JOIN Product PR WITH (NOLOCK) ON SP.PrdId = PR.PrdId   
	INNER JOIN ProductBatch A (NOLOCK) ON A.PrdId = PR.PrdId AND A.PrdBatId = SP.PrdBatID  
	INNER JOIN #ProductBatchDetails B (NOLOCK) ON A.PrdBatId = B.PrdBatID  
	INNER JOIN BatchCreation C (NOLOCK) ON  
	C.BatchSeqId = A.BatchSeqId And B.SlNo = C.SlNo And C.SelRte = 1  
	AND B.PriceId=SP.SplPriceId    
	INNER JOIN #ProductBatchDetails D (NOLOCK) ON A.PrdBatId = D.PrdBatID
	AND D.PriceId=SP.PriceId 
	INNER JOIN BatchCreation E (NOLOCK) ON
	E.BatchSeqId = A.BatchSeqId And D.SlNo = E.SlNo And E.SelRte = 1 AND
	A.PrdId=SP.PrdId AND A.PrdBatId= SP.PrdBatId
	--INNER JOIN Contractpricingmaster CM on CM.ContractId=Sp.splpriceid     
	WHERE   
	SI.SalInvDate Between @Pi_FrmDate and @Pi_ToDate
	AND SI.dlvsts in (4,5) AND SP.SplDiscClaimId IN (0,@Pi_ClmId)
	AND PR.CmpId= @Pi_CmpId		
	GROUP BY SI.SalId,SI.SalInvNo,RT.RtrName,TaxPerc,sp.prdid,sp.prdbatid,sp.baseqty
	-- Having SUM(Sp.BaseQty * (B.PrdBatDetailValue-D.PrdBatDetailValue)) > 0   ------  commented by Lakshman M dated ON 14-09-2019 PMS ID: ILCRSTPAR2050
	Having SUM(Sp.BaseQty * (B.PrdBatDetailValue-D.PrdBatDetailValue)) <> 0    -- PMS ID: ILCRSTPAR2190 ON 25-09-2018
	---Sales Return  
	INSERT INTO ReturnSplDiscountClaimAmt (SalID,SalInvNo,Status,RtrName,SpentAmt,SpentTaxAmt,TotalSpentAmt,TaxPercent,RecAmt,Type,UsrId)  
	SELECT A.ReturnId,A.ReturnCode,0 as Status,R.RtrName,-1 * SUM(PrdSplDisAmt) as SpentAmt,  
	-1 * ISNULL(SUM(PrdSplDisAmt*TaxValue),0),  ISNULL(-1*(SUM(PrdSplDisAmt)+SUM(PrdSplDisAmt*TaxValue)),0),ISNULL(TaxPerc,0),  
	0 as RecAmt,2,@Pi_UsrID  
	FROM ReturnHeader A   
	INNER JOIN ReturnProduct B  ON A.ReturnId = B.ReturnId  
	AND B.StockTypeId IN (SELECT StockTypeId FROM StockType WHERE SystemStockType = 1) --- Added By Amuthakumar on 09/10/2018 CRCRSTPAR0031
	LEFT OUTER JOIN #ReturnSalesTax RS ON  A.ReturnId =RS.ReturnId and RS.ReturnId= B.ReturnId  and RS.PrdSlno=B.Slno  
	INNER JOIN Retailer R ON A.RtrId = R.RtrId    
	INNER JOIN Product P ON B.PrdId = P.PrdId   
	where B.SPLDiscClaimId IN (0,@Pi_ClmId) AND P.CmpId = @Pi_CmpId AND   
	A.ReturnDate Between @Pi_FrmDate AND @Pi_ToDate AND A.Status = 0  
	GROUP BY A.ReturnId,A.ReturnCode,R.RtrName,TaxPerc,B.prdid,B.prdbatid,B.baseqty ---------- Added By Lakshman M On 29-03-2018 Pms id:ICRSTPAR8158   
	-- Having SUM(PrdSplDisAmt) > 0  ------  commented by Lakshman M dated ON 14-09-2019 PMS ID: ILCRSTPAR2050
	 Having SUM(PrdSplDisAmt) <> 0   -- PMS ID: ILCRSTPAR2190 ON 25-09-2018  
	
	INSERT INTO ReturnSplDiscountClaimAmt (SalID,SalInvNo,Status,RtrName,SpentAmt,SpentTaxAmt,TotalSpentAmt,TaxPercent,RecAmt,Type,UsrId)  --ADDED BY MOHANA ILCRSTPAR0085
	SELECT SI.ReturnId,SI.ReturnCode,0 as Status,RT.RtrName,  
	-1 * SUM(Sp.BaseQty * (B.PrdBatDetailValue-D.PrdBatDetailValue)) as SpentAmt,  
	ISNULL(-1 * SUM((Sp.BaseQty * (B.PrdBatDetailValue-D.PrdBatDetailValue))*Taxvalue) ,0),  
	-1*(ISNULL(SUM(Sp.BaseQty * (B.PrdBatDetailValue-D.PrdBatDetailValue)),0) +ISNULL(SUM((Sp.BaseQty * (B.PrdBatDetailValue-D.PrdBatDetailValue))*Taxvalue) ,0)),  
	ISNULL(TaxPerc,0),0.00 as RecAmt,2,@Pi_UsrID  
	from ReturnHeader SI   
	INNER JOIN Retailer RT ON SI.RtrId=RT.RtrId   
	INNER JOIN ReturnProduct SP ON SI.ReturnId = SP.ReturnId  
	AND SP.StockTypeId IN (SELECT StockTypeId FROM StockType WHERE SystemStockType = 1) --- Added By Amuthakumar on 09/10/2018 CRCRSTPAR0031
	LEFT OUTER JOIN #ReturnSalesTax RS ON  SI.ReturnId =RS.ReturnId and RS.ReturnId= SP.ReturnId  and RS.PrdSlno=SP.Slno  
	INNER JOIN Product PR WITH (NOLOCK) ON SP.PrdId = PR.PrdId   
	INNER JOIN ProductBatch A (NOLOCK) ON A.PrdId = PR.PrdId AND A.PrdBatId = SP.PrdBatID  
	INNER JOIN #ProductBatchDetails B (NOLOCK) ON A.PrdBatId = B.PrdBatID  
	INNER JOIN BatchCreation C (NOLOCK) ON  
	C.BatchSeqId = A.BatchSeqId And B.SlNo = C.SlNo And C.SelRte = 1  
	AND B.PriceId=SP.SplPriceId
	INNER JOIN #ProductBatchDetails D (NOLOCK) ON A.PrdBatId = D.PrdBatID
	AND D.PriceId=SP.PriceId 
	INNER JOIN BatchCreation E (NOLOCK) ON
	E.BatchSeqId = A.BatchSeqId And D.SlNo = E.SlNo And E.SelRte = 1 AND
	A.PrdId=SP.PrdId AND A.PrdBatId= SP.PrdBatId
	where SI.ReturnDate Between @Pi_FrmDate and @Pi_ToDate
	AND SI.Status = 0 AND SP.SplDiscClaimId IN (0,@Pi_ClmId)
	AND PR.CmpId= @Pi_CmpId 
	GROUP BY SI.ReturnId,SI.ReturnCode,RT.RtrName,RS.TaxPerc,sp.prdid,sp.prdbatid,sp.baseqty ---------- Added By Lakshman M On 29-03-2018 Pms id:ICRSTPAR8158
	-- Having SUM(Sp.BaseQty * (B.PrdBatDetailValue-D.PrdBatDetailValue)) > 0 ------  commented by Lakshman M dated ON 14-09-2019 PMS ID: ILCRSTPAR2050
	 Having SUM(Sp.BaseQty * (B.PrdBatDetailValue-D.PrdBatDetailValue)) <> 0  -- PMS ID: ILCRSTPAR2190 ON 25-09-2018
RETURN  
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_Cs2Cn_ChainWiseBillDetails_withTax' AND TYPE='P')
DROP PROCEDURE Proc_Cs2Cn_ChainWiseBillDetails_withTax
GO
/*
Begin transaction 
EXEC Proc_Cs2Cn_ChainWiseBillDetails_withTax 0,'2018-10-18'
select   * from Cs2Cn_Prk_ChainWiseBillDetails order by Billno
Rollback Transaction
*/
CREATE PROCEDURE Proc_Cs2Cn_ChainWiseBillDetails_withTax
(
	@Po_ErrNo INT OUTPUT,
	@ServerDate DATETIME
)
AS
/*************************************************************************************************
* PROCEDURE		: Proc_Cs2Cn_ChainWiseBillDetails 
* PURPOSE		: To Extract LMISDetails
* CREATED BY	: Aravindh Deva C
* CREATED DATE	: 03.06.2016
* NOTE			:
* MODIFIED
---------------------------------------------------------------------------------------------------
* DATE        AUTHOR		  CR/BZ		USER STORY ID        DESCRIPTION   
 27-03-2018   S.MOhana			CR		CCRSTPAR0188	  Included reports changes in upload	
 18-09-2018  Amuthakumar P		CR		CRCRSTPAR0021	  Promotion claim should be calculating with tax
 09-10-2018  Mohana P		    BZ		ILCRSTPAR2313	  TAX CALCULATION CHANGED AS PER CLIENT REQUEST
 13-12-2019	 MOHANA S	   SR		CRCRSTPAR0079	  INCLUDED GT CATEGORY			
 08-05-2020	  Mohana S			CR			    PARCS202100012		Included Channel and LCTR	
 25-03-2020	MOHANA S     CR   PARCS202100002  Contract Pricing Optimization	
**************************************************************************************************/
SET NOCOUNT ON
BEGIN
	
	SET @Po_ErrNo=0
	
	CREATE TABLE #ChainSalesDetails
	(
		[TransType] INT NOT NULL,
		[SalId] [bigint] NOT NULL,
		[SalInvNo] [nvarchar](50) NOT NULL,
		[SalInvDate] [datetime] NOT NULL,
		[RtrId] [int] NOT NULL,
		[PrdId] [int] NOT NULL,
		[TotalPCS] [numeric](38, 0) NULL,
		[MRP] [numeric](18, 6) NOT NULL,
		[PriceId] [int] NOT NULL,
		[PrdBatid] [int] NOT NULL,
		[ChainLandRate] [numeric](18, 6) NULL,
		[SchemeDiscount] [numeric](18, 6) NULL,
		[PRDSLNO] INT NOT NULL,
		LCTR	[numeric](18, 6) NULL 
	)
	
	DECLARE @DistCode As NVARCHAR(50)
	DELETE FROM Cs2Cn_Prk_ChainWiseBillDetails WHERE UploadFlag = 'Y'
	
	IF NOT EXISTS (SELECT '' FROM UploadingReportTransaction (NOLOCK))
	BEGIN
		RETURN
	END
	SELECT @DistCode = DistributorCode FROM Distributor(NOLOCK)	
			
	--To Filter Retailers
	SELECT DISTINCT R.RtrId,RC.CtgCode,Ctgname,RC.CtgMainId
	INTO #FilterRetailer
	FROM Retailer R (NOLOCK),
	RetailerValueClassMap RVCM (NOLOCK),
	RetailerValueClass RVC (NOLOCK),
	RetailerCategory RC (NOLOCK),
	RetailerCategoryLevel RCL (NOLOCK)
	WHERE R.Rtrid = RVCM.RtrId AND RVCM.RtrValueClassId = RVC.RtrClassId
	AND  RVC.CtgMainId=RC.CtgMainId AND  RCL.CtgLevelId=RC.CtgLevelId
	--and  CtgLinkId IN (SELECT CtgMainId FROM RetailerCategory A(NOLOCK) where CtgCode NOT IN ('GT'))
	--To Filter Retailers
	
	--COMMENTED BY MOHANA ILCRSTPAR2313
	---- Added by Amuthakumar CRCRSTPAR0021
	--To Filter Products
	--SELECT DISTINCT P.PrdId
	--INTO #FilterProduct
	--FROM Product P (NOLOCK) 
	--WHERE P.PrdType = 3
	--To Filter Products
	
	DECLARE @FromDate DATETIME
	DECLARE @ToDate DATETIME
	
	SELECT @FromDate = MIN(TransDate),@ToDate = MAX(TransDate) 
	FROM UploadingReportTransaction (NOLOCK)
	--- Till Here 	CRCRSTPAR0021
	
	INSERT INTO #ChainSalesDetails
	SELECT 1 AS TRANSID,S.SalId,S.SalInvNo,S.SalInvDate,S.RtrId,SP.PrdId,SUM(SP.BaseQty) TotalPCS,SP.PrdUnitMRP MRP,CASE SP.SplPriceid WHEN 0 THEN 0 ELSE  SP.Priceid END AS Priceid,SP.PrdBatid,
	CAST(0 AS NUMERIC(18,6)) ChainLandRate,SUM(SP.PrdSchDiscAmount) SchDisc,SP.SlNo,0
	FROM SalesInvoice S (NOLOCK)
	INNER JOIN SalesInvoiceProduct SP (NOLOCK) ON S.SalId = SP.SalId
	WHERE EXISTS (SELECT 'C' FROM UploadingReportTransaction FP (NOLOCK) WHERE FP.TransDate = S.SalInvDate)
	AND EXISTS (SELECT 'C' FROM #FilterRetailer FR (NOLOCK) WHERE S.RtrId = FR.RtrId)
	--AND EXISTS (SELECT 'C' FROM #FilterProduct FPR (NOLOCK) WHERE SP.PrdId = FPR.PrdId)--- Add by Amuthakumar --COMMENTED BY MOHANA ILCRSTPAR2313
	AND S.DlvSts > 3  
	GROUP BY S.SalId,S.SalInvNo,S.SalInvDate,S.RtrId,SP.PrdId,SP.PrdUnitMRP,SP.PriceId,SP.SplPriceid,SP.PrdBatid,SP.SlNo
	UNION ALL
	SELECT 2 AS TRANSID,S.ReturnID,S.ReturnCode,S.ReturnDate,S.RtrId,SP.PrdId,SUM(-1*SP.BaseQty) TotalPCS,SP.PrdUnitMRP MRP,CASE SP.SplPriceid WHEN 0 THEN 0 ELSE  SP.Priceid END AS Priceid,SP.PrdBatid,
	CAST(0 AS NUMERIC(18,6)) ChainLandRate,SUM(SP.PrdSchDisAmt) SchDisc,SP.Slno,0
	FROM ReturnHeader S (NOLOCK)
	INNER JOIN ReturnProduct SP (NOLOCK) ON S.ReturnID = SP.ReturnID AND SP.StockTypeId IN (SELECT StockTypeId FROM StockType WHERE SystemStockType = 1)
	WHERE  EXISTS (SELECT 'C' FROM UploadingReportTransaction FP (NOLOCK) WHERE FP.TransDate = S.ReturnDate)
	 AND S.Status = 0
	AND EXISTS (SELECT 'C' FROM #FilterRetailer FR (NOLOCK) WHERE S.RtrId = FR.RtrId)  
	--AND EXISTS (SELECT 'C' FROM #FilterProduct FPR (NOLOCK) WHERE SP.PrdId = FPR.PrdId)--- Add by Amuthakumar --COMMENTED BY MOHANA ILCRSTPAR2313
	GROUP BY S.ReturnID,S.ReturnCode,S.ReturnDate,S.RtrId,SP.PrdId,SP.PrdUnitMRP,SP.SplPriceid,SP.PriceId,SP.PrdBatid,SP.SlNo
		
	
	EXEC Proc_ReturnSalesProductTaxPercentage  @FromDate,@ToDate
	
	SELECT * INTO #ParleOutputTaxPercentage
	FROM ParleOutputTaxPercentage (NOLOCK)
	
		
	UPDATE #ChainSalesDetails SET SchemeDiscount = abs(SchemeDiscount/TotalPCS)
	--ADDED BY MOHANA ILCRSTPAR2313
	UPDATE A SET SchemeDiscount =  SchemeDiscount + (SchemeDiscount *(B.TaxPerc/100)) FROM #ChainSalesDetails a 
	INNER JOIN #ParleOutputTaxPercentage B ON A.TransType=B.TRANSID
	AND A.SalId = B.SALID AND A.PRDSLNO = B.PRDSLNO
	
	SELECT DISTINCT C.PrdBatid,C.Priceid,C.PrdbatDetailValue INTO #NormalPrice FROM #ChainSalesDetails A 
	INNER JOIN Productbatch B ON A.Prdbatid=B.PrdBatid
	INNER JOIN ProductBatchDetails C ON  B.PRDBATID = C.PRDBATID AND DEFAULTPRICE = 1
	and SLNO=3	
	
	--ADDED BY MOHANA
	
	--SELECT DISTINCT Priceid,PrdBatDetailValue SplSelRate  INTO #ExistingSpecialPrice FROM
	--(
	--SELECT D.PriceId,D.PrdBatDetailValue 
	--FROM #ChainSalesDetails M (NOLOCK),
	--ProductBatchDetails D (NOLOCK) 
	--WHERE M.PriceId = D.PriceId AND D.SLNo = 3
	--AND PriceCode LIKE '%-Spl Rate-%'   
	--UNION 
	--SELECT D.PriceId,D.PrdBatDetailValue 
	--FROM #ChainSalesDetails M (NOLOCK),
	--ProductBatchDetails D (NOLOCK) 
	--WHERE M.PriceId = D.PriceId AND D.SLNo = 3
	--AND PriceCode LIKE '%SplRate%'  
	--)A
	
	SELECT A.SalId ,A.PrdId,A.PrdBatid,A.TransType,A.PRDSLNO,SplRate INTO #Sales  FROM #ChainSalesDetails A  
	INNER JOIN SalesInvoiceProduct B ON A.Salid = B.Salid AND A.Prdid =B.PrdId AND A.PrdBatid = B.PrdBatId AND A.PRDSLNO = B.SlNo AND TransType = 1
	AND SplRate <>0
	SELECT  A.SalId ,A.PrdId,A.PrdBatid,A.TransType,A.PRDSLNO,SplRate INTO #Return FROM #ChainSalesDetails A  
	INNER JOIN ReturnHeader B ON A.SalId = B.ReturnID AND TransType = 2 
	INNER JOIN ReturnProduct C ON C.ReturnID = B.ReturnID 
	INNER JOIN SalesInvoiceProduct D ON B.Salid = D.Salid AND D.Prdid =C.PrdId AND D.PrdBatid = C.PrdBatId AND D.SLNO = C.ActSalRowId  AND SplRate <>0
	--CAHNGED BY MOHANA ILCRSTPAR2313
	--UPDATE R SET R.ChainLandRate = (S.SplSelRate + (S.SplSelRate *(P.TaxPerc/100))-R.SchemeDiscount) 
	--FROM #ChainSalesDetails R (NOLOCK),
	--#ExistingSpecialPrice S (NOLOCK),
	-- #ParleOutputTaxPercentage P 
	--WHERE R.PriceId = S.PriceId	and	  R.TransType=P.TRANSID
	--AND R.SalId = P.SALID AND R.PRDSLNO = P.PRDSLNO
	--Till Here ICRSTPAR7049
	UPDATE R SET R.ChainLandRate = (S.SplRate  + (S.SplRate *(P.TaxPerc/100))-R.SchemeDiscount) 
	FROM #ChainSalesDetails R (NOLOCK) INNER JOIN #Sales  S (NOLOCK) ON R.SalId =S.SalId AND R.Prdid = S.Prdid 
	AND R.Prdbatid = S.PrdBatid AND R.Prdslno =S.PRDSLNO AND R.TransType =S.TransType 
	INNER JOIN #ParleOutputTaxPercentage P ON R.Salid = P.Salid AND P.SalId = S.Salid AND P.PrdSlno = R.PRDSLNO AND S.PRDSLNO =P.PrdSlno 
	 AND  R.TransType=P.TRANSID AND R.PriceId <>0
	 UPDATE R SET R.ChainLandRate = (S.SplRate  + (S.SplRate *(P.TaxPerc/100))-R.SchemeDiscount) 
	FROM #ChainSalesDetails R (NOLOCK) INNER JOIN #Return S (NOLOCK) ON R.SalId =S.SalId AND R.Prdid = S.Prdid 
	AND R.Prdbatid = S.PrdBatid AND R.Prdslno =S.PRDSLNO AND R.TransType =S.TransType 
	INNER JOIN #ParleOutputTaxPercentage P ON R.Salid = P.Salid AND P.SalId = S.Salid AND P.PrdSlno = R.PRDSLNO AND S.PRDSLNO =P.PrdSlno 
	 AND  R.TransType=P.TRANSID AND R.PriceId <>0
	
	UPDATE A SET A.ChainLandRate = ((B.PrdbatDetailValue + (B.PrdbatDetailValue *(P.TaxPerc/100))) -A.SchemeDiscount) 
	FROM #ChainSalesDetails A INNER JOIN #NORMALPRICE B ON A.PRDBATID=B.PRDBATID
	INNER JOIN #ParleOutputTaxPercentage P ON  A.TransType=P.TRANSID
	AND A.SalId = P.SALID AND A.PRDSLNO = P.PRDSLNO
	WHERE A.ChainLandRate=0  
	----TILL HERE ILCRSTPAR2313
	--SELECT S.SalId,S.SalInvNo BillNo,S.SalInvDate BillDate,S.RtrId,R.RtrName,R.CmpRtrCode,P.PrdId,P.PrdName,P.PrdCCode,
	--PrdWgt PktWgt,MRP,TotalPCS QtyInPkt,PriceId,ChainLandRate,
	--CAST(0 AS NUMERIC(18,6)) Amount
	--INTO #Chain
	--FROM #ChainSalesDetails S (NOLOCK)
	--INNER JOIN Product P (NOLOCK) ON S.PrdId = P.PrdId
	--INNER JOIN Retailer R (NOLOCK) ON S.RtrId = R.RtrId

	--UAT CHANGES
	UPDATE #ChainSalesDetails SET LCTR = 0
	
	UPDATE A SET LCTR = PrdBatDetailValue*A.TotalPCS  FROM #ChainSalesDetails A 
	INNER JOIN ProductBatchDetails C(NOLOCK) ON  A.PRDBATID = C.PRDBATID AND DEFAULTPRICE = 1 and SLNO=5 


	--UPDATE A SET LCTR = ROUND(((A.TotalPCS *(C.PrdBatDetailValue))+(A.TotalPCS*C.PrdBatDetailValue)*(P.TaxPerc/100)),2)   
	--FROM #ChainSalesDetails A INNER JOIN Productbatch B ON A.Prdbatid=B.PrdBatid
	--INNER JOIN ProductBatchDetails C ON  B.PRDBATID = C.PRDBATID AND DEFAULTPRICE = 1 AND B.DefaultPriceId = C.Priceid and SLNO=3	
	--INNER JOIN #ParleOutputTaxPercentage P ON A.SalId = P.SalId AND A.TransType = P.TransId AND P.PrdSlno = A.PRDSLNO  AND LCTR =0
	
	-- TILL HERE 


	SELECT S.SalId,S.SalInvNo BillNo,CONVERT(VARCHAR(10),S.SalInvDate,121) as  BillDate,S.RtrId,R.RtrName,R.CmpRtrCode,P.PrdId,P.PrdName,P.PrdCCode,
	PrdWgt PktWgt,MRP,TotalPCS QtyInPkt,ChainLandRate, --ICRSTPAR7049
	CAST(0 AS NUMERIC(18,6)) Amount,RC1.CtgName Channel,LCTR 
	INTO #Chain
	FROM #ChainSalesDetails S (NOLOCK)
	INNER JOIN Product P (NOLOCK) ON S.PrdId = P.PrdId
	INNER JOIN Retailer R (NOLOCK) ON S.RtrId = R.RtrId
	INNER JOIN #FilterRetailer F ON S.Rtrid = F.Rtrid AND R.Rtrid = F.Rtrid
	INNER JOIN RetailerCategory RC ON RC.CtgMainId = F.CtgMainId 
	INNER JOIN RetailerCategory RC1 ON RC1.CtgMainId = RC.CTGLINKID 
	
	--- Added by Amuthakumar on 18-09-2018 CRCRSTPAR0021
	UPDATE C SET C.Amount = QtyInPkt * ChainLandRate
	FROM #Chain C (NOLOCK)
	--COMMENTED BY MOHANA ILCRSTPAR2313
	--SELECT S.SalId,S.RtrId,SP.PrdId,SUM(SPT.TaxAmount) TaxAmount
	--INTO #SalesInvoiceProductTax
	--FROM SalesInvoice S (NOLOCK)
	--INNER JOIN SalesInvoiceProduct SP (NOLOCK) ON S.SalId = SP.SalId
	--INNER JOIN SalesInvoiceProductTax SPT (NOLOCK) ON SPT.SalId = SP.SalId AND SPT.PrdSlNo = SP.SlNo 
	--WHERE SalInvDate BETWEEN @FromDate AND @ToDate AND S.DlvSts > 3 AND SPT.TaxAmount > 0
	--AND EXISTS (SELECT 'C' FROM #FilterRetailer FR (NOLOCK) WHERE S.RtrId = FR.RtrId)
	----AND EXISTS (SELECT 'C' FROM #FilterProduct FP (NOLOCK) WHERE SP.PrdId = FP.PrdId)
	--GROUP BY S.SalId,S.RtrId,SP.PrdId
	
	--UPDATE C SET C.Amount = C.Amount + ISNULL(SPT.TaxAmount,0)
	--FROM #Chain C (NOLOCK)
	--INNER JOIN #SalesInvoiceProductTax SPT ON SPT.SalId=C.SalId AND SPT.RtrId = C.SalId AND SPT.PrdId=C.PrdId
	--WHERE C.Amount > 0
	
	--Till here CRCRSTPAR0021
	--select BillNo,PrdId,QtyInPkt,ROUND(ChainLandRate,2,1),ROUND(Amount,2,1)  from #Chain order by  billno,prdid 
	--TILL HERE ILCRSTPAR2313
	INSERT INTO Cs2Cn_Prk_ChainWiseBillDetails (DistCode,BillNo,BillDate,CmpRtrCode,PrdCCode,PktWgt,PktMRP,QtyInPkt,
	ChainLandRate,Amount,Channel,LCTR,UploadFlag,SyncId,ServerDate)
	SELECT @DistCode,BillNo,BillDate,CmpRtrCode,PrdCCode,PktWgt,MRP,sum(QtyInPkt),sum(ChainLandRate),sum(Amount),
	Channel,LCTR,'N' UploadFlag,NULL,@ServerDate
	FROM #Chain (NOLOCK) 
	GROUP BY  BillNo,BillDate,CmpRtrCode,PrdCCode,PktWgt,MRP,Channel,LCTR
	
	--UPDATE S SET S.RptUpload = 1
	--FROM UploadingReportTransaction U (NOLOCK),
	--SalesInvoice S (NOLOCK) WHERE U.TransType = 1 AND U.TransId = S.SalId
	--UPDATE S SET S.RptUpload = 1
	--FROM UploadingReportTransaction U (NOLOCK),
	--ReturnHeader S (NOLOCK) WHERE U.TransType = 2 AND U.TransId = S.ReturnID
	
	RETURN			
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_Cs2Cn_ChainWiseBillDetails' AND TYPE='P')
DROP PROCEDURE Proc_Cs2Cn_ChainWiseBillDetails
GO
/*
Begin transaction
EXEC Proc_Cs2Cn_ChainWiseBillDetails 0,'2018-09-27'
select   * from Cs2Cn_Prk_ChainWiseBillDetails order by Billno
Rollback Transaction
*/
CREATE PROCEDURE Proc_Cs2Cn_ChainWiseBillDetails
(
	@Po_ErrNo INT OUTPUT,
	@ServerDate DATETIME
)
AS
/***************************************************************************************************
* PROCEDURE		: Proc_Cs2Cn_ChainWiseBillDetails 
* PURPOSE		: To Extract LMISDetails
* CREATED BY	: Aravindh Deva C
* CREATED DATE	: 03.06.2016
* NOTE			:
* MODIFIED
--------------------------------------------------------------------------------------------------
* DATE        AUTHOR      CR/BZ			USER STORY ID       DESCRIPTION   
 27-03-2018   S.MOhana     CR			CCRSTPAR0188		Included reports changes in upload
 27-09-2018   Amuthakumar  CR           CRCRSTPAR0031       Enable Configuration with Tax in Reports	
 13-12-2019	 MOHANA S	   SR			CRCRSTPAR0079	  INCLUDED GT CATEGORY
  08-05-2020	  Mohana S			CR			    PARCS202100012		Included Channel and LCTR															
***************************************************************************************************/
SET NOCOUNT ON
BEGIN
	--- Added by Amuthakumar on 27/09/2018 CRCRSTPAR0031
	IF EXISTS(SELECT 'X' FROM MANUALCONFIGURATION (NOLOCK)	WHERE  ModuleId='Report_withTax' AND ModuleName='Report with Tax' AND Status=1 and SeqNo=1)
	BEGIN
		EXEC Proc_Cs2Cn_ChainWiseBillDetails_withTax @Po_ErrNo,@ServerDate
		RETURN
	END
	-- Till Here CRCRSTPAR0031
	
	SET @Po_ErrNo=0
	
	CREATE TABLE #ChainSalesDetails
	(
		[TransType] INT NOT NULL,
		[SalId] [bigint] NOT NULL,
		[SalInvNo] [nvarchar](50) NOT NULL,
		[SalInvDate] [datetime] NOT NULL,
		[RtrId] [int] NOT NULL,
		[PrdId] [int] NOT NULL,
		[TotalPCS] [numeric](38, 0) NULL,
		[MRP] [numeric](18, 6) NOT NULL,
		[PriceId] [int] NOT NULL,
		[PrdBatid] [int] NOT NULL,
		[ChainLandRate] [numeric](18, 6) NULL,
		[SchemeDiscount] [numeric](18, 6) NULL,
		[PRDSLNO] INT NOT NULL,
		LCTR	[numeric](18, 6) NULL 
	)
	
	DECLARE @DistCode As NVARCHAR(50)
	DELETE FROM Cs2Cn_Prk_ChainWiseBillDetails WHERE UploadFlag = 'Y'
	
	IF NOT EXISTS (SELECT '' FROM UploadingReportTransaction (NOLOCK))
	BEGIN
		RETURN
	END
	SELECT @DistCode = DistributorCode FROM Distributor(NOLOCK)	
			
	--To Filter Retailers
	SELECT DISTINCT R.RtrId,RC.CtgCode,Ctgname,RC.CtgMainId
	INTO #FilterRetailer
	FROM Retailer R (NOLOCK),
	RetailerValueClassMap RVCM (NOLOCK),
	RetailerValueClass RVC (NOLOCK),
	RetailerCategory RC (NOLOCK),
	RetailerCategoryLevel RCL (NOLOCK)
	WHERE R.Rtrid = RVCM.RtrId AND RVCM.RtrValueClassId = RVC.RtrClassId
	AND  RVC.CtgMainId=RC.CtgMainId AND  RCL.CtgLevelId=RC.CtgLevelId
	--and  CtgLinkId IN (SELECT CtgMainId FROM RetailerCategory A(NOLOCK) where CtgCode NOT IN ('GT'))
	
	--To Filter Retailers
	INSERT INTO #ChainSalesDetails
	SELECT 1 AS TRANSID,S.SalId,S.SalInvNo,S.SalInvDate,S.RtrId,SP.PrdId,SUM(SP.BaseQty) TotalPCS,SP.PrdUnitMRP MRP,CASE SP.SplPriceid WHEN 0 THEN 0 ELSE  SP.Priceid END AS Priceid,SP.PrdBatid,
	CAST(0 AS NUMERIC(18,6)) ChainLandRate,SUM(SP.PrdSchDiscAmount) SchDisc,SP.SlNo,0
	FROM SalesInvoice S (NOLOCK)
	INNER JOIN SalesInvoiceProduct SP (NOLOCK) ON S.SalId = SP.SalId
	WHERE EXISTS (SELECT 'C' FROM UploadingReportTransaction FP (NOLOCK) WHERE FP.TransDate = S.SalInvDate)
	AND EXISTS (SELECT 'C' FROM #FilterRetailer FR (NOLOCK) WHERE S.RtrId = FR.RtrId)
	AND S.DlvSts > 3  
	GROUP BY S.SalId,S.SalInvNo,S.SalInvDate,S.RtrId,SP.PrdId,SP.PrdUnitMRP,SP.PriceId,SP.SplPriceid,SP.PrdBatid,SP.SlNo
	UNION ALL
	SELECT 2 AS TRANSID,S.ReturnID,S.ReturnCode,S.ReturnDate,S.RtrId,SP.PrdId,SUM(-1*SP.BaseQty) TotalPCS,SP.PrdUnitMRP MRP,CASE SP.SplPriceid WHEN 0 THEN 0 ELSE  SP.Priceid END AS Priceid,SP.PrdBatid,
	CAST(0 AS NUMERIC(18,6)) ChainLandRate,SUM(SP.PrdSchDisAmt) SchDisc,SP.Slno,0
	FROM ReturnHeader S (NOLOCK)
	INNER JOIN ReturnProduct SP (NOLOCK) ON S.ReturnID = SP.ReturnID AND SP.StockTypeId IN (SELECT StockTypeId FROM StockType WHERE SystemStockType = 1)
	WHERE  EXISTS (SELECT 'C' FROM UploadingReportTransaction FP (NOLOCK) WHERE FP.TransDate = S.ReturnDate)
	 AND S.Status = 0
	AND EXISTS (SELECT 'C' FROM #FilterRetailer FR (NOLOCK) WHERE S.RtrId = FR.RtrId)  
	GROUP BY S.ReturnID,S.ReturnCode,S.ReturnDate,S.RtrId,SP.PrdId,SP.PrdUnitMRP,SP.SplPriceid,SP.PriceId,SP.PrdBatid,SP.SlNo
	
	DECLARE @FromDate DATETIME
	DECLARE @ToDate DATETIME
	
	SELECT @FromDate = MIN(TransDate),@ToDate = MAX(TransDate) 
	FROM UploadingReportTransaction (NOLOCK)
	--- Till Here 	CRCRSTPAR0021
	EXEC Proc_ReturnSalesProductTaxPercentage  @FromDate,@ToDate
	
	SELECT * INTO #ParleOutputTaxPercentage
	FROM ParleOutputTaxPercentage (NOLOCK)
	
	UPDATE #ChainSalesDetails SET SchemeDiscount = abs(SchemeDiscount/TotalPCS)
	
	SELECT DISTINCT C.PrdBatid,C.Priceid,C.PrdbatDetailValue INTO #NormalPrice FROM #ChainSalesDetails A INNER JOIN Productbatch B ON A.Prdbatid=B.PrdBatid
	INNER JOIN ProductBatchDetails C ON  B.PRDBATID = C.PRDBATID AND DEFAULTPRICE = 1
	and SLNO=3	
	
	--ADDED BY MOHANA
	
	SELECT DISTINCT Priceid,PrdBatDetailValue SplSelRate  INTO #ExistingSpecialPrice FROM
	(
	SELECT D.PriceId,D.PrdBatDetailValue 
	FROM #ChainSalesDetails M (NOLOCK),
	ProductBatchDetails D (NOLOCK) 
	WHERE M.PriceId = D.PriceId AND D.SLNo = 3
	AND PriceCode LIKE '%-Spl Rate-%'   
	UNION 
	SELECT D.PriceId,D.PrdBatDetailValue 
	FROM #ChainSalesDetails M (NOLOCK),
	ProductBatchDetails D (NOLOCK) 
	WHERE M.PriceId = D.PriceId AND D.SLNo = 3
	AND PriceCode LIKE '%SplRate%'  
	)A
	
	
	UPDATE R SET R.ChainLandRate = S.SplSelRate-R.SchemeDiscount
	FROM #ChainSalesDetails R (NOLOCK),
	#ExistingSpecialPrice S (NOLOCK)
	WHERE R.PriceId = S.PriceId
	
	UPDATE A SET A.ChainLandRate = (B.PrdbatDetailValue-A.SchemeDiscount) FROM #ChainSalesDetails A INNER JOIN #NORMALPRICE B ON A.PRDBATID=B.PRDBATID WHERE A.ChainLandRate=0  
	
	--SELECT S.SalId,S.SalInvNo BillNo,S.SalInvDate BillDate,S.RtrId,R.RtrName,R.CmpRtrCode,P.PrdId,P.PrdName,P.PrdCCode,
	--PrdWgt PktWgt,MRP,TotalPCS QtyInPkt,PriceId,ChainLandRate,
	--CAST(0 AS NUMERIC(18,6)) Amount
	--INTO #Chain
	--FROM #ChainSalesDetails S (NOLOCK)
	--INNER JOIN Product P (NOLOCK) ON S.PrdId = P.PrdId
	--INNER JOIN Retailer R (NOLOCK) ON S.RtrId = R.RtrId
	
	UPDATE A SET LCTR = ROUND(((A.TotalPCS *(C.PrdBatDetailValue))+(A.TotalPCS*C.PrdBatDetailValue)*(P.TaxPerc/100)),2)   
	FROM #ChainSalesDetails A INNER JOIN Productbatch B ON A.Prdbatid=B.PrdBatid
	INNER JOIN ProductBatchDetails C ON  B.PRDBATID = C.PRDBATID AND DEFAULTPRICE = 1 AND B.DefaultPriceId = C.Priceid and SLNO=3	
	INNER JOIN #ParleOutputTaxPercentage P ON A.SalId = P.SalId AND A.TransType = P.TransId AND P.PrdSlno = A.PRDSLNO 
	 
	SELECT S.SalId,S.SalInvNo BillNo,CONVERT(VARCHAR(10),S.SalInvDate,121) as  BillDate,S.RtrId,R.RtrName,R.CmpRtrCode,P.PrdId,P.PrdName,P.PrdCCode,
	PrdWgt PktWgt,MRP,TotalPCS QtyInPkt,ChainLandRate, --ICRSTPAR7049
	CAST(0 AS NUMERIC(18,6)) Amount,RC1.CtgName Channel,LCTR 
	INTO #Chain
	FROM #ChainSalesDetails S (NOLOCK)
	INNER JOIN Product P (NOLOCK) ON S.PrdId = P.PrdId
	INNER JOIN Retailer R (NOLOCK) ON S.RtrId = R.RtrId
	INNER JOIN #FilterRetailer F ON S.Rtrid = F.Rtrid AND R.Rtrid = F.Rtrid
	INNER JOIN RetailerCategory RC ON RC.CtgMainId = F.CtgMainId 
	INNER JOIN RetailerCategory RC1 ON RC1.CtgMainId = RC.CTGLINKID 
	
	UPDATE C SET C.Amount = QtyInPkt * ChainLandRate
	FROM #Chain C (NOLOCK)
	
	--select BillNo,PrdId,QtyInPkt,ROUND(ChainLandRate,2,1),ROUND(Amount,2,1)  from #Chain order by  billno,prdid 
	
	INSERT INTO Cs2Cn_Prk_ChainWiseBillDetails (DistCode,BillNo,BillDate,CmpRtrCode,PrdCCode,PktWgt,PktMRP,QtyInPkt,
	ChainLandRate,Amount,Channel,LCTR,UploadFlag,SyncId,ServerDate)
	SELECT @DistCode,BillNo,BillDate,CmpRtrCode,PrdCCode,PktWgt,MRP,sum(QtyInPkt),sum(ROUND(ChainLandRate,2,1)),sum(ROUND(Amount,2,1)),
	Channel,LCTR,'N' UploadFlag,NULL,@ServerDate
	FROM #Chain (NOLOCK) 
	GROUP BY  BillNo,BillDate,CmpRtrCode,PrdCCode,PktWgt,MRP,Channel,LCTR
	
	--UPDATE S SET S.RptUpload = 1
	--FROM UploadingReportTransaction U (NOLOCK),
	--SalesInvoice S (NOLOCK) WHERE U.TransType = 1 AND U.TransId = S.SalId
	--UPDATE S SET S.RptUpload = 1
	--FROM UploadingReportTransaction U (NOLOCK),
	--ReturnHeader S (NOLOCK) WHERE U.TransType = 2 AND U.TransId = S.ReturnID
	
	RETURN			
END
GO
---One Duplicate seq Issue
DELETE FROM CustomUpDownload WHERE UpDownload ='Download' AND MODULE ='LCTRUpdation'
INSERT INTO CustomUpDownload([SlNo],[SeqNo],[Module],[Screen],[ExportFnName],[ImportProcName],[ParkTable],[ValidateProcName],[TranType],[UpDownload],[MandatoryFile]) 
VALUES (290,1,'LCTRUpdation','LCTRUpdation','','','Cn2Cs_Prk_LCTRUpdation','Proc_Cn2Cs_LCTRUpdation','Transaction','Download',1)
GO
DELETE FROM Tbl_DownloadIntegration WHERE ProcessName ='LCTRUpdation'
INSERT INTO Tbl_DownloadIntegration([SequenceNo],[ProcessName],[PrkTableName],[SPName],[TRowCount],[SelectCount],[CreatedDate]) 
VALUES (101,'LCTRUpdation','Cn2Cs_Prk_LCTRUpdation','',0,500,'2020-01-03')
GO
DELETE FROM Tbl_DownloadIntegration WHERE ProcessName ='DistributorStatus'
INSERT INTO Tbl_DownloadIntegration(SequenceNo,ProcessName,PrkTableName,SPName,TRowCount,SelectCount,CreatedDate)
SELECT 103,'DistributorStatus','Cn2Cs_Prk_DistributorStatus','',0,500,GETDATE() 
GO
DELETE FROM CustomUpDownload WHERE UpDownload ='Download' AND MODULE ='DistributorStatus'
INSERT INTO CustomUpDownload(SlNo,SeqNo,Module,Screen,ExportFnName,ImportProcName,ParkTable,ValidateProcName,TranType,UpDownload,MandatoryFile)
SELECT 292,1,'DistributorStatus','DistributorStatus','','','Cn2Cs_Prk_DistributorStatus','Proc_Cn2Cs_DistributorStatus','Transaction','Download',1
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Cn2Cs_Prk_DistributorStatus' AND TYPE='U')
BEGIN
	CREATE TABLE Cn2Cs_Prk_DistributorStatus
	(
		Distcode		VARCHAR(50) NULL,
		Status			VARCHAR(50) NULL,
		DownloadedDate	DATETIME NULL, --dist created date in CN
		DownloadFlag	VARCHAR(5) NULL,
		CreatedDate		DATETIME NULL
	)
END
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='DistributorStatus' AND TYPE='U')
BEGIN
	CREATE TABLE DistributorStatus
	(
		Distcode		VARCHAR(50) NULL,
		Status			VARCHAR(50) NULL,
		DownloadedDate	DATETIME NULL,
		CreatedDate		DATETIME NULL
	)
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_Cn2Cs_DistributorStatus' AND TYPE='P')
DROP PROCEDURE Proc_Cn2Cs_DistributorStatus
GO
/*
BEGIN TRAN
EXEC Proc_Cn2Cs_DistributorStatus  0
select *from Cn2Cs_Prk_DistributorStatus
select *from DistributorStatus
ROLLBACK TRAN
*/
CREATE PROCEDURE Proc_Cn2Cs_DistributorStatus
(
	@Po_ErrNo INT OUTPUT
)
AS
/*********************************
* PROCEDURE		: Proc_Cn2Cs_DistributorStatus
* PURPOSE		: Get Distributor Status From Console
* CREATED		: S.MOHANA
* CREATED DATE	: 05-05-2020
* PMS NO		: PARCS202100011
*********************************************************************************/
SET NOCOUNT ON
BEGIN
	 
	SET @Po_ErrNo=0  
	 
	DELETE FROM Cn2Cs_Prk_DistributorStatus WHERE DownLoadFlag='Y' 
	
	SELECT DistCode,Max(CreatedDate) MaxDate INTO #MaxDet FROM Cn2Cs_Prk_DistributorStatus WHERE DownloadFlag='D' 
	GROUP BY DistCode 
	
	SELECT A.* INTO #Cn2Cs_Prk_DistributorStatus FROM Cn2Cs_Prk_DistributorStatus A 
	INNER JOIN #MaxDet B ON   A.CreatedDate =B.MaxDate AND DownloadFlag='D'
	
	IF NOT EXISTS(SELECT 'X' FROM #Cn2Cs_Prk_DistributorStatus (NOLOCK) WHERE DownLoadFlag='D')
	BEGIN
		RETURN
	END  
	   
	INSERT INTO DistributorStatus(DistCode,Status,DownloadedDate,CreatedDate)	
	SELECT DISTINCT DistCode,Status,DownloadedDate,GETDATE() 
	FROM #Cn2Cs_Prk_DistributorStatus
	WHERE DownloadFlag ='D'  
	 
	UPDATE A SET DownloadFlag ='Y' FROM Cn2Cs_Prk_DistributorStatus A INNER JOIN DistributorStatus B ON A.DownloadedDate = B.DownloadedDate 
	AND A.Status = B.Status AND DownloadFlag ='D'
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Fn_GetDistributorData' AND TYPE='Fn')
DROP FUNCTION Fn_GetDistributorData
GO
--SELECT DBO.Fn_GetDistributorData (1)
CREATE FUNCTION Fn_GetDistributorData (@Type INT)
RETURNS VARCHAR(100)
AS
/*********************************
* PROCEDURE		: Fn_GetDistributorData
* PURPOSE		: Get Distributor Status From Console And allow ETL
* CREATED		: S.MOHANA
* CREATED DATE	: 06-05-2020
* PMS NO		: PARCS202100011
*********************************************************************************/
BEGIN
DECLARE @Msg VARCHAR(100)

DECLARE @DistributorStatus TABLE
(
	Status VARCHAR(50),
	DownloadedDate DATETIME
) 


INSERT INTO @DistributorStatus
SELECT Status,DownloadedDate FROM DistributorStatus WHERE CreatedDate IN 
(SELECT  MAX(CreatedDate )FROM DistributorStatus )

SET @Msg =''

	IF @Msg  = '' 
	BEGIN
		IF NOT EXISTS (SELECT * FROM @DistributorStatus)
		BEGIN
			SET @Msg = 'Distributor Status Not downloaded.' + CHAR(13) +  'Hence ETL import Cannot happen for Salesman, Route and Retailer.'
		END
	END

	IF @Msg  = '' 
	BEGIN
		IF EXISTS (SELECT * FROM @DistributorStatus WHERE UPPER(Status) = 'NEW')
		BEGIN
			IF @Type = 1 
			BEGIN
				IF EXISTS (SELECT * FROM Salesman)
				BEGIN
					SET @Msg = 'Salesman Already available.' + CHAR(13) +  'Hence ETL import Blocked for Salesman Creation'
				END
			END

			IF @Type = 2 
			BEGIN
				IF EXISTS (SELECT * FROM RouteMaster)
				BEGIN
					SET @Msg = 'Route Already available.' + CHAR(13) +  'Hence ETL import Blocked For Route Creation'
				END
			END

			IF @Type = 3 
			BEGIN
				IF EXISTS (SELECT * FROM Retailer)
				BEGIN
					SET @Msg = 'Retailer Already available.' + CHAR(13) +  'Hence ETL import Blocked For Retailer Creation'
				END
			END
			
		END
	END

	IF @Msg  = '' 
	BEGIN
		IF EXISTS (SELECT * FROM @DistributorStatus WHERE UPPER(Status) = 'EXISTING')
		BEGIN
			 SET @Msg = 'Salesman,Route & Retailer Not allowed to Create for existing Distributor'
				 
		END
	END

RETURN @Msg
END
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Cs2Cn_Prk_DNTSClaimBrandWise_TEMP' AND TYPE='U')
BEGIN
	SELECT * INTO Cs2Cn_Prk_DNTSClaimBrandWise_TEMP FROM Cs2Cn_Prk_DNTSClaimBrandWise WHERE UploadFlag='N'
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Cs2Cn_Prk_DNTSClaimBrandWise' AND TYPE='U')
DROP TABLE Cs2Cn_Prk_DNTSClaimBrandWise
GO
CREATE TABLE Cs2Cn_Prk_DNTSClaimBrandWise
(
	Slno		  NUMERIC(38, 0) IDENTITY(1,1) NOT NULL,
	DistCode	  NVARCHAR(100) NULL,
	DNDocRefNO	  NVARCHAR(50) NULL,
	ClmDate		  DATETIME NULL,
	FromDate	  DATETIME NULL,
	ToDate		  DATETIME NULL,
	ClmType		  NVARCHAR(100) NULL,
	CirSchCode	  NVARCHAR(100) NULL,
	BrandCode	  NVARCHAR(100) NULL,
	CostCentreCde NVARCHAR(100) NULL,
	CirNo		  NVARCHAR(100) NULL,
	CirDate		  DATETIME NULL,
	LaibPer		  NUMERIC(38, 2) NULL,
	SecSales	  NUMERIC(38, 2) NULL,
	ClmAmt		  NUMERIC(38, 2) NULL,
	UploadFlag	  NVARCHAR(10) NULL,
	Syncid		  NUMERIC(38, 0) NULL,
	ServerDate	  DATETIME NULL,
	ChannelCode	  NVARCHAR(100) NULL,
	GrpCode       NVARCHAR(100) NULL,
	PriceSlotCode NVARCHAR(100) NULL,
	FlavourCode	  NVARCHAR(100) NULL
) 
GO
IF EXISTS (SELECT * FROM Cs2Cn_Prk_DNTSClaimBrandWise_TEMP) 
BEGIN
	INSERT INTO Cs2Cn_Prk_DNTSClaimBrandWise(DistCode,DNDocRefNO,ClmDate,FromDate,ToDate,ClmType,CirSchCode,BrandCode,CostCentreCde,CirNo,CirDate,LaibPer,SecSales,
	ClmAmt,UploadFlag,Syncid,ServerDate)
	SELECT DistCode,DNDocRefNO,ClmDate,FromDate,ToDate,ClmType,CirSchCode,BrandCode,CostCentreCde,CirNo,CirDate,LaibPer,SecSales,
	ClmAmt,UploadFlag,Syncid,ServerDate FROM Cs2Cn_Prk_DNTSClaimBrandWise_TEMP

	DELETE FROM Cs2Cn_Prk_DNTSClaimBrandWise_TEMP
END
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Cn2Cs_Prk_InstitutionsTargetSetting_TEMP' AND TYPE='U')
BEGIN
	SELECT * INTO Cn2Cs_Prk_InstitutionsTargetSetting_TEMP FROM Cn2Cs_Prk_InstitutionsTargetSetting WHERE DOWNLOADFLAG='D'
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Cn2Cs_Prk_InstitutionsTargetSetting' AND TYPE='U')
DROP TABLE Cn2Cs_Prk_InstitutionsTargetSetting
GO
CREATE TABLE Cn2Cs_Prk_InstitutionsTargetSetting
(
	[DistCode] [varchar](50) NULL,
	[ProgramCode] [varchar](50) NULL,
	[FromProgramYear] [int] NULL,
	[ToProgramYear] [int] NULL,
	[RtrGroup] [varchar](100) NULL,
	[CmpRtrCode] [varchar](50) NULL,
	[RtrUniqueCode] [varchar](50) NULL,
	[AVGSales] [numeric](18, 6) NULL,
	[TargetAmount] [numeric](18, 6) NULL,
	[EffFromMonthId] [int] NULL,
	[EffToMonthId] [int] NULL,
	[CreatedDate] [datetime] NULL,
	[DownloadFlag] [varchar](2) NULL,
	[ChannelCode]  [Varchar] (50) NULL
)
GO
IF EXISTS (SELECT * FROM Cn2Cs_Prk_InstitutionsTargetSetting_TEMP) 
BEGIN
	INSERT INTO Cn2Cs_Prk_InstitutionsTargetSetting(DistCode,ProgramCode,FromProgramYear,ToProgramYear,RtrGroup,CmpRtrCode,RtrUniqueCode,
	AVGSales,TargetAmount,EffFromMonthId,EffToMonthId,CreatedDate,DownloadFlag,ChannelCode)
	SELECT DistCode,ProgramCode,FromProgramYear,ToProgramYear,RtrGroup,CmpRtrCode,RtrUniqueCode,AVGSales,TargetAmount,EffFromMonthId,
	EffToMonthId,CreatedDate,DownloadFlag,C.CtgCode FROM Cn2Cs_Prk_InstitutionsTargetSetting_Temp A 
	INNER JOIN RetailerCategory B ON A.RtrGroup = B.CtgCode 
	INNER JOIN RetailerCategory C ON B.CtgLinkId = C.CtgMainId 

	DELETE FROM Cn2Cs_Prk_InstitutionsTargetSetting_TEMP
END
GO
IF NOT EXISTS (SELECT * FROM SYS.COLUMNS WHERE  Name ='ChnId' AND Object_id = Object_ID('InsTargetHd'))
BEGIN
	ALTER TABLE InsTargetHd ADD ChnId INT DEFAULT (0)
END
GO
IF EXISTS (SELECT * FROM InsTargetHd WHERE ISNULL(Chnid,0)=0)
BEGIN
	UPDATE A SET A.ChnId = D.CtgMainId FROM InsTargetHd A INNER JOIN InsTargetDetails B ON A.InsId = B.InsId 
	INNER JOIN RetailerCategory C ON B.RtrCtgMainId  = C.CtgMainId 
	INNER JOIN RetailerCategory D ON D.CtgMainId = C.CtgLinkId  WHERE ISNULL(Chnid,0)=0
END
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='InsTargetDetails_Backup' AND TYPE='U')
BEGIN
SELECT * INTO InsTargetDetails_Backup FROM InsTargetDetails WHERE 1=2
END
GO
UPDATE SALESMAN SET UPLOAD ='N'
UPDATE ROUTEMASTER SET UPLOAD ='N'
GO
--Till Mohana
--Added by Murugan.R
IF NOT EXISTS (SELECT * FROM ScreenDefaultValues where Transid=79 and CtrlId=56 and SeqId=3 and CtrlDesc='Consumer')
BEGIN
DELETE FROM ScreenDefaultValues where Transid=79 and CtrlId=56 and SeqId=3
INSERT INTO ScreenDefaultValues(TransId,CtrlId,CtrlValue,CtrlDesc,SeqId,LngId,Availability,
LastModBy,LastModDate,AuthId,AuthDate,DefaultCtrlDesc)
SELECT 79,56,3,'Consumer',3,1,1,1,GETDATE(),1,GETDATE(),'Consumer'
END
GO
IF EXISTS(SELECT 'X' FROM SYSOBJECTS WHERE XTYPE='U' AND NAME='RptBillWiseSalesReportParle_Excel')
DROP TABLE RptBillWiseSalesReportParle_Excel
GO
CREATE TABLE [RptBillWiseSalesReportParle_Excel](
	[Bill Number] [nvarchar](50) NULL,
	[Order Ref No] Varchar(50),
	[Bill Type] [nvarchar](25) NULL,
	[Bill Mode] [nvarchar](25) NULL,
	[Bill Date] [datetime] NULL,	
	[Retailer Type] Varchar(50),
	[Retailer Code] [nvarchar](50) NULL,
	[Retailer Name] [nvarchar](150) NULL,
	[Gross Amount] [numeric](38, 6) NULL,
	[Scheme Disc] [numeric](38, 6) NULL,
	[Sales Return] [numeric](38, 6) NULL,
	[Replacement] [numeric](38, 6) NULL,
	[Discount] [numeric](38, 6) NULL,
	[Tax Amount] [numeric](38, 6) NULL,
	[WindowDisplayAmount] [numeric](38, 6) NULL,
	[Credit Adjustmant] [numeric](38, 6) NULL,
	[Debit Adjustment] [numeric](38, 6) NULL,
	[Net Amount] [numeric](38, 6) NULL,
	[DlvStatus] [int] NULL
)
GO
DELETE FROM RptExcelHeaders WHERE RptId=285
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (285,1,'Bill Number','Bill Number',1,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (285,2,'Order Ref No','Order Ref No',1,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (285,3,'Bill Type','Bill Type',0,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (285,4,'Bill Mode','Bill Mode',0,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (285,5,'Bill Date','Bill Date',1,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (285,6,'Retailer Type','Retailer Type',1,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (285,7,'Retailer Code','Retailer Code',0,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (285,8,'Retailer Name','Retailer Name',1,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (285,9,'Gross Amount','Gross Amount',1,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (285,10,'Scheme Disc','Scheme Disc',1,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (285,11,'Sales Return','Sales Return',1,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (285,12,'Replacement','Replacement',1,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (285,13,'Discount','Discount',1,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (285,14,'Tax Amount','Tax Amount',1,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (285,15,'Credit Adjustment','Credit Adjustment',1,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (285,16,'Debit Adjustment','Debit Adjustment',1,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (285,17,'WindowDisplay Amount','WindowDisplay Amount',0,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (285,18,'Net Amount','Net Amount',1,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (285,19,'DlvStatus','DlvStatus',0,1)
GO
IF EXISTS(SELECT 'X' FROM SYSOBJECTS WHERE NAME='RptBillWisePrdWise' AND XTYPE='U')
BEGIN
	IF NOT EXISTS(SELECT Name FROM SYSCOLUMNS WHERE OBJECT_NAME(ID)='RptBillWisePrdWise' AND Name='SalInvRef')
	BEGIN
		ALTER TABLE RptBillWisePrdWise ADD SalInvRef Varchar(50)
	END
	IF NOT EXISTS(SELECT Name FROM SYSCOLUMNS WHERE OBJECT_NAME(ID)='RptBillWisePrdWise' AND Name='PrdDBDiscAmount')
	BEGIN
		ALTER TABLE RptBillWisePrdWise ADD PrdDBDiscAmount Numeric(18,4)
	END
END
GO
IF EXISTS(SELECT 'X' FROM Sysobjects where XTYPE='U' AND NAME='RptWithOutTaxBreakup_Excel')
DROP TABLE RptWithOutTaxBreakup_Excel
GO
CREATE TABLE RptWithOutTaxBreakup_Excel
(
[Bill Date]	datetime,   	     
[Bill No]	Varchar(50),
[Order Ref No] Varchar(50),  
[Retailer Type] Varchar(50), 
[Route Name] Varchar(100), 	     
[Retailer Code]	Varchar(50),    	     
[Retailer Name]	Varchar(200),    	     	     
[Product Code]	Varchar(50),    	     	     
[Product Name]	Varchar(200),    	     	     
[Batch Code]	Varchar(75),    	     	     
[Selling Rate]	Numeric(36,4),  
[Sales Qty]	int,
[Offer Qty]	int,
[Total Qty]	int, 
[Gross Amt] Numeric(36,4), 
[Scheme Amt]Numeric(36,4),   
[SplDiscount]Numeric(36,4),  
[Cash Discount]	Numeric(36,4),
[DB Discount] Numeric(36,4),    
[Total Discount]Numeric(36,4), 
TaxPerc NVARCHAR(200),
TaxAmount Numeric(18,4),   
[Total Tax Amount]Numeric(36,4),   
[NetAmount]Numeric(36,4)
)
GO
DELETE FROM RptExcelHeaders WHERE RptId=183
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (183,1,'Bill Date','Bill Date',1,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (183,2,'Bill No','Bill No',1,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (183,3,'Order Ref No','Order Ref No',1,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (183,4,'Retailer Type','Retailer Type',1,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (183,5,'Route Name','Route Name',1,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (183,6,'Retailer Code','Retailer Code',1,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (183,7,'Retailer Name','Retailer Name',1,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (183,8,'Product Code','Product Code',1,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (183,9,'Product Name','Product Name',1,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (183,10,'Batch Code','Batch Code',1,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (183,11,'Selling Rate','Selling Rate',0,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (183,12,'Sales Qty','Sales Qty',0,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (183,13,'Offer Qty','Offer Qty',1,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (183,14,'Total Qty','Total Qty',1,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (183,15,'Gross Amt','Gross Amt',1,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (183,16,'Scheme Amt','Scheme Amt',1,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (183,17,'SplDiscount','SplDiscount',1,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (183,18,'Cash Discount','Cash Discount',1,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (183,19,'DB Discount','DB Discount',1,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (183,20,'Total Discount','Total Discount',1,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (183,21,'TaxPerc','TaxPerc',0,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (183,22,'TaxAmount','TaxAmount',0,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (183,23,'Total Tax Amount','Total Tax Amount',1,1)
INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (183,24,'NetAmount','NetAmount',1,1)
GO
IF EXISTS(SELECT 'X' FROM SYSOBJECTS WHERE XTYPE='P' AND NAME='Proc_ReturnSchemeApplicable')
DROP PROCEDURE Proc_ReturnSchemeApplicable
GO
--EXEC Proc_ReturnSchemeApplicable 6,58,1129,1,2,3114,0  
CREATE PROCEDURE [Proc_ReturnSchemeApplicable]  
(  
 @Pi_SrpId  INT,  
 @Pi_RmId  INT,  
 @Pi_RtrId  INT,  
 @Pi_BillType  INT,  
 @Pi_BillMode  INT,  
 @Pi_SchId    INT,  
 @Po_Applicable   INT OUTPUT  
)  
AS  
/*********************************  
* PROCEDURE  : Proc_ReturnSchemeApplicable  
* PURPOSE  : To Return whether the Scheme is applicable for the Retailer or Not  
* CREATED  : Thrinath  
* CREATED DATE : 12/04/2007  
* NOTE   : General SP for Returning the whether the Scheme is applicable for the Retailer or Not  
* MODIFIED  
* DATE      AUTHOR     DESCRIPTION  
------------------------------------------------  
* {date} {developer}  {brief modification description}  
* Include the Cluster Attribute checking based on Approval Required Status By Boopathy on 16-11-2011  
* 18-12-2013   PRAVEENRAJ B ADDED CPB FOR AMUL CR:CRCRSTAML0008  
* 12-02-2020 Mohana S   ILCRSTPAR7825   BZ  IF Retailer Not Available in SchemertrlevelValidation, the Scheme will not apply
* DATE			AUTHOR		CR\BUG			USER STORY ID			DESCRIPTION
* 07/05/2020	Murugan.R	CR				PARCS202100016			If Retailer Type Consumer Scheme should not applied
* 22-07-2020	MOHANA S   PARCS202100045  SR	SCHEME WILL NOT APPLY FOR UNAPPROVED RETAILERS.

*********************************/  
SET NOCOUNT ON  
BEGIN  
 DECLARE @RetDet TABLE  
 (  
  RtrId     INT,  
  RtrValueClassId  INT,  
  CtgMainId   INT,  
  CtgLinkId           INT,  
  CtgLevelId   INT,  
  RtrPotentialClassId INT,  
  RtrKeyAcc   INT,  
  VillageId   INT,  
  CtgLinkCode         NVARCHAR(100)  
 )  
 DECLARE @RMDet TABLE  
 (  
  RMId    INT,  
  RMVanRoute   INT,  
  RMSRouteType  INT,  
  RMLocalUpcountry INT  
 )  
 DECLARE @VillageDet TABLE  
 (  
  VillageId   INT,  
  RoadCondition  INT,  
  Incomelevel   INT,  
  Acceptability  INT,  
  Awareness   INT  
 )  
 DECLARE @SchemeRetAttr TABLE  
 (  
  AttrType   INT,  
  AttrId    INT  
 )  
 DECLARE @AttrType     INT  
 DECLARE @AttrId     INT  
 DECLARE @Applicable_SM   INT  
 DECLARE @Applicable_RM   INT  
 DECLARE @Applicable_Vill  INT  
 DECLARE @Applicable_RtrLvl  INT  
 DECLARE @Applicable_RtrVal  INT  
 DECLARE @Applicable_VC   INT  
 DECLARE @Applicable_PC   INT  
 DECLARE @Applicable_Rtr   INT  
 DECLARE @Applicable_BT   INT  
 DECLARE @Applicable_BM   INT  
 DECLARE @Applicable_RT   INT  
 DECLARE @Applicable_CT   INT  
 DECLARE @Applicable_VRC   INT  
 DECLARE @Applicable_VI   INT  
 DECLARE @Applicable_VA   INT  
 DECLARE @Applicable_VAw   INT  
 DECLARE @Applicable_RouteType INT  
 DECLARE @Applicable_LocUpC  INT  
 DECLARE @Applicable_VanRoute INT  
 DECLARE @Applicable_Cluster  INT  
 SET @Applicable_SM=0  
 SET @Applicable_RM=0  
 SET @Applicable_Vill=0  
 SET @Applicable_RtrLvl=1  
 SET @Applicable_RtrVal=0  
 SET @Applicable_VC=0  
 SET @Applicable_PC=0  
 SET @Applicable_Rtr=0  
 SET @Applicable_BT=0  
 SET @Applicable_BM=0  
 SET @Applicable_RT=0  
 SET @Applicable_CT=0  
 SET @Applicable_VRC=0  
 SET @Applicable_VI=0  
 SET @Applicable_VA=0  
 SET @Applicable_VAw=0  
 SET @Applicable_RouteType=0  
 SET @Applicable_LocUpC=0  
 SET @Applicable_VanRoute=0   
 SET @Applicable_Cluster=0  
 SET @Po_Applicable = 1  
 --Added by Sathishkumar Veeramani 2014/03/31  
 IF EXISTS (SELECT * FROM Configuration WITH(NOLOCK) WHERE ModuleId = 'BILL6' AND Status = 1)  
 BEGIN  
  --Added by Praveenraj B ON 18-12-2013 For CRCRSTAML0008  
  IF EXISTS(SELECT Schid FROM SchemeMaster where CPB=1 and Schid=@Pi_SchId)  
  BEGIN  
   IF NOT EXISTS(SELECT SyncStatus FROM SYNCSTATUS where SyncStatus=1 and CONVERT(VARCHAR(10),dwnendtime,121)=CONVERT(VARCHAR(10),GETDATE(),121))  
    BEGIN  
    SET @Po_Applicable = 0  
    RETURN  
    END   
  END  
 END  
 --Till Here  
 
	----For Retailer Type Consumer Scheme should not get apply
	IF EXISTS (SELECT * FROM Retailer(Nolock) where rtrid=@Pi_RtrId and Rtrtype=3)
	BEGIN
		SET @Po_Applicable=0
		RETURN
	END
	---Till Here
	
	-----PARCS202100045
	IF EXISTS (SELECT * FROM SchemeMaster (NOLOCK) WHERE SchId=@Pi_SchId)  
	BEGIN  
		IF EXISTS (SELECT * FROM Retailer (NOLOCK) WHERE Approved=0 AND RtrId=@Pi_RtrId)  
		BEGIN  
			SET @Po_Applicable=0  
			RETURN  
		END  
	END 
 
 --End here  
 INSERT INTO @RetDet(RtrId,RtrValueClassId,CtgMainId,CtgLinkId,CtgLevelId,RtrPotentialClassId,RtrKeyAcc,VillageId,CtgLinkCode)  
 SELECT R.RtrId,RVCM.RtrValueClassId,RC.CtgMainId,RC.CtgLinkId,RCL.CtgLevelId,  
  ISNULL(RPCM.RtrPotentialClassId,0) AS RtrPotentialClassId,R.RtrKeyAcc,R.VillageId,RC.CtgLinkCode  
  FROM Retailer  R INNER JOIN RetailerValueClassmap RVCM ON R.RtrId = RVCM.RtrId and R.RtrId = @Pi_RtrId  
  INNER JOIN RetailerValueClass RVC ON RVCM.RtrValueClassId = RVC.RtrClassId  
  INNER JOIN RetailerCategory RC ON RC.CtgMainId = RVC.CtgMainId  
  INNER JOIN RetailerCategoryLevel RCL ON RC.CtgLevelId = RCL.CtgLevelId  
  LEFT OUTER JOIN RetailerPotentialClassmap RPCM on R.RtrId = RPCM.RtrId  
  LEFT OUTER JOIN RetailerPotentialClass [RPC] on RPCM.RtrPotentialClassId = [RPC].RtrClassId  
 INSERT INTO @RMDet(RMId,RMVanRoute,RMSRouteType,RMLocalUpcountry)  
 SELECT  RMId,RMVanRoute,RMSRouteType,RMLocalUpcountry  
  FROM RouteMaster RM WHERE RM.RMId = @Pi_RmId  
 INSERT INTO @VillageDet(VillageId,RoadCondition,Incomelevel,Acceptability,Awareness)  
 SELECT  A.VillageId,ISNULL(RoadCondition,0),ISNULL(Incomelevel,0),ISNULL(Acceptability,0),  
  ISNULL(Awareness,0) FROM @RetDet A  LEFT OUTER JOIN Routevillage RV  
  ON A.VillageId = RV.VillageId  
 INSERT INTO @SchemeRetAttr (AttrType,AttrId)  
 SELECT AttrType,AttrId FROM SchemeRetAttr  WHERE SchId = @Pi_SchId AND AttrId > 0 ORDER BY AttrType  
 IF NOT EXISTS(SELECT AttrId FROM SchemeRetAttr WHERE SchId = @Pi_SchId AND AttrType=3)  
 BEGIN  
  SET @Applicable_Vill=1  
 END  
 IF NOT EXISTS(SELECT AttrId FROM SchemeRetAttr WHERE SchId = @Pi_SchId AND AttrType=7)  
 BEGIN  
  SET @Applicable_PC=1  
 END  
 DECLARE  CurSch1 CURSOR FOR  
 SELECT DISTINCT AttrType FROM SchemeRetAttr WHERE AttrId=0 AND SchId = @Pi_SchId ORDER BY AttrType  
  OPEN CurSch1  
  FETCH NEXT FROM CurSch1 INTO @AttrType  
 WHILE @@FETCH_STATUS = 0  
 BEGIN  
  IF @AttrType = 1  
   SET @Applicable_SM=1  
  ELSE IF @AttrType =2  
   SET @Applicable_RM=1  
  ELSE IF @AttrType =3  
   SET @Applicable_Vill=1  
  ELSE IF @AttrType =4  
   SET @Applicable_RtrLvl=1  
  ELSE IF @AttrType =5  
   SET @Applicable_RtrVal=1  
  ELSE IF @AttrType =6  
   SET @Applicable_VC=1  
  ELSE IF @AttrType =7  
   SET @Applicable_PC=1  
  ELSE IF @AttrType =8  
   SET @Applicable_Rtr=1  
  ELSE IF @AttrType =10  
   SET @Applicable_BT=1  
  ELSE IF @AttrType =11  
   SET @Applicable_BM=1  
  ELSE IF @AttrType =12  
   SET @Applicable_RT=1  
  ELSE IF @AttrType =13  
   SET @Applicable_CT=1  
  ELSE IF @AttrType =14  
   SET @Applicable_VRC=1  
  ELSE IF @AttrType =15  
   SET @Applicable_VI=1  
  ELSE IF @AttrType =16  
   SET @Applicable_VA=1  
  ELSE IF @AttrType =17  
   SET @Applicable_VAw=1  
  ELSE IF @AttrType =18  
   SET @Applicable_RouteType=1  
  ELSE IF @AttrType =19  
   SET @Applicable_LocUpC=1  
  ELSE IF @AttrType =20  
   SET @Applicable_VanRoute=1    
  ELSE IF @AttrType =21  
   SET @Applicable_Cluster=1  
  FETCH NEXT FROM CurSch1 INTO @AttrType  
 END  
 CLOSE CurSch1  
 DEALLOCATE CurSch1  
 DECLARE  CurSch CURSOR FOR  
 SELECT AttrType,AttrId FROM @SchemeRetAttr ORDER BY AttrType  
  OPEN CurSch  
  FETCH NEXT FROM CurSch INTO @AttrType,@AttrId  
 WHILE @@FETCH_STATUS = 0  
 BEGIN  
  IF @AttrType = 1 AND @Applicable_SM=0  --SalesMan  
  BEGIN  
   IF EXISTS (SELECT AttrId FROM @SchemeRetAttr WHERE AttrType = @AttrType AND  
      AttrId = @Pi_SrpId)  
    SET @Applicable_SM = 1  
  END  
  IF @AttrType = 2 AND @Applicable_RM=0  --Route  
  BEGIN  
   IF EXISTS (SELECT AttrId FROM @SchemeRetAttr WHERE AttrType = @AttrType AND  
      AttrId = @Pi_RmId)  
    SET @Applicable_RM = 1  
  END  
  IF @AttrType = 3 AND @Applicable_Vill=0  --Village  
  BEGIN  
   IF EXISTS (SELECT A.AttrId FROM @SchemeRetAttr A INNER JOIN @RetDet B  
      ON A.AttrId = B.VillageId AND A.AttrType = @AttrType)  
    SET @Applicable_Vill = 1  
  END  
--  IF @AttrType = 4 AND @Applicable_RtrLvl=0  --Retailer Category Level  
--  BEGIN  
--   IF EXISTS (SELECT A.AttrId FROM @SchemeRetAttr A INNER JOIN @RetDet B  
--      ON A.AttrId = B.CtgLevelId  AND A.AttrType = @AttrType)  
--    SET @Applicable_RtrLvl = 1  
--  END  
   DECLARE @AVI_CTG INT  
   IF @AttrType = 5 AND @Applicable_RtrVal=0  --Retailer Category Level Value  
   BEGIN  
    IF EXISTS (SELECT * FROM COMPANY (NOLOCK) WHERE CMPCODE='AMUL' AND DEFAULTCOMPANY=1)  
    BEGIN  
     SET  @AVI_CTG=0  
     SELECT @AVI_CTG=DBO.FN_RETURNS_SCHEME_APPLICABLE_RETAILER (@Pi_SchId,@PI_RTRID)  
     IF @AVI_CTG=0   
     BEGIN  
      SET @Applicable_RtrVal=0   
     END  
     ELSE  
     BEGIN   
      SET @Applicable_RtrVal=1  
     END  
    END  
    ELSE  
     IF (SELECT COUNT(A.AttrId) FROM @SchemeRetAttr A WHERE A.AttrType = 4)=1  
     BEGIN  
      IF EXISTS(SELECT A.AttrId FROM @SchemeRetAttr A INNER JOIN RetailerCategoryLevel B  
         ON A.AttrId = B.CtgLevelId  AND A.AttrType = 4 AND LevelName ='Level1')  
      BEGIN  
       IF EXISTS (SELECT A.AttrId FROM @SchemeRetAttr A INNER JOIN @RetDet B  
        ON A.AttrId = B.CtgLinkId AND A.AttrType = @AttrType)  
         SET @Applicable_RtrVal = 1     
      END  
      ELSE  
      BEGIN  
       IF EXISTS (SELECT A.AttrId FROM @SchemeRetAttr A INNER JOIN @RetDet B  
          ON A.AttrId = B.CtgMainId AND A.AttrType = @AttrType)  
       BEGIN  
        SET @Applicable_RtrVal = 1  
       END  
      END  
     END  
     ELSE  
     BEGIN  
      IF EXISTS (SELECT A.AttrId FROM @SchemeRetAttr A INNER JOIN @RetDet B  
          ON A.AttrId = B.CtgMainId AND A.AttrType = @AttrType)  
      BEGIN  
       SET @Applicable_RtrVal = 1  
      END  
     END  
   END  
  IF @AttrType = 6 AND @Applicable_VC=0  --Retailer Class Value  
  BEGIN  
   IF EXISTS (SELECT A.AttrId FROM @SchemeRetAttr A INNER JOIN @RetDet B  
      ON A.AttrId = B.RtrValueClassId AND A.AttrType = @AttrType)  
    SET @Applicable_VC = 1  
  END  
--  IF @AttrType = 7 AND @Applicable_PC=0  --Retailer Potential Class  
--  BEGIN  
--   IF EXISTS (SELECT A.AttrId FROM @SchemeRetAttr A LEFT JOIN @RetDet B  
--      ON A.AttrId = B.RtrPotentialClassId AND A.AttrType = @AttrType)  
--    SET @Applicable_PC = 1  
--  END  
  IF @AttrType = 8 AND @Applicable_Rtr=0  --Retailer  
  BEGIN  
   IF EXISTS (SELECT AttrId FROM @SchemeRetAttr WHERE AttrType = @AttrType AND  
      AttrId = @Pi_RtrId)  
   BEGIN  
    SELECT AttrId FROM @SchemeRetAttr WHERE AttrType = @AttrType AND  
      AttrId = @Pi_RtrId  
    SET @Applicable_Rtr = 1  
   END  
  END  
  IF @AttrType = 10 AND @Applicable_BT=0  --Bill Type  
  BEGIN  
   IF EXISTS (SELECT AttrId FROM @SchemeRetAttr WHERE AttrType = @AttrType AND  
      AttrId = @Pi_BillType)  
    SET @Applicable_BT = 1  
  END  
  IF @AttrType = 11 AND @Applicable_BM=0  --Bill Mode  
  BEGIN  
   IF EXISTS (SELECT AttrId FROM @SchemeRetAttr WHERE AttrType = @AttrType AND  
      AttrId = @Pi_BillMode)  
    SET @Applicable_BM = 1  
  END  
  IF @AttrType = 12 AND @Applicable_RT=0  --Retailer Type  
  BEGIN  
   IF EXISTS (SELECT A.AttrId FROM @SchemeRetAttr A INNER JOIN @RetDet B  
      ON B.RtrKeyAcc =  CASE WHEN A.AttrId=1 THEN 2 WHEN A.AttrId=2 THEN 0 ELSE B.RtrKeyAcc END  AND A.AttrType = @AttrType)  
    SET @Applicable_RT = 1  
  END  
  IF @AttrType = 13 AND @Applicable_CT=0  --Class Type  
  BEGIN  
   IF EXISTS (SELECT B.RtrPotentialClassId FROM @RetDet B WHERE B.RtrPotentialClassId > 0 )  
    SET @Applicable_CT = 1  
  END  
  IF @AttrType = 14 AND @Applicable_VRC=0  --Village Road Condition  
  BEGIN  
   IF EXISTS (SELECT A.AttrId FROM @SchemeRetAttr A INNER JOIN @VillageDet B  
      ON A.AttrId = B.RoadCondition AND A.AttrType = @AttrType)  
    SET @Applicable_VRC = 1  
  END  
  IF @AttrType = 15 AND @Applicable_VI=0  --Village Income Level  
  BEGIN  
   IF EXISTS (SELECT A.AttrId FROM @SchemeRetAttr A INNER JOIN @VillageDet B  
      ON A.AttrId = B.Incomelevel AND A.AttrType = @AttrType)  
    SET @Applicable_VI = 1  
  END  
  IF @AttrType = 16 AND @Applicable_VA=0  --Village Acceptability  
  BEGIN  
   IF EXISTS (SELECT A.AttrId FROM @SchemeRetAttr A INNER JOIN @VillageDet B  
      ON A.AttrId = B.Acceptability AND A.AttrType = @AttrType)  
    SET @Applicable_VA = 1  
  END  
  IF @AttrType = 17 AND @Applicable_VAw=0  --Village Awareness  
  BEGIN  
   IF EXISTS (SELECT A.AttrId FROM @SchemeRetAttr A INNER JOIN @VillageDet B  
      ON A.AttrId = B.Awareness AND A.AttrType = @AttrType)  
    SET @Applicable_VAw = 1  
  END  
  IF @AttrType = 18 AND @Applicable_RouteType=0  --Route Type  
  BEGIN  
   IF EXISTS (SELECT A.AttrId FROM @SchemeRetAttr A INNER JOIN @RMDet B  
      ON A.AttrId = B.RMSRouteType AND A.AttrType = @AttrType)  
    SET @Applicable_RouteType = 1  
  END  
  IF @AttrType = 19 AND @Applicable_LocUpC=0  --Local / UpCountry  
  BEGIN  
   IF EXISTS (SELECT A.AttrId FROM @SchemeRetAttr A INNER JOIN @RMDet B  
      ON A.AttrId = B.RMLocalUpcountry AND A.AttrType = @AttrType)  
    SET @Applicable_LocUpC = 1  
  END  
  IF @AttrType = 20 AND @Applicable_VanRoute=0  --Van / NonVan Route  
  BEGIN  
   IF EXISTS (SELECT A.AttrId FROM @SchemeRetAttr A INNER JOIN @RMDet B  
      ON A.AttrId = B.RMVanRoute AND A.AttrType = @AttrType)  
    SET @Applicable_VanRoute = 1  
  END  
  IF @AttrType = 21 AND @Applicable_Cluster=0  --Cluster  
  BEGIN     
   IF EXISTS (SELECT AttrId FROM @SchemeRetAttr WHERE AttrType = @AttrType AND  
      AttrId IN (SELECT DISTINCT B.ClusterId FROM ClusterGroupMaster A INNER JOIN   
         (SELECT DISTINCT B.ClsGroupId,A.ClusterId,A.MAsterRecordId,A.Status FROM ClusterAssign A INNER JOIN ClusterGroupDetails B   
         ON A.ClusterId=B.ClusterId AND A.MasterId=79 ) B ON A.ClsGroupId=B.ClsGroupId  
         WHERE B.Status = CASE A.AppReqd WHEN 0 THEN B.Status ELSE 1 END AND MAsterRecordId=@Pi_RtrId))  
--      AttrId IN(SELECT DISTINCT ClusterId FROM ClusterAssign A WHERE MasterId=79 AND MAsterRecordId=@Pi_RtrId AND Status=1))  
    SET @Applicable_Cluster = 1  
  END  
  FETCH NEXT FROM CurSch INTO @AttrType,@AttrId  
 END  
 CLOSE CurSch  
 DEALLOCATE CurSch  
--  
 PRINT @Applicable_SM  
 PRINT @Applicable_RM  
 PRINT @Applicable_Vill  
 PRINT @Applicable_RtrLvl  
 PRINT @Applicable_RtrVal  
 PRINT @Applicable_VC  
 PRINT @Applicable_PC  
 PRINT @Applicable_Rtr  
 PRINT @Applicable_BT  
 PRINT @Applicable_BM  
 PRINT @Applicable_RT  
 PRINT @Applicable_CT  
 PRINT @Applicable_VRC  
 PRINT @Applicable_VI  
 PRINT @Applicable_VA  
 PRINT @Applicable_VAw  
 PRINT @Applicable_RouteType  
 PRINT @Applicable_LocUpC  
 PRINT @Applicable_VanRoute  
 PRINT @Applicable_Cluster  
 IF @Applicable_SM=1 AND @Applicable_RM=1 AND @Applicable_Vill=1 AND --@Applicable_RtrLvl=1 AND  
 @Applicable_RtrVal=1 AND @Applicable_VC=1 AND @Applicable_PC=1 AND @Applicable_Rtr = 1 AND  
 @Applicable_BT=1 AND @Applicable_BM=1 AND @Applicable_RT=1 AND @Applicable_CT=1 AND  
 @Applicable_VRC=1 AND @Applicable_VI=1 AND @Applicable_VA=1 AND @Applicable_VAw=1 AND  
 @Applicable_RouteType=1 AND @Applicable_LocUpC=1 AND @Applicable_VanRoute=1 AND @Applicable_Cluster=1  
 BEGIN  
  SET @Po_Applicable=1  
 END  
 ELSE  
 BEGIN  
  SET @Po_Applicable=0  
 END  
 --->Added By Nanda on 08/10/2010 for FBM Validations  
 IF @Po_Applicable=1  
 BEGIN  
  IF EXISTS(SELECT * FROM SchemeMaster WHERE SchId=@Pi_SchId AND FBM=1)  
  BEGIN  
   IF EXISTS(SELECT * FROM SchemeMaster WHERE SchId=@Pi_SchId AND Budget>0)  
   BEGIN  
    SET @Po_Applicable=1  
   END  
   ELSE  
   BEGIN  
    SET @Po_Applicable=0  
   END  
  END  
 END  
 --->Till Here  
 --PRINT @Po_Applicable  
 -- INST BASE DISCOUNT  
       IF @Po_Applicable = 1
       BEGIN
              IF EXISTS (SELECT * FROM  SchemeMaster WHERE ClmRefId IN (SELECT ClmGrpId FROM ClaimGroupMaster Where ClmGrpCode ='CG10004')   
               AND SchId = @Pi_SchId )  
               BEGIN  
                       IF NOT EXISTS (SELECT * FROM  SchemeRtrLevelValidation Where SchId = @Pi_SchId AND RtrId = @Pi_RtrId  )  
                       BEGIN  
                           SET @Po_Applicable = 0  
                       END  
                       IF EXISTS (SELECT * FROM  SchemeRtrLevelValidation Where SchId = @Pi_SchId AND RtrId = @Pi_RtrId )  
                       BEGIN  
                           SET @Po_Applicable = 1  
                       END 
                       IF EXISTS (SELECT * FROM  SchemeRtrLevelValidation Where SchId = @Pi_SchId AND RtrId = @Pi_RtrId and BudgetAllocated =0)  
                       BEGIN  
                           SET @Po_Applicable = 0  
                       END  
               END   
       END
RETURN  
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Consumer_Route_Salesman_Creation' AND XTYPE='P')
DROP PROCEDURE Proc_Consumer_Route_Salesman_Creation
GO
--EXEC Proc_ReturnSchemeApplicable 2,2,17,1,2,9716,'2018-04-16',0
CREATE PROCEDURE Proc_Consumer_Route_Salesman_Creation
AS
/*********************************************************************************************************
* PROCEDURE		: Proc_Consumer_Route_Salesman_Creation
* PURPOSE		: Dummy Salesman and route creation for consumer sales
* CREATED		: Murugan.R
* CREATED DATE	: 18/04/2020
* NOTE			:
* DATE         AUTHOR            CR/BZ			USER STORY ID      DESCRIPTION                         
**********************************************************************************************
* 18/04/2020   Murugan.R			CR			PARCS202100016			Dummy Salesman and route creation for consumer sales
*****************************************************************************************/
SET NOCOUNT ON
BEGIN
DECLARE @RmidSD AS INT
DECLARE @GeoRMIDSD AS INT
DECLARE @SmidSD AS INT
BEGIN TRY

BEGIN TRAN	
	--- ROUTE CREATION
	IF EXISTS(SELECT 'X' FROM Routemaster (NOLOCK))
	BEGIN
		IF NOT EXISTS (SELECT * FROM Routemaster (Nolock) Where RMCode='S99999' AND RMSRouteType =1)
		BEGIN			
			SELECT @RmidSD=MAX(RMID) FROM Routemaster (NOLOCK)
			SET @RmidSD=ISNULL(@RmidSD,0)+1
			SET @GeoRMIDSD=(SELECT Top 1 GeoMainId from RouteMaster)
			INSERT INTO RouteMaster(RMId,RMCode,RMName,CmpId,RMDistance,RMPopulation,GeoMainId,RMVanRoute,RMSRouteType,RMLocalUpcountry,
			RMMon,RMTue,RMWed,RMThu,RMFri,RMSat,RMSun,RMstatus,UpLoad,Availability,LastModBy,LastModDate,AuthId,AuthDate,XMLUpload)			
			SELECT @RmidSD,'S99999','Online Aggregator',0,0,0,@GeoRMIDSD,0,1,1,0,0,0,0,0,0,0,1,'N',1,1,GETDATE(),1,GETDATE(),0
			
			UPDATE Counters SET CurrValue =(SELECT MAX(RMID) FROM Routemaster (NOLOCK)) WHERE TabName = 'RouteMaster' AND FldName = 'RMID'
		END
		IF NOT EXISTS (SELECT * FROM Routemaster (Nolock) Where RMCode='D99999' AND RMSRouteType =2)
		BEGIN
			SELECT @RmidSD=MAX(RMID) FROM Routemaster (NOLOCK)
			SET @RmidSD=ISNULL(@RmidSD,0)+1
			SET @GeoRMIDSD=(SELECT Top 1 GeoMainId from RouteMaster)
			INSERT INTO RouteMaster(RMId,RMCode,RMName,CmpId,RMDistance,RMPopulation,GeoMainId,RMVanRoute,RMSRouteType,RMLocalUpcountry,
			RMMon,RMTue,RMWed,RMThu,RMFri,RMSat,RMSun,RMstatus,UpLoad,Availability,LastModBy,LastModDate,AuthId,AuthDate,XMLUpload)			
			SELECT @RmidSD,'D99999','Online Aggregator',0,0,0,@GeoRMIDSD,0,2,1,0,0,0,0,0,0,0,1,'N',1,1,GETDATE(),1,GETDATE(),0
			
			UPDATE Counters SET CurrValue =(SELECT MAX(RMID) FROM Routemaster (NOLOCK)) WHERE TabName = 'RouteMaster' AND FldName = 'RMID'
		END
	END	

	IF EXISTS(SELECT 'X' FROM Salesman (Nolock)) 
	BEGIN
		IF NOT EXISTS (SELECT * FROM Salesman (Nolock) Where SMCode='99999')
		BEGIN
			SELECT @SmidSD=MAX(SMID) FROM Salesman (NOLOCK)
			SET @SmidSD=ISNULL(@SmidSD,0)+1
			INSERT INTO Salesman(SMID,SMCode,SMName,SMPhoneNumber,SMEmailID,SMOtherDetails,SMDailyAllowance,SMMonthlySalary,SMMktCredit,SMCreditDays,CmpId,
			SalesForceMainId,Status,SMCreditAmountAlert,SMCreditDaysAlert,UpLoad,Availability,LastModBy,LastModDate,AuthId,AuthDate,XMLUpload,WSUpload,HHTDeviceSerialNumber)
			SELECT @SmidSD,'99999','Online Aggregator',0,'','',0.00,0.00,0.00,0,0,0,1,0,0,'N',1,1,Getdate(),1,Getdate(),0,'N',''
			
			UPDATE Counters SET CurrValue=(SELECT MAX(SMId) FROM Salesman (NOLOCK)) WHERE TabName = 'Salesman' AND FldName = 'SMID'

			SELECT @SmidSD=SMID FROM Salesman (NOLOCK) Where SMCode='99999'
			SELECT @RmidSD=RMID FROM Routemaster (NOLOCK) Where RMCode='S99999'

			IF NOT EXISTS (SELECT * FROM SalesmanMarket (Nolock) WHERE SMID=@SmidSD)
			BEGIN
				INSERT INTO SalesmanMarket(SMID,RMId,Availability,LastModBy,LastModDate,AuthId,AuthDate)
				SELECT @SmidSD,@RmidSD,1,1,GETDATE(),1,GETDATE()
			END	 
			
		END
	END	
	COMMIT TRAN
END TRY
BEGIN CATCH
	ROLLBACK TRAN
END CATCH	
	RETURN
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Consumer_Retailer_Creation' AND XTYPE='P')
DROP PROCEDURE Proc_Consumer_Retailer_Creation
GO
CREATE PROCEDURE Proc_Consumer_Retailer_Creation
AS
/*********************************************************************************************************
* PROCEDURE		: Proc_Consumer_Retailer_Creation
* PURPOSE		: Swiggy and Zomato retailer creation
* CREATED		: Murugan.R
* CREATED DATE	: 18/04/2020
* NOTE			:
* DATE         AUTHOR            CR/BZ			USER STORY ID			DESCRIPTION                         
**********************************************************************************************
* 18/04/2020   Murugan.R			CR			PARCS202100016			Dunzo retailer creation
*****************************************************************************************/
SET NOCOUNT ON
BEGIN
	DECLARE @SmidSD AS INT
	DECLARE @RmidSD AS INT
	DECLARE @GeoRMIDSD AS INT
	DECLARE @CtgMainIDSD AS INT
	DECLARE @RtridSD AS INT
	DECLARE @Prefix AS NVARCHAR(50)
	DECLARE @GeoRtrIDSD AS INT
	DECLARE @DelRmid AS INT
	DECLARE @TaxGroupidSD AS INT
	DECLARE @CoaidSD AS INT
	DECLARE @RtrClassIdSD AS INT
	DECLARE @ACCodeSD AS VARCHAR(50)
	DECLARE @RtrshipidSD AS INT
	DECLARE @State as VARCHAR(250)
	DECLARE @SufixSD AS INT
	
	BEGIN TRY
	
	IF NOT EXISTS(SELECT 'X' FROM Retailer (NOLOCK))
	BEGIN
		RETURN
	END
	
	
	IF NOT EXISTS(SELECT 'X' FROM Salesman (NOLOCK) Where SMCode='99999')
	BEGIN
		RETURN
	END
	IF NOT EXISTS(SELECT 'X' FROM Routemaster (NOLOCK) Where RMCode='S99999')
	BEGIN
		RETURN
	END	
	IF NOT EXISTS(SELECT 'X' FROM Routemaster (NOLOCK) Where RMCode='D99999')
	BEGIN
		RETURN
	END	
	
	
	
	UPDATE Counters SET CurrValue=(SELECT isnull(MAX(RtrShipId),0) FROM RetailerShipAdd) WHERE TabName='RetailerShipAdd' AND FldName='RtrShipId'
	UPDATE Counters SET CurrValue = (SELECT ISNULL(MAX(RTRID),0) FROM Retailer) WHERE Tabname =  'Retailer' AND Fldname = 'RtrId'
	UPDATE Counters SET CurrValue =(SELECT MAX(COAID) FROM COAMASTER) WHERE Tabname =  'CoaMaster' AND Fldname = 'CoaId'
	
	BEGIN TRAN
		IF EXISTS (SELECT ColumnValue from UdcDetails A (Nolock) INNER JOIN UdcMaster B (Nolock) ON A.Masterid=B.Masterid
		AND A.UdcMasterId=B.UdcMasterId 
		Where A.Masterid=16 and B.ColumnName='State Name' 
		and Len(Isnull(A.ColumnValue,''))>0)
		BEGIN
				
				SELECT @Prefix=Prefix FROM CompanyCounters  WITH (UPDLOCK) WHERE TabName=UPPER('Retailer') AND FldName=UPPER('CmpRtrCode')

				SET @State= (SELECT ColumnValue from UdcDetails A (Nolock) INNER JOIN UdcMaster B (Nolock) ON A.Masterid=B.Masterid
				AND A.UdcMasterId=B.UdcMasterId 
				Where A.Masterid=16 and B.ColumnName='State Name' 
				and Len(Isnull(A.ColumnValue,''))>0) 
		  

				IF EXISTS (SELECT * FROM RetailerCategory(Nolock) where CtgCode='SWIGGY')
				BEGIN
					 SELECT @CtgMainIDSD=CtgMainId from RetailerCategory(Nolock) where CtgCode='SWIGGY'
					 SET @GeoRtrIDSD=(SELECT Top 1 GeoMainId from Retailer)					
					IF EXISTS (SELECT * FROM RetailerValueClass (Nolock) Where CtgMainId=@CtgMainIDSD)	       
					BEGIN
							IF NOT EXISTS (SELECT * FROM Retailer(Nolock) Where RtrCode='SWR001')
							BEGIN					
								IF EXISTS (SELECT * FROM TaxGroupSetting(Nolock) where RtrGroup='RTRINTRA')
								BEGIN
									SET @DelRmid=(SELECT RMID from RouteMaster where RMCode ='D99999' AND RMSRouteType =2)
									SELECT @RtrClassIdSD=RtrClassId FROM RetailerValueClass (Nolock) Where CtgMainId=@CtgMainIDSD	
									SELECT @TaxGroupidSD=Taxgroupid from TaxGroupSetting(Nolock) where RtrGroup='RTRINTRA'
									SELECT @RtridSD=MAX(Rtrid) FROM Retailer (NOLOCK)
									SET @RtridSD=ISNULL(@RtridSD,0)+1
									SELECT @CoaidSD=MAX(Coaid) FROM Coamaster (NOLOCK)
									SET @CoaidSD=ISNULL(@CoaidSD,0)+1
									SELECT @RtrshipidSD=MAX(RtrShipId) FROM RetailerShipAdd (NOLOCK)
									SET @RtrshipidSD=ISNULL(@RtrshipidSD,0)+1
									SELECT @SufixSD=CurrValue  FROM CompanyCounters  WITH (UPDLOCK) WHERE TabName=UPPER('Retailer') AND FldName=UPPER('CmpRtrCode')
									SET @SufixSD=ISNULL(@SufixSD,0)+1
									
									

								   INSERT INTO Retailer(RtrId,RtrCode,RtrName,RtrAdd1,RtrAdd2,RtrAdd3,RtrPinNo,RtrPhoneNo,RtrEmailId,RtrContactPerson,RtrKeyAcc,RtrCovMode,
								   RtrRegDate,RtrDayOff,RtrStatus,RtrTaxable,RtrTaxType,RtrTINNo,RtrCSTNo,RtrDepositAmt,RtrCrBills,RtrCrLimit,RtrCrDays,RtrCashDiscPerc,
								   RtrCashDiscCond,RtrCashDiscAmt,RtrLicNo,RtrLicExpiryDate,RtrDrugLicNo,RtrDrugExpiryDate,RtrPestLicNo,RtrPestExpiryDate,GeoMainId,RMId,
								   VillageId,RtrShipId,TaxGroupId,RtrResPhone1,RtrResPhone2,RtrOffPhone1,RtrOffPhone2,RtrDOB,RtrAnniversary,RtrRemark1,RtrRemark2,RtrRemark3,
								   CoaId,RtrOnAcc,RtrType,RtrFrequency,RtrCrBillsAlert,RtrCrLimitAlert,RtrCrDaysAlert,Upload,RtrRlStatus,Availability,LastModBy,LastModDate,
								   AuthId,AuthDate,CmpRtrCode,Approved,XMLUpload,RtrPayment,RtrUniqueCode,WSUpload,RtrCodeUserInput)
								   SELECT @RtridSD,'SWR001','Swiggy Customer','Swiggy Online','','',0,0,'','',1,1,Convert(Varchar(10),Getdate(),121),0,1,1,1,0,'',0.00,0,0.00,0,0.00,
								   1,0.00,'','','','','','',@GeoRtrIDSD,@DelRmid,0,@RtrshipidSD,@TaxGroupidSD,'','','','',Convert(Varchar(10),Getdate(),121),Convert(Varchar(10),Getdate(),121),
								   '','','',@CoaidSD,0.00,3,0,0,0,0,'N',1,1,1,Getdate(),1,Getdate(),
								   @Prefix+CAST(Right(YEAR(GETDATE()),2) AS NVARCHAR(50))+RIGHT('00000'+ CONVERT(VARCHAR,@SufixSD),5),
								   0,0,1,'','N','SWR001'								
						        
					              
									IF NOT EXISTS (SELECT * FROM RetailerValueClassMap WHERE Rtrid=@RtridSD)
									BEGIN
										INSERT INTO RetailerValueClassMap(RtrId,RtrValueClassId,Availability,LastModBy,LastModDate,AuthId,AuthDate)
										SELECT @RtridSD,@RtrClassIdSD,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121)
									END

									IF NOT EXISTS (SELECT * FROM RetailerMarket WHERE Rtrid=@RtridSD)
									BEGIN
										INSERT INTO RetailerMarket(RtrId,RMId,Availability,LastModBy,LastModDate,AuthId,AuthDate,Upload)
										SELECT Distinct @RtridSD,RMId,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121),0
										FROM Routemaster Where RMCOde='S99999'
									END
								            
									SET @ACCodeSD=(SELECT CAST(LEFT(AcCode,3) AS VARCHAR(10))+CAST(SUBSTRING(AcCode,4,LEN(AcCode))+1 AS VARCHAR(100))+@RtridSD 
									FROM COAMaster (NOLOCK) WHERE CoaId=(SELECT MAX(A.CoaId) FROM COAMaster A (NOLOCK) WHERE A.MainGroup=2 AND A.AcCode LIKE '216%'))	
	     	 
									IF NOT EXISTS (SELECT * FROM Coamaster WHERE AcCode=@ACCodeSD)
									BEGIN
										INSERT INTO CoaMaster (CoaId,AcCode,AcName,AcLevel,MainGroup,Status,Availability,LastModBy,LastModDate,AuthId,AuthDate)
										SELECT @CoaidSD,@ACCodeSD,'Swiggy Customer',4,2,2,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121)
									END

									IF NOT EXISTS (SELECT * FROM RetailerShipAdd(Nolock) where Rtrid=@RtridSD)
									BEGIN
										INSERT INTO RetailerShipAdd(RtrShipId,Rtrid,RtrShipAdd1,RtrShipAdd2,RtrShipAdd3,RtrShipPinNo,RtrShipPhoneNo,RtrShipDefaultAdd,
										Availability,LastModBy,LastModDate,AuthId,AuthDate,TaxGroupId,StateId,GSTTinNo,Upload)
										SELECT @RtrshipidSD,@RtridSD,'Swiggy Online','','','','',1,1,1,
										CONVERT(VARCHAR(10),GETDATE(),121),1,CONVERT(VARCHAR(10),GETDATE(),121),0,0,'','N'
									END

								  UPDATE Counters SET CurrValue=(SELECT isnull(MAX(RtrShipId),0) FROM RetailerShipAdd) WHERE TabName='RetailerShipAdd' AND FldName='RtrShipId'
								  --UPDATE CompanyCounters SET CurrValue = (SELECT ISNULL(MAX(RTRID),0) FROM Retailer) WHERE Tabname =  'Retailer' AND Fldname = 'CmpRtrCode'
								  UPDATE CompanyCounters SET CurrValue = CurrValue+1 WHERE Tabname =  'Retailer' AND Fldname = 'CmpRtrCode'
								  UPDATE Counters SET CurrValue = (SELECT ISNULL(MAX(RTRID),0) FROM Retailer) WHERE Tabname =  'Retailer' AND Fldname = 'RtrId'
								  UPDATE Counters SET CurrValue =(SELECT MAX(COAID) FROM COAMASTER) WHERE Tabname =  'CoaMaster' AND Fldname = 'CoaId'

								INSERT INTO ETL_Prk_CN2CS_UdcDetails (MasterName,ColumnName,[Column Code],[ColumnValue],UpdateFlag)
								SELECT 'Retailer Master','State Name','SWR001',@State,0 UNION ALL
								SELECT 'Retailer Master','GSTIN','SWR001','',0 UNION ALL
								SELECT 'Retailer Master','Composition','SWR001','NA',0 UNION ALL
								SELECT 'Retailer Master','Related Party','SWR001','NO',0 UNION ALL
								SELECT 'Retailer Master','Retailer Type','SWR001','UnRegistered',0 UNION ALL
								SELECT 'Retailer Master','PAN Number','SWR001','',0 UNION ALL
							    SELECT 'Retailer Master','Distance level Km','SWR001','0',0
							
																
							
								IF EXISTS(SELECT * FROM ETL_Prk_CN2CS_UdcDetails WHERE MasterName='Retailer Master' AND UpdateFlag=0)
								BEGIN
									EXEC Proc_Validate_CN2CS_UdcDetails 0
								END
								--Shipping Address
								EXEC Proc_UpdateRetailerShipping @RtridSD,0
							
								--EXEC Proc_UpdateRtrTaxTypebasedRtrType @RtridSD,1

								--EXEC Proc_UpdateIgstTaxStatusBasedonStateGST @RtridSD 
							END
					END
				END
			END
		IF EXISTS (SELECT * FROM RetailerCategory(Nolock) where CtgCode='ZOMATO')
			BEGIN
				SELECT @CtgMainIDSD=CtgMainId from RetailerCategory(Nolock) where CtgCode='ZOMATO'
				set @GeoRtrIDSD=(SELECT Top 1 GeoMainId from Retailer)
				IF EXISTS (SELECT * FROM RetailerValueClass (Nolock) Where CtgMainId=@CtgMainIDSD)	       
					BEGIN
					IF NOT EXISTS (SELECT * FROM Retailer(Nolock) Where RtrCode='ZMR001')
						BEGIN
						IF EXISTS (SELECT * FROM TaxGroupSetting(Nolock) where RtrGroup='RTRINTRA')
							BEGIN
							   SET @DelRmid=(SELECT RMID from RouteMaster where RMCode ='D99999' AND RMSRouteType =2)		
							   SELECT @RtrClassIdSD=RtrClassId FROM RetailerValueClass (Nolock) Where CtgMainId=@CtgMainIDSD
							   SELECT @TaxGroupidSD=Taxgroupid from TaxGroupSetting(Nolock) where RtrGroup='RTRINTRA'
							   SELECT @RtridSD=MAX(Rtrid) FROM Retailer (NOLOCK)
							   SET @RtridSD=ISNULL(@RtridSD,0)+1
							   SELECT @CoaidSD=MAX(Coaid) FROM Coamaster (NOLOCK)
							   SET @CoaidSD=ISNULL(@CoaidSD,0)+1
							   SELECT @RtrshipidSD=MAX(RtrShipId) FROM RetailerShipAdd (NOLOCK)
							   SET @RtrshipidSD=ISNULL(@RtrshipidSD,0)+1
								SELECT @SufixSD=CurrValue  FROM CompanyCounters  WITH (UPDLOCK) WHERE TabName=UPPER('Retailer') AND FldName=UPPER('CmpRtrCode')
								SET @SufixSD=ISNULL(@SufixSD,0)+1

								INSERT INTO Retailer(Rtrid,RtrCode,RtrName,RtrAdd1,RtrAdd2,RtrAdd3,RtrPinNo,RtrPhoneNo,RtrEmailId,RtrContactPerson,RtrKeyAcc,RtrCovMode,
								RtrRegDate,RtrDayOff,RtrStatus,RtrTaxable,RtrTaxType,RtrTINNo,RtrCSTNo,RtrDepositAmt,RtrCrBills,RtrCrLimit,RtrCrDays,RtrCashDiscPerc,
								RtrCashDiscCond,RtrCashDiscAmt,RtrLicNo,RtrLicExpiryDate,RtrDrugLicNo,RtrDrugExpiryDate,RtrPestLicNo,RtrPestExpiryDate,GeoMainId,RMID,
								VillageId,RtrShipId,TaxGroupId,RtrResPhone1,RtrResPhone2,RtrOffPhone1,RtrOffPhone2,RtrDOB,RtrAnniversary,RtrRemark1,RtrRemark2,RtrRemark3,
								CoaId,RtrOnAcc,Rtrtype,RtrFrequency,RtrCrBillsAlert,RtrCrLimitAlert,RtrCrDaysAlert,Upload,RtrRlStatus,Availability,LastModBy,LastModDate,
								AuthId,AuthDate,CmpRtrCode,Approved,XMLUpload,RtrPayment,RtrUniqueCode,WSUpload,RtrCodeUserInput)
								SELECT @RtridSD,'ZMR001','Zomato Customer','Zomato Online','','',0,0,'','',1,1,Convert(Varchar(10),Getdate(),121),0,1,1,1,0,'',0.00,0,0.00,0,0.00,
								1,0.00,'','','','','','',@GeoRtrIDSD,@DelRmid,0,@RtrshipidSD,@TaxGroupidSD,'','','','',Convert(Varchar(10),Getdate(),121),Convert(Varchar(10),Getdate(),121),
								'','','',@CoaidSD,0.00,3,0,0,0,0,'N',1,1,1,Getdate(),1,Getdate(),
								@Prefix+CAST(Right(YEAR(GETDATE()),2) AS NVARCHAR(50))+RIGHT('00000'+ CONVERT(VARCHAR,@SufixSD),5),
								0,0,1,'','N','ZMR001'   
              
								IF NOT EXISTS (SELECT * FROM RetailerValueClassMap WHERE Rtrid=@RtridSD)
									BEGIN
										INSERT INTO RetailerValueClassMap(RtrId,RtrValueClassId,Availability,LastModBy,LastModDate,AuthId,AuthDate)
										SELECT @RtridSD,@RtrClassIdSD,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121)
									END

								IF NOT EXISTS (SELECT * FROM RetailerMarket WHERE Rtrid=@RtridSD)
								BEGIN
									INSERT INTO RetailerMarket(RtrId,RMId,Availability,LastModBy,LastModDate,AuthId,AuthDate,Upload)
									SELECT Distinct @RtridSD,RMId,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121),0
									FROM Routemaster Where RMCOde='S99999'
								END
            
									SET @ACCodeSD=(SELECT CAST(LEFT(AcCode,3) AS VARCHAR(10))+CAST(SUBSTRING(AcCode,4,LEN(AcCode))+1 AS VARCHAR(100))+@RtridSD 
									FROM COAMaster (NOLOCK) WHERE CoaId=(SELECT MAX(A.CoaId) FROM COAMaster A (NOLOCK) WHERE A.MainGroup=2 AND A.AcCode LIKE '216%'))	
	     	 
								IF NOT EXISTS (SELECT * FROM Coamaster WHERE AcCode=@ACCodeSD)
								BEGIN
									INSERT INTO CoaMaster (CoaId,AcCode,AcName,AcLevel,MainGroup,Status,Availability,LastModBy,LastModDate,AuthId,AuthDate)
									SELECT @CoaidSD,@ACCodeSD,'Zomato Customer',4,2,2,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121)
								END

								IF NOT EXISTS (SELECT * FROM RetailerShipAdd(Nolock) where Rtrid=@RtridSD)
								BEGIN
									INSERT INTO RetailerShipAdd(RtrShipId,Rtrid,RtrShipAdd1,RtrShipAdd2,RtrShipAdd3,RtrShipPinNo,RtrShipPhoneNo,RtrShipDefaultAdd,
									Availability,LastModBy,LastModDate,AuthId,AuthDate,TaxGroupId,StateId,GSTTinNo,Upload)
									SELECT @RtrshipidSD,@RtridSD,'Zomato Online','','','','',1,1,1,
									CONVERT(VARCHAR(10),GETDATE(),121),1,CONVERT(VARCHAR(10),GETDATE(),121),0,0,'','N'
								END

								UPDATE Counters SET CurrValue=(SELECT isnull(MAX(RtrShipId),0) FROM RetailerShipAdd) WHERE TabName='RetailerShipAdd' AND FldName='RtrShipId'
								--UPDATE CompanyCounters SET CurrValue = (SELECT ISNULL(MAX(RTRID),0) FROM Retailer) WHERE Tabname =  'Retailer' AND Fldname = 'CmpRtrCode'
								UPDATE CompanyCounters SET CurrValue = CurrValue+1 WHERE Tabname =  'Retailer' AND Fldname = 'CmpRtrCode'
								UPDATE Counters SET CurrValue = (SELECT ISNULL(MAX(RTRID),0) FROM Retailer) WHERE Tabname =  'Retailer' AND Fldname = 'RtrId'
								UPDATE Counters SET CurrValue =(SELECT MAX(COAID) FROM COAMASTER) WHERE Tabname =  'CoaMaster' AND Fldname = 'CoaId'
								
								INSERT INTO ETL_Prk_CN2CS_UdcDetails (MasterName,ColumnName,[Column Code],[ColumnValue],UpdateFlag)
								SELECT 'Retailer Master','State Name','ZMR001',@State,0 UNION ALL
								SELECT 'Retailer Master','GSTIN','ZMR001','',0 UNION ALL
								SELECT 'Retailer Master','Composition','ZMR001','NA',0 UNION ALL
								SELECT 'Retailer Master','Related Party','ZMR001','NO',0 UNION ALL
								SELECT 'Retailer Master','Retailer Type','ZMR001','UnRegistered',0 UNION ALL
								SELECT 'Retailer Master','PAN Number','ZMR001','',0 UNION ALL
							    SELECT 'Retailer Master','Distance level Km','ZMR001','0',0
								

							IF EXISTS(SELECT * FROM ETL_Prk_CN2CS_UdcDetails WHERE MasterName='Retailer Master' AND UpdateFlag=0)
							BEGIN
								EXEC Proc_Validate_CN2CS_UdcDetails 0
							END
							--Shipping Address
							EXEC Proc_UpdateRetailerShipping @RtridSD,0

							--EXEC Proc_UpdateRtrTaxTypebasedRtrType @RtridSD,1

							--EXEC Proc_UpdateIgstTaxStatusBasedonStateGST @RtridSD 
					END							
				END  
			END
		END
		
		IF EXISTS (SELECT * FROM RetailerCategory(Nolock) where CtgCode='DUNZO')
			BEGIN
				SELECT @CtgMainIDSD=CtgMainId from RetailerCategory(Nolock) where CtgCode='DUNZO'
				set @GeoRtrIDSD=(SELECT Top 1 GeoMainId from Retailer)			
				IF EXISTS (SELECT * FROM RetailerValueClass (Nolock) Where CtgMainId=@CtgMainIDSD)	       
					BEGIN
					IF NOT EXISTS (SELECT * FROM Retailer(Nolock) Where RtrCode='DZD001')
						BEGIN
						IF EXISTS (SELECT * FROM TaxGroupSetting(Nolock) where RtrGroup='RTRINTRA')
							BEGIN
							   SET @DelRmid=(SELECT RMID from RouteMaster where RMCode ='D99999' AND RMSRouteType =2)		
							   SELECT @RtrClassIdSD=RtrClassId FROM RetailerValueClass (Nolock) Where CtgMainId=@CtgMainIDSD
							   SELECT @TaxGroupidSD=Taxgroupid from TaxGroupSetting(Nolock) where RtrGroup='RTRINTRA'
							   SELECT @RtridSD=MAX(Rtrid) FROM Retailer (NOLOCK)
							   SET @RtridSD=ISNULL(@RtridSD,0)+1
							   SELECT @CoaidSD=MAX(Coaid) FROM Coamaster (NOLOCK)
							   SET @CoaidSD=ISNULL(@CoaidSD,0)+1
							   SELECT @RtrshipidSD=MAX(RtrShipId) FROM RetailerShipAdd (NOLOCK)
							   SET @RtrshipidSD=ISNULL(@RtrshipidSD,0)+1
								SELECT @SufixSD=CurrValue  FROM CompanyCounters  WITH (UPDLOCK) WHERE TabName=UPPER('Retailer') AND FldName=UPPER('CmpRtrCode')
								SET @SufixSD=ISNULL(@SufixSD,0)+1

								INSERT INTO Retailer(Rtrid,RtrCode,RtrName,RtrAdd1,RtrAdd2,RtrAdd3,RtrPinNo,RtrPhoneNo,RtrEmailId,RtrContactPerson,RtrKeyAcc,RtrCovMode,
								RtrRegDate,RtrDayOff,RtrStatus,RtrTaxable,RtrTaxType,RtrTINNo,RtrCSTNo,RtrDepositAmt,RtrCrBills,RtrCrLimit,RtrCrDays,RtrCashDiscPerc,
								RtrCashDiscCond,RtrCashDiscAmt,RtrLicNo,RtrLicExpiryDate,RtrDrugLicNo,RtrDrugExpiryDate,RtrPestLicNo,RtrPestExpiryDate,GeoMainId,RMID,
								VillageId,RtrShipId,TaxGroupId,RtrResPhone1,RtrResPhone2,RtrOffPhone1,RtrOffPhone2,RtrDOB,RtrAnniversary,RtrRemark1,RtrRemark2,RtrRemark3,
								CoaId,RtrOnAcc,Rtrtype,RtrFrequency,RtrCrBillsAlert,RtrCrLimitAlert,RtrCrDaysAlert,Upload,RtrRlStatus,Availability,LastModBy,LastModDate,
								AuthId,AuthDate,CmpRtrCode,Approved,XMLUpload,RtrPayment,RtrUniqueCode,WSUpload,RtrCodeUserInput)
								SELECT @RtridSD,'DZD001','Dunzo Customer','Dunzo Online','','',0,0,'','',1,1,Convert(Varchar(10),Getdate(),121),0,1,1,1,0,'',0.00,0,0.00,0,0.00,
								1,0.00,'','','','','','',@GeoRtrIDSD,@DelRmid,0,@RtrshipidSD,@TaxGroupidSD,'','','','',Convert(Varchar(10),Getdate(),121),Convert(Varchar(10),Getdate(),121),
								'','','',@CoaidSD,0.00,3,0,0,0,0,'N',1,1,1,Getdate(),1,Getdate(),
								@Prefix+CAST(Right(YEAR(GETDATE()),2) AS NVARCHAR(50))+RIGHT('00000'+ CONVERT(VARCHAR,@SufixSD),5),
								0,0,1,'','N','DZD001'  
						
              
								IF NOT EXISTS (SELECT * FROM RetailerValueClassMap WHERE Rtrid=@RtridSD)
									BEGIN
										INSERT INTO RetailerValueClassMap(RtrId,RtrValueClassId,Availability,LastModBy,LastModDate,AuthId,AuthDate)
										SELECT @RtridSD,@RtrClassIdSD,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121)
									END

								IF NOT EXISTS (SELECT * FROM RetailerMarket WHERE Rtrid=@RtridSD)
								BEGIN
									INSERT INTO RetailerMarket(RtrId,RMId,Availability,LastModBy,LastModDate,AuthId,AuthDate,Upload)
									SELECT Distinct @RtridSD,RMId,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121),0
									FROM Routemaster Where RMCOde='S99999'
								END
            
									SET @ACCodeSD=(SELECT CAST(LEFT(AcCode,3) AS VARCHAR(10))+CAST(SUBSTRING(AcCode,4,LEN(AcCode))+1 AS VARCHAR(100))+@RtridSD 
									FROM COAMaster (NOLOCK) WHERE CoaId=(SELECT MAX(A.CoaId) FROM COAMaster A (NOLOCK) WHERE A.MainGroup=2 AND A.AcCode LIKE '216%'))	
	     	 
								IF NOT EXISTS (SELECT * FROM Coamaster WHERE AcCode=@ACCodeSD)
								BEGIN
									INSERT INTO CoaMaster (CoaId,AcCode,AcName,AcLevel,MainGroup,Status,Availability,LastModBy,LastModDate,AuthId,AuthDate)
									SELECT @CoaidSD,@ACCodeSD,'Dunzo Customer',4,2,2,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121)
								END

								IF NOT EXISTS (SELECT * FROM RetailerShipAdd(Nolock) where Rtrid=@RtridSD)
								BEGIN
									INSERT INTO RetailerShipAdd(RtrShipId,Rtrid,RtrShipAdd1,RtrShipAdd2,RtrShipAdd3,RtrShipPinNo,RtrShipPhoneNo,RtrShipDefaultAdd,
									Availability,LastModBy,LastModDate,AuthId,AuthDate,TaxGroupId,StateId,GSTTinNo,Upload)
									SELECT @RtrshipidSD,@RtridSD,'Dunzo Online','','','','',1,1,1,
									CONVERT(VARCHAR(10),GETDATE(),121),1,CONVERT(VARCHAR(10),GETDATE(),121),0,0,'','N'
								END

								UPDATE Counters SET CurrValue=(SELECT isnull(MAX(RtrShipId),0) FROM RetailerShipAdd) WHERE TabName='RetailerShipAdd' AND FldName='RtrShipId'
								UPDATE CompanyCounters SET CurrValue = (SELECT ISNULL(MAX(RTRID),0) FROM Retailer) WHERE Tabname =  'Retailer' AND Fldname = 'CmpRtrCode'
								UPDATE CompanyCounters SET CurrValue = CurrValue+1 WHERE Tabname =  'Retailer' AND Fldname = 'CmpRtrCode'
								UPDATE Counters SET CurrValue = (SELECT ISNULL(MAX(RTRID),0) FROM Retailer) WHERE Tabname =  'Retailer' AND Fldname = 'RtrId'
								UPDATE Counters SET CurrValue =(SELECT MAX(COAID) FROM COAMASTER) WHERE Tabname =  'CoaMaster' AND Fldname = 'CoaId'
								
								INSERT INTO ETL_Prk_CN2CS_UdcDetails (MasterName,ColumnName,[Column Code],[ColumnValue],UpdateFlag)
								SELECT 'Retailer Master','State Name','DZD001',@State,0 UNION ALL
								SELECT 'Retailer Master','GSTIN','DZD001','',0 UNION ALL
								SELECT 'Retailer Master','Composition','DZD001','NA',0 UNION ALL
								SELECT 'Retailer Master','Related Party','DZD001','NO',0 UNION ALL
								SELECT 'Retailer Master','Retailer Type','DZD001','UnRegistered',0 UNION ALL
								SELECT 'Retailer Master','PAN Number','DZD001','',0 UNION ALL
							    SELECT 'Retailer Master','Distance level Km','DZD001','0',0

							IF EXISTS(SELECT * FROM ETL_Prk_CN2CS_UdcDetails WHERE MasterName='Retailer Master' AND UpdateFlag=0)
							BEGIN
								EXEC Proc_Validate_CN2CS_UdcDetails 0
							END
							--Shipping Address
							EXEC Proc_UpdateRetailerShipping @RtridSD,0

							--EXEC Proc_UpdateRtrTaxTypebasedRtrType @RtridSD,1

							--EXEC Proc_UpdateIgstTaxStatusBasedonStateGST @RtridSD 
					END							
				END  
			END
		END
		
END	
	COMMIT TRAN
END TRY
BEGIN CATCH
	SELECT ERROR_MESSAGE()
	ROLLBACK TRAN
END CATCH	
	RETURN
END
GO
IF EXISTS(SELECT 'X' FROM SYSOBJECTS WHERE XTYPE='P' AND NAME='Proc_RptBillWisePrdWise')
DROP PROCEDURE Proc_RptBillWisePrdWise
GO
-- EXEC Proc_RptBillWisePrdWise 183,2
-- delete from RptBillWisePrdWise
-- delete from RptBillWisePrdWiseTaxBreakup
-- select * from RptBillWisePrdWise
-- select * from RptBillWisePrdWiseTaxBreakup
CREATE PROCEDURE [Proc_RptBillWisePrdWise]
(
	@Pi_RptId AS INT,
	@Pi_UsrId AS INT
)
AS 
/************************************************************  
* PROCEDURE : Proc_RptBillWisePrdWise  
* PURPOSE : To get the Product details and Bill details  
* CREATED BY : Murugan.R  
* CREATED DATE : 30/09/2009 
* NOTE  :  
* MODIFIED  
* DATE      AUTHOR     DESCRIPTION  
------------------------------------------------  
* {date} {developer}  {brief modification description}  
* DATE      AUTHOR     CR\BZ		USER STORY ID		DESCRIPTION
------------------------------------------------
*20/04/2020 MURUGAN.R	CR			PARCS202100016		New Column added SalInvRef,PrdDBDiscAmount,RtrType
*************************************************************/  
BEGIN
	
	DELETE FROM RptBillWisePrdWise WHERE Usrid=@Pi_UsrId
	DELETE FROM RptBillWisePrdWiseTaxBreakup WHERE Usrid=@Pi_UsrId
	DECLARE @FromDate AS DATETIME  
	DECLARE @ToDate   AS DATETIME  
	DECLARE @DiscBreakup as Int
	DECLARE @QtyBreakup as Int
	DECLARE @TaxBreakup as Int	
	DECLARE @CmpId      AS  INT  	
	DECLARE @CtgLevelId AS  INT  
	DECLARE @RtrClassId AS  INT  
	DECLARE @CtgMainId  AS  INT  
	DECLARE @SalId   AS BIGINT 
	DECLARE @CancelValue AS INT 
	SET @FromDate =(SELECT  TOP 1 dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,10,@Pi_UsrId))  
	SET @ToDate = (SELECT  TOP 1 dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,11,@Pi_UsrId)) 
	SET @DiscBreakup = (SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,242,@Pi_UsrId)) 
	SET @QtyBreakup = (SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,240,@Pi_UsrId)) 
	SET @TaxBreakup = (SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,241,@Pi_UsrId)) 
	SET @CmpId =(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId))  
	SET @CtgLevelId =(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,29,@Pi_UsrId))  
	SET @RtrClassId =(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,31,@Pi_UsrId))  
	SET @CtgMainId=(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,30,@Pi_UsrId))  
	SET @SalId =(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,14,@Pi_UsrId)) 
	SET @CancelValue =(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,243,@Pi_UsrId))  
	CREATE TABLE #RptRetailer
	(
		Rtrid Int,
		RtrCode Varchar(50),
		RtrName Varchar(100)
	)
	CREATE TABLE #RptSalesFree
	(
		SlNo INT,
		SalInvDate datetime,
		SalinvNo Varchar(50),
		SalInvRef Varchar(50), 
		Salid Int,
		RmId Int,
		RmName Varchar(75),
		Rtrid Int,
		RtrCode Varchar(50),
		RtrName VarChar(200),
		Lcnid INT,
		Cmpid INT,
		PrdCtgValMainId INT,
		CmpPrdCtgId INT,
		Prdid Int,
		Prdccode Varchar(50),
		PrdName Varchar(200),
		Prdbatid Int,
		PrdBatCode Varchar(75),
		Rate Numeric(36,4),
		SalesQty Int,
		FreeQty Int,
		TotQty Int,
		GrossAmt Numeric(36,4),
		SchemeAmt Numeric(36,4),
		SplDiscount Numeric(36,4),
		CashDiscount Numeric(36,4),
		TotalDiscount Numeric(36,4),
		TotalTax Numeric(36,4),
		NetAmount Numeric(36,4),	
		PrdDBDiscAmount Numeric(36,4) 
	)
        --SET @TaxBreakup=2
		INSERT INTO #RptRetailer		
		SELECT DISTINCT R.Rtrid,RtrCode,RtrName FROM Retailer R WITH (NOLOCK),RetailerValueClassMap RVCM WITH (NOLOCK),RetailerValueClass RVC WITH (NOLOCK)  
			,RetailerCategory RC WITH (NOLOCK),RetailerCategoryLevel RCL  
		WHere  R.Rtrid = RVCM.RtrId AND RVCM.RtrValueClassId = RVC.RtrClassId  
			AND  RVC.CtgMainId=RC.CtgMainId AND  RCL.CtgLevelId=RC.CtgLevelId  
			AND (RCL.CtgLevelId=(CASE @CtgLevelId WHEN 0 THEN RCL.CtgLevelId ELSE 0 END) OR  
			RCL.CtgLevelId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,29,@Pi_UsrId)))  
			AND (RC.CtgMainId=(CASE @CtgMainId WHEN 0 THEN RC.CtgMainId ELSE 0 END) OR  
			RC.CtgMainId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,30,@Pi_UsrId)))  
			AND (RVC.RtrClassId=(CASE @RtrClassId WHEN 0 THEN RVC.RtrClassId ELSE 0 END) OR  
			RVC.RtrClassId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,31,@Pi_UsrId)))  
			AND (RVC.CmpId=(CASE @CmpId WHEN 0 THEN RVC.CmpId ELSE 0 END) OR  
			RVC.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId)))  
		INSERT INTO #RptSalesFree 	
		SELECT Max(slno) as Slno,Salinvdate,SalinvNo,SalInvRef,X.Salid,RmId,RmName,Rtrid,RtrCode,RtrName,Lcnid,Cmpid,PrdCtgValMainId,
			CmpPrdCtgId,Prdid,Prdccode,PrdName,	Prdbatid,PrdBatCode,Rate,Sum(SalesQty) as SalesQty ,sum(FreeQty)as FreeQty,
			Sum(SalesQty+FreeQty) as TotQty,Sum(GrossAmt) as GrossAmt,Sum(SchemeAmt) as SchemeAmt,sum(SplDiscount) as SplDiscount,
			sum(CashDiscount) as CashDiscount,Sum(SchemeAmt+SplDiscount+CashDiscount+PrdDBDiscAmount) as TotalDiscount,Sum(TotalTax) as TotalTax,Sum(NetAmount) as NetAmount,
		SUM(PrdDBDiscAmount) as PrdDBDiscAmount
		FROM(
			SELECT SIP.slNo,Salinvdate,Si.SalinvNo,Si.SalInvRef,Si.Salid,RM.RMId,RM.RMname,R.Rtrid,RtrCode,RtrName,SI.Lcnid,P.Cmpid,P.PrdCtgValMainId,PC.CmpPrdCtgId,
				   SIP.Prdid,Prdccode,PrdName,SIP.Prdbatid,PrdBatCode,PrdBatDetailValue as Rate,
				   BaseQty as SalesQty,SalManFreeQty as FreeQty,PrdGrossAmountAftEdit as GrossAmt,
				   Sum(Isnull(FlatAmount,0)+Isnull(DiscountPerAmount,0)) as SchemeAmt,PrdSplDiscAmount as SplDiscount,PrdCdAmount as CashDiscount,
				  Isnull(PrdTaxAmount,0) as TotalTax,Isnull(PrdNetAmount,0) as NetAmount,
			 ISNULL(PrdDBDiscAmount,0) as PrdDBDiscAmount 
			FROM SalesInvoice SI (NOLOCK)
			INNER JOIN SalesInvoiceProduct SIP (NOLOCK) ON SI.Salid=SIP.SalId	
			INNER JOIN Product P (NOLOCK) On P.Prdid=SIP.Prdid 
			INNER JOIN  ProductCategoryValue PC WITH (NOLOCK) ON  P.PrdCtgValMainId=PC.PrdCtgValMainId  
			INNER JOIN Productbatch PB (NOLOCK) On Pb.Prdid=P.Prdid and Pb.Prdbatid=SIP.Prdbatid
			INNER JOIN ProductBatchDetails D (NOLOCK) ON   PB.PrdBatId = D.PrdBatId AND SIP.PriceId = D.PriceId 
			INNER JOIN BatchCreation E (NOLOCK)	ON E.BatchSeqId = PB.BatchSeqId 
			AND D.SlNo = E.SlNo AND E.SelRte = 1  
			INNER JOIN RouteMaster RM ON RM.RMId=SI.RmId
			INNER JOIN #RptRetailer R ON R.Rtrid=SI.Rtrid
			LEFT OUTER JOIN SalesInvoiceSchemeLineWise SL ON SL.Salid=SIP.Salid and SL.Prdid=SIP.Prdid and SL.Prdbatid=SIP.Prdbatid
			WHERE SI.SalInvDate Between @FromDate AND @ToDate 
				AND	(SI.SalId = (CASE @SalId WHEN 0 THEN SI.SalId ELSE 0 END) OR  
					SI.SalId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,14,@Pi_UsrId)))  
				AND Dlvsts >=CASE WHEN @CancelValue=1 THEN 3 ELSE 4 END
								
			GROUP BY SIP.slNo,Salinvdate,Si.SalinvNo,Si.Salid,RM.RMId,RM.RMname,R.Rtrid,RtrCode,RtrName,SIP.Prdid,Prdccode,PrdName,SIP.Prdbatid,
					PrdBatCode,PrdBatDetailValue,BaseQty,SalManFreeQty,PrdGrossAmountAftEdit,PrdSplDiscAmount,
					PrdCdAmount,P.PrdCtgValMainId,PC.CmpPrdCtgId,SI.Lcnid,P.Cmpid,PrdTaxAmount,PrdNetAmount,Si.SalInvRef,PrdDBDiscAmount
			UNION ALL
			SELECT 0 as slno,Salinvdate,Si.SalinvNo, Si.SalInvRef,Sf.Salid,RM.RMId,RM.RMname,R.Rtrid,RtrCode,RtrName,SI.Lcnid,P.Cmpid,P.PrdCtgValMainId,
				PC.CmpPrdCtgId,SF.FreePrdId,Prdccode,PrdName,SF.FreePrdBatId,PrdBatCode,PrdBatDetailValue as Rate
				,0 as SalesQty,FreeQty,0 as  GrossAmt,0 as SchemeAmt,0 as SplDiscount,0 as CashDiscount,0 as TotalTax,0 as NetAmount,
			0 as PrdDBDiscAmount	
			FROM SalesInvoiceSchemeDtFreePrd SF 
			INNER JOIN SalesInvoice SI (NOLOCK) ON SI.salid=SF.Salid
			INNER JOIN Product P (NOLOCK) On P.Prdid=SF.FreePrdId 
			INNER JOIN  ProductCategoryValue PC WITH (NOLOCK) ON  P.PrdCtgValMainId=PC.PrdCtgValMainId  
			INNER JOIN Productbatch PB (NOLOCK) On Pb.Prdid=P.Prdid and Pb.Prdbatid=SF.FreePrdBatId
			INNER JOIN ProductBatchDetails D (NOLOCK) ON  PB.PrdBatId = D.PrdBatId and DefaultPrice=1
			INNER JOIN BatchCreation E (NOLOCK)	ON E.BatchSeqId = PB.BatchSeqId 
				AND D.SlNo = E.SlNo AND E.SelRte = 1 
			INNER JOIN RouteMaster RM ON RM.RMId=SI.RmId 
			INNER JOIN #RptRetailer R ON R.Rtrid=SI.Rtrid
			WHERE SI.SalInvDate Between @FromDate AND @ToDate
				AND	(SI.SalId = (CASE @SalId WHEN 0 THEN SI.SalId ELSE 0 END) OR  
					SI.SalId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,14,@Pi_UsrId)))
				AND Dlvsts >=CASE WHEN @CancelValue=1 THEN 3 ELSE 4 END
		)X 
		GROUP BY X.Salid,Prdid,Prdbatid,Salinvdate,SalinvNo,RMId,RMname,Rtrid,RtrCode,RtrName,Prdccode,PrdName,PrdBatCode,Rate,
				PrdCtgValMainId,CmpPrdCtgId,Lcnid,Cmpid,SalInvRef
		--TaxBreakUp
		IF @TaxBreakup=1
		BEGIN
			INSERT INTO RptBillWisePrdWise(SlNo,SalInvDate,SalinvNo,Salid,RmId,RmName,Rtrid,RtrCode,RtrName,
			Lcnid,Cmpid,PrdCtgValMainId,CmpPrdCtgId,Prdid,Prdccode,PrdName,
			Prdbatid,PrdBatCode,Rate,SalesQty,FreeQty,TotQty,GrossAmt,SchemeAmt,SplDiscount,
			CashDiscount,TotalDiscount,TaxPerc,TaxAmount,TotalTax,NetAmount,DiscBreakup,QtyBreakup,TaxBreakup,Usrid,SalInvRef,PrdDBDiscAmount)
			SELECT SlNo,SalInvDate,SalinvNo,Salid,RMId,RMName,Rtrid,RtrCode,RtrName,
			Lcnid,Cmpid,PrdCtgValMainId,CmpPrdCtgId,Prdid,Prdccode,PrdName,
			Prdbatid,PrdBatCode,Rate,SalesQty,FreeQty,TotQty,GrossAmt,SchemeAmt,SplDiscount,
			CashDiscount,TotalDiscount,TaxPerc,TaxAmount,TotalTax,Netamount,@DiscBreakup,@QtyBreakup,@TaxBreakup,@Pi_UsrId,SalInvRef,PrdDBDiscAmount
			FROM
			(
			SELECT SlNo,SalInvDate,SalinvNo,SalInvRef,X.Salid,X.RMID,X.RmName,X.Rtrid,RtrCode,RtrName ,Lcnid,Cmpid,PrdCtgValMainId,CmpPrdCtgId,
			Prdid,Prdccode,PrdName,Prdbatid,PrdBatCode, Rate,SalesQty,FreeQty,TotQty,GrossAmt,SchemeAmt,SplDiscount,
			CashDiscount,TotalDiscount,Cast(Left(Isnull(TaxPerc,0),4) as Varchar(10))+'%' as TaxPerc,
			Isnull(TaxAmount,0) as TaxAmount,TotalTax,Netamount,PrdDBDiscAmount
			FROM #RptSalesFree X LEFT OUTER JOIN SalesinvoiceProducttax SPT ON SPT.PrdSlNo=X.SlNo and SPT.Salid=X.SalId and TaxAmount>0
			)X	
		END
		IF @TaxBreakup=2
		BEGIN	
			--Without TaxBreakUp
			INSERT INTO RptBillWisePrdWise(SlNo,SalInvDate,SalinvNo,Salid,RmId,RmName,Rtrid,RtrCode,RtrName,Lcnid,Cmpid,PrdCtgValMainId,CmpPrdCtgId,
			Prdid,Prdccode,PrdName,Prdbatid,PrdBatCode,Rate,SalesQty,FreeQty,TotQty,GrossAmt,SchemeAmt,SplDiscount,
			CashDiscount,TotalDiscount,TaxPerc,TaxAmount,TotalTax,NetAmount,DiscBreakup,QtyBreakup,TaxBreakup,Usrid,SalInvRef,PrdDBDiscAmount)
			SELECT X.SlNo,SalInvDate,SalinvNo,X.Salid,X.RMID,X.RmName,X.Rtrid,RtrCode,RtrName,Lcnid,Cmpid,PrdCtgValMainId,CmpPrdCtgId,
			X.Prdid,Prdccode,PrdName,X.Prdbatid,PrdBatCode, Rate,SalesQty,FreeQty,TotQty,GrossAmt,SchemeAmt,SplDiscount,
			CashDiscount,TotalDiscount,0,0,Isnull(PrdTaxAmount,0) as TotalTax,Isnull(PrdNetAmount,0) as NetAmount,
			@DiscBreakup,@QtyBreakup,@TaxBreakup,@Pi_UsrId,SalInvRef,X.PrdDBDiscAmount
			FROM #RptSalesFree X LEFT OUTER JOIN SalesInvoiceProduct SIP (NOLOCK) ON X.Salid=SIP.SalId	
			and X.Prdid=SIP.Prdid and X.prdbatid=SIP.Prdbatid and X.SlNo=Sip.Slno
		END
		
END
GO
IF EXISTS(SELECT 'X' FROM SYSOBJECTS WHERE XTYPE='P' AND NAME='Proc_RptBillWisePrdWiseOutPut')
DROP PROCEDURE Proc_RptBillWisePrdWiseOutPut
GO
-- EXEC [Proc_RptBillWisePrdWiseOutPut] 183,1,0,'',0,0,1
CREATE PROCEDURE [Proc_RptBillWisePrdWiseOutPut]
	(
		@Pi_RptId  INT,
		@Pi_UsrId  INT,
		@Pi_SnapId  INT,
		@Pi_DbName  nvarchar(50),
		@Pi_SnapRequired INT,
		@Pi_GetFromSnap  INT,
		@Pi_CurrencyId  INT
	)
	AS
/************************************************************
* PROCEDURE : [Proc_RptBillWisePrdWiseOutPut]
* PURPOSE : To get the Product details
* CREATED BY : Murugan.R
* CREATED DATE : 30/09/2009
* NOTE  :
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*************************************************  
* [DATE]		[DEVELOPER]        [USER_STORY_ID]   [CR/BUG]       [DESCRIPTION]  
* 09-08-2018	Lakshman M         ILCRSTPAR1674       BZ          Excel reprot header tax perc & tax amount column hide tax amount validation added in report. 
* 13-12-2019	 MOHANA S		   CRCRSTPAR0079	   BZ		   UAT Reported Issue
* DATE      AUTHOR     CR\BZ		USER STORY ID		DESCRIPTION
------------------------------------------------
*08/05/2020 MURUGAN.R	CR			PARCS202100016		New Column added SalInvRef,PrdDBDiscAmount,RtrType
*************************************************************/
BEGIN
	SET NOCOUNT ON
	DECLARE @NewSnapId  AS INT
	DECLARE @DBNAME  AS  NVARCHAR(50)
	DECLARE @TblName  AS NVARCHAR(500)
	DECLARE @TblStruct  AS NVARCHAR(4000)
	DECLARE @TblFields  AS NVARCHAR(4000)
	DECLARE @sSql  AS  NVARCHAR(4000)
	DECLARE @ErrNo   AS INT
	DECLARE @PurDBName AS NVARCHAR(50)
	DECLARE @FromDate AS DATETIME
	DECLARE @ToDate   AS DATETIME
	DECLARE @CmpId   AS INT
	DECLARE @LcnId   AS INT
	DECLARE @SMId   AS INT
	DECLARE @RMId   AS INT
	DECLARE @RtrId   AS INT
	DECLARE @PrdCatId AS INT
	DECLARE @PrdBatId AS INT
	DECLARE @PrdId  AS INT
	DECLARE @SalId   AS BIGINT
	DECLARE @CancelValue AS INT
	DECLARE @BillStatus AS INT
	DECLARE @TaxBreakup AS INT	
	DECLARE @DiscBreakup AS INT
	DECLARE @QtyBreakup AS INT	
	SELECT @FromDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,10,@Pi_UsrId)
	SELECT @ToDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,11,@Pi_UsrId)
	SET @CmpId = (SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId))
	SET @LcnId = (SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,22,@Pi_UsrId))
	SET @PrdBatId =(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,7,@Pi_UsrId))
	SELECT @PurDBName = dbo.Fn_ReturnPurgeDBName(@FromDate,@ToDate)
	SET @TaxBreakup = (SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,241,@Pi_UsrId))
	EXEC Proc_ReturnRptProduct @Pi_RptId,@Pi_UsrId
	SET @PrdCatId = (SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,26,@Pi_UsrId))
	SET @PrdId = (SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,5,@Pi_UsrId))
	CREATE TABLE #RptWithOutTaxBreakup
		(
			SalInvDate datetime,
			SalinvNo Varchar(50),
			RouteName Varchar(75),		
			RtrCode Varchar(50),
			RtrName VarChar(200),			
			Prdccode Varchar(50),
			PrdName Varchar(200),
			PrdBatCode Varchar(75),
			Rate Numeric(36,4),
			SalesQty Int,
			FreeQty Int,
			TotQty Int,
			GrossAmt Numeric(36,4),
			SchemeAmt Numeric(36,4),
			SplDiscount Numeric(36,4),
			CashDiscount Numeric(36,4),
			TotalDiscount Numeric(36,4),
			TaxPerc NVARCHAR(200),		
			TaxAmount Numeric(36,4),				
			TotalTax Numeric(36,4),
			NetAmount Numeric(36,4),		
			DiscBreakup Int,
			QtyBreakup  Int,
			TaxBreakup Int,
		SalInvRef Varchar(50),
		PrdDBDiscAmount Numeric(36,4)
			
		)
		IF @TaxBreakup=2
		BEGIN
			SET @TblName = 'RptBillWisePrdWiseTaxBreakup'
			SET @TblStruct = 'SalInvDate datetime,
			SalinvNo Varchar(50),	
			RouteName Varchar(75),	
			RtrCode Varchar(50),
			RtrName VarChar(200),			
			Prdccode Varchar(50),
			PrdName Varchar(200),
			PrdBatCode Varchar(75),
			Rate Numeric(36,4),
			SalesQty Int,
			FreeQty Int,
			TotQty Int,
			GrossAmt Numeric(36,4),
			SchemeAmt Numeric(36,4),
			SplDiscount Numeric(36,4),
			CashDiscount Numeric(36,4),
			TotalDiscount Numeric(36,4),
			TotalTax Numeric(36,4),
			NetAmount Numeric(36,4),		
			DiscBreakup Int,
			QtyBreakup  Int,
			TaxBreakup Int,
		SalInvRef Varchar(50),
		PrdDBDiscAmount Numeric(36,4)'
	
			SET @TblFields = 'SalInvDate,SalinvNo,RouteName,RtrCode,RtrName,Prdccode,
			 PrdName,PrdBatCode,Rate,SalesQty,FreeQty,TotQty,GrossAmt,SchemeAmt,
			 SplDiscount,CashDiscount,TotalDiscount,TotalTax,NetAmount,DiscBreakup,QtyBreakup,TaxBreakup,SalInvRef,PrdDBDiscAmount'
		END
		IF @Pi_GetFromSnap = 1
		BEGIN
			Select @DBNAME = DBName  FROM SnapShotHd WHERE SnapId = @Pi_SnapId
			SET @DBNAME = @DBNAME
		END
		ELSE
		BEGIN
			Select @DBNAME = CounterDesc  FROM CounterConfiguration WHERE SlNo =3
			SET @DBNAME = @PI_DBNAME + @DBNAME
		END
		
	IF @Pi_GetFromSnap = 0  --To Generate For New Report Data
	BEGIN
		EXEC Proc_RptBillWisePrdWise @Pi_RptId,@Pi_UsrId
		--SET @TaxBreakup=2	
		SELECT DISTINCT @DiscBreakup=DiscBreakup FROM RptBillWisePrdWise WHERE UsrId=@Pi_UsrId
		SELECT DISTINCT @QtyBreakup=QtyBreakup FROM RptBillWisePrdWise WHERE UsrId=@Pi_UsrId
		INSERT INTO #RptWithOutTaxBreakup (SalInvDate,SalinvNo,RouteName,RtrCode,RtrName,Prdccode,
				 PrdName,PrdBatCode,Rate,SalesQty,FreeQty,TotQty,GrossAmt,SchemeAmt,
				 SplDiscount,CashDiscount,TotalDiscount,TaxPerc,TaxAmount,TotalTax,NetAmount,DiscBreakup,QtyBreakup,TaxBreakup,SalInvRef,PrdDBDiscAmount)
			SELECT DISTINCT SalInvDate,SalinvNo,RmName,RtrCode,RtrName,Prdccode,
				PrdName,PrdBatCode, dbo.Fn_ConvertCurrency(Rate,@Pi_CurrencyId),SalesQty,FreeQty,TotQty,
				dbo.Fn_ConvertCurrency(GrossAmt,@Pi_CurrencyId),dbo.Fn_ConvertCurrency(SchemeAmt,@Pi_CurrencyId),
				dbo.Fn_ConvertCurrency(SplDiscount,@Pi_CurrencyId),dbo.Fn_ConvertCurrency(CashDiscount,@Pi_CurrencyId),
				dbo.Fn_ConvertCurrency(TotalDiscount,@Pi_CurrencyId),
				TaxPerc,
				dbo.Fn_ConvertCurrency(TaxAmount,@Pi_CurrencyId),			
				dbo.Fn_ConvertCurrency(TotalTax,@Pi_CurrencyId),
				dbo.Fn_ConvertCurrency(NetAmount,@Pi_CurrencyId),DiscBreakup,QtyBreakup,TaxBreakup,
				SalInvRef,PrdDBDiscAmount
		FROM RptBillWisePrdWise
		WHERE  UsrId=@Pi_UsrId
		AND  (CmpId = (CASE @CmpId WHEN 0 THEN CmpId ELSE 0 END) OR
		CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId)))
		AND
		(LcnId = (CASE @LcnId WHEN 0 THEN LcnId ELSE 0 END) OR
		LcnId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,22,@Pi_UsrId)))
		AND
		(PrdId = (CASE @PrdCatId WHEN 0 THEN PrdId Else 0 END) OR
		PrdId in (SELECT iCountid from Fn_ReturnRptFilters(@Pi_RptId,26,@Pi_UsrId)))
		AND
		(PrdId = (CASE @PrdId WHEN 0 THEN PrdId Else 0 END) OR
		PrdId in (SELECT iCountid from Fn_ReturnRptFilters(@Pi_RptId,5,@Pi_UsrId)))
		AND
		(PrdBatId = (CASE @PrdBatId WHEN 0 THEN PrdBatId Else 0 END) OR
		PrdBatId in (SELECT iCountid from Fn_ReturnRptFilters(@Pi_RptId,7,@Pi_UsrId)))
		IF LEN(@PurDBName) > 0
		BEGIN
			EXEC Proc_PurgedDB @PurDBName,@TblName,@Po_PurgeErrno = @ErrNo OUTPUT
			SET @SSQL = 'INSERT INTO #RptWithOutTaxBreakup ' +
			'(' + @TblFields + ')' +
			' SELECT ' + @TblFields + ' FROM ['  + @PurDBName + '].dbo.' + @TblName
			+ ' WHERE UsrId=' + CAST(@Pi_UsrId AS nVarchar(10)) + ''
			+ 'AND  (CmpId = (CASE ' + CAST(@CmpId AS nVarchar(10)) + ' WHEN 0 THEN CmpId ELSE 0 END) OR '
			+ 'CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(' +
			+ CAST(@Pi_RptId AS nVarchar(10)) + ',4,' + CAST(@Pi_UsrId AS nVarchar(10)) + '))) '
			+ 'AND (LcnId = (CASE ' + CAST(@LcnId AS nVarchar(10)) + ' WHEN 0 THEN LcnId ELSE 0 END) OR '
			+ 'LcnId in (SELECT iCountid FROM Fn_ReturnRptFilters(' +
			+ 'AND (PrdId = (CASE ' + CAST(@PrdCatId AS nVarchar(10)) + ' WHEN 0 THEN PrdId Else 0 END) OR '
			+ 'PrdId in (SELECT iCountid from Fn_ReturnRptFilters(' +
			+ CAST(@Pi_RptId AS nVarchar(10)) + ',26,' + CAST(@Pi_UsrId AS nVarchar(10)) + ')))'
			+ 'AND (PrdId = (CASE ' + CAST(@PrdId AS nVarchar(10)) + ' WHEN 0 THEN PrdId Else 0 END) OR '
			+ 'PrdId in (SELECT iCountid from Fn_ReturnRptFilters(' +
			+ CAST(@Pi_RptId AS nVarchar(10)) + ',5,' + CAST(@Pi_UsrId AS nVarchar(10)) + ')))'
			+ 'AND (PrdBatId = (CASE ' + CAST(@PrdBatId AS nVarchar(10)) + ' WHEN 0 THEN PrdBatId Else 0 END) OR '
			+ 'PrdBatId in (SELECT iCountid from Fn_ReturnRptFilters(' +
			+ CAST(@Pi_RptId AS nVarchar(10)) + ',7,' + CAST(@Pi_UsrId AS nVarchar(10)) + ')))'
			EXEC (@SSQL)
			PRINT 'Retrived Data From Purged Table'
		END
		IF @Pi_SnapRequired = 1
		BEGIN
			SELECT @NewSnapId = @Pi_SnapId
			EXEC Proc_SnapShot_Report @NewSnapId,@Pi_UsrId,@Pi_RptId,@Pi_DbName,@TblName,@TblStruct,
			@Pi_GetFromSnap,@Po_SnapErrno = @ErrNo OUTPUT
			IF @ErrNo = 0
			BEGIN
				SET @sSql = 'INSERT INTO [' + @DBNAME + '].dbo.' + @TblName +
				'(SnapId,UserId,RptId,' + @TblFields + ')' +
				' SELECT ' + CAST(@NewSnapId AS VARCHAR(10)) +
				' ,' + CAST(@Pi_UsrId AS VARCHAR(10)) +
				' ,' + CAST(@Pi_RptId AS VARCHAR(10)) + ', * FROM #RptWithOutTaxBreakup'
				EXEC (@SSQL)
				PRINT 'Saved Data Into SnapShot Table'
			END
		END
	END
	ELSE    --To Retrieve Data From Snap Data
	BEGIN
		EXEC Proc_SnapShot_Report @Pi_SnapId,@Pi_UsrId,@Pi_RptId,@Pi_DbName,@TblName,@TblStruct,
		@Pi_GetFromSnap,@Po_SnapErrno = @ErrNo OUTPUT
		PRINT @ErrNo
		IF @ErrNo = 0
		BEGIN
			SET @SSQL = 'INSERT INTO #RptWithOutTaxBreakup ' +
			'(' + @TblFields + ')' +
			' SELECT ' + @TblFields + ' FROM ['  + @DBNAME + '].dbo.' + @TblName +
			' WHERE SNAPID = ' + CAST(@Pi_SnapId AS VARCHAR(10)) +
			' AND UserId = ' + CAST(@Pi_UsrId AS VARCHAR(10)) +
			' AND RptId = ' + CAST(@Pi_RptId AS VARCHAR(10))
			EXEC (@SSQL)
			PRINT 'Retrived Data From Snap Shot Table'
		END
		ELSE
		BEGIN
			PRINT 'DataBase or Table not Found'
		END
	END
	--Check for Report Data
	Delete From RptDataCount Where RptId = @Pi_RptId AND UserId = @Pi_UsrId
	IF @TaxBreakup=1
	BEGIN	
		INSERT INTO RptDataCount (RptId,RecCount,ErrNo,UserId)
		SELECT @Pi_RptId,Count(*) as RecCount,@ErrNo,@Pi_UsrId FROM #RptWithOutTaxBreakup
	END
	IF @TaxBreakup=2
	BEGIN	
		INSERT INTO RptDataCount (RptId,RecCount,ErrNo,UserId)
		SELECT @Pi_RptId,Count(*) as RecCount,@ErrNo,@Pi_UsrId FROM #RptWithOutTaxBreakup 	
	END
	DELETE FROM RptWithOutTaxBreakup_Excel
	DELETE FROM RptColValues WHERE RptId=@Pi_RptId AND Usrid=@Pi_UsrId	
		
	IF EXISTS (SELECT *	FROM RptDataCount WHERE RptId=183 and RecCount>0)
	BEGIN
	--Excel Report
	
		DELETE FROM RptExcelHeaders Where RptId=@Pi_RptId
		INSERT INTO RptExcelHeaders (RptId,SlNo,FieldName,DisplayName,DisplayFlag,LngId)	
		SELECT @Pi_RptId,ColId ,Name,Name,1,1 FROM SYSCOLUMNS S WHERE Id In (Select Id From SysObjects where Xtype='U' and Name='RptWithOutTaxBreakup_Excel')	
		IF (@DiscBreakup=2 AND @QtyBreakup=2)
		BEGIN	
			--UPDATE RptExcelHeaders SET DisplayFlag=0 WHERE Slno IN(9,10,13,14,15)	and RptId=@Pi_RptId	
			UPDATE RptExcelHeaders SET DisplayFlag=0 WHERE Slno IN(12,16,17,18,19)	and RptId=@Pi_RptId		
		END	
		IF (@DiscBreakup=1  AND @QtyBreakup=2)
		BEGIN		
			--UPDATE RptExcelHeaders SET DisplayFlag=0 WHERE Slno IN(9,10) and RptId=@Pi_RptId
			UPDATE RptExcelHeaders SET DisplayFlag=0 WHERE Slno IN(12) and RptId=@Pi_RptId				
		END	
		IF (@DiscBreakup=2  AND @QtyBreakup=1)
		BEGIN		
			--UPDATE RptExcelHeaders SET DisplayFlag=0 WHERE Slno  In(13,14,15) and RptId=@Pi_RptId
			UPDATE RptExcelHeaders SET DisplayFlag=0 WHERE Slno  In(16,17,18,19) and RptId=@Pi_RptId
		END
		IF @TaxBreakup = 1
		BEGIN		
			--UPDATE RptExcelHeaders SET DisplayFlag=0 WHERE Slno IN(18,19) and RptId=@Pi_RptId ------------ Added By Lakshman M Dated On 09/08/2018 PMS ID:ILCRSTPAR1674 Excel header hide the columns in report
			UPDATE RptExcelHeaders SET DisplayFlag=0 WHERE Slno IN(21,22) and RptId=@Pi_RptId ------------ Added By Lakshman M Dated On 09/08/2018 PMS ID:ILCRSTPAR1674 Excel header hide the columns in report
		END	
		IF @TaxBreakup = 2
		BEGIN		
			--UPDATE RptExcelHeaders SET DisplayFlag=0 WHERE Slno IN(18,19) and RptId=@Pi_RptId
			UPDATE RptExcelHeaders SET DisplayFlag=0 WHERE Slno IN(21,22) and RptId=@Pi_RptId ------------ Added By Lakshman M Dated On 09/08/2018 PMS ID:ILCRSTPAR1674 Excel header hide the columns in report				
		END
		
		INSERT INTO RptWithOutTaxBreakup_Excel([Bill Date],[Bill No],[Order Ref No],[Retailer Type],[Route Name],[Retailer Code],[Retailer Name],[Product Code],[Product Name],
					[Batch Code],[Selling Rate],[Sales Qty],[Offer Qty],[Total Qty],[Gross Amt],[Scheme Amt],[SplDiscount],
					[Cash Discount],[DB Discount],[Total Discount],TaxPerc,TaxAmount,[Total Tax Amount],[NetAmount ])
		SELECT SalInvDate,SalinvNo,SalInvRef,'' as [Retailer Type],RouteName,RtrCode,RtrName,Prdccode,
			 PrdName,PrdBatCode,Rate,SalesQty,FreeQty,TotQty,GrossAmt,SchemeAmt,
			 SplDiscount,CashDiscount,PrdDBDiscAmount,TotalDiscount,TaxPerc,TaxAmount,TotalTax,NetAmount from #RptWithOutTaxBreakup
		
		UPDATE A SET [Retailer Type]=CASE RtrType WHEN 1 THEN 'Retailer'
					WHEN 2 THEN 'Sub Stockiest'
					WHEN 3 THEN 'Consumer'
					END 	FROM 	RptWithOutTaxBreakup_Excel A INNER JOIN Retailer B ON A.[Retailer Code]=B.RtrCode 

		SELECT * FROM RptWithOutTaxBreakup_Excel
	--End
		--Grid Report
		
		DELETE FROM SpreadDisplayColumns WHERE MasterId=@Pi_RptId
		INSERT INTO SpreadDisplayColumns
		select @Pi_RptId,
		(select count(*) from RptExcelHeaders where slno <= t.slno and DisplayFlag=1 and RptId=@Pi_RptId),
		FieldName,1,1,1,GetDate(),1,Getdate() from RptExcelHeaders t where RptId=@Pi_RptId and DisplayFlag=1
		order by slno
		
		DECLARE @ColName as Varchar(4000)
		DECLARE @ColName1 as Varchar(4000)
		DECLARE @Gsql as Varchar(8000)
		DECLARE @Colcnt as INT
		SET @ColName=''
		SET @ColName1=''
		SELECT @ColName=@ColName+'['+ColumnName +'],'  FROM SpreadDisplayColumns WHERe MasterId=@Pi_RptId
		SELECT @Colcnt=Count(*) FROM SpreadDisplayColumns S WHERE MasterId=@Pi_RptId
		SET @ColName=SUBSTRING(@ColName,1,Len(@ColName)-1)
		SELECT @ColName1=@ColName1+'['+Name +'],' FROM SYSCOLUMNS S WHERE Id In (Select Id From SysObjects where Xtype='U' and Name='RptColvalues') 
		and ColId<=@Colcnt ORDER BY S.CoLid
		SET @ColName1=SUBSTRING(@ColName1,1,Len(@ColName1)-1)
		SET @Gsql= 'INSERT INTO RptColvalues ( '+@ColName1+',Rptid,Usrid)
		SELECT '+@ColName+ ','+
		CAST(@Pi_RptId AS nVarchar(10))+','+ CAST(@Pi_UsrId AS nVarchar(10)) +'FROM RptWithOutTaxBreakup_Excel Order By [Bill Date],[Bill No]'
		EXEC (@Gsql)
	--END Grid Report
	END
	RETURN
END
GO
IF EXISTS(SELECT 'X' FROM SYSOBJECTS WHERE XTYPE='P' AND NAME='Proc_RptBillWiseSalesReportParle')
DROP PROCEDURE Proc_RptBillWiseSalesReportParle
GO
---EXEC Proc_RptBillWiseSalesReportParle 285,1,0,'PARLE',0,0,1
CREATE PROCEDURE [Proc_RptBillWiseSalesReportParle]  
(  
 @Pi_RptId  INT,  
 @Pi_UsrId  INT,  
 @Pi_SnapId  INT,  
 @Pi_DbName  nvarchar(50),  
 @Pi_SnapRequired INT,  
 @Pi_GetFromSnap  INT,  
 @Pi_CurrencyId  INT  
)  
AS  
/****************************************************************************  
* PROCEDURE  : Proc_RptBillWiseSalesReportParle  
* PURPOSE    : To Generate Sales Bill Wise  
* CREATED BY : Boopathy.P  
* CREATED ON : 30/07/2007  
* MODIFICATION  
*****************************************************************************  
* DATE        AUTHOR      CR\BUR			USER STORY ID					DESCRIPTION  
07/12/2007  MURUGAN.R														Adding Retailer Category  
01-07-2014  Jai Ganesh R													Order By Billdate, Bll Number added in the Final Output
08/05/2020	MURUGAN.R		CR				PARCS202100016					Bill Doc No and Retailer Type added
*****************************************************************************/  
SET NOCOUNT ON  
BEGIN  
DECLARE @NewSnapId  AS INT  
DECLARE @DBNAME  AS  nvarchar(50)  
DECLARE @TblName  AS nvarchar(500)  
DECLARE @TblStruct  AS nVarchar(4000)  
DECLARE @TblFields  AS nVarchar(4000)  
DECLARE @sSql  AS  nVarChar(4000)  
DECLARE @ErrNo   AS INT  
DECLARE @PurDBName AS nVarChar(50)  
--Filter Variable  
DECLARE @FromDate AS DATETIME  
DECLARE @ToDate   AS DATETIME  
DECLARE @FromBillNo AS  BIGINT  
DECLARE @TOBillNo   AS  BIGINT  
DECLARE @CmpId      AS  INT  
DECLARE @LcnId      AS  INT  
DECLARE @SMId   AS INT  
DECLARE @RMId   AS INT  
DECLARE @RtrId   AS INT  
DECLARE @BillType    AS INT  
DECLARE @BillMode    AS INT  
DECLARE @CtgLevelId AS  INT  
DECLARE @RtrClassId AS  INT  
DECLARE @CtgMainId  AS  INT  
DECLARE @BillStatus AS INT  
DECLARE @CancelValue AS INT 
DECLARE @SalId AS BIGINT 
--Till Here  
--Assgin Value for the Filter Variable  
SET @FromDate =(SELECT  TOP 1 dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,10,@Pi_UsrId))  
SET @ToDate = (SELECT  TOP 1 dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,11,@Pi_UsrId))  
SET @SMId = (SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,1,@Pi_UsrId))  
SET @RMId = (SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,2,@Pi_UsrId))  
SET @RtrId =(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,3,@Pi_UsrId))  
SET @CmpId =(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId))  
SET @LcnId =(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,22,@Pi_UsrId))  
SET @SalId =(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,14,@Pi_UsrId)) 
SET @BillType =(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,17,@Pi_UsrId))  
SET @BillMode =(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,33,@Pi_UsrId))  
SET @CtgLevelId =(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,29,@Pi_UsrId))  
SET @RtrClassId =(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,31,@Pi_UsrId))  
SET @CtgMainId=(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,30,@Pi_UsrId))  
SET @BillStatus =(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,192,@Pi_UsrId))  
SET @CancelValue =(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,193,@Pi_UsrId))  
--Till Here  
SELECT @PurDBName = dbo.Fn_ReturnPurgeDBName(@FromDate,@ToDate)  
--Till Here  
CREATE TABLE #RptBillWiseSalesReportParle  
(  
  [Bill Number]         NVARCHAR(50),  
  [Bill Type]           NVARCHAR(25),  
  [Bill Mode]           NVARCHAR(25),  
  [Bill Date]           DATETIME,  
  [Retailer Name]       NVARCHAR(50),  
  [Gross Amount]        NUMERIC (38,6),  
  [Scheme Disc]         NUMERIC (38,6),  
  [Sales Return]        NUMERIC (38,6),  
  [Replacement]         NUMERIC (38,6),  
  [Discount]            NUMERIC (38,6),  
  [Tax Amount]          NUMERIC (38,6),  
  [Credit Adjustmant]   NUMERIC (38,6),  
  [Debit Adjustment]    NUMERIC (38,6),  
  [Net Amount]          NUMERIC (38,6),  
  [DlvStatus]           INT  
)  
SET @TblName = 'RptBillWiseSalesReportParle'  
SET @TblStruct = '     
  [Bill Number]         NVARCHAR(50),  
  [Bill Type]           NVARCHAR(25),  
  [Bill Mode]           NVARCHAR(25),  
  [Bill Date]           DATETIME,  
  [Retailer Name]       NVARCHAR(50),  
  [Gross Amount]        NUMERIC (38,6),  
  [Scheme Disc]         NUMERIC (38,6),  
  [Sales Return]        NUMERIC (38,6),  
  [Replacement]         NUMERIC (38,6),  
  [Discount]            NUMERIC (38,6),  
  [Tax Amount]          NUMERIC (38,6),  
  [Credit Adjustmant]   NUMERIC (38,6),  
  [Debit Adjustment]    NUMERIC (38,6),  
  [Net Amount]          NUMERIC (38,6),  
  [DlvStatus]           INT'  
SET @TblFields = '[Bill Number],[Bill Type],[Bill Mode],[Bill Date],[Retailer Name],  
  [Gross Amount],[Scheme Disc],[Sales Return],[Replacement],[Discount],  
  [Tax Amount],[Credit Adjustmant],[Debit Adjustment],[Net Amount],[DlvStatus]'  
IF @Pi_GetFromSnap = 1  
   BEGIN  
 Select @DBNAME = DBName  FROM SnapShotHd WHERE SnapId = @Pi_SnapId  
 SET @DBNAME =  @DBNAME  
   END  
ELSE  
   BEGIN  
 Select @DBNAME = CounterDesc  FROM CounterConfiguration WHERE SlNo =3  
 SET @DBNAME = @PI_DBNAME + @DBNAME  
   END  
IF @Pi_GetFromSnap = 0  --To Generate For New Report Data  
   BEGIN  
 PRINT @CtgLevelId   
 IF @FromBillNo <> 0 AND @TOBillNo <> 0  
 BEGIN  
  IF @CtgLevelId=1  
  BEGIN   
   IF EXISTS (SELECT * FROM sysobjects WHERE xtype='U' AND name='TempRetailerCategory')  
    BEGIN       
     DROP TABLE TempRetailerCategory  
    END   
    SELECT * INTO TempRetailerCategory FROM RetailerCategory   
     WHERE CtgLinkId IN (SELECT CtgMainId FROM RetailerCategory WHERE CtgLevelId IN (SELECT CtgLevelId FROM RetailerCategoryLevel   
      WHERE CtgLevelId=1) AND CtgMainId=(CASE @CtgMainId WHEN 0 THEN CtgMainId ELSE 0 END) OR  
       CtgMainId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,30,@Pi_UsrId)))  
   INSERT INTO #RptBillWiseSalesReportParle([Bill Number],[Bill Type],[Bill Mode],[Bill Date],[Retailer Name],  
    [Gross Amount],[Scheme Disc],[Sales Return],[Replacement],[Discount],  
    [Tax Amount],[Credit Adjustmant],[Debit Adjustment],[Net Amount],[DlvStatus])  
   SELECT [Bill Number],[Bill Type],[Bill Mode],[Bill Date],  
      [Retailer Name],[Gross Amount],[Scheme Disc]  
     ,[Sales Return], [Replacement],[Discount],[Tax Amount],[Credit Adjustment]  
     ,[Debit Adjustment],[Net Amount],[DlvSts]  
    FROM view_SalesBillWise A  
   INNER JOIN (  
   SELECT DISTINCT R.Rtrid FROM Retailer R WITH (NOLOCK),RetailerValueClassMap RVCM WITH (NOLOCK),RetailerValueClass RVC WITH (NOLOCK)  
   ,TempRetailerCategory RC WITH (NOLOCK),RetailerCategoryLevel RCL  
   WHere  R.Rtrid = RVCM.RtrId AND RVCM.RtrValueClassId = RVC.RtrClassId  
   AND  RVC.CtgMainId=RC.CtgMainId AND  RCL.CtgLevelId=RC.CtgLevelId  
--   AND (RCL.CtgLevelId=(CASE @CtgLevelId WHEN 0 THEN RCL.CtgLevelId ELSE 0 END) OR  
--   RCL.CtgLevelId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,29,@Pi_UsrId)))  
--   AND (RC.CtgMainId=(CASE @CtgMainId WHEN 0 THEN RC.CtgMainId ELSE 0 END) OR  
--   RC.CtgMainId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,30,@Pi_UsrId)))  
   AND (RVC.RtrClassId=(CASE @RtrClassId WHEN 0 THEN RVC.RtrClassId ELSE 0 END) OR  
   RVC.RtrClassId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,31,@Pi_UsrId)))  
   AND (RVC.CmpId=(CASE @CmpId WHEN 0 THEN RVC.CmpId ELSE 0 END) OR  
   RVC.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId)))  
     )X On  X.Rtrid=A.RTRId    
     WHERE (A.RtrId = (CASE @RtrId WHEN 0 THEN A.RtrId ELSE 0 END) OR  
       A.RtrId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,3,@Pi_UsrId)))  
     AND (RMId=(CASE @RMId WHEN 0 THEN RMId ELSE 0 END) OR  
       RMId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,2,@Pi_UsrId)))  
    AND (LcnId=(CASE @LcnId WHEN 0 THEN LcnId ELSE 0 END) OR  
       LcnId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,22,@Pi_UsrId)))  
     AND (SMId=(CASE @SMId WHEN 0 THEN SMId ELSE 0 END) OR  
       SMId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,1,@Pi_UsrId)))  
     AND ([BillTypeId] =(CASE @BillType WHEN 0 THEN [BillTypeId] ELSE 0 END) OR  
       [BillTypeId] in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,17,@Pi_UsrId)))  
     AND ([BillModeId]=(CASE @BillMode WHEN 0 THEN [BillModeId] ELSE 0 END) OR  
       [BillModeId] in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,33,@Pi_UsrId)))
     AND (SalId = (CASE @SalId WHEN 0 THEN SalId ELSE 0 END) OR
					SalId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,14,@Pi_UsrId)))
					  
     AND (DlvSts=(CASE @BillStatus WHEN 0 THEN DlvSts ELSE @BillStatus END))   
     AND ([Bill Date] BETWEEN @FromDate and @ToDate)  
  END  
        ELSE  
        BEGIN   
   INSERT INTO #RptBillWiseSalesReportParle([Bill Number],[Bill Type],[Bill Mode],[Bill Date],[Retailer Name],  
    [Gross Amount],[Scheme Disc],[Sales Return],[Replacement],[Discount],  
    [Tax Amount],[Credit Adjustmant],[Debit Adjustment],[Net Amount],[DlvStatus])  
   SELECT [Bill Number],[Bill Type],[Bill Mode],[Bill Date],  
      [Retailer Name],[Gross Amount],[Scheme Disc]  
     ,[Sales Return], [Replacement],[Discount],[Tax Amount],[Credit Adjustment]  
     ,[Debit Adjustment],[Net Amount],[DlvSts]  
    FROM view_SalesBillWise A  
   INNER JOIN (  
   SELECT DISTINCT R.Rtrid FROM Retailer R WITH (NOLOCK),RetailerValueClassMap RVCM WITH (NOLOCK),RetailerValueClass RVC WITH (NOLOCK)  
   ,RetailerCategory RC WITH (NOLOCK),RetailerCategoryLevel RCL  
   WHere  R.Rtrid = RVCM.RtrId AND RVCM.RtrValueClassId = RVC.RtrClassId  
   AND  RVC.CtgMainId=RC.CtgMainId AND  RCL.CtgLevelId=RC.CtgLevelId  
   AND (RCL.CtgLevelId=(CASE @CtgLevelId WHEN 0 THEN RCL.CtgLevelId ELSE 0 END) OR  
   RCL.CtgLevelId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,29,@Pi_UsrId)))  
   AND (RC.CtgMainId=(CASE @CtgMainId WHEN 0 THEN RC.CtgMainId ELSE 0 END) OR  
   RC.CtgMainId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,30,@Pi_UsrId)))  
   AND (RVC.RtrClassId=(CASE @RtrClassId WHEN 0 THEN RVC.RtrClassId ELSE 0 END) OR  
   RVC.RtrClassId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,31,@Pi_UsrId)))  
   AND (RVC.CmpId=(CASE @CmpId WHEN 0 THEN RVC.CmpId ELSE 0 END) OR  
   RVC.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId)))  
     )X On  X.Rtrid=A.RTRId    
     WHERE (A.RtrId = (CASE @RtrId WHEN 0 THEN A.RtrId ELSE 0 END) OR  
       A.RtrId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,3,@Pi_UsrId)))  
     AND (RMId=(CASE @RMId WHEN 0 THEN RMId ELSE 0 END) OR  
       RMId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,2,@Pi_UsrId)))  
    AND (LcnId=(CASE @LcnId WHEN 0 THEN LcnId ELSE 0 END) OR  
       LcnId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,22,@Pi_UsrId)))  
     AND (SMId=(CASE @SMId WHEN 0 THEN SMId ELSE 0 END) OR  
       SMId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,1,@Pi_UsrId)))  
     AND ([BillTypeId] =(CASE @BillType WHEN 0 THEN [BillTypeId] ELSE 0 END) OR  
       [BillTypeId] in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,17,@Pi_UsrId)))  
     AND ([BillModeId]=(CASE @BillMode WHEN 0 THEN [BillModeId] ELSE 0 END) OR  
       [BillModeId] in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,33,@Pi_UsrId))) 
     AND (SalId = (CASE @SalId WHEN 0 THEN SalId ELSE 0 END) OR
					SalId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,14,@Pi_UsrId)))
					   
     AND (DlvSts=(CASE @BillStatus WHEN 0 THEN DlvSts ELSE @BillStatus END))   
     AND ([Bill Date] Between @FromDate and @ToDate)  
  END   
 END  
 ELSE  
 BEGIN  
  IF @CtgLevelId=1  
  BEGIN   
   IF EXISTS (SELECT * FROM sysobjects WHERE xtype='U' AND name='TempRetailerCategory')  
    BEGIN       
     DROP TABLE TempRetailerCategory  
    END   
    SELECT * INTO TempRetailerCategory FROM RetailerCategory   
     WHERE CtgLinkId IN (SELECT CtgMainId FROM RetailerCategory WHERE CtgLevelId IN (SELECT CtgLevelId FROM RetailerCategoryLevel   
      WHERE CtgLevelId=1) AND CtgMainId=(CASE @CtgMainId WHEN 0 THEN CtgMainId ELSE 0 END) OR  
       CtgMainId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,30,@Pi_UsrId)))  
   INSERT INTO #RptBillWiseSalesReportParle([Bill Number],[Bill Type],[Bill Mode],[Bill Date],[Retailer Name],  
    [Gross Amount],[Scheme Disc],[Sales Return],[Replacement],[Discount],  
    [Tax Amount],[Credit Adjustmant],[Debit Adjustment],[Net Amount],[DlvStatus])  
   SELECT [Bill Number],[Bill Type],[Bill Mode],[Bill Date],  
      [Retailer Name],[Gross Amount],[Scheme Disc]  
     ,[Sales Return], [Replacement],[Discount],[Tax Amount],[Credit Adjustment]  
     ,[Debit Adjustment],[Net Amount],[DlvSts]  
     from view_SalesBillWise A  
   INNER JOIN (  
   SELECT DISTINCT R.Rtrid FROM Retailer R WITH (NOLOCK),RetailerValueClassMap RVCM WITH (NOLOCK),RetailerValueClass RVC WITH (NOLOCK)  
   ,TempRetailerCategory RC WITH (NOLOCK),RetailerCategoryLevel RCL  
   WHere  R.Rtrid = RVCM.RtrId AND RVCM.RtrValueClassId = RVC.RtrClassId  
   AND  RVC.CtgMainId=RC.CtgMainId AND  RCL.CtgLevelId=RC.CtgLevelId  
--   AND (RCL.CtgLevelId=(CASE @CtgLevelId WHEN 0 THEN RCL.CtgLevelId ELSE 0 END) OR  
--   RCL.CtgLevelId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,29,@Pi_UsrId)))  
--   AND (RC.CtgMainId=(CASE @CtgMainId WHEN 0 THEN RC.CtgMainId ELSE 0 END) OR  
--   RC.CtgMainId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,30,@Pi_UsrId)))  
   AND (RVC.RtrClassId=(CASE @RtrClassId WHEN 0 THEN RVC.RtrClassId ELSE 0 END) OR  
   RVC.RtrClassId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,31,@Pi_UsrId)))  
   AND (RVC.CmpId=(CASE @CmpId WHEN 0 THEN RVC.CmpId ELSE 0 END) OR  
   RVC.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId)))  
     )X On  X.Rtrid=A.RTRId   
     WHERE (A.RtrId = (CASE @RtrId WHEN 0 THEN A.RtrId ELSE 0 END) OR  
       A.RtrId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,3,@Pi_UsrId)))  
     AND (RMId=(CASE @RMId WHEN 0 THEN RMId ELSE 0 END) OR  
       RMId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,2,@Pi_UsrId)))  
    AND (LcnId=(CASE @LcnId WHEN 0 THEN LcnId ELSE 0 END) OR  
       LcnId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,22,@Pi_UsrId)))  
     AND (SMId=(CASE @SMId WHEN 0 THEN SMId ELSE 0 END) OR  
       SMId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,1,@Pi_UsrId)))  
     AND ([BillTypeId] =(CASE @BillType WHEN 0 THEN [BillTypeId] ELSE 0 END) OR  
       [BillTypeId] in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,17,@Pi_UsrId)))  
     AND ([BillModeId]=(CASE @BillMode WHEN 0 THEN [BillModeId] ELSE 0 END) OR  
       [BillModeId] in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,33,@Pi_UsrId))) 
     AND (SalId = (CASE @SalId WHEN 0 THEN SalId ELSE 0 END) OR
					SalId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,14,@Pi_UsrId)))
										   
     AND ([DlvSts]=(CASE @BillStatus WHEN 0 THEN [DlvSts] ELSE 0 END) OR  
       [DlvSts] in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,192,@Pi_UsrId)))  
     AND ([Bill Date] Between @FromDate and @ToDate)  
  END   
  ELSE  
  BEGIN   
   INSERT INTO #RptBillWiseSalesReportParle([Bill Number],[Bill Type],[Bill Mode],[Bill Date],[Retailer Name],  
    [Gross Amount],[Scheme Disc],[Sales Return],[Replacement],[Discount],  
    [Tax Amount],[Credit Adjustmant],[Debit Adjustment],[Net Amount],[DlvStatus])  
   SELECT [Bill Number],[Bill Type],[Bill Mode],[Bill Date],  
      [Retailer Name],[Gross Amount],[Scheme Disc]  
     ,[Sales Return], [Replacement],[Discount],[Tax Amount],[Credit Adjustment]  
     ,[Debit Adjustment],[Net Amount],[DlvSts]  
     from view_SalesBillWise A  
   INNER JOIN (  
   SELECT DISTINCT R.Rtrid FROM Retailer R WITH (NOLOCK),RetailerValueClassMap RVCM WITH (NOLOCK),RetailerValueClass RVC WITH (NOLOCK)  
   ,RetailerCategory RC WITH (NOLOCK),RetailerCategoryLevel RCL  
   WHere  R.Rtrid = RVCM.RtrId AND RVCM.RtrValueClassId = RVC.RtrClassId  
   AND  RVC.CtgMainId=RC.CtgMainId AND  RCL.CtgLevelId=RC.CtgLevelId  
   AND (RCL.CtgLevelId=(CASE @CtgLevelId WHEN 0 THEN RCL.CtgLevelId ELSE 0 END) OR  
   RCL.CtgLevelId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,29,@Pi_UsrId)))  
   AND (RC.CtgMainId=(CASE @CtgMainId WHEN 0 THEN RC.CtgMainId ELSE 0 END) OR  
   RC.CtgMainId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,30,@Pi_UsrId)))  
   AND (RVC.RtrClassId=(CASE @RtrClassId WHEN 0 THEN RVC.RtrClassId ELSE 0 END) OR  
   RVC.RtrClassId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,31,@Pi_UsrId)))  
   AND (RVC.CmpId=(CASE @CmpId WHEN 0 THEN RVC.CmpId ELSE 0 END) OR  
   RVC.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId)))  
     )X On  X.Rtrid=A.RTRId   
     WHERE (A.RtrId = (CASE @RtrId WHEN 0 THEN A.RtrId ELSE 0 END) OR  
       A.RtrId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,3,@Pi_UsrId)))  
     AND (RMId=(CASE @RMId WHEN 0 THEN RMId ELSE 0 END) OR  
       RMId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,2,@Pi_UsrId)))  
    AND (LcnId=(CASE @LcnId WHEN 0 THEN LcnId ELSE 0 END) OR  
       LcnId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,22,@Pi_UsrId)))  
     AND (SMId=(CASE @SMId WHEN 0 THEN SMId ELSE 0 END) OR  
       SMId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,1,@Pi_UsrId)))  
     AND ([BillTypeId] =(CASE @BillType WHEN 0 THEN [BillTypeId] ELSE 0 END) OR  
       [BillTypeId] in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,17,@Pi_UsrId)))  
     AND ([BillModeId]=(CASE @BillMode WHEN 0 THEN [BillModeId] ELSE 0 END) OR  
       [BillModeId] in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,33,@Pi_UsrId)))  
     AND (SalId = (CASE @SalId WHEN 0 THEN SalId ELSE 0 END) OR
					SalId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,14,@Pi_UsrId)))
					  
     AND ([DlvSts]=(CASE @BillStatus WHEN 0 THEN [DlvSts] ELSE 0 END) OR  
       [DlvSts] in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,192,@Pi_UsrId)))  
     AND ([Bill Date] Between @FromDate and @ToDate)  
  END    
 END  
 /*  
  For ProductCategory Value and Product Filter  
  R.PrdId = (CASE @fPrdCatPrdId WHEN 0 THEN R.PrdId Else 0 END) OR  
  R.PrdId in (SELECT iCountid from Fn_ReturnRptFilters(@Pi_RptId,26,@Pi_UsrId))  
  AND R.PrdId = (CASE @fPrdId WHEN 0 THEN R.PrdId Else 0 END) OR  
  R.PrdId in (SELECT iCountid from Fn_ReturnRptFilters(@Pi_RptId,5,@Pi_UsrId))  
 */  
 IF LEN(@PurDBName) > 0  
 BEGIN  
  EXEC Proc_PurgedDB @PurDBName,@TblName,@Po_PurgeErrno = @ErrNo OUTPUT  
  SET @SSQL = 'INSERT INTO ##RptBillWiseSalesReportParle ' +  
   '(' + @TblFields + ')' +  
   ' SELECT ' + @TblFields + ' FROM ['  + @PurDBName + '].dbo.' + @TblName +  
   'WHERE (RtrId = (CASE ' +  CAST(@RtrId AS INTEGER) + ' WHEN 0 THEN RtrId ELSE 0 END) OR  
     RtrId in (SELECT iCountid FROM Fn_ReturnRptFilters(' + CAST(@Pi_RptId as INTEGER) + ',3,' + CAST(@Pi_UsrId as INTEGER) +')))  
            AND (RMId=(CASE ' + CAST(@RMId AS INTEGER) + ' WHEN 0 THEN RMId ELSE 0 END) OR  
     RMId in (SELECT iCountid FROM Fn_ReturnRptFilters(' + CAST(@Pi_RptId as INTEGER) + ',2,' + CAST(@Pi_UsrId as INTEGER) +')))  
            AND (SMId=(CASE '+ CAST(@SMId AS INTEGER) + 'WHEN 0 THEN SMId ELSE 0 END) OR  
     SMId in (SELECT iCountid FROM Fn_ReturnRptFilters(' + CAST(@Pi_RptId as INTEGER) +',1,' + CAST(@Pi_UsrId as INTEGER) + ')))  
    AND (LcnId=(CASE '+ CAST(@LcnId AS INTEGER) + 'WHEN 0 THEN LcnId ELSE 0 END) OR  
     LcnId in (SELECT iCountid FROM Fn_ReturnRptFilters(' + CAST(@Pi_RptId as INTEGER) +',22,' + CAST(@Pi_UsrId as INTEGER) + ')))  
            AND ([BillTypeId] =(CASE ' + CAST(@BillType AS INTEGER) + ' WHEN 0 THEN [BillTypeId] ELSE 0 END) OR  
     [BillTypeId] in (SELECT iCountid FROM Fn_ReturnRptFilters(' + CAST(@Pi_RptId as INTEGER) + ',17,' + CAST(@Pi_UsrId as INTEGER) +')))  
            AND ([BillModeId]=(CASE ' + CAST(@BillMode AS INTEGER) + 'WHEN 0 THEN [BillModeId] ELSE 0 END) OR  
     [BillModeId] in (SELECT iCountid FROM Fn_ReturnRptFilters(' + CAST(@Pi_RptId as INTEGER) +',33,' + CAST(@Pi_UsrId as INTEGER) + ')))  
            AND ([Bill Date] Between ' + @FromDate +' and ' + @ToDate + ')  
            AND (SalId Between ' + @FromBillNo +' and ' + @TOBillNo +')'  
  EXEC (@SSQL)  
  PRINT 'Retrived Data From Purged Table'  
 END  
 IF @Pi_SnapRequired = 1  
    BEGIN  
  SELECT @NewSnapId = @Pi_SnapId  
  EXEC Proc_SnapShot_Report @NewSnapId,@Pi_UsrId,@Pi_RptId,@Pi_DbName,@TblName,@TblStruct,  
   @Pi_GetFromSnap,@Po_SnapErrno = @ErrNo OUTPUT  
  IF @ErrNo = 0  
     BEGIN  
   SET @sSql = 'INSERT INTO [' + @DBNAME + '].dbo.' + @TblName +  
    '(SnapId,UserId,RptId,' + @TblFields + ')' +  
    ' SELECT ' + CAST(@NewSnapId AS VARCHAR(10)) +  
    ' ,' + CAST(@Pi_UsrId AS VARCHAR(10)) +  
    ' ,' + CAST(@Pi_RptId AS VARCHAR(10)) + ', * FROM #RptBillWiseSalesReportParle'  
   EXEC (@SSQL)  
   PRINT 'Saved Data Into SnapShot Table'  
     END  
    END  
   END  
ELSE    --To Retrieve Data From Snap Data  
   BEGIN  
 EXEC Proc_SnapShot_Report @Pi_SnapId,@Pi_UsrId,@Pi_RptId,@Pi_DbName,@TblName,@TblStruct,  
   @Pi_GetFromSnap,@Po_SnapErrno = @ErrNo OUTPUT  
 PRINT @ErrNo  
 IF @ErrNo = 0  
    BEGIN  
  SET @SSQL = 'INSERT INTO #RptBillWiseSalesReportParle ' +  
   '(' + @TblFields + ')' +  
   ' SELECT ' + @TblFields + ' FROM ['  + @DBNAME + '].dbo.' + @TblName +  
   ' WHERE SNAPID = ' + CAST(@Pi_SnapId AS VARCHAR(10)) +  
   ' AND UserId = ' + CAST(@Pi_UsrId AS VARCHAR(10)) +  
   ' AND RptId = ' + CAST(@Pi_RptId AS VARCHAR(10))  
  EXEC (@SSQL)  
  PRINT 'Retrived Data From Snap Shot Table'  
    END  
 ELSE  
    BEGIN  
  PRINT 'DataBase or Table not Found'  
    END  
   END  
--Check for Report Data  
Delete From RptDataCount Where RptId = @Pi_RptId AND UserId = @Pi_UsrId  
INSERT INTO RptDataCount (RptId,RecCount,ErrNo,UserId)  
SELECT @Pi_RptId,Count(*) as RecCount,@ErrNo,@Pi_UsrId FROM #RptBillWiseSalesReportParle  
-- Till Here  
 IF (@BillStatus=3 AND  @CancelValue=1) OR (@BillStatus=0 AND  @CancelValue=1)  
 BEGIN  
  UPDATE #RptBillWiseSalesReportParle SET [Gross Amount]=0,[Scheme Disc]=0,[Sales Return]=0,[Replacement]=0,[Discount]=0,  
    [Tax Amount]=0,[Credit Adjustmant]=0,[Debit Adjustment]=0,[Net Amount]=0  
    WHERE [DlvStatus]=3  
 END  
 IF EXISTS (SELECT Flag FROM RptExcelFlag WITH(NOLOCK) WHERE RptID = @Pi_RptID AND UsrId=@Pi_UsrId AND Flag=1)  
 BEGIN  
  IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[RptBillWiseSalesReportParle_Excel]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)  
  DROP TABLE RptBillWiseSalesReportParle_Excel  
  CREATE TABLE RptBillWiseSalesReportParle_Excel  
  (  
  [Bill Number]         NVARCHAR(50), 
  [Order Ref No]		Varchar(50), 
  [Bill Type]           NVARCHAR(25),  
  [Bill Mode]           NVARCHAR(25),  
  [Bill Date]           DATETIME,
  [Retailer Type]		Varchar(50), 
  [Retailer Code]       NVARCHAR(50),  
  [Retailer Name]       NVARCHAR(150),  
  [Gross Amount]        NUMERIC (38,6),  
  [Scheme Disc]         NUMERIC (38,6),  
  [Sales Return]        NUMERIC (38,6),  
  [Replacement]         NUMERIC (38,6),  
  [Discount]            NUMERIC (38,6),  
  [Tax Amount]          NUMERIC (38,6),  
  [WindowDisplayAmount] NUMERIC (38,6),  
  [Credit Adjustmant]   NUMERIC (38,6),  
  [Debit Adjustment]    NUMERIC (38,6),  
  [Net Amount]          NUMERIC (38,6),  
  [DlvStatus]           INT  
  )  
  INSERT INTO RptBillWiseSalesReportParle_Excel ([Bill Number],[Bill Type],[Bill Mode],[Bill Date],[Retailer Name],  
  [Gross Amount],[Scheme Disc],[Sales Return],[Replacement],[Discount],  
  [Tax Amount],[Credit Adjustmant],[Debit Adjustment],[Net Amount],[DlvStatus])  
   SELECT  [Bill Number],[Bill Type],[Bill Mode],[Bill Date],[Retailer Name],  
   [Gross Amount],[Scheme Disc],[Sales Return],[Replacement],[Discount],  
   [Tax Amount],[Credit Adjustmant],[Debit Adjustment],[Net Amount],[DlvStatus] 
   FROM #RptBillWiseSalesReportParle  Order by [Bill Date],[Bill Number]
   
   UPDATE RPT SET RPT.[Retailer Code]=R.RtrCode ,
   [Retailer Type]=CASE R.RtrType WHEN 1 THEN 'Retailer'
			    WHEN 2 THEN 'Sub Stockiest'
				WHEN 3 THEN 'Consumer' END ,	  
   [Order Ref No]=SalInvRef
   FROM RptBillWiseSalesReportParle_Excel RPT (NOLOCK),Retailer R (NOLOCK),SalesINvoice SI (NOLOCK)
   WHERE RPT.[Retailer Name]=R.RtrName AND SI.SalInvNo=RPT.[Bill NUmber] AND R.RtrId=SI.RtrId
     
   UPDATE RPT SET RPT.[WindowDisplayAmount]=R.[WindowDisplayAmount] 
   FROM RptBillWiseSalesReportParle_Excel RPT (NOLOCK),
   SalesInvoice R (NOLOCK) WHERE RPT.[Bill Number]=R.SalInvNo  
   
    UPDATE RPT SET RPT.[WindowDisplayAmount]=R.[WindowDisplayAmount] FROM RptBillWiseSalesReportParle_Excel RPT (NOLOCK),
   SalesInvoice R (NOLOCK) WHERE RPT.[Bill Number]=R.SalInvNo  
   
 END   
    DELETE FROM #RptBillWiseSalesReportParle WHERE [Gross Amount]=0 AND [Scheme Disc]=0 AND [Sales Return]=0 AND [Replacement]=0 AND [Discount]=0 AND   
    [Tax Amount]=0 AND [Credit Adjustmant]=0 AND [Debit Adjustment]=0 AND [Net Amount]=0  
 SELECT * FROM #RptBillWiseSalesReportParle  Order by [Bill Date],[Bill Number]
 RETURN  
END
GO
EXEC Proc_Consumer_Route_Salesman_Creation
GO
EXEC Proc_Consumer_Retailer_Creation
GO
IF EXISTS(SELECT 'X' FROM SYSOBJECTS WHERE XTYPE='TF' AND NAME='Fn_TaxNotAppliedProduct')
DROP FUNCTION Fn_TaxNotAppliedProduct
GO
--SELECT * FROM DBO.Fn_TaxNotAppliedProduct(60799)
CREATE FUNCTION [Fn_TaxNotAppliedProduct](@Salid AS BIGINT)
RETURNS @NonTaxProduct TABLE (Salid BIGINT ,Slno INT)
/*********************************
* FUNCTION : Fn_TaxNotAppliedProduct
* PURPOSE   : Validate Salesinvoice tax and Salesinvoice Product table data
* CREATED   : Murugan.R
* CREATED DATE    : 05/05/2020
* NOTE            : 
* MODIFIED
* DATE			 AUTHOR			CR\BUG		USER STORY ID						DESCRIPTION
------------------------------------------------
* 05/05/2020	Murugan.R		BUG			PARCS202100017(PARLESECS/0520/013) 	Validate Salesinvoice product table data.
*********************************/
AS
BEGIN
	INSERT INTO @NonTaxProduct(Salid,Slno)
	SELECT Salid,Slno-1 FROM SalesInvoiceProduct A (Nolock) 
	WHERE 
	NOT EXISTS(SELECT Salid,Prdslno FROM SalesInvoiceProductTax B (Nolock) where A.Salid=B.Salid and A.Slno=B.Prdslno)
	AND SalId=@Salid
	----Record not exists in SalesInvoiceProduct table post save the invoice  , validation added
	IF NOT EXISTS(SELECT 'X' FROM SalesInvoiceProduct (NOLOCK) WHERE  SalId=@Salid)
	BEGIN
		INSERT INTO @NonTaxProduct(Salid,Slno)
		SELECT @Salid,2
	END
	RETURN
END
GO
DELETE FROM  ManualConfiguration WHERE ModuleId='Dateformat'
INSERT INTO ManualConfiguration(ProjectName,ModuleId,ModuleName,Description,Status,Condition,ConfigValue,SeqNo)
SELECT 'All','Dateformat','Transaction','Validate date format in All transaction module',1,0,0,1
GO
DELETE FROM  ManualConfiguration WHERE ModuleId='MDIDateformat'
INSERT INTO ManualConfiguration(ProjectName,ModuleId,ModuleName,Description,Status,Condition,ConfigValue,SeqNo)
SELECT 'All','MDIDateformat','Transaction','Change date format in MDI timer event',1,0,0,1
GO
DELETE FROM  ManualConfiguration WHERE ModuleId='DatabaseStatus'
INSERT INTO ManualConfiguration(ProjectName,ModuleId,ModuleName,Description,Status,Condition,ConfigValue,SeqNo)
SELECT 'All','DatabaseStatus','Database','Database Status check',1,0,0,1
GO
DELETE FROM  ManualConfiguration WHERE ModuleId='DatabaseSize'
INSERT INTO ManualConfiguration(ProjectName,ModuleId,ModuleName,Description,Status,Condition,ConfigValue,SeqNo)
SELECT 'All','DatabaseSize','DatabaseSize','Database Size check',1,0,8,1
GO
DELETE FROM  ManualConfiguration WHERE ModuleId='AutoBackupDriveSpace'
INSERT INTO ManualConfiguration(ProjectName,ModuleId,ModuleName,Description,Status,Condition,ConfigValue,SeqNo)
SELECT 'All','AutoBackupDriveSpace','AutoBackupDriveSpace','Validate Auto Backup Drive space check',1,0,0,1
GO
DELETE FROM  ManualConfiguration WHERE ModuleId='AutoBackupDayCount'
INSERT INTO ManualConfiguration(ProjectName,ModuleId,ModuleName,Description,Status,Condition,ConfigValue,SeqNo)
SELECT 'All','AutoBackupDayCount','AutoBackup','Alert database backup not taken for no of days ',1,0,3,1
GO
--Murugan.R Till Here
Delete From Manualconfiguration where ModuleId = 'AutoConfig1'
Insert Into Manualconfiguration (ProjectName,ModuleId,ModuleName,Description,Status,Condition,ConfigValue,SeqNo)
Select 'MTR','AutoConfig1','Auto Deployment','DLL and OCR Register Without User Interfances',0,'',0,1
GO
Delete From Manualconfiguration where ModuleId = 'AutoConfig2'
Insert Into Manualconfiguration (ProjectName,ModuleId,ModuleName,Description,Status,Condition,ConfigValue,SeqNo)
Select 'MTR','AutoConfig2','Auto Deployment','Running Exec Closed Automatically',0,'',0,2
GO
Delete From Manualconfiguration where ModuleId = 'AutoConfig3'
Insert Into Manualconfiguration (ProjectName,ModuleId,ModuleName,Description,Status,Condition,ConfigValue,SeqNo)
Select 'MTR','AutoConfig3','Auto Deployment','Download Auto Deployment exe',0,'',0,3
GO
IF NOT EXISTS (SELECT '' FROM SYSOBJECTS WHERE NAME = 'DeployExeNameshost' AND XTYPE = 'U')
BEGIN
	Create Table DeployExeNameshost
	(
		DownLoadFileNames Varchar(200),
		HostName		  varchar(100)	
	)
END
GO
IF NOT EXISTS (SELECT '*' FROM SYSOBJECTS WHERE NAME = 'DeploymentVesrion' AND XTYPE = 'U')
BEGIN
	CREATE TABLE DeploymentVesrion(
		[ProcessexeName] [nvarchar](100) NULL,
		[VersionId] [varchar](50) NULL,
		[HostName] [varchar](100) NULL
	)
END
GO
IF EXISTS (SELECT '*' FROM SYSOBJECTS Where Name = 'FN_UtilityProcess' and Xtype IN ('TF','FN'))
Drop Function FN_UtilityProcess
GO
--Select dbo.FN_UtilityProcess('4.0.0.16',1) as Status
Create Function dbo.FN_UtilityProcess(@VersionId As Varchar(50),@Type as INT,@HostName As Varchar(50))
Returns Int
AS
BEGIN
	DECLARE @Status AS TINYINT	
	DECLARE @CSVersionid	Varchar(50)
	DECLARE @ADVersionid	Varchar(50)	
	SET @Status=0
	
	IF @Type = 2 
	BEGIN
		IF NOT EXISTS (
		SELECT ProcId,ProcessName,ProcessPath,ProcessType,ConfigExists,ModuleId,ModuleName,Mandatory,VersionId 
		FROM UtilityProcess WHERE ProcessType='EXE' and ProcId=1 and Versionid = @VersionId)
		BEGIN
			SET @Status=1	
		END 
		IF EXISTS(
		SELECT * FROM SetupDetails WITH (NOLOCK) WHERE HotfixNo >0 AND HotFixNo 
		NOT IN (SELECT FixId FROM HotFixlog WITH(NOLOCK)))
		BEGIN
			SET @Status=1
		END
	END
	IF @Type = 1
	BEGIN

		SELECT @CSVersionid = VersionId FROM utilityprocess Where ProcessName = 'Auto Deployment.exe'
		SELECT @ADVersionid = VersionId FROM DeploymentVesrion Where HostName=  @HostName
		IF ISNULL(@CSVersionid,0) <> ISNULL(@ADVersionid,0)
		BEGIN
			SET @Status=1
		END
		
	END 
	RETURN @Status
END
GO
---Added by S.Moorthi
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='TargetPerc' and xtype='U')
BEGIN
CREATE TABLE TargetPerc
(
	TargetPerc	NUMERIC(18,3),
	CreatedDate	DATETIME
)
END
GO
IF NOT EXISTS(SELECT * FROM TargetPerc(NOLOCK))
BEGIN
	INSERT INTO TargetPerc(TargetPerc,CreatedDate)
	SELECT 110,GETDATE()
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS A INNER JOIN SYSCOlumns B ON A.ID=B.ID 
WHERE A.NAME='InsTargetDetailsAch' AND B.NAME='SlabId' and A.Xtype='U')
BEGIN
	ALTER TABLE InsTargetDetailsAch ADD SlabId INT
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS A INNER JOIN SYSCOlumns B ON A.ID=B.ID 
WHERE A.NAME='InsTargetDetailsAch' AND B.NAME='Target' and A.Xtype='U')
BEGIN
	ALTER TABLE InsTargetDetailsAch ADD [Target]  NUMERIC(18,6)
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS A INNER JOIN SYSCOlumns B ON A.ID=B.ID 
WHERE A.NAME='InsTargetDetailsAch' AND B.NAME='TargetWithPerc' and A.Xtype='U')
BEGIN
	ALTER TABLE InsTargetDetailsAch ADD TargetWithPerc NUMERIC(18,6)
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS A INNER JOIN SYSCOlumns B ON A.ID=B.ID 
WHERE A.NAME='InsTargetDetailsAch' AND B.NAME='TotalSales' and A.Xtype='U')
BEGIN
	ALTER TABLE InsTargetDetailsAch ADD TotalSales NUMERIC(18,6)
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS A INNER JOIN SYSCOlumns B ON A.ID=B.ID 
WHERE A.NAME='InsTargetDetailsAch' AND B.NAME='EligibleAmount' and A.Xtype='U')
BEGIN
	ALTER TABLE InsTargetDetailsAch ADD EligibleAmount NUMERIC(18,6)
END
GO
DELETE FROM Tbl_DownloadIntegration WHERE ProcessName='Target Slabs'
INSERT INTO Tbl_DownloadIntegration(SequenceNo,ProcessName,PrkTableName,SPName,TRowCount,SelectCount,CreatedDate)
SELECT 104,'Target Slabs','Cn2Cs_Prk_TargetSlabs','',0,500,Getdate()
GO
DELETE FROM CustomUpDownload WHERE UpDownload='Download' AND Module='Target Setting' AND Screen='Target Slabs'
DELETE FROM CustomUpDownload WHERE UpDownload='Download' AND Module='Target Slabs' AND Screen='Target Slabs'
INSERT INTO CustomUpDownload(SlNo,SeqNo,Module,Screen,ExportFnName,ImportProcName,ParkTable,ValidateProcName,TranType,UpDownload,MandatoryFile)
SELECT 293,1,'Target Slabs','Target Slabs','','Proc_Import_InstitutionsTargetSlab','Cn2Cs_Prk_TargetSlabs','Proc_Validate_InstitutionsTargetSlab','Master','Download',1
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Cn2Cs_Prk_TargetSlabs' AND xtype='U')
BEGIN
CREATE TABLE Cn2Cs_Prk_TargetSlabs
(
    Distcode VARCHAR(50),
    TargetCode VARCHAR(50),
    SlabId INT,
    SlabDesc NVARCHAR(100),
    FromSales NUMERIC(36,6),
    ToSales NUMERIC(36,6),
    BaseDiscount NUMERIC(18,6),
    TargetIncentive NUMERIC(18,6),
    DownloadFlag VARCHAR(5),
    CreatedDate DATETIME
)
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='InsTargetSlabs' AND xtype='U')
BEGIN
CREATE TABLE InsTargetSlabs(
	[InsId]			[bigint] NOT NULL,
	[SlabId]		[int] NOT NULL,
	[SlabDesc]		[VARCHAR](100) NULL,
	[FromSales]		[NUMERIC](36,6),
    [ToSales]		[NUMERIC](36,6),
    [BaseDiscount]  [NUMERIC](18,6),
    [TargetIncentive] [NUMERIC](18,6),
	[Availability]   [tinyint] NOT NULL,
	[LastModBy]     [tinyint] NOT NULL,
	[LastModDate]   [datetime] NOT NULL,
	[AuthId]		[tinyint] NOT NULL,
	[AuthDate]		[datetime] NOT NULL,
	CONSTRAINT [PK_InsTargetSlabs_InsSlabId] PRIMARY KEY CLUSTERED
	(
		[InsId] ASC,
		[SlabId] ASC
	),
	CONSTRAINT [FK_InsTargetSlabs_InsId] FOREIGN KEY ([InsId])
	REFERENCES InsTargetHD
) ON [PRIMARY]
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='InsTargetSlabsHistory' AND xtype='U')
BEGIN
CREATE TABLE InsTargetSlabsHistory(
	[SlNo]			[bigint] IDENTITY(1,1) NOT NULL,
	[InsId]			[bigint] NOT NULL,
	[SlabId]		[int] NOT NULL,
	[SlabDesc]		[VARCHAR](100) NULL,
	[FromSales]		[NUMERIC](36,6),
    [ToSales]		[NUMERIC](36,6),
    [BaseDiscount]  [NUMERIC](18,6),
    [TargetIncentive] [NUMERIC](18,6),
	[CreatedDate]	[datetime] NOT NULL
) ON [PRIMARY]
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='InsTargetDetailsProductLevelAch' AND xtype='U')
BEGIN
CREATE TABLE [dbo].[InsTargetDetailsProductLevelAch](
	[InsId]			[bigint] NULL,
	[TargetYear]	[bigint] NULL,
	[TargetMonth]	[nvarchar](50) NULL,
	[RtrId]			[int] NULL,
	[RtrUniqueCode] [nvarchar](400) NULL,
	[CmpRtrCode]	[nvarchar](100) NULL,
	[SlabId]		[int] NULL,	
	[PrdCCode]		[varchar](100) NULL,
	[BrandCode]		[varchar](100) NULL,
	[PriceSlot]		[varchar](100) NULL,
	[FlavorCode]	[varchar](100) NULL,
	[Target]		[numeric](18, 6) NULL,
	[TargetWithPerc] [numeric](18, 6) NULL,
	[TotalAchievement]	[numeric](18, 6) NULL,
	[PrdAchievement]	[numeric](18, 6) NULL,
	[BaseAch]		[numeric](18, 6) NULL,
	[TargetAch]		[numeric](18, 6) NULL,
	[ValBaseAch]	[numeric](18, 6) NULL,
	[ValTargetAch]  [numeric](18, 6) NULL,
	[ClmAmount]		[numeric](18, 6) NULL,
	[Liability]		[numeric](18, 6) NULL,
	[GrpId]			[INT] NULL,
	[CreatedDate]	[datetime] NOT NULL
) ON [PRIMARY]
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.ID 
WHERE A.NAME='InsTargetDetailsProductLevelAch' and B.NAME='GrpId' AND a.xtype='U')
BEGIN
	ALTER TABLE InsTargetDetailsProductLevelAch ADD GrpId INT
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE name='Proc_Validate_InstitutionsTargetSlab' AND xtype='P')
DROP PROCEDURE Proc_Validate_InstitutionsTargetSlab
GO
/*
BEGIN TRAN  
EXEC Proc_Validate_InstitutionsTargetSlab 0 
select * from Cn2Cs_Prk_TargetSlabs
select * from InsTargetSlabs  
SELECT * FROM InsTargetSlabsHistory
ROLLBACK TRAN
*/  
CREATE PROCEDURE Proc_Validate_InstitutionsTargetSlab
(  
 @Po_ErrNo INT OUTPUT  
)  
AS  
/*****************************************************************************************************************************************************************  
* PROCEDURE : Proc_Validate_InstitutionsTargetSlab 
* PURPOSE   : To Validate Institutions Target Slab
* CREATED	: S.Moorthi
* CREATED DATE	: 18/05/2020
* MODIFIED
* DATE				 AUTHOR				CR\BUG	UserStorageID		DESCRIPTION
------------------------------------------------------------------------------------------------
* 18/05/2020		 S.MOORTHI			  CR	PARCS202100019		Target achievement should be calculated in the Core Stocky
*******************************************************************************************************************************************************************/   
BEGIN  
SET @Po_ErrNo=0  
	BEGIN TRY    

			DELETE PRK FROM Cn2Cs_Prk_TargetSlabs PRK (NOLOCK) WHERE DownloadFlag='Y'  
			
			SELECT * INTO #Cn2Cs_Prk_TargetSlabs FROM Cn2Cs_Prk_TargetSlabs
			
			SELECT TargetCode,SlabId,MAX(CreatedDate) as CreatedDate INTO #TempInsSlab 
			FROM #Cn2Cs_Prk_TargetSlabs(NOLOCK) GROUP BY TargetCode,SlabId			
			
			DELETE A FROM #Cn2Cs_Prk_TargetSlabs A INNER JOIN #TempInsSlab B ON A.TargetCode=B.TargetCode
			AND A.SlabId=B.SlabId WHERE A.CreatedDate<>B.CreatedDate
	
			IF NOT EXISTS (SELECT * FROM #Cn2Cs_Prk_TargetSlabs (NOLOCK)) 
			BEGIN
				RETURN
			END
     
			CREATE TABLE #InsToAvoidSlab  
			(  
				ProgramCode VARCHAR(50),  
				SlNo INT,  
				TableName NVARCHAR (200),  
				FieldName NVARCHAR (200),  
				ErrDesc NVARCHAR (1000)  
			) 
			
			
			INSERT INTO #InsToAvoidSlab (ProgramCode,SlNo,TableName,FieldName,ErrDesc)  
			SELECT DISTINCT TargetCode,2,'Cn2Cs_Prk_TargetSlabs','TargetCode','Target Header is not available for Program ' + TargetCode 
			FROM #Cn2Cs_Prk_TargetSlabs M WHERE NOT EXISTS(SELECT * FROM InsTargetHD N WHERE N.InsRefNo=M.TargetCode)
			--Confirm=0
			
			INSERT INTO #InsToAvoidSlab (ProgramCode,SlNo,TableName,FieldName,ErrDesc)  
			SELECT DISTINCT TargetCode,3,'Cn2Cs_Prk_TargetSlabs','TargetCode','Target Slab details should not be NULL Values for Program ' + TargetCode 
			FROM #Cn2Cs_Prk_TargetSlabs M WHERE (SlabId IS NULL OR FromSales IS NULL OR ToSales IS NULL OR TargetIncentive IS NULL)
				
			INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)  
			SELECT DISTINCT SlNo,TableName,FieldName,ErrDesc FROM #InsToAvoidSlab (NOLOCK)  		
			
			/*
			If already max slab Id available 3 but New slab changed to 2 slabs
			*/
			--IF EXISTS(SELECT * FROM Cn2Cs_Prk_TargetSlabs A (NOLOCK) INNER JOIN InsTargetHD B(NOLOCK) ON B.InsRefNo=A.TargetCode
			--INNER JOIN InsTargetSlabs C(NOLOCK) ON C.InsId=B.InsId and C.SlabId=A.SlabId)
			--BEGIN
			--	UPDATE C SET C.SlabDesc=A.SlabDesc,C.FromSales=A.FromSales,C.ToSales=A.ToSales,
			--	C.BaseDiscount=A.BaseDiscount,C.TargetIncentive=A.TargetIncentive,AuthDate=GETDATE() 
			--	FROM Cn2Cs_Prk_TargetSlabs A (NOLOCK) INNER JOIN InsTargetHD B(NOLOCK) ON B.InsRefNo=A.TargetCode
			--	INNER JOIN InsTargetSlabs C(NOLOCK) ON C.InsId=B.InsId and C.SlabId=A.SlabId
			--	WHERE NOT EXISTS(SELECT * FROM #InsToAvoidSlab M WHERE M.ProgramCode=A.TargetCode and  M.ProgramCode=B.InsRefNo)	
			--END		
   
			DELETE C FROM #Cn2Cs_Prk_TargetSlabs A (NOLOCK) 
			INNER JOIN InsTargetHD B(NOLOCK) ON B.InsRefNo=A.TargetCode
			INNER JOIN InsTargetSlabs C(NOLOCK) ON C.InsId=B.InsId 
			WHERE B.Confirm=0 and NOT EXISTS(SELECT * FROM #InsToAvoidSlab M WHERE M.ProgramCode=A.TargetCode and  M.ProgramCode=B.InsRefNo)
			
			INSERT INTO InsTargetSlabs(InsId,SlabId,SlabDesc,FromSales,ToSales,BaseDiscount,
			TargetIncentive,Availability,LastModBy,LastModDate,AuthId,AuthDate)
			SELECT DISTINCT B.InsId,A.SlabId,A.SlabDesc,A.FromSales,A.ToSales,A.BaseDiscount,
			A.TargetIncentive,1,1,GETDATE(),1,GETDATE() FROM #Cn2Cs_Prk_TargetSlabs A (NOLOCK)
			INNER JOIN InsTargetHD B ON B.InsRefNo=A.TargetCode
			WHERE  B.Confirm=0 and NOT EXISTS(SELECT * FROM #InsToAvoidSlab M WHERE M.ProgramCode=A.TargetCode and  M.ProgramCode=B.InsRefNo)
			
			--To maintain History data for checking purpose
			INSERT INTO InsTargetSlabsHistory(InsId,SlabId,SlabDesc,FromSales,ToSales,BaseDiscount,TargetIncentive,CreatedDate)
			SELECT DISTINCT B.InsId,A.SlabId,A.SlabDesc,A.FromSales,A.ToSales,A.BaseDiscount,
			A.TargetIncentive,GETDATE() FROM Cn2Cs_Prk_TargetSlabs A (NOLOCK)
			INNER JOIN InsTargetHD B ON B.InsRefNo=A.TargetCode
			WHERE NOT EXISTS(SELECT * FROM #InsToAvoidSlab M WHERE M.ProgramCode=A.TargetCode and  M.ProgramCode=B.InsRefNo)

			UPDATE P SET P.DownloadFlag='Y'  
			FROM Cn2Cs_Prk_TargetSlabs P (NOLOCK) 
			INNER JOIN InsTargetHD B ON B.InsRefNo=P.TargetCode
			WHERE NOT EXISTS(SELECT * FROM #InsToAvoidSlab M WHERE M.ProgramCode=P.TargetCode and  M.ProgramCode=B.InsRefNo)
			

	END TRY 
	 
	BEGIN CATCH  
		INSERT INTO ErrorLog 
		SELECT 1,'TARGETSETTINGSLAB','TARGETSETTINGSLAB',ERROR_MESSAGE()
		SET @Po_ErrNo=1 -- 1 will rollback the process through Sync EXE  
		RETURN  
	END CATCH    
RETURN  
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE name='Proc_Cn2Cs_InstitutionsTargetAchievement' AND xtype='P')
DROP PROCEDURE Proc_Cn2Cs_InstitutionsTargetAchievement
GO
CREATE PROCEDURE Proc_Cn2Cs_InstitutionsTargetAchievement
(
	@Po_ErrNo INT OUTPUT
)
AS
/*********************************
* PROCEDURE	: Proc_Cn2Cs_InstitutionsTargetAchievement 0
* PURPOSE	: To Validate InstitutionsTargetAchievement and move to main
* CREATED	: Gopikrishnan
* CREATED DATE	: 11/11/2016
* MODIFIED 
* DATE				 AUTHOR				CR\BUG	UserStorageID		DESCRIPTION
------------------------------------------------------------------------------------------------
* 16/05/2020		 S.MOORTHI			  CR	PARCS202100019		Target achievement should be calculated in the Core Stocky   
*********************************/ 
BEGIN
	SET @Po_ErrNo=0
	
	DECLARE @ProgramCode Nvarchar(50)
	DECLARE @CmpRtrCode Nvarchar(50)
	DECLARE @Month Nvarchar(50)
	DECLARE @Achievement Numeric(18,6)
	DECLARE @BasePer Numeric(18,6)
	DECLARE @TargetPer Numeric(18,6)
	DECLARE @BaseValue Numeric(18,6)
	DECLARE @TargetValue Numeric(18,6)
	DECLARE @ClmAmt Numeric(18,6)
	DECLARE @Liability Numeric(18,6)
	
	DECLARE @Insid as Int
	BEGIN TRY		
			
			DELETE PRK FROM Cn2Cs_Prk_InstitutionsTargetAchievement PRK (NOLOCK) WHERE DownloadFlag='Y'
			
			SELECT DISTINCT * INTO #Cn2Cs_Prk_InstitutionsTargetAchievement FROM Cn2Cs_Prk_InstitutionsTargetAchievement (NOLOCK) WHERE DownloadFlag='D'
			
			IF NOT EXISTS (SELECT * FROM #Cn2Cs_Prk_InstitutionsTargetAchievement (NOLOCK)) RETURN
			
			CREATE TABLE #InsToAvoidAch
			(
				ProgramCode VARCHAR(50),
				CmpRtrCode  VARCHAR(50),
				SlNo INT,
				TableName NVARCHAR (200),
				FieldName NVARCHAR (200),
				ErrDesc	NVARCHAR (1000)
			)
			
			
			
			INSERT INTO #InsToAvoidAch (ProgramCode,CmpRtrCode,SlNo,TableName,FieldName,ErrDesc)
			SELECT DISTINCT ProgramCode,CmpRtrCode,1,'Cn2Cs_Prk_InstitutionsTargetAchievement','ProgramCode','The program code Not Exists ' + 
			ProgramCode FROM #Cn2Cs_Prk_InstitutionsTargetAchievement Prk (NOLOCK) 
			WHERE ProgramCode NOT IN (SELECT ProgramCode FROM InsTargetHD C (NOLOCK))
			
			INSERT INTO #InsToAvoidAch (ProgramCode,CmpRtrCode,SlNo,TableName,FieldName,ErrDesc)
			SELECT DISTINCT ProgramCode,CmpRtrCode,2,'Cn2Cs_Prk_InstitutionsTargetAchievement','ProgramCode','No values should be NULL for the Program ' +
			ProgramCode FROM #Cn2Cs_Prk_InstitutionsTargetAchievement 
			WHERE (ProgramYear) IS NULL 
			OR (ProgramMonth) IS NULL OR (MonthId) IS NULL 
			OR (CmpRtrCode) IS NULL
			OR (Achievement + [BaseAchievement%] +[TargetAchievement%]+ [BaseAchievementValue]+
			 TargetAchievementValue + ClaimAmount + Liability) IS NULL
			 
			INSERT INTO #InsToAvoidAch (ProgramCode,CmpRtrCode,SlNo,TableName,FieldName,ErrDesc)
			SELECT DISTINCT ProgramCode,CmpRtrCode,3,'Cn2Cs_Prk_InstitutionsTargetAchievement','ProgramCode','The Retailer code Not Exists ' + 
			ProgramCode FROM #Cn2Cs_Prk_InstitutionsTargetAchievement Prk (NOLOCK) 
			WHERE CmpRtrCode NOT IN (SELECT CmpRtrCode FROM Retailer (NOLOCK))
				
			---Added by S.Moorthi PARCS202100019
			INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)
			SELECT 4,'Cn2Cs_Prk_InstitutionsTargetAchievement','ProgramCode','Program Achievement already generated'+A.ProgramCode 
			FROM #Cn2Cs_Prk_InstitutionsTargetAchievement A 
			INNER JOIN InsTargetHD B ON B.InsRefNo=A.ProgramCode 
			WHERE B.Confirm=1 and EXISTS(SELECT * FROM InsTargetDetailsAch C 
			WHERE B.InsId=C.InsId and A.ProgramYear=C.TargetYear and A.ProgramMonth=C.TargetMonth)
			
			DELETE A FROM #Cn2Cs_Prk_InstitutionsTargetAchievement A 
			INNER JOIN InsTargetHD B ON B.InsRefNo=A.ProgramCode 
			WHERE B.Confirm=1 and EXISTS(SELECT * FROM InsTargetDetailsAch C 
			WHERE B.InsId=C.InsId and A.ProgramYear=C.TargetYear and A.ProgramMonth=C.TargetMonth)
			 
			-----PARCS202100019 Till Here
			 
			--INSERT INTO #InsToAvoidAch (ProgramCode,CmpRtrCode,SlNo,TableName,FieldName,ErrDesc)
			--SELECT DISTINCT ProgramCode,CmpRtrCode,4,'Cn2Cs_Prk_InstitutionsTargetAchievement','Achievement','Achievement field should not be Zero Or NULL' +
			--ProgramCode FROM #Cn2Cs_Prk_InstitutionsTargetAchievement 
			--WHERE ISNULL(Achievement,0) = 0
			
			--INSERT INTO #InsToAvoidAch (ProgramCode,CmpRtrCode,SlNo,TableName,FieldName,ErrDesc)
			--SELECT DISTINCT ProgramCode,CmpRtrCode,5,'Cn2Cs_Prk_InstitutionsTargetAchievement','[BaseAchievement%]','[BaseAchievement%] field should not be Zero Or NULL' +
			--ProgramCode FROM #Cn2Cs_Prk_InstitutionsTargetAchievement 
			--WHERE ISNULL([BaseAchievement%],0) = 0
			
			--INSERT INTO #InsToAvoidAch (ProgramCode,CmpRtrCode,SlNo,TableName,FieldName,ErrDesc)
			--SELECT DISTINCT ProgramCode,CmpRtrCode,6,'Cn2Cs_Prk_InstitutionsTargetAchievement','[TargetAchievement%]','[TargetAchievement%] field should not be Zero Or NULL' +
			--ProgramCode FROM #Cn2Cs_Prk_InstitutionsTargetAchievement 
			--WHERE ISNULL([TargetAchievement%],0) = 0
			
			
			--INSERT INTO #InsToAvoidAch (ProgramCode,CmpRtrCode,SlNo,TableName,FieldName,ErrDesc)
			--SELECT DISTINCT ProgramCode,CmpRtrCode,7,'Cn2Cs_Prk_InstitutionsTargetAchievement','BaseAchievementValue','BaseAchievementValue field should not be Zero Or NULL' +
			--ProgramCode FROM #Cn2Cs_Prk_InstitutionsTargetAchievement 
			--WHERE ISNULL(BaseAchievementValue,0) = 0
			
			--INSERT INTO #InsToAvoidAch (ProgramCode,CmpRtrCode,SlNo,TableName,FieldName,ErrDesc)
			--SELECT DISTINCT ProgramCode,CmpRtrCode,8,'Cn2Cs_Prk_InstitutionsTargetAchievement','TargetAchievementValue','TargetAchievementValue field should not be Zero Or NULL' +
			--ProgramCode FROM #Cn2Cs_Prk_InstitutionsTargetAchievement 
			--WHERE ISNULL(TargetAchievementValue,0) = 0
			
			--INSERT INTO #InsToAvoidAch (ProgramCode,CmpRtrCode,SlNo,TableName,FieldName,ErrDesc)
			--SELECT DISTINCT ProgramCode,CmpRtrCode,9,'Cn2Cs_Prk_InstitutionsTargetAchievement','ClaimAmount','ClaimAmount field should not be Zero Or NULL' +
			--ProgramCode FROM #Cn2Cs_Prk_InstitutionsTargetAchievement 
			--WHERE ISNULL(ClaimAmount,0) = 0
			
			--INSERT INTO #InsToAvoidAch (ProgramCode,CmpRtrCode,SlNo,TableName,FieldName,ErrDesc)
			--SELECT DISTINCT ProgramCode,CmpRtrCode,10,'Cn2Cs_Prk_InstitutionsTargetAchievement','Liability','Liability field should not be Zero Or NULL' +
			--ProgramCode FROM #Cn2Cs_Prk_InstitutionsTargetAchievement 
			--WHERE ISNULL(Liability,0) = 0
			
			INSERT INTO #InsToAvoidAch (ProgramCode,CmpRtrCode,SlNo,TableName,FieldName,ErrDesc)
			SELECT DISTINCT ProgramCode,CmpRtrCode,11,'Cn2Cs_Prk_InstitutionsTargetAchievement','ProgramCode','The Retailer code Not Exists ' + 
			ProgramCode FROM #Cn2Cs_Prk_InstitutionsTargetAchievement Prk (NOLOCK) 
			WHERE ProgramCode + '~' + CmpRtrCode NOT IN (SELECT DISTINCT InsRefNo + '~' + CmpRtrCode FROM InsTargetHD A (NOLOCK) 
			INNER JOIN InsTargetDetails B (Nolock) ON A.InsId=B.InsId )
			
			
			INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)
			SELECT DISTINCT SlNo,TableName,FieldName,ErrDesc FROM #InsToAvoidAch (NOLOCK)
			
			DELETE P FROM #Cn2Cs_Prk_InstitutionsTargetAchievement P 
			WHERE ProgramCode + '~' + CmpRtrCode In (SELECT ProgramCode + '~' + CmpRtrCode FROM #InsToAvoidAch A (NOLOCK))
		
			
			INSERT INTO InsTargetDetailsAch(Insid,TargetYear,TargetMonth,RtrId,Achievement,BaseAch,TargetAch,
			ValBaseAch,ValTargetAch,ClmAmount,Liability,Availability,LastModBy,LastModDate,AuthId,AuthDate,
			RtrUniqueCode,CmpRtrCode)
			SELECT Distinct Insid,ProgramYear,ProgramMonth,R.Rtrid,Achievement,[BaseAchievement%],[TargetAchievement%],
			[BaseAchievementValue],[TargetAchievementValue],[ClaimAmount],[Liability],1,1,Getdate(),
			1,GETDATE(),A.RtrUniqueCode,A.CmpRtrCode FROM #Cn2Cs_Prk_InstitutionsTargetAchievement A (Nolock)
			INNER JOIN InsTargetHD H (NOLOCK) ON A.ProgramCode = H.InsRefNo 
			AND A.ProgramYear=H.TargetYear AND A.MonthId=H.EffFromMonthId
			INNER JOIN Retailer R (Nolock) ON A.CmpRtrCode=R.CmpRtrCode
			
			UPDATE P SET P.DownloadFlag='Y'
			FROM Cn2Cs_Prk_InstitutionsTargetAchievement P (NOLOCK),
			#Cn2Cs_Prk_InstitutionsTargetAchievement HP,
			InsTargetHD H (NOLOCK) WHERE P.ProgramCode = HP.ProgramCode AND P.ProgramCode = H.InsRefNo
			and HP.CmpRtrCode=P.CmpRtrCode
	END TRY
	
	BEGIN CATCH
		PRINT 'There is a problem in process!'
		SET @Po_ErrNo=1 -- 1 will rollback the process through Sync EXE
		RETURN
	END CATCH		
		
RETURN
END
GO
DELETE FROM Tbl_UploadIntegration WHERE ProcessName='Institutions Target Achievement'
INSERT INTO Tbl_UploadIntegration(SequenceNo,ProcessName,FolderName,PrkTableName,CreatedDate)
SELECT 81,'Institutions Target Achievement','Institutions Target Achievement','Cs2Cn_Prk_InsTargetAchievement',Getdate()
GO
DELETE FROM CustomUpDownload WHERE UpDownload='Upload' AND Module='Institutions Target Achievement' 
INSERT INTO CustomUpDownload(SlNo,SeqNo,Module,Screen,ExportFnName,ImportProcName,ParkTable,ValidateProcName,TranType,UpDownload,MandatoryFile)
SELECT 182,1,'Institutions Target Achievement','Institutions Target Achievement','Proc_Cs2Cn_InsTargetAchievement','',
'Cs2Cn_Prk_InsTargetAchievement','','Transaction','Upload',1
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Cs2Cn_Prk_InsTargetAchievement' and xtype='U')
BEGIN
CREATE TABLE Cs2Cn_Prk_InsTargetAchievement(
	[SlNo]				[numeric](38, 0) IDENTITY(1,1) NOT NULL,
	[DistCode]			[nvarchar](100) NULL,
	[ProgramCode]		[varchar](50) NULL,
	[ProgramYear]		[int] NULL,
	[ProgramMonth]		[varchar](50) NULL,
	[MonthId]			[int] NULL,
	[CmpRtrCode]		[varchar](50) NULL,
	[RtrUniqueCode]		[varchar](50) NULL,
	[Target]			[numeric](18, 6) NULL,
	[TargetWithPerc]	[numeric](18, 6) NULL,
	[TotalSales]		[numeric](18, 6) NULL,
	[SlabId]			[int] NULL,
	[Achievement]		[numeric](18, 6) NULL,
	[BaseAchPerc]		[numeric](18, 6) NULL,
	[TargetAchPerc]		[numeric](18, 6) NULL,
	[BaseAchievementValue] [numeric](18, 6) NULL,
	[TargetAchievementValue] [numeric](18, 6) NULL,
	[ClaimAmount]		[numeric](18, 6) NULL,
	[Liability]			[numeric](18, 6) NULL,
	[UploadFlag]		[nvarchar](1) NULL,
	[SyncId]			[numeric](38, 0) NULL,
	[ServerDate]		[datetime] NULL
) ON [PRIMARY]
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE name='Proc_Cs2Cn_InsTargetAchievement' AND xtype='P')
DROP PROCEDURE Proc_Cs2Cn_InsTargetAchievement
GO
/*
BEGIN TRANSACTION
EXEC Proc_Cs2Cn_InsTargetAchievement 0,'2020-05-21'
SELECT * FROM Cs2Cn_Prk_InsTargetAchievement ORDER BY SlNo
SELECT * FROM InsTargetHD where Upload=1
ROLLBACK TRANSACTION
*/
CREATE PROCEDURE Proc_Cs2Cn_InsTargetAchievement
(
	@Po_ErrNo	INT OUTPUT,	
	@ServerDate DATETIME
)
AS
SET NOCOUNT ON
BEGIN
/***************************************************************************************************************
* PROCEDURE : Proc_Cs2Cn_InsTargetAchievement 
* PURPOSE   : To Validate Institutions Target Slab
* CREATED	: S.Moorthi
* CREATED DATE	: 19/05/2020
* MODIFIED
* DATE				 AUTHOR				CR\BUG	UserStorageID		DESCRIPTION
------------------------------------------------------------------------------------------------
* 19/05/2020		 S.MOORTHI			  CR	PARCS202100019		Target achievement should be calculated in the Core Stocky
****************************************************************************************************************/   

	DECLARE @DistCode	As nVarchar(50)
	
	SET @Po_ErrNo=0
	SELECT @DistCode=DistributorCode FROM Distributor


	INSERT INTO Cs2Cn_Prk_InsTargetAchievement(DistCode,
	ProgramCode,ProgramYear,ProgramMonth,
	MonthId,CmpRtrCode,RtrUniqueCode,
	[Target],TargetWithPerc,TotalSales,SlabId,
	Achievement,[BaseAchPerc],[TargetAchPerc],
	BaseAchievementValue,TargetAchievementValue,
	ClaimAmount,Liability,
	UploadFlag,ServerDate)	
	SELECT @DistCode,
	A.InsRefNo,B.TargetYear,B.TargetMonth,
	A.TargetMonth,B.CmpRtrCode,B.RtrUniqueCode,
	B.[Target],B.TargetWithPerc,B.TotalSales,B.SlabId,
	B.EligibleAmount,B.BaseAch,B.TargetAch,
	B.ValBaseAch,B.ValTargetAch,
	B.ClmAmount,B.Liability,
	'N' UploadFlag,@ServerDate
	 FROM InsTargetHD A (NOLOCK)
	INNER JOIN InsTargetDetailsAch B (NOLOCK) ON A.InsId=B.InsId
	WHERE A.[Status]=1 AND A.Confirm=1 and Upload=0

	UPDATE A SET A.Upload=1 FROM InsTargetHD A (NOLOCK)
	INNER JOIN Cs2Cn_Prk_InsTargetAchievement B (NOLOCK) ON A.InsRefNo=B.ProgramCode 
	AND A.TargetMonth=B.MonthId and A.TargetYear=B.ProgramYear
	WHERE A.[Status]=1 AND A.Confirm=1 and Upload=0
	

END
GO
IF NOT EXISTS(SELECT * FROM Tbl_Generic_Reports WHERE RptName='Institution Target Achivement')
BEGIN
DECLARE @RptId AS INT
SET @RptId=0
SELECT @RptId=ISNULL(MAX(RptId),0)+1 FROM Tbl_Generic_Reports

INSERT INTO Tbl_Generic_Reports(RptId,RptName,SPName,Instructions,DrillDown)
SELECT @RptId,'Institution Target Achivement','Proc_GR_InstitutionTargetAchivement','Institution Target Achivement','Not Available'

INSERT INTO Tbl_Generic_Reports_Filters(RptId,FilterId,FilterCaption,ParamName,rptname)
SELECT @RptId,1,'JC Year','Proc_GR_InstitutionTargetAchivement_Values','Institution Target Achivement' UNION ALL
SELECT @RptId,2,'JC Month','Proc_GR_InstitutionTargetAchivement_Values','Institution Target Achivement'  UNION ALL
SELECT @RptId,3,'Not Applicable','Proc_GR_InstitutionTargetAchivement_Values','Institution Target Achivement'  UNION ALL
SELECT @RptId,4,'Not Applicable','Proc_GR_InstitutionTargetAchivement_Values','Institution Target Achivement'  UNION ALL
SELECT @RptId,5,'Not Applicable','Proc_GR_InstitutionTargetAchivement_Values','Institution Target Achivement'  UNION ALL
SELECT @RptId,6,'Not Applicable','Proc_GR_InstitutionTargetAchivement_Values','Institution Target Achivement'

END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='P' AND NAME='Proc_GR_InstitutionTargetAchivement_Values')
DROP PROCEDURE Proc_GR_InstitutionTargetAchivement_Values
GO
--EXEC Proc_GR_InstitutionTargetAchivement_Values 'JC Year','202'
CREATE PROCEDURE [Proc_GR_InstitutionTargetAchivement_Values]
(
		@FILTERCAPTION  NVARCHAR(100),
		@TEXTLIKE  NVARCHAR(100)
)
/*********************************
* PROCEDURE	: Proc_GR_InstitutionTargetAchivement_Values
* PURPOSE	: Filter the Ins Target
* CREATED	: S.Moorthi
* CREATED DATE	: 18/05/2020
* MODIFIED
* DATE				 AUTHOR				CR\BUG	UserStorageID		DESCRIPTION
------------------------------------------------------------------------------------------------
* 16/05/2020		 S.MOORTHI			  CR	PARCS202100019		Target achievement should be calculated in the Core Stocky
*********************************/
AS
BEGIN
		SET @TEXTLIKE='%'+ISNULL(@TEXTLIKE,'')+'%'
				
		IF UPPER(@FILTERCAPTION)='JC Year' 
		BEGIN
			SELECT DISTINCT JcmYr as Filtervalues FROM JCMAST (NOLOCK) WHERE CAST(JCMYR AS VARCHAR(10)) LIKE @textlike 			
		END 
		IF UPPER(@FILTERCAPTION)='JC Month'
		BEGIN
			SELECT DISTINCT [MONTHNAME] as Filtervalues FROM MONTHDT WHERE [MONTHNAME] LIKE @textlike 			
		END 
		 
END
GO
UPDATE A SET A.CrNoteRetailer=0 FROM REASONMASTER A WHERE Description='Institutions Target Setting'
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'Proc_GR_InstitutionTargetAchivement') AND type in (N'P', N'PC'))
DROP PROCEDURE Proc_GR_InstitutionTargetAchivement
GO
--Exec Proc_GR_InstitutionTargetAchivement 'Program Master','2020-04-01','2018-12-02','2020','July','','','',''
CREATE PROCEDURE Proc_GR_InstitutionTargetAchivement
(    
  @Pi_RptName  NVARCHAR(100),    
  @Pi_FromDate DATETIME,    
  @Pi_ToDate   DATETIME,    
  @Pi_Filter1  NVARCHAR(100),    
  @Pi_Filter2  NVARCHAR(100),
  @Pi_Filter3  NVARCHAR(100),
  @Pi_Filter4  NVARCHAR(100),
  @Pi_Filter5  NVARCHAR(100),
  @Pi_Filter6  NVARCHAR(100)
)
/*********************************
* PROCEDURE	: Proc_GR_InstitutionTargetAchivement
* PURPOSE	: Institution Target Report
* CREATED	: S.Moorthi
* CREATED DATE	: 18/05/2020
* MODIFIED
* DATE				 AUTHOR				CR\BUG	UserStorageID		DESCRIPTION
------------------------------------------------------------------------------------------------
* 16/05/2020		 S.MOORTHI			  CR	PARCS202100019		Target achievement should be calculated in the Core Stocky
*********************************/    
AS     
BEGIN    
	SET @Pi_FILTER1='%'+ISNULL(@Pi_FILTER1,'')+'%'            
	SET @Pi_FILTER2='%'+ISNULL(@Pi_FILTER2,'')+'%'
	SET @Pi_FILTER3='%'+ISNULL(@Pi_FILTER3,'')+'%'             
	SET @Pi_FILTER4='%'+ISNULL(@Pi_FILTER4,'')+'%' 
	SET @Pi_FILTER5='%'+ISNULL(@Pi_FILTER5,'')+'%'      
	SET @Pi_FILTER6='%'+ISNULL(@Pi_FILTER6,'')+'%' 
	

	SELECT  InsId,H.InsRefNo,JcmSdt,JcmEDt,DATENAME(M,A.JCMSDT) AS TargetMonth,YEAR(A.JCMSDT) AS TargetYear,H.ChnId,
	CASE H.Confirm WHEN 1 THEN 'Achievement Generated' ELSE 'Pending' END [Program Status] 
	INTO #Temp FROM InsTargetHD H (NOLOCK)       
	INNER JOIN  JCMonth A  ON H.TargetMonth = A.JcmJc      
	INNER JOIN  JCMast b on a.JcmId = b.JcmId AND H.TargetYear =  B.JcmYr
	WHERE H.Status=1 and DATENAME(M,A.JCMSDT)LIKE @Pi_FILTER2 AND CAST(YEAR(A.JCMSDT) AS VARCHAR(10))LIKE @Pi_FILTER1
	--DATENAME(M,A.JCMSDT)LIKE @Pi_FILTER1 AND CAST(YEAR(A.JCMSDT) AS VARCHAR(10))LIKE @Pi_FILTER2
	
	IF EXISTS(SELECT * FROM #Temp WHERE JCMSDT<'2020-08-01')
	BEGIN
		DELETE FROM #Temp WHERE JCMSDT<'2020-08-01'
	END
	
	UPDATE A SET A.[Program Status]='Achievement Generated' FROM #Temp A 
	WHERE EXISTS(SELECT * FROM InsTargetDetailsAch B WHERE A.InsId=B.InsId 
	and A.TargetMonth=B.TargetMonth and A.TargetYear=B.TargetYear)
	
	SELECT 'Institution Target Master',A.InsRefNo as [Reference No],B.TargetYear [Year],B.TargetMonth [Month],RC.CtgCode AS [Channel Code],RC.CtgName AS [Channel Name],
	R.CmpRtrCode [Company Retailer Code],R.RtrUniqueCode [Retailer Unique Code],
	R.RtrName as [Retailer Name],C.[Target],[Program Status] 
	FROM InsTargetHD A (NOLOCK)
	INNER JOIN #Temp B ON A.InsId=B.InsId
	INNER JOIN RetailerCategory RC (NOLOCK) ON RC.CtgMainId=A.ChnId
	INNER JOIN InsTargetDetails C(NOLOCK) ON C.InsId=B.InsId and  C.InsId=A.InsId 
	INNER JOIN Retailer R (NOLOCK) ON R.CmpRtrCode=C.CmpRtrCode
	
	
	SELECT 'Institution Target Slab',A.InsRefNo as [Reference No],A.TargetYear [Year],A.TargetMonth [Month],
	B.SlabId,B.SlabDesc as [Slab Desc.],FromSales [From Sales],
	ToSales as [To Sales],TargetIncentive as [Target Inc. %] --,BaseDiscount [Base Inc. %] 
	FROM #Temp A 
	INNER JOIN InsTargetSlabs B ON A.InsId=B.InsId
	
	
	IF EXISTS(SELECT * FROM #Temp A INNER JOIN InsTargetDetailsAch B ON A.InsId=B.InsId 
	and A.TargetMonth=B.TargetMonth and A.TargetYear=B.TargetYear)
	BEGIN
	
		SELECT 'Target VS Retailer Achieved',A.InsRefNo [Program Code],A.TargetYear AS [Year],A.TargetMonth AS [Month],
		RC.CtgCode [Channel Code],RC.CtgName [Channel Name],R.CmpRtrCode AS [Company Retailer Code],R.RtrName [Retailer Name],
		ISNULL(B.[Target],ITD.[Target]) [Target],ISNULL(B.[TargetWithPerc],(ITD.[Target]*1.10)) AS [Target With %],
		ISNULL(B.TotalSales,B.Achievement) [Total Sales],B.EligibleAmount [Eligible Amount],
		B.SlabId,B.TargetAch [Target Inc. %],B.ValTargetAch [Target Incentive],
		--B.BaseAch [Base Inc. %],B.ValBaseAch [Base Incentive],
		B.ClmAmount [Claim Amount],B.Liability FROM #Temp A 
		INNER JOIN InsTargetDetailsAch B ON A.InsId=B.InsId and A.TargetMonth=B.TargetMonth and A.TargetYear=B.TargetYear
		INNER JOIN InsTargetDetails ITD ON ITD.InsId=B.InsId and ITD.InsId=A.InsId AND ITD.CmpRtrCode=B.CmpRtrCode
		INNER JOIN Retailer R ON R.CmpRtrCode=B.CmpRtrCode AND R.CmpRtrCode=ITD.CmpRtrCode
		INNER JOIN RetailerCategory RC ON RC.CtgMainId=A.ChnId
		
		SELECT 'Institutional Credit Note',R.CmpRtrCode AS [Company Retailer Code],R.RtrName [Retailer Name],
		A.InsRefNo [Program Code],CRN.CRNoteNumber as [Credit Note Number],CRN.Amount as [Credit Note Amount],CRN.Remarks FROM #Temp A 
		INNER JOIN InsTargetDetailsAch B ON A.InsId=B.InsId and A.TargetMonth=B.TargetMonth and A.TargetYear=B.TargetYear
		INNER JOIN Retailer R ON R.CmpRtrCode=B.CmpRtrCode 
		INNER JOIN CreditNoteRetailer CRN ON CRN.RtrId=R.RtrId and CRN.RtrId=B.RtrId and CRN.PostedRefNo=A.InsRefNo AND REMARKS='Institutional Target '+B.TargetMonth+' - '+cast(B.TargetYear as varchar(10))
		
		
		SELECT  'Target VS Product Achieved',A.InsRefNo [Program Code],A.TargetYear AS [Year],
		A.TargetMonth AS [Month],RC.CtgCode as [Group Code],RC.CtgName [Group Name],R.CmpRtrCode AS [Company Retailer Code],
		R.RtrName [Retailer Name],B.SlabId,BrandCode [Brand Code],PriceSlot [PriceSlot Code],
		FlavorCode [Flavor Code],P.PrdCCode [Product Code],P.PrdName [Product Name],
		TotalAchievement [ToTal Sales],PrdAchievement [Product Sales],ISNULL(B.ClmAmount,0) as [Product Claim] 
		FROM #Temp A 
		INNER JOIN InsTargetDetailsProductLevelAch B ON A.InsId=B.InsId and A.TargetMonth=B.TargetMonth and A.TargetYear=B.TargetYear
		INNER JOIN InsTargetDetails ITD ON ITD.InsId=B.InsId and ITD.InsId=A.InsId AND ITD.CmpRtrCode=B.CmpRtrCode
		INNER JOIN Retailer R ON R.CmpRtrCode=B.CmpRtrCode AND R.CmpRtrCode=ITD.CmpRtrCode
		INNER JOIN Product P ON P.PrdCCode=B.PrdCCode
		INNER JOIN RetailerCategory RC ON RC.CtgMainId=B.GrpId
		
			
		
		RETURN
	END		
			
			DECLARE @TargetPerc AS [numeric](18, 6)
			SET @TargetPerc=110.00
			
			IF EXISTS(SELECT * FROM TargetPerc (NOLOCK))
			BEGIN
				SELECT @TargetPerc=TargetPerc FROM TargetPerc (NOLOCK)
			END
			
				
			CREATE TABLE #InsTargetDetailsAch(
				[InsId]				[bigint] NULL,
				[TargetYear]		[bigint] NULL,
				[TargetMonth]		[nvarchar](50) NULL,
				[RtrId]				[int] NULL,
				[SlabId]				[int] NULL,
				[CmpRtrCode]		[nvarchar](100) NULL,
				[Target]			[numeric](18, 6) NULL,
				[TargetWithPerc]	[numeric](18, 6) NULL,
				[Achievement]		[numeric](18, 6) NULL,
				[BaseAch]			[numeric](18, 6) NULL,
				[TargetAch]			[numeric](18, 6) NULL,
				[ValBaseAch]		[numeric](18, 6) NULL,
				[ValTargetAch]		[numeric](18, 2) NULL,
				[ClmAmount]			[numeric](18, 2) NULL,
				[Liability]			[numeric](18, 6) NULL,
				[RtrUniqueCode]		[nvarchar](400) NULL,
				[TotalSales]		[numeric](18, 6) NULL,
			) ON [PRIMARY]
			
			CREATE TABLE #RetailerCategory
			(
				ChannelId		[int],
				ChannelCode		[VARCHAR](100),
				GroupId			[int],
				GroupCode		[VARCHAR](100),
				ValueClassId	[int]
			)

			CREATE TABLE #InsRetailer
			(
				InsId			[int],
				RtrId			[VARCHAR](100),
				ChannelId		[int],
				ValueClassId	[int],
				[Target]		[numeric](18, 6),
				TargetWithPerc	[numeric](18, 6),
				TargetToAch		[numeric](18, 6),
				JcmSdt			[Datetime],
				JcmEdt			[Datetime],
				JcMonth			varchar(100),
				JcYear			varchar(100)
			)

			CREATE TABLE #InsRetailerAchievement
			(
				InsId			[int],
				RtrId			[int],
				GrossAmount		[numeric](18, 6),
				TaxAmount		[numeric](18, 6),
				NetAmount		[numeric](18, 6)														
			)

			CREATE TABLE #InsProductAchievement
			(
				InsId		[int],
				GrpId		[int],
				RtrId		[int],
				PrdId		[BIGInt],
				GrossAmount	[numeric](18, 6),
				TaxAmount	[numeric](18, 6),
				NetAmount	[numeric](18, 6),
				[ClmAmount]	[numeric](18, 6)			
			)


			CREATE TABLE #RetailerSlab
			(
				InsId		[int],
				RtrId		[int],
				SlabId		INT					
			)


			INSERT INTO #InsRetailer(InsId,RtrId,ChannelId,ValueClassId,[Target],TargetWithPerc,
			TargetToAch,JcmSdt,JcmEdt,JcMonth,JcYear)
			SELECT DISTINCT A.InsId,R.RtrId,A.ChnId,ISNULL(RVCM.RtrValueClassId,0),C.[Target],
			(C.[Target]*@TargetPerc/100),(C.[Target]*@TargetPerc/100),JcmSdt,JcmEdt,B.TargetMonth,B.TargetYear FROM InsTargetHD A (NOLOCK)
			INNER JOIN #Temp B ON A.InsId=B.InsId AND A.InsRefNo=B.InsRefNo 
			INNER JOIN InsTargetDetails C(NOLOCK) ON C.InsId=B.InsId AND C.InsId=A.InsId 
			INNER JOIN Retailer R (NOLOCK) ON R.CmpRtrCode=C.CmpRtrCode 
			LEFT OUTER JOIN RetailerValueClassMap RVCM (NOLOCK) ON RVCM.RtrId=R.RtrId
		
			INSERT INTO #RetailerCategory(ChannelId,ChannelCode,GroupId,GroupCode,ValueClassId)
			SELECT RC.CtgMainId,RC.CtgCode,RG.CtgMainId,RG.CtgCode,RVC.RtrClassId FROM RetailerCategory RC (NOLOCK)
			INNER JOIN RetailerCategory RG(NOLOCK) ON RC.CtgMainId=RG.CtgLinkId 
			INNER JOIN RetailerValueClass RVC(NOLOCK) ON RVC.CtgMainId=RG.CtgMainId 
			
			--INSERT INTO #InsRetailerAchievement(InsId,RtrId,GrossAmount,TaxAmount,NetAmount)
			--SELECT InsId,RtrId,SUM(SalGrossAmount),SUM(SalTaxAmount),SUM(SalNetAmt) FROM
			--(
			--	SELECT A.InsId,A.RtrId,SUM(SI.SalGrossAmount) AS SalGrossAmount,SUM(SalTaxAmount) as SalTaxAmount,
			--	SUM(SalNetAmt) as SalNetAmt FROM #InsRetailer A (NOLOCK)
			--	INNER JOIN #RetailerCategory RC ON RC.ChannelId=A.ChannelId
			--	INNER JOIN SalesInvoice SI(NOLOCK) ON SI.RtrId=A.RtrId and SI.RtrValueClassId=RC.ValueClassId
			--	WHERE SI.SalInvDate Between JcmSdt and JcmEdt and SI.DlvSts>3 and ISNULL(SI.RtrValueClassId,0)<>0
			--	GROUP BY A.InsId,A.RtrId
			--	UNION
			--	SELECT A.InsId,A.RtrId,SUM(SI.SalGrossAmount) AS SalGrossAmount,SUM(SalTaxAmount) as SalTaxAmount,
			--	SUM(SalNetAmt) as SalNetAmt FROM #InsRetailer A (NOLOCK)
			--	INNER JOIN #RetailerCategory RC ON RC.ChannelId=A.ChannelId AND A.ValueClassId=RC.ValueClassId
			--	INNER JOIN SalesInvoice SI(NOLOCK) ON SI.RtrId=A.RtrId  
			--	WHERE SI.SalInvDate Between JcmSdt and JcmEdt and SI.DlvSts>3 and ISNULL(SI.RtrValueClassId,0)=0
			--	GROUP BY A.InsId,A.RtrId ---if Value class not updated then take current retailer value class id
			--	UNION				
			--	SELECT A.InsId,A.RtrId,-1*SUM(SI.RtnGrossAmt) AS SalGrossAmount,-1*SUM(RtnTaxAmt) as SalTaxAmount,
			--	-1*SUM(RtnNetAmt) as SalNetAmt FROM #InsRetailer A (NOLOCK)
			--	INNER JOIN #RetailerCategory RC ON RC.ChannelId=A.ChannelId
			--	INNER JOIN ReturnHeader SI(NOLOCK) ON SI.RtrId=A.RtrId and SI.RtrValueClassId=RC.ValueClassId
			--	WHERE SI.ReturnDate Between JcmSdt and JcmEdt
			--	and SI.Status=0 and ISNULL(SI.RtrValueClassId,0)<>0
			--	GROUP BY A.InsId,A.RtrId
			--	UNION
			--	SELECT A.InsId,A.RtrId,-1*SUM(SI.RtnGrossAmt) AS SalGrossAmount,-1*SUM(RtnTaxAmt) as SalTaxAmount,
			--	-1*SUM(RtnNetAmt) as SalNetAmt FROM #InsRetailer A (NOLOCK)
			--	INNER JOIN #RetailerCategory RC ON RC.ChannelId=A.ChannelId and RC.ValueClassId=A.ValueClassId
			--	INNER JOIN ReturnHeader SI(NOLOCK) ON SI.RtrId=A.RtrId 
			--	WHERE SI.ReturnDate Between JcmSdt and JcmEdt
			--	and SI.Status=0 and ISNULL(SI.RtrValueClassId,0)=0 ---if Value class not updated then take current retailer value class id
			--	GROUP BY A.InsId,A.RtrId
			--)X GROUP BY InsId,RtrId

			INSERT INTO #InsProductAchievement(InsId,GrpId,RtrId,PrdId,GrossAmount,TaxAmount,NetAmount)
			SELECT InsId,GroupId,RtrId,PrdId,SUM(SalGrossAmount),SUM(SalTaxAmount),SUM(SalNetAmt) FROM
			(
				SELECT A.InsId,RC.GroupId,A.RtrId,SIP.PrdId,SUM(SIP.PrdGrossAmount) AS SalGrossAmount,SUM(SIP.PrdTaxAmount) as SalTaxAmount,
				SUM(SIP.PrdNetAmount) as SalNetAmt FROM #InsRetailer A (NOLOCK)
				INNER JOIN #RetailerCategory RC ON RC.ChannelId=A.ChannelId
				INNER JOIN SalesInvoice SI(NOLOCK) ON SI.RtrId=A.RtrId and SI.RtrValueClassId=RC.ValueClassId
				INNER JOIN SalesInvoiceProduct SIP (NOLOCK) ON SI.SalId=SIP.SalId 
				WHERE SI.SalInvDate Between JcmSdt and JcmEdt and SI.DlvSts>3 and ISNULL(SI.RtrValueClassId,0)<>0
				GROUP BY A.InsId,RC.GroupId,A.RtrId,SIP.PrdId
				UNION				
				SELECT A.InsId,RC.GroupId,A.RtrId,SIP.PrdId,SUM(SIP.PrdGrossAmount) AS SalGrossAmount,SUM(SIP.PrdTaxAmount) as SalTaxAmount,
				SUM(SIP.PrdNetAmount) as SalNetAmt FROM #InsRetailer A (NOLOCK)
				INNER JOIN #RetailerCategory RC ON RC.ChannelId=A.ChannelId AND A.ValueClassId=RC.ValueClassId
				INNER JOIN SalesInvoice SI(NOLOCK) ON SI.RtrId=A.RtrId 
				INNER JOIN SalesInvoiceProduct SIP (NOLOCK) ON SI.SalId=SIP.SalId 
				WHERE SI.SalInvDate Between JcmSdt and JcmEdt and SI.DlvSts>3 and ISNULL(SI.RtrValueClassId,0)=0
				GROUP BY A.InsId,RC.GroupId,A.RtrId,SIP.PrdId ---if Value class not updated then take current retailer value class id
				UNION
				SELECT A.InsId,RC.GroupId,A.RtrId,SIP.PrdId,-1*SUM(SIP.PrdGrossAmt) AS SalGrossAmount,-1*SUM(SIP.PrdTaxAmt) as SalTaxAmount,
				-1*SUM(PrdNetAmt) as SalNetAmt FROM #InsRetailer A (NOLOCK)
				INNER JOIN #RetailerCategory RC ON RC.ChannelId=A.ChannelId
				INNER JOIN ReturnHeader SI(NOLOCK) ON SI.RtrId=A.RtrId and SI.RtrValueClassId=RC.ValueClassId
				INNER JOIN ReturnProduct SIP (NOLOCK) ON SI.ReturnID=SIP.ReturnID 
				WHERE SI.ReturnDate Between JcmSdt and JcmEdt 
				and SI.Status=0 and ISNULL(SI.RtrValueClassId,0)<>0
				GROUP BY A.InsId,RC.GroupId,A.RtrId,SIP.PrdId 
				UNION
				SELECT A.InsId,RC.GroupId,A.RtrId,SIP.PrdId,-1*SUM(SIP.PrdGrossAmt) AS SalGrossAmount,-1*SUM(SIP.PrdTaxAmt) as SalTaxAmount,
				-1*SUM(PrdNetAmt) as SalNetAmt FROM #InsRetailer A (NOLOCK)
				INNER JOIN #RetailerCategory RC ON RC.ChannelId=A.ChannelId and RC.ValueClassId=A.ValueClassId
				INNER JOIN ReturnHeader SI(NOLOCK) ON SI.RtrId=A.RtrId 
				INNER JOIN ReturnProduct SIP (NOLOCK) ON SI.ReturnID=SIP.ReturnID
				WHERE SI.ReturnDate Between JcmSdt and JcmEdt 
				and SI.Status=0 and ISNULL(SI.RtrValueClassId,0)=0
				GROUP BY A.InsId,RC.GroupId,A.RtrId,SIP.PrdId ---if Value class not updated then take current retailer value class id
			)X GROUP BY InsId,GroupId,RtrId,PrdId
			
		------Line Level Net amount consider for Calculation			
			INSERT INTO #InsRetailerAchievement(InsId,RtrId,GrossAmount,TaxAmount,NetAmount)
			SELECT InsId,RtrId,SUM(GrossAmount),SUM(TaxAmount),SUM(NetAmount) FROM #InsProductAchievement
			GROUP BY InsId,RtrId
						
		--	------------------------------Program Eligible Slab------------------------------
					
		INSERT INTO #RetailerSlab(InsId,RtrId,SlabId)			
		SELECT A.InsId,A.RtrId,MAX(C.SlabId) AS SlabId FROM #InsRetailer A 
		INNER JOIN #InsRetailerAchievement B ON A.InsId=B.InsId and A.RtrId=B.RtrId
		INNER JOIN InsTargetSlabs C (NOLOCK) ON C.InsId=B.InsId AND  C.InsId=A.InsId
		WHERE A.[TargetWithPerc]>=C.FromSales AND NetAmount>=A.Target 
		and NetAmount >= [TargetWithPerc]
		--WHERE GrossAmount>=C.FromSales AND GrossAmount>=A.Target
		GROUP BY A.InsId,A.RtrId
		
		INSERT INTO #RetailerSlab(InsId,RtrId,SlabId)			
		SELECT A.InsId,A.RtrId,MAX(C.SlabId) AS SlabId FROM #InsRetailer A 
		INNER JOIN #InsRetailerAchievement B ON A.InsId=B.InsId and A.RtrId=B.RtrId
		INNER JOIN InsTargetSlabs C (NOLOCK) ON C.InsId=B.InsId AND  C.InsId=A.InsId
		WHERE NetAmount>=C.FromSales AND NetAmount>=A.Target 
		and NetAmount<[TargetWithPerc]
		and NOT EXISTS(SELECT * FROM #RetailerSlab M WHERE M.InsId=A.InsId and M.RtrId=A.RtrId)
		--WHERE GrossAmount>=C.FromSales AND GrossAmount>=A.Target
		GROUP BY A.InsId,A.RtrId

		--Exec Proc_GR_InstitutionTargetAchivement 'Program Master','2020-04-01','2018-12-02','2020','May','','','',''

						
		INSERT INTO #InsTargetDetailsAch([InsId],[TargetYear],[TargetMonth],[RtrId],[CmpRtrCode],[Target],[TargetWithPerc],
		[Achievement],[BaseAch],[TargetAch],[ValBaseAch],[ValTargetAch],[ClmAmount],
		[Liability],[RtrUniqueCode],[SlabId],[TotalSales])
		SELECT A.InsId,JCYEAR,JCMONTH,A.RtrId,R.CmpRtrCode,A.[Target],A.TargetWithPerc,0,0,0,0,0,0,0,
		R.RtrUniqueCode,0,0 FROM #InsRetailer A 
		INNER JOIN InsTargetHD B ON A.InsId=B.InsId 
		INNER JOIN Retailer R ON A.RtrId=R.RtrId 

		---To Update the Achivement - Gross salary
		--UPDATE  A SET [TotalSales]=B.GrossAmount FROM #InsTargetDetailsAch A 
		
		---Take Net Amount instead of Gross Amount
		UPDATE  A SET [TotalSales]=B.NetAmount FROM #InsTargetDetailsAch A 
		INNER JOIN #InsRetailerAchievement B ON A.InsId=B.InsId AND A.RtrId=B.RtrId 


		---To Update the Achived Slab Perc
		UPDATE  A SET --A.[BaseAch]=C.BaseDiscount,
		A.TargetAch=C.TargetIncentive,A.SlabId=B.SlabId FROM #InsTargetDetailsAch A 
		INNER JOIN #RetailerSlab B ON A.InsId=B.InsId AND A.RtrId=B.RtrId 
		INNER JOIN InsTargetSlabs C (NOLOCK) ON C.InsId=B.InsId and C.InsId=A.InsId and C.SlabId=B.SlabId			
		 
		---To Calculate & Update Claim Amount
		UPDATE  A SET A.[Achievement]=A.TargetWithPerc,
		A.[ValTargetAch]= ISNULL((ISNULL(A.TargetWithPerc,0) * ISNULL(A.TargetAch,0)) / 100,0) FROM #InsTargetDetailsAch A 
		INNER JOIN #InsRetailerAchievement B ON A.InsId=B.InsId AND A.RtrId=B.RtrId 
		WHERE A.[TotalSales] >= A.[TargetWithPerc] And ISNULL(A.TargetAch,0) > 0

		---To Calculate & Update Claim Amount
		UPDATE  A SET  A.[Achievement]=A.[TotalSales],A.[ValTargetAch]= ISNULL((ISNULL(A.[TotalSales],0) * ISNULL(A.TargetAch,0)) / 100,0) FROM #InsTargetDetailsAch A 
		INNER JOIN #InsRetailerAchievement B ON A.InsId=B.InsId AND A.RtrId=B.RtrId 
		WHERE A.[TotalSales] < A.[TargetWithPerc] And ISNULL(A.TargetAch,0) > 0

		----UPDATE  A SET  A.[ValBaseAch]=ISNULL((ISNULL(A.[Achievement],0) * ISNULL(A.[BaseAch],0)) / 100,0)			
		----FROM #InsTargetDetailsAch A 
		----INNER JOIN #InsRetailerAchievement B ON A.InsId=B.InsId AND A.RtrId=B.RtrId 			
		----WHERE ISNULL(A.[BaseAch],0) > 0
		
		UPDATE  A SET  A.[ValBaseAch]=0 FROM #InsTargetDetailsAch A ----As per PM & Mr. Anand confirmation Base Discount not consider for Calculation
						
		UPDATE #InsTargetDetailsAch SET ClmAmount=ROUND([ValTargetAch]+ISNULL([ValBaseAch],0),2)

		---To Calculate & Update Liaability
		UPDATE #InsTargetDetailsAch SET [ValTargetAch]=ClmAmount,Liability=NULLIF([TotalSales]/ClmAmount,0) WHERE ClmAmount>0
		
		SELECT 'Target VS Retailer Achieved',A.InsRefNo [Program Code],A.TargetYear AS [Year],A.TargetMonth AS [Month],
		RC.CtgCode [Channel Code],RC.CtgName [Channel Name],R.CmpRtrCode AS [Company Retailer Code],R.RtrName [Retailer Name],
		ISNULL(B.[Target],ITD.[Target]) [Target],ISNULL(B.[TargetWithPerc],(ITD.[Target]*1.10)) AS [Target With %],
		ISNULL(B.TotalSales,0) [Total Sales],B.Achievement  [Eligible Amount],
		B.SlabId,B.TargetAch [Target Inc. %],B.ValTargetAch [Target Incentive],
		--B.BaseAch [Base Inc. %],B.ValBaseAch [Base Incentive],
		B.ClmAmount [Claim Amount],B.Liability FROM #Temp A 
		INNER JOIN #InsTargetDetailsAch B ON A.InsId=B.InsId and A.TargetMonth=B.TargetMonth and A.TargetYear=B.TargetYear
		INNER JOIN InsTargetDetails ITD ON ITD.InsId=B.InsId and ITD.InsId=A.InsId AND ITD.CmpRtrCode=B.CmpRtrCode
		INNER JOIN Retailer R ON R.CmpRtrCode=B.CmpRtrCode AND R.CmpRtrCode=ITD.CmpRtrCode
		INNER JOIN RetailerCategory RC ON RC.CtgMainId=A.ChnId
	
		UPDATE #InsProductAchievement SET ClmAmount=0
		
		---Net Amount taken instead of Gross
		UPDATE B SET B.ClmAmount= ((ISNULL(B.NetAmount,0) /ISNULL((A.TotalSales/A.[TargetWithPerc]),0))*(ISNULL(A.TargetAch,0)/100)) 
		FROM #InsTargetDetailsAch A 
		INNER JOIN #InsProductAchievement B ON A.InsId=B.InsId and A.RtrId=B.RtrId		
		WHERE A.TotalSales >= A.[TargetWithPerc] And ISNULL(A.TargetAch,0) > 0

		---To Calculate & Update Claim Amount
		---Net Amount taken instead of Gross
		UPDATE  B SET B.ClmAmount= ISNULL((ISNULL(B.NetAmount,0) * ISNULL(A.TargetAch,0)) / 100,0) 
		FROM #InsTargetDetailsAch A 
		INNER JOIN #InsProductAchievement B ON A.InsId=B.InsId and A.RtrId=B.RtrId	
		WHERE A.TotalSales < A.[TargetWithPerc] And ISNULL(A.TargetAch,0) > 0

		---Net Amount taken instead of Gross		
		SELECT 'Target VS Product Achieved',H.InsRefNo [Program Code],H.TargetYear AS [Year],
		H.TargetMonth AS [Month],RC.CtgCode as [Group Code],RC.CtgName [Group Name],R.CmpRtrCode AS [Company Retailer Code],
		R.RtrName [Retailer Name],A.SlabId,Brand_Code [Brand Code],PriceSlot_Code [PriceSlot Code],
		Flavor_Code [Flavor Code],P.ProductCode [Product Code],P.ProductDescription [Product Name],
		A.TotalSales [ToTal Sales],NetAmount [Product Sales],B.ClmAmount [Product Claim] FROM #InsTargetDetailsAch A 
		INNER JOIN #InsProductAchievement B ON A.InsId=B.InsId and A.RtrId=B.RtrId
		INNER JOIN #Temp H ON H.InsId=B.InsId and H.InsId=A.InsId
		INNER JOIN RetailerCategory RC ON RC.CtgMainId=B.GrpId
		--INNER JOIN InsTargetDetails ITD ON ITD.InsId=B.InsId and ITD.InsId=A.InsId AND ITD.CmpRtrCode=B.CmpRtrCode
		INNER JOIN Retailer R ON R.RtrId=B.RtrId and R.RtrId=A.RtrId
		INNER JOIN TBL_GR_BUILD_PH P ON P.PrdId=B.PrdId
		
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_GenerateInsTargetAchievement' AND xtype='P')
DROP PROCEDURE Proc_GenerateInsTargetAchievement
GO
--EXEC Proc_GenerateInsTargetAchievement 1,'2020-05-16',0,''
CREATE PROCEDURE Proc_GenerateInsTargetAchievement
(
	@Pi_UserId AS [int],
	@Pi_gServerDate AS DATETIME,
	@Po_ErrNo AS TinyINT OUTPUT,
	@Po_ErrorMessage AS [VARCHAR](4000) OUTPUT
)
AS
SET NOCOUNT ON
BEGIN
/********************************************************************************
* PROCEDURE		: Proc_GenerateInsTargetAchievement
* PURPOSE		: To Validate and Generate Ins Target Achievement
* CREATED		: S.Moorthi
* CREATED DATE	: 16/05/2020
* MODIFIED
* DATE				 AUTHOR				CR\BUG	UserStorageID		DESCRIPTION
------------------------------------------------------------------------------------------------
* 16/05/2020		 S.MOORTHI			  CR	PARCS202100019		Target achievement should be calculated in the Core Stocky													
* 06/07/2020		 S.MOORTHI			  SR	PARCS202100019		1.	All sales amount should consider Net amount (We use gross amount currently)
																	2.	Target slab percentage should be decided by Target+10% amount (We use sales amount to decide slab percentage currently)
* 16/07/2020		 S.MOORTHI			  CR	PARCS202100032		Target Achievement Credit note generation and adjusted in billing
**********************************************************************************/
	
	SET @Po_ErrNo=0
	SET @Po_ErrorMessage=''
	
	BEGIN TRY
			
			DECLARE @JcmSdt AS DATETIME
			DECLARE @JcmEdt AS DATETIME
			DECLARE @JCMONTH as VARCHAR(50)
			DECLARE @JCYEAR as VARCHAR(50)
			----Credit Note Raised
			DECLARE @RtrId AS INT
			DECLARE @InsRefNo AS VARCHAR(100)
			DECLARE @CreditAmount AS NUMERIC(18,3)
			DECLARE @CrNoteNumber AS NVARCHAR(100)
			DECLARE @CreditDate AS DATETIME
			DECLARE @CoaId AS INT
			DECLARE @ReasonId AS INT
			DECLARE @ErrStatus as INT
			---Credit Note
			DECLARE @TargetPerc AS [numeric](18, 6)
			SET @TargetPerc=110.00
			SET @ErrStatus=0
			
			IF EXISTS(SELECT * FROM TargetPerc (NOLOCK))
			BEGIN
				SELECT @TargetPerc=TargetPerc FROM TargetPerc (NOLOCK)
			END
			
			SELECT @JcmEdt=DATEADD(D,-1,JcmSdt),@JCYEAR=JcmYr FROM JCMonth A (NOLOCK) INNER JOIN JCMast B(NOLOCK) ON A.JcmId=B.JcmId 
			WHERE @Pi_gServerDate BETWEEN JcmSdt and JcmEdt		
			
			
			SELECT @JcmSdt=JcmSdt FROM JCMonth WHERE JCMEDT=@JcmEdt
			
			SELECT @JCMONTH=DATENAME(M,@JcmSdt)
			
			IF @JcmSdt<'2020-08-01'
			BEGIN
				PRINT 'Cut Off date Validated'
				RETURN
			END
						
			--- Check Month End 
			IF NOT EXISTS(SELECT * FROM JCMonthEnd (NOLOCK) WHERE Status=1 AND JcmSdt=@JcmSdt AND JcmEdt=@JcmEdt)
			BEGIN
				RETURN
			END	
			
			IF EXISTS(SELECT * FROM InsTargetDetailsAch WHERE TargetMonth=@JCMONTH AND TargetYear=@JCYEAR)
			BEGIN
				RETURN
			END
								
			--- MultiUser Validation
			IF EXISTS(SELECT UserId FROM MultiUserTransValidation (NOLOCK) WHERE TransId=505)
			BEGIN
				RETURN
			END
			
			SELECT  InsId,H.InsRefNo,H.ChnId INTO #Temp FROM InsTargetHD H (NOLOCK)       
			INNER JOIN  JCMonth A (NOLOCK) ON H.TargetMonth = A.JcmJc      
			INNER JOIN  JCMast b(NOLOCK) on a.JcmId = b.JcmId AND H.TargetYear =  B.JcmYr
			WHERE A.JCMSDT= @JcmSdt AND H.[Status] = 1  AND Confirm=0
			
			IF NOT EXISTS(SELECT * FROM #Temp)
			BEGIN
				RETURN 
			END
			

			IF EXISTS(SELECT * FROM #Temp A WHERE NOT EXISTS(SELECT * FROM InsTargetDetails B WHERE A.InsId=B.InsId))
			BEGIN
				SET @Po_ErrNo=1				
				SET @Po_ErrorMessage='Ins. Target achievement not generate due to Ins. Target Retailer details not available'
				RETURN 
			END
			
			IF EXISTS(SELECT * FROM #Temp A WHERE NOT EXISTS(SELECT * FROM InsTargetSlabs B WHERE A.InsId=B.InsId))
			BEGIN
				SET @Po_ErrNo=1
				SET @Po_ErrorMessage='Ins. Target achievement not generate due to Ins. Target Slab details not available'
				RETURN 
			END
			
			BEGIN TRANSACTION
			
				INSERT INTO MultiUserTransValidation(UserId,UserName,TransId,TransName,LockedDate)
				SELECT @Pi_UserId,'',505,'Generate Ins. Target achievement',@Pi_gServerDate	
				
								
				CREATE TABLE #InsTargetDetailsAch(
					[InsId]				[bigint] NULL,
					[TargetYear]		[bigint] NULL,
					[TargetMonth]		[nvarchar](50) NULL,
					[RtrId]				[int] NULL,
					[SlabId]				[int] NULL,
					[CmpRtrCode]		[nvarchar](100) NULL,
					[Target]			[numeric](18, 6) NULL,
					[TargetWithPerc]	[numeric](18, 6) NULL,
					[Achievement]		[numeric](18, 6) NULL,
					[BaseAch]			[numeric](18, 6) NULL,
					[TargetAch]			[numeric](18, 6) NULL,
					[ValBaseAch]		[numeric](18, 6) NULL,
					[ValTargetAch]		[numeric](18, 2) NULL,
					[ClmAmount]			[numeric](18, 2) NULL,  ---,6
					[Liability]			[numeric](18, 6) NULL,
					[RtrUniqueCode]		[nvarchar](400) NULL,
					[TotalSales]		[numeric](18, 6) NULL,
				) ON [PRIMARY]
				
				CREATE TABLE #RetailerCategory
				(
					ChannelId		[int],
					ChannelCode		[VARCHAR](100),
					GroupId			[int],
					GroupCode		[VARCHAR](100),
					ValueClassId	[int]
				)
				CREATE TABLE #InsRetailer
				(
					InsId			[int],
					RtrId			[VARCHAR](100),
					ChannelId		[int],
					ValueClassId	[int],
					[Target]		[numeric](18, 6),
					TargetWithPerc	[numeric](18, 6),
					TargetToAch		[numeric](18, 6)
				)
				CREATE TABLE #InsRetailerAchievement
				(
					InsId			[int],
					RtrId			[int],
					GrossAmount		[numeric](18, 6),
					TaxAmount		[numeric](18, 6),
					NetAmount		[numeric](18, 6)														
				)
				CREATE TABLE #InsProductAchievement
				(
					InsId		[int],
					GrpId		[int],
					RtrId		[int],
					PrdId		[BIGInt],
					GrossAmount	[numeric](18, 6),
					TaxAmount	[numeric](18, 6),
					NetAmount	[numeric](18, 6),
					[ClmAmount]	[numeric](18, 6)			
				)
				CREATE TABLE #RetailerSlab
				(
					InsId		[int],
					RtrId		[int],
					SlabId		INT					
				)
			
				INSERT INTO #InsRetailer(InsId,RtrId,ChannelId,ValueClassId,[Target],TargetWithPerc,TargetToAch)
				SELECT DISTINCT A.InsId,R.RtrId,A.ChnId,ISNULL(RVCM.RtrValueClassId,0),C.[Target],
				(C.[Target]*@TargetPerc/100.00),(C.[Target]*@TargetPerc/100.00) FROM InsTargetHD A (NOLOCK)
				INNER JOIN #Temp B ON A.InsId=B.InsId AND A.InsRefNo=B.InsRefNo 
				INNER JOIN InsTargetDetails C(NOLOCK) ON C.InsId=B.InsId AND C.InsId=A.InsId 
				INNER JOIN Retailer R (NOLOCK) ON R.CmpRtrCode=C.CmpRtrCode 
				LEFT OUTER JOIN RetailerValueClassMap RVCM (NOLOCK) ON RVCM.RtrId=R.RtrId
				
				INSERT INTO #RetailerCategory(ChannelId,ChannelCode,GroupId,GroupCode,ValueClassId)
				SELECT RC.CtgMainId,RC.CtgCode,RG.CtgMainId,RG.CtgCode,RVC.RtrClassId FROM RetailerCategory RC (NOLOCK)
				INNER JOIN RetailerCategory RG(NOLOCK) ON RC.CtgMainId=RG.CtgLinkId 
				INNER JOIN RetailerValueClass RVC(NOLOCK) ON RVC.CtgMainId=RG.CtgMainId 
				
						
				INSERT INTO #InsProductAchievement(InsId,GrpId,RtrId,PrdId,GrossAmount,TaxAmount,NetAmount)
				SELECT InsId,GroupId,RtrId,PrdId,SUM(SalGrossAmount),SUM(SalTaxAmount),SUM(SalNetAmt) FROM
				(
					SELECT A.InsId,RC.GroupId,A.RtrId,SIP.PrdId,SUM(SIP.PrdGrossAmount) AS SalGrossAmount,SUM(SIP.PrdTaxAmount) as SalTaxAmount,
					SUM(SIP.PrdNetAmount) as SalNetAmt FROM #InsRetailer A (NOLOCK)
					INNER JOIN #RetailerCategory RC ON RC.ChannelId=A.ChannelId
					INNER JOIN SalesInvoice SI(NOLOCK) ON SI.RtrId=A.RtrId and SI.RtrValueClassId=RC.ValueClassId
					INNER JOIN SalesInvoiceProduct SIP (NOLOCK) ON SI.SalId=SIP.SalId 
					WHERE SI.SalInvDate Between @JcmSdt and @JcmEdt and SI.DlvSts>3 and ISNULL(SI.RtrValueClassId,0)<>0
					GROUP BY A.InsId,RC.GroupId,A.RtrId,SIP.PrdId ----Value class properly updated
					UNION
					SELECT A.InsId,RC.GroupId,A.RtrId,SIP.PrdId,SUM(SIP.PrdGrossAmount) AS SalGrossAmount,SUM(SIP.PrdTaxAmount) as SalTaxAmount,
					SUM(SIP.PrdNetAmount) as SalNetAmt FROM #InsRetailer A (NOLOCK)
					INNER JOIN #RetailerCategory RC ON RC.ChannelId=A.ChannelId AND A.ValueClassId=RC.ValueClassId
					INNER JOIN SalesInvoice SI(NOLOCK) ON SI.RtrId=A.RtrId 
					INNER JOIN SalesInvoiceProduct SIP (NOLOCK) ON SI.SalId=SIP.SalId 
					WHERE SI.SalInvDate Between @JcmSdt and @JcmEdt and SI.DlvSts>3 and ISNULL(SI.RtrValueClassId,0)=0
					GROUP BY A.InsId,RC.GroupId,A.RtrId,SIP.PrdId ----if Value class not updated then take current retailer value class id	
					UNION			
					SELECT A.InsId,RC.GroupId,A.RtrId,SIP.PrdId,-1*SUM(SIP.PrdGrossAmt) AS SalGrossAmount,-1*SUM(SIP.PrdTaxAmt) as SalTaxAmount,
					-1*SUM(PrdNetAmt) as SalNetAmt FROM #InsRetailer A (NOLOCK)
					INNER JOIN #RetailerCategory RC ON RC.ChannelId=A.ChannelId
					INNER JOIN ReturnHeader SI(NOLOCK) ON SI.RtrId=A.RtrId and SI.RtrValueClassId=RC.ValueClassId
					INNER JOIN ReturnProduct SIP (NOLOCK) ON SI.ReturnID=SIP.ReturnID 
					WHERE SI.ReturnDate Between @JcmSdt and @JcmEdt and SI.Status=0 and ISNULL(SI.RtrValueClassId,0)<>0
					GROUP BY A.InsId,RC.GroupId,A.RtrId,SIP.PrdId ----Value class properly updated
					UNION
					SELECT A.InsId,RC.GroupId,A.RtrId,SIP.PrdId,-1*SUM(SIP.PrdGrossAmt) AS SalGrossAmount,-1*SUM(SIP.PrdTaxAmt) as SalTaxAmount,
					-1*SUM(PrdNetAmt) as SalNetAmt FROM #InsRetailer A (NOLOCK)
					INNER JOIN #RetailerCategory RC ON RC.ChannelId=A.ChannelId and RC.ValueClassId=A.ValueClassId
					INNER JOIN ReturnHeader SI(NOLOCK) ON SI.RtrId=A.RtrId 
					INNER JOIN ReturnProduct SIP (NOLOCK) ON SI.ReturnID=SIP.ReturnID
					WHERE SI.ReturnDate Between @JcmSdt and @JcmEdt and SI.Status=0 and ISNULL(SI.RtrValueClassId,0)=0
					GROUP BY A.InsId,RC.GroupId,A.RtrId,SIP.PrdId ----if Value class not updated then take current retailer value class id
				)X GROUP BY InsId,GroupId,RtrId,PrdId
				
			
			------Line Level Net amount consider for Calculation			
			INSERT INTO #InsRetailerAchievement(InsId,RtrId,GrossAmount,TaxAmount,NetAmount)
			SELECT InsId,RtrId,SUM(GrossAmount),SUM(TaxAmount),SUM(NetAmount) FROM #InsProductAchievement
			GROUP BY InsId,RtrId
			
			--	------------------------------Program Eligible Slab------------------------------
			--EXEC Proc_GenerateInsTargetAchievement 1,'2020-06-16',0,''
			
			INSERT INTO #RetailerSlab(InsId,RtrId,SlabId)			
			SELECT A.InsId,A.RtrId,MAX(C.SlabId) AS SlabId FROM #InsRetailer A 
			INNER JOIN #InsRetailerAchievement B ON A.InsId=B.InsId and A.RtrId=B.RtrId
			INNER JOIN InsTargetSlabs C (NOLOCK) ON C.InsId=B.InsId AND  C.InsId=A.InsId
			WHERE A.[TargetWithPerc]>=C.FromSales AND NetAmount>=A.Target 
			and NetAmount >= [TargetWithPerc]
			--WHERE GrossAmount>=C.FromSales AND GrossAmount>=A.Target
			GROUP BY A.InsId,A.RtrId
			
			INSERT INTO #RetailerSlab(InsId,RtrId,SlabId)			
			SELECT A.InsId,A.RtrId,MAX(C.SlabId) AS SlabId FROM #InsRetailer A 
			INNER JOIN #InsRetailerAchievement B ON A.InsId=B.InsId and A.RtrId=B.RtrId
			INNER JOIN InsTargetSlabs C (NOLOCK) ON C.InsId=B.InsId AND  C.InsId=A.InsId
			WHERE NetAmount>=C.FromSales AND NetAmount>=A.Target 
			and NetAmount<[TargetWithPerc]
			and NOT EXISTS(SELECT * FROM #RetailerSlab M WHERE M.InsId=A.InsId and M.RtrId=A.RtrId)
			--WHERE GrossAmount>=C.FromSales AND GrossAmount>=A.Target
			GROUP BY A.InsId,A.RtrId
			----
			
							
			INSERT INTO #InsTargetDetailsAch([InsId],[TargetYear],[TargetMonth],[RtrId],[CmpRtrCode],[Target],[TargetWithPerc],
			[Achievement],[BaseAch],[TargetAch],[ValBaseAch],[ValTargetAch],[ClmAmount],
			[Liability],[RtrUniqueCode],[SlabId],[TotalSales])
			SELECT A.InsId,@JCYEAR,@JCMONTH,A.RtrId,R.CmpRtrCode,A.[Target],A.TargetWithPerc,0,0,0,0,0,0,0,
			R.RtrUniqueCode,0,0 FROM #InsRetailer A 
			INNER JOIN InsTargetHD B ON A.InsId=B.InsId 
			INNER JOIN Retailer R ON A.RtrId=R.RtrId 
			
			---To Update the Achivement - Gross salary
			--UPDATE  A SET [TotalSales]=B.GrossAmount FROM #InsTargetDetailsAch A
			
			---Take Net Amount instead of Gross amount for Calculation 
			UPDATE  A SET [TotalSales]=B.NetAmount FROM #InsTargetDetailsAch A 
			INNER JOIN #InsRetailerAchievement B ON A.InsId=B.InsId AND A.RtrId=B.RtrId 
			
			
			---To Update the Achived Slab Perc
			UPDATE  A SET --A.[BaseAch]=C.BaseDiscount,
			A.TargetAch=C.TargetIncentive,A.SlabId=B.SlabId FROM #InsTargetDetailsAch A 
			INNER JOIN #RetailerSlab B ON A.InsId=B.InsId AND A.RtrId=B.RtrId 
			INNER JOIN InsTargetSlabs C (NOLOCK) ON C.InsId=B.InsId and C.InsId=A.InsId and C.SlabId=B.SlabId			
			 
			---To Calculate & Update Claim Amount
			UPDATE  A SET A.[Achievement]=A.TargetWithPerc,
			A.[ValTargetAch]= ISNULL((ISNULL(A.TargetWithPerc,0) * ISNULL(A.TargetAch,0)) / 100,0)		
			 FROM #InsTargetDetailsAch A 
			INNER JOIN #InsRetailerAchievement B ON A.InsId=B.InsId AND A.RtrId=B.RtrId 
			WHERE A.[TotalSales] >= A.[TargetWithPerc] And ISNULL(A.TargetAch,0) > 0
			
			---To Calculate & Update Claim Amount
			UPDATE  A SET  A.[Achievement]=A.[TotalSales],
			A.[ValTargetAch]= ISNULL((ISNULL(A.[TotalSales],0) * ISNULL(A.TargetAch,0)) / 100,0)
			FROM #InsTargetDetailsAch A 
			INNER JOIN #InsRetailerAchievement B ON A.InsId=B.InsId AND A.RtrId=B.RtrId 
			WHERE A.[TotalSales] < A.[TargetWithPerc] And ISNULL(A.TargetAch,0) > 0			
			
			UPDATE  A SET  A.[ValBaseAch]=0 FROM #InsTargetDetailsAch A  ----As per PM & Mr. Anand confirmation Base Discount not consider for Calculation
			
			UPDATE #InsTargetDetailsAch SET ClmAmount=[ValTargetAch]+ISNULL([ValBaseAch],0.00)
			
			---To Calculate & Update Liaability
			UPDATE #InsTargetDetailsAch SET Liability=NULLIF([TotalSales]/ClmAmount,0) WHERE ClmAmount>0
			
					
			UPDATE M SET M.Confirm=1,Upload=0,AuthDate=GETDATE() FROM #InsTargetDetailsAch A INNER JOIN InsTargetHD M ON A.InsId=m.InsId 
			WHERE NOT EXISTS(SELECT * FROM InsTargetDetailsAch B WHERE A.InsId=b.InsId 
			AND A.TargetYear=B.TargetYear and A.TargetMonth=b.TargetMonth AND B.InsId=M.InsId)
			
			INSERT INTO InsTargetDetailsAch (InsId,TargetYear,TargetMonth,RtrId,Achievement,BaseAch,TargetAch,ValBaseAch,
			ValTargetAch,ClmAmount,Liability,Availability,LastModBy,LastModDate,AuthId,AuthDate,RtrUniqueCode,CmpRtrCode,
			[Target],[TargetWithPerc],[SlabId],[TotalSales],EligibleAmount)
			SELECT DISTINCT InsId,TargetYear,TargetMonth,RtrId,[TotalSales] as Achievement,BaseAch,TargetAch,ValBaseAch,
			ValTargetAch,ClmAmount,Liability,1 Availability,@Pi_UserId LastModBy,GetDate() LastModDate,@Pi_UserId AuthId,GetDate() AuthDate,
			RtrUniqueCode,CmpRtrCode,[Target],[TargetWithPerc],SlabId,[TotalSales],Achievement
			FROM #InsTargetDetailsAch A WHERE NOT EXISTS(SELECT * FROM InsTargetDetailsAch B(NOLOCK) WHERE A.InsId=b.InsId 
			AND A.TargetYear=B.TargetYear and A.TargetMonth=b.TargetMonth)
					
			
			UPDATE #InsProductAchievement SET ClmAmount=0
			
			---Net Amount taken instead of Gross
			UPDATE B SET 
			B.ClmAmount= ((ISNULL(B.NetAmount,0)/ISNULL((A.[TotalSales]/A.[TargetWithPerc]),0))*(ISNULL(A.TargetAch,0)/100)) 
			FROM #InsTargetDetailsAch A 
			INNER JOIN #InsProductAchievement B ON A.InsId=B.InsId and A.RtrId=B.RtrId		
			WHERE A.[TotalSales] >= A.[TargetWithPerc] And ISNULL(A.TargetAch,0) > 0
			
			
			---Net Amount taken instead of Gross
			---To Calculate & Update Claim Amount
			UPDATE  B SET B.ClmAmount= ISNULL((ISNULL(B.NetAmount,0) * ISNULL(A.TargetAch,0)) / 100,0) 
			FROM #InsTargetDetailsAch A 
			INNER JOIN #InsProductAchievement B ON A.InsId=B.InsId and A.RtrId=B.RtrId	
			WHERE A.[TotalSales] < A.[TargetWithPerc] And ISNULL(A.TargetAch,0) > 0
			
			---Net Amount taken instead of Gross
			INSERT INTO InsTargetDetailsProductLevelAch(InsId,TargetYear,TargetMonth,RtrId,RtrUniqueCode,CmpRtrCode,SlabId,
			PrdCCode,BrandCode,PriceSlot,FlavorCode,[Target],TargetWithPerc,TotalAchievement,PrdAchievement,
			BaseAch,TargetAch,ValBaseAch,ValTargetAch,ClmAmount,Liability,CreatedDate,GrpId)
			SELECT A.InsId,A.TargetYear,A.TargetMonth,A.RtrId,A.RtrUniqueCode,A.CmpRtrCode,A.SlabId,P.ProductCode,
			Brand_Code,PriceSlot_Code,Flavor_Code,A.[Target],A.[TargetWithPerc],A.TotalSales,B.NetAmount,BaseAch,TargetAch,
			ValBaseAch,B.ClmAmount,B.ClmAmount,Liability,GetDate(),B.GrpId FROM #InsTargetDetailsAch A 
			INNER JOIN #InsProductAchievement B ON A.InsId=B.InsId and A.RtrId=B.RtrId
			INNER JOIN TBL_GR_BUILD_PH P ON P.PrdId=B.PrdId
			WHERE NOT EXISTS(SELECT * FROM InsTargetDetailsProductLevelAch B(NOLOCK) WHERE A.InsId=B.InsId 
			AND A.TargetYear=B.TargetYear and A.TargetMonth=B.TargetMonth)
			
			-----------------------------Credit Note Generation------------------------
			DECLARE @Remarks AS VARCHAR(1000)
			SET @CreditDate=@Pi_gServerDate	
			SET @CoaId =(SELECT TOP 1 CoaId FROM  CoaMaster WHERE AcName='Institutions Target Setting')
			SET @ReasonId =(SELECT TOP 1 ReasonId FROM  ReasonMaster (Nolock) WHERE DESCRIPTION='Institutions Target Setting')
			SET @Remarks='Institutional Target '+@JCMONTH+' - '+@JCYEAR			
			
			
			SELECT DISTINCT A.RtrId,B.InsRefNo,A.ClmAmount INTO #TempCreditNote FROM InsTargetDetailsAch A 
			INNER JOIN InsTargetHD B ON A.InsId=B.InsId 
			WHERE Confirm=1 and ClmAmount>0 AND A.TargetMonth=@JCMONTH AND A.TargetYear=@JCYEAR
			AND NOT EXISTS(SELECT * FROM CreditNoteRetailer N WHERE N.RtrId=A.RtrId and N.PostedRefNo=B.InsRefNo AND N.Remarks=@Remarks)
				
			
			DECLARE Cur_TgtCreditNoteRetailer CURSOR 
			FOR SELECT RtrId,InsRefNo,ClmAmount FROM #TempCreditNote
			OPEN Cur_TgtCreditNoteRetailer
			FETCH NEXT FROM Cur_TgtCreditNoteRetailer INTO @RtrId,@InsRefNo,@CreditAmount
			WHILE @@FETCH_STATUS=0
			BEGIN
					SET @CrNoteNumber=''
					
					SELECT @CrNoteNumber= dbo.Fn_GetPrimaryKeyString('CreditNoteRetailer','CrNoteNumber',CAST(YEAR(GETDATE()) AS INT),MONTH(GETDATE()))
					IF @CrNoteNumber=''
					BEGIN
						SET @Po_ErrNo=1							
						SET @Po_ErrorMessage='Reset the Counter Value to raise the Credit Note for Ins. Target achievement'								 
					END
						
					IF @Po_ErrNo=0
					BEGIN
						    				    
							INSERT INTO CreditNoteRetailer (CrNoteNumber,CrNoteDate,Rtrid,CoaId,ReasonId,Amount,CrAdjAmount,Status,
							PostedFrom,TransId,PostedRefNo,Availability,LastModBy,LastModDate,AuthId,AuthDate,Remarks,XMLUpload) 
							VALUES(@CrNoteNumber,CONVERT(NVARCHAR(10),@CreditDate,121),@Rtrid,@CoaId,@ReasonId,CAST(@CreditAmount AS NUMERIC(18,2)),
							0,1,@CrNoteNumber,32,@InsRefNo,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121),
							@Remarks,0)
							
							UPDATE Counters SET CurrValue=CurrValue+1 WHERE TabName='CreditNoteRetailer' AND FldName='CrNoteNumber'
							
							EXEC Proc_VoucherPosting 18,1,@CrNoteNumber,3,6,1,@CreditDate,@Po_ErrNo=@ErrStatus OUTPUT
							IF @ErrStatus<>1
							BEGIN
								SET @Po_ErrNo=1	
								SET @Po_ErrorMessage='Error in Voucher Posting to raise the Credit note for Ins. Target achievement'	
							END
							ELSE
							BEGIN
								SET @Po_ErrNo=0
							END
					END
					
					IF @Po_ErrNo=1
					BEGIN						
						CLOSE Cur_TgtCreditNoteRetailer
						DEALLOCATE Cur_TgtCreditNoteRetailer
						ROLLBACK TRAN
						RETURN
					END
					
				FETCH NEXT FROM Cur_TgtCreditNoteRetailer INTO @RtrId,@InsRefNo,@CreditAmount
			END
			CLOSE Cur_TgtCreditNoteRetailer
			DEALLOCATE Cur_TgtCreditNoteRetailer
						
			COMMIT TRANSACTION
				
			DELETE A FROM MultiUserTransValidation A(NOLOCK) WHERE TransId=505
			
	END TRY
	BEGIN CATCH
		SET @Po_ErrNo=1		
		SET @Po_ErrorMessage= ERROR_MESSAGE()	
		--select @Po_ErrorMessage	
		ROLLBACK TRANSACTION
	END CATCH
	RETURN
END	
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Fn_InsCRNotePending' AND xtype='TF')
DROP FUNCTION Fn_InsCRNotePending
GO
/*
Begin Tran
SELECT * From Fn_InsCRNotePending(232)      
RollBack Tran
*/
CREATE FUNCTION Fn_InsCRNotePending(@RtrId  INT) 
RETURNS @ReturnLoadGR TABLE
(
	RefCode			Varchar(100),
	CRAdjAmount     Numeric(18,6) 
)
AS
/******************************************************************************************************************************
* Details    : Fn_InsCRNotePending
* PURPOSE    : 
* CREATED BY : Panneer
* CREATED ON : 20-05-2019
*****************************************************************************************************************************
* DATE        AUTHOR			CR/BZ		USER STORY ID   DESCRIPTION   
***************************************************************************************************************************** 
*25-06-2019	  Panneer			CR			CRCRSTPAR0073   Auto  Institutions CR Note Applied  In Billing
*17-07-2020	  S.Moorthi			CR			PARCS202100042   Target Achievement Credit note generation and adjusted in billing
*******************************************************************************************************************************/
BEGIN
	Declare @Configval INT
	Declare @ReasonId  INT
	Declare @CoaId     INT
	DECLARE @CRDATE			 DateTime 
	DECLARE @CRDATEGETDATE    DateTime 
	SELECT  @CRDATEGETDATE =  CONVERT(Varchar(10),GETDATE(),121) 
	Select  @CRDATE =  CONVERT(Varchar(10),Condition,121)      From  ManualConfiguration (Nolock)  Where ProjectName  = 'PARLE'  and ModuleId = 'AutoInsCRDateConfig'
	SET @CRDATE = Isnull(@CRDATE,@CRDATEGETDATE) 
	Select  @Configval = [Status]  From  ManualConfiguration (Nolock)  Where ProjectName  = 'PARLE'  and ModuleId = 'AutoInsCRNoteAdj'
	SET @Configval = Isnull(@Configval,0)
	Select  @ReasonId =  ReasonId from  ReasonMaster (Nolock) Where  [Description] = 'Institutions Target Setting'
	SET @ReasonId = ISnull(@ReasonId,0)
	Select  @CoaId =  CoaId from  COAMaster (Nolock) Where  AcName = 'Institutions Target Setting'
	SET @CoaId = ISnull(@CoaId,0)
	IF   @Configval = 1 and @ReasonId <> 0 and  @CoaId <> 0 
	BEGIN
		Insert Into  @ReturnLoadGR
		Select  Distinct  CrNoteNumber,Amount - CrAdjAmount  from  CreditNoteRetailer (NolocK) 
		Where --Remarks like '%Download from Console%'   and  ----PARCS202100042
		CoaId = @CoaId  and  ReasonId =  @ReasonId and Status =  1
		AND  RtrId  =  @RtrId  and  CrNoteDate >= @CRDATE
		Delete From  @ReturnLoadGR   Where CRAdjAmount = 0 
	END
RETURN
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Fn_AutoFillRetailerCreditNote' AND xtype='TF')
DROP FUNCTION Fn_AutoFillRetailerCreditNote
GO
-- SELECT DISTINCT * FROM Dbo.Fn_AutoFillRetailerCreditNote(163,272,0,'2019-06-26')
CREATE FUNCTION Fn_AutoFillRetailerCreditNote	(  @Pi_RtrId AS NUMERIC(18,0),@Pi_SalNetAmt AS NUMERIC(38,2),
														   @Pi_SalId AS NUMERIC(18,0),@Pi_BillDate AS DATETIME
													    )
RETURNS @AutoFillRetailerCreditNote TABLE
(
    CrNoteNumber    NVARCHAR(200),
	ReasonName      NVARCHAR(200),
	CreditNoteAmt   NUMERIC(18,2),
	AdjustSofarAmt  NUMERIC(18,2),
	AvlAmount       NUMERIC(18,2),
	AdjustAmount    NUMERIC(18,2),
	Remarks			NVARCHAR(200) ,
	DLCRStatus		INT
 )
AS
BEGIN
/******************************************************************************************************************************
* Details    : Fn_InsCRNotePending
* PURPOSE    : 
* CREATED BY : Panneer
* CREATED ON : 20-05-2019
*****************************************************************************************************************************
* DATE        AUTHOR			CR/BZ		USER STORY ID   DESCRIPTION   
***************************************************************************************************************************** 
*25-06-2019	  Panneer			CR			CRCRSTPAR0073   Auto  Institutions CR Note Applied  In Billing
*17-07-2020	  S.Moorthi			CR			PARCS202100042  Target Achievement Credit note generation and adjusted in billing		 
*******************************************************************************************************************************/
DECLARE @CreditNoteNo AS NVARCHAR(200)
DECLARE @CrdAvlAmount AS NUMERIC(38,2)
DECLARE @SalNetAmount AS NUMERIC(38,2)    
DECLARE @IN_RETURN AS INT
DECLARE @CRDATE			 DateTime 
DECLARE @CRDATEGETDATE    DateTime 
SELECT  @CRDATEGETDATE =  CONVERT(Varchar(10),GETDATE(),121) 
Select  @CRDATE =  CONVERT(Varchar(10),Condition,121)      From  ManualConfiguration (Nolock)  Where ProjectName  = 'PARLE'  and ModuleId = 'AutoInsCRDateConfig'
SET @CRDATE = Isnull(@CRDATE,@CRDATEGETDATE) 
DECLARE @AutoCR TABLE
(
    CrNoteNumber    NVARCHAR(200) 
)
SET @SalNetAmount = @Pi_SalNetAmt - 1
SET @IN_RETURN=0
	INSERT INTO @AutoFillRetailerCreditNote(CrNoteNumber,ReasonName,CreditNoteAmt,AdjustSofarAmt,AvlAmount,AdjustAmount,Remarks)
    SELECT DISTINCT 
		A.CrNoteNumber,[Description] AS ReasonName,Amount AS CreditNoteAmt,ISNULL(CrdAdjAmt,0) AS AdjustSofarAmt,
		(Amount-ISNULL(CrdAdjAmt,0)) AS AvlAmount,0 AS AdjustAmount ,A.Remarks  
    FROM 
			CreditNoteRetailer A (NOLOCK) 
			INNER JOIN ReasonMaster RM (NOLOCK) ON A.ReasonId = RM.ReasonId  
			LEFT OUTER JOIN (
									SELECT CrNoteNumber,RtrId,SUM(CrdAdjAmt)CrdAdjAmt FROM
									( 
			
										SELECT CrNoteNumber,A.RtrId,ISNULL(SUM(CrdAdjAmt),0)CrdAdjAmt FROM (
										SELECT CrNoteNumber,A.RtrId,ISNULL(SUM(A.CrAdjAmount),0) AS CrdAdjAmt 
										FROM SalInvCrNoteAdj A (NOLOCK)
										INNER JOIN SalesInvoice SI (NOLOCK) ON A.SalId = SI.SalId WHERE DlvSts <> 3 AND A.RtrId = @Pi_RtrId 
										AND A.SalId <> @Pi_SalId GROUP BY CrNoteNumber,A.RtrId
									)A
									GROUP BY  CrNoteNumber,A.RtrId	
									UNION
									SELECT NoteNo AS CrNoteNumber,RTRID,SUM(AdjAmount) AS CrAdjAmount 
									FROM CRDBNoteAdjustment (Nolock)  WHERE RtrId= @Pi_RtrId GROUP BY NoteNo,RTRID 
									)A GROUP BY CrNoteNumber,RtrId    
							)SCA ON A.CrNoteNumber = SCA.CrNoteNumber 
							AND A.RtrId = SCA.RtrId 
	WHERE (Amount-ISNULL(CrdAdjAmt,0)) > 0 
		  AND [Status] = 1   and  CrNoteDate >= @CRDATE
		  AND A.RtrId = @Pi_RtrId  
    ORDER BY A.CrNoteNumber
	
	Insert Into  @AutoCR
	Select  Distinct A.CrNoteNumber	
	From @AutoFillRetailerCreditNote A ,  CreditNoteRetailer B (Nolock) 
	Where A.CrNoteNumber = B.CrNoteNumber --AND  A.Remarks Like '%Download from Console%'  ---PARCS202100042
	and A.ReasonName = 'Institutions Target Setting'
	Update  @AutoFillRetailerCreditNote Set  DLCRStatus =  0
	Update  @AutoFillRetailerCreditNote Set  DLCRStatus =  1
	From @AutoFillRetailerCreditNote A,@AutoCR B  WHere A.CrNoteNumber = B.CrNoteNumber
	
	WHILE EXISTS (SELECT CrNoteNumber FROM @AutoFillRetailerCreditNote 
				  WHERE (AvlAmount-AdjustAmount) > 0 and  ReasonName = 'Institutions Target Setting' 
				  --AND  Remarks  like  '%Download from Console%'  ---PARCS202100042
				  )  AND @SalNetAmount > 0
	BEGIN
		SELECT TOP(1) @CreditNoteNo = CrNoteNumber,@CrdAvlAmount = AvlAmount 
		FROM @AutoFillRetailerCreditNote  
		WHERE (AvlAmount-AdjustAmount) > 0	and  ReasonName = 'Institutions Target Setting' 
				 -- AND  Remarks  like  '%Download from Console%'  ---PARCS202100042
		ORDER BY CrNoteNumber
		IF @SalNetAmount >= @CrdAvlAmount
		BEGIN
			UPDATE @AutoFillRetailerCreditNote SET AdjustAmount = ISNULL(@CrdAvlAmount,0) 
			WHERE CrNoteNumber = @CreditNoteNo and  ReasonName = 'Institutions Target Setting'  -- AND  Remarks  like '%Download from Console%' ---PARCS202100042
			SET @SalNetAmount = @SalNetAmount-@CrdAvlAmount  
		END
		ELSE
		BEGIN
			UPDATE @AutoFillRetailerCreditNote SET AdjustAmount = ISNULL(@SalNetAmount,0) 
			WHERE CrNoteNumber = @CreditNoteNo and  ReasonName = 'Institutions Target Setting' -- AND  Remarks  like '%Download from Console%' ---PARCS202100042
			SET @SalNetAmount = 0
		END
	END	
RETURN 
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Fn_ValidateRetailerCreditNote' AND xtype='FN')
DROP FUNCTION Fn_ValidateRetailerCreditNote
GO
--SELECT DISTINCT Dbo.Fn_ValidateRetailerCreditNote(163,227,0,0,'2016-11-21') AS Approved
CREATE FUNCTION Fn_ValidateRetailerCreditNote(		@Pi_RtrId AS NUMERIC(18,0),
															@Pi_SalNetAmt AS NUMERIC(38,2),@Pi_CrdAdjAmt AS NUMERIC(38,2),
															@Pi_SalId AS NUMERIC(18,0),@Pi_BillDate AS DATETIME)
RETURNS TINYINT
AS
BEGIN
/******************************************************************************************************************************
* Details    : Fn_InsCRNotePending
* PURPOSE    : 
* CREATED BY : Panneer
* CREATED ON : 20-05-2019
*****************************************************************************************************************************
* DATE        AUTHOR			CR/BZ		USER STORY ID   DESCRIPTION   
***************************************************************************************************************************** 
*25-06-2019	  Panneer			CR			CRCRSTPAR0073   Auto  Institutions CR Note Applied  In Billing	
*17-07-2020	  S.Moorthi			CR			PARCS202100042   Target Achievement Credit note generation and adjusted in billing	 
*******************************************************************************************************************************/
DECLARE @Approved AS TINYINT
DECLARE @CreditAmount AS NUMERIC(18,2)
DECLARE @IN_RETURN AS INT
DECLARE @CRDATE			 DateTime 
DECLARE @CRDATEGETDATE    DateTime 
SELECT  @CRDATEGETDATE =  CONVERT(Varchar(10),GETDATE(),121) 
Select  @CRDATE =  CONVERT(Varchar(10),Condition,121)      From  ManualConfiguration (Nolock)  Where ProjectName  = 'PARLE'  and ModuleId = 'AutoInsCRDateConfig'
SET @CRDATE = Isnull(@CRDATE,@CRDATEGETDATE) 
SET @IN_RETURN=0
SET @Approved = 0  
   SELECT @CreditAmount = SUM(CreditAmount) 
   FROM (
		SELECT DISTINCT ISNULL((Amount-ISNULL(CrdAdjAmt,0)),0) CreditAmount 
		FROM CreditNoteRetailer A(NOLOCK) 
			LEFT OUTER JOIN	(
			SELECT CrNoteNumber,RtrId,SUM(CrdAdjAmt)CrdAdjAmt FROM
				( 
				SELECT CrNoteNumber,A.RtrId,ISNULL(SUM(CrdAdjAmt),0)CrdAdjAmt 
				FROM ( 
					SELECT CrNoteNumber,A.RtrId,ISNULL(SUM(A.CrAdjAmount),0) AS CrdAdjAmt 
					FROM SalInvCrNoteAdj A (NOLOCK) 
					INNER JOIN SalesInvoice SI (NOLOCK) ON A.SalId = SI.SalId WHERE Dlvsts <> 3 AND A.RtrId = @Pi_RtrId 
					AND A.SalId <> @Pi_SalId GROUP BY CrNoteNumber,A.RtrId
				)A
				GROUP BY  CrNoteNumber,A.RtrId
				UNION
				SELECT NoteNo AS CrNoteNumber,RTRID,SUM(AdjAmount) AS CrAdjAmount 
				FROM CRDBNoteAdjustment WHERE RtrId= @Pi_RtrId GROUP BY NoteNo,RTRID		 
				)A GROUP BY CrNoteNumber,RtrId
    )SCA ON A.CrNoteNumber = SCA.CrNoteNumber AND A.RtrId = SCA.RtrId
    LEFT OUTER JOIN CRDBNoteAdjustment C ON C.NoteNo=A.CrNoteNumber
	WHERE	[Status] = 1 
			 AND A.CrNoteDate >=  @CRDATE AND A.RtrId = @Pi_RtrId    -----  AND A.CrNoteDate <= @Pi_BillDate
			 AND  A.ReasonId in (Select  ReasonId From  ReasonMaster ( Nolock) Where  [Description] = 'Institutions Target Setting') 
			-- AND  Remarks  like '%Download from Console%'  ---PARCS202100042
)AA
	 
	IF (@Pi_CrdAdjAmt < @CreditAmount) AND @CreditAmount > 0
	BEGIN
		 IF (@Pi_SalNetAmt-@Pi_CrdAdjAmt) > 1 OR (@Pi_SalNetAmt-@Pi_CrdAdjAmt) < 0
		 BEGIN
			SET @Approved = 1
		 END  
	END  
RETURN(@Approved) 
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_AutoAdjustmentRetailerCreditNote' AND xtype='P')
DROP PROCEDURE Proc_AutoAdjustmentRetailerCreditNote
GO
/*
begin tran  
EXEC Proc_AutoAdjustmentRetailerCreditNote 1444,'2017-01-09',565,892.5,1,0,0,0,''  
SELECT * FROM SalInvCrNoteAdj (NOLOCK) WHERE SalId = 12  
SELECT * FROM CreditNoteRetailer (NOLOCK) WHERE RtrId = 34  
ROLLBACK TRANSACTION  
*/  
CREATE PROCEDURE Proc_AutoAdjustmentRetailerCreditNote    
(  
 @Pi_SalId          BIGINT,  
 @Pi_SalInvDate      DATETIME,  
 @Pi_RtrId          BIGINT,  
 @Pi_SalNetAmt        NUMERIC(36,6),  
 @Pi_UsrId            BIGINT,  
 @Pi_NetAmount        NUMERIC(36,6) OUTPUT,  
 @Pi_CreditAmount     NUMERIC(36,6) OUTPUT,  
 @Pi_CreditError      TINYINT OUTPUT,  
 @Pi_CreditErrorMsg  Varchar(3000) OUTPUT  
)  
AS  
/****************************************************************************  
* PROCEDURE: Proc_AutoAdjustmentRetailerCreditNote  
* PURPOSE  : Auto Adjustment Retailer Credit Note  
* NOTES    :  
* CREATED  : Sathishkumar Veeramani 2015/04/20  
* MODIFIED  
* DATE         AUTHOR     DESCRIPTION  
------------------------------------------------------------------------------  
* DATE        AUTHOR			CR/BZ		USER STORY ID   DESCRIPTION   
***************************************************************************************************************************** 
*17-07-2020	  S.Moorthi			CR			PARCS202100042   Target Achievement Credit note generation and adjusted in billing
*****************************************************************************/  
SET NOCOUNT ON  
BEGIN  
DECLARE @CreditNote AS NVARCHAR(100)  
DECLARE @CreditAmt AS NUMERIC(36,6)  
DECLARE @ReasonId AS INT  
SET @ReasonId=0  
    SET @Pi_NetAmount = @Pi_SalNetAmt-1  
    BEGIN TRY  
    SET @Pi_CreditError=0  
    SET @Pi_CreditErrorMsg=''  
    SELECT @ReasonId=ISNULL(ReasonId,0) FROM ReasonMaster (NOLOCK) WHERE DESCRIPTION='Institutions Target Setting'     
     DECLARE @CRDATE    DateTime   
  DECLARE @CRDATEGETDATE    DateTime   
  SELECT  @CRDATEGETDATE =  CONVERT(Varchar(10),GETDATE(),121)   
  Select  @CRDATE =  CONVERT(Varchar(10),Condition,121)      From  ManualConfiguration (Nolock)  Where ProjectName  = 'PARLE'  and ModuleId = 'AutoInsCRDateConfig'  
  SET @CRDATE = Isnull(@CRDATE,@CRDATEGETDATE)   
    DELETE A FROM Prk_SalInvCrNoteAdj A WHERE SalId=@Pi_SalId  
    SELECT DISTINCT CrNoteNumber,RtrId,(SUM(Amount)-SUM(CrAdjAmount)) AS CreditAmount  INTO #RetailerCreditNoteDetails   
    FROM CreditNoteRetailer (NOLOCK)   
    WHERE [Status] = 1  AND CrNoteDate >=  @CRDATE  --and Remarks like '%Download from Console%'  ---PARCS202100042
     --AND CrNoteDate <=@Pi_SalInvDate   
     AND RtrId = @Pi_RtrId AND ReasonId=@ReasonId GROUP BY CrNoteNumber,RtrId   
    HAVING (SUM(Amount)-SUM(CrAdjAmount)) > 0  
     IF NOT EXISTS (SELECT DISTINCT CrNoteNumber FROM #RetailerCreditNoteDetails)  
     BEGIN  
         SET @Pi_NetAmount = @Pi_SalNetAmt  
         SET @Pi_CreditAmount = 0  
         RETURN  
     END  
     WHILE EXISTS (SELECT DISTINCT CrNoteNumber FROM #RetailerCreditNoteDetails)  
	  BEGIN   
				 SELECT TOP(1) @CreditNote = CrNoteNumber,@CreditAmt = SUM(CreditAmount) FROM #RetailerCreditNoteDetails  
				 GROUP BY CrNoteNumber HAVING SUM(CreditAmount) > 0  
				 WHILE @CreditAmt > 0 AND @Pi_NetAmount > 0  
				 BEGIN  
					  IF @Pi_NetAmount >= @CreditAmt  
					  BEGIN                        
						 INSERT INTO Prk_SalInvCrNoteAdj (SalId,CrNoteNumber,AdjSofar,CrAdjAmount,RtrId,Availability,LastModBy,LastModDate,AuthId,AuthDate)  
						 SELECT DISTINCT @Pi_SalId,@CreditNote,0,@CreditAmt,@Pi_RtrId,1,@Pi_UsrId,  
						 CONVERT(NVARCHAR(10),GETDATE(),121),@Pi_UsrId,CONVERT(NVARCHAR(10),GETDATE(),121)           
	                    
						 UPDATE CreditNoteRetailer SET CrAdjAmount = CrAdjAmount+@CreditAmt WHERE RtrId = @Pi_RtrId AND CrNoteNumber = @CreditNote  
						 SET @Pi_NetAmount = @Pi_NetAmount-@CreditAmt  
						 SET @CreditAmt = 0  
					  END  
					  ELSE  
					  BEGIN  
					  
						 INSERT INTO Prk_SalInvCrNoteAdj (SalId,CrNoteNumber,AdjSofar,CrAdjAmount,RtrId,Availability,LastModBy,LastModDate,AuthId,AuthDate)  
						 SELECT DISTINCT @Pi_SalId,@CreditNote,0,@Pi_NetAmount,@Pi_RtrId,1,@Pi_UsrId,  
						 CONVERT(NVARCHAR(10),GETDATE(),121),@Pi_UsrId,CONVERT(NVARCHAR(10),GETDATE(),121)           
	         
						 UPDATE CreditNoteRetailer SET CrAdjAmount = CrAdjAmount+@Pi_NetAmount WHERE RtrId = @Pi_RtrId AND CrNoteNumber = @CreditNote  
						 SET @Pi_NetAmount=0
						 --SET @CreditAmt = 0  
						 --SET @Pi_CreditError=1  
						 --SET @Pi_CreditErrorMsg='Credit Note value is lesser than Bill Value, Please increase the sales. Order No. :'                                            
					  END   
				 END  
	  DELETE FROM #RetailerCreditNoteDetails WHERE CrNoteNumber = @CreditNote   
	  END  
	  
	  
  SET @Pi_NetAmount = @Pi_NetAmount+1  
  SELECT @Pi_CreditAmount = ISNULl(SUM(CrAdjAmount),0) FROM Prk_SalInvCrNoteAdj (NOLOCK) WHERE RtrId = @Pi_RtrId AND SalId = @Pi_SalId  
  END TRY  
  BEGIN CATCH  
    SET @Pi_CreditError=1  
    SET @Pi_CreditErrorMsg=ERROR_MESSAGE() + ' Error in CreditNote Adjustment'  
  END CATCH  
  SELECT @Pi_NetAmount,@Pi_CreditAmount,@Pi_CreditError,@Pi_CreditErrorMsg   
RETURN  
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='FN_ReturnCreditnotedetails' AND xtype='TF')
DROP FUNCTION FN_ReturnCreditnotedetails
GO
---  SELECT DISTINCT Dbo.Fn_ReturnCreditNoteAvaialble(196,9188) AS AvlStatus
CREATE FUNCTION FN_ReturnCreditnotedetails (@Rtrid INT,@SalId INT,@BillDate DATETIME)
RETURNS @ReturnCreditnotedetails TABLE
(
	CrNoteNumber	VARCHAR(50),
	[Description]	NVARCHAR(100),
	Amount			NUMERIC(18,2),
	CrAdjAmount		NUMERIC (18,2),
	AvailAmount		NUMERIC(18,2),
	Status INT,
	DLCRStatus INT
)
AS
/******************************************************************************************************************************
* Details    : Fn_InsCRNotePending
* PURPOSE    : 
* CREATED BY : Panneer
* CREATED ON : 20-05-2019
*****************************************************************************************************************************
* DATE        AUTHOR			CR/BZ		USER STORY ID   DESCRIPTION   
***************************************************************************************************************************** 
*25-06-2019	  Panneer			CR			CRCRSTPAR0073   Auto  Institutions CR Note Applied  In Billing		
*17-07-2020	  S.Moorthi			CR			PARCS202100042   Target Achievement Credit note generation and adjusted in billing 
*******************************************************************************************************************************/
BEGIN
	DECLARE @IN_RETURN AS INT
	SET @IN_RETURN=0
	DECLARE @CRDATE			 DateTime 
	DECLARE @CRDATEGETDATE    DateTime 
	SELECT  @CRDATEGETDATE =  CONVERT(Varchar(10),GETDATE(),121) 
	Select  @CRDATE =  CONVERT(Varchar(10),Condition,121)      From  ManualConfiguration (Nolock)  Where ProjectName  = 'PARLE'  and ModuleId = 'AutoInsCRDateConfig'
	SET @CRDATE = Isnull(@CRDATE,@CRDATEGETDATE) 
	DECLARE @AutoCR TABLE (  CrNoteNumber    NVARCHAR(200) )
	INSERT INTO @ReturnCreditnotedetails
	SELECT CrNoteNumber,[Description],Amount,CrAdjAmount,AvailAmount,[Status]	,0  DLCRStatus
	FROM	
		(	
			SELECT	CRR.CrNoteNumber , R.Description , CRR.Amount , 
					CRR.CrAdjAmount - CASE ISNULL(A1.Dlvsts,0) WHEN 3 THEN 0 ELSE ISNULL(C.CrAdjAmount,0) END as CrAdjAmount, 
					(CRR.Amount + CASE ISNULL(A1.Dlvsts,0) WHEN 3 THEN 0 ELSE ISNULL(C.CrAdjAmount,0) END - CRR.CrAdjAmount) AvailAmount,CRR.Status 
			FROM CreditNoteRetailer CRR (Nolock)
							INNER JOIN ReasonMaster R (Nolock)  ON CRR.ReasonId = R.ReasonId and CRR.RtrId = @Rtrid 
							LEFT OUTER JOIN SalInvCrNoteAdj C (Nolock)  On C.CrNoteNumber = CRR.CrNoteNumber 
							AND C.SalId = @SalId LEFT OUTER JOIN SALESINVOICE A1  (Nolock)  ON A1.SalId = c.SalId
			Where Status = 1   and CrNoteDate >=  @CRDATE
		) AS A 
		Update @ReturnCreditnotedetails Set  DLCRStatus = 0 
		Insert Into  @AutoCR
		Select  Distinct A.CrNoteNumber	
		From @ReturnCreditnotedetails A ,  CreditNoteRetailer B (Nolock) 
		Where A.CrNoteNumber = B.CrNoteNumber --AND  B.Remarks Like '%Download from Console%'   ----PARCS202100042
		and B.ReasonId In (Select  ReasonId From ReasonMaster (Nolock) Where  Description = 'Institutions Target Setting' )
		UPdate  @ReturnCreditnotedetails Set DLCRStatus =  1
		From  @ReturnCreditnotedetails A,@AutoCR B Where A.CrNoteNumber = B.CrNoteNumber 
		 
RETURN
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Fn_ReturnCreditNoteAvaialble' AND xtype='FN')
DROP FUNCTION Fn_ReturnCreditNoteAvaialble
GO
--SELECT DISTINCT Dbo.Fn_ReturnCreditNoteAvaialble(188,0)
CREATE FUNCTION Fn_ReturnCreditNoteAvaialble(@Pi_RtrId AS NUMERIC(18,0),@Pi_SalId AS NUMERIC(18,0))
RETURNS TINYINT
AS
BEGIN
/******************************************************************************************************************************
* Details    : Fn_InsCRNotePending
* PURPOSE    : 
* CREATED BY : Panneer
* CREATED ON : 20-05-2019
*****************************************************************************************************************************
* DATE        AUTHOR			CR/BZ		USER STORY ID   DESCRIPTION   
***************************************************************************************************************************** 
*25-06-2019	  Panneer			CR			CRCRSTPAR0073   Auto  Institutions CR Note Applied  In Billing
*17-07-2020	  S.Moorthi			CR			PARCS202100042   Target Achievement Credit note generation and adjusted in billing 			 
*******************************************************************************************************************************/
DECLARE @AvlStatus AS TINYINT
DECLARE @IN_RETURN AS INT
SET @IN_RETURN=0
SET @AvlStatus = 0
DECLARE @CRDATE			 DateTime 
DECLARE @CRDATEGETDATE    DateTime 
SELECT  @CRDATEGETDATE =  CONVERT(Varchar(10),GETDATE(),121) 
Select  @CRDATE =  CONVERT(Varchar(10),Condition,121)      From  ManualConfiguration (Nolock)  Where ProjectName  = 'PARLE'  and ModuleId = 'AutoInsCRDateConfig'
SET @CRDATE = Isnull(@CRDATE,@CRDATEGETDATE) 
	IF EXISTS ( SELECT DISTINCT A.CrNoteNumber,SUM(Amount-ISNULL(CrdAdjAmt,0)) AS CreditAmount 
				FROM CreditNoteRetailer A (NOLOCK) 
				LEFT OUTER JOIN	(
									SELECT A.CrNoteNumber,A.RtrId,ISNULL(SUM(A.CrAdjAmount),0) AS CrdAdjAmt 
									FROM SalInvCrNoteAdj A (NOLOCK) INNER JOIN SalesInvoice SI (NOLOCK) ON A.SalId = SI.SalId  
									WHERE Dlvsts <> 3 AND A.RtrId = @Pi_RtrId 
										AND A.SalId <> @Pi_SalId GROUP BY A.CrNoteNumber,A.RtrId
								)SCA 
								ON A.CrNoteNumber = SCA.CrNoteNumber AND A.RtrId = SCA.RtrId 
				WHERE [Status] = 1   AND A.RtrId = @Pi_RtrId  and  CrNoteDate >= @CRDATE
					AND A.ReasonId In (Select ReasonId From  ReasonMaster (Nolock) Where [Description] = 'Institutions Target Setting'  ) 
					--AND  Remarks  like '%Download from Console%'  ----PARCS202100042
				GROUP BY A.CrNoteNumber HAVING SUM(Amount-ISNULL(CrdAdjAmt,0)) > 0)
	BEGIN
		SET @AvlStatus = 1
	END
	
RETURN(@AvlStatus) 
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Fn_CheckMonthEnd' AND TYPE='FN')
DROP FUNCTION Fn_CheckMonthEnd
GO
--SELECT DBO.Fn_CheckMonthEnd(2020,4,2,504)
CREATE FUNCTION Fn_CheckMonthEnd (@Pi_Year INT,@Pi_Month INT,@Pi_UsrId INT,@Pi_TransId INT)  
RETURNS VARCHAR(500)   
AS  
/*******************************************************************************************************************  
* PROCEDURE : Fn_CheckMonthEnd    
* PURPOSE : To validate month end details before generating debit note top sheet report  
* NOTES  :    
* CREATED : S.MOHANA   
* DATE  : 18-11-2019  
* PMS  : CRCRSTPAR0079 
* 28-02-2020  MOHANA S  SR ILCRSTPAR8064 enabled the validation
* DATE				 AUTHOR				CR\BUG	UserStorageID		DESCRIPTION
------------------------------------------------------------------------------------------------
* 18/05/2020		 S.MOORTHI			  CR	PARCS202100019		Target achievement should be calculated in the Core Stocky    
**********************************************************************************************************************/  
BEGIN  
	DECLARE @ValidateMsg AS VARCHAR(500)  
	DECLARE @MonthEndDt AS DATETIME  
	DECLARE @FromDate  DATETIME  
	DECLARE @ToDate    DATETIME  
		SET  @ValidateMsg  = ''  
		SELECT @FromDate= DATEADD(MONTH, (@Pi_Month)-1,DATEADD(YEAR, @Pi_Year - 1900, 0))  
		SELECT @ToDate = DATEADD(dd, -1, DATEADD(MONTH, @Pi_Month,DATEADD(YEAR, @Pi_Year - 1900, 0)))  
 
		IF @Pi_Month =0
		BEGIN
		SET @ValidateMsg='Seleted Month Period Date format not correct. Hence Debit Note Top Sheet Claim Cannot generate' 
		END

		IF @Pi_Year =0
		BEGIN
		SET @ValidateMsg='Seleted Year Date format not correct. Hence Debit Note Top Sheet Claim Cannot generate' 
		END
  
		IF EXISTS(SELECT * FROM JCMonthEnd)  
		BEGIN  
			SELECT @MonthEndDt=MAX(JcmEdt) FROM JCMonthEnd  
			IF @ToDate>@MonthEndDt  
			BEGIN  
				SET @ValidateMsg='Month end not completed for selected period . Hence Debit Note Top Sheet Claim Cannot generate'  
			END  
		END  
 
		IF @FromDate <='2019-11-30' 
		BEGIN  
		SET @ValidateMsg='Debit Note top sheet can be Genearte after dated on 01-12-2019'  
		END  

		--TARGET DOWNLOAD ISSUE
		IF @ValidateMsg = ''   
		BEGIN  
		IF @Pi_Month = 4 AND @Pi_Year = 2020
		BEGIN
				IF EXISTS (SELECT * FROM Distributor WHERE DISTRIBUTORCODE IN
							('1000006','1000009','1000010','1000016','1000022','1000026','1000027','1000033','1000040','1000048','1000050','1000068','1000069','1000074','1000078','1000079',
							'1000082','1000088','1000093','1000103','1000104','1000105','1000107','1000109','1000112','1000117','1000124','1000132','1000137','1000141','1000149','1000150',
							'1000156','1000164','1000169','1000173','1000175','1000178','1000190','1000191','1000199','1000206','1000207','1000210','1000224','1000228','1000247','1000252',
							'1000261','1000266','1000272','1000280','1000290','1000295','1000301','1000302','1000303','1000305','1000311','1000312','1000314','1000319','1000325','1000327',
							'1000331','1000333','1000334','1000341','1000342','1000352','1000353','1000355','1000370','1000373','1000374','1000384','1000392','1000401','1000404','1000417',
							'1000420','1000425','1000429','1000431','1000448','1000449','1000450','1000460','1000464','1000476','1000479','1000481','1000484','1000491','1000494','1000501',
							'1000502','1000503','1000504','1000506','1000509','1000511','1000514','1000517','1000520','1000521','1000522','1000524','1000527','1000528','1000530','1000539',
							'1000548','1000551','1000554','1000555','1000558','1000560','1000562','1000564','1000570','1000575','1000577','1000591','1000592','1000598','1000601','1000602',
							'1000609','1000610','1000640','1000649','1000660','1000665','1000666','1000674','1000678','1000689','1000708','1000712','1000716','1000717','1000721','1000722',
							'1000723','1000724','1000739','1000742','1000743','1000746','1000756','1000757','1000763','1000767','1000771','1000772','1000773','1000774','1000775','1000779',
							'1000790','1000810','1000813','1000815','1000816','1000831','1000837','1000842','1000846','1000847','1000859','1000862','1000864','1000873','1000882','1000883',
							'1000899','1000906','1000913','1000931','1000938','1000944','1000948','1000949','1000954','1000956','1000959','1000962','1000965','1000968','1000971','1000973',
							'1000982','1000986','1000997','1001006','1001012','1001013','1001016','1001031','1001032','1001038','1001048','1001065','1001066','1001081','1001087','1001091',
							'1001094','1001095','1001098','1001100','1001109','1001113','1001123','1001124','1001132','1001136','1001141','1001142','1001143','1001145','1001146','1001147',
							'1001151','1001152','1001160','1001161','1001174','1001195','1001202','1001219','1001223','1001242','1001243','1001252','1001260','1001264','1001265','1001267',
							'1001277','1001286','1001291','1001296','1001297','1001304','1001307','1001310','1001311','1001313','1001317','1001324','1001335','1001343','1001344','1001351',
							'1001361','1001380','1001384','1001389','1001393','1001395','1001403','1001417','1001421','1001427','1001434','1001437','1001441','1001442','1001443','1001444',
							'1001447','1001453','1001458','1001459','1001460','1001464','1001468','1001469','1001470','1001491','1001499','1001508','1001523','1001529','1001531','1001534',
							'1001536','1001538','1001549','1001550','1001551','1001556','1001558','1001560','1001561','1001574','1001583','1001585','1001587','1001588','1001598','1001614',
							'1001616','1001618','1001622','1001623','1001624','1001634','1001635','1001652','1001656','1001668','1001670','1001671','1001676','1001678','1001689','1001695',
							'1001728','1001730','1001733','1001735','1001745','1001755','1001769','1001777','1001782','1001783','1001785','1001789','1001790','1001792','1001798','1001801',
							'1001802','1001803','1001815','1001818','1001819','1001828','1001831','1001835','1001837','1001838','1001844','1001846','1001854','1001861','1001867','1001873',
							'1001875','1001876','1001884','1001896','1001906','1001908','1001917','1001919','1001923','1001931','1001944','1001951','1001952','1001955','1001956','1001958',
							'1001961','1001972','1001974','1001976','1001977','1001978','1002002','1002003','1002004','1002006','1002007','1002009','1002013','1002014','1002016','1002018',
							'1002020','1002026','1002028','1002034','1002037','1002041','1002042','1002044','1002051','1002055','1002057','1002064','1002070','1002072','1002074','1002076',
							'1002090','1002093','1002094','1002097','1002098','1002112','1002115','1002116','1002118','1002120','1002124','1002126','1002128','1002130','1002132','1002133',
							'1002134','1002135','1002136','1002140','1002144','1002148','1002149','1002159','1002160','1002166','1002170','1002172','1002173','1002175','1002183','1002187',
							'1002188','1002192','1002193','1002194','1002199','1002204','1002210','1002216','1002220','1002221','1002225','1002226','1002227','1002229','1002230','1002231',
							'1002235','1002238','1002240','1002249','1002251','1002256','1002259','1002264','1002267','1002269','1002270','1002271','1002276','1002287','1002290','1002291',
							'1002295','1002299','1002300','1002301','1002302','1002303','1002306','1002307','1002313','1002318','1002320','1002322','1002326','1002333','1002337','1002342',
							'1002349','1002352','1002360','1002361','1002365','1002366','1002367','1002370','1002372','1002374','1002378','1002381','1002382','1002394','1002398','1002399',
							'1002405','1002406','1002407','1002411','1002412','1002413','1002415','1002416','1002417','1002418','1002419','1002420','1002421','1002423','1002446','1002449',
							'1002459','1002481','1002484','1002486','1002487','1002490','1002512','1002522','1002526','1002527','1002528','1002530','1002532','1002533','1002535','1002544',
							'1002548','1002553','1002556','1002570','1002576','1002577','1002580','1002587','1002591','1002592','1002602','1002606','1002607','1002615','1002617','1002618',
							'1002619','1002620','1002622','1002624','1002633','1002634','1002635','1002637','1002638','1002642','1002646','1002654','1002655','1002661','1002664','1002668',
							'1002673','1002674','1002675','1002677','1002678','1002679','1002682','1002683','1002685','1002686','1002691','1002701','1002702','1002704','1002713','1002718',
							'1002720','1002724','1002728','1002729','1002731','1002734','1002736','1002739','1002742','1002743','1002745','1002746','1002747','1002749','1002753','1002754',
							'1002757','1002764','1002772','1002774','1002775','1002776','1002787','1002788','1002792','1002795','1002798','1002803','1002804','1002805','1002806','1002807',
							'1002811','1002815','1002816','1002820','1002821','1002822','1002824','1002825','1002828','1002830','1002836','1002838','1002839','1002844','1002847','1002852',
							'1002863','1002866','1002877','1002891','1002906','1002914','1002922','1002937','1002951','1002957','1002959','1002965','1002973','1002974','1002986','1002993',
							'1002994','1002999','1003006','1003015','1003024','1003037','1003038','1003039','1003040','1003054','1003058','1003061','1003076','1003082','1003083','1003093',
							'1003096','1003098','1003100','1003101','1003112','1003114','1003117','1003123','1003136','1003142','1003152','1003153','1003157','1003158','1003177','1003183',
							'1003194','1003206','1003215','1003222','1003224','1003226','1003230','1003239','1003240','1003242','1003243','1003256','1003257','1003272','1003273','1003276',
							'1003281','1003284','1003291','1003294','1003298','1003299','1003302','1003306','1003308','1003316','1003327','1003330','1003332','1003333','1003335','1003337',
							'1003338','1003342','1003353','1003392','1003393','1003395','1003407','1003409','1003410','1003433','1003452','1003454','1003458','1003459','1003462','1003463',
							'1003464','1003468','1003485','1003488','1003489','1003495','1003505','1003512','1003521','1003525','1003540','1003543','1003556','1003561','1003564','1003571',
							'1003577','1003584','1003586','1003591','1003592','1003595','1003599','1003609','1003615','1003624','1003629','1003642','1003645','1003649','1003655','1003660',
							'1003663','1003676','1003697','1003698','1003708','1003710','1003718','1003719','1003724','1003729','1003733','1003737','1003747','1003757','1003779','1003791',
							'1003794','1003795','1003803','1003810','1003812','1003820','1003821','1003825','1003858','1003864','1003870','1003893','1003899','1003905','1003907','1003909',
							'1003914','1003918','1003930','1003933','1003934','1003937','1003964','1003966','1003973','1003975','1003981','1004001','1004003','1004009','1004016','1004034',
							'1004043','1004044','1004055','1004072','1004074','1004081','1004088','1004099','1004101','1004107','1004112','1004114','1004121','1004130','1004134','1004147',
							'1004148','1004155','1004161','1004162','1004175','1004184','1004191','1004207','1004212','1004220','1004235','1004238','1004249','1004252','1004254','1004255',
							'1004279','1004284','1004292','1004299','1004303','1004304','1004325','1004337','1004345','1004356','1004358','1004362','1004372','1004381','1004393','1004395',
							'1004397','1004405','1004407','1004425','1004448','1004453','1004457','1004476','1004478','1004495','1004505','1004506','1004516','1004521','1004524','1004531',
							'1004532','1004579','1004583','1004586','1004592','1004600','1004608','1004617','1004619','1004624','1004633','1004644','1004652','1004656','1004660','1004663',
							'1004674','1004675','1004676','1004677','1004679','1004681','1004683','1004684','1004685','1004686','1004688','1004690','1004692','1004693','1004695','1004696',
							'1004699','1004701','1004707','1004708','1004710','1004719','1004721','1004724','1004727','1004728','1004729','1004732','1004735','1004736','1004739','1004746',
							'1004747','1004748','1004751','1004752','1004753','1004754','1004760','1004762','1004763','1004764','1004765','1004766','1004768','1004784','1004786','1004790',
							'1004795','1004796','1004798','1004801','1004803','1004809','1004812','1004813','1004814','1004819','1004844','1004846','1004848','1004851','1004853','1004857',
							'1004858','1004860','1004865','1004866','1004873','1004879','1004882','1004889','1004890','1004892','1004893','1004898','1004902','1004907','1004909','1004911',
							'1004912','1004913','1004914','1004918','1004919','1004921','1004924','1004925','1004926','1004931','1004933','1004944','1004950','1004951','1004953','1004955',
							'1004957','1004958','1004963','1004965','1004967','1004968','1004970','1004975','1004977','1004979','1004980','1004981','1004983','1004985','1004986','1004989',
							'1004996','1005000','1005005','1005014','1005024','1005027','1005033','1005039','1005047','1005052','1005055','1005058','1005064','1005074','1005077','1005078',
							'1005089','1005098','1005099','1005112','1005113','1005117','1005118','1005119','1005120','1005121','1005122','1005126','1005131','1005133','1005138','1005140',
							'1005141','1005142','1005147','1005149','1005150','1005157','1005158','1005164','1005165','1005169','1005172','1005173','1005180','1005184','1005194','1005199',
							'1005203','1005207','1005215','1005218','1005223','1005224','1005228','1005230','1005231','1005234','1005237','1005242','1005250','1005267','1005269','1005270',
							'1005278','1005282','1005285','1005287','1005288','1005289','1005297','1005305','1005306','1005308','1005311','1005320','1005324','1005328','1005330','1005331',
							'1005332','1005335','1005336','1005337','1005339','1005340','1005348','1005352','1005354','1005360','1005364','1005365','1005371','1005390','1005394','1005401',
							'1005403','1005408','1005409','1005412','1005413','1005418','1005420','1005423','1005427','1005433','1005435','1005436','1005439','1005444','1005446','1005448',
							'1005450','1005453','1005454','1005455','1005458','1005460','1005461','1005463','1005471','1005475','1005477','1005484','1005488','1005491','1005495','1005496',
							'1005500','1005501','1005504','1005506','1005510','1005511','1005512','1005517','1005518','1005519','1005520','1005521','1005522','1005527','1005528','1005531',
							'1005533','1005538','1005541','1005543','1005546','1005550','1005555','1005558','1005559','1005562','1005563','1005565','1005567','1005569','1005574','1005575',
							'1005577','1005583','1005587','1005589','1005591','1005592','1005593','1005600','1005601','1005602','1005605','1005621','1005625','1005628','1005629','1005634',
							'1005640','1005641','1005644','1005653','1005659','1005661','1005662','1005665','1005666','1005667','1005668','1005669','1005672','1005673','1005685','1005686',
							'1005689','1005691','1005692','1005693','1005694','1005696','1005699','1005715','1005718','1005719','1005721','1005722','1005723','1005724','1005726','1005727',
							'1005728','1005729','1005732','1005733','1005736','1005737','1005739','1005740','1005742','1005743','1005746','1005747','1005752','1005754','1005756','1005759',
							'1005760','1005761','1005766','1005773','1005775','1005791','1005798','1005801','1005808','1005809','1005810','1005811','1005816','1005819','1005821','1005824',
							'1005829','1005832','1005834','1005837','1005840','1005844','1005847','1005848','1005852','1005853','1005855','1005856','1005860','1005861','1005862','1005864',
							'1005866','1005867','1005875','1005876','1005881','1005882','1005884','1005885','1005887','1005888','1005889','1005890','1005891','1005893','1005899','1005902',
							'1005908','1005913','1005915','1005919','1005920','1005921','1005922','1005925','1005926','1005927','1005929','1005930','1005934','1005935','1005936','1005949',
							'1005959','1005962','1005963','1005964','1005968','1005971','1005973','1005976','1005978','1005980','1005981','1005985','1006001','1006008','1006009','1006010',
							'1006023','1006024','1006027','1006033','1006036','1006041','1006072','1006074','1006075','1006079','1006085','1006092','1006097','1006098','1006113','1006116',
							'1006125','1006128','1006129','1006145','1006163','1006166','1006177','1006211','1006213','1006220','1006221','1006225','1006246','1006250','1006255','1006262',
							'1006279','1006287','1006290','1006291','1006292','1006295','1006296','1006302','1006303','1006310','1006317','1006329','1006341','1006366','1006400','1006402',
							'1006404','1006405','1006407','1006413','1006416','1006429','1006447','1006449','1006481','1006483','1006488','1006489','1006490','1006505','1006506','1006507',
							'1006521','1006524','1006528','1006561','1006565','1006579','1006586','1006589','1006590','1006592','1006596','1006606','1006613','1006614','1006617','1006621',
							'1006625','1006639','1006650','1006651','1006665','1006690','1006695','1006696','1006697','1006701','1006703','1006718','1006729','1006730','1006731','1006736',
							'1006757','1006760','1006770','1006779','1006780','1006786','1006788','1006818','1006837','1006842','1006847','1006848','1006863','1006866','1006872','1006876',
							'1006893','1006896','1006898','1006907','1006915','1006919','1006920','1006925','1006926','1006929','1006933','1006936','1006945','1006946','1006953','1006954',
							'1006955','1006959','1006960','1006978','1006980','1006984','1006987','1007000','1007005','1007027','1007031','1007032','1007034','1007037','1007038','1007053',
							'1007057','1007071','1007074','1007077','1007086','1007092','1007099','1007102','1007107','1007110','1007113','1007114','1007116','1007119','1007139','1007141',
							'1007144','1007146','1007148','1007151','1007169','1007180','1007192','1007195','1007214','1007217','1007227','1007232','1007233','1007237','1007244','1007254',
							'1007256','1007260','1007269','1007270','1007272','1007273','1007276','1007291','1007302','1007304','1007305','1007306','1007307','1007316','1007332','1007341',
							'1007342','1007344','1007350','1007355','1007358','1007361','1007366','1007370','1007371','1007372','1007373','1007391','1007392','1007396','1007401','1007412',
							'1007421','1007427','1007429','1007430','1007439','1007465','1007471','1007472','1007474','1007477','1007482','1007486','1007488','1007495','1007496','1007502',
							'1007509','1007518','1007529','1007534','1007540','1007557','1007559','1007561','1007569','1007577','1007608','1007616','1007619','1007628','1007630','1007631',
							'1007635','1007645','1007648','1007649','1007650','1007659','1007662','1007665','1007666','1007672','1007678','1007681','1007682','1007683','1007689','1007694',
							'1007704','1007717','1007719','1007721','1007724','1007741','1007744','1007752','1007754','1007755','1007758','1007767','1007768','1007773','1007775','1007784',
							'1007786','1007788','1007791','1007832','1007842','1007843','1007846','1007847','1007851','1007858','1007859','1007876','1007883','1007884','1007893','1007894',
							'1007895','1007899','1007901','1007902','1007920','1007924','1007926','1007943','1007944','1007955','1007959','1007962','1007968','1007969','1007971','1007978',
							'1007990','1007999','1008001','1008004','1008013','1008014','1008016','1008017','1008018','1008024','1008034','1008040','1008041','1008043','1008044','1008058',
							'1008060','1008064','1008080','1008085','1008091','1008103','1008111','1008112','1008119','1008130','1008132','1008136','1008141','1008144','1008151','1008157',
							'1008181','1008182','1008183','1008187','1008189','1008197','1008200','1008201','1008204','1008205','1008208','1008210','1008216','1008217','1008218','1008220',
							'1008221','1008222','1008224','1008233','1008238','1008240','1008246','1008259','1008266','1008270','1008275','1008276','1008279','1008281','1008284','1008285',
							'1008286','1008287','1008289','1008301','1008303','1008311','1008314','1008315','1008318','1008319','1008328','1008329','1008332','1008352','1008358','1008359',
							'1008363','1008364','1008367','1008368','1008381','1008382','1008386','1008387','1008425','1008426','1008432','1008437','1008441','1008457','1008461','1008471',
							'1008478','1008485','1008505','1008516','1008518','1008520','1008521','1008524','1008530','1008535','1008538','1008541','1008542','1008554','1008556','1008572',
							'1008576','1008577','1008578','1008590','1008593','1008594','1008599','1008600','1008611','1008620','1008628','1008630','1008632','1008633','1008639','1008642',
							'1008644','1008660','1008662','1008663','1008680','1008681','1008687','1008688','1008705','1008722','1008726','1008732','1008736','1008751','1008759','1008762',
							'1008769','1008780','1008791','1008795','1008797','1008799','1008802','1008804','1008807','1008809','1008813','1008817','1008818','1008819','1008820','1008839',
							'1008855','1008857','1008867','1008868','1008869','1008887','1008889','1008891','1008893','1008894','1008899','1008901','1008904','1008907','1008912','1008915',
							'1008925','1008936','1008937','1008938','1008939','1008941','1008949','1008950','1008952','1008953','1008955','1008966','1008974','1008976','1008993','1008996',
							'1009001','1009020','1009036','1009037','1009040','1009041','1009043','1009047','1009050','1009068','1009069','1009070','1009092','1009094','1009109','1009122',
							'1009129','1009130','1009140','1009141','1009142','1009144','1009161','1009163','1009165','1009167','1009169','1009176','1009182','1009192','1009198','1009199',
							'1009211','1009212','1009232','1009233','1009236','1009238','1009239','1009249','1009254','1009256','1009261','1009263','1009277','1009278','1009279','1009280',
							'1009286','1009287','1009290','1009298','1009299','1009300','1009303','1009307','1009309','1009327','1009330','1009334','1009337','1009341','1009354','1009364',
							'1009365','1009366','1009376','1009379','1009383','1009387','1009392','1009393','1009401','1009402','1009406','1009416','1009421','1009425','1009427','1009447',
							'1009450','1009451','1009457','1009460','1009464','1009467','1009476','1009491','1009505','1009508','1009511','1009521','1009528','1009531','1009532','1009540',
							'1009548','1009554','1009558','1009568','1009570','1009572','1009574','1009575','1009588','1009592','1009593','1009596','1009598','1009605','1009606','1009610',
							'1009616','1009619','1009622','1009636','1009640','1009642','1009647','1009648','1009650','1009651','1009661','1009662','1009663','1009664','1009677','1009683',
							'1009691','1009696','1009699','1009705','1009708','1009712','1009723','1009726','1009727','1009731','1009733','1009736','1009738','1009739','1009740','1009752',
							'1009770','1009773','1009776','1009777','1009778','1009780','1009790','1009804','1009805','1009817','1009824','1009828','1009831','1009834','1009835','1009839',
							'1009840','1009844','1009851','1009853','1009864','1009867','1009871','1009873','1009877','1009878','1009880','1009882','1009896','1009897','1009900','1009907',
							'1009908','1009914','1009936','1009937','1009941','1009942','1009949','1009950','1009952','1009954','1009955','1009956','1009957','1009960','1009963','1009974',
							'1009975','1009983','1009984','1009985','1009986','1009992','1009994','1009996','1009998','1009999','1010001','1010011','1010030','1010031','1010037','1010042',
							'1010043','1010048','1010051','1010069','1010082','1010083','1010084','1010092','1010102','1010108','1010128','1010131','1010136','1010139','1010145','1010148',
							'1010156','1010160','1010169','1010181','1010182','1010183','1010190','1010192','1010197','1010199','1010200','1010211','1010215','1010217','1010220','1010236',
							'1010244','1010248','1010249','1010250','1010251','1010255','1010259','1010261','1010262','1010263','1010265','1010267','1010270','1010271','1010273','1010275',
							'1010288','1010289','1010294','1010295','1010296','1010300','1010306','1010309','1010311','1010317','1010318','1010319','1010320','1010324','1010327','1010329',
							'1010330','1010333','1010334','1010338','1010339','1010351','1010355','1010365','1010369','1010376','1010377','1010378','1010380','1010386','1010388','1010390',
							'1010399','1010400','1010407','1010412','1010415','1010417','1010419','1010420','1010421','1010426','1010435','1010444','1010445','1010446','1010451','1010462',
							'1010463','1010466','1010467','1010468','1010469','1010470','1010471','1010475','1010476','1010479','1010487','1010488','1010492','1010494','1010495','1010496',
							'1010497','1010498','1010499','1010503','1010504','1010513','1010514','1010515','1010518','1010532','1010534','1010538','1010539','1010543','1010545','1010546',
							'1010547','1010552','1010553','1010565','1010578','1010581','1010582','1010585','1010586','1010587','1010589','1010591','1010594','1010595','1010602','1010605',
							'1010611','1010612','1010614','1010619','1010628','1010629','1010638','1010641','1010645','1010650','1010658','1010672','1010674','1010676','1010680','1010681',
							'1010682','1010683','1010685','1010686','1010694','1010697','1010700','1010710','1010714','1010716','1010727','1010731','1010732','1010733','1010734','1010735',
							'1010738','1010739','1010740','1010741','1010742','1010743','1010745','1010747','1010754','1010762','1010763','1010767','1010770','1010771','1010772','1010774',
							'1010776','1010778','1010780','1010783','1010785','1010787','1010788','1010789','1010797','1010798','1010803','1010807','1010810','1010813','1010817','1010818',
							'1010819','1010820','1010821','1010822','1010835','1010841','1010846','1010849','1010850','1010861','1010865','1010868','1010870','1010876','1010878','1010879',
							'1010880','1010885','1010892','1010893','1010895','1010897','1010898','1010911','1010913','1010914','1010915','1010916','1010917','1010918','1010919','1010921',
							'1010922','1010926','1010928','1010934','1010936','1010939','1010940','1010942','1010945','1010948','1010960','1010973','1010975','1010984','1010986','1010987',
							'1010988','1010989','1010990','1010992','1010997','1010998','1011002','1011007','1011019','1011022','1011024','1011025','1011027','1011029','1011030','1011033',
							'1011036','1011037','1011044','1011045','1011053','1011058','1011063','1011071','1011082','1011083','1011086','1011090','1011094','1011098','1011102','1011103',
							'1011112','1011126','1011127','1011128','1011129','1011141','1011151','1011155','1011161','1011167','1011174','1011178','1011186','1011193','1011194','1011195',
							'1011205','1011207','1011209','1011216','1011220','1011226','1011232','1011234','1011235','1011241','1011245','1011251','1011253','1011254','1011256','1011264',
							'1011268','1011269','1011273','1011274','1011277','1011278','1011281','1011284','1011294','1011306','1011310','1011320','1011325','1011331','1011334','1011335',
							'1011340','1011342','1011345','1011346','1011365','1011369','1011375','1011376','1011391','1011393','1011394','1011396','1011402','1011403','1011405','1011407',
							'1011413','1011418','1011419','1011422','1011423','1011425','1011431','1011435','1011436','1011437','1011439','1011440','1011443','1011447','1011454','1011463',
							'1011467','1011468','1011469','1011480','1011487','1011496','1011497','1011499','1011502','1011512','1011514','1011517','1011524','1011530','1011535','1011541',
							'1011543','1011544','1011545','1011551','1011553','1011560','1011564','1011565','1011568','1011577','1011586','1011587','1011602','1011603','1011604','1011607',
							'1011611','1011612','1011615','1011616','1011617','1011619','1011620','1011621','1011623','1011624','1011627','1011630','1011638','1011639','1011642','1011647',
							'1011650','1011651','1011652','1011653','1011655','1011659','1011666','1011670','1011671','1011679','1011681','1011682','1011683','1011684','1011686','1011688',
							'1011692','1011693','1011697','1011711','1011721','1011722','1011723','1011724','1011725','1011726','1011728','1011737','1011738','1011744','1011754','1011755',
							'1011756','1011757','1011758','1011760','1011768','1011772','1011774','1011784','1011792','1011798','1011801','1011805','1011810','1011814','1011815','1011818',
							'1011820','1011822','1011823','1011826','1011831','1011833','1011838','1011840','1011842','1011844','1011845','1011857','1011872','1011876','1011877','1011879',
							'1011883','1011884','1011886','1011887','1011890','1011891','1011892','1011895','1011896','1011897','1011898','1011899','1011901','1011906','1011909','1011915',
							'1011916','1011922','1011923','1011925','1011934','1011936','1011937','1011939','1011942','1011944','1011949','1011951','1011953','1011961','1011969','1011978',
							'1011981','1011982','1011992','1011993','1011994','1011995','1011998','1012001','1012005','1012006','1012007','1012008','1012012','1012017','1012019','1012025',
							'1012031','1012033','1012034','1012042','1012046','1012049','1012052','1012057','1012058','1012060','1012062','1012064','1012066','1012067','1012073','1012085',
							'1012087','1012088','1012089','1012090','1012094','1012102','1012105','1012107','1012110','1012111','1012116','1012117','1012123','1012126','1012129','1012131',
							'1012141','1012152','1012156','1012159','1012162','1012163','1012165','1012166','1012168','1012170','1012174','1012181','1012186','1012187','1012188','1012191',
							'1012195','1012196','1012197','1012204','1012205','1012210','1012215','1012219','1012220','1012227','1012228','1012231','1012234','1012235','1012236','1012247',
							'1012250','1012252','1012259','1012262','1012264','1012280','1012289','1012291','1012292','1012294','1012296','1012297','1012298','1012299','1012300','1012302',
							'1012303','1012305','1012308','1012310','1012317','1012318','1012319','1012321','1012323','1012324','1012325','1012326','1012327','1012328','1012329','1012330',
							'1012332','1012333','1012334','1012343','1012344','1012347','1012349','1012350','1012353','1012356','1012361','1012364','1012366','1012368','1012370','1012371',
							'1012372','1012373','1012375','1012376','1012378','1012379','1012380','1012384','1012391','1012392','1012394','1012397','1012398','1012401','1012402','1012403',
							'1012404','1012407','1012409','1012411','1012413','1012414','1012423','1012424','1012425','1012429','1012430','1012432','1012435','1012437','1012439','1012441',
							'1012446','1012447','1012448','1012453','1012454','1012457','1012458','1012460','1012464','1012465','1012469','1012472','1012473','1012474','1012475','1012476',
							'1012477','1012478','1012479','1012480','1012484','1012487','1012503','1012504','1012505','1012511','1012512','1012513','1012514','1012516','1012517','1012521',
							'1012522','1012525','1012526','1012528','1012531','1012536','1012538','1012539','1012540','1012543','1012545','1012552','1012554','1012555','1012556','1012557',
							'1012558','1012560','1012562','1012565','1012569','1012571','1012572','1012575','1012576','1012581','1012582','1012586','1012587','1012589','1012591','1012598',
							'1012599','1012603','1012604','1012605','1012611','1012612','1012613','1012615','1012618','1012621','1012625','1012626','1012628','1012630','1012634','1012635',
							'1012640','1012641','1012642','1012644','1012647','1012648','1012650','1012652','1012654','1012655','1012661','1012666','1012667','1012668','1012674','1012675',
							'1012677','1012679','1012682','1012683','1012686','1012688','1012690','1012694','1012696','1012697','1012701','1012702','1012703','1012704','1012705','1012707',
							'1012726','1012727','1012728','1012729','1012730','1012731','1012733','1012739','1012741','1012749','1012750','1012753','1012754','1012757','1012758','1012760',
							'1012767','1012769','1012773','1012775','1012778','1012786','1012787','1012789','1012794','1012796','1012799','1012801','1012806','1012807','1012809','1012814',
							'1012821','1012823','1012825','1012829','1012830','1012840','1012847','1012849','1012850','1012851','1012854','1012858','1012859','1012860','1012861','1012864',
							'1012871','1012872','1012873','1012876','1012879','1012880','1012881','1012882','1012886','1012890','1012895','1012896','1012901','1012903','1012904','1012905',
							'1012911','1012916','1012918','1012919','1012920','1012927','1012928','1012931','1012935','1012936','1012937','1012941','1012942','1012944','1012945','1012946',
							'1012949','1012950','1012951','1012956','1012959','1012960','1012963','1012969','1012977','1012978','1012979','1012981','1012982','1012987','1012994','1012996',
							'1012997','1012998','1012999','1013000','1013002','1013005','1013006','1013009','1013011','1013013','1013014','1013016','1013018','1013021','1013027','1013029',
							'1013034','1013037','1013044','1013052','1013057','1013058','1013059','1013062','1013063','1013064','1013066','1013069','1013072','1013075','1013077','1013078',
							'1013079','1013083','1013084','1013090','1013091','1013092','1013093','1013094','1013100','1013111','1013112','1013117','1013121','1013122','1013123','1013131',
							'1013132','1013134','1013135','1013139','1013140','1013146','1013150','1013151','1013152','1013154','1013162','1013163','1013164','1013165','1013172','1013173',
							'1013183','1013187','1013188','1013189','1013190','1013191','1013196','1013200','1013201','1013204','1013226','1013227','1013231','1013232','1013233','1013237',
							'1013238','1013239','1013246','1013249','1013254','1013255','1013257','1013259','1013271','1013273','1013274','1013276','1013277','1013278','1013279','1013282',
							'1013283','1013284','1013285','1013291','1013292','1013294','1013295','1013296','1013298','1013301','1013302','1013303','1013307','1013309','1013310','1013317',
							'1013319','1013321','1013322','1013324','1013334','1013335','1013337','1013351','1013353','1013354','1013371','1013372','1013373','1013374','1013375','1013381',
							'1013382','1013387','1013388','1013389','1013390','1013391','1013394','1013397','1013398','1013399','1013400','1013412','1013415','1013416','1013419','1013420',
							'1013421','1013425','1013426','1013430','1013434','1013438','1013441','1013442','1013443','1013444','1013445','1013446','1013457','1013458','1013459','1013460',
							'1013463','1013464','1013465','1013466','1013471','1013474','1013477','1013483','1013485','1013490','1013491','1013506','1013507','1013511','1013515','1013516',
							'1013520','1013521','1013523','1013529','1013530','1013535','1013538','1013540','1013541','1013542','1013543','1013544','1013545','1013547','1013554','1013555',
							'1013556','1013557','1013558','1013559','1013560','1013561','1013567','1013572','1013573','1013575','1013579','1013589','1013590','1013604','1013605','1013608',
							'1013609','1013610','1013613','1013618','1013626','1013627','1013630','1013646','1013650','1013654','1013655','1013660','1013665','1013668','1013672','1013678',
							'1013682','1013683','1013687','1013691','1013702','1013703','1013707','1013727','1013728','1013729','1013730','1013735','1013743','1013745','1013747','1013748',
							'1013749','1013752','1013760','1013762','1013778','1013779','1013780','1013784','1013786','1013787','1013789','1013790','1013806','1013808','1013809','1013813',
							'1013816','1013819','1013821','1013853','1013866','1013868','1013869','1013870','1013871','1013876','1013877','1013878','1013879','1013885','1013887','1013901',
							'1013906','1013908','1013911','1013916','1013928','1013929','1013941','1013954','1013961','1013963','1013964','1013968','1013976','1013977','1013987','1013996',
							'1014014','1014015','1014016','1014025','1014036','1014045','1014047','1014051','1014052','1014057','1014083','1014091','2000002','2000083','2000095','2000505',
							'2000581','2000609','2000641','2000654','2000658','2000745','2000813','2000851','2000891','2000899','2000937','2001269','2001312','2001399','2001453','2001471',
							'2001681','2001848','2002005','2002098','2002303','2002323','2002343','2002379','2002403','2002632','2002747','2002752','2002764','2002770','2002776','2002806',
							'2002808','2002838','2002842','2002861','2003011','2003116','2003196','2003272','2003330','2003398','2003436','2003531','2003647','3000065','3000074','3000075',
							'3000085','3000151','3000166','3000179','3000187','3000189','3000194','3000204','3000356','3000397'))
				BEGIN
					IF NOT EXISTS (SELECT * FROM InsTargetHD A INNER JOIN InsTargetDetails B ON A.insid =b.insid     
					WHERE A.targetmonth =4 AND A.TargetYear =2020 and A.Status =1 AND InsRefNo='Target0112')  
					BEGIN  
				  
						SET @ValidateMsg='Target Not Download From Console for Selected Month.' + CHAR(13) +  
							'Hence Debit Note Top Sheet Claim Cannot generate'    
					END 
				END
			END
		END  

		IF @ValidateMsg = ''   
		BEGIN
			IF @Pi_Month = 4 AND @Pi_Year = 2020
			BEGIN
				IF EXISTS (SELECT * FROM Distributor WHERE DistributorCode IN ('1000016','1000022','1000069','1000074','1000109','1000117','1000137','1000156','1000175','1000193','1000222','1000333','1000342','1000362','1000431','1000554',
				'1000558','1000666','1000790','1001124','1001132','1001142','1001146','1001147','1001151','1001202','1001212','1001226','1001313','1001380','1001384','1001460',
				'1001489','1001508','1001536','1001588','1001671','1001689','1001784','1002016','1002026','1002033','1002042','1002055','1002072','1002130','1002173','1002220',
				'1002227','1002231','1002256','1002291','1002299','1002307','1002313','1002320','1002381','1002410','1002437','1002553','1002576','1002599','1002638','1002642',
				'1002675','1002685','1002704','1002720','1002722','1002772','1002773','1002787','1002811','1002816','1002825','1002844','1002854','1002898','1002902','1002940',
				'1002993','1002995','1002999','1003015','1003038','1003071','1003112','1003227','1003230','1003239','1003273','1003291','1003337','1003463','1003464','1003543',
				'1003561','1003584','1003599','1003601','1003708','1003722','1003791','1003812','1003825','1003864','1003893','1003973','1004014','1004055','1004074','1004107',
				'1004108','1004112','1004199','1004220','1004238','1004381','1004457','1004521','1004582','1004583','1004586','1004608','1004735','1004752','1004764','1004809',
				'1004814','1004854','1004891','1004913','1004921','1004925','1004945','1004958','1004977','1005065','1005109','1005257','1005335','1005364','1005365','1005371',
				'1005412','1005413','1005460','1005521','1005550','1005563','1005621','1005686','1005688','1005735','1005752','1005766','1005773','1005821','1005855','1005866',
				'1005887','1005908','1005919','1005946','1005985','1006024','1006033','1006072','1006074','1006105','1006120','1006177','1006183','1006202','1006221','1006290',
				'1006303','1006398','1006404','1006416','1006447','1006528','1006561','1006586','1006610','1006614','1006701','1006730','1006779','1006789','1006837','1006847',
				'1006907','1006936','1006954','1006978','1007034','1007052','1007077','1007227','1007254','1007256','1007260','1007300','1007302','1007305','1007341','1007371',
				'1007430','1007491','1007529','1007608','1007719','1007744','1007767','1007773','1007775','1007812','1007832','1007858','1007900','1007967','1008001','1008014',
				'1008043','1008044','1008064','1008080','1008157','1008181','1008182','1008183','1008201','1008246','1008255','1008270','1008314','1008342','1008352','1008358',
				'1008383','1008426','1008530','1008590','1008630','1008639','1008671','1008731','1008769','1008799','1008809','1008815','1008819','1008861','1008868','1008917',
				'1008923','1008938','1008987','1009016','1009021','1009041','1009069','1009094','1009109','1009122','1009140','1009142','1009144','1009163','1009243','1009254',
				'1009256','1009332','1009364','1009392','1009447','1009451','1009572','1009616','1009662','1009677','1009696','1009726','1009736','1009738','1009739','1009742',
				'1009805','1009835','1009877','1009900','1009949','1009996','1010043','1010052','1010082','1010124','1010139','1010192','1010197','1010198','1010215','1010261',
				'1010267','1010275','1010295','1010319','1010330','1010334','1010343','1010351','1010360','1010367','1010386','1010446','1010466','1010497','1010534','1010538',
				'1010602','1010611','1010614','1010616','1010619','1010657','1010680','1010700','1010706','1010707','1010708','1010732','1010733','1010758','1010771','1010779',
				'1010783','1010786','1010787','1010939','1010945','1010948','1010951','1010990','1010998','1011027','1011029','1011030','1011037','1011038','1011094','1011103',
				'1011104','1011141','1011151','1011155','1011186','1011209','1011253','1011254','1011265','1011277','1011306','1011310','1011337','1011342','1011343','1011402',
				'1011425','1011447','1011468','1011484','1011517','1011570','1011603','1011616','1011650','1011670','1011692','1011697','1011758','1011760','1011772','1011774',
				'1011798','1011852','1011876','1011877','1011890','1011899','1011915','1011925','1011969','1011993','1011995','1012004','1012017','1012025','1012052','1012058',
				'1012060','1012073','1012086','1012088','1012094','1012105','1012129','1012179','1012181','1012205','1012236','1012260','1012266','1012291','1012298','1012300',
				'1012302','1012308','1012318','1012319','1012325','1012330','1012333','1012347','1012354','1012373','1012380','1012397','1012402','1012424','1012429','1012436',
				'1012439','1012451','1012452','1012465','1012476','1012503','1012514','1012517','1012522','1012523','1012528','1012552','1012569','1012571','1012591','1012613',
				'1012647','1012681','1012683','1012688','1012690','1012702','1012703','1012729','1012757','1012797','1012807','1012814','1012861','1012862','1012867','1012895',
				'1012901','1012916','1012919','1012960','1012969','1013009','1013027','1013064','1013096','1013100','1013132','1013139','1013149','1013165','1013190','1013235',
				'1013239','1013256','1013257','1013269','1013271','1013283','1013285','1013291','1013293','1013294','1013301','1013302','1013307','1013317','1013322','1013368',
				'1013369','1013387','1013412','1013415','1013419','1013460','1013515','1013557','1013558','1013567','1013589','1013610','1013612','1013618','1013628','1013633',
				'1013654','1013682','1013691','1013694','1013701','1013703','1013730','1013741','1013745','1013746','1013748','1013749','1013768','1013770','1013780','1013816',
				'1013830','1013853','1013870','1013901','1013904','1013913','1013923','1013963','1013968','1014029','2000002','2000607','2000851','2000937','2001816','2001848',
				'2002403','2002752','2002776','2002838','2002935','2003019','2003156','2003272','2003647','3000203'))
				BEGIN
					IF NOT EXISTS (SELECT * FROM InsTargetHD A INNER JOIN InsTargetDetails B ON A.insid =b.insid     
						WHERE A.targetmonth =4 AND A.TargetYear =2020 and A.Status =1 AND InsRefNo='Target0113')  
						BEGIN  
				  
							SET @ValidateMsg='Target Not Download From Console for Selected Month.' + CHAR(13) +  
								'Hence Debit Note Top Sheet Claim Cannot generate'    
						END 
				END
			END
		END 
		--TARGET DOWNLOAD ISSUE

		IF @ValidateMsg = ''   
		BEGIN  
			IF EXISTS (SELECT * FROM InsTargetHD A INNER JOIN InsTargetDetails B ON A.insid =b.insid     
			WHERE A.targetmonth =@Pi_Month AND A.TargetYear =@Pi_Year and A.Status =1)  
			BEGIN  
				IF NOT EXISTS (SELECT * FROM InsTargetHD A INNER JOIN InsTargetDetails B ON A.insid =b.insid   
				INNER JOIN InsTargetDetailsAch C ON A.insid =b.insid AND b.insid =c.insid  AND B.rtrid =C.Rtrid  
				WHERE A.targetmonth =@Pi_Month AND A.TargetYear =@Pi_Year and A.Status =1)  
				BEGIN  
						---PARCS202100019 Ach not download from console So msg changed
						--SET @ValidateMsg='Target Achievement Not Download From Console for Selected Month.' + CHAR(13) + 
						SET @ValidateMsg='Target Achievement Not Generate in Month End for Selected Month.' + CHAR(13) +   
						'Hence Debit Note Top Sheet Claim Cannot generate'   
				END  
			END  
		END  
    
	RETURN @ValidateMsg  
END
GO
--S.Moorthi Till Here
--Added by Mohana
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE name='Proc_Cs2Cn_RailwayDiscountReconsolidation_withTax' AND xtype='P')
DROP PROCEDURE Proc_Cs2Cn_RailwayDiscountReconsolidation_withTax
GO
/*  
Begin transaction
truncate table Cs2Cn_Prk_RailwayDiscountReconsolidation   
exec Proc_Cs2Cn_RailwayDiscountReconsolidation_withTax 0,'2018-07-11'  
select * from Cs2Cn_Prk_RailwayDiscountReconsolidation -- for xml AUTO --where PrdCCode ='100301301079070190PKT10010N'  
Rollback Transaction  
*/  
CREATE PROCEDURE Proc_Cs2Cn_RailwayDiscountReconsolidation_withTax
(  
@Po_ErrNo INT OUTPUT,  
@ServerDate DATETIME  
)  
AS  
/***********************************************************************************************************************
* PROCEDURE  : Proc_Cs2Cn_RailwayDiscountReconsolidation_withTax   
* PURPOSE  :   
* CREATED BY : Aravindh Deva C  
* CREATED DATE : 03.06.2016  
* NOTE   :  
* MODIFIED  
************************************************************************************************************************
* DATE        AUTHOR		CR/BZ			USER STORY ID       DESCRIPTION   
* 27-03-2018   S.MOhana		CR				CCRSTPAR0188		Included reports changes in upload
* 11-07-2018   Lakshman M	BZ				ILCRSTPAR1325       negative values division validation added from core stocky.
* 17-09-2018   Amuthakumar	CR				CRCRSTPAR0021       Promotion claim should be calculating with tax
* 30-03-2020   MOHANA S     CR				PARCS202100002		Contract Pricing Optimization	
* 04-08-2020   MOHANA S		SR				PILOT ISSUE 443		OPTIMIZATION DONE	
************************************************************************************************************************/  
SET NOCOUNT ON  
BEGIN  
	SET @Po_ErrNo=0  
	DECLARE @DistCode   As NVARCHAR(50)  
	
	DELETE FROM Cs2Cn_Prk_RailwayDiscountReconsolidation WHERE UploadFlag = 'Y'  
	
	TRUNCATE TABLE UploadingReportTransaction  
	INSERT INTO UploadingReportTransaction (TransType,TransId,TransNo,TransDate)  
	SELECT 1,SalId,SalInvNo,SalInvDate FROM SalesInvoice (NOLOCK) WHERE DlvSts > 3 AND RptUpload = 0  
	UNION ALL  
	SELECT 2,ReturnID,ReturnCode,ReturnDate FROM ReturnHeader (NOLOCK) WHERE Status = 0 AND RptUpload = 0  
	
	IF NOT EXISTS (SELECT '' FROM UploadingReportTransaction (NOLOCK))  
	BEGIN  
	RETURN  
	END  
	
	DECLARE @FromDate DATETIME  
	DECLARE @ToDate DATETIME  
	SELECT @FromDate = MIN(TransDate),@ToDate = MAX(TransDate) FROM UploadingReportTransaction (NOLOCK)  
	SELECT @DistCode = DistributorCode FROM Distributor(NOLOCK)   
	
	--To Filter Retailers  
	SELECT DISTINCT R.RtrId,RC.CtgCode  
	INTO #FilterRetailer  
	FROM Retailer R (NOLOCK),  
	RetailerValueClassMap RVCM (NOLOCK),  
	RetailerValueClass RVC (NOLOCK),  
	RetailerCategory RC (NOLOCK),  
	RetailerCategoryLevel RCL (NOLOCK)  
	WHERE R.Rtrid = RVCM.RtrId AND RVCM.RtrValueClassId = RVC.RtrClassId  
	AND  RVC.CtgMainId=RC.CtgMainId AND  RCL.CtgLevelId=RC.CtgLevelId  AND
	RC.CtgLinkId NOT IN (SELECT CtgMainId FROM RetailerCategory WHERE CtgCode='GT') 
	-- Added by Amuthakumar on 17/09/2018 CRCRSTPAR0021
	EXEC Proc_ReturnSalesProductTaxPercentage  @FromDate,@ToDate
	
	SELECT * INTO #ParleOutputTaxPercentage
	FROM ParleOutputTaxPercentage (NOLOCK)	
	--- Till Here
	SELECT S.SalId,S.SalInvNo,S.SalInvDate,S.RtrId,SP.PrdId,SP.PrdBatId,SP.BaseQty BaseQty,SP.PrdUnitMRP MRP,  
	CASE SP.SplPriceid WHEN 0 THEN 0 ELSE  SP.Priceid END AS  Priceid,SP.SlNo,SP.PrdUom1EditedSelRate,(SP.PrdSchDiscAmount/SP.BaseQty) SchDisc  
	INTO #BillingDetails  
	FROM SalesInvoice S (NOLOCK)
	INNER JOIN SalesInvoiceProduct SP (NOLOCK) ON S.SalId = SP.SalId  
	WHERE SalInvDate between @FromDate AND @ToDate 
	AND EXISTS (SELECT 'C' FROM #FilterRetailer FR (NOLOCK) WHERE S.RtrId = FR.RtrId)  
	AND S.DlvSts > 3  
	-- SELECT S.ReturnID,S.ReturnCode,S.ReturnDate,S.RtrId,SP.PrdId,SP.PrdBatId,-1 * SP.BaseQty BaseQty,SP.PrdUnitMRP MRP,  
	--CASE SP.SplPriceid WHEN 0 THEN 0 ELSE  SP.Priceid END AS  Priceid,SP.SlNo,SP.PrdEditSelRte,(SP.PrdSchDisAmt/SP.BaseQty) SchDisc  
	-- INTO #ReturnDetails  
	-- FROM ReturnHeader S (NOLOCK)  
	-- INNER JOIN ReturnProduct SP (NOLOCK) ON S.ReturnID = SP.ReturnID AND SP.StockTypeId IN (SELECT StockTypeId FROM StockType WHERE SystemStockType = 1) 
	-- WHERE EXISTS (SELECT 'C' FROM UploadingReportTransaction FP (NOLOCK) WHERE FP.TransDate = S.ReturnDate)  
	-- AND EXISTS (SELECT 'C' FROM #FilterRetailer FR (NOLOCK) WHERE S.RtrId = FR.RtrId)  
	-- AND S.[Status] = 0  
	SELECT S.ReturnID,S.ReturnCode,S.ReturnDate,S.RtrId,SP.PrdId,SP.PrdBatId,-1 * SP.BaseQty BaseQty,SP.PrdUnitMRP MRP,
	CASE SP.SplPriceid WHEN 0 THEN 0 ELSE  SP.Priceid END AS Priceid,SP.SlNo,SP.PrdEditSelRte,CAST((SP.PrdSchDisAmt/SP.BaseQty)  AS NUMERIC(18,6))SchDisc
	INTO #ReturnDetails
	FROM ReturnHeader S (NOLOCK)
	INNER JOIN SalesInvoice SI(NOLOCK) ON SI.SalId=S.SalId
	INNER JOIN ReturnProduct SP (NOLOCK) ON S.ReturnID = SP.ReturnID AND SP.StockTypeId IN (SELECT StockTypeId FROM StockType WHERE SystemStockType = 1)
	INNER JOIN SalesInvoiceProduct SIP (NOLOCK) ON SIP.SalId=S.SalId and SIP.SalId=SI.SalId and SIP.PrdId=SP.PrdId and SIP.PrdBatId=SP.PrdBatId
	WHERE 
	ReturnDate    between @FromDate AND @ToDate 
	AND S.Status = 0 and S.InvoiceType=1 and S.ReturnMode=1
	AND EXISTS (SELECT 'C' FROM #FilterRetailer FR (NOLOCK) WHERE S.RtrId = FR.RtrId)
	
	INSERT INTO #ReturnDetails
	SELECT S.ReturnID,S.ReturnCode,S.ReturnDate,S.RtrId,SP.PrdId,SP.PrdBatId,-1 * SP.BaseQty BaseQty,SP.PrdUnitMRP MRP,
	CASE SP.SplPriceid WHEN 0 THEN 0 ELSE  SP.Priceid END AS  Priceid,SP.SlNo,SP.PrdEditSelRte,
	CAST((SP.PrdSchDisAmt/SP.BaseQty)  AS NUMERIC(18,6)) SchDisc 
	FROM ReturnHeader S (NOLOCK)
	INNER JOIN ReturnProduct SP (NOLOCK) ON S.ReturnID = SP.ReturnID AND SP.StockTypeId IN (SELECT StockTypeId FROM StockType WHERE SystemStockType = 1)
	WHERE  ReturnDate  between  @FromDate AND @ToDate  AND   S.Status = 0 --AND (ISNULL(S.InvoiceType,0)<>1 OR ISNULL(S.ReturnMode,0)<>1)
	AND NOT EXISTS(SELECT * FROM #ReturnDetails R (NOLOCK) WHERE R.ReturnId=S.ReturnId)
	AND EXISTS (SELECT 'C' FROM #FilterRetailer FR (NOLOCK) WHERE S.RtrId = FR.RtrId)
	
	SELECT TransType,RtrId,SalId,TransDate,PrdId,PrdBatId,BaseQty TotalPCS,MRP,PriceId,SlNo,CAST(0 AS NUMERIC(18,6))[SellRate],  
	CAST(0 AS NUMERIC(18,6)) IRCTCMargin,CAST(0 AS INT) [Type],CAST(0 AS NUMERIC(18,6)) AS LCTR,CAST(0 AS NUMERIC(18,6)) IRCTCRate,SchDisc
	INTO #RailwaySalesDetails  
	FROM   
	(  
	SELECT 1 TransType,RtrId,SalId,SalInvDate TransDate,PrdId,PrdBatId,BaseQty,MRP,PriceId,SlNo,SchDisc FROM #BillingDetails  
	UNION ALL  
	SELECT 2 TransType,RtrId,ReturnID,ReturnDate TransDate,PrdId,PrdBatId,BaseQty,MRP,PriceId,SlNo,SchDisc FROM #ReturnDetails  
	) Consolidated  

	SELECT DISTINCT PRDID INTO #TempPrd FROM #RailwaySalesDetails
	
	DECLARE @SlNo AS INT  
	
	SELECT @SlNo = SlNo FROM BatchCreation (NOLOCK) WHERE FieldDesc = 'Selling Price'  
	
	UPDATE R SET R.[SellRate] = D.PrdBatDetailValue  
	FROM #RailwaySalesDetails R (NOLOCK),  
	ProductBatch B (NOLOCK),  
	ProductBatchDetails D (NOLOCK)  
	WHERE R.PrdBatId = B.PrdBatId AND B.DefaultPriceId = D.PriceId AND D.SLNo = @SlNo   
	
	--SELECT R.PriceId,C.DiscountPerc,C.[TYPE],C.SplSelRate
	--INTO #ExistingSpecialPrice
	--FROM #RailwaySalesDetails R (NOLOCK),
	--SpecialRateAftDownLoad_Calc C (NOLOCK)
	--WHERE R.PriceId = CAST(REPLACE(C.ContractPriceIds,'-','') AS BIGINT)
	
	--SELECT R.RtrId,P.PrdId,B.PrdBatId,S.SplSelRate,DownloadedDate,S.DiscountPerc,Type
	--INTO #SpecialPrice
	--FROM SpecialRateAftDownLoad_Calc S (NOLOCK),
	--#FilterRetailer R,
	--Product P (NOLOCK), ProductBatch B (NOLOCK)
	--WHERE S.RtrCtgValueCode = R.CtgCode AND
	--S.PrdCCode = P.PrdCCode AND B.PrdBatCode = S.PrdBatCCode AND P.PrdId = B.PrdId
	
	
	
	--SELECT S.* 
	--INTO #LatesSpecialPrice
	--FROM #SpecialPrice S,
	--(
	--SELECT RtrId,PrdId,PrdBatId,MAX(DownloadedDate) DownloadedDate 
	--FROM #SpecialPrice  
	--GROUP BY RtrId,PrdId,PrdBatId
	--) L
	--WHERE L.RtrId = S.RtrId AND L.PrdId = S.PrdId AND L.PrdBatId = S.PrdBatId AND L.DownloadedDate = S.DownloadedDate
	
	SELECT DISTINCT A.contractid,E.PrdId,Discount,ApplyOn [Type]  INTO #ContractProduct
	FROM contractpricingmaster A(NOLOCK)
	INNER JOIN ContractPricingDetails B(NOLOCK) ON A.ContractId=b.ContractId AND PRdbatid = 0
	INNER JOIN ProductCategoryValue C(NOLOCK) ON  C.PrdCtgValMainId=B.PrdId 
	INNER JOIN ProductCategoryValue D(NOLOCK) ON D.PrdCtgValLinkCode LIKE CAST(c.PrdCtgValLinkCode AS NVARCHAR(1000)) + '%'
	INNER JOIN  Product  E On D.PrdCtgValMainId = E.PrdCtgValMainId AND Status=1
	INNER JOIN #TempPrd T ON T.Prdid =E.Prdid -- Pilot Issue
	 
	SELECT  MAX(CP.ContractId) ContractId,R.RtrId ,cpd.Prdid,CPD.Discount,[Type] INTO #LatesSpecialPrice
	FROM ContractPricingMaster CP INNER JOIN ContractPricingAttributes CA ON CP.ContractId=CA.ContractId AND ATTRTYPE=1 
	INNER JOIN #ContractProduct CPD ON CP.ContractId= CPD.ContractId -- Pilot Issue
	INNER JOIN RetailerCategory RC ON RC.CtgMainId=CASE CA.Attrid WHEN 0 THEN RC.CtgMainId ELSE CA.Attrid END 
	INNER JOIN RetailerCategory RC1 ON RC1.CtgLinkCode LIKE CAST(RC.CtgLinkCode AS NVARCHAR(1000)) + '%'
	INNER JOIN RetailerValueClass RVC ON RVC.CtgMainId=RC1.CtgMainId 
	INNER JOIN RetailerValueClassMap RVCM ON RVCM.RtrValueClassId=RVC.RtrClassId AND RVCM.RtrValueClassId=CASE CP.RtrClassId WHEN 0 THEN RVCM.RtrValueClassId ELSE CP.RtrClassId END
	INNER JOIN #FilterRetailer  R ON R.RtrId=RVCM.RtrId	
	GROUP BY R.RtrId ,cpd.Prdid,CPD.Discount ,[Type]
	
	UPDATE R SET R.IRCTCMargin = S.Discount,R.[Type] = S.[TYPE]
	FROM #RailwaySalesDetails R (NOLOCK),
	#LatesSpecialPrice S (NOLOCK)
	WHERE R.Prdid = S.Prdid AND R.Rtrid = S.Rtrid  
	--- Added by Amuthakumar on 17-09-2018  CRCRSTPAR0021
	UPDATE R SET R.LCTR = R.[SellRate] + (R.[SellRate]*(T.TaxPerc/100))
	FROM #RailwaySalesDetails R (NOLOCK),
	#ParleOutputTaxPercentage T (NOLOCK)
	WHERE R.TransType = T.TransId AND R.SalId = T.Salid AND R.Slno = T.PrdSlno	
	--UPDATE R SET R.LCTR = R.[SellRate] 	FROM #RailwaySalesDetails R (NOLOCK)  
	--- Till Here CRCRSTPAR0021
	
	--SELECT DISTINCT Priceid,PrdBatDetailValue  INTO #SpecialPrice_New FROM
	--(
	--SELECT D.PriceId,D.PrdBatDetailValue 
	--FROM #RailwaySalesDetails M (NOLOCK),
	--ProductBatchDetails D (NOLOCK) 
	--WHERE M.PriceId = D.PriceId AND D.SLNo = 3
	--AND PriceCode LIKE '%-Spl Rate-%'   
	--UNION 
	--SELECT D.PriceId,D.PrdBatDetailValue 
	--FROM #RailwaySalesDetails M (NOLOCK),
	--ProductBatchDetails D (NOLOCK) 
	--WHERE M.PriceId = D.PriceId AND D.SLNo = 3
	--AND PriceCode LIKE '%SplRate%'  
	--)A
	--UPDATE M SET M.IRCTCRATE = D.PrdBatDetailValue-SchDisc 
	--FROM #RailwaySalesDetails M (NOLOCK),
	--#SpecialPrice_New D (NOLOCK) 
	--WHERE M.PriceId = D.PriceId 
	SELECT A.SalId ,A.PrdId,A.PrdBatid,A.TransType,A.Slno,SplRate INTO #Sales  FROM #RailwaySalesDetails A  
	INNER JOIN SalesInvoiceProduct B ON A.Salid = B.Salid AND A.Prdid =B.PrdId AND A.PrdBatid = B.PrdBatId AND A.Slno = B.SlNo AND TransType = 1
	AND SplRate>0
	SELECT  A.SalId ,A.PrdId,A.PrdBatid,A.TransType,A.Slno,SplRate INTO #Return FROM #RailwaySalesDetails A  
	INNER JOIN ReturnHeader B ON A.SalId = B.ReturnID AND TransType = 2 
	INNER JOIN ReturnProduct C ON C.ReturnID = B.ReturnID 
	INNER JOIN SalesInvoiceProduct D ON B.Salid = D.Salid AND D.Prdid =C.PrdId AND D.PrdBatid = C.PrdBatId AND D.SLNO = C.ActSalRowId  AND SplRate>0
	 
	--UPDATE M SET M.IRCTCRATE = D.PrdBatDetailValue + (D.PrdBatDetailValue*(T.TaxPerc/100)) - SchDisc 
	--FROM #RailwaySalesDetails M (NOLOCK),
	--#SpecialPrice_New D (NOLOCK), 
	--#ParleOutputTaxPercentage T (NOLOCK)
	--WHERE M.TransType = T.TransId AND M.SalId = T.Salid AND M.Slno = T.PrdSlno	AND M.PriceId = D.PriceId   
	
	UPDATE M SET M.IRCTCRATE = D.SplRate + (D.SplRate*(T.TaxPerc/100)) - SchDisc 
	FROM #RailwaySalesDetails M (NOLOCK),
	#Sales D (NOLOCK), 
	#ParleOutputTaxPercentage T (NOLOCK)
	WHERE M.TransType = T.TransId AND M.SalId = T.Salid AND M.Slno = T.PrdSlno AND M.PrdId = D.PrdId AND M.TransType = D.TransType 
	AND D.slno = T.PrdSlno AND D.salid = T.Salid AND T.TransId = D.TransType 
	
	UPDATE M SET M.IRCTCRATE = D.SplRate + (D.SplRate*(T.TaxPerc/100)) - SchDisc 
	FROM #RailwaySalesDetails M (NOLOCK),
	#Return D (NOLOCK), 
	#ParleOutputTaxPercentage T (NOLOCK)
	WHERE  M.TransType = T.TransId AND M.SalId = T.Salid AND M.Slno = T.PrdSlno AND M.PrdId = D.PrdId AND M.TransType = D.TransType 
	AND D.slno = T.PrdSlno	  AND D.salid = T.Salid  AND T.TransId  = D.TransType  
	UPDATE R SET R.IRCTCRATE = R.[SellRate] - Schdisc 	FROM #RailwaySalesDetails R (NOLOCK)  WHERE IRCTCRATE=0
	--SELECT RtrId,TransDate,P.PrdId,P.PrdName,P.PrdCCode,SUM(TotalPCS) TotalPCS,MRP,  
	--LCTR,IRCTCMargin,CASE S.[Type] WHEN 1 THEN 'Mark Up' WHEN 2 THEN 'Mark Down' ELSE '' END MarkUpDown,  
	--IRCTCRate,  CAST(0 AS NUMERIC(18,6)) TotalMRP,CAST(0 AS NUMERIC(18,6)) TotalLCTR,  
	--CAST(0 AS NUMERIC(18,6)) IRCTCTotal,CAST(0 AS NUMERIC(18,6)) ClmAmount,  
	--CAST(0 AS NUMERIC(18,2)) LibOnMRP,CAST(0 AS NUMERIC(18,2)) LibOnLCTR  
	--INTO #RailwayDiscount  
	--FROM #RailwaySalesDetails S (NOLOCK)  
	--INNER JOIN Product P (NOLOCK) ON S.PrdId = P.PrdId   
	--GROUP BY RtrId,TransDate,P.PrdId,P.PrdName,P.PrdCCode,MRP,LCTR,IRCTCMargin,S.[Type] ,IRCTCRate
	SELECT RtrId,TransDate,P.PrdId,P.PrdName,P.PrdCCode,(TotalPCS) AS TotalPCS,MRP,  
	LCTR,IRCTCMargin,CASE S.[Type] WHEN 1 THEN 'Mark Up' WHEN 2 THEN 'Mark Down' ELSE '' END MarkUpDown,  
	IRCTCRate,  CAST(0 AS NUMERIC(18,6)) TotalMRP,CAST(0 AS NUMERIC(18,6)) TotalLCTR,  
	CAST(0 AS NUMERIC(18,6)) IRCTCTotal,CAST(0 AS NUMERIC(18,6)) ClmAmount,  
	CAST(0 AS NUMERIC(18,2)) LibOnMRP,CAST(0 AS NUMERIC(18,2)) LibOnLCTR  
	INTO #RailwayDiscount1  
	FROM #RailwaySalesDetails S (NOLOCK)  
	INNER JOIN Product P (NOLOCK) ON S.PrdId = P.PrdId   
	-- GROUP BY RtrId,TransDate,P.PrdId,P.PrdName,P.PrdCCode,MRP,LCTR,IRCTCMargin,S.[Type] ,IRCTCRate,TotalPCS 
	--------------- added by Lakshman M on 11-07-2018 PMS ID: ILCRSTPAR1325----------
	UPDATE R SET TotalMRP  = TotalPCS * MRP, 
	TotalLCTR = TotalPCS * LCTR
	FROM #RailwayDiscount1 R (NOLOCK)
	UPDATE R SET R.IRCTCTotal = TotalPCS * IRCTCRate  
	FROM #RailwayDiscount1 R (NOLOCK)  
	UPDATE R SET R.ClmAmount = TotalLCTR - IRCTCTotal  
	FROM #RailwayDiscount1 R (NOLOCK)  
	UPDATE R SET R.LibOnMRP = (ClmAmount / TotalMRP)*100
	FROM #RailwayDiscount1 R (NOLOCK)
	WHERE R.TotalMRP <> 0
	UPDATE R SET LibOnMRP = -1* LibOnMRP
	FROM #RailwayDiscount1 R (NOLOCK) WHERE TotalPCS <0
	UPDATE R SET R.LibOnLCTR = (ClmAmount / TotalLCTR)*100
	FROM #RailwayDiscount1 R (NOLOCK)
	WHERE R.TotalLCTR <> 0	
	UPDATE R SET LibOnLCTR = -1* LibOnLCTR
	FROM #RailwayDiscount1 R (NOLOCK) WHERE TotalPCS <0
	------------ Till Here ---------------
	INSERT INTO Cs2Cn_Prk_RailwayDiscountReconsolidation (DistCode,TransDate,CmpRtrCode,PrdCCode,TotalPCS,MRP,LCTR,IRCTCMargin,MarkUpDown,IRCTCRate,TotalMRP,TotalLCTR,IRCTCTotal,ClmAmount,LibOnMRP,  
	LibOnLCTR,UploadFlag,SyncId,ServerDate)  
	SELECT @DistCode,TransDate,R.CmpRtrCode,PrdCCode,sum(TotalPCS) AS TotalPCS ,MRP,LCTR,IRCTCMargin,MarkUpDown,IRCTCRate,sum(TotalMRP) AS TotalMRP,CAST ((sum(TotalLCTR))  AS NUMERIC(18,2)) TotalLCTR,CAST (ROUND(sum(IRCTCTotal),2) AS NUMERIC(18,2)) IRCTCTotal
	,CAST(sum(ClmAmount)  AS NUMERIC(18,2)) ClmAmount,CAST(sum(LibOnMRP)  AS NUMERIC(18,2)) LibOnMRP,	CAST (sum(LibOnLCTR)  AS NUMERIC(18,2)) LibOnLCTR,'N' UploadFlag,NULL,@ServerDate 
	FROM #RailwayDiscount1 RD,  
	Retailer R (NOLOCK)  
	WHERE RD.RtrId = R.RtrId  GROUP BY TransDate,R.CmpRtrCode,PrdCCode,MRP,LCTR,IRCTCMargin,MarkUpDown,IRCTCRate
RETURN     
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_RptRailwayDiscountReconsolidation_withTax' AND TYPE='P')
DROP PROCEDURE Proc_RptRailwayDiscountReconsolidation_withTax
GO
/*
BEGIN TRAN
EXEC Proc_RptRailwayDiscountReconsolidation_withTax 288,2,0,'Parle',0,0,1
ROLLBACK TRAN
*/
CREATE PROCEDURE Proc_RptRailwayDiscountReconsolidation_withTax
(
	@Pi_RptId			INT,
	@Pi_UsrId			INT,
	@Pi_SnapId			INT,
	@Pi_DbName			NVARCHAR(50),
	@Pi_SnapRequired	INT,
	@Pi_GetFromSnap		INT,
	@Pi_CurrencyId		INT
)
AS
/*****************************************************************************************************************************
* PROCEDURE	: Proc_RptRailwayDiscountReconsolidation_withTax
* PURPOSE	: To Return the Scheme Utilization Details
* CREATED	: Aravindh Deva C
* CREATED DATE	: 27 05 2016
* NOTE		: Parle SP for Trade Promotion Reports
* MODIFIED 
******************************************************************************************************************************
* DATE        AUTHOR      CR/BZ			USER STORY ID       DESCRIPTION   
 14-12-2017   S.Moorthi   CR			ICRSTPAR7049		1. IRCTC rate should display the net rate in billing screen   
 14-12-2017   S.Mohana    CR			ICRSTPAR7049	    Corrected Excel Column values.
 26-12-2017	  S.MOHANA	  SR			ICRSTPAR7809		1.Changed Column Name (IRCTC --> Chain And LCTR --> Normal rate)
															2.REMOVED TAX CALCULATION
															3.ADDED RATE-SCHEMEDISCOUNT 
 11-07-2018   Lakshman M  BZ            ILCRSTPAR1325       Negative values division validation added from core stocky.
 17-09-2018   Amuthakumar CR            CRCRSTPAR0021       Promotion claim should be calculating with tax
 11-05-2020	  MOHANA S	  CR			PARCS202100013		CATEGORY TAKEN BASED ON TRANSACTION		
 30-03-2020		MOHANA S     CR   PARCS202100002  Contract Pricing Optimization	

******************************************************************************************************************************/  
BEGIN
	SET NOCOUNT ON
	
	DECLARE @FromDate			AS	DATETIME
	DECLARE @ToDate				AS	DATETIME
	DECLARE @CmpId				AS  INT 
	DECLARE @CtgLevelId			AS  INT  
	DECLARE @CtgMainId			AS  INT	
	DECLARE @CmpPrdCtgId		AS INT
	DECLARE @PrdCtgValMainId	AS INT	
	
	SELECT @FromDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,10,@Pi_UsrId)
	SELECT @ToDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,11,@Pi_UsrId)
	SET @CmpId =(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId))  
	
	SET @CtgLevelId =(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,29,@Pi_UsrId))    
	SET @CtgMainId=(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,30,@Pi_UsrId))
	SET @CmpPrdCtgId = (SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,16,@Pi_UsrId))
	SET @PrdCtgValMainId = (SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,21,@Pi_UsrId))
	 
	--To Filter Retailers
	--SELECT DISTINCT R.RtrId,RC.CtgCode,RC.CtgName
	--INTO #FilterRetailer
	--FROM Retailer R (NOLOCK),
	--RetailerValueClassMap RVCM (NOLOCK),
	--RetailerValueClass RVC (NOLOCK),
	--RetailerCategory RC (NOLOCK),
	--RetailerCategoryLevel RCL (NOLOCK)	
	--WHERE R.Rtrid = RVCM.RtrId AND RVCM.RtrValueClassId = RVC.RtrClassId
	--AND  RVC.CtgMainId=RC.CtgMainId AND  RCL.CtgLevelId=RC.CtgLevelId
	--AND RC.CtgLinkId NOT IN (SELECT CtgMainId FROM RetailerCategory WHERE CtgCode='GT')
	--AND (RVC.CmpId=(CASE @CmpId WHEN 0 THEN RVC.CmpId ELSE 0 END) OR
	--RVC.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId)))
	--AND (RCL.CtgLevelId=(CASE @CtgLevelId WHEN 0 THEN RCL.CtgLevelId ELSE 0 END) OR  
	--RCL.CtgLevelId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,29,@Pi_UsrId)))
	--AND (RC.CtgMainId=(CASE @CtgMainId WHEN 0 THEN RC.CtgMainId ELSE 0 END) OR  
	--RC.CtgMainId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,30,@Pi_UsrId)))
	--To Filter Retailers


	SELECT DISTINCT R.RtrId,RC.CtgCode,RC.CtgName,RtrValueClassId 
	INTO #FilterRetailer
	FROM Retailer R (NOLOCK) ,
	Salesinvoice S (NOLOCK),
	RetailerValueClass RVC (NOLOCK),
	RetailerCategory RC (NOLOCK),
	RetailerCategoryLevel RCL (NOLOCK)	
	WHERE R.Rtrid = S.RtrId AND S.RtrValueClassId = RVC.RtrClassId
	AND  RVC.CtgMainId=RC.CtgMainId AND  RCL.CtgLevelId=RC.CtgLevelId
	AND SalInvDate BETWEEN @FromDate AND @ToDate AND DlvSts>3
	AND RC.CtgLinkId NOT IN (SELECT CtgMainId FROM RetailerCategory WHERE CtgCode='GT')
	AND (RVC.CmpId=(CASE @CmpId WHEN 0 THEN RVC.CmpId ELSE 0 END) OR
	RVC.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId)))
	AND (RCL.CtgLevelId=(CASE @CtgLevelId WHEN 0 THEN RCL.CtgLevelId ELSE 0 END) OR  
	RCL.CtgLevelId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,29,@Pi_UsrId)))
	AND (RC.CtgMainId=(CASE @CtgMainId WHEN 0 THEN RC.CtgMainId ELSE 0 END) OR  
	RC.CtgMainId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,30,@Pi_UsrId)))

	--To Filter Products
	SELECT DISTINCT E.PrdId
	INTO #FilterProduct
	FROM ProductCategoryValue C (NOLOCK)
	INNER JOIN ProductCategoryValue D (NOLOCK) ON
	D.PrdCtgValLinkCode LIKE Cast(C.PrdCtgValLinkCode AS NVARCHAR(1000)) + '%'
	INNER JOIN Product E (NOLOCK) ON D.PrdCtgValMainId = E.PrdCtgValMainId
	INNER JOIN ProductCategoryLevel L (NOLOCK) ON L.CmpPrdCtgId = C.CmpPrdCtgId
	
	WHERE (L.CmpId=(CASE @CmpId WHEN 0 THEN L.CmpId ELSE 0 END) OR
	L.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId)))
	 
	AND (L.CmpPrdCtgId = (CASE @CmpPrdCtgId  WHEN 0 THEN L.CmpPrdCtgId ELSE 0 END) OR
	L.CmpPrdCtgId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,16,@Pi_UsrId)))
	
	AND (C.PrdCtgValMainId = (CASE @PrdCtgValMainId  WHEN 0 THEN C.PrdCtgValMainId ELSE 0 END) OR 
	C.PrdCtgValMainId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId ,21, @Pi_UsrId)))
	--To Filter Products
	
	-- Added by Amuthakumar on 17/09/2018 CRCRSTPAR0021
	EXEC Proc_ReturnSalesProductTaxPercentage  @FromDate,@ToDate
	
	SELECT * INTO #ParleOutputTaxPercentage
	FROM ParleOutputTaxPercentage (NOLOCK)	
	--- Till Here
	
	SELECT S.SalId,S.SalInvNo,S.SalInvDate,S.RtrId,SP.PrdId,SP.PrdBatId,SP.BaseQty BaseQty,SP.PrdUnitMRP MRP,
	CASE SP.SplPriceid WHEN 0 THEN 0 ELSE  SP.Priceid END AS  Priceid,SP.SlNo,SP.PrdUom1EditedSelRate,
	CAST(CAST(SP.PrdUom1NetRate AS NUMERIC(18,4))/Uom1ConvFact AS NUMERIC(18,4)) PrdUnitNetRate,
	CAST((SP.PrdSchDiscAmount/SP.BaseQty)  AS NUMERIC(18,6)) SchDisc,RtrValueClassId
	INTO #BillingDetails
	FROM SalesInvoice S (NOLOCK)
	INNER JOIN SalesInvoiceProduct SP (NOLOCK) ON S.SalId = SP.SalId
	WHERE SalInvDate BETWEEN  @FromDate AND @ToDate AND S.DlvSts > 3
	AND EXISTS (SELECT 'C' FROM #FilterRetailer FR (NOLOCK) WHERE S.RtrId = FR.RtrId)
	AND EXISTS (SELECT 'C' FROM #FilterProduct FP (NOLOCK) WHERE SP.PrdId = FP.PrdId)
	
	SELECT S.ReturnID,S.ReturnCode,S.ReturnDate,S.RtrId,SP.PrdId,SP.PrdBatId,-1 * SP.BaseQty BaseQty,SP.PrdUnitMRP MRP,
	CASE SP.SplPriceid WHEN 0 THEN 0 ELSE  SP.Priceid END AS Priceid,SP.SlNo,SP.PrdEditSelRte,
	CAST(SIP.PrdUom1NetRate AS NUMERIC(18,4))/SIP.Uom1ConvFact PrdUnitNetRate,
	CAST((SP.PrdSchDisAmt/SP.BaseQty)  AS NUMERIC(18,6))SchDisc,S.RtrValueClassId
	INTO #ReturnDetails
	FROM ReturnHeader S (NOLOCK)
	INNER JOIN SalesInvoice SI(NOLOCK) ON SI.SalId=S.SalId
	INNER JOIN ReturnProduct SP (NOLOCK) ON S.ReturnID = SP.ReturnID AND SP.StockTypeId IN (SELECT StockTypeId FROM StockType WHERE SystemStockType = 1)
	INNER JOIN SalesInvoiceProduct SIP (NOLOCK) ON SIP.SalId=S.SalId and SIP.SalId=SI.SalId and SIP.PrdId=SP.PrdId and SIP.PrdBatId=SP.PrdBatId
	WHERE ReturnDate BETWEEN  @FromDate AND @ToDate AND S.Status = 0 and S.InvoiceType=1 and S.ReturnMode=1
	AND EXISTS (SELECT 'C' FROM #FilterRetailer FR (NOLOCK) WHERE S.RtrId = FR.RtrId)
	AND EXISTS (SELECT 'C' FROM #FilterProduct FP (NOLOCK) WHERE SP.PrdId = FP.PrdId)
	
	INSERT INTO #ReturnDetails
	SELECT S.ReturnID,S.ReturnCode,S.ReturnDate,S.RtrId,SP.PrdId,SP.PrdBatId,-1 * SP.BaseQty BaseQty,SP.PrdUnitMRP MRP,
	CASE SP.SplPriceid WHEN 0 THEN 0 ELSE  SP.Priceid END AS  Priceid,SP.SlNo,SP.PrdEditSelRte,
	CAST((PrdGrossAmt-(PrdSplDisAmt+PrdSchDisamt+PrdCDDisAmt)+PrdTaxAmt)/CAST(BaseQty AS NUMERIC(18,6)) AS NUMERIC(18,4))  AS PrdUnitNetRate,
	CAST((SP.PrdSchDisAmt/SP.BaseQty)  AS NUMERIC(18,6)) SchDisc ,S.RtrValueClassId
	FROM ReturnHeader S (NOLOCK)
	INNER JOIN ReturnProduct SP (NOLOCK) ON S.ReturnID = SP.ReturnID AND SP.StockTypeId IN (SELECT StockTypeId FROM StockType WHERE SystemStockType = 1)
	WHERE ReturnDate BETWEEN  @FromDate AND @ToDate AND S.Status = 0 --AND (ISNULL(S.InvoiceType,0)<>1 OR ISNULL(S.ReturnMode,0)<>1)
	AND NOT EXISTS(SELECT * FROM #ReturnDetails R (NOLOCK) WHERE R.ReturnId=S.ReturnId)
	AND EXISTS (SELECT 'C' FROM #FilterRetailer FR (NOLOCK) WHERE S.RtrId = FR.RtrId)
	AND EXISTS (SELECT 'C' FROM #FilterProduct FP (NOLOCK) WHERE SP.PrdId = FP.PrdId)
	
	--SELECT S.ReturnID,S.ReturnCode,S.ReturnDate,S.RtrId,SP.PrdId,SP.PrdBatId,-1 * SP.BaseQty BaseQty,SP.PrdUnitMRP MRP,
	--SP.PriceId,SP.SlNo,SP.PrdEditSelRte
	--INTO #ReturnDetails
	--FROM ReturnHeader S (NOLOCK)
	--INNER JOIN ReturnProduct SP (NOLOCK) ON S.ReturnID = SP.ReturnID
	--WHERE ReturnDate BETWEEN  @FromDate AND @ToDate AND S.Status = 0
	--AND EXISTS (SELECT 'C' FROM #FilterRetailer FR (NOLOCK) WHERE S.RtrId = FR.RtrId)
	--AND EXISTS (SELECT 'C' FROM #FilterProduct FP (NOLOCK) WHERE SP.PrdId = FP.PrdId)
	
	SELECT TransType,RtrId,SalId,TransDate,PrdId,PrdBatId,BaseQty TotalPCS,PrdUnitNetRate,MRP,PriceId,SlNo,SchDisc,CAST(0 AS NUMERIC(18,6))[SellRate],
	CAST(0 AS NUMERIC(18,6)) IRCTCMargin,CAST(0 AS INT) [Type],CAST(0 AS NUMERIC(18,6)) AS LCTR,CAST(0 AS NUMERIC(18,6)) ChainRate,RtrValueClassId
	INTO #RailwaySalesDetails
	FROM 
	(
	SELECT 1 TransType,RtrId,SalId,SalInvDate TransDate,PrdId,PrdBatId,BaseQty,PrdUnitNetRate,MRP,PriceId,SlNo,SchDisc,RtrValueClassId FROM #BillingDetails
	
	UNION ALL
	
	SELECT 2 TransType,RtrId,ReturnID,ReturnDate TransDate,PrdId,PrdBatId,BaseQty,PrdUnitNetRate,MRP,PriceId,SlNo,SchDisc,RtrValueClassId FROM #ReturnDetails
	
	) Consolidated
	
	DECLARE @SlNo AS INT
	
	SELECT @SlNo = SlNo FROM BatchCreation (NOLOCK) WHERE FieldDesc = 'Selling Price'
	
	UPDATE R SET R.[SellRate] = D.PrdBatDetailValue  + (D.PrdBatDetailValue *(T.TaxPerc/100)),
	R.SchDisc =  R.SchDisc  + (R.SchDisc *(T.TaxPerc/100))   
	FROM #RailwaySalesDetails R (NOLOCK),
	ProductBatch B (NOLOCK),
	ProductBatchDetails D (NOLOCK),
	 #ParleOutputTaxPercentage T 
	WHERE R.PrdBatId = B.PrdBatId AND B.DefaultPriceId = D.PriceId AND D.SLNo = @SlNo
	AND R.TransType = T.TRANSID AND R.SALID =T.SALID AND R.SLNO=T.PRDSLNO
	
	
	
	--SELECT R.PriceId,C.DiscountPerc,C.[TYPE],C.SplSelRate
	--INTO #ExistingSpecialPrice
	--FROM #RailwaySalesDetails R (NOLOCK),
	--SpecialRateAftDownLoad_Calc C (NOLOCK)
	--WHERE R.PriceId = CAST(REPLACE(C.ContractPriceIds,'-','') AS BIGINT)
	
	
	--SELECT R.RtrId,P.PrdId,B.PrdBatId,S.SplSelRate,DownloadedDate,S.DiscountPerc,Type
	--INTO #SpecialPrice
	--FROM SpecialRateAftDownLoad_Calc S (NOLOCK),
	--#FilterRetailer R,
	--Product P (NOLOCK), ProductBatch B (NOLOCK)
	--WHERE S.RtrCtgValueCode = R.CtgCode AND
	--S.PrdCCode = P.PrdCCode AND B.PrdBatCode = S.PrdBatCCode AND P.PrdId = B.PrdId
	--AND EXISTS (SELECT 'C' FROM #FilterProduct N (NOLOCK) WHERE P.PrdId = N.Prdid)	
	SELECT DISTINCT A.contractid,E.PrdId,Discount,ApplyOn [Type]  INTO #ContractProduct
	FROM contractpricingmaster A(NOLOCK)
	INNER JOIN ContractPricingDetails B(NOLOCK) ON A.ContractId=b.ContractId
	INNER JOIN ProductCategoryValue C(NOLOCK) ON  C.PrdCtgValMainId=B.PrdId 
	INNER JOIN ProductCategoryValue D(NOLOCK) ON D.PrdCtgValLinkCode LIKE CAST(c.PrdCtgValLinkCode AS NVARCHAR(1000)) + '%'
	INNER JOIN  Product  E On D.PrdCtgValMainId = E.PrdCtgValMainId 
	AND EXISTS (SELECT 'C' FROM #FilterProduct N (NOLOCK) WHERE E.PrdId = N.Prdid)	
	SELECT  MAX(CP.ContractId) ContractId,R.RtrId ,cpd.Prdid,CPD.Discount,[Type] INTO #LatesSpecialPrice
	FROM ContractPricingMaster CP INNER JOIN ContractPricingAttributes CA ON CP.ContractId=CA.ContractId AND ATTRTYPE=1
	INNER JOIN RetailerCategory RC ON RC.CtgMainId=CASE CA.Attrid WHEN 0 THEN RC.CtgMainId ELSE CA.Attrid END 
	INNER JOIN RetailerCategory RC1 ON RC1.CtgLinkCode LIKE CAST(RC.CtgLinkCode AS NVARCHAR(1000)) + '%'
	INNER JOIN RetailerValueClass RVC ON RVC.CtgMainId=RC1.CtgMainId 
	INNER JOIN RetailerValueClassMap RVCM ON RVCM.RtrValueClassId=RVC.RtrClassId AND RVCM.RtrValueClassId=CASE CP.RtrClassId WHEN 0 THEN RVCM.RtrValueClassId ELSE CP.RtrClassId END
	INNER JOIN #FilterRetailer  R ON R.RtrId=RVCM.RtrId
	INNER JOIN #ContractProduct CPD ON CP.ContractId= CPD.ContractId 
	GROUP BY R.RtrId ,cpd.Prdid,CPD.Discount ,[Type]
	
	--SELECT S.* 
	--INTO #LatesSpecialPrice
	--FROM #SpecialPrice S,
	--(
	--	SELECT RtrId,PrdId,PrdBatId,MAX(DownloadedDate) DownloadedDate 
	--	FROM #SpecialPrice  WHERE Prdid in (SELECT PrdId FROM #FilterProduct)
	--	GROUP BY RtrId,PrdId,PrdBatId
	--) L
	--WHERE L.RtrId = S.RtrId AND L.PrdId = S.PrdId AND L.PrdBatId = S.PrdBatId AND L.DownloadedDate = S.DownloadedDate
	
	UPDATE R SET R.IRCTCMargin = S.Discount,R.[Type] = S.[TYPE]
	FROM #RailwaySalesDetails R (NOLOCK),
	#LatesSpecialPrice S (NOLOCK)
	WHERE R.Prdid = S.Prdid AND R.Rtrid = S.Rtrid 
	
	--- Added by Amuthakumar on 17-09-2018  CRCRSTPAR0021
--	UPDATE R SET R.LCTR = R.[SellRate] + (R.[SellRate]*(T.TaxPerc/100))
--	FROM #RailwaySalesDetails R (NOLOCK),
--	#ParleOutputTaxPercentage T (NOLOCK)
--	WHERE R.TransType = T.TransId AND R.SalId = T.Salid AND R.Slno = T.PrdSlno	
	--UPDATE R SET R.LCTR = R.[SellRate] 	FROM #RailwaySalesDetails R (NOLOCK)  
	--- Till Here CRCRSTPAR0021
	
	UPDATE R SET R.LCTR = R.[SellRate] 	FROM #RailwaySalesDetails R (NOLOCK)  
		
	--UPDATE R SET R.ChainRate = SplSelRate-SchDisc 	FROM #RailwaySalesDetails R (NOLOCK) INNER JOIN #LatesSpecialPrice S (NOLOCK)
	--ON R.Prdid = S.Prdid AND R.Rtrid = S.Rtrid AND R.Prdbatid = S.Prdbatid
	
	--SELECT DISTINCT Priceid,PrdBatDetailValue  INTO #SpecialPrice_New FROM
	--(
	--SELECT D.PriceId,D.PrdBatDetailValue 
	--FROM #RailwaySalesDetails M (NOLOCK),
	--ProductBatchDetails D (NOLOCK) 
	--WHERE M.PriceId = D.PriceId AND D.SLNo = 3
	--AND PriceCode LIKE '%-Spl Rate-%'   
	--UNION 
	--SELECT D.PriceId,D.PrdBatDetailValue 
	--FROM #RailwaySalesDetails M (NOLOCK),
	--ProductBatchDetails D (NOLOCK) 
	--WHERE M.PriceId = D.PriceId AND D.SLNo = 3
	--AND PriceCode LIKE '%SplRate%'  
	--)A
	
	SELECT A.SalId ,A.PrdId,A.PrdBatid,A.TransType,A.Slno,SplRate INTO #Sales  FROM #RailwaySalesDetails A  
	INNER JOIN SalesInvoiceProduct B ON A.Salid = B.Salid AND A.Prdid =B.PrdId AND A.PrdBatid = B.PrdBatId AND A.Slno = B.SlNo AND TransType = 1
	SELECT  A.SalId ,A.PrdId,A.PrdBatid,A.TransType,A.Slno,SplRate INTO #Return FROM #RailwaySalesDetails A  
	INNER JOIN ReturnHeader B ON A.SalId = B.ReturnID AND TransType = 2 
	INNER JOIN ReturnProduct C ON C.ReturnID = B.ReturnID 
	INNER JOIN SalesInvoiceProduct D ON B.Salid = D.Salid AND D.Prdid =C.PrdId AND D.PrdBatid = C.PrdBatId AND D.SLNO = C.ActSalRowId 
	UPDATE M SET M.ChainRate = D.SplRate + (D.SplRate*(T.TaxPerc/100)) - SchDisc 
	FROM #RailwaySalesDetails M (NOLOCK),
	#Sales D (NOLOCK), 
	#ParleOutputTaxPercentage T (NOLOCK)
	WHERE M.TransType = T.TransId AND M.SalId = T.Salid AND M.Slno = T.PrdSlno AND M.PrdId = D.PrdId AND M.TransType = D.TransType 
	AND D.slno = T.PrdSlno AND D.salid = T.Salid AND T.TransId = D.TransType 
	
	UPDATE M SET M.ChainRate = D.SplRate + (D.SplRate*(T.TaxPerc/100)) - SchDisc 
	FROM #RailwaySalesDetails M (NOLOCK),
	#Return D (NOLOCK), 
	#ParleOutputTaxPercentage T (NOLOCK)
	WHERE  M.TransType = T.TransId AND M.SalId = T.Salid AND M.Slno = T.PrdSlno AND M.PrdId = D.PrdId AND M.TransType = D.TransType 
	AND D.slno = T.PrdSlno	  AND D.salid = T.Salid  AND T.TransId  = D.TransType  
	
	--UPDATE M SET M.ChainRate = D.PrdBatDetailValue-SchDisc 
	--FROM #RailwaySalesDetails M (NOLOCK),
	--#SpecialPrice_New D (NOLOCK) 
	--WHERE M.PriceId = D.PriceId  
	  
	 
	UPDATE R SET R.ChainRate = (R.[SellRate]-SchDisc) --ROUND((R.[SellRate]-SchDisc),2,1) 
	FROM #RailwaySalesDetails R (NOLOCK)  WHERE ChainRate=0
	 	
	--SELECT RtrId,TransDate,P.PrdId,P.PrdName,P.PrdCCode,SUM(TotalPCS) TotalPCS,MRP,
	
	--SELECT Ctgname,P.PrdId,P.PrdName,SUM(TotalPCS) TotalPCS,PrdUnitNetRate,MRP,
	--LCTR As NormalRate,IRCTCMargin,CASE S.[Type] WHEN 1 THEN 'Mark Up' WHEN 2 THEN 'Mark Down' ELSE '' END MarkUpDown,
	--ChainRate,
	--CAST(0 AS NUMERIC(18,6)) TotalMRP,CAST(0 AS NUMERIC(18,6)) TotalLCTR,
	--CAST(0 AS NUMERIC(18,6)) IRCTCTotal,CAST(0 AS NUMERIC(18,6)) ClmAmount,
	--CAST(0 AS NUMERIC(18,6)) LibOnMRP,CAST(0 AS NUMERIC(18,6)) LibOnLCTR
	--INTO #RailwayDiscount
	--FROM #RailwaySalesDetails S (NOLOCK)
	--INNER JOIN Product P (NOLOCK) ON S.PrdId = P.PrdId
	--INNER JOIN #FilterRetailer F ON F.Rtrid = S.Rtrid
	--GROUP BY Ctgname,P.PrdId,P.PrdName,MRP,LCTR,IRCTCMargin,S.[Type],PrdUnitNetRate,ChainRate
		
	---------------
	SELECT Ctgname,P.PrdId,P.PrdName,(TotalPCS) TotalPCS,PrdUnitNetRate,MRP,
	LCTR As NormalRate,IRCTCMargin,CASE S.[Type] WHEN 1 THEN 'Mark Up' WHEN 2 THEN 'Mark Down' ELSE '' END MarkUpDown,
	ChainRate,
	CAST(0 AS NUMERIC(18,6)) TotalMRP,CAST(0 AS NUMERIC(18,6)) TotalLCTR,
	CAST(0 AS NUMERIC(18,6)) IRCTCTotal,CAST(0 AS NUMERIC(18,6)) ClmAmount,
	CAST(0 AS NUMERIC(18,6)) LibOnMRP,CAST(0 AS NUMERIC(18,6)) LibOnLCTR
	INTO #RailwayDiscount1
	FROM #RailwaySalesDetails S (NOLOCK)
	INNER JOIN Product P (NOLOCK) ON S.PrdId = P.PrdId
	INNER JOIN #FilterRetailer F ON F.Rtrid = S.Rtrid AND S.RtrValueClassId = F.RtrValueClassId 
	-----
	--UPDATE R SET R.IRCTCRate = MRP - (MRP * IRCTCMargin / 100.00), 
	--UPDATE R SET R.IRCTCRate = PrdUnitNetRate, 
	UPDATE R SET TotalMRP  = TotalPCS * MRP, 
	TotalLCTR = TotalPCS * NormalRate
	FROM #RailwayDiscount1 R (NOLOCK)
	--------------- added by Lakshman M on 11-07-2018 PMS ID: ILCRSTPAR1325----------
	
	UPDATE R SET R.IRCTCTotal = TotalPCS * ChainRate
	FROM #RailwayDiscount1 R (NOLOCK)
	 
	
	UPDATE R SET R.ClmAmount = ROUND((TotalLCTR - IRCTCTotal),2)
	FROM #RailwayDiscount1 R (NOLOCK)
	
	UPDATE R SET R.LibOnMRP = (ClmAmount / TotalMRP)*100
	FROM #RailwayDiscount1 R (NOLOCK)
	WHERE R.TotalMRP <> 0
	
	UPDATE R SET LibOnMRP = -1* LibOnMRP
	FROM #RailwayDiscount1 R (NOLOCK) WHERE TotalPCS <0
	
	UPDATE R SET R.LibOnLCTR = (ClmAmount / TotalLCTR)*100
	FROM #RailwayDiscount1 R (NOLOCK)
	WHERE R.TotalLCTR <> 0	
	
	UPDATE R SET LibOnLCTR = -1* LibOnLCTR
	FROM #RailwayDiscount1 R (NOLOCK) WHERE TotalPCS <0
	 
------------ Till Here ---------------
	IF EXISTS (SELECT 'C' FROM SYSOBJECTS WHERE XTYPE = 'U' AND NAME = 'RptRailwayDiscountReconsolidation_Excel')
	DROP TABLE RptRailwayDiscountReconsolidation_Excel	
	
	SELECT Ctgname,PrdId,PrdName,SUM(TotalPCS) TotalPCS,PrdUnitNetRate,MRP,CAST(NormalRate  AS NUMERIC(18,2)) NormalRate,IRCTCMargin As ChainMargin,MarkUpDown,
	CAST(ChainRate  AS NUMERIC(18,2)) ChainRate,--- Sum off validation removed after changing in with tax report By lakshman M : Amuthakumar PMS : CRCRSTPAR0021
	SUM(TotalMRP) TotalMRP,CAST (SUM(TotalLCTR)  AS NUMERIC(18,2)) TotalLCTR,CAST((ROUND(SUM(IRCTCTotal),2)) AS NUMERIC(18,2)) IRCTCTotal 
	,CAST(SUM(ClmAmount)  AS NUMERIC(18,2)) ClmAmount,CAST(SUM(LibOnMRP)  AS NUMERIC(18,2)) LibOnMRP,	CAST (SUM(LibOnLCTR)  AS NUMERIC(18,2)) LibOnLCTR
	INTO RptRailwayDiscountReconsolidation_Excel
	FROM #RailwayDiscount1 (NOLOCK) 
	GROUP BY Ctgname,PrdId,PrdName,PrdUnitNetRate,MRP,NormalRate,IRCTCMargin,ChainRate,MarkUpDown 
	ORDER BY PrdName
	
	DELETE FROM RptDataCount WHERE RptId = @Pi_RptId AND UserId = @Pi_UsrId
	INSERT INTO RptDataCount (RptId,RecCount,ErrNo,UserId)
	SELECT @Pi_RptId,Count(*) as RecCount,0,@Pi_UsrId FROM RptRailwayDiscountReconsolidation_Excel
	
	SELECT * FROM RptRailwayDiscountReconsolidation_Excel ORDER BY PrdName,MarkUpDown
	DELETE FROM RptExcelHeaders WHERE RptId = 288
	
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,1,'CtgName','Category Name',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,2,'PrdId','PrdId',0,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,3,'PrdName','Product Name',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,4,'TotalPCS','Total PCS',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,5,'PrdUnitNetrate','PrdUnitNetrate',0,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,6,'MRP','MRP',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,7,'Normal Rate','Normal Rate',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,8,'IRCTCMargin','Chain Margin',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,9,'MarkUpDown','MarkUp /Mark Down',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,10,'Chain Rate','Chain Rate',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,11,'TotalMRP','Parle Total MRP Value',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,12,'TotalLCTR','Parle Total Normal Value',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,13,'IRCTCTotal','Chain Total Value',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,14,'ClmAmount','Claim Amount',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,15,'LibOnMRP','% Lib On MRP',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,16,'LibOnLCTR','% Lib On Total NormalRate',1,1)
	RETURN	
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_RptRailwayDiscountReconsolidation' AND TYPE='P')
DROP PROCEDURE Proc_RptRailwayDiscountReconsolidation
GO
/*
BEGIN TRAN
EXEC Proc_RptRailwayDiscountReconsolidation 288,1,0,'Parle',0,0,1
ROLLBACK TRAN
*/
CREATE PROCEDURE Proc_RptRailwayDiscountReconsolidation
(
	@Pi_RptId			INT,
	@Pi_UsrId			INT,
	@Pi_SnapId			INT,
	@Pi_DbName			NVARCHAR(50),
	@Pi_SnapRequired	INT,
	@Pi_GetFromSnap		INT,
	@Pi_CurrencyId		INT
)
AS
/**************************************************************************************************
* PROCEDURE	: Proc_RptRailwayDiscountReconsolidation
* PURPOSE	: To Return the Scheme Utilization Details
* CREATED	: Aravindh Deva C
* CREATED DATE	: 27 05 2016
* NOTE		: Parle SP for Trade Promotion Reports
* MODIFIED 
***************************************************************************************************
* DATE        AUTHOR      CR/BZ			USER STORY ID       DESCRIPTION   
 14-12-2017   S.Moorthi   CR			ICRSTPAR7049		1. IRCTC rate should display the net rate in billing screen   
 14-12-2017   S.Mohana    CR			ICRSTPAR7049	    Corrected Excel Column values.
 26-12-2017	  S.MOHANA	  SR			ICRSTPAR7809		1.Changed Column Name (IRCTC --> Chain And LCTR --> Normal rate)
															2.REMOVED TAX CALCULATION
															3.ADDED RATE-SCHEMEDISCOUNT 
 11-07-2018   Lakshman M  BZ            ILCRSTPAR1325       negative values division validation added from core stocky.	
 27-09-2018   Amuthakumar CR            CRCRSTPAR0031       Enable Configuration with Tax in Reports
 24-10-2018   Lakshman M  BZ            ILCRSTPAR2414       category wise Sum off values chain rate amount validation removed in Report.
 11-05-2020	  MOHANA S	  CR			PARCS202100013		CATEGORY TAKEN BASED ON TRANSACTION														
***************************************************************************************************/  
BEGIN
	--- Added by Amuthakumar on 27/09/2018 CRCRSTPAR0031
	IF EXISTS(SELECT 'X' FROM MANUALCONFIGURATION (NOLOCK)	WHERE  ModuleId='Report_withTax' AND ModuleName='Report with Tax' AND Status=1 and SeqNo=1)
	BEGIN
		EXEC Proc_RptRailwayDiscountReconsolidation_withTax @Pi_RptId,@Pi_UsrId,@Pi_SnapId,@Pi_DbName,@Pi_SnapRequired,@Pi_GetFromSnap,@Pi_CurrencyId
		RETURN
	END
	-- Till Here CRCRSTPAR0031
	SET NOCOUNT ON
	
	DECLARE  @FromDate			AS	DATETIME
	DECLARE @ToDate				AS	DATETIME
	DECLARE @CmpId				AS  INT 
	DECLARE @CtgLevelId			AS  INT  
	DECLARE @CtgMainId			AS  INT	
	DECLARE @CmpPrdCtgId		AS INT
	DECLARE @PrdCtgValMainId	AS INT	
	
	SELECT  @FromDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,10,@Pi_UsrId)
	SELECT @ToDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,11,@Pi_UsrId)
	SET @CmpId =(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId))  
	
	SET @CtgLevelId =(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,29,@Pi_UsrId))    
	SET @CtgMainId=(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,30,@Pi_UsrId))
	SET @CmpPrdCtgId = (SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,16,@Pi_UsrId))
	SET @PrdCtgValMainId = (SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,21,@Pi_UsrId))
	 
	--To Filter Retailers
	--SELECT DISTINCT R.RtrId,RC.CtgCode,RC.CtgName
	--INTO #FilterRetailer
	--FROM Retailer R (NOLOCK),
	--RetailerValueClassMap RVCM (NOLOCK),
	--RetailerValueClass RVC (NOLOCK),
	--RetailerCategory RC (NOLOCK),
	--RetailerCategoryLevel RCL (NOLOCK)	
	--WHERE R.Rtrid = RVCM.RtrId AND RVCM.RtrValueClassId = RVC.RtrClassId
	--AND  RVC.CtgMainId=RC.CtgMainId AND  RCL.CtgLevelId=RC.CtgLevelId
	--AND RC.CtgLinkId NOT IN (SELECT CtgMainId FROM RetailerCategory WHERE CtgCode='GT')
	--AND (RVC.CmpId=(CASE @CmpId WHEN 0 THEN RVC.CmpId ELSE 0 END) OR
	--RVC.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId)))
	--AND (RCL.CtgLevelId=(CASE @CtgLevelId WHEN 0 THEN RCL.CtgLevelId ELSE 0 END) OR  
	--RCL.CtgLevelId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,29,@Pi_UsrId)))
	--AND (RC.CtgMainId=(CASE @CtgMainId WHEN 0 THEN RC.CtgMainId ELSE 0 END) OR  
	--RC.CtgMainId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,30,@Pi_UsrId)))
	--To Filter Retailers


	SELECT DISTINCT R.RtrId,RC.CtgCode,RC.CtgName,RtrValueClassId 
	INTO #FilterRetailer
	FROM Retailer R (NOLOCK),
	Salesinvoice S (NOLOCK),
	RetailerValueClass RVC (NOLOCK),
	RetailerCategory RC (NOLOCK),
	RetailerCategoryLevel RCL (NOLOCK)	
	WHERE R.Rtrid = S.RtrId AND S.RtrValueClassId = RVC.RtrClassId
	AND  RVC.CtgMainId=RC.CtgMainId AND  RCL.CtgLevelId=RC.CtgLevelId
	AND SalInvDate BETWEEN @FromDate AND @ToDate AND DlvSts>3
	AND RC.CtgLinkId NOT IN (SELECT CtgMainId FROM RetailerCategory WHERE CtgCode='GT')
	AND (RVC.CmpId=(CASE @CmpId WHEN 0 THEN RVC.CmpId ELSE 0 END) OR
	RVC.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId)))
	AND (RCL.CtgLevelId=(CASE @CtgLevelId WHEN 0 THEN RCL.CtgLevelId ELSE 0 END) OR  
	RCL.CtgLevelId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,29,@Pi_UsrId)))
	AND (RC.CtgMainId=(CASE @CtgMainId WHEN 0 THEN RC.CtgMainId ELSE 0 END) OR  
	RC.CtgMainId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,30,@Pi_UsrId)))


	--To Filter Products
	SELECT DISTINCT E.PrdId
	INTO #FilterProduct
	FROM ProductCategoryValue C (NOLOCK)
	INNER JOIN ProductCategoryValue D (NOLOCK) ON
	D.PrdCtgValLinkCode LIKE Cast(C.PrdCtgValLinkCode AS NVARCHAR(1000)) + '%'
	INNER JOIN Product E (NOLOCK) ON D.PrdCtgValMainId = E.PrdCtgValMainId
	INNER JOIN ProductCategoryLevel L (NOLOCK) ON L.CmpPrdCtgId = C.CmpPrdCtgId
	
	WHERE (L.CmpId=(CASE @CmpId WHEN 0 THEN L.CmpId ELSE 0 END) OR
	L.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId)))
	 
	AND (L.CmpPrdCtgId = (CASE @CmpPrdCtgId  WHEN 0 THEN L.CmpPrdCtgId ELSE 0 END) OR
	L.CmpPrdCtgId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,16,@Pi_UsrId)))
	
	AND (C.PrdCtgValMainId = (CASE @PrdCtgValMainId  WHEN 0 THEN C.PrdCtgValMainId ELSE 0 END) OR 
	C.PrdCtgValMainId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId ,21, @Pi_UsrId)))
	--To Filter Products
--	EXEC Proc_ReturnSalesProductTaxPercentage  @FromDate,@ToDate
	
--	SELECT * INTO #ParleOutputTaxPercentage
--	FROM ParleOutputTaxPercentage (NOLOCK)	
	SELECT S.SalId,S.SalInvNo,S.SalInvDate,S.RtrId,SP.PrdId,SP.PrdBatId,SP.BaseQty BaseQty,SP.PrdUnitMRP MRP,
	CASE SP.SplPriceid WHEN 0 THEN 0 ELSE  SP.Priceid END AS  Priceid,SP.SlNo,SP.PrdUom1EditedSelRate,
	CAST(CAST(SP.PrdUom1NetRate AS NUMERIC(18,4))/Uom1ConvFact AS NUMERIC(18,4)) PrdUnitNetRate,
	CAST((SP.PrdSchDiscAmount/SP.BaseQty)  AS NUMERIC(18,6)) SchDisc,RtrValueClassId
	INTO #BillingDetails
	FROM SalesInvoice S (NOLOCK)
	INNER JOIN SalesInvoiceProduct SP (NOLOCK) ON S.SalId = SP.SalId
	WHERE SalInvDate BETWEEN  @FromDate AND @ToDate AND S.DlvSts > 3
	AND EXISTS (SELECT 'C' FROM #FilterRetailer FR (NOLOCK) WHERE S.RtrId = FR.RtrId)
	AND EXISTS (SELECT 'C' FROM #FilterProduct FP (NOLOCK) WHERE SP.PrdId = FP.PrdId)
	
	SELECT S.ReturnID,S.ReturnCode,S.ReturnDate,S.RtrId,SP.PrdId,SP.PrdBatId,-1 * SP.BaseQty BaseQty,SP.PrdUnitMRP MRP,
	CASE SP.SplPriceid WHEN 0 THEN 0 ELSE  SP.Priceid END AS Priceid,SP.SlNo,SP.PrdEditSelRte,
	CAST(SIP.PrdUom1NetRate AS NUMERIC(18,4))/SIP.Uom1ConvFact PrdUnitNetRate,
	CAST((SP.PrdSchDisAmt/SP.BaseQty)  AS NUMERIC(18,6))SchDisc,S.RtrValueClassId 
	INTO #ReturnDetails
	FROM ReturnHeader S (NOLOCK)
	INNER JOIN SalesInvoice SI(NOLOCK) ON SI.SalId=S.SalId
	INNER JOIN ReturnProduct SP (NOLOCK) ON S.ReturnID = SP.ReturnID AND SP.StockTypeId IN (SELECT StockTypeId FROM StockType WHERE SystemStockType = 1)
	INNER JOIN SalesInvoiceProduct SIP (NOLOCK) ON SIP.SalId=S.SalId and SIP.SalId=SI.SalId and SIP.PrdId=SP.PrdId and SIP.PrdBatId=SP.PrdBatId
	WHERE ReturnDate BETWEEN  @FromDate AND @ToDate AND S.Status = 0 and S.InvoiceType=1 and S.ReturnMode=1
	AND EXISTS (SELECT 'C' FROM #FilterRetailer FR (NOLOCK) WHERE S.RtrId = FR.RtrId)
	AND EXISTS (SELECT 'C' FROM #FilterProduct FP (NOLOCK) WHERE SP.PrdId = FP.PrdId)
	
	INSERT INTO #ReturnDetails
	SELECT S.ReturnID,S.ReturnCode,S.ReturnDate,S.RtrId,SP.PrdId,SP.PrdBatId,-1 * SP.BaseQty BaseQty,SP.PrdUnitMRP MRP,
	CASE SP.SplPriceid WHEN 0 THEN 0 ELSE  SP.Priceid END AS  Priceid,SP.SlNo,SP.PrdEditSelRte,
	CAST((PrdGrossAmt-(PrdSplDisAmt+PrdSchDisamt+PrdCDDisAmt)+PrdTaxAmt)/CAST(BaseQty AS NUMERIC(18,6)) AS NUMERIC(18,4))  AS PrdUnitNetRate,
	CAST((SP.PrdSchDisAmt/SP.BaseQty)  AS NUMERIC(18,6)) SchDisc ,S.RtrValueClassId 
	FROM ReturnHeader S (NOLOCK)
	INNER JOIN ReturnProduct SP (NOLOCK) ON S.ReturnID = SP.ReturnID AND SP.StockTypeId IN (SELECT StockTypeId FROM StockType WHERE SystemStockType = 1)
	WHERE ReturnDate BETWEEN  @FromDate AND @ToDate AND S.Status = 0 --AND (ISNULL(S.InvoiceType,0)<>1 OR ISNULL(S.ReturnMode,0)<>1)
	AND NOT EXISTS(SELECT * FROM #ReturnDetails R (NOLOCK) WHERE R.ReturnId=S.ReturnId)
	AND EXISTS (SELECT 'C' FROM #FilterRetailer FR (NOLOCK) WHERE S.RtrId = FR.RtrId)
	AND EXISTS (SELECT 'C' FROM #FilterProduct FP (NOLOCK) WHERE SP.PrdId = FP.PrdId)
	
	
	
	--SELECT S.ReturnID,S.ReturnCode,S.ReturnDate,S.RtrId,SP.PrdId,SP.PrdBatId,-1 * SP.BaseQty BaseQty,SP.PrdUnitMRP MRP,
	--SP.PriceId,SP.SlNo,SP.PrdEditSelRte
	--INTO #ReturnDetails
	--FROM ReturnHeader S (NOLOCK)
	--INNER JOIN ReturnProduct SP (NOLOCK) ON S.ReturnID = SP.ReturnID
	--WHERE ReturnDate BETWEEN  @FromDate AND @ToDate AND S.Status = 0
	--AND EXISTS (SELECT 'C' FROM #FilterRetailer FR (NOLOCK) WHERE S.RtrId = FR.RtrId)
	--AND EXISTS (SELECT 'C' FROM #FilterProduct FP (NOLOCK) WHERE SP.PrdId = FP.PrdId)
	
	SELECT TransType,RtrId,SalId,TransDate,PrdId,PrdBatId,BaseQty TotalPCS,PrdUnitNetRate,MRP,PriceId,SlNo,SchDisc,CAST(0 AS NUMERIC(18,6))[SellRate],
	CAST(0 AS NUMERIC(18,6)) IRCTCMargin,CAST(0 AS INT) [Type],CAST(0 AS NUMERIC(18,6)) AS LCTR,CAST(0 AS NUMERIC(18,6)) ChainRate,RtrValueClassId
	INTO #RailwaySalesDetails
	FROM 
	(
	SELECT 1 TransType,RtrId,SalId,SalInvDate TransDate,PrdId,PrdBatId,BaseQty,PrdUnitNetRate,MRP,PriceId,SlNo,SchDisc,RtrValueClassId FROM #BillingDetails
	
	UNION ALL
	
	SELECT 2 TransType,RtrId,ReturnID,ReturnDate TransDate,PrdId,PrdBatId,BaseQty,PrdUnitNetRate,MRP,PriceId,SlNo,SchDisc,RtrValueClassId FROM #ReturnDetails
	
	) Consolidated
	
	DECLARE @SlNo AS INT
	
	SELECT @SlNo = SlNo FROM BatchCreation (NOLOCK) WHERE FieldDesc = 'Selling Price'
	
	UPDATE R SET R.[SellRate] = D.PrdBatDetailValue
	FROM #RailwaySalesDetails R (NOLOCK),
	ProductBatch B (NOLOCK),
	ProductBatchDetails D (NOLOCK)
	WHERE R.PrdBatId = B.PrdBatId AND B.DefaultPriceId = D.PriceId AND D.SLNo = @SlNo
	
	--SELECT R.PriceId,C.DiscountPerc,C.[TYPE],C.SplSelRate
	--INTO #ExistingSpecialPrice
	--FROM #RailwaySalesDetails R (NOLOCK),
	--SpecialRateAftDownLoad_Calc C (NOLOCK)
	--WHERE R.PriceId = CAST(REPLACE(C.ContractPriceIds,'-','') AS BIGINT)
	
	
	SELECT R.RtrId,P.PrdId,B.PrdBatId,S.SplSelRate,DownloadedDate,S.DiscountPerc,Type
	INTO #SpecialPrice
	FROM SpecialRateAftDownLoad_Calc S (NOLOCK),
	#FilterRetailer R,
	Product P (NOLOCK), ProductBatch B (NOLOCK)
	WHERE S.RtrCtgValueCode = R.CtgCode AND
	S.PrdCCode = P.PrdCCode AND B.PrdBatCode = S.PrdBatCCode AND P.PrdId = B.PrdId
	AND EXISTS (SELECT 'C' FROM #FilterProduct N (NOLOCK) WHERE P.PrdId = N.Prdid)	
	
	SELECT S.* 
	INTO #LatesSpecialPrice
	FROM #SpecialPrice S,
	(
		SELECT RtrId,PrdId,PrdBatId,MAX(DownloadedDate) DownloadedDate 
		FROM #SpecialPrice  WHERE Prdid in (SELECT PrdId FROM #FilterProduct)
		GROUP BY RtrId,PrdId,PrdBatId
	) L
	WHERE L.RtrId = S.RtrId AND L.PrdId = S.PrdId AND L.PrdBatId = S.PrdBatId AND L.DownloadedDate = S.DownloadedDate
	
	UPDATE R SET R.IRCTCMargin = S.DiscountPerc,R.[Type] = S.[TYPE]
	FROM #RailwaySalesDetails R (NOLOCK),
	#LatesSpecialPrice S (NOLOCK)
	WHERE R.Prdid = S.Prdid AND R.Rtrid = S.Rtrid AND R.Prdbatid = S.Prdbatid
	--UPDATE R SET R.LCTR = R.[SellRate] + (R.[SellRate]*(T.TaxPerc/100))
	--FROM #RailwaySalesDetails R (NOLOCK),
	--#ParleOutputTaxPercentage T (NOLOCK)
	--WHERE R.TransType = T.TransId AND R.SalId = T.Salid AND R.Slno = T.PrdSlno	
	
	
	UPDATE R SET R.LCTR = R.[SellRate] 	FROM #RailwaySalesDetails R (NOLOCK)  
		
	--UPDATE R SET R.ChainRate = SplSelRate-SchDisc 	FROM #RailwaySalesDetails R (NOLOCK) INNER JOIN #LatesSpecialPrice S (NOLOCK)
	--ON R.Prdid = S.Prdid AND R.Rtrid = S.Rtrid AND R.Prdbatid = S.Prdbatid
	
	SELECT DISTINCT Priceid,PrdBatDetailValue  INTO #SpecialPrice_New FROM
	(
	SELECT D.PriceId,D.PrdBatDetailValue 
	FROM #RailwaySalesDetails M (NOLOCK),
	ProductBatchDetails D (NOLOCK) 
	WHERE M.PriceId = D.PriceId AND D.SLNo = 3
	AND PriceCode LIKE '%-Spl Rate-%'   
	UNION 
	SELECT D.PriceId,D.PrdBatDetailValue 
	FROM #RailwaySalesDetails M (NOLOCK),
	ProductBatchDetails D (NOLOCK) 
	WHERE M.PriceId = D.PriceId AND D.SLNo = 3
	AND PriceCode LIKE '%SplRate%'  
	)A
	
	UPDATE M SET M.ChainRate = D.PrdBatDetailValue-SchDisc 
	FROM #RailwaySalesDetails M (NOLOCK),
	#SpecialPrice_New D (NOLOCK) 
	WHERE M.PriceId = D.PriceId  
	 
	 
	 
	UPDATE R SET R.ChainRate = (R.[SellRate]-SchDisc) --ROUND((R.[SellRate]-SchDisc),2,1) 
	FROM #RailwaySalesDetails R (NOLOCK)  WHERE ChainRate=0
	 	
	--SELECT RtrId,TransDate,P.PrdId,P.PrdName,P.PrdCCode,SUM(TotalPCS) TotalPCS,MRP,
	
	--SELECT Ctgname,P.PrdId,P.PrdName,SUM(TotalPCS) TotalPCS,PrdUnitNetRate,MRP,
	--LCTR As NormalRate,IRCTCMargin,CASE S.[Type] WHEN 1 THEN 'Mark Up' WHEN 2 THEN 'Mark Down' ELSE '' END MarkUpDown,
	--ChainRate,
	--CAST(0 AS NUMERIC(18,6)) TotalMRP,CAST(0 AS NUMERIC(18,6)) TotalLCTR,
	--CAST(0 AS NUMERIC(18,6)) IRCTCTotal,CAST(0 AS NUMERIC(18,6)) ClmAmount,
	--CAST(0 AS NUMERIC(18,6)) LibOnMRP,CAST(0 AS NUMERIC(18,6)) LibOnLCTR
	--INTO #RailwayDiscount
	--FROM #RailwaySalesDetails S (NOLOCK)
	--INNER JOIN Product P (NOLOCK) ON S.PrdId = P.PrdId
	--INNER JOIN #FilterRetailer F ON F.Rtrid = S.Rtrid
	--GROUP BY Ctgname,P.PrdId,P.PrdName,MRP,LCTR,IRCTCMargin,S.[Type],PrdUnitNetRate,ChainRate
		
	-----
	SELECT Ctgname,P.PrdId,P.PrdName,(TotalPCS) TotalPCS,PrdUnitNetRate,MRP,
	LCTR As NormalRate,IRCTCMargin,CASE S.[Type] WHEN 1 THEN 'Mark Up' WHEN 2 THEN 'Mark Down' ELSE '' END MarkUpDown,
	ChainRate,
	CAST(0 AS NUMERIC(18,6)) TotalMRP,CAST(0 AS NUMERIC(18,6)) TotalLCTR,
	CAST(0 AS NUMERIC(18,6)) IRCTCTotal,CAST(0 AS NUMERIC(18,6)) ClmAmount,
	CAST(0 AS NUMERIC(18,6)) LibOnMRP,CAST(0 AS NUMERIC(18,6)) LibOnLCTR
	INTO #RailwayDiscount1
	FROM #RailwaySalesDetails S (NOLOCK)
	INNER JOIN Product P (NOLOCK) ON S.PrdId = P.PrdId
	INNER JOIN #FilterRetailer F ON F.Rtrid = S.Rtrid AND S.RtrValueClassId = F.RtrValueClassId 
	-----
	--UPDATE R SET R.IRCTCRate = MRP - (MRP * IRCTCMargin / 100.00), 
	--UPDATE R SET R.IRCTCRate = PrdUnitNetRate, 
	UPDATE R SET TotalMRP  = TotalPCS * MRP, 
	TotalLCTR = TotalPCS * NormalRate
	FROM #RailwayDiscount1 R (NOLOCK)
	--------------- added by Lakshman M on 11-07-2018 PMS ID: ILCRSTPAR1325----------
	
	UPDATE R SET R.IRCTCTotal = TotalPCS * ChainRate
	FROM #RailwayDiscount1 R (NOLOCK)
	 
	
	UPDATE R SET R.ClmAmount = ROUND((TotalLCTR - IRCTCTotal),2)
	FROM #RailwayDiscount1 R (NOLOCK)
	
	UPDATE R SET R.LibOnMRP = (ClmAmount / TotalMRP)*100
	FROM #RailwayDiscount1 R (NOLOCK)
	WHERE R.TotalMRP <> 0
	
	UPDATE R SET LibOnMRP = -1* LibOnMRP
	FROM #RailwayDiscount1 R (NOLOCK) WHERE TotalPCS <0
	
	UPDATE R SET R.LibOnLCTR = (ClmAmount / TotalLCTR)*100
	FROM #RailwayDiscount1 R (NOLOCK)
	WHERE R.TotalLCTR <> 0	
	
	UPDATE R SET LibOnLCTR = -1* LibOnLCTR
	FROM #RailwayDiscount1 R (NOLOCK) WHERE TotalPCS <0
	 
------------ Till Here ---------------
	IF EXISTS (SELECT 'C' FROM SYSOBJECTS WHERE XTYPE = 'U' AND NAME = 'RptRailwayDiscountReconsolidation_Excel')
	DROP TABLE RptRailwayDiscountReconsolidation_Excel	
	
	SELECT Ctgname,PrdId,PrdName,SUM(TotalPCS) TotalPCS,PrdUnitNetRate,MRP,CAST(NormalRate  AS NUMERIC(18,2)) NormalRate,IRCTCMargin As ChainMargin,MarkUpDown,
	CAST(ChainRate  AS NUMERIC(18,2)) ChainRate, --- Sum off validation removed By lakshman M Dated ON:24-10-2018 PMS ID: ILCRSTPAR2414
	SUM(TotalMRP) TotalMRP,CAST (SUM(TotalLCTR)  AS NUMERIC(18,2)) TotalLCTR,CAST ((ROUND(SUM(IRCTCTotal),2)) AS NUMERIC(18,2)) IRCTCTotal 
	,CAST(SUM(ClmAmount)  AS NUMERIC(18,2)) ClmAmount,CAST(SUM(LibOnMRP)  AS NUMERIC(18,2)) LibOnMRP,	CAST (SUM(LibOnLCTR)  AS NUMERIC(18,2)) LibOnLCTR
	INTO RptRailwayDiscountReconsolidation_Excel
	FROM #RailwayDiscount1 (NOLOCK) 
	GROUP BY Ctgname,PrdId,PrdName,PrdUnitNetRate,MRP,NormalRate,IRCTCMargin,ChainRate,MarkUpDown 
	ORDER BY PrdName
	
	DELETE FROM RptDataCount WHERE RptId = @Pi_RptId AND UserId = @Pi_UsrId
	INSERT INTO RptDataCount (RptId,RecCount,ErrNo,UserId)
	SELECT @Pi_RptId,Count(*) as RecCount,0,@Pi_UsrId FROM RptRailwayDiscountReconsolidation_Excel
	
	SELECT * FROM RptRailwayDiscountReconsolidation_Excel ORDER BY PrdName,MarkUpDown
	DELETE FROM RptExcelHeaders WHERE RptId = 288
	
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,1,'CtgName','Category Name',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,2,'PrdId','PrdId',0,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,3,'PrdName','Product Name',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,4,'TotalPCS','Total PCS',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,5,'PrdUnitNetrate','PrdUnitNetrate',0,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,6,'MRP','MRP',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,7,'Normal Rate','Normal Rate',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,8,'IRCTCMargin','Chain Margin',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,9,'MarkUpDown','MarkUp /Mark Down',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,10,'Chain Rate','Chain Rate',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,11,'TotalMRP','Parle Total MRP Value',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,12,'TotalLCTR','Parle Total Normal Value',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,13,'IRCTCTotal','Chain Total Value',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,14,'ClmAmount','Claim Amount',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,15,'LibOnMRP','% Lib On MRP',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES (288,16,'LibOnLCTR','% Lib On Total NormalRate',1,1)
	RETURN	
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Cs2Cn_MTDebitSummary_New_withTax' AND TYPE='P')
DROP PROCEDURE Proc_Cs2Cn_MTDebitSummary_New_withTax
GO
/*
BEGIN TRAN  
EXEC Proc_Cs2Cn_MTDebitSummary_New_withTax 0,'2018-09-17' 
select * from Cs2Cn_Prk_MTDebitSummary
ROLLBACK TRAN
*/
CREATE PROCEDURE Proc_Cs2Cn_MTDebitSummary_New_withTax
(
	@Po_ErrNo INT OUTPUT,
	@ServerDate DATETIME
)
AS
/********************************************************************************************************
* PROCEDURE		: Proc_Cs2Cn_MTDebitSummary 
* PURPOSE		: Proc_Cs2Cn_MTDebitSummary (Create for report changes
* CREATED BY	: MOHANA --CCRSTPAR0188
* CREATED DATE	: 03.06.2016
* NOTE			:
* MODIFIED
---------------------------------------------------------------------------------------------------------
* DATE        AUTHOR		CR/BZ		USER STORY ID       DESCRIPTION   
 02-07-2018   M Lakshman	BZ			ILCRSTPAR1233		Upload flag include in MTDebit summary process.
 10-07-2018   M Lakshman	BZ          ILCRSTPAR1325       sales return logice included from core stocky.
 17-09-2018	  Amuthakumar P	CR			CRCRSTPAR0021       Promotion claim should be calculating with tax	
 09-10-2018   Mohana P		BZ	        ILCRSTPAR2313	    TAX CALCULATION CHANGED AS PER CLIENT REQUEST
 30-10-2018   Lakshman M   BZ           ILCRSTPAR2458       As per client request scheme and nonscheme product and category wise validation added in CS.
 31-03-2020		MOHANA S     CR   PARCS202100002  Contract Pricing Optimization	
*********************************************************************************************************/
SET NOCOUNT ON
BEGIN
	
	SET @Po_ErrNo=0
	
	DECLARE @DistCode As NVARCHAR(50)
	DELETE FROM Cs2Cn_Prk_MTDebitSummary WHERE UploadFlag = 'Y'
	
	IF NOT EXISTS (SELECT * FROM UploadingReportTransaction (NOLOCK))
	BEGIN
		RETURN
	END
	SELECT @DistCode = DistributorCode FROM Distributor(NOLOCK)	
	
	--To Filter Retailers
	SELECT DISTINCT R.RtrId,RC.CtgMainId,RC.CtgName,RC.CtgCode
	INTO #FilterRetailer
	FROM Retailer R (NOLOCK),
	RetailerValueClassMap RVCM (NOLOCK),
	RetailerValueClass RVC (NOLOCK),
	RetailerCategory RC (NOLOCK),
	RetailerCategoryLevel RCL (NOLOCK)	
	WHERE 
	R.Rtrid = RVCM.RtrId AND RVCM.RtrValueClassId = RVC.RtrClassId
	AND  RVC.CtgMainId=RC.CtgMainId AND  RCL.CtgLevelId=RC.CtgLevelId AND
	RC.CTGCODE IN (SELECT CtgCode FROM RetailerCategory A 
	WHERE CtgLinkId IN (SELECT CtgMainId FROM RetailerCategory A(NOLOCK) where CtgCode NOT IN ('GT')))
	
	DECLARE @FromDate DATETIME
	DECLARE @ToDate DATETIME
	
	SELECT @FromDate = MIN(TransDate),@ToDate = MAX(TransDate) 
	FROM UploadingReportTransaction (NOLOCK)
	
	SELECT S.SalId,S.SalInvNo,S.SalInvDate,S.RtrId,SP.PrdId,SP.PrdBatId,SP.BaseQty BaseQty,SP.PrdUnitMRP MRP,
	CASE SP.SplPriceid WHEN 0 THEN 0 ELSE  SP.Priceid END AS Priceid ,SP.SlNo,SP.PrdUom1EditedSelRate,B.DefaultPriceId,
	Cast((SP.PrdSchDiscAmount/SP.BaseQty)AS NUMERIC(18,6)) Schdisc
	INTO #BillingDetails
	FROM SalesInvoice S (NOLOCK)
	INNER JOIN SalesInvoiceProduct SP (NOLOCK) ON S.SalId = SP.SalId
	INNER JOIN ProductBatch B (NOLOCK) ON SP.PrdId  = B.PrdId AND SP.PrdBatId = B.PrdBatId
	WHERE S.DlvSts > 3 AND S.SalInvDate BETWEEN @FromDate AND @ToDate
	--AND EXISTS (SELECT 'C' FROM UploadingReportTransaction FP (NOLOCK) WHERE FP.TransDate = S.SalInvDate)
	
	SELECT S.ReturnID,S.ReturnCode,S.ReturnDate,S.RtrId,SP.PrdId,SP.PrdBatId,-1 * SP.BaseQty BaseQty,SP.PrdUnitMRP MRP,
	CASE SP.SplPriceid WHEN 0 THEN 0 ELSE  SP.Priceid END AS  Priceid,SP.SlNo,SP.PrdEditSelRte,B.DefaultPriceId,
	Cast((SP.PrdSchDisAmt/Sp.BaseQty) AS NUMERIC(18,6)) RtnSchdisc
	INTO #ReturnDetails
	FROM ReturnHeader S (NOLOCK)
	INNER JOIN ReturnProduct SP (NOLOCK) ON S.ReturnID = SP.ReturnID AND  SP.StockTypeId IN (SELECT StockTypeId FROM StockType WHERE SystemStockType = 1)
	INNER JOIN ProductBatch B (NOLOCK) ON SP.PrdId  = B.PrdId AND SP.PrdBatId = B.PrdBatId
	WHERE S.Status = 0 AND S.ReturnDate BETWEEN @FromDate AND @ToDate
	--AND EXISTS (SELECT 'C' FROM UploadingReportTransaction FP (NOLOCK) WHERE FP.TransDate = S.ReturnDate)
	SELECT Salid,RTRid,Schid,PrdId INTO #SalScheme FROM (
	Select Distinct SI.Salid,RTRid,Schid,PrdId from Salesinvoice SI(NOLOCK) INNER JOIN SalesInvoiceSchemeLineWise SH(NOLOCK) ON SI.Salid=SH.Salid
	WHERE Salinvdate between @FromDate AND @ToDate and Dlvsts in (4,5)
	UNION 
	Select Distinct SI.Salid,RTRid,SH.Schid,SIB.prdid from Salesinvoice SI(NOLOCK) INNER JOIN SalesInvoiceSchemeDtFreePrd SH(NOLOCK) ON SI.Salid=SH.Salid
	INNER JOIN SalesInvoiceSchemeDtBilled SIB (NOLOCK) ON SIB.SalId =Si.SalId
	WHERE Salinvdate between @FromDate AND @ToDate and Dlvsts in (4,5)
	)A
	
	SELECT ReturnId,RTRid,Schid,PrdId INTO #RtnScheme FROM (
	Select Distinct A.Returnid,RTRid,Schid,PrdId FROM ReturnSchemeLineDt A WITH (NOLOCK) INNER JOIN ReturnHeader B WITH (NOLOCK) ON A.ReturnId = B.ReturnId
	WHERE ReturnDate between @FromDate AND @ToDate and B.Status = 0  
	UNION
	Select Distinct A.Returnid,RTRid,Schid,0 As Prdid FROM ReturnSchemeFreePrdDt A WITH (NOLOCK) INNER JOIN ReturnHeader B WITH (NOLOCK) ON A.ReturnId = B.ReturnId
	WHERE ReturnDate between @FromDate AND @ToDate and B.Status = 0  
	)A
	--------------- Till Here --------------
 	SELECT Salid,RTRid, Schid,A.Prdid INTO #SalSchemeProducts FROM
	 (
		SELECT DISTINCT Salid,RTRid,A.Schid,B.Prdid FROM #SalScheme A(NOLOCK)
		INNER JOIN SchemeProducts B(NOLOCK) ON A.Schid = B.Schid
		INNER JOIN Product C(NOLOCK) On B.Prdid = C.PrdId
		INNER JOIN Schememaster SM (Nolock) ON SM.schid =B.schid WHERE SM.Claimable =1 AND A.PrdId =C.PrdId  --- Added By Lakshman  M on 21/06/2018 PMS ID:ILCRSTPAR1100
		UNION
		SELECT DISTINCT Salid,RTRid,A.Schid, E.Prdid FROM #SalScheme A(NOLOCK)
		INNER JOIN SchemeProducts B (NOLOCK)ON A.Schid = B.Schid
		INNER JOIN ProductCategoryValue C (NOLOCK) ON 
		B.PrdCtgValMainId = C.PrdCtgValMainId 
		INNER JOIN ProductCategoryValue D(NOLOCK) ON
		D.PrdCtgValLinkCode LIKE Cast(c.PrdCtgValLinkCode as nvarchar(1000)) + '%'
		INNER JOIN Product E(NOLOCK) On
		D.PrdCtgValMainId = E.PrdCtgValMainId 
		INNER JOIN ProductBatch F(NOLOCK) On
		F.PrdId = E.Prdid
		INNER JOIN Schememaster SM (Nolock) ON SM.schid =B.schid WHERE SM.Claimable =1 AND A.PrdId =E.PrdId --- Added By Lakshman  M on 21/06/2018 PMS ID:ILCRSTPAR1100
	)A --INNER JOIN #FilterProduct B ON A.PrdId = B.Prdid 
	
	 	SELECT DISTINCT ReturnId,RTRid,Schid,A.Prdid INTO #RtnSchemeProducts FROM
		(
		SELECT DISTINCT ReturnId,RTRid,A.Schid, B.Prdid FROM #RtnScheme A
		INNER JOIN SchemeProducts B(NOLOCK) ON A.Schid = B.Schid
		INNER JOIN Product C(NOLOCK) On B.Prdid = C.PrdId
		INNER JOIN Schememaster SM (Nolock) ON SM.schid =B.schid WHERE SM.Claimable =1 --- Added By Lakshman  M on 21/06/2018 PMS ID:ILCRSTPAR1100
		UNION
		SELECT DISTINCT ReturnId,RTRid,A.Schid, E.Prdid FROM #RtnScheme A
		INNER JOIN SchemeProducts B(NOLOCK) ON A.Schid = B.Schid
		INNER JOIN ProductCategoryValue C(NOLOCK) ON 
		B.PrdCtgValMainId = C.PrdCtgValMainId 
		INNER JOIN ProductCategoryValue D(NOLOCK) ON
		D.PrdCtgValLinkCode LIKE Cast(c.PrdCtgValLinkCode as nvarchar(1000)) + '%'
		INNER JOIN Product E(NOLOCK) On
		D.PrdCtgValMainId = E.PrdCtgValMainId 
		INNER JOIN ProductBatch F(NOLOCK) On
		F.PrdId = E.Prdid
		INNER JOIN Schememaster SM (Nolock) ON SM.schid =B.schid WHERE SM.Claimable =1 AND A.PrdId =E.PrdId--- Added By Lakshman  M on 21/06/2018 PMS ID:ILCRSTPAR1100
	)A --INNER JOIN #FilterProduct B ON A.PrdId = B.Prdid 
	
	
	-- Added by Amuthakumar on 17/09/2018 CRCRSTPAR0021
	EXEC Proc_ReturnSalesProductTaxPercentage  @FromDate,@ToDate
	
	SELECT * INTO #ParleOutputTaxPercentage
	FROM ParleOutputTaxPercentage (NOLOCK)	
	--- Till Here
	
	------------- Added By Lakshman M On 22/06/2018 PMS ID: ILCRSTPAR1100
	INSERT INTO #RtnSchemeProducts(ReturnId,RTRid,SchId,PrdId)
	SELECT ReturnId,RTRid,B.Schid,C.PrdId FROM SchemeMasterControlHistory A INNER JOIN SchemeMaster B ON A.CmpSchCode = B.CmpSchCode
	INNER JOIN Product C ON c.PrdCCode = A.FromValue
	INNER JOIN #RtnScheme RS (NOLOCK) ON RS.SchId =B.SchId 
	WHERE ChangeType='Remove' AND B.SchId in (SELECT SchId FROM SchemeProducts Where PrdCtgValMainId = 0)
	------------- PMS ID: ILCRSTPAR1325 ------------
	INSERT INTO #SalSchemeProducts(SalId ,RTRid,SchId,PrdId)
	SELECT salid,RTRid,B.Schid,C.PrdId FROM SchemeMasterControlHistory A INNER JOIN SchemeMaster B ON A.CmpSchCode = B.CmpSchCode
	INNER JOIN Product C ON c.PrdCCode = A.FromValue
	INNER JOIN #SalScheme RS (NOLOCK) ON RS.SchId =B.SchId 
	WHERE ChangeType='Remove' AND B.SchId in (SELECT SchId FROM SchemeProducts Where PrdCtgValMainId = 0)
    ---------------- Till Here --------------
	INSERT INTO #RtnSchemeProducts(ReturnId,RTRid,SchId,PrdId)		
	SELECT DISTINCT RS.ReturnID,RS.RtrId ,A.SchId,E.Prdid
	FROM SchemeMaster A
	INNER JOIN SchemeMasterControlHistory B ON A.CmpSchCode = B.CmpSchCode
	INNER JOIN ProductCategoryValue C ON 
	B.FromValue = C.PrdCtgValCode
	INNER JOIN ProductCategoryValue D ON
	D.PrdCtgValLinkCode LIKE Cast(c.PrdCtgValLinkCode as nvarchar(1000)) + '%'
	INNER JOIN Product E On
	D.PrdCtgValMainId = E.PrdCtgValMainId 
	INNER JOIN ProductBatch F On
	F.PrdId = E.Prdid
	INNER JOIN #RtnScheme RS (NOLOCK) ON RS.SchId =A.SchId 
	WHERE A.SchemeLvlMode = 0  AND A.SchId in (SELECT SchId FROM SchemeProducts Where PrdId = 0 )
	AND ChangeType='Remove'
	----------------- Added By Lakshman M ON Dated: 30/10/2018 PMS ID: ILCRSTPAR2458 ---------------
	INSERT INTO #SalSchemeProducts(SalId ,RTRid,SchId,PrdId)	
	SELECT DISTINCT RS.SalId,RS.RtrId ,A.SchId,E.Prdid
	FROM SchemeMaster A
	INNER JOIN SchemeMasterControlHistory B ON A.CmpSchCode = B.CmpSchCode
	INNER JOIN ProductCategoryValue C ON 
	B.FromValue = C.PrdCtgValCode
	INNER JOIN ProductCategoryValue D ON
	D.PrdCtgValLinkCode LIKE Cast(c.PrdCtgValLinkCode as nvarchar(1000)) + '%'
	INNER JOIN Product E On
	D.PrdCtgValMainId = E.PrdCtgValMainId 
	INNER JOIN ProductBatch F On
	F.PrdId = E.Prdid
	INNER JOIN #SalScheme RS (NOLOCK) ON RS.SchId =A.SchId 
	WHERE A.SchemeLvlMode = 0  AND A.SchId in (SELECT SchId FROM SchemeProducts Where PrdId = 0 )
	AND ChangeType='Remove'
	----------- till here -------------
	------------ Till Here ----------------------
	
	SELECT DISTINCT TransType,RtrId,SalId,TransDate,PrdId,PrdBatId,BaseQty TotalPCS,MRP,PriceId,SlNo,[SellRate],DefaultPriceId,SchDisc,Type,
	CAST(0 AS NUMERIC(18,6))[ActualSellRate],CAST(0 AS NUMERIC(18,6))[SpecialSellRate],
	CAST(0 AS NUMERIC(18,6)) NrmlLCTR, CAST(0 AS NUMERIC(18,6)) NrmlSecSalesTOT, CAST(0 AS NUMERIC(18,6)) TOTDifClms
	, CAST(0 AS NUMERIC(18,6)) OfferLCTR, CAST(0 AS NUMERIC(18,6)) OffSecSalesTOT, CAST(0 AS NUMERIC(18,6)) TotOffSalesChain,
	 CAST(0 AS NUMERIC(18,6)) OffClmDiff
	INTO #MTSalesDetails
	FROM 
	(
	SELECT DISTINCT 1 TransType,A.RtrId,A.SalId,SalInvDate TransDate,A.PrdId,A.PrdBatId,BaseQty,MRP,PriceId,SlNo,PrdUom1EditedSelRate [SellRate],DefaultPriceId,
	SchDisc,CASE ISNULL(B.Salid,0) WHEN 0 THEN 'NS' ELSE 'S' END AS Type
	FROM #BillingDetails A(NOLOCK)
	LEFT OUTER JOIN #SalSchemeProducts B(NOLOCK) ON A.Salid = B.salid AND A.Prdid=B.Prdid AND A.Rtrid =B.Rtrid
	UNION ALL
	SELECT  DISTINCT 2 TransType,A.RtrId,A.ReturnID,ReturnDate TransDate,A.PrdId,A.PrdBatId, BaseQty,MRP,PriceId,SlNo,PrdEditSelRte,DefaultPriceId,
	RtnSchDisc,CASE ISNULL(B.ReturnID,0) WHEN 0 THEN 'NS' ELSE 'S' END AS Type
	FROM #ReturnDetails A(NOLOCK)
	LEFT OUTER JOIN #RtnSchemeProducts B(NOLOCK) ON A.Returnid = B.Returnid AND A.Prdid=B.Prdid AND A.Rtrid =B.Rtrid
	) A
		
	DECLARE @SlNo AS INT
	SELECT @SlNo = SlNo FROM BatchCreation (NOLOCK) WHERE FieldDesc = 'Selling Price'
	-- Added by Amuthakumar on 17/09/2018 CRCRSTPAR0021
	
	--UPDATE R SET ActualSellRate = R.[SellRate] + (R.[SellRate]*(T.TaxPerc/100))
	--FROM #MTSalesDetails R (NOLOCK),
	--#ParleOutputTaxPercentage T (NOLOCK)
	--WHERE R.TransType = T.TransId AND R.SalId = T.Salid AND R.Slno = T.PrdSlno	
	
	-- Commented by Amuthakumar CRCRSTPAR0021
	--UPDATE A SET ActualSellRate = C.PrdBatDetailValue FROM #MTSalesDetails A INNER JOIN ProductBatch B ON A.Prdid = B.PrdId AND A.Prdbatid = B.PrdBatId
	--INNER JOIN ProductBatchDetails C ON B.DefaultPriceid = C.PriceId  AND C.SLNo = @SlNo
	--- Till Here 
	--ADDED BY MOHANA ILCRSTPAR2313
	UPDATE A SET ActualSellRate = C.PrdBatDetailValue  + (C.PrdBatDetailValue *(T.TaxPerc/100)),
	A.SchDisc =  A.SchDisc  + (A.SchDisc *(T.TaxPerc/100))  FROM #MTSalesDetails A 
	INNER JOIN ProductBatch B ON A.Prdid = B.PrdId AND A.Prdbatid = B.PrdBatId
	INNER JOIN 	ProductBatchDetails C ON B.DefaultPriceid = C.PriceId  AND C.SLNo = 3
	INNER JOIN #ParleOutputTaxPercentage T ON A.TransType = T.TRANSID AND A.SALID =T.SALID AND A.SLNO=T.PRDSLNO

	SELECT A.SalId ,A.PrdId,A.PrdBatid,A.TransType,A.Slno,SplRate INTO #Sales  FROM #MTSalesDetails A  
	INNER JOIN SalesInvoiceProduct B ON A.Salid = B.Salid AND A.Prdid =B.PrdId AND A.PrdBatid = B.PrdBatId AND A.Slno = B.SlNo AND TransType = 1
	AND SplRate>0
 
	SELECT  A.SalId ,A.PrdId,A.PrdBatid,A.TransType,A.Slno,SplRate INTO #Return FROM #MTSalesDetails A  
	INNER JOIN ReturnHeader B ON A.SalId = B.ReturnID AND TransType = 2 
	INNER JOIN ReturnProduct C ON C.ReturnID = B.ReturnID 
	INNER JOIN SalesInvoiceProduct D ON B.Salid = D.Salid AND D.Prdid =C.PrdId AND D.PrdBatid = C.PrdBatId AND D.SLNO = C.ActSalRowId  AND SplRate>0


	--SELECT DISTINCT Priceid,PrdBatDetailValue  INTO #SpecialPrice FROM
	--(
	--SELECT D.PriceId,D.PrdBatDetailValue 
	--FROM #MTSalesDetails M (NOLOCK),
	--ProductBatchDetails D (NOLOCK) 
	--WHERE M.PriceId = D.PriceId AND D.SLNo = @SlNo
	--AND PriceCode LIKE '%-Spl Rate-%'   
	--UNION 
	--SELECT D.PriceId,D.PrdBatDetailValue 
	--FROM #MTSalesDetails M (NOLOCK),
	--ProductBatchDetails D (NOLOCK) 
	--WHERE M.PriceId = D.PriceId AND D.SLNo = @SlNo
	--AND PriceCode LIKE '%SplRate%'  
	--)A
	
	--UPDATE M SET M.[SpecialSellRate] = D.PrdBatDetailValue
	--FROM #MTSalesDetails M (NOLOCK),
	--#SpecialPrice D (NOLOCK) 
	--WHERE M.PriceId = D.PriceId  
	
	--ADDED BY MOHANA ILCRSTPAR2313
	--UPDATE M SET M.[SpecialSellRate] = D.PrdBatDetailValue+ (D.PrdBatDetailValue*(T.TaxPerc/100))
	--FROM #MTSalesDetails M (NOLOCK),
	--#SpecialPrice D (NOLOCK),
	--#ParleOutputTaxPercentage T (NOLOCK)
	--WHERE M.TransType = T.TransId AND M.SalId = T.Salid AND M.Slno = T.PrdSlno	AND M.PriceId = D.PriceId  
	

	
	UPDATE M SET M.[SpecialSellRate] = D.SplRate + (D.SplRate*(T.TaxPerc/100))
	FROM #MTSalesDetails M (NOLOCK),
	#Sales D (NOLOCK), 
	#ParleOutputTaxPercentage T (NOLOCK)
	WHERE M.TransType = T.TransId AND M.SalId = T.Salid AND M.Slno = T.PrdSlno AND M.PrdId = D.PrdId AND M.TransType = D.TransType 
	AND D.slno = T.PrdSlno AND D.salid = T.Salid AND T.TransId = D.TransType 
	
	UPDATE M SET M.[SpecialSellRate] = D.SplRate + (D.SplRate*(T.TaxPerc/100))
	FROM #MTSalesDetails M (NOLOCK),
	#Return D (NOLOCK), 
	#ParleOutputTaxPercentage T (NOLOCK)
	WHERE M.TransType = T.TransId AND M.SalId = T.Salid AND M.Slno = T.PrdSlno AND M.PrdId = D.PrdId AND M.TransType = D.TransType 
	AND D.slno = T.PrdSlno AND D.salid = T.Salid AND T.TransId = D.TransType 
	
	
	--Non Scheme
	UPDATE A SET NrmlLCTR = TotalPcs*ActualSellrate FROM #MTSalesDetails A(NOLOCK) WHERE Type='NS'
		
	UPDATE A SET NrmlSecSalesTot = ( CASE SpecialSellRate WHEN 0 THEN (TotalPcs*ActualSellrate) ELSE (TotalPcs*SpecialSellRate) END )
	FROM #MTSalesDetails A(NOLOCK) WHERE Type='NS'
	
	UPDATE A SET TotDifClms  = NrmlLCTR-NrmlSecSalesTot FROM #MTSalesDetails A(NOLOCK) WHERE Type='NS'
	--Scheme
	
	UPDATE A SET OfferLCTR = TotalPcs*ActualSellrate FROM #MTSalesDetails A(NOLOCK) WHERE Type='S'
		
	UPDATE A SET OffSecSalesTOT = ( CASE SpecialSellRate WHEN 0 THEN (TotalPcs*ActualSellrate) ELSE (TotalPcs*SpecialSellRate) END )
	FROM #MTSalesDetails A(NOLOCK) WHERE Type='S'
	
	
	UPDATE A SET TotOffSalesChain =  ( CASE SpecialSellRate WHEN 0 THEN (TotalPcs*(ActualSellrate-SchDisc)) ELSE (TotalPcs*(SpecialSellRate-SchDisc)) END )
	FROM #MTSalesDetails A(NOLOCK) WHERE Type='S'
	
	UPDATE A SET OffClmDiff = OfferLCTR-TotOffSalesChain FROM #MTSalesDetails A(NOLOCK) WHERE Type='S'
	SELECT D.RtrId,TransDate,SUM(NrmlLCTR) NrmlLCTR,SUM(NrmlSecSalesTOT) NrmlSecSalesTOT,SUM(TOTDifClms) TOTDifClms,SUM(OfferLCTR) OfferLCTR,
	SUM(OffSecSalesTOT) OffSecSalesTOT,	SUM(OffClmDiff) OffClmDiff,SUM(TotOffSalesChain) TotOffSalesChain,	CAST(0 AS NUMERIC(18,6)) LIABNormalSale,
	CAST(0 AS NUMERIC(18,6)) OffLIABValue,CAST(0 AS NUMERIC(18,6)) TotalSales,CAST(0 AS NUMERIC(18,6)) LIABOffClmWITHOUTTOT,
	CAST(0 AS NUMERIC(18,6)) LIABOffClmTotalSale,CAST(0 AS NUMERIC(18,6)) GrandTotClm,
	CAST(0 AS NUMERIC(18,6)) TOTALLIAB ,CAST(0 AS NUMERIC(18,6)) TotSalTOChain,CAST(0 AS NUMERIC(18,6)) OffLIABTtotalSales,CAST(0 AS NUMERIC(18,6)) TOTLiabTotal
	INTO #MTFinal
	FROM #MTSalesDetails D (NOLOCK) INNER JOIN #FilterRetailer B ON D.Rtrid = B.Rtrid 
	GROUP BY  D.RtrId,TransDate
	
	UPDATE A SET LIABNormalSale = (TotDifClms/NrmlLCTR)*100  FROM #MTFinal A(NOLOCK)  WHERE NrmlLCTR>0
	UPDATE A SET OffLiabvalue = OffSecSalesTOT-TotOffSalesChain  FROM #MTFinal A(NOLOCK) 
	 
	UPDATE A SET TotalSales = OfferLCTR+NrmlLCTR FROM #MTFinal A(NOLOCK) 
		
	UPDATE A SET LIABOffClmWITHOUTTOT = (OffLiabvalue/OfferLCTR)*100 FROM #MTFinal A(NOLOCK) WHERE OfferLCTR>0
	
	UPDATE A SET LIABOffClmTotalSale  = (OffClmDiff/OfferLCTR)*100  FROM #MTFinal A(NOLOCK)     WHERE OfferLCTR>0
		
	UPDATE A SET GrandTotClm  = 	(OffClmDiff+TotDifClms)   FROM #MTFinal A(NOLOCK) 
		
	UPDATE A SET TOTALLIAB  = 	(GrandTotClm/TotalSales)*100   FROM #MTFinal A(NOLOCK) WHERE [TotalSales] > 0	
	
	UPDATE A SET TotsaltoChain  = NrmlSecsalesTOT+ TotOffSalesChain    FROM #MTFinal A(NOLOCK) 	
	
	UPDATE A SET OffLIABTtotalSales  = 	(OffLIABValue/TotalSales)*100   FROM #MTFinal A(NOLOCK) WHERE [TotalSales] > 0
	
	UPDATE A SET TOTLiabTotal  = 	((GrandTotClm-OffLIABValue)/TotalSales)*100   FROM #MTFinal A(NOLOCK)  WHERE [TotalSales] > 0
	
	INSERT INTO Cs2Cn_Prk_MTDebitSummary(dISTcODE,TransDate,CmpRtrCode,TotalLCTR,SalesTOT,ClaimDiff,LiabSales,TotalOffLCTR,OffTOT,
	TotalOff,OffClaimDiff,LiabOff,TotalSales,TotSalTOChain,GrandTotClm,LiabWOTOT,LiabTOT,OffLIABTtotalSales,TOTLiabTotal,TotalLiab,UploadFlag ---- Added By Lakshman M PMS ID: ILCRSTPAR1233
	)
	SELECT @DistCode,TransDate,B.CmpRtrCode,NrmlLCTR AS NrmlLCTR,NrmlSecSalesTOT AS NrmlSecSalesTOT,ROUND(TOTDifClms,2,1) TOTDifClms,
	ROUND(LIABNormalSale,2,1) LIABNormalSale,	ROUND(OfferLCTR,2,1) OfferLCTR,ROUND(OffSecSalesTOT,2,1) OffSecSalesTOT,
	ROUND(TotOffSalesChain,2,1) TotOffSalesChain,ROUND(OffClmDiff,2,1) OffClmDiff,
	ROUND(OffLIABValue,2,1) OffLIABValue,ROUND(TotalSales,2,1) TotalSales,ROUND(TotSalTOChain,2,1) TotSalTOChain,ROUND(GrandTotClm,2,1) GrandTotClm,
	ROUND(LIABOffClmWITHOUTTOT,2,1) LIABOffClmWITHOUTTOT,ROUND(LIABOffClmTotalSale,2,1) LIABOffClmTotalSale,ROUND(OffLIABTtotalSales,2,1) OffLIABTtotalSales,
	ROUND(TOTLiabTotal,2,1) TOTLiabTotal,ROUND(TOTALLIAB,2,1) TOTALLIAB,'N'
	FROM #MTFinal A
	INNER JOIN Retailer B ON A.Rtrid  = B.RtrId
	--INNER JOIN Product C ON A.Prdid = C.Prdid 
	
	UPDATE Cs2Cn_Prk_MTDebitSummary SET ServerDate=@ServerDate  --- Added By Lakshman M PMS ID: ILCRSTPAR1233	
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_RptMTDebitSummary_withTax' AND TYPE='P')
DROP PROCEDURE Proc_RptMTDebitSummary_withTax
GO
/*
BEGIN TRAN
EXEC Proc_RptMTDebitSummary_withTax 288,2,0,'',0,0,1
ROLLBACK TRAN
*/
CREATE PROCEDURE Proc_RptMTDebitSummary_withTax
(
	@Pi_RptId			INT,
	@Pi_UsrId			INT,
	@Pi_SnapId			INT,
	@Pi_DbName			NVARCHAR(50),
	@Pi_SnapRequired	INT,
	@Pi_GetFromSnap		INT,
	@Pi_CurrencyId		INT
)
AS
/**************************************************************************************************
* PROCEDURE	: Proc_RptMTDebitSummary_withTax
* PURPOSE	: To Return the Trade Promotion Report 
* CREATED	: Mohana -- ICRSTPAR7809
* CREATED DATE	: 28-02-2018 
* NOTE		: Parle SP for Trade Promotion Reports
* MODIFIED 
* DATE       AUTHOR		   CR/BZ	USER STORY ID           DESCRIPTION                         
***************************************************************************************************
21-06-2018  Lakshman M		BZ     ILCRSTPAR1100         Return stock type validation added in core stocky 
22-06-2018  Lakshman M		BZ     ILCRSTPAR1100         scheme master control history change type remove validation added In CS.
26-06-2018  Lakshman M		BZ     ILCRSTPAR1151         scheme products taken form sales details
17-09-2018  Amuthakumar P	CR     CRCRSTPAR0021         Promotion claim should be calculating with tax	
09-10-2018  Mohana P		BZ     ILCRSTPAR2313	     TAX CALCULATION CHANGED AS PER CLIENT REQUEST
29-10-2018  Lakshman M      BZ     ILCRSTPAR2427         As per client request scheme and nonscheme product & category wise scheme discount validation added in CS.
15-05-2020	  MOHANA S	   CR	   PARCS202100013		CATEGORY TAKEN BASED ON TRANSACTION		
31-03-2020		MOHANA S     CR   PARCS202100002  Contract Pricing Optimization	
***************************************************************************************************/  
BEGIN
	SET NOCOUNT ON
	
	DECLARE @FromDate			AS	DATETIME
	DECLARE @ToDate				AS	DATETIME
	DECLARE @CmpId				AS  INT 
	DECLARE @CtgLevelId			AS  INT  
	DECLARE @CtgMainId			AS  INT	
	DECLARE @CmpPrdCtgId		AS INT
	DECLARE @PrdCtgValMainId	AS INT	
	
	SELECT @FromDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,10,@Pi_UsrId)
	SELECT @ToDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,11,@Pi_UsrId)
	SET @CmpId =(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId))  
	
	SET @CtgLevelId =(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,29,@Pi_UsrId))    
	SET @CtgMainId=(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,30,@Pi_UsrId))
	SET @CmpPrdCtgId = (SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,16,@Pi_UsrId))
	SET @PrdCtgValMainId = (SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,21,@Pi_UsrId))
	
	--To Filter Retailers
	--SELECT DISTINCT R.RtrId,RC.CtgCode,RC.CtgName
	--INTO #FilterRetailer
	--FROM Retailer R (NOLOCK),
	--RetailerValueClassMap RVCM (NOLOCK),
	--RetailerValueClass RVC (NOLOCK),
	--RetailerCategory RC (NOLOCK),
	--RetailerCategoryLevel RCL (NOLOCK)	
	--WHERE R.Rtrid = RVCM.RtrId AND RVCM.RtrValueClassId = RVC.RtrClassId
	--AND  RVC.CtgMainId=RC.CtgMainId AND  RCL.CtgLevelId=RC.CtgLevelId
	--AND RC.CtgLinkId NOT IN (SELECT CtgMainId FROM RetailerCategory WHERE CtgCode='GT')
	--AND (RVC.CmpId=(CASE @CmpId WHEN 0 THEN RVC.CmpId ELSE 0 END) OR
	--RVC.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId)))
	--AND (RCL.CtgLevelId=(CASE @CtgLevelId WHEN 0 THEN RCL.CtgLevelId ELSE 0 END) OR  
	--RCL.CtgLevelId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,29,@Pi_UsrId)))
	--AND (RC.CtgMainId=(CASE @CtgMainId WHEN 0 THEN RC.CtgMainId ELSE 0 END) OR  
	--RC.CtgMainId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,30,@Pi_UsrId)))
	--To Filter Retailers
	SELECT DISTINCT R.RtrId,RC.CtgCode,RC.CtgName,RtrValueClassId 
	INTO #FilterRetailer
	FROM Retailer R (NOLOCK),
	Salesinvoice S (NOLOCK),
	RetailerValueClass RVC (NOLOCK),
	RetailerCategory RC (NOLOCK),
	RetailerCategoryLevel RCL (NOLOCK)
	WHERE R.Rtrid = S.RtrId AND S.RtrValueClassId = RVC.RtrClassId
	AND  RVC.CtgMainId=RC.CtgMainId AND  RCL.CtgLevelId=RC.CtgLevelId
	AND SalInvDate BETWEEN @FromDate AND @ToDate AND DlvSts>3
	AND RC.CtgLinkId NOT IN (SELECT CtgMainId FROM RetailerCategory WHERE CtgCode='GT')
	AND (RVC.CmpId=(CASE @CmpId WHEN 0 THEN RVC.CmpId ELSE 0 END) OR
	RVC.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId)))
	AND (RCL.CtgLevelId=(CASE @CtgLevelId WHEN 0 THEN RCL.CtgLevelId ELSE 0 END) OR  
	RCL.CtgLevelId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,29,@Pi_UsrId)))
	AND (RC.CtgMainId=(CASE @CtgMainId WHEN 0 THEN RC.CtgMainId ELSE 0 END) OR  
	RC.CtgMainId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,30,@Pi_UsrId)))
	--To Filter Retailers
	
	--To Filter Products
	SELECT DISTINCT E.PrdId,E.PrdType
	INTO #FilterProduct
	FROM ProductCategoryValue C (NOLOCK)
	INNER JOIN ProductCategoryValue D (NOLOCK) ON
	D.PrdCtgValLinkCode LIKE Cast(C.PrdCtgValLinkCode AS NVARCHAR(1000)) + '%'
	INNER JOIN Product E (NOLOCK) ON D.PrdCtgValMainId = E.PrdCtgValMainId
	INNER JOIN ProductCategoryLevel L (NOLOCK) ON L.CmpPrdCtgId = C.CmpPrdCtgId
	WHERE 	
	(L.CmpId=(CASE @CmpId WHEN 0 THEN L.CmpId ELSE 0 END) OR
	L.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId)))	AND 
	(L.CmpPrdCtgId = (CASE @CmpPrdCtgId  WHEN 0 THEN L.CmpPrdCtgId ELSE 0 END) OR
	L.CmpPrdCtgId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,16,@Pi_UsrId)))
	AND (C.PrdCtgValMainId = (CASE @PrdCtgValMainId  WHEN 0 THEN C.PrdCtgValMainId ELSE 0 END) OR 
	C.PrdCtgValMainId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId ,21, @Pi_UsrId)))
	--To Filter Products
	
	-- Added by Amuthakumar on 17/09/2018 CRCRSTPAR0021
	EXEC Proc_ReturnSalesProductTaxPercentage  @FromDate,@ToDate
	
	SELECT * INTO #ParleOutputTaxPercentage
	FROM ParleOutputTaxPercentage (NOLOCK)	
	--- Till Here
	SELECT S.SalId,S.SalInvNo,S.SalInvDate,S.RtrId,SP.PrdId,SP.PrdBatId,SP.BaseQty BaseQty,SP.PrdUnitMRP MRP,
	CASE SP.SplPriceid WHEN 0 THEN 0 ELSE  SP.Priceid END AS Priceid ,SP.SlNo,SP.PrdUom1EditedSelRate,
	B.DefaultPriceId,Cast((SP.PrdSchDiscAmount/SP.BaseQty)AS NUMERIC(18,6)) Schdisc,S.RtrValueClassId
	INTO #BillingDetails
	FROM SalesInvoice S (NOLOCK)
	INNER JOIN SalesInvoiceProduct SP (NOLOCK) ON S.SalId = SP.SalId
	INNER JOIN ProductBatch B (NOLOCK) ON SP.PrdId  = B.PrdId AND SP.PrdBatId = B.PrdBatId
	WHERE SalInvDate BETWEEN @FromDate AND @ToDate AND S.DlvSts > 3
	AND EXISTS (SELECT 'C' FROM #FilterRetailer FR (NOLOCK) WHERE S.RtrId = FR.RtrId)
	AND EXISTS (SELECT 'C' FROM #FilterProduct FP (NOLOCK) WHERE SP.PrdId = FP.PrdId)
	
	
	SELECT S.ReturnID,S.ReturnCode,S.ReturnDate,S.RtrId,SP.PrdId,SP.PrdBatId,-1 * SP.BaseQty BaseQty,SP.PrdUnitMRP MRP,
	CASE SP.SplPriceid WHEN 0 THEN 0 ELSE  SP.Priceid END AS  Priceid,SP.SlNo,SP.PrdEditSelRte,B.DefaultPriceId,
	Cast((SP.PrdSchDisAmt/Sp.BaseQty) AS NUMERIC(18,6)) RtnSchdisc,S.RtrValueClassId
	INTO #ReturnDetails
	FROM ReturnHeader S (NOLOCK)
	INNER JOIN ReturnProduct SP (NOLOCK) ON S.ReturnID = SP.ReturnID AND  SP.StockTypeId IN (SELECT StockTypeId FROM StockType WHERE SystemStockType = 1)
	INNER JOIN ProductBatch B (NOLOCK) ON SP.PrdId  = B.PrdId AND SP.PrdBatId = B.PrdBatId
	WHERE ReturnDate BETWEEN @FromDate AND @ToDate AND S.Status = 0
	AND EXISTS (SELECT 'C' FROM #FilterRetailer FR (NOLOCK) WHERE S.RtrId = FR.RtrId)
	AND EXISTS (SELECT 'C' FROM #FilterProduct FP (NOLOCK) WHERE SP.PrdId = FP.PrdId)
	--------------- Added by LAkshman M On 26/06/2018 PMS ID: ILCRSTPAR1151 ----------------------
	SELECT Salid,RTRid,Schid,PrdId INTO #SalScheme FROM (
	Select Distinct SI.Salid,RTRid,Schid,PrdId from Salesinvoice SI(NOLOCK) INNER JOIN SalesInvoiceSchemeLineWise SH(NOLOCK) ON SI.Salid=SH.Salid
	WHERE Salinvdate between @FromDate AND @ToDate and Dlvsts in (4,5)
	UNION 
	Select Distinct SI.Salid,RTRid,SH.Schid,SIB.prdid from Salesinvoice SI(NOLOCK) INNER JOIN SalesInvoiceSchemeDtFreePrd SH(NOLOCK) ON SI.Salid=SH.Salid
	INNER JOIN SalesInvoiceSchemeDtBilled SIB (NOLOCK) ON SIB.SalId =Si.SalId
	WHERE Salinvdate between @FromDate AND @ToDate and Dlvsts in (4,5)
	)A
	
	
	SELECT ReturnId,RTRid,Schid,PrdId INTO #RtnScheme FROM (
	Select Distinct A.Returnid,RTRid,Schid,PrdId FROM ReturnSchemeLineDt A WITH (NOLOCK) INNER JOIN ReturnHeader B WITH (NOLOCK) ON A.ReturnId = B.ReturnId
	WHERE ReturnDate between @FromDate AND @ToDate and B.Status = 0  
	UNION
	Select Distinct A.Returnid,RTRid,Schid,0 As Prdid FROM ReturnSchemeFreePrdDt A WITH (NOLOCK) INNER JOIN ReturnHeader B WITH (NOLOCK) ON A.ReturnId = B.ReturnId
	WHERE ReturnDate between @FromDate AND @ToDate and B.Status = 0  
	)A
	--------------- Till Here --------------
 	SELECT Salid,RTRid, Schid,A.Prdid INTO #SalSchemeProducts FROM
	 (
		SELECT DISTINCT Salid,RTRid,A.Schid,B.Prdid FROM #SalScheme A(NOLOCK)
		INNER JOIN SchemeProducts B(NOLOCK) ON A.Schid = B.Schid
		INNER JOIN Product C(NOLOCK) On B.Prdid = C.PrdId
		INNER JOIN Schememaster SM (Nolock) ON SM.schid =B.schid WHERE SM.Claimable =1 AND A.PrdId =C.PrdId  --- Added By Lakshman  M on 21/06/2018 PMS ID:ILCRSTPAR1100
		UNION
		SELECT DISTINCT Salid,RTRid,A.Schid, E.Prdid FROM #SalScheme A(NOLOCK)
		INNER JOIN SchemeProducts B (NOLOCK)ON A.Schid = B.Schid
		INNER JOIN ProductCategoryValue C (NOLOCK) ON 
		B.PrdCtgValMainId = C.PrdCtgValMainId 
		INNER JOIN ProductCategoryValue D(NOLOCK) ON
		D.PrdCtgValLinkCode LIKE Cast(c.PrdCtgValLinkCode as nvarchar(1000)) + '%'
		INNER JOIN Product E(NOLOCK) On
		D.PrdCtgValMainId = E.PrdCtgValMainId 
		INNER JOIN ProductBatch F(NOLOCK) On
		F.PrdId = E.Prdid
		INNER JOIN Schememaster SM (Nolock) ON SM.schid =B.schid WHERE SM.Claimable =1 AND A.PrdId =E.PrdId --- Added By Lakshman  M on 21/06/2018 PMS ID:ILCRSTPAR1100
	)A INNER JOIN #FilterProduct B ON A.PrdId = B.Prdid 
	
	 	SELECT DISTINCT ReturnId,RTRid,Schid,A.Prdid INTO #RtnSchemeProducts FROM
		(
		SELECT DISTINCT ReturnId,RTRid,A.Schid, B.Prdid FROM #RtnScheme A
		INNER JOIN SchemeProducts B(NOLOCK) ON A.Schid = B.Schid
		INNER JOIN Product C(NOLOCK) On B.Prdid = C.PrdId
		INNER JOIN Schememaster SM (Nolock) ON SM.schid =B.schid WHERE SM.Claimable =1 --- Added By Lakshman  M on 21/06/2018 PMS ID:ILCRSTPAR1100
		UNION
		SELECT DISTINCT ReturnId,RTRid,A.Schid, E.Prdid FROM #RtnScheme A
		INNER JOIN SchemeProducts B(NOLOCK) ON A.Schid = B.Schid
		INNER JOIN ProductCategoryValue C(NOLOCK) ON 
		B.PrdCtgValMainId = C.PrdCtgValMainId 
		INNER JOIN ProductCategoryValue D(NOLOCK) ON
		D.PrdCtgValLinkCode LIKE Cast(c.PrdCtgValLinkCode as nvarchar(1000)) + '%'
		INNER JOIN Product E(NOLOCK) On
		D.PrdCtgValMainId = E.PrdCtgValMainId 
		INNER JOIN ProductBatch F(NOLOCK) On
		F.PrdId = E.Prdid
		INNER JOIN Schememaster SM (Nolock) ON SM.schid =B.schid WHERE SM.Claimable =1 AND A.PrdId =E.PrdId--- Added By Lakshman  M on 21/06/2018 PMS ID:ILCRSTPAR1100
	)A INNER JOIN #FilterProduct B ON A.PrdId = B.Prdid 
	
	------------- Added By Lakshman M On 22/06/2018 PMS ID: ILCRSTPAR1100
	INSERT INTO #RtnSchemeProducts(ReturnId,RTRid,SchId,PrdId)
	SELECT ReturnId,RTRid,B.Schid,C.PrdId FROM SchemeMasterControlHistory A INNER JOIN SchemeMaster B ON A.CmpSchCode = B.CmpSchCode
	INNER JOIN Product C ON c.PrdCCode = A.FromValue
	INNER JOIN #RtnScheme RS (NOLOCK) ON RS.SchId =B.SchId 
	WHERE ChangeType='Remove' AND B.SchId in (SELECT SchId FROM SchemeProducts Where PrdCtgValMainId = 0)
	INSERT INTO #SalSchemeProducts(SalId ,RTRid,SchId,PrdId)
	SELECT salid,RTRid,B.Schid,C.PrdId FROM SchemeMasterControlHistory A INNER JOIN SchemeMaster B ON A.CmpSchCode = B.CmpSchCode
	INNER JOIN Product C ON c.PrdCCode = A.FromValue
	INNER JOIN #SalScheme RS (NOLOCK) ON RS.SchId =B.SchId 
	WHERE ChangeType='Remove' AND B.SchId in (SELECT SchId FROM SchemeProducts Where PrdCtgValMainId = 0)
	----
	INSERT INTO #RtnSchemeProducts(ReturnId,RTRid,SchId,PrdId)		
	SELECT DISTINCT RS.ReturnID,RS.RtrId ,A.SchId,E.Prdid
	FROM SchemeMaster A
	INNER JOIN SchemeMasterControlHistory B ON A.CmpSchCode = B.CmpSchCode
	INNER JOIN ProductCategoryValue C ON 
	B.FromValue = C.PrdCtgValCode
	INNER JOIN ProductCategoryValue D ON
	D.PrdCtgValLinkCode LIKE Cast(c.PrdCtgValLinkCode as nvarchar(1000)) + '%'
	INNER JOIN Product E On
	D.PrdCtgValMainId = E.PrdCtgValMainId 
	INNER JOIN ProductBatch F On
	F.PrdId = E.Prdid
	INNER JOIN #RtnScheme RS (NOLOCK) ON RS.SchId =A.SchId 
	WHERE A.SchemeLvlMode = 0  AND A.SchId in (SELECT SchId FROM SchemeProducts Where PrdId = 0 )
	AND ChangeType='Remove'
	----------------- Added By Lakshman M ON Dated29/10/2018 PMS ID: ILCRSTPAR2458 ---------------
	INSERT INTO #SalSchemeProducts(SalId ,RTRid,SchId,PrdId)	
	SELECT DISTINCT RS.SalId,RS.RtrId ,A.SchId,E.Prdid
	FROM SchemeMaster A
	INNER JOIN SchemeMasterControlHistory B ON A.CmpSchCode = B.CmpSchCode
	INNER JOIN ProductCategoryValue C ON 
	B.FromValue = C.PrdCtgValCode
	INNER JOIN ProductCategoryValue D ON
	D.PrdCtgValLinkCode LIKE Cast(c.PrdCtgValLinkCode as nvarchar(1000)) + '%'
	INNER JOIN Product E On
	D.PrdCtgValMainId = E.PrdCtgValMainId 
	INNER JOIN ProductBatch F On
	F.PrdId = E.Prdid
	INNER JOIN #SalScheme RS (NOLOCK) ON RS.SchId =A.SchId 
	WHERE A.SchemeLvlMode = 0  AND A.SchId in (SELECT SchId FROM SchemeProducts Where PrdId = 0 )
	AND ChangeType='Remove'
	----------- till here -------------
	------------ Till Here ----------------------
	
	SELECT DISTINCT TransType,RtrId,SalId,TransDate,PrdId,PrdBatId,BaseQty TotalPCS,MRP,PriceId,SlNo,[SellRate],DefaultPriceId,SchDisc,Type,
	CAST(0 AS NUMERIC(18,6))[ActualSellRate],CAST(0 AS NUMERIC(18,6))[SpecialSellRate],
	CAST(0 AS NUMERIC(18,6)) NrmlLCTR, CAST(0 AS NUMERIC(18,6)) NrmlSecSalesTOT, CAST(0 AS NUMERIC(18,6)) TOTDifClms
	, CAST(0 AS NUMERIC(18,6)) OfferLCTR, CAST(0 AS NUMERIC(18,6)) OffSecSalesTOT, CAST(0 AS NUMERIC(18,6)) TotOffSalesChain,
	 CAST(0 AS NUMERIC(18,6)) OffClmDiff,RtrvalueClassId
	INTO #MTSalesDetails
	FROM 
	(
	SELECT DISTINCT 1 TransType,A.RtrId,A.SalId,SalInvDate TransDate,A.PrdId,A.PrdBatId,BaseQty,MRP,PriceId,SlNo,PrdUom1EditedSelRate [SellRate],DefaultPriceId,
	SchDisc,CASE ISNULL(B.Salid,0) WHEN 0 THEN 'NS' ELSE 'S' END AS Type,RtrvalueClassId
	FROM #BillingDetails A(NOLOCK)
	LEFT OUTER JOIN #SalSchemeProducts B(NOLOCK) ON A.Salid = B.salid AND A.Prdid=B.Prdid AND A.Rtrid =B.Rtrid
	UNION ALL
	SELECT  DISTINCT 2 TransType,A.RtrId,A.ReturnID,ReturnDate TransDate,A.PrdId,A.PrdBatId, BaseQty,MRP,PriceId,SlNo,PrdEditSelRte,DefaultPriceId,
	RtnSchDisc,CASE ISNULL(B.ReturnID,0) WHEN 0 THEN 'NS' ELSE 'S' END AS Type,RtrvalueClassId
	FROM #ReturnDetails A(NOLOCK)
	LEFT OUTER JOIN #RtnSchemeProducts B(NOLOCK) ON A.Returnid = B.Returnid AND A.Prdid=B.Prdid AND A.Rtrid =B.Rtrid
	) A
	
	
	-- Added by Amuthakumar on 17/09/2018 CRCRSTPAR0021
	
	--UPDATE R SET ActualSellRate = R.[SellRate] + (R.[SellRate]*(T.TaxPerc/100))
	--FROM #MTSalesDetails R (NOLOCK),
	--#ParleOutputTaxPercentage T (NOLOCK)
	--WHERE R.TransType = T.TransId AND R.SalId = T.Salid AND R.Slno = T.PrdSlno	
	
	-- Commented by Amuthakumar CRCRSTPAR0021
	--UPDATE A SET ActualSellRate = C.PrdBatDetailValue FROM #MTSalesDetails A INNER JOIN ProductBatch B ON A.Prdid = B.PrdId AND A.Prdbatid = B.PrdBatId
	--INNER JOIN 	ProductBatchDetails C ON B.DefaultPriceid = C.PriceId  AND C.SLNo = 3
	
	--- Till Here 

	--ADDED BY MOHANA ILCRSTPAR2313
	UPDATE A SET ActualSellRate = C.PrdBatDetailValue  + (C.PrdBatDetailValue *(T.TaxPerc/100)),
	A.SchDisc =  A.SchDisc  + (A.SchDisc *(T.TaxPerc/100))  FROM #MTSalesDetails A 
	INNER JOIN ProductBatch B ON A.Prdid = B.PrdId AND A.Prdbatid = B.PrdBatId
	INNER JOIN 	ProductBatchDetails C ON B.DefaultPriceid = C.PriceId  AND C.SLNo = 3
	INNER JOIN #ParleOutputTaxPercentage T ON A.TransType = T.TRANSID AND A.SALID =T.SALID AND A.SLNO=T.PRDSLNO
	


	--SELECT DISTINCT Priceid,PrdBatDetailValue  INTO #SpecialPrice FROM
	--(
	--SELECT D.PriceId,D.PrdBatDetailValue 
	--FROM #MTSalesDetails M (NOLOCK),
	--ProductBatchDetails D (NOLOCK) 
	--WHERE M.PriceId = D.PriceId AND D.SLNo = 3
	--AND PriceCode LIKE '%-Spl Rate-%'   
	--UNION 
	--SELECT D.PriceId,D.PrdBatDetailValue 
	--FROM #MTSalesDetails M (NOLOCK),
	--ProductBatchDetails D (NOLOCK) 
	--WHERE M.PriceId = D.PriceId AND D.SLNo = 3
	--AND PriceCode LIKE '%SplRate%'  
	--)A

	SELECT A.SalId ,A.PrdId,A.PrdBatid,A.TransType,A.Slno,SplRate INTO #Sales  FROM #MTSalesDetails A  
	INNER JOIN SalesInvoiceProduct B ON A.Salid = B.Salid AND A.Prdid =B.PrdId AND A.PrdBatid = B.PrdBatId AND A.Slno = B.SlNo AND TransType = 1
	AND SplRate>0
 
	SELECT  A.SalId ,A.PrdId,A.PrdBatid,A.TransType,A.Slno,SplRate INTO #Return FROM #MTSalesDetails A  
	INNER JOIN ReturnHeader B ON A.SalId = B.ReturnID AND TransType = 2 
	INNER JOIN ReturnProduct C ON C.ReturnID = B.ReturnID 
	INNER JOIN SalesInvoiceProduct D ON B.Salid = D.Salid AND D.Prdid =C.PrdId AND D.PrdBatid = C.PrdBatId AND D.SLNO = C.ActSalRowId  AND SplRate>0

	
	--UPDATE M SET M.[SpecialSellRate] = D.PrdBatDetailValue
	--FROM #MTSalesDetails M (NOLOCK),
	--#SpecialPrice D (NOLOCK)
	--WHERE M.PriceId = D.PriceId 
	--ADDED BY MOHANA ILCRSTPAR2313
	--UPDATE M SET M.[SpecialSellRate] = D.PrdBatDetailValue+ (D.PrdBatDetailValue*(T.TaxPerc/100))
	--FROM #MTSalesDetails M (NOLOCK),
	--#SpecialPrice D (NOLOCK),
	--#ParleOutputTaxPercentage T (NOLOCK)
	--WHERE M.TransType = T.TransId AND M.SalId = T.Salid AND M.Slno = T.PrdSlno	AND M.PriceId = D.PriceId  

	
	UPDATE M SET M.[SpecialSellRate] = D.SplRate + (D.SplRate*(T.TaxPerc/100))
	FROM #MTSalesDetails M (NOLOCK),
	#Sales D (NOLOCK), 
	#ParleOutputTaxPercentage T (NOLOCK)
	WHERE M.TransType = T.TransId AND M.SalId = T.Salid AND M.Slno = T.PrdSlno AND M.PrdId = D.PrdId AND M.TransType = D.TransType 
	AND D.slno = T.PrdSlno AND D.salid = T.Salid AND T.TransId = D.TransType 
	UPDATE M SET M.[SpecialSellRate] = D.SplRate + (D.SplRate*(T.TaxPerc/100))
	FROM #MTSalesDetails M (NOLOCK),
	#Return  D (NOLOCK), 
	#ParleOutputTaxPercentage T (NOLOCK)
	WHERE M.TransType = T.TransId AND M.SalId = T.Salid AND M.Slno = T.PrdSlno AND M.PrdId = D.PrdId AND M.TransType = D.TransType 
	AND D.slno = T.PrdSlno AND D.salid = T.Salid AND T.TransId = D.TransType 
		
	 
	--Non Scheme
	UPDATE A SET NrmlLCTR = TotalPcs*ActualSellrate FROM #MTSalesDetails A(NOLOCK) WHERE Type='NS'
		
	UPDATE A SET NrmlSecSalesTot = ( CASE SpecialSellRate WHEN 0 THEN (TotalPcs*ActualSellrate) ELSE (TotalPcs*SpecialSellRate) END )
	FROM #MTSalesDetails A(NOLOCK) WHERE Type='NS'
	
	UPDATE A SET TotDifClms  = NrmlLCTR-NrmlSecSalesTot FROM #MTSalesDetails A(NOLOCK) WHERE Type='NS'
	
			
	--Scheme
	
	UPDATE A SET OfferLCTR = TotalPcs*ActualSellrate FROM #MTSalesDetails A(NOLOCK) WHERE Type='S'
		
	UPDATE A SET OffSecSalesTOT = ( CASE SpecialSellRate WHEN 0 THEN (TotalPcs*ActualSellrate) ELSE (TotalPcs*SpecialSellRate) END )
	FROM #MTSalesDetails A(NOLOCK) WHERE Type='S'
	
		
	UPDATE A SET TotOffSalesChain =  ( CASE SpecialSellRate WHEN 0 THEN (TotalPcs*(ActualSellrate-SchDisc)) ELSE (TotalPcs*(SpecialSellRate-SchDisc)) END )
	FROM #MTSalesDetails A(NOLOCK) WHERE Type='S'
	
	UPDATE A SET OffClmDiff = OfferLCTR-TotOffSalesChain FROM #MTSalesDetails A(NOLOCK) WHERE Type='S'
	
	SELECT CtgName,SUM(NrmlLCTR) NrmlLCTR,SUM(NrmlSecSalesTOT) NrmlSecSalesTOT,SUM(TOTDifClms) TOTDifClms,SUM(OfferLCTR) OfferLCTR,
	SUM(OffSecSalesTOT) OffSecSalesTOT,	SUM(OffClmDiff) OffClmDiff,SUM(TotOffSalesChain) TotOffSalesChain,	CAST(0 AS NUMERIC(18,6)) LIABNormalSale,
	CAST(0 AS NUMERIC(18,6)) OffLIABValue,CAST(0 AS NUMERIC(18,6)) TotalSales,CAST(0 AS NUMERIC(18,6)) LIABOffClmWITHOUTTOT,
	CAST(0 AS NUMERIC(18,6)) LIABOffClmTotalSale,CAST(0 AS NUMERIC(18,6)) GrandTotClm,
	CAST(0 AS NUMERIC(18,6)) TOTALLIAB ,CAST(0 AS NUMERIC(18,6)) TotSalTOChain,CAST(0 AS NUMERIC(18,6)) OffLIABTtotalSales,CAST(0 AS NUMERIC(18,6)) TOTLiabTotal
	INTO #MTFinal
	FROM #MTSalesDetails D (NOLOCK) INNER JOIN #FilterRetailer B ON D.Rtrid = B.Rtrid  AND D.RtrValueClassId = B.RtrValueClassId 
	GROUP BY  CtgName

	UPDATE A SET LIABNormalSale = (TotDifClms/NrmlLCTR)*100  FROM #MTFinal A(NOLOCK)  WHERE NrmlLCTR>0
	UPDATE A SET OffLiabvalue = OffSecSalesTOT-TotOffSalesChain  FROM #MTFinal A(NOLOCK) 
	 
	UPDATE A SET TotalSales = OfferLCTR+NrmlLCTR FROM #MTFinal A(NOLOCK) 
		
	UPDATE A SET LIABOffClmWITHOUTTOT = (OffLiabvalue/OfferLCTR)*100 FROM #MTFinal A(NOLOCK) WHERE OfferLCTR>0
	
	UPDATE A SET LIABOffClmTotalSale  = (OffClmDiff/OfferLCTR)*100  FROM #MTFinal A(NOLOCK)     WHERE OfferLCTR>0
		
	UPDATE A SET GrandTotClm  = 	(OffClmDiff+TotDifClms)   FROM #MTFinal A(NOLOCK) 
		
	UPDATE A SET TOTALLIAB  = 	(GrandTotClm/TotalSales)*100   FROM #MTFinal A(NOLOCK) WHERE [TotalSales] > 0	
	
	UPDATE A SET TotsaltoChain  = NrmlSecsalesTOT+ TotOffSalesChain    FROM #MTFinal A(NOLOCK) 	
	
	UPDATE A SET OffLIABTtotalSales  = 	(OffLIABValue/TotalSales)*100   FROM #MTFinal A(NOLOCK) WHERE [TotalSales] > 0
	
	UPDATE A SET TOTLiabTotal  = 	((GrandTotClm-OffLIABValue)/TotalSales)*100   FROM #MTFinal A(NOLOCK)  WHERE [TotalSales] > 0
	
	
	IF EXISTS (SELECT 'C' FROM SYSOBJECTS WHERE XTYPE = 'U' AND NAME = 'RptMTDebitSummary_Excel')
	DROP TABLE RptMTDebitSummary_Excel
	
	SELECT CtgName,ROUND(NrmlLCTR,2,1) NrmlLCTR,ROUND(NrmlSecSalesTOT,2,1) NrmlSecSalesTOT,ROUND(TOTDifClms,2,1) TOTDifClms,ROUND(LIABNormalSale,2,1) LIABNormalSale,
	ROUND(OfferLCTR,2,1) OfferLCTR,ROUND(OffSecSalesTOT,2,1) OffSecSalesTOT,ROUND(TotOffSalesChain,2,1) TotOffSalesChain,ROUND(OffClmDiff,2,1) OffClmDiff,
	ROUND(OffLIABValue,2,1) OffLIABValue,ROUND(TotalSales,2,1) TotalSales,ROUND(TotSalTOChain,2,1) TotSalTOChain,ROUND(GrandTotClm,2,1) GrandTotClm,
	ROUND(LIABOffClmWITHOUTTOT,2,1) LIABOffClmWITHOUTTOT,ROUND(LIABOffClmTotalSale,2,1) LIABOffClmTotalSale,ROUND(OffLIABTtotalSales,2,1) OffLIABTtotalSales,
	ROUND(TOTLiabTotal,2,1) TOTLiabTotal,ROUND(TOTALLIAB,2,1) TOTALLIAB,1 AS Grpid
	INTO RptMTDebitSummary_Excel
	FROM #MTFinal
	
	DELETE FROM RptDataCount WHERE RptId = @Pi_RptId AND UserId = @Pi_UsrId
	INSERT INTO RptDataCount (RptId,RecCount,ErrNo,UserId)
	SELECT @Pi_RptId,Count(*) as RecCount,0,@Pi_UsrId FROM RptMTDebitSummary_Excel	
	
	SELECT * FROM RptMTDebitSummary_Excel(NOLOCK) 
	
	INSERT INTO RptMTDebitSummary_Excel
	SELECT 'Grand TOTAL : ' ,SUM(NrmlLCTR),SUM(NrmlSecSalesTOT),SUM(TOTDifClms),SUM(LIABNormalSale),SUM(OfferLCTR),SUM(OffSecSalesTOT),SUM(TotOffSalesChain),SUM(OffClmDiff),
	SUM(OffLIABValue),SUM(TotalSales),SUM(TotSalTOChain),SUM(GrandTotClm),SUM(LIABOffClmWITHOUTTOT),SUM(LIABOffClmTotalSale),SUM(OffLIABTtotalSales),SUM(TOTLiabTotal),
	SUM(TOTALLIAB),9999999 FROM RptMTDebitSummary_Excel where CtgName not in ('Grand TOTAL : ')
	
	UPDATE  A SET	LIABNormalSale = ROUND((TOTDifClms/NrmlLCTR)*100,2,1) FROM RptMTDebitSummary_Excel  A where CtgName in ('Grand TOTAL : ') AND NrmlLCTR>0
	
	UPDATE  A SET LIABOffClmWITHOUTTOT =ROUND((OffLIABValue/OfferLCTR)*100,2,1), LIABOffClmTotalSale = ROUND((OffClmDiff/OfferLCTR)*100,2,1)
	FROM RptMTDebitSummary_Excel  A where CtgName in ('Grand TOTAL : ') AND OfferLctr>0
	
	UPDATE  A SET OffLIABTtotalSales = ROUND((OffLIABValue/TotalSales)*100,2,1),
	TOTLiabTotal =ROUND(((GrandTotClm-OffLIABValue)/TotalSales)*100,2,1),
	TOTALLIAB = ROUND((GrandTotClm/TotalSales)*100,2,1)  FROM RptMTDebitSummary_Excel  A where CtgName in ('Grand TOTAL : ') AND TotalSales>0
	
	DELETE FROM RptExcelHeaders WHERE RptId = 288
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES(288,1,'CHAIN NAME','CHAIN NAME',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES(288,2,'TOTAL NORMAL AMOUNT','TOTAL NORMAL AMOUNT',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES(288,3,'TOTAL  NORMAL  SEC SALES AS PER TOT','TOTAL  NORMAL  SEC SALES AS PER TOT',1, 1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES(288,4,'TOT DIFF CLAIMS','TOT DIFF CLAIMS',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES(288,5,'% LIAB ON NORMAL SALE','% LIAB ON NORMAL SALE',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES(288,6,'TOTAL OFFER NORMAL AMOUNT','TOTAL OFFER NORMAL AMOUNT',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES(288,7,'TOTAL OFFER SEC SALES AS PER TOT','TOTAL OFFER SEC SALES AS PER TOT',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES(288,8,'TOTAL OFFER SEC SALE','TOTAL OFFER SEC SALE',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES(288,9,'OFFERS CLAIMS DIFF (TOT+OFFER)','OFFERS CLAIMS DIFF (TOT+OFFER)',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES(288,10,'OFFER LIABILITY VALUE','OFFER LIABILITY VALUE',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES(288,11,'TOTAL SALE(OFFER + NON OFFER)','TOTAL SALE(OFFER + NON OFFER)',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES(288,12,'TOTAL SALE TO CHAIN','TOTAL SALE TO CHAIN',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES(288,13,'GRAND TOTAL CLAIMS','GRAND TOTAL CLAIMS',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES(288,14,'% LIAB OF OFFER CLAIMS ON SALE WITHOUT TOT','% LIAB OF OFFER CLAIMS ON SALE WITHOUT TOT',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES(288,15,'% LIAB OF OFFER CLAIMS ON TOTAL SALE','% LIAB OF OFFER CLAIMS ON TOTAL SALE',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES(288,16,'% OFFER LIABILITY ON TOTAL SALES','% OFFER LIABILITY ON TOTAL SALES',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES(288,17,'% TOT LIABILITY ON TOTAL SALES','% TOT LIABILITY ON TOTAL SALES',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES(288,18,'TOTAL % LIAB','TOTAL % LIAB',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES(288,19,'Grpid','Grpid',0,1)
	
RETURN
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_RptMTDebitSummary' AND TYPE='P')
DROP PROCEDURE Proc_RptMTDebitSummary
GO
/*
BEGIN TRAN
EXEC Proc_RptMTDebitSummary 288,2,0,'',0,0,1
ROLLBACK TRAN
*/
CREATE PROCEDURE Proc_RptMTDebitSummary
(
	@Pi_RptId			INT,
	@Pi_UsrId			INT,
	@Pi_SnapId			INT,
	@Pi_DbName			NVARCHAR(50),
	@Pi_SnapRequired	INT,
	@Pi_GetFromSnap		INT,
	@Pi_CurrencyId		INT
)
AS
/***********************************************************************************************************************************
* PROCEDURE	: Proc_RptTradePromotionReport
* PURPOSE	: To Return the Trade Promotion Report 
* CREATED	: Mohana -- ICRSTPAR7809
* CREATED DATE	: 28-02-2018 
* NOTE		: Parle SP for Trade Promotion Reports
* MODIFIED 
* DATE       AUTHOR     CR/BZ	USER STORY ID           DESCRIPTION                         
************************************************************************************************************************************
21-06-2018  Lakshman M   BZ     ILCRSTPAR1100         Return stock type validation added in core stocky 
22-06-2018  Lakshman M   BZ     ILCRSTPAR1100         scheme master control history change type remove validation added In CS.
26-06-2018  Lakshman M   BZ     ILCRSTPAR1151         scheme products taken form sales details
27-09-2018  Amuthakumar  CR     CRCRSTPAR0021         Enable Configuration with Tax in Reports
29-10-2018  Lakshman M   BZ     ILCRSTPAR2427         scheme and nonscheme product wise scheme discount validation added in CS.	
15-05-2020	  MOHANA S	  CR	PARCS202100013		CATEGORY TAKEN BASED ON TRANSACTION														
************************************************************************************************************************************/  
BEGIN
	--- Added by Amuthakumar on 27/09/2018 CRCRSTPAR0031
	IF EXISTS(SELECT 'X' FROM MANUALCONFIGURATION (NOLOCK)	WHERE  ModuleId='Report_withTax' AND ModuleName='Report with Tax' AND Status=1 and SeqNo=1)
	BEGIN
		EXEC Proc_RptMTDebitSummary_withTax @Pi_RptId,@Pi_UsrId,@Pi_SnapId,@Pi_DbName,@Pi_SnapRequired,@Pi_GetFromSnap,@Pi_CurrencyId
		RETURN
	END
	-- Till Here CRCRSTPAR0031
	SET NOCOUNT ON
	
	DECLARE @FromDate			AS	DATETIME
	DECLARE @ToDate				AS	DATETIME
	DECLARE @CmpId				AS  INT 
	DECLARE @CtgLevelId			AS  INT  
	DECLARE @CtgMainId			AS  INT	
	DECLARE @CmpPrdCtgId		AS INT
	DECLARE @PrdCtgValMainId	AS INT	
	
	SELECT @FromDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,10,@Pi_UsrId)
	SELECT @ToDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,11,@Pi_UsrId)
	SET @CmpId =(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId))  
	
	SET @CtgLevelId =(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,29,@Pi_UsrId))    
	SET @CtgMainId=(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,30,@Pi_UsrId))
	SET @CmpPrdCtgId = (SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,16,@Pi_UsrId))
	SET @PrdCtgValMainId = (SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,21,@Pi_UsrId))
	
	--To Filter Retailers
	--SELECT DISTINCT R.RtrId,RC.CtgCode,RC.CtgName
	--INTO #FilterRetailer
	--FROM Retailer R (NOLOCK),
	--RetailerValueClassMap RVCM (NOLOCK),
	--RetailerValueClass RVC (NOLOCK),
	--RetailerCategory RC (NOLOCK),
	--RetailerCategoryLevel RCL (NOLOCK)	
	--WHERE R.Rtrid = RVCM.RtrId AND RVCM.RtrValueClassId = RVC.RtrClassId
	--AND  RVC.CtgMainId=RC.CtgMainId AND  RCL.CtgLevelId=RC.CtgLevelId
	--AND RC.CtgLinkId NOT IN (SELECT CtgMainId FROM RetailerCategory WHERE CtgCode='GT')
	--AND (RVC.CmpId=(CASE @CmpId WHEN 0 THEN RVC.CmpId ELSE 0 END) OR
	--RVC.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId)))
	--AND (RCL.CtgLevelId=(CASE @CtgLevelId WHEN 0 THEN RCL.CtgLevelId ELSE 0 END) OR  
	--RCL.CtgLevelId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,29,@Pi_UsrId)))
	--AND (RC.CtgMainId=(CASE @CtgMainId WHEN 0 THEN RC.CtgMainId ELSE 0 END) OR  
	--RC.CtgMainId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,30,@Pi_UsrId)))
	--To Filter Retailers
	SELECT DISTINCT R.RtrId,RC.CtgCode,RC.CtgName,RtrValueClassId 
	INTO #FilterRetailer
	FROM Retailer R (NOLOCK),
	Salesinvoice S (NOLOCK),
	RetailerValueClass RVC (NOLOCK),
	RetailerCategory RC (NOLOCK),
	RetailerCategoryLevel RCL (NOLOCK)
	WHERE R.Rtrid = S.RtrId AND S.RtrValueClassId = RVC.RtrClassId
	AND  RVC.CtgMainId=RC.CtgMainId AND  RCL.CtgLevelId=RC.CtgLevelId
	AND SalInvDate BETWEEN @FromDate AND @ToDate AND DlvSts>3
	AND RC.CtgLinkId NOT IN (SELECT CtgMainId FROM RetailerCategory WHERE CtgCode='GT')
	AND (RVC.CmpId=(CASE @CmpId WHEN 0 THEN RVC.CmpId ELSE 0 END) OR
	RVC.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId)))
	AND (RCL.CtgLevelId=(CASE @CtgLevelId WHEN 0 THEN RCL.CtgLevelId ELSE 0 END) OR  
	RCL.CtgLevelId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,29,@Pi_UsrId)))
	AND (RC.CtgMainId=(CASE @CtgMainId WHEN 0 THEN RC.CtgMainId ELSE 0 END) OR  
	RC.CtgMainId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,30,@Pi_UsrId)))
	--To Filter Retailers
	
	--To Filter Products
	SELECT DISTINCT E.PrdId,E.PrdType
	INTO #FilterProduct
	FROM ProductCategoryValue C (NOLOCK)
	INNER JOIN ProductCategoryValue D (NOLOCK) ON
	D.PrdCtgValLinkCode LIKE Cast(C.PrdCtgValLinkCode AS NVARCHAR(1000)) + '%'
	INNER JOIN Product E (NOLOCK) ON D.PrdCtgValMainId = E.PrdCtgValMainId
	INNER JOIN ProductCategoryLevel L (NOLOCK) ON L.CmpPrdCtgId = C.CmpPrdCtgId
	WHERE 	
	(L.CmpId=(CASE @CmpId WHEN 0 THEN L.CmpId ELSE 0 END) OR
	L.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId)))	AND 
	(L.CmpPrdCtgId = (CASE @CmpPrdCtgId  WHEN 0 THEN L.CmpPrdCtgId ELSE 0 END) OR
	L.CmpPrdCtgId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,16,@Pi_UsrId)))
	AND (C.PrdCtgValMainId = (CASE @PrdCtgValMainId  WHEN 0 THEN C.PrdCtgValMainId ELSE 0 END) OR 
	C.PrdCtgValMainId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId ,21, @Pi_UsrId)))
	--To Filter Products
	
	SELECT S.SalId,S.SalInvNo,S.SalInvDate,S.RtrId,SP.PrdId,SP.PrdBatId,SP.BaseQty BaseQty,SP.PrdUnitMRP MRP,
	CASE SP.SplPriceid WHEN 0 THEN 0 ELSE  SP.Priceid END AS Priceid ,SP.SlNo,SP.PrdUom1EditedSelRate,
	B.DefaultPriceId,Cast((SP.PrdSchDiscAmount/SP.BaseQty)AS NUMERIC(18,6)) Schdisc,S.RtrValueClassId
	INTO #BillingDetails
	FROM SalesInvoice S (NOLOCK)
	INNER JOIN SalesInvoiceProduct SP (NOLOCK) ON S.SalId = SP.SalId
	INNER JOIN ProductBatch B (NOLOCK) ON SP.PrdId  = B.PrdId AND SP.PrdBatId = B.PrdBatId
	WHERE SalInvDate BETWEEN @FromDate AND @ToDate AND S.DlvSts > 3
	AND EXISTS (SELECT 'C' FROM #FilterRetailer FR (NOLOCK) WHERE S.RtrId = FR.RtrId)
	AND EXISTS (SELECT 'C' FROM #FilterProduct FP (NOLOCK) WHERE SP.PrdId = FP.PrdId)
	
	
	SELECT S.ReturnID,S.ReturnCode,S.ReturnDate,S.RtrId,SP.PrdId,SP.PrdBatId,-1 * SP.BaseQty BaseQty,SP.PrdUnitMRP MRP,
	CASE SP.SplPriceid WHEN 0 THEN 0 ELSE  SP.Priceid END AS  Priceid,SP.SlNo,SP.PrdEditSelRte,B.DefaultPriceId,
	Cast((SP.PrdSchDisAmt/Sp.BaseQty) AS NUMERIC(18,6)) RtnSchdisc,S.RtrValueClassId
	INTO #ReturnDetails
	FROM ReturnHeader S (NOLOCK)
	INNER JOIN ReturnProduct SP (NOLOCK) ON S.ReturnID = SP.ReturnID AND  SP.StockTypeId IN (SELECT StockTypeId FROM StockType WHERE SystemStockType = 1)
	INNER JOIN ProductBatch B (NOLOCK) ON SP.PrdId  = B.PrdId AND SP.PrdBatId = B.PrdBatId
	WHERE ReturnDate BETWEEN @FromDate AND @ToDate AND S.Status = 0
	AND EXISTS (SELECT 'C' FROM #FilterRetailer FR (NOLOCK) WHERE S.RtrId = FR.RtrId)
	AND EXISTS (SELECT 'C' FROM #FilterProduct FP (NOLOCK) WHERE SP.PrdId = FP.PrdId)
	--------------- Added by LAkshman M On 26/06/2018 PMS ID: ILCRSTPAR1151 ----------------------
	SELECT Salid,RTRid,Schid,PrdId INTO #SalScheme FROM (
	Select Distinct SI.Salid,RTRid,Schid,PrdId from Salesinvoice SI(NOLOCK) INNER JOIN SalesInvoiceSchemeLineWise SH(NOLOCK) ON SI.Salid=SH.Salid
	WHERE Salinvdate between @FromDate AND @ToDate and Dlvsts in (4,5)
	UNION 
	Select Distinct SI.Salid,RTRid,SH.Schid,SIB.prdid from Salesinvoice SI(NOLOCK) INNER JOIN SalesInvoiceSchemeDtFreePrd SH(NOLOCK) ON SI.Salid=SH.Salid
	INNER JOIN SalesInvoiceSchemeDtBilled SIB (NOLOCK) ON SIB.SalId =Si.SalId
	WHERE Salinvdate between @FromDate AND @ToDate and Dlvsts in (4,5)
	)A
	
	
	SELECT ReturnId,RTRid,Schid,PrdId INTO #RtnScheme FROM (
	Select Distinct A.Returnid,RTRid,Schid,PrdId FROM ReturnSchemeLineDt A WITH (NOLOCK) INNER JOIN ReturnHeader B WITH (NOLOCK) ON A.ReturnId = B.ReturnId
	WHERE ReturnDate between @FromDate AND @ToDate and B.Status = 0  
	UNION
	Select Distinct A.Returnid,RTRid,Schid,0 As Prdid FROM ReturnSchemeFreePrdDt A WITH (NOLOCK) INNER JOIN ReturnHeader B WITH (NOLOCK) ON A.ReturnId = B.ReturnId
	WHERE ReturnDate between @FromDate AND @ToDate and B.Status = 0  
	)A
	--------------- Till Here --------------
 	SELECT Salid,RTRid, Schid,A.Prdid INTO #SalSchemeProducts FROM
	 (
		SELECT DISTINCT Salid,RTRid,A.Schid,B.Prdid FROM #SalScheme A(NOLOCK)
		INNER JOIN SchemeProducts B(NOLOCK) ON A.Schid = B.Schid
		INNER JOIN Product C(NOLOCK) On B.Prdid = C.PrdId
		INNER JOIN Schememaster SM (Nolock) ON SM.schid =B.schid WHERE SM.Claimable =1 AND A.PrdId =C.PrdId  --- Added By Lakshman  M on 21/06/2018 PMS ID:ILCRSTPAR1100
		UNION
		SELECT DISTINCT Salid,RTRid,A.Schid, E.Prdid FROM #SalScheme A(NOLOCK)
		INNER JOIN SchemeProducts B (NOLOCK)ON A.Schid = B.Schid
		INNER JOIN ProductCategoryValue C (NOLOCK) ON 
		B.PrdCtgValMainId = C.PrdCtgValMainId 
		INNER JOIN ProductCategoryValue D(NOLOCK) ON
		D.PrdCtgValLinkCode LIKE Cast(c.PrdCtgValLinkCode as nvarchar(1000)) + '%'
		INNER JOIN Product E(NOLOCK) On
		D.PrdCtgValMainId = E.PrdCtgValMainId 
		INNER JOIN ProductBatch F(NOLOCK) On
		F.PrdId = E.Prdid
		INNER JOIN Schememaster SM (Nolock) ON SM.schid =B.schid WHERE SM.Claimable =1 AND A.PrdId =E.PrdId --- Added By Lakshman  M on 21/06/2018 PMS ID:ILCRSTPAR1100
	)A INNER JOIN #FilterProduct B ON A.PrdId = B.Prdid 
	
	 	SELECT DISTINCT ReturnId,RTRid,Schid,A.Prdid INTO #RtnSchemeProducts FROM
		(
		SELECT DISTINCT ReturnId,RTRid,A.Schid, B.Prdid FROM #RtnScheme A
		INNER JOIN SchemeProducts B(NOLOCK) ON A.Schid = B.Schid
		INNER JOIN Product C(NOLOCK) On B.Prdid = C.PrdId
		INNER JOIN Schememaster SM (Nolock) ON SM.schid =B.schid WHERE SM.Claimable =1 --- Added By Lakshman  M on 21/06/2018 PMS ID:ILCRSTPAR1100
		UNION
		SELECT DISTINCT ReturnId,RTRid,A.Schid, E.Prdid FROM #RtnScheme A
		INNER JOIN SchemeProducts B(NOLOCK) ON A.Schid = B.Schid
		INNER JOIN ProductCategoryValue C(NOLOCK) ON 
		B.PrdCtgValMainId = C.PrdCtgValMainId 
		INNER JOIN ProductCategoryValue D(NOLOCK) ON
		D.PrdCtgValLinkCode LIKE Cast(c.PrdCtgValLinkCode as nvarchar(1000)) + '%'
		INNER JOIN Product E(NOLOCK) On
		D.PrdCtgValMainId = E.PrdCtgValMainId 
		INNER JOIN ProductBatch F(NOLOCK) On
		F.PrdId = E.Prdid
		INNER JOIN Schememaster SM (Nolock) ON SM.schid =B.schid WHERE SM.Claimable =1 AND A.PrdId =E.PrdId--- Added By Lakshman  M on 21/06/2018 PMS ID:ILCRSTPAR1100
	)A INNER JOIN #FilterProduct B ON A.PrdId = B.Prdid 
	
	------------- Added By Lakshman M On 22/06/2018 PMS ID: ILCRSTPAR1100
	INSERT INTO #RtnSchemeProducts(ReturnId,RTRid,SchId,PrdId)
	SELECT ReturnId,RTRid,B.Schid,C.PrdId FROM SchemeMasterControlHistory A INNER JOIN SchemeMaster B ON A.CmpSchCode = B.CmpSchCode
	INNER JOIN Product C ON c.PrdCCode = A.FromValue
	INNER JOIN #RtnScheme RS (NOLOCK) ON RS.SchId =B.SchId 
	WHERE ChangeType='Remove' AND B.SchId in (SELECT SchId FROM SchemeProducts Where PrdCtgValMainId = 0)
	INSERT INTO #SalSchemeProducts(SalId ,RTRid,SchId,PrdId)
	SELECT salid,RTRid,B.Schid,C.PrdId FROM SchemeMasterControlHistory A INNER JOIN SchemeMaster B ON A.CmpSchCode = B.CmpSchCode
	INNER JOIN Product C ON c.PrdCCode = A.FromValue
	INNER JOIN #SalScheme RS (NOLOCK) ON RS.SchId =B.SchId 
	WHERE ChangeType='Remove' AND B.SchId in (SELECT SchId FROM SchemeProducts Where PrdCtgValMainId = 0)
	----
	INSERT INTO #RtnSchemeProducts(ReturnId,RTRid,SchId,PrdId)		
	SELECT DISTINCT RS.ReturnID,RS.RtrId ,A.SchId,E.Prdid
	FROM SchemeMaster A
	INNER JOIN SchemeMasterControlHistory B ON A.CmpSchCode = B.CmpSchCode
	INNER JOIN ProductCategoryValue C ON 
	B.FromValue = C.PrdCtgValCode
	INNER JOIN ProductCategoryValue D ON
	D.PrdCtgValLinkCode LIKE Cast(c.PrdCtgValLinkCode as nvarchar(1000)) + '%'
	INNER JOIN Product E On
	D.PrdCtgValMainId = E.PrdCtgValMainId 
	INNER JOIN ProductBatch F On
	F.PrdId = E.Prdid
	INNER JOIN #RtnScheme RS (NOLOCK) ON RS.SchId =A.SchId 
	WHERE A.SchemeLvlMode = 0  AND A.SchId in (SELECT SchId FROM SchemeProducts Where PrdId = 0 )
	AND ChangeType='Remove'
	----------------- Added By Lakshman M ON Dated:30/10/2018 PMS ID: ILCRSTPAR2427 ---------------
	INSERT INTO #SalSchemeProducts(SalId ,RTRid,SchId,PrdId)	
	SELECT DISTINCT RS.SalId,RS.RtrId ,A.SchId,E.Prdid
	FROM SchemeMaster A
	INNER JOIN SchemeMasterControlHistory B ON A.CmpSchCode = B.CmpSchCode
	INNER JOIN ProductCategoryValue C ON 
	B.FromValue = C.PrdCtgValCode
	INNER JOIN ProductCategoryValue D ON
	D.PrdCtgValLinkCode LIKE Cast(c.PrdCtgValLinkCode as nvarchar(1000)) + '%'
	INNER JOIN Product E On
	D.PrdCtgValMainId = E.PrdCtgValMainId 
	INNER JOIN ProductBatch F On
	F.PrdId = E.Prdid
	INNER JOIN #SalScheme RS (NOLOCK) ON RS.SchId =A.SchId 
	WHERE A.SchemeLvlMode = 0  AND A.SchId in (SELECT SchId FROM SchemeProducts Where PrdId = 0 )
	AND ChangeType='Remove'
	--------------- Till here ---------------
	------------ Till Here ----------------------
	
	SELECT DISTINCT TransType,RtrId,SalId,TransDate,PrdId,PrdBatId,BaseQty TotalPCS,MRP,PriceId,SlNo,[SellRate],DefaultPriceId,SchDisc,Type,
	CAST(0 AS NUMERIC(18,6))[ActualSellRate],CAST(0 AS NUMERIC(18,6))[SpecialSellRate],
	CAST(0 AS NUMERIC(18,6)) NrmlLCTR, CAST(0 AS NUMERIC(18,6)) NrmlSecSalesTOT, CAST(0 AS NUMERIC(18,6)) TOTDifClms
	, CAST(0 AS NUMERIC(18,6)) OfferLCTR, CAST(0 AS NUMERIC(18,6)) OffSecSalesTOT, CAST(0 AS NUMERIC(18,6)) TotOffSalesChain,
	 CAST(0 AS NUMERIC(18,6)) OffClmDiff,RtrvalueClassId
	INTO #MTSalesDetails
	FROM 
	(
	SELECT DISTINCT 1 TransType,A.RtrId,A.SalId,SalInvDate TransDate,A.PrdId,A.PrdBatId,BaseQty,MRP,PriceId,SlNo,PrdUom1EditedSelRate [SellRate],DefaultPriceId,
	SchDisc,CASE ISNULL(B.Salid,0) WHEN 0 THEN 'NS' ELSE 'S' END AS Type,RtrvalueClassId
	FROM #BillingDetails A(NOLOCK)
	LEFT OUTER JOIN #SalSchemeProducts B(NOLOCK) ON A.Salid = B.salid AND A.Prdid=B.Prdid AND A.Rtrid =B.Rtrid
	UNION ALL
	SELECT  DISTINCT 2 TransType,A.RtrId,A.ReturnID,ReturnDate TransDate,A.PrdId,A.PrdBatId, BaseQty,MRP,PriceId,SlNo,PrdEditSelRte,DefaultPriceId,
	RtnSchDisc,CASE ISNULL(B.ReturnID,0) WHEN 0 THEN 'NS' ELSE 'S' END AS Type,RtrvalueClassId
	FROM #ReturnDetails A(NOLOCK)
	LEFT OUTER JOIN #RtnSchemeProducts B(NOLOCK) ON A.Returnid = B.Returnid AND A.Prdid=B.Prdid AND A.Rtrid =B.Rtrid
	) A
	
	
	UPDATE A SET ActualSellRate = C.PrdBatDetailValue FROM #MTSalesDetails A INNER JOIN ProductBatch B ON A.Prdid = B.PrdId AND A.Prdbatid = B.PrdBatId
	INNER JOIN 	ProductBatchDetails C ON B.DefaultPriceid = C.PriceId  AND C.SLNo = 3
	 
	
	SELECT DISTINCT Priceid,PrdBatDetailValue  INTO #SpecialPrice FROM
	(
	SELECT D.PriceId,D.PrdBatDetailValue 
	FROM #MTSalesDetails M (NOLOCK),
	ProductBatchDetails D (NOLOCK) 
	WHERE M.PriceId = D.PriceId AND D.SLNo = 3
	AND PriceCode LIKE '%-Spl Rate-%'   
	UNION 
	SELECT D.PriceId,D.PrdBatDetailValue 
	FROM #MTSalesDetails M (NOLOCK),
	ProductBatchDetails D (NOLOCK) 
	WHERE M.PriceId = D.PriceId AND D.SLNo = 3
	AND PriceCode LIKE '%SplRate%'  
	)A
	
	UPDATE M SET M.[SpecialSellRate] = D.PrdBatDetailValue
	FROM #MTSalesDetails M (NOLOCK),
	#SpecialPrice D (NOLOCK) 
	WHERE M.PriceId = D.PriceId  
	
	 
	--Non Scheme
	UPDATE A SET NrmlLCTR = TotalPcs*ActualSellrate FROM #MTSalesDetails A(NOLOCK) WHERE Type='NS'
		
	UPDATE A SET NrmlSecSalesTot = ( CASE SpecialSellRate WHEN 0 THEN (TotalPcs*ActualSellrate) ELSE (TotalPcs*SpecialSellRate) END )
	FROM #MTSalesDetails A(NOLOCK) WHERE Type='NS'
	
	UPDATE A SET TotDifClms  = NrmlLCTR-NrmlSecSalesTot FROM #MTSalesDetails A(NOLOCK) WHERE Type='NS'
	
			
	--Scheme
	
	UPDATE A SET OfferLCTR = TotalPcs*ActualSellrate FROM #MTSalesDetails A(NOLOCK) WHERE Type='S'
		
	UPDATE A SET OffSecSalesTOT = ( CASE SpecialSellRate WHEN 0 THEN (TotalPcs*ActualSellrate) ELSE (TotalPcs*SpecialSellRate) END )
	FROM #MTSalesDetails A(NOLOCK) WHERE Type='S'
	
		
	UPDATE A SET TotOffSalesChain =  ( CASE SpecialSellRate WHEN 0 THEN (TotalPcs*(ActualSellrate-SchDisc)) ELSE (TotalPcs*(SpecialSellRate-SchDisc)) END )
	FROM #MTSalesDetails A(NOLOCK) WHERE Type='S'
	
	UPDATE A SET OffClmDiff = OfferLCTR-TotOffSalesChain FROM #MTSalesDetails A(NOLOCK) WHERE Type='S'
	
	SELECT CtgName,SUM(NrmlLCTR) NrmlLCTR,SUM(NrmlSecSalesTOT) NrmlSecSalesTOT,SUM(TOTDifClms) TOTDifClms,SUM(OfferLCTR) OfferLCTR,
	SUM(OffSecSalesTOT) OffSecSalesTOT,	SUM(OffClmDiff) OffClmDiff,SUM(TotOffSalesChain) TotOffSalesChain,	CAST(0 AS NUMERIC(18,6)) LIABNormalSale,
	CAST(0 AS NUMERIC(18,6)) OffLIABValue,CAST(0 AS NUMERIC(18,6)) TotalSales,CAST(0 AS NUMERIC(18,6)) LIABOffClmWITHOUTTOT,
	CAST(0 AS NUMERIC(18,6)) LIABOffClmTotalSale,CAST(0 AS NUMERIC(18,6)) GrandTotClm,
	CAST(0 AS NUMERIC(18,6)) TOTALLIAB ,CAST(0 AS NUMERIC(18,6)) TotSalTOChain,CAST(0 AS NUMERIC(18,6)) OffLIABTtotalSales,CAST(0 AS NUMERIC(18,6)) TOTLiabTotal
	INTO #MTFinal
	FROM #MTSalesDetails D (NOLOCK) INNER JOIN #FilterRetailer B ON D.Rtrid = B.Rtrid  AND D.RtrValueClassId = B.RtrValueClassId 
	GROUP BY  CtgName
	UPDATE A SET LIABNormalSale = (TotDifClms/NrmlLCTR)*100  FROM #MTFinal A(NOLOCK)  WHERE NrmlLCTR>0
	UPDATE A SET OffLiabvalue = OffSecSalesTOT-TotOffSalesChain  FROM #MTFinal A(NOLOCK) 
	 
	UPDATE A SET TotalSales = OfferLCTR+NrmlLCTR FROM #MTFinal A(NOLOCK) 
		
	UPDATE A SET LIABOffClmWITHOUTTOT = (OffLiabvalue/OfferLCTR)*100 FROM #MTFinal A(NOLOCK) WHERE OfferLCTR>0
	
	UPDATE A SET LIABOffClmTotalSale  = (OffClmDiff/OfferLCTR)*100  FROM #MTFinal A(NOLOCK)     WHERE OfferLCTR>0
		
	UPDATE A SET GrandTotClm  = 	(OffClmDiff+TotDifClms)   FROM #MTFinal A(NOLOCK) 
		
	UPDATE A SET TOTALLIAB  = 	(GrandTotClm/TotalSales)*100   FROM #MTFinal A(NOLOCK) WHERE [TotalSales] > 0	
	
	UPDATE A SET TotsaltoChain  = NrmlSecsalesTOT+ TotOffSalesChain    FROM #MTFinal A(NOLOCK) 	
	
	UPDATE A SET OffLIABTtotalSales  = 	(OffLIABValue/TotalSales)*100   FROM #MTFinal A(NOLOCK) WHERE [TotalSales] > 0
	
	UPDATE A SET TOTLiabTotal  = 	((GrandTotClm-OffLIABValue)/TotalSales)*100   FROM #MTFinal A(NOLOCK)  WHERE [TotalSales] > 0
	
	
	IF EXISTS (SELECT 'C' FROM SYSOBJECTS WHERE XTYPE = 'U' AND NAME = 'RptMTDebitSummary_Excel')
	DROP TABLE RptMTDebitSummary_Excel
	
	SELECT CtgName,ROUND(NrmlLCTR,2,1) NrmlLCTR,ROUND(NrmlSecSalesTOT,2,1) NrmlSecSalesTOT,ROUND(TOTDifClms,2,1) TOTDifClms,ROUND(LIABNormalSale,2,1) LIABNormalSale,
	ROUND(OfferLCTR,2,1) OfferLCTR,ROUND(OffSecSalesTOT,2,1) OffSecSalesTOT,ROUND(TotOffSalesChain,2,1) TotOffSalesChain,ROUND(OffClmDiff,2,1) OffClmDiff,
	ROUND(OffLIABValue,2,1) OffLIABValue,ROUND(TotalSales,2,1) TotalSales,ROUND(TotSalTOChain,2,1) TotSalTOChain,ROUND(GrandTotClm,2,1) GrandTotClm,
	ROUND(LIABOffClmWITHOUTTOT,2,1) LIABOffClmWITHOUTTOT,ROUND(LIABOffClmTotalSale,2,1) LIABOffClmTotalSale,ROUND(OffLIABTtotalSales,2,1) OffLIABTtotalSales,
	ROUND(TOTLiabTotal,2,1) TOTLiabTotal,ROUND(TOTALLIAB,2,1) TOTALLIAB,1 AS Grpid
	INTO RptMTDebitSummary_Excel
	FROM #MTFinal
	
	DELETE FROM RptDataCount WHERE RptId = @Pi_RptId AND UserId = @Pi_UsrId
	INSERT INTO RptDataCount (RptId,RecCount,ErrNo,UserId)
	SELECT @Pi_RptId,Count(*) as RecCount,0,@Pi_UsrId FROM RptMTDebitSummary_Excel	
	
	SELECT * FROM RptMTDebitSummary_Excel(NOLOCK) 
	
	INSERT INTO RptMTDebitSummary_Excel
	SELECT 'Grand TOTAL : ' ,SUM(NrmlLCTR),SUM(NrmlSecSalesTOT),SUM(TOTDifClms),SUM(LIABNormalSale),SUM(OfferLCTR),SUM(OffSecSalesTOT),SUM(TotOffSalesChain),SUM(OffClmDiff),
	SUM(OffLIABValue),SUM(TotalSales),SUM(TotSalTOChain),SUM(GrandTotClm),SUM(LIABOffClmWITHOUTTOT),SUM(LIABOffClmTotalSale),SUM(OffLIABTtotalSales),SUM(TOTLiabTotal),
	SUM(TOTALLIAB),9999999 FROM RptMTDebitSummary_Excel where CtgName not in ('Grand TOTAL : ')
	
	UPDATE  A SET	LIABNormalSale = ROUND((TOTDifClms/NrmlLCTR)*100,2,1) FROM RptMTDebitSummary_Excel  A where CtgName in ('Grand TOTAL : ') AND NrmlLCTR>0
	
	UPDATE  A SET LIABOffClmWITHOUTTOT =ROUND((OffLIABValue/OfferLCTR)*100,2,1), LIABOffClmTotalSale = ROUND((OffClmDiff/OfferLCTR)*100,2,1)
	FROM RptMTDebitSummary_Excel  A where CtgName in ('Grand TOTAL : ') AND OfferLctr>0
	
	UPDATE  A SET OffLIABTtotalSales = ROUND((OffLIABValue/TotalSales)*100,2,1),
	TOTLiabTotal =ROUND(((GrandTotClm-OffLIABValue)/TotalSales)*100,2,1),
	TOTALLIAB = ROUND((GrandTotClm/TotalSales)*100,2,1)  FROM RptMTDebitSummary_Excel  A where CtgName in ('Grand TOTAL : ') AND TotalSales>0
	
	DELETE FROM RptExcelHeaders WHERE RptId = 288
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES(288,1,'CHAIN NAME','CHAIN NAME',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES(288,2,'TOTAL NORMAL AMOUNT','TOTAL NORMAL AMOUNT',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES(288,3,'TOTAL  NORMAL  SEC SALES AS PER TOT','TOTAL  NORMAL  SEC SALES AS PER TOT',1, 1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES(288,4,'TOT DIFF CLAIMS','TOT DIFF CLAIMS',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES(288,5,'% LIAB ON NORMAL SALE','% LIAB ON NORMAL SALE',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES(288,6,'TOTAL OFFER NORMAL AMOUNT','TOTAL OFFER NORMAL AMOUNT',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES(288,7,'TOTAL OFFER SEC SALES AS PER TOT','TOTAL OFFER SEC SALES AS PER TOT',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES(288,8,'TOTAL OFFER SEC SALE','TOTAL OFFER SEC SALE',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES(288,9,'OFFERS CLAIMS DIFF (TOT+OFFER)','OFFERS CLAIMS DIFF (TOT+OFFER)',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES(288,10,'OFFER LIABILITY VALUE','OFFER LIABILITY VALUE',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES(288,11,'TOTAL SALE(OFFER + NON OFFER)','TOTAL SALE(OFFER + NON OFFER)',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES(288,12,'TOTAL SALE TO CHAIN','TOTAL SALE TO CHAIN',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES(288,13,'GRAND TOTAL CLAIMS','GRAND TOTAL CLAIMS',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES(288,14,'% LIAB OF OFFER CLAIMS ON SALE WITHOUT TOT','% LIAB OF OFFER CLAIMS ON SALE WITHOUT TOT',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES(288,15,'% LIAB OF OFFER CLAIMS ON TOTAL SALE','% LIAB OF OFFER CLAIMS ON TOTAL SALE',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES(288,16,'% OFFER LIABILITY ON TOTAL SALES','% OFFER LIABILITY ON TOTAL SALES',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES(288,17,'% TOT LIABILITY ON TOTAL SALES','% TOT LIABILITY ON TOTAL SALES',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES(288,18,'TOTAL % LIAB','TOTAL % LIAB',1,1)
	INSERT INTO RptExcelHeaders([RptId],[SlNo],[FieldName],[DisplayName],[DisplayFlag],[LngId]) VALUES(288,19,'Grpid','Grpid',0,1)
	
RETURN
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Proc_InStBaseDiscountClaim' AND TYPE='P' )
DROP PROCEDURE Proc_InStBaseDiscountClaim
GO
CREATE PROCEDURE Proc_InStBaseDiscountClaim
(   
	@Pi_Year	int,
	@Pi_Month	INT,
	@Pi_UsrId	INT,
	@Pi_Transid	INT
)  
AS  
/*******************************************************************************************************************
* PROCEDURE	: Proc_SchUtilization_DNClaim  (COPIED FROM REPORT PROCEDURE)
* PURPOSE	: TO GET THE SCHEME UTILIZATION DETAILS IN GIVEN PERIOD
* NOTES		:  
* CREATED	: S.MOHANA 
* DATE		: 15-11-2019
* PMS		: CRCRSTPAR0079  
**********************************************************************************************************************
* DATE			RESOURCE			CR/BZ				USERSTORYID					DESCRIPTION
* 18-12-2019	MOHANA S			CR					CRCRSTPAR0095				RESTIRCTED INSTITUTIONAL SCHEME IN TRADE SCHEME DOWNLOAD
* 05-02-2020	MOHANA S			SR					ILCRSTPAR7731				AS PER CLIENT REQUEST, THE MONTARGET AND L2SALES LOGIC CHANGED
* 28-02-2020	MOHANA S			SR					ILCRSTPAR8062				Validation included to take only defined retailers from schemertrvalidation
* 07-07-2020	MOHANA S	     	SR					UAT CHANGES					INSTEAD OF GROSS AMOUNT, NET AMOUNT HAS BEEN CHANGED
**********************************************************************************************************************/
BEGIN  
SET NOCOUNT ON  
			 
	DECLARE @Pi_FromDate  DATETIME
	DECLARE @Pi_Todate	   DATETIME
			
	DECLARE @InsFromDate AS DATETIME       
	DECLARE @InsToDate  AS DATETIME   
		  
	SELECT @Pi_FromDate= DATEADD(MONTH, (@Pi_Month)-1, CONVERT(VARCHAR(10),@Pi_Year))
	SELECT @Pi_Todate = DATEADD(dd, -1, DATEADD(MONTH, @Pi_Month,CONVERT(VARCHAR(10),@Pi_Year)))	
			 
	DELETE FROM TempInsTargetClaimDetails WHERE SchType<>0
			
	SELECT * INTO #SchemeMaster  FROM SchemeMaster WHERE ClmRefId  IN (SELECT ClmgrpId FROM ClaimGroupMaster WHERE ClmGrpCode ='CG10004') --CRCRSTPAR0095
		    
	SELECT DISTINCT  A.CmpSchcode,CircularNo,CircularDate,SchemeBudget INTO #Schemecirculardetails 
	FROM Schemecirculardetails A INNER JOIN #SchemeMaster B ON A.CmpSchcode=B.CmpSchcode
		    
	SELECT DISTINCT B.* INTO #SalesInvoiceSchemeLineWise FROM SalesInvoice A (NOLOCK)
	INNER JOIN SalesInvoiceSchemeLineWise B(NOLOCK) ON A.SALID =B.SALID AND  SalInvDate BETWEEN  @Pi_FromDate AND @Pi_Todate AND A.Dlvsts >3  
	INNER JOIN #SchemeMaster C ON C.Schid = B.Schid
	INNER JOIN (SELECT DISTINCT Schid,Rtrid FROM SchemeRtrLevelValidation) S ON A.RtrId = S.RtrId AND B.SchId = S.SchId AND S.SchId = C.SchId --ILCRSTPAR8062 
	SELECT Distinct A.SchId into #SchemeID FROM #SalesInvoiceSchemeLineWise A (NOLOCK) INNER JOIN #SchemeMaster B ON A.Schid = B.Schid 
		  
	SELECT  DISTINCT RSF.* INTO #ReturnSchemelinedt FROM ReturnHeader RH (NOLOCK)  
	INNER JOIN ReturnSchemelinedt RSF(NOLOCK) ON  RH.ReturnId = RSF.ReturnId  AND
	ReturnDate Between @Pi_FromDate AND @Pi_Todate  AND RH.Status =0 
	INNER JOIN #SchemeMaster C ON C.Schid = RSF.Schid
	INNER JOIN (SELECT DISTINCT Schid,Rtrid FROM SchemeRtrLevelValidation) S ON RH.RtrId = S.RtrId AND RSF.SchId = S.SchId AND S.SchId = C.SchId --ILCRSTPAR8062 
			
	SELECT DISTINCT Rtrid,RtrValueClassid INTO #RtrCnt FROM
	(
	SELECT DISTINCT RtrID,RtrValueClassId  FROM Salesinvoice A  INNER JOIN #SalesInvoiceSchemeLineWise B ON A.SalId = b.SalId
	WHERE SalInvDate BETWEEN  @Pi_FromDate AND @Pi_Todate AND Dlvsts >3 
	UNION
	SELECT DISTINCT RtrID,RtrValueClassId  FROM REturnHeader A INNER JOIN #ReturnSchemelinedt B ON A.ReturnID = b.ReturnID 
	Where ReturnDate Between   @Pi_FromDate AND @Pi_Todate AND Status = 0
	)A
	SELECT 	A.CtgMainId,CtgLinkId As ChnId,RtrClassId as RtrValueClassId,Rtrid INTO #FilterRetailer FROM (
	SELECT DISTINCT D.CtgMainId,D.CtgLinkId,B.Rtrid
	FROM SalesInvoice A INNER JOIN insTargetDetailsTrans b on a.rtrid = b.RtrId 
	AND Salinvdate BETWEEN  @Pi_FromDate AND @Pi_Todate AND A.DlvSts > 3  
	inner join RetailerValueClass C ON A.RtrValueClassId = C.RtrClassId 
	INNER JOIN RetailerCategory D ON C.CtgMainId = D.CtgMainId 
	WHERE UserId = @Pi_UsrId and B.CtgName <>'' 
	UNION
	SELECT DISTINCT D.CtgMainId ,D.CtgLinkId,B.Rtrid
	FROM ReturnHeader  A INNER JOIN insTargetDetailsTrans b on a.rtrid = b.RtrId 
	AND ReturnDate BETWEEN  @Pi_FromDate AND @Pi_Todate AND  Status = 0   
	inner join RetailerValueClass C ON A.RtrValueClassId = C.RtrClassId 
	INNER JOIN RetailerCategory D ON C.CtgMainId = D.CtgMainId 
	WHERE UserId = @Pi_UsrId and B.CtgName <>'' )A INNER JOIN RetailerValueClass B ON A.CtgMainId = B.CtgMainId 
		 
	SELECT Distinct CtgmainId,RtrId INTO #Rtr FROM (
	SELECT  CtgmainId,R.RtrId  FROM SalesInvoice S (NOLOCK),
	#FilterRetailer R
	WHERE S.SalInvDate BETWEEN   @Pi_FromDate AND @Pi_Todate AND S.DlvSts > 3      
	AND   S.RtrValueClassId = R.RtrValueClassId AND R.Rtrid = S.RtrId 		  
	UNION ALL      
	SELECT   CtgmainId,F.Rtrid  FROM ReturnHeader R (NOLOCK),      
	#FilterRetailer F      
	WHERE R.ReturnDate BETWEEN   @Pi_FromDate AND @Pi_Todate AND R.Status = 0      
	AND  F.RtrValueClassId = R.RtrValueClassId    AND F.Rtrid = R.RtrId  
	)A  

	SELECT A.CtgMainId,Sum(Target) Target INTO #Target FROM InsTargetDetailsTrans A INNER JOIN #Rtr B ON A.RtrId = B.RtrId AND Userid = @Pi_UsrId 
	AND Ctgname <>'' AND A.CtgmainId=B.CtgMainId 
	GROUP BY A.CtgMainId
			  
	SELECT DISTINCT R.RtrId,RC.CtgMainId,RtrValueClassId,CtgName,CtgCode    
	INTO #FilterRetailer1      
	FROM Retailer R (NOLOCK),      
	#RtrCnt RVCM (NOLOCK),      
	RetailerValueClass RVC (NOLOCK),      
	RetailerCategory RC (NOLOCK),      
	RetailerCategoryLevel RCL (NOLOCK)      
	WHERE R.Rtrid = RVCM.RtrId AND RVCM.RtrValueClassId = RVC.RtrClassId      
	AND  RVC.CtgMainId=RC.CtgMainId AND  RCL.CtgLevelId=RC.CtgLevelId    
	
	
	 
	SELECT R.Rtrid,Schid,Prdid,CtgMainId,CtgName,CtgCode,CircularNo,SUM(ClmAmt) ClmAmt,CAST(0 AS NUMERIC(18,2))   CurMSales,
	CAST(0 AS NUMERIC(18,2))   L2MSales,0 Outlet ,CAST(0 AS NUMERIC(18,2))   MonTarget
	INTO #InstDiscount	
	FROM 
	(
	SELECT B.Rtrid,C.SchId,PrdId,CircularNo,SUM(DiscountPerAMount+FlatAmount) ClmAmt FROM #SalesInvoiceSchemeLineWise A 
	INNER JOIN Salesinvoice B ON A.SalId = B.SalId 
	INNER JOIN SchemeMaster C  ON C.Schid = A.Schid 
	INNER JOIN #Schemecirculardetails D ON C.CmpSchcode=D.CmpSchcode 
	INNER JOIN #FilterRetailer1 R ON B.RtrId = R.Rtrid AND B.RtrValueClassId = R.RtrValueClassId 
	GROUP BY B.RtrId ,CircularNo,C.SchId,PrdId
	UNION 
	SELECT RH.Rtrid,C.SchId,PrdId,CircularNo,-1*SUM(ReturnDiscountPerAmount+ReturnFlatAmount)ClmAmt  FROM #ReturnSchemelinedt RSF 
	INNER JOIN  ReturnHeader RH ON RH.ReturnId = RSF.ReturnId
	INNER JOIN SchemeMaster C  ON C.Schid = RSF.Schid 
	INNER JOIN #Schemecirculardetails D ON C.CmpSchcode=D.CmpSchcode 
	INNER JOIN #FilterRetailer1 R ON RH.RtrId = R.Rtrid AND RH.RtrValueClassId = R.RtrValueClassId 
	GROUP BY RH.RtrId,CircularNo ,C.SchId,PrdId
	)A INNER JOIN #FilterRetailer1 R ON A.RtrId = R.Rtrid
	GROUP BY R.Rtrid,Schid,Prdid,CtgMainId,CtgName,CtgCode ,CircularNo
	
	SELECT S.CtgMainId,CAST(SUM(S.Sales) AS NUMERIC(18,2)) Sales      
	INTO #CurrentSales1      
	FROM       
	(      
	SELECT R.CtgMainId,SUM(PrdNetAmount) Sales FROM SalesInvoice S (NOLOCK)
	INNER JOIN 	SalesInvoiceProduct SIP ON S.SalId = SIP.SalId 
	INNER JOIN  #FilterRetailer1 R  ON S.SalInvDate BETWEEN @Pi_FromDate AND @Pi_Todate AND S.DlvSts > 3      
	AND S.RtrId = R.RtrId AND S.RtrValueClassId = R.RtrValueClassId 
	INNER JOIN (SELECT DISTINCT Salid FROM #SalesInvoiceSchemeLineWise) SI ON S.SalId = SI.SalId AND SI.SalId=SIP.SalId
	GROUP BY R.CtgMainId      
	UNION ALL      
	SELECT F.CtgMainId,-1 * SUM(PrdNetAmt) FROM ReturnHeader R (NOLOCK) 
	INNER JOIN   ReturnProduct RP ON  R.ReturnID = RP.ReturnID      
	INNER JOIN #FilterRetailer1 F ON ReturnDate BETWEEN @Pi_FromDate AND @Pi_Todate AND R.Status = 0      
	AND F.RtrId = R.RtrId   AND R.RtrValueClassId = R.RtrValueClassId  
	INNER JOIN (SELECT DISTINCT ReturnId FROM #ReturnSchemelinedt) SI ON R.ReturnId = SI.ReturnId  and RP.ReturnId = SI.ReturnId   
	GROUP BY F.CtgMainId      
	) AS S GROUP BY S.CtgMainId   
	
	
	SELECT R.CtgMainId,COUNT(DISTINCT S.RtrId) Outlet      
	INTO #NoOfOutlet1      
	FROM SalesInvoice S (NOLOCK),      
	#FilterRetailer1 R      
	WHERE S.SalInvDate BETWEEN  @Pi_FromDate AND @Pi_Todate AND S.DlvSts > 3      
	AND S.RtrId = R.RtrId      
	GROUP BY R.CtgMainId  
		  
	--Last Two Month Sales      
	SELECT @InsToDate = DATEADD (D,-1,@Pi_FromDate)       
	SELECT @InsFromDate = DATEADD (MONTH,-2,@Pi_FromDate)
	SELECT S.CtgMainId,CAST(SUM(S.Sales) AS NUMERIC(18,2)) Sales      
	INTO #L2MSales1      
	FROM       
	(      
		SELECT R.CtgMainId,SUM(PrdNetAmount) Sales FROM SalesInvoice S (NOLOCK) 
		INNER JOIN 	SalesInvoiceProduct SI ON S.SalId = SI.SalId 
		INNER JOIN #FilterRetailer1 R ON S.SalInvDate BETWEEN  @InsFromDate AND @InsToDate AND S.DlvSts > 3      
		AND S.RtrId = R.RtrId      
		GROUP BY R.CtgMainId      
		UNION ALL      
		SELECT F.CtgMainId,-1 * SUM(PrdNetAmt) FROM ReturnHeader R (NOLOCK)
		INNER JOIN  ReturnProduct RP    ON  R.ReturnID = RP.ReturnID  
		INNER JOIN #FilterRetailer1 F      
		ON R.ReturnDate BETWEEN  @InsFromDate AND @InsToDate AND R.Status = 0      
		AND F.RtrId = R.RtrId    
		GROUP BY F.CtgMainId      
	) AS S GROUP BY S.CtgMainId 
	
		  
	UPDATE I SET I.CurMSales = C.Sales FROM #InstDiscount I (NOLOCK), #CurrentSales1 C (NOLOCK)      
	WHERE I.CtgMainId = C.CtgMainId 
		 
	UPDATE I SET I.L2MSales = C.Sales / 2  FROM #InstDiscount I (NOLOCK),#L2MSales1 C (NOLOCK)      
	WHERE I.CtgMainId = C.CtgMainId      
	UPDATE I SET I.Outlet = C.Outlet FROM #InstDiscount I (NOLOCK),#NoOfOutlet1 C (NOLOCK)      
	WHERE I.CtgMainId = C.CtgMainId   
	--SELECT DISTINCT B.RtrCtgMainId CtgMainid,SUM(Target) Target INTO #InsTarget FROM InsTargetHD A INNER JOIN InsTargetDetails B ON A.InsId = B.InsId 
	--WHERE TargetYear = @Pi_Year AND TargetMonth = @Pi_Month and Status = 1 GROUP BY RtrCtgMainId
	UPDATE A SET MonTarget = Target FROM #InstDiscount A INNER JOIN #Target B ON A.CtgMainid = B.CtgMainid
			 
	INSERT INTO TempInsTargetClaimDetails
	SELECT CtgName,@Pi_FromDate,@Pi_Todate,CircularNO,MonTarget,L2MSales,CurMSales,Outlet ,SUM(ClmAmt) ClmAmt,@Pi_UsrId,@Pi_Transid,1 FROM #InstDiscount
	GROUP BY CtgName,CircularNO,L2MSales,CurMSales,Outlet,MonTarget

	INSERT INTO TempInstTargetClaim_PrdWise
	SELECT Rtrid,Schid,Prdid,CtgMainId,ClmAmt,@Pi_UsrId,@Pi_Transid FROM #InstDiscount
	--SELECT * FROM TempInsTargetClaimDetails
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Proc_InsTargetClaimDetails' AND TYPE='P')
DROP PROCEDURE Proc_InsTargetClaimDetails
GO
--EXEC Proc_InsTargetClaimDetails 2020,5,1,504
CREATE PROCEDURE Proc_InsTargetClaimDetails
(
	@Pi_Year	INT,
	@Pi_Month	INT,
	@Pi_Usrid	INT,
	@Pi_Transid	INT
)
AS
/****************************************************************************
* PROCEDURE	:  Proc_InsTargetClaimDetails
* PURPOSE	:  TO LOAD ACHIEVED TARGET DETAILS
* DATE		:  07-11-2019
* CREATED	:  MOHANA S
* PMS NO	:  CRCRSTPAR0079
******************************************************************************
* DATE			AUTHOR		USERSTORYID		CR/BZ			DESCRIPTION
* 13-01-2020	MOHANA S	ILCRSTPAR7388	 SR				Sales Based on Retailer Channel
* 16-01-2020	MOHANA S	ILCRSTPAR7420	 BZ				Sales Based on defined retailer group level
* 05-02-2020	MOHANA S	ILCRSTPAR7731	 SR				AS PER CLIENT REQUEST, THE MONTARGET AND L2SALES LOGIC CHANGED
* 07-07-2020	MOHANA S	UAT CHANGES		 SR				INSTEAD OF GROSS AMOUNT, NET AMOUNT HAS BEEN CHANGED
*******************************************************************************/
BEGIN
SET NOCOUNT ON
		DELETE FROM  TempInsTargetClaimDetails 
		DELETE FROM TempInstTargetClaim_PrdWise
		DECLARE @FromDate  DATETIME
		DECLARE @ToDate	   DATETIME
		  
		SELECT @FromDate= DATEADD(MONTH, (@Pi_Month)-1,DATEADD(YEAR, @Pi_Year - 1900, 0))
		SELECT @ToDate = DATEADD(dd, -1, DATEADD(MONTH, @Pi_Month,DATEADD(YEAR, @Pi_Year - 1900, 0))) 
		  
		DECLARE @TargetNo AS INT      
		DECLARE @InsFromDate AS DATETIME       
		DECLARE @InsToDate  AS DATETIME      
		DECLARE @Year AS INT       
		DECLARE @Month  AS INT      
		DECLARE @MonthName as Nvarchar(100) 
		      
		SELECT   TOP 1 @TargetNo = InsId,@Month=TargetMonth,@Year=TargetYear,
		@InsFromDate = CAST(TargetYear AS VARCHAR(5))+ '-' + CAST(TargetMonth AS VARCHAR(2)) + '-01',      
		@InsToDate = DATEADD(DD,-1,DATEADD(MM,1,CAST(TargetYear AS VARCHAR(5))+ '-' + CAST(TargetMonth AS VARCHAR(2)) + '-01'))       
		FROM InsTargetHD H (NOLOCK)       
		INNER JOIN  JCMonth A  ON H.TargetMonth = A.JcmJc      
		INNER JOIN    JCMast b on a.JcmId = b.JcmId AND H.TargetYear =  B.JcmYr      
		WHERE A.JcmEdt  BETWEEN @FromDate AND @ToDate AND H.[Status] = 1       
		ORDER BY InsId DESC 
		 
		SELECT @MonthName=MonthName FROM MonthDt (NOLOCK) WHERE MonthId=@Month  
		UPDATE InsTargetHD SET TargetMonth=EffFromMonthId WHERE TargetMonth=0   
		   
		EXEC Proc_LoadingInstitutionsTarget @Pi_Year,@Month,@MonthName,@Pi_UsrId  
		  
		SELECT CtgMainId,CtgName,@InsFromDate FromDate,@InsToDate ToDate,SUM([Target]) [Target],SUM(ClmAmount) DiscAmount,      
		CAST(0 AS NUMERIC(18,6)) L2MSales,CAST(0 AS NUMERIC(18,6)) CurMSales,CAST(0 AS NUMERIC(18,0)) Outlet      
		INTO #Institutions      
		FROM InsTargetDetailsTrans (NOLOCK) WHERE CtgName <>'' AND UserId  =  @Pi_UsrId--  AND TargetAch >0
		GROUP BY CtgMainId,CtgName     
				 
		--SELECT  C.CtgMainId AS ChnId,B.CtgMainID As DfnId INTo #Ctg1 FROM #Institutions A 
		--INNER JOIN RetailerCategory B ON A.CtgMainId = B.CtgMainId 
		--INNER JOIN RetailerCategory C ON B.CtgLinkid = C.CtgMainId 
		--SELECT DISTINCT B.CtgMainId,D.RtrClassId,A.DfnId  INTO  #Category FROM #Ctg1 A 
		--INNER JOIN RetailerCategory B ON B.CtgLinkid = A.ChnId 
		--INNER JOIn RetailerValueClass D ON B.CtgMainId = D.CtgMainId 
		--SELECT DISTINCT R.RtrId,C.CtgMainId,RtrValueClassId,DfnId     
		--INTO #FilterRetailer      
		--FROM Retailer R (NOLOCK),      
		--SAlesinvoice S (NOLOCK),      
		--#Category C WHERE R.Rtrid = S.RtrId AND C.RtrClassId = S.RtrValueClassId  
		--AND S.SalInvDate BETWEEN @InsFromDate AND @InsToDate AND S.DlvSts > 3       
				 
		--INSERT INTO #FilterRetailer
		--SELECT DISTINCT R.RtrId,C.CtgMainId,RtrValueClassId,DfnId          
		--FROM Retailer R (NOLOCK),      
		--ReturnHeader S (NOLOCK),    
		--#Category C WHERE R.Rtrid = S.RtrId AND C.RtrClassId = S.RtrValueClassId  
		--AND S.ReturnDate BETWEEN @InsFromDate AND @InsToDate AND Status = 0 
		--AND NOT EXISTS (SELECT Rtrid,RtrValueClassId FROM #FilterRetailer B WHERE B.RtrId = S.RtrId AND S.RtrValueClassId = B.RtrValueClassId )
		
		SELECT 	A.CtgMainId,CtgLinkId As ChnId,RtrClassId as RtrValueClassId,Rtrid INTO #FilterRetailer FROM (
		SELECT DISTINCT D.CtgMainId,D.CtgLinkId,B.Rtrid
		FROM SalesInvoice A 
		INNER JOIN insTargetDetailsTrans b on a.rtrid = b.RtrId 
		AND Salinvdate BETWEEN  @InsFromDate AND @InsToDate AND A.DlvSts > 3  
		inner join RetailerValueClass C ON A.RtrValueClassId = C.RtrClassId 
		INNER JOIN RetailerCategory D ON C.CtgMainId = D.CtgMainId 
		WHERE UserId = @Pi_UsrId and B.CtgName <>'' 
		UNION
		SELECT DISTINCT D.CtgMainId ,D.CtgLinkId,B.Rtrid
		FROM ReturnHeader  A INNER JOIN insTargetDetailsTrans b on a.rtrid = b.RtrId 
		AND ReturnDate BETWEEN  @InsFromDate AND @InsToDate AND  Status = 0   
		inner join RetailerValueClass C ON A.RtrValueClassId = C.RtrClassId 
		INNER JOIN RetailerCategory D ON C.CtgMainId = D.CtgMainId 
		WHERE UserId = @Pi_UsrId and B.CtgName <>'' )A INNER JOIN RetailerValueClass B ON A.CtgMainId = B.CtgMainId 
		
					
		DELETE C FROM #FilterRetailer C WHERE NOT EXISTS  (
		SELECT CtgLinkId  FROM #Institutions A INNER JOIN RetailerCategory B ON A.CtgMainId = B.CtgMainId 
		WHERE B.CtgLinkId = C.ChnId )

		SELECT DISTINCT CtgmainId,RtrId INTO #Rtr FROM (
		SELECT  CtgmainId,R.RtrId  FROM SalesInvoice S (NOLOCK),
		#FilterRetailer R
		WHERE S.SalInvDate BETWEEN @InsFromDate AND @InsToDate AND S.DlvSts > 3      
		AND   S.RtrValueClassId = R.RtrValueClassId AND R.Rtrid = S.RtrId 		  
		UNION ALL      
		SELECT   CtgmainId,F.Rtrid  FROM ReturnHeader R (NOLOCK),      
		#FilterRetailer F      
		WHERE R.ReturnDate BETWEEN @InsFromDate AND @InsToDate AND R.Status = 0      
		AND  F.RtrValueClassId = R.RtrValueClassId    AND F.Rtrid = R.RtrId  
		)A  
		   
		SELECT A.CtgMainId,Sum(Target) Target INTO #Target FROM InsTargetDetailsTrans A 
		INNER JOIN #Rtr B ON A.RtrId = B.RtrId AND Ctgname <>'' AND A.CtgmainId=B.CtgMainId AND Userid = @Pi_Usrid 
		GROUP BY A.CtgMainId
			
		UPDATE C SET Target =A.Target  FROM #Institutions C INNER JOIN #Target A ON A.CtgmainId=C.CtgMainId  
		
		--SELECT S.CtgMainId,CAST(SUM(S.Sales) AS NUMERIC(18,2)) Sales      
		--INTO #CurrentSales      
		--FROM       
		--(      
		--SELECT  CtgMainId,SUM(S.SalGrossAmount) Sales FROM SalesInvoice S (NOLOCK),
		--#FilterRetailer R
		--WHERE S.SalInvDate BETWEEN @InsFromDate AND @InsToDate AND S.DlvSts > 3      
		--AND   S.RtrValueClassId = R.RtrValueClassId AND R.Rtrid = S.RtrId 
		--GROUP BY CtgMainId     
		--UNION ALL      
		--SELECT   CtgMainId,-1 * SUM(R.RtnGrossAmt) FROM ReturnHeader R (NOLOCK),      
		--#FilterRetailer F      
		--WHERE R.ReturnDate BETWEEN @InsFromDate AND @InsToDate AND R.Status = 0      
		--AND  F.RtrValueClassId = R.RtrValueClassId    AND F.Rtrid = R.RtrId     
		--GROUP BY CtgMainId      
		--) AS S GROUP BY CtgMainId 
		
		CREATE TABLE  #CurrentSales
		(
			CtgMainId	INT,
			Sales		NUMERIC(18,2)
		)
		
		IF EXISTS(SELECT * FROM InsTargetHD WHERE TargetMonth=@Month and TargetYear=@Year and Confirm=1)
		BEGIN
			INSERT INTO #CurrentSales(CtgMainId,Sales)
			SELECT C.RtrCtgMainId,SUM(TotalSales) AS Sales FROM InsTargetHD A 
			INNER JOIN InsTargetdetails C ON C.InsId=A.InsId
			INNER JOIN InsTargetdetailsAch B ON  A.insId=B.InsId and B.insId=C.InsId AND B.RtrId=C.RtrId
			WHERE A.TargetMonth=@Month and A.TargetYear=@Year and Confirm=1
			GROUP BY C.RtrCtgMainId
		
		END
		ELSE
		BEGIN
			INSERT INTO #CurrentSales(CtgMainId,Sales)
			SELECT S.CtgMainId,CAST(SUM(S.Sales) AS NUMERIC(18,2)) Sales      
			FROM       
			(      
				SELECT  CtgMainId,SUM(SI.PrdNetAmount) Sales FROM SalesInvoice S (NOLOCK) 
				INNER JOIN SalesInvoiceProduct SI ON S.SalId = SI.SalId 
				INNER JOIN #FilterRetailer R ON R.RtrId =S.RtrId
				WHERE S.SalInvDate BETWEEN @InsFromDate AND @InsToDate AND S.DlvSts > 3      
				AND   S.RtrValueClassId = R.RtrValueClassId AND R.Rtrid = S.RtrId 
				GROUP BY CtgMainId     
				UNION ALL      
				SELECT   CtgMainId,-1 * SUM(PrdNetAmt) FROM ReturnHeader R (NOLOCK) 
				INNER JOIN   ReturnProduct RP    ON  R.ReturnID = RP.ReturnID  
				INNER JOIN  #FilterRetailer F ON F.Rtrid = R.RtrId		  
				WHERE R.ReturnDate BETWEEN @InsFromDate AND @InsToDate AND R.Status = 0      
				AND  F.RtrValueClassId = R.RtrValueClassId    AND F.Rtrid = R.RtrId   AND  R.ReturnID = RP.ReturnID  
				GROUP BY CtgMainId      
			) AS S GROUP BY CtgMainId  
		END
					
		SELECT CtgMainId,COUNT(DISTINCT S.RtrId) Outlet      
		INTO #NoOfOutlet      
		FROM SalesInvoice S (NOLOCK),      
		#FilterRetailer R      
		WHERE S.SalInvDate BETWEEN @InsFromDate AND @InsToDate AND S.DlvSts > 3      
		AND S.RtrValueClassId = R.RtrValueClassId    AND R.Rtrid = S.RtrId   
		GROUP BY R.CtgMainId  
		  
		--Last Two Month Sales      
		SELECT @InsToDate = DATEADD (D,-1,@InsFromDate)       
		SELECT @InsFromDate = DATEADD (MONTH,-2,@InsFromDate)       
		SELECT S.CtgMainId,CAST(SUM(S.Sales) AS NUMERIC(18,2)) Sales      
		INTO #L2MSales      
		FROM       
		(      
			SELECT R.CtgMainId,SUM(PrdNetAmount) Sales FROM SalesInvoice S (NOLOCK) 
			INNER JOIN 	SalesInvoiceProduct SI ON S.SalId = SI.SalId 
			INNER JOIN #FilterRetailer R ON R.RtrId =S.RtrId
			WHERE S.SalInvDate BETWEEN @InsFromDate AND @InsToDate AND S.DlvSts > 3      
			AND S.RtrValueClassId = R.RtrValueClassId  AND S.Rtrid = R.RtrId 
			GROUP BY R.CtgMainId      
			UNION ALL      
			SELECT F.CtgMainId,-1 * SUM(PrdNetAmt) FROM ReturnHeader R (NOLOCK)
			INNER JOIN  ReturnProduct RP    ON  R.ReturnID = RP.ReturnID  
			INNER JOIN  #FilterRetailer F ON F.Rtrid = R.RtrId		  
			WHERE R.ReturnDate BETWEEN @InsFromDate AND @InsToDate AND R.Status = 0      
			AND F.RtrValueClassId = R.RtrValueClassId       AND F.Rtrid = R.RtrId      AND  R.ReturnID = RP.ReturnID  
			GROUP BY F.CtgMainId      
		) AS S GROUP BY S.CtgMainId
		--INSERT INTO #Institutions
		--SELECT A.CtgMainId ,B.CtgName,@InsFromDate , @InsToDate,0,0,0,0,0 FROM #CurrentSales A 
		--INNER JOIN RetailerCategory B ON A.CtgMainId = B.CtgMainId 
		--WHERE NOT EXISTS (SELECT CtgMainId FROM #Institutions B WHERE A.CtgMainId = B.CtgMainId)
		 
		UPDATE I SET I.CurMSales = C.Sales FROM #Institutions I (NOLOCK), #CurrentSales C (NOLOCK)      
		WHERE I.CtgMainId = C.CtgMainId 
		 
		UPDATE I SET I.L2MSales = C.Sales / 2  FROM #Institutions I (NOLOCK),#L2MSales C (NOLOCK)      
		WHERE I.CtgMainId = C.CtgMainId      
		UPDATE I SET I.Outlet = C.Outlet FROM #Institutions I (NOLOCK),#NoOfOutlet C (NOLOCK)      
		WHERE I.CtgMainId = C.CtgMainId   
			 
		--SELECT CtgMainId ,CircularNo,Max(CreatedDate) CreatedDate INTO #Circular FROM SchemeClaimCircular A --WHERE  
		--INNER JOIN RetailerCategory B ON A.AttrCode = B.CtgCode AND A.AttrType<>'Class'
		--AND ((@FromDate  BETWEEN  SchValidFrom AND SchValidTill  ) OR (@ToDate  BETWEEN  SchValidFrom AND SchValidTill)) 
		--WHERE ClaimType='Institutional Claim' GROUP BY CtgMainId ,CircularNo
		 
			 
		SELECT CtgMainId,AttrCode,Max(CreatedDate) CreatedDate  INTO #MaxDate  FROM SchemeClaimCircular A --WHERE  
		INNER JOIN RetailerCategory B ON A.AttrCode = B.CtgCode AND A.AttrType<>'Class'
		AND ((@FromDate  BETWEEN  SchValidFrom AND SchValidTill  ) OR (@ToDate  BETWEEN  SchValidFrom AND SchValidTill)) 
		WHERE ClaimType='Institutional Claim' GROUP BY CtgMainId,AttrCode 
			
		SELECT CtgMainId,CircularNo  INTO #Circular FROM SchemeClaimCircular A INNER JOIN #MaxDate B ON A.AttrCode=B.AttrCode AND A.CreatedDate = B.CreatedDate
		select CtgMainId,CtgName,FromDate,ToDate,Target,DiscAmount,L2MSales,CurMSales,Outlet,CAST ('' AS varchar(100)) CircularNo
		INTO #Institutions1
		from #Institutions 
		UPDATE A SET CircularNo =B.CircularNo   FROM #Institutions1 A INNER JOIN  #Circular B ON A.CTGMAINID = B.CTGMAINID 	
		INSERT INTO TempInsTargetClaimDetails
		SELECT CtgName [Name Of the Category],convert(varchar(10),FromDate,121) [From],convert(varchar(10),ToDate,121) [To],ISNULL(CircularNo,'') ,[Target] [Monthly Target],      
		L2MSales [Last 2 Months Avg Sales],CurMSales [Current Month],Outlet [No of Incentive Outlets],DiscAmount [Total Discount Amount],@Pi_Usrid,@Pi_Transid,0    
		FROM #Institutions1 A(NOLOCK)   
	---	INNER JOIN #Circular B ON A.CTGMAINID = B.CTGMAINID 
				 
	DELETE FROM TempInsTargetClaimDetails WHERE CurMonth =0 AND ClmAmount = 0 AND MonTarget = 0 AND Lst2MonAvgSal = 0
		
	DELETE FROM TempInsTargetClaimDetails WHERE ClmAmount = 0
	EXEC Proc_InStBaseDiscountClaim @Pi_Year,@Pi_Month,@Pi_Usrid,@Pi_Transid
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_LoadingInstitutionsTarget' AND TYPE='P')
DROP PROCEDURE Proc_LoadingInstitutionsTarget
GO
 --EXEC PROC_LOADINGINSTITUTIONSTARGET 2018,11,'november',2
CREATE PROCEDURE Proc_LoadingInstitutionsTarget
(
	@Year AS INT,
	@Month AS INT,
	@MonthName AS Nvarchar(50),
	@UserId AS INT
)
AS
/*********************************
* PROCEDURE		: Proc_SMIncentiveValidateNProcess
* PURPOSE		: 
* CREATED		: Aravindh Deva C
* CREATED DATE	: 07/03/2016
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date}		{developer}  {brief modification description}
* DATE          AUTHOR       CR/BZ USER     STORY ID           DESCRIPTION                             
*************************************************************************************************************************************    
17-11-2018      Lakshman M		BZ		  ILCRSTPAR5207        target Achivemment base discount amount zero values not considered in core stocky.  
11-09-2019      lakshman M      BZ        ILCRSTPAR5900        while download target achivement max values only considered in report. script validation included.        
17-03-2020		MOHANA S		BZ		  ILCRSTPAR8293			Taken existing category
 25-05-2020	  Mohana S			BZ			PARCS202100013		Category taken based on Transaction	
  11-07-2020	  MOHANA S			BZ			SAP RELEASE			Commented Based Ach Check
*************************************************************************************************************************************/
BEGIN
SET NOCOUNT ON
	
		DELETE T FROM InsTargetDetailsTrans T (NOLOCK) WHERE UserId = @UserId
		DECLARE @Confirm TINYINT
		
		DECLARE @FromDate DATETIME
		DECLARE @ToDate DATETIME
		
	
		SELECT @FromDate = CONVERT(Nvarchar(10),CAST(@Year AS VARCHAR(5))+ '-' + CAST(@Month AS VARCHAR(2)) + '-01',121)
		SELECT @ToDate = DATEADD(DD,-1,DATEADD(MM,1,@FromDate))
		
		DECLARE  @InsDetails TABLE
		(
		 Insid Int,
		 Rtrid int,
		 Achievement Numeric(18,6),
		 BaseAch Numeric(18,6),
		 TargetAch Numeric(18,6),
		 ValBaseAch Numeric(18,6),
		 ValTargetAch Numeric(18,6),
		 ClmAmount Numeric(18,6),
		 Liability Numeric(18,6),
		 LastModDate Datetime
		 )
		 
		 CREATE TABLE #Institution
		 (
		  CtgMainId Int,
		  CtgName Nvarchar(100),
		  Rtrid int,
		  RtrCode Nvarchar(50),
		  RtrName Nvarchar(100),
		  AvgSal Numeric(18,6),
		  Target Numeric(18,6),
		  Achievement Numeric(18,6),
		  BaseAch Numeric(18,6),
		  TargetAch Numeric(18,6),
		  ValBaseAch Numeric(18,6),
		  ValTargetAch Numeric(18,6),
		  ClmAmount Numeric(18,6),
		  Liability Numeric(18,6),
		  CSAch Numeric(18,6),
		  Insid int,
		  Flag Int
		  )
		  
		INSERT INTO #Institution
		SELECT Distinct CtgMainId,CtgName,Rtrid,RtrCode,RtrName,AvgSal,[Target],0.00 as Achievement,0.00 as BaseAch,0.00 as TargetAch,
		0.00 as ValBaseAch,0.00 as ValTargetAch,0.00 as ClmAmount,0.00 as Liability,0.00 AS CSAch,Insid,0 as Flag  FROM
		(SELECT DISTINCT D.CtgMainId,D.CtgName,C.RtrId,C.RtrCode,C.RtrName,B.AvgSal,B.[Target],H.Insid
		FROM InsTargetHD H (NOLOCK)
		--INNER JOIN InsTargetDetails D (NOLOCK) ON H.InsId = D.InsId
		--left outer JOIN RetailerCategory C (NOLOCK) ON D.RtrCtgMainId = C.CtgMainId
		--LEFT OUTER JOIN RetailerValueClass V (NOLOCK) ON C.CtgMainId = V.CtgMainId
		--LEFT OUTER JOIN RetailerValueClassMap M (NOLOCK) ON V.RtrClassId = M.RtrValueClassId
		--LEFT OUTER JOIN Retailer R (NOLOCK) ON M.RtrId = R.RtrId AND D.RtrId = R.RtrId
		inner join InsTargetDetails B ON H.InsId =B.InsId 
		inner join Retailer C ON B.RtrId =C.Rtrid
		--LEFT OUTER JOIN RetailerValueClassMap M (NOLOCK) ON C.RtrId = M.RtrId
		--LEFT OUTER JOIN RetailerValueClass V (NOLOCK) ON  V.RtrClassId  =M.RtrValueClassId ILCRSTPAR8293
		left outer JOIN RetailerCategory D (NOLOCK) ON  D.CtgMainId =B.RtrCtgMainId -- ILCRSTPAR8293
		WHERE H.EffFromMonthId = @Month and H.TargetYear=@Year AND H.Status =1
		--WHERE H.EffFromMonthId <= @Month and H.TargetYear=@Year
		--UNION ALL
		--SELECT DISTINCT C.CtgMainId,C.CtgName,R.RtrId,R.RtrCode,R.RtrName,D.AvgSal,D.[Target],H.Insid
		--FROM InsTargetHD H (NOLOCK)
		--INNER JOIN InsTargetDetails D (NOLOCK) ON H.InsId = D.InsId
		--INNER JOIN RetailerCategory C (NOLOCK) ON D.RtrCtgMainId = C.CtgMainId
		--INNER JOIN RetailerValueClass V (NOLOCK) ON C.CtgMainId = V.CtgMainId
		--INNER JOIN RetailerValueClassMap M (NOLOCK) ON V.RtrClassId = M.RtrValueClassId
		--INNER JOIN Retailer R (NOLOCK) ON M.RtrId = R.RtrId AND D.RtrId = R.RtrId
		--WHERE H.EffToMonthId >= @Month and H.ToTargetYear=@Year		
		) A
		ORDER BY A.CtgName,A.RtrName

		SELECT RTRID,C.CtgMainId INTO #TEMPCTG  FROM #Institution A INNER JOIN RetailerCategory  B ON A.CTGMAINID = B.CTGMAINID
		INNER JOIN RetailerCategory C ON C.CTGMAINID = B.CtgLinkId 


		SELECT DISTINCT RTRCLASSID INTO #DEFINEDCTG FROM RETAILERVALUECLASS A  
		INNER JOIN RetailerCategory  B ON A.CTGMAINID = B.CTGMAINID
		INNER JOIN RetailerCategory C ON C.CTGMAINID = B.CtgLinkId 
		INNER JOIN #TEMPCTG T ON T.CtgMainId = C.CtgMainId 
		
			SELECT S.RtrId,CAST(SUM(S.Sales) AS NUMERIC(18,2)) Sales
			INTO #SalesAsAchievement
			FROM 
			(
			SELECT I.RtrId,SUM(S.SalGrossAmount) Sales FROM #Institution I (NOLOCK)
			INNER JOIN SalesInvoice S (NOLOCK) ON I.RtrId = S.RtrId
			INNER JOIN #DEFINEDCTG D ON D.RtrClassId = S.RtrValueClassId 
			WHERE S.SalInvDate BETWEEN @FromDate AND @ToDate AND S.DlvSts > 3
			GROUP BY I.RtrId
			UNION ALL
			SELECT I.RtrId,-1 * SUM(R.RtnGrossAmt) FROM #Institution I (NOLOCK)
			INNER JOIN ReturnHeader R (NOLOCK) ON I.RtrId = R.RtrId
			INNER JOIN #DEFINEDCTG D ON D.RtrClassId = R.RtrValueClassId 
			WHERE R.ReturnDate BETWEEN @FromDate AND @ToDate AND R.Status = 0
			GROUP BY I.RtrId
			) AS S GROUP BY S.RtrId
			
			INSERT INTO @InsDetails (Insid,Rtrid,Achievement,BaseAch,TargetAch,ValBaseAch,ValTargetAch,ClmAmount,Liability,LastModDate)
			SELECT DISTINCT Insid,Rtrid,max(Achievement) Achievement,BaseAch,max(TargetAch) TargetAch,max(ValBaseAch) ValBaseAch,
			max(ValTargetAch)ValTargetAch,max(ClmAmount)ClmAmount,Liability,max(lastmoddate)
			FROM InsTargetDetailsAch (Nolock)
			WHERE TargetYear=@Year and TargetMonth=@MonthName
			and Insid In (SELECT Distinct Insid from #Institution)	and TargetYear=@Year and TargetMonth =@MonthName 
			---and BaseAch <>'0.000000' -------- Added by lakshman M Dated On PMS ID: ILCRSTPAR5207	
			GROUP BY Insid,Rtrid,BaseAch,Liability		
			
								
			UPDATE I SET I.Achievement=A.Achievement,
			I.BaseAch=A.BaseAch,I.TargetAch=A.TargetAch,I.ValBaseAch=A.ValBaseAch,I.ValTargetAch=A.ValTargetAch,
			I.ClmAmount=A.ClmAmount,I.Liability=A.Liability,Flag=1
			FROM #Institution I (NOLOCK) INNER JOIN @InsDetails A
			ON I.Insid=A.Insid and I.Rtrid=A.Rtrid
						
			UPDATE I SET I.CSAch = A.Sales -- IF NEGATIVE?
			FROM #Institution I (NOLOCK),
			#SalesAsAchievement A (NOLOCK)
			WHERE I.RtrId = A.RtrId
	
		
		
		UPDATE I SET 
		I.AvgSal		= CAST(I.AvgSal AS NUMERIC(18,2)),
		I.[Target]		= CAST(I.[Target] AS NUMERIC(18,2)),
		I.Achievement	= CAST(I.Achievement AS NUMERIC(18,2)),
		I.BaseAch		= CAST(I.BaseAch AS NUMERIC(18,2)),
		I.TargetAch		= CAST(I.TargetAch AS NUMERIC(18,2)),
		I.ValBaseAch	= CAST(I.ValBaseAch AS NUMERIC(18,2)),
		I.ValTargetAch	= CAST(I.ValTargetAch AS NUMERIC(18,2)),
		I.ClmAmount		= CAST(I.ClmAmount AS NUMERIC(18,2)),
		I.Liability		= CAST(I.Liability AS NUMERIC(18,2)),
		I.CSAch		    = CAST(I.CSAch AS NUMERIC(18,2))
		FROM #Institution I (NOLOCK)		
		
		INSERT INTO InsTargetDetailsTrans (SlNo,CtgMainId,CtgName,RtrId,RtrCode,RtrName,AvgSal,[Target],
		CSAchievement,Achievement,BaseAch,TargetAch,ValBaseAch,ValTargetAch,ClmAmount,Liability,UserId,Flag)
		
		SELECT SlNo,CtgMainId,CtgName,RtrId,RtrCode,RtrName,AvgSal,[Target],
		CSAch,Achievement,BaseAch,TargetAch,ValBaseAch,ValTargetAch,ClmAmount,Liability,@UserId UserId,Flag
		FROM
		(
		SELECT ROW_NUMBER() OVER (PARTITION BY CtgMainId ORDER BY CtgName,RtrCode) SlNo,
		CtgMainId,CtgName,RtrId,RtrCode,RtrName,AvgSal,[Target],
		CSAch,Achievement,BaseAch,TargetAch,ValBaseAch,ValTargetAch,ClmAmount,Liability,Flag 
		FROM #Institution
		UNION ALL
		SELECT 9999 SlNo,CtgMainId,'ZZZZZZZZ' CtgName,0 RtrId,'ZZZZZZZZ' RtrCode,'Total' RtrName,SUM(AvgSal) AvgSal,SUM([Target]) [Target],
		sum(CSAch) CSAch,SUM(Achievement) Achievement,SUM(BaseAch) BaseAch,SUM(TargetAch) TargetAch,SUM(ValBaseAch) ValBaseAch,SUM(ValTargetAch) ValTargetAch,
		SUM(ClmAmount) ClmAmount,SUM(Liability),1 as Flag 
		FROM #Institution ROLLUP
		GROUP BY CtgMainId
		) Consolidated ORDER BY CtgMainId,RtrCode
		
		UPDATE I SET CtgName = '',RtrCode = ''
		FROM InsTargetDetailsTrans I (NOLOCK) WHERE SlNo = 9999
END
GO
IF EXISTS (SELECT *FROM  SYSOBJECTS WHERE NAME ='Proc_GR_RetailerwisePrdwisesalesandvol' AND TYPE='P')
DROP PROCEDURE Proc_GR_RetailerwisePrdwisesalesandvol
GO
CREATE PROCEDURE Proc_GR_RetailerwisePrdwisesalesandvol
(
	@Pi_RptName		NVARCHAR(100),
	@Pi_FromDate	DATETIME,
	@Pi_ToDate		DATETIME,
	@Pi_Filter1		NVARCHAR(100),
	@Pi_Filter2		NVARCHAR(100),
	@Pi_Filter3		NVARCHAR(100),
	@Pi_Filter4		NVARCHAR(100),
	@Pi_Filter5		NVARCHAR(100),
	@Pi_Filter6		NVARCHAR(100)
)
AS 
/*****************************************************************************************************************************
 DATE          AUTHOR       CR/BZ USER     STORY ID           DESCRIPTION                             
*************************************************************************************************************************************    
15-05-2020	  Mohana S			BZ			PARCS202100013		Category taken based on Transaction	
*************************************************************************************************************************************/
BEGIN

--EXEC Proc_GR_RetailerwisePrdwisesalesandvol 'Billwise Productwise Sales','2020-05-15','2020-05-15','','','','','',''
		SET @Pi_FILTER1='%'+ISNULL(@Pi_FILTER1,'')+'%'        
		SET @Pi_FILTER2='%'+ISNULL(@Pi_FILTER2,'')+'%'        
		SET @Pi_FILTER3='%'+ISNULL(@Pi_FILTER3,'')+'%'        
		SET @Pi_FILTER4='%'+ISNULL(@Pi_FILTER4,'')+'%'        
		SET @Pi_FILTER5='%'+ISNULL(@Pi_FILTER5,'')+'%'  
		SET @Pi_FILTER6='%'+ISNULL(@Pi_FILTER6,'')+'%'      
	
	
	SELECT Salid,RtrId,RtrValueClassId INTO #SalesinvoiceRtr  FROM Salesinvoice WHERE SALINVDATE BETWEEN @PI_fROMDATE AND @PI_TODATE AND DLVSTS in (4,5)
	 

	SELECT Salid,RtrId,RtrValueClassId ,L3,L2,L1,L1+L2+L3 HashProducts INTO #SalesRetailer FROM (
	SELECT Salid,RtrId,RtrValueClassId,D.CtgCode+ ':' + D.CtgName L3, C.CtgCode+ ':' + C.CtgName L2,B.ValueClassCode+ ':' + B.ValueClassName L1
	FROM #SalesinvoiceRtr A INNER JOIN RetailerValueClass B ON A.RtrvalueClassId = B.RtrCLassid
	INNER JOIN RetailerCategory C ON B.CtgMainID = C.CtgMainId
	INNER JOIN RetailerCategory D ON D.CtgMainId = C.CtgLinkId AND A.RtrvalueClassId>0
	UNION ALL
	SELECT Salid,A.RtrId,RtrValueClassId,HIERARCHY3CAP L3,HIERARCHY2CAP L2 ,HIERARCHY1CAP L1  FROM #SalesinvoiceRtr A 
	INNER JOIN TBL_GR_BUILD_RH B ON A.Rtrid = B.Rtrid AND A.RtrvalueClassId=0
	)A
	
	
	SELECT a.* INTO #SALINV FROM SALESINVOICE A,ROUTEMASTER B, SALESMAN C, RETAILER D  ,TBL_GR_BUILD_RH E
	WHERE SALINVDATE BETWEEN @PI_fROMDATE AND @PI_TODATE AND A.RMID=B.RMID AND B.RMNAME LIKE @PI_FILTER5 and E.RTRID=A.RTRID AND 
    C.SMID=A.SMID AND C.SMNAME LIKE @PI_FILTER1 AND A.SALINVNO LIKE @PI_FILTER3 AND A.RTRID=D.RTRID AND D.RTRNAME LIKE @PI_FILTER4 AND E.HAShPRODUCTS LIKE @PI_FILTER6
  
    SELECT A.* INTO #SALESINVOICEPRODUCT FROM SALESINVOICEPRODUCT A,TBL_GR_BUILD_PH C, #SALINV D
	WHERE A.SALID=D.SALID AND A.PRDID=C.PRDID AND 	HASHPRODUCTS LIKE @PI_FILTER2 

		SELECT     'Retailerwise ' SheetCaption,
		S.L3 [Retailer Hierarchy 1] ,
		S.L2 [Retailer Hierarchy 2], 
		S.L1 [Retailer Hierarchy 3] ,
		R.RtrCode [Retailer Code], 
		R.RtrName [Retailer Name], 
		P.PrdCCode, P.PrdDCode, P.PrdName
		,cast(sum(B.BaseQty) as int) [Qty Sold]
		,sum(B.PrdGrossAmount) [Gross Amount]
		,sum(B.PrdNetAmount) [Net Amount] 
		INTO #TEMP
		FROM  #salinv A
		INNER JOIN #salesinvoiceproduct B ON A.SalId = B.SalId INNER JOIN
		#SalesRetailer S ON A.RtrId = S.RTRID AND A.SALID =S.SALID
		INNER JOIN Product P ON B.PrdId = P.PrdId
		INNER JOIN Retailer R ON R.RtrId = S.RtrId AND A.RtrId = R.RtrId 
		GROUP BY  S.L3,S.L2,S.L1,R.RTRCODE, R.RtrName,P.PrdCCode, P.PrdDCode, P.PrdName
		order by rtrcode,RtrName,prdccode

INSERT INTO #TEMP SELECT ' Retailerwise','Totals','','','','','','','',Sum([Qty Sold]),Sum([Gross Amount]),sum([Net Amount]) from #temp
Select * from #temp order by SheetCaption

END
GO
IF EXISTS (SELECT *FROM  SYSOBJECTS WHERE NAME ='Proc_GR_CrossTabRHandPH' AND TYPE='P')
DROP PROCEDURE Proc_GR_CrossTabRHandPH
GO
CREATE PROCEDURE Proc_GR_CrossTabRHandPH
(
	@Pi_RptName		NVARCHAR(100),
	@Pi_FromDate	DATETIME,
	@Pi_ToDate		DATETIME,
	@Pi_Filter1		NVARCHAR(100),
	@Pi_Filter2		NVARCHAR(100),
	@Pi_Filter3		NVARCHAR(100),
	@Pi_Filter4		NVARCHAR(100),
	@Pi_Filter5		NVARCHAR(100),
	@Pi_Filter6		NVARCHAR(100)
)
AS 
/*****************************************************************************************************************************
 DATE          AUTHOR       CR/BZ USER     STORY ID           DESCRIPTION                             
*************************************************************************************************************************************    
25-05-2020	  Mohana S			BZ			PARCS202100013		Category taken based on Transaction	
*************************************************************************************************************************************/
BEGIN
	DECLARE @LVL INT
	DECLARE @PHLEVEL VARCHAR(7500)
	DECLARE @PHLEVEL2 VARCHAR(7500)


	DECLARE @SQL_STR1 VARCHAR(7500)
	DECLARE @SQL_STR2 VARCHAR(7500)
	DECLARE @CAPHLEVEL VARCHAR(7500)
--EXEC Proc_GR_CrossTabRHandPH 'Retailer Product Analysis','2020-05-15','2020-05-15','','','','','',''
		SET @Pi_FILTER1='%'+ISNULL(@Pi_FILTER1,'')+'%'        
		SET @Pi_FILTER2='%'+ISNULL(@Pi_FILTER2,'')+'%'        
		--SET @Pi_FILTER3='%'+ISNULL(@Pi_FILTER3,'')+'%'        
		SET @Pi_FILTER4='%'+ISNULL(@Pi_FILTER4,'')+'%'        
		SET @Pi_FILTER5='%'+ISNULL(@Pi_FILTER5,'')+'%'  
		SET @Pi_FILTER6='%'+ISNULL(@Pi_FILTER6,'')+'%'  
		SELECT @LVL=ISNULL(CmpPrdCtgId,0),@PHLEVEL2=ISNULL(CMPPRDCTGNAME,'')  FROM PRODUCTCATEGORYLEVEL WHERE CMPPRDCTGNAME=@Pi_FILTER3
	--	SELECT ISNULL(CmpPrdCtgId,0),ISNULL(CMPPRDCTGNAME,'')  FROM PRODUCTCATEGORYLEVEL WHERE CMPPRDCTGNAME='Brand'

		IF @@ROWCOUNT =0 	
		BEGIN
			SELECT @PHLEVEL2=CMPPRDCTGNAME+'_CAPTION' FROM PRODUCTCATEGORYLEVEL WHERE CMPPRDCTGID=1
		END
		ELSE
		BEGIN
			SET @PHLEVEL2=@PI_FILTER3+'_CAPTION'

		END

	SELECT Salid,RtrId,RtrValueClassId INTO #SalesinvoiceRtr  FROM Salesinvoice WHERE SALINVDATE BETWEEN @PI_fROMDATE AND @PI_TODATE AND DLVSTS in (4,5)
	 

	SELECT Salid,RtrId,RtrValueClassId ,L3,L2,L1,L1+L2+L3 HashProducts INTO #SalesRetailer FROM (
	SELECT Salid,RtrId,RtrValueClassId,D.CtgCode+ ':' + D.CtgName L3, C.CtgCode+ ':' + C.CtgName L2,B.ValueClassCode+ ':' + B.ValueClassName L1
	FROM #SalesinvoiceRtr A INNER JOIN RetailerValueClass B ON A.RtrvalueClassId = B.RtrCLassid
	INNER JOIN RetailerCategory C ON B.CtgMainID = C.CtgMainId
	INNER JOIN RetailerCategory D ON D.CtgMainId = C.CtgLinkId AND A.RtrvalueClassId>0
	UNION ALL
	SELECT Salid,A.RtrId,RtrValueClassId,HIERARCHY3CAP L3,HIERARCHY2CAP L2 ,HIERARCHY1CAP L1  FROM #SalesinvoiceRtr A 
	INNER JOIN TBL_GR_BUILD_RH B ON A.Rtrid = B.Rtrid AND A.RtrvalueClassId=0
	)A

	
-------------------FILTER OUT THE REQUIRED RECORDS HERE
	SELECT a.* INTO #SALINV FROM SALESINVOICE A,ROUTEMASTER B, SALESMAN C, RETAILER D  ,TBL_GR_BUILD_RH E
	WHERE SALINVDATE BETWEEN @PI_fROMDATE AND @PI_TODATE AND A.RMID=B.RMID AND B.RMNAME LIKE @PI_FILTER5 and E.RTRID=A.RTRID AND
    DLVSTS in (4,5) and
    C.SMID=A.SMID AND C.SMNAME LIKE @PI_FILTER1  AND A.RTRID=D.RTRID AND D.RTRNAME LIKE @PI_FILTER4 AND E.HASHPRODUCTS LIKE @PI_FILTER2

  
    SELECT A.* INTO #SALESINVOICEPRODUCT FROM SALESINVOICEPRODUCT A,TBL_GR_BUILD_PH C, #SALINV D
	WHERE A.SALID=D.SALID AND A.PRDID=C.PRDID AND 	HASHPRODUCTS LIKE @PI_FILTER6
---------------------------------------------------------------
	SELECT SMNAME,RMNAME,RET.RTRCODE,RET.RTRNAME,rh.L3 RETC,RH.L2 RETA ,RH.L3 RETB,CAST('' AS VARCHAR(100)) PHHIERARCHY,
	CAST(0 AS INT) QTY,CAST(0 AS NUMERIC(18,2))GAMT,CAST(0 AS NUMERIC(18,2))NETAMT,RH.RTRVALUECLASSID 
	INTO #OVERALL
	FROM #SALINV SI,#SALESINVOICEPRODUCT SP,RETAILER RET,SALESMAN SM,ROUTEMASTER RM,#SalesRetailer RH,TBL_GR_BUILD_PH PH
	WHERE SI.SALID=SP.SALID AND SI.RTRID=RET.RTRID AND SI.RTRID=RH.RTRID AND PH.PRDID=SP.PRDID AND SM.SMID=SI.SMID AND RM.RMID=SI.RMID
	AND SI.SalId = RH.SalId AND SP.SalId = RH.SalId AND SI.RtrId = RH.RtrId 
	--GROUP BY SMNAME,RMNAME,RET.RTRCODE,RET.RTRNAME,RH.HIERARCHY2CAP,RH.HIERARCHY1CAP
	TRUNCATE TABLE #OVERALL

	SET @SQL_STR1='INSERT INTO #OVERALL SELECT SMNAME,RMNAME,RET.RTRCODE,RET.RTRNAME,RH.L3 RETc,RH.L2 RETA ,RH.L1 RETB,'+@PHLEVEL2
	SET @SQL_STR1=@SQL_STR1+'	,SUM(BASEQTY)QTY,SUM(PRDGROSSAMOUNT)GAMT,SUM(PRDNETAMOUNT)NETAMT,RH.RTRVALUECLASSID '
	SET @SQL_STR1=@SQL_STR1+'	FROM #SALINV SI,#SALESINVOICEPRODUCT SP,RETAILER RET,SALESMAN SM,ROUTEMASTER RM,#SalesRetailer RH,TBL_GR_BUILD_PH PH ' 
	SET @SQL_STR1=@SQL_STR1+'	WHERE SI.SALID=SP.SALID AND SI.RTRID=RET.RTRID AND SI.RTRID=RH.RTRID AND PH.PRDID=SP.PRDID AND SM.SMID=SI.SMID AND RM.RMID=SI.RMID '
	SET @SQL_STR1=@SQL_STR1+'	AND SI.SalId = RH.SalId AND SP.SalId = RH.SalId AND SI.RtrId = RH.RtrId '
	SET @SQL_STR1=@SQL_STR1+' GROUP BY SMNAME,RMNAME,RET.RTRCODE,RET.RTRNAME,RH.L3,RH.L2 ,RH.L1 ,RH.RTRVALUECLASSID,'+@PHLEVEL2
 EXECUTE(@SQL_sTR1)
	SET @SQL_STR1='INSERT INTO #OVERALL SELECT '' Totals'','''','''','''','''','''','''','+@PHLEVEL2
	SET @SQL_STR1=@SQL_STR1+'	,SUM(BASEQTY)QTY,SUM(PRDGROSSAMOUNT)GAMT,SUM(PRDNETAMOUNT)NETAMT,0 '
	SET @SQL_STR1=@SQL_STR1+'	FROM #SALINV SI,#SALESINVOICEPRODUCT SP,RETAILER RET,SALESMAN SM,ROUTEMASTER RM,#SalesRetailer RH,TBL_GR_BUILD_PH PH ' 
	SET @SQL_STR1=@SQL_STR1+'	WHERE SI.SALID=SP.SALID AND SI.RTRID=RET.RTRID AND SI.RTRID=RH.RTRID AND PH.PRDID=SP.PRDID AND SM.SMID=SI.SMID AND RM.RMID=SI.RMID '
	SET @SQL_STR1=@SQL_STR1+'	AND SI.SalId = RH.SalId AND SP.SalId = RH.SalId AND SI.RtrId = RH.RtrId '
	--SET @SQL_STR1=@SQL_STR1+' GROUP BY SMNAME,RMNAME,RET.RTRCODE,RET.RTRNAME,RH.HIERARCHy3CAP,RH.HIERARCHY2CAP,RH.HIERARCHY1CAP,'+@PHLEVEL2
    SET @SQL_STR1=@SQL_STR1+' GROUP BY '+@PHLEVEL2
 EXECUTE(@SQL_sTR1)
print @sql_Str1
--return

-----------------------------------------------------------------------------
--------------THIS IS A SPECIFIC TO LOREAL
SELECT DISTINCT SMNAME Salesman,
				RMNAME [Route Name],
				retc [Retailer Hierarchy 1],
				reta [Retailer Hierarchy 2],
				retb [Retailer Hierarchy 3],
				RTRCODE [Retailer Code],
				RTRNAME [Retailer Name],
				RTRVALUECLASSID,
				sum(qty) [Total Qty],
				sum(gamt) AS [Total Gross Amount],
				sum(netamt) AS [Total Net Amount]


 INTO #OUTPUT	FROM #OVERALL
GROUP BY SMNAME,RMNAME,retc,RETB,reta,RTRCODE,RTRNAME,RTRVALUECLASSID

--INSERT INTO #OUTPUT SELECT ' Totals','','','','',SUM(QTY),sum(gamt),sum(netamt) from #overall
--------------------------------------------------------------------------------
CREATE TABLE #TOJOINWITHCROSSTAB
(
SMNAME NVARCHAR(100) collate SQL_Latin1_General_CP1_CI_AS,
RMNAME NVARCHAR(100)collate SQL_Latin1_General_CP1_CI_AS,
RTRCODE NVARCHAR(100)collate SQL_Latin1_General_CP1_CI_AS,
RTRVALUECLASSID INT,
CROSSTABVALUE NVARCHAR(200) collate SQL_Latin1_General_CP1_CI_AS,
QTY INT ,
GAMT NUMERIC(18,2) ,
NETAMT NUMERIC(18,2) 
)
SET @SQL_STR1='INSERT INTO #TOJOINWITHCROSSTAB SELECT SMNAME,RMNAME,RTRCODE,RTRVALUECLASSID,PHHIERARCHY,SUM(QTY) QTY,SUM(GAMT) GAMT,SUM(NETAMT) NETAMT FROM #OVERALL GROUP BY SMNAME,RMNAME,RTRCODE,RTRVALUECLASSID,PHHIERARCHY'
PRINT @SQL_sTR1
EXEC (@SQL_STR1)


	CREATE TABLE #CROSSTAB (PKEY INT IDENTITY(1,1), PHLEVEL varchar(100))
----------------------------------------------BASED ON LEVEL

		SET @SQL_STR1 = 'INSERT INTO #CROSSTAB 	SELECT DISTINCT CROSSTABVALUE from #TOJOINWITHCROSSTAB'
		PRINT @SQL_STR1

		EXEC(@SQL_sTR1)

	IF EXISTS (SELECT * FROM #CROSSTAB)
	BEGIN
		SELECT
			@PHLEVEL = COALESCE(@phlevel + ' numeric(18,2) , ', '') +'[' +PHLEVEL+']'
		FROM
			#CROSSTAB

		SET @PHLEVEL = @PHLEVEL + ' numeric(18,2)'

		SET @SQL_STR1 = ''
		SET @SQL_STR1 = 'ALTER TABLE #OUTPUT ADD ' + @PHLEVEL
		EXEC(@SQL_STR1)
	END

	DECLARE @PH_COUNT AS INT
	DECLARE @I AS INT

	SELECT * INTO #OUTPUT2 FROM #OUTPUT
	SELECT * INTO #OUTPUT3 FROM #OUTPUT


	SELECT @PH_COUNT = COUNT(*) FROM #CROSSTAB
	IF EXISTS (SELECT * FROM #CROSSTAB)
	BEGIN
		SET @I = 1
		WHILE (@I <= @PH_COUNT)
		BEGIN


			SELECT @PHLEVEL = PHLEVEL FROM #CROSSTAB WHERE PKEY = @I
			SET @SQL_STR1 =  'UPDATE #OUTPUT SET [' + @PHLEVEL + '] = 0'

			EXEC(@SQL_STR1)
				
			SET @SQL_STR1 = ''
			SET @SQL_STR1 = @SQL_STR1 + 'UPDATE A SET A.[' + @PHLEVEL + '] = B.NETAMT  FROM #OUTPUT A, #TOJOINWITHCROSSTAB B '
			SET @SQL_STR1 = @SQL_STR1 + 'WHERE A.[Salesman]=B.SMNAME AND A.[Route Name]=B.RMNAME AND A.[Retailer Code]=B.RTRCODE AND A.RTRVALUECLASSID=B.RTRVALUECLASSID AND B.CROSSTABVALUE = ''' + @PHLEVEL + ''''
			PRINT @SQL_sTR1
			EXEC(@SQL_STR1)

			SET @I = @I + 1
		END
	END
	SELECT @PH_COUNT = COUNT(*) FROM #CROSSTAB
	IF EXISTS (SELECT * FROM #CROSSTAB)
	BEGIN
		SET @I = 1
		WHILE (@I <= @PH_COUNT)
		BEGIN


			SELECT @PHLEVEL = PHLEVEL FROM #CROSSTAB WHERE PKEY = @I
			SET @SQL_STR1 =  'UPDATE #OUTPUT2 SET [' + @PHLEVEL + '] = 0'

			EXEC(@SQL_STR1)
				
			SET @SQL_STR1 = ''
			SET @SQL_STR1 = @SQL_STR1 + 'UPDATE A SET A.[' + @PHLEVEL + '] = B.QTY  FROM #OUTPUT2 A, #TOJOINWITHCROSSTAB B '
			SET @SQL_STR1 = @SQL_STR1 + 'WHERE A.[Salesman]=B.SMNAME AND A.[Route Name]=B.RMNAME AND A.[Retailer Code]=B.RTRCODE AND A.RTRVALUECLASSID=B.RTRVALUECLASSID AND B.CROSSTABVALUE = ''' + @PHLEVEL + ''''
			PRINT @SQL_sTR1
			EXEC(@SQL_STR1)

			SET @I = @I + 1
		END
	END
SELECT @PH_COUNT = COUNT(*) FROM #CROSSTAB
	IF EXISTS (SELECT * FROM #CROSSTAB)
	BEGIN
		SET @I = 1
		WHILE (@I <= @PH_COUNT)
		BEGIN


			SELECT @PHLEVEL = PHLEVEL FROM #CROSSTAB WHERE PKEY = @I
			SET @SQL_STR1 =  'UPDATE #OUTPUT3 SET [' + @PHLEVEL + '] = 0'

			EXEC(@SQL_STR1)
				
			SET @SQL_STR1 = ''
			SET @SQL_STR1 = @SQL_STR1 + 'UPDATE A SET A.[' + @PHLEVEL + '] = B.gamt  FROM #OUTPUT3 A, #TOJOINWITHCROSSTAB B '
			SET @SQL_STR1 = @SQL_STR1 + 'WHERE A.[Salesman]=B.SMNAME AND A.[Route Name]=B.RMNAME AND A.[Retailer Code]=B.RTRCODE AND A.RTRVALUECLASSID=B.RTRVALUECLASSID AND B.CROSSTABVALUE = ''' + @PHLEVEL + ''''
			PRINT @SQL_sTR1
			EXEC(@SQL_STR1)

			SET @I = @I + 1
		END
	END


SELECT ' Gross Amount Based',* from #output3 order by salesman
SELECT ' Net Value Based',* FROM #OUTPUT
SELECT ' Quantity Based',* from #output2

		
--	SET @SQL_STR1 = ''
--	SET @SQL_STR1 = @SQL_STR1 + 'UPDATE A SET A.[' + @BrandName + '] = B.SalInvQty  FROM #ChannelWiseBrandSales A, #SalesData B '
--	SET @SQL_STR1 = @SQL_STR1 + 'WHERE A.[Outlet Classification] = B.GroupDesc AND B.Brand = ''' + @BrandName + ''''
--
--	EXEC(@SQL_STR1)

END
GO
IF EXISTS (SELECT *FROM  SYSOBJECTS WHERE NAME ='Proc_GR_CrossTabMonthWise' AND TYPE='P')
DROP PROCEDURE Proc_GR_CrossTabMonthWise
GO
CREATE PROCEDURE Proc_GR_CrossTabMonthWise
(
	@Pi_RptName		NVARCHAR(100),
	@Pi_FromDate	DATETIME,
	@Pi_ToDate		DATETIME,
	@Pi_Filter1		NVARCHAR(100),
	@Pi_Filter2		NVARCHAR(100),
	@Pi_Filter3		NVARCHAR(100),
	@Pi_Filter4		NVARCHAR(100),
	@Pi_Filter5		NVARCHAR(100),
	@Pi_Filter6		NVARCHAR(100)
)
AS 
/*****************************************************************************************************************************
 DATE          AUTHOR       CR/BZ USER     STORY ID           DESCRIPTION                             
*************************************************************************************************************************************    
25-05-2020	  Mohana S			BZ			PARCS202100013		Category taken based on Transaction	
*************************************************************************************************************************************/
BEGIN
	DECLARE @PHLEVEL VARCHAR(7500)
	DECLARE @SQL_STR1 VARCHAR(7500)
	DECLARE @SQL_STR2 VARCHAR(7500)
	DECLARE @CAPHLEVEL VARCHAR(7500)
--EXEC Proc_GR_CrossTabMonthWise 'Retailer Product Analysis','2020-05-15','2020-05-15','','','','','',''
		SET @Pi_FILTER1='%'+ISNULL(@Pi_FILTER1,'')+'%'        
		SET @Pi_FILTER2='%'+ISNULL(@Pi_FILTER2,'')+'%'        
		SET @Pi_FILTER3='%'+ISNULL(@Pi_FILTER3,'')+'%'        
		SET @Pi_FILTER4='%'+ISNULL(@Pi_FILTER4,'')+'%'        
		SET @Pi_FILTER5='%'+ISNULL(@Pi_FILTER5,'')+'%'  
		SET @Pi_FILTER6='%'+ISNULL(@Pi_FILTER6,'')+'%'  
				 	
	SELECT Salid,RtrId,RtrValueClassId INTO #SalesinvoiceRtr  FROM Salesinvoice WHERE SALINVDATE BETWEEN @PI_fROMDATE AND @PI_TODATE AND DLVSTS in (4,5)
	 

	SELECT Salid,RtrId,RtrValueClassId ,L3,L2,L1,L1+L2+L3 HashProducts INTO #SalesRetailer FROM (
	SELECT Salid,RtrId,RtrValueClassId,D.CtgCode+ ':' + D.CtgName L3, C.CtgCode+ ':' + C.CtgName L2,B.ValueClassCode+ ':' + B.ValueClassName L1
	FROM #SalesinvoiceRtr A INNER JOIN RetailerValueClass B ON A.RtrvalueClassId = B.RtrCLassid
	INNER JOIN RetailerCategory C ON B.CtgMainID = C.CtgMainId
	INNER JOIN RetailerCategory D ON D.CtgMainId = C.CtgLinkId AND A.RtrvalueClassId>0
	UNION ALL
	SELECT Salid,A.RtrId,RtrValueClassId,HIERARCHY3CAP L3,HIERARCHY2CAP L2 ,HIERARCHY1CAP L1  FROM #SalesinvoiceRtr A 
	INNER JOIN TBL_GR_BUILD_RH B ON A.Rtrid = B.Rtrid AND A.RtrvalueClassId=0
	)A
	
-------------------FILTER OUT THE REQUIRED RECORDS HERE
	SELECT a.* INTO #SALINV FROM SALESINVOICE A,ROUTEMASTER B, SALESMAN C, RETAILER D  ,TBL_GR_BUILD_RH E
	WHERE YEAR(SALINVDATE)=YEAR(@PI_TODATE) and salinvdate between @pi_fromdate and @pi_todate AND A.RMID=B.RMID AND B.RMNAME LIKE @PI_FILTER5 and E.RTRID=A.RTRID AND
    DLVSTS in (4,5) and
    C.SMID=A.SMID AND C.SMNAME LIKE @PI_FILTER1  AND A.RTRID=D.RTRID AND D.RTRNAME LIKE @PI_FILTER4 AND E.HASHPRODUCTS LIKE @PI_FILTER2

  
    SELECT A.* INTO #SALESINVOICEPRODUCT FROM SALESINVOICEPRODUCT A,TBL_GR_BUILD_PH C, #SALINV D
	WHERE A.SALID=D.SALID AND A.PRDID=C.PRDID AND 	HASHPRODUCTS LIKE @PI_FILTER6
---------------------------------------------------------------

	SELECT SMNAME,RMNAME,RET.RTRCODE,RET.RTRNAME,RH.L1 RETA ,RH.L2 RETB,RH.L3 RETC,DATENAME(month, SALINVDATE) AS 'Month Name',

    CAST(SUM(BASEQTY) AS INT)QTY,SUM(PRDGROSSAMOUNT)GAMT,SUM(PRDNETAMOUNT)NETAMT,RH.RtrValueClassid  
	INTO #OVERALL
	FROM #SALINV SI,#SALESINVOICEPRODUCT SP,RETAILER RET,SALESMAN SM,ROUTEMASTER RM,#SalesRetailer RH,TBL_GR_BUILD_PH PH
	WHERE SI.SALID=SP.SALID AND SI.RTRID=RET.RTRID AND SI.RTRID=RH.RTRID AND PH.PRDID=SP.PRDID AND SM.SMID=SI.SMID AND RM.RMID=SI.RMID AND RH.SalId = SI.SalId 
	GROUP BY SMNAME,RMNAME,RET.RTRCODE,RET.RTRNAME,RH.L1,RH.L2,RH.L3,DATENAME(month, SALINVDATE) ,RH.RtrValueClassid  

	INSERT INTO #OVERALL select ' Totals','','','','','','',[Month Name],sum(qty),sum(gamt),sum(netamt),0 from #overall group by [Month Name]

-----------------------------------------------------------------------------
--------------THIS IS A SPECIFIC TO LOREAL
	SELECT  sMNAME [Salesman Name],
					RMNAME [Route Name],
					RETC [Retailer Hierarchy 1],
					RETB [Retailer Hierarchy 2],
					RETA [Retailer Hierarchy 3],					
					RTRCODE [Retailer Code],
					RTRNAME [Retailer Name],
					RtrValueClassid,
					SUM(QTY) [Total Quantity],
					SUM(GAMT) [Gross Amount],
					SUM([NetAmt]) [Net Amount] 
	INTO #OUTPUT FROM #OVERALL
GROUP BY sMNAME ,RMNAME ,RTRCODE ,RTRNAME ,RETA ,RETB ,retc ,RtrValueClassid  
--------------------------------------------------------------------------------
CREATE TABLE #TOJOINWITHCROSSTAB
(
SMNAME NVARCHAR(100) collate SQL_Latin1_General_CP1_CI_AS,
RMNAME NVARCHAR(100)collate SQL_Latin1_General_CP1_CI_AS,
RTRCODE NVARCHAR(100)collate SQL_Latin1_General_CP1_CI_AS,
RtrValueClassId	INT,
CROSSTABVALUE NVARCHAR(200) collate SQL_Latin1_General_CP1_CI_AS,
QTY INT ,
GAMT NUMERIC(18,2) ,
NETAMT NUMERIC(18,2) 
)
 
INSERT INTO #TOJOINWITHCROSSTAB 
SELECT SMNAME,RMNAME,RTRCODE,RtrValueClassid  ,[Month Name],SUM(QTY) QTY,SUM(GAMT) GAMT,SUM(NETAMT) NETAMT
FROM #OVERALL GROUP BY SMNAME,RMNAME,RTRCODE,[Month Name] ,RtrValueClassid  

CREATE TABLE #CROSSTAB (PKEY INT IDENTITY(1,1), PHLEVEL varchar(100) collate SQL_Latin1_General_CP1_CI_AS)
INSERT INTO #CROSSTAB SELECT  'January'
INSERT INTO #CROSSTAB SELECT  'February'
INSERT INTO #CROSSTAB SELECT  'March'
INSERT INTO #CROSSTAB SELECT  'April'
INSERT INTO #CROSSTAB SELECT  'May'
INSERT INTO #CROSSTAB SELECT  'June'
INSERT INTO #CROSSTAB SELECT  'July'
INSERT INTO #CROSSTAB SELECT  'August'
INSERT INTO #CROSSTAB SELECT  'September'
INSERT INTO #CROSSTAB SELECT  'October'
INSERT INTO #CROSSTAB SELECT  'November'
INSERT INTO #CROSSTAB SELECT  'December'

	IF EXISTS (SELECT * FROM #CROSSTAB)
	BEGIN
		SELECT
			@PHLEVEL = COALESCE(@PHLEVEL + ' numeric(18,2) , ', '') +'[' +PHLEVEL+']'
		FROM
			#CROSSTAB

		SET @PHLEVEL = @PHLEVEL + ' numeric(18,2)'

		SET @SQL_STR1 = ''
		SET @SQL_STR1 = 'ALTER TABLE #OUTPUT ADD ' + @PHLEVEL
		EXEC(@SQL_STR1)
	END

	DECLARE @PH_COUNT AS INT
	DECLARE @I AS INT
	SELECT @PH_COUNT = COUNT(*) FROM #CROSSTAB
	IF EXISTS (SELECT * FROM #CROSSTAB)
	BEGIN
		SET @I = 1
		WHILE (@I <= @PH_COUNT)
		BEGIN


			SELECT @PHLEVEL = PHLEVEL FROM #CROSSTAB WHERE PKEY = @I
			SET @SQL_STR1 =  'UPDATE #OUTPUT SET [' + @PHLEVEL + '] = 0'

			EXEC(@SQL_STR1)
				
			SET @SQL_STR1 = ''
			SET @SQL_STR1 = @SQL_STR1 + 'UPDATE A SET A.[' + @PHLEVEL + '] = B.NETAMT  FROM #OUTPUT A, #TOJOINWITHCROSSTAB B '
			SET @SQL_STR1 = @SQL_STR1 + 'WHERE A.[Salesman Name]=B.SMNAME AND A.[Route Name]=B.RMNAME AND A.[Retailer Code]=B.RTRCODE AND  A.RtrValueClassid  =B.RTRVALUECLASSID AND B.CROSSTABVALUE = ''' + @PHLEVEL + ''''
			PRINT @SQL_sTR1
			EXEC(@SQL_STR1)

			SET @I = @I + 1
		END
	END

SELECT ' Net Value for Year '+cast(year(@pi_todate) as varchar),* FROM #OUTPUT 

		
--	SET @SQL_STR1 = ''
--	SET @SQL_STR1 = @SQL_STR1 + 'UPDATE A SET A.[' + @BrandName + '] = B.SalInvQty  FROM #ChannelWiseBrandSales A, #SalesData B '
--	SET @SQL_STR1 = @SQL_STR1 + 'WHERE A.[Outlet Classification] = B.GroupDesc AND B.Brand = ''' + @BrandName + ''''
--
--	EXEC(@SQL_STR1)

END
GO
IF EXISTS (SELECT *FROM  SYSOBJECTS WHERE NAME ='Proc_GR_CrossTabJCWise' AND TYPE='P')
DROP PROCEDURE Proc_GR_CrossTabJCWise
GO
-- EXEC Proc_GR_CrossTabJCWise 'Retailer Buying Trend-JCWise Report','2020-05-15','2020-05-15','','','','','',''          
CREATE PROCEDURE Proc_GR_CrossTabJCWise             
(                  
@Pi_RptName  NVARCHAR(100),                  
@Pi_FromDate DATETIME,                  
@Pi_ToDate  DATETIME,                  
@Pi_Filter1  NVARCHAR(100),               
@Pi_Filter2  NVARCHAR(100),                  
@Pi_Filter3  NVARCHAR(100),                  
@Pi_Filter4  NVARCHAR(100),                  
@Pi_Filter5  NVARCHAR(100),                  
@Pi_Filter6  NVARCHAR(100)                  
)                  
AS                   
/*******************************************************************************                  
* PROCEDURE     :Proc_GR_CrossTabJCWise              
* PURPOSE       :To Get JCWISE(Month) Details - Dynamic report purpose               
* CREATED BY    :Jayakumar.E                  
* CREATED DATE  :06/05/2011                                  
*****************************************************************************************************************************
 DATE          AUTHOR       CR/BZ USER     STORY ID           DESCRIPTION                             
*************************************************************************************************************************************    
25-05-2020	  Mohana S			BZ			PARCS202100013		Category taken based on Transaction	
*************************************************************************************************************************************/               
BEGIN                  
	DECLARE @PHLEVEL VARCHAR(7500)                  
	DECLARE @SQL_STR1 VARCHAR(8000)                  
	DECLARE @SQL_STR2 VARCHAR(8000)                  
	DECLARE @CAPHLEVEL VARCHAR(8000)                  
	     
	DECLARE @SName    Varchar(100)                  
	DECLARE @RName    Varchar(100)                  
	DECLARE @RetName  Varchar(100)                  
	DECLARE @RtrId   INT                  
	DECLARE @RetCode  Varchar(100)                  
	DECLARE @MonthId     INT                  
	DECLARE @YearId      INT                   
	DECLARE @Qty      INT                  
	DECLARE @GAmt     Numeric(38,6)                  
	DECLARE @NetAmt     Numeric(38,6)                  
	DECLARE @Monthname   varchar(8000)                  
	DECLARE @sStrql varchar(8000)                  
	DECLARE @Cnt as INT                  
	DECLARE @MntCnt as INT                  
	         
	SET @Pi_FILTER1='%'+ISNULL(@Pi_FILTER1,'')+'%'                          
	SET @Pi_FILTER2='%'+ISNULL(@Pi_FILTER2,'')+'%'                          
	SET @Pi_FILTER3='%'+ISNULL(@Pi_FILTER3,'')+'%'                          
	SET @Pi_FILTER4='%'+ISNULL(@Pi_FILTER4,'')+'%'                          
	SET @Pi_FILTER5='%'+ISNULL(@Pi_FILTER5,'')+'%'                    
	SET @Pi_FILTER6='%'+ISNULL(@Pi_FILTER6,'')+'%'                    
	          
	SELECT Salid,RtrId,RtrValueClassId INTO #SalesinvoiceRtr  FROM Salesinvoice WHERE SALINVDATE BETWEEN @PI_fROMDATE AND @PI_TODATE AND DLVSTS in (4,5)
	 

	SELECT Salid,RtrId,RtrValueClassId ,L3,L2,L1,L1+L2+L3 HashProducts INTO #SalesRetailer FROM (
	SELECT Salid,RtrId,RtrValueClassId,D.CtgCode+ ':' + D.CtgName L3, C.CtgCode+ ':' + C.CtgName L2,B.ValueClassCode+ ':' + B.ValueClassName L1
	FROM #SalesinvoiceRtr A INNER JOIN RetailerValueClass B ON A.RtrvalueClassId = B.RtrCLassid
	INNER JOIN RetailerCategory C ON B.CtgMainID = C.CtgMainId
	INNER JOIN RetailerCategory D ON D.CtgMainId = C.CtgLinkId AND A.RtrvalueClassId>0
	UNION ALL
	SELECT Salid,A.RtrId,RtrValueClassId,HIERARCHY3CAP L3,HIERARCHY2CAP L2 ,HIERARCHY1CAP L1  FROM #SalesinvoiceRtr A 
	INNER JOIN TBL_GR_BUILD_RH B ON A.Rtrid = B.Rtrid AND A.RtrvalueClassId=0
	)A
	      
	-------------------FILTER OUT THE REQUIRED RECORDS HERE                  
	SELECT a.* INTO #SALINV FROM SALESINVOICE A,ROUTEMASTER B, SALESMAN C, RETAILER D  ,TBL_GR_BUILD_RH E                  
	WHERE  salinvdate between @pi_fromdate and @pi_todate                   
	AND A.RMID=B.RMID AND B.RMNAME LIKE @PI_FILTER5 and E.RTRID=A.RTRID                    
	and DLVSTS in (4,5) and C.SMID=A.SMID AND C.SMNAME LIKE @PI_FILTER1  AND A.RTRID=D.RTRID                   
	AND D.RTRNAME LIKE @PI_FILTER4 AND E.HASHPRODUCTS LIKE @PI_FILTER2                    
	     
	SELECT A.* INTO #SALESINVOICEPRODUCT FROM SALESINVOICEPRODUCT A,TBL_GR_BUILD_PH C, #SALINV D                  
	WHERE A.SALID=D.SALID AND A.PRDID=C.PRDID AND  HASHPRODUCTS LIKE @PI_FILTER6                   
	-----------------------------------------------------------------         
	SELECT   
	Jcmid,JcmJc,ColName,JCMSDT,JCMEDT INTO #JCWISE FROM         
	(Select A.JcmJc,A.Jcmid,A.JCMSDT,A.JCMEDT,  'JC'+ Cast(A.JcmJc as varchar(10)) +'-'+ Cast(B.JCMYR as varchar(10)) as ColName----,JcmSDt,JcmEdt          
	From JCMonth A INNER JOIN JCMAST B ON A.JCMID=B.JCMID Where           
	A.JcmId in ( Select Jcmid From JcMast Where JcmYr between Year(@pi_fromdate) and Year(@pi_todate) )          
	and @pi_fromdate between JcmSdt and  JcmEdt           
	or  @pi_todate between JcmSdt and  JcmEdt          
	Or  JCmSdt between @pi_fromdate and @pi_todate            
	or  JcmSdt between @pi_fromdate and @pi_todate           
	) A order by A.Jcmid,A.JcmJc           
	------------------------------------------------------------------------              
	SELECT   
	SMNAME [Salesman Name],RMNAME [Route Name] ,RH.L3 [Retailer Hierarchy 1] ,  
	RH.L2 [Retailer Hierarchy 2],RH.L1 [Retailer Hierarchy 3],RET.RTRCODE [Retailer Code],  
	RET.RTRNAME [Retailer Name],Cast(0 AS INT) [No OF Bills],Cast(0 AS INT) [No OF Lines],CAST(0 AS INT) AS  [Total Quantity],CAST(0 AS NUMERIC(18,6)) AS  [Gross Amount],  
	CAST(0 AS NUMERIC(18,6)) AS [Net Amount] ,RH.RtrValueClassid               
	INTO #OVERALL                  
	FROM                   
	#JCWISE,#SALINV SI,#SALESINVOICEPRODUCT SP,RETAILER RET,SALESMAN SM,ROUTEMASTER RM,                  
	#SalesRetailer  RH,TBL_GR_BUILD_PH PH                  
	WHERE                 
	salinvdate BETWEEN JCMSDT AND JCMEDT AND DLVSTS in (4,5) AND                 
	SI.SALID=SP.SALID AND SI.RTRID=RET.RTRID AND SI.RTRID=RH.RTRID AND SI.SalId = RH.SalId AND SI.RTRID=RH.RtrId   
	AND SP.SalId = RH.SalId                  
	AND PH.PRDID=SP.PRDID AND SM.SMID=SI.SMID AND RM.RMID=SI.RMID ----------------and si.rtrid  = 28                  
	GROUP BY SMNAME,RMNAME,RET.RTRCODE,RET.RTRNAME,RH.L3,RH.L2,RH.L1,RH.RtrValueClassid  
	---------------------------------------------------------------------------------------------           
	 
	DECLARE @C_SSQL  varchar(8000)                  
	DECLARE @Column  Varchar(100)                  
	DECLARE @YearCnt  INT                  
	DECLARE @monthCnt INT                  
	DECLARE @COLNAME VARCHAR(8000)                
	DECLARE  @sColumnName Varchar(8000)                  
	DECLARE  @sColumnNameTable Varchar(8000)                  
	DECLARE  @sColumnNameSum   Varchar(8000)                  
	DECLARE @iCnt INT                  
	Set @iCnt = 0                  
	Set @sColumnName = ''                  
	Set @sColumnNameTable = ''                  
	DECLARE @JCMJC INT                
	DECLARE @JCMYR INT           
	DECLARE @JCMID INT           
	    
	     
	DECLARE Column_Cur CURSOR FOR                  
	SELECT   
	jcmJc,Jcmid,COLNAME --RIGHT(COLNAME,10)                  
	FROM #JCWISE   
	Order By Jcmid asc,jcmJc --LEFT(COLNAME,4)--RIGHT(COLNAME,10)                
	OPEN Column_Cur                   
	FETCH NEXT FROM Column_Cur INTO @JCMJC, @JCMID,@Column                
	WHILE @@FETCH_STATUS = 0                  
	BEGIN                  
            
	SET @C_SSQL='ALTER TABLE #OverAll  ADD ['+ @Column +'] NUMERIC(38,6) NOT NULL DEFAULT 0 WITH VALUES'                  
	EXEC (@C_SSQL)                  
		If @sColumnName = ''                  
		BEgin                  
			SET @sColumnName =  '['+@Column+']'                  
			SET @sColumnNameTable = '['+@Column+']' + ' NUMERIC(38,6)'                  
			SET @sColumnNameSum = 'Sum(' + '['+@Column+']' + ') ' + '['+@Column+']'                   
		END                  
	SET @iCnt=@iCnt+1                  
	FETCH NEXT FROM Column_Cur INTO  @JCMJC, @JCMID,@Column                
	END                  
	CLOSE Column_Cur                  
	DEALLOCATE Column_Cur                  
	     
	     
	DECLARE @FielName1 as Varchar(50)                
	DECLARE @Fromdate as DATETIME                
	DECLARE @Todate as DATETIME                
	DECLARE @SSQL as Varchar(8000)                
	    
	DECLARE Cur_LastYear CURSOR                
	FOR SELECT ColName,JcmSdt,JcmEdt FROM #JCWISE  Order By JcmJc              
	OPEN Cur_LastYear                
	FETCH NEXT FROM Cur_LastYear INTO @FielName1,@Fromdate,@Todate                
	WHILE @@FETCH_STATUS=0                
	BEGIN          
	SELECT SM.SMNAME,SI.RtrId,R.RTRCODE,RM.RMNAME,RtrValueClassid,CAST(SUM(SIP.BASEQTY) AS INT)QTY,SUM(SIP.PRDGROSSAMOUNT)GAMT,SUM(SIP.PRDNETAMOUNT) NETAMT        
	INTO #TempCurYearSales                 
	FROM #SALESINVOICEPRODUCT SIP                
	INNER JOIN SalesInvoice SI  ON SI.Salid=SIP.Salid     
	INNER JOIN Salesman SM on SM.SmId=SI.SmId    
	INNER JOIN RouteMaster RM  ON RM.RMID=SI.RMID    
	INNER JOIN Retailer R ON R.RTRID=SI.RTRID                
	WHERE  SI.Salinvdate Between @Fromdate and  @Todate AND SI.DLVSTS in (4,5)                  
	GROUP BY SI.RtrId,SM.SMNAME,RM.RMNAME,R.RTRCODE,RtrValueClassid                
	SET @ssql ='Update RJ SET ['+ @FielName1 +']=T.NETAMT FROM #OVERALL RJ  INNER JOIN #TempCurYearSales T'+         
	' ON [Retailer Code]=T.RTRCODE AND [Salesman Name]=T.SMNAME AND [Route Name]=T.RMNAME AND RJ.RtrValueClassid = T.RtrValueClassid  '      
	EXEC(@SSQL)                
	DROP TABLE #TempCurYearSales                
	FETCH NEXT FROM Cur_LastYear INTO  @FielName1,@Fromdate,@Todate                
	END                
	CLOSE Cur_LastYear                
	DEALLOCATE Cur_LastYear                
	     
	UPDATE A SET [Net Amount]=B.NETAMT,[Gross Amount]=B.GAMT,[Total Quantity]=B.QTY FROM #OVERALL A INNER JOIN                 
	(      
	SELECT SM.SMNAME,R.RTRCODE,RM.RMNAME,RtrValueClassid,CAST(SUM(SIP.BASEQTY) AS INT)QTY,SUM(SIP.PRDGROSSAMOUNT)GAMT,SUM(SIP.PRDNETAMOUNT) NETAMT                  
	FROM #SALESINVOICEPRODUCT SIP                
	INNER JOIN SalesInvoice SI  ON SI.Salid=SIP.Salid       
	INNER JOIN Salesman SM on SM.SmId=SI.SmId    
	INNER JOIN RouteMaster RM  ON RM.RMID=SI.RMID    
	INNER JOIN Retailer R ON R.RTRID=SI.RTRID          
	WHERE  SI.Salinvdate Between @pi_fromdate and  @pi_Todate AND SI.DLVSTS in (4,5)                  
	GROUP BY SM.SMNAME,R.RTRCODE,RM.RMNAME,RtrValueClassid 
	)B ON [Retailer Code]=B.RTRCODE  AND [Salesman Name]=B.SMNAME  AND [Route Name]=B.RMNAME AND A.RtrValueClassid =  B.RtrValueClassid
	
	UPDATE OL SET  [No OF Bills]=NoofBills,[No OF Lines]=NoOfLines FROM #OVERALL OL INNER JOIN
		( SELECT R.RtrCode,RM.RMName,SM.SMName,IsNull(Count(DISTINCT SIP.SalId),0) NoofBills,IsNull(Count(DISTINCT SIP.PrdId),0) NoOfLines FROM SalesInvoice SI
		INNER JOIN SalesInvoiceProduct SIP ON SIP.SalId=SI.SalId 
		INNER JOIN Retailer R ON R.RtrId=SI.RtrId 
		INNER JOIN RouteMaster RM ON RM.RMid=SI.RMId
		INNER JOIN SalesMan SM ON Sm.SMid=SI.SmId 
		WHERE SI.SalInvDate BETWEEN @Pi_FromDate and  @Pi_ToDate AND SI.DLVSTS in (4,5) GROUP BY R.RtrCode,RM.RMName,SM.SMName
		) X ON 
		[Retailer Code]=X.RtrCode  AND [Salesman Name]=X.SMName  AND [Route Name]=X.RMName 
	
	Select  'Retailer Buying Trend-JCWise Report' AS Header,* from #OverAll    

END 
GO
IF EXISTS (SELECT *FROM  SYSOBJECTS WHERE NAME ='Proc_GR_BillWISESales' AND TYPE='P')
DROP PROCEDURE Proc_GR_BillWISESales
GO
--EXEC Proc_GR_BillWISESales 'Bill Wise Retailer Sales','2020-05-12','2020-05-20','','','','','',''
CREATE PROCEDURE Proc_GR_BillWISESales
(
	@Pi_RptName		NVARCHAR(100),
	@Pi_FromDate	DATETIME,
	@Pi_ToDate		DATETIME,
	@Pi_Filter1		NVARCHAR(100),
	@Pi_Filter2		NVARCHAR(100),
	@Pi_Filter3		NVARCHAR(100),
	@Pi_Filter4		NVARCHAR(100),
	@Pi_Filter5		NVARCHAR(100),
	@Pi_Filter6		NVARCHAR(100)
)
AS 
/*****************************************************************************************************************************
 DATE          AUTHOR       CR/BZ USER     STORY ID           DESCRIPTION                             
*************************************************************************************************************************************    
23-05-2020	  Mohana S			BZ			PARCS202100013		Category taken based on Transaction	
*************************************************************************************************************************************/
BEGIN
		SELECT 0 flag ,CAST('' AS VARCHAR(20)) AS dlvsts INTO #TEMP 
		TRUNCATE TABLE #TEMP
		INSERT INTO #TEMP SELECT 1,'Saved'
		INSERT INTO #TEMP SELECT 2,'Vehicle Allocated'
		INSERT INTO #TEMP SELECT 3,'Cancelled'
		INSERT INTO #TEMP SELECT 4,'Delivered'
		INSERT INTO #TEMP SELECT 5,'Fully Settled'
--EXEC Proc_GR_BillWISESales 'Bill Wise Retailer Sales','2011-12-12','2011-12-12','','','','','','can'
		SET @Pi_FILTER1='%'+ISNULL(@Pi_FILTER1,'')+'%'        
		SET @Pi_FILTER2='%'+ISNULL(@Pi_FILTER2,'')+'%'        
		SET @Pi_FILTER3='%'+ISNULL(@Pi_FILTER3,'')+'%'        
		SET @Pi_FILTER4='%'+ISNULL(@Pi_FILTER4,'')+'%'        
		SET @Pi_FILTER5='%'+ISNULL(@Pi_FILTER5,'')+'%'  
		SET @Pi_FILTER6='%'+ISNULL(@Pi_FILTER6,'')+'%'
	
		
	SELECT Salid,RtrId,RtrValueClassId INTO #SalesinvoiceRtr  FROM Salesinvoice WHERE SALINVDATE BETWEEN @PI_fROMDATE AND @PI_TODATE 
	and DLVSTS in (select flag from #temp where dlvsts like @pi_filter6)

	SELECT Salid,RtrId,RtrValueClassId ,L3,L2,L1,L1+L2+L3 HashProducts INTO #SalesRetailer FROM (
	SELECT Salid,RtrId,RtrValueClassId,D.CtgCode+ ':' + D.CtgName L3, C.CtgCode+ ':' + C.CtgName L2,B.ValueClassCode+ ':' + B.ValueClassName L1
	FROM #SalesinvoiceRtr A INNER JOIN RetailerValueClass B ON A.RtrvalueClassId = B.RtrCLassid
	INNER JOIN RetailerCategory C ON B.CtgMainID = C.CtgMainId
	INNER JOIN RetailerCategory D ON D.CtgMainId = C.CtgLinkId AND A.RtrvalueClassId>0
	UNION ALL
	SELECT Salid,A.RtrId,RtrValueClassId,HIERARCHY3CAP L3,HIERARCHY2CAP L2 ,HIERARCHY1CAP L1  FROM #SalesinvoiceRtr A 
	INNER JOIN TBL_GR_BUILD_RH B ON A.Rtrid = B.Rtrid AND A.RtrvalueClassId=0
	)A

		
		
		SELECT a.*,L1 HIERARCHY1CAP, L2 HIERARCHY2CAP, L3 HIERARCHY3CAP 
		INTO #SALINV
		FROM SALESINVOICE A,ROUTEMASTER B, SALESMAN C, RETAILER D  ,#SalesRetailer E
		WHERE SALINVDATE BETWEEN @PI_fROMDATE AND @PI_TODATE AND A.RMID=B.RMID AND B.RMNAME LIKE @PI_FILTER5 and E.RTRID=A.RTRID AND 
		A.RtrValueClassId = E.RtrValueClassId AND DLVSTS in (select flag from #temp where dlvsts like @pi_filter6) and
		C.SMID=A.SMID AND C.SMNAME LIKE @PI_FILTER1 AND A.SALINVNO LIKE @PI_FILTER3 AND A.RTRID=D.RTRID AND D.RTRNAME LIKE @PI_FILTER4 AND E.HASHPRODUCTS LIKE @PI_FILTER2


		SELECT     'Billwise ',#SALINV.SalInvNo AS [Bill Number], CONVERT(VARCHAR(10),#SALINV.SalInvDate,121) AS [Bill Date], 
		CASE BillType WHEN 1 THEN 'Order Booking'  WHEN 2 THEN 'Ready Stock' WHEN 3 THEN 'Van Sales' END AS [Bill Type],
		CASE BillMode WHEN 1 THEN 'Cash' ELSE 'Credit' END AS [Bill Mode],
		CASE #SALINV.DlvSts  when 1 then 'Saved' when 2 then 'Vehicle Allocated' when 3 then 'Cancelled' when 4 then 'Delivered' when 5 then 'Fully Settled' end AS [Delivery Status], 
		Salesman.SMName AS Salesman,RouteMaster.RMName [Route],#SALINV.HIERARCHY3CAP [Retailer Hierarchy 1],#SALINV.HIERARCHY2CAP [Retailer Hierarchy 2],
		#SALINV.HIERARCHY1CAP [Retailer Hierarchy 3],Retailer.RtrCode [Retailer Code], Retailer.RtrName AS [Retailer Name], 
		#SALINV.SalGrossAmount AS [Gross Amount], #SALINV.SalSchDiscAmount AS [Scheme Disc], #SALINV.MarketRetAmount AS [Sales Return], 
		#SALINV.ReplacementDiffAmount AS Replacement, #SALINV.SalDBDiscAmount AS [Distributor Discount], #SALINV.SalCDAmount AS [Cash Discount],
		#SALINV.WINDOWDISPLAYAMOUNT [Window Display],#SALINV.SalTaxAmount AS [Tax Amount], #SALINV.DBAdjAmount AS [Debit Adjustment],
		#SALINV.CRAdjAmount AS [Credit Adjustment], #SALINV.SalNetAmt AS [Net Amount]
		FROM  #SALINV  
		INNER JOIN Retailer ON #SALINV.RtrId = Retailer.RtrId 
		INNER JOIN Salesman ON #SALINV.SMId = Salesman.SMId 
		INNER JOIN RouteMaster ON #SALINV.RMId = RouteMaster.RMId 
		INNER JOIN TBL_GR_BUILD_RH ON Retailer.RtrId = TBL_GR_BUILD_RH.RTRID 						
		UNION
		SELECT     ' Billwise','Totals ' AS [Bill Number],'', '','','', '','','','','','','',
		sum(#SALINV.SalGrossAmount) AS [Gross Amount],SUM( #SALINV.SalSchDiscAmount) AS [Scheme Disc], SUM(#SALINV.MarketRetAmount) AS [Sales Return], 
		SUM(#SALINV.ReplacementDiffAmount) AS Replacement,SUM( #SALINV.SalDBDiscAmount) AS [Distributor Discount], SUM(#SALINV.SalCDAmount) AS [Cash Discount],
		sum(#salinv.WindowDisplayAmount),SUM(#SALINV.SalTaxAmount) AS [Tax Amount],SUM( #SALINV.DBAdjAmount) AS [Debit Adjustment],
		SUM( #SALINV.CRAdjAmount) AS [Credit Adjustment],SUM( #SALINV.SalNetAmt) AS [Net Amount]
		FROM  #SALINV  
		INNER JOIN Retailer ON #SALINV.RtrId = Retailer.RtrId 
		INNER JOIN Salesman ON #SALINV.SMId = Salesman.SMId 
		INNER JOIN RouteMaster ON #SALINV.RMId = RouteMaster.RMId 
		INNER JOIN TBL_GR_BUILD_RH ON Retailer.RtrId = TBL_GR_BUILD_RH.RTRID
END
GO
IF EXISTS (SELECT *FROM  SYSOBJECTS WHERE NAME ='Proc_GR_BillPrdSalesTaxSplit' AND TYPE='P')
DROP PROCEDURE Proc_GR_BillPrdSalesTaxSplit
GO
--EXEC [Proc_GR_BillPrdSalesTaxSplit] 'Billwise Productwise Sales','2020-05-15','2020-05-15','','','','','',''
CREATE PROCEDURE Proc_GR_BillPrdSalesTaxSplit

(
	@Pi_RptName		NVARCHAR(100),
	@Pi_FromDate	DATETIME,
	@Pi_ToDate		DATETIME,
	@Pi_Filter1		NVARCHAR(100),
	@Pi_Filter2		NVARCHAR(100),
	@Pi_Filter3		NVARCHAR(100),
	@Pi_Filter4		NVARCHAR(100),
	@Pi_Filter5		NVARCHAR(100),
	@Pi_Filter6		NVARCHAR(100)
)
AS
/*************************************************************************************************************
* DATE			  AUTHOR			CR/BZ		USER STORY ID       DESCRIPTION   
* 23-05-2020	  Mohana S			CR			PARCS202100013		TAKEN RETIALER CATEGORY GTOM TRANSACTION
**************************************************************************************************************/
SET NOCOUNT ON
BEGIN
DECLARE @LEVEL VARCHAR(1000)
DECLARE @SQLSTR1 VARCHAR(4000)
DECLARE @SQLSTR2 VARCHAR(4000)
DECLARE @SQLSTR3 VARCHAR(4000)
DECLARE @SQLSTR4 VARCHAR(4000)
DECLARE @PHLEVEL VARCHAR(4000)
DECLARE @PHLEVEL2 VARCHAR(4000)
DECLARE @PHLEVEL3 VARCHAR(4000)
DECLARE @PHLEVEL4 VARCHAR(4000)
DECLARE @ILOOP1 INT
DECLARE @ILOOP2 INT


SET @Pi_FILTER1='%'+ISNULL(@Pi_FILTER1,'')+'%'        
SET @Pi_FILTER2='%'+ISNULL(@Pi_FILTER2,'')+'%'        
SET @Pi_FILTER3='%'+ISNULL(@Pi_FILTER3,'')+'%'        
SET @Pi_FILTER4='%'+ISNULL(@Pi_FILTER4,'')+'%'        
SET @Pi_FILTER5='%'+ISNULL(@Pi_FILTER5,'')+'%'  
SET @Pi_FILTER6='%'+ISNULL(@Pi_FILTER6,'')+'%'      

	SELECT Salid,RtrId,RtrValueClassId INTO #SalesinvoiceRtr  FROM Salesinvoice WHERE SALINVDATE BETWEEN @PI_fROMDATE AND @PI_TODATE  and dlvsts in (4,5)

	SELECT Salid,RtrId,RtrValueClassId ,L3,L2,L1,L1+L2+L3 HashProducts INTO #SalesRetailer FROM (
	SELECT Salid,RtrId,RtrValueClassId,D.CtgCode+ ':' + D.CtgName L3, C.CtgCode+ ':' + C.CtgName L2,B.ValueClassCode+ ':' + B.ValueClassName L1
	FROM #SalesinvoiceRtr A INNER JOIN RetailerValueClass B ON A.RtrvalueClassId = B.RtrCLassid
	INNER JOIN RetailerCategory C ON B.CtgMainID = C.CtgMainId
	INNER JOIN RetailerCategory D ON D.CtgMainId = C.CtgLinkId AND A.RtrvalueClassId>0
	UNION ALL
	SELECT Salid,A.RtrId,RtrValueClassId,HIERARCHY3CAP L3,HIERARCHY2CAP L2 ,HIERARCHY1CAP L1  FROM #SalesinvoiceRtr A 
	INNER JOIN TBL_GR_BUILD_RH B ON A.Rtrid = B.Rtrid AND A.RtrvalueClassId=0
	)A

	 

	SELECT ReturnID,RtrId,RtrValueClassId INTO #ReturnHeaderRtr  FROM ReturnHeader  WHERE ReturnDate  BETWEEN @PI_fROMDATE AND @PI_TODATE  and status=0

	SELECT ReturniD,RtrId,RtrValueClassId ,L3,L2,L1,L1+L2+L3 HashProducts  INTO #ReturnRetailer FROM (
	SELECT ReturniD,RtrId,RtrValueClassId,D.CtgCode+ ':' + D.CtgName L3, C.CtgCode+ ':' + C.CtgName L2,B.ValueClassCode+ ':' + B.ValueClassName L1
	FROM #ReturnHeaderRtr A INNER JOIN RetailerValueClass B ON A.RtrvalueClassId = B.RtrCLassid
	INNER JOIN RetailerCategory C ON B.CtgMainID = C.CtgMainId
	INNER JOIN RetailerCategory D ON D.CtgMainId = C.CtgLinkId AND A.RtrvalueClassId>0
	UNION ALL
	SELECT ReturniD,A.RtrId,RtrValueClassId,HIERARCHY3CAP L3,HIERARCHY2CAP L2 ,HIERARCHY1CAP L1  FROM #ReturnHeaderRtr A 
	INNER JOIN TBL_GR_BUILD_RH B ON A.Rtrid = B.Rtrid AND A.RtrvalueClassId=0
	)A

	--SELECT a.*,HIERARCHY3CAP L3,HIERARCHY2CAP L2,HIERARCHY1CAP L1 INTO #SALINV FROM SALESINVOICE A,ROUTEMASTER B, SALESMAN C, RETAILER D  ,TBL_GR_BUILD_RH E
	--WHERE SALINVDATE BETWEEN @PI_fROMDATE AND @PI_TODATE AND A.RMID=B.RMID AND B.RMNAME LIKE @PI_FILTER5 and
 --   C.SMID=A.SMID AND C.SMNAME LIKE @PI_FILTER1 AND A.SALINVNO LIKE @PI_FILTER3 AND A.RTRID=D.RTRID and dlvsts in (4,5)
	--AND D.RTRNAME LIKE @PI_FILTER4 AND D.RTRID=E.RTRID AND E.HASHPRODUCTS LIKE @PI_FILTER6

	--SELECT a.*,HIERARCHY3CAP L3,HIERARCHY2CAP L2,HIERARCHY1CAP L1 INTO #RETURNHDR FROM RETURNHEADER A,ROUTEMASTER B, SALESMAN C, RETAILER D  ,TBL_GR_BUILD_RH E
	--WHERE ReturnDate BETWEEN @PI_fROMDATE AND @PI_TODATE AND A.RMID=B.RMID AND B.RMNAME LIKE @PI_FILTER5 and
 --   C.SMID=A.SMID AND C.SMNAME LIKE @PI_FILTER1 AND A.RETURNCODE LIKE @PI_FILTER3 AND A.RTRID=D.RTRID
	--AND D.RTRNAME LIKE @PI_FILTER4 AND D.RTRID=E.RTRID AND E.HASHPRODUCTS LIKE @PI_FILTER6 AND A.STATUS=0


	SELECT a.*,L3, L2, L1 INTO #SALINV FROM SALESINVOICE A,ROUTEMASTER B, SALESMAN C, RETAILER D  ,#SalesRetailer E
	WHERE SALINVDATE BETWEEN @PI_fROMDATE AND @PI_TODATE AND A.RMID=B.RMID AND B.RMNAME LIKE @PI_FILTER5 and
    C.SMID=A.SMID AND C.SMNAME LIKE @PI_FILTER1 AND A.SALINVNO LIKE @PI_FILTER3 AND A.RTRID=D.RTRID and dlvsts in (4,5) AND A.sALID = E.sALID 
	AND A.RtrValueClassId = E.RtrValueClassId
	AND D.RTRNAME LIKE @PI_FILTER4 AND D.RTRID=E.RTRID AND E.HASHPRODUCTS LIKE @PI_FILTER6

	SELECT a.*, L3, L2, L1 INTO #RETURNHDR FROM RETURNHEADER A,ROUTEMASTER B, SALESMAN C, RETAILER D  ,#ReturnRetailer E
	WHERE ReturnDate BETWEEN @PI_fROMDATE AND @PI_TODATE AND A.RMID=B.RMID AND B.RMNAME LIKE @PI_FILTER5 and
    C.SMID=A.SMID AND C.SMNAME LIKE @PI_FILTER1 AND A.RETURNCODE LIKE @PI_FILTER3 AND A.RTRID=D.RTRID AND A.ReturnID = E.RETURNID
	AND A.RtrValueClassId = E.RtrValueClassId
	AND D.RTRNAME LIKE @PI_FILTER4 AND D.RTRID=E.RTRID AND E.HASHPRODUCTS LIKE @PI_FILTER6 AND A.STATUS=0
  
    SELECT A.* INTO #SALESINVOICEPRODUCT FROM SALESINVOICEPRODUCT A,TBL_GR_BUILD_PH C, #SALINV D
	WHERE A.SALID=D.SALID AND A.PRDID=C.PRDID AND 	HASHPRODUCTS LIKE @PI_FILTER2 

    SELECT A.* INTO #RETURNPRODUCT FROM RETURNPRODUCT A,TBL_GR_BUILD_PH C, #RETURNHDR D
	WHERE A.RETURNID=D.RETURNID AND A.PRDID=C.PRDID AND 	HASHPRODUCTS LIKE @PI_FILTER2 

		SELECT    DISTINCT  #SALINV.SalInvNo,L3 [Retailer Hierarchy 1],L2 [Retailer Hierarchy 2],L1 [Retailer Hierarchy 3], Retailer.RtrCode, Retailer.RtrName, 
		CONVERT(VARCHAR(10),#SALINV.SalInvDate,121) Salinvdate,
		ProductBatch.PrdBatCode, Product.PrdName, Product.PrdDCode, 
		Product.PrdCCode,
		'Batch '+ProductBatch.CmpBatCode AS Batch, 
		#SALESINVOICEPRODUCT.PrdUnitMRP AS MRP, 
		#SALESINVOICEPRODUCT.PrdUnitSelRate AS [Selling Rate],
		CAST(#SALESINVOICEPRODUCT.BaseQty AS INT) AS [Quantity Billed],
		CAST(#SALESINVOICEPRODUCT.SalSchFreeQty+#SALESINVOICEPRODUCT.SalManFreeQty AS INT) AS [Offer Quantity],
		CAST(#SALESINVOICEPRODUCT.BaseQty+#SALESINVOICEPRODUCT.SalSchFreeQty+#SALESINVOICEPRODUCT.SalManFreeQty AS INT) [Total Quantity],
		#SALESINVOICEPRODUCT.PrdGrossAmount AS [Gross Amount], 
		#SALESINVOICEPRODUCT.SplDiscAmount AS [Special Discount],
		#SALESINVOICEPRODUCT.PrdSplDiscAmount AS [Product Special Discount], 
		#SALESINVOICEPRODUCT.PrdSchDiscAmount AS [Product Scheme Discount],
		#SALESINVOICEPRODUCT.PrdDBDiscAmount AS [Distributor Discount], 
		#SALESINVOICEPRODUCT.PrdCDAmount AS [Cash Discount],
		#SALESINVOICEPRODUCT.PrdTaxAmount AS [Tax Amount], 
		#SALESINVOICEPRODUCT.PrdNetAmount AS [Net Amount],
		TaxConfiguration.Taxid,TaxConfiguration.TaxCode, TaxConfiguration.TaxName, SalesInvoiceProductTax.TaxPerc, SalesInvoiceProductTax.TaxableAmount, 
		SalesInvoiceProductTax.TaxAmount
		INTO #TAXFINAL	
		FROM    #SALESINVOICEPRODUCT 
		INNER JOIN #SALINV ON  #SALESINVOICEPRODUCT.SalId = #SALINV.SalId 
		INNER JOIN ProductBatch ON  #SALESINVOICEPRODUCT.PrdId = ProductBatch.PrdId 
		AND  #SALESINVOICEPRODUCT.PrdBatId = ProductBatch.PrdBatId 
		INNER JOIN Retailer ON #SALINV.RtrId = Retailer.RtrId 
		INNER JOIN Product ON ProductBatch.PrdId = Product.PrdId 
		INNER JOIN SalesInvoiceProductTax ON  #SALESINVOICEPRODUCT.SalId = SalesInvoiceProductTax.SalId
		AND  #SALESINVOICEPRODUCT.SlNo = SalesInvoiceProductTax.PrdSlNo 
		INNER JOIN TaxConfiguration ON SalesInvoiceProductTax.TaxId = TaxConfiguration.TaxId
		where taxamount+taxableamount>0 

INSERT INTO #TAXFINAL
SELECT DISTINCT  #RETURNHDR.ReturnCode,L3 [Retailer Hierarchy 1],L2 [Retailer Hierarchy 2],L1 [Retailer Hierarchy 3], Retailer.RtrCode, Retailer.RtrName,
			CONVERT(VARCHAR(10),#RETURNHDR.RETURNDATE,121) Salinvdate,
			ProductBatch.PrdBatCode, Product.PrdName, Product.PrdDCode, 
			Product.PrdCCode,
			 'Batch '+ProductBatch.CmpBatCode AS Batch, 
			 #RETURNPRODUCT.PrdUnitMRP AS MRP, 
			 #RETURNPRODUCT.PrdUnitSelRte AS [Selling Rate],
			 -1*CAST(#RETURNPRODUCT.BaseQty AS INT) AS [Quantity Billed],
			 0 AS [Offer Quantity],
			 -1*CAST(#RETURNPRODUCT.BaseQty AS INT) [Total Quantity],
			 -1*#RETURNPRODUCT.PrdGrossAmt AS [Gross Amount], 
			 0 AS [Special Discount],
			 -1*#RETURNPRODUCT.PrdSplDisAmt AS [Product Special Discount], 
			 -1*#RETURNPRODUCT.PrdSchDisAmt AS [Product Scheme Discount],
			 -1*#RETURNPRODUCT.PrdDBDisAmt AS [Distributor Discount], 
			 -1*#RETURNPRODUCT.PrdCDDisAmt AS [Cash Discount],
			 -1*#RETURNPRODUCT.PrdTaxAmt AS [Tax Amount], 
			 -1*#RETURNPRODUCT.PrdNetAmt AS [Net Amount],
			TaxConfiguration.Taxid,TaxConfiguration.TaxCode, TaxConfiguration.TaxName, REturnProductTAx.TaxPerc, -1*REturnProductTAx.TaxableAmt, 
			-1*REturnProductTAx.TaxAmt
--INTO #TAXFINAL 
FROM        #RETURNPRODUCT INNER JOIN
			#RETURNHDR ON  #RETURNPRODUCT.RETURNID = #RETURNHDR.RETURNID INNER JOIN
			ProductBatch ON  #RETURNPRODUCT.PrdId = ProductBatch.PrdId 
			AND  #RETURNPRODUCT.PrdBatId = ProductBatch.PrdBatId INNER JOIN
			Retailer ON #RETURNHDR.RtrId = Retailer.RtrId INNER JOIN
			Product ON ProductBatch.PrdId = Product.PrdId INNER JOIN
			ReturnProductTax ON  #RETURNPRODUCT.Returnid = ReturnProducttax.Returnid
			AND  #RETURNPRODUCT.SlNo = ReturnProductTax.PrdSlNo INNER JOIN
			TaxConfiguration ON ReturnProductTax.TaxId = TaxConfiguration.TaxId


INSERT INTO #TAXFINAL SELECT ' Totals',TaxName+Cast(taxperc as varchar(10)), '', '', '', '', '', '','','',
                      '','',0, 
						 0,
						 CAST(sum([Quantity Billed]) AS INT),
						 CAST(sum([Offer Quantity]) AS INT),
						 CAST(sum([Total Quantity]) as int) [Total Quantity],
						 sum([Gross Amount]) AS [Gross Amount], 
						 sum([Special Discount]) AS [Special Discount],
						 sum([Product Special Discount]) AS [Product Special Discount], 
						 sum([Product Scheme Discount]) AS [Product Scheme Discount],
						 sum([Distributor Discount]) AS [Distributor Discount], 
						 sum([Cash Discount]) AS [Cash Discount],
						 sum([Tax Amount]) AS [Tax Amount], 
						 sum([Net Amount]) AS [Net Amount],
						Taxid,TaxCode,
						 TaxName, 
						TaxPerc, 
						sum(TaxableAmount), 
						sum(TaxAmount)
FROM #TAXFINAL
GROUP BY Taxid,TaxCode,
						 TaxName, 
						TaxPerc

CREATE TABLE #TAXCROSSTAB(PKEY INT IDENTITY(1,1),TAXCAPTION VARCHAR(100),CAption2 varchar(100))
SELECT 'Taxable Amount' Caption2 into #temp 
insert into #temp select 'Tax Amount'

INSERT INTO #TAXCROSSTAB SELECT DISTINCT  TaxName+' '+CAST(CAST(TAXPERC AS NUMERIC(18,2)) AS VARCHAR),Caption2 FROM #TAXFINAL, #temp 
----------------------------------------------BASED ON LEVEL --BOTREETESTING
SELECT       SalInvNo [Sales Invoice Number], [Retailer Hierarchy 1], [Retailer Hierarchy 2], [Retailer Hierarchy 3], RtrCode [Retailer Code], RtrName [Retailer Name], Salinvdate [Sales Invoice Date], 
						  PrdDCode [Dist. Product Code], PrdCCode [Company Product Code],PrdName [Product Name],
						 Batch, 
						 MRP, 
						 [Selling Rate],
						[Quantity Billed],
						[Offer Quantity],
						 [Gross Amount], 
						  [Special Discount],
						 [Product Special Discount], 
						 [Product Scheme Discount],
						 [Distributor Discount], 
						  [Cash Discount],
						 sum(TaxableAmount) [Total Taxable Amount], 
                         sum(TaxAmount) [Total Tax Amount],
						  [Net Amount]
INTO #OUTPUT from #TAXFINAL
group by  SalInvNo, [Retailer Hierarchy 1], [Retailer Hierarchy 2], [Retailer Hierarchy 3],RtrCode, RtrName,  SalInvDate, PrdBatCode, PrdName, PrdDCode, PrdCCode,
						 Batch, 
						 MRP, 
							 [Selling Rate],[Quantity Billed],
						[Offer Quantity],
						 [Gross Amount], 
						  [Special Discount],
						 [Product Special Discount], 
						 [Product Scheme Discount],
						 [Distributor Discount], 
						  [Cash Discount],
				 [Net Amount]
SELECT      SalInvNo, RtrCode, RtrName,  SalInvDate, Batch, PrdName, PrdDCode, 
                      PrdCCode,TaxName+' '+CAST(CAST(TAXPERC AS NUMERIC(18,2)) AS VARCHAR) +' Taxable Amount' Keys, TaxableAmount AMT
						--TaxAmount 
                        INTO #OUTPUTCTAB from #TAXFINAL
INSERT INTO #OUTPUTCTAB SELECT      SalInvNo, RtrCode, RtrName,  SalInvDate, Batch, PrdName, PrdDCode, 
                      PrdCCode,TaxName+' '+CAST(CAST(TAXPERC AS NUMERIC(18,2)) AS VARCHAR) +' Tax Amount' Keys, TaxAmount AMT
                         from #TAXFINAL


--BOTREETESTING
	IF EXISTS (SELECT * FROM #TAXCROSSTAB)
	BEGIN
		SELECT
			 @PHLEVEL = COALESCE(@phlevel+' NUMERIC(18,6) , ', '') +'[' +TAXCAPTION+' '+CAPTION2+']'
		FROM
			#TAXCROSSTAB

		SET @PHLEVEL = @PHLEVEL + ' NUMERIC(18,6)'

		SET @SQLSTR1 = ''
		SET @SQLSTR1 = 'ALTER TABLE #OUTPUT ADD ' + @PHLEVEL
		PRINT(@SQLSTR1)
		EXEC (@SQLSTR1)


--BOTREETESTING
	END

	DECLARE @PH_COUNT AS INT
	DECLARE @I AS INT

	SELECT @PH_COUNT = COUNT(*) FROM #TAXCROSSTAB
	IF EXISTS (SELECT * FROM #TAXCROSSTAB)
	BEGIN
		SET @I = 1
		WHILE (@I <= @PH_COUNT)
		BEGIN

--botreetesting
			SELECT @PHLEVEL = TAXCAPTION+' '+Caption2 FROM #TAXCROSSTAB WHERE PKEY = @I

			SET @SQLSTR1 =  'UPDATE #OUTPUT SET [' + @PHLEVEL + '] = 0.000000'

			EXEC(@SQLSTR1)
				
			SET @SQLSTR1 = ''
			SET @SQLSTR1 = @SQLSTR1 + 'UPDATE A SET A.[' + @PHLEVEL + '] = B.AMT  FROM #OUTPUT A, #OUTPUTCTAB B '
			SET @SQLSTR1 = @SQLSTR1 + 'WHERE A.[Sales Invoice Number]=B.SALINVNO AND A.[Dist. Product Code]=B.PrdDCode AND A.[Batch]=B.Batch AND B.KEYS = ''' + @PHLEVEL + ''''
			PRINT @SQLsTR1
			EXEC(@SQLSTR1)

			SET @I = @I + 1
		END
	END
--SELECT * FROM #OUTPUT WHERE SALINVNO='AAG15761'
SELECT ' Billwise Prdwise Tax Split',* FROM #OUTPUT ORDER BY [Sales Invoice Number]
--BOTREETESTING


END
GO
DELETE FROM Menudef WHERE MenuName ='mnuContractPricingNew'
INSERT INTO Menudef
SELECT 205,'mCus50','mnuContractPricingNew','mCus','Contract Pricing New',0,'frmContractPricingMasterNew','Contract Pricing'
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Proc_GR_BillPrdSales' AND TYPE='P')
DROP PROCEDURE Proc_GR_BillPrdSales
GO
--EXEC Proc_GR_BillPrdSales 'Billwise Productwise Sales','2020-05-01','2020-05-15','','','','','',''
CREATE PROCEDURE Proc_GR_BillPrdSales
(
	@Pi_RptName		NVARCHAR(100),
	@Pi_FromDate	DATETIME,
	@Pi_ToDate		DATETIME,
	@Pi_Filter1		NVARCHAR(100),
	@Pi_Filter2		NVARCHAR(100),
	@Pi_Filter3		NVARCHAR(100),
	@Pi_Filter4		NVARCHAR(100),
	@Pi_Filter5		NVARCHAR(100),
	@Pi_Filter6		NVARCHAR(100)
)
AS 
BEGIN
--EXEC Proc_GR_BillPrdSales 'Billwise Productwise Sales','2011-01-01','2011-03-22','ARUN KUMAR','IN C&B : Instant Tea - Retail','','','Old II',''
--EXEC Proc_GR_BillPrdSales 'Billwise Productwise Sales','2011-12-12','2011-12-12','','','','','',''
		SET @Pi_FILTER1='%'+ISNULL(@Pi_FILTER1,'')+'%'        
		SET @Pi_FILTER2='%'+ISNULL(@Pi_FILTER2,'')+'%'        
		SET @Pi_FILTER3='%'+ISNULL(@Pi_FILTER3,'')+'%'        
		SET @Pi_FILTER4='%'+ISNULL(@Pi_FILTER4,'')+'%'        
		SET @Pi_FILTER5='%'+ISNULL(@Pi_FILTER5,'')+'%'  
		SET @Pi_FILTER6='%'+ISNULL(@Pi_FILTER6,'')+'%'   
		
		 
		 	
	SELECT Salid,RtrId,RtrValueClassId INTO #SalesinvoiceRtr  FROM Salesinvoice WHERE SALINVDATE BETWEEN @PI_fROMDATE AND @PI_TODATE 
	 

	SELECT Salid,RtrId,RtrValueClassId ,L3,L2,L1,L1+L2+L3 HashProducts INTO #SalesRetailer FROM (
	SELECT Salid,RtrId,RtrValueClassId,D.CtgCode+ ':' + D.CtgName L3, C.CtgCode+ ':' + C.CtgName L2,B.ValueClassCode+ ':' + B.ValueClassName L1
	FROM #SalesinvoiceRtr A INNER JOIN RetailerValueClass B ON A.RtrvalueClassId = B.RtrCLassid
	INNER JOIN RetailerCategory C ON B.CtgMainID = C.CtgMainId
	INNER JOIN RetailerCategory D ON D.CtgMainId = C.CtgLinkId AND A.RtrvalueClassId>0
	UNION ALL
	SELECT Salid,A.RtrId,RtrValueClassId,HIERARCHY3CAP L3,HIERARCHY2CAP L2 ,HIERARCHY1CAP L1  FROM #SalesinvoiceRtr A 
	INNER JOIN TBL_GR_BUILD_RH B ON A.Rtrid = B.Rtrid AND A.RtrvalueClassId=0
	)A

	SELECT a.*,L1,L2,L3 INTO #SALINV FROM SALESINVOICE A,ROUTEMASTER B, SALESMAN C, RETAILER D ,#SalesRetailer E
	WHERE SALINVDATE BETWEEN @PI_fROMDATE AND @PI_TODATE AND A.RMID=B.RMID AND B.RMNAME LIKE @PI_FILTER5 and
    C.SMID=A.SMID AND C.SMNAME LIKE @PI_FILTER1 AND A.SALINVNO LIKE @PI_FILTER3 AND A.RTRID=D.RTRID AND E.SALID = A.SalId 
	AND A.RtrValueClassId = E.RtrValueClassId 
	AND D.RTRNAME LIKE @PI_FILTER4 AND E.RTRID=D.RTRID 
	AND E.HASHPRODUCTS LIKE @PI_FILTER6


    SELECT A.*,C.Brand_Caption INTO #SALESINVOICEPRODUCT FROM SALESINVOICEPRODUCT A,TBL_GR_BUILD_PH C, #SALINV D
	WHERE A.SALID=D.SALID AND A.PRDID=C.PRDID AND 	HASHPRODUCTS LIKE @PI_FILTER2 
	
	    
	SELECT				'Detail ' SheetCaption,Salesman.SMName AS Salesman,RM.RMName [Route],
						 L1 [Retailer Hierarchy 1],
						L2 [Retailer Hieararchy 2],						 
						L3 [Retailer Hierarchy 3],
						 Retailer.RtrCode AS [Retailer Code],
						 Retailer.RtrName AS [Retailer Name],
						 Retailer.RtrAdd1 AS [Address 1],
						 #SALINV.SalInvNo AS [Sales Invoice Number],
						 CONVERT(VARCHAR(10),#SALINV.SalInvDate,121) AS [Sales Invoice Date],
						 CONVERT(VARCHAR(10),#SALINV.SalDlvDate,121) as [Actual Delivery Date],
						 CASE #SALINV.DlvSts  when 1 then 'Saved' 
											  when 2 then 'Vehicle Allocated' 
											  when 3 then 'Cancelled' 
											  when 4 then 'Delivered' 
											  when 5 then 'Fully Settled' 
						 end AS [Delivery Status], 
						 Product.PrdcCode as [Company Product Code],
                         #SALESINVOICEPRODUCT.Brand_Caption,
						 Product.PrdDCode AS [Dist. Product Code],
						 Product.PrdName AS [Product Name], 
						 'Batch '+ProductBatch.CmpBatCode AS Batch, 
						 #SALESINVOICEPRODUCT.PrdUnitMRP AS MRP, 
						 #SALESINVOICEPRODUCT.PrdUnitSelRate AS [Selling Rate],
						 CAST(#SALESINVOICEPRODUCT.BaseQty AS INT) AS [Quantity Billed],
						 #SALESINVOICEPRODUCT.PrdGrossAmount AS [Gross Amount], 
						 #SALESINVOICEPRODUCT.SplDiscAmount AS [Special Discount],
						 #SALESINVOICEPRODUCT.PrdSplDiscAmount AS [Product Special Discount], 
						 #SALESINVOICEPRODUCT.PrdSchDiscAmount AS [Product Scheme Discount],
						 #SALESINVOICEPRODUCT.PrdDBDiscAmount AS [Distributor Discount], 
						 #SALESINVOICEPRODUCT.PrdCDAmount AS [Cash Discount],
						 #SALESINVOICEPRODUCT.PrdTaxAmount AS [Tax Amount], 
						 #SALESINVOICEPRODUCT.PrdNetAmount AS [Net Amount],
						 OrgSelRate
	INTO #DETAIL FROM	  ProductBatch INNER JOIN
						  Product ON ProductBatch.PrdId = Product.PrdId
						  INNER JOIN #SALESINVOICEPRODUCT ON ProductBatch.PrdId = #SALESINVOICEPRODUCT.PrdId 
						  AND ProductBatch.PrdBatId = #SALESINVOICEPRODUCT.PrdBatId
						  AND Product.PrdId = #SALESINVOICEPRODUCT.PrdId
						  INNER JOIN #SALINV
						  INNER JOIN Salesman ON #SALINV.SMId = Salesman.SMId ON #SALESINVOICEPRODUCT.SalId = #SALINV.SalId
						  INNER JOIN Retailer ON #SALINV.RtrId = Retailer.RtrId
						  INNER JOIN RouteMaster RM ON #SALINV.RmId=RM.RmId
	INSERT INTO #DETAIL SELECT ' Detail','Totals','','','','','','','','','','','','','','','','',0,0,isnull(sum([Quantity Billed]),0),isnull(SUM([Gross Amount]),0),isnull(SUM([Special Discount]),0),
						isnull(SUM([Product Special Discount]),0),isnull(Sum([Product Scheme Discount]),0),isnull(Sum([Distributor Discount]),0),isnull(Sum([Cash Discount]),0),isnull(Sum([Tax Amount]),0),
						isnull(Sum([Net Amount]),0),ISNULL(SUM(OrgSelRate),0)
	FROM #DETAIL
	SELECT * FROM #DETAIL ORDER BY SHEETCAPTION
	DELETE FROM #DETAIL WHERE SHEETCAPTION=' Detail'
	
	SELECT     			'Datewise-Productwise ' SheetCaption,	
						[Sales Invoice Date], 
						[Delivery Status], 
						[Company Product Code],
                        Brand_Caption,
						[Dist. Product Code],
						[Product Name], 
						Batch, 
						MRP, 
						[Selling Rate],
						SUM([Quantity Billed]) [Quantity Billed],
						SUM([Gross Amount]) [Gross Amount],
						SUM([Special Discount]) [Special Discount],
						SUM([Product Special Discount]) [Product Special Discount],
						SUM([Product Scheme Discount]) [Product Scheme Discount],
						SUM([Distributor Discount]) [Distributor Discount],
						SUM([Cash Discount]) [Cash Discount],
						SUM([Tax Amount]) [Tax Amount],
						SUM([Net Amount]) [Net Amount]
	INTO #DETAIL2		FROM #DETAIL
	GROUP BY			[Sales Invoice Date], 
						[Delivery Status], 
						[Company Product Code],
                        Brand_Caption,
						[Dist. Product Code],
						[Product Name], 
						Batch, 
						MRP, 
						[Selling Rate]
	INSERT INTO #DETAIL2 SELECT ' Datewise-Productwise','Totals','','','','','','',0,0,isnull(sum([Quantity Billed]),0),isnull(SUM([Gross Amount]),0),isnull(SUM([Special Discount]),0),
						isnull(SUM([Product Special Discount]),0),isnull(Sum([Product Scheme Discount]),0),isnull(Sum([Distributor Discount]),0),isnull(Sum([Cash Discount]),0),isnull(Sum([Tax Amount]),0),
						isnull(Sum([Net Amount]),0)
	FROM #DETAIL2
	SELECT				* FROM #DETAIL2 ORDER BY SHEETCAPTION
	
	SELECT     			'Product Summary ' SheetCaption,	
						[Delivery Status],
						[Company Product Code],
                        Brand_Caption,
						[Dist. Product Code],
						[Product Name], 
						Batch, 
						MRP, 
						[Selling Rate],
						SUM([Quantity Billed]) [Quantity Billed],
						SUM([Gross Amount]) [Gross Amount],
						SUM([Special Discount]) [Special Discount],
						SUM([Product Special Discount]) [Product Special Discount],
						SUM([Product Scheme Discount]) [Product Scheme Discount],
						SUM([Distributor Discount]) [Distributor Discount],
						SUM([Cash Discount]) [Cash Discount],
						SUM([Tax Amount]) [Tax Amount],
						SUM([Net Amount]) [Net Amount],
						SUM(DISTINCT OrgSelRate) [OrgSelRate]
						FROM #DETAIL
	GROUP BY			
						[Delivery Status],
						[Company Product Code],
                        Brand_Caption,
						[Dist. Product Code],
						[Product Name], 
						Batch, 
						MRP, 
						[Selling Rate]
	UNION
	SELECT     			' Product Summary' SheetCaption,	
						' Totals',
						'',
						'',
						'', 
						'', 
                        '',
						0, 
						0,
						SUM([Quantity Billed]) [Quantity Billed],
						SUM([Gross Amount]) [Gross Amount],
						SUM([Special Discount]) [Special Discount],
						SUM([Product Special Discount]) [Product Special Discount],
						SUM([Product Scheme Discount]) [Product Scheme Discount],
						SUM([Distributor Discount]) [Distributor Discount],
						SUM([Cash Discount]) [Cash Discount],
						SUM([Tax Amount]) [Tax Amount],
						SUM([Net Amount]) [Net Amount],
						SUM(OrgSelRate) [OrgSelRate]
						FROM #DETAIL 	ORDER BY SHEETCAPTION
END
GO
UPDATE ContractPricingMaster SET ConrefNo = ComConRefNo WHERE ConRefNo = ''
GO
--Mohana till here
IF EXISTS(SELECT 'X' FROM SYSOBJECTS WHERE XTYPE='TF' AND NAME='Fn_ValidateSalesmanRoute')
DROP FUNCTION Fn_ValidateSalesmanRoute
GO
CREATE FUNCTION Fn_ValidateSalesmanRoute(@RmId AS INT,@SmId AS INT,@iMode AS TINYINT)  
RETURNS @RouteValidation TABLE  
(  
SMId INT,
RMId	INT
)  
AS  
/***************************************************************************************************  
* FUNCTION : Fn_ValidateSalesmanRoute  
* PURPOSE : Return route validation for salesman 
* NOTES  :  
* CREATED : Murugan.R  
* MODIFIED  
* DATE          AUTHOR			CR\BUG		USER STORY ID	  DESCRIPTION  
* 14/05/2020	MURUGAN.R		SR			PARCS202100021		Return route validation for salesman    
-------------------------------------------------------------------------------------------------  
**************************************************************************************************/  
BEGIN 
 IF @iMode=1
 BEGIN
	 INSERT INTO @RouteValidation(SMId,RMId)  
	 SELECT SMId,A.RMId FROM Salesmanmarket A  (NOLOCK) INNER JOIN RouteMaster B (NOLOCK) ON  A.RMId=B.RMId   
	 WHERE A.RMId=@RmId
	 AND B.RMCode NOT IN('SRDummy01')  
 END
 ELSE
 BEGIN	 
	 INSERT INTO @RouteValidation(SMId,RMId)  
	 SELECT SMId,A.RMId FROM Salesmanmarket A  (NOLOCK) INNER JOIN RouteMaster B (NOLOCK) ON  A.RMId=B.RMId  
	 WHERE A.RMId=@RmId and SMId <> @SmId	
	 AND B.RMCode NOT IN('SRDummy01')  
 END
 RETURN  
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='PROC_Validate_WS2CS_NewCustomerRequest' AND TYPE='P')
DROP PROCEDURE PROC_Validate_WS2CS_NewCustomerRequest
GO
/*
BEGIN TRAN
DELETE FROM PDA_NewRetailer
Exec PROC_Validate_WS2CS_NewCustomerRequest '1,2'
SELECT * FROM Import_WS2CS_NewCustomerRequest
SELECT * FROM PDA_NewRetailer
SELECT * FROM PDAlog
ROLLBACK TRAN
*/
CREATE PROCEDURE PROC_Validate_WS2CS_NewCustomerRequest
(      
@SalRpCode varchar(50)      
)      
AS
/*******************************************************************************************
* PROCEDURE		: PROC_Validate_WS2CS_NewCustomerRequest
* PURPOSE		: To Validate and Insert New Customer details From PDA Intermediate Database
* CREATED		: Amuthakumar P
* CREATED DATE	: 28/08/2018
* MODIFIED		:
* DATE      AUTHOR     DESCRIPTION
*****************************************************************************************************
* DATE         AUTHOR			CR/BZ	   USER STORY ID   DESCRIPTION                         
*****************************************************************************************************
28/08/2018   Amuthakumar P		CR         CRCRSTPAR0019   Parle SFA integration to Vxceed server(Phase 2&3)
05-04-2019   Lakshman M			BZ         ILCRSTPAR3989   while importing retailer from SFA to Core stocky retailer default Active status validation included. 
28-05-2020   MOHANA S			BZ		  PARCS202100026	RETAILER CODE ISSUE FIX
22-06-2020   MOHANA S			BZ		  UAT ISSUE			RETAILER CODE ISSUE FIX
********************************************************************************************/     
DECLARE @CustomerCode AS varchar(200) 
DECLARE @CustomerName AS varchar(200)
DECLARE @CategoryCode1 AS varchar(100)
DECLARE @CategoryCode2 AS varchar(100)
DECLARE @lError AS int
DECLARE @CtgName AS nvarchar(200)
DECLARE @ValueClassName AS nvarchar(200)
DECLARE @RtrClassid int
DECLARE @CtgMainid int
DECLARE @CtgLinkid int 
DECLARE @CtgLevelId int
DECLARE @CtgLinkCode AS nvarchar(200)
DECLARE @CtgLevelName AS nvarchar(200)
DECLARE @Cmpid int 
DECLARE @CmpName AS nvarchar(200)
BEGIN      
 BEGIN TRANSACTION T1      
 DELETE FROM Import_WS2CS_NewCustomerRequest WHERE DownloadFlag='Y' 
 	DELETE FROM Import_WS2CS_NewCustomerRequest_Track WHERE CONVERT(VARCHAR(10),CreatedDate,121)<=DATEADD(M,-3,CONVERT(VARCHAR(10),GETDATE(),121))
	INSERT INTO Import_WS2CS_NewCustomerRequest_Track(RequestID,TenantCode,LocationCode,RouteCode,SalesmanCode,PostingDate,CustomerName,Address1,
			 Address2,Address3,City,State,Zip,Phone,Fax,Email,ContactPerson,Notes,GeoCodeX,GeoCodeY,CategoryCode1,CategoryCode2,CategoryCode3,
			 HierarchyCode,DateofBirth,IDNumber,DocumentType,DocumentPrefix,DocumentNumber,DownloadFlag,CreatedDate)
	SELECT RequestID,TenantCode,LocationCode,RouteCode,SalesmanCode,PostingDate,CustomerName,Address1,Address2,Address3,City,State,Zip,Phone,Fax,
			 Email,ContactPerson,Notes,GeoCodeX,GeoCodeY,CategoryCode1,CategoryCode2,CategoryCode3,HierarchyCode,DateofBirth,IDNumber,DocumentType,
			 DocumentPrefix,DocumentNumber,DownloadFlag,CreatedDate
	FROM Import_WS2CS_NewCustomerRequest
	WHERE downloadflag='N'
	
	UPDATE Import_WS2CS_NewCustomerRequest SET DOWNLOADFLAG='D' WHERE DOWNLOADFLAG='N'
	
	SELECT CustomerName,MAX(CREATEDDATE)CREATEDDATE INTO #MAXDATE FROM Import_WS2CS_NewCustomerRequest GROUP BY CustomerName
	
	CREATE TABLE #Import_WS2CS_NewCustomerRequest 
	(
	CustomerCode	NVARCHAR(100),
	CustomerName	NVARCHAR(100),
	CategoryCode1	NVARCHAR(100),
	CategoryCode2	NVARCHAR(100),
	CreatedDate		DATETIME
	)
	
	--Included to avoid Duplicate cus Code
	DECLARE @Id INT
	SELECT @Id = ISNULL(MAX(Customercode),0) FROM PDA_NewRetailer 

	SELECT DISTINCT    DENSE_RANK() OVER (		ORDER BY A.CustomerName	) 
	  CustomerCode , A.CustomerName,CategoryCode1,CategoryCode2,A.CreatedDate 
	INTO #NewRtrCode 
	FROM Import_WS2CS_NewCustomerRequest A INNER JOIN #MAXDATE B ON A.CustomerName = B.CustomerName AND A.CreatedDate =  B.CREATEDDATE
	WHERE DownloadFlag='D' AND DocumentPrefix  =''

	UPDATE #NewRtrCode SET CustomerCode = CustomerCode+@Id

	INSERT INTO #Import_WS2CS_NewCustomerRequest
	SELECT cast (CustomerCode as varchar(50)) ,CustomerName ,CategoryCode1,CategoryCode2,CreatedDate  FROM #NewRtrCode  
	UNION ALL
	SELECT DISTINCT  (DocumentPrefix+CAST(DocumentNumber AS VARCHAR(50))) CustomerCode , A.CustomerName,CategoryCode1,CategoryCode2,A.CreatedDate 
	--INTO #Import_WS2CS_NewCustomerRequest 
	FROM Import_WS2CS_NewCustomerRequest A INNER JOIN #MAXDATE B ON A.CustomerName = B.CustomerName AND A.CreatedDate =  B.CREATEDDATE
	WHERE DownloadFlag='D' AND DocumentPrefix  <>''
	 
	
 DECLARE CUR_ImportRetailer Cursor For  
 --SELECT DISTINCT '' CustomerCode, CustomerName,CategoryCode1,CategoryCode2 
	--	From Import_WS2CS_NewCustomerRequest WHERE DownloadFlag='D'   
	 SELECT DISTINCT CustomerCode, CustomerName,CategoryCode1,CategoryCode2 
		From #Import_WS2CS_NewCustomerRequest   
 OPEN CUR_ImportRetailer      
 FETCH NEXT FROM CUR_ImportRetailer INTO  @CustomerCode,@CustomerName,@CategoryCode1,@CategoryCode2
 While @@Fetch_Status = 0      
 BEGIN      
  SET @lError = 0
    	
  IF NOT EXISTS (SELECT RtrName FROM Retailer WHERE RtrName = @CustomerName )      
   BEGIN   
		--IF NOT EXISTS(SELECT * FROM RetailerCategory WHERE CtgCode=@CategoryCode1)
		--BEGIN
		--	SET @lError = 1      
		--	INSERT INTO PDALog(SrpCde,DataPoint,[Name],Description)      
		--	SELECT '' + @CategoryCode1 + '','New Retailer',@CustomerName,'Reatailer Category1 does not exists'  
		--END
		--IF NOT EXISTS(SELECT * FROM RetailerValueClass WHERE ValueClassCode=@CategoryCode2)
		--BEGIN
		--	SET @lError = 1      
		--	INSERT INTO PDALog(SrpCde,DataPoint,[Name],Description)      
		--	SELECT '' + @CategoryCode2 + '','New Retailer',@CustomerName,'Reatailer Category2 does not exists'  
		--END
	IF @lError=0 
	 BEGIN
		Select @RtrClassid=A.RtrClassId,
			   @ValueClassName=A.ValueClassName,
			   @CtgMainid=B.CtgMainId,
			   @CtgLinkid=B.CtgLinkId,
			   @CtgLevelId=B.CtgLevelId,
			   @CtgLinkCode=B.CtgLinkCode,
			   @CtgName=B.CtgName,
			   @CtgLevelName=C.CtgLevelName,
			   @Cmpid=C.CmpId,
			   @CmpName=D.CmpName 
			FROM RetailerValueClass A,RetailerCategory B,RetailerCategoryLevel C,Company D 
			WHERE A.CtgMainId=B.CtgMainId And B.CtgLevelId=C.CtgLevelId And C.CmpId=D.CmpId
			AND CtgCode=@CategoryCode1 AND a.ValueClassCode=@CategoryCode2
	 
	 END 		
	IF @lError=0 
		BEGIN
		  IF NOT EXISTS (SELECT * FROM PDA_NewRetailer WHERE CustomerName=@CustomerName)
			   BEGIN 
					INSERT INTO PDA_NewRetailer(CustomerCode,CustomerName,Address1,Address2,Address3,City,State,Zip,Phone,Fax,Email,
					RtrTINNo,ContactPerson,Notes,CustomerStatus,CtgCode,CtgName,ValueClassCode,ValueClassName,RtrClassid,CtgMainid,
					CtgLinkid,CtgLevelId,CtgLinkCode,CtgLevelName,Cmpid,CmpName,CrBills,RtrTaxable,RouteId,GeoMainId,GeoLevelName,
					GeoLevel,Longitude,Latitude,RtrMobileNo,DateOfBirth,PDAFlag) 
					SELECT  CustomerCode,A.CustomerName,isnull(Address1,'')Address1,isnull(Address2,'')Address2,
					isnull(Address3,'')Address3,isnull(City,'')City,isnull(State,'')State,isnull(Zip,'')Zip,isnull(Phone,'')Phone,isnull(Fax,'')Fax,isnull(Email,'')Email,
					'' RtrTINNo,isnull(ContactPerson,'')ContactPerson,isnull(Notes,'')Notes,'1' AS CustomerStatus, ----------- Added by lakshman M Dated ON 05-04-2019 PMS ID: ILCRSTPAR3989
					isnull(A.CategoryCode1,'')CategoryCode1,isnull(@CtgName,''),isnull(A.CategoryCode2,'')CategoryCode2,isnull(@ValueClassName,''),
					ISNULL(@RtrClassid,0),ISNULL(@CtgMainid,0),ISNULL(@CtgLinkid,0),ISNULL(@CtgLevelId,0),ISNULL(@CtgLinkCode,''),ISNULL(@CtgLevelName,''),
					ISNULL(@Cmpid,0),ISNULL(@CmpName,''),0,'' RtrTaxable,0,0,'' GeoLevelName,
					'' GeoLevel,isnull(GeoCodeX,'')GeoCodeX,isnull(GeoCodeY,'')GeoCodeY,''RtrMobileNo,ISNULL(CONVERT(VARCHAR(10),DateOfBirth,121),'') DateOfBirth,'WS' PDAFlag
					FROM Import_WS2CS_NewCustomerRequest A INNER JOIN #Import_WS2CS_NewCustomerRequest B ON A.CustomerName=B.CustomerName 
					AND A.CREATEDDATE = B.CREATEDDATE
					WHERE A.CustomerName=@CustomerName
			   END 	
				UPDATE Import_WS2CS_NewCustomerRequest SET DownloadFlag='Y' WHERE CustomerName=@CustomerName
		 END 
	 END      
  ELSE      
    BEGIN      
	   INSERT INTO PDALog(SrpCde,DataPoint,[Name],Description)      
	   SELECT '' + @CustomerCode + '','New Retailer',@CustomerName,'Retailer Code Already exists'      
    END       
FETCH NEXT FROM CUR_ImportRetailer INTO @CustomerCode,@CustomerName,@CategoryCode1,@CategoryCode2
END      
CLOSE CUR_ImportRetailer      
DEALLOCATE CUR_ImportRetailer     
 IF @@ERROR = 0      
 BEGIN      
	COMMIT TRANSACTION T1      
 END      
 ELSE      
 BEGIN      
	ROLLBACK TRANSACTION T1      
 END      
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_Cs2Cn_SalesReturn' AND TYPE='P')
DROP PROCEDURE Proc_Cs2Cn_SalesReturn
GO
/*
BEGIN TRAN
UPDATE RETURNHEADER SET UPLOAD = 0
EXEC Proc_Cs2Cn_SalesReturn 0,''
SELECT * FROM Cs2Cn_Prk_SalesReturn
ROLLBACK TRAN
*/
CREATE PROCEDURE Proc_Cs2Cn_SalesReturn
(  
 @Po_ErrNo INT OUTPUT,
 @ServerDate DATETIME  
)  
AS
--EXEC Proc_Cs2Cn_SalesReturn 0   
/***************************************************************************************************
* PROCEDURE  : Proc_Cs2Cn_SalesReturn  
* PURPOSE  : To Extract Sales Return Details from CoreStocky to upload to Console  
* CREATED BY : Nandakumar R.G  
* CREATED DATE : 21/03/2010  
* NOTE   :  
* MODIFIED  
***************************************************************************************************  
* DATE         AUTHOR         CR/BZ    USER STORY ID           DESCRIPTION                           
***************************************************************************************************  
21-12-2018   Lakshman M        SR      ILCRSTPAR2905        AS per client request LCTR Formula validation changed special price not consider Now default price only considered in LCTR Value. 
19-09-2019   Lakshman M        BZ      ILCRSTPAR6012        while upload sales return values tax perc values column script level validation missing in.
11-11-2019   Deepan			   CR	   CRCRSTPAR0089         Category and Value Class and channel Added
13-12-2019	 MOHANA S		   SR	   CRCRSTPAR0079		LCTR Calculation For New CR
12-11-2019   LAKSHMAN M        SR      ILCRSTPAR6643        Product tax calculation procedure validation splited for sales return upload process.											
06-01-2020	  Deepan		   BZ 	   ILCRSTPAR7329		Category and channel modified	
28-05-2020	MOHANA S		   BZ	   PARCS202100027		fromdate and todate taken from Return table
****************************************************************************************************/  
SET NOCOUNT ON  
BEGIN  
 DECLARE @CmpId    AS INT  
 DECLARE @DistCode  As nVarchar(50)  
 DECLARE @DefCmpAlone AS INT  
 SET @Po_ErrNo=0 
 DECLARE @FromDate DATETIME  
 DECLARE @ToDate DATETIME  
 --SELECT @FromDate = MIN(TransDate),@ToDate = MAX(TransDate) FROM UploadingReportTransaction S (NOLOCK)

 --PARCS202100027
 SELECT @FromDate = MIN(ReturnDate),@ToDate = MAX(ReturnDate)  FROM ReturnHeader WHERE UpLoad = 0 AND Status = 0 

 EXEC Proc_SchUtilization_Report @FromDate,@ToDate

 EXEC Proc_ReturnSalesProductTaxPercentage_SR @FromDate,@ToDate  
	 
	 SELECT * INTO #ParleOutputTaxPercentage  FROM ParleOutputTaxPercentage_SR (NOLOCK) 
 DECLARE @SlNo AS INT  
 SELECT @SlNo = SlNo FROM BatchCreation (NOLOCK) WHERE FieldDesc = 'Selling Price'
	
 SELECT @DefCmpAlone=ISNULL(Status,0) FROM Configuration WHERE ModuleId='BotreeUpload01' AND ModuleName='Botree Upload'  
 DELETE FROM Cs2Cn_Prk_SalesReturn WHERE UploadFlag = 'Y'  
 SELECT @CmpId = CmpId FROM Company WHERE DefaultCompany = 1   
 SELECT @DistCode = DistributorCode FROM Distributor  
 --INSERT INTO [Cs2Cn_Prk_SalesReturn]  
 --(  
 -- DistCode  ,  
 -- SRNRefNo  ,  
 -- SRNRefType  ,  
 -- SRNDate   ,  
 -- SRNMode   ,  
 -- SRNType   ,   
 -- SRNGrossAmt  ,  
 -- SRNSplDiscAmt ,   
 -- SRNSchDiscAmt ,  
 -- SRNCashDiscAmt ,  
 -- SRNDBDiscAmt ,  
 -- SRNTaxAmt  ,  
 -- SRNRoundOffAmt ,
 -- SRNInvDiscount,  
 -- SRNNetAmt  ,  
 -- SalesmanName ,  
 -- SalesRouteName ,  
 -- RtrId   ,  
 -- RtrCode   ,  
 -- RtrName   ,  
 -- PrdSalInvNo  ,  
 -- PrdLcnId  ,  
 -- PrdLcnCode  ,  
 -- PrdCode   ,  
 -- PrdBatCde  ,  
 -- PrdSalQty  ,  
 -- PrdUnSalQty  ,  
 -- PrdOfferQty  ,  
 -- PrdSelRate  ,  
 -- PrdGrossAmt  ,  
 -- PrdSplDiscAmt ,  
 -- PrdSchDiscAmt ,  
 -- PrdCashDiscAmt ,  
 -- PrdDBDiscAmt ,  
 -- PrdTaxAmt  ,  
 -- PrdNetAmt  ,  
 -- UploadFlag,
 -- RtrUniqueCode,
 -- CtgCode,
 -- CtgName,
 -- ValueClassCode,
 -- ValueClassName,
 -- ChannelCode,
 -- ChannelName    
 --)  
 --SELECT  
 -- @DistCode ,  
 -- A.ReturnCode ,  
 -- (CASE ReturnType WHEN 1 THEN 'Market Return' ELSE 'Sales Return' END),  
 -- A.ReturnDate ,  
 -- (CASE A.ReturnMode WHEN 0 THEN '' WHEN 1 THEN 'Full' ELSE 'Partial' END),  
 -- (CASE A.InvoiceType WHEN 1 THEN 'Single Invoice' ELSE 'Multi Invoice' END),  
 -- A.RtnGrossAmt,A.RtnSplDisAmt,A.RtnSchDisAmt,A.RtnCashDisAmt,A.RtnDBDisAmt,  
 -- A.RtnTaxAmt,A.RtnRoundOffAmt,A.RtnInvLvlDisc,A.RtnNetAmt,  
 -- SM.SMName,C.RMName,A.RtrId,R.CmpRtrCode,R.RtrName,  
 -- ISNULL(G.SalInvno,B.SalCode) AS SalInvNo,  
 -- L.LcnId,L.LcnCode,    
 -- D.PrdCCode,F.CmpBatCode,  
 -- (CASE ST.SystemStockType WHEN 1 THEN BaseQty ELSE 0 END)AS SalQty,  
 -- (CASE ST.SystemStockType WHEN 2 THEN BaseQty ELSE 0 END)AS UnSalQty,  
 -- (CASE ST.SystemStockType WHEN 3 THEN BaseQty ELSE 0 END)AS OfferQty,  
 -- B.PrdEditSelRte ,  
 -- B.PrdGrossAmt,B.PrdSplDisAmt,B.PrdSchDisAmt,B.PrdCDDisAmt,B.PrdDBDisAmt,  
 -- B.PrdTaxAmt,B.PrdNetAmt,  
 -- 'N' AS UploadFlag,ISNULL(R.RtrUniqueCode,'') ,RY.CtgCode,RY.CtgName,RC.ValueClassCode,RC.ValueClassName,
 -- RCY.CtgCode AS ChannelCode,RCY.CtgName As ChannelName   
 -- FROM ReturnHeader A INNER JOIN ReturnProduct B ON A.ReturnId = B.ReturnId  
 -- INNER JOIN RouteMaster C ON A.RMID = C.RMID  
 -- INNER JOIN Product D ON B.PrdId = D.PrdId  
 -- INNER JOIN Company E ON D.CmpId = E.CmpId  
 -- INNER JOIN ProductBatch F ON B.PrdBatId = F.PrdBatId  
 -- INNER JOIN Retailer R ON R.RtrId=A.RtrId  
 -- LEFT OUTER JOIN SalesInvoice G ON B.SalId = G.SalId  
 -- INNER JOIN Salesman SM ON A.SMId=SM.SMId  
 -- INNER JOIN StockType ST ON B.StockTypeId=ST.StockTypeId  
 -- INNER JOIN Location L ON L.LcnId=ST.LcnId  
 --  --Code Added by Deepan on 11/11/2019
 --INNER JOIN RetailerValueClassMap  RM(NOLOCK) ON A.RTRID =RM.RTRID AND A.RTRValueClassId=RM.RtrValueClassId
 --INNER JOIN RetailerValueClass RC(NOLOCK) ON A.RtrValueClassId =RC.RtrClassId
 --INNER JOIN RetailerCategory RY ON RC.CtgMainId = RY.CtgMainId
 --INNER JOIN RetailerCategoryLevel RCL ON RY.CtgLevelId = RCL.CtgLevelId
 --INNER JOIN RetailerCategory RCY ON  RY.CtgLinkId=RCY.CtgMainId
 --WHERE A.Status = 0 AND E.CmpId = (CASE @DefCmpAlone WHEN 1 THEN @CmpId ELSE E.CmpId END)  
 -- AND A.Upload=0 
  INSERT INTO [Cs2Cn_Prk_SalesReturn]  
 (  
  DistCode  ,  
  SRNRefNo  ,  
  SRNRefType  ,  
  SRNDate   ,  
  SRNMode   ,  
  SRNType   ,   
  SRNGrossAmt  ,  
  SRNSplDiscAmt ,   
  SRNSchDiscAmt ,  
  SRNCashDiscAmt ,  
  SRNDBDiscAmt ,  
  SRNTaxAmt  ,  
  SRNRoundOffAmt ,
  SRNInvDiscount,  
  SRNNetAmt  ,  
  SalesmanName ,  
  SalesRouteName ,  
  RtrId   ,  
  RtrCode   ,  
  RtrName   ,  
  PrdSalInvNo  ,  
  PrdLcnId  ,  
  PrdLcnCode  ,  
  PrdCode   ,  
  PrdBatCde  ,  
  PrdSalQty  ,  
  PrdUnSalQty  ,  
  PrdOfferQty  ,  
  PrdSelRate  ,  
  PrdGrossAmt  ,  
  PrdSplDiscAmt ,  
  PrdSchDiscAmt ,  
  PrdCashDiscAmt ,  
  PrdDBDiscAmt ,  
  PrdTaxAmt  ,  
  PrdNetAmt  ,  
  UploadFlag,
  RtrUniqueCode  
 )  
 SELECT  
  @DistCode ,  
  A.ReturnCode ,  
  (CASE ReturnType WHEN 1 THEN 'Market Return' ELSE 'Sales Return' END),  
  A.ReturnDate ,  
  (CASE A.ReturnMode WHEN 0 THEN '' WHEN 1 THEN 'Full' ELSE 'Partial' END),  
  (CASE A.InvoiceType WHEN 1 THEN 'Single Invoice' ELSE 'Multi Invoice' END),  
  A.RtnGrossAmt,A.RtnSplDisAmt,A.RtnSchDisAmt,A.RtnCashDisAmt,A.RtnDBDisAmt,  
  A.RtnTaxAmt,A.RtnRoundOffAmt,A.RtnInvLvlDisc,A.RtnNetAmt,  
  SM.SMName,C.RMName,A.RtrId,R.CmpRtrCode,R.RtrName,  
  ISNULL(G.SalInvno,B.SalCode) AS SalInvNo,  
  L.LcnId,L.LcnCode,    
  D.PrdCCode,F.CmpBatCode,  
  (CASE ST.SystemStockType WHEN 1 THEN BaseQty ELSE 0 END)AS SalQty,  
  (CASE ST.SystemStockType WHEN 2 THEN BaseQty ELSE 0 END)AS UnSalQty,  
  (CASE ST.SystemStockType WHEN 3 THEN BaseQty ELSE 0 END)AS OfferQty,  
  B.PrdEditSelRte ,  
  B.PrdGrossAmt,B.PrdSplDisAmt,B.PrdSchDisAmt,B.PrdCDDisAmt,B.PrdDBDisAmt,  
  B.PrdTaxAmt,B.PrdNetAmt,  
  'N' AS UploadFlag,ISNULL(R.RtrUniqueCode,'')  
  FROM ReturnHeader A INNER JOIN ReturnProduct B ON A.ReturnId = B.ReturnId  
  INNER JOIN RouteMaster C ON A.RMID = C.RMID  
  INNER JOIN Product D ON B.PrdId = D.PrdId  
  INNER JOIN Company E ON D.CmpId = E.CmpId  
  INNER JOIN ProductBatch F ON B.PrdBatId = F.PrdBatId  
  INNER JOIN Retailer R ON R.RtrId=A.RtrId  
  LEFT OUTER JOIN SalesInvoice G ON B.SalId = G.SalId  
  INNER JOIN Salesman SM ON A.SMId=SM.SMId  
  INNER JOIN StockType ST ON B.StockTypeId=ST.StockTypeId  
  INNER JOIN Location L ON L.LcnId=ST.LcnId  
   --Code Added by Deepan on 11/11/2019
 --INNER JOIN RetailerValueClassMap  RM(NOLOCK) ON A.RTRID =RM.RTRID AND A.RTRValueClassId=RM.RtrValueClassId
 --INNER JOIN RetailerValueClass RC(NOLOCK) ON A.RtrValueClassId =RC.RtrClassId
 --INNER JOIN RetailerCategory RY ON RC.CtgMainId = RY.CtgMainId
 --INNER JOIN RetailerCategoryLevel RCL ON RY.CtgLevelId = RCL.CtgLevelId
 --INNER JOIN RetailerCategory RCY ON  RY.CtgLinkId=RCY.CtgMainId
 WHERE A.Status = 0 AND E.CmpId = (CASE @DefCmpAlone WHEN 1 THEN @CmpId ELSE E.CmpId END)  
  AND A.Upload=0 

 UPDATE  [Cs2Cn_Prk_SalesReturn] SET ValueClassCode=RC.ValueClassCode,ValueClassName=RC.ValueClassName,
 CtgCode= RY.CtgCode,CtgName=RY.CtgName,ChannelCode=RCY.CtgCode,ChannelName=RCY.CtgName  
 FROM [Cs2Cn_Prk_SalesReturn] C(NOLOCK) INNER JOIN ReturnHeader S(NOLOCK) ON C.SRNRefNo=S.ReturnCode
 AND C.RtrId =S.RtrId 
 INNER JOIN RetailerValueClass RC(NOLOCK) ON S.RtrValueClassId =RC.RtrClassId
 INNER JOIN RetailerCategory RY ON RC.CtgMainId = RY.CtgMainId
 INNER JOIN RetailerCategoryLevel RCL ON RY.CtgLevelId = RCL.CtgLevelId
 INNER JOIN RetailerCategory RCY ON  RY.CtgLinkId=RCY.CtgMainId

 --UPDATE  [Cs2Cn_Prk_SalesReturn] SET CtgCode= RY.CtgCode,CtgName=RY.CtgName,ChannelCode=RCY.CtgCode,ChannelName=RCY.CtgName  
 --FROM [Cs2Cn_Prk_SalesReturn] C(NOLOCK) INNER JOIN RetailerValueClass RC(NOLOCK) ON C.ValueClassCode=RC.ValueClassCode
 --INNER JOIN RetailerCategory RY ON RC.CtgMainId = RY.CtgMainId
 --INNER JOIN RetailerCategoryLevel RCL ON RY.CtgLevelId = RCL.CtgLevelId
 --INNER JOIN RetailerCategory RCY ON  RY.CtgLinkId=RCY.CtgMainId
 -------------- Added By LAkshman M dated ON 21-12-2018 PMS ID: ILCRSTPAR2905
 UPDATE PRK SET PRK.LCTRAmount=ISNULL(LCTRAmt,0)
 FROM Cs2Cn_Prk_SalesReturn PRK (NOLOCK)
 INNER JOIN 
 (
	SELECT R.ReturnId,R.ReturnCode,P.PrdCCode,PB.CmpBatCode,
	--(SUM(RP.BaseQty)*RP.PrdEditSelRte)+(SUM(RP.BaseQty)*RP.PrdEditSelRte)*(RPT.TaxPerc/100) AS LCTRAmt,
	ROUND(((Rp.BaseQty *(PBD.PrdBatDetailValue))+(Rp.BaseQty*PBD.PrdBatDetailValue)*(T.TaxPerc/100)),2) AS LCTRAmt,
	SUM(RPT.TaxableAmt) AS TaxableAmt,RPT.TaxPerc  
	FROM ReturnHeader R (NOLOCK)
	INNER JOIN ReturnProduct RP (NOLOCK) ON R.RETURNID=RP.RETURNID
	INNER JOIN ReturnProductTax RPT (NOLOCK) ON R.RETURNID=RPT.RETURNID AND RP.RETURNID=RPT.RETURNID AND RP.SlNO=RPT.PrdSlNo
	INNER JOIN Product P (NOLOCK) ON P.PrdId=RP.PrdId
	INNER JOIN ProductBatch PB (NOLOCK) ON P.PrdId=PB.PrdId AND PB.PrdId=RP.PrdId AND RP.PrdBatId=PB.PrdBatId
	INNER JOIN ProductBatchDetails PBD (NOLOCK) ON PBD.PrdBatId =PB.PrdBatId and DefaultPrice =1 AND PBD.SLNo =3
	INNER JOIN Cs2Cn_Prk_SalesReturn Prk (NOLOCK) ON Prk.PrdCode=P.PrdCCode AND Prk.PrdBatCde=PB.CmpBatCode
	INNER JOIN #ParleOutputTaxPercentage T (NOLOCK) ON R.ReturnID  = T.Salid AND Rp.Slno = T.PrdSlno  --  ILCRSTPAR6012 added by lakshman M 
	GROUP BY R.ReturnId,R.ReturnCode,P.PrdCCode,PB.CmpBatCode,RPT.TaxPerc,RP.PrdEditSelRte,Rp.BaseQty,PBD.PrdBatDetailValue,T.TaxPerc
	HAVING (SUM(RPT.TaxableAmt))>0
 ) Z ON Z.ReturnCode=PRK.SRNRefNo AND Z.PrdCCode=PRK.PrdCode AND Z.CmpBatCode=PRK.PrdBatCde
	--------------- commented as per PM confirmation. dated on 28-01-2020 PMS ID: ILCRSTPAR7591
-- SELECT DISTINCT P.Prdccode,PrdBatCode, PrdBatDetailValue LCTR INTO #LCTR 
-- FROM  Product P 
-- INNER JOIN ProductBatch A ON A.prdid =P.Prdid
-- INNER JOIN ProductBatchDetails B ON A.PrdBatId = B.PrdBatId and DefaultPrice =1 and slno=5
--UPDATE A SET LCTRAmount = B.LCTR FROM Cs2Cn_Prk_SalesReturn A INNER JOIN #LCTR B ON A.PrdBatCde = B.PrdBatCode AND A.PrdCode = B.PrdCCode 
--WHERE B.LCTR>0
----------------------------- till here -----------------------
	------------ Till here  ---------------
 UPDATE DayEndProcess SET NextUpDate = CONVERT(nVarChar(10),GetDate(),121),  
 ProcDate = CONVERT(nVarChar(10),GetDate(),121)  
 Where ProcId = 4  
 UPDATE ReturnHeader SET Upload=1 WHERE Upload=0 AND ReturnCode IN (SELECT DISTINCT  
 SRNRefNo FROM Cs2Cn_Prk_SalesReturn WHERE UploadFlag = 'N') AND Status=0   
 UPDATE Cs2Cn_Prk_SalesReturn SET ServerDate=@ServerDate
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_ComputeTax' AND TYPE='P')
DROP PROCEDURE Proc_ComputeTax
GO
/*
BEGIN  TRANSACTION
EXEC Proc_ComputeTax 1,226,1,0,'2018-06-25',1
ROLLBACK TRANSACTION
*/
CREATE PROCEDURE Proc_ComputeTax
(      
 @Pi_RowId  INT,      
 @Pi_CalledFrom  INT,        
 @Pi_UserId  INT,
 @Pi_RtrShipId  INT=0,
 @Pi_gServerDate DateTime='1990-01-01',
 @Pi_ApplyTax INT=1
)      
AS      
/*********************************      
* PROCEDURE : Proc_ComputeTax      
* PURPOSE : To Calculate the Line Level Tax      
* CREATED : Thrinath      
* CREATED DATE : 22/03/2007      
* MODIFIED
* DATE      AUTHOR     DESCRIPTION 
24/05/2009	MURUGAN										OID CalCulation For Nestle	
15-09-2011  Boopathy									Taxable amount from MRP to Gross amount only for J&J
15-09-2011  Boopathy									Taxable amount from MRP to Gross amount only for J&J
17-11-2017  Mohana.S									After  Based On Configuration Sales return tax will change.
26-06-2018	Karthick	CRCRSTPAR0008					Tax Calculation for Sample Issue
07/03/2019   Mohana S   ILCRSTPAR3750      	CR			Kerala GST Cess 
28-05-2020	MOHANA S    PARCS202100029		SR			DELETED TAXABLE ZERO VALUES.
------------------------------------------------      
* {date} {developer}  {brief modification description}            
@Pi_CalledFrom  2  For Sales      
@Pi_CalledFrom  3  For Sales Return       
@Pi_CalledFrom  5  For Purchase      
@Pi_CalledFrom  7  For Purchase Return      
@Pi_CalledFrom  20 For Replacement      
@Pi_CalledFrom  23  For Market Return       
@Pi_CalledFrom  24 For Return And Replacement      
@Pi_CalledFrom  25 For Sales Panel   
@Pi_CalledFrom  26 For Purchase Order
Pi_CalledFrom   226 For SampleIssue 'CRCRSTPAR0008
*********************************/       
SET NOCOUNT ON      
BEGIN      
	DECLARE @PrdBatTaxGrp   INT      
	DECLARE @RtrTaxGrp   INT      
	DECLARE @TaxSlab  INT      
	DECLARE @MRP   NUMERIC(28,10)      
	DECLARE @SellingRate  NUMERIC(28,10)      
	DECLARE @PurchaseRate  NUMERIC(28,10)      
	DECLARE @TaxableAmount  NUMERIC(28,10)    
	DECLARE @TotalDedAmt  NUMERIC(28,10)  
	DECLARE @ParTaxableAmount NUMERIC(28,10)      
	DECLARE @TaxPer   NUMERIC(38,6)      
	DECLARE @TaxId   INT      
	DECLARE	@ApplyOn INT
	
--ADDED BY MOHANA FOR CESS CHANGE
	DECLARE @CDate NVARCHAR(100)
	DECLARE @CessConfig INT
	DECLARE @CessDateConfig INT
	SET @CessConfig=0
	SET @CessDateConfig=0
--TILL HERE
	
	DECLARE @TaxSetting TABLE       
	(      
		TaxSlab   INT,      
		ColNo   INT,      
		SlNo   INT,      
		BillSeqId  INT,      
		TaxSeqId  INT,      
		ColType   INT,       
		ColId   INT,      
		ColVal   NUMERIC(38,6)      
	)      
--ADDED BY MOHANA FOR CESS CHANGE
	DECLARE @BilledPrdTax Table
	(
	    Rtrid Bigint
	    
	 )  
--TILL HERE
	--ADDED BY MOHANA
	SELECT  @CDate = CONDITION FROM ManualConfiguration(Nolock) WHERE Status=1 and ModuleId='BILL_TAX01'  
	IF ISNULL(@Pi_gServerDate,'1990-01-01')='1990-01-01'
	BEGIN
		SET @Pi_gServerDate=CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121)
	END
	
	IF ISNULL(@Pi_RtrShipId,0)=0
	BEGIN
		SET @Pi_RtrShipId=0
	END
	
	----Added by MOHANA at 07-03-2019
	   IF EXISTS (SELECT * FROM ManualConfiguration(Nolock) WHERE Status=1 and ModuleId='BILL_TAX02')
		  BEGIN
			 SET @CessDateConfig=1  ---Unregistered Retailer
		  END
	
		IF @CessDateConfig=0
		  BEGIN	
				IF EXISTS (SELECT * FROM ManualConfiguration(Nolock) WHERE Status=1 and ModuleId='BILL_TAX01' and ConfigValue=3)
				  BEGIN
					 SET @CessConfig=3  ---Unregistered Retailer
				  END
				IF EXISTS (SELECT * FROM ManualConfiguration(Nolock) WHERE Status=1 and ModuleId='BILL_TAX01' and ConfigValue=2)
				  BEGIN
					 SET @CessConfig=2  ---Registered Retailer
				  END
				 IF EXISTS (SELECT * FROM ManualConfiguration(Nolock) WHERE Status=1 and ModuleId='BILL_TAX01' and ConfigValue=1)
				  BEGIN
					 SET @CessConfig=1  ---Both Registered and Unregistered
				  END
		 END
		 ELSE
		  BEGIN
				IF ISDATE(@CDate)=1 AND LEN(@CDate)= 10 --CHECK THE VALID DATA FORMAT -- ADDED BY MOHANA
				BEGIN
					IF EXISTS (SELECT * FROM ManualConfiguration(Nolock) WHERE Status=1 and ModuleId='BILL_TAX01' and ConfigValue=3 and @Pi_gServerDate<CONVERT(DATETIME,CONVERT(VARCHAR(10),Condition,121 ),121))
					BEGIN
						SET @CessConfig=3  ---Unregistered Retailer
					END
					IF EXISTS (SELECT * FROM ManualConfiguration(Nolock) WHERE Status=1 and ModuleId='BILL_TAX01' and ConfigValue=2 and @Pi_gServerDate<CONVERT(DATETIME,CONVERT(VARCHAR(10),Condition,121 ),121))
					BEGIN
						SET @CessConfig=2  ---Registered Retailer
					END
					IF EXISTS (SELECT * FROM ManualConfiguration(Nolock) WHERE Status=1 and ModuleId='BILL_TAX01' and ConfigValue=1 and @Pi_gServerDate<CONVERT(DATETIME,CONVERT(VARCHAR(10),Condition,121 ),121))
					BEGIN
						SET @CessConfig=1  ---Both Registered and Unregistered
					END
				END
		   END
		---Till Here MOHANA at 07-03-2019
	--To Take the Batch TaxGroup Id      
	SELECT @PrdBatTaxGrp = TaxGroupId FROM ProductBatch A (NOLOCK) INNER JOIN      
	BilledPrdHdForTax B (NOLOCK) On A.PrdId = B.PrdId AND A.PrdBatID = B.PrdBatID      
	AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom      
	
	--To Take the Batch MRP      
	SELECT @MRP = ISNULL((C.PrdBatDetailValue * BaseQty),0) FROM ProductBatch A (NOLOCK) INNER JOIN      
	BilledPrdHdForTax B (NOLOCK) On A.PrdId = B.PrdId AND A.PrdBatID = B.PrdBatID      
	AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom      
	INNER JOIN ProductBatchDetails C (NOLOCK)      
	ON A.PrdBatId = C.PrdBatID AND C.PriceId = B.PriceId      
	INNER JOIN BatchCreation D (NOLOCK)      
	ON D.BatchSeqId = A.BatchSeqId AND D.SlNo = C.SlNo      
	AND D.MRP = 1       
	
	--To Take the Batch Selling Rate      
	IF @Pi_CalledFrom = 2 OR @Pi_CalledFrom = 25 OR @Pi_CalledFrom = 3 OR @Pi_CalledFrom = 23  
	BEGIN      
		SELECT @SellingRate = ColValue FROM BilledPrddtForTax WHERE TransId = @Pi_CalledFrom       
		AND UsrId = @Pi_UserId AND RowId = @Pi_RowId AND ColId = -2      
	END      
	ELSE      
	BEGIN      
		IF @Pi_CalledFrom = 20 
		BEGIN 
			SELECT @SellingRate = ISNULL((C.PrdBatDetailValue * BaseQty),0) FROM ProductBatch A (NOLOCK) INNER JOIN      
			BilledPrdHdForTax B (NOLOCK) On A.PrdId = B.PrdId AND A.PrdBatID = B.PrdBatID      
			AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom      
			INNER JOIN ProductBatchDetails C (NOLOCK)      
			ON A.PrdBatId = C.PrdBatID AND C.PriceId IN (SELECT MAX(PBD.priceid) FROM productbatchdetails PBD WHERE pbd.prdbatid=b.PrdBatId)    
			INNER JOIN BatchCreation D (NOLOCK)      
			ON D.BatchSeqId = A.BatchSeqId AND D.SlNo = C.SlNo      
			AND D.SelRte = 1      
		END      
		ELSE      
		BEGIN      
			SELECT @SellingRate = ISNULL((C.PrdBatDetailValue * BaseQty),0) FROM ProductBatch A (NOLOCK) INNER JOIN      
			BilledPrdHdForTax B (NOLOCK) On A.PrdId = B.PrdId AND A.PrdBatID = B.PrdBatID      
			AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom      
			INNER JOIN ProductBatchDetails C (NOLOCK)      
			ON A.PrdBatId = C.PrdBatID AND C.PriceId = B.PriceId      
			INNER JOIN BatchCreation D (NOLOCK)      
			ON D.BatchSeqId = A.BatchSeqId AND D.SlNo = C.SlNo      
			AND D.SelRte = 1      
		END      
	END 
	IF @Pi_CalledFrom = 226 --CRCRSTPAR0008
	BEGIN 
		SELECT @SellingRate = ISNULL((C.PrdBatDetailValue * BaseQty),0) FROM ProductBatch A (NOLOCK) INNER JOIN      
		BilledPrdHdForTax B (NOLOCK) On A.PrdId = B.PrdId AND A.PrdBatID = B.PrdBatID      
		AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom      
		INNER JOIN ProductBatchDetails C (NOLOCK)      
		ON A.PrdBatId = C.PrdBatID AND C.PriceId IN (SELECT MAX(PBD.priceid) FROM productbatchdetails PBD WHERE pbd.prdbatid=b.PrdBatId)    
		INNER JOIN BatchCreation D (NOLOCK) ON D.BatchSeqId = A.BatchSeqId AND D.SlNo = C.SlNo      
		AND D.ListPrice = 1     
	END      
	
	--To Take the Batch List Price 
	--Added by Murugan For OID Calculation
	IF (@Pi_CalledFrom = 5 OR @Pi_CalledFrom = 26 OR @Pi_CalledFrom = 7 OR @Pi_CalledFrom = 37 )
	BEGIN   
		IF  EXISTS(SELECT Status FROM Configuration WHERE ModuleId = 'PURCHASERECEIPT16' and Status=1)   
		BEGIN  
			SELECT  @PurchaseRate = Isnull(ColValue,0) FROM BilledPrdDtForTax B  
			WHERE  B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom 
			and COLID=3	   
		END  
		ELSE  
		BEGIN 
			SELECT @PurchaseRate =ISNULL((C.PrdBatDetailValue * BaseQty),0) FROM ProductBatch A (NOLOCK) INNER JOIN      
			BilledPrdHdForTax B (NOLOCK) On A.PrdId = B.PrdId AND A.PrdBatID = B.PrdBatID      
			AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom      
			INNER JOIN ProductBatchDetails C (NOLOCK)      
			ON A.PrdBatId = C.PrdBatID AND C.PriceId = B.PriceId      
			INNER JOIN BatchCreation D (NOLOCK)      
			ON D.BatchSeqId = A.BatchSeqId AND D.SlNo = C.SlNo      
			AND D.ListPrice = 1     
		END  
		
		
		--->Added By Nanda on 2011/05/12
		IF @Pi_CalledFrom = 37
		BEGIN
			IF EXISTS(SELECT * FROM CONFIGURATION WHERE MODULEID='RTNTOCOMPANY7' AND Status=1)
			BEGIN
				SELECT @PurchaseRate =ISNULL((C.PrdBatDetailValue * BaseQty),0) FROM ProductBatch A (NOLOCK) INNER JOIN      
				BilledPrdHdForTax B (NOLOCK) On A.PrdId = B.PrdId AND A.PrdBatID = B.PrdBatID      
				AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom      
				INNER JOIN ProductBatchDetails C (NOLOCK)      
				ON A.PrdBatId = C.PrdBatID AND C.PriceId = B.PriceId      
				INNER JOIN BatchCreation D (NOLOCK)      
				ON D.BatchSeqId = A.BatchSeqId AND D.SlNo = C.SlNo      
				AND LTRIM(RTRIM(D.RefCode)) IN (SELECT LEFT(Condition,1) FROM CONFIGURATION WHERE MODULEID='RTNTOCOMPANY7' AND Status=1)
			END
		END
		--->Till Here
	END
	ELSE
	BEGIN
		SELECT @PurchaseRate =ISNULL((C.PrdBatDetailValue * BaseQty),0) FROM ProductBatch A (NOLOCK) INNER JOIN      
		BilledPrdHdForTax B (NOLOCK) On A.PrdId = B.PrdId AND A.PrdBatID = B.PrdBatID      
		AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom      
		INNER JOIN ProductBatchDetails C (NOLOCK)      
		ON A.PrdBatId = C.PrdBatID AND C.PriceId = B.PriceId      
		INNER JOIN BatchCreation D (NOLOCK)      
		ON D.BatchSeqId = A.BatchSeqId AND D.SlNo = C.SlNo      
		AND D.ListPrice = 1  
	END
	
	IF (@Pi_CalledFrom = 2 OR @Pi_CalledFrom = 3 OR @Pi_CalledFrom = 20 OR @Pi_CalledFrom = 23 OR       
	@Pi_CalledFrom = 24 OR @Pi_CalledFrom = 25 OR @Pi_CalledFrom=226)      
	BEGIN      
		--To Take the Retailer TaxGroup Id      
		IF EXISTS(SELECT 'X' FROM RetailerShipAdd C (NOLOCK)
		INNER JOIN Retailer A (NOLOCK) ON A.RtrId=C.RtrId
		INNER JOIN  BilledPrdHdForTax B (NOLOCK) On A.RtrId = B.RtrId  and  B.RtrId = C.RtrId  
		WHERE C.RtrShipId=@Pi_RtrShipId AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId       
		AND B.TransId = @Pi_CalledFrom and C.TaxGroupId>0)
		BEGIN
			SELECT @RtrTaxGrp=C.TaxGroupId FROM RetailerShipAdd C (NOLOCK)
			INNER JOIN Retailer A (NOLOCK) ON A.RtrId=C.RtrId
			INNER JOIN  BilledPrdHdForTax B (NOLOCK) On A.RtrId = B.RtrId  and  B.RtrId = C.RtrId  
			WHERE C.RtrShipId=@Pi_RtrShipId AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId       
			AND B.TransId = @Pi_CalledFrom and C.TaxGroupId>0
		END
		ELSE
		BEGIN		 
			SELECT @RtrTaxGrp = TaxGroupId FROM Retailer A (NOLOCK) INNER JOIN      
			BilledPrdHdForTax B (NOLOCK) On A.RtrId = B.RtrId      
			AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId       
			AND B.TransId = @Pi_CalledFrom      
		END		 
	END      
	
	IF (@Pi_CalledFrom = 5 OR  @Pi_CalledFrom = 26 OR @Pi_CalledFrom = 7 OR @Pi_CalledFrom = 37)      
	BEGIN      
		--To Take the Supplier TaxGroup Id      
		SELECT @RtrTaxGrp = TaxGroupId FROM Supplier A (NOLOCK) INNER JOIN      
		BilledPrdHdForTax B (NOLOCK) On A.SpmId = B.RtrId      
		AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId      
		AND B.TransId = @Pi_CalledFrom      
	END      
	--Store the Tax Setting for the Corresponding Retailer and Batch      
	INSERT INTO @TaxSetting (TaxSlab,ColNo,SlNo,BillSeqId,TaxSeqId,ColType,ColId,ColVal)      
	SELECT B.RowId,B.ColNo,B.SlNo,B.BillSeqId,B.TaxSeqId,B.ColType,B.ColId,B.ColVal      
	FROM TaxSettingMaster A (NOLOCK) INNER JOIN      
	TaxSettingDetail B (NOLOCK) ON A.TaxSeqId = B.TaxSeqId      
	INNER JOIN BilledPrdHdForTax C (NOLOCK) ON C.BillSeqId = B.BillSeqId      
	WHERE A.RtrId = @RtrTaxGrp AND A.Prdid = @PrdBatTaxGrp AND C.UsrId = @Pi_UserId      
	AND C.RowId = @Pi_RowId AND C.TransId = @Pi_CalledFrom      
	AND A.TaxSeqId in (Select ISNULL(Max(TaxSeqId),0) FROM TaxSettingMaster WHERE      
	RtrId = @RtrTaxGrp AND Prdid = @PrdBatTaxGrp
	and CONVERT(DATETIME,CONVERT(VARCHAR(10),EffectiveFrom,121),121)<=CONVERT(DATETIME,CONVERT(VARCHAR(10),@Pi_gServerDate,121),121) --GST
	)
----Added by MOHANA at 07-03-2019
	IF (@Pi_CalledFrom = 2 OR @Pi_CalledFrom = 3 OR @Pi_CalledFrom = 20 OR @Pi_CalledFrom = 23 OR       
		@Pi_CalledFrom = 24 OR @Pi_CalledFrom = 25)      
		BEGIN 
			IF @CessConfig =0  ----Cess Tax Wont Apply
			 BEGIN
				  DELETE A FROM @TaxSetting A  INNER JOIN TaxConfiguration B ON A.TaxSlab=B.TaxId
				  where ColType=1 and ColVal > 0 and B.TaxCode In ('OutputGSTCess','GSTCess')
			 END
	IF @Pi_RtrShipId>0
	  BEGIN
	
			IF @CessConfig =2  ----Registered Retailer Cess will apply
				 BEGIN
					IF EXISTS (SELECT 'X' FROM RetailerShipAdd C (NOLOCK)
							INNER JOIN Retailer A (NOLOCK) ON A.RtrId=C.RtrId
							INNER JOIN UdcDetails D (NOLOCK) ON D.MasterRecordId=A.RtrId AND D.MasterRecordId=C.RtrId 
							INNER JOIN UdcMaster E (Nolock) ON E.UdcMasterId=D.UdcMasterId AND E.MasterId=D.MasterId
							AND E.ColumnName='Retailer Type'
							WHERE C.RtrShipId=@Pi_RtrShipId and E.MasterId=2 and UPPER(D.ColumnValue)='UNREGISTERED')
					BEGIN
						  DELETE A FROM @TaxSetting A  INNER JOIN TaxConfiguration B ON A.TaxSlab=B.TaxId
						  where ColType=1 and ColVal > 0 and B.TaxCode In ('OutputGSTCess','GSTCess')
					END
				  END
				  
			IF @CessConfig =3  ----UnRegistered Retailer Cess will apply
				 BEGIN
					IF EXISTS (SELECT 'X' FROM RetailerShipAdd C (NOLOCK)
							INNER JOIN Retailer A (NOLOCK) ON A.RtrId=C.RtrId
							INNER JOIN UdcDetails D (NOLOCK) ON D.MasterRecordId=A.RtrId AND D.MasterRecordId=C.RtrId 
							INNER JOIN UdcMaster E (Nolock) ON E.UdcMasterId=D.UdcMasterId AND E.MasterId=D.MasterId
							AND E.ColumnName='Retailer Type'
							WHERE C.RtrShipId=@Pi_RtrShipId and E.MasterId=2 and UPPER(D.ColumnValue)='REGISTERED')
					BEGIN
						  DELETE A FROM @TaxSetting A  INNER JOIN TaxConfiguration B ON A.TaxSlab=B.TaxId
						  where ColType=1  and ColVal > 0 and B.TaxCode In ('OutputGSTCess','GSTCess')
					END
				  END
		END
		ELSE
		BEGIN
		    INSERT INTO @BilledPrdTax
		    SELECT Distinct Rtrid from BilledPrdHdForTax WHERE RowId = @Pi_RowId AND UsrId = @Pi_UserId       
			AND TransId = @Pi_CalledFrom
		
			IF @CessConfig =2  ----Registered Retailer Cess will apply
				 BEGIN
					IF EXISTS (SELECT 'X' FROM @BilledPrdTax C
							INNER JOIN Retailer A (NOLOCK) ON A.RtrId=C.RtrId
							INNER JOIN UdcDetails D (NOLOCK) ON D.MasterRecordId=A.RtrId AND D.MasterRecordId=C.RtrId 
							INNER JOIN UdcMaster E (Nolock) ON E.UdcMasterId=D.UdcMasterId AND E.MasterId=D.MasterId
							AND E.ColumnName='Retailer Type'
							WHERE  E.MasterId=2 and UPPER(D.ColumnValue)='UNREGISTERED')
					BEGIN
						  DELETE A FROM @TaxSetting A  INNER JOIN TaxConfiguration B ON A.TaxSlab=B.TaxId
						  where ColType=1 and ColVal > 0 and B.TaxCode In ('OutputGSTCess','GSTCess')
					END
				  END
				  
			IF @CessConfig =3  ----UnRegistered Retailer Cess will apply
				 BEGIN
					IF EXISTS (SELECT 'X' FROM @BilledPrdTax C
							INNER JOIN Retailer A (NOLOCK) ON A.RtrId=C.RtrId
							INNER JOIN UdcDetails D (NOLOCK) ON D.MasterRecordId=A.RtrId AND D.MasterRecordId=C.RtrId 
							INNER JOIN UdcMaster E (Nolock) ON E.UdcMasterId=D.UdcMasterId AND E.MasterId=D.MasterId
							AND E.ColumnName='Retailer Type'
							WHERE E.MasterId=2 and UPPER(D.ColumnValue)='REGISTERED')
					BEGIN
						  DELETE A FROM @TaxSetting A  INNER JOIN TaxConfiguration B ON A.TaxSlab=B.TaxId
						  where ColType=1  and ColVal > 0 and B.TaxCode In ('OutputGSTCess','GSTCess')
					END
				  END
		
		
		END
	END
 ---Till Here 
	
	
	--Delete the OLD Details From the BilledPrdDtCalculatedTax For the Row and User      
	DELETE FROM BilledPrdDtCalculatedTax WHERE RowId = @Pi_RowId AND UsrId = @Pi_UserId       
	AND TransId = @Pi_CalledFrom      
	
	--Cursor For Taking Each Slab and Calculate Tax      
	DECLARE  CurTax CURSOR FOR      
	SELECT DISTINCT TaxSlab FROM @TaxSetting      
	OPEN CurTax        
	FETCH NEXT FROM CurTax INTO @TaxSlab      
	WHILE @@FETCH_STATUS = 0        
	BEGIN      
		SET @TaxableAmount = 0      
		--To Filter the Records Which Has Tax Percentage (>=0)      
		IF EXISTS (SELECT * FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 1      
		AND ColId = 0 and ColVal >= 0)      
		BEGIN
			
			--To Get the Tax Percentage for the selected slab      
			SELECT @TaxPer = ColVal FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 1      
			AND ColId = 0      
			
			IF @Pi_ApplyTax=0 
			BEGIN
				SET @TaxPer=0
				--SET @CalSurCharge=0
				--SET @AddtionTax=0
			END			
			
			--To Get the TaxId for the selected slab      
			SELECT @TaxId = Cast(ColVal as INT) FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 1      
			AND ColId > 0      
	         
			--To Get the Adjustable amount from Other Columns      
			SELECT @TaxableAmount = ISNULL(SUM(ColValue),0) FROM       
			(SELECT CASE B.ColVal WHEN 1 THEN A.ColValue WHEN 2 THEN -1 * A.ColValue END       
				AS ColValue FROM BilledPrdDtForTax A INNER JOIN @TaxSetting B      
				ON A.ColId = B.ColId AND A.RowId =  @Pi_RowId AND A.UsrId = @Pi_UserId       
				AND A.TransId = @Pi_CalledFrom      
			WHERE TaxSlab = @TaxSlab AND B.ColType = 2 and B.ColId>3      
				And B.ColVal >0) as C      
			
			SET @ApplyOn=0
			SET @TotalDedAmt=@TaxableAmount
			 
			
			--To add MRP to Taxable Amount if MRP Is Selected for the Slab      
			IF EXISTS (SELECT * FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 2      
			AND ColId = 1 and ColVal > 0)       
			BEGIN
				SET @TaxableAmount = ISNULL(@TaxableAmount,0) + @MRP      
				SET @ApplyOn=1 
			END
			
			--To add Selling Rate to Taxable Amount if Selling Rate Is Selected for the Slab      
			IF EXISTS (SELECT * FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 2      
			AND ColId = 2 and ColVal > 0)       
			SET @TaxableAmount = ISNULL(@TaxableAmount,0) + @SellingRate      
	      
			--To add Purchase Rate to Taxable Amount if Purchase Rate Is Selected for the Slab      
			IF EXISTS (SELECT * FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 2      
			AND ColId = 3 and ColVal > 0)       
			SET @TaxableAmount = ISNULL(@TaxableAmount,0) + @PurchaseRate      
			
			--To Get the Parent Taxable Amount for the Tax Slab      
			SELECT @ParTaxableAmount =  ISNULL(SUM(TaxAmount),0) FROM BilledPrdDtCalculatedTax A      
			INNER JOIN @TaxSetting B ON A.TaxId = B.ColVal AND A.RowId = @Pi_RowId      
			AND A.UsrId = @Pi_UserId AND B.ColType = 3 AND B.TaxSlab = @TaxSlab      
			AND A.TransId = @Pi_CalledFrom     
			Set @TaxableAmount = @TaxableAmount + @ParTaxableAmount      
	      
			--Insert the New Tax Amounts        
			INSERT INTO BilledPrdDtCalculatedTax (RowId,PrdId,PrdBatId,TaxId,TaxSlabId,TaxPercentage,      
			TaxableAmount,TaxAmount,Usrid,TransId)      
			SELECT @Pi_RowId,B.PrdId,B.PrdBatId,@TaxId,@TaxSlab,@TaxPer,      
		    @TaxableAmount, CASE @ApplyOn 
			WHEN 0 THEN	cast(@TaxableAmount * (@TaxPer / 100 ) AS NUMERIC(38,6))
			WHEN 1 THEN cast(@TaxableAmount * (@TaxPer / (100 +@TaxPer)) AS NUMERIC(38,6)) END,      
			@Pi_UserId,@Pi_CalledFrom FROM BilledPrdHdForTax B (NOLOCK) WHERE       
			B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom     
			
			IF EXISTS (SELECT * FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 2      
			AND ColId = 1 and ColVal > 0)       
			BEGIN
				SET @TaxableAmount =  @TotalDedAmt+ @SellingRate
				UPDATE BilledPrdDtCalculatedTax SET TaxableAmount=@TaxableAmount
				WHERE RowId = @Pi_RowId AND UsrId = @Pi_UserId AND TransId = @Pi_CalledFrom 							
			END 
			
		END      
		FETCH NEXT FROM CurTax INTO @TaxSlab      
	END        
	CLOSE CurTax        
	DEALLOCATE CurTax           
	-----Only for SalesReturn
IF EXISTS (SELECT * FROM ManualConfiguration WHERE ModuleId='Sal_Return_Tax' AND Status = 1)--Added By Mohana
BEGIN
	CREATE TABLE #SalesReturnTax
	(
		Slno INT IDENTITY(1,1),
		RowId  INT,
		SalRowId INT,
		Taxperc Numeric(18,6),
		TaxId INT,
		Prdid INT,
		PrdbatId INT
	)
	DECLARE @MaxSlno AS INT
	DECLARE @MinSlno AS INT
	DECLARE @RtnPrdid AS INT
	DECLARE @RtnPrdbatId AS INT
	DECLARE @RtnTaxId AS INT
	DECLARE @RtnTaxPerc AS Numeric(18,6)
	DECLARE @RtnTaxableAmount AS Numeric(18,6)
	SET @MinSlno=1
	
	IF @Pi_CalledFrom = 3
	BEGIN
		IF EXISTS(SELECT 'X' FROM GSTConfiguration WHERE ActivationStatus=1 and AcknowledgeStatus=1 and ConsoleAckStatus=1)
		BEGIN
				---Only With Reference
				INSERT INTO #SalesReturnTax(RowId,SalRowId,TaxPerc,TaxId,PrdId,PrdbatId)
				SELECT DISTINCT RowId,SalRowId,CASE @Pi_ApplyTax WHEN 0 THEN 0.00 ELSE  TaxPerc END,TaxId,PrdId,PrdbatId 	
				FROM BilledPrdHdForTax_GST A (NOLOCK) 
				INNER JOIN salesinvoiceproducttax B (NOLOCK) ON A.Salid=B.SalId and A.SalRowId=B.PrdSlNo				
				INNER JOIN SalesInvoice S (NOLOCK) ON S.Salid=A.Salid and S.Salid=B.Salid
				WHERE Usrid=@Pi_UserId and TransId=@Pi_CalledFrom and RowId=@Pi_RowId
				and VatGst='GST' and TaxPerc <> 0
			
				IF EXISTS(SELECT 'X' FROM #SalesReturnTax)
				BEGIN
				
					DELETE A FROM BilledPrdDtCalculatedTax A WHERE NOT EXISTS(SELECT PrdId,PrdBatId,TaxId FROM 
					#SalesReturnTax B WHERE A.PrdId=B.Prdid and A.PrdbatId=B.PrdbatId and A.TaxId=B.TaxId and A.RowId=B.RowId)
					and Usrid=@Pi_UserId and TransId=@Pi_CalledFrom and RowId=@Pi_RowId
				
					SELECT @MaxSlno=MAX(Slno) FROM #SalesReturnTax
					
					WHILE @MinSlno<=@MaxSlno
					BEGIN
						SELECT @RtnPrdid=Prdid,@RtnPrdbatId=PrdbatId ,@RtnTaxId=Taxid,@RtnTaxPerc=TaxPerc FROM #SalesReturnTax
						WHERE Slno=@MinSlno
						
						IF EXISTS(SELECT 'x' FROM BilledPrdDtCalculatedTax (NOLOCK) WHERE PrdId=@RtnPrdid and PrdBatId=@RtnPrdbatId
										and TaxId=@RtnTaxId	and Usrid=@Pi_UserId and TransId=@Pi_CalledFrom and RowId=@Pi_RowId
										and  TaxableAmount>0)
						BEGIN
						
								IF NOT EXISTS(SELECT 'x' FROM BilledPrdDtCalculatedTax (NOLOCK) WHERE PrdId=@RtnPrdid and PrdBatId=@RtnPrdbatId
										and TaxId=@RtnTaxId and Cast(TaxPercentage as Numeric(18,6))=@RtnTaxPerc
										and Usrid=@Pi_UserId and TransId=@Pi_CalledFrom and RowId=@Pi_RowId
										and  TaxableAmount>0)
										BEGIN																																	
											UPDATE A SET A.TaxPercentage=@RtnTaxPerc,
											A.TaxAmount=cast(A.TaxableAmount * (@RtnTaxPerc / 100 ) AS NUMERIC(38,6))
											FROM BilledPrdDtCalculatedTax A  
											WHERE PrdId=@RtnPrdid and PrdBatId=@RtnPrdbatId
											and TaxId=@RtnTaxId	and Usrid=@Pi_UserId and TransId=@Pi_CalledFrom and RowId=@Pi_RowId
											and  TaxableAmount>0							
										END
						END	
						ELSE
						BEGIN
						
								SELECT @RtnTaxableAmount=TaxableAmount 
								FROM BilledPrdDtCalculatedTax (NOLOCK) WHERE PrdId=@RtnPrdid and PrdBatId=@RtnPrdbatId
								and Usrid=@Pi_UserId and TransId=@Pi_CalledFrom and RowId=@Pi_RowId
								and  TaxableAmount>0
						
								INSERT INTO BilledPrdDtCalculatedTax (RowId,PrdId,PrdBatId,TaxId,TaxSlabId,TaxPercentage,      
								TaxableAmount,TaxAmount,Usrid,TransId)      
								SELECT @Pi_RowId,B.PrdId,B.PrdBatId,@RtnTaxId,@RtnTaxId,@RtnTaxPerc,      
								@RtnTaxableAmount, cast(@RtnTaxableAmount * (@RtnTaxPerc / 100 ) AS NUMERIC(38,6)),      
								@Pi_UserId,@Pi_CalledFrom FROM BilledPrdHdForTax B (NOLOCK) WHERE       
								B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom 					  
							
						END			
						
						SET @MinSlno=@MinSlno+1
					END							
				END
		END
	END	
END
	-----Till here
		----Gopi at 02-06-2017 for GST
	UPDATE BilledPrdDtCalculatedTax SET TaxId=0 where TaxId Is null
	UPDATE BilledPrdDtCalculatedTax SET TaxSlabId=0 where TaxSlabId Is null
	UPDATE BilledPrdDtCalculatedTax SET TaxableAmount=0 where TaxableAmount Is null
	UPDATE BilledPrdDtCalculatedTax SET TaxPercentage=0 where TaxPercentage Is null
	UPDATE BilledPrdDtCalculatedTax SET TaxAmount=0 where TaxAmount Is null
	 ---Till Here ----        

	--PARCS202100029
	 Delete A from BilledPrdDtCalculatedTax A (NOLOCK) where TaxableAmount = 0 AND TransId = @Pi_CalledFrom
	 And UsrId = @Pi_UserId --AND  RowId=@Pi_RowId
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_Cs2Cn_DebitNoteTopSheet4' AND TYPE='P')
DROP PROCEDURE Proc_Cs2Cn_DebitNoteTopSheet4
GO
/*
Begin transaction
EXEC Proc_Cs2Cn_DebitNoteTopSheet4 0,'2018-07-26'
select * from Cs2Cn_Prk_DebitNoteTopSheet4 order by slno
Rollback Transaction 
*/
CREATE PROCEDURE Proc_Cs2Cn_DebitNoteTopSheet4
(
	@Po_ErrNo INT OUTPUT,
	@ServerDate DATETIME
)
AS
/*********************************
* PROCEDURE		: Proc_Cs2Cn_DebitNoteTopSheet4
* PURPOSE		: To Extract TOT CLAIMS
* CREATED BY	: MOHANA S
* CREATED DATE	: 03-05-2018
* PMS 			: CCRSTPAR0187
* MODIFIED	
*************************************************      
* [DATE]        [DEVELOPER]        [USER_STORY_ID]     [CR/BUG]       [DESCRIPTION]    
* 29-03-2019    Lakshman M         ILCRSTPAR3860       BZ         upload process scheme wsie and transaction wsie scheme utilization amount validation included. 
* 01-04-2020	MOHANA S			--				   SR		  CHANGES FOR SPL RATE DYNAMIC
* 31-03-2020		MOHANA S     CR   PARCS202100002  Contract Pricing Optimization	
*********************************/
SET NOCOUNT ON
BEGIN
	DECLARE @DistCode As NVARCHAR(50) 
	DECLARE @FromDate DATETIME      
	DECLARE @ToDate DATETIME
	
	SELECT @FromDate = MIN(SalInvDate),@ToDate = MAX(SalInvDate) FROM Cs2Cn_Prk_DailySales S (NOLOCK)    
 --ICRSTPAR7182 till here      
	 EXEC Proc_ReturnSalesProductTaxPercentage @FromDate , @ToDate     
	SELECT * INTO #ParleOutputTaxPercentage  FROM ParleOutputTaxPercentage (NOLOCK)
	SET @Po_ErrNo=0
	
	--DECLARE @DistCode As NVARCHAR(50)
	DELETE FROM Cs2Cn_Prk_DebitNoteTopSheet4 WHERE UploadFlag = 'Y'
	SELECT @DistCode = DistributorCode FROM Distributor(NOLOCK)	
	
	SELECT S.SalId,S.SalInvNo,S.SalInvDate,S.RtrId,SP.PrdId,SP.PrdBatId,SP.BaseQty BaseQty,CASE SP.SplPriceId WHEN 0 THEN 0 ELSE SP.SplRate END As  SalSplRate,   
	SP.OrgSelRate AS ActualSelRate,SP.SlNo,sp.PrdTaxAmount,PrdUnitSelRate,PrdBatDetailValue    
	INTO #BillingDetails1    
	FROM SalesInvoice S (NOLOCK)    
	INNER JOIN SalesInvoiceProduct SP (NOLOCK) ON S.SalId = SP.SalId    
	INNER JOIN ProductBatch B (NOLOCK) ON SP.PrdBatId = B.PrdBatId 
	INNER JOIN ProductBatchDetails PBD (NOLOCK) ON PBD.PrdBatId =B.PrdBatId and DefaultPrice =1		 
	WHERE SalInvNo in(SELECT DISTINCT salinvno FROM Cs2Cn_Prk_DailySales) AND S.DlvSts > 3 and PBD.SLNo =3
	
	SELECT S.ReturnID,S.ReturnCode,S.ReturnDate,S.RtrId,SP.PrdId,SP.PrdBatId,-1 * SP.BaseQty BaseQty,SP.PrdUnitMRP MRP,CASE SIP.SplPriceId WHEN 0 THEN 0 ELSE SIP.SplRate END As  SalSplRate,   
	SIP.OrgSelRate AS ActualSelRate,SP.SlNo,SP.PrdEditSelRte,sp.PrdTaxAmt as prdtaxamount,PrdUnitSelRte as  PrdUnitSelRate,PrdBatDetailValue  
	INTO #ReturnDetails1    
	FROM ReturnHeader S (NOLOCK)    
	INNER JOIN ReturnProduct SP (NOLOCK) ON S.ReturnID = SP.ReturnID AND StockTypeid in (select stocktypeid from  stocktype where systemstocktype =1)   
	INNER JOIN ProductBatch B (NOLOCK) ON SP.PrdBatId = B.PrdBatId    
	INNER JOIN ProductBatchDetails PBD (NOLOCK) ON PBD.PrdBatId =B.PrdBatId and DefaultPrice =1
	INNER JOIN SalesInvoiceProduct SIP (NOLOCK) ON S.SalId = SIP.SalId AND SP.PrdId = SIP.PRDID AND SIP.PrdBatId = SP.PrdBatId AND SIP.SLNO=SP.ActSalRowId 
	WHERE ReturnCode IN (SELECT SrNRefNO from Cs2Cn_Prk_Salesreturn) AND S.[Status] = 0 and PBD.SLNo =3
	
	 SELECT DISTINCT R.RtrId,RC.CtgMainId,RC.CtgName  
	 INTO #Retailer  
	 FROM Retailer R (NOLOCK),  
	 RetailerValueClassMap RVCM (NOLOCK),  
	 RetailerValueClass RVC (NOLOCK),  
	 RetailerCategory RC (NOLOCK),  
	 RetailerCategoryLevel RCL (NOLOCK)  
	 WHERE R.Rtrid = RVCM.RtrId AND RVCM.RtrValueClassId = RVC.RtrClassId  
	 AND  RVC.CtgMainId=RC.CtgMainId AND  RCL.CtgLevelId=RC.CtgLevelId 
	
	 SELECT tranid,Refid,Rtrid,CtgName,RefDate,Prdid,Prdbatid,BaseQty,SalSplRate,ActualSelRate,SelRate,CAST(0 AS NUMERIC(18,2)) Nrmlrate,CAST(0 AS NUMERIC(18,2)) SplRate,CAST(0 AS NUMERIC(18,2)) Diff,Slno  
	 INTO #TotClaim FROM(  
	 SELECT 1 tranid,Salid Refid,A.Rtrid,CtgName,Salinvdate RefDate,Prdid,Prdbatid,BaseQty,SalSplRate,ActualSelRate,PrdbatDetailvalue SelRate,Slno FROM #BillingDetails1 A  INNER JOIN #Retailer B ON A.Rtrid = B.Rtrid   
	 UNION   
	 SELECT 2 Transid,ReturnID Refid,A.Rtrid,CtgName,ReturnDate RefDate,Prdid,Prdbatid,BaseQty,SalSplRate,ActualSelRate,PrdbatDetailvalue SelRate,Slno FROM #ReturnDetails1  A  INNER JOIN #Retailer B ON A.Rtrid = B.Rtrid   
	 )A  
	
	--SELECT DISTINCT Priceid,PrdBatDetailValue SplSelRate  INTO #ExistingSpecialPrice FROM
	--(
	--SELECT D.PriceId,D.PrdBatDetailValue 
	--FROM #TotClaim M (NOLOCK),
	--ProductBatchDetails D (NOLOCK) 
	--WHERE M.PriceId = D.PriceId AND D.SLNo = 3
	--AND PriceCode LIKE '%-Spl Rate-%'   
	--UNION 
	--SELECT D.PriceId,D.PrdBatDetailValue 
	--FROM #TotClaim M (NOLOCK),
	--ProductBatchDetails D (NOLOCK) 
	--WHERE M.PriceId = D.PriceId AND D.SLNo = 3
	--AND PriceCode LIKE '%SplRate%'  
	--)A   
	----------------------- Added by lakshman M Dated on 29-03-2019 PMS ID: ILCRSTPAR3860 -----------------
	-- UPDATE A SET A.SplRate = (BaseQty*B.SplselRate) FROM  #TotClaim A INNER JOIN #ExistingSpecialPrice B ON A.Priceid = B.Priceid WHERE A.Priceid <>0
	
	-- UPDATE A SET A.SplRate = (BaseQty*SelRate) FROM  #TotClaim A WHERE A.Priceid =0
	
	-- UPDATE A SET A.NrmlRate = (BaseQty*SelRate) FROM #TotClaim A  
	--UPDATE A SET A.Diff = (NrmlRate-SplRate) FROM  #TotClaim A  
	 --UPDATE A SET A.SplRate = (BaseQty*B.SplselRate) FROM  #TotClaim A INNER JOIN #ExistingSpecialPrice B ON A.Priceid = B.Priceid WHERE A.Priceid <>0
	 
	 UPDATE A SET A.SplRate = (BaseQty*((A.SalSplRate)+(A.SalSplRate*(p.TaxPerc/100)))) FROM  #TotClaim A  
	 INNER JOIN  ParleOutputtaxPercentage P ON A.Refid = p.salid and A.slno = p.prdslno AND A.Tranid=P.Transid  WHERE A.SalSplRate <>0  

	 UPDATE A SET A.SplRate = (BaseQty*((A.ActualSelRate)+(A.ActualSelRate*(P.TaxPerc/100)))) FROM  #TotClaim A   
	 INNER JOIN  #ParleOutputtaxPercentage P ON A.Refid = p.salid and a.slno = p.prdslno AND A.Tranid=P.Transid  
	 WHERE A.SalSplRate =0  
	
	 UPDATE A SET A.NrmlRate = (BaseQty*(( ActualSelRate)+(ActualSelRate*(P.TaxPerc/100)))) FROM  #TotClaim A   
	 INNER JOIN  #ParleOutputtaxPercentage P ON A.Refid = p.salid and a.slno = p.prdslno AND A.Tranid=P.Transid 
	  
	 UPDATE A SET A.Diff = (NrmlRate-SplRate) FROM  #TotClaim A  
	 ----------------- Till here -------------------
	INSERT INTO Cs2Cn_Prk_DebitNoteTopSheet4
	SELECT @DistCode,CmpRtrCode,CTGNAME,SalInvNo,SalInvDate,PrdCCode,NRMLRATE ,SPLRATE,DIFF,'N',NULL,@ServerDate FROM
	(
	SELECT R.CmpRtrCode,CTGNAME,B.SalInvNo,B.SalInvDate,P.PrdCCode,SUM(NRMLRATE)NRMLRATE ,SUM(SPLRATE)SPLRATE, SUM(DIFF)  DIFF
	FROM #TotClaim A INNER JOIN SALESINVOICE B ON A.REFID =B.SALID
	INNER JOIN RETAILER R ON A.RTRID = R.RTRID AND B.RTRID =  R.RtrId
	INNER JOIN Product P ON A.PRDID = P.PRDID 
	WHERE Tranid = 1
	GROUP BY R.CmpRtrCode,CTGNAME,B.SalInvNo,B.SalInvDate,P.PrdCCode
	UNION ALL
	SELECT R.CmpRtrCode,CTGNAME,B.RETURNCODE,B.RETURNDATE,P.PrdCCode,SUM(NRMLRATE)NRMLRATE ,SUM(SPLRATE)SPLRATE, SUM(DIFF)  DIFF
	FROM #TotClaim A INNER JOIN ReturnHeader B ON A.REFID =B.RETURNID
	INNER JOIN RETAILER R ON A.RTRID = R.RTRID AND B.RTRID =  R.RtrId
	INNER JOIN Product P ON A.PRDID = P.PRDID 
	WHERE Tranid = 2
	GROUP BY R.CmpRtrCode,CTGNAME,B.RETURNDATE,B.RETURNCODE,P.PrdCCode
	)A
	
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_ReturnSplDiscount_OLD' AND TYPE='P')
DROP PROCEDURE Proc_ReturnSplDiscount_OLD
GO
--EXEC Proc_ReturnSplDiscount 4,3,6,'2014-03-18',0,0,0,0,0,0
CREATE  PROCEDURE Proc_ReturnSplDiscount_OLD
(
      @Pi_PrdId         INT,
      @Pi_PrdBatId            INT,
      @Pi_RtrId         INT,
      @Pi_InvDate             DATETIME,
      @Po_SplDiscount         NUMERIC(38,6)     OUTPUT,
      @Po_SplFlatAmount NUMERIC(38,6)     OUTPUT,
      @Po_SplPriceId          INT         OUTPUT,
      @Po_MRP                 NUMERIC(38,6)     OUTPUT,
      @Po_SellRate            NUMERIC(38,6)     OUTPUT,
      @Po_ClaimablePercOnMRP  NUMERIC(38,6)     OUTPUT,
      @Pi_RtrShipId                 INT=NULL
)
AS
/*********************************
* PROCEDURE : Proc_ReturnSplDiscount
* PURPOSE   : To Return the Special Discount for the Selected Retailer and Product
* CREATED   : Thrinath
* CREATED DATE    : 29/04/2007
* NOTE            : General SP for Returning the Special Discount for the Selected Retailer and Product
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date}      {developer}       {brief modification description}
* 24/03/2009  Nandakumar R.G  Addition of Tax Group
*********************************/
SET NOCOUNT ON
BEGIN
      DECLARE @ContractId AS INT
      DECLARE @RtrTaxGroupId AS INT
      DECLARE @PrdCtgValMainId      AS INT
      DECLARE @DiscAlone                  AS INT
      SET @ContractId = 0
      SET @Po_SplDiscount = 0
      SET @Po_SplFlatAmount = 0
      SET @Po_SplPriceId = 0
      SET @Po_MRP = 0
      SET @Po_SellRate = 0
      SET @DiscAlone=0
      --GST Change
      SELECT @RtrTaxGroupId=A.TaxGroupId FROM RetailerShipAdd A (NOLOCK)
      INNER JOIN Retailer B (NOLOCK) ON A.RtrId=B.RtrId
      WHERE A.RtrId=@Pi_RtrId and A.RtrShipId=@Pi_RtrShipId
      IF ISNULL(@RtrTaxGroupId,0)=0
      BEGIN
            SELECT @RtrTaxGroupId=TaxGroupId FROM Retailer (NOLOCK) WHERE RtrId=@Pi_RtrId
      END
      --Till Here
      SELECT @PrdCtgValMainId=PrdCtgValMainId FROM Product WHERE PrdId=@Pi_PrdId    
      --Return Contract Price Id if set at Retailer Level
      --SELECT @ContractId = ISNULL(MAX(ContractId),0) FROM ContractPricingMaster CP WHERE RtrId = @Pi_RtrId
      --AND CP.Status=1 AND @Pi_InvDate BETWEEN CP.ValidFromDate AND CP.ValidTillDate     
      SELECT @ContractId = ISNULL(MAX(CP.ContractId),0) FROM ContractPricingMaster CP(NOLOCK)
      INNER JOIN ContractPricingDetails B(NOLOCK) ON CP.contractId =b.ContractId  WHERE RtrId = @Pi_RtrId
      AND CP.Status=1 AND @Pi_InvDate BETWEEN CP.ValidFromDate AND CP.ValidTillDate
      AND PrdId = @Pi_PrdId AND PrdBatId = @Pi_PrdBatId 
      SELECT @DiscAlone=ISNULL(AllowDiscount,0) FROM ContractPricingMaster WHERE ContractId=@ContractId  
      --SELECT '1',@ContractId,@DiscAlone
      IF @DiscAlone=0
      BEGIN
            IF NOT EXISTS(SELECT * FROM  ContractPricingMaster A (NOLOCK) INNER JOIN ContractPricingDetails B ON A.ContractId = B.ContractId
            WHERE A.ContractId=@ContractId AND PrdId=@Pi_PrdId AND      PrdBatId=(CASE DisplayMode WHEN 0 THEN 
            (CASE AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE PrdBatId END) ELSE PrdBatId END))
            BEGIN
                  SET @ContractId=0
            END
      ELSE
            IF NOT EXISTS(SELECT * FROM ContractPricingDetails WHERE ContractId=@ContractId AND
            PrdId=@Pi_PrdId)
            BEGIN
                  SET @ContractId=0
            END
      END
      --SELECT '2',@ContractId,@DiscAlone
      --Return Contract Price Id if set at Retailer Value Class Level with Tax Group
      IF @ContractId = 0
      BEGIN
            SELECT @ContractId = ISNULL(MAX(CP.ContractId),0) FROM Retailer  R
                  INNER JOIN RetailerValueClassmap RVCM ON R.RtrId = RVCM.RtrId
                  INNER JOIN RetailerValueClass RVC ON RVCM.RtrValueClassId = RVC.RtrClassId
                  INNER JOIN RetailerCategory RC ON RC.CtgMainId = RVC.CtgMainId
                 INNER JOIN RetailerCategoryLevel RCL ON RC.CtgLevelId = RCL.CtgLevelId
                  INNER JOIN ContractPricingMaster CP ON CP.RtrClassId = RVCM.RtrValueClassId
                  AND CP.Status=1 AND @Pi_InvDate BETWEEN CP.ValidFromDate AND CP.ValidTillDate
                  INNER JOIN ContractPricingDetails CPD ON CP.ContractId= CPD.ContractId AND CPD.PrdID=@Pi_PrdId 
                  --AND CPD.PrdBatId=(CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END)
                  AND CPD.PrdBatId=(CASE CP.DisplayMode WHEN 0 THEN (CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END) ELSE CPD.PrdBatId END)         
                  WHERE R.RtrId =@Pi_RtrId AND CP.RtrId = 0 AND CP.RtrtaxGroupId=R.TaxGroupId
      END
      SELECT @DiscAlone=ISNULL(AllowDiscount,0) FROM ContractPricingMaster WHERE ContractId=@ContractId
      --SELECT '3',@ContractId,@DiscAlone
      IF @DiscAlone=0
      BEGIN
            IF NOT EXISTS(SELECT * FROM  ContractPricingMaster A (NOLOCK) INNER JOIN ContractPricingDetails B ON A.ContractId = B.ContractId
            WHERE A.ContractId=@ContractId AND PrdId=@Pi_PrdId AND      PrdBatId=(CASE DisplayMode WHEN 0 THEN 
            (CASE AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE PrdBatId END) ELSE PrdBatId END))
            BEGIN
                  SET @ContractId=0
            END
      ELSE
            IF NOT EXISTS(SELECT * FROM ContractPricingDetails WHERE ContractId=@ContractId AND
            PrdId=@Pi_PrdId)
            BEGIN
                  SET @ContractId=0
            END
      END
      --SELECT '4',@ContractId,@DiscAlone
      --Return Contract Price Id if set at Retailer Value Class Level without Tax Group
      IF @ContractId = 0
      BEGIN
            SELECT @ContractId = ISNULL(MAX(CP.ContractId),0) FROM Retailer  R
                  INNER JOIN RetailerValueClassmap RVCM ON R.RtrId = RVCM.RtrId
                  INNER JOIN RetailerValueClass RVC ON RVCM.RtrValueClassId = RVC.RtrClassId
                  INNER JOIN RetailerCategory RC ON RC.CtgMainId = RVC.CtgMainId
                  INNER JOIN RetailerCategoryLevel RCL ON RC.CtgLevelId = RCL.CtgLevelId
                  INNER JOIN ContractPricingMaster CP ON CP.RtrClassId = RVCM.RtrValueClassId
                  AND CP.Status=1 AND @Pi_InvDate BETWEEN CP.ValidFromDate AND CP.ValidTillDate
                  INNER JOIN ContractPricingDetails CPD ON CP.ContractId= CPD.ContractId AND CPD.PrdID=@Pi_PrdId 
                  --AND CPD.PrdBatId=(CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END)
                  AND CPD.PrdBatId=(CASE CP.DisplayMode WHEN 0 THEN (CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END) ELSE CPD.PrdBatId END)
                  WHERE R.RtrId =@Pi_RtrId AND CP.RtrId = 0
      END
      SELECT @DiscAlone=ISNULL(AllowDiscount,0) FROM ContractPricingMaster WHERE ContractId=@ContractId
      --SELECT '5',@ContractId,@DiscAlone 
      IF @DiscAlone=0
      BEGIN
            IF NOT EXISTS(SELECT * FROM  ContractPricingMaster A (NOLOCK) INNER JOIN ContractPricingDetails B ON A.ContractId = B.ContractId
            WHERE A.ContractId=@ContractId AND PrdId=@Pi_PrdId AND      PrdBatId=(CASE DisplayMode WHEN 0 THEN 
            (CASE AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE PrdBatId END) ELSE PrdBatId END))
            BEGIN
                  SET @ContractId=0
            END
      ELSE
            IF NOT EXISTS(SELECT * FROM ContractPricingDetails WHERE ContractId=@ContractId AND
            PrdId=@Pi_PrdId)
            BEGIN
                  SET @ContractId=0
            END
      END
      --SELECT '6',@ContractId,@DiscAlone
      --Return Contract Price Id if set at Retailer Category Level Value with Tax Group
      IF @ContractId = 0
      BEGIN
            SELECT @ContractId = ISNULL(MAX(CP.ContractId),0) FROM Retailer  R
                  INNER JOIN RetailerValueClassmap RVCM ON R.RtrId = RVCM.RtrId
                  INNER JOIN RetailerValueClass RVC ON RVCM.RtrValueClassId = RVC.RtrClassId
                  INNER JOIN RetailerCategory RC ON RC.CtgMainId = RVC.CtgMainId
                  INNER JOIN RetailerCategoryLevel RCL ON RC.CtgLevelId = RCL.CtgLevelId
                  INNER JOIN ContractPricingMaster CP ON CP.CtgMainId = RVC.CtgMainId
                  AND CP.Status=1 AND @Pi_InvDate BETWEEN CP.ValidFromDate AND CP.ValidTillDate
                  INNER JOIN ContractPricingDetails CPD ON CP.ContractId= CPD.ContractId AND CPD.PrdID=@Pi_PrdId 
                  --AND CPD.PrdBatId=(CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END)
                  AND CPD.PrdBatId=(CASE CP.DisplayMode WHEN 0 THEN (CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END) ELSE CPD.PrdBatId END)
                  WHERE R.RtrId =@Pi_RtrId AND CP.RtrId = 0 AND CP.RtrClassId = 0 AND CP.RtrtaxGroupId=R.TaxGroupId
      END
      SELECT @DiscAlone=ISNULL(AllowDiscount,0) FROM ContractPricingMaster WHERE ContractId=@ContractId
      --SELECT '7',@ContractId,@DiscAlone
      IF @DiscAlone=0
      BEGIN
            IF NOT EXISTS(SELECT * FROM  ContractPricingMaster A (NOLOCK) INNER JOIN ContractPricingDetails B ON A.ContractId = B.ContractId
            WHERE A.ContractId=@ContractId AND PrdId=@Pi_PrdId AND      PrdBatId=(CASE DisplayMode WHEN 0 THEN 
            (CASE AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE PrdBatId END) ELSE PrdBatId END))
            BEGIN
                  SET @ContractId=0
            END
      ELSE
            IF NOT EXISTS(SELECT * FROM ContractPricingDetails WHERE ContractId=@ContractId AND
            PrdId=@Pi_PrdId)
            BEGIN
                  SET @ContractId=0
            END
      END
      --SELECT '8',@ContractId,@DiscAlone
      --Return Contract Price Id if set at Retailer Category Level Value without Tax Group-Group Level
      IF @ContractId = 0
      BEGIN
            SELECT @ContractId = ISNULL(MAX(CP.ContractId),0) FROM Retailer  R
                  INNER JOIN RetailerValueClassmap RVCM ON R.RtrId = RVCM.RtrId AND R.RtrId=@Pi_RtrId
                  INNER JOIN RetailerValueClass RVC ON RVCM.RtrValueClassId = RVC.RtrClassId
                  INNER JOIN RetailerCategory RC ON RC.CtgMainId = RVC.CtgMainId
                  INNER JOIN RetailerCategoryLevel RCL ON RC.CtgLevelId = RCL.CtgLevelId
                  INNER JOIN ContractPricingMaster CP ON CP.CtgMainId = RVC.CtgMainId
                  AND CP.Status=1 AND @Pi_InvDate BETWEEN CP.ValidFromDate AND CP.ValidTillDate
                  INNER JOIN ContractPricingDetails CPD ON CP.ContractId= CPD.ContractId AND CPD.PrdID=@Pi_PrdId 
                  --AND CPD.PrdBatId=(CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END)
                  AND CPD.PrdBatId=(CASE CP.DisplayMode WHEN 0 THEN (CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END) ELSE CPD.PrdBatId END)
                  WHERE (CP.RtrId = @Pi_RtrId OR CP.RtrId = 0) AND CP.RtrClassId = 0 AND CP.PrdCtgValMainId IN (0,@PrdCtgValMainId)
                  --Retailer Categorly Level updated By Alphonse J on 2014-03-18
                  IF @ContractId = 0
                  BEGIN
                        SELECT @ContractId = ISNULL(MAX(CP.ContractId),0) FROM Retailer  R
                        INNER JOIN RetailerValueClassmap RVCM ON R.RtrId = RVCM.RtrId AND R.RtrId=@Pi_RtrId
                        INNER JOIN RetailerValueClass RVC ON RVCM.RtrValueClassId = RVC.RtrClassId
                        INNER JOIN RetailerCategory RC ON RC.CtgMainId = RVC.CtgMainId
                        INNER JOIN RetailerCategoryLevel RCL ON RC.CtgLevelId = RCL.CtgLevelId
                        INNER JOIN ContractPricingMaster CP ON CP.CtgMainId = RVC.CtgMainId
                        AND CP.Status=1 AND @Pi_InvDate BETWEEN CP.ValidFromDate AND CP.ValidTillDate
               INNER JOIN ProductCategoryValue PCV ON CP.PrdCtgValMainId=PCV.PrdCtgValMainId 
                        INNER JOIN ProductCategoryValue PCV1 ON PCV1.PrdCtgValLinkCode LIKE PCV.PrdCtgValLinkCode+'%'
                        INNER JOIN ContractPricingDetails CPD ON CP.ContractId= CPD.ContractId AND CPD.PrdID=@Pi_PrdId 
                        --AND CPD.PrdBatId=(CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END)
                      AND CPD.PrdBatId=(CASE CP.DisplayMode WHEN 0 THEN (CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END) ELSE CPD.PrdBatId END)
                        WHERE (CP.RtrId = @Pi_RtrId OR CP.RtrId = 0) AND CP.RtrClassId = 0 AND PCV1.PrdCtgValMainId IN (@PrdCtgValMainId)
                  END
            --SELECT * FROM ContractPricingMaster
      END   
      SELECT @DiscAlone=ISNULL(AllowDiscount,0) FROM ContractPricingMaster WHERE ContractId=@ContractId
      --SELECT  '9',@ContractId,@DiscAlone
      IF @DiscAlone=0
      BEGIN
            IF NOT EXISTS(SELECT * FROM  ContractPricingMaster A (NOLOCK) INNER JOIN ContractPricingDetails B ON A.ContractId = B.ContractId
            WHERE A.ContractId=@ContractId AND PrdId=@Pi_PrdId AND PrdBatId=(CASE DisplayMode WHEN 0 THEN 
            (CASE AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE PrdBatId END) ELSE PrdBatId END))
            BEGIN
                  SET @ContractId=0
            END
      ELSE
            IF NOT EXISTS(SELECT * FROM ContractPricingDetails WHERE ContractId=@ContractId AND
            PrdId=@Pi_PrdId)
            BEGIN
                  SET @ContractId=0
            END
      END
      --SELECT '10',@ContractId,@DiscAlone
      --Return Contract Price Id if set at Retailer Category Level Value without Tax Group-Channel Level
      IF @ContractId = 0
      BEGIN
                  SELECT @ContractId = ISNULL(MAX(CP.ContractId),0) FROM Retailer  R
                  INNER JOIN RetailerValueClassmap RVCM ON R.RtrId = RVCM.RtrId AND R.RtrId=@Pi_RtrId
                  INNER JOIN RetailerValueClass RVC ON RVCM.RtrValueClassId = RVC.RtrClassId
                  INNER JOIN RetailerCategory RCG ON RCG.CtgMainId = RVC.CtgMainId
                  INNER JOIN RetailerCategory RCC ON RCC.CtgMainId = RCG.CtgLinkId
                  INNER JOIN RetailerCategoryLevel RCL ON RCC.CtgLevelId = RCL.CtgLevelId
                  INNER JOIN ContractPricingMaster CP ON CP.CtgMainId = RCC.CtgMainId
                  AND CP.Status=1 AND @Pi_InvDate BETWEEN CP.ValidFromDate AND CP.ValidTillDate
                  INNER JOIN ContractPricingDetails CPD ON CP.ContractId= CPD.ContractId AND CPD.PrdID=@Pi_PrdId 
                  --AND CPD.PrdBatId=(CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END)
                  AND CPD.PrdBatId=(CASE CP.DisplayMode WHEN 0 THEN (CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END) ELSE CPD.PrdBatId END)
                  WHERE (CP.RtrId = @Pi_RtrId OR CP.RtrId = 0) AND CP.RtrClassId = 0 AND CP.PrdCtgValMainId IN (0,@PrdCtgValMainId)
            --SELECT * FROM ContractPricingMaster
      END   
      SELECT @DiscAlone=ISNULL(AllowDiscount,0) FROM ContractPricingMaster WHERE ContractId=@ContractId
      --SELECT  '9-1',@ContractId,@DiscAlone
      IF @DiscAlone=0
      BEGIN
            IF NOT EXISTS(SELECT * FROM  ContractPricingMaster A (NOLOCK) INNER JOIN ContractPricingDetails B ON A.ContractId = B.ContractId
            WHERE A.ContractId=@ContractId AND PrdId=@Pi_PrdId AND      PrdBatId=(CASE DisplayMode WHEN 0 THEN 
            (CASE AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE PrdBatId END) ELSE PrdBatId END))
            BEGIN
                  SET @ContractId=0
            END
      ELSE
            IF NOT EXISTS(SELECT * FROM ContractPricingDetails WHERE ContractId=@ContractId AND
            PrdId=@Pi_PrdId)
            BEGIN
                  SET @ContractId=0
            END
  END
      --SELECT '10-1',@ContractId,@DiscAlone
      --Return Contract Price Id if set at Retailer Category Level with Tax Group
      IF @ContractId = 0
      BEGIN
            SELECT @ContractId = ISNULL(MAX(CP.ContractId),0) FROM Retailer  R
                  INNER JOIN RetailerValueClassmap RVCM ON R.RtrId = RVCM.RtrId
                  INNER JOIN RetailerValueClass RVC ON RVCM.RtrValueClassId = RVC.RtrClassId
                  INNER JOIN RetailerCategory RC ON RC.CtgMainId = RVC.CtgMainId
                  INNER JOIN RetailerCategoryLevel RCL ON RC.CtgLevelId = RCL.CtgLevelId
                  INNER JOIN ContractPricingMaster CP ON CP.CtgLevelId = RCL.CtgLevelId
                  AND CP.Status=1 AND @Pi_InvDate BETWEEN CP.ValidFromDate AND CP.ValidTillDate
                  INNER JOIN ContractPricingDetails CPD ON CP.ContractId= CPD.ContractId AND CPD.PrdID=@Pi_PrdId 
                  --AND CPD.PrdBatId=(CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END)
                  AND CPD.PrdBatId=(CASE CP.DisplayMode WHEN 0 THEN (CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END) ELSE CPD.PrdBatId END)
                  WHERE R.RtrId =@Pi_RtrId AND CP.RtrId = 0 AND CP.RtrClassId = 0
                  AND CP.CtgMainId = 0 AND CP.RtrtaxGroupId=R.TaxGroupId
      END
      SELECT @DiscAlone=ISNULL(AllowDiscount,0) FROM ContractPricingMaster WHERE ContractId=@ContractId
      --SELECT '11',@ContractId,@DiscAlone
      IF @DiscAlone=0
      BEGIN
            IF NOT EXISTS(SELECT * FROM  ContractPricingMaster A (NOLOCK) INNER JOIN ContractPricingDetails B ON A.ContractId = B.ContractId
            WHERE A.ContractId=@ContractId AND PrdId=@Pi_PrdId AND      PrdBatId=(CASE DisplayMode WHEN 0 THEN 
            (CASE AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE PrdBatId END) ELSE PrdBatId END))
            BEGIN
                  SET @ContractId=0
            END
      ELSE
            IF NOT EXISTS(SELECT * FROM ContractPricingDetails WHERE ContractId=@ContractId AND
            PrdId=@Pi_PrdId)
            BEGIN
                  SET @ContractId=0
            END
      END
      --SELECT '12',@ContractId,@DiscAlone
      --Return Contract Price Id if set at Retailer Category Level without Tax Group
      IF @ContractId = 0
      BEGIN
            SELECT @ContractId = ISNULL(MAX(CP.ContractId),0) FROM Retailer  R
                  INNER JOIN RetailerValueClassmap RVCM ON R.RtrId = RVCM.RtrId
                  INNER JOIN RetailerValueClass RVC ON RVCM.RtrValueClassId = RVC.RtrClassId
                  INNER JOIN RetailerCategory RC ON RC.CtgMainId = RVC.CtgMainId
                  INNER JOIN RetailerCategoryLevel RCL ON RC.CtgLevelId = RCL.CtgLevelId
                  INNER JOIN ContractPricingMaster CP ON CP.CtgLevelId = RCL.CtgLevelId
                  AND CP.Status=1 AND @Pi_InvDate BETWEEN CP.ValidFromDate AND CP.ValidTillDate
                  INNER JOIN ContractPricingDetails CPD ON CP.ContractId= CPD.ContractId AND CPD.PrdID=@Pi_PrdId 
                  --AND CPD.PrdBatId=(CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END)
                  AND CPD.PrdBatId=(CASE CP.DisplayMode WHEN 0 THEN (CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END) ELSE CPD.PrdBatId END)
                  WHERE R.RtrId =@Pi_RtrId AND CP.RtrId = 0 AND CP.RtrClassId = 0 AND CP.CtgMainId = 0
      END
      SELECT @DiscAlone=ISNULL(AllowDiscount,0) FROM ContractPricingMaster WHERE ContractId=@ContractId
      --SELECT '13',@ContractId,@DiscAlone
      IF @DiscAlone=0
      BEGIN
            IF NOT EXISTS(SELECT * FROM  ContractPricingMaster A (NOLOCK) INNER JOIN ContractPricingDetails B ON A.ContractId = B.ContractId
            WHERE A.ContractId=@ContractId AND PrdId=@Pi_PrdId AND      PrdBatId=(CASE DisplayMode WHEN 0 THEN 
            (CASE AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE PrdBatId END) ELSE PrdBatId END))
         BEGIN
                  SET @ContractId=0
            END
      ELSE
            IF NOT EXISTS(SELECT * FROM ContractPricingDetails WHERE ContractId=@ContractId AND
            PrdId=@Pi_PrdId)
            BEGIN
                  SET @ContractId=0
            END
      END
      --SELECT '14',@ContractId,@DiscAlone
      --Return Contract Price Id if set at Company Level For all Retailer with Tax Group
      IF @ContractId = 0
      BEGIN
            SELECT @ContractId = ISNULL(MAX(CP.ContractId),0) FROM Product P 
                  INNER JOIN ContractPricingMaster CP ON CP.CmpId = P.CmpId 
                  AND CP.Status=1 AND @Pi_InvDate BETWEEN CP.ValidFromDate AND CP.ValidTillDate
                  INNER JOIN ContractPricingDetails CPD ON CP.ContractId= CPD.ContractId AND CPD.PrdID=@Pi_PrdId 
                  --AND CPD.PrdBatId=(CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END)
                  AND CPD.PrdBatId=(CASE CP.DisplayMode WHEN 0 THEN (CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END) ELSE CPD.PrdBatId END)
                  WHERE P.PrdId =@Pi_PrdId AND CP.RtrId = 0 AND CP.RtrClassId = 0 AND CP.CtgMainId = 0
                  AND CP.CtgLevelId = 0 AND CP.RtrtaxGroupId=@RtrTaxGroupId
      END
      SELECT @DiscAlone=ISNULL(AllowDiscount,0) FROM ContractPricingMaster WHERE ContractId=@ContractId
      --SELECT '15',@ContractId,@DiscAlone
      IF @DiscAlone=0
      BEGIN
            IF NOT EXISTS(SELECT * FROM  ContractPricingMaster A (NOLOCK) INNER JOIN ContractPricingDetails B ON A.ContractId = B.ContractId
            WHERE A.ContractId=@ContractId AND PrdId=@Pi_PrdId AND      PrdBatId=(CASE DisplayMode WHEN 0 THEN 
            (CASE AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE PrdBatId END) ELSE PrdBatId END))
            BEGIN
                  SET @ContractId=0
            END
      ELSE
            IF NOT EXISTS(SELECT * FROM ContractPricingDetails WHERE ContractId=@ContractId AND
            PrdId=@Pi_PrdId)
            BEGIN
                  SET @ContractId=0
            END
      END
      ----SELECT '16',@ContractId,@DiscAlone
      --Return Contract Price Id if set at Company Level For all Retailer without Tax Group
      IF @ContractId = 0
      BEGIN
            SELECT @ContractId = ISNULL(MAX(CP.ContractId),0) FROM Product P
                  INNER JOIN ContractPricingMaster CP ON CP.CmpId = P.CmpId
                  AND CP.Status=1 AND @Pi_InvDate BETWEEN CP.ValidFromDate AND CP.ValidTillDate
                  INNER JOIN ContractPricingDetails CPD ON CP.ContractId= CPD.ContractId AND CPD.PrdID=@Pi_PrdId
                  --AND CPD.PrdBatId=(CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END)
                  AND CPD.PrdBatId=(CASE CP.DisplayMode WHEN 0 THEN (CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END) ELSE CPD.PrdBatId END)
                  WHERE P.PrdId =@Pi_PrdId AND CP.RtrId = 0 AND CP.RtrClassId = 0 AND CP.CtgMainId = 0
                  AND CP.CtgLevelId = 0
      END
      SELECT @DiscAlone=ISNULL(AllowDiscount,0) FROM ContractPricingMaster WHERE ContractId=@ContractId
      --SELECT '17',@ContractId,@DiscAlone
      IF @DiscAlone=0
      BEGIN
            IF NOT EXISTS(SELECT * FROM  ContractPricingMaster A (NOLOCK) INNER JOIN ContractPricingDetails B ON A.ContractId = B.ContractId
            WHERE A.ContractId=@ContractId AND PrdId=@Pi_PrdId AND      PrdBatId=(CASE DisplayMode WHEN 0 THEN 
            (CASE AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE PrdBatId END) ELSE PrdBatId END))
            BEGIN
                  SET @ContractId=0
            END
      ELSE
            IF NOT EXISTS(SELECT * FROM ContractPricingDetails WHERE ContractId=@ContractId AND
            PrdId=@Pi_PrdId)
            BEGIN
                  SET @ContractId=0
            END
      END   
      --SELECT '18',@ContractId,@DiscAlone
      --Return Contract Price Id if set at Company Level For all Retailer with Tax Group
      IF @ContractId = 0
      BEGIN
            SELECT @ContractId = ISNULL(MAX(CP.ContractId),0) FROM ContractPricingMaster CP
                  INNER JOIN ContractPricingDetails CPD ON CP.ContractId= CPD.ContractId AND CPD.PrdID=@Pi_PrdId
                  --AND CPD.PrdBatId=(CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END)
                  AND CPD.PrdBatId=(CASE CP.DisplayMode WHEN 0 THEN (CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END) ELSE CPD.PrdBatId END)
                  AND CP.Status=1 AND @Pi_InvDate BETWEEN CP.ValidFromDate AND CP.ValidTillDate
                  WHERE CP.RtrId = 0 AND CP.RtrClassId = 0 AND CP.CtgMainId = 0
                  AND CP.CtgLevelId = 0 AND CP.CmpId = 0 AND CP.RtrtaxGroupId=@RtrTaxGroupId
      END
      SELECT @DiscAlone=ISNULL(AllowDiscount,0) FROM ContractPricingMaster WHERE ContractId=@ContractId
      --SELECT '19',@ContractId,@DiscAlone
      IF @DiscAlone=0
      BEGIN
            IF NOT EXISTS(SELECT * FROM  ContractPricingMaster A (NOLOCK) INNER JOIN ContractPricingDetails B ON A.ContractId = B.ContractId
            WHERE A.ContractId=@ContractId AND PrdId=@Pi_PrdId AND      PrdBatId=(CASE DisplayMode WHEN 0 THEN 
            (CASE AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE PrdBatId END) ELSE PrdBatId END))
            BEGIN
                  SET @ContractId=0
            END
      ELSE
            IF NOT EXISTS(SELECT * FROM ContractPricingDetails WHERE ContractId=@ContractId AND
            PrdId=@Pi_PrdId)
            BEGIN
                  SET @ContractId=0
            END
      END
      --SELECT '20',@ContractId,@DiscAlone
      --Return Contract Price Id if set at Company Level For all Retailer without Tax Group
      IF @ContractId = 0
      BEGIN
            SELECT @ContractId = ISNULL(MAX(CP.ContractId),0) FROM ContractPricingMaster CP
                  INNER JOIN ContractPricingDetails CPD ON CP.ContractId= CPD.ContractId AND CPD.PrdID=@Pi_PrdId
                  --AND CPD.PrdBatId=(CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END)
                  AND CPD.PrdBatId=(CASE CP.DisplayMode WHEN 0 THEN (CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END) ELSE CPD.PrdBatId END)
                  AND CP.Status=1 AND @Pi_InvDate BETWEEN CP.ValidFromDate AND CP.ValidTillDate
                  WHERE CP.RtrId = 0 AND CP.RtrClassId = 0 AND CP.CtgMainId = 0
                  AND CP.CtgLevelId = 0 AND CP.CmpId = 0
      END
      SELECT @DiscAlone=ISNULL(AllowDiscount,0) FROM ContractPricingMaster WHERE ContractId=@ContractId
      --SELECT '21',@ContractId,@DiscAlone
      IF @ContractId = 0
      BEGIN
            SET @Po_SplDiscount = 0
            SET @Po_SplFlatAmount = 0
            SET @Po_SplPriceId = 0
            SET @Po_MRP = 0
            SET @Po_SellRate = 0
            SET @Po_ClaimablePercOnMRP = 0
      END
      ELSE
      BEGIN
            SELECT @Po_SplDiscount = Discount, @Po_SplFlatAmount = FlatAmtDisc,
            @Po_SplPriceId = PriceId, @Po_ClaimablePercOnMRP = ClaimablePercOnMRP 
            FROM ContractPricingMaster A (NOLOCK) INNER JOIN ContractPricingDetails B (NOLOCK) ON A.ContractId = B.ContractId
            WHERE A.ContractId = @ContractId AND PrdId =@Pi_PrdId AND PrdBatId = (CASE PrdBatId WHEN 0 THEN PrdBatId ELSE @Pi_PrdBatId END)
            --PrdBatId = (CASE @DiscAlone WHEN 0 THEN Pi_PrdBatId ELSE PrdBatId END)            
            IF EXISTS (Select PrdBatId From ProductBatchDetails WHERE PriceId = @Po_SplPriceId AND PrdBatId = @Pi_PrdBatId AND DefaultPrice=1)
            BEGIN
                  SET @Po_SplPriceId = 0
                  SET @Po_MRP = 0
                  SET @Po_SellRate = 0
            END
            ELSE
            BEGIN
                  SELECT @Po_MRP = B.PrdBatDetailValue , @Po_SellRate = D.PrdBatDetailValue
                        FROM ProductBatch A (NOLOCK)
                        INNER JOIN ProductBatchDetails B (NOLOCK) ON A.PrdBatId = B.PrdBatID
                        INNER JOIN BatchCreation C (NOLOCK) ON C.BatchSeqId = B.BatchSeqId
                        AND B.SlNo = C.SlNo AND C.MRP = 1 INNER JOIN ProductBatchDetails D (NOLOCK) ON
                        A.PrdBatId = D.PrdBatID INNER JOIN BatchCreation E (NOLOCK) ON
                        E.BatchSeqId = D.BatchSeqId AND D.SlNo = E.SlNo AND E.SelRte = 1
                        WHERE A.Status = 1 AND A.PrdId=@Pi_PrdId AND B.PriceId = @Po_SplPriceId
                        AND D.PriceID = @Po_SplPriceId AND A.PrdBatId = @Pi_PrdBatId
            END
      END    
RETURN
END
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Fn_ReturnPDFReportName]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[Fn_ReturnPDFReportName]
GO
--select * From Fn_ReturnPDFReportName(293,1)
CREATE FUNCTION [dbo].[Fn_ReturnPDFReportName](@RptId AS INT,@UsrId	INT)
RETURNS @PDFReportName TABLE
(
	LaserRptName	VARCHAR(100),
	GenericRptName	VARCHAR(100),
	RptCaption		VARCHAR(100)
)
AS
/************************************************
* FUNCTION : Proc_RptDebitNoteTopSheetNew    
* PURPOSE : Debit Note Top Sheet in Crystal format
* CREATED : S.MOORTHI   
* CREATED DATE :03-05-2019    
* NOTE  : Parle Function to Return Rpt File Selection for Debit Note Top Sheet    
* MODIFIED     
*************************************************************************
* DATE       AUTHOR   CR/BZ USER STORY ID           DESCRIPTION                             
**************************************************************************
24-06-2019  S.MOORTHI		SR		ILCRSTPAR4278       Debit note sheet report (Design in Crystal Reports)
25-11-2019  Deepan			CR		CRCRSTPAR0090       Debit note Claim report (Design in Crystal Reports)

*********************************************************************************/         
BEGIN
--CRCRSTPAR0090
	IF EXISTS(SELECT SelValue FROM ReportFilterDt  WHERE RptId=@RptId and SelId=176 AND SelValue=0 AND UsrId=@UsrId)
	BEGIN
		IF 	@RptId =292
		BEGIN
			INSERT INTO @PDFReportName(LaserRptName,GenericRptName,RptCaption)
			SELECT 'RptDebitNoteTopSheet_Laser.Rpt','RptDebitNoteTopSheet.rpt',RptCaption+' '+replace(convert(VARCHAR(20),GETDATE(),105)+''+left(convert(VARCHAR(20),GETDATE(),108),5) ,':','') 
			FROM RptHeader Where RptId=@RptId
		END
		ELSE
		BEGIN
			INSERT INTO @PDFReportName(LaserRptName,GenericRptName,RptCaption)
			--SELECT 'RptDebitNoteClaim_Laser.Rpt','RptDebitNoteClaim.rpt',RptCaption+' '+replace(convert(VARCHAR(20),GETDATE(),105)+''+left(convert(VARCHAR(20),GETDATE(),108),5) ,':','') 
			SELECT 'RptDebitNoteClaim_Laser.Rpt','RptDebitNoteClaim_Laser.Rpt',replace(convert(VARCHAR(20),GETDATE(),105)+''+left(convert(VARCHAR(20),GETDATE(),108),5) ,':','')+' '+ RptCaption
			FROM RptHeader Where RptId=@RptId
		END
	END
	ELSE
	BEGIN
		IF 	@RptId =292
		BEGIN	
			INSERT INTO @PDFReportName(LaserRptName,GenericRptName,RptCaption)
			SELECT 'RptDebitNoteTopSheet_Laser.Rpt','RptDebitNoteTopSheet_Laser.rpt',RptCaption+' '+replace(convert(VARCHAR(20),GETDATE(),105)+''+left(convert(VARCHAR(20),GETDATE(),108),5) ,':','') 
			FROM RptHeader Where RptId=@RptId
		END
		ELSE
		BEGIN	
			INSERT INTO @PDFReportName(LaserRptName,GenericRptName,RptCaption)
			--SELECT 'RptDebitNoteClaim_Laser.Rpt','RptDebitNoteClaim_Laser.rpt',RptCaption+' '+replace(convert(VARCHAR(20),GETDATE(),105)+''+left(convert(VARCHAR(20),GETDATE(),108),5) ,':','') 
			SELECT 'RptDebitNoteClaim_Laser.Rpt','RptDebitNoteClaim_Laser.Rpt',replace(convert(VARCHAR(20),GETDATE(),105)+''+left(convert(VARCHAR(20),GETDATE(),108),5) ,':','') +' '+RptCaption
			FROM RptHeader Where RptId=@RptId
		END	
	END	
	
	--IF EXISTS(SELECT * from MANUALCONFIGURATION WHERE MODULEID='REPORTPRINT' AND PROJECTNAME='PARLE' and STATUS=1)
	--BEGIN
		--IF @RptId=292
		--BEGIN
		--	INSERT INTO @PDFReportName(LaserRptName,GenericRptName,RptCaption)
		--	SELECT 'RptDebitNoteTopSheet_Laser.Rpt',RptName,RptCaption+' '+replace(convert(VARCHAR(20),GETDATE(),105)+''+left(convert(VARCHAR(20),GETDATE(),108),5) ,':','')FROM RptHeader Where RptId=292		
				
		--	--SELECT 'RptDebitNoteTopSheet_Laser.Rpt',RptName,RptCaption FROM RptHeader Where RptId=292		
		--	--SELECT 'RptDebitNoteTopSheet_Laser.Rpt',RptName,RptCaption+'_'+convert(VARCHAR(20),GETDATE(),105) FROM RptHeader Where RptId=292		
		--END
	--END
RETURN
END
GO
--Script Updater Files
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_ValidateCSTimer' AND TYPE ='P')
DROP PROCEDURE Proc_ValidateCSTimer
GO
/*
begin tran
 exec Proc_ValidateCSTimer '2019-06-24',0,206
 SELECT * FROM CSTimer (NOLOCK)
rollback tran
*/
CREATE PROCEDURE Proc_ValidateCSTimer
(
@gServerDate DATETIME,
@iMode INT,
@TransId	INT
)
AS
/********************************************************************************************************************************************************************************
* PROCEDURE		: Proc_ValidateCSTimer
* PURPOSE		: To Validate the Server Date Details
* CREATED BY	: S.MOORTHI
* CREATED DATE	: 06/11/2018
* MODIFIED
* DATE        AUTHOR			CR/BZ	USER STORY ID		DESCRIPTION         
-----------------------------------------------------------------------      
 06-11-2018  S.Moorthi			CR		CRCRSTPAR0034       currently month end is happening on 6th day of month, this is happening based on system date. Is internet connection not available. 
															Need to get console server date through sync and validate user to perform month end process
 06-11-2018  S.Moorthi			CR		CRCRSTPAR0036       Back Date transaction should be allowed
 06-12-2018  M Lakshman         SR      ILCRSTPAR2752       In core stocky Proc_ValidateCSTimer fresh DB using that time stock ledger no records available. 
															Now validation added script level changes has been done.
 13-12-2018  M Lakshman         SR      ILCRSTPAR2927       As per client request Future date transaction will allow only 5 days validation included in core stocky.	
 12-04-2018  M Lakshman         SR      ILCRSTPAR3870       As per client request Future date validation included allow only 5 days. 								
 24/06/2019	 S.Moorthi			CR		CRCRSTPAR0070		Login validation with server date
 09/09/2019  M.Lakshman         SR      ILCRSTPAR5388/ILCRSTPAR5871       While login core styocky user login previous sync validation and usere login validation in CS.
********************************************************************************************************************************************************************************/ 
BEGIN
SET NOCOUNT ON
	DECLARE @CSDate AS DATETIME
	DECLARE @LocalDate AS DATETIME
	
	DECLARE @BackDateAllow AS DATETIME
	declare @TimInterval  AS NUMERIC(8,0)
	DECLARE @CSDateDD INT
	DECLARE @BackDateDays AS INT
	DECLARE @MonthEndDate AS DATETIME
	DECLARE @MaxTransDate AS DATETIME
	DECLARE @ValidateMsg AS VARCHAR(200)
	DECLARE @MonthEndDt AS DATETIME
	DECLARE @JCMONTHDT AS DATETIME
	DECLARE @ActMonthEndDt AS DATETIME
	DECLARE @MonthEndConfigDays AS INT
	DECLARE @csdateNew AS datetime
	DECLARE @csServerNew AS datetime
	
	IF NOT EXISTS(SELECT * FROM CSTimer (NOLOCK))
	BEGIN
		SELECT '' ValidMsg
		RETURN 
	END
	
	IF NOT EXISTS(SELECT * FROM StockLedger (NOLOCK))
	BEGIN
		SELECT '' ValidMsg
		RETURN 
	END
	SELECT @CSDate = CONVERT(VARCHAR(10),CSDate,121),@LocalDate = GETDATE() FROM CSTimer (NOLOCK)
	
	SELECT @MaxTransDate=ISNULL(MAX(TransDate),GETDATE()) FROM StockLedger (NOLOCK)
	IF EXISTS(SELECT * FROM ManualConfiguration WHERE ModuleId='CSTimer3' AND STATUS=1)
	BEGIN
		IF @TransId<>206 AND @iMode=0
		BEGIN
			DECLARE @FutureDays AS INT
			DECLARE @LastSyncDate AS DATETIME
			SET @FutureDays=(SELECT ConfigValue FROM ManualConfiguration WHERE ModuleId='CSTimer3' AND STATUS=1)
			IF EXISTS(SELECT *fROM CSTimerServerDate(NOLOCK))
			BEGIN
				SELECT @LastSyncDate=ISNULL(CONVERT(VARCHAR(10),ServerDate,121),@gServerDate) fROM CSTimerServerDate(NOLOCK) 
			
				IF @gServerDate>DATEADD(D,@FutureDays,@LastSyncDate)
				BEGIN

					--SELECT 'Previous Sync Date is '+CONVERT(VARCHAR(10),@LastSyncDate,105) +',System will be allow till '+CONVERT(varchar(10),DATEADD(D,@FutureDays,@LastSyncDate),105) ValidMsg
					  SELECT 'Previous Sync Date is '+CONVERT(VARCHAR(10),@LastSyncDate,105) +',Please do sync to continue login' ValidMsg
					--SELECT 'Please Change the System Date future date transaction will be allow only'+ CAST(@FutureDays AS VARCHAR(10)) +' days after last Sync date' ValidMsg

					RETURN
				END
			
			END
		END
	END
	
	-- SELECT  @csdateNew  = CSdate+4  from CSTimer (NOLOCK)
	---------- Added by lakshman M Dated ON 12-04-2018 PMS ID: ILCRSTPAR3870 --------------
	--SELECT @CSDATENEW = convert(varchar(10),getdate(),121)
	--SELECT  @csServerNew = @gServerDate + 4
	--IF @csServerNew < @csdateNew
	--BEGIN
	--	--IF @csdateNew <= @gServerDate
	--	--BEGIN	
	--		IF NOT EXISTS(SELECT * FROM CSTimer (NOLOCK) WHERE convert(varchar(10),CSDate,121) Between CONVERT(VARCHAR(10),@csdateNew,121) AND CONVERT (VARCHAR(10),@gServerDate,121) )
	--		BEGIN
	--			SELECT 'Please Change the System Date future date transaction will allow for only 5 days' ValidMsg
	--			RETURN 
	--		END
	--	--END
	--END 
	------------------------- Till here --------------------------------------
	IF @MaxTransDate>@CSDate
	BEGIN
		SET @CSDate=@MaxTransDate		
		UPDATE CSTimer SET CSDate=@MaxTransDate
	END
	
	IF @iMode=1000 AND @TransId=206
	BEGIN
		IF @gServerDate>@CSDate
		BEGIN
			SET @CSDate=@gServerDate
			INSERT INTO CSTimerHistory(SyncId,ServerDate,CSDate,LocalDate,Upload)  
			SELECT SyncId,@gServerDate,@gServerDate,GETDATE(),Upload FROM CSTimer T (NOLOCK) 
			
			UPDATE CSTimer SET CSDate=@CSDate,ServerDate=@gServerDate,LocalDate=GETDATE()
		END
	END
	
	--select @BackDateDays,@CSDate
	IF EXISTS(SELECT * FROM CONFIGURATION WHERE MODULENAME='Month End Process' AND MODULEID='DAYMONTHEND1' AND CONFIGVALUE>0)
	BEGIN
		IF @iMode=0 AND @TransId=206
		BEGIN
			IF EXISTS(SELECT * fROM MANUALCONFIGURATION WHERE Moduleid='MonthEndServerDate' and status=1)
			BEGIN 
				goto xy
			END
		END
		
		SELECT @MonthEndConfigDays= ConfigValue FROM CONFIGURATION WHERE MODULENAME='Month End Process' AND MODULEID='DAYMONTHEND1'
		SET @ActMonthEndDt = dateadd(d,@MonthEndConfigDays,@gServerDate)
	
		SELECT @JCMONTHDT=Jcmsdt FROM JCMonth(NOLOCK) WHERE @CSDate BETWEEN JcmSdt AND JcmEdt 
		SET @MonthEndDt=dateadd(d,@MonthEndConfigDays,@JCMONTHDT)
	
		IF NOT EXISTS(SELECT * FROM JCMonthEnd (NOLOCK)	WHERE JcmEdt=DATEADD(D,-1,@JCMONTHDT) AND Status = 1)
		BEGIN
			IF @CSDate >= @MonthEndDt
			BEGIN
				IF @CSDate <> @gServerDate
					BEGIN
						SELECT 'Please change the System date with '+ CONVERT(NVARCHAR(20),@CSDate,103)+' and do Month End for '+DATENAME(M,DATEADD(D,-1,@JCMONTHDT))+' - '+CAST(YEAR(DATEADD(D,-1,@JCMONTHDT)) AS NVARCHAR(10)) as ValidMsg
						RETURN
						--SET @ValidateMsg='System Date does not match with Server Date. Please correct the system date and restart Sehyog to proceed.'
					END
			END
		END
	END
	xy:
	
	--select @BackDateAllow,@gServerDate
	IF EXISTS(SELECT * FROM ManualConfiguration(NOLOCK) WHERE ModuleId='CSTimer2' AND STATUS=1)
	BEGIN
		SELECT @BackDateDays = ISNULL(ConfigValue,0) FROM ManualConfiguration(NOLOCK) WHERE ModuleId='CSTimer2'
		SET @BackDateAllow=CONVERT(VARCHAR(10),DATEADD(D,-@BackDateDays+1,@CSDate),121)
		IF @BackDateAllow>@gServerDate
		BEGIN
			SELECT 'Back Date should be allow till '+ CONVERT(NVARCHAR(20),@BackDateAllow,103)+', Please Change the System Date and re-open Sehyog to continue ' ValidMsg
			--SELECT 'Back Date should be allow till '+ CONVERT(NVARCHAR(20),@BackDateAllow,103)+', Please Change System Date to '+ CONVERT(NVARCHAR(20),@CSDate,103)+' and re-open Sehyog to continue ' ValidMsg
			RETURN
		END
	END
	
	
	--Back Date Transaction Not Allowed, Please Change System Date to 
	--IF @CSDate>@gServerDate
	--BEGIN
	--	SELECT 	'Please change System date to '+ CONVERT(NVARCHAR(20),@CSDate,103)+' and re-open Sehyog to continue ' ValidMsg
	--	RETURN
	--END
	
	SELECT '' ValidMsg
	
RETURN 
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_Export_CS2WS_PricingPlan' AND TYPE ='P')
DROP PROCEDURE Proc_Export_CS2WS_PricingPlan
GO
--EXEC Proc_Export_CS2WS_PricingPlan '1'
CREATE PROCEDURE Proc_Export_CS2WS_PricingPlan
(
	@SalRpCode varchar(50)
)
AS
/*******************************************************************************************
* PROCEDURE		: Proc_Export_CS2WS_PricingPlan
* PURPOSE		: To Export Product Price details to the PDA Intermediate Database
* CREATED		: S.Moorthi
* CREATED DATE	: 07/08/2018
* MODIFIED		:
* DATE      AUTHOR     DESCRIPTION
*****************************************************************************************************
* DATE         AUTHOR       CR/BZ	   USER STORY ID   DESCRIPTION                         
*****************************************************************************************************
* 04/08/2018   S.Moorthi    CR         CRCRSTPAR0017   SFA-Upload-Download Integration --Product
* 29/11/2018   S.Moorthi    SR         ILCRSTPAR2692   0 price moved to SFA Application from Sehyog .
* 06-01-2020   S.Mohana		SR		   ILCRSTPAR7270   Date not considered in upload (As per Discussion With Awinash & Nilesh)
********************************************************************************************/
BEGIN
DECLARE @DistCode NVARCHAR(40)
DECLARE @Prdid AS int
DECLARE @Prdbatid AS int
	
	DELETE FROM Export_CS2WS_PricingPlan 
	
	SELECT @DistCode = DistributorCode FROM Distributor
	
	CREATE TABLE #Export_CS2WS_PricingPlan
	(
		PrdID				[Bigint],
		TenantCode   [nvarchar](25) COLLATE DATABASE_DEFAULT,  
		PricingCode   [nvarchar](25)COLLATE DATABASE_DEFAULT,  
		PricingDescription [nvarchar](25)COLLATE DATABASE_DEFAULT,  
		StartDate   [Datetime],  
		EndDate    [Datetime],  
		ItemCode   [nvarchar](100)COLLATE DATABASE_DEFAULT,  
		UnitsOfMeasure  [nvarchar](20)COLLATE DATABASE_DEFAULT,   
		DebitPrice   [Float],  
		CreditPrice			[Float],
		DamagePrice			[Float],
		PriceId				[BIGINT]
	)
	
	SELECT R.RtrId,R.CmpRtrCode,RC.CtgCode as GroupCode,RC.CtgMainId AS GroupId,
	RC1.CtgCode AS ChannelCode,RC1.CtgMainId AS ChannelId into #temp1 FROM Retailer R (NOLOCK)
	INNER JOIN RetailerValueClassMap RVCM (NOLOCK) ON R.RtrId=RVCM.RtrId 
	INNER JOIN RetailerValueClass RVC (NOLOCK) ON RVC.RtrClassId=RVCM.RtrValueClassId 
	INNER JOIN RetailerCategory RC (NOLOCK) ON RC.CtgMainId=RVC.CtgMainId
	INNER JOIN RetailerCategory RC1 (NOLOCK) ON RC1.CtgMainId=RC.CtgLinkId 
	
	SELECT PBL.PrdId,PBL.PrdBatId INTO #TempPriceDt FROM Product A (NOLOCK) 
	INNER JOIN Fn_SFAProductToSend() B ON A.PrdId=B.PrdId
	INNER JOIN ProductBatchLocation PBL (NOLOCK) ON A.PrdId=PBL.PrdId and PBL.PrdId=B.PrdId
	WHERE PBL.PrdBatLcnSih-PBL.PrdBatLcnRessih>0
	GROUP BY PBL.PrdId,PBL.PrdBatId
	
	INSERT INTO #Export_CS2WS_PricingPlan(Prdid,TenantCode,PricingCode,PricingDescription,StartDate,EndDate,
	ItemCode,UnitsOfMeasure,DebitPrice,CreditPrice,DamagePrice,PriceId)
	SELECT P.PrdId,@DistCode,R.CmpRtrCode,R.CmpRtrCode,max(A.ValidFromDate) AS ValidFromDate ,max(A.ValidTillDate) AS ValidTillDate,  
	P.PrdCCode,UM.UomCode,0,0,0,MAX(B.PriceId) as PriceId
	FROM ContractPricingMaster A (NOLOCK)
	INNER JOIN Retailer R (NOLOCK) ON A.RtrId=R.RtrId  
	INNER JOIN ContractPricingDetails B (NOLOCK) ON A.ContractId=B.ContractId 
	INNER JOIN #TempPriceDt TP ON TP.PrdId=B.PrdId AND TP.PrdBatID=B.PrdBatId 
	INNER JOIN Product P (NOLOCK) ON B.PrdId=P.PrdId AND TP.PrdId=P.PrdId 
	INNER JOIN Fn_SFAProductToSend() FP ON P.PrdId=FP.PrdId AND  B.PrdId=FP.PrdId AND TP.PrdId=FP.PrdId 
	INNER JOIN UomGroup UG (NOLOCK) ON UG.UomGroupId=P.UomGroupId AND UG.BaseUom='Y'
	INNER JOIN UomMaster UM (NOLOCK) ON UM.UomId=UG.UomId
	INNER JOIN TaxGroupSetting TG ON P.TaxGroupId = TG.TaxGroupId AND PrdStatus = 1 
	WHERE CONVERT(VARCHAR(10),GETDATE(),121) BETWEEN  A.ValidFromDate AND A.ValidTillDate 
	AND A.[Status]=1 AND A.RtrId<>0
	GROUP BY P.PrdId,R.CmpRtrCode,R.CmpRtrCode,--A.ValidFromDate,A.ValidTillDate,  
	P.PrdCCode,UM.UomCode
	
	SELECT DISTINCT PricingCode into #PricingCode from #Export_CS2WS_PricingPlan
	
	INSERT INTO #Export_CS2WS_PricingPlan(Prdid,TenantCode,PricingCode,PricingDescription,StartDate,EndDate,
	ItemCode,UnitsOfMeasure,DebitPrice,CreditPrice,DamagePrice,PriceId)
	SELECT P.PrdId,@DistCode,T.CmpRtrCode,T.CmpRtrCode,max(A.ValidFromDate) AS ValidFromDate ,max(A.ValidTillDate) AS ValidTillDate,  
	P.PrdCCode,UM.UomCode,0,0,0,MAX(b.PriceId) as PriceId
	FROM ContractPricingMaster A (NOLOCK)
	INNER JOIN RetailerCategory R (NOLOCK) ON A.CtgMainId=R.CtgMainId  
	inner JOIN #temp1 T (NOLOCK) ON (T.ChannelId=R.CtgMainId OR T.GroupId=R.CtgMainId)
	inner join #PricingCode E (NOLOCK) ON E.PricingCode=T.CmpRtrCode	
	INNER JOIN ContractPricingDetails B (NOLOCK) ON A.ContractId=B.ContractId 
	INNER JOIN #TempPriceDt TP ON TP.PrdId=B.PrdId AND TP.PrdBatID=B.PrdBatId
	INNER JOIN Product P (NOLOCK) ON B.PrdId=P.PrdId  AND TP.PrdId=P.PrdId 
	INNER JOIN Fn_SFAProductToSend() FP ON P.PrdId=FP.PrdId AND  B.PrdId=FP.PrdId AND TP.PrdId=FP.PrdId 
	INNER JOIN UomGroup UG (NOLOCK) ON UG.UomGroupId=P.UomGroupId AND UG.BaseUom='Y'
	INNER JOIN UomMaster UM (NOLOCK) ON UM.UomId=UG.UomId
	INNER JOIN TaxGroupSetting TG ON P.TaxGroupId = TG.TaxGroupId AND PrdStatus = 1 
	WHERE CONVERT(VARCHAR(10),GETDATE(),121) BETWEEN  A.ValidFromDate AND A.ValidTillDate 
	AND A.[Status]=1 AND A.CtgMainId<>0 AND 
	NOT EXISTS(SELECT * FROM #Export_CS2WS_PricingPlan EB INNER JOIN Product P (nolock) ON P.PrdCCode=EB.ItemCode 
	WHERE EB.PricingCode=T.CmpRtrCode AND EB.Prdid=P.PrdId AND EB.Prdid=FP.PrdId AND EB.Prdid=B.PrdId 
	AND EB.PricingCode=E.PricingCode)
	GROUP BY P.PrdId,T.CmpRtrCode,T.CmpRtrCode,--A.ValidFromDate,A.ValidTillDate,  
	P.PrdCCode,UM.UomCode
	
	INSERT INTO #Export_CS2WS_PricingPlan(Prdid,TenantCode,PricingCode,PricingDescription,StartDate,EndDate,
	ItemCode,UnitsOfMeasure,DebitPrice,CreditPrice,DamagePrice,PriceId)
	SELECT P.PrdId,@DistCode,R.CtgCode,R.CtgCode,max(A.ValidFromDate) AS ValidFromDate ,max(A.ValidTillDate) AS ValidTillDate,  
	P.PrdCCode,UM.UomCode,0,0,0,MAX(PriceId) As PriceId
	FROM ContractPricingMaster A (NOLOCK)
	INNER JOIN RetailerCategory R (NOLOCK) ON A.CtgMainId=R.CtgMainId  
	INNER JOIN ContractPricingDetails B (NOLOCK) ON A.ContractId=B.ContractId 
	INNER JOIN #TempPriceDt TP ON TP.PrdId=B.PrdId AND TP.PrdBatID=B.PrdBatId
	INNER JOIN Product P (NOLOCK) ON B.PrdId=P.PrdId   AND TP.PrdId=P.PrdId 
	INNER JOIN Fn_SFAProductToSend() FP ON P.PrdId=FP.PrdId AND  B.PrdId=FP.PrdId AND TP.PrdId=FP.PrdId 
	INNER JOIN UomGroup UG (NOLOCK) ON UG.UomGroupId=P.UomGroupId AND UG.BaseUom='Y'
	INNER JOIN UomMaster UM (NOLOCK) ON UM.UomId=UG.UomId
	INNER JOIN TaxGroupSetting TG ON P.TaxGroupId = TG.TaxGroupId AND PrdStatus = 1 
	WHERE CONVERT(VARCHAR(10),GETDATE(),121) BETWEEN  A.ValidFromDate AND A.ValidTillDate 
	AND A.[Status]=1 AND A.CtgMainId<>0 --and PrdCCode ='100301301041444012144PKT005N' and CtgCode  ='IRCTC WZ'
	GROUP BY P.PrdId,R.CtgCode,R.CtgCode,--A.ValidFromDate,A.ValidTillDate,  
	P.PrdCCode,UM.UomCode
	
	
	--SELECT A.PrdID,Max(PB.PrdBatId) AS PrdBatId	INTO #TempProductBatch FROM #Export_CS2WS_PricingPlan A 
	--INNER JOIN ProductBatch PB (NOLOCK) ON A.PrdID=PB.PRDID
	--WHERE  PrdBatCode <> 'Sample Batch' GROUP BY A.PrdID
	--SELECT DISTINCT P.PrdID,PB.PrdBatId,B1.PrdBatDetailValue as SellRate 
	--INTO #TempPriceDt
	--FROM Product P (NOLOCK)
	--INNER JOIN ProductBatch PB(NOLOCK) ON P.PrdID = PB.PrdID	
	--INNER JOIN #TempProductBatch PB1(NOLOCK) ON P.PrdID = PB1.PrdID AND PB.PrdBatId=PB1.PrdBatId AND PB.PrdID = PB1.PrdID
	--INNER JOIN ProductBatchDetails B1 (NOLOCK) ON PB.PrdBatId = B1.PrdBatID AND B1.DefaultPrice=1
	--INNER JOIN BatchCreation C1 (NOLOCK) ON C1.BatchSeqId = PB.BatchSeqId AND B1.SlNo = C1.SlNo AND C1.SelRte = 1 
	--ORDER BY P.PrdId
	
	
	UPDATE PP SET PP.DebitPrice=B1.PrdBatDetailValue,PP.CreditPrice=B1.PrdBatDetailValue,PP.DamagePrice=B1.PrdBatDetailValue
	FROM Product P (NOLOCK)
	INNER JOIN #Export_CS2WS_PricingPlan PP ON P.PrdId=PP.PrdID 
	INNER JOIN ProductBatchDetails B1 (NOLOCK) ON B1.PriceId=PP.PriceId
	INNER JOIN BatchCreation C1 (NOLOCK) ON C1.BatchSeqId = B1.BatchSeqId AND B1.SlNo = C1.SlNo AND C1.SelRte = 1 
	
	--As discussed Mr. Awanish to remove duplicate based on Max start date
	SELECT PricingCode,ItemCode INTO #TempDuplicate FROM #Export_CS2WS_PricingPlan 
	GROUP BY PricingCode,ItemCode HAVING COUNT(ItemCode)>1
	SELECT A.PricingCode,A.ItemCode,MAX(A.StartDate) AS StartDate INTO #TempMaxStartDate FROM #Export_CS2WS_PricingPlan A 
	INNER JOIN #TempDuplicate B ON A.PricingCode=B.PricingCode AND A.ItemCode=B.ItemCode 
	GROUP BY A.PricingCode,A.ItemCode
	
	DELETE A FROM #Export_CS2WS_PricingPlan A (NOLOCK)
	INNER JOIN #TempMaxStartDate B ON A.ItemCode=B.ItemCode AND A.PricingCode=B.PricingCode 
	WHERE NOT EXISTS(SELECT * FROM #TempMaxStartDate M WHERE M.PricingCode=A.PricingCode AND M.ItemCode=A.ItemCode AND 
	M.StartDate=A.StartDate)
		
	--UPDATE A SET A.DebitPrice=B.SellRate,A.CreditPrice=B.SellRate,A.DamagePrice=B.SellRate 
	--FROM #Export_CS2WS_PricingPlan A 
	--INNER JOIN #TempPriceDt B ON A.PrdID=B.PrdId and A.PricingCode=
	
	INSERT INTO Export_CS2WS_PricingPlan(TenantCode,PricingCode,PricingDescription,StartDate,EndDate,
	ItemCode,UnitsOfMeasure,DebitPrice,CreditPrice,DamagePrice,UploadFlag)
	SELECT DISTINCT TenantCode,PricingCode,PricingDescription,''StartDate,''EndDate,ItemCode,UnitsOfMeasure, --ILCRSTPAR7270
	DebitPrice,CreditPrice,DamagePrice,'N' UploadFlag FROM #Export_CS2WS_PricingPlan ORDER BY ItemCode
	
	SELECT  Distinct
			TenantCode,
			PricingCode,
			PricingDescription,
			--CONVERT(VARCHAR(10),StartDate,103) AS StartDate,
			--CONVERT(VARCHAR(10),EndDate,103) AS EndDate,
			ItemCode,
			UnitsOfMeasure,
			DebitPrice,
			CreditPrice,
			DamagePrice
		FROM Export_CS2WS_PricingPlan WITH (NOLOCK) 
	
END
GO
IF EXISTS (SELECT * FROM sys.objects WHERE NAME ='Export_CS2WS_Customer' AND type ='U')
DROP TABLE Export_CS2WS_Customer
GO
CREATE TABLE Export_CS2WS_Customer (
	[TenantCode] [nvarchar](25) NULL,
	[LocationCode] [nvarchar](25) NULL,
	[CustomerCode] [nvarchar](25) NULL,
	[CustomerName] [nvarchar](50) NULL,
	[Address1] [nvarchar](200) NULL,
	[Address2] [nvarchar](200) NULL,
	[Address3] [nvarchar](200) NULL,
	[Address4] [nvarchar](200) NULL,
	[City] [nvarchar](50) NULL,
	[State] [nvarchar](75) NULL,
	[Zip] [nvarchar](10) NULL,
	[Phone] [nvarchar](30) NULL,
	[Fax] [nvarchar](30) NULL,
	[Email] [nvarchar](75) NULL,
	[ContactPerson] [nvarchar](50) NULL,
	[Notes] [nvarchar](100) NULL,
	[CategoryCode1] [nvarchar](12) NULL,
	[CategoryCode2] [nvarchar](12) NULL,
	[CategoryCode3] [nvarchar](12) NULL,
	[CustomerStatus] [tinyint] NULL,
	[SalesMode] [tinyint] NULL,
	[PaymentType] [tinyint] NULL,
	[CustomerPricingKey] [nvarchar](50) NULL,
	[TotalCreditLimit] [float] NULL,
	[TotalBalanceDue] [float] NULL,
	[IsTaxable] [tinyint] NULL,
	[TaxID] [nchar](5) NULL,
	[HierarchyCode] [nvarchar](50) NULL,
	[TerritoryHierarchy] [nvarchar](100) NULL,
	[SurveyKey] [nvarchar](24) NULL,
	[DateofBirth] [datetime] NULL,
	[IDNumber] [nvarchar](50) NULL,
	[TINNumber] [nvarchar](50) NULL,
	[UploadFlag] [nvarchar](1) NULL
)
GO
IF EXISTS (SELECT * FROM sys.objects WHERE NAME ='Export_CS2WS_PricingPlan' AND type ='U')
DROP TABLE Export_CS2WS_PricingPlan
GO
CREATE TABLE Export_CS2WS_PricingPlan (
	[TenantCode] [nvarchar](25) NULL,
	[PricingCode] [nvarchar](25) NULL,
	[PricingDescription] [nvarchar](25) NULL,
	[StartDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[ItemCode] [nvarchar](100) NULL,
	[UnitsOfMeasure] [nvarchar](20) NULL,
	[DebitPrice] [float] NULL,
	[CreditPrice] [float] NULL,
	[DamagePrice] [float] NULL,
	[UploadFlag] [varchar](1) NULL
)
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_Export_CS2WS_Product' AND TYPE ='P')
DROP PROCEDURE Proc_Export_CS2WS_Product
GO
/*
begin tran
delete FROM WSMasterExportUploadTrack  
exec Proc_Export_CS2WS_Product '1'
select * from Export_CS2WS_Product where ItemCode  ='100901301091443024144pkt1005n'
-- SELECT * FROM WSMasterExportUploadTrack  
rollback tran
*/
CREATE PROCEDURE Proc_Export_CS2WS_Product
(
	@SalRpCode varchar(50)
)
AS
/*******************************************************************************************
* PROCEDURE		: Proc_Export_CS2WS_Product
* PURPOSE		: To Export Product details to the PDA Intermediate Database
* CREATED		: S.Moorthi
* CREATED DATE	: 06/08/2018
* MODIFIED		:
* DATE      AUTHOR     DESCRIPTION
*****************************************************************************************************
* DATE         AUTHOR       CR/BZ	   USER STORY ID   DESCRIPTION                         
*****************************************************************************************************
  04/08/2018   S.Moorthi    CR         CRCRSTPAR0017   SFA-Upload-Download Integration --Product
  18-12-2019   M lakshman   SR         ILCRSTPAR7077   while uploading product batch values zero prices not upload to SFA.
********************************************************************************************/
BEGIN
DECLARE @DistCode NVARCHAR(40)
DECLARE @Prdid AS int
DECLARE @Prdbatid AS int
	DELETE FROM Export_CS2WS_Product WHERE UploadFlag='Y'
	SELECT @DistCode = DistributorCode FROM Distributor
	
	CREATE TABLE #Export_CS2WS_Product
	(
			PrdID				[Bigint],
			TenantCode			[nvarchar](12)COLLATE DATABASE_DEFAULT,
			ItemCode			[nvarchar](50)COLLATE DATABASE_DEFAULT,
			UnitsOfMeasure		[nvarchar](20)COLLATE DATABASE_DEFAULT,
			EANNumber			[nvarchar](18)COLLATE DATABASE_DEFAULT,
			ItemTypeCode		[Tinyint],
			ItemDescription		[nvarchar](100) COLLATE DATABASE_DEFAULT,
			ShortDescription	[nvarchar](50) COLLATE DATABASE_DEFAULT,
			DivisionCode		[nvarchar](12) COLLATE DATABASE_DEFAULT,	
			IsBUOM				[Tinyint],	
			Numerator			[Smallint],
			Denominator			[Smallint],
			[Weight]			[Float],
			MRP					[Float],
			DefaultDebitPrice	[Float],
			DefaultCreditPrice	[Float],
			DefaultDamagePrice	[Float],
			ChangeLimit			[Float],
			CodeDateFormat		[Tinyint],
			ItemShelfLife		[Smallint],
			IsActive			[Tinyint],
			ContributionMargin	[Float],
			IsBatchManaged		[Tinyint],
			HierarchyCode		[nvarchar](50) COLLATE DATABASE_DEFAULT,
			TaxCode				[Float],
			HSNCode				[nvarchar](12)COLLATE DATABASE_DEFAULT
	)
	
	--DATA UPLOAD ALL UOMS LINE WISE
	INSERT INTO #Export_CS2WS_Product(PrdID,TenantCode,ItemCode,UnitsOfMeasure,EANNumber,ItemTypeCode,ItemDescription,
	ShortDescription,DivisionCode,IsBUOM,Numerator,Denominator,[Weight],MRP,DefaultDebitPrice,DefaultCreditPrice,DefaultDamagePrice,
	ChangeLimit,CodeDateFormat,ItemShelfLife,IsActive,ContributionMargin,IsBatchManaged,HierarchyCode,HSNCode,TaxCode)
	SELECT DISTINCT P.PrdID,@DistCode as TenantCode,PrdCCode,UM.UomCode,P.EANCode,1 ItemTypeCode,
	P.PrdName,'' PrdShrtName,'DD' as DivisionCode,CASE WHEN UG.BaseUom='Y' THEN 1 ELSE 0 END IsBUOM,UG.ConversionFactor Numerator,1 Denominator,ISNULL(P.PrdWgt,0) as PrdWgt,
	CAST(0 AS numeric(18,2)) AS MRP,CAST(0 AS numeric(18,2)) AS DefaultDebitPrice,CAST(0 AS numeric(18,2)) AS DefaultCreditPrice,
	CAST(0 AS numeric(18,2))AS DefaultDamagePrice,0 ChangeLimit,0 CodeDateFormat,PrdShelfLife ItemShelfLife,
	ISNULL(P.PrdStatus,0) AS PrdStatus,0 ContributionMargin,0 IsBatchManaged,'' HierarchyCode,'' HSNCode,0
	FROM Product P (NOLOCK)
	INNER JOIN Fn_SFAProductToSend() PB ON P.PrdId=PB.PrdId 
	INNER JOIN UomGroup UG ON P.UomGroupId = UG.UomGroupID
	INNER JOIN UomMaster UM ON UM.UomId=UG.UomId 
	INNER JOIN TaxGroupSetting TG ON P.TaxGroupId = TG.TaxGroupId
	--WHERE PrdStatus = 1 --AND Publish = 1
	--and NOT EXISTS (SELECT * FROM WSMasterExportUploadTrack M WHERE M.MasterCode = P.PrdCCode AND M.[Status]=P.PrdStatus AND M.ProcessName='Product') 	
		
	---Data Upload based on UOMGROUP
	--SELECT DISTINCT P.PrdID,@DistCode as TenantCode,PrdCCode,UOMgroupCode,P.EANCode,1 ItemTypeCode,
	--P.PrdName,'' PrdShrtName,'DD' as DivisionCode,1 IsBUOM,1 Numerator,1 Denominator,ISNULL(P.PrdWgt,0) as PrdWgt,
	--CAST(0 AS numeric(18,2)) AS MRP,CAST(0 AS numeric(18,2)) AS DefaultDebitPrice,CAST(0 AS numeric(18,2)) AS DefaultCreditPrice,
	--CAST(0 AS numeric(18,2))AS DefaultDamagePrice,0 ChangeLimit,0 CodeDateFormat,PrdShelfLife ItemShelfLife,
	--ISNULL(P.PrdStatus,0) AS PrdStatus,0 ContributionMargin,0 IsBatchManaged,'' HierarchyCode,'' HSNCode
	--FROM Product P
	--INNER JOIN UomGroup UG ON P.UomGroupId = UG.UomGroupID
	--INNER JOIN TaxGroupSetting TG ON P.TaxGroupId = TG.TaxGroupId
	--WHERE PrdStatus = 1 --AND Publish = 1
	
	SELECT DISTINCT Prdbatid INTO #FreeBatch FROM ProductBatchDetails(NOLOCK) GROUP BY Prdbatid HAVING SUM(PrdBatDetailValue)=0
	
	---MRP AND Selling Rate
	SELECT A.PrdID,Max(PB.PrdBatId) AS PrdBatId	INTO #TempProductBatch 
	FROM #Export_CS2WS_Product A 
	INNER JOIN ProductBatch PB (NOLOCK) ON A.PrdID=PB.PRDID AND PB.PrdbatId NOT IN(Select Prdbatid FROM #FreeBatch)
	WHERE  PrdBatCode <> 'Sample Batch' GROUP BY A.PrdID

	SELECT DISTINCT P.PrdID,PB.PrdBatId,B.PrdBatDetailValue AS MRP,B1.PrdBatDetailValue as SellRate 
	INTO #TempPriceDt
	FROM Product P
	INNER JOIN ProductBatch PB ON P.PrdID = PB.PrdID	
	INNER JOIN #TempProductBatch PB1 ON P.PrdID = PB1.PrdID AND PB.PrdBatId=PB1.PrdBatId AND PB.PrdID = PB1.PrdID
	INNER JOIN ProductBatchDetails B (NOLOCK) ON PB.PrdBatId = B.PrdBatID AND B.DefaultPrice=1
	INNER JOIN BatchCreation C (NOLOCK) ON C.BatchSeqId = PB.BatchSeqId AND B.SlNo = C.SlNo AND C.MRP = 1 
	INNER JOIN ProductBatchDetails B1 (NOLOCK) ON PB.PrdBatId = B1.PrdBatID AND B1.DefaultPrice=1  
	INNER JOIN BatchCreation C1 (NOLOCK) ON C1.BatchSeqId = PB.BatchSeqId AND B1.SlNo = C1.SlNo AND C1.SelRte = 1 
	WHERE PB.PrdbatId NOT IN(Select Prdbatid FROM #FreeBatch)AND B1.PrdbatId NOT IN(Select Prdbatid FROM #FreeBatch)
	ORDER BY P.PrdId
	
	UPDATE A SET A.MRP=B.MRP,A.DefaultCreditPrice=B.SellRate,A.DefaultDebitPrice=B.SellRate,A.DefaultDamagePrice=B.SellRate 
	FROM #Export_CS2WS_Product A 
	INNER JOIN #TempPriceDt B ON A.PrdID=B.PrdId 
	
	---	 Product HierarChy Code/Flavor Code
	UPDATE A SET A.HierarchyCode=ISNULL(B.Flavor_Code,'')
	FROM #Export_CS2WS_Product A 
	INNER JOIN TBL_GR_BUILD_PH B ON A.PrdID=B.PrdId 
	
	--Product HSN Code
	UPDATE D SET D.HSNCode=ISNULL(C.ColumnValue,'')  FROM UdcHD A (NOLOCK)
	INNER JOIN UdcMaster B(NOLOCK) ON A.MasterId=B.MasterId 
	INNER JOIN UdcDetails C(NOLOCK) ON C.UdcMasterId=B.UdcMasterId AND C.MasterId=B.MasterId AND C.MasterId=A.MasterId 
	INNER JOIN #Export_CS2WS_Product D ON D.PrdID=C.MasterRecordId 
	WHERE A.MasterName='Product Master' AND B.ColumnName='HSN Code'
	
	 TRUNCATE TABLE ProductBatchTaxPercent  
	 
	 DECLARE Cur_CalculateTax CURSOR   
	 FOR SELECT DISTINCT PrdId,PrdBatID FROM #TEMPProductbatch    
	 OPEN Cur_CalculateTax   
	 FETCH NEXT FROM Cur_CalculateTax INTO @Prdid,@Prdbatid      
	 WHILE @@FETCH_STATUS = 0          
	 BEGIN     
	  EXEC Proc_TaxCalCulation @Prdid,@Prdbatid   
	 FETCH NEXT FROM Cur_CalculateTax INTO @Prdid,@Prdbatid            
	 END          
	 CLOSE Cur_CalculateTax          
	 DEALLOCATE Cur_CalculateTax  
	 
	 UPDATE A SET TAXCode=b.TaxPercentage FROM #Export_CS2WS_Product A 
	 INNER JOIN ProductBatchTaxPercent B ON A.PrdID=b.PrdId 
	
	DELETE FROM #Export_CS2WS_Product where MRP =0 
	
	INSERT INTO Export_CS2WS_Product(TenantCode,ItemCode,UnitsOfMeasure,EANNumber,ItemTypeCode,ItemDescription,
	ShortDescription,DivisionCode,IsBUOM,Numerator,Denominator,[Weight],MRP,DefaultDebitPrice,DefaultCreditPrice,DefaultDamagePrice,
	ChangeLimit,CodeDateFormat,ItemShelfLife,IsActive,ContributionMargin,IsBatchManaged,HierarchyCode,TaxCode,HSNCode,UploadFlag)
	SELECT TenantCode,ItemCode,UnitsOfMeasure,EANNumber,ItemTypeCode,ItemDescription,
	ShortDescription,DivisionCode,IsBUOM,Numerator,Denominator,[Weight],MRP,DefaultDebitPrice,DefaultCreditPrice,DefaultDamagePrice,
	ChangeLimit,CodeDateFormat,ItemShelfLife,IsActive,ContributionMargin,IsBatchManaged,HierarchyCode,TaxCode,HSNCode,'N' UploadFlag 
	FROM #Export_CS2WS_Product P
	WHERE NOT EXISTS (SELECT * FROM WSMasterExportUploadTrack M WHERE M.MasterCode = P.ItemCode AND M.[Status]=P.IsActive 
	AND M.Reference1=P.TaxCode AND M.Reference2=P.HierarchyCode  AND  M.Reference3=P.UnitsOfMeasure  AND  M.Ref4Value=P.DefaultDebitPrice 
	AND M.ProcessName='Product')
	AND P.MRP <>'0'
	ORDER BY ItemCode
	
	DELETE FROM Export_CS2WS_Product WHERE MRP ='0'
	DELETE A FROM WSMasterExportUploadTrack A INNER JOIN Export_CS2WS_Product B ON A.MasterCode=B.ItemCode
	WHERE ProcessName='Product'
	
	INSERT INTO WSMasterExportUploadTrack(ProcessName,MasterCode,MasterName,ExportTime,Status,Reference1,Reference2,Reference3,Ref4Value)
	SELECT 'Product',ItemCode,ItemDescription,GETDATE(),IsActive,TaxCode,HierarchyCode,UnitsOfMeasure,DefaultDebitPrice FROM Export_CS2WS_Product WHERE UploadFlag='N'
	
	
	SELECT DISTINCT 
			TenantCode,
			ItemCode,
			UnitsOfMeasure,
			EANNumber,
			ItemTypeCode,
			ItemDescription,
			ShortDescription,
			DivisionCode,  
			IsBUOM,
			Numerator,
			Denominator,
			[Weight],
			MRP,
			DefaultDebitPrice,
			DefaultCreditPrice,
			DefaultDamagePrice,
			ChangeLimit,
			CodeDateFormat,
			ItemShelfLife,
			IsActive,
			ContributionMargin,
			IsBatchManaged,
			HierarchyCode,
			TaxCode,
			HSNCode
		FROM Export_CS2WS_Product WITH (NOLOCK) 
	
	
	
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_Cn2Cs_PurchaseReceipt' AND Type ='P')
DROP PROCEDURE Proc_Cn2Cs_PurchaseReceipt
GO
/*    
BEGIN TRANSACTION   
EXEC Proc_Cn2Cs_PurchaseReceipt 0 
select *from ETLTempPurchaseReceipt --WHERE DownLoadStatus=0
select *from etltemppurchasereceiptproduct where cmpinvno in(SELECT CmpInvNo FROM ETLTempPurchaseReceipt  WHERE DownLoadStatus=0)
SELECT * FROM ETLTempPurchaseReceiptClaimScheme 
ROLLBACK TRANSACTION    
*/    
CREATE PROCEDURE Proc_Cn2Cs_PurchaseReceipt
(    
 @Po_ErrNo INT OUTPUT    
)    
AS    
/***********************************************************    
* PROCEDURE : Proc_Cn2Cs_PurchaseReceipt    
* PURPOSE : To Insert the records FROM Console into Temp Tables    
* SCREEN : Console Integration-PurchaseReceipt    
* CREATED BY: Nandakumar R.G On 03-05-2010    
* MODIFIED :    
* DATE      AUTHOR     DESCRIPTION    
14/08/2013 Murugan.R Logistic Material Management    
* {date} {developer}  {brief modIFication description}    
* DATE       AUTHOR     CR/BZ	USER STORY ID           DESCRIPTION                         
***************************************************************************************************
29-09-2018  Lakshman M	 SR     ILCRSTPAR2251         Purchase backup date validation included from CS As per request 5 days configuration .
04-10-2018  lakshman M   BZ     ILCRSTPAR2285         purchase downloaded status validation added from CS.
28-01-2019  Lakshman M	 SR     ILCRSTPAR3256         Purchase backup date validation increased from CS As per request 10 days configuration .
05-03-2019  Lakshman M	 SR     ILCRSTPAR3638         Purchase backup date validation decreased from CS As per request 7 days only configuration.
19-10-2019  Lakshman M   SR     ILCRSTPAR6350         Purchase process trace validation included for one month date Range current month less than 30 days.
14-01-2020  Lakshman M	 SR     ILCRSTPAR7425         Purchase backup date validation increased from CS As per request 20 days only configuration.
***************************************************************************************************/  
SET NOCOUNT ON    
BEGIN    
 -- For Clearing the Prking/Temp Table -----     
 ---------------->  Added by Lakshman M on 29/09/2018  <-------------------
 DECLARE @FROMDATE AS Datetime
 DECLARE @TodayDt AS datetime
 SELECT @FROMDATE = cast(DATEADD(DAY, -20, GETDATE()) AS DATETIME)
 SELECT @FROMDATE=CONVERT(VARCHAR(11), @FROMDATE, 121)
 SELECT @TodayDt= CAST(convert(varchar,getdate()) AS DATETIME)
 SELECT @TodayDt= CONVERT(VARCHAR(11), @TodayDt, 121)
 SELECT * INTO #ETLTempPurchaseReceipt_temp FROM ETLTempPurchaseReceipt WHERE InvDate between CONVERT(VARCHAR(11), @FROMDATE, 121) and CONVERT(VARCHAR(11), @TodayDt, 121)
 UPDATE A SET A.downloadstatus = 0 FROM ETLTempPurchaseReceipt A INNER JOIN #ETLTempPurchaseReceipt_temp B ON A.CmpInvNo =B.CmpInvNo
 UPDATE A SET A.downloadstatus = 1 from ETLTempPurchaseReceipt A where CmpInvNo in(select CmpInvNo from PurchaseReceipt)   ---> added By Lakshman M PMS ID: ILCRSTPAR2285 
 SELECT * INTO #ETLTempPurchaseReceipt_temp1 FROM ETLTempPurchaseReceipt WHERE InvDate < CONVERT(VARCHAR(11),@FROMDATE, 121)
 Delete A from ETLTempPurchaseReceipt A INNER JOIN #ETLTempPurchaseReceipt_temp1 B ON A.CmpInvNo =B.CmpInvNo  
 Delete A from ETLTempPurchaseReceiptproduct A INNER JOIN #ETLTempPurchaseReceipt_temp1 B ON A.CmpInvNo =B.CmpInvNo
 Delete A from ETLTempPurchaseReceiptClaimScheme A INNER JOIN #ETLTempPurchaseReceipt_temp1 B ON A.CmpInvNo =B.CmpInvNo
 Delete A from ETLTempPurchaseReceiptClaimScheme A where A.CmpInvNo not in(select B.CmpInvNo from #ETLTempPurchaseReceipt_temp1 B)
 ----------------- Added by lakshman M Dated ON dated ON 19-10-2019 PMS ID: ILCRSTPAR6350 
INSERT INTO Cn2Cs_Prk_BLPurchaseReceipt_Trace(
DistCode,CompInvNo,CompInvDate,NetValue,TotalTax,LessDiscount,LessSchemeAmount,SupplierCode,CompanyName,TransporterName,LRNO,LRDate,WayBillNo,ProductCode,UOMCode,
PurQty,CashDiscRs,CashDiscPer,LineLevelAmount,BatchNo,ManufactureDate,ExpiryDate,MRP,ListPriceNSP,PurchaseTaxValue,PurchaseDiscount,PurchaseRate,SellingRate,SellingRateAfterTAX,
SellingRateAfterVAT,FreightCharges,VatBatch,VATTaxValue,Status,FreeSchemeFlag,SchemeRefrNo,BundleDeal,CreatedDate,DownloadFlag,TaxType,PurDownloadedDate )
SELECT DistCode,CompInvNo,CompInvDate,NetValue,TotalTax,LessDiscount,LessSchemeAmount,SupplierCode,CompanyName,TransporterName,LRNO,LRDate,WayBillNo,ProductCode,UOMCode,
PurQty,CashDiscRs,CashDiscPer,LineLevelAmount,BatchNo,ManufactureDate,ExpiryDate,MRP,ListPriceNSP,PurchaseTaxValue,PurchaseDiscount,PurchaseRate,SellingRate,SellingRateAfterTAX,
SellingRateAfterVAT,FreightCharges,VatBatch,VATTaxValue,Status,FreeSchemeFlag,SchemeRefrNo,BundleDeal,CreatedDate,DownloadFlag,TaxType,GETDATE() FROM Cn2Cs_Prk_BLPurchaseReceipt
DELETE FROM Cn2Cs_Prk_BLPurchaseReceipt_Trace WHERE CONVERT(varchar(12),compinvdate,121) < convert(varchar(12),(cast(DATEADD(DAY, -15, GETDATE()) AS DATETIME)),121)
---------------->  Till Here  <----------------------
 DELETE FROM ETLTempPurchaseReceiptOtherCharges WHERE CmpInvNo in    
 (SELECT CmpInvNo FROM ETLTempPurchaseReceipt  WHERE DownLoadStatus=1)    
 DELETE FROM ETLTempPurchaseReceiptClaimScheme WHERE CmpInvNo in    
 (SELECT CmpInvNo FROM ETLTempPurchaseReceipt  WHERE DownLoadStatus=1)     
 DELETE FROM ETLTempPurchaseReceiptPrdLineDt WHERE CmpInvNo in    
 (SELECT CmpInvNo FROM ETLTempPurchaseReceipt  WHERE DownLoadStatus=1)    
 DELETE FROM ETLTempPurchaseReceiptProduct WHERE CmpInvNo in    
 (SELECT CmpInvNo FROM ETLTempPurchaseReceipt  WHERE DownLoadStatus=1)    
 DELETE FROM ETLTempPurchaseReceiptOtherCharges WHERE CmpInvNo in     
 (SELECT CmpInvNo FROM ETLTempPurchaseReceipt  WHERE DownLoadStatus=1)     
 DELETE FROM Etl_LogisticMaterialStock WHERE InvoiceNumber IN     
 (SELECT CmpInvNo FROM ETLTempPurchaseReceipt  WHERE DownLoadStatus=1)    
 DELETE FROM ETLTempPurchaseReceipt  WHERE DownLoadStatus=1    
 DELETE FROM ETLTempPurchaseReceiptCrDbAdjustments WHERE CmpInvNo     
 IN (SELECT CmpInvNo FROM PurchaseReceipt WHERE Status = 1) AND DownloadStatus = 1    
 TRUNCATE TABLE ETL_Prk_PurchaseReceiptPrdDt    
 TRUNCATE TABLE ETL_Prk_PurchaseReceiptClaim    
 TRUNCATE TABLE ETL_Prk_PurchaseReceipt    
 TRUNCATE TABLE ETLTempPurchaseReceiptPrdLineDt    
 TRUNCATE TABLE ETL_Prk_PurchaseReceiptPrdDt    
 TRUNCATE TABLE ETL_Prk_PurchaseReceiptOtherCharges    
 TRUNCATE TABLE ETL_Prk_PurchaseReceiptCrDbAdjustments  
 --------------------------------------    
 DECLARE @ErrStatus INT    
 DECLARE @BatchNo   NVARCHAR(200)    
 DECLARE @ProductCode  NVARCHAR(100)    
 DECLARE @ListPrice   NUMERIC(38,6)    
 DECLARE @FreeSchemeFlag  NVARCHAR(5)    
 DECLARE @CompInvNo   NVARCHAR(25)    
 DECLARE @UOMCode   NVARCHAR(25)    
 DECLARE @Qty    INT    
 DECLARE @PurchaseDiscount NUMERIC(38,6)    
 DECLARE @VATTaxValue  NUMERIC(38,6)    
 DECLARE @SchemeRefrNo  NVARCHAR(25)    
 DECLARE @SupplierCode  NVARCHAR(30)    
 DECLARE @TransporterCode NVARCHAR(30)    
 DECLARE @POUOM    INT    
 DECLARE @RowId    INT    
 DECLARE @LineLvlAmt   NUMERIC(38,6)    
 DECLARE @QtyInKg   NUMERIC(38,6)    
 DECLARE @ExistCompInvNo  NVARCHAR(25)    
 DECLARE @FreightCharges  NUMERIC(38,6)    
 SET @RowId=1    
 --->Added By Nanda on 17/09/2009    
 IF EXISTS (SELECT * FROM DBO.SysObjects WHERE ID = OBJECT_ID(N'InvToAvoid')    
 AND OBJECTPROPERTY(ID, N'IsUserTable') = 1)    
 BEGIN    
  DROP TABLE InvToAvoid     
 END    
 CREATE TABLE InvToAvoid    
 (    
  CmpInvNo NVARCHAR(50)    
 )    
 IF EXISTS (SELECT DISTINCT CompInvNo,SupplierCode FROM Cn2Cs_Prk_BLPurchaseReceipt  
 WHERE UPPER(ISNULL(TaxType,'VAT')) NOT IN ('VAT','GST'))  
 BEGIN  
  INSERT INTO InvToAvoid (CmpInvNo)  
  SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt  
  WHERE UPPER(ISNULL(TaxType,'VAT')) NOT IN ('VAT','GST')  
  INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)  
  SELECT DISTINCT 1,'Purchase Receipt','Tax Type','Purchase Tax Type should be VAT or GST '+CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt  
  WHERE UPPER(ISNULL(TaxType,'VAT')) NOT IN ('VAT','GST')  
 END  
 IF EXISTS(SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt    
 WHERE CompInvNo IN (SELECT CmpInvNo FROM PurchaseReceipt))    
 BEGIN    
  INSERT INTO InvToAvoid(CmpInvNo)    
  SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt    
  WHERE CompInvNo IN (SELECT CmpInvNo FROM PurchaseReceipt)    
  INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)    
  SELECT DISTINCT 1,'Purchase Receipt','CmpInvNo','Company Invoice No:'+CompInvNo+' already Available' FROM Cn2Cs_Prk_BLPurchaseReceipt    
  WHERE CompInvNo IN (SELECT CmpInvNo FROM PurchaseReceipt)    
 END    
 IF EXISTS(SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt    
 WHERE CompInvNo IN (SELECT CmpInvNo FROM ETLTempPurchaseReceipt))    
 BEGIN    
  INSERT INTO InvToAvoid(CmpInvNo)    
  SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt    
  WHERE CompInvNo IN (SELECT CmpInvNo FROM ETLTempPurchaseReceipt)    
  INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)    
  SELECT DISTINCT 1,'Purchase Receipt','CmpInvNo','Company Invoice No:'+CompInvNo+' already downloaded and ready for invoicing' FROM Cn2Cs_Prk_BLPurchaseReceipt    
  WHERE CompInvNo IN (SELECT CmpInvNo FROM ETLTempPurchaseReceipt)    
 END    
 IF EXISTS(SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt    
 WHERE ProductCode NOT IN (SELECT PrdCCode FROM Product))    
 BEGIN    
  INSERT INTO InvToAvoid(CmpInvNo)    
  SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt    
 WHERE ProductCode NOT IN (SELECT PrdCCode FROM Product)    
  INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)    
  SELECT DISTINCT 1,'Purchase Receipt','Product','Product:'+ProductCode+' Not Available for Invoice:'+CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt    
  WHERE ProductCode NOT IN (SELECT PrdCCode FROM Product)    
  --->Added By Nanda on 05/05/2010    
  INSERT INTO ReDownloadRequest(DistCode,Process,RefNo,Download,PrdCCode,PrdBatCode,UploadFlag)    
  SELECT DISTINCT DistCode,'Purchase',CompInvNo,'Product',ProductCode,'','N' FROM Cn2Cs_Prk_BLPurchaseReceipt    
  WHERE ProductCode NOT IN (SELECT PrdCCode FROM Product)    
  --->Till Here        
 END    
 IF EXISTS(SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt    
 WHERE ProductCode+'~'+BatchNo    
 NOT IN    
 (SELECT P.PrdCCode+'~'+PB.PrdBatCode FROM Product P,ProductBatch PB WHERE P.PrdId=PB.PrdId))    
 BEGIN    
  INSERT INTO InvToAvoid(CmpInvNo)    
  SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt    
  WHERE ProductCode+'~'+BatchNo    
  NOT IN (SELECT P.PrdCCode+'~'+PB.PrdBatCode FROM Product P,ProductBatch PB WHERE P.PrdId=PB.PrdId)    
  INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)    
  SELECT DISTINCT 1,'Purchase Receipt','Product Batch','Product Batch:'+BatchNo+'Not Available for Product:'+ProductCode+' in Invoice:'+CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt    
  WHERE ProductCode+'~'+BatchNo    
  NOT IN    
  (SELECT P.PrdCCode+'~'+PB.PrdBatCode FROM Product P,ProductBatch PB WHERE P.PrdId=PB.PrdId)    
  --->Added By Nanda on 05/05/2010    
  INSERT INTO ReDownloadRequest(DistCode,Process,RefNo,Download,PrdCCode,PrdBatCode,UploadFlag)    
  SELECT DISTINCT DistCode,'Purchase',CompInvNo,'Product Batch',ProductCode,BatchNo,'N' FROM Cn2Cs_Prk_BLPurchaseReceipt    
  WHERE ProductCode+'~'+BatchNo    
  NOT IN (SELECT P.PrdCCode+'~'+PB.PrdBatCode FROM Product P,ProductBatch PB WHERE P.PrdId=PB.PrdId)    
  --->Till Here    
 END    
 --Supplier Credit Note Validations     
 IF EXISTS(SELECT DISTINCT [CompInvNo] FROM Cn2Cs_Prk_PurchaseReceiptAdjustments WHERE [RefNo] NOT IN    
 (SELECT DISTINCT PostedRefNo FROM CreditNoteSupplier WITH (NOLOCK)) AND [AdjType] = 'Credit')    
 BEGIN    
  INSERT INTO InvToAvoid(CmpInvNo)    
        SELECT DISTINCT [CompInvNo] FROM Cn2Cs_Prk_PurchaseReceiptAdjustments WHERE [RefNo] NOT IN    
    (SELECT DISTINCT PostedRefNo FROM CreditNoteSupplier WITH (NOLOCK)) AND [AdjType] = 'Credit'    
  INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)    
  SELECT DISTINCT 1,'CreditNoteSupplier','PostedRefNo','Supplier Credit Note Not Available'+[CompInvNo]    
  FROM Cn2Cs_Prk_PurchaseReceiptAdjustments WHERE [RefNo] NOT IN     
  (SELECT DISTINCT PostedRefNo FROM CreditNoteSupplier WITH (NOLOCK)) AND [AdjType] = 'Credit'      
 END    
 --Supplier Debit Note Validations     
 IF EXISTS(SELECT DISTINCT [CompInvNo] FROM Cn2Cs_Prk_PurchaseReceiptAdjustments WHERE [RefNo] NOT IN    
 (SELECT DISTINCT PostedRefNo FROM DebitNoteSupplier WITH (NOLOCK)) AND [AdjType] = 'Debit')    
 BEGIN    
  INSERT INTO InvToAvoid(CmpInvNo)    
        SELECT DISTINCT [CompInvNo] FROM Cn2Cs_Prk_PurchaseReceiptAdjustments WHERE [RefNo] NOT IN    
    (SELECT DISTINCT PostedRefNo FROM DebitNoteSupplier WITH (NOLOCK)) AND [AdjType] = 'Debit'    
  INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)    
  SELECT DISTINCT 1,'DebitNoteSupplier','PostedRefNo','Supplier Debit Note Not Available'+[CompInvNo]    
  FROM Cn2Cs_Prk_PurchaseReceiptAdjustments WHERE [RefNo] NOT IN     
  (SELECT DISTINCT PostedRefNo FROM DebitNoteSupplier WITH (NOLOCK)) AND [AdjType] = 'Debit'      
 END    
 IF EXISTS(SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt    
 WHERE CompInvDate>GETDATE())     
 BEGIN    
  INSERT INTO InvToAvoid(CmpInvNo)    
  SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt    
  WHERE CompInvDate>GETDATE()    
  INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)    
  SELECT DISTINCT 1,'Purchase Receipt','Invoice Date','Invoice Date:'+CAST(CompInvDate AS NVARCHAR(10))+' is greater than current date in Invoice:'+CompInvNo     
  FROM Cn2Cs_Prk_BLPurchaseReceipt WITH (NOLOCK) WHERE CompInvDate>GETDATE()    
 END    
--Commented and Added By Mohana.S PMS NO: DCRSTKAL0012    
 --IF EXISTS(SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt    
 --WHERE UOMCode NOT IN (SELECT UOMCode FROM UOMMaster WITH (NOLOCK)))     
 --BEGIN    
 -- INSERT INTO InvToAvoid(CmpInvNo)    
 -- SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt    
 -- WHERE UOMCode NOT IN (SELECT UOMCode FROM UOMMaster WITH (NOLOCK))    
 -- INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)    
 -- SELECT DISTINCT 1,'Purchase Receipt','Invoice UOM','UOM:'+UOMCode+' is not available for Invoice:'+CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt    
 -- WHERE UOMCode NOT IN (SELECT UOMCode FROM UOMMaster WITH (NOLOCK))    
 --END    
 IF EXISTS (SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt WHERE PRODUCTCODE+'~'+UomCode NOT IN (SELECT PrdCCode+'~'+UomCode      
 FROM UomGroup UG INNER JOIN UomMaster UM ON UG.UomId =UM.UomId INNER JOIN Product P ON P.UomGroupId = UG.UomGroupId))    
 BEGIN    
   INSERT INTO InvToAvoid(CmpInvNo)    
   SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt WHERE PRODUCTCODE+'~'+UomCode NOT IN (SELECT PrdCCode+'~'+UomCode      
   FROM UomGroup UG INNER JOIN UomMaster UM ON UG.UomId =UM.UomId INNER JOIN Product P ON P.UomGroupId = UG.UomGroupId)    
   INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)    
   SELECT DISTINCT 1,'Purchase Receipt',PRODUCTCODE+'Product UOM','UOMCode:'+UOMCode+' is not available for Invoice:'+CompInvNo     
   FROM Cn2Cs_Prk_BLPurchaseReceipt WHERE PRODUCTCODE+'~'+UomCode  NOT IN (SELECT PrdCCode+'~'+UomCode      
   FROM UomGroup UG INNER JOIN UomMaster UM ON UG.UomId =UM.UomId INNER JOIN Product P ON P.UomGroupId = UG.UomGroupId)    
 END     
 IF EXISTS(SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt    
 WHERE SupplierCode NOT IN (SELECT SpmCode FROM Supplier WITH (NOLOCK)))     
 BEGIN    
  INSERT INTO InvToAvoid(CmpInvNo)    
  SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt    
  WHERE SupplierCode NOT IN (SELECT SpmCode FROM Supplier WITH (NOLOCK))    
  INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)    
  SELECT DISTINCT 1,'Purchase Receipt','Invoice Supplier','Supplier:'+SupplierCode+' is not available for Invoice:'+CompInvNo    
  FROM Cn2Cs_Prk_BLPurchaseReceipt WITH (NOLOCK) WHERE SupplierCode NOT IN (SELECT SpmCode FROM Supplier WITH (NOLOCK))    
 END     
 --->Till Here    
 -- Eliminated Duplicate records insertion on 02/03/2015  
 SET @ExistCompInvNo=0    
 DECLARE Cur_Purchase CURSOR    
 FOR    
 SELECT DISTINCT ProductCode,BatchNo,ListPriceNSP,    
 FreeSchemeFlag,CompInvNo,UOMCode,PurQty,PurchaseDiscount,VATTaxValue,SchemeRefrNo,LineLevelAmount,CashDiscRs,0 AS BundleDeal,    
 ISNULL(FreightCharges,0) AS FreightCharges    
 FROM Cn2Cs_Prk_BLPurchaseReceipt WHERE [DownLoadFlag]='D' AND CompInvNo NOT IN(SELECT CmpInvNo FROM InvToAvoid)    
 ORDER BY CompInvNo,ProductCode,BatchNo,ListPriceNSP,    
 FreeSchemeFlag,UOMCode,PurQty,PurchaseDiscount,VATTaxValue,SchemeRefrNo,LineLevelAmount,CashDiscRs,FreightCharges    
 OPEN Cur_Purchase    
 FETCH NEXT FROM Cur_Purchase INTO @ProductCode,@BatchNo,@ListPrice,    
 @FreeSchemeFlag,@CompInvNo,@UOMCode,@Qty,    
 @PurchaseDiscount,@VATTaxValue,@SchemeRefrNo,@LineLvlAmt,@QtyInKg,@RowId,@FreightCharges     
 WHILE @@FETCH_STATUS = 0    
 BEGIN    
--  IF @ExistCompInvNo<>@CompInvNo    
--  BEGIN    
--   SET @ExistCompInvNo=@CompInvNo    
--   SET @RowId=2    
--  END    
  --To insert into ETL_Prk_PurchaseReceiptPrdDt    
  IF(@FreeSchemeFlag='0')    
  BEGIN    
   INSERT INTO  ETL_Prk_PurchaseReceiptPrdDt([Company Invoice No],[RowId],[Product Code],[Batch Code],    
   [PO UOM],[PO Qty],[UOM],[Invoice Qty],[Purchase Rate],[Gross],[Discount In Amount],[Tax In Amount],[Net Amount],FreightCharges)    
   VALUES(@CompInvNo,@RowId,@ProductCode,@BatchNo,'',0,@UOMCode,@Qty,@ListPrice,@LineLvlAmt,    
   @PurchaseDiscount,@VATTaxValue,(@ListPrice-@PurchaseDiscount+@VATTaxValue)* @Qty,@FreightCharges)    
   INSERT INTO ETL_Prk_PurchaseReceiptPrdLineDt([Company Invoice No],[RowId],[Column Code],[Value In Amount])    
   VALUES(@CompInvNo,@RowId,'C',@PurchaseDiscount)    
   INSERT INTO ETL_Prk_PurchaseReceiptPrdLineDt([Company Invoice No],[RowId],[Column Code],[Value In Amount])    
   VALUES(@CompInvNo,@RowId,'D',@VATTaxValue)    
--   INSERT INTO ETL_Prk_PurchaseReceiptPrdLineDt([Company Invoice No],[RowId],[Column Code],[Value In Amount])    
--   VALUES(@CompInvNo,@RowId,'E',@QtyInKg)    
  END    
  --To insert into ETL_Prk_PurchaseReceiptClaim    
  IF(@FreeSchemeFlag='1')    
  BEGIN    
   INSERT INTO ETL_Prk_PurchaseReceiptClaim([Company Invoice No],[Type],[Ref No],[Product Code],    
   [Batch Code],[Qty],[Stock Type],[Amount],FreightAmt)    
   VALUES(@CompInvNo,'Offer',@SchemeRefrNo,@ProductCode,@BatchNo,@Qty,'Offer',0,@FreightCharges)    
  END    
--  SET @RowId=@RowId+1    
  FETCH NEXT FROM Cur_Purchase INTO @ProductCode,@BatchNo,@ListPrice,    
  @FreeSchemeFlag,@CompInvNo,@UOMCode,@Qty,    
  @PurchaseDiscount,@VATTaxValue,@SchemeRefrNo,@LineLvlAmt,@QtyInKg,@RowId,@FreightCharges    
 END    
 CLOSE Cur_Purchase    
 DEALLOCATE Cur_Purchase    
 --To insert into ETL_Prk_PurchaseReceipt    
 SELECT @TransporterCode=TransporterCode FROM Transporter    
 WHERE TransporterId IN(SELECT MIN(TransporterId) FROM Transporter WITH(NOLOCK))    
 IF @TransporterCode=''    
 BEGIN    
  INSERT INTO Errorlog VALUES (1,'Purchase Download','Transporter','Transporter not available')    
 END    
 INSERT INTO ETL_Prk_PurchaseReceipt([Company Code],[Supplier Code],[Company Invoice No],[PO Number],  
 [Invoice Date],[Transporter Code],[NetPayable Amount],[TaxType])  
 SELECT DISTINCT C.CmpCode,SupplierCode,P.CompInvNo,'',P.CompInvDate,@TransporterCode,P.NetValue,  
 P.TaxType  
 FROM Company C,Cn2Cs_Prk_BLPurchaseReceipt P  
 WHERE  C.DefaultCompany=1 AND DownLoadFlag='D' AND CompInvNo NOT IN(SELECT CmpInvNo FROM InvToAvoid)  
 UPDATE A SET [TaxType]='VAT' FROM ETL_Prk_PurchaseReceipt A (NOLOCK)   
 INNER JOIN Cn2Cs_Prk_BLPurchaseReceipt B (NOLOCK) ON B.CompInvNo=A.[Company Invoice No]   
 AND A.[Supplier Code]=B.SupplierCode WHERE ISNULL(A.TaxType,'')=''  
 --Added By Sathishkumar Veeramani 2013/08/13    
 --INSERT INTO ETL_Prk_PurchaseReceiptOtherCharges ([Company Invoice No],[OC Description],Amount)    
 --SELECT DISTINCT CompInvNo,'Cash Discounts' AS [OC Description],CashDiscRs FROM Cn2Cs_Prk_BLPurchaseReceipt WITH (NOLOCK)    
 --WHERE CompInvNo NOT IN(SELECT CmpInvNo FROM InvToAvoid) AND DownLoadFlag='D'    
 --Added by Sathishkumar Veeramani 2013/11/22    
 INSERT INTO ETL_Prk_PurchaseReceiptCrDbAdjustments([Company Invoice No],[Adjustment Type],[Ref No],[Amount])    
 SELECT DISTINCT CompInvNo,AdjType,RefNo,Amount FROM Cn2Cs_Prk_PurchaseReceiptAdjustments WITH (NOLOCK)    
 WHERE CompInvNo NOT IN(SELECT CmpInvNo FROM InvToAvoid) AND DownLoadFlag='D'    
 EXEC Proc_Validate_PurchaseReceipt @Po_ErrNo= @ErrStatus OUTPUT    
 IF @ErrStatus =0    
 BEGIN    
  EXEC Proc_Validate_PurchaseReceiptProduct @Po_ErrNo= @ErrStatus OUTPUT    
  IF @ErrStatus =0    
  BEGIN    
   EXEC Proc_Validate_PurchaseReceiptLineDt @Po_ErrNo= @ErrStatus OUTPUT    
   IF @ErrStatus =0    
   BEGIN    
    EXEC Proc_Validate_PurchaseReceiptClaimScheme @Po_ErrNo= @ErrStatus OUTPUT    
    IF @ErrStatus =0    
    BEGIN    
       EXEC Proc_Validate_PurchaseReceiptOtherCharges @Po_ErrNo= @ErrStatus OUTPUT    
       IF @ErrStatus =0    
       BEGIN    
           EXEC Proc_Validate_PurchaseReceiptCrDbAdjustments @Po_ErrNo= @ErrStatus OUTPUT    
           IF @ErrStatus =0    
           BEGIN    
            SET @ErrStatus=@ErrStatus    
        END        
       END        
    END    
   END    
  END    
 END    
 --Proc_Validate_PurchaseReceiptCrDbAdjustments    
 --->Added By Nanda on 17/09/2009    
 DELETE FROM ETLTempPurchaseReceipt WHERE CmpInvNo NOT IN    
 (SELECT DISTINCT CmpInvNo FROM ETLTempPurchaseReceiptProduct)    
 UPDATE Cn2Cs_Prk_BLPurchaseReceipt SET DownLoadFlag='Y'    
 WHERE CompInvNo IN (SELECT DISTINCT CmpInvNo FROM EtlTempPurchaseReceipt)    
 --->Till Here    
 SET @Po_ErrNo= @ErrStatus    
 RETURN    
END
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE NAME = 'Proc_Cs2Cn_DailySales' AND type ='P')
DROP PROCEDURE Proc_Cs2Cn_DailySales
GO
CREATE PROCEDURE Proc_Cs2Cn_DailySales
(    
 @Po_ErrNo INT OUTPUT,    
 @ServerDate DATETIME  
)
AS    
/*********************************    
* PROCEDURE  : Proc_Cs2Cn_DailySales    
* PURPOSE  : To Extract Daily Sales Details from CoreStocky to upload to Console    
* CREATED BY : Nandakumar R.G    
* CREATED DATE : 19/03/2010    
* NOTE   :    
* MODIFIED BY : LAKSHMAN M  
* MODIFIED DATE : 06/11/2017   
* PMS ID   : ICRSTPAR6569  
* PURPOSE  : Daily Sales Details from CoreStocky upload LCTR Calculation Validation changed.    
* DATE      AUTHOR     DESCRIPTION    
------------------------------------------------    
* {date} {developer}  {brief modification description}    
21/10/2014 Jisha Mathew Included Undelivered bills New Column Added BillStatus,UploadedDate     
12/12/2015 PRAVEENRAJ BHASKARAN LCTRAmount ADDED FOR CCRSTPAR0118    
09/11/2016 Gopikrishnan RtrUniqueCode Added
* DATE       AUTHOR     CR/BZ	USER STORY ID           DESCRIPTION                         
***************************************************************************************************    
09-01-2018  lakshman M   BZ     ICRSTPAR7284          LCTR Formula velidation changed (special price not consider in LCTR Value).
06-02-2017	MOHANA		 BZ     ICRSTPAR7955		  DELVIERED BILLS NOT UPLOADED PROPERLY
25-05-2019  lakshman M   BS     ILCRSTPAR4571         While uploading dat one product done in billing different uom that time LCTR amount same amount reflct in two line level
11-11-2019  Deepan       CR     CRCRSTPAR0089         Category and Value Class and channel Added
06-01-2020  Deepan       BZ 	ILCRSTPAR7329		  Category and channel modified	

*********************************/    
SET NOCOUNT ON    
BEGIN    
 DECLARE @CmpId    AS INT    
 DECLARE @DistCode As nVarchar(50)    
 DECLARE @DefCmpAlone AS INT    
 SET @Po_ErrNo=0    
 DELETE FROM Cs2Cn_Prk_DailySales WHERE UploadFlag = 'Y'    
 IF EXISTS (SELECT * FROM Cs2Cn_Prk_DailySales WHERE UploadFlag='N' AND Billstatus<=2)    
 BEGIN    
  DELETE FROM Cs2Cn_Prk_DailySales WHERE UploadFlag='N' AND Billstatus<=2    
 END    
 SELECT @DefCmpAlone=Status FROM Configuration WHERE ModuleId='BotreeUpload01' AND ModuleName='Botree Upload'    
 SELECT @DistCode = DistributorCode FROM Distributor     
 SELECT @CmpId = CmpId FROM Company WHERE DefaultCompany = 1     
 --INSERT INTO Cs2Cn_Prk_DailySales    
 --(    
 -- DistCode  ,    
 -- SalInvNo  ,    
 -- SalInvDate  ,    
 -- SalDlvDate  ,    
 -- SalInvMode  ,    
 -- SalInvType  ,    
 -- SalGrossAmt  ,    
 -- SalSplDiscAmt ,    
 -- SalSchDiscAmt ,    
 -- SalCashDiscAmt ,    
 -- SalDBDiscAmt ,    
 -- SalTaxAmt  ,    
 -- SalWDSAmt  ,    
 -- SalDbAdjAmt  ,    
 -- SalCrAdjAmt  ,    
 -- SalOnAccountAmt ,    
 -- SalMktRetAmt ,    
 -- SalReplaceAmt ,    
 -- SalOtherChargesAmt,    
 -- SalInvLevelDiscAmt,    
 -- SalTotDedn  ,    
 -- SalTotAddn  ,    
 -- SalRoundOffAmt ,    
 -- SalNetAmt  ,    
 -- LcnId   ,    
 -- LcnCode   ,    
 -- SalesmanCode ,    
 -- SalesmanName ,     
 -- SalesRouteCode ,    
 -- SalesRouteName ,    
 -- RtrId   ,    
 -- RtrCode   ,    
 -- RtrName   ,    
 -- VechName  ,    
 -- DlvBoyName  ,    
 -- DeliveryRouteCode ,     
 -- DeliveryRouteName ,     
 -- PrdCode    ,    
 -- PrdBatCde   ,    
 -- PrdQty    ,    
 -- PrdSelRateBeforeTax ,    
 -- PrdSelRateAfterTax ,    
 -- PrdFreeQty  ,    
 -- PrdGrossAmt  ,    
 -- PrdSplDiscAmt ,    
 -- PrdSchDiscAmt ,    
 -- PrdCashDiscAmt ,    
 -- PrdDBDiscAmt ,    
 -- PrdTaxAmt  ,    
 -- PrdNetAmt  ,    
 -- UploadFlag  ,    
 -- SalInvLineCount ,    
 -- SalInvLvlDiscPer,    
 -- BillStatus,    
 -- UploadedDate,    
 -- OrderRefNo,    
 -- SFAOrderRefNo,    
 -- RtrUniqueCode,
 -- CtgCode,
 -- CtgName,
 -- ValueClassCode,
 -- ValueClassName,
 -- ChannelCode,
 -- ChannelName      
 --)    
 --SELECT  @DistCode,A.SalInvNo,A.SalInvDate,A.SalDlvDate,    
 --(CASE A.BillMode WHEN 1 THEN 'Cash' ELSE 'Credit' END) AS BillMode,    
 --(CASE A.BillType WHEN 1 THEN 'Order Booking' WHEN 2 THEN 'Ready Stock' ELSE 'Van Sales' END) AS BillType,    
 --A.SalGrossAmount,A.SalSplDiscAmount,A.SalSchDiscAmount,A.SalCDAmount,A.SalDBDiscAmount,A.SalTaxAmount,    
 --A.WindowDisplayAmount,A.DBAdjAmount,A.CRAdjAmount,A.OnAccountAmount,A.MarketRetAmount,A.ReplacementDiffAmount,    
 --A.OtherCharges,A.SalInvLvlDisc AS InvLevelDiscAmt,A.TotalDeduction,A.TotalAddition,A.SalRoundOffAmt,A.SalNetAmt,A.LcnId,L.LcnCode,    
 --B.SMCode,B.SMName,C.RMCode,C.RMName,A.RtrId,R.CmpRtrCode,R.RtrName,    
 --ISNULL(E.VehicleRegNo,'') AS VehicleName,ISNULL(D.DlvBoyName,''),F.RMCode,F.RMName,H.PrdCCode,I.CmpBatCode,    
 --G.BaseQty AS SalInvQty ,G.PrdUom1EditedSelRate,G.PrdUom1EditedNetRate,G.SalManFreeQty AS SalInvFree ,    
 --G.PrdGrossAmount,G.PrdSplDiscAmount,G.PrdSchDiscAmount,    
 --G.PrdCDAmount,G.PrdDBDiscAmount,G.PrdTaxAmount,G.PrdNetAmount,    
 --'N' AS UploadFlag,0,A.SalInvLvlDiscPer,Dlvsts AS BillStatus,    
 --GETDATE(),ISNULL(O.OrderNo,''),ISNULL(O.DocRefNo,''),isnull(R.RtrUniqueCode,''),RY.CtgCode,RY.CtgName,RC.ValueClassCode,RC.ValueClassName,
 --RCY.CtgCode AS ChannelCode,RCY.CtgName As ChannelName     
 --FROM SalesInvoice A  (NOLOCK)    
 --INNER JOIN Retailer R (NOLOCK) ON A.RtrId = R.RtrId    
 --INNER JOIN SalesMan B (NOLOCK) ON A.SMID = B.SmID    
 --INNER JOIN RouteMaster C (NOLOCK) ON A.RMID = C.RMID    
 --LEFT OUTER JOIN DeliveryBoy D  (NOLOCK) ON A.DlvBoyId = D.DlvBoyId    
 --LEFT OUTER JOIN Vehicle E (NOLOCK) ON E.VehicleId = A. VehicleId    
 --INNER JOIN RouteMaster F (NOLOCK) ON A.DlvRMID = F.RMID    
 --INNER JOIN SalesInvoiceProduct G (NOLOCK) ON A.SalId = G.SalId    
 --INNER JOIN Product H (NOLOCK) ON G.PrdId = H.PrdId    
 --INNER JOIN ProductBatch I (NOLOCK) ON G.PrdBatID = I.PrdBatId AND H.PrdId=I.PrdId    
 --INNER JOIN Location L (NOLOCK) ON L.LcnId=A.LcnId  
 ----Code Added by Deepan on 11/11/2019
 --INNER JOIN RetailerValueClassMap  RM(NOLOCK) ON R.RTRID =RM.RTRID 
 --AND A.RTRValueClassId=RM.RtrValueClassId
 --INNER JOIN RetailerValueClass RC(NOLOCK) ON A.RtrValueClassId =RC.RtrClassId
 --INNER JOIN RetailerCategory RY ON RC.CtgMainId = RY.CtgMainId
 --INNER JOIN RetailerCategoryLevel RCL ON RY.CtgLevelId = RCL.CtgLevelId
 --INNER JOIN RetailerCategory RCY ON  RY.CtgLinkId=RCY.CtgMainId
 --LEFT OUTER JOIN OrderBooking O(NOLOCK) ON O.OrderNo=A.OrderKeyNo    
 --WHERE A.Upload=0 ORDER BY A.SalId   
 INSERT INTO Cs2Cn_Prk_DailySales    
 (    
  DistCode  ,    
  SalInvNo  ,    
  SalInvDate  ,    
  SalDlvDate  ,    
  SalInvMode  ,    
  SalInvType  ,    
  SalGrossAmt  ,    
  SalSplDiscAmt ,    
  SalSchDiscAmt ,    
  SalCashDiscAmt ,    
  SalDBDiscAmt ,    
  SalTaxAmt  ,    
  SalWDSAmt  ,    
  SalDbAdjAmt  ,    
  SalCrAdjAmt  ,    
  SalOnAccountAmt ,    
  SalMktRetAmt ,    
  SalReplaceAmt ,    
  SalOtherChargesAmt,    
  SalInvLevelDiscAmt,    
  SalTotDedn  ,    
  SalTotAddn  ,    
  SalRoundOffAmt ,    
  SalNetAmt  ,    
  LcnId   ,    
  LcnCode   ,    
  SalesmanCode ,    
  SalesmanName ,     
  SalesRouteCode ,    
  SalesRouteName ,    
  RtrId   ,    
  RtrCode   ,    
  RtrName   ,    
  VechName  ,    
  DlvBoyName  ,    
  DeliveryRouteCode ,     
  DeliveryRouteName ,     
  PrdCode    ,    
  PrdBatCde   ,    
  PrdQty    ,    
  PrdSelRateBeforeTax ,    
  PrdSelRateAfterTax ,    
  PrdFreeQty  ,    
  PrdGrossAmt  ,    
  PrdSplDiscAmt ,    
  PrdSchDiscAmt ,    
  PrdCashDiscAmt ,    
  PrdDBDiscAmt ,    
  PrdTaxAmt  ,    
  PrdNetAmt  ,    
  UploadFlag  ,    
  SalInvLineCount ,    
  SalInvLvlDiscPer,    
  BillStatus,    
  UploadedDate,    
  OrderRefNo,    
  SFAOrderRefNo,    
  RtrUniqueCode
 )    
 SELECT  @DistCode,A.SalInvNo,A.SalInvDate,A.SalDlvDate,    
 (CASE A.BillMode WHEN 1 THEN 'Cash' ELSE 'Credit' END) AS BillMode,    
 (CASE A.BillType WHEN 1 THEN 'Order Booking' WHEN 2 THEN 'Ready Stock' ELSE 'Van Sales' END) AS BillType,    
 A.SalGrossAmount,A.SalSplDiscAmount,A.SalSchDiscAmount,A.SalCDAmount,A.SalDBDiscAmount,A.SalTaxAmount,    
 A.WindowDisplayAmount,A.DBAdjAmount,A.CRAdjAmount,A.OnAccountAmount,A.MarketRetAmount,A.ReplacementDiffAmount,    
 A.OtherCharges,A.SalInvLvlDisc AS InvLevelDiscAmt,A.TotalDeduction,A.TotalAddition,A.SalRoundOffAmt,A.SalNetAmt,A.LcnId,L.LcnCode,    
 B.SMCode,B.SMName,C.RMCode,C.RMName,A.RtrId,R.CmpRtrCode,R.RtrName,    
 ISNULL(E.VehicleRegNo,'') AS VehicleName,ISNULL(D.DlvBoyName,''),F.RMCode,F.RMName,H.PrdCCode,I.CmpBatCode,    
 G.BaseQty AS SalInvQty ,G.PrdUom1EditedSelRate,G.PrdUom1EditedNetRate,G.SalManFreeQty AS SalInvFree ,    
 G.PrdGrossAmount,G.PrdSplDiscAmount,G.PrdSchDiscAmount,    
 G.PrdCDAmount,G.PrdDBDiscAmount,G.PrdTaxAmount,G.PrdNetAmount,    
 'N' AS UploadFlag,0,A.SalInvLvlDiscPer,Dlvsts AS BillStatus,    
 GETDATE(),ISNULL(O.OrderNo,''),ISNULL(O.DocRefNo,''),isnull(R.RtrUniqueCode,'')
 FROM SalesInvoice A  (NOLOCK)    
 INNER JOIN Retailer R (NOLOCK) ON A.RtrId = R.RtrId    
 INNER JOIN SalesMan B (NOLOCK) ON A.SMID = B.SmID    
 INNER JOIN RouteMaster C (NOLOCK) ON A.RMID = C.RMID    
 LEFT OUTER JOIN DeliveryBoy D  (NOLOCK) ON A.DlvBoyId = D.DlvBoyId    
 LEFT OUTER JOIN Vehicle E (NOLOCK) ON E.VehicleId = A. VehicleId    
 INNER JOIN RouteMaster F (NOLOCK) ON A.DlvRMID = F.RMID    
 INNER JOIN SalesInvoiceProduct G (NOLOCK) ON A.SalId = G.SalId    
 INNER JOIN Product H (NOLOCK) ON G.PrdId = H.PrdId    
 INNER JOIN ProductBatch I (NOLOCK) ON G.PrdBatID = I.PrdBatId AND H.PrdId=I.PrdId    
 INNER JOIN Location L (NOLOCK) ON L.LcnId=A.LcnId 
 LEFT OUTER JOIN OrderBooking O(NOLOCK) ON O.OrderNo=A.OrderKeyNo    
 WHERE A.Upload=0 ORDER BY A.SalId  
 ----Code Added by Deepan on 11/11/2019
 --INNER JOIN RetailerValueClassMap  RM(NOLOCK) ON R.RTRID =RM.RTRID 
 --AND A.RTRValueClassId=RM.RtrValueClassId
 --INNER JOIN RetailerValueClass RC(NOLOCK) ON A.RtrValueClassId =RC.RtrClassId
 --INNER JOIN RetailerCategory RY ON RC.CtgMainId = RY.CtgMainId
 --INNER JOIN RetailerCategoryLevel RCL ON RY.CtgLevelId = RCL.CtgLevelId
 --INNER JOIN RetailerCategory RCY ON  RY.CtgLinkId=RCY.CtgMainId
 --LEFT OUTER JOIN OrderBooking O(NOLOCK) ON O.OrderNo=A.OrderKeyNo    
 --WHERE A.Upload=0 ORDER BY A.SalId   

  --ILCRSTPAR7329
 
 UPDATE  Cs2Cn_Prk_DailySales SET ValueClassCode=RC.ValueClassCode,ValueClassName=RC.ValueClassName,
 CtgCode= RY.CtgCode,CtgName=RY.CtgName,ChannelCode=RCY.CtgCode,ChannelName=RCY.CtgName
 FROM Cs2Cn_Prk_DailySales C(NOLOCK) INNER JOIN SALESINVOICE S(NOLOCK) ON C.SALINVNO=S.SALINVNO
AND C.RtrId =S.RtrId 
 INNER JOIN RetailerValueClass RC(NOLOCK) ON S.RtrValueClassId =RC.RtrClassId
 INNER JOIN RetailerCategory RY ON RC.CtgMainId = RY.CtgMainId
 INNER JOIN RetailerCategoryLevel RCL ON RY.CtgLevelId = RCL.CtgLevelId
 INNER JOIN RetailerCategory RCY ON  RY.CtgLinkId=RCY.CtgMainId
 
 
 
 --UPDATE  Cs2Cn_Prk_DailySales SET CtgCode= RY.CtgCode,CtgName=RY.CtgName,ChannelCode=RCY.CtgCode,ChannelName=RCY.CtgName  
 --FROM Cs2Cn_Prk_DailySales C(NOLOCK) INNER JOIN RetailerValueClass RC(NOLOCK) ON C.ValueClassCode=RC.ValueClassCode
 --INNER JOIN RetailerCategory RY ON RC.CtgMainId = RY.CtgMainId
 --INNER JOIN RetailerCategoryLevel RCL ON RY.CtgLevelId = RCL.CtgLevelId
 --INNER JOIN RetailerCategory RCY ON  RY.CtgLinkId=RCY.CtgMainId
 --UPDATE A SET A.LCTRAmount=ISNULL(Z.LCTRAmt,0)    
 --FROM Cs2Cn_Prk_DailySales A (NOLOCK)    
 --INNER JOIN (    
 --SELECT SalId,SalInvNo,PrdCCode,CmpBatCode,ISNULL(GrossAmt,0) AS GrossAmt,ISNULL(TaxAmount,0) AS TaxAmount,  
 --ISNULL(GrossAmt+TaxAmount,0) AS LCTRAmt     
 --FROM(    
 --SELECT S.SALID,S.SALINVNO,P.PRDID,P.PRDCCODE,PB.CmpBatCode,SP.BASEQTY,SP.PrdUom1EditedSelRate,  
 --ISNULL((SP.BASEQTY*SP.PrdUom1EditedSelRate),0) AS GrossAmt,    
 --ISNULL(Tax.TaxAmount,0) AS TaxAmount    
 --FROM SalesInvoice S (NOLOCK)    
 --INNER JOIN SalesInvoiceProduct SP (NOLOCK) ON S.SalId=SP.SALID    
 --INNER JOIN (    
 --SELECT SalId,PrdSlno,SUM(TaxAmount) TaxAmount FROM SalesInvoiceProductTax (NOLOCK)    
 --GROUP BY SalId,PrdSlno    
 --)Tax ON Tax.SalId=S.SalId AND SP.SalId=Tax.SalId AND SP.SlNo=Tax.PrdSlNo    
 --INNER JOIN Product P (NOLOCK) ON P.PrdId=SP.PrdId    
 --INNER JOIN ProductBatch PB ON PB.PrdId=P.PrdId AND PB.PrdBatId=SP.PrdBatId    
 --) X    
 --WHERE EXISTS (SELECT SalInvNo,PrdCode,PrdBatCde FROM Cs2Cn_Prk_DailySales Y WHERE     
 --X.SalInvNo=Y.SalInvNo AND X.PrdCCode=Y.PrdCode AND X.CmpBatCode=Y.PrdBatCde)    
 --) Z ON Z.SalInvNo=A.SalInvNo AND Z.PrdCCode=A.PrdCode AND Z.CmpBatCode=A.PrdBatCde    
 ---------- Modified by Lakshman M on 06/11/2017 PMS_ICRSTPAR6569 ------------  
  UPDATE A SET A.LCTRAmount=ISNULL(Z.LCTRAmt,0)    
 FROM Cs2Cn_Prk_DailySales A (NOLOCK)    
 INNER JOIN (    
    SELECT SalID,SalInvNo,PrdId,PrdCCode,CmpBatCode,taxperc,SUM(TaxableAmount) as TaxableAmount,SUM(LCTRAmt)as LCTRAmt,BaseQty FROM (
    SELECT DISTINCT A.SalId SalID ,A.SalInvNo SalInvNo,B.PrdId PrdId,P.PrdCCode PrdCCode,PB.CmpBatCode CmpBatCode,(C.TaxPerc) As taxperc,  
  (C.TaxableAmount) AS TaxableAmount,--PBD.PrdBatDetailValue,
  ((B.BaseQty *(PBD.PrdBatDetailValue))+((B.BaseQty *(PBD.PrdBatDetailValue))*sum(c.TaxPerc/100)))  As LCTRAmt,
  B.BaseQty As BaseQty
  FROM SalesInvoice A (NOLOCK)  
  INNER JOIN SalesInvoiceProduct B (NOLOCK) ON A.SALID=B.SALID  
  INNER JOIN SalesInvoiceProductTax C (NOLOCK) ON A.SalId=C.SalId AND B.SalId=C.SalId AND B.SlNo=C.PrdSlNo  
  INNER JOIN PRODUCT P (NOLOCK) ON B.PrdId=P.PrdId  
  INNER JOIN ProductBatch PB (NOLOCK) ON PB.PrdId=P.PrdId AND PB.PrdId=B.PrdId AND PB.PrdBatId=B.PrdBatId  
  INNER JOIN ProductBatchDetails PBD (NOLOCK) ON PBD.PrdBatId =PB.PrdBatId and DefaultPrice =1	
  INNER JOIN Cs2Cn_Prk_DailySales PRK (NOLOCK)  
  ON PRK.SalInvNo=A.SalInvNo AND PRK.PrdCode=P.PrdCCode AND PRK.PrdBatCde=PB.CmpBatCode and prk.PrdQty=B.BaseQty   ------------- ILCRSTPAR4571 add by lakshman M Dated ON 25-05-2019 
  where C.TaxableAmount >0 and PBD.SLNo =3 -- AND A.salinvno ='P88071822390'-- AND b.prdid = 4777
  GROUP BY A.SalId,A.SalInvNo,B.PrdId,B.PrdUom1EditedSelRate,C.TaxPerc,P.PrdCCode,PB.CmpBatCode,C.TaxableAmount,B.PrdGrossAmount,B.PrdTaxAmount,
  B.BaseQty,B.prdtaxamount,PBD.PrdBatDetailValue--,B.PrdUnitSelRate,
  HAVING (SUM(C.TaxableAmount))>0 ) A 
  Group by  SalID,SalInvNo,PrdId,PrdCCode,CmpBatCode,taxperc,BaseQty
 ) Z ON Z.SalInvNo=A.SalInvNo AND Z.PrdCCode=A.PrdCode AND Z.CmpBatCode=A.PrdBatCde AND Z.BaseQty= A.PrdQty
   ----------------- till here --------------------  
 UPDATE DayEndProcess SET NextUpDate = CONVERT(nVarChar(10),GetDate(),121),    
 ProcDate = CONVERT(nVarChar(10),GetDate(),121)    
 Where ProcId = 1    
 UPDATE A SET SalInvLineCount=B.SalInvLineCount    
 FROM Cs2Cn_Prk_DailySales A,(SELECT SI.SalInvNo,COUNT(SIP.PrdId) AS SalInvLineCount     
 FROM SalesInvoice SI,SalesInvoiceProduct SIP WHERE     
 SI.UPload=0 AND SI.SalId=SIP.SalId    
 GROUP BY SI.SalInvNo) B    
 WHERE A.SalInvNo=B.SalInvNo    
 --->Added By Nanda on 17/08/2010    
 INSERT INTO Cs2Cn_Prk_SalesInvoiceOrders(DistCode,SalInvNo,OrderNo,OrderDate,UploadFlag)    
 SELECT DISTINCT @DistCode,SI.SalInvNo,OB.OrderNo,OB.OrderDate,'N'    
 FROM SalesInvoice SI,SalesinvoiceOrderBooking SIOB,OrderBooking OB    
 WHERE SI.SalId=SIOB.SalId AND SIOB.OrderNo=OB.OrderNo AND SI.Upload=0 AND SI.DlvSts>3  
 --->Till Here    
 --UPDATE SalesInvoice SET Upload=1 WHERE Upload=0 AND SalInvNo IN (SELECT DISTINCT    
 --SalInvNo FROM Cs2Cn_Prk_DailySales WHERE UploadFlag = 'N') AND Dlvsts IN (3,4,5)   
  	--COMMENTED AND ADDED BY MOHANA  ICRSTPAR7955 
	UPDATE SalesInvoice SET Upload=1 WHERE Upload=0 AND SalInvNo IN (SELECT DISTINCT
	 SalInvNo FROM Cs2Cn_Prk_DailySales WHERE UploadFlag = 'N' AND BillStatus in(3,4,5))
	--TILL HERE
	
	UPDATE Cs2Cn_Prk_DailySales SET ServerDate=@ServerDate   
END
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE NAME = 'Proc_Cs2Cn_TransactionWiseGrnTracking' AND type ='P')
DROP PROCEDURE Proc_Cs2Cn_TransactionWiseGrnTracking
GO
CREATE PROCEDURE Proc_Cs2Cn_TransactionWiseGrnTracking
(
	@Po_ErrNo INT OUTPUT,
	@ServerDate DATETIME
)
AS
/*********************************
* PROCEDURE		: Proc_Cs2Cn_TransactionWiseGrnTracking
* PURPOSE		: To Extract Bill Wise GRN refernce from CoreStocky to   Console
* CREATED BY	: Raja C
* CREATED DATE	: 05-06-2017
* NOTE			:
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}	
***************************************************************************************************
* DATE          AUTHOR      CR/BZ	USER STORY ID           DESCRIPTION                         
***************************************************************************************************
* 21-09-2018   Lakshman M	 SR     ILCRSTPAR2151         GRN Tracking uplaod process enabled date On (21-09-2018) as per client request.
* 27-06-2018   Mohana S		 SR     ILCRSTPAR4961         Uploaded MRP,LSP AND Selrate
* 12-11-2019   Deepan        CR     CRCRSTPAR0092         Category and Value Class and channel Added
  06-01-2020   Deepan		 BZ 	ILCRSTPAR7329		  Category and channel modified	

***************************************************************************************************/ 
SET NOCOUNT ON
BEGIN	
    SET @Po_ErrNo= 0
    -- RETURN -- > Commented By Lakshman M For GRN tracking  process enabled 
	DECLARE @DistCode	As nVarchar(50)
	SELECT @DistCode = DistributorCode FROM Distributor	(NOLOCK)	
	
	UPDATE A SET GSPUpload1 = 1 FROM TransactionWiseGrnTracking A WHERE Refdate  <'2018-09-21' ---> Add By Lakshman M PMS ID: ILCRSTPAR2151 Dated ON 21/09/2018 
	
	DELETE FROM Cs2Cn_Prk_TransactionWiseGrnTracking WHERE UploadFlag='Y'
	
	--ILCRSTPAR4961
	SELECT Prdbatid , Priceid, SUM(MRP) MRP,SUM(LSP) LSP,SUM(SelRate) SelRate
	INTO #ProductBatchDetails
	FROM
	( 
	SELECT PB.Prdbatid,PBD.Priceid,PBD.PrdbatDetailvalue AS MRP,0 LSP,0 SelRate FROM ProductBatch PB (NOLOCK)  
	INNER JOIN ProductBatchDetails PBD(NOLOCK)   ON PB.Prdbatid = PBD.PrdBatId and PBD.DefaultPrice = 1
	INNER JOIN BatchCreation B(NOLOCK)   ON PBD.SLNo = B.SLNO AND B.MRP = 1
	UNION ALL		
	SELECT PB.Prdbatid,PBD.Priceid,0,PBD.PrdbatDetailvalue AS LSP,0 FROM ProductBatch PB (NOLOCK)  
	INNER JOIN ProductBatchDetails PBD(NOLOCK)   ON PB.Prdbatid = PBD.PrdBatId and PBD.DefaultPrice = 1
	INNER JOIN BatchCreation B(NOLOCK)   ON PBD.SLNo = B.SLNO AND B.ListPrice  = 1
	UNION ALL		
	SELECT PB.Prdbatid,PBD.Priceid,0,0,PBD.PrdbatDetailvalue AS SelRate FROM ProductBatch PB (NOLOCK)  
	INNER JOIN ProductBatchDetails PBD(NOLOCK)   ON PB.Prdbatid = PBD.PrdBatId and PBD.DefaultPrice = 1
	INNER JOIN BatchCreation B(NOLOCK)   ON PBD.SLNo = B.SLNO AND B.SelRte = 1
	)A GROUP BY  PrdBatId ,PriceId 
	--ILCRSTPAR4961
	
	
	   --Code Added by Deepan on 11/11/2019(CRCRSTPAR0092)
	--INSERT INTO Cs2Cn_Prk_TransactionWiseGrnTracking(DistCode,TransactionDescription,RefId,RefNo,Refdate,ProductCode,BatchCode,PrdSlno,BaseQty,FreeQty,
	--GrnPrdSlNo,GrnQty,GrnFreeQty,PurRcptRefNo,GrnDate,UploadFlag,ServerDate,MRP ,LSP ,SellingRate,CtgCode,CtgName,ValueClassCode,ValueClassName,ChannelCode,ChannelName)
	
	--SELECT @DistCode,T.TransactionDescription AS  TransactionDescription,A.RefId,A.RefNo AS RefNo,A.Refdate AS Refdate,PrdCCode AS ProductCode,CmpBatCode AS BatchCode ,A.Slno AS PrdSlno,
	--A.BaseQty AS BaseQty,A.FreeQty AS FreeQty,A.GrnPrdSlNo AS GrnPrdSlNo,A.GrnQty AS GrnQty,A.GrnFreeQty AS GrnFreeQty,A.PurRcptRefNo AS PurRcptRefNo,A.GrnDate AS GrnDate,'N',@ServerDate,
	--MRP ,LSP ,SelRate,RY.CtgCode,RY.CtgName,RC.ValueClassCode,RC.ValueClassName,
	--RCY.CtgCode AS ChannelCode,RCY.CtgName As ChannelName    
	--FROM TransactionWiseGrnTracking A(NOLOCK) INNER JOIN TransactionMaster T(NOLOCK) ON A.Transid =T.TransactionId 
	--INNER JOIN Product P(NOLOCK) ON A.Prdid=P.PrdId
	--INNER JOIN ProductBatch PB (NOLOCK) ON A.PrdBatid=PB.PrdBatId
	--INNER JOIN #ProductBatchDetails PBD ON PB.Prdbatid = PBD.PrdBatId 
	--INNER JOIN SalesInvoice S(NOLOCK) ON A.REFNO=S.SalInvNo
	--INNER JOIN Retailer R(NOLOCK) ON S.RtrId=R.RtrId 
	--INNER JOIN RetailerValueClassMap  RM(NOLOCK) ON R.RTRID =RM.RTRID AND S.RTRValueClassId=RM.RtrValueClassId
	--INNER JOIN RetailerValueClass RC(NOLOCK) ON S.RtrValueClassId =RC.RtrClassId
	--INNER JOIN RetailerCategory RY ON RC.CtgMainId = RY.CtgMainId
	--INNER JOIN RetailerCategoryLevel RCL ON RY.CtgLevelId = RCL.CtgLevelId
	--INNER JOIN RetailerCategory RCY ON  RY.CtgLinkId=RCY.CtgMainId
	--WHERE GSPUpload1 = 0 AND Refdate >='2018-09-21' AND A.TransId=2
	
	INSERT INTO Cs2Cn_Prk_TransactionWiseGrnTracking(DistCode,TransactionDescription,RefId,RefNo,Refdate,ProductCode,BatchCode,PrdSlno,BaseQty,FreeQty,
	GrnPrdSlNo,GrnQty,GrnFreeQty,PurRcptRefNo,GrnDate,UploadFlag,ServerDate,MRP ,LSP ,SellingRate)
	
	SELECT @DistCode,T.TransactionDescription AS  TransactionDescription,A.RefId,A.RefNo AS RefNo,A.Refdate AS Refdate,PrdCCode AS ProductCode,CmpBatCode AS BatchCode ,A.Slno AS PrdSlno,
	A.BaseQty AS BaseQty,A.FreeQty AS FreeQty,A.GrnPrdSlNo AS GrnPrdSlNo,A.GrnQty AS GrnQty,A.GrnFreeQty AS GrnFreeQty,A.PurRcptRefNo AS PurRcptRefNo,A.GrnDate AS GrnDate,'N',@ServerDate,
	MRP ,LSP ,SelRate
	FROM TransactionWiseGrnTracking A(NOLOCK) INNER JOIN TransactionMaster T(NOLOCK) ON A.Transid =T.TransactionId 
	INNER JOIN Product P(NOLOCK) ON A.Prdid=P.PrdId
	INNER JOIN ProductBatch PB (NOLOCK) ON A.PrdBatid=PB.PrdBatId
	INNER JOIN #ProductBatchDetails PBD ON PB.Prdbatid = PBD.PrdBatId 
	INNER JOIN SalesInvoice S(NOLOCK) ON A.REFNO=S.SalInvNo
	WHERE GSPUpload1 = 0 AND Refdate >='2018-09-21' AND A.TransId=2
	
	--ILCRSTPAR7329
	
	UPDATE  Cs2Cn_Prk_TransactionWiseGrnTracking SET ValueClassCode=RC.ValueClassCode,ValueClassName=RC.ValueClassName,
	CtgCode= RY.CtgCode,CtgName=RY.CtgName,ChannelCode=RCY.CtgCode,ChannelName=RCY.CtgName 
	FROM Cs2Cn_Prk_TransactionWiseGrnTracking C(NOLOCK) INNER JOIN SALESINVOICE S(NOLOCK) ON C.RefNo=S.SALINVNO
	INNER JOIN RetailerValueClass RC(NOLOCK) ON S.RtrValueClassId =RC.RtrClassId
	 INNER JOIN RetailerCategory RY ON RC.CtgMainId = RY.CtgMainId
	INNER JOIN RetailerCategoryLevel RCL ON RY.CtgLevelId = RCL.CtgLevelId
	INNER JOIN RetailerCategory RCY ON  RY.CtgLinkId=RCY.CtgMainId
	WHERE C.TransactionDescription='Billing'
	
	 --UPDATE  Cs2Cn_Prk_TransactionWiseGrnTracking SET CtgCode= RY.CtgCode,CtgName=RY.CtgName,ChannelCode=RCY.CtgCode,ChannelName=RCY.CtgName  
	 --FROM Cs2Cn_Prk_TransactionWiseGrnTracking C(NOLOCK) INNER JOIN RetailerValueClass RC(NOLOCK) ON C.ValueClassCode=RC.ValueClassCode
	 --INNER JOIN RetailerCategory RY ON RC.CtgMainId = RY.CtgMainId
	 --INNER JOIN RetailerCategoryLevel RCL ON RY.CtgLevelId = RCL.CtgLevelId
	 --INNER JOIN RetailerCategory RCY ON  RY.CtgLinkId=RCY.CtgMainId
	 --WHERE C.TransactionDescription='Billing'
 	
 --	INSERT INTO Cs2Cn_Prk_TransactionWiseGrnTracking(DistCode,TransactionDescription,RefId,RefNo,Refdate,ProductCode,BatchCode,PrdSlno,BaseQty,FreeQty,
	--GrnPrdSlNo,GrnQty,GrnFreeQty,PurRcptRefNo,GrnDate,UploadFlag,ServerDate,MRP ,LSP ,SellingRate,CtgCode,CtgName,ValueClassCode,ValueClassName,ChannelCode,ChannelName)
	
	--SELECT @DistCode,T.TransactionDescription AS  TransactionDescription,A.RefId,A.RefNo AS RefNo,A.Refdate AS Refdate,PrdCCode AS ProductCode,CmpBatCode AS BatchCode ,A.Slno AS PrdSlno,
	--A.BaseQty AS BaseQty,A.FreeQty AS FreeQty,A.GrnPrdSlNo AS GrnPrdSlNo,A.GrnQty AS GrnQty,A.GrnFreeQty AS GrnFreeQty,A.PurRcptRefNo AS PurRcptRefNo,A.GrnDate AS GrnDate,'N',@ServerDate,
	--MRP ,LSP ,SelRate,RY.CtgCode,RY.CtgName,RC.ValueClassCode,RC.ValueClassName,
	--RCY.CtgCode AS ChannelCode,RCY.CtgName As ChannelName    
	--FROM TransactionWiseGrnTracking A(NOLOCK) INNER JOIN TransactionMaster T(NOLOCK) ON A.Transid =T.TransactionId 
	--INNER JOIN Product P(NOLOCK) ON A.Prdid=P.PrdId
	--INNER JOIN ProductBatch PB (NOLOCK) ON A.PrdBatid=PB.PrdBatId
	--INNER JOIN #ProductBatchDetails PBD ON PB.Prdbatid = PBD.PrdBatId 
	--INNER JOIN ReturnHeader S(NOLOCK) ON A.REFNO=S.ReturnCode
	--INNER JOIN Retailer R(NOLOCK) ON S.RtrId=R.RtrId
	--INNER JOIN RetailerValueClassMap  RM(NOLOCK) ON S.RTRID =RM.RTRID AND S.RTRValueClassId=RM.RtrValueClassId
	--INNER JOIN RetailerValueClass RC(NOLOCK) ON S.RtrValueClassId =RC.RtrClassId
	--INNER JOIN RetailerCategory RY ON RC.CtgMainId = RY.CtgMainId
	--INNER JOIN RetailerCategoryLevel RCL ON RY.CtgLevelId = RCL.CtgLevelId
	--INNER JOIN RetailerCategory RCY ON  RY.CtgLinkId=RCY.CtgMainId
	--WHERE GSPUpload1 = 0 AND Refdate >='2018-09-21' AND A.TransId=3
	
		INSERT INTO Cs2Cn_Prk_TransactionWiseGrnTracking(DistCode,TransactionDescription,RefId,RefNo,Refdate,ProductCode,BatchCode,PrdSlno,BaseQty,FreeQty,
	GrnPrdSlNo,GrnQty,GrnFreeQty,PurRcptRefNo,GrnDate,UploadFlag,ServerDate,MRP ,LSP ,SellingRate)
	
	SELECT @DistCode,T.TransactionDescription AS  TransactionDescription,A.RefId,A.RefNo AS RefNo,A.Refdate AS Refdate,PrdCCode AS ProductCode,CmpBatCode AS BatchCode ,A.Slno AS PrdSlno,
	A.BaseQty AS BaseQty,A.FreeQty AS FreeQty,A.GrnPrdSlNo AS GrnPrdSlNo,A.GrnQty AS GrnQty,A.GrnFreeQty AS GrnFreeQty,A.PurRcptRefNo AS PurRcptRefNo,A.GrnDate AS GrnDate,'N',@ServerDate,
	MRP ,LSP ,SelRate
	FROM TransactionWiseGrnTracking A(NOLOCK) INNER JOIN TransactionMaster T(NOLOCK) ON A.Transid =T.TransactionId 
	INNER JOIN Product P(NOLOCK) ON A.Prdid=P.PrdId
	INNER JOIN ProductBatch PB (NOLOCK) ON A.PrdBatid=PB.PrdBatId
	INNER JOIN #ProductBatchDetails PBD ON PB.Prdbatid = PBD.PrdBatId 
	INNER JOIN ReturnHeader S(NOLOCK) ON A.REFNO=S.ReturnCode
	WHERE GSPUpload1 = 0 AND Refdate >='2018-09-21' AND A.TransId=3
	
	UPDATE  Cs2Cn_Prk_TransactionWiseGrnTracking SET ValueClassCode=RC.ValueClassCode,ValueClassName=RC.ValueClassName,CtgCode= RY.CtgCode,CtgName=RY.CtgName,
	ChannelCode=RCY.CtgCode,ChannelName=RCY.CtgName 
	FROM Cs2Cn_Prk_TransactionWiseGrnTracking C(NOLOCK) INNER JOIN ReturnHeader S(NOLOCK) ON C.RefNo=S.ReturnCode
	INNER JOIN RetailerValueClass RC(NOLOCK) ON S.RtrValueClassId =RC.RtrClassId
	INNER JOIN RetailerCategory RY ON RC.CtgMainId = RY.CtgMainId
	 INNER JOIN RetailerCategoryLevel RCL ON RY.CtgLevelId = RCL.CtgLevelId
	 INNER JOIN RetailerCategory RCY ON  RY.CtgLinkId=RCY.CtgMainId
	WHERE C.TransactionDescription='Sales Return'
	
	 --UPDATE  Cs2Cn_Prk_TransactionWiseGrnTracking SET CtgCode= RY.CtgCode,CtgName=RY.CtgName,ChannelCode=RCY.CtgCode,ChannelName=RCY.CtgName  
	 --FROM Cs2Cn_Prk_TransactionWiseGrnTracking C(NOLOCK) INNER JOIN RetailerValueClass RC(NOLOCK) ON C.ValueClassCode=RC.ValueClassCode
	 --INNER JOIN RetailerCategory RY ON RC.CtgMainId = RY.CtgMainId
	 --INNER JOIN RetailerCategoryLevel RCL ON RY.CtgLevelId = RCL.CtgLevelId
	 --INNER JOIN RetailerCategory RCY ON  RY.CtgLinkId=RCY.CtgMainId
	 --WHERE C.TransactionDescription='Sales Return'
	
	
	INSERT INTO Cs2Cn_Prk_TransactionWiseGrnTracking(DistCode,TransactionDescription,RefId,RefNo,Refdate,ProductCode,BatchCode,PrdSlno,BaseQty,FreeQty,
	GrnPrdSlNo,GrnQty,GrnFreeQty,PurRcptRefNo,GrnDate,UploadFlag,ServerDate,MRP ,LSP ,SellingRate)
	
	SELECT @DistCode,T.TransactionDescription AS  TransactionDescription,A.RefId,A.RefNo AS RefNo,A.Refdate AS Refdate,PrdCCode AS ProductCode,CmpBatCode AS BatchCode ,A.Slno AS PrdSlno,
	A.BaseQty AS BaseQty,A.FreeQty AS FreeQty,A.GrnPrdSlNo AS GrnPrdSlNo,A.GrnQty AS GrnQty,A.GrnFreeQty AS GrnFreeQty,A.PurRcptRefNo AS PurRcptRefNo,A.GrnDate AS GrnDate,'N',@ServerDate,
	MRP ,LSP ,SelRate 
	FROM TransactionWiseGrnTracking A(NOLOCK) INNER JOIN TransactionMaster T(NOLOCK) ON A.Transid =T.TransactionId 
	INNER JOIN Product P(NOLOCK) ON A.Prdid=P.PrdId
	INNER JOIN ProductBatch PB (NOLOCK) ON A.PrdBatid=PB.PrdBatId
	INNER JOIN #ProductBatchDetails PBD ON PB.Prdbatid = PBD.PrdBatId 
	WHERE GSPUpload1 = 0 AND Refdate >='2018-09-21' AND A.TransId NOT IN(2,3) ---> Add By Lakshman M PMS ID: ILCRSTPAR2151 Dated ON 21/09/2018 
	
	UPDATE A SET A.CmpInvNo=B.CmpInvNo From Cs2Cn_Prk_TransactionWiseGrnTracking A (Nolock) Inner Join PurchaseReceipt B (Nolock)On A.PurRcptRefNo=B.PurRcptRefNo ---Added By Mohanakrishna A.B
	
	UPDATE  A  SET GSPUpload1 = 1 FROM TransactionWiseGrnTracking A WHERE EXISTS (SELECT * FROM Cs2Cn_Prk_TransactionWiseGrnTracking B(NOLOCK)
	WHERE A.RefId=B.RefId AND A.RefNo=B.RefNo )
		
END
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Cs2Cn_Prk_DailySalesHierarchy]') AND type in (N'U'))
CREATE TABLE [Cs2Cn_Prk_DailySalesHierarchy](
	[SlNo] [numeric](38, 0) IDENTITY(1,1) NOT NULL,
	[DistCode] [nvarchar](50) NULL,
	[SalInvNo] [nvarchar](50) NULL,
	[RtrId] [int] NULL,
	[CmpRtrCode] [nvarchar](50) NULL,
	[BillStatus] [tinyint] NULL,
	[CtgCode] [nvarchar](50) NULL,
	[CtgName] [nvarchar](100) NULL,
	[ValueClassCode] [nvarchar](100) NULL,
	[ValueClassName] [nvarchar](100) NULL,
	[ChannelCode] [nvarchar](50) NULL,
	[ChannelName] [nvarchar](100) NULL,
	[UploadFlag] [nvarchar](10) NULL,
	[SyncId] [numeric](38, 0) NULL,
	[ServerDate] [datetime] NULL,
	) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[DailySalesHierarchy]') AND type in (N'U'))
CREATE TABLE [DailySalesHierarchy](
	[SalInvNo] [nvarchar](50) NULL,
	[RtrId] [int] NULL,
	[CmpRtrCode] [nvarchar](50) NULL,
	[BillStatus] [tinyint] NULL,
	[CtgCode] [nvarchar](50) NULL,
	[CtgName] [nvarchar](100) NULL,
	[ValueClassCode] [nvarchar](100) NULL,
	[ValueClassName] [nvarchar](100) NULL,
	[ChannelCode] [nvarchar](50) NULL,
	[ChannelName] [nvarchar](100) NULL,
	[Availability] [tinyint] NULL,
	[LastModBy]	[tinyint] NULL,
	[LastModDate] [Datetime] NULL,
	[AuthId] [tinyint] NULL,
	[AuthDate]	[Datetime] NULL
	) ON [PRIMARY]
GO
IF NOT  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Cs2Cn_Prk_SalesReturnHierarchy]') AND type in (N'U'))
CREATE TABLE [Cs2Cn_Prk_SalesReturnHierarchy](
	[SlNo] [numeric](38, 0) IDENTITY(1,1) NOT NULL,
	[DistCode] [nvarchar](50) NULL,
	[SRNRefNo] [nvarchar](50) NULL,
	[RtrId] [int] NULL,
	[CmpRtrCode] [nvarchar](50) NULL,
	[CtgCode] [nvarchar](50) NULL,
	[CtgName] [nvarchar](100) NULL,
	[ValueClassCode] [nvarchar](100) NULL,
	[ValueClassName] [nvarchar](100) NULL,
	[ChannelCode] [nvarchar](50) NULL,
	[ChannelName] [nvarchar](100) NULL,
	[UploadFlag] [nvarchar](10) NULL,
	[SyncId] [numeric](38, 0) NULL,
	[ServerDate] [datetime] NULL,
) ON [PRIMARY]
GO
IF NOT  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[SalesReturnHierarchy]') AND type in (N'U'))
CREATE TABLE [SalesReturnHierarchy](
	[SRNRefNo] [nvarchar](50) NULL,
	[RtrId] [int] NULL,
	[CmpRtrCode] [nvarchar](50) NULL,
	[CtgCode] [nvarchar](50) NULL,
	[CtgName] [nvarchar](100) NULL,
	[ValueClassCode] [nvarchar](100) NULL,
	[ValueClassName] [nvarchar](100) NULL,
	[ChannelCode] [nvarchar](50) NULL,
	[ChannelName] [nvarchar](100) NULL,
	[Availability] [tinyint] NULL,
	[LastModBy]	[tinyint] NULL,
	[LastModDate] [Datetime] NULL,
	[AuthId] [tinyint] NULL,
	[AuthDate]	[Datetime] NULL
) ON [PRIMARY]
GO
DELETE FROM Tbl_UploadIntegration WHERE PROCESSNAME ='SalesHierarchy'
INSERT INTO Tbl_UploadIntegration(SequenceNo,ProcessName,FolderName,PrkTableName,CreatedDate)
SELECT 76,'SalesHierarchy','SalesHierarchy','Cs2Cn_Prk_DailySalesHierarchy',GETDATE() 
GO
DELETE FROM CustomUpDownload WHERE MODULE ='SalesHierarchy'
INSERT INTO CustomUpDownload(SlNo,SeqNo,Module,Screen,ExportFnName,ImportProcName,ParkTable,ValidateProcName,TranType,UpDownload,MandatoryFile)
SELECT 177,1,'SalesHierarchy','SalesHierarchy','Proc_Cs2Cn_DailySalesHierarchy','','Cs2Cn_Prk_DailySalesHierarchy','','Transaction','Upload',1
GO
DELETE FROM Tbl_UploadIntegration WHERE PROCESSNAME ='ReturnHierarchy'
INSERT INTO Tbl_UploadIntegration(SequenceNo,ProcessName,FolderName,PrkTableName,CreatedDate)
SELECT 77,'ReturnHierarchy','ReturnHierarchy','Cs2Cn_Prk_SalesReturnHierarchy',GETDATE() 
GO
DELETE FROM CustomUpDownload WHERE MODULE ='ReturnHierarchy'
INSERT INTO CustomUpDownload(SlNo,SeqNo,Module,Screen,ExportFnName,ImportProcName,ParkTable,ValidateProcName,TranType,UpDownload,MandatoryFile)
SELECT 178,1,'ReturnHierarchy','ReturnHierarchy','Proc_Cs2Cn_SalesReturnHierarchy','','Cs2Cn_Prk_SalesReturnHierarchy','','Transaction','Upload',1
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_ManualClaimDetails' AND TYPE ='P')
DROP PROCEDURE Proc_ManualClaimDetails
GO
CREATE PROCEDURE Proc_ManualClaimDetails
(
	@Pi_Year	int,
	@Pi_Month	INT,
	@Pi_Usrid	INT,
	@Pi_Transid	INT
)
AS
/****************************************************************************
* PROCEDURE	:  Proc_ManualClaimDetails
* PURPOSE	:  TO LOAD MANUAL CLAIM DETAILS
* DATE		:  14-11-2019
* CREATED	:  MOHANA S
* PMS NO	:  CRCRSTPAR0079
*******************************************************************************
* 31-01-2020		MOHANA S		SR		ILCRSTPAR7667        Blocked Manual Claim
*******************************************************************************/
BEGIN
SET NOCOUNT ON 

	DELETE FROM  TempManualClaimDetails   

	RETURN

	DECLARE @FromDate  DATETIME
	DECLARE @ToDate	   DATETIME
 	SELECT @FromDate= DATEADD(MONTH, (@Pi_Month)-1,DATEADD(YEAR, @Pi_Year - 1900, 0))

	SELECT @ToDate = DATEADD(dd, -1, DATEADD(MONTH, @Pi_Month,DATEADD(YEAR, @Pi_Year - 1900, 0)))

		 
	SELECT DISTINCT  MCD.DEscription,MCD.CircularNo,ProposedLibPercent INTO #CirCular  
	from  ManualClaimMaster MCM 
	INNER JOIN ManualClaimDetails MCD ON MCM.MacRefNo = MCD.MacRefNo
	INNER JOIN jcmonth A ON  MCM.jcmid=A.jcmid and fromjcmjcid=jcmjc
	INNER JOIN ManualClaimDescription B ON MCD.CircularNo = B.CircularNo AND MCD.Description = B.ManualClmDesc 
	WHERE MacDate BETWEEN @FromDate AND @ToDate AND ActiveStatus = 1

	INSERT INTO TempManualClaimDetails
	SELECT DISTINCT  DEscription,JcmSdt,JcmEdt,CircularNo,ProposedLibPercent,TotalSales,ActualLibPercent,ClaimAmt,@Pi_Usrid ,@Pi_Transid 
	FROM (
	SELECT  MCD.DEscription,JcmSdt,JcmEdt ,MCD.CircularNo,B.ProposedLibPercent,SUM(TotalSales) TotalSales,SUM(ActualLibPercent) ActualLibPercent,SUM(ClaimAmt) ClaimAmt--,@Pi_Usrid ,@Pi_Transid      
	from  ManualClaimMaster MCM 
	INNER JOIN ManualClaimDetails MCD ON MCM.MacRefNo = MCD.MacRefNo
	INNER JOIN jcmonth A ON  MCM.jcmid=A.jcmid and fromjcmjcid=jcmjc
	INNER JOIN #CirCular B ON MCD.CircularNo = B.CircularNo AND MCD.Description = B.DEscription 
	WHERE MacDate BETWEEN @FromDate AND @ToDate
	GROUP BY  MCD.DEscription,MCD.CircularNo,B.ProposedLibPercent,JcmSdt,JcmEdt 
	)A

END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Fn_CheckCostCentre' AND TYPE='FN')
DROP FUNCTION  Fn_CheckCostCentre
GO
CREATE FUNCTION Fn_CheckCostCentre ()
RETURNS VARCHAR(500) 
AS
/*******************************************************************************************************************
* PROCEDURE	: Fn_CheckCostCentre  
* PURPOSE	: TO CHECK CostCentre
* NOTES		:  
* CREATED	: S.MOHANA 
* DATE		: 19-12-2019
* PMS		: CRCRSTPAR0079  
**********************************************************************************************************************
* Date			Author				userStoryid			CR/BZ				Descriptiom
* 11-01-2020	MOHANA S			ILCRSTPAR7385    	SR					To Consider Last 3 Months Products.	
**********************************************************************************************************************/
BEGIN
DECLARE @ValidateMsg AS VARCHAR(500)
DECLARE @CmpPrdCtgId INT
SELECT @CmpPrdCtgId = CmpPrdCtgId FROM ProductCategoryLevel WHERE CmpPrdCtgName ='BRAND'

DECLARE @Brand TABLE
(
	BrandCode NVARCHAR(100)
)

SET @ValidateMsg = ''

INSERT INTO @Brand
SELECT DISTINCT Brand_Code  FROM Stockledger A (NOLOCK) 
INNER JOIN TBL_GR_BUILD_PH B (NOLOCK) ON A.PrdId = B.PrdId 
INNER JOIN Product P(NOLOCK) ON B.PrdId = P.PrdId AND A.Prdid = P.Prdid AND P.PrdStatus = 1
WHERE Transdate>=CONVERT(VARCHAR(10),  DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())-3, 0) ,121) AND Category_Code NOT IN ('C00','K') 


IF EXISTS ( SELECT * FROM ProductCategoryValue A (NOLOCK) INNER JOIN @Brand C ON A.PrdCtgValCode = C.BrandCode
			WHERE A.CmpPrdCtgId =@CmpPrdCtgId AND  A.PrdCtgValCode NOT IN (SELECT DISTINCT BrandCode  FROM CostCentreDetails(NOLOCK)))
BEGIN
	SET @ValidateMsg='Cost Centre Not available for Some Brand'
END

RETURN @ValidateMsg

END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Cn2Cs_SchemeClaimCircular' AND TYPE='P')
DROP PROCEDURE Proc_Cn2Cs_SchemeClaimCircular
GO
CREATE PROCEDURE Proc_Cn2Cs_SchemeClaimCircular
(
	@Po_ErrNo INT OUTPUT
)
AS
/*****************************************************************************************************************************************
* PROCEDURE		: Proc_Cn2Cs_SchemeClaimCircular
* PURPOSE		: 
* CREATED		: S.MOHANA
* CREATED DATE	: 12-11-2019
* PMS NO		: CRCRSTNES0028
******************************************************************************************************************************************
* 16-01-2020		MOHANA S			ILCRSTPAR7420			SR			if downloaded in Channel Level changes as Group in CS			 
******************************************************************************************************************************************/
SET NOCOUNT ON
BEGIN
			 
	SET @Po_ErrNo=0  
			 
	DELETE FROM Cn2Cs_Prk_SchemeClaimCircular WHERE DownLoadFlag='Y'
	SELECT CmpSchCode ,Max(CreatedDate) MaxDate INTO #MaxDet FROM Cn2Cs_Prk_SchemeClaimCircular WHERE DownloadFlag='D' 
	GROUP BY CmpSchCode 
	SELECT DISTINCT A.* INTO #Cn2Cs_Prk_SchemeClaimCircular FROM Cn2Cs_Prk_SchemeClaimCircular A INNER JOIN #MaxDet B ON A.CmpSchCode=B.CmpSchCode AND A.CreatedDate =B.MaxDate 
	WHERE DownloadFlag='D'
			
	IF NOT EXISTS(SELECT 'X' FROM #Cn2Cs_Prk_SchemeClaimCircular (NOLOCK) WHERE DownLoadFlag='D')
	BEGIN
		RETURN
	END  
	CREATE TABLE #ToAvoid
	(
		Cmpschcode NVARCHAR(50)
	)
			
	INSERT INTO #ToAvoid 
	SELECT CmpSchCode  FROM #Cn2Cs_Prk_SchemeClaimCircular WHERE CmpSchCode IS NULL
	INSERT INTO ErrorLog 
	SELECT 1,'Cn2Cs_Prk_SchemeClaimCircular','SchemeCode',CmpSchCode + 'is Not available'
		FROM #Cn2Cs_Prk_SchemeClaimCircular WHERE CmpSchCode IS NULL
	INSERT INTO #ToAvoid 
	SELECT CmpSchCode  FROM #Cn2Cs_Prk_SchemeClaimCircular WHERE CircularNo IS NULL
	INSERT INTO ErrorLog 
	SELECT 1,'Cn2Cs_Prk_SchemeClaimCircular','CircularNo',CmpSchCode + 'is Not available'
	FROM #Cn2Cs_Prk_SchemeClaimCircular WHERE CircularNo IS NULL
			
	INSERT INTO #ToAvoid 
	SELECT CmpSchCode  FROM #Cn2Cs_Prk_SchemeClaimCircular WHERE CircularDate  IS NULL
	INSERT INTO ErrorLog 
	SELECT 1,'Cn2Cs_Prk_SchemeClaimCircular','CircularDate',CmpSchCode + 'is Not available'
	FROM #Cn2Cs_Prk_SchemeClaimCircular WHERE CircularDate IS NULL
			
	DELETE FROM SchemeClaimCircular WHERE ConRefNo IN (SELECT CmpSchCode FROM 
	#Cn2Cs_Prk_SchemeClaimCircular WHERE DownloadFlag ='D') -- UAT CHANGES
			

	INSERT INTO SchemeClaimCircular 
	SELECT DISTINCT CmpSchCode,SchValidFrom,SchValidTill,ClaimType,AttrType,AttrCode,CircularNo,CircularDate,CircularBudget,A.CreatedDate
	FROM #Cn2Cs_Prk_SchemeClaimCircular A WHERE AttrType ='Group'
	AND DownloadFlag ='D' AND A.CmpSchCode NOT IN (SELECT CmpSchCode FROM #ToAvoid )

	INSERT INTO SchemeClaimCircular
	SELECT DISTINCT CmpSchCode,SchValidFrom,SchValidTill,ClaimType,'Group' AttrType,C.CtgCode AttrCode,CircularNo,CircularDate,CircularBudget,A.CreatedDate
	FROM #Cn2Cs_Prk_SchemeClaimCircular A 
	INNER JOIN RetailerCategory B ON A.AttrCode = B.CtgCode AND AttrType ='Channel'
	INNER JOIN RetailerCategory C ON B.CtgMainId = C.CtgLinkId AND C.CtgLevelId = 2
	WHERE DownloadFlag ='D' AND A.CmpSchCode NOT IN (SELECT CmpSchCode FROM #ToAvoid )

	INSERT INTO SchemeClaimCircular
	SELECT DISTINCT CmpSchCode,SchValidFrom,SchValidTill,ClaimType,AttrType,AttrCode,CircularNo,CircularDate,CircularBudget,A.CreatedDate
	FROM #Cn2Cs_Prk_SchemeClaimCircular A WHERE AttrType =''
	AND DownloadFlag ='D' AND A.CmpSchCode NOT IN (SELECT CmpSchCode FROM #ToAvoid )
			 
	UPDATE A SET DownloadFlag ='Y' FROM Cn2Cs_Prk_SchemeClaimCircular A INNER JOIN SchemeClaimCircular B ON A.CmpSchCode = B.ConRefNo  
	AND DownloadFlag ='D'

END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_ApportionSchemeAmountInLine' AND TYPE='P')
DROP PROCEDURE Proc_ApportionSchemeAmountInLine
GO
CREATE PROCEDURE Proc_ApportionSchemeAmountInLine
(
	@Pi_UsrId   INT,
	@Pi_TransId  INT,
	@Pi_Salid  BIGINT=0,
	@Pi_EditMode TINYINT =0,
	@Pi_Mode	INT =0
)
AS
/*********************************
* PROCEDURE		: Proc_ApportionSchemeAmountInLine
* PURPOSE		: To Apportion the Scheme amount line wise
* CREATED		: Thrinath
* CREATED DATE	: 25/04/2007
* NOTE			: General SP for Returning Scheme amount line wise
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date}       {developer}        USER STORYID		[CR/BUG]	{brief modification description}
* 28/04/2009    Nandakumar R.G									Modified for Discount Calculation on MRP with Tax
* 10/04/2010    Nandakumar R.G									Modified for QPS Scheme
* 04-08-2011    Boopathy.P										Update the Discount percentage for Flexi Scheme 
* 05-08-2011    Boopathy.P										Previous Adjusted Value will not reduce for Flexi QPS Based Scheme
* 09-08-2011    Boopathy.P										Bug No:23402
* 11-04-2019	Mary			 CRCRSTPAR0039		CR			Trade Scheme calculation Based on Cap Amount, Two Input parameter Added	 @Pi_Salid,@Pi_EditMode		
* 14-01-2019	MOHANA S		 ILCRSTPAR7420		BZ			Restricted Institutional Scheme In Trade Calculation
*********************************/
SET NOCOUNT ON
BEGIN
	DECLARE @SchId   INT
	DECLARE @SlabId  INT
	DECLARE @RefCode nVarChar(10)
	DECLARE @RtrId  INT
	DECLARE @PrdCnt  INT
	DECLARE @PrdBatCnt INT
	DECLARE @PrdId  INT
	DECLARE @MRP  INT
	DECLARE @WithTax INT
	DECLARE @BillSeqId  INT
	DECLARE @QPS  INT
	DECLARE @QPSDateQty  INT
	DECLARE @Combi  INT
	DECLARE @RtrQPSId  INT
	DECLARE @TempSchGross TABLE
	(
		SchId   INT,
		GrossAmount  NUMERIC(38,6),
		QPSGrossAmount  NUMERIC(38,6)
	)
	DECLARE @TempPrdGross TABLE
	(
		SchId   INT,
		PrdId   INT,
		PrdBatId  INT,
		RowId   INT,
		GrossAmount  NUMERIC(38,6),
		QPSGrossAmount  NUMERIC(38,6)
	)
	DECLARE @FreeQtyDt TABLE
	(
		FreePrdid  INT,
		FreePrdBatId  INT,
		FreeQty   INT,
		SchId INT
	)
	DECLARE @FreeQtyRow TABLE
	(
		RowId   INT,
		PrdId   INT,
		PrdBatId  INT
	)
	DECLARE @PDSchID TABLE
	(
		PrdId   INT,
		PrdBatId  INT,
		PDSchId   INT,
		PDSlabId  INT
	)
	DECLARE @SchFlatAmt TABLE
	(
		SchId  INT,
		SlabId  INT,
		FlatAmt  NUMERIC(18,6),
		DiscPer  NUMERIC(18,6),
		SchType  INT
	)
	DECLARE @MoreBatch TABLE
	(
		SchId  INT,
		SlabId  INT,
		PrdId  INT,
		PrdCnt  INT,
		PrdBatCnt INT,
		SchType  INT
	)
	DECLARE @QPSGivenDisc TABLE
	(
		SchId   INT,		
		Amount  NUMERIC(38,6)
	)
	DECLARE @QPSGivenFlat TABLE
	(
		SchId   INT,		
		Amount  NUMERIC(38,6)
	)
	DECLARE @RtrQPSIds TABLE
	(
		RtrId   INT,		
		SchId   INT
	)
	DECLARE @QPSNowAvailable TABLE
	(
		SchId   INT,		
		Amount  NUMERIC(38,6)
	)
	--Trade scheme CRCRSTPAR0039
	CREATE TABLE #PurchaseTarget
	(
		Schid INT,
		TargetValue Numeric(18,6)
	)		
			
	-- Added by Boopathy for QPS Quantitiy based checking
	DELETE FROM BillQPSSchemeAdj WHERE CrNoteAmount<=0 
	UPDATE SalesInvoiceQPSSchemeAdj SET AdjAmount=0 WHERE CrNoteAmount=0 AND AdjAmount>=0 	
	DELETE FROM ApportionSchemeDetails WHERE TransId=@Pi_TransId AND UsrId=@Pi_UsrId 
	-- End here 
	SELECT @RtrQPSId=RtrId FROM BilledPrdHdForQPSScheme WHERE TransId= @Pi_TransId AND UsrId=@Pi_UsrId
	if exists (select * from dbo.sysobjects where id = object_id(N'TP') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	drop table TP
	if exists (select * from dbo.sysobjects where id = object_id(N'TG') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	drop table TG
	if exists (select * from dbo.sysobjects where id = object_id(N'TPQ') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	drop table TPQ
	if exists (select * from dbo.sysobjects where id = object_id(N'TGQ') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	drop table TGQ
	if exists (select * from dbo.sysobjects where id = object_id(N'SchMaxSlab') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	drop table SchMaxSlab
	SET @RtrId = (SELECT TOP 1 RtrId FROM BilledPrdHdForScheme WHERE TransID = @Pi_TransId
	AND UsrId = @Pi_Usrid)
	DECLARE  CurSchid CURSOR FOR
	SELECT DISTINCT Schid,SlabId FROM BillAppliedSchemeHd WHERE IsSelected = 1
	AND TransID = @Pi_TransId AND UsrId = @Pi_Usrid
	OPEN CurSchid
	FETCH NEXT FROM CurSchid INTO @SchId,@SlabId
	WHILE @@FETCH_STATUS = 0
	BEGIN	
		SELECT @QPS =QPS,@Combi=CombiSch,@QPSDateQty=ApyQPSSch	FROM SchemeMaster WHERE Schid=@SchId	
		SELECT @MRP=ApplyOnMRPSelRte,@WithTax=ApplyOnTax FROM SchemeMaster WHERE --MasterType=2 AND
		SchId=@SchId
				
		IF NOT EXISTS(SELECT * FROM @TempSchGross WHERE SchId=@SchId)
		BEGIN
			IF @QPS=0 
			BEGIN
				IF EXISTS(SELECT * FROM SchemeAnotherPrdDt WHERE SchId=@SchId AND SlabId=@SlabId)
				BEGIN
					INSERT INTO @TempSchGross (SchId,GrossAmount,QPSGrossAmount)
					SELECT @SchId,
					CASE @MRP
					WHEN 1 THEN SUM((CASE @WithTax WHEN 0 THEN A.MRP*BaseQty ELSE A.MRP*BaseQty END))
					WHEN 2 THEN ISNULL(SUM(A.GrossAmount),0)
					WHEN 3 THEN SUM((CASE @WithTax WHEN 0 THEN A.ListPrice*BaseQty ELSE A.ListPrice*BaseQty END)) END
					as GrossAmount,0 FROM BilledPrdHdForScheme A
					INNER JOIN SchemeAnotherPrdDt C ON A.PrdId=C.PrdId AND C.SchId=@SchId AND C.SlabId=@SlabId
					LEFT OUTER JOIN Fn_ReturnSchemeProductBatch(@SchId) B ON
					A.PrdId = B.PrdId AND A.PrdBatId = (CASE B.PrdBatId WHEN 0 THEN A.PrdBatId ELSE B.PrdBatId End)
					WHERE A.UsrId = @Pi_Usrid AND A.TransId = @Pi_TransId
				END
				ELSE
				BEGIN 
					INSERT INTO @TempSchGross (SchId,GrossAmount,QPSGrossAmount)
					SELECT @SchId,
					CASE @MRP
					WHEN 1 THEN SUM((CASE @WithTax WHEN 0 THEN A.MRP*BaseQty ELSE A.MRP*BaseQty END))
					WHEN 2 THEN ISNULL(SUM(A.GrossAmount),0)
					WHEN 3 THEN SUM((CASE @WithTax WHEN 0 THEN A.ListPrice*BaseQty ELSE A.ListPrice*BaseQty END)) END
					as GrossAmount,0 FROM BilledPrdHdForScheme A
					INNER JOIN Fn_ReturnSchemeProductBatch(@SchId) B ON
					A.PrdId = B.PrdId AND A.PrdBatId = (CASE B.PrdBatId WHEN 0 THEN A.PrdBatId ELSE B.PrdBatId End)
					WHERE A.UsrId = @Pi_Usrid AND A.TransId = @Pi_TransId					
				END
			END
			IF  @QPS<>0 
			BEGIN
				INSERT INTO @TempSchGross (SchId,GrossAmount,QPSGrossAmount)
				SELECT @SchId,
				CASE @MRP
				WHEN 1 THEN SUM((CASE @WithTax WHEN 0 THEN A.MRP*BaseQty ELSE A.MRP*BaseQty END))
				WHEN 2 THEN ISNULL(SUM(A.GrossAmount),0)
				WHEN 3 THEN SUM((CASE @WithTax WHEN 0 THEN A.ListPrice*BaseQty ELSE A.ListPrice*BaseQty END)) END
				as GrossAmount,0 FROM BilledPrdHdForQPSScheme A
				INNER JOIN Fn_ReturnSchemeProductBatch(@SchId) B ON
				A.PrdId = B.PrdId AND A.PrdBatId = (CASE B.PrdBatId WHEN 0 THEN A.PrdBatId ELSE B.PrdBatId End)
				WHERE A.UsrId = @Pi_Usrid AND A.TransId = @Pi_TransId AND QPSPrd=1
				AND A.SchId=@SchId
			END	
		END
		IF NOT EXISTS(SELECT * FROM @TempPrdGross WHERE SchId=@SchId)
		BEGIN
			IF @QPS=0 
			BEGIN			
						
				IF EXISTS(SELECT * FROM Fn_ReturnSchemeAnotherProduct(@SchId,@SlabId))
				BEGIN
					INSERT INTO @TempPrdGross (SchId,PrdId,PrdBatId,RowId,GrossAmount,QPSGrossAmount)
					SELECT @SchId,A.PrdId,A.PrdBatId,A.RowId,
					CASE @MRP
					WHEN 1 THEN (CASE @WithTax WHEN 0 THEN A.MRP*BaseQty ELSE A.GrossAmount END)
					WHEN 2 THEN A.GrossAmount
					WHEN 3 THEN (CASE @WithTax WHEN 0 THEN A.ListPrice*BaseQty ELSE A.ListPrice*BaseQty END) END
					as GrossAmount,0 FROM BilledPrdHdForScheme A
					INNER JOIN Fn_ReturnSchemeAnotherProduct(@SchId,@SlabId) B ON
					A.PrdId = B.PrdId
					WHERE A.UsrId = @Pi_Usrid AND A.TransId = @Pi_TransId
				END 
				ELSE
				BEGIN
					INSERT INTO @TempPrdGross (SchId,PrdId,PrdBatId,RowId,GrossAmount,QPSGrossAmount)
					SELECT @SchId,A.PrdId,A.PrdBatId,A.RowId,
					CASE @MRP
					WHEN 1 THEN (CASE @WithTax WHEN 0 THEN A.MRP*BaseQty ELSE A.MRP*BaseQty END)
					WHEN 2 THEN A.GrossAmount
					WHEN 3 THEN (CASE @WithTax WHEN 0 THEN A.ListPrice*BaseQty ELSE A.ListPrice*BaseQty END) END
					as GrossAmount,0 FROM BilledPrdHdForScheme A
					INNER JOIN Fn_ReturnSchemeProductBatch(@SchId) B ON
					A.PrdId = B.PrdId AND A.PrdBatId = (CASE B.PrdBatId WHEN 0 THEN A.PrdBatId ELSE B.PrdBatId End)
					WHERE A.UsrId = @Pi_Usrid AND A.TransId = @Pi_TransId
					UNION ALL
					SELECT @SchId,A.PrdId,A.PrdBatId,A.RowId,
					CASE @MRP
					WHEN 1 THEN (CASE @WithTax WHEN 0 THEN A.MRP*BaseQty ELSE A.GrossAmount END)
					WHEN 2 THEN A.GrossAmount
					WHEN 3 THEN (CASE @WithTax WHEN 0 THEN A.ListPrice*BaseQty ELSE A.ListPrice*BaseQty END) END
					as GrossAmount,0 FROM BilledPrdHdForScheme A
					INNER JOIN Fn_ReturnSchemeAnotherProduct(@SchId,@SlabId) B ON
					A.PrdId = B.PrdId
					WHERE A.UsrId = @Pi_Usrid AND A.TransId = @Pi_TransId
					---CRCRSTPAR0039
					INSERT INTO #PurchaseTarget(Schid,TargetValue)
					SELECT @SchId,Targetvalue FROM  DBO.Fn_RetrunPurchaseSchemeTarget(@SchId,@Pi_Salid,@Pi_TransId,@Pi_Usrid,@Pi_EditMode) WHERE SchemeExists=1 AND Applicable=1
				END
			END
			IF @QPS<>0 
			BEGIN
				IF @Combi=1 
				BEGIN
					INSERT INTO BillAppliedSchemeHd(SchId,SchCode,FlexiSch,FlexiSchType,SlabId,SchemeAmount,SchemeDiscount,Points,FlxDisc,FlxValueDisc,FlxFreePrd,FlxGiftPrd,
					FlxPoints,FreePrdId,FreePrdBatId,FreeToBeGiven,GiftPrdId,GiftPrdBatId,GiftToBeGiven,NoOfTimes,IsSelected,SchBudget,BudgetUtilized,
					TransId,Usrid,PrdId,PrdBatId,SchType)
					SELECT DISTINCT SchId,SchCode,FlexiSch,FlexiSchType,SlabId,SchemeAmount,SchemeDiscount,Points,FlxDisc,FlxValueDisc,FlxFreePrd,FlxGiftPrd,
					FlxPoints,FreePrdId,FreePrdBatId,FreeToBeGiven,GiftPrdId,GiftPrdBatId,GiftToBeGiven,NoOfTimes,IsSelected,SchBudget,BudgetUtilized,
					TransId,Usrid,PrdId,PrdBatId,SchType FROM 
					(SELECT SchId,SchCode,FlexiSch,FlexiSchType,SlabId,SchemeAmount,SchemeDiscount,Points,FlxDisc,FlxValueDisc,FlxFreePrd,FlxGiftPrd,
					FlxPoints,FreePrdId,FreePrdBatId,FreeToBeGiven,GiftPrdId,GiftPrdBatId,GiftToBeGiven,NoOfTimes,IsSelected,SchBudget,BudgetUtilized,
					TransId,Usrid,SchType FROM BillApplieDSchemeHd WHERE SchId=@SchId AND UsrId=@Pi_UsrId AND TransID=@Pi_TransId) A
					CROSS JOIN 
					(
						SELECT A.PrdId,A.PrdBatId FROM BilledPrdHdForQPSScheme A (NOLOCK) 
						INNER JOIN Fn_ReturnSchemeProductBatch(@SchId) B ON A.RowId=10000 AND 
						A.PrdId = B.PrdId AND A.PrdBatId = CASE B.PrdBatId WHEN 0 THEN A.PrdBatId ELSE B.PrdBatId End		
						AND CAST(A.PrdId AS NVARCHAR(10))+'~'+CAST(A.PrdBatId AS NVARCHAR(10)) 
						NOT IN (SELECT CAST(PrdId AS NVARCHAR(10))+'~'+CAST(PrdBatId AS NVARCHAR(10)) FROM BillApplieDSchemeHd WHERE SchId=@SchId
						AND UsrId=@Pi_UsrId AND TransID=@Pi_TransId
					)
					)B
					WHERE CAST(SchId AS NVARCHAR(10))+'~'+CAST(SlabId AS NVARCHAR(10))+CAST(PrdId AS NVARCHAR(10))+'~'+CAST(PrdBatId AS NVARCHAR(10))
					NOT IN (SELECT CAST(SchId AS NVARCHAR(10))+'~'+CAST(SlabId AS NVARCHAR(10))+CAST(PrdId AS NVARCHAR(10))+'~'+CAST(PrdBatId AS NVARCHAR(10))
					FROM BillAppliedSchemeHd WHERE SchId=@SchId AND UsrId=@Pi_UsrId AND TransID=@Pi_TransId)
				END
				INSERT INTO @TempPrdGross (SchId,PrdId,PrdBatId,RowId,GrossAmount,QPSGrossAmount)
				SELECT @SchId,A.PrdId,A.PrdBatId,A.RowId,
				CASE @MRP
				WHEN 1 THEN (CASE @WithTax WHEN 0 THEN A.MRP*BaseQty ELSE A.MRP*BaseQty END)
				WHEN 2 THEN A.GrossAmount
				WHEN 3 THEN (CASE @WithTax WHEN 0 THEN A.ListPrice*BaseQty ELSE A.ListPrice*BaseQty END) END
				AS GrossAmount,0 FROM BilledPrdHdForQPSScheme A
				LEFT OUTER JOIN Fn_ReturnSchemeProductBatch(@SchId) B ON
				A.PrdId = B.PrdId AND A.PrdBatId = (CASE B.PrdBatId WHEN 0 THEN A.PrdBatId ELSE B.PrdBatId End)
				WHERE A.UsrId = @Pi_Usrid AND A.TransId = @Pi_TransId AND A.QPSPrd=1
				UNION ALL
				SELECT @SchId,A.PrdId,A.PrdBatId,A.RowId,
				CASE @MRP
				WHEN 1 THEN (CASE @WithTax WHEN 0 THEN A.MRP*BaseQty ELSE A.GrossAmount END)
				WHEN 2 THEN A.GrossAmount
				WHEN 3 THEN (CASE @WithTax WHEN 0 THEN A.ListPrice*BaseQty ELSE A.ListPrice*BaseQty END) END
				AS GrossAmount,0 FROM BilledPrdHdForQPSScheme A
				INNER JOIN Fn_ReturnSchemeAnotherProduct(@SchId,@SlabId) B ON A.PrdId = B.PrdId AND A.QPSPrd=0
				WHERE A.UsrId = @Pi_Usrid AND A.TransId = @Pi_TransId AND A.SchId=@SchId
				IF @QPSDateQty=2 
				BEGIN
					UPDATE TPGS SET TPGS.RowId=BP.RowId
					FROM @TempPrdGross TPGS,BilledPrdHdForQPSScheme BP
					WHERE TPGS.PrdId=BP.PrdId AND TPGS.PrdBatId=BP.PrdBatId AND UsrId=@Pi_UsrId AND TransId=@Pi_TransId AND BP.RowId<>10000
					AND TPGS.SchId=BP.SchId
					UPDATE C SET C.GrossAmount=C.GrossAmount+A.OtherGross
					FROM @TempPrdGross C,
					(SELECT SchId,SUM(GrossAmount) AS OtherGross FROM @TempPrdGross WHERE RowId=10000
					GROUP BY SchID) A,
					(SELECT SchId,ISNULL(MIN(RowId),2)  AS RowId FROM @TempPrdGross WHERE RowId<>10000 
					GROUP BY SchId) B
					WHERE A.SchId=B.SchId AND B.SchId=C.SchId AND B.RowId=C.RowId
					DELETE FROM @TempPrdGross WHERE RowId=10000
				END
				ELSE
				BEGIN
					UPDATE TPGS SET TPGS.RowId=BP.RowId
					FROM @TempPrdGross  TPGS,
					(
						SELECT SchId,ISNULL(MIN(RowId),2) RowId FROM BilledPrdHdForQPSScheme
						WHERE UsrId=@Pi_UsrId AND TransId=@Pi_TransId
						GROUP BY SchId
					) AS BP
					WHERE TPGS.SchId=BP.SchId 
				END	
			END
		END
		INSERT INTO @MoreBatch SELECT SchId,SlabId,PrdId,COUNT(DISTINCT PrdId),
		COUNT(DISTINCT PrdBatId),SchType FROM BillAppliedSchemeHd
		WHERE TransId=@Pi_TransId AND UsrId=@Pi_UsrId GROUP BY SchId,SlabId,PrdId,SchType
		HAVING COUNT(DISTINCT PrdBatId)> 1
		IF EXISTS (SELECT * FROM @MoreBatch WHERE SchId=@SchId AND SlabId=@SlabId)
		BEGIN
			INSERT INTO @SchFlatAmt
			SELECT SchId,SlabId,FlatAmt,DiscPer,0 FROM SchemeSlabs
			WHERE SchId=@SchId AND SlabId=@SlabId
			INSERT INTO @SchFlatAmt
			SELECT SchId,SlabId,FlatAmt,DiscPer,1 FROM SchemeAnotherPrdDt
			WHERE SchId=@SchId AND SlabId=@SlabId
		END
	FETCH NEXT FROM CurSchid INTO @SchId,@SlabId
	END
	CLOSE CurSchid
	DEALLOCATE CurSchid
	----->
				
	SELECT DISTINCT * INTO TG FROM @TempSchGross
	SELECT DISTINCT * INTO TP FROM @TempPrdGross
	DELETE FROM @TempPrdGross
			
	INSERT INTO @TempPrdGross
	SELECT * FROM TP 
			
			
	---->For Scheme on Another Product QPS	
	UPDATE TPG SET TPG.GrossAmount=(TPG.GrossAmount/TSG.BilledGross)*TSG1.GrossAmount
	FROM @TempPrdGross TPG,(SELECT SchId,SUM(GrossAmount) AS BilledGross FROM @TempPrdGross GROUP BY SchId) TSG,
	@TempSchGross TSG1,SchemeMaster SM ,SchemeAnotherPrdHd SMA
	WHERE TPG.SchId=TSG.SchId AND TSG.SchId=TSG1.SchId AND SM.SchId=TPG.SchId AND SM.SchId=SMA.SchId
	UPDATE T1 SET QPSGrossAmount=A.GrossAmount
	FROM @TempPrdGross T1,BilledPrdHdForQPSScheme A
	WHERE T1.RowId=A.RowID AND T1.PrdId=A.PrdId AND T1.PrdBatId=A.PrdBatId AND A.TransId=@Pi_TransID AND A.UsrId=@Pi_UsrId
	AND A.QPSPrd=0 AND A.SchId=T1.SchId 
	UPDATE S1 SET S1.QPSGrossAmount=A.QPSGross	
	FROM @TempSchGross S1,(SELECT SchId,SUM(QPSGrossAmount) AS QPSGross FROM @TempPrdGross GROUP BY SchId) AS A
	WHERE A.SchId=S1.SchId
			
	IF EXISTS (SELECT Status FROM Configuration WHERE ModuleId = 'SCHEMESTNG14' AND Status = 1 )
	BEGIN
		SELECT @RefCode = Condition FROM Configuration WHERE ModuleId = 'SCHEMESTNG14' AND Status = 1
		INSERT INTO @PDSchID (PrdId,PrdBatId,PDSchId,PDSlabId)
		SELECT SP.PrdId,SP.PrdBatId,BAS.SchId AS PDSchId,MIN(BAS.SlabId) AS PDSlabId
		FROM @TempPrdGross SP
		INNER JOIN BillAppliedSchemeHd BAS ON SP.SchId=BAS.SchId AND SchemeDiscount>0
		INNER JOIN (SELECT DISTINCT SP1.PrdId,SP1.PrdBatId,MIN(BAS1.SchId) AS MinSchId
		FROM BillAppliedSchemeHd BAS1,@TempPrdGross SP1
		WHERE SP1.SchId=BAS1.SchId
		AND SchemeDiscount >0 AND BAS1.UsrId = @Pi_Usrid AND BAS1.TransId = @Pi_TransId
		GROUP BY SP1.PrdId,SP1.PrdBatId) AS A ON A.MinSchId=BAS.SchId AND A.PrdId=SP.PrdId
		AND A.PrdBatId=SP.PrdBatId AND BAS.UsrId = @Pi_Usrid AND BAS.TransId = @Pi_TransId
		GROUP BY SP.PrdId,SP.PrdBatId,BAS.SchId
		IF @Pi_TransId=2
		BEGIN
			DECLARE @DiscPer TABLE
			(
				PrdId  INT,
				PrdBatId INT,
				DiscPer  NUMERIC(18,6),
				GrossAmount NUMERIC(18,6),
				RowId  INT
			)
			INSERT INTO @DiscPer
			SELECT SP1.PrdId,SP1.PrdBatId,ISNULL(SUM(BAS1.SchemeDiscount),0),SP1.GrossAmount,SP1.RowId
			FROM BillAppliedSchemeHd BAS1 LEFT OUTER JOIN @TempPrdGross SP1
			ON SP1.SchId=BAS1.SchId AND SP1.PrdId=BAS1.PrdId AND SP1.PrdBatId=BAS1.PrdBatId WHERE IsSelected=1 AND
			SchemeDiscount>0 AND BAS1.UsrId = @Pi_Usrid AND BAS1.TransId = @Pi_TransId
			GROUP BY SP1.PrdId,SP1.PrdBatId,SP1.RowId,SP1.GrossAmount
			INSERT INTO ApportionSchemeDetails (RowId,PrdId,PrdBatId,SchId,SlabId,Contri,SchemeAmount,SchemeDiscount,
			FreeQty,TransId,Usrid,DiscPer)
			SELECT C.RowId,C.PrdId,C.PrdBatId,A.SchId as Schid,SlabId as SlabId,
			(CASE B.GrossAmount WHEN 0 THEN 0 ELSE (C.GrossAmount / B.GrossAmount) * 100 END) As Contri,
			CASE 
				WHEN QPS=1 THEN
					(SchemeAmount * (CASE B.QPSGrossAmount WHEN 0 THEN 0 ELSE (C.QPSGrossAmount / B.QPSGrossAmount) * 100 END))/100
				ELSE  
					SchemeAmount 
				END  
			As SchemeAmount,
			C.GrossAmount - (C.GrossAmount / (1  +
			(
			(
				CASE CAST(PD.PDSchId AS NVARCHAR(10))+'-'+CAST(PD.PDSlabId AS NVARCHAR(10))  --First Case Start
					WHEN CAST(A.SchId AS NVARCHAR(10))+'-'+CAST(A.SlabId AS NVARCHAR(10)) THEN
						CASE dbo.Fn_ReturnPrimarySchRetCateGOry(@RtrId,@Pi_TransId) --Second Case Start
							WHEN 1 THEN  
								D.PrdBatDetailValue  
							ELSE 0 
						END     --Second Case End
					ELSE 0 
				END) + SchemeDiscount)/100))      --First Case END
			As SchemeDiscount,0 As FreeQty,
			@Pi_TransId As TransId,@Pi_UsrId as UsrId,SchemeDiscount
			FROM BillAppliedSchemeHd A INNER JOIN @TempSchGross B ON
			A.SchId = B.SchId INNER JOIN @TempPrdGross C ON A.Schid = C.SchId
			AND A.PrdId=C.PrdId AND A.PrdBatId=C.PrdBatId and B.SchId = C.SchId
			INNER JOIN SchemeMaster SM ON SM.Schid=A.Schid and C.Schid=SM.Schid and SM.Schid=B.Schid	 		
			INNER JOIN ProductBatchDetails D ON D.PrdBatId = C.PrdBatId
			AND D.DefaultPrice=1 INNER JOIN BatchCreation E ON D.BatchSeqId = E.BatchSeqId
			AND E.Slno = D.Slno AND E.RefCode = @RefCode
			LEFT OUTER JOIN @PDSchID PD ON C.PrdId= PD.PrdId AND
			(CASE PD.PrdBatId WHEN 0 THEN C.PrdBatId ELSE PD.PrdBatId END)=C.PrdBatId
			AND PD.PDSchId=A.SchId
			WHERE A.UsrId = @Pi_Usrid AND A.TransId = @Pi_TransId AND IsSelected = 1
			AND (A.SchemeAmount + A.SchemeDiscount) > 0
			SELECT  A.RowId,A.PrdId,A.PrdBatId,D.PrdBatDetailValue,
			C.GrossAmount - (C.GrossAmount / (1  +
			((CASE CAST(PD.PDSchId AS NVARCHAR(10))+'-'+CAST(PD.PDSlabId AS NVARCHAR(10))  --First Case Start
			WHEN CAST(F.SchId AS NVARCHAR(10))+'-'+CAST(F.SlabId AS NVARCHAR(10)) THEN
			CASE dbo.Fn_ReturnPrimarySchRetCateGOry(@RtrId,@Pi_TransId) WHEN 1 THEN  --Second Case Start
				D.PrdBatDetailValue  END     --Second Case End
			ELSE 0 END) + DiscPer)/100)) AS SchAmt,F.SchId,F.SlabId
			INTO #TempFinal
			FROM @DiscPer A
			INNER JOIN @TempPrdGross C ON  A.PrdId = C.PrdId AND A.PrdBatId=C.PrdBatId AND A.RowId=C.RowId
			INNER JOIN ProductBatchDetails D ON D.PrdBatId = C.PrdBatId AND D.PrdbatId=A.PrdBatId
			AND D.DefaultPrice=1 INNER JOIN BatchCreation E ON D.BatchSeqId = E.BatchSeqId
			AND E.Slno = D.Slno AND E.RefCode = @RefCode
			LEFT OUTER JOIN @PDSchID PD ON A.PrdId= PD.PrdId AND PD.PDSchId=C.SchId AND
			(CASE PD.PrdBatId WHEN 0 THEN A.PrdBatId ELSE PD.PrdBatId END)=C.PrdBatId
			INNER JOIN BillAppliedSchemeHd F ON F.SchId=PD.PDSCHID AND A.PrdId=F.PrdId AND A.PrdBatId=F.PrdBatId
					
			SELECT A.RowId,A.PrdId,A.PrdBatId,A.SchId,A.SlabId,A.DiscPer,
			(A.DiscPer+isnull(PrdbatDetailValue,0))
			as DISC,
			isnull(SUM(A.DiscPer+PrdbatDetailValue),SUM(A.DiscPer)) AS DiscSUM,ISNULL(B.SchAmt,0) AS SchAmt,
			CASE  WHEN (ISNULL(PrdbatDetailValue,0)>0 AND A.DiscPer > 0 )THEN 1
				WHEN (ISNULL(PrdbatDetailValue,0)=0 AND A.DiscPer > 0) THEN 2
				ELSE 3 END as Status
			INTO #TempSch1
			FROM ApportionSchemeDetails A LEFT OUTER JOIN #TempFinal B ON
			A.RowId =B.RowId AND A.PrdId =B.PrdId AND A.PrdBatId=B.PrdBatId
			AND A.SchId=B.SchId AND A.SlabId=B.SlabId AND A.DiscPer > 0 AND A.TransId=@Pi_TransId AND A.UsrId=@Pi_UsrId
			GROUP BY A.RowId,A.PrdId,A.PrdBatId,A.SchId,A.SlabId,A.DiscPer,B.PrdbatDetailValue,B.SchAmt
			UPDATE #TempSch1 SET SchAmt=B.SchAmt
			FROM #TempFinal B
			WHERE  #TempSch1.RowId=B.RowId AND #TempSch1.PrdId=B.PrdId AND #TempSch1.PrdBatId=B.PrdBatId
					
			SELECT A.RowId,A.PrdId,A.PrdBatId,ISNULL(SUM(Disc),0) AS SUMDisc
			INTO #TempSch2
			FROM #TempSch1 A
			GROUP BY A.RowId,A.PrdId,A.PrdBatId
			UPDATE #TempSch1 SET DiscSUM=ISNULL((Disc/NULLIF(SUMDisc,0)),0)*SchAmt
			FROM #TempSch2 B
			WHERE #TempSch1.RowId=B.RowId AND #TempSch1.PrdId=B.PrdId AND #TempSch1.PrdBatId=B.PrdBatId
			UPDATE ApportionSchemeDetails SET SchemeDiscount=DiscSUM
			FROM #TempSch1 B,ApportionSchemeDetails A
			WHERE A.RowId=B.RowId AND A.PrdId = B.PrdId AND A.PrdBatId=B.PrdBatId AND A.SchId=B.SchId AND
			A.SlabId= B.SlabId AND B.Status<3  AND A.TransId=@Pi_TransId AND A.UsrId=@Pi_UsrId
		END
		ELSE
		BEGIN
			INSERT INTO ApportionSchemeDetails (RowId,PrdId,PrdBatId,SchId,SlabId,Contri,SchemeAmount,SchemeDiscount,
			FreeQty,TransId,Usrid,DiscPer,SchType)
			SELECT C.RowId,C.PrdId,C.PrdBatId,A.SchId as Schid,SlabId as SlabId,
			(CASE B.GrossAmount WHEN 0 THEN 0 ELSE (C.GrossAmount / B.GrossAmount) * 100 END) As Contri,
			Case WHEN QPS=1 THEN
			(SchemeAmount * (CASE B.QPSGrossAmount WHEN 0 THEN 0 ELSE (C.QPSGrossAmount / B.QPSGrossAmount) * 100 END))/100
			ELSE  SchemeAmount END  As SchemeAmount,
			C.GrossAmount - (C.GrossAmount /(1 +
			((CASE CAST(PD.PDSchId AS NVARCHAR(10))+'-'+CAST(PD.PDSlabId AS NVARCHAR(10))  --First Case Start
			WHEN CAST(A.SchId AS NVARCHAR(10))+'-'+CAST(A.SlabId AS NVARCHAR(10)) THEN
			CASE dbo.Fn_ReturnPrimarySchRetCateGOry(@RtrId,@Pi_TransId) WHEN 1 THEN  --Second Case Start
			D.PrdBatDetailValue  ELSE 0 END     --Second Case End
			ELSE 0 END) + SchemeDiscount)/100))       --First Case END
			As SchemeDiscount,0 As FreeQty,
			@Pi_TransId As TransId,@Pi_UsrId as UsrId,SchemeDiscount,A.SchType
			FROM BillAppliedSchemeHd A INNER JOIN @TempSchGross B ON
			A.SchId = B.SchId AND (A.SchemeAmount + A.SchemeDiscount) > 0
			INNER JOIN @TempPrdGross C ON A.Schid = C.SchId and B.SchId = C.SchId AND
			A.PrdId=C.PrdId AND A.PrdBatId=C.PrdBatId
			INNER JOIN SchemeMaster SM ON SM.Schid=A.Schid and C.Schid=SM.Schid and SM.Schid=B.Schid	 	
			INNER JOIN ProductBatchDetails D ON D.PrdBatId = C.PrdBatId
			AND D.DefaultPrice=1 INNER JOIN BatchCreation E ON D.BatchSeqId = E.BatchSeqId
			AND E.Slno = D.Slno AND E.RefCode = @RefCode
			LEFT OUTER JOIN @PDSchID PD ON C.PrdId= PD.PrdId AND
			(CASE PD.PrdBatId WHEN 0 THEN C.PrdBatId ELSE PD.PrdBatId END)=C.PrdBatId
			WHERE A.UsrId = @Pi_Usrid AND A.TransId = @Pi_TransId AND IsSelected = 1
		END
	END
	ELSE
	BEGIN
		---->For Scheme on Another Product QPS
		IF EXISTS(SELECT SchId FROM BillAppliedSchemeHd WHERE UsrId=@Pi_UsrId AND TransId=@Pi_TransId
		AND SchId IN (SELECT SchId FROM SchemeMaster WHERE QPS=1 AND QPSReset=1)
		GROUP BY SchId HAVING COUNT(DISTINCT SlabId)>1)
		BEGIN
			SELECT DISTINCT TP.SchId,BA.SlabId,TP.PrdId,TP.PrdBatId,TP.RowId,TP.GrossAmount 
			INTO TPQ FROM BillAppliedSchemeHd BA
			INNER JOIN SchemeMaster SM ON BA.SchId=SM.SchId AND Sm.QPS=1 AND SM.QPSReset=1
			INNER JOIN @TempPrdGross TP ON TP.SchId=BA.SchId
			SELECT DISTINCT TG.SchId,BA.SlabId,TG.GrossAmount 
			INTO TGQ FROM BillAppliedSchemeHd BA
			INNER JOIN SchemeMaster SM ON BA.SchId=SM.SchId AND Sm.QPS=1 AND SM.QPSReset=1
			INNER JOIN @TempSchGross TG ON TG.SchId=BA.SchId
					
			SELECT A.SchId,A.MaxSlabId,SS.PurQty
			INTO SchMaxSlab FROM
			(SELECT SM.SchId,MAX(SS.SlabId) AS MaxSlabId
			FROM SchemeMaster SM,SchemeSlabs SS
			WHERE SM.SchId=SS.SchId AND SM.QPSReset=1 
			GROUP BY SM.SchId) A,
			SchemeSlabs SS
			WHERE A.SchId=SS.SchId AND A.MaxSlabId=SS.SlabId 
			DECLARE @MSSchId AS INT
			DECLARE @MaxSlabId AS INT
			DECLARE @MSPurQty AS NUMERIC(38,6)
			DECLARE Cur_QPSSlabs CURSOR FOR 
			SELECT SchId,MaxSlabId,PurQty
			FROM SchMaxSlab
			OPEN Cur_QPSSlabs
			FETCH NEXT FROM Cur_QPSSlabs INTO @MSSchId,@MaxSlabId,@MSPurQty
			WHILE @@FETCH_STATUS=0
			BEGIN		
				UPDATE TGQ SET GrossAmount=@MSPurQty 
				WHERE SchId=@MSSchId AND SlabId=@MaxSlabId
				UPDATE TGQ SET GrossAmount=GrossAmount-@MSPurQty 
				WHERE SchId=@MSSchId AND SlabId<@MaxSlabId
				FETCH NEXT FROM Cur_QPSSlabs INTO @MSSchId,@MaxSlabId,@MSPurQty
			END
			CLOSE Cur_QPSSlabs
			DEALLOCATE Cur_QPSSlabs
			UPDATE T SET T.GrossAmount=(T.GrossAmount/TG.GrossAmount)*TGQ.GrossAmount
			FROM TPQ T,TG,TGQ
			WHERE T.SchId=TG.SchId AND TG.SchId=TGQ.SchId AND TGQ.SlabId=T.SlabId 	
			INSERT INTO ApportionSchemeDetails (RowId,PrdId,PrdBatId,SchId,SlabId,Contri,SchemeAmount,
			SchemeDiscount,FreeQty,TransId,Usrid,DiscPer,SchType)
			SELECT C.RowId,C.PrdId,C.PrdBatId,A.SchId as Schid,A.SlabId as SlabId,
			(CASE B.GrossAmount WHEN 0 THEN 0 ELSE (C.GrossAmount / B.GrossAmount) * 100 END) As Contri,
			Case WHEN QPS=1 THEN
			(SchemeAmount * (CASE B.GrossAmount WHEN 0 THEN 0 ELSE (C.GrossAmount / B.GrossAmount) * 100 END))/100
			ELSE  SchemeAmount END  As SchemeAmount
			,(C.GrossAmount * A.SchemeDiscount)/100 As SchemeDiscount,0 As FreeQty,
			@Pi_TransId AS TransId,@Pi_UsrId AS UsrId,SchemeDiscount,A.SchType
			FROM BillAppliedSchemeHd A 
			INNER JOIN TGQ B ON	A.SchId = B.SchId AND A.SlabId=B.SlabId
			INNER JOIN TPQ C ON A.Schid = C.SchId and B.SchId = C.SchId  AND B.SlabId=C.SlabId
			INNER JOIN SchemeMaster SM ON SM.Schid=A.Schid and C.Schid=SM.Schid and SM.Schid=B.Schid AND QPS=1 AND QPSReset=1	
			WHERE A.UsrId = @Pi_UsrId AND A.TransId = @Pi_TransId AND IsSelected = 1
			AND SM.SchId NOT IN (SELECT SMA.SchId FROM SchemeAnotherPrdHd SMA,SchemeMaster SM WHERE SMA.SchId=SM.SchId AND SM.QPS=1)	
			AND SM.SchId IN (SELECT SchId FROM BillAppliedSchemeHd WHERE UsrId=@Pi_UsrId AND TransId=@Pi_TransId
			GROUP BY SchId HAVING COUNT(DISTINCT SlabId)>1)
		END
		INSERT INTO ApportionSchemeDetails (RowId,PrdId,PrdBatId,SchId,SlabId,Contri,SchemeAmount,
		SchemeDiscount,FreeQty,TransId,Usrid,DiscPer,SchType)
		SELECT DISTINCT C.RowId,C.PrdId,C.PrdBatId,A.SchId as Schid,A.SlabId as SlabId,
		(CASE B.GrossAmount WHEN 0 THEN 0 ELSE (C.GrossAmount / B.GrossAmount) * 100 END) As Contri,
		Case WHEN QPS=1 THEN
		(SchemeAmount * (CASE B.QPSGrossAmount WHEN 0 THEN 0 ELSE (C.QPSGrossAmount / B.QPSGrossAmount) * 100 END))/100
		ELSE  SchemeAmount END  As SchemeAmount
		,(C.GrossAmount * A.SchemeDiscount)/100 As SchemeDiscount,0 As FreeQty,
		@Pi_TransId As TransId,@Pi_UsrId as UsrId,SchemeDiscount,A.SchType
		FROM BillAppliedSchemeHd A INNER JOIN @TempSchGross B ON
		A.SchId = B.SchId 
		INNER JOIN @TempPrdGross C ON A.Schid = C.SchId and B.SchId = C.SchId		
		INNER JOIN SchemeMaster SM ON SM.Schid=A.Schid and C.Schid=SM.Schid and SM.Schid=B.Schid and SM.QPS=1 	  		
		INNER JOIN SchemeAnotherPrdDt SOP ON SM.SchId=SOP.SchId AND A.SchId=SOP.SchId AND A.SlabId=SOP.SlabId
		AND A.PrdId=SOP.PrdId AND SOP.Prdid=C.PrdId 
		WHERE A.UsrId = @Pi_Usrid AND A.TransId = @Pi_TransId AND IsSelected = 1 
		AND SM.SchId IN (SELECT SchId FROM SchemeAnotherPrdHd)
		AND SM.SchId NOT IN (SELECT SchId FROM BillAppliedSchemeHd WHERE UsrId=@Pi_UsrId AND TransId=@Pi_TransId
		AND SchId IN (SELECT SchId FROM SchemeMaster WHERE QPS=1 AND QPSReset=1)
		GROUP BY SchId HAVING COUNT(DISTINCT SlabId)>1)
				
				
		INSERT INTO ApportionSchemeDetails (RowId,PrdId,PrdBatId,SchId,SlabId,Contri,SchemeAmount,
		SchemeDiscount,FreeQty,TransId,Usrid,DiscPer,SchType)
		SELECT C.RowId,C.PrdId,C.PrdBatId,A.SchId as Schid,SlabId as SlabId,
		(CASE B.GrossAmount WHEN 0 THEN 0 ELSE (CAST(CAST(C.GrossAmount AS NUMERIC(30,10))/CAST(B.GrossAmount AS NUMERIC(30,10)) AS NUMERIC(38,6))) * 100 END) As Contri,
		Case WHEN QPS=1 THEN
		(SchemeAmount * (CASE B.GrossAmount WHEN 0 THEN 0 ELSE (C.GrossAmount / B.GrossAmount) * 100 END))/100
		ELSE  (CASE SM.FlexiSch WHEN 1 THEN (SchemeAmount * (CASE B.GrossAmount WHEN 0 THEN 0 ELSE (CAST(CAST(C.GrossAmount AS NUMERIC(30,10))/CAST(B.GrossAmount AS NUMERIC(30,10)) AS NUMERIC(38,6))) * 100 END))/100 
		ELSE SchemeAmount END) END  As SchemeAmount
		,(C.GrossAmount * A.SchemeDiscount)/100 As SchemeDiscount,0 As FreeQty,
		@Pi_TransId As TransId,@Pi_UsrId as UsrId,SchemeDiscount,A.SchType
		FROM BillAppliedSchemeHd A INNER JOIN @TempSchGross B ON A.SchId = B.SchId 
		INNER JOIN @TempPrdGross C ON A.Schid = C.SchId and B.SchId = C.SchId
		AND A.PrdId=C.PrdId AND A.PrdBatId=C.PrdBatId
		INNER JOIN SchemeMaster SM ON SM.Schid=A.Schid and C.Schid=SM.Schid and SM.Schid=B.Schid 
		AND SM.CombiSch=0
		WHERE A.UsrId = @Pi_Usrid AND A.TransId = @Pi_TransId AND IsSelected = 1
		AND SM.SchId NOT IN (SELECT SMA.SchId FROM SchemeAnotherPrdHd SMA,SchemeMaster SM WHERE SMA.SchId=SM.SchId AND SM.QPS=1)
		AND SM.SchId NOT IN (SELECT SchId FROM BillAppliedSchemeHd WHERE UsrId=@Pi_UsrId AND TransId=@Pi_TransId
		AND SchId IN (SELECT SchId FROM SchemeMaster WHERE QPS=1 AND QPSReset=1)
		GROUP BY SchId HAVING COUNT(DISTINCT SlabId)>1)
				
				
		INSERT INTO ApportionSchemeDetails (RowId,PrdId,PrdBatId,SchId,SlabId,Contri,SchemeAmount,
		SchemeDiscount,FreeQty,TransId,Usrid,DiscPer,SchType)
		SELECT C.RowId,C.PrdId,C.PrdBatId,A.SchId as Schid,SlabId as SlabId,
		(CASE B.GrossAmount WHEN 0 THEN 0 ELSE (C.GrossAmount / B.GrossAmount) * 100 END) As Contri,
		Case WHEN  (QPS=1 AND CombiSch=0) OR (QPS=0 AND CombiSch=1) THEN
		SchemeAmount 
		ELSE  (
				CASE   WHEN SM.FlexiSch=1 THEN (SchemeAmount * (CASE B.GrossAmount WHEN 0 THEN 0 ELSE (C.GrossAmount / B.GrossAmount) * 100 END))/100 
						WHEN SM.CombiSch=1 THEN (SchemeAmount * (CASE B.GrossAmount WHEN 0 THEN 0 ELSE (C.GrossAmount / B.GrossAmount) * 100 END))/100  
				ELSE SchemeAmount END) END  As SchemeAmount
		,(C.GrossAmount * A.SchemeDiscount)/100 As SchemeDiscount,0 As FreeQty,
		@Pi_TransId As TransId,@Pi_UsrId as UsrId,SchemeDiscount,A.SchType
		FROM BillAppliedSchemeHd A INNER JOIN @TempSchGross B ON
		A.SchId = B.SchId 
		INNER JOIN @TempPrdGross C ON A.Schid = C.SchId and B.SchId = C.SchId
		AND A.PrdId=C.PrdId AND A.PrdBatId=C.PrdBatId
		INNER JOIN SchemeMaster SM ON SM.Schid=A.Schid and C.Schid=SM.Schid and SM.Schid=B.Schid 
		AND SM.CombiSch=1
		WHERE A.UsrId = @Pi_Usrid AND A.TransId = @Pi_TransId AND IsSelected = 1
		AND SM.SchId NOT IN (SELECT SMA.SchId FROM SchemeAnotherPrdHd SMA,SchemeMaster SM WHERE SMA.SchId=SM.SchId AND SM.QPS=1)
	END
	--Added by Boopathy.P  on 04-08-2011 
	IF EXISTS(SELECT * FROM SalesinvoiceTrackFlexiScheme WHERE UsrId=@Pi_UsrId AND TransID=@Pi_TransId)
	BEGIN
		UPDATE A SET A.DiscPer=B.DiscPer FROM ApportionSchemeDetails A INNER JOIN SalesinvoiceTrackFlexiScheme B
		ON A.SchId=B.SchId AND A.SlabId=B.SlabId AND A.UsrId=B.UsrId AND A.TransId=B.TransId
		WHERE A.UsrId=@Pi_UsrId AND A.TransID=@Pi_TransId
	END
			
	INSERT INTO @FreeQtyDt (FreePrdid,FreePrdBatId,FreeQty,SchId)
	SELECT DISTINCT FreePrdId,FreePrdBatId,SUM(DISTINCT FreeToBeGiven) As FreeQty,SchId from BillAppliedSchemeHd A
	WHERE A.UsrId = @Pi_Usrid AND A.TransId = @Pi_TransId AND IsSelected = 1 
	GROUP BY FreePrdId,FreePrdBatId,SchId
	INSERT INTO @FreeQtyRow (RowId,PrdId,PrdBatId)
	SELECT MIN(A.RowId) as RowId,A.Prdid,MAX(A.PrdBatId) FROM BilledPrdHdForScheme A
	INNER JOIN BillAppliedSchemeHd B ON A.PrdId = B.PrdId AND
	A.PrdBatid = B.PrdBatId
	WHERE A.UsrId = @Pi_Usrid AND A.TransId = @Pi_TransId AND
	B.UsrId = @Pi_Usrid AND B.TransId = @Pi_TransId AND IsSelected = 1
	GROUP BY A.Prdid
	UPDATE ApportionSchemeDetails SET FreeQty = A.FreeQty FROM
	@FreeQtyDt A INNER JOIN @FreeQtyRow B ON
	A.FreePrdId  = B.PrdId
	WHERE ApportionSchemeDetails.RowId = B.RowId AND  ApportionSchemeDetails.PrdId = B.PrdId 
	AND A.SchId=ApportionSchemeDetails.SchId 
	AND ApportionSchemeDetails.UsrId = @Pi_UsrId AND ApportionSchemeDetails.TransId = @Pi_TransId
	AND CAST(ApportionSchemeDetails.SchId AS NVARCHAR(10))+'~'+CAST(ApportionSchemeDetails.SlabId AS NVARCHAR(10)) 
	IN (
	SELECT CAST(SchId AS NVARCHAR(10))+'~'+CAST(SlabId AS NVARCHAR(10)) 
	FROM BillAppliedSchemeHd A WHERE FreeToBeGiven>0 
	)
	--->Added the SchId+SlabId Concatenation By Nanda on 15/12/2010 in the above statement
	--->Added By Nanda on 20/09/2010
	SELECT * INTO #TempApp FROM ApportionSchemeDetails	
	DELETE FROM ApportionSchemeDetails
	INSERT INTO ApportionSchemeDetails
	SELECT DISTINCT * FROM #TempApp
	--->Till Here
	SELECT DISTINCT * FROM #TempApp
	UPDATE ApportionSchemeDetails SET SchemeAmount=0 WHERE DiscPer>0 AND TransId=@Pi_TransId AND UsrId=@Pi_UsrId
	UPDATE ApportionSchemeDetails SET SchemeAmount=SchemeAmount+SchAmt,SchemeDiscount=SchemeDiscount+SchDisc
	FROM 
	(SELECT SchId,SUM(SchemeAmount) SchAmt,SUM(SchemeDiscount) SchDisc FROM ApportionSchemeDetails
	WHERE RowId=10000 GROUP BY SchId) A,
	(SELECT SchId,MIN(RowId) RowId FROM ApportionSchemeDetails WHERE TransId=@Pi_TransId AND UsrId=@Pi_UsrId
	GROUP BY SchId) B
	WHERE ApportionSchemeDetails.SchId =  A.SchId AND A.SchId=B.SchId 
	AND ApportionSchemeDetails.RowId=B.RowId AND ApportionSchemeDetails.TransId=@Pi_TransId AND ApportionSchemeDetails.UsrId=@Pi_UsrId  
	DELETE FROM ApportionSchemeDetails WHERE RowId=10000
	INSERT INTO @RtrQPSIds
	SELECT DISTINCT RtrId,SchId FROM BilledPrdHdForQPSScheme WHERE UsrId=@Pi_UsrId AND TransId=@Pi_TransId
	IF @Pi_Mode=0
	BEGIN
		INSERT INTO @QPSGivenDisc
		SELECT A.SchId,SUM(A.DiscountPerAmount+A.FlatAmount) FROM 
		(SELECT DISTINCT SISL.SalId,SISL.SchId,SISL.SlabId,SISL.PrdId,SISL.PrdBatId,
		SISL.DiscountPerAmount-SISL.ReturnDiscountPerAmount AS DiscountPerAmount,SISL.FlatAmount-SISL.ReturnFlatAmount AS FlatAmount
		FROM SalesInvoiceSchemeLineWise SISL,(SELECT DISTINCT SchId,SlabId,TransId,UsrId FROM ApportionSchemeDetails 
		WHERE DiscPer>0 AND TransId=@Pi_TransID AND UsrId=@Pi_UsrId
		) A,SchemeMaster SM ,SalesInvoice SI,@RtrQPSIds RQPS
		WHERE A.TransId=@Pi_TransId AND A.UsrId=@Pi_UsrId AND SM.QPS=1 AND SM.FlexiSch=0
		AND A.SchId=SM.SchId AND SISL.SchId=A.SchId AND SI.RtrId=RQPS.RtrId AND SI.SalId=SISL.SalId AND Si.DlvSts>3
		) A	
		GROUP BY A.SchId
		UNION  -- Added by Boopathy.P on 09-08-2011 for Bug No:23402
		SELECT A.SchId,SUM(A.DiscountPerAmount+A.FlatAmount) FROM 
		(SELECT DISTINCT SISL.SalId,SISL.SchId,SISL.SlabId,SISL.PrdId,SISL.PrdBatId,
		SISL.DiscountPerAmount-SISL.ReturnDiscountPerAmount AS DiscountPerAmount,SISL.FlatAmount-SISL.ReturnFlatAmount AS FlatAmount
		FROM SalesInvoiceSchemeLineWise SISL,(SELECT DISTINCT SchId,SlabId,TransId,UsrId FROM ApportionSchemeDetails 
		WHERE DiscPer>0 AND TransId=@Pi_TransID AND UsrId=@Pi_UsrId
		) A,SchemeMaster SM ,SalesInvoice SI,@RtrQPSIds RQPS
		WHERE A.TransId=@Pi_TransId AND A.UsrId=@Pi_UsrId AND (SM.FlexiSch=1 AND SM.FlexiSchType=1 AND SM.QPS=1) 
		AND A.SchId=SM.SchId AND SISL.SchId=A.SchId AND SI.RtrId=RQPS.RtrId AND SI.SalId=SISL.SalId AND Si.DlvSts>3
		) A	
		GROUP BY A.SchId
		UPDATE A SET A.Amount=A.Amount+C.CrNoteAmount
		FROM @QPSGivenDisc A,
		(SELECT B.SchId,SUM(B.CrNoteAmount) AS CrNoteAmount FROM SalesInvoiceQPSSchemeAdj B,@RtrQPSIds QPS,SalesInvoice SI
		WHERE B.RtrId=QPS.RtrID AND SI.SalId=B.SalId AND SI.DlvSts>3 AND SI.RtrId=QPS.RtrId AND QPS.SchId=B.SchId
		GROUP BY B.SchId) C
		WHERE A.SchId=C.SchId
		INSERT INTO @QPSGivenDisc
		SELECT B.SchId,SUM(B.CrNoteAmount) AS CrNoteAmount FROM SalesInvoiceQPSSchemeAdj B,SalesInvoice SI
		WHERE B.RtrId IN(SELECT RtrID FROM @RtrQPSIds) AND B.SchId NOT IN (SELECT SchId FROM @QPSGivenDisc)
		AND B.SchId IN(SELECT DISTINCT SchId FROM ApportionSchemeDetails WHERE SchemeAmount=0 AND TransId=@Pi_TransID AND UsrId=@Pi_UsrId)
		AND SI.SalId=B.SalId AND SI.DlvSts>3
		GROUP BY B.SchId
	END
	ELSE IF @Pi_Mode=1
	BEGIN
		INSERT INTO @QPSGivenDisc
		SELECT A.SchId,SUM(A.DiscountPerAmount+A.FlatAmount) FROM 
		(SELECT DISTINCT SISL.SalId,SISL.SchId,SISL.SlabId,SISL.PrdId,SISL.PrdBatId,SISL.DiscountPerAmount,SISL.FlatAmount
		FROM SalesInvoiceSchemeLineWise SISL INNER JOIN
		(SELECT DISTINCT SchId,SlabId,TransId,UsrId FROM ApportionSchemeDetails 
		WHERE SchemeAmount=0 AND TransId=@Pi_TransId AND UsrId=@Pi_UsrId
		) A ON A.SchId=SISL.SchId AND A.SlabId=SISL.SlabId  INNER JOIN SchemeMaster SM 
		ON A.SchId=SM.SchId AND SM.QPS=1 AND SM.FlexiSch=0 
		INNER JOIN SalesInvoice SI ON SISL.SalId=SI.SalId AND Si.DlvSts>3
		INNER JOIN @RtrQPSIds RQPS ON RQPS.RtrId=Si.RtrId AND SI.RtrId=@RtrId
		WHERE SISL.SalId <> (SELECT SalId FROM Temp_InvoiceDetail)
		AND SISL.SalId <(SELECT SalId FROM Temp_InvoiceDetail)
		AND SI.SalInvdate BETWEEN SM.SchValidFrom AND (SELECT SalInvDate FROM Temp_InvoiceDetail)
		) A	GROUP BY A.SchId
		UPDATE A SET A.Amount=A.Amount+C.CrNoteAmount
		FROM @QPSGivenDisc A,
		(SELECT B.SchId,SUM(B.CrNoteAmount) AS CrNoteAmount FROM SalesInvoiceQPSSchemeAdj B,@RtrQPSIds QPS,SalesInvoice SI,
		SchemeMAster SM	
		WHERE B.SchId=SM.SchId AND SM.QPS=1 AND SM.FlexiSch=0 AND 
		B.RtrId=QPS.RtrID AND SI.SalId=B.SalId AND SI.DlvSts>3 AND SI.RtrId=QPS.RtrId AND QPS.SchId=B.SchId
		AND B.SalId <> (SELECT SalId FROM Temp_InvoiceDetail)
		AND SI.SalInvdate BETWEEN SM.SchValidFrom AND (SELECT SalInvDate FROM Temp_InvoiceDetail)
		AND B.SalId <(SELECT SalId FROM Temp_InvoiceDetail)
		GROUP BY B.SchId) C
		WHERE A.SchId=C.SchId
		INSERT INTO @QPSGivenDisc
		SELECT B.SchId,SUM(B.CrNoteAmount) AS CrNoteAmount FROM SalesInvoiceQPSSchemeAdj B,SalesInvoice SI,
		SchemeMAster SM	
		WHERE B.SchId=SM.SchId AND SM.QPS=1 AND SM.FlexiSch=0 AND 
		B.RtrId IN(SELECT RtrID FROM @RtrQPSIds) AND B.SchId NOT IN (SELECT SchId FROM @QPSGivenDisc)
		AND B.SchId IN(SELECT DISTINCT SchId FROM ApportionSchemeDetails WHERE SchemeAmount=0 AND TransId=@Pi_TransID AND UsrId=@Pi_UsrId)
		AND SI.SalId=B.SalId AND SI.DlvSts>3 AND SI.SalInvdate BETWEEN SM.SchValidFrom AND (SELECT SalInvDate FROM Temp_InvoiceDetail)
		AND B.SalId <(SELECT SalId FROM Temp_InvoiceDetail)
		GROUP BY B.SchId
	END
	ELSE 
	BEGIN
		INSERT INTO @QPSGivenDisc
		SELECT A.SchId,SUM(A.DiscountPerAmount+A.FlatAmount) FROM 
		(SELECT DISTINCT SISL.SalId,SISL.SchId,SISL.SlabId,SISL.PrdId,SISL.PrdBatId,SISL.DiscountPerAmount,SISL.FlatAmount
		FROM SalesInvoiceSchemeLineWise SISL INNER JOIN
		(SELECT DISTINCT SchId,SlabId,TransId,UsrId FROM ApportionSchemeDetails 
		WHERE SchemeAmount=0 AND TransId=@Pi_TransId AND UsrId=@Pi_UsrId
		) A ON A.SchId=SISL.SchId AND A.SlabId=SISL.SlabId  INNER JOIN SchemeMaster SM 
		ON A.SchId=SM.SchId AND SM.QPS=1 AND SM.FlexiSch=0 
		INNER JOIN SalesInvoice SI ON SISL.SalId=SI.SalId AND Si.DlvSts>3
		INNER JOIN @RtrQPSIds RQPS ON RQPS.RtrId=Si.RtrId AND SI.RtrId=@RtrId
		WHERE SISL.SalId <> (SELECT SalId FROM Temp_InvoiceDetail)
		) A	GROUP BY A.SchId
		UPDATE A SET A.Amount=A.Amount+C.CrNoteAmount
		FROM @QPSGivenDisc A,
		(SELECT B.SchId,SUM(B.CrNoteAmount) AS CrNoteAmount FROM SalesInvoiceQPSSchemeAdj B,@RtrQPSIds QPS,SalesInvoice SI
		WHERE B.RtrId=QPS.RtrID AND SI.SalId=B.SalId AND SI.DlvSts>3 AND SI.RtrId=QPS.RtrId AND QPS.SchId=B.SchId
		GROUP BY B.SchId) C
		WHERE A.SchId=C.SchId
		INSERT INTO @QPSGivenDisc
		SELECT B.SchId,SUM(B.CrNoteAmount) AS CrNoteAmount FROM SalesInvoiceQPSSchemeAdj B,SalesInvoice SI
		WHERE B.RtrId IN(SELECT RtrID FROM @RtrQPSIds) AND B.SchId NOT IN (SELECT SchId FROM @QPSGivenDisc)
		AND B.SchId IN(SELECT DISTINCT SchId FROM ApportionSchemeDetails WHERE SchemeAmount=0 AND TransId=@Pi_TransID AND UsrId=@Pi_UsrId)
		AND SI.SalId=B.SalId AND SI.DlvSts>3
		GROUP BY B.SchId
	END	
			
	--->Added By Nanda on 04/03/2011 for Flexi Sch
	DELETE FROM @QPSGivenDisc WHERE SchId IN (SELECT SchId FROM SchemeMaster WHERE FlexiSch=1 AND FlexiSchType=2)
	INSERT INTO @QPSNowAvailable
	SELECT A.SchId,SUM(SchemeDiscount)-ISNULL(B.Amount,0) 
	FROM ApportionSchemeDetails A
	INNER JOIN SchemeMaster	SM ON A.SchId=SM.SchId AND SM.QPS=1 AND A.TransId=@Pi_TransID AND A.UsrId=@Pi_UsrId
	LEFT OUTER JOIN @QPSGivenDisc B ON A.SchId=B.SchId 
	GROUP BY A.SchId,B.Amount 
	UPDATE A SET A.Contri=100*(B.QPSGrossAmount/CASE C.QPSGrossAmount WHEN 0 THEN 1 ELSE C.QPSGrossAmount END)	
	FROM ApportionSchemeDetails A,@TempPrdGross B,@TempSchGross C,SchemeMaster SM
	WHERE A.TRansId=@Pi_TransId AND A.UsrId=@Pi_UsrId AND A.RowId=B.RowId AND 
	A.PrdId=B.PrdId AND A.PrdBatId=B.PrdBatID AND A.SchId=B.SchId AND B.SchId=C.SchId AND SM.SchId=A.SchId AND SM.QPS=1 AND SM.ApyQPSSch=2
			
	UPDATE A SET A.Contri=100*(B.GrossAmount/CASE C.GrossAmount WHEN 0 THEN 1 ELSE C.GrossAmount END)	
	FROM ApportionSchemeDetails A,@TempPrdGross B,@TempSchGross C,SchemeMaster SM
	WHERE A.TRansId=@Pi_TransId AND A.UsrId=@Pi_UsrId AND A.RowId=B.RowId AND 
	A.PrdId=B.PrdId AND A.PrdBatId=B.PrdBatID AND A.SchId=B.SchId AND B.SchId=C.SchId AND SM.SchId=A.SchId AND SM.QPS=1 AND SM.ApyQPSSch=1
	UPDATE ApportionSchemeDetails SET SchemeDiscount=Contri*Amount/100
	FROM @QPSNowAvailable A WHERE ApportionSchemeDetails.SchId=A.SchId
	AND ApportionSchemeDetails.SchId NOT IN (SELECT SchId FROM BillQPSSchemeAdj WHERE UserId=@Pi_UsrId AND TransId=@Pi_TransId )	
	AND ApportionSchemeDetails.TransId=@Pi_TransID AND ApportionSchemeDetails.UsrId=@Pi_UsrId
	UPDATE ApportionSchemeDetails SET SchemeDiscount=0
	FROM @QPSNowAvailable A WHERE ApportionSchemeDetails.SchId=A.SchId
	AND ApportionSchemeDetails.SchId IN (SELECT SchId FROM BillQPSSchemeAdj WHERE UserId=@Pi_UsrId AND TransId=@Pi_TransId )	
	AND ApportionSchemeDetails.TransId=@Pi_TransID AND ApportionSchemeDetails.UsrId=@Pi_UsrId
	-->Till Here
	UPDATE ASD SET SchemeAmount=Contri*AdjAmount/100,SchemeDiscount=(CASE SM.CombiSch+SM.QPS WHEN 2 THEN 0 ELSE SchemeDiscount END)
	FROM ApportionSchemeDetails ASD,BillQPSSchemeAdj A,SchemeMaster SM 
	WHERE ASD.SchId=A.SchId AND SM.SchId=A.SchId AND ASD.SlabId=A.SlabId
	AND ASD.UsrId=A.UserId AND ASD.TransId=A.TransId
	UPDATE ASD SET SchemeAmount=SchemeAmount*SC.Contri
	FROM ApportionSchemeDetails ASD,
	(SELECT A.RowId,A.PrdId,A.PrdBatId,(A.GrossAmount/B.GrossAmount) AS Contri FROM BilledPrdHdForScheme A,
	(SELECT PrdId,PrdBatId,SUM(GrossAmount) AS GrossAmount FROM BilledPrdHdForScheme WHERE UsrId=@Pi_UsrId AND TransID=@Pi_TransId
	GROUP BY PrdId,PrdBatId
	HAVING COUNT(*)>1) B
	WHERE A.PrdID=B.PrdID AND A.PrdBatId=B.PrdBatId) SC
	WHERE ASD.RowId=SC.RowId AND UsrId=@Pi_UsrId AND TransID=@Pi_TransId AND SchId IN 
	(SELECT SchId FROM SchemeMAster WHERE QPS=0 AND CombiSch=0 AND FlexiSch=0)
			
	----Trade Scheme Calculation change (NO QPS,COMBI,Range --Only Discount scheme)CRCRSTPAR0039
	/***
		Example: Take ( Purchase value for scheme product minus Utilized Billed scheme product value)
		If Billed scheme product higer than purchase value than take purchase value
		Scheme Slab: Purchase 10 QTY 2%
		Scheme BRAND: FLAVOR LEVEL
				
		Purchase Value:
		Product A 300
		Product B 400
		SUM(700)
				
		Billed Product	| Actual Scheme Discount | Purchas Value	| new scheme value
		Product A 300		300*2%=6				(6/20)*14=4.2		4.2
		Product B 700		700*2%=14 				(14/20)*14=9.8		9.8
		SUM(1000)
		SUM(700-1000)<=0 THEN 700 is Overall gross 700*2%=14 should get apply
	*/

	--ILCRSTPAR7420
	DECLARE @ClmGrpId INT
	SELECT @ClmGrpId =ClmGrpId  FROM ClaimGroupMaster WHERE ClmGrpCode ='CG10004'
			
	SELECT DISTINCT A.SchId INTO #InsScheme FROM ApportionSchemeDetails A INNER JOIN SchemeMaster B ON A.SchId = B.SchId 
	AND ClmRefId = @ClmGrpId 

			
	SELECT Schid,DiscPer,SUM(schemeDiscount) as TotalSchemeDiscount 
	INTO #TradeSchemeDisper
	FROM ApportionSchemeDetails (NOLOCK) WHERE  TransID = @Pi_TransId AND UsrId = @Pi_Usrid
	AND DiscPer>0 AND Schid NOT IN (SELECT Schid FROM #InsScheme ) --ILCRSTPAR7420
	GROUP BY Schid,DiscPer	
			
	SELECT A.Schid,(CASE WHEN ABS(TargetValue)-GrossAmount<=0 THEN   GrossAmount-ABS(ABS(TargetValue)-GrossAmount)
	ELSE GrossAmount END) *(DiscPer/100) AS DiscountAmt,TotalSchemeDiscount,
	(CASE WHEN ABS(TargetValue)-GrossAmount<=0 THEN   GrossAmount-ABS(ABS(TargetValue)-GrossAmount)
	ELSE GrossAmount END) as ActualGross	
	INTO #TradeSchemeValue
	FROM #PurchaseTarget A INNER JOIN @TempSchGross B ON A.Schid=B.Schid
	INNER JOIN #TradeSchemeDisper C ON A.Schid=C.SchId and B.schid=C.Schid
	WHERE ABS(TargetValue)-GrossAmount<=0
			
				
	UPDATE  A SET A.SchemeDiscount=(A.SchemeDiscount/B.TotalSchemeDiscount)* DiscountAmt 
	FROM ApportionSchemeDetails A (NOLOCK) INNER JOIN #TradeSchemeValue B ON A.schid=B.schid
	WHERE  TransID = @Pi_TransId AND UsrId = @Pi_Usrid and SchemeDiscount>0
	---Till Here CRCRSTPAR0039
			
END
GO
IF EXISTS (SELECT * FROM  SYSOBJECTS WHERE NAME ='Proc_Cn2Cs_BLSchemeAttributes' AND TYPE='P')
DROP PROCEDURE Proc_Cn2Cs_BLSchemeAttributes
GO
CREATE PROCEDURE Proc_Cn2Cs_BLSchemeAttributes
(
@Po_ErrNo INT OUTPUT
)
AS
/**************************************************************************************************
* PROCEDURE: Proc_Cn2Cs_BLSchemeAttributes
* PURPOSE: To Insert and Update Scheme Attributes
* CREATED: Boopathy.P on 02/01/2009
***************************************************************************************************
* 12.09.2011  Panner AttrType Checking (Product or SKU)
**************************************************************************************************
* DATE         AUTHOR          CR/BZ    USER STORY ID   DESCRIPTION                         
*****************************************************************************************************
* 11/01/2019   lakshman M       BR      ILCRSTPAR3079   Reatiler category main id wronly mapped.
* 23/09/2019   lakshman M       BZ      ILCRSTPAR6003   Scheeme Attributes retailer category validation missing in script level.
* 14-01-2019	MOHANA S		BZ		ILCRSTPAR7420	Retailer Level Scheme Attributes
*****************************************************************************************************/
SET NOCOUNT ON
BEGIN
	DECLARE @SchCode 	AS VARCHAR(50)
	DECLARE @AttrType 	AS VARCHAR(50)
	DECLARE @AttrCode 	AS VARCHAR(50)
	DECLARE @AttrTypeId 	AS INT
	DECLARE @AttrId  	AS INT
	DECLARE @CmpId  	AS INT
	DECLARE @SchLevelId 	AS INT
	DECLARE @SelMode 	AS INT
	DECLARE @ChkCount 	AS INT
	DECLARE @ErrDesc  	AS VARCHAR(1000)
	DECLARE @TabName  	AS VARCHAR(50)
	DECLARE @GetKey  	AS VARCHAR(50)
	DECLARE @Taction  	AS INT
	DECLARE @sSQL   	AS VARCHAR(4000)
	DECLARE @ConFig		AS INT
	DECLARE @CmpCnt		AS INT
	DECLARE @EtlCnt		AS INT
	DECLARE @CombiId	AS INT
	DECLARE @SLevel		AS INT
	DECLARE @iCnt		AS INT
	DECLARE @DepChk		AS INT
	DECLARE @MasterRecordID AS INT
	DECLARE @AttrName 	AS VARCHAR(100)
	SET @DepChk=0
	SET @TabName = 'Etl_Prk_Scheme_OnAttributes'
	SET @Po_ErrNo =0
	SET @iCnt=0
	SELECT @ConFig=ISNULL(Status,0) FROM Configuration WHERE ModuleId='GENCONFIG16' AND ModuleName='General Configuration'
			
	DELETE FROM Etl_Prk_SchemeAttribute_Temp
	DECLARE  @Temp_CtgAttrDt TABLE
	(
		SchId		INT,
		CtgMainId	INT
	)
	DECLARE  @Temp_CtgAttrDt_Temp TABLE
	(
		SchId		NVARCHAR(50),
		CtgMainId	INT
	)
	DECLARE  @Temp_ValAttrDt TABLE
	(
		SchId		INT,
		RtrClassId	VARCHAR(400)
	)
			
	DECLARE  @Temp_ValAttrDt_Temp TABLE
	(
		SchId		NVARCHAR(50),
		RtrClassId	INT
	)
			
	DECLARE  @Temp_ValAttrDt_Final TABLE
	(
		SchId		INT,
		AttrType    INT,
		RtrClassId	VARCHAR(400)
	)
	DECLARE  @Temp_KeyAttrDt TABLE
	(
		SchId		INT,
		RtrId		INT
	)
	DECLARE Cur_SchemeAttr CURSOR
	FOR SELECT DISTINCT ISNULL([CmpSchCode],'') AS [Company Scheme Code],ISNULL([AttrType],'') AS [Attribute Type],
	ISNULL([AttrName],'') AS [Attribute Master Code] FROM Etl_Prk_Scheme_OnAttributes 
	WHERE CmpSchCode NOT IN (SELECT CmpSchCode FROM SchToAvoid) AND DownLoadFlag='D' 
	AND CmpSchCode IN (SELECT CmpSchCode FROM SchemeMaster(NOLOCK))
	ORDER BY [Company Scheme Code], [Attribute Type]
	OPEN Cur_SchemeAttr
	FETCH NEXT FROM Cur_SchemeAttr INTO @SchCode,@AttrType,@AttrCode
	WHILE @@FETCH_STATUS=0
	BEGIN
		SET @iCnt=@iCnt+1
		SET @Taction = 2
		SET @Po_ErrNo =0
		IF LTRIM(RTRIM(@SchCode))= ''
		BEGIN
			SET @ErrDesc = 'Company Scheme Code should not be blank'
			INSERT INTO Errorlog VALUES (1,@TabName,'Company Scheme Code',@ErrDesc)
			SET @Taction = 0
			SET @Po_ErrNo =1
		END
		ELSE IF LTRIM(RTRIM(@AttrType))<>''
		BEGIN
			IF LTRIM(RTRIM(@AttrCode))=''
			BEGIN
				SET @ErrDesc = 'Attribute Code should not be blank for Scheme Code:'+@SchCode
				INSERT INTO Errorlog VALUES (1,@TabName,'Attribute Code',@ErrDesc)
				SET @Taction = 0
				SET @Po_ErrNo =1
			END
		END
		ELSE IF LTRIM(RTRIM(@AttrCode))<>''
		BEGIN
			IF LTRIM(RTRIM(@AttrType))=''
			BEGIN
				SET @ErrDesc = 'Attribute Type should not be blank for Scheme Code:'+@SchCode
				INSERT INTO Errorlog VALUES (1,@TabName,'Attribute Type',@ErrDesc)
				SET @Taction = 0
				SET @Po_ErrNo =1
			END
		END
		IF @Po_ErrNo=0
		BEGIN
			IF @ConFig<>1
			BEGIN
				IF NOT EXISTS(SELECT SchId FROM SchemeMaster WHERE CmpSchCode=LTRIM(RTRIM(@SchCode)))
				BEGIN
					SET @ErrDesc = 'Company Scheme Code not found for Scheme Code:'+@SchCode
					INSERT INTO Errorlog VALUES (1,@TabName,'Scheme Code',@ErrDesc)
					SET @Taction = 0
					SET @Po_ErrNo =1
							
				END
				ELSE
				BEGIN
					SET @DepChk=1
					SELECT @GetKey=SchId,@CmpId=CmpId FROM SchemeMaster WHERE CmpSchCode=LTRIM(RTRIM(@SchCode))
					SELECT @SelMode=SchemeLvlMode,@CombiId=CombiSch FROM SchemeMaster WHERE CmpSchCode=LTRIM(RTRIM(@SchCode))
					SELECT @SchLevelId=SchLevelId FROM SchemeMaster WHERE CmpSchCode=LTRIM(RTRIM(@SchCode))
				END	
			END
			ELSE
			BEGIN
				IF EXISTS(SELECT SchId FROM SchemeMaster WHERE CmpSchCode=LTRIM(RTRIM(@SchCode)))
				BEGIN
					SET @DepChk=1
					SELECT @GetKey=SchId,@CmpId=CmpId FROM SchemeMaster WHERE CmpSchCode=LTRIM(RTRIM(@SchCode))
					SELECT @SelMode=SchemeLvlMode,@CombiId=CombiSch FROM SchemeMaster WHERE CmpSchCode=LTRIM(RTRIM(@SchCode))
					SELECT @SchLevelId=SchLevelId FROM SchemeMaster WHERE CmpSchCode=LTRIM(RTRIM(@SchCode))
				END
				ELSE
				BEGIN
					IF NOT EXISTS(SELECT CmpSchCode FROM ETL_Prk_SchemeMaster_Temp WHERE
					CmpSchCode=LTRIM(RTRIM(@SchCode)) AND UpLoadFlag='N')
					BEGIN	
						IF NOT EXISTS(SELECT [CmpSchCode] FROM Etl_Prk_SchemeHD_Slabs_Rules WHERE
						[CmpSchCode]=LTRIM(RTRIM(@SchCode)))
						BEGIN
							SET @ErrDesc = 'Company Scheme Code not found for Scheme Code:'+@SchCode+ ' in table Etl_Prk_SchemeHD_Slabs_Rules  '
							INSERT INTO Errorlog VALUES (1,@TabName,'Scheme Code',@ErrDesc)
							SET @Taction = 0
							SET @Po_ErrNo =1
						END
						ELSE
						BEGIN
							SELECT @CmpId=B.CmpId FROM Etl_Prk_SchemeHD_Slabs_Rules A INNER JOIN COMPANY B ON
							B.CmpCode=A.[CmpCode] WHERE [CmpSchCode]=LTRIM(RTRIM(@SchCode))
							SELECT @SchLevelId=C.CmpPrdCtgId,
								@SelMode=(CASE A.SchemeLevelMode
								WHEN 'PRODUCT' THEN 0 ELSE 1 END),@CombiId=(CASE A.CombiSch
								WHEN 'NO' THEN 0 ELSE 1 END)
							FROM Etl_Prk_SchemeHD_Slabs_Rules A INNER JOIN COMPANY B ON B.CmpCode=A.CmpCode
							INNER JOIN ProductCategoryLevel C ON A.SchLevel=C.CmpPrdCtgName
							AND B.CmpId=C.CmpId WHERE A.CmpSchCode=LTRIM(RTRIM(@SchCode))
						END
					END
					ELSE
					BEGIN
						SET @DepChk=2
						SELECT @GetKey=CmpSchCode,@CmpId=CmpId FROM ETL_Prk_SchemeMaster_Temp
						WHERE CmpSchCode=LTRIM(RTRIM(@SchCode))
			
						SELECT @SelMode=SchemeLvlMode,@CombiId=CombiSch FROM ETL_Prk_SchemeMaster_Temp
						WHERE CmpSchCode=LTRIM(RTRIM(@SchCode))
			
						SELECT @SchLevelId=SchLevelId FROM ETL_Prk_SchemeMaster_Temp
						WHERE CmpSchCode=LTRIM(RTRIM(@SchCode))
					END	
				END
			END
			IF UPPER(LTRIM(RTRIM(@AttrType)))= 'SALESMAN'
				BEGIN
				SET @AttrTypeId=1
				IF LTRIM(RTRIM(@AttrCode))='ALL'
				BEGIN
					SET @AttrId=0
				END
				ELSE
				BEGIN
					IF NOT EXISTS(SELECT SMID FROM SALESMAN WITH (NOLOCK) WHERE
						SMCODE=LTRIM(RTRIM(@AttrCode)) AND STATUS = 1)
					BEGIN
						SET @ErrDesc = 'Salesman Code:'+ @AttrCode+ ' not found for Scheme Code:'+@SchCode
						INSERT INTO Errorlog VALUES (1,@TabName,'SalesMan',@ErrDesc)
						SET @Taction = 0
						SET @Po_ErrNo =1
					END
					ELSE
					BEGIN
						SELECT @AttrId=SMID FROM SALESMAN WITH (NOLOCK) WHERE
						SMCODE=LTRIM(RTRIM(@AttrCode)) AND STATUS = 1
					END
				END
			END
			--->Added By Nanda on 28/07/2010
			ELSE IF UPPER(LTRIM(RTRIM(@AttrType)))= 'CLUSTER'
				BEGIN
				SET @AttrTypeId=21
				IF LTRIM(RTRIM(@AttrCode))='ALL'
				BEGIN
					SET @AttrId=0
				END
				ELSE
				BEGIN
					IF NOT EXISTS(SELECT ClusterId FROM ClusterMaster WITH (NOLOCK) WHERE
						ClusterCode=LTRIM(RTRIM(@AttrCode)))
					BEGIN
						SET @ErrDesc = 'Cluster Code:'+ @AttrCode+ ' not found for Scheme Code:'+@SchCode
						INSERT INTO Errorlog VALUES (1,@TabName,'Cluster',@ErrDesc)
						SET @Taction = 0
						SET @Po_ErrNo =1
					END
					ELSE
					BEGIN
						SELECT @AttrId=ClusterId FROM ClusterMaster WITH (NOLOCK) WHERE
						ClusterCode=LTRIM(RTRIM(@AttrCode))
					END
				END
			END
			--->Till Here
					
			ELSE IF UPPER(LTRIM(RTRIM(@AttrType)))= 'ROUTE'
			BEGIN
				SET @AttrTypeId=2
				IF LTRIM(RTRIM(@AttrCode))='ALL'
				BEGIN
					SET @AttrId=0
				END
				ELSE
				BEGIN
					IF NOT EXISTS(SELECT RMID FROM RouteMaster WITH (NOLOCK) WHERE
						RMCODE=LTRIM(RTRIM(@AttrCode)) AND RMStatus = 1)
					BEGIN
						SET @ErrDesc = 'Route Code:'+@AttrCode +' not found for Scheme Code:'+@SchCode
						INSERT INTO Errorlog VALUES (1,@TabName,'Route',@ErrDesc)
						SET @Taction = 0
						SET @Po_ErrNo =1
					END
					ELSE
					BEGIN
						SELECT @AttrId=RMID FROM RouteMaster WITH (NOLOCK) WHERE
						RMCODE=LTRIM(RTRIM(@AttrCode)) AND RMStatus = 1
					END
				END
			END
			ELSE IF UPPER(LTRIM(RTRIM(@AttrType)))= 'VILLAGE'
			BEGIN
				SET @AttrTypeId=3
				IF LTRIM(RTRIM(@AttrCode))='ALL'
				BEGIN
					SET @AttrId=0
				END
				ELSE
				BEGIN
					IF NOT EXISTS(SELECT VillageId FROM RouteVillage WITH (NOLOCK) WHERE
						VILLAGECODE=LTRIM(RTRIM(@AttrCode)) AND VillageStatus = 1)
					BEGIN
						SET @ErrDesc = 'Route Village Code:'+@AttrCode +' not found for Scheme Code:'+@SchCode
						INSERT INTO Errorlog VALUES (1,@TabName,'RouteVillage',@ErrDesc)
						SET @Taction = 0
						SET @Po_ErrNo =1
					END
					ELSE
					BEGIN
						SELECT @AttrId=VillageId FROM RouteVillage WITH (NOLOCK) WHERE
						VILLAGECODE=LTRIM(RTRIM(@AttrCode)) AND VillageStatus = 1
					END
				END
			END
			ELSE IF UPPER(LTRIM(RTRIM(@AttrType)))= 'CATEGORY LEVEL'
			BEGIN
				SET @AttrTypeId=4
				IF LTRIM(RTRIM(@AttrCode))='ALL'
				BEGIN
					SET @AttrId=0
				END
				ELSE
				BEGIN
					IF NOT EXISTS(SELECT CtgLevelId FROM RetailerCategoryLevel WITH (NOLOCK) WHERE
						CtgLevelName=LTRIM(RTRIM(@AttrCode)))
					BEGIN
						SET @ErrDesc = 'Category Level:'+@AttrCode +' not found for Scheme Code:'+@SchCode
						INSERT INTO Errorlog VALUES (1,@TabName,'Category Level',@ErrDesc)
						SET @Taction = 0
						SET @Po_ErrNo =1
					END
					ELSE
					BEGIN
						SELECT @AttrId=CtgLevelId FROM RetailerCategoryLevel WITH (NOLOCK) WHERE
						CtgLevelName=LTRIM(RTRIM(@AttrCode))
					END
				END
			END
			ELSE IF UPPER(LTRIM(RTRIM(@AttrType)))= 'CATEGORY LEVEL VALUE'
			BEGIN
				SET @AttrTypeId=5
				IF LTRIM(RTRIM(@AttrCode))='ALL'
				BEGIN
					SET @AttrId=0
				END
				ELSE
				BEGIN
					IF NOT EXISTS(SELECT CtgMainId FROM RetailerCategory WITH (NOLOCK) WHERE
					CtgCOde=LTRIM(RTRIM(@AttrCode)))
					BEGIN
						SET @ErrDesc = 'Category Level Value not found''' + LTRIM(RTRIM(@SchCode)) + ''''
						INSERT INTO Errorlog VALUES (1,@TabName,'Category Level Value',@ErrDesc)
						SET @Taction = 0
						SET @Po_ErrNo =1
					END
					ELSE
					BEGIN
						SELECT @AttrId=CtgMainId FROM RetailerCategory WITH (NOLOCK) WHERE
						CtgCOde=LTRIM(RTRIM(@AttrCode))
						--->Modified By Nanda on 24/08/2009
						IF @DepChk=1
						BEGIN
							INSERT INTO @Temp_CtgAttrDt SELECT @GetKey,@AttrId
						END
						ELSE
						BEGIN
							INSERT INTO @Temp_CtgAttrDt_Temp SELECT @GetKey,@AttrId
						END
						--Till Here
					END
				END
			END
			ELSE IF UPPER(LTRIM(RTRIM(@AttrType)))= 'VALUECLASS'
			BEGIN
				SET @AttrTypeId=6
				IF LTRIM(RTRIM(@AttrCode))='ALL'
				BEGIN
					SET @AttrId=0
				END
				ELSE
				BEGIN
					IF NOT EXISTS(SELECT RtrClassId FROM RETAILERVALUECLASS WITH (NOLOCK) WHERE
						ValueClassCode=LTRIM(RTRIM(@AttrCode)))
					BEGIN
						SET @ErrDesc = 'Value Class Code:'+@AttrCode +' not found for Scheme Code:'+@SchCode
						INSERT INTO Errorlog VALUES (1,@TabName,'Value Class',@ErrDesc)
						SET @Taction = 0
						SET @Po_ErrNo =1
					END
					ELSE
					BEGIN
						SELECT @AttrId=RtrClassId FROM RETAILERVALUECLASS WITH (NOLOCK) WHERE
						ValueClassCode=LTRIM(RTRIM(@AttrCode))
						--->Modified By Nanda on 24/08/2009
--						IF @DepChk=1
--						BEGIN
--							INSERT INTO @Temp_ValAttrDt SELECT @GetKey,@AttrCode
--						END
--						ELSE
--						BEGIN
--							INSERT INTO @Temp_ValAttrDt_Temp SELECT @GetKey,@AttrCode
--						END
						--Till Here
					END
				END
			END
			ELSE IF UPPER(LTRIM(RTRIM(@AttrType)))= 'POTENTIALCLASS'
			BEGIN
				SET @AttrTypeId=7
				IF LTRIM(RTRIM(@AttrCode))='ALL'
				BEGIN
					SET @AttrId=0
				END
				ELSE
				BEGIN
					IF NOT EXISTS(SELECT RtrClassId FROM RETAILERPOTENTIALCLASS WITH (NOLOCK) WHERE
						PotentialClassCode=LTRIM(RTRIM(@AttrCode)))
					BEGIN
						SET @ErrDesc = 'Potential Class Code:'+@AttrCode +' not found for Scheme Code:'+@SchCode
						INSERT INTO Errorlog VALUES (1,@TabName,'Potential Class',@ErrDesc)
						SET @Taction = 0
						SET @Po_ErrNo =1
					END
					ELSE
					BEGIN
						SELECT @AttrId=RtrClassId FROM RETAILERPOTENTIALCLASS WITH (NOLOCK) WHERE
						PotentialClassCode=LTRIM(RTRIM(@AttrCode))
					END
				END
			END
			ELSE IF ((UPPER(LTRIM(RTRIM(@AttrType)))= 'KEYGROUP') OR (UPPER(LTRIM(RTRIM(@AttrType)))= 'RETAILER'))
			BEGIN
				SET @AttrTypeId=8
				IF LTRIM(RTRIM(@AttrCode))='ALL'
				BEGIN
					SET @AttrId=0
				END
				ELSE
				BEGIN	
					IF (UPPER(LTRIM(RTRIM(@AttrType)))= 'KEYGROUP')
					BEGIN
						IF NOT EXISTS(SELECT GrpId FROM KeyGroupMaster WITH (NOLOCK) WHERE
								GrpCode = @AttrCode)
						BEGIN
							SET @ErrDesc = 'Key Code:'+@AttrCode +' not found for Scheme Code:'+@SchCode
							INSERT INTO Errorlog VALUES (1,@TabName,'Key Group',@ErrDesc)
							SET @Taction = 0
							SET @Po_ErrNo =1
						END
						ELSE
						BEGIN
							SELECT @AttrName = GrpName FROM KeyGroupMaster WITH (NOLOCK) WHERE GrpCode = LTRIM(RTRIM(@AttrCode))
							DECLARE Cur_KeyGrp CURSOR FOR 
							SELECT ISNULL(MasterRecordID,0) AS [MasterRecordID] FROM UdcDetails A INNER JOIN UdcMaster B
							ON A.UdcMasterId=B.UdcMasterId INNER JOIN UdcHD C On A.MasterId=C.MasterId
							INNER JOIN RETAILER R ON A.MasterRecordId=R.RtrId INNER JOIN KeyGroupMaster K 
							ON K.GrpName=A.ColumnValue Where A.ColumnValue=@AttrName AND C.MAsterID = 2
							OPEN Cur_KeyGrp
							FETCH NEXT FROM Cur_KeyGrp INTO @MasterRecordID
							WHILE @@FETCH_STATUS=0
							BEGIN
								INSERT INTO @Temp_KeyAttrDt SELECT @GetKey,@MasterRecordID
							FETCH NEXT FROM Cur_KeyGrp INTO @MasterRecordID
							END
							CLOSE Cur_KeyGrp
							DEALLOCATE Cur_KeyGrp
						END
					END
					ELSE IF UPPER(LTRIM(RTRIM(@AttrType)))= 'RETAILER'
					BEGIN
						IF NOT EXISTS (SELECT RtrId FROM Retailer WITH (NOLOCK) WHERE CmpRtrCode = LTRIM(RTRIM(@AttrCode)))
						BEGIN
							SET @ErrDesc = 'Retailer Code:'+ @AttrCode + ' not found for Scheme Code:'+ @SchCode
							INSERT INTO Errorlog VALUES (1,@TabName,'Retailer Code',@ErrDesc)
							SET @Taction = 0
							SET @Po_ErrNo =1
						END
						ELSE
						BEGIN
							SELECT @AttrId = RtrId FROM Retailer WITH (NOLOCK) WHERE CmpRtrCode = LTRIM(RTRIM(@AttrCode))
						END
					END
				END
			END
			ELSE IF (UPPER(LTRIM(RTRIM(@AttrType))) = 'SKU' OR UPPER(LTRIM(RTRIM(@AttrType)))= 'PRODUCT')
			BEGIN
				SET @AttrTypeId=9
				IF LTRIM(RTRIM(@AttrCode))='ALL'
				BEGIN
					SET @AttrId=0
				END
				ELSE
				BEGIN
					IF @SelMode=0
					BEGIN
						SET @AttrId=1
					END
					ELSE IF @SelMode=1
					BEGIN
						IF NOT EXISTS(SELECT DISTINCT A.UDCUniqueId FROM UdcDetails A INNER JOIN UdcMaster B
							ON A.UdcMasterId=B.UdcMasterId INNER JOIN UdcHD C On A.MasterId=C.MasterId
							INNER JOIN Product P ON A.MasterRecordId=P.PrdId AND P.CmpId=@CmpId
							Where A.UdcMasterId=@SchLevelId)
						BEGIN
							SET @AttrId=@AttrCode
						END
						ELSE
						BEGIN
							SELECT DISTINCT @AttrId=A.UDCUniqueId FROM UdcDetails A INNER JOIN UdcMaster B
							ON A.UdcMasterId=B.UdcMasterId INNER JOIN UdcHD C On A.MasterId=C.MasterId
							INNER JOIN Product P ON A.MasterRecordId=P.PrdId AND P.CmpId=@CmpId
							Where A.UdcMasterId=@SchLevelId
						END
					END
				END
			END
			ELSE IF UPPER(LTRIM(RTRIM(@AttrType)))= 'BILL TYPE'
			BEGIN
				SET @AttrTypeId=10
				IF UPPER(LTRIM(RTRIM(@AttrCode)))<>'VAN SALES' AND UPPER(LTRIM(RTRIM(@AttrCode)))<>'READY STOCK'
					AND UPPER(LTRIM(RTRIM(@AttrCode)))<>'ORDER BOOKING'
				BEGIN
					SET @ErrDesc = 'BILL TYPE SHOULD BE(VAN SALES OR READY STOCK OR ORDER BOOKING) for Scheme Code:'+@SchCode
					INSERT INTO Errorlog VALUES (1,@TabName,'Bill Type',@ErrDesc)
					SET @Taction = 0
					SET @Po_ErrNo =1
				END
				ELSE IF UPPER(LTRIM(RTRIM(@AttrCode)))='VAN SALES'
				BEGIN
					SET @AttrId=3
				END
				ELSE IF UPPER(LTRIM(RTRIM(@AttrCode)))='READY STOCK'
				BEGIN
					SET @AttrId=2
				END
				ELSE IF UPPER(LTRIM(RTRIM(@AttrCode)))='ORDER BOOKING'
				BEGIN
					SET @AttrId=1
				END
			END
			ELSE IF UPPER(LTRIM(RTRIM(@AttrType)))= 'BILL MODE'
			BEGIN
				SET @AttrTypeId=11
				IF UPPER(LTRIM(RTRIM(@AttrCode)))='ALL'
				BEGIN
					SET @AttrId=1
				END
				ELSE
				BEGIN
					IF UPPER(LTRIM(RTRIM(@AttrCode)))<>'CASH' AND UPPER(LTRIM(RTRIM(@AttrCode)))<>'CREDIT'
					BEGIN
						SET @ErrDesc = 'BILL MODE SHOULD BE(CASH OR CREDIT) for Scheme Code:'+@SchCode
						INSERT INTO Errorlog VALUES (1,@TabName,'Bill Mode',@ErrDesc)
						SET @Taction = 0
						SET @Po_ErrNo =1
					END
					ELSE IF UPPER(LTRIM(RTRIM(@AttrCode)))='CASH'
					BEGIN
						SET @AttrId=1
					END
					ELSE IF UPPER(LTRIM(RTRIM(@AttrCode)))='CREDIT'
					BEGIN
						SET @AttrId=2
					END
				END
			END
			ELSE IF UPPER(LTRIM(RTRIM(@AttrType)))= 'RETAILER TYPE'
			BEGIN
				SET @AttrTypeId=12
				IF LTRIM(RTRIM(@AttrCode))='ALL'
				BEGIN
					SET @AttrId=0
				END
				ELSE
				BEGIN
					IF UPPER(LTRIM(RTRIM(@AttrCode)))<>'KEY OUTLET' AND UPPER(LTRIM(RTRIM(@AttrCode)))<>'NON-KEY OUTLET'
					BEGIN
						SET @ErrDesc = 'RETAIER TYPE SHOULD BE(KEY OUTLET OR NON-KEY OUTLET) for Scheme Code:'+@SchCode
						INSERT INTO Errorlog VALUES (1,@TabName,'RETAILER TYPE',@ErrDesc)
						SET @Taction = 0
						SET @Po_ErrNo =1
					END
					ELSE IF UPPER(LTRIM(RTRIM(@AttrCode)))='KEY OUTLET'
					BEGIN
						SET @AttrId=1
					END
					ELSE IF UPPER(LTRIM(RTRIM(@AttrCode)))='NON-KEY OUTLET'
					BEGIN
						SET @AttrId=2
					END
				END
			END
			ELSE IF UPPER(LTRIM(RTRIM(@AttrType)))= 'CLASS TYPE'
			BEGIN
				SET @AttrTypeId=13
				IF LTRIM(RTRIM(@AttrCode))='ALL'
				BEGIN
					SET @AttrId=0
				END
				ELSE
				BEGIN
					IF UPPER(LTRIM(RTRIM(@AttrCode)))<>'VALUE CLASSIFICATION' AND
					UPPER(LTRIM(RTRIM(@AttrCode)))<>'POTENTIAL CLASSIFICATION'
					BEGIN
						SET @ErrDesc = 'CLASS TYPE SHOULD BE(VALUE CLASSIFICATION OR POTENTIAL CLASSIFICATION) for Scheme Code:'+@SchCode
						INSERT INTO Errorlog VALUES (1,@TabName,'CLASS TYPE',@ErrDesc)
						SET @Taction = 0
						SET @Po_ErrNo =1
					END
					ELSE IF UPPER(LTRIM(RTRIM(@AttrCode)))='VALUE CLASSIFICATION'
					BEGIN
						SET @AttrId=1
					END
					ELSE IF UPPER(LTRIM(RTRIM(@AttrCode)))='POTENTIAL CLASSIFICATION'
					BEGIN
						SET @AttrId=2
					END
				END
			END
			ELSE IF UPPER(LTRIM(RTRIM(@AttrType)))= 'ROAD CONDITION'
			BEGIN
				SET @AttrTypeId=14
				IF LTRIM(RTRIM(@AttrCode))='ALL'
				BEGIN
					SET @AttrId=0
				END
				ELSE
				BEGIN
					IF UPPER(LTRIM(RTRIM(@AttrCode)))<>'GOOD' AND UPPER(LTRIM(RTRIM(@AttrCode)))<>'ABOVE AVERAGE' AND
					UPPER(LTRIM(RTRIM(@AttrCode)))<>'AVERAGE' AND UPPER(LTRIM(RTRIM(@AttrCode)))<>'BELOW AVERAGE' AND
					UPPER(LTRIM(RTRIM(@AttrCode)))<>'POOR'
					BEGIN
						SET @ErrDesc = 'ROAD CONDITION SHOULD BE(GOOD OR ABOVE AVERAGE OR AVERAGE OR  BELOW AVERAGE OR POOR) for Scheme Code:'+@SchCode
						INSERT INTO Errorlog VALUES (1,@TabName,'ROAD CONDITION',@ErrDesc)
						SET @Taction = 0
						SET @Po_ErrNo =1
					END
					ELSE IF UPPER(LTRIM(RTRIM(@AttrCode)))='GOOD'
					BEGIN
						SET @AttrId=1
					END
					ELSE IF UPPER(LTRIM(RTRIM(@AttrCode)))='ABOVE AVERAGE'
					BEGIN
						SET @AttrId=2
					END
					ELSE IF UPPER(LTRIM(RTRIM(@AttrCode)))='AVERAGE'
					BEGIN
						SET @AttrId=3
					END
					ELSE IF UPPER(LTRIM(RTRIM(@AttrCode)))='BELOW AVERAGE'
					BEGIN
						SET @AttrId=4
					END
					ELSE IF UPPER(LTRIM(RTRIM(@AttrCode)))='POOR'
					BEGIN
						SET @AttrId=5
					END
				END
			END
			ELSE IF UPPER(LTRIM(RTRIM(@AttrType)))= 'INCOME LEVEL'
			BEGIN
				SET @AttrTypeId=15
				IF LTRIM(RTRIM(@AttrCode))='ALL'
				BEGIN
					SET @AttrId=0
				END
				ELSE
				BEGIN
					IF UPPER(LTRIM(RTRIM(@AttrCode)))<>'GOOD' AND UPPER(LTRIM(RTRIM(@AttrCode)))<>'ABOVE AVERAGE' AND
					UPPER(LTRIM(RTRIM(@AttrCode)))<>'AVERAGE' AND UPPER(LTRIM(RTRIM(@AttrCode)))<>'BELOW AVERAGE' AND
					UPPER(LTRIM(RTRIM(@AttrCode)))<>'POOR'
					BEGIN
						SET @ErrDesc = 'INCOME LEVEL SHOULD BE(GOOD OR ABOVE AVERAGE OR AVERAGE OR  BELOW AVERAGE OR POOR) for Scheme Code:'+@SchCode
						INSERT INTO Errorlog VALUES (1,@TabName,'INCOME LEVEL',@ErrDesc)
						SET @Taction = 0
						SET @Po_ErrNo =1
					END
					ELSE IF UPPER(LTRIM(RTRIM(@AttrCode)))='GOOD'
					BEGIN
						SET @AttrId=1
					END
					ELSE IF UPPER(LTRIM(RTRIM(@AttrCode)))='ABOVE AVERAGE'
					BEGIN
						SET @AttrId=2
					END
					ELSE IF UPPER(LTRIM(RTRIM(@AttrCode)))='AVERAGE'					
					BEGIN
						SET @AttrId=3
					END
					ELSE IF UPPER(LTRIM(RTRIM(@AttrCode)))='BELOW AVERAGE'
					BEGIN
						SET @AttrId=4
					END
					ELSE IF UPPER(LTRIM(RTRIM(@AttrCode)))='POOR'
					BEGIN
						SET @AttrId=5
					END
				END
			END
			ELSE IF UPPER(LTRIM(RTRIM(@AttrType)))= 'ACCEPTABILITY'
			BEGIN
				SET @AttrTypeId=16
				IF LTRIM(RTRIM(@AttrCode))='ALL'
				BEGIN
					SET @AttrId=0
				END
				ELSE
				BEGIN
					IF UPPER(LTRIM(RTRIM(@AttrCode)))<>'GOOD' AND UPPER(LTRIM(RTRIM(@AttrCode)))<>'ABOVE AVERAGE' AND
					UPPER(LTRIM(RTRIM(@AttrCode)))<>'AVERAGE' AND UPPER(LTRIM(RTRIM(@AttrCode)))<>'BELOW AVERAGE' AND
					UPPER(LTRIM(RTRIM(@AttrCode)))<>'POOR'
					BEGIN
						SET @ErrDesc = 'ACCEPTABILITY SHOULD BE(GOOD OR ABOVE AVERAGE OR AVERAGE OR  BELOW AVERAGE OR POOR) for Scheme Code:'+@SchCode
						INSERT INTO Errorlog VALUES (1,@TabName,'ACCEPTABILITY',@ErrDesc)
						SET @Taction = 0
						SET @Po_ErrNo =1
					END
					ELSE IF UPPER(LTRIM(RTRIM(@AttrCode)))='GOOD'
					BEGIN
						SET @AttrId=1
					END
					ELSE IF UPPER(LTRIM(RTRIM(@AttrCode)))='ABOVE AVERAGE'
					BEGIN
						SET @AttrId=2
					END
					ELSE IF UPPER(LTRIM(RTRIM(@AttrCode)))='AVERAGE'
					BEGIN
						SET @AttrId=3
					END
					ELSE IF UPPER(LTRIM(RTRIM(@AttrCode)))='BELOW AVERAGE'
					BEGIN
						SET @AttrId=4
					END
					ELSE IF UPPER(LTRIM(RTRIM(@AttrCode)))='POOR'
					BEGIN
						SET @AttrId=5
					END
				END
			END
			ELSE IF UPPER(LTRIM(RTRIM(@AttrType)))= 'AWARENESS'
			BEGIN
				SET @AttrTypeId=17
				IF LTRIM(RTRIM(@AttrCode))='ALL'
				BEGIN
					SET @AttrId=0
				END
				ELSE
				BEGIN
					IF UPPER(LTRIM(RTRIM(@AttrCode)))<>'GOOD' AND UPPER(LTRIM(RTRIM(@AttrCode)))<>'ABOVE AVERAGE' AND
					UPPER(LTRIM(RTRIM(@AttrCode)))<>'AVERAGE' AND UPPER(LTRIM(RTRIM(@AttrCode)))<>'BELOW AVERAGE' AND
					UPPER(LTRIM(RTRIM(@AttrCode)))<>'POOR'
					BEGIN
						SET @ErrDesc = 'AWARENESS SHOULD BE(GOOD OR ABOVE AVERAGE OR AVERAGE OR  BELOW AVERAGE OR POOR) for Scheme Code:'+@SchCode
						INSERT INTO Errorlog VALUES (1,@TabName,'AWARENESS',@ErrDesc)
						SET @Taction = 0
						SET @Po_ErrNo =1
					END
					ELSE IF UPPER(LTRIM(RTRIM(@AttrCode)))='GOOD'
					BEGIN
						SET @AttrId=1
					END 					ELSE IF UPPER(LTRIM(RTRIM(@AttrCode)))='ABOVE AVERAGE'
					BEGIN
						SET @AttrId=2
					END
					ELSE IF UPPER(LTRIM(RTRIM(@AttrCode)))='AVERAGE'
					BEGIN
						SET @AttrId=3
					END
					ELSE IF UPPER(LTRIM(RTRIM(@AttrCode)))='BELOW AVERAGE'
					BEGIN
						SET @AttrId=4
					END
					ELSE IF UPPER(LTRIM(RTRIM(@AttrCode)))='POOR'
					BEGIN
						SET @AttrId=5
					END
				END
			END
			ELSE IF UPPER(LTRIM(RTRIM(@AttrType)))= 'ROUTE TYPE'
			BEGIN
				SET @AttrTypeId=18
				IF LTRIM(RTRIM(@AttrCode))='ALL'
				BEGIN
					SET @AttrId=0
				END
				ELSE
				BEGIN
					IF UPPER(LTRIM(RTRIM(@AttrCode)))<>'SALES ROUTE' AND
					UPPER(LTRIM(RTRIM(@AttrCode)))<>'DELIVERY ROUTE' AND
					UPPER(LTRIM(RTRIM(@AttrCode)))<>'MERCHANDISING ROUTE'
					BEGIN
						SET @ErrDesc = 'ROUTE TYPE SHOULD BE(SALES ROUTE OR DELIVERY ROUTE OR MERCHANDISING ROUTE) for Scheme Code:'+@SchCode
						INSERT INTO Errorlog VALUES (1,@TabName,'ROUTE TYPE',@ErrDesc)
						SET @Taction = 0
						SET @Po_ErrNo =1
					END
					ELSE IF UPPER(LTRIM(RTRIM(@AttrCode)))='SALES ROUTE'
					BEGIN
						SET @AttrId=1
					END
					ELSE IF UPPER(LTRIM(RTRIM(@AttrCode)))='DELIVERY ROUTE'
					BEGIN
						SET @AttrId=2
					END
					ELSE IF UPPER(LTRIM(RTRIM(@AttrCode)))='MERCHANDISING ROUTE'
					BEGIN
						SET @AttrId=3
					END
				END
			END
			ELSE IF UPPER(LTRIM(RTRIM(@AttrType)))= 'LOCALUPCOUNTRY'
			BEGIN
				SET @AttrTypeId=19
				IF LTRIM(RTRIM(@AttrCode))='ALL'
				BEGIN
					SET @AttrId=0
				END
				ELSE
				BEGIN
					IF UPPER(LTRIM(RTRIM(@AttrCode)))<>'LOCAL ROUTE' AND
					UPPER(LTRIM(RTRIM(@AttrCode)))<>'UPCOUNTRY ROUTE'
					BEGIN
						SET @ErrDesc = 'LOCAL/UPCOUNTRY SHOULD BE(LOCAL ROUTE OR UPCOUNTRY ROUTE) for Scheme Code:'+@SchCode
						INSERT INTO Errorlog VALUES (1,@TabName,'LOCALUPCOUNTRY',@ErrDesc)
						SET @Taction = 0
						SET @Po_ErrNo =1
					END
					ELSE IF UPPER(LTRIM(RTRIM(@AttrCode)))='LOCAL ROUTE'
					BEGIN
						SET @AttrId=1
					END
					ELSE IF UPPER(LTRIM(RTRIM(@AttrCode)))='UPCOUNTRY ROUTE'
					BEGIN
						SET @AttrId=2
					END
				END
			END
			ELSE IF UPPER(LTRIM(RTRIM(@AttrType)))= 'VAN/NON VAN ROUTE'
			BEGIN
				SET @AttrTypeId=20
				IF LTRIM(RTRIM(@AttrCode))='ALL'
				BEGIN
					SET @AttrId=0
				END
				ELSE
				BEGIN
					IF UPPER(LTRIM(RTRIM(@AttrCode)))<>'VAN ROUTE' AND
					UPPER(LTRIM(RTRIM(@AttrCode)))<>'NON VAN ROUTE'
					BEGIN
						SET @ErrDesc = 'VAN/NON VAN ROUTE SHOULD BE(VAN ROUTE OR NON VAN ROUTE) for Scheme Code:'+@SchCode
						INSERT INTO Errorlog VALUES (1,@TabName,'NON VAN ROUTE',@ErrDesc)
						SET @Taction = 0
						SET @Po_ErrNo =1
					END
					ELSE IF UPPER(LTRIM(RTRIM(@AttrCode)))='VAN ROUTE'
					BEGIN
						SET @AttrId=1
					END
					ELSE IF UPPER(LTRIM(RTRIM(@AttrCode)))='NON VAN ROUTE'
					BEGIN
						SET @AttrId=2
					END
				END
			END
		END
		IF @Po_ErrNo =1
		BEGIN
			IF @DepChk=1
			BEGIN
				EXEC Proc_DependencyCheck 'SCHEMEMASTER',@GetKey
				SELECT @ChkCount=COUNT(*) FROM TempDepCheck
				IF @ChkCount > 0
				BEGIN
					SET @Taction = 0
				END
			END
		END
		ELSE
		BEGIN
			IF @ConFig=1
			BEGIN
				SELECT @SLevel=MAX(CmpPrdCtgId) FROM ProductCategoryLevel WHERE CmpId=@CmpId
				IF @SchLevelId <@SLevel
				BEGIN
					SELECT @EtlCnt=ISNULL(COUNT([PrdCode]),0) FROM Etl_Prk_SchemeProducts_Combi A
					WHERE A.[CmpSchCode]=LTRIM(RTRIM(@SchCode)) --AND UPPER(A.[SchLevel])='NO'
					AND A.SlabId=0 AND A.SlabValue=0
					SELECT @CmpCnt=ISNULL(COUNT([PrdCode]),0) FROM Etl_Prk_SchemeProducts_Combi A
					WHERE A.[PrdCode] IN (SELECT b.PrdCtgValCode FROM ProductCategoryValue B) AND
					A.[CmpSchCode]=LTRIM(RTRIM(@SchCode)) --AND UPPER(A.[SchLevel])='NO'
					AND A.SlabId=0 AND A.SlabValue=0
				END
				ELSE
				BEGIN
					SELECT @EtlCnt=ISNULL(COUNT([PrdCode]),0) FROM Etl_Prk_SchemeProducts_Combi A
					WHERE A.[CmpSchCode]=LTRIM(RTRIM(@SchCode)) --AND UPPER(A.[SchLevel])='YES'
					AND A.SlabId=0 AND A.SlabValue=0
					SELECT @CmpCnt=ISNULL(COUNT([PrdCode]),0) FROM Etl_Prk_SchemeProducts_Combi A
					WHERE A.[PrdCode] IN (SELECT PrdCCode FROM Product)
					AND  A.[CmpSchCode]=LTRIM(RTRIM(@SchCode)) --AND UPPER(A.[SchLevel])='YES'
					AND A.SlabId=0 AND A.SlabValue=0				
				END					
			
				IF @EtlCnt=@CmpCnt
				BEGIN
					SELECT @EtlCnt=COUNT([PrdCode]) FROM Etl_Prk_Scheme_Free_Multi_Products A (NOLOCK)
					WHERE A.[CmpSchCode]=LTRIM(RTRIM(@SchCode))
			
					SELECT @CmpCnt=COUNT([PrdCode]) FROM Etl_Prk_Scheme_Free_Multi_Products A (NOLOCK)
					INNER JOIN Product B ON A.[PrdCode]=b.PrdCCode
					WHERE A.[CmpSchCode]=LTRIM(RTRIM(@SchCode))	
					IF @EtlCnt=@CmpCnt
					BEGIN
					
						IF UPPER(LTRIM(RTRIM(@AttrType)))= 'BILL MODE' OR UPPER(LTRIM(RTRIM(@AttrType)))='BILL TYPE' OR UPPER(LTRIM(RTRIM(@AttrType)))='CATEGORY LEVEL VALUE'
						BEGIN
							DELETE FROM SchemeRetAttr WHERE SchId=ISNULL(@GetKey,0) AND AttrType=@AttrTypeId
							AND AttrId=@AttrId
					
							SET @sSQL='DELETE FROM SchemeRetAttr WHERE SchId='+ CAST(@GetKey AS VARCHAR(10)) +
							' AND AttrType=' + CAST(@AttrTypeId AS VARCHAR(10)) + ' AND AttrId=' + CAST(@AttrId AS VARCHAR(10))
						END
						ELSE
						BEGIN
							DELETE FROM SchemeRetAttr WHERE SchId=ISNULL(@GetKey,0) AND AttrType=@AttrTypeId AND AttrId=@AttrId --ILCRSTPAR7420
					
							SET @sSQL='DELETE FROM SchemeRetAttr WHERE SchId='+ CAST(@GetKey AS VARCHAR(10)) +
							' AND AttrType=' + CAST(@AttrTypeId AS VARCHAR(10))
						END
								
						INSERT INTO Translog(strSql1) Values (@sSQL)
						INSERT INTO SchemeRetAttr(SchId,AttrType,AttrId,Availability,LastModBy,LastModDate,
						AuthId,AuthDate) VALUES(ISNULL(@GetKey,0),@AttrTypeId,@AttrId,1,1,convert(varchar(10),getdate(),121),
						1,convert(varchar(10),getdate(),121))
				
						SET @sSQL='INSERT INTO SchemeRetAttr(SchId,AttrType,AttrId,Availability,LastModBy,LastModDate,
						AuthId,AuthDate) VALUES(' + CAST(@GetKey AS VARCHAR(10)) + ',' + CAST(@AttrTypeId AS VARCHAR(10)) +
						',' + CAST(@AttrId AS VARCHAR(10)) + ',1,1,''' + convert(varchar(10),getdate(),121) + ''',1,''' + convert(varchar(10),getdate(),121) + ''')'
						INSERT INTO Translog(strSql1) Values (@sSQL)
						
					END					
					ELSE
					BEGIN	
						INSERT INTO Etl_Prk_SchemeAttribute_Temp(CmpSchCode,AttrType,AttrId,UpLoadFlag)
						VALUES (LTRIM(RTRIM(@SchCode)),@AttrTypeId,@AttrId,'N')
						SET @sSQL='INSERT INTO Etl_Prk_SchemeAttribute_Temp(CmpSchCode,AttrType,AttrId,UpLoadFlag
						) VALUES(' + CAST(@SchCode AS VARCHAR(50)) + ',' + CAST(@AttrTypeId AS VARCHAR(10)) + ',''N'''')'
						INSERT INTO Translog(strSql1) Values (@sSQL)
					END
					
				END
				ELSE
				BEGIN	
					--Nanda
					--SELECT LTRIM(RTRIM(@SchCode)),@AttrTypeId,@AttrId
					INSERT INTO Etl_Prk_SchemeAttribute_Temp(CmpSchCode,AttrType,AttrId,UpLoadFlag)
						VALUES (LTRIM(RTRIM(@SchCode)),@AttrTypeId,@AttrId,'N')
					SET @sSQL='INSERT INTO Etl_Prk_SchemeAttribute_Temp(CmpSchCode,AttrType,AttrId,UpLoadFlag
					) VALUES(' + CAST(@SchCode AS VARCHAR(50)) + ',' + CAST(@AttrTypeId AS VARCHAR(10)) + ',''N'''')'
					INSERT INTO Translog(strSql1) Values (@sSQL)
					--Nanda
					--SELECT * FROM Etl_Prk_SchemeAttribute_Temp					
				END					
			END
			ELSE
			BEGIN
				IF UPPER(LTRIM(RTRIM(@AttrType)))= 'BILL MODE' OR UPPER(LTRIM(RTRIM(@AttrType)))='BILL TYPE' OR  UPPER(LTRIM(RTRIM(@AttrType)))='CATEGORY LEVEL VALUE'
				BEGIN
					DELETE FROM SchemeRetAttr WHERE SchId=ISNULL(@GetKey,0) AND AttrType=@AttrTypeId
					AND AttrId=@AttrId
			
					SET @sSQL='DELETE FROM SchemeRetAttr WHERE SchId='+ CAST(@GetKey AS VARCHAR(10)) +
					' AND AttrType=' + CAST(@AttrTypeId AS VARCHAR(10)) + ' AND AttrId=' + CAST(@AttrId AS VARCHAR(10))
				END
				ELSE
				BEGIN
					DELETE FROM SchemeRetAttr WHERE SchId=ISNULL(@GetKey,0) AND AttrType=@AttrTypeId AND AttrId = @Attrid
			
					SET @sSQL='DELETE FROM SchemeRetAttr WHERE SchId='+ CAST(@GetKey AS VARCHAR(10)) +
					' AND AttrType=' + CAST(@AttrTypeId AS VARCHAR(10))
				END
			
				INSERT INTO Translog(strSql1) Values (@sSQL)
				INSERT INTO SchemeRetAttr(SchId,AttrType,AttrId,Availability,LastModBy,LastModDate,
				AuthId,AuthDate) VALUES(ISNULL(@GetKey,0),@AttrTypeId,@AttrId,1,1,convert(varchar(10),getdate(),121),
				1,convert(varchar(10),getdate(),121))
			
				SET @sSQL='INSERT INTO SchemeRetAttr(SchId,AttrType,AttrId,Availability,LastModBy,LastModDate,
				AuthId,AuthDate) VALUES(' + CAST(@GetKey AS VARCHAR(10)) + ',' + CAST(@AttrTypeId AS VARCHAR(10)) +
				',' + CAST(@AttrId AS VARCHAR(10)) + ',1,1,''' + convert(varchar(10),getdate(),121) + ''',1,''' + convert(varchar(10),getdate(),121) + ''')'
				INSERT INTO Translog(strSql1) Values (@sSQL)
			END --Sathishkumar Veeramani
			------------ start here  PMS ID: ILCRSTPAR6003 
			IF UPPER(LTRIM(RTRIM(@AttrType)))= 'VALUECLASS'
			BEGIN
					IF LTRIM(RTRIM(@AttrCode))<> 'ALL'
					IF @DepChk=1
					BEGIN
						INSERT INTO @Temp_ValAttrDt 
						SELECT @GetKey,RtrClassId FROM RETAILERVALUECLASS WITH (NOLOCK) 
						WHERE ValueClassCode=LTRIM(RTRIM(@AttrCode)) 
						IF EXISTS (SELECT * FROM Etl_Prk_Scheme_OnAttributes WHERE LTRIM(RTRIM(UPPER(AttrType))) = 'CATEGORY LEVEL VALUE'
						AND LTRIM(RTRIM(UPPER(AttrName))) <> 'ALL' AND CmpSchCode = @SchCode)
						BEGIN
							IF EXISTS (SELECT * FROM Etl_Prk_Scheme_OnAttributes WITH(NOLOCK) WHERE LTRIM(RTRIM(UPPER(AttrType))) = 'CATEGORY LEVEL' 
							AND LTRIM(RTRIM(UPPER(AttrName))) = 'CHANNEL' AND CmpSchCode = @SchCode)
							BEGIN
									INSERT INTO @Temp_ValAttrDt_Final(SchId,AttrType,RtrClassId)
									SELECT DISTINCT ISNULL(@GetKey,0),6,RC4.RtrClassId 
									FROM RetailerCategory RC1 WITH(NOLOCK)
									INNER JOIN @Temp_CtgAttrDt Temp ON RC1.CtgMainId = Temp.CtgMainId and Temp.SchId=@GetKey
									INNER JOIN RetailerCategory RC2 WITH(NOLOCK) ON Temp.CtgMainId = RC2.CtgLinkId
									INNER JOIN RetailerCategory RC3 WITH(NOLOCK) ON RC2.CtgMainId = RC3.CtgMainId
									INNER JOIN RetailerValueClass RC4 WITH(NOLOCK) ON RC3.CtgMainId = RC4.CtgMainId
									INNER JOIN @Temp_ValAttrDt Temp1 ON RC4.RtrClassId = Temp1.RtrClassId and temp1.SchId=@GetKey
									WHERE NOT EXISTS (SELECT SchId,RtrClassId FROM @Temp_ValAttrDt_Final Z WHERE SchId =  ISNULL(@GetKey,0) 
									AND RC4.RtrClassId = Z.RtrClassId )
							END
							ELSE 
							IF EXISTS (SELECT * FROM Etl_Prk_Scheme_OnAttributes WITH(NOLOCK) WHERE LTRIM(RTRIM(UPPER(AttrType))) = 'CATEGORY LEVEL' 
							AND LTRIM(RTRIM(UPPER(AttrName))) = 'SUB CHANNEL' AND CmpSchCode = @SchCode)
							BEGIN
									INSERT INTO @Temp_ValAttrDt_Final(SchId,AttrType,RtrClassId)
									SELECT DISTINCT ISNULL(@GetKey,0),6,RC3.RtrClassId FROM RetailerCategory RC1 WITH(NOLOCK)
									INNER JOIN @Temp_CtgAttrDt Temp ON RC1.CtgMainId = Temp.CtgMainId and Temp.SchId=@GetKey
									INNER JOIN RetailerCategory RC2 WITH(NOLOCK) ON Temp.CtgMainId = RC2.CtgLinkId
									INNER JOIN RetailerValueClass RC3 WITH(NOLOCK) ON RC2.CtgMainId = RC3.CtgMainId
									INNER JOIN @Temp_ValAttrDt Temp1 ON RC3.RtrClassId = Temp1.RtrClassId and temp1.SchId=@GetKey
									WHERE NOT EXISTS (SELECT SchId,RtrClassId FROM @Temp_ValAttrDt_Final Z WHERE SchId =  ISNULL(@GetKey,0) 
									AND RC3.RtrClassId = Z.RtrClassId )                           
							END
							ELSE
							IF EXISTS (SELECT * FROM Etl_Prk_Scheme_OnAttributes WITH(NOLOCK) WHERE LTRIM(RTRIM(UPPER(AttrType))) = 'CATEGORY LEVEL' 
							AND LTRIM(RTRIM(UPPER(AttrName))) = 'GROUP' AND CmpSchCode = @SchCode)
							BEGIN
								INSERT INTO @Temp_ValAttrDt_Final(SchId,AttrType,RtrClassId)
								SELECT DISTINCT ISNULL(@GetKey,0),6,RVC.RtrClassId
								FROM RetailerCategory RC WITH(NOLOCK)
								INNER JOIN @Temp_CtgAttrDt T on T.CtgMainId=RC.CtgMainId AND SCHID=@GetKey
								INNER JOIN RetailerValueClass RVC ON RVC.CtgMainId=RC.CtgMainId
								INNER JOIN @Temp_ValAttrDt T1 ON T1.rtrclassid=RVC.RtrClassId AND T1.SchId=@GetKey	 							 
								WHERE NOT EXISTS (SELECT SchId,RtrClassId FROM @Temp_ValAttrDt_Final Z WHERE SchId =  ISNULL(@GetKey,0) 
								AND RVC.RtrClassId = Z.RtrClassId )                           
							END							
						END
						ELSE
						BEGIN
                     			INSERT INTO @Temp_ValAttrDt_Final(SchId,AttrType,RtrClassId)
								SELECT DISTINCT ISNULL(@GetKey,0),6,RCV1.RtrClassId FROM RetailerValueClass RCV1 WITH(NOLOCK)
								INNER JOIN @Temp_ValAttrDt Temp1 ON RCV1.RtrClassId = Temp1.RtrClassId and temp1.SchId=@GetKey
								WHERE NOT EXISTS (SELECT SchId,RtrClassId FROM @Temp_ValAttrDt_Final Z WHERE SchId =  ISNULL(@GetKey,0) 
								AND RCV1.RtrClassId = Z.RtrClassId)
						END
					END
					ELSE
					BEGIN
						INSERT INTO @Temp_ValAttrDt_Temp SELECT @GetKey,RtrClassId FROM RETAILERVALUECLASS WITH (NOLOCK) 
						WHERE ValueClassCode=LTRIM(RTRIM(@AttrCode))
					END 
			END--Till Here   			
		END
	FETCH NEXT FROM Cur_SchemeAttr INTO @SchCode,@AttrType,@AttrCode
	END
	CLOSE Cur_SchemeAttr
	DEALLOCATE Cur_SchemeAttr
	--SELECT * FROM SchemeRetAttr WHERE SchId=10
	IF EXISTS (SELECT * FROM Etl_Prk_Scheme_OnAttributes)
	BEGIN
		-->Modified By Nanda on 30/11/2009  
		IF EXISTS (SELECT * FROM DBO.SysObjects WHERE ID = OBJECT_ID(N'SchAttrToAvoid') 
		AND OBJECTPROPERTY(ID, N'IsUserTable') = 1)
		BEGIN
			DROP TABLE SchAttrToAvoid	
		END
		CREATE TABLE SchAttrToAvoid
		(
			SchId INT
		)
		INSERT INTO SchAttrToAvoid
		SELECT SchId FROM SchemeRetAttr WHERE AttrId=0 AND AttrType=6
		DELETE FROM SchemeRetAttr WHERE AttrType=6 AND SchId IN  (SELECT DISTINCT SchId FROM @Temp_CtgAttrDt)
		AND SchId NOT IN (SELECT SchId FROM SchAttrToAvoid)
--		INSERT INTO SchemeRetAttr
--		SELECT DISTINCT B.SchId,6,A.RtrClassId,1,1,CONVERT(VARCHAR(10),GETDATE(),121),1,CONVERT(VARCHAR(10),GETDATE(),121) 
--		FROM RETAILERVALUECLASS A 
--		INNER JOIN @Temp_CtgAttrDt B ON A.CtgMainId=B.CtgMainId 
--		INNER JOIN @Temp_ValAttrDt C ON A.ValueClassCode = C.ValClass AND B.SchId=C.SchId
--		AND B.SchId NOT IN (SELECT SchId FROM SchAttrToAvoid)
		INSERT INTO SchemeRetAttr
		SELECT DISTINCT C.SchId,6,A.RtrValueClassId,1,1,CONVERT(VARCHAR(10),GETDATE(),121),1,CONVERT(VARCHAR(10),GETDATE(),121) FROM 
		(SELECT DISTINCT RVC.ValueClassCode,RVCM.RtrValueClassId,RC.CtgMainId,RC.CtgLinkId,RCL.CtgLevelId,
		R.RtrKeyAcc,R.VillageId,RC.CtgLinkCode
		FROM Retailer R INNER JOIN RetailerValueClassmap RVCM ON R.RtrId = RVCM.RtrId 
		INNER JOIN RetailerValueClass RVC ON RVCM.RtrValueClassId = RVC.RtrClassId
		INNER JOIN RetailerCategory RC ON RC.CtgMainId = RVC.CtgMainId
		INNER JOIN RetailerCategoryLevel RCL ON RC.CtgLevelId = RCL.CtgLevelId) A
		INNER JOIN @Temp_ValAttrDt C ON A.RtrValueClassId = C.RtrClassId  
		INNER JOIN @Temp_CtgAttrDt B ON A.CtgMainId=B.CtgMainId 
		AND C.SchId NOT IN (SELECT SchId FROM SchAttrToAvoid)
		INSERT INTO SchemeRetAttr (SchId,AttrType,AttrId,Availability,LastModBy,LastModDate,AuthId,AuthDate)
		SELECT DISTINCT SchId,AttrType,RtrClassId,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) 
		FROM @Temp_ValAttrDt_Final A WHERE SchId NOT IN (SELECT SchId FROM SchAttrToAvoid) AND NOT EXISTS 
		(SELECT SchId,AttrType,AttrId FROM SchemeRetAttr SA WITH(NOLOCK) 
		WHERE A.SchId = SA.SchId AND A.AttrType = SA.AttrType AND A.RtrClassId = SA.AttrId)
		-->Till Here
				
		DELETE FROM Etl_Prk_SchemeAttribute_Temp WHERE AttrType=6 AND CmpSchCode IN  (SELECT DISTINCT SchId FROM @Temp_CtgAttrDt_Temp)
		INSERT INTO Etl_Prk_SchemeAttribute_Temp
		SELECT DISTINCT B.SchId,6,A.RtrClassId,'N'
		FROM RETAILERVALUECLASS A INNER JOIN @Temp_CtgAttrDt_Temp B
		ON A.CtgMainId=B.CtgMainId INNER JOIN @Temp_ValAttrDt_Temp C ON
		A.RtrClassId = C.RtrClassID AND B.SchId=C.SchId 
		IF EXISTS (SELECT * FROM @Temp_KeyAttrDt)
		BEGIN
			DELETE FROM SchemeRetAttr WHERE AttrType=8 AND SchId IN (SELECT DISTINCT SchId FROM @Temp_KeyAttrDt)
			INSERT INTO SchemeRetAttr
			SELECT DISTINCT SchID,8,RtrId,1,1,CONVERT(VARCHAR(10),GETDATE(),121),1,CONVERT(VARCHAR(10),GETDATE(),121)
			FROM @Temp_KeyAttrDt
		END
		IF EXISTS (SELECT * FROM @Temp_KeyAttrDt)
		BEGIN
			DELETE FROM Etl_Prk_SchemeAttribute_Temp WHERE AttrType=8 AND CmpSchCode IN  (SELECT DISTINCT SchId FROM @Temp_KeyAttrDt)
			INSERT INTO Etl_Prk_SchemeAttribute_Temp
			SELECT DISTINCT SchID,8,RtrId,'N' FROM @Temp_KeyAttrDt
		END
	END
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Fn_ReturnManualClmDesc' AND TYPE='TF')
DROP FUNCTION Fn_ReturnManualClmDesc
GO
CREATE FUNCTION Fn_ReturnManualClmDesc(@FromDate AS DATETIME,@ToDate AS DATETIME,@ClmDate AS DATETIME)  
RETURNS @ReturnManualDesc TABLE  
(  
	RefId  INT,  
	ManualClmDesc VARCHAR(200)  
)   
AS  
/************************************************************************************************************************************  
* PROCEDURE  : Fn_ReturnManualClmDesc  
* PURPOSE  : To Validate the description in Manual Claim   
* CREATED BY : S.MOORTHI  
* CREATED DATE : 22/06/2018  
* MODIFIED  
* DATE        AUTHOR   CR/BZ USER STORY ID  DESCRIPTION           
-----------------------------------------------------------------------------------------------------------------------------------------        
	22/06/2018  S.Moorthi		CR  CRCRSTPAR0014       Load description master in description and attachment option in Manual Claim  
	03/10/2018  Amuthakumar P  CR  CRCRSTPAR0029		Manual claim description with the status of activation   
	20/12/2019  Lakshman M		BZ	ILCRSTPAR7103       Manual description claim dupliacte validation included.
	16-01-2020	 MOHANA S		BZ	ILCRSTPAR7420		Changed Data validation
	***************************************************************************************************************************************/   
BEGIN  
DECLARE @TempData AS TABLE  
(  
	RefID    INT,  
	ManualClmDesc  VARCHAR(500),  
	EffectiveFromDate DATETIME  
)  
DECLARE @TempData1 AS TABLE  
(  
	RefID    INT, 
	CircularNo  VArchar(50), 
	ManualClmDesc  VARCHAR(500),
	ValidFromDate DATETIME,
	ValidToDate DATETIME
)
	INSERT INTO @TempData (RefID,ManualClmDesc,EffectiveFromDate)  
	SELECT RefID,ManualClmDesc, EffectiveFromDate fROM ManualClaimDescription WHERE EffectiveFromDate<=@ClmDate AND ActiveStatus=0  
	------------ commented by lakshman M dated ON 20/12/2019 ---------------
	INSERT INTO @TempData1 (RefID,CircularNo,ManualClmDesc,ValidFromDate,ValidToDate)
	SELECT distinct A.MacRefId,B.CircularNo,C.ManualClmDesc,C.ValidFromDate,C.ValidToDate from manualclaimmaster A 
	INNER JOIN manualclaimdetails B ON A.macrefno =B.macrefno 
	INNER JOIN ManualClaimDescription C ON c.circularno =b.circularno  and C.[ManualClmDesc]  = B.[Description]
	INNER JOIN jcmonth D ON D.Jcmid =A.JCMid AND A.FromJcmJcId = D.jcmjc AND A.ToJcmJcId = D.jcmjc
	WHERE @FromDate BETWEEN JcmSdt and JcmEdt OR @ToDate BETWEEN JcmSdt and ValidToDate  
	OR JcmSdt BETWEEN @FromDate and @ToDate  or JcmEdt BETWEEN @FromDate and @ToDate 
	--INSERT INTO @ReturnManualDesc(RefId,ManualClmDesc)  
	--SELECT DISTINCT RefId,ManualClmDesc FROM ManualClaimDescription N(NOLOCK)   
	--WHERE @FromDate BETWEEN ValidFromDate and ValidToDate AND @ToDate BETWEEN ValidFromDate and ValidToDate  
	--OR ValidFromDate BETWEEN @FromDate and @ToDate or ValidToDate BETWEEN @FromDate and @ToDate  
	--AND NOT EXISTS(SELECT * FROM @TempData M WHERE M.RefID=N.RefID) 
	INSERT INTO @ReturnManualDesc(RefId,ManualClmDesc)  
	SELECT DISTINCT A.RefId,A.ManualClmDesc FROM ManualClaimDescription A(NOLOCK) 
	WHERE ManualClmDesc NOT IN(select ManualClmDesc from @TempData1 B )
	AND  (@FromDate BETWEEN A.ValidFromDate and A.ValidToDate OR  @ToDate BETWEEN A.ValidFromDate and A.ValidToDate)
	AND  NOT EXISTS(SELECT * FROM @TempData M WHERE M.RefID=A.RefID)
	-------------- Till  Here -----------------
	--SELECT DISTINCT RefId,ManualClmDesc FROM ManualClaimDescription(NOLOCK)   
	--WHERE (@FromDate BETWEEN ValidFromDate and EffectiveFromDate OR @ToDate BETWEEN ValidFromDate and EffectiveFromDate  
	--OR ValidFromDate BETWEEN @FromDate and @ToDate or EffectiveFromDate BETWEEN @FromDate and @ToDate)  
	-- added by Amuthakumar CRCRSTPAR0029  
RETURN  
END
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE NAME = 'Proc_Cs2Cn_SalesReturnHierarchy' AND type ='P')
DROP PROCEDURE Proc_Cs2Cn_SalesReturnHierarchy 
GO
CREATE PROCEDURE Proc_Cs2Cn_SalesReturnHierarchy 
(  
@Po_ErrNo INT OUTPUT,
@ServerDate DATETIME  
)  
AS
--EXEC Proc_Cs2Cn_SalesReturnHierarchy 0   
/*********************************  
* PROCEDURE  : Proc_Cs2Cn_SalesReturnHierarchy  
* PURPOSE  : To Extract Sales Return Hierarchy Details from CoreStocky to upload to Console  
* CREATED BY : Deepan
* CREATED DATE : 10/01/2020
* NOTE   :  
* MODIFIED  
***************************************************************************************************  
* DATE         AUTHOR         CR/BZ    USER STORY ID           DESCRIPTION                           
***************************************************************************************************  
10-01-2020   Deepan			   CR	   CRCRSTPAR0089         Category and Value Class and channel Added
*********************************/  
SET NOCOUNT ON  
BEGIN  
	DECLARE @CmpId    AS INT  
	DECLARE @DistCode  As nVarchar(50)  
	DECLARE @DefCmpAlone AS INT  
	SET @Po_ErrNo=0 

	DELETE FROM Cs2Cn_Prk_SalesReturnHierarchy WHERE UploadFlag = 'Y'
	SELECT @DistCode = DistributorCode FROM Distributor  

	INSERT INTO [Cs2Cn_Prk_SalesReturnHierarchy]  
	(  
	DistCode  ,  
	SRNRefNo  ,  
	RtrId   , 
	CmpRtrCode, 
	UploadFlag
	)  
	SELECT  
	@DistCode ,  
	A.ReturnCode , A.RtrId,ISNULL(R.CmpRtrCode,'') AS  CmpRtrCode,
	'N' AS UploadFlag
	FROM ReturnHeader A 
	INNER JOIN Retailer R ON R.RtrId=A.RtrId  
	WHERE A.Status = 0 AND A.ReturnDate >='2019-12-20' AND A.ReturnCode NOT IN(SELECT SRNRefNo FROM SalesReturnHierarchy(NOLOCK))

	UPDATE  Cs2Cn_Prk_SalesReturnHierarchy SET ValueClassCode=RC.ValueClassCode,ValueClassName=RC.ValueClassName,
	CtgCode= RY.CtgCode,CtgName=RY.CtgName,ChannelCode=RCY.CtgCode,ChannelName=RCY.CtgName  
	FROM Cs2Cn_Prk_SalesReturnHierarchy C(NOLOCK) INNER JOIN ReturnHeader S(NOLOCK) ON C.SRNRefNo=S.ReturnCode
	AND C.RtrId =S.RtrId 
	INNER JOIN RetailerValueClass RC(NOLOCK) ON S.RtrValueClassId =RC.RtrClassId
	INNER JOIN RetailerCategory RY ON RC.CtgMainId = RY.CtgMainId
	INNER JOIN RetailerCategoryLevel RCL ON RY.CtgLevelId = RCL.CtgLevelId
	INNER JOIN RetailerCategory RCY ON  RY.CtgLinkId=RCY.CtgMainId

	INSERT INTO SalesReturnHierarchy(SRNRefNo,RtrId,CmpRtrCode,CtgCode,CtgName,ValueClassCode,ValueClassName,ChannelCode,ChannelName,Availability,
	LastModBy,LastModDate,AuthId,AuthDate)
	SELECT SRNRefNo,RtrId,CmpRtrCode,CtgCode,CtgName,ValueClassCode,ValueClassName,ChannelCode,ChannelName,1,1,GETDATE(),1,GETDATE()
	FROM Cs2Cn_Prk_SalesReturnHierarchy
	WHERE SRNRefNo NOT IN(SELECT SRNRefNo FROM SalesReturnHierarchy)

	UPDATE Cs2Cn_Prk_SalesReturnHierarchy SET ServerDate=@ServerDate
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_Cs2Cn_DebitNoteTopSheet2' AND TYPE ='P')
DROp PROCEDURE Proc_Cs2Cn_DebitNoteTopSheet2
GO
/*
Begin transaction     
delete  from Cs2Cn_Prk_DebitNoteTopSheet2    
update A set rptupload =0,upload=0 from salesinvoice A where SalInvDate between '2019-06-01' and'2019-06-30'    
update A set rptupload =0,upload=0 from Returnheader A where ReturnDate between '2019-06-01' and'2019-06-30'    
exec Proc_Cs2Cn_RailwayDiscountReconsolidation 0,'2019-08-14'      
EXEC Proc_Cs2Cn_DebitNoteTopSheet2 0,'2019-08-14'     
select *from Cs2Cn_Prk_DebitNoteTopSheet2 -- where cmpschcode ='SCH18547'    
--select *from cs2console_consolidated where column3 ='SCH13813' and processname like '%debitnote%'    
Rollback Transaction    
*/      
CREATE PROCEDURE Proc_Cs2Cn_DebitNoteTopSheet2    
(      
 @Po_ErrNo INT OUTPUT,      
 @ServerDate DATETIME      
)      
AS      
/*********************************      
* PROCEDURE  : Proc_Cs2Cn_DebitNoteTopSheet2       
* PURPOSE  : To Extract LMISDetails      
* CREATED BY : Aravindh Deva C      
* CREATED DATE : 03.06.2016      
* NOTE   :       
------------------------------------------------      
* {date} {developer}  {brief modification description}      
*************************************************      
* [DATE]      [DEVELOPER]      [USER_STORY_ID]   [CR/BUG]       [DESCRIPTION]      
* 26-12-2017  S.MOORTHI  CR      ICRSTPAR7182                 Date Wise Data Upload(TransDate)    
* 18-12-2017  Lakshman. M        ICRSTPAR7106        BUG      Scheme id validation missing.Script validation added from CS.    
* 13-07-2018  Lakshman M         ILCRSTPAR1254       BZ       Report caluculation included for upload process debit note top sheet2 from CS.    
* 25/07/2018  Lakshman M         ILCRSTPAR1496       BZ       scheme code valdiation included from CS.   
* 29-03-2019  Lakshman M         ILCRSTPAR3860       BZ       upload process scheme wsie and transaction wsie scheme utilization amount validation included. 
* 14-08-2019  Lakshman M         ILCRSTPAR5513       SR       upload process scheme wsie and transaction wsie Repot logic validation included. Now both upload and report are matched. 
* 05-02-2020  Lakshman M         ILCRSTPAR7726       BZ       Due to liability column values multiple with 100. as per client requst.
*************************************************/      
SET NOCOUNT ON      
BEGIN      
  SET @Po_ErrNo=0      
  DECLARE @DistCode As NVARCHAR(50)      
  DELETE FROM Cs2Cn_Prk_DebitNoteTopSheet2 WHERE UploadFlag = 'Y'      
   IF NOT EXISTS (SELECT * FROM UploadingReportTransaction (NOLOCK))      
   BEGIN      
    RETURN      
   END      
  SELECT @DistCode = DistributorCode FROM Distributor(NOLOCK)       
  DECLARE @FromDate DATETIME      
  DECLARE @ToDate DATETIME      
  --ICRSTPAR7182    
 --SELECT @FromDate = MIN(SchValidFrom),@ToDate = MAX(SchValidTill) FROM SchemeMaster S (NOLOCK)    
 --WHERE EXISTS (SELECT 'C' FROM UploadingReportTransaction FP (NOLOCK) WHERE FP.TransDate BETWEEN S.SchValidFrom AND S.SchValidTill)    
  SELECT @FromDate = MIN(TransDate),@ToDate = MAX(TransDate) FROM UploadingReportTransaction S (NOLOCK)    
 --ICRSTPAR7182 till here      
  EXEC Proc_SchUtilization_Report @FromDate,@ToDate  
  EXEC Proc_ReturnSalesProductTaxPercentage @FromDate,@ToDate
  SELECT * INTO #ParleOutputTaxPercentage  FROM ParleOutputTaxPercentage (NOLOCK) 
  DECLARE @SlNo AS INT      
  SELECT @SlNo = SlNo FROM BatchCreation (NOLOCK) WHERE FieldDesc = 'Selling Price'     
 ------------------ added by Lakshman M dated on 13/07/2018 Pms ID: ILCRSTPAR1254 & ILCRSTPAR1496 ------------    
 --------------------- Added By Lakshman M Dated on 14/08/2019 PMS ID:  ILCRSTPAR5513---------------    
  SELECT S.SalId,S.SalInvNo,S.SalInvDate,S.RtrId,SP.PrdId,SP.PrdBatId,SP.BaseQty BaseQty,        
  B.DefaultPriceId ActualPriceId,SP.SlNo,sp.PrdTaxAmount,PrdUnitSelRate,PrdBatDetailValue,CAST(0 AS Int) AS Schid       
  INTO #BillingDetails        
  FROM SalesInvoice S (NOLOCK)        
  INNER JOIN SalesInvoiceProduct SP (NOLOCK) ON S.SalId = SP.SalId        
  INNER JOIN ProductBatch B (NOLOCK) ON SP.PrdBatId = B.PrdBatId     
INNER JOIN ProductBatchDetails PBD (NOLOCK) ON PBD.PrdBatId =B.PrdBatId and DefaultPrice =1     
 -- INNER JOIN Debitnote_Scheme D ON D.Salid = S.SalId AND SP.SalId = D.Salid AND D.Prdid =SP.PrdID AND D.linetype = 1    
  WHERE S.SalInvDate BETWEEN @FromDate AND @ToDate  AND S.DlvSts > 3 and PBD.SLNo =3    
  SELECT S.ReturnID,S.ReturnCode,S.ReturnDate,S.RtrId,SP.PrdId,SP.PrdBatId,-1 * SP.BaseQty BaseQty,SP.PrdUnitMRP MRP,        
  B.DefaultPriceId,SP.SlNo,SP.PrdEditSelRte,sp.PrdTaxAmt as prdtaxamount,PrdUnitSelRte as  PrdUnitSelRate,PrdBatDetailValue,CAST(0 AS Int) AS Schid        
  INTO #ReturnDetails        
  FROM ReturnHeader S (NOLOCK)        
  INNER JOIN ReturnProduct SP (NOLOCK) ON S.ReturnID = SP.ReturnID        
  INNER JOIN ProductBatch B (NOLOCK) ON SP.PrdBatId = B.PrdBatId        
  INNER JOIN ProductBatchDetails PBD (NOLOCK) ON PBD.PrdBatId =B.PrdBatId and DefaultPrice =1  
  AND StockTypeId IN (SELECT StockTypeId FROM STOCKTYPE WHERE SystemStockType = 1)    
  --INNER JOIN Debitnote_Scheme D ON D.Salid = S.ReturnID AND SP.ReturnID = D.Salid  AND D.linetype = 2    
  WHERE S.ReturnDate BETWEEN  @FromDate AND @ToDate  AND S.[Status] = 0 and PBD.SLNo =3    
  SELECT TransType,RtrId,SalId,TransDate,PrdId,PrdBatId,BaseQty,ActualPriceId,SlNo,CAST (0 AS NUMERIC(18,6)) AS ActualSellRate,prdtaxamount,    
  PrdBatDetailValue as PrdUnitSelRate ,Schid ,    
  CAST (0 AS NUMERIC(18,6)) AS LCTR      
  INTO #DebitSalesDetails        
  FROM         
  (        
  SELECT 1 TransType,RtrId,SalId,SalInvDate TransDate,PrdId,PrdBatId,BaseQty,ActualPriceId,SlNo,prdtaxamount,PrdBatDetailValue , schid FROM #BillingDetails       
  UNION ALL        
  SELECT 2 TransType,RtrId,ReturnID,ReturnDate TransDate,PrdId,PrdBatId,BaseQty,DefaultPriceId ,SlNo,prdtaxamount,PrdBatDetailValue, schid  FROM #ReturnDetails        
  ) Consolidated     
 ------------------------- Till Here ----------------    
  UPDATE M SET M.ActualSellRate = round(D.PrdBatDetailValue,2)        
  FROM #DebitSalesDetails M (NOLOCK),        
  ProductBatchDetails D (NOLOCK)         
  WHERE M.ActualPriceId = D.PriceId AND D.SLNo = 3     
  UPDATE R SET R.LCTR = ROUND(((R.BaseQty *(R.PrdUnitSelRate))+(R.BaseQty*R.PrdUnitSelRate)*(T.TaxPerc/100)),2)          
  FROM #DebitSalesDetails R (NOLOCK),        
  #ParleOutputTaxPercentage T (NOLOCK)    
  WHERE R.SalId = T.Salid AND R.Slno = T.PrdSlno AND T.TransId = R.TransType      
  --------------------- Till Here ----------------        
  CREATE TABLE #ApplicableProduct      
  (      
   SchId  INT,      
   PrdId   INT      
  )    
   ----------------- added by lakshman M on 21-12-2017 sales invoice scheme added --------------      
 INSERT INTO #ApplicableProduct(SchId,PrdId)    
 SELECT DISTINCT A.SchId,B.Prdid    
  FROM SchemeMaster A    
  INNER JOIN SchemeProducts B ON A.Schid = B.Schid    
  INNER JOIN Product C On B.Prdid = C.PrdId    
  WHERE A.SchemeLvlMode = 0 AND B.PrdId <> 0    
 UNION ALL    
 SELECT DISTINCT A.SchId,E.Prdid    
  FROM SchemeMaster A    
  INNER JOIN SchemeProducts B ON A.Schid = B.Schid    
  INNER JOIN ProductCategoryValue C ON     
  B.PrdCtgValMainId = C.PrdCtgValMainId     
  INNER JOIN ProductCategoryValue D ON    
  D.PrdCtgValLinkCode LIKE Cast(c.PrdCtgValLinkCode as nvarchar(1000)) + '%'    
  INNER JOIN Product E On    
  D.PrdCtgValMainId = E.PrdCtgValMainId     
  INNER JOIN ProductBatch F On    
  F.PrdId = E.Prdid    
  WHERE A.SchemeLvlMode = 0 AND B.PrdCtgValMainId <> 0    
 UNION ALL    
 SELECT DISTINCT S.SchId,B.MasterRecordId    
  FROM SchemeProducts A     
  INNER JOIN UdcDetails B on B.UDCUniqueId =A.PrdCtgValMainId     
  INNER JOIN SchemeMaster S ON A.SchId = S.SchId    
  WHERE S.SchemeLvlMode = 1    
  --added by mohana ILCRSTPAR0500     
 INSERT INTO #ApplicableProduct(SchId,PrdId)    
 SELECT Schid ,PrdId FROM SchemeMasterControlHistory A INNER JOIN SchemeMaster B ON A.CmpSchCode = B.CmpSchCode    
 INNER JOIN Product C ON c.PrdCCode = A.FromValue    
 WHERE ChangeType='Remove'   AND B.SchId in (SELECT SchId FROM SchemeProducts Where PrdCtgValMainId = 0)    
 INSERT INTO #ApplicableProduct(SchId,PrdId)      
 SELECT DISTINCT A.SchId,E.Prdid    
 FROM SchemeMaster A    
 INNER JOIN SchemeMasterControlHistory B ON A.CmpSchCode = B.CmpSchCode    
 INNER JOIN ProductCategoryValue C ON     
 B.FromValue = C.PrdCtgValCode    
 INNER JOIN ProductCategoryValue D ON    
 D.PrdCtgValLinkCode LIKE Cast(c.PrdCtgValLinkCode as nvarchar(1000)) + '%'    
 INNER JOIN Product E On    
 D.PrdCtgValMainId = E.PrdCtgValMainId     
 INNER JOIN ProductBatch F On    
 F.PrdId = E.Prdid    
 WHERE A.SchemeLvlMode = 0  AND A.SchId in (SELECT SchId FROM SchemeProducts Where PrdId = 0 )    
 AND ChangeType='Remove'      
 --------------- Tille Here --------------    
  CREATE TABLE #ApplicableScheme      
  (      
   SchId   INT,      
   CmpSchCode  NVARCHAR(100),      
   SchValidFrom DATETIME,       SchValidTill DATETIME,       
   Budget   NUMERIC(18,2),      
   BudgetAllocationNo VARCHAR(100),      
   PrdId INT      
  )    
 ------------- added by M. Lakshman dated on 18-12-2017 ----- Scheme id validation ----------       
 INSERT INTO #ApplicableScheme (SchId,CmpSchCode,SchValidFrom,SchValidTill,Budget,BudgetAllocationNo,PrdId)       
 SELECT DISTINCT A.SchId,S.cmpschcode,S.SchValidFrom,S.SchValidTill,S.Budget,S.BudgetAllocationNo, A.PrdId    
 FROM #ApplicableProduct A (NOLOCK),    
 SchemeMaster S (NOLOCK)    
 WHERE A.SchId = S.SchId AND A.SchId  IN (SELECT SCHID FROM Debitnote_Scheme)     
 AND S.Claimable = 1 
 SELECT  S.SchId,B.transdate,B.TransType,SM.CmpSchCode,S.SchValidFrom,S.SchValidTill,SC.SchemeBudget,CircularNo, CircularDate,    
 SUM(B.BaseQty) [SecSalesQty],CAST(SUM(B.LCTR) AS NUMERIC(18,6)) [SecSalesVal],CAST(0 AS NUMERIC(18,6)) Liab,    
 CAST(0 AS NUMERIC(18,6)) Amount    
 INTO #SchemeDebit1    
 FROM #ApplicableScheme S (NOLOCK),    
 #DebitSalesDetails B (NOLOCK) ,--Debitnote_Scheme D ,    
 SchemeMaster SM LEFT Outer JOIN SchemeCirculardetails SC ON SM.CmpSchCode=SC.CmpSchcode-- added By Mohana    
 WHERE S.PrdId = B.PrdId AND S.SchId=SM.SchId  and Transtype=1 AND  --B.Schid = D.Schid  AND SM.Schid = D.Schid AND    
-- d.sCHID = s.sCHID and s.PRDID = D.PRDID AND b.PrdId = D.PRDID  and b.sALID = d.sALID AND Linetype = 1 AND     
 --PMS NO:ILCRSTPAR0909    
 --S.SchValidFrom BETWEEN @FromDate AND @ToDate    
 --AND S.SchValidTill  BETWEEN @FromDate AND @ToDate    
 --(S.SchValidFrom BETWEEN @FromDate AND @ToDate    
 --or S.SchValidTill  BETWEEN @FromDate AND @ToDate)    
 (B.Transdate BETWEEN @FromDate AND @ToDate     
 or B.Transdate  BETWEEN @FromDate AND @ToDate )  -- and s.schid =678 
 AND SM.cmpschcode in (select Cmpschcode from SchemeCategorydetails where Schcategory_type IN ('Trade Scheme','General Scheme'))  --ILCRSTPAR5132  
 GROUP BY S.SchId,SM.cmpschcode,S.SchValidFrom,S.SchValidTill,SC.SchemeBudget,CircularNo,CircularDate,B.transdate,B.TransType    
 ORDER BY S.SchId
 INSERT INTO #SchemeDebit1       
 SELECT  APS.Schid,DS.transdate,DS.TransType,SM.CmpSchCode,APS.SchValidFrom,APS.SchValidTill,SC.SchemeBudget,CircularNo, CircularDate,      
 SUM(SP.BaseQty) [SecSalesQty],Round(CAST((sum(SP.BaseQty*PrdBatDetailValue)+ (sum(SP.BaseQty*PrdBatDetailValue)*(T.TaxPerc/100))) AS Numeric(18,2)),2)  AS  [SecSalesVal],      
 CAST(0 AS NUMERIC(18,6)) Liab,CAST(0 AS NUMERIC(18,6)) Amount      
 from SalesInvoice S       
 inner join SalesInvoiceproduct SP ON S.salid =sp.salid       
 inner join SalesInvoiceSchemeLineWise SIL ON SIL.salid=s.salid and SIL.salid =SP.salid AND SIL.prdid =sp.prdid and sil.prdbatid =sp.PrdBatId       
 inner join #DebitSalesDetails DS ON DS.salid =S.salid AND DS.salid =SP.salid AND DS.salid =SIl.salid and DS.prdid =SP.prdid and DS.prdbatid = SP.prdbatid AND DS.prdid =SP.prdid and DS.prdbatid =SIl.prdbatid        
 inner join #ApplicableScheme APS ON APS.schid = SIL.schid AND APS.prdid =DS.prdid AND APS.Prdid =SIL.Prdid       
 inner join SchemeMaster SM ON SM.schid =SIL.Schid AND SM.Schid =APS.Schid       
 inner join #ParleOutputTaxPercentage T ON T.salid =DS.salid and S.salid =T.salid and SP.Salid =T.salid AND SP.Salid =SIL.Salid and DS.slno =T.PrdSlno and T.TransId = DS.TransType       
 LEFT Outer JOIN SchemeCirculardetails SC ON SM.CmpSchCode=SC.CmpSchcode-- added By Mohana      
 inner join ProductBatchDetails D on D.prdbatid=SIL.prdbatid and D.prdbatid=Sp.prdbatid and D.SlNo=3 and DefaultPrice=1      
 WHERE APS.PrdId = DS.PrdId AND APS.SchId=SM.SchId  and Transtype=1 AND      
 --PMS NO:ILCRSTPAR0909      
 --S.SchValidFrom BETWEEN @FromDate AND @ToDate      
 --AND S.SchValidTill  BETWEEN @FromDate AND @ToDate      
 --(S.SchValidFrom BETWEEN @FromDate AND @ToDate      
 --or S.SchValidTill  BETWEEN @FromDate AND @ToDate)      
 (DS.Transdate BETWEEN @FromDate AND @ToDate       
 OR DS.TransDate BETWEEN @FromDate AND @ToDate )  ----PMS NO:ILCRSTPAR1309 Till Here      
 AND SM.cmpschcode in (select Cmpschcode from SchemeCategorydetails where Schcategory_type NOT IN ('Trade Scheme','General Scheme'))      --ILCRSTPAR5132  
 GROUP BY APS.SchId,SM.SchDsc,APS.SchValidFrom,APS.SchValidTill,SC.SchemeBudget,CircularNo,CircularDate,SP.BaseQty,PrdBatDetailValue,T.TaxPerc
 ,DS.transdate,DS.TransType,SM.CmpSchCode     
 ORDER BY APS.SchId 
 INSERT INTO #SchemeDebit1       
 SELECT S.SchId,B.transdate,B.TransType,SM.cmpschcode,S.SchValidFrom,S.SchValidTill,SC.SchemeBudget,CircularNo, CircularDate,      
 SUM(B.BaseQty) [SecSalesQty],CAST(SUM(B.LCTR) AS NUMERIC(18,6)) [SecSalesVal],CAST(0 AS NUMERIC(18,6)) Liab,      
 CAST(0 AS NUMERIC(18,6)) Amount      
 FROM #ApplicableScheme S (NOLOCK),      
 #DebitSalesDetails B (NOLOCK) ,      
 SchemeMaster SM LEFT Outer JOIN SchemeCirculardetails SC ON SM.CmpSchCode=SC.CmpSchcode-- added By Mohana      
 WHERE S.PrdId = B.PrdId AND S.SchId=SM.SchId  and Transtype=2 AND       
 --PMSNo:ILCRSTPAR0909      
 --S.SchValidFrom BETWEEN @FromDate AND @ToDate      
 --AND S.SchValidTill  BETWEEN @FromDate AND @ToDate      
 --(S.SchValidFrom BETWEEN @FromDate AND @ToDate      
 --or S.SchValidTill  BETWEEN @FromDate AND @ToDate)      
 (B.Transdate BETWEEN @FromDate AND @ToDate       
 OR  B.Transdate  BETWEEN @FromDate AND @ToDate )     
 AND SM.cmpschcode in (select Cmpschcode from SchemeCategorydetails where Schcategory_type  IN ('Trade Scheme','General Scheme'))       --ILCRSTPAR5132 
 GROUP BY S.SchId,SM.Cmpschcode,S.SchValidFrom,S.SchValidTill,SC.SchemeBudget,CircularNo,CircularDate,Transdate,B.TransType       
 ORDER BY S.SchId
 INSERT INTO #SchemeDebit1      
 SELECT  APS.Schid,DS.transdate,DS.TransType,SM.cmpschcode,APS.SchValidFrom,APS.SchValidTill,SC.SchemeBudget,CircularNo, CircularDate,      
 SUM(SP.BaseQty) [SecSalesQty],Round(cast((sum(SP.BaseQty*PrdBatDetailValue)+ (sum(SP.BaseQty*PrdBatDetailValue)*(T.TaxPerc/100))) AS Numeric(18,6)),2) AS  [SecSalesVal],CAST(0 AS NUMERIC(18,6)) Liab,CAST(0 AS NUMERIC(18,6)) Amount      
 from Returnheader S       
 inner join Returnproduct SP ON S.Returnid =sp.Returnid       
 inner join ReturnSchemeLineDt SIL ON SIL.Returnid=s.Returnid and SIL.Returnid =SP.Returnid AND SIL.prdid =sp.prdid and sil.prdbatid =sp.PrdBatId       
 inner join #DebitSalesDetails DS ON DS.salid =S.Returnid AND DS.salid =SP.Returnid AND DS.salid =SIl.Returnid and DS.prdid =SP.prdid and DS.prdbatid = SP.prdbatid AND DS.prdid =SP.prdid and DS.prdbatid =SIl.prdbatid        
 inner join #ApplicableScheme APS ON APS.schid = SIL.schid AND APS.prdid =DS.prdid AND APS.Prdid =SIL.Prdid       
 inner join SchemeMaster SM ON SM.schid =SIL.Schid AND SM.Schid =APS.Schid       
 inner join #ParleOutputTaxPercentage T ON T.salid =DS.salid and S.Returnid =T.salid and SP.Salid =T.salid AND SP.Salid =SIL.Returnid       
 and DS.slno =T.PrdSlno and T.TransId = DS.TransType       
 LEFT Outer JOIN SchemeCirculardetails SC ON SM.CmpSchCode=SC.CmpSchcode-- added By Mohana       
 inner join ProductBatchDetails D on D.prdbatid=SIL.prdbatid and D.prdbatid=Sp.prdbatid and D.SlNo=3 and DefaultPrice=1      
 WHERE APS.PrdId = DS.PrdId AND APS.SchId=SM.SchId  and Transtype=2 AND      
 --PMS NO:ILCRSTPAR0909      
 --S.SchValidFrom BETWEEN @FromDate AND @ToDate      
 --AND S.SchValidTill  BETWEEN @FromDate AND @ToDate      
 --(S.SchValidFrom BETWEEN @FromDate AND @ToDate      
 --or S.SchValidTill  BETWEEN @FromDate AND @ToDate)      
 (DS.Transdate BETWEEN @FromDate AND @ToDate       
 OR DS.TransDate BETWEEN @FromDate AND @ToDate )----PMS NO:ILCRSTPAR1309 Till Here      
 AND SM.cmpschcode in (select Cmpschcode from SchemeCategorydetails where Schcategory_type not IN ('Trade Scheme','General Scheme'))       --ILCRSTPAR5132 
 GROUP BY APS.SchId,SM.cmpschcode,APS.SchValidFrom,APS.SchValidTill,SC.SchemeBudget,CircularNo,CircularDate,SP.BaseQty,PrdBatDetailValue,T.TaxPerc
 ,DS.transdate,DS.TransType      
 ORDER BY APS.SchId
 DELETE FROM #SchemeDebit1 WHERE SchId NOT IN (SELECT Schid FROM Debitnote_Scheme WHERE Linetype=1)            
 INSERT INTO #SchemeDebit1    
 SELECT  S.SchId,B.transdate,B.TransType ,SM.CmpSchCode,S.SchValidFrom,S.SchValidTill,SC.SchemeBudget,CircularNo, CircularDate,    
 SUM(B.BaseQty) [SecSalesQty],CAST(SUM(B.LCTR) AS NUMERIC(18,6)) [SecSalesVal],CAST(0 AS NUMERIC(18,6)) Liab,    
 CAST(0 AS NUMERIC(18,6)) Amount    
 FROM #ApplicableScheme S (NOLOCK),    
 #DebitSalesDetails B (NOLOCK) , 
 SchemeMaster SM LEFT Outer JOIN SchemeCirculardetails SC ON SM.CmpSchCode=SC.CmpSchcode-- added By Mohana    
 ,Debitnote_Scheme D       
 WHERE S.PrdId = B.PrdId AND S.SchId=SM.SchId  and Transtype=2      
 AND S.Schid = D.Schid AND B.Prdid =D.Prdid AND B.Salid =D.Salid     
 AND S.SchId NOT IN (SELECT schid FROM #SchemeDebit1) AND Linetype = 2    
 GROUP BY S.SchId,SM.CmpSchCode,S.SchValidFrom,S.SchValidTill,SC.SchemeBudget,CircularNo,CircularDate,B.transdate,B.TransType    
 ORDER BY S.SchId    
 --SELECT  SchId,transdate,CmpSchCode,SchValidFrom,SchValidTill,SchemeBudget,CircularNo, CircularDate,    
 --SUM(SecSalesQty) SecSalesQty,CAST(SUM(SecSalesVal) AS NUMERIC(18,6)) [SecSalesVal],CAST(0 AS NUMERIC(18,6)) Liab,    
 --CAST(0 AS NUMERIC(18,6)) Amount,CASE TransType WHEN 1 THEN 'Sales' WHEN 2 THEN 'Sales Return' END TransType    
 --INTO #SchemeDebit from #SchemeDebit1      
 --GROUP BY SchId,CmpSchCode,SchValidFrom,SchValidTill,SchemeBudget,CircularNo, CircularDate,transdate,TransType 
 SELECT  A.SchId,Transdate,TransType,A.CmpSchCode,A.SchValidFrom,A.SchValidTill,SchemeBudget,CircularNo, CircularDate,      
 SUM(SecSalesQty) SecSalesQty,CAST(SUM(SecSalesVal) AS NUMERIC(18,6)) [SecSalesVal],CAST(0 AS NUMERIC(18,6)) Liab,      
 CAST(0 AS NUMERIC(18,6)) Amount      
 INTO #SchemeDebit       
 from #SchemeDebit1 A INNER JOIN SCHEMEMASTER B ON A.schid=B.schid and B.cmpschcode in (select Cmpschcode from SchemeCategorydetails where Schcategory_type IN ('Trade Scheme','General Scheme'))        --ILCRSTPAR5132
 GROUP BY A.SchId,A.transdate,TransType,A.CmpSchCode,a.SchValidFrom,a.SchValidTill,SchemeBudget,CircularNo, CircularDate 
 INSERT  INTO #SchemeDebit      
 SELECT  A.SchId,Transdate,TransType,A.CmpSchCode,A.SchValidFrom,A.SchValidTill,SchemeBudget,CircularNo, CircularDate,      
 SUM(SecSalesQty) SecSalesQty,CAST(SUM(SecSalesVal) AS NUMERIC(18,6)) [SecSalesVal],CAST(0 AS NUMERIC(18,6)) Liab,      
 CAST(0 AS NUMERIC(18,6)) Amount      
 from #SchemeDebit1 A      
 INNER JOIN SCHEMEMASTER B ON A.schid=B.schid and B.cmpschcode in (select Cmpschcode from SchemeCategorydetails where Schcategory_type NOT IN ('Trade Scheme','General Scheme') )      --ILCRSTPAR5132  
 GROUP BY A.SchId,Transdate,TransType,A.CmpSchCode,a.SchValidFrom,a.SchValidTill,SchemeBudget,CircularNo, CircularDate      
 -------------------  Added by lakshman M dated on 29-03-2019 PMS ID: ILCRSTPAR3860 ----
  SELECT DISTINCT TaxPerc,B.SalId,B.PrdId  INTO #TaxPerc FROM SalesInvoiceProduct B   
  INNER JOIN ParleOutputTaxPercentage P ON P.SalId = B.SalId and  B.SlNo = P.PrdSlno AND TRANSID = 1   
  --Till Here   
	
  SELECT salid,Schid,SUM(Schamt) SchAmt ,Sum(taxamt) TaxAmt INTO #SchFinal 
  FROM   
  (  
	  SELECT salid,A.SchId,SUM(A.schamt) SchAmt, (SUM(A.schamt)*(TaxPerc/100)) TaxAmt   
	   FROM (  
			  --ILCRSTPAR2868  
			  --SELECT Schid ,a.PRDID,TaxPerc,SUM (FlatAmount+DiscountPer+FreeValue+GiftValue)schamt FROM Debitnote_Scheme A   
			  --INNER JOIN SalesInvoiceProduct B ON A.Salid = b.SalId AND a.Prdid = b.PrdId    
			  --INNER JOIN ParleOutputTaxPercentage P ON P.SalId = B.SalId AND A.Salid = P.SalId AND B.SlNo = P.PrdSlno AND TRANSID = 1 AND Linetype = 1  
			  --GROUP BY  A.PRDID,A.SchId,TaxPerc  
			  SELECT  A.salid,Schid ,a.PRDID,TaxPerc,SUM (FlatAmount+DiscountPer+FreeValue+GiftValue)schamt FROM Debitnote_Scheme A   
			  INNER JOIN #TaxPerc B ON A.Salid = b.SalId AND a.Prdid = b.PrdId AND Linetype = 1 -- where   schid = 1983    
			  GROUP BY  A.PRDID,A.SchId,TaxPerc,A.salid 
			  --Till Here  
			)A  
  GROUP BY A.SchId,TaxPerc,salid  
  )B Group by  sCHID,salid   
	  insert into #SchFinal  
	  SELECT salid,Schid,SUM(Schamt) SchAmt ,Sum(taxamt) TaxAmt FROM   
	  (  
	  SELECT A.salid,A.SchId,SUM(A.schamt) SchAmt, (SUM(A.schamt)*(TaxPerc/100)) TaxAmt      
	  FROM (  
	  SELECT A.salid,Schid ,a.PRDID,TaxPerc,SUM (FlatAmount+DiscountPer+FreeValue+GiftValue)schamt   
	  FROM Debitnote_Scheme A INNER JOIN RETURNPRODUCT B ON A.Salid = b.ReturnID AND a.Prdid = b.PrdId   
	  INNER JOIN ParleOutputTaxPercentage P ON P.SalId = B.ReturnID AND A.Salid = P.SalId AND B.SlNo = P.PrdSlno AND TRANSID = 2 AND a.Linetype =2  
	  and StockTypeId IN (SELECT StockTypeId FROM STOCKTYPE WHERE SystemStockType = 1) 
	  GROUP BY  A.PRDID,A.SchId,TaxPerc,A.salid  
	  )A  
	  GROUP BY A.SchId,TaxPerc,salid 
	  )B Group by  sCHID,salid   
	SELECT DISTINCT  SALINVDATE,SD.SCHID,CASE S.APPLYTAXFORCLAIM WHEN 0 THEN SCHAMT ELSE  (SCHAMT+TAXAMT) END AS SCHAMT INTO #SCHTAXFINAL
	FROM #SCHEMEDEBIT SD (NOLOCK) INNER JOIN (SELECT DISTINCT SALINVDATE ,SCHID,SUM(SCHAMT) SCHAMT ,SUM(TAXAMT) TAXAMT FROM  #SCHFINAL A INNER JOIN SALESINVOICE S ON A.SALID =S.SALID  
	GROUP BY SCHID,SALINVDATE) D  ON SD.SCHID = D.SCHID --CHANGED FOR CLAIMAMTMISMATCH  
	INNER JOIN SCHEMEMASTER S ON S.SCHID = D.SCHID AND S.SCHID = SD.SCHID AND SD.TRANSDATE=D.SALINVDATE --WHERE  SD.SCHID = 1983 
	
	SELECT DISTINCT  Returndate,SD.SCHID,CASE S.APPLYTAXFORCLAIM WHEN 0 THEN SCHAMT ELSE  (SCHAMT+TAXAMT) END AS SCHAMT INTO #SCHTAXFINAL1
	FROM #SCHEMEDEBIT SD (NOLOCK) INNER JOIN (SELECT DISTINCT Returndate ,SCHID,SUM(SCHAMT) SCHAMT ,SUM(TAXAMT) TAXAMT FROM  #SCHFINAL A
	 INNER JOIN ReturnHeader 
	 S ON A.SALID =S.ReturnID ANd a.SchAmt <0   
	GROUP BY SCHID,Returndate) D  ON SD.SCHID = D.SCHID --CHANGED FOR CLAIMAMTMISMATCH  
	INNER JOIN SCHEMEMASTER S ON S.SCHID = D.SCHID AND S.SCHID = SD.SCHID AND SD.TRANSDATE=D.Returndate --WHERE  SD.SCHID = 1983 
	UPDATE SD SET SD.AMOUNT = D.SCHAMT
	FROM #SCHEMEDEBIT SD (NOLOCK) INNER JOIN #SCHTAXFINAL D  ON SD.SCHID = D.SCHID --CHANGED FOR CLAIMAMT MISMATCH  
	INNER JOIN SCHEMEMASTER S ON S.SCHID = D.SCHID AND S.SCHID = SD.SCHID  
	AND D.SALINVDATE=SD.TRANSDATE
	
	
	UPDATE SD SET SD.AMOUNT = D.SCHAMT
	FROM #SCHEMEDEBIT SD (NOLOCK) INNER JOIN #SCHTAXFINAL1 D  ON SD.SCHID = D.SCHID --CHANGED FOR CLAIMAMT MISMATCH  
	INNER JOIN SCHEMEMASTER S ON S.SCHID = D.SCHID AND S.SCHID = SD.SCHID  
	AND D.ReturnDate=SD.TRANSDATE
	------------------------ Till here PMS ID: ILCRSTPAR5513--------------- 
	------------------------ till here PMS ID: ILCRSTPAR3860 ---------------
	  
 --UPDATE SD SET SD.Amount = schamt    
 --FROM #SchemeDebit SD (NOLOCK) INNER JOIN (SELECT Schid ,Salinvdate ,SUM (FlatAmount+DiscountPer+FreeValue+GiftValue)schamt    
 --FROM Debitnote_Scheme where Linetype = 1  group by Schid,Salinvdate )D  ON SD.Schid = D.Schid AND SD.TransDate =D.Salinvdate    
 --ANd transType = 'Sales'    
 --UPDATE SD SET SD.Amount = schamt    
 --FROM #SchemeDebit SD (NOLOCK) INNER JOIN (SELECT Schid ,Salinvdate ,SUM (FlatAmount+DiscountPer+FreeValue+GiftValue)schamt    
 --FROM Debitnote_Scheme where Linetype = 2  group by Schid,Salinvdate)D  ON SD.Schid = D.Schid AND SD.TransDate =D.Salinvdate    
 --ANd transType = 'Sales Return' 
 ------------------------------------------added by lakshman M PMS ID: ILCRSTPAR7726  -----------
 UPDATE SD SET SD.Liab = ((CAST(( SD.Amount / SD.[SecSalesVal]) AS NUMERIC(18,6)))*100)    
 FROM #SchemeDebit SD (NOLOCK)    
 WHERE SD.[SecSalesVal] <> 0
 ---------------Till here ----------------
  INSERT INTO Cs2Cn_Prk_DebitNoteTopSheet2 (DistCode,CmpSchCode,SecSalesQty,SecSalesVal,Liab,Amount,      
  UploadFlag,SyncId,ServerDate,TransDate,TransType)      
  SELECT @DistCode,CmpSchCode,[SecSalesQty],[SecSalesVal],Liab,Amount,'N' UploadFlag,NULL,@ServerDate,TransDate,TransType    
  FROM #SchemeDebit    
 --ICRSTPAR7182    
 UPDATE A SET UPLOAD=1 FROM DebitNoteTopSheet2Track A(NOLOCK) WHERE Upload=0 and TransDate=@FromDate    
 --ICRSTPAR7182    
 RETURN         
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_Validate_PurchaseReceiptProduct' AND TYPE ='P')
DROP PROCEDURE Proc_Validate_PurchaseReceiptProduct
GO
-- EXEC Proc_Validate_PurchaseReceiptProduct 0
CREATE PROCEDURE Proc_Validate_PurchaseReceiptProduct
(  
 @Po_ErrNo INT OUTPUT  
)  
AS  
/*********************************  
* PROCEDURE		: Proc_Validate_PurchaseReceiptProduct  
* PURPOSE		: To Insert and Update records in the Table PurchaseReceiptProduct 
* CREATED		: Nandakumar R.G  
* CREATED DATE	: 03/05/2010  
* MODIFIED  
* DATE      AUTHOR     DESCRIPTION  
------------------------------------------------  
* {date} {developer}  {brief modification description}  
***************************************************************************************************
05-03-2019  Lakshman M	 SR     ILCRSTPAR6947         Purchase backup date validation decreased from CS As per request 7 days only configuration.
***************************************************************************************************/  
SET NOCOUNT ON  
BEGIN
	
	DECLARE @Exist			AS  INT  
	DECLARE @Tabname		AS  NVARCHAR(100)  
	DECLARE @Fldname		AS  NVARCHAR(100)  
	DECLARE @CmpInvNo		AS  NVARCHAR(100)   
	DECLARE @RowId			AS  INT
	DECLARE @PrdCode		AS  NVARCHAR(100)  
	DECLARE @PrdBatCode		AS  NVARCHAR(100)  
	DECLARE @InvUOMCode		AS  NVARCHAR(100)  
	DECLARE @InvQty			AS  NUMERIC(38,0)
	DECLARE @PRRate			AS  NUMERIC(38,6)
	DECLARE @GrossAmt		AS  NUMERIC(38,6)
	DECLARE @DiscAmt		AS  NUMERIC(38,6)  
	DECLARE @TaxAmt			AS  NUMERIC(38,6)  
	DECLARE @NetAmt			AS  NUMERIC(38,6)
	DECLARE @FreightCharges AS  NUMERIC(38,6)   
	
	DECLARE @PrdId			AS  INT  
	DECLARE @PrdBatId		AS  INT  
	DECLARE @InvUOMId		AS  INT  
	DECLARE @NewPrd			AS  INT  
	DECLARE @SubFlag		AS	INT
	
	SET @Po_ErrNo=0  
	SET @Exist=0  
	SET @SubFlag=0
	
	SET @Fldname='CmpInvNo'  
	SET @Tabname = 'ETL_Prk_PurchaseReceiptPrdDt'  
	SET @Exist=0  
	
	IF EXISTS (SELECT * FROM DBO.SysObjects WHERE ID = OBJECT_ID(N'InvProductToAvoid')
	AND OBJECTPROPERTY(ID, N'IsUserTable') = 1)
	BEGIN
		DROP TABLE InvProductToAvoid	
	END
	CREATE TABLE InvProductToAvoid
	(
		CmpInvNo NVARCHAR(50)
	)
	
	DECLARE Cur_PurchaseReceiptProduct CURSOR  
	FOR SELECT ISNULL([Company Invoice No],''),ISNULL([RowId],0),ISNULL([Product Code],''),  
	ISNULL([Batch Code],''),ISNULL([UOM],''),ISNULL([Invoice Qty],0),ISNULL([Purchase Rate],0),ISNULL([Gross],0),ISNULL([Discount In Amount],0),  
	ISNULL([Tax In Amount],0),ISNULL([Net Amount],0), ISNULL([NewPrd],0),ISNULL([FreightCharges],0)
	FROM ETL_Prk_PurchaseReceiptPrdDt  
	
	OPEN Cur_PurchaseReceiptProduct  	
	FETCH NEXT FROM Cur_PurchaseReceiptProduct INTO @CmpInvNo,@RowId,@PrdCode,@PrdBatCode,  
	@InvUOMCode,@InvQty,@PRRate,@GrossAmt,@DiscAmt,@TaxAmt,@NetAmt,@NewPrd,@FreightCharges  
	
	WHILE @@FETCH_STATUS=0  
	BEGIN
	
		SET @PrdId =0
		SET @PrdBatId=0
		SET @InvUOMId=0
		SET @Po_ErrNo=0 
		
		SET @Exist=0  
		
		IF NOT EXISTS(SELECT * FROM ETLTempPurchaseReceipt WITH (NOLOCK) WHERE CmpInvNo=@CmpInvNo)  
		BEGIN  
			INSERT INTO Errorlog VALUES (1,@TabName,'Company Invoice No',  
			'Company Invoice No:'+ CAST(@CmpInvNo AS NVARCHAR(100)) +' is not available')    
			SET @Po_ErrNo=1  
		END  		
		
		SELECT @PrdId=PrdId FROM Product WITH (NOLOCK) WHERE PrdCCode=@PrdCode  		
		SELECT @PrdBatId=PrdBatId FROM ProductBatch WITH (NOLOCK) WHERE PrdBatCode=@PrdBatCode AND PrdId=@PrdId  
		SELECT @InvUOMId=UOMId FROM UOMMaster WITH (NOLOCK) WHERE UOMCode=@InvUOMCode  
		IF @Po_ErrNo=0
		BEGIN
			IF NOT EXISTS(SELECT UM.UomId,um.UomCode,UG.ConversionFactor
			FROM UomGroup UG,UomMaster UM ,Product P
			WHERE UG.UomId = UM.UomId AND P.UomGroupId = UG.UomGroupId AND
			P.PrdId = @PrdId AND UG.UomId = @InvUOMId)
			BEGIN
				INSERT INTO Errorlog VALUES (1,@TabName,'Invoice UOM',
				'Invoice UOM:'+ CAST(@InvUOMCode AS NVARCHAR(100)) +' is not available for the product:'+ CAST(@PrdCode  AS NVARCHAR(100)))
				
				INSERT INTO InvProductToAvoid
				SELECT @CmpInvNo
				SET @Po_ErrNo=1
			END
		END
		
		IF @Po_ErrNo=0  
		BEGIN  
			INSERT INTO ETLTempPurchaseReceiptProduct   
			(CmpInvNo,RowId,PrdId,PrdBatId,POUOMId,POQty,InvUOMId,InvQty,GrossAmt,DiscAmt,TaxAmt,NetAmt,NewPrd,FreightCharges)  
			VALUES(@CmpInvNo,@RowId,@PrdId,@PrdBatId,0,0,@InvUOMId,@InvQty,@GrossAmt,@DiscAmt,@TaxAmt,@NetAmt,@NewPrd,@FreightCharges)  
		END  		
		
		IF @Po_ErrNo<>0  
		BEGIN   
			SET @SubFlag=1
		END
		
		--To capture all the missing UOM
		--IF @Po_ErrNo<>0  
		--BEGIN  
		--	CLOSE Cur_PurchaseReceiptProduct  
		--	DEALLOCATE Cur_PurchaseReceiptProduct  
		--	DELETE FROM ETLTempPurchaseReceiptProduct WHERE CmpInvNo IN (SELECT DISTINCT CmpInvNo FROM InvProductToAvoid)
		--	RETURN  
		--END  
		
		FETCH NEXT FROM Cur_PurchaseReceiptProduct INTO @CmpInvNo,@RowId,@PrdCode,@PrdBatCode,  
		@InvUOMCode,@InvQty,@PRRate,@GrossAmt,@DiscAmt,@TaxAmt,@NetAmt,@NewPrd,@FreightCharges
	
	END  
	CLOSE Cur_PurchaseReceiptProduct  
	DEALLOCATE Cur_PurchaseReceiptProduct  
	
	IF @SubFlag<>0  
	BEGIN  
		SET @Po_ErrNo=1
		DELETE FROM ETLTempPurchaseReceiptProduct WHERE CmpInvNo IN (SELECT DISTINCT CmpInvNo FROM InvProductToAvoid)
		RETURN  
	END

	------------------- Added By lakshman M Dated ON 05/12/2019 PMS ID: ILCRSTPAR6947 --------------
	--SELECT CmpInvNo,count(CmpInvNo) AS TotallinelevelCount INTO #Tempinvoicecount FROM ETLTempPurchaseReceiptProduct 
	--GROUP BY CmpInvNo 

	--SELECT [Company Invoice No] AS CmpInvNo ,count([Company Invoice No]) AS TotallinelevelCount INTO #Tempinvoicecount1 FROM ETL_Prk_PurchaseReceiptPrdDt 
	--GROUP BY [Company Invoice No]

	--IF NOT EXISTS(SELECT * FROM ETL_Prk_PurchaseReceiptPrdDt A inner join Product B ON A.[Product Code]  =B.PrdCCode  inner join ETLTempPurchaseReceiptProduct C ON C.PrdId=B.PrdId AND A.[Company Invoice No] =C.CmpInvNo)
	--BEGIN
	--		DELETE FROM ETLTempPurchaseReceiptProduct WHERE CmpInvNo  NOT IN (SELECT A.CmpInvNo FROM #Tempinvoicecount A inner join #Tempinvoicecount1 B ON A.CmpInvNo =B.CmpInvNo AND A.TotallinelevelCount <>B.TotallinelevelCount )
	--END
	--------------------------------- Till here ------------------
	
	IF @Po_ErrNo=0  
	BEGIN  
		TRUNCATE TABLE ETL_Prk_PurchaseReceiptPrdDt
	END
	
	RETURN   
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Proc_ValidateTempPurchasereceiptMoved' AND TYPE='P')	
DROP PROCEDURE Proc_ValidateTempPurchasereceiptMoved
GO
CREATE PROCEDURE Proc_ValidateTempPurchasereceiptMoved
AS
SET NOCOUNT ON
BEGIN
	IF EXISTS(SELECT *FROM Console2CS_Consolidated_Trace (NOLOCK)where processname like '%purchase%' AND column2 not in(
	SELECT CmpInvNo from ETLTempPurchaseReceipt (NOLOCK) union all select CmpInvNo from PurchaseReceipt (NOLOCK) UNION ALL select compinvno from cn2cs_prk_blpurchasereceipt (NOLOCK)))
	BEGIN 
		SELECT DISTINCT * INTO #TempPur from Console2CS_Consolidated_Trace (NOLOCK) where processname like '%purchase%' and column2 not in(
		SELECT CmpInvNo from ETLTempPurchaseReceipt (NOLOCK)
		UNION ALL
		SELECT CmpInvNo FROM PurchaseReceipt (NOLOCK)
		UNION ALL 
		SELECT compinvno from cn2cs_prk_blpurchasereceipt (NOLOCK))

		ALTER TABLE #TempPur DROP COLUMN [DOWNLOADED DATE]

		UPDATE #TempPur SET SYNCID = (SELECT SYNCID FROM SYNCSTATUS_DOWNLOAD (NOLOCK)),DOWNLOADFLAG='D'

		INSERT INTO CONSOLE2CS_CONSOLIDATED
		SELECT * FROM #TempPur

		EXEC PROC_CONSOLE2CS_CONSOLIDATEDDOWNLOAD
		EXEC PROC_CN2CS_PURCHASERECEIPT 0
	END
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Proc_CN2CS_PurchaseWithLocationCode' AND TYPE='P')	
DROP PROCEDURE Proc_CN2CS_PurchaseWithLocationCode
GO
/*
BEGIN TRANSACTION
EXEC Proc_CN2CS_PurchaseWithLocationCode 0
ROLLBACK TRANSACTION
*/
CREATE PROCEDURE Proc_CN2CS_PurchaseWithLocationCode
(
	@Po_ErrNo INT OUTPUT
)
AS
/***********************************************************
* PROCEDURE	: Proc_CN2CS_PurchaseWithLocationCode
* PURPOSE	: To Insert the records FROM Console into Tables
* SCREEN	: Console Integration-PurchaseReceipt
* CREATED BY: S.Moorthi
* MODIFIED	: 23/12/2014
* DATE      AUTHOR     DESCRIPTION
* {date} {developer}  {brief modIFication description}
*************************************************************/
SET NOCOUNT ON
BEGIN
	
	--------------------------------------
	DECLARE @ErrStatus			INT
	DECLARE @PrdBatCode			NVARCHAR(200)
	DECLARE @ProductCode		NVARCHAR(100)
	DECLARE @SAPProductName		NVARCHAR(300)
	DECLARE @ListPrice			NUMERIC(38,6)
	DECLARE @FreeSchemeFlag		NVARCHAR(5)
	DECLARE @CompInvNo			NVARCHAR(25)
	DECLARE @UOMCode			NVARCHAR(25)
	DECLARE @Qty				INT
	DECLARE @PurchaseDiscount	NUMERIC(38,6)
	DECLARE @VATTaxValue		NUMERIC(38,6)
	DECLARE @SchemeRefrNo		NVARCHAR(25)
	DECLARE @SupplierCode		NVARCHAR(30)
	DECLARE @TransporterCode	NVARCHAR(30)
	DECLARE @POUOM				INT
	DECLARE @RowId				INT
	DECLARE @LineLvlAmt			NUMERIC(38,6)
	DECLARE @QtyInKg			NUMERIC(38,6)
	DECLARE @ExistCompInvNo		NVARCHAR(25)
	DECLARE @FreightCharges		NUMERIC(38,6)
	DECLARE @NetValue		NUMERIC(38,6)
	DECLARE @TotalTax		NUMERIC(38,6)	
	DECLARE @PrdId			AS  INT  
	DECLARE @PrdBatId		AS  INT  
	DECLARE @CompInvDate		AS  DATETIME
	DECLARE @InvUOMId	AS  INT 
	DECLARE @ConsoleProductCode	NVARCHAR(200)
	DECLARE @BatchNo	NVARCHAR(200) 
	
	DELETE FROM CN2CS_Prk_PurchaseWithLocationCode WHERE DownLoadFlag='Y'
	
	EXEC Proc_ValidateTempPurchasereceiptMoved 
	
	DELETE FROM ETL_SAPPurchaseDetails WHERE CmpInvNo in
	(SELECT DISTINCT CmpInvNo FROM SAPPurchaseReceiptDetails)
	
	IF EXISTS (SELECT * FROM DBO.SysObjects WHERE ID = OBJECT_ID(N'InvToAvoid')
	AND OBJECTPROPERTY(ID, N'IsUserTable') = 1)
	BEGIN
		DROP TABLE InvToAvoid	
	END
	CREATE TABLE InvToAvoid
	(
		CmpInvNo NVARCHAR(50)
	)
	
	IF EXISTS(SELECT DISTINCT CompInvNo FROM CN2CS_Prk_PurchaseWithLocationCode
	WHERE CompInvNo IN (SELECT CmpInvNo FROM PurchaseReceipt))
	BEGIN
		INSERT INTO InvToAvoid(CmpInvNo)
		SELECT DISTINCT CompInvNo FROM CN2CS_Prk_PurchaseWithLocationCode
		WHERE CompInvNo IN (SELECT CmpInvNo FROM PurchaseReceipt)
		INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
		SELECT DISTINCT 1,'Purchase Receipt With Location Code','CmpInvNo','Company Invoice No:'+CompInvNo+' Already Available in Purchase Receipt' FROM CN2CS_Prk_PurchaseWithLocationCode
		WHERE CompInvNo IN (SELECT CmpInvNo FROM PurchaseReceipt)
	END
	
	IF EXISTS(SELECT DISTINCT CompInvNo FROM CN2CS_Prk_PurchaseWithLocationCode
	WHERE CompInvNo IN (SELECT CmpInvNo FROM ETL_SAPPurchaseDetails))
	BEGIN
		INSERT INTO InvToAvoid(CmpInvNo)
		SELECT DISTINCT CompInvNo FROM CN2CS_Prk_PurchaseWithLocationCode
		WHERE CompInvNo IN (SELECT CmpInvNo FROM ETL_SAPPurchaseDetails)
		INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
		SELECT DISTINCT 1,'Purchase Receipt With Location Code','CmpInvNo','Company Invoice No:'+CompInvNo+' Already Available in Purchase Receipt With Location Code' FROM CN2CS_Prk_PurchaseWithLocationCode
		WHERE CompInvNo IN (SELECT CmpInvNo FROM ETL_SAPPurchaseDetails)
	END
	
	IF EXISTS(SELECT DISTINCT CompInvNo FROM CN2CS_Prk_PurchaseWithLocationCode
	WHERE CompInvNo NOT IN (SELECT CmpInvNo FROM ETLTempPurchaseReceipt))
	BEGIN
		INSERT INTO InvToAvoid(CmpInvNo)
		SELECT DISTINCT CompInvNo FROM CN2CS_Prk_PurchaseWithLocationCode
		WHERE CompInvNo NOT IN (SELECT CmpInvNo FROM ETLTempPurchaseReceipt)
		INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
		SELECT DISTINCT 1,'Purchase Receipt With Location Code','CmpInvNo','Company Invoice No:'+CompInvNo+' already downloaded and ready for invoicing' FROM CN2CS_Prk_PurchaseWithLocationCode
		WHERE CompInvNo NOT IN (SELECT CmpInvNo FROM ETLTempPurchaseReceipt)
	END
	
	IF EXISTS(SELECT DISTINCT CompInvNo FROM CN2CS_Prk_PurchaseWithLocationCode A(NOLOCK) 
	INNER JOIN Product B(NOLOCK) ON A.ConsoleProductCode=B.PrdCCode 
	WHERE NOT EXISTS(SELECT PrdId FROM ETLTempPurchaseReceiptProduct C(NOLOCK) WHERE B.PrdId=C.PrdId))
	BEGIN
		INSERT INTO InvToAvoid(CmpInvNo)
		SELECT DISTINCT CompInvNo FROM CN2CS_Prk_PurchaseWithLocationCode A(NOLOCK) 
		INNER JOIN Product B(NOLOCK) ON A.ConsoleProductCode=B.PrdCCode 
		WHERE NOT EXISTS(SELECT PrdId FROM ETLTempPurchaseReceiptProduct C(NOLOCK) WHERE B.PrdId=C.PrdId)
		INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
		SELECT DISTINCT 1,'Purchase Receipt With Location Code','PurchaseReceiptWithLocationCode','Product:'+ConsoleProductCode+' Not Available for Invoice:'+CompInvNo FROM CN2CS_Prk_PurchaseWithLocationCode A(NOLOCK) 
		INNER JOIN Product B(NOLOCK) ON A.ConsoleProductCode=B.PrdCCode 
		WHERE NOT EXISTS(SELECT PrdId FROM ETLTempPurchaseReceiptProduct C(NOLOCK) WHERE B.PrdId=C.PrdId)
	END
	
	--IF EXISTS(SELECT DISTINCT CompInvNo FROM CN2CS_Prk_PurchaseWithLocationCode
	--WHERE ConsoleProductCode+'~'+BatchNo
	--NOT IN
	--(SELECT P.PrdCCode+'~'+PB.PrdBatCode FROM Product P,ProductBatch PB WHERE P.PrdId=PB.PrdId))
	--BEGIN
	--	INSERT INTO InvToAvoid(CmpInvNo)
	--	SELECT DISTINCT CompInvNo FROM CN2CS_Prk_PurchaseWithLocationCode
	--	WHERE ConSoleProductCode+'~'+BatchNo
	--	NOT IN (SELECT P.PrdCCode+'~'+PB.PrdBatCode FROM Product P,ProductBatch PB WHERE P.PrdId=PB.PrdId)
		
	--	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	--	SELECT DISTINCT 1,'Purchase Receipt','Product Batch','Product Batch:'+BatchNo+'Not Available for Product:'+ConsoleProductCode+' in Invoice:'+CompInvNo FROM CN2CS_Prk_PurchaseWithLocationCode
	--	WHERE ConsoleProductCode+'~'+BatchNo
	--	NOT IN
	--	(SELECT P.PrdCCode+'~'+PB.PrdBatCode FROM Product P,ProductBatch PB WHERE P.PrdId=PB.PrdId)		
	--END
	
	DECLARE Cur_Purchase CURSOR
	FOR
	SELECT CompInvNo,CompInvDate,SupplierCode,ProductCode,ProductName,ConsoleProductCode,BatchNo,UOMCode,PurQty,ListPriceNSP,
	LineLevelAmount,PurchaseDiscount,VATTaxValue,ISNULL(FreightCharges,0) AS FreightCharges,TotalTax,NetValue
	FROM CN2CS_Prk_PurchaseWithLocationCode WHERE [DownLoadFlag]='D' AND CompInvNo NOT IN(SELECT CmpInvNo FROM InvToAvoid)
	ORDER BY  CompInvNo,CompInvDate,SupplierCode,ProductCode,ProductName,ConsoleProductCode,BatchNo,UOMCode,PurQty,ListPriceNSP,
	LineLevelAmount,PurchaseDiscount,VATTaxValue,FreightCharges,TotalTax,NetValue
	OPEN Cur_Purchase
	FETCH NEXT FROM Cur_Purchase INTO @CompInvNo,@CompInvDate,@SupplierCode,@ProductCode,@SAPProductName,@ConsoleProductCode,@BatchNo,@UOMCode,@Qty,
	@ListPrice,@LineLvlAmt,@PurchaseDiscount,@VATTaxValue,@FreightCharges,@TotalTax,@NetValue		
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @PrdId =0
		SET @PrdBatId=0
		SET @InvUOMId=0
		SET @Po_ErrNo=0 		
			
		SELECT @PrdId=PrdId FROM Product WITH (NOLOCK) WHERE PrdCCode=@ConsoleProductCode  		
		--SELECT @PrdBatId=PrdBatId FROM ProductBatch WITH (NOLOCK) WHERE PrdBatCode=@PrdBatCode AND PrdId=@PrdId  
		SELECT @InvUOMId=UOMId FROM UOMMaster WITH (NOLOCK) WHERE UOMCode=@UOMCode 
		
			INSERT INTO  ETL_SAPPurchaseDetails
				(					
					CmpInvNo,
					CmpInvDate,
					SupplierCode,
					SAPPrdCode,
					SAPPrdName,
					PrdId,
					BatchNo,
					POUOMId,
					UOMCode,
					POQty,
					PurchaseRate,
					Gross,
					DiscountAmount,
					TaxAmount,
					NetAmount,
					FreightCharges,
					TotalTax,
					NetValue
				)	
				SELECT 				   
					   @CompInvNo,
					   @CompInvDate,
					   @SupplierCode,
					   @ProductCode,
					   @SAPProductName,
					   @PrdId,
					   @BatchNo,
					   @InvUOMId,
					   @UOMCode,
					   @Qty,
					   @ListPrice,
					   @LineLvlAmt,
					   @PurchaseDiscount,
					   @VATTaxValue,
					   (@ListPrice-@PurchaseDiscount+@VATTaxValue)* @Qty,
					   @FreightCharges,
					   @TotalTax,
					   @NetValue				   
				   
		FETCH NEXT FROM Cur_Purchase INTO @CompInvNo,@CompInvDate,@SupplierCode,@ProductCode,@SAPProductName,@ConsoleProductCode,
		@BatchNo,@UOMCode,@Qty,@ListPrice,@LineLvlAmt,@PurchaseDiscount,@VATTaxValue,@FreightCharges,@TotalTax,@NetValue
	END
	CLOSE Cur_Purchase
	DEALLOCATE Cur_Purchase
	
	
	UPDATE CN2CS_Prk_PurchaseWithLocationCode SET DownLoadFlag='Y'
	WHERE CompInvNo IN (SELECT DISTINCT CmpInvNo FROM ETL_SAPPurchaseDetails)
	
	SET @Po_ErrNo= @ErrStatus
	RETURN
	
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Proc_SamplingClaimDetails' AND TYPE='P')
DROP PROCEDURE Proc_SamplingClaimDetails
GO
CREATE PROCEDURE Proc_SamplingClaimDetails
(
@Pi_Year	INT,
@Pi_Month	INT,
@Pi_Usrid	INT,
@Pi_Transid	INT
)
AS
/****************************************************************************
* PROCEDURE	:  Proc_SamplingClaimDetails
* PURPOSE	:  TO LOAD THE FREE ISSUE DETAILS
* DATE		:  05-11-2019
* CREATED	:  MOHANA S
* PMS NO	:  CRCRSTPAR0079
*******************************************************************************/
BEGIN
SET NOCOUNT ON
	DELETE FROM  TempSamplingClaimDetails   
	DECLARE @FromDate  DATETIME
	DECLARE @ToDate	   DATETIME
	DECLARE @CirNo	   NVARCHAR(100)
	SELECT @FromDate= DATEADD(MONTH, (@Pi_Month)-1,DATEADD(YEAR, @Pi_Year - 1900, 0))
	SELECT @ToDate = DATEADD(dd, -1, DATEADD(MONTH, @Pi_Month,DATEADD(YEAR, @Pi_Year - 1900, 0)))
	DECLARE @slno AS INT      
	DECLARE @SamplingAmount AS NUMERIC(18,2)      

	SELECT @slno = SlNo FROM BatchCreation WHERE FieldDesc = 'Selling Price'      
	SELECT @SamplingAmount = ISNULL(SUM(D.TotalAmt),0) FROM FreeIssueHd J (NOLOCK),      
	FreeIssueDt D (NOLOCK),      
	ProductBatchDetails P (NOLOCK)      
	WHERE J.IssueId = D.IssueId       
	AND P.PrdBatId = D.PrdBatId AND P.PriceId = D.PriceId       
	AND P.SLNo = 3 AND J.IssueDate BETWEEN @FromDate AND @ToDate  
	
	SELECT DISTINCT TOP 1 CircularNo ,MAX(CreatedDate ) CREATEDDATE
	INTO #SchemeClaimCircular FROM SchemeClaimCircular WHERE ((@FromDate  BETWEEN SchValidFrom  AND SchValidTill ) 
	OR (  @ToDate  BETWEEN SchValidFrom  AND SchValidTill  )) AND ClaimType='Sampling Claim'
	GROUP BY CircularNo
	
	SELECT @CirNo = CircularNo  FROM #SchemeClaimCircular
 
	IF @SamplingAmount>0
	BEGIN
		INSERT INTO TempSamplingClaimDetails
		SELECT CONVERT (VARCHAR(10),GETDATE(),121),@FromDate,@ToDate,@CirNo,@SamplingAmount,@Pi_Usrid,@Pi_Transid		
	END
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_Cn2Cs_BLSchemeRulesetting' AND TYPE='P')
DROP PROCEDURE Proc_Cn2Cs_BLSchemeRulesetting
GO
/*
BEGIN TRANSACTION
delete from errorlog
delete from  schemertrlevelvalidation where schid =3874
EXEC Proc_CN2CS_BLSchemeRulesetting		0
Select * From schemertrlevelvalidation(Nolock)
select distinct * from Etl_Prk_Scheme_RetailerLevelValid
select * from  errorlog
ROLLBACK TRANSACTION
*/
CREATE PROCEDURE Proc_Cn2Cs_BLSchemeRulesetting
(
	@Po_ErrNo INT OUTPUT
)
AS
/*********************************************************************************************************************************
* PROCEDURE		: Proc_Cn2Cs_BLSchemeRulesetting
* PURPOSE		: To Insert and Update records in the Table Etl_Prk_SchemeRuleSettings_Temp,
				  Etl_Prk_SchemeRtrLevelValidation_Temp
* CREATED		: Nandakumar R.G
* CREATED DATE	: 06/01/2009
* MODIFIED
* DATE			AUTHOR				USERSTORYID			CR/BZ		DESCRIPTION 
------------------------------------------------------------------------------------------------------------------------------------------
* 09-Apr-2010   Jayakumar N										Change done based on "Rtr Cap" in SchConfig column in table Etl_Prk_SchemeRuleSettings.
																Based on "Rtr Cap" value updated in respective columns NoOfRtr and RtrCount in SchemeruleSettings table
* 19/12/2019	MarySubashini.S		CRCRSTPAR0094		CR		Retailer Level budget validation
* 03-02-2020	Mohana S			ILCRSTPAR7560		BZ		UAT ISSUE
* 12-02-2020	Mohana S			ILCRSTPAR7825 		BZ		IF Retailer Not Available in SchemertrlevelValidation, the Scheme will not apply	
*********************************************************************************************************************************/
SET NOCOUNT ON
BEGIN
	DECLARE @Exist 		AS INT
	DECLARE @Tabname AS     NVARCHAR(100)
	DECLARE @DestTabname AS NVARCHAR(100)
	DECLARE @Fldname AS     NVARCHAR(100)
	DECLARE @CmpSchCode AS NVARCHAR(200)
	DECLARE @SchConfig AS NVARCHAR(200)
	DECLARE @SchRules AS NVARCHAR(200)
	DECLARE @NoofBills AS NVARCHAR(200)
	DECLARE @FromDate AS NVARCHAR(200)
	DECLARE @ToDate AS NVARCHAR(200)
	DECLARE @MarketVisit AS NVARCHAR(200)
	DECLARE @ApplySchBasedOn AS NVARCHAR(200)
	DECLARE @EnableRtrLvl AS NVARCHAR(200)
	DECLARE @AllowSaving AS NVARCHAR(200)
	DECLARE @AllowSelection AS NVARCHAR(200)
	DECLARE @RtrCode AS NVARCHAR(200)
	DECLARE @RtrFromDate AS NVARCHAR(200)
	DECLARE @RtrToDate AS NVARCHAR(200)
	DECLARE @BudgetAllocated AS NVARCHAR(200)
	DECLARE @Status AS NVARCHAR(200)
	DECLARE @SchId AS INT
	DECLARE @SchConfigId AS INT
	DECLARE @SchRulesId AS INT
	DECLARE @ApplySchBasedOnId AS INT
	DECLARE @EnableRtrLvlId AS INT
	DECLARE @AllowSavingId AS INT
	DECLARE @AllowSelectionId AS INT
	DECLARE @RtrId AS INT
	DECLARE @StatusId AS INT
	DECLARE @SchLevelId 	AS INT
	DECLARE @ConFig		AS INT
	DECLARE @GetKey 	AS INT
	DECLARE @GetKeyCode	AS VARCHAR(200)
	DECLARE @CmpId 		AS INT
	DECLARE @SLevel		AS INT
	DECLARE @CmpPrdCtgId	AS INT
	DECLARE @CmpCnt		AS INT
	DECLARE @EtlCnt		AS INT
	DECLARE @SlNo 		AS INT
	DECLARE @RtrAttrCnt	AS INT
	DECLARE @RtrLvlCnt	AS INT
	DECLARE @SchWithOutPrd AS INT	
	
	SET @DestTabname='SchemeRuleSetting'
	SET @Fldname='SchConfig'
	SET @Tabname = 'Etl_Prk_SchemeRuleSettings_Temp'
	SET @Exist=0
	SET @Po_ErrNo=0
	SELECT @ConFig=ISNULL(Status,0) FROM Configuration WHERE
	ModuleId='GENCONFIG16' AND ModuleName='General Configuration'
	DECLARE Cur_SchemeRules CURSOR
	FOR SELECT DISTINCT ISNULL(CmpSchCode,'') AS CmpSchCode,ISNULL(SchConfig,''),ISNULL(SchRules,''),ISNULL(NoofBills,''),ISNULL(SchValidFrom,''),ISNULL(SchValidTill,''),
	ISNULL(MarketVisit,''),ISNULL(ApplySchBasedOn,''),ISNULL(EnableRtrLvl,''),ISNULL(AllowSaving,''),ISNULL(AllowSelection,'')
	FROM Etl_Prk_SchemeHD_Slabs_Rules
	WHERE CmpSchCode NOT IN (SELECT CmpSchCode FROM SchToAvoid) AND DownLoadFlag='D'
	AND CmpSchCode IN (SELECT CmpSchCode FROM SchemeMaster(NOLOCK))
	ORDER BY CmpSchCode
	OPEN Cur_SchemeRules
	FETCH NEXT FROM Cur_SchemeRules INTO @CmpSchCode,@SchConfig,@SchRules,@NoofBills,
	@FromDate,@ToDate,@MarketVisit,@ApplySchBasedOn,@EnableRtrLvl,@AllowSaving,@AllowSelection
	WHILE @@FETCH_STATUS=0
	BEGIN		
		SET @Po_ErrNo=0
		IF LTRIM(RTRIM(@CmpSchCode))=''
		BEGIN
			INSERT INTO Errorlog VALUES (1,@TabName,'Company Scheme Code',
			'Company Scheme Code should not be empty')
			SET @Po_ErrNo=1
		END
		ELSE
		BEGIN
			SELECT @SchId=SchId,@SchLevelId=SchLevelId FROM SchemeMaster
			WHERE CmpSchCode=@CmpSchCode
		END
		
		IF @Po_ErrNo=0
		BEGIN
			IF LTRIM(RTRIM(@SchConfig))='---'
			BEGIN
				GOTO X 
				----CLOSE Cur_SchemeRules
				----DEALLOCATE Cur_SchemeRules
				----Return
			END
			IF LTRIM(RTRIM(@SchConfig))='YES'
			BEGIN
				SET @SchConfigId=1
			END
			ELSE 
			BEGIN
				SET @SchConfigId=0
			END
		END
		
		IF @SchConfigId=1 AND @Po_ErrNo=0
		BEGIN		
			IF LTRIM(RTRIM(@SchRules))=''
			BEGIN
				INSERT INTO Errorlog VALUES (1,@TabName,'Scheme Rules',
				'Scheme Rules should not be empty for Scheme Code:'+@CmpSchCode)
				SET @Po_ErrNo=1
			END
			ELSE
			BEGIN
				IF LTRIM(RTRIM(@SchRules))='PRODUCT'
				BEGIN
					SET @SchRulesId=0
				END
				ELSE IF LTRIM(RTRIM(@SchRules))='BILL'
				BEGIN
					SET @SchRulesId=1
				END	
				ELSE IF LTRIM(RTRIM(@SchRules))='DATE'
				BEGIN
					SET @SchRulesId=2
				END
				ELSE IF LTRIM(RTRIM(@SchRules))='MARKET'
				BEGIN
					SET @SchRulesId=3
				END			
			END
	
			IF @Po_ErrNo=0
			BEGIN
				IF @SchRulesId=1
				BEGIN
					IF NOT ISNUMERIC(@NoofBills)=1 
					BEGIN
						INSERT INTO Errorlog VALUES (1,@TabName,'Scheme No Of Bills',
						'Scheme No Of Bills should be greater than zero for Scheme Code:'+@CmpSchCode)
						SET @Po_ErrNo=1
					END
					ELSE IF @NoofBills<=0
					BEGIN
						INSERT INTO Errorlog VALUES (1,@TabName,'Scheme No Of Bills',
						'Scheme No Of Bills should be greater than zero for Scheme Code:'+@CmpSchCode)
						SET @Po_ErrNo=1
					END	
				END
				ELSE IF @SchRulesId=2
				BEGIN
					IF @Po_ErrNo=0
					BEGIN
						IF ISDATE(@FromDate)=1 AND ISDATE(@ToDate)=1
						BEGIN
							IF DATEDIFF(DD,@FromDate,@ToDate)<0 OR @ToDate< CONVERT(NVARCHAR(10),GETDATE(),121)
							BEGIN
								INSERT INTO Errorlog VALUES (1,@TabName,'Date',
								'From Date should be less than To Date for Scheme Code:'+@CmpSchCode)           	
								SET @Po_ErrNo=1
							END
						END
						ELSE
						BEGIN
							INSERT INTO Errorlog VALUES (1,@TabName,'Date',
							'Either From Date or To Date is wrong for Scheme Code:'+@CmpSchCode)           	
							SET @Po_ErrNo=1
						END
					END	
				END
				IF @SchRulesId=3
				BEGIN
					IF ISNUMERIC(@MarketVisit)=1 
					BEGIN
						INSERT INTO Errorlog VALUES (1,@TabName,'Scheme Market Visits',
						'Scheme Market Visits should be greater than zero for Scheme Code:'+@CmpSchCode)
						SET @Po_ErrNo=1
					END
					ELSE IF @MarketVisit<=0
					BEGIN
						INSERT INTO Errorlog VALUES (1,@TabName,'Scheme No Of Bills',
						'Scheme Market Visits should be greater than zero for Scheme Code:'+@CmpSchCode)
						SET @Po_ErrNo=1
					END
				END
			END
	
			IF @Po_ErrNo=0
			BEGIN
				IF LTRIM(RTRIM(@ApplySchBasedOn))=''
				BEGIN
					INSERT INTO Errorlog VALUES (1,@TabName,'Scheme-Apply Based On',
					'Scheme-Apply Based On Rules should not be empty for Scheme Code:'+@CmpSchCode)
					SET @Po_ErrNo=1
				END
				ELSE
				BEGIN
					IF LTRIM(RTRIM(@ApplySchBasedOn))='Company'
					BEGIN
						SET @ApplySchBasedOnId=0
					END
					ELSE IF LTRIM(RTRIM(@ApplySchBasedOn))='Retailer'
					BEGIN
						SET @ApplySchBasedOnId=1
					END	
					ELSE IF LTRIM(RTRIM(@ApplySchBasedOn))='JC'
					BEGIN
						SET @ApplySchBasedOnId=2
					END
				END	
			END
		END
		ELSE
		BEGIN
			SET @SchRulesId=-1
			SET @ApplySchBasedOnId=-1		
			SET @MarketVisit=-1		
			IF UPPER(@SchConfig)<>UPPER('Rtr Cap')
			BEGIN
				SET @NoofBills=-1					
			END
		END
	
		IF @Po_ErrNo=0
		BEGIN
			IF LTRIM(RTRIM(@EnableRtrLvl))='Yes'
			BEGIN
				SET @EnableRtrLvlId=1	
							
			END
			ELSE
			BEGIN
				SET @EnableRtrLvlId=0
			END
		END
			
		IF @Po_ErrNo=0
		BEGIN
			IF @EnableRtrLvlId=1
			BEGIN
				 
				IF NOT EXISTS (SELECT * FROM Etl_Prk_Scheme_RetailerLevelValid WHERE CmpSchCode=@CmpSchCode)
				BEGIN
					INSERT INTO Errorlog VALUES (1,@TabName,'Retailer Level Validation',
					'Retailer not found for Scheme Code:'+@CmpSchCode)
					SET @Po_ErrNo =1
				END
				IF LTRIM(RTRIM(@AllowSaving))='Yes'
				BEGIN
					SET @AllowSavingId=1					
				END
				ELSE
				BEGIN
					SET @AllowSavingId=0					
				END
				IF LTRIM(RTRIM(@AllowSelection))='Yes'
				BEGIN
					SET @AllowSelectionId=1					
				END
				ELSE
				BEGIN
					SET @AllowSelectionId=0					
				END
			END
			ELSE
			BEGIN
				SET @AllowSavingId=0
				SET @AllowSelectionId=0
			END
		END
		 
		
		---Insert Rule
		IF @ConFig<>1
		BEGIN
			IF NOT EXISTS(SELECT SchId FROM SchemeMaster 
			WHERE CmpSchCode=LTRIM(RTRIM(@CmpSchCode)))
			BEGIN
				INSERT INTO Errorlog VALUES (1,@TabName,'Scheme Code',
				'Company Scheme Code not found')
				SET @Exist=0
				SET @Po_ErrNo =1
			END
			ELSE
			BEGIN
				SELECT @GetKey=SchId,@CmpId=CmpId FROM SchemeMaster WHERE CmpSchCode=LTRIM(RTRIM(@CmpSchCode))
				SELECT @CmpPrdCtgId=SchLevelId FROM SchemeMaster WHERE CmpSchCode=LTRIM(RTRIM(@CmpSchCode))
				SET @Po_ErrNo =0
				IF EXISTS(SELECT * FROM SchemeRuleSettings WHERE SchId=@GetKey)
				BEGIN
					SET @Exist=1
				END
				ELSE
				BEGIN
					SET @Exist=0
				END
			END
		END
		ELSE
		BEGIN
			IF EXISTS(SELECT SchId FROM SchemeMaster 
			WHERE CmpSchCode=LTRIM(RTRIM(@CmpSchCode)))
			BEGIN
				SELECT @GetKey=SchId,@CmpId=CmpId FROM SchemeMaster 
				WHERE CmpSchCode=LTRIM(RTRIM(@CmpSchCode))
				SELECT @CmpPrdCtgId=SchLevelId FROM SchemeMaster 
				WHERE CmpSchCode=LTRIM(RTRIM(@CmpSchCode))
				IF EXISTS(SELECT * FROM SchemeRuleSettings WHERE SchId=@GetKey)
				BEGIN
					SET @Exist=1
				END
				ELSE
				BEGIN
					SET @Exist=0
				END
				SET @Po_ErrNo =0
			END
			ELSE IF EXISTS(SELECT CmpSchCode FROM ETL_Prk_SchemeMaster_Temp WHERE
				CmpSchCode=LTRIM(RTRIM(@CmpSchCode)) AND UpLoadFlag='N')
			BEGIN
				SELECT @GetKeyCode=CmpSchCode,@CmpId=CmpId FROM ETL_Prk_SchemeMaster_Temp WHERE
				CmpSchCode=LTRIM(RTRIM(@CmpSchCode))
				SELECT @CmpPrdCtgId=SchLevelId
				FROM ETL_Prk_SchemeMaster_Temp WHERE CmpSchCode=LTRIM(RTRIM(@CmpSchCode))
				IF EXISTS(SELECT * FROM ETL_Prk_SchemeMaster_Temp WHERE CmpSchCode=LTRIM(RTRIM(@CmpSchCode)))
				BEGIN
					SET @Exist=1
				END
				ELSE
				BEGIN
					SET @Exist=0
				END
			END	
		END		
		
		IF @ConFig=1
		BEGIN	
			SELECT @SLevel=MAX(CmpPrdCtgId) FROM ProductCategoryLevel WHERE CmpId=@CmpId
			IF @CmpPrdCtgId<@SLevel
			BEGIN
				SELECT @EtlCnt=ISNULL(COUNT([PrdCode]),0) FROM Etl_Prk_SchemeProducts_Combi A
				WHERE A.[CmpSchCode]=LTRIM(RTRIM(@CmpSchCode)) --AND UPPER(A.[SchLevel])='NO'
				AND A.SlabId=0 AND A.SlabValue=0
				SELECT @CmpCnt=ISNULL(COUNT([PrdCode]),0) FROM Etl_Prk_SchemeProducts_Combi A
				WHERE A.[PrdCode] IN (SELECT b.PrdCtgValCode FROM ProductCategoryValue B) AND
				A.[CmpSchCode]=LTRIM(RTRIM(@CmpSchCode)) --AND UPPER(A.[SchLevel])='NO'
				AND A.SlabId=0 AND A.SlabValue=0
			END
			ELSE
			BEGIN
				SELECT @EtlCnt=ISNULL(COUNT([PrdCode]),0) FROM Etl_Prk_SchemeProducts_Combi A
				WHERE A.[CmpSchCode]=LTRIM(RTRIM(@CmpSchCode)) --AND UPPER(A.[SchLevel])='YES'
				AND A.SlabId=0 AND A.SlabValue=0
				SELECT @CmpCnt=ISNULL(COUNT([PrdCode]),0) FROM Etl_Prk_SchemeProducts_Combi A
				WHERE A.[PrdCode] IN (SELECT PrdCCode FROM Product)
				AND  A.[CmpSchCode]=LTRIM(RTRIM(@CmpSchCode)) --AND UPPER(A.[SchLevel])='YES'
				AND A.SlabId=0 AND A.SlabValue=0
			END
			IF @EtlCnt=@CmpCnt
			BEGIN	
				SELECT @EtlCnt=COUNT([PrdCode]) FROM Etl_Prk_Scheme_Free_Multi_Products A (NOLOCK)
				WHERE A.[CmpSchCode]=LTRIM(RTRIM(@CmpSchCode))
				SELECT @CmpCnt=COUNT([PrdCode]) FROM Etl_Prk_Scheme_Free_Multi_Products A (NOLOCK)
				INNER JOIN Product B ON A.[PrdCode]=b.PrdCCode
				WHERE A.[CmpSchCode]=LTRIM(RTRIM(@CmpSchCode))
				IF @EtlCnt=@CmpCnt
				BEGIN
					SET @SchWithOutPrd=1
				END
				ELSE
				BEGIN
					SET @SchWithOutPrd=2
				END	
			END
			ELSE
			BEGIN
				SET @SchWithOutPrd=2
			END	
		END
		ELSE
		BEGIN
			SET @SchWithOutPrd=1		
		END
		---		
		IF @Exist=0 AND @SchWithOutPrd=1   
		BEGIN
			----CRCRSTPAR0094
			IF @EnableRtrLvlId=1
				BEGIN
				IF @SchRulesId IS NULL 
				BEGIN
					SET @SchRulesId=-1
				END 
				IF @ApplySchBasedOnId IS NULL 
				BEGIN
					SET @ApplySchBasedOnId=-1
				END
			END 
			----CRCRSTPAR0094
			
			
			INSERT INTO SchemeRuleSettings(SchId,SchConfig,SchRules,NoofBills,
			FromDate,ToDate,MarketVisit,ApplySchBasedOn,EnableRtrLvl,AllowSaving,
			AllowSelection,Availability,LastModBy,LastModDate,AuthId,AuthDate,NoOfRtr,RtrCount)
			VALUES(@GetKey,@SchConfigId,@SchRulesId,
			CASE UPPER(@SchConfig) WHEN UPPER('Rtr Cap') THEN -1 ELSE @NoofBills END ,
			@FromDate,@ToDate,@MarketVisit,@ApplySchBasedOnId,
			CASE UPPER(@SchConfig) WHEN UPPER('Rtr Cap') THEN 1 ELSE @EnableRtrLvlId END,
			@AllowSavingId,@AllowSelectionId,1,1,GETDATE(),1,GETDATE(),
			CASE UPPER(@SchConfig) WHEN UPPER('Rtr Cap') THEN 1 ELSE 0 END,
			CASE UPPER(@SchConfig) WHEN UPPER('Rtr Cap') THEN @NoofBills ELSE 0 END)
		END
		IF @Exist=1 AND @SchWithOutPrd=1
		BEGIN
			----CRCRSTPAR0094
			IF @EnableRtrLvlId=1
				BEGIN
				IF @SchRulesId IS NULL 
				BEGIN
					SET @SchRulesId=-1
				END 
				IF @ApplySchBasedOnId IS NULL 
				BEGIN
					SET @ApplySchBasedOnId=-1
				END 
			END
			----CRCRSTPAR0094
			UPDATE SchemeRuleSettings SET SchConfig=@SchConfigId,SchRules=@SchRulesId,
			NoofBills=@NoofBills,FromDate=@FromDate,ToDate=@ToDate,MarketVisit=@MarketVisit,
			ApplySchBasedOn=@ApplySchBasedOnId,EnableRtrLvl=@EnableRtrLvlId,AllowSaving=@AllowSavingId
			WHERE SchId=@GetKey			
		END
		IF @Exist=0 AND @SchWithOutPrd=2
		BEGIN
			----CRCRSTPAR0094
			IF @EnableRtrLvlId=1
				BEGIN
				IF @SchRulesId IS NULL 
				BEGIN
					SET @SchRulesId=-1
				END 
				IF @ApplySchBasedOnId IS NULL 
				BEGIN
					SET @ApplySchBasedOnId=-1
				END 
			END
			----CRCRSTPAR0094
			INSERT INTO Etl_Prk_SchemeRuleSettings_Temp(CmpSchCode,SchConfig,SchRules,NoofBills,
			FromDate,ToDate,MarketVisit,ApplySchBasedOn,EnableRtrLvl,AllowSaving,AllowSelection)
			VALUES(@CmpSchCode,@SchConfigId,@SchRulesId,@NoofBills,@FromDate,@ToDate,
			@MarketVisit,@ApplySchBasedOnId,@EnableRtrLvlId,@AllowSavingId,
			@AllowSelectionId)
		END
		IF @Exist=1 AND @SchWithOutPrd=2
		BEGIN
			----CRCRSTPAR0094
			IF @EnableRtrLvlId=1
				BEGIN
				IF @SchRulesId IS NULL 
				BEGIN
					SET @SchRulesId=-1
				END 
				IF @ApplySchBasedOnId IS NULL 
				BEGIN
					SET @ApplySchBasedOnId=-1
				END 
			END
			----CRCRSTPAR0094
			UPDATE Etl_Prk_SchemeRuleSettings_Temp SET SchConfig=@SchConfigId,
			SchRules=@SchRulesId,NoofBills=@NoofBills,FromDate=@FromDate,ToDate=@ToDate,
			MarketVisit=@MarketVisit,ApplySchBasedOn=@ApplySchBasedOnId,
			EnableRtrLvl=@EnableRtrLvlId,AllowSaving=@AllowSavingId
			WHERE CmpSchCode=@CmpSchCode			
		END
		IF @EnableRtrLvlId=1 AND @Po_ErrNo=0
		BEGIN
			SET @SlNo=1 ---CRCRSTPAR0094  
			
			IF EXISTS (SELECT 'X' FROM SchemeRtrLevelValidation WHERE SchId=@GetKey)
			BEGIN
				SET @Exist=1
			END 
			ELSE 
			BEGIN
				SET @Exist=0
			END 		
			 
			
			DECLARE Cur_SchemeRulesRetailer CURSOR
			FOR SELECT ISNULL(RtrCode,''),ISNULL(FromDate,''),ISNULL(ToDate,''),
			ISNULL(BudgetAllocated,''),ISNULL(Status,'')
			FROM Etl_Prk_Scheme_RetailerLevelValid WHERE CmpSchCode=@CmpSchCode
			AND RtrCode IN (SELECT CmpRtrCode  FROM Retailer) AND ISNULL(BudgetAllocated,'0.00') <> '0.00' --ILCRSTPAR7560
			OPEN Cur_SchemeRulesRetailer
		
			FETCH NEXT FROM Cur_SchemeRulesRetailer INTO @RtrCode,@RtrFromDate,@RtrToDate,
			@BudgetAllocated,@Status
			WHILE @@FETCH_STATUS=0
			BEGIN
				SET @Po_ErrNo=0  --ILCRSTPAR7825
				IF LTRIM(RTRIM(@RtrCode))=''
				BEGIN
					INSERT INTO Errorlog VALUES (1,'Etl_Prk_Scheme_RetailerLevelValid','Retailer Code',
					'Retailer Code should not be empty for Scheme Code:'+@CmpSchCode)
					SET @Po_ErrNo=1
				END
				IF @Po_ErrNo=0
				BEGIN
					IF NOT EXISTS(SELECT * FROM Retailer WITH (NOLOCK)
					WHERE CmpRtrCode=@RtrCode)---CRCRSTPAR0094 RtrCode to CmpRtrCode
					BEGIN
						INSERT INTO Errorlog VALUES (1,'Etl_Prk_Scheme_RetailerLevelValid','Retailer',
						'Retailer : '+@RtrCode+' is not available for Scheme Code:'+@CmpSchCode)           	
						SET @Po_ErrNo=1
					END
					ELSE
					BEGIN
						SELECT @RtrId=RtrId FROM Retailer WITH (NOLOCK)
						WHERE CmpRtrCode=@RtrCode ---CRCRSTPAR0094 RtrCode to CmpRtrCode
					END
				END		
				IF @Po_ErrNo=0
				BEGIN
					IF EXISTS(SELECT * FROM Etl_Prk_Scheme_OnAttributes WHERE 
						CmpSchCode=@CmpSchCode AND AttrType='RETAILER' AND AttrName<> 'ALL')
					BEGIN
						IF NOT EXISTS(SELECT * FROM Etl_Prk_Scheme_OnAttributes WHERE 
						CmpSchCode=@CmpSchCode AND AttrType='RETAILER' AND AttrName=@RtrCode)
						BEGIN
							INSERT INTO Errorlog VALUES (1,@TabName,'Retailer Level Validation',
							'Retailer Mismatch for Scheme Code:'+@CmpSchCode)
							SET @Po_ErrNo =1
						END	
					END
				END
				 
				IF @Po_ErrNo=0
				BEGIN
					IF ISDATE(@RtrFromDate)=1 AND ISDATE(@RtrToDate)=1
					BEGIN
						IF DATEDIFF(DD,@RtrFromDate,@RtrToDate)<0 OR @RtrToDate< CONVERT(NVARCHAR(10),GETDATE(),121)
						BEGIN
							INSERT INTO Errorlog VALUES (1,@TabName,'Date',
							'From Date should be less than To Date for Scheme Code:'+@CmpSchCode)           	
							SET @Po_ErrNo=1
						END
					END
					ELSE
					BEGIN
						INSERT INTO Errorlog VALUES (1,@TabName,'Date',
						'Either From Date or To Date is wrong for Scheme Code:'+@CmpSchCode)           	
						SET @Po_ErrNo=1
					END
				END
				
				IF @Po_ErrNo=0
				BEGIN
					IF (DATEDIFF(DD,@FromDate,@RtrFromDate)<0 OR DATEDIFF(DD,@RtrFromDate,@ToDate)<0)
					BEGIN
						INSERT INTO Errorlog VALUES (1,@TabName,'Date',
						'Retailer From Date should be within From and To Date for Scheme Code:'+@CmpSchCode)           	
						SET @Po_ErrNo=1
					END
					
					IF (DATEDIFF(DD,@FromDate,@RtrToDate)<0 OR DATEDIFF(DD,@RtrToDate,@ToDate)<0)
					BEGIN
						INSERT INTO Errorlog VALUES (1,@TabName,'Date',
						'Retailer To Date should be within From and To Date for Scheme Code:'+@CmpSchCode)           	
						SET @Po_ErrNo=1
					END
				END
				
				IF @Po_ErrNo=0
				BEGIN
					IF NOT ISNUMERIC(@BudgetAllocated)=1 
					BEGIN
						INSERT INTO Errorlog VALUES (1,@TabName,'Budget Allocated',
						'Budget Allocated should be numeric value for Scheme Code:'+@CmpSchCode)           	
						SET @Po_ErrNo=1
					END
					ELSE IF (CAST(@BudgetAllocated AS NUMERIC(38,6)))<=0
					BEGIN
						INSERT INTO Errorlog VALUES (1,@TabName,'Scheme No Of Bills',
						'Budget Allocated should be greater than zero for Scheme Code:'+@CmpSchCode)
						SET @Po_ErrNo=1
					END
				END
				IF @Po_ErrNo=0
				BEGIN				
					IF LTRIM(RTRIM(@Status))=''
					BEGIN
						INSERT INTO Errorlog VALUES (1,@TabName,'Retailer Status',
						'Retailer Status should not be empty for Scheme Code:'+@CmpSchCode)
						SET @Po_ErrNo=1
					END
					ELSE
					BEGIN
						IF LTRIM(RTRIM(@Status))='YES'
						BEGIN
							SET @StatusId=1					
						END
						ELSE
						BEGIN
							SET @StatusId=0					
						END
					END
				END	
				IF @Exist=0 AND @SchWithOutPrd=1
				BEGIN
					IF @Po_ErrNo=0 
					BEGIN
						INSERT INTO SchemeRtrLevelValidation(SchId,RtrId,FromDate,ToDate,
						BudgetAllocated,BudgetUtilized,BudgetAvailable,Status,Slno,
						Availability,LastModBy,LastModDate,AuthId,AuthDate)
						VALUES(@GetKey,@RtrId,@RtrFromDate,@RtrToDate,
						CAST(@BudgetAllocated AS NUMERIC(38,6)),0,0,@StatusId,@SlNo,1,1,GETDATE(),1,GETDATE())
					END
					IF @Exist=1 AND @SchWithOutPrd=1
					BEGIN
						 
						UPDATE SchemeRtrLevelValidation SET FromDate=@FromDate,ToDate=@ToDate,
						BudgetAllocated=CAST(@BudgetAllocated AS NUMERIC(38,6)),
						BudgetAvailable=CAST(@BudgetAllocated AS NUMERIC(38,6))-BudgetUtilized,
						Status=@StatusId
						WHERE SchId=@GetKey AND RtrId=@RtrId	
					END		 
				END
				IF @Po_ErrNo=0 
				BEGIN
					IF @Exist=0 AND @SchWithOutPrd=2
					BEGIN
						INSERT INTO Etl_Prk_SchemeRtrLevelValidation_Temp(CmpSchCode,RtrId,
						RtrCode,FromDate,ToDate,BudgetAllocated,BudgetUtilized,BudgetAvailable,
						Status,Slno)
						VALUES(@CmpSchCode,@RtrId,@RtrCode,@RtrFromDate,@RtrToDate,@BudgetAllocated,
						0,0,@Status,@Slno)
					END
				 
					IF @Exist=1 AND @SchWithOutPrd=2
					BEGIN
						UPDATE Etl_Prk_SchemeRtrLevelValidation_Temp SET FromDate=@FromDate,
						ToDate=@ToDate,BudgetAllocated=CAST(@BudgetAllocated AS NUMERIC(38,6)),Status=@Status
						WHERE CmpSchCode=@CmpSchCode AND RtrCode=@RtrCode			
					END
				END
				SET @SlNo=@SlNo+1
				FETCH NEXT FROM Cur_SchemeRulesRetailer INTO @RtrCode,@RtrFromDate,@RtrToDate,@BudgetAllocated,@Status
			END
			CLOSE Cur_SchemeRulesRetailer
			DEALLOCATE Cur_SchemeRulesRetailer
		END	
		X:			
		FETCH NEXT FROM Cur_SchemeRules INTO @CmpSchCode,@SchConfig,@SchRules,@NoofBills,@FromDate,@ToDate,
		@MarketVisit,@ApplySchBasedOn,@EnableRtrLvl,@AllowSaving,@AllowSelection
	END
	CLOSE Cur_SchemeRules
	DEALLOCATE Cur_SchemeRules
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_Cs2Cn_ClaimMismatchDetails' AND TYPE ='P')
DROP PROCEDURE Proc_Cs2Cn_ClaimMismatchDetails
GO
CREATE PROCEDURE Proc_Cs2Cn_ClaimMismatchDetails
(
	@Po_ErrNo	INT OUTPUT,
	@ServerDate DATETIME
)
AS
/****************************************************************************
* PROCEDURE	:  Proc_Cs2Cn_ClaimMismatchDetails
* PURPOSE	:  TO UPLOAD THE SAVED DEBITNOTETOPSHEET CLAIM IF Claim NOT Upload 
* DATE		:  21-12-2019
* CREATED	:  MOHANA S	
* PMS NO	:  ILCRSTPAR7092
*******************************************************************************/
SET NOCOUNT ON
BEGIN
	SET @Po_ErrNo=0
	
	DECLARE @DistCode	AS NVARCHAR(50)
	
	SELECT @DistCode = DistributorCode FROM Distributor
	
	DELETE FROM Cs2Cn_Prk_ClaimMismatchDetails  WHERE UploadFlag ='Y'
	
	IF EXISTS(SELECT * FROM  DebitNoteTopSheetClaimHd WHERE MonthId =0)
	BEGIN
		INSERT INTO Cs2Cn_Prk_ClaimMismatchDetails (DistCode,DnRefCode,UploadFlag,ServerDate)
		SELECT @DistCode,DNDocNo +'-'+ ClmMonth,'N',@ServerDate from DebitNoteTopSheetClaimHd where MonthId =0
	END
	
	IF NOT EXISTS (SELECT * FROM DebitNoteClaimMisMatch WHERE UPLOAD = 0)
	BEGIN
		RETURN
	END
	
	INSERT INTO Cs2Cn_Prk_ClaimMismatchDetails (DistCode,DnRefCode,UploadFlag,ServerDate)
	SELECT @DistCode,DnDocRefNo,'N',@ServerDate FROM DebitNoteClaimMisMatch WHERE Upload = 0
	UPDATE B SET UPLOAD=1  FROM Cs2Cn_Prk_ClaimMismatchDetails A INNER JOIN DebitNoteClaimMisMatch B ON A.DnRefCode = B.DnDocRefNo AND UPLOAD = 0
END
GO
IF EXISTS(SELECT * FROM SYS.OBJECTS WHERE name='Proc_Cs2Cn_DailyRetailerDetails' and type='P')
DROP PROC Proc_Cs2Cn_DailyRetailerDetails
GO
CREATE PROCEDURE Proc_Cs2Cn_DailyRetailerDetails
(
	@Po_ErrNo INT OUTPUT,
	@ServerDate DATETIME
)
AS
BEGIN
SET NOCOUNT ON
/*********************************
* PROCEDURE		: Proc_Cs2Cn_DailyRetailerDetails
* PURPOSE		: Extract Retailer Details from CoreStocky to Console
* NOTES			:
* CREATED		: Nandakumar R.G
* CREATED DATE	: 30/03/2010
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
***********************************************
* 06-07-2020    Deepak Philip   BZ          PARLESECS/0720/027     validation added to  upload data daily once.

***********************************************/
	DECLARE @DistCode	As nVarchar(50)
	DECLARE @Days		AS INT
	SET @Po_ErrNo=0
	
	EXEC Proc_ValidateTempPurchasereceiptMoved
	DELETE FROM Cs2Cn_Prk_DailyRetailerDetails WHERE UploadFlag = 'Y'
	
	SELECT @DistCode = DistributorCode FROM Distributor
	
	IF EXISTS(SELECT * FROM Configuration WHERE ModuleId='BotreeRtrUpload' AND Status=1)
	BEGIN	
		--SELECT @Days=ISNULL(ConfigValue,0) FROM Configuration WHERE ModuleId='BotreeRtrUpload' 		
		--IF EXISTS(SELECT * FROM DayEndProcess WHERE DATEADD(DAY,@Days,NextUpDate)<=GETDATE() AND ProcId=14)
		--BEGIN	
		
		IF EXISTS(SELECT 'X' FROM DayEndProcess WHERE NextUpDate<CONVERT(nVarChar(10),GetDate(),121) and ProcDesc='Daily Retailer Upload')
		BEGIN
			INSERT INTO Cs2Cn_Prk_DailyRetailerDetails
			(
				DistCode,
				RtrId,
				RtrCode,
				CmpRtrCode,
				RtrName,
				RtrAddr1,
				RtrAddr2,
				RtrAddr3,
				RtrPINCode,
				RtrChannelCode,
				RtrGroupCode,
				RtrClassCode,
				GeoLevel,
				GeoName,
				RtrStatus,
				RegDate,
				RtrUploadStatus,
				UploadedDate,
				UploadFlag
			)
			SELECT
				@DistCode,
				R.RtrId,
				R.RtrCode,
				R.CmpRtrCode,
				R.RtrName,
				R.RtrAdd1,
				R.RtrAdd2,
				R.RtrAdd3,
				R.RtrPinNo,
				'' AS CtgCode,
				'' AS CtgCode,
				'' AS ValueClassCode,
				'' AS GeoLevelName,
				'' AS GeoName,
				(CASE RtrStatus WHEN 1 THEN 'Active' ELSE 'InActive' END) AS RtrStatus,	
				RtrRegDate,
				R.Upload,
				GETDATE(),
				'N'				
			FROM Retailer R  		
				
			UPDATE ETL SET ETL.RtrChannelCode=RVC.ChannelCode,ETL.RtrGroupCode=RVC.GroupCode,ETL.RtrClassCode=RVC.ValueClassCode
			FROM Cs2Cn_Prk_DailyRetailerDetails ETL,
			(
				SELECT R.RtrId,RC1.CtgCode AS ChannelCode,RC.CtgCode  AS GroupCode ,RVC.ValueClassCode
				FROM
				RetailerValueClassMap RVCM ,
				RetailerValueClass RVC	,
				RetailerCategory RC ,
				RetailerCategoryLevel RCL,
				RetailerCategory RC1,
				Retailer R  		
			WHERE
				R.Rtrid = RVCM.RtrId
				AND	RVCM.RtrValueClassId = RVC.RtrClassId
				AND	RVC.CtgMainId=RC.CtgMainId
				AND	RCL.CtgLevelId=RC.CtgLevelId
				AND	RC.CtgLinkId = RC1.CtgMainId
			) AS RVC
			WHERE ETL.RtrId=RVC.RtrId
			
			UPDATE ETL SET ETL.GeoLevel=Geo.GeoLevelName,ETL.GeoName=Geo.GeoName
			FROM Cs2Cn_Prk_DailyRetailerDetails ETL,
			(
				SELECT R.RtrId,ISNULL(GL.GeoLevelName,'City') AS GeoLevelName,
				ISNULL(G.GeoName,'') AS GeoName
				FROM			
				Retailer R  		
				LEFT OUTER JOIN Geography G ON R.GeoMainId=G.GeoMainId
				LEFT OUTER JOIN GeographyLevel GL ON GL.GeoLevelId=G.GeoLevelId
			) AS Geo
			WHERE ETL.RtrId=Geo.RtrId	
			--UPDATE DayEndProcess SET NextUpDate=DATEADD(DAY,@Days,NextUpDate) WHERE ProcId=14
			UPDATE DayEndProcess SET NextUpDate = CONVERT(nVarChar(10),GetDate(),121),    
			ProcDate = CONVERT(nVarChar(10),GetDate(),121)    
			Where ProcDesc='Daily Retailer Upload'
		END		
	END
	
	
--Added By Mohana For GST
		SELECT C.MasterRecordId,B.ColumnName,ISNULL(C.ColumnValue,'') ColumnValue INTO #RtrUDC FROM UdcHD A INNER JOIN UdcMaster B ON A.MasterId=B.MasterId AND A.MasterName='Retailer Master'
		INNER JOIN UdcDetails C ON A.MasterId= C.MasterId AND B.UdcMasterId=C.UdcMasterId --AND masterrecordid =445
		INNER JOIN Retailer R ON R.RtrId =C.MasterRecordId AND B.ColumnName IN ('State name','GSTIN','PAN Number','Retailer Type','Related Party','Composition')
		UPDATE A SET StateName =ColumnValue FROM Cs2Cn_Prk_DailyRetailerDetails A INNER JOIN Retailer B ON A.RtrCode=B.RtrCode
		INNER JOIN #RtrUDC C ON B.RtrId = C.MasterRecordid AND ColumnName ='State Name'
		UPDATE A SET GSTTIN = ColumnValue  FROM Cs2Cn_Prk_DailyRetailerDetails A INNER JOIN Retailer B ON A.RtrCode=B.RtrCode
		INNER JOIN #RtrUDC C ON B.RtrId = C.MasterRecordid AND ColumnName ='GSTIN'
		UPDATE A SET PanNumber = ColumnValue  FROM Cs2Cn_Prk_DailyRetailerDetails A INNER JOIN Retailer B ON A.RtrCode=B.RtrCode
		INNER JOIN #RtrUDC C ON B.RtrId = C.MasterRecordid AND ColumnName ='PAN Number'
		UPDATE A SET RetailerType = ColumnValue FROM Cs2Cn_Prk_DailyRetailerDetails A INNER JOIN Retailer B ON A.RtrCode=B.RtrCode
		INNER JOIN #RtrUDC C ON B.RtrId = C.MasterRecordid AND ColumnName ='Retailer Type'
		UPDATE A SET RelatedParty = ColumnValue  FROM Cs2Cn_Prk_DailyRetailerDetails A INNER JOIN Retailer B ON A.RtrCode=B.RtrCode
		INNER JOIN #RtrUDC C ON B.RtrId = C.MasterRecordid AND ColumnName ='Related Party'
		UPDATE A SET Composite = ColumnValue  FROM Cs2Cn_Prk_DailyRetailerDetails A INNER JOIN Retailer B ON A.RtrCode=B.RtrCode
		INNER JOIN #RtrUDC C ON B.RtrId = C.MasterRecordid AND ColumnName ='Composition'
		--Till Here
	
	UPDATE Cs2Cn_Prk_DailyRetailerDetails SET ServerDate=@ServerDate
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_ApplySchemeRuleSetting' AND TYPE='P')
DROP PROCEDURE Proc_ApplySchemeRuleSetting
GO
CREATE PROCEDURE Proc_ApplySchemeRuleSetting
(
       @Pi_SchId            INT,
       @Pi_RtrId            INT,
       @Pi_SalId            INT,
       @Pi_UsrId            INT,
       @Pi_TransId          INT,
       @Po_Applicable             INT    OUTPUT
)
AS
/*********************************
* PROCEDURE   : Proc_ApplySchemeRuleSetting
* PURPOSE     : To Apply the Scheme Based on the Rule Setting
* CREATED     : Thrinath
* CREATED DATE       : 17/04/2007
* NOTE        : General SP for Returning the Scheme Based on the Rule Setting
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* 12-02-2020  Mohana S                   ILCRSTPAR7825              BZ            IF Retailer Not Available in SchemertrlevelValidation, the Scheme will not apply     
*********************************/
SET NOCOUNT ON
Begin
       
DECLARE @SchRule           INT
DECLARE @dDate                    DateTime
DECLARE @SchFrmDate        DateTime
DECLARE @SchToDate         DateTime
DECLARE @CovFrmDate        DateTime
DECLARE @CovToDate         DateTime
DECLARE @NoOfBills         INT
DECLARE @MktVisit          INT
DECLARE @RMID              INT
DECLARE @CmpId                    INT
DECLARE @RCPMasterId       INT
DECLARE @sSql              nVarChar(1000)
DECLARE @ApplySch          INT
Create Table #TempSal
(
       SalId         BigInt
)
Create Table #TempDate
(
       CoVDate              DateTime
)
SET @Po_Applicable = 0
SELECT @CmpId = CmpId FROM SchemeMaster Where SchId = @Pi_SchId
IF @Pi_SalId > 0
BEGIN
       SELECT @dDate = SalInvDate FROM SalesInvoice WHERE SalId = @Pi_SalId
END
ELSE
BEGIN
       SET @dDate = CONVERT(VarChar(10),GetDate(),121)
END
IF EXISTS(SELECT * FROM SchemeRuleSettings WHERE SchId = @Pi_SchId)
BEGIN
       SELECT @SchRule = SchRules FROM SchemeRuleSettings WHERE SchId = @Pi_SchId
       IF @SchRule = 0            --Check Scheme Product is Billed
       BEGIN
              IF NOT EXISTS(SELECT A.* FROM BilledPrdHdForScheme A
              INNER JOIN Fn_ReturnSchemeProductBatch(@Pi_SchId) B ON
              A.Prdid = B.Prdid AND (A.PrdBatId = CASE B.PrdBatId WHEN 0 THEN
                     A.PrdBatId ELSE B.PrdBatId End) AND A.Usrid = @Pi_UsrId AND
                     A.TransId = @Pi_TransId)
              BEGIN
                     SET @Po_Applicable = 1
              END
       END
       ELSE IF @SchRule = 1 --Check Scheme Product is billed With In No. of Bills
       BEGIN
              SELECT @SchFrmDate = SchValidFrom,@SchToDate = SchValidTill
                     FROM SchemeMaster WHERE SchId = @Pi_SchId
              
              SELECT @NoOfBills = NoofBills FROM SchemeRuleSettings WHERE SchId = @Pi_SchId
              SET @sSql = 'INSERT INTO #TempSal (SalId)
                     SELECT TOP ' + CAST(@NoOfBills AS NVarChar(10)) + ' SalId FROM SalesInvoice A
              WHERE RtrId = ' + CAST(@Pi_RtrId AS NVarChar(10)) + ' AND SalInvDate Between ' +
                     '''' + CONVERT(NVarChar(10),@SchFrmDate,121) + '''' + ' AND ' +
                     '''' + CONVERT(NVarChar(10),@SchToDate,121) + '''' +
                     ' AND DlvSts IN (4,5) ORDER BY SalId DESC'
              EXEC(@sSql)
              IF NOT EXISTS(SELECT A.* FROM SalesInvoiceProduct A
              INNER JOIN Fn_ReturnSchemeProductBatch(@Pi_SchId) B ON
              A.Prdid = B.Prdid AND (A.PrdBatId = CASE B.PrdBatId WHEN 0 THEN
                     A.PrdBatId ELSE B.PrdBatId End) INNER JOIN #TempSal C ON
                     A.SalId = C.SalId AND A.SalId NOT IN (@Pi_SalId))
              BEGIN
                     IF (SELECT COUNT(SalID) FROM #TempSal) < @NoOfBills
                     BEGIN
                           IF NOT EXISTS(SELECT A.* FROM BilledPrdHdForScheme A
                                   INNER JOIN Fn_ReturnSchemeProductBatch(@Pi_SchId) B ON
                                   A.Prdid = B.Prdid AND (A.PrdBatId = CASE B.PrdBatId WHEN 0 THEN
                                  A.PrdBatId ELSE B.PrdBatId End) AND A.Usrid = @Pi_UsrId AND
                                  A.TransId = @Pi_TransId)
                           BEGIN
                                  SET @Po_Applicable = 1
                           END
                     END
                     ELSE
                     BEGIN
                           SET @Po_Applicable = 1
                     END
              END
       END
       ELSE IF @SchRule = 2 --Check Scheme Product is billed With the From Date And To Date
       BEGIN
              SELECT @SchFrmDate = FromDate,@SchToDate = ToDate
                     FROM SchemeRuleSettings WHERE SchId = @Pi_SchId
              INSERT INTO #TempSal (SalId)
              SELECT SalId FROM SalesInvoice A WHERE RtrId = @Pi_RtrId
                     AND SalInvDate Between @SchFrmDate AND @SchToDate
                     AND DlvSts IN (4,5) ORDER BY SalId DESC
              IF NOT EXISTS(SELECT A.* FROM SalesInvoiceProduct A
              INNER JOIN Fn_ReturnSchemeProductBatch(@Pi_SchId) B ON
              A.Prdid = B.Prdid AND (A.PrdBatId = CASE B.PrdBatId WHEN 0 THEN
                     A.PrdBatId ELSE B.PrdBatId End)  INNER JOIN #TempSal C ON
                     A.SalId = C.SalId AND A.SalId NOT IN (@Pi_SalId))
              BEGIN
                     IF @dDate <= @SchToDate
                     BEGIN
                           IF NOT EXISTS(SELECT A.* FROM BilledPrdHdForScheme A
                                   INNER JOIN Fn_ReturnSchemeProductBatch(@Pi_SchId) B ON
                                   A.Prdid = B.Prdid AND (A.PrdBatId = CASE B.PrdBatId WHEN 0 THEN
                                  A.PrdBatId ELSE B.PrdBatId End) AND A.Usrid = @Pi_UsrId AND
                                  A.TransId = @Pi_TransId AND @dDate Between
                                  @SchFrmDate AND @SchToDate)
                           BEGIN
                                  SET @Po_Applicable = 1
                           END
                     END
                     ELSE
                     BEGIN
                           SET @Po_Applicable = 1
                     END
              END
       END
       ELSE IF @SchRule = 3 --Check Scheme Product is billed With the No of Visits
       BEGIN
              SELECT @MktVisit = MarketVisit FROM SchemeRuleSettings WHERE SchId = @Pi_SchId
              SET @RCPMasterId = 0
              SELECT @SchFrmDate = SchValidFrom,@SchToDate = SchValidTill
                     FROM SchemeMaster WHERE SchId = @Pi_SchId
              IF EXISTS (SELECT A.RCPMasterId FROM RouteCovPlanMaster A INNER JOIN RouteCovPlanDetails B
                     ON A.RCPMasterId = B.RCPMasterId WHERE RTRId = @Pi_RtrId AND
                     RCPGEneratedDates >= @SchFrmDate)
              BEGIN
                     SELECT @RCPMasterId = A.RCPMasterId FROM RouteCovPlanMaster A
                           INNER JOIN RouteCovPlanDetails B ON A.RCPMasterId = B.RCPMasterId
                           WHERE RTRId = @Pi_RtrId
              END
              ELSE
              BEGIN
                     SELECT @RMID = A.RMID FROM RetailerMarket A INNER JOIN RouteMaster B ON
                           A.RMID = B.RMID AND RTRId = @Pi_RtrId INNER JOIN
                           SchemeMaster C ON (C.CmpId = B.CmpId OR B.CmpId = 0)
                     
                     IF EXISTS (SELECT A.RCPMasterId FROM RouteCovPlanMaster A INNER JOIN RouteCovPlanDetails B
                           ON A.RCPMasterId = B.RCPMasterId WHERE RMID = @RMID AND
                           RCPGEneratedDates >= @SchFrmDate)
                     BEGIN
                           SELECT @RCPMasterId = A.RCPMasterId FROM RouteCovPlanMaster A
                           INNER JOIN RouteCovPlanDetails B
                           ON A.RCPMasterId = B.RCPMasterId WHERE RMID = @RMID
                     END
              END
              
              IF @RCPMasterId = 0
              BEGIN
                     SET @Po_Applicable = 1
              END
              ELSE
              BEGIN
                     SELECT @CovFrmDate = MIN(RCPGEneratedDates) FROM RouteCovPlanDetails WHERE
                           RCPMasterid = @RCPMasterId AND RCPGEneratedDates >= @SchFrmDate
       
                     SET @sSql = 'INSERT INTO #TempDate (CoVDate) SELECT TOP  ' +
                           CAST (@MktVisit As VarChar(10)) + ' RCPGEneratedDates
                           FROM RouteCovPlanDetails WHERE RCPMasterid = ' +
                           CAST (@RCPMasterId As VarChar(10)) + ' AND RCPGEneratedDates >= ' +
                           '''' + CONVERT(VARCHAR(10),@CovFrmDate,121) + '''' +
                           ' ORDER BY RCPGEneratedDates'
       
                     SELECT @CovToDate = MAX(CoVDate) FROM #TempDate
       
                     INSERT INTO #TempSal (SalId)
                     SELECT SalId FROM SalesInvoice A WHERE RtrId = @Pi_RtrId
                           AND SalInvDate Between @CovFrmDate AND @CovToDate
                           AND DlvSts IN (4,5) ORDER BY SalId DESC
       
                     IF NOT EXISTS(SELECT A.* FROM SalesInvoiceProduct A
                            INNER JOIN Fn_ReturnSchemeProductBatch(@Pi_SchId) B ON
                            A.Prdid = B.Prdid AND (A.PrdBatId = CASE B.PrdBatId WHEN 0 THEN
                           A.PrdBatId ELSE B.PrdBatId End)  INNER JOIN #TempSal C ON
                           A.SalId = C.SalId AND A.SalId NOT IN (@Pi_SalId))
                     BEGIN
                           IF @dDate <= @CovToDate
                           BEGIN
                                  IF NOT EXISTS(SELECT A.* FROM BilledPrdHdForScheme A
                                          INNER JOIN Fn_ReturnSchemeProductBatch(@Pi_SchId) B ON
                                          A.Prdid = B.Prdid AND (A.PrdBatId = CASE B.PrdBatId WHEN 0 THEN
                                         A.PrdBatId ELSE B.PrdBatId End) AND A.Usrid = @Pi_UsrId AND
                                         A.TransId = @Pi_TransId AND @dDate Between
                                         @CovFrmDate AND @CovToDate)
                                  BEGIN
                                         SET @Po_Applicable = 1
                                  END
                           END
                           ELSE
                           BEGIN
                                  SET @Po_Applicable = 1
                           END
                     END
              END
       END
       IF Exists (SELECT * FROM SchemeMaster WHERE Schid = @Pi_SchId AND SchType = 4 AND @Po_Applicable =0)
       BEGIN
              SELECT @ApplySch = ApplySchBasedOn FROM SchemeRuleSettings WHERE Schid = @Pi_SchId
              IF @ApplySch = 1     --Apply on Retailer Scheme End Date
              BEGIN
                     IF EXISTS (SELECT ToDate FROM SchemeRtrLevelValidation
                           WHERE SchId = @Pi_SchId AND RtrId = @Pi_RtrId
                                  AND ToDate <= @dDate AND Status=1)
                     BEGIN
                           SET @Po_Applicable = 0
                     END
                     ELSE
                     BEGIN
                            SET @Po_Applicable = 1
                     END
              END
              ELSE IF @ApplySch = 2
              BEGIN
                     IF EXISTS (SELECT * FROM JCMonth A INNER JOIN JCMast B ON A.JCMId = B.JCMID
                           AND B.CmpId = @CmpId AND @dDate Between JcmSdt AND JcmEdt
                           AND @dDate >= JcmEdt)
                     BEGIN
                           SET @Po_Applicable = 0
                     END
                     ELSE
                     BEGIN
                           SET @Po_Applicable = 1
                     END
              END
       END
       -- INST BASE DISCOUNT
       IF @Po_Applicable = 0 
       BEGIN
              IF EXISTS (SELECT * FROM  SchemeMaster WHERE ClmRefId IN (SELECT ClmGrpId FROM ClaimGroupMaster Where ClmGrpCode ='CG10004') 
              AND SchId = @Pi_SchId )
              BEGIN
                     IF NOT EXISTS (SELECT * FROM  SchemeRtrLevelValidation Where SchId = @Pi_SchId AND RtrId = @Pi_RtrId  )
                     BEGIN
                                  SET @Po_Applicable = 1
                     END
              
                     IF EXISTS (SELECT * FROM  SchemeRtrLevelValidation Where SchId = @Pi_SchId AND RtrId = @Pi_RtrId )
                     BEGIN
                                  SET @Po_Applicable = 0
                     END

                     IF EXISTS (SELECT * FROM  SchemeRtrLevelValidation Where SchId = @Pi_SchId AND RtrId = @Pi_RtrId and BudgetAllocated =0)
                     BEGIN
                                  SET @Po_Applicable = 1
                     END
              
              END
       END
END 
END
GO
IF NOT EXISTS(SELECT 'X' FROM SYSOBJECTS WHERE XTYPE='U' AND NAME='Cn2CS_Institutional_Scheme_Budget')
BEGIN
CREATE TABLE Cn2CS_Institutional_Scheme_Budget
(
	[DistCode] [nvarchar](100) NULL,
	[CmpSchCode] [nVarchar] (100) NULL,
	[CmpRtrCode] [nVarchar] (100) NULL,
	[BudgetAmount] Numeric(18,6),
	[DownLoadFlag] [varchar](2) NULL,
	[CreatedDate] [datetime] NULL
)
END
GO
IF NOT EXISTS(SELECT 'X' FROM SYSOBJECTS WHERE XTYPE='U' AND NAME='Budget_Backup')
BEGIN
CREATE TABLE Budget_Backup
(
	[Schid] INT,
	[Rtrid] INT,
	[BudgetAmount] Numeric(18,6),
	[NewBudget] Numeric(18,6),
	[Backup_Date] Datetime	
)
END
GO
IF NOT EXISTS(SELECT 'X' FROM SYSOBJECTS WHERE XTYPE='U' AND NAME='Cn2CS_Institutional_Scheme_Budget_Archive')
BEGIN
CREATE TABLE Cn2CS_Institutional_Scheme_Budget_Archive
(
	[DistCode] [nvarchar](100) NULL,
	[CmpSchCode] [nVarchar] (100) NULL,
	[CmpRtrCode] [nVarchar] (100) NULL,
	[BudgetAmount] Numeric(18,6),
	[DownLoadFlag] [varchar](2) NULL,
	[CreatedDate] [datetime] NULL
)
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='P' AND NAME='Proc_Cn2Cs_Institutional_Scheme_Budget')
DROP PROCEDURE Proc_Cn2Cs_Institutional_Scheme_Budget
GO
/*
--INSERT INTO Cn2CS_Institutional_Scheme_Budget
--SELECT '','SCH31760','10028091900973',30000,'D',Getdate()
--INSERT INTO Cn2CS_Institutional_Scheme_Budget
--SELECT '','SCH31760','117061200010',0,'D',Getdate()
BEGIN TRAN
SELECT * FROM SchemeRetAttr WHERE Schid=2152 and AttrType=8
	EXEC Proc_Cn2Cs_Institutional_Scheme_Budget 0
	SELECT * FROM SchemeRtrLevelValidation
	SELECT * FROM SchemeRetAttr WHERE Schid=2152 and AttrType=8
	--SELECT * FROM SchemeMaster where schid=2152 and AttrType=8
	--SELECT * FROM Cn2CS_Institutional_Scheme_Budget WHERE CmprtrCode In('10028091900973')
	SELECT CmprtrCode,* FROM REtailer where RtrId IN(974,1025)
	SELECT * FROM Cn2CS_Institutional_Scheme_Budget W
ROLLBACK TRAN
*/
CREATE PROCEDURE Proc_Cn2Cs_Institutional_Scheme_Budget
(  
 @Po_ErrNo INT OUTPUT  
)  
AS  
/*********************************  
* PROCEDURE  : Institutional_Scheme_Budget
* PURPOSE  : Update or insert Budget amout
* CREATED  : Murugan.R
* CREATED DATE : 14-12-2020  
* PMS NO  : ILCRSTPAR7882  
*********************************/  
SET NOCOUNT ON  
BEGIN     
SET @Po_ErrNo=0 
		
		DELETE FROM Cn2CS_Institutional_Scheme_Budget WHERE DownLoadFlag='Y'

		INSERT INTO Cn2CS_Institutional_Scheme_Budget_Archive(DistCode,CmpSchCode,CmpRtrCode,BudgetAmount,DownLoadFlag,CreatedDate)
		SELECT DistCode,CmpSchCode,CmpRtrCode,BudgetAmount,DownLoadFlag,CreatedDate 
		FROM Cn2CS_Institutional_Scheme_Budget WHERE DownLoadFlag='D'

		SELECT DISTINCT CmpSchCode,CmpRtrCode,Max(CreatedDate) as CreatedDate 
		INTO #Cn2CS_Institutional_Scheme_Budget
		FROM Cn2CS_Institutional_Scheme_Budget
		WHERE DownLoadFlag='D'
		GROUP BY CmpSchCode,CmpRtrCode
		
		SELECT DISTINCT C.Schid,C.CmpSchCode,A.CmpRtrCode,ISNULL(Max(ISNULL(B.BudgetAmount,0)),0) as BudgetAmount,
		SchValidFrom,SchValidTill,CAST(0 as INT) as Slno
		INTO #BaseDiscount
		FROM #Cn2CS_Institutional_Scheme_Budget A 
		INNER JOIN Cn2CS_Institutional_Scheme_Budget B (NOLOCK) ON A.CmpSchCode=B.CmpSchCode
		AND A.CmpRtrCode=B.CmpRtrCode AND A.CreatedDate=B.CreatedDate
		INNER JOIN SchemeMaster C (NOLOCK) ON C.CmpSchCode=A.CmpSchCode AND B.CmpSchCode=C.CmpSchCode
		INNER JOIN ClaimGroupMaster D (NOLOCK) ON D.ClmGrpId=C.ClmRefId
		WHERE DownLoadFlag='D' and ClmGrpCode='CG10004'
		AND ISNULL(B.BudgetAmount,0)>0
		GROUP BY C.Schid,C.CmpSchCode,A.CmpRtrCode,SchValidFrom,SchValidTill 

		SELECT A.Schid,Max(Slno) as Slno 
		INTO #SchSlno
		FROM SchemeRtrLevelValidation  A (NOLOCK)
		INNER JOIN (SELECT DISTINCT Schid FROM #BaseDiscount) B ON A.SchId=B.Schid
		GROUP BY A.Schid

		UPDATE A SET A.Slno=B.Slno FROM  #BaseDiscount A INNER JOIN #SchSlno B ON A.Schid=B.Schid
		

		--BUDGET BACKUP
		INSERT INTO Budget_Backup(Schid,Rtrid,BudgetAmount,NewBudget,Backup_Date)
		SELECT DISTINCT A.Schid,C.RtrId,BudgetAllocated,B.BudgetAmount,GETDATE()
		FROM SchemeRtrLevelValidation A 
		INNER JOIN #BaseDiscount B ON A.Schid=B.Schid
		INNER JOIN Retailer C ON C.CmpRtrCode=B.CmpRtrCode AND C.RtrId=A.RtrId
		WHERE B.BudgetAmount>BudgetAllocated
		--BUDGET UPDATE
		UPDATE A SET A.BudgetAllocated=
		CASE WHEN B.BudgetAmount>BudgetAllocated THEN B.BudgetAmount ELSE A.BudgetAllocated END ,A.LastModDate=GETDATE(),A.LastModBy=22 
		FROM SchemeRtrLevelValidation A 
		INNER JOIN #BaseDiscount B ON A.Schid=B.Schid
		INNER JOIN Retailer C ON C.CmpRtrCode=B.CmpRtrCode AND C.RtrId=A.RtrId
		WHERE B.BudgetAmount>BudgetAllocated

		INSERT INTO SchemeRtrLevelValidation(SchId,RtrId,FromDate,ToDate,
		BudgetAllocated,BudgetUtilized,BudgetAvailable,Status,Slno,Availability,
		LastModBy,LastModDate,AuthId,AuthDate)
		SELECT DISTINCT B.Schid,C.RtrId,SchValidFrom,SchValidTill,
		BudgetAmount,0,0,1,B.Slno+ROW_NUMBER() OVER(PARTITION BY SCHID ORDER BY SchId),1,55,
		CONVERT(VARCHAR(10),GETDATE(),121),55,CONVERT(VARCHAR(10),GETDATE(),121) 
		FROM #BaseDiscount B 
		INNER JOIN Retailer C (NOLOCK) ON C.CmpRtrCode=B.CmpRtrCode
		WHERE NOT EXISTS(SELECT SchId,RtrId FROM SchemeRtrLevelValidation D (NOLOCK) WHERE D.SchId=B.Schid
		AND D.RtrId=C.RtrId)
		
		INSERT INTO SchemeRetAttr(SchId,AttrType,AttrId,Availability,LastModBy,LastModDate,AuthId,AuthDate)
		SELECT DISTINCT B.Schid,8,C.RtrId,1,9,CONVERT(VARCHAR(10),GETDATE(),121) ,1,GETDATE()
		FROM #BaseDiscount B 
		INNER JOIN Retailer C (NOLOCK) ON C.CmpRtrCode=B.CmpRtrCode
		WHERE NOT EXISTS(SELECT SchId,RtrId FROM SchemeRetAttr D WHERE D.SchId=B.Schid
		AND D.AttrId=C.RtrId AND AttrType=8)
		
		
		UPDATE A SET A.DownLoadFlag='Y' 
		FROM Cn2CS_Institutional_Scheme_Budget A INNER JOIN SchemeMaster B ON A.CmpSchCode=B.CmpSchCode
		INNER JOIN Retailer C ON C.CmpRtrCode=A.CmpRtrCode
		INNER JOIN SchemeRtrLevelValidation S ON S.Schid=B.Schid and S.RtrId=C.RtrId

END
GO
IF NOT EXISTS (SELECT * FROM sys.key_constraints WHERE TYPE='UQ' AND PARENT_OBJECT_ID  = OBJECT_ID('CostCentreDetails'))
BEGIN
	ALTER TABLE CostCentreDetails ADD CONSTRAINT UK_BRANDCODE UNIQUE (BRANDCODE)
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Cn2Cs_CostCentre' AND TYPE='P')
DROP PROCEDURE Proc_Cn2Cs_CostCentre
GO
/*
BEGIN TRAN

EXEC Proc_Cn2Cs_CostCentre  0
select *from Cn2Cs_Prk_CostCentre
select *from CostCentreDetails
ROLLBACK TRAN
*/
CREATE PROCEDURE Proc_Cn2Cs_CostCentre
(
	@Po_ErrNo INT OUTPUT
)
AS
/*********************************
* PROCEDURE		: Proc_Cn2Cs_CostCentre
* PURPOSE		: COST CENTRE DATA DUMP
* CREATED		: S.MOHANA
* CREATED DATE	: 12-11-2019
* PMS NO		: CRCRSTNES0028
******************************************************************************
* 17-02-2020	MOHANA S		BZ			ILCRSTPAR7916			Insert 0 as Cost Centre if CC not available
*********************************/
SET NOCOUNT ON
BEGIN
	 
	SET @Po_ErrNo=0  
	 
	DELETE FROM Cn2Cs_Prk_CostCentre WHERE DownLoadFlag='Y' 
	
	SELECT BrandCode,CostCenter,Max(CreatedDate) MaxDate INTO #MaxDet FROM Cn2Cs_Prk_CostCentre WHERE DownloadFlag='D' 
	GROUP BY BrandCode,CostCenter 
	
	SELECT A.* INTO #Cn2Cs_Prk_CostCentre FROM Cn2Cs_Prk_CostCentre A INNER JOIN #MaxDet B ON A.BrandCode=B.BrandCode AND A.CreatedDate =B.MaxDate 
	AND A.CostCenter=B.CostCenter
	WHERE DownloadFlag='D'
	
	IF NOT EXISTS(SELECT 'X' FROM #Cn2Cs_Prk_CostCentre (NOLOCK) WHERE DownLoadFlag='D')
	BEGIN
		RETURN
	END  

	CREATE TABLE #ToAvoid
	(
		BrandCode NVARCHAR(100) 
	)
	
	
	DECLARE @CmpPrdCtgId INT
	SELECT @CmpPrdCtgId = CmpPrdCtgId FROM ProductCategoryLevel WHERE CmpPrdCtgName ='BRAND'
	
	INSERT INTO #ToAvoid 
	SELECT BrandCode  FROM #Cn2Cs_Prk_CostCentre WHERE BrandCode NOT IN (SELECT PrdCtgValCode FROM ProductCategoryValue WHERE CmpPrdCtgId =@CmpPrdCtgId)
	
	INSERT INTO ErrorLog 
	SELECT 1,'Cn2Cs_Prk_CostCentre','BrandCode',BrandCode + 'is Not available in Product Category'
	FROM #Cn2Cs_Prk_CostCentre WHERE BrandCode NOT IN (SELECT PrdCtgValCode FROM ProductCategoryValue WHERE CmpPrdCtgId =@CmpPrdCtgId)
	
	--IF EXISTS (SELECT * FROM CostCentreDetails WHERE BrandCode IN (SELECT BrandCode FROM #Cn2Cs_Prk_CostCentre))
	--BEGIN
	--	INSERT INTO CostCentreDetails_BackUp 
	--	SELECT BrandCode,Flavour,PKTMRP,CostCenter,CostCenterDesc,GETDATE() FROM CostCentreDetails WHERE BrandCode IN (SELECT BrandCode FROM #Cn2Cs_Prk_CostCentre)
	--	DELETE FROM CostCentreDetails WHERE BrandCode IN (SELECT BrandCode FROM #Cn2Cs_Prk_CostCentre)
	--END 


	DELETE FROM CostCentreDetails
	INSERT INTO CostCentreDetails(BrandCode,Flavour,PKTMRP,CostCenter,CostCenterDesc,DownloadedDate)	
	SELECT DISTINCT BrandCode,Flavour,PKTMRP,CostCenter,CostCenterDesc,GETDATE() 
	FROM #Cn2Cs_Prk_CostCentre 
	WHERE DownloadFlag ='D'  
	 
	UPDATE A SET DownloadFlag ='Y' FROM Cn2Cs_Prk_CostCentre A INNER JOIN CostCentreDetails B ON A.BrandCode = B.BrandCode 
	AND A.CostCenter = B.CostCenter AND DownloadFlag ='D'

	 
	DECLARE @Brand TABLE
	(
	BrandCode NVARCHAR(100)
	)

	INSERT INTO @Brand
	SELECT DISTINCT Brand_Code  FROM Stockledger A (NOLOCK) 
	INNER JOIN TBL_GR_BUILD_PH B (NOLOCK) ON A.PrdId = B.PrdId 
	INNER JOIN Product P(NOLOCK) ON B.PrdId = P.PrdId AND A.Prdid = P.Prdid AND P.PrdStatus = 1 AND Category_Code NOT IN ('C00','K') 
	--WHERE Transdate>=CONVERT(VARCHAR(10),  DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())-3, 0) ,121) AND Category_Code NOT IN ('C00','K') 
	
	INSERT INTO CostCentreDetails (BrandCode,Flavour,PKTMRP,CostCenter,CostCenterDesc,DownloadedDate)
	SELECT DISTINCT  PrdCtgValCode,'','',0,'',GETDATE() FROM ProductCategoryValue A (NOLOCK) INNER JOIN @Brand C ON A.PrdCtgValCode = C.BrandCode
	WHERE A.CmpPrdCtgId =@CmpPrdCtgId AND  A.PrdCtgValCode NOT IN (SELECT DISTINCT BrandCode  FROM CostCentreDetails(NOLOCK))


END
GO
IF EXISTS(SELECT * FROM SYS.OBJECTS WHERE name='Proc_Cs2Cn_CostCenterNotAvailable' and type='P')
DROP PROC Proc_Cs2Cn_CostCenterNotAvailable
GO
CREATE PROCEDURE Proc_Cs2Cn_CostCenterNotAvailable
(
	@Po_ErrNo	INT OUTPUT,
	@ServerDate DATETIME
)
AS
/****************************************************************************
* PROCEDURE	:  Proc_Cs2Cn_ClaimMismatchDetails
* PURPOSE	:  TO UPLOAD THE SAVED DEBITNOTETOPSHEET CLAIM IF Claim NOT Upload 
* DATE		:  21-12-2019
* CREATED	:  MOHANA S	
* PMS NO	:  ILCRSTPAR7092
******************************************************************************
* 17-02-2020	MOHANA S		BZ			ILCRSTPAR7916			Insert 0 as Cost Centre if CC not available
* 06-07-2020    Deepak Philip   BZ          PARLESECS/0720/027      Upload blocked.
*******************************************************************************/
SET NOCOUNT ON
BEGIN
	SET @Po_ErrNo=0
	DECLARE @DistCode	AS NVARCHAR(50)
	
	SELECT @DistCode = DistributorCode FROM Distributor
	
	DELETE FROM Cs2Cn_Prk_CostCenterNotAvailable  WHERE UploadFlag ='Y'
	--RETURN
	 
	DECLARE @CmpPrdCtgId INT
	SELECT @CmpPrdCtgId = CmpPrdCtgId FROM ProductCategoryLevel WHERE CmpPrdCtgName ='BRAND'
	
	
	--INSERT INTO Cs2Cn_Prk_CostCenterNotAvailable (DistCode,BrandCode,UploadFlag,ServerDate)
	--SELECT @DistCode,PrdCtgValCode,'N',@ServerDate FROM ProductCategoryValue WHERE CmpPrdCtgId =@CmpPrdCtgId 
	--		AND  PrdCtgValCode NOT IN (SELECT DISTINCT BrandCode  FROM CostCentreDetails) 
	
	--ILCRSTPAR7916
	DECLARE @Brand TABLE
	(
	BrandCode NVARCHAR(100)
	)
	INSERT INTO @Brand
	SELECT DISTINCT Brand_Code  FROM Stockledger A (NOLOCK) 
	INNER JOIN TBL_GR_BUILD_PH B (NOLOCK) ON A.PrdId = B.PrdId 
	INNER JOIN Product P(NOLOCK) ON B.PrdId = P.PrdId AND A.Prdid = P.Prdid AND P.PrdStatus = 1 AND Category_Code NOT IN ('C00','K') 
	--WHERE Transdate>=CONVERT(VARCHAR(10),  DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())-3, 0) ,121) AND Category_Code NOT IN ('C00','K') 
	
	INSERT INTO CostCentreDetails (BrandCode,Flavour,PKTMRP,CostCenter,CostCenterDesc,DownloadedDate)
	SELECT DISTINCT  PrdCtgValCode,'','',0,'',GETDATE() FROM ProductCategoryValue A (NOLOCK) INNER JOIN @Brand C ON A.PrdCtgValCode = C.BrandCode
	WHERE A.CmpPrdCtgId =@CmpPrdCtgId AND  A.PrdCtgValCode NOT IN (SELECT DISTINCT BrandCode  FROM CostCentreDetails(NOLOCK))
END
GO
IF EXISTS(SELECT 'X' FROM SYSOBJECTS WHERE XTYPE='P' AND name='Proc_RptItemListPrice')
DROP PROCEDURE Proc_RptItemListPrice
GO
--Select * from RptItemListPrice_Excel Where PrdID=1  
--EXEC Proc_RptItemListPrice 13,1,0,'CoreStocky',0,0,1  
CREATE PROCEDURE [Proc_RptItemListPrice]  
(  
	 @Pi_RptId  INT,  
	 @Pi_UsrId  INT,  
	 @Pi_SnapId  INT,  
	 @Pi_DbName  nvarchar(50),  
	 @Pi_SnapRequired INT,  
	 @Pi_GetFromSnap  INT,  
	 @Pi_CurrencyId  INT  
)  
AS
/*-------------------------------------------------------------------------------------------------------
* [DATE]      [DEVELOPER]         [USER_STORY_ID]   [CR/BUG]  [DESCRIPTION]
* Date            Name              PMS NO            CR/BUG      Remarks
-------------------------------------------------------------------------------------------------------
* 2020-02-11   Lakshman           ILCRSTPAR7712         BZ     To fetch correct product status.
* 2020-06-30   Murugan.R		  PARCS202100042		CR		To show only last six month data.
*/  
BEGIN  
	SET NOCOUNT ON  
	DECLARE @NewSnapId  AS INT  
	DECLARE @DBNAME  AS  nvarchar(50)  
	DECLARE @TblName  AS nvarchar(500)  
	DECLARE @TblStruct  AS nVarchar(4000)  
	DECLARE @TblFields  AS nVarchar(4000)  
	DECLARE @sSql  AS  nVarChar(4000)  
	DECLARE @PurDBName AS nVarChar(50)  
	DECLARE @ErrNo   AS INT  
	DECLARE @fPrdCatPrdId AS Int  
	DECLARE @fPrdId  AS Int  
	DECLARE @CmpId   AS INT  
	DECLARE @PrdStatus      AS INT  
	DECLARE @PrdBatStatus   AS INT  
	DECLARE @EXLFlag AS INT  
	
	---To show only last 6 Month Data
	SELECT DISTINCT Prdid,PrdbatId INTO #LastSixMonth FROM Stockledger (NOLOCK) 
	WHERE TransDate between CONVERT(DATETIME,CONVERT(VARCHAR(10),DATEADD(MONTH,-6,GETDATE()),121),121)
	AND CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121)
	  
	EXEC Proc_ReturnRptProduct @Pi_RptId,@Pi_UsrId  
	
	SET @fPrdCatPrdId = (SElect  TOP 1 iCountid FRom Fn_ReturnRptFilters(@Pi_RptId,26,@Pi_UsrId))  
	SET @fPrdId = (SElect  TOP 1 iCountid FRom Fn_ReturnRptFilters(@Pi_RptId,5,@Pi_UsrId))  
	SET @CmpId = (SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId))  
	SET @PrdStatus =(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,24,@Pi_UsrId))  
	SET @PrdBatStatus =(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,25,@Pi_UsrId))  
	Create TABLE #RptItemPriceList  
	(  
	  PrdId           BIGINT,  
	  PrdDCode          NVARCHAR(100),  
	  PrdName            NVARCHAR(200),  
	  PrdBatId    INT,  
	  PrdBatCode          NVARCHAR(100),  
	  FieldDesc          NVARCHAR(200),  
	  PriceListValue      NUMERIC (38,6),  
	  PriceId       INT,  
	  PriceCode   NVARCHAR(4000),  
	  UsrId            INT  
	)  
	SET @TblName = 'RptItemPriceList'  
	SET @TblStruct = ' PrdId    BIGINT,  
			   PrdDCode  NVARCHAR(100),  
			   PrdName   NVARCHAR(200),  
			   PrdBatId     INT,  
			   PrdBatCode      NVARCHAR(100),  
			   FieldDesc       NVARCHAR(200),  
			   PriceListValue  NUMERIC (38,6),  
	   		   PriceId         INT ,  
			   PriceCode  NVARCHAR(100),  
			   UsrId           INT '  
	     
	SET @TblFields = 'PrdId,PrdDCode,PrdName,PrdBatId,PrdBatCode,FieldDesc,  
		PriceListValue,PriceId,PriceCode, UsrId'  
	IF @Pi_GetFromSnap = 1  
	BEGIN  
	 Select @DBNAME = DBName  FROM SnapShotHd WHERE SnapId = @Pi_SnapId  
	 SET @DBNAME = @DBNAME  
	END  
	ELSE    
	BEGIN  
	 Select @DBNAME = CounterDesc  FROM CounterConfiguration WHERE SlNo =3  
	 SET @DBNAME = @PI_DBNAME + @DBNAME  
	END  
	IF @Pi_GetFromSnap = 0  --To Generate For New Report Data  
	BEGIN  	
	 INSERT INTO #RptItemPriceList(PrdId,PrdDCode,PrdName,PrdBatId,PrdBatCode,FieldDesc,PriceListValue,PriceId,PriceCode,UsrId)  
	 SELECT A.PrdId,PrdDCode,PrdName,A.PrdBatId,PrdBatCode,FieldDesc,  
	 dbo.Fn_ConvertCurrency(PrdBatDetailValue,@Pi_CurrencyId),PriceId,PriceCode,@Pi_UsrId AS UserId  FROM View_ItemPriceList 
	 A INNER JOIN #LastSixMonth B ON A.PrdId=B.PrdId and A.PrdBatId = B.PrdBatId 
	  WHERE
	   (A.PrdId = (CASE @fPrdCatPrdId WHEN 0 THEN A.PrdId Else 0 END) OR  
	    A.PrdId in (SELECT iCountid from Fn_ReturnRptFilters(@Pi_RptId,26,@Pi_UsrId)))  
	  AND ( A.PrdId = (CASE @fPrdId WHEN 0 THEN A.PrdId Else 0 END) OR  
	    A.PrdId in (SELECT iCountid from Fn_ReturnRptFilters(@Pi_RptId,5,@Pi_UsrId)))  
	  AND
	   (CmpId=(CASE @CmpId WHEN 0 THEN CmpId ELSE 0 END) OR  
	   CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId)))  
	  AND  PrdStatus=CASE @PrdStatus WHEN 0 THEN PrdStatus 
										WHEN 1 THEN 1
										WHEN 2 THEN 0 END	   
	  --AND --(PrdStatus=(CASE @PrdStatus WHEN 0 THEN PrdStatus ELSE 0 END) OR  --- ILCRSTPAR7712
	  -- PrdStatus in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,24,@Pi_UsrId))--)  ---- ILCRSTPAR7712
	  AND 
		--(PrdBatStatus=(CASE @PrdBatStatus WHEN 0 THEN PrdBatStatus ELSE -1 END) OR  ---- ILCRSTPAR7712
		--PrdBatStatus in (SELECT iCountid-1 FROM Fn_ReturnRptFilters(@Pi_RptId,25,@Pi_UsrId)
	   PrdBatStatus =CASE @PrdBatStatus WHEN 0 THEN PrdBatStatus 
										WHEN 1 THEN 0 
										WHEN 2 THEN 1 END
	   --)--)  ----- ILCRSTPAR7712 
	 
	 /*  5
	  CAST(@fSMId AS nVarchar(10))  
	  For ProductCategory Value and Product Filter  
	  R.PrdId = (CASE @fPrdCatPrdId WHEN 0 THEN R.PrdId Else 0 END) OR  
	  R.PrdId in (SELECT iCountid from Fn_ReturnRptFilters(@Pi_RptId,26,@Pi_UsrId))  
	  AND R.PrdId = (CASE @fPrdId WHEN 0 THEN R.PrdId Else 0 END) OR  
	  R.PrdId in (SELECT iCountid from Fn_ReturnRptFilters(@Pi_RptId,5,@Pi_UsrId))  
	 */  
	    
	 IF LEN(@PurDBName) > 0  
	 BEGIN  
	  EXEC Proc_PurgedDB @PurDBName,@TblName,@Po_PurgeErrno = @ErrNo OUTPUT  
	    
	  SET @SSQL = 'INSERT INTO #RptItemPriceList ' +  
	   '(' + @TblFields + ')' +  
	   ' SELECT ' + @TblFields + ' FROM ['  + @PurDBName + '].dbo.' + @TblName +  
	   ' WHERE (PrdId = (CASE ' + CAST(@fPrdCatPrdId AS nVarchar(10)) + ' WHEN 0 THEN PrdId Else 0 END) OR' +  
	   ' PrdId in (SELECT iCountid from Fn_ReturnRptFilters(' + CAST(@Pi_RptId AS nVarchar(10)) + ',26,' + CAST(@Pi_UsrId AS nVarchar(10)) + ')))' +  
	   ' AND (PrdId = (CASE ' + CAST(@fPrdId AS nVarchar(10)) + ' WHEN 0 THEN PrdId Else 0 END) OR ' +  
	   ' PrdId in (SELECT iCountid from Fn_ReturnRptFilters(' + CAST(@Pi_RptId AS nVarchar(10)) + ',5,' + CAST(@Pi_UsrId AS nVarchar(10)) + ')))' +  
	   ' AND (CmpId=(CASE ' + CAST(@CmpId AS nVarchar(10)) + ' WHEN 0 THEN CmpId ELSE 0 END) OR '+  
	   ' CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(' + CAST(@Pi_RptId AS nVarchar(10))+ ',4,' + CAST(@Pi_UsrId AS nVarchar(10)) + ')))' +  
	   ' AND (PrdStatus=(CASE ' + CAST(@PrdStatus AS nVarchar(10)) + ' WHEN 0 THEN PrdStatus ELSE 0 END) OR ' +  
	   ' PrdStatus in (SELECT iCountid FROM Fn_ReturnRptFilters(' + CAST(@Pi_RptId AS nVarchar(10)) + ',24,' + CAST(@Pi_UsrId AS nVarchar(10)) + ')))' +  
	   ' AND (PrdBatStatus=(CASE ' +  CAST(@PrdBatStatus AS nVarchar(10)) + ' WHEN 0 THEN PrdBatStatus ELSE 0 END) OR ' +  
	   ' PrdBatStatus in (SELECT iCountid FROM Fn_ReturnRptFilters(' + CAST(@Pi_RptId AS nVarchar(10)) + ',25,' + CAST(@Pi_UsrId AS nVarchar(10))+ ')))'  
	   /*  
		Add the Filter Clause for the Reprot  
	   */  
	  EXEC (@SSQL)  
	  PRINT 'Retrived Data From Purged Table'  
	 END  
	 IF @Pi_SnapRequired = 1  
		BEGIN  
	  SELECT @NewSnapId = @Pi_SnapId  
	  EXEC Proc_SnapShot_Report @NewSnapId,@Pi_UsrId,@Pi_RptId,@Pi_DbName,@TblName,@TblStruct,  
	   @Pi_GetFromSnap,@Po_SnapErrno = @ErrNo OUTPUT  
	  IF @ErrNo = 0  
		 BEGIN  
	   SET @sSql = 'INSERT INTO [' + @DBNAME + '].dbo.' + @TblName +  
		'(SnapId,UserId,RptId,' + @TblFields + ')' +  
		' SELECT ' + CAST(@NewSnapId AS VARCHAR(10)) +  
		' ,' + CAST(@Pi_UsrId AS VARCHAR(10)) +  
		' ,' + CAST(@Pi_RptId AS VARCHAR(10)) + ', * FROM #RptItemPriceList'  
	   
	   EXEC (@SSQL)  
	   PRINT 'Saved Data Into SnapShot Table'  
		 END  
		END  
	END  
	ELSE    --To Retrieve Data From Snap Data  
	BEGIN  
	 EXEC Proc_SnapShot_Report @Pi_SnapId,@Pi_UsrId,@Pi_RptId,@Pi_DbName,@TblName,@TblStruct,  
	   @Pi_GetFromSnap,@Po_SnapErrno = @ErrNo OUTPUT  
	 PRINT @ErrNo  
	 IF @ErrNo = 0  
		BEGIN  
	  SET @SSQL = 'INSERT INTO #RptItemPriceList ' +  
	   '(' + @TblFields + ')' +  
	   ' SELECT ' + @TblFields + ' FROM ['  + @DBNAME + '].dbo.' + @TblName +  
	   ' WHERE SNAPID = ' + CAST(@Pi_SnapId AS VARCHAR(10)) +  
	   ' AND UserId = ' + CAST(@Pi_UsrId AS VARCHAR(10)) +  
	   ' AND RptId = ' + CAST(@Pi_RptId AS VARCHAR(10))  
	  EXEC (@SSQL)  
	  PRINT 'Retrived Data From Snap Shot Table'  
		END  
	 ELSE  
		BEGIN  
	  PRINT 'DataBase or Table not Found'  
		END  
	END  
	--Check for Report Data  
	Delete From RptDataCount Where RptId = @Pi_RptId AND UserId = @Pi_UsrId  
	INSERT INTO RptDataCount (RptId,RecCount,ErrNo,UserId)  
	SELECT @Pi_RptId,Count(*) as RecCount,@ErrNo,@Pi_UsrId FROM #RptItemPriceList  
	-- Till Here  
	SELECT * FROM #RptItemPriceList   
	 SELECT @EXLFlag=Flag FROM RptExcelFlag WITH(NOLOCK) WHERE RptID=@Pi_RptID AND UsrId=@Pi_UsrId  
	 IF @EXLFlag=1  
	 BEGIN  
	    
	  /***************************************************************************************************************************/  
	  --Create Table in Dynamic Cols  
	  --Cursors  
	  DECLARE  @PrdId BIGINT  
	  DECLARE  @PrdDCode NVARCHAR(100)  
	  DECLARE  @PrdBatId INT  
	  DECLARE  @PriceId BIGINT  
	  DECLARE  @PriceCode NVARCHAR(1000)  
	  DECLARE  @PrdBatCode NVARCHAR(100)  
	  DECLARE  @FieldDesc NVARCHAR(200)  
	  DECLARE  @PriceListValue NUMERIC(38,6)  
	  DECLARE  @SlNo INT  
	  DECLARE  @Column VARCHAR(80)  
	  DECLARE  @C_SSQL VARCHAR(4000)  
	  DECLARE  @iCnt INT  
	  DECLARE  @Name NVARCHAR(100)  
	  --DROP TABLE RptGRNListing_Excel  
	  IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'[RptItemListPrice_Excel]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)  
	  DROP TABLE [RptItemListPrice_Excel]  
	  DELETE FROM RptExcelHeaders Where RptId=13 AND SlNo>8  
	  CREATE TABLE RptItemListPrice_Excel (PrdId INT,PrdDCode NVARCHAR(50),PrdName NVARCHAR(100),PrdBatId INT ,PrdBatCode NVARCHAR(100),PriceId BIGINT,PriceCode NVARCHAR(100),UsrId INT)  
	  SET @iCnt=9  
	  DECLARE Column_Cur CURSOR FOR  
	  SELECT DISTINCT(FieldDesc),UsrId FROM #RptItemPriceList ORDER BY FieldDesc  
	  OPEN Column_Cur  
		  FETCH NEXT FROM Column_Cur INTO @Column,@SlNo  
		  WHILE @@FETCH_STATUS = 0  
		BEGIN  
		 SET @C_SSQL='ALTER TABLE RptItemListPrice_Excel  ADD ['+ @Column +'] NUMERIC(38,6)'  
		 EXEC (@C_SSQL)  
	       
		 SET @C_SSQL='INSERT INTO RptExcelHeaders (RptId,SlNo,FieldName,DisplayName,DisplayFlag,LngId)'  
		 SET @C_SSQL=@C_SSQL +' VALUES(' + CAST(@Pi_RptId AS VARCHAR(100))+ ',' + CAST(@iCnt AS VARCHAR(100))  
		 SET @C_SSQL=@C_SSQL + ',''['+ CAST(@Column AS VARCHAR(100))+']'','''+ CAST(@Column AS VARCHAR(100))+ ''',1,1)'  
	       
		 --PRINT @C_SSQL  
		 EXEC (@C_SSQL)  
		 SET @iCnt=@iCnt+1  
		 FETCH NEXT FROM Column_Cur INTO @Column,@SlNo  
		END  
	  CLOSE Column_Cur  
	  DEALLOCATE Column_Cur  
	  --Insert table values  
	  DELETE FROM RptItemListPrice_Excel  
	  INSERT INTO RptItemListPrice_Excel(PrdId,PrdDCode,PrdName,PrdBatId,PrdBatCode,PriceId,PriceCode,UsrId)  
	  SELECT DISTINCT PrdId,PrdDCode,PrdName,PrdBatId,PrdBatCode,PriceId,PriceCode,@Pi_UsrId  
		FROM #RptItemPriceList  
	  DECLARE Values_Cur CURSOR FOR  
	  SELECT DISTINCT PrdId,PrdDCode,PrdBatId,PrdBatCode,PriceId,PriceCode,FieldDesc,PriceListValue FROM #RptItemPriceList  
	  OPEN Values_Cur  
		  FETCH NEXT FROM Values_Cur INTO @PrdId,@PrdDCode,@PrdBatId,@PrdBatCode,@PriceId,@PriceCode,@FieldDesc,@PriceListValue  
		  WHILE @@FETCH_STATUS = 0  
		BEGIN  
		 SET @C_SSQL='UPDATE RptItemListPrice_Excel  SET ['+ @FieldDesc +']= '+ CAST(@PriceListValue AS VARCHAR(1000))  
		 SET @C_SSQL=@C_SSQL+ ' WHERE PrdId=' + CAST(@PrdId AS VARCHAR(1000))  
		 +' AND PrdDCode=''' + CAST(@PrdDCode AS VARCHAR(1000))+''' AND  PrdBatId=' + CAST(@PrdBatId As VARCHAR(1000))  
		 +' AND PrdBatCode=''' + CAST(@PrdBatCode AS VARCHAR(1000)) +'''AND PriceId=' + CAST(@PriceId AS Varchar(1000)) +' AND PriceCode='''+ CAST( @PriceCode AS VARCHAR(1000)) +''' AND UsrId='+ CAST(@Pi_UsrId As VARCHAR(1000)) +''  
		 EXEC (@C_SSQL)  
		 --PRINT @C_SSQL  
		 FETCH NEXT FROM Values_Cur INTO @PrdId,@PrdDCode,@PrdBatId,@PrdBatCode,@PriceId,@PriceCode,@FieldDesc,@PriceListValue  
		END  
	  CLOSE Values_Cur  
	  DEALLOCATE Values_Cur  
	  -- To Update the Null Value as 0  
	  DECLARE NullCursor_Cur CURSOR FOR  
	  SELECT Name FROM dbo.sysColumns where id = object_id(N'[RptItemListPrice_Excel]')  
	  OPEN NullCursor_Cur  
		  FETCH NEXT FROM NullCursor_Cur INTO @Name  
		  WHILE @@FETCH_STATUS = 0  
		BEGIN  
		 SET @C_SSQL='UPDATE RptItemListPrice_Excel SET ['+ @Name +']= '+ CAST(0 AS VARCHAR(1000))  
		 SET @C_SSQL=@C_SSQL + ' WHERE '+'['+ @Name +']'+'IS NULL'+ ''  
		 EXEC (@C_SSQL)  
		 --PRINT @C_SSQL  
		 FETCH NEXT FROM NullCursor_Cur INTO @Name  
		END  
	  CLOSE NullCursor_Cur  
	  DEALLOCATE NullCursor_Cur  
	  /***************************************************************************************************************************/  
	 END  
	RETURN  
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_ValidateDayEndProcess' AND TYPE ='P')
DROP PROCEDURE Proc_ValidateDayEndProcess
GO
/*
begin tran
delete from DayEndValidation
EXEC Proc_ValidateDayEndProcess '2019-08-25'
SELECT * FROM DayEndValidation
rollback tran
*/
CREATE PROCEDURE Proc_ValidateDayEndProcess
(
	@Pi_Fromdate AS DATETIME
)
AS
BEGIN
/*********************************
* PROCEDURE: Proc_ValidateDayEndProcess
* PURPOSE: To Validate the Day end
* NOTES: 
* CREATED:Murugan.R
* MODIFIED 
* DATE      AUTHOR     DESCRIPTION
* 17-07-2013 Praveenraj B for adding master user access validation for GCPL
*****************************************************************************************************
* 27-08-2019     Lakshman M     BZ   ILCRSTPAR5695    Dayend validation missing in core stocky.
*****************************************************************************************************/ 
--DayEnd Type 1 --Find Jc Mont exists
--DayEnd Type 2 --Pending Day End
DECLARE @MonthEnd AS TINYINT
DECLARE @Pi_JcFromdate AS DATETIME
DECLARE @Pi_JcTodate AS DATETIME
DECLARE @CheckPendingTransaction AS TINYINT
DELETE FROM DayEndValidation
SET @MonthEnd=0
SET @CheckPendingTransaction=0
----------- Added By lakshman M Dated ON 07/01/2018 PMS ID: ILCRSTPAR3026 -------------
IF NOT EXISTS(SELECT * FROM stockledger)
BEGIN
	Return
END
----------- Till here -----------
IF NOT EXISTS(SELECT J.JcmId,JcmJc,JcmYr,JcmSdt,JcmEdt FROM JcMast J INNER JOIN Jcmonth Jc ON J.JcmId=Jc.JcmId INNER JOIN Company C On C.CmpId=J.CmpId
WHERE CONVERT(DATETIME,CONVERT(VARCHAR(10),@Pi_Fromdate,121),121) BETWEEN JcmSdt and JcmEdt And DefaultCompany=1)
BEGIN
	INSERT INTO DayEndValidation(DayEndType,DayEndStartDate,Status)
	SELECT 1,CONVERT(DATETIME,CONVERT(VARCHAR(10),@Pi_Fromdate,121),121),1
END	
	SELECT  MIN(DayEndStartDate) as  DayEndStartDate  INTO #DayEndExists
	FROM DayEndDates WHERE DayEndStartDate<CONVERT(DATETIME,CONVERT(VARCHAR(10),@Pi_Fromdate,121),121) AND Status=0
------------- ILCRSTPAR5695 ----------
IF EXISTS(SELECT  * FROM #DayEndExists WHERE DayEndStartDate IS NOT NULL)
BEGIN
	INSERT INTO DayEndValidation(DayEndType,DayEndStartDate,Status)
	SELECT 2, MIN(DayEndStartDate) ,1 FROM DayEndDates WHERE DayEndStartDate<CONVERT(DATETIME,CONVERT(VARCHAR(10),@Pi_Fromdate,121),121)
	AND Status=0
END
	IF EXISTS(SELECT TOP 1 JcmSdt,JcmEdt from JcmonthEnd WHERE Status=0 ORDER BY JcmSdt)
	BEGIN
		SELECT TOP 1 JcmSdt,JcmEdt INTO #JCEND FROM JcmonthEnd WHERE Status=0 ORDER BY JcmSdt
		SELECT @Pi_JcFromdate=JcmSdt,@Pi_JcTodate=JcmEdt FROM #JCEND 
		IF NOT EXISTS(SELECT * from Dayenddates WHERE DayEndstartdate BETWEEN @Pi_JcFromdate and @Pi_JcTodate and Status=0)
		BEGIN
			INSERT INTO DayEndValidation(DayEndType,DayEndStartDate,Status)
			SELECT 3,JcmEdt ,1 FROM #JCEND 		
		END
	END
END
GO
--- MASTER UPLOAd PROCESS SCRIPT PREPARED BY VENKAT. M PMS NO : ILCRSTPAR8077
DELETE FROM Tbl_UploadIntegration Where ProcessName = 'Salesman_New'
INSERT INTO  Tbl_UploadIntegration (SequenceNo,ProcessName,FolderName,PrkTableName,CreatedDate)
VALUES(78,'Salesman_New','Salesman_New','Cs2Cn_Prk_Salesman_New',GETDATE())
GO
DELETE FROM CustomUpDownload Where Module = 'Salesman_New'
INSERT INTO CustomUpDownload (SlNo,SeqNo,Module,Screen,ExportFnName,ImportProcName, ParkTable,ValidateProcName,TranType,UpDownload,MandatoryFile)
VALUES( 179,1,'Salesman_New','Salesman_New','Proc_Cs2Cn_Salesman_New','','Cs2Cn_Prk_Salesman_New','','Transaction','Upload',1)
GO
DELETE FROM Tbl_UploadIntegration Where ProcessName = 'Route_New'
INSERT INTO  Tbl_UploadIntegration (SequenceNo,ProcessName,FolderName,PrkTableName,CreatedDate)
VALUES(79,'Route_New','Route_New','Cs2Cn_Prk_Route_New',GETDATE())
GO
DELETE FROM CustomUpDownload Where Module = 'Route_New'
INSERT INTO CustomUpDownload (SlNo,SeqNo,Module,Screen,ExportFnName,ImportProcName, ParkTable,ValidateProcName,TranType,UpDownload,MandatoryFile)
VALUES( 180,1,'Route_New','Route_New','Proc_Cs2Cn_Route_New','','Cs2Cn_Prk_Route_New','','Transaction','Upload',1)
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE name='Cs2Cn_Prk_Salesman_New' AND Xtype ='U')
CREATE TABLE Cs2Cn_Prk_Salesman_New
(
	[SlNo] [numeric](38, 0) IDENTITY(1,1) NOT NULL,
	[DistCode] [nvarchar](100) NULL,
	[SMId] [int] NULL,
	[SMCode] [nvarchar](100) NULL,
	[SMName] [nvarchar](100) NULL,
	[SMPhoneNo] [nvarchar](100) NULL,
	[SMEmail] [nvarchar](100) NULL,
	[SMOtherDetails] [nvarchar](500) NULL,
	[SMDailyAllowance] [numeric](38, 6) NULL,
	[SMMonthlySalary] [numeric](38, 6) NULL,
	[SMMktCredit] [numeric](38, 6) NULL,
	[SMCreditDays] [int] NULL,
	[Status] [nvarchar](20) NULL,
	[RMId] [int] NULL,
	[RMCode] [nvarchar](100) NULL,
	[RMName] [nvarchar](100) NULL,
	[UploadFlag] [nvarchar](1) NULL,
	[SyncId] [numeric](38, 0) NULL,
	[ServerDate] [datetime] NULL,
	[HHTDeviceSerialNumber] [varchar](100) NULL
) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE name='Cs2Cn_Prk_Route_New' AND Xtype ='U')
CREATE TABLE Cs2Cn_Prk_Route_New
(
	[SlNo] [numeric](38, 0) IDENTITY(1,1) NOT NULL,
	[DistCode] [nvarchar](100) NULL,
	[RMId] [int] NULL,
	[RMCode] [nvarchar](100) NULL,
	[RMName] [nvarchar](100) NULL,
	[Distance] [numeric](38, 6) NULL,
	[RMPopulation] [numeric](38, 6) NULL,
	[VanRoute] [nvarchar](100) NULL,
	[RouteType] [nvarchar](100) NULL,
	[LocalUpCountry] [nvarchar](100) NULL,
	[GeoLevel] [nvarchar](100) NULL,
	[GeoValue] [nvarchar](100) NULL,
	[Status] [nvarchar](20) NULL,
	[MonDay] [nvarchar](20) NULL,
	[TuesDay] [nvarchar](20) NULL,
	[WednesDay] [nvarchar](20) NULL,
	[ThursDay] [nvarchar](20) NULL,
	[FriDay] [nvarchar](20) NULL,
	[SaturDay] [nvarchar](20) NULL,
	[SunDay] [nvarchar](20) NULL,
	[UploadFlag] [nvarchar](1) NULL,
	[SyncId] [numeric](38, 0) NULL,
	[ServerDate] [datetime] NULL
) ON [PRIMARY]
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_Cs2Cn_Salesman_New' AND XTYPE='P')
DROP PROCEDURE Proc_Cs2Cn_Salesman_New
GO
/*
BEGIN TRANSACTION
EXEC Proc_Cs2Cn_Salesman_New 0,'2020-02-02'
EXEC Proc_Cs2Cn_Route_New 0,'2020-02-02'
SELECT * FROM Cs2Cn_Prk_Route_New ORDER BY SlNo
SELECT * FROM Retailer
ROLLBACK TRANSACTION
*/
CREATE PROCEDURE Proc_Cs2Cn_Salesman_New
(
	@Po_ErrNo	INT OUTPUT,
	@ServerDate DATETIME
)
AS
SET NOCOUNT ON
BEGIN
/*********************************
* PROCEDURE		: Proc_Cs2Cn_Salesman
* PURPOSE		: To Extract Salesman Details from CoreStocky to upload to Console
* CREATED		: Nandakumar R.G
* CREATED DATE	: 22/06/2010
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
***************************************************************************************************
* DATE       AUTHOR        CR/BZ	USER STORY ID           DESCRIPTION                         
***************************************************************************************************
16-08-2018  Amuthakumar P   CR     CRCRSTPAR0016		  Returns Configuration for HHT Device Serial Number
25-06-2019  lakshman M      CR      CRCRSTPAR0066           In core stocky duplicate saleman for HHT Device Serial Number validated.
***************************************************************************************************/ 
	DECLARE @DistCode	As nVarchar(50)
	
	SET @Po_ErrNo=0
	IF EXISTS (SELECT '*' FROM Cs2Cn_Prk_Salesman_New )
	BEGIN
		RETURN
	END
	
	SELECT @DistCode = DistributorCode FROM Distributor
	INSERT INTO Cs2Cn_Prk_Salesman_New
	(
		DistCode,
		SMId,
		SMCode,
		SMName,
		SMPhoneNo,
		SMEmail,
		SMOtherDetails,
		SMDailyAllowance,
		SMMonthlySalary,
		SMMktCredit,
		SMCreditDays,
		Status,
		RMId,
		RMCode,
		RMName,
		UploadFlag,
		HHTDEVICESERIALNUMBER
	)
	SELECT
		@DistCode,
		SM.SMId,
		SM.SMCode,
		SM.SMName,
		SM.SMPhoneNumber,
		SM.SMEmailID,
		SM.SMOtherDetails,
		SM.SMDailyAllowance,
		SM.SMMonthlySalary,
		SM.SMMktCredit,
		SM.SMCreditDays,
		(CASE SM.Status WHEN 0 THEN 'InActive' ELSE 'Active' END) AS Status,
		ISNULL(SMR.RMId,0) AS RMId,
		ISNULL(RM.RMCode,'') AS RMCode,
		ISNULL(RM.RMName,'') AS RMName,
		'N'	As Uploadflag,
		SM.HHTDeviceSerialNumber			
	FROM		
		Salesman SM LEFT OUTER JOIN  SalesmanMarket SMR
		ON SM.SMId=SMR.SMId
		LEFT OUTER JOIN  RouteMaster RM ON SMR.RMId=RM.RMId

	UPDATE Cs2Cn_Prk_Salesman_New SET ServerDate=@ServerDate
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_Cs2Cn_Route_New' AND XTYPE='P')
DROP PROCEDURE Proc_Cs2Cn_Route_New
GO
/*
BEGIN TRANSACTION
EXEC Proc_Cs2Cn_Route 0
SELECT * FROM Cs2Cn_Prk_Route ORDER BY SlNo
SELECT * FROM RouteMaster
ROLLBACK TRANSACTION
*/
CREATE PROCEDURE Proc_Cs2Cn_Route_New
(
	@Po_ErrNo	INT OUTPUT,	
	@ServerDate DATETIME
)
AS
SET NOCOUNT ON
BEGIN
/*********************************
* PROCEDURE		: Proc_Cs2Cn_Route
* PURPOSE		: To Extract Route Details from CoreStocky to upload to Console
* CREATED		: Nandakumar R.G
* CREATED DATE	: 22/06/2010
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
	
*********************************/
	DECLARE @DistCode	As nVarchar(50)
	
	SET @Po_ErrNo=0
	IF EXISTS (SELECT '*' FROM Cs2Cn_Prk_Route_New )
	BEGIN
		RETURN
	END
	
	SELECT @DistCode = DistributorCode FROM Distributor
	INSERT INTO Cs2Cn_Prk_Route_New
	(
		DistCode,
		RMId,
		RMCode,
		RMName,
		Distance,
		RMPopulation,
		VanRoute,
		RouteType,
		LocalUpCountry,
		GeoLevel,
		GeoValue,
		Status,
		MonDay,
		TuesDay,
		WednesDay,
		ThursDay,
		FriDay,
		SaturDay,
		SunDay,
		UploadFlag
	)
	SELECT
		@DistCode,
		RM.RMId,
		RM.RMCode,
		RM.RMName,
		RM.RMDistance,
		RM.RMPopulation,
		RM.RMVanRoute,
		RM.RMSRouteType,
		RM.RMLocalUpcountry,
		'' AS GeoLevel,
		'' AS GeoValue,
		(CASE RM.RMstatus WHEN 0 THEN 'InActive' ELSE 'Active' END) AS Status,
		(CASE RM.RMMon WHEN 1 THEN 'Yes' ELSE 'No' END),
		(CASE RM.RMTue WHEN 1 THEN 'Yes' ELSE 'No' END),
		(CASE RM.RMWed WHEN 1 THEN 'Yes' ELSE 'No' END),
		(CASE RM.RMThu WHEN 1 THEN 'Yes' ELSE 'No' END),
		(CASE RM.RMFri WHEN 1 THEN 'Yes' ELSE 'No' END),
		(CASE RM.RMSat WHEN 1 THEN 'Yes' ELSE 'No' END),
		(CASE RM.RMSun WHEN 1 THEN 'Yes' ELSE 'No' END),		
		'N'				
	FROM		
		RouteMaster RM
	
	UPDATE A SET A.GeoLevel=B.GeoLevelName,A.GeoValue=B.GeoCode
	FROM Cs2Cn_Prk_Route_New A,	(SELECT RM.RMId,GL.GeoLevelName,G.GeoCode FROM RouteMaster RM,Geography G,GeographyLevel GL
	WHERE RM.GeoMainId=G.GeoMainId AND G.GeoLevelId=GL.GeoLevelId ) B
	WHERE A.RMid=B.RMId
	
	UPDATE Cs2Cn_Prk_Route_New SET ServerDate=@ServerDate
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE name ='Proc_Cs2Cn_Retailer_RetailerUpload' AND XTYPE='P')
DROP PROCEDURE Proc_Cs2Cn_Retailer_RetailerUpload
GO
/*
BEGIN TRAN
--SELECT 'Approval Track Before upload',* from RetailerApprovalStatus
DELETE FROM CS2CN_RetailerReupload_New
EXEC Proc_Cs2Cn_Retailer_RetailerUpload 0,'2019-06-08'
select * from  CS2CN_RetailerReupload_New
--SELECT 'Approval Track After upload',* FROM RetailerApprovalStatus
ROLLBACK TRAN
*/
CREATE PROCEDURE Proc_Cs2Cn_Retailer_RetailerUpload
(
	@Po_ErrNo	INT OUTPUT,
	@ServerDate DATETIME
)
AS
SET NOCOUNT ON
BEGIN
/*********************************
* PROCEDURE	: Proc_Cs2Cn_Retailer 0,'2016-11-11'
* PURPOSE	: Extract Retailer Details from CoreStocky to Console
* NOTES		:
* CREATED	: Nandakumar R.G 09-01-2009
* MODIFIED	:
* DATE         AUTHOR       CR/BZ	   USER STORY ID   DESCRIPTION                         
*****************************************************************************************************
  10/05/2018   S.Moorthi     CR        CRCRSTPAR0001   Retailer Approval process - Manual
  * 06-07-2020    Deepak Philip   BZ          PARLESECS/0720/027      Upload blocked.
*********************************/
DECLARE @CmpID 		AS INTEGER
DECLARE @DistCode	As nVarchar(50)
	
SET @Po_ErrNo=0
DELETE FROM CS2CN_RetailerReupload_New WHERE UploadFlag = 'Y'
RETURN

IF (SELECT DATEDIFF(MONTH,PROCDate,GETDATE()) FROM DayendProcess WHERE ProcDesc ='Retailer_NP')>0
BEGIN
	SELECT @CmpID = CmpId FROM Company WHERE DefaultCompany = 1	
	SELECT @DistCode = DistributorCode FROM Distributor
	INSERT INTO CS2CN_RetailerReupload_New
	(
		DistCode ,
		RtrId ,
		RtrCode ,
		CmpRtrCode,
		RtrName ,
		RtrAddress1,
		RtrAddress2,
		RtrAddress3,
		RtrPINCode,
		RtrCategoryCode ,
		ClassCode ,
		Status,
		KeyAccount,
		RelationStatus,
		ParentCode,
		RtrRegDate,
		GeoLevel,
		GeoLevelValue,
		VillageId,
		VillageCode,
		VillageName,
		Mode,
        DrugLNo,
        RtrFrequency,
        RtrPhoneNo,
        RtrTINNumber,
        RtrTaxGroupCode,
        RtrCrLimit,
        RtrCrDays,
        Approved,
        RtrType,
		UploadFlag,
		UniqueRtrCode,
		ApprovalRemarks	
	)
	SELECT
		@DistCode ,
		R.RtrId ,
		R.RtrCode ,
		R.CmpRtrCode ,
		R.RtrName ,
		R.RtrAdd1 ,
		R.RtrAdd2 ,
		R.RtrAdd3 ,
		R.RtrPinNo ,
		'' CtgCode ,
		'' ValueClassCode ,
		RtrStatus,	
		CASE RtrKeyAcc WHEN 0 THEN 'NO' ELSE 'YES' END AS KeyAccount,
		CASE RtrRlStatus WHEN 2 THEN 'PARENT' WHEN 3 THEN 'CHILD' WHEN 1 THEN 'INDEPENDENT' ELSE 'INDEPENDENT' END AS RelationStatus,
		(CASE RtrRlStatus WHEN 3 THEN ISNULL(RET.RtrCode,'') ELSE '' END) AS ParentCode,
		CONVERT(VARCHAR(10),R.RtrRegDate,121),'' AS GeoLevelName,'' AS GeoName,0,'','','New',R.RtrDrugLicNo,
		CASE RtrFrequency WHEN 0 THEN 'WEEKLY' WHEN 1 THEN 'BI-WEEKLY' WHEN 2 THEN 'FORT NIGHTLY' when 3 then 'MONTHLY' when 4 then 'DAILY' END AS RtrFrequency,
		ISNULL(RtrPhoneNo,''),ISNULL(RtrTINNo,''),ISNULL(TGS.RtrGroup,''),R.RtrCrLimit,
        R.RtrCrDays,(CASE ISNULL(R.Approved,0) WHEN 0 THEN 'PENDING' WHEN 1 THEN 'APPROVED' ELSE 'REJECTED' END) AS Approved,
        (CASE R.RtrType WHEN 1 THEN 'Retailer' WHEN 2 THEN 'Sub Stockist' WHEN 3 THEN 'Hub' WHEN 4 THEN 'Spoke' ELSE 'Distributor' END) AS RtrType,
        'N'	,RtrUniqueCode,''				
	FROM		
		Retailer R
		LEFT OUTER JOIN (SELECT K.RtrCode,RE.RtrId,RE.RtrChildId FROM RetailerRelation RE
		INNER JOIN Retailer K ON RE.RtrId=K.RtrId) RET ON RET.RtrChildId=R.RtrId
		LEFT OUTER JOIN TaxGroupSetting TGS (NOLOCK) ON R.TaxGroupId = TGS.TaxGroupId AND TGS.TaxGroup = 1
	
		
	UPDATE ETL SET ETL.[RtrCategoryCode]=RVC.GroupCode,ETL.ClassCode=RVC.ValueClassCode
	FROM CS2CN_RetailerReupload_New ETL,
	(
		SELECT R.RtrId,RC1.CtgCode AS ChannelCode,RC.CtgCode  AS GroupCode ,RVC.ValueClassCode
		FROM
		RetailerValueClassMap RVCM ,
		RetailerValueClass RVC	,
		RetailerCategory RC ,
		RetailerCategoryLevel RCL,
		RetailerCategory RC1,
		Retailer R  		
	WHERE
		R.Rtrid = RVCM.RtrId
		AND	RVCM.RtrValueClassId = RVC.RtrClassId
		AND	RVC.CtgMainId=RC.CtgMainId
		AND	RCL.CtgLevelId=RC.CtgLevelId
		AND	RC.CtgLinkId = RC1.CtgMainId
	) AS RVC
	WHERE ETL.RtrId=RVC.RtrId
	
	UPDATE ETL SET ETL.GeoLevel=Geo.GeoLevelName,ETL.GeoLevelValue=Geo.GeoName
	FROM CS2CN_RetailerReupload_New ETL,
	(
		SELECT R.RtrId,ISNULL(GL.GeoLevelName,'City') AS GeoLevelName,
		ISNULL(G.GeoName,'') AS GeoName
		FROM			
		Retailer R  		
		LEFT OUTER JOIN Geography G ON R.GeoMainId=G.GeoMainId
		LEFT OUTER JOIN GeographyLevel GL ON GL.GeoLevelId=G.GeoLevelId
	) AS Geo
	WHERE ETL.RtrId=Geo.RtrId	
	
	UPDATE ETL SET ETL.VillageId=V.VillageId,ETL.VillageCode=V.VillageCode,ETL.VillageName=V.VillageName
	FROM CS2CN_RetailerReupload_New ETL,
	(
		SELECT R.RtrId,R.VillageId,V.VillageCode,V.VillageName
		FROM			
		Retailer R  		
		INNER JOIN RouteVillage V ON R.VillageId=V.VillageId
	) V
	WHERE ETL.RtrId=V.RtrId	
	
	--Added By MohanaKrishna A.B For GST
	Update CS2CN_RetailerReupload_New SET StateName='' where StateName is Null
	Update CS2CN_RetailerReupload_New SET GSTTIN ='' where GSTTIN is Null
	Update CS2CN_RetailerReupload_New SET PanNumber ='' where PanNumber is Null
	Update CS2CN_RetailerReupload_New SET RetailerType ='' where RetailerType is Null
	Update CS2CN_RetailerReupload_New SET Composite ='' where Composite is Null
	Update CS2CN_RetailerReupload_New SET RelatedParty ='' where RelatedParty is Null
	----
	
	--Added By Mohana For GST
	SELECT C.MasterRecordId,B.ColumnName,ISNULL(C.ColumnValue,'') ColumnValue INTO #RtrUDC FROM UdcHD A INNER JOIN UdcMaster B ON A.MasterId=B.MasterId AND A.MasterName='Retailer Master'
	INNER JOIN UdcDetails C ON A.MasterId= C.MasterId AND B.UdcMasterId=C.UdcMasterId --AND masterrecordid =445
	INNER JOIN Retailer R ON R.RtrId =C.MasterRecordId AND B.ColumnName IN ('State name','GSTIN','PAN Number','Retailer Type','Related Party','Composition')
	UPDATE A SET StateName =ISNULL(C.ColumnValue,'') FROM CS2CN_RetailerReupload_New A INNER JOIN Retailer B ON A.RtrCode=B.RtrCode
	INNER JOIN #RtrUDC C ON B.RtrId = C.MasterRecordid AND ColumnName ='State Name'
	UPDATE A SET GSTTIN = ISNULL(C.ColumnValue,'')  FROM CS2CN_RetailerReupload_New A INNER JOIN Retailer B ON A.RtrCode=B.RtrCode
	INNER JOIN #RtrUDC C ON B.RtrId = C.MasterRecordid AND ColumnName ='GSTIN'
	UPDATE A SET PanNumber = ISNULL(C.ColumnValue,'')  FROM CS2CN_RetailerReupload_New A INNER JOIN Retailer B ON A.RtrCode=B.RtrCode
	INNER JOIN #RtrUDC C ON B.RtrId = C.MasterRecordid AND ColumnName ='PAN Number'
	UPDATE A SET RetailerType = ISNULL(C.ColumnValue,'') FROM CS2CN_RetailerReupload_New A INNER JOIN Retailer B ON A.RtrCode=B.RtrCode
	INNER JOIN #RtrUDC C ON B.RtrId = C.MasterRecordid AND ColumnName ='Retailer Type'
	UPDATE A SET RelatedParty = ISNULL(C.ColumnValue,'')  FROM CS2CN_RetailerReupload_New A INNER JOIN Retailer B ON A.RtrCode=B.RtrCode
	INNER JOIN #RtrUDC C ON B.RtrId = C.MasterRecordid AND ColumnName ='Related Party'
	UPDATE A SET Composite = ISNULL(C.ColumnValue,'')  FROM CS2CN_RetailerReupload_New A INNER JOIN Retailer B ON A.RtrCode=B.RtrCode
	INNER JOIN #RtrUDC C ON B.RtrId = C.MasterRecordid AND ColumnName ='Composition'
	--Till Here
	
	--Added By S.Moorthi	
	SELECT R.RtrId,RC1.CtgCode AS ChannelCode,RC.CtgCode  AS GroupCode,RVC.ValueClassCode 
	INTO #TempCategory	
			FROM
			RetailerValueClass RVC	,
			RetailerCategory RC ,
			RetailerCategoryLevel RCL,
			RetailerCategory RC1,		
			RetailerApprovalStatus R
		WHERE			
			R.RtrClassId = RVC.RtrClassId
			AND	RVC.CtgMainId=RC.CtgMainId
			AND	RCL.CtgLevelId=RC.CtgLevelId
			AND	RC.CtgLinkId = RC1.CtgMainId
			AND ISNULL(R.RtrClassId,0)<>0
			AND R.Upload=0
			
	UPDATE ETL SET ETL.RtrCategoryCode=RVC.GroupCode,ETL.ClassCode=RVC.ValueClassCode
	FROM CS2CN_RetailerReupload_New ETL (NOLOCK) 
	INNER JOIN RetailerApprovalStatus RAS (NOLOCK) ON ETL.RtrId=RAS.RtrId 
	INNER JOIN #TempCategory RVC ON RVC.RtrId=ETL.RtrId and RVC.RtrId=RAS.RtrId
	WHERE ETL.UploadFlag='N' AND RAS.Upload=0
	
	UPDATE ETL SET ETL.GeoLevel=Geo.GeoLevelName,ETL.GeoLevelValue=Geo.GeoName
	FROM CS2CN_RetailerReupload_New ETL,
	(
		SELECT R.RtrId,ISNULL(GL.GeoLevelName,'City') AS GeoLevelName,
		ISNULL(G.GeoName,'') AS GeoName
		FROM			
		Retailer R  	
		INNER JOIN RetailerApprovalStatus RAS (NOLOCK) ON R.RtrId=RAS.RtrId 	
		LEFT OUTER JOIN Geography G ON R.GeoMainId=G.GeoMainId
		LEFT OUTER JOIN GeographyLevel GL ON GL.GeoLevelId=G.GeoLevelId
		WHERE ISNULL(RAS.Geoid,0)<>0  AND RAS.Upload=0
	) AS Geo
	WHERE ETL.RtrId=Geo.RtrId
	UPDATE CS2CN_RetailerReupload_New SET Mode = 'CR' WHERE ISNULL(Approved,'PENDING') IN ('APPROVED') AND Mode = 'New' AND UploadFlag='N'
	UPDATE CS2CN_RetailerReupload_New SET Mode = 'New' WHERE ISNULL(Approved,'PENDING') IN ('PENDING','REJECTED') AND UploadFlag='N'
	--Till Here
	UPDATE CS2CN_RetailerReupload_New SET ServerDate=@ServerDate
	UPDATE DayEndProcess SET NextUpDate = GETDATE(),ProcDate = GETDATE() WHERE ProcDesc = 'Retailer_NP'
	END
	IF NOT EXISTS (SELECT * FROM DayendProcess WHERE ProcDesc ='Retailer_NP')
	BEGIN
		INSERT INTO DayendProcess
		SELECT DATEADD(MONTH,-1,GETDATE()),19,GETDATE(),'Retailer_NP'
	END
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Fn_CheckSalesPending' AND TYPE='FN')
DROP FUNCTION Fn_CheckSalesPending
GO
CREATE  FUNCTION Fn_CheckSalesPending (@Pi_Year INT,@Pi_Month INT)
RETURNS VARCHAR(500) 
AS
/*******************************************************************************************************************
* PROCEDURE	: Fn_CheckSalesPending  
* PURPOSE	: TO CHECK PENDING DATA
* NOTES		:  
* CREATED	: S.MOHANA 
* DATE		: 18-11-2019
* PMS		: CRCRSTPAR0079  
**********************************************************************************************************************/
BEGIN
DECLARE @ValidateMsg AS VARCHAR(500)
DECLARE @MonthEndDt AS DATETIME
DECLARE @FromDate  DATETIME
DECLARE @ToDate	   DATETIME
SET @ValidateMsg = ''
	SELECT @FromDate= DATEADD(MONTH, (@Pi_Month)-1,DATEADD(YEAR, @Pi_Year - 1900, 0))
	SELECT @ToDate = DATEADD(dd, -1, DATEADD(MONTH, @Pi_Month,DATEADD(YEAR, @Pi_Year - 1900, 0)))

IF EXISTS (SELECT * FROM SalesInvoice A (NOLOCK) INNER JOIN SalesInvoiceProduct B ON A.SalId = B.SalId 
			WHERE SalInvDate BETWEEN @FromDate AND @ToDate AND Upload=0  )
BEGIN
	SET @ValidateMsg='Sales Data Not Uploaded to Console. Kindly do The Sync'
END

RETURN @ValidateMsg
END
GO
IF NOT EXISTS (SELECT  * FROM SYSOBJECTS WHERE NAME ='ETL_Prk_StockOut' AND Xtype ='U')
BEGIN
	CREATE TABLE ETL_Prk_StockOut
	(
		[DistCode] [varchar](50) NULL,
		[DocRefNo] [varchar](50) NULL,
		[LocationCode] [varchar](20) NULL,
		[ProductCode] [varchar](100) NULL,
		[BatchCode]	  [varchar](100) NULL,
		[StockType] [varchar](20) NULL,
		[Qty] [int] NULL,
		[TransType] [varchar](20) NULL,
		[DownLoadFlag] [varchar](1) NULL,
		[CreatedDate] [datetime] NULL
	)
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_StockAdjustmentProcess' AND TYPE='P')
DROP PROCEDURE Proc_StockAdjustmentProcess
GO
--exec Proc_StockAdjustmentProcess 0
CREATE PROCEDURE Proc_StockAdjustmentProcess 
(
	@Po_ErrNo INT OUTPUT
)
AS
/*********************************
* PROCEDURE		: Proc_Cn2Cs_StockAdjustmentProcess
* PURPOSE		: To validate the downloaded Adjustment Stock and Insert into G1
* CREATED		: Murugan.R
* CREATED DATE	: 11/06/2018
* MODIFIED
* DATE				AUTHOR     CR\BUG			USER STORY ID		DESCRIPTION
* 28-03-2020	    MOHANA		SR									Copied frim GCPL 
------------------------------------------------
*********************************/
SET NOCOUNT ON
BEGIN
	
	EXEC PROC_GR_BUILD_PH

	SELECT ProductCode PrdCCode,DistributorCode DistCode INTO #Temp  FROM TBL_GR_BUILD_PH A CROSS JOIN Distributor B  
	WHERE Brand_Code IN ('B10010130','B10080130','B10090118','B10090142','B10090182','B10100105','B10100115','B10100177','B10110130','B10120146',
	'B10180121','B10200111','B10230141','B10240141','B10310152','B10340113','B10340114','B10340130','B10350130','B10480130','B10540184','B10540185','B10540187')

	INSERT INTO ETL_Prk_StockOut (DistCode,DocRefNo,TransType,ProductCode,BatchCode,StockType,LocationCode,Qty,DownLoadFlag,CreatedDate)
	SELECT  Distcode, 'Document Reference' ,'Reduce' ,[Product Code],PrdbatCode,[System Stock Type],[Location], SUM([Qty]) [Qty],'D',GETDATE() 
	FROM (
	SELECT  Distcode,T.PRDCCODE [Product Code],PrdbatCode, 'SALEABLE' [System Stock Type],  LcnCode  [Location],(PRdBatLcnSih  - PrdBatLcnRessih ) [Qty]
	FROM #Temp T INNER JOIN Distributor D ON T.Distcode = D.DistributorCode 
	INNER JOIN Product P on P.PrdCCode = T.PRDCCODE
	INNER JOIN ProductBatch PB on P.PrdId = PB.PrdId 
	INNER JOIN ProductBatchLocation PBL on P.Prdid = PBL.PrdId and PB.PrdId = PBL.PrdId and PB.PrdBatId = PBL.PrdBatid
	INNER JOIN Location L oN PBL.Lcnid = L.Lcnid
	WHERE (PRdBatLcnSih  - PrdBatLcnRessih ) > 0
	UNION ALL
	SELECT  Distcode,T.PRDCCODE [Product Code],PrdbatCode,'UNSALEABLE' [System Stock Type], 
	LcnCode [Location],(PrdBatLcnUih  - PrdBatLcnResUih ) [Qty]
	FROM #Temp T INNER JOIN Distributor D ON T.Distcode = D.DistributorCode 
	INNER JOIN Product P on P.PrdCCode = T.PRDCCODE
	INNER JOIN ProductBatch PB on P.PrdId = PB.PrdId 
	INNER JOIN ProductBatchLocation PBL on P.Prdid = PBL.PrdId and PB.PrdId = PBL.PrdId and PB.PrdBatId = PBL.PrdBatid
	INNER JOIN Location L oN PBL.Lcnid = L.Lcnid
	WHERE (PrdBatLcnUih  - PrdBatLcnResUih ) > 0
	UNION ALL
	SELECT  Distcode,T.PRDCCODE [Product Code],PrdbatCode, 'Offer' [System Stock Type], LcnCode [Location],
	(PRdBatLcnFre  - PrdBatLcnResFre ) [Qty]
	FROM #Temp T INNER JOIN Distributor D ON T.Distcode = D.DistributorCode 
	INNER JOIN Product P on P.PrdCCode = T.PRDCCODE
	INNER JOIN ProductBatch PB on P.PrdId = PB.PrdId 
	INNER JOIN ProductBatchLocation PBL on P.Prdid = PBL.PrdId and PB.PrdId = PBL.PrdId and PB.PrdBatId = PBL.PrdBatid
	INNER JOIN Location L oN PBL.Lcnid = L.Lcnid
	WHERE (PRdBatLcnFre  - PrdBatLcnResFre ) > 0
	)R GROUP BY [Product Code],[System Stock Type],[Location],Distcode,PrdbatCode
	
	BEGIN TRY	
			SET @Po_ErrNo=0
			
			DECLARE @Pi_VocError AS INT
			DECLARE @StkNumber AS VARCHAR(50)
			DECLARE @CurrValue AS INT
			DECLARE @TranDate AS DATETIME
			DECLARE @DocRefNo AS VARCHAR(50)
			DECLARE @LcnId AS INT
			DECLARE @TransType Varchar(20)
			DECLARE @Prdid INT
			DECLARE @PrdbatId INT
			DECLARE @StockTypeId INT
			DECLARE @StockInHand INT
			DECLARE @UomId AS INT
			DECLARE @Po_StkPosting AS INT
			DECLARE @StckLcn AS INT
			DECLARE @StockType AS VARCHAR(50)
			DECLARE @StockOutError AS TINYINT
			DECLARE @VocPost AS TINYINT
			DECLARE @Prdccode AS VARCHAR(50)
			DECLARE @BatchCode AS VARCHAR(50)
			DECLARE @LocationCOde AS VARCHAR(50)
			DECLARE @ActStkInHand AS INT
			DECLARE @ReferenceExists AS TinyINT
			DECLARE @NextRefNumber AS Varchar(50)
			
			SET @TranDate=CONVERT(DATETIME,CONVERT(NVARCHAR(10),GETDATE(),121),121)
			
			CREATE TABLE #ETL_Prk_StockOut
			(
				[DocRefNo] Varchar(50),
				[LocationCode] Varchar(20),
				[ProductCode] Varchar(100),	
				[BatchCode]	Varchar(100),		
				[StockType] Varchar(20),
				[Qty]  INT,
				[TransType] Varchar(20),
				[SystemStockTypeId] INT	,
				CreateDate Datetime
			)
			
			CREATE TABLE #StockAdjusmentMaster
			(
				[Slno] INT IDENTITY(1,1),
				[DocRefNo] Varchar(50),
				[LocationCode] Varchar(20),
				[ProductCode] Varchar(75),				
				[StockType] Varchar(20),
				[Qty]  INT,
				BaseQty INT,
				[TransType] Varchar(20),
				[SystemStockTypeId] INT	,
				StockTypeId INT,
				Prdid INT,
				PrdbatId INT,
				LcnId INT,
				UomId INT,
				PriceId BIGINT,
				LspRate Numeric(18,6),
				CreateDate Datetime
				
			)
			 
			INSERT INTO #ETL_Prk_StockOut([DocRefNo],[LocationCode],[ProductCode],[BatchCode],[StockType],[Qty],[TransType],[SystemStockTypeId],CreateDate)
			SELECT DISTINCT A.[DocRefNo],A.[LocationCode],A.[ProductCode],BatchCode,A.[StockType],A.[Qty],A.[TransType],
			CASE UPPER(A.[StockType]) WHEN 'SALEABLE' THEN 1
							 WHEN 'UNSALEABLE' THEN 2
							 WHEN 'OFFER' THEN 3
				 ELSE 0 END,A.CreatedDate			 
			FROM ETL_Prk_StockOut A (NOLOCK)  
			WHERE A.DownLoadFlag='D'
		  
			INSERT INTO #StockAdjusmentMaster([DocRefNo],[LocationCode],[ProductCode],[StockType],
				[Qty],BaseQty,[TransType],[SystemStockTypeId],StockTypeId,Prdid,PrdbatId,LcnId,UomId,
				PriceId,LspRate,CreateDate) 
			SELECT 			
			DISTINCT [DocRefNo],[LocationCode],[ProductCode],[StockType],[Qty],
			Qty*ConversionFactor as BaseQty,
			[TransType],
			A.[SystemStockTypeId],G.StockTypeId,B.Prdid,C.PrdbatId,D.LcnId,E.UomId,0 as PriceId,0 as Rate,
			CreateDate
			FROM #ETL_Prk_StockOut A 
			INNER JOIN Product B (NOLOCK) ON A.ProductCode=B.Prdccode
			INNER JOIN ProductBatch C  ON C.PrdId=B.PrdId AND A.BatchCode = C.PrdBatCode 
			INNER JOIN Location D (NOLOCK) ON D.LcnCode=A.LocationCode
			INNER JOIN UomGroup E (NOLOCK) ON E.UomGroupId=B.UomGroupId 
			INNER JOIN UomMaster F (NOLOCK) ON F.UomId=E.UomId
			INNER JOIN StockType G (NOLOCK) ON G.LcnId=D.LcnId and A.[SystemStockTypeId]=G.SystemStockType
			WHERE BaseUom='Y'
			
			
			UPDATE C SET C.PriceId=B.PriceId,C.LspRate=B.PrdBatDetailValue  
			FROM ProductBatch A INNER JOIN ProductbatchDetails B ON A.PrdBatId=B.PrdbatId and A.DefaultPriceId=B.PriceId 
			INNER JOIN #StockAdjusmentMaster C ON C.Prdid=A.PrdId and C.PrdbatId=A.PrdBatId and C.PrdbatId=B.PrdbatId
			WHERE B.Slno=2
			
		
			BEGIN TRANSACTION	
			SET @NextRefNumber=''		
			DECLARE Cur_StkAdj CURSOR
			FOR SELECT DISTINCT [DocRefNo],LcnId,[TransType] FROM #StockAdjusmentMaster ORDER BY [TransType],LcnId,DocRefNo
			OPEN Cur_StkAdj
				FETCH NEXT FROM Cur_StkAdj INTO @DocRefNo,@LcnId,@TransType
				WHILE @@FETCH_STATUS=0
				BEGIN
						
						SET @Po_ErrNo=0
						SET @Pi_VocError=0
						SET @StkNumber=''
						SET @VocPost=0						
						SELECT @CurrValue= ISNULL(CurrValue,0)+1 FROM Counters (NOLOCK) WHERE TabName='STOCKMANAGEMENT' and FldName='STKMNGREFNO'
						
						SELECT @StkNumber=PreFix+CAST(SUBSTRING(CAST(CurYear as Varchar(10)),3,LEN(CurYear)) AS Varchar(10))+REPLICATE('0',CASE WHEN LEN(@CurrValue)>ZPad THEN (ZPad+1)-LEN(@CurrValue) ELSE (ZPad)-LEN(@CurrValue)END)+CAST(@CurrValue as Varchar(10)) 			
						FROM Counters (NOLOCK) WHERE TabName='STOCKMANAGEMENT' and FldName='STKMNGREFNO'
						
						IF EXISTS(SELECT 'X' FROM StockManagement (NOLOCK) WHERE StkMngRefNo=@StkNumber)
						BEGIN
							SET @Po_ErrNo=1			
							CLOSE Cur_StkAdj
							DEALLOCATE Cur_StkAdj
							RETURN
						END
						
						IF LEN(ISNULL(@StkNumber,''))>0
						BEGIN
							 
							DECLARE Cur_StkProduct CURSOR
							FOR SELECT Prdid,PrdbatId,StockTypeId,UomId,BaseQty,StockType,ProductCode,LocationCode 
							FROM #StockAdjusmentMaster  WHERE [DocRefNo]=@DocRefNo and LcnId=@LcnId
							AND TransType=@TransType	
							OPEN Cur_StkProduct
							FETCH NEXT FROM Cur_StkProduct INTO @Prdid,@PrdbatId,@StockTypeId,@UomId,@StockInHand,@StockType,@Prdccode,@LocationCode
							WHILE @@FETCH_STATUS=0
							BEGIN
								
								SET @Po_ErrNo=0
								SET @StckLcn=0
								SET @Po_StkPosting=0
								SET @StockOutError=0
								
												
								
								IF 	UPPER(@TransType)='REDUCE'
								BEGIN							
									
															
									IF NOT EXISTS
									(
										SELECT 'x' FROM ProductBatchLocation (NOLOCK) WHERE PrdId=@Prdid and PrdBatID=@PrdbatId and LcnId=@LcnId
										AND CASE UPPER(@StockType)	WHEN 'SALEABLE' THEN	(PrdBatLcnSih-PrdBatLcnRessih)											
																	WHEN 'UNSALEABLE' THEN  (PrdBatLcnUih-PrdBatLcnResUih)
																	WHEN 'OFFER' THEN (PrdBatLcnFre-PrdBatLcnResFre) END >=@StockInHand
									)
									BEGIN
										
											SELECT  @ActStkInHand=
											CASE UPPER(@StockType)	WHEN 'SALEABLE' THEN	(PrdBatLcnSih-PrdBatLcnRessih)											
																	WHEN 'UNSALEABLE' THEN  (PrdBatLcnUih-PrdBatLcnResUih)
																	WHEN 'OFFER' THEN (PrdBatLcnFre-PrdBatLcnResFre) END
											FROM ProductBatchLocation (NOLOCK) WHERE PrdId=@Prdid and PrdBatID=@PrdbatId and LcnId=@LcnId
											
											SET @ActStkInHand=ISNULL(@ActStkInHand,0)
											
											SET @StockInHand=@StockInHand-(@StockInHand-@ActStkInHand)
											
											SET @StockInHand=ISNULL(@StockInHand,0)
											
											IF @StockInHand<=0
											BEGIN						
												SET @StockOutError=1
											END
									
									END
								END
								
								IF @StockOutError=0
								BEGIN	
										
										
										IF @StkNumber<>@NextRefNumber
										BEGIN
											INSERT INTO StockManagement (StkMngRefNo,StkMngDate,LcnId,StkMgmtTypeId,RtrId,
											SpmId,DocRefNo,Remarks,DecPoints,OpenBal,Status,Availability,
											LastModBy,LastModDate,AuthId,AuthDate,ConfigValue,XMLUpload,VatGst)
											SELECT DISTINCT @StkNumber,@TranDate,@LcnId,
											CASE @TransType WHEN 'ADD' THEN 1
												WHEN 'REDUCE' THEN 2 END,0,0,@DocRefNo,
											    
											CASE @TransType WHEN 'ADD' THEN 'STOCK IN'
												WHEN 'REDUCE' THEN 'STOCK OUT' END,			    
											    
											2,0,1,1,1,@TranDate,99,@TranDate,0,0,'GST' 
										END
										INSERT INTO StockManagementProduct (STKMNGREFNO,PRDID,PRDBATID,STOCKTYPEID,UOMID1,QTY1,UOMID2,QTY2,TOTALQTY,RATE,AMOUNT,REASONID,PRICEID,AVAILABILITY,
										LASTMODBY,LASTMODDATE,AUTHID,AUTHDATE,TAXAMT,StkMgmtTypeId) 
										SELECT  @StkNumber,Prdid,PrdbatId,StockTypeId,UomId,@StockInHand as [Qty],0,0,@StockInHand as BaseQty,
										CASE UPPER(StockType) WHEN 'OFFER' THEN 0 ELSE LspRate END,
										CASE UPPER(StockType) WHEN 'OFFER' THEN 0 ELSE ROUND(LspRate*@StockInHand, 1) END,
										0,PriceId,1,1,@TranDate,99,@TranDate,0,
										CASE @TransType WHEN 'ADD' THEN 1
										                WHEN 'REDUCE' THEN 2 END	
										FROM #StockAdjusmentMaster   WHERE [DocRefNo]=@DocRefNo and LcnId=@LcnId
										AND TransType=@TransType and Prdid=@Prdid and PrdbatId =@PrdbatId and UomId=@UomId
										and UPPER(StockType)=UPPER(@StockType)							
											
										
										
										IF 	UPPER(@TransType)='REDUCE'	
										BEGIN
											
											IF UPPER(@StockType)='SALEABLE'
											BEGIN
												SET @VocPost=1
												EXEC Proc_UpdateStockLedger 13,1,@Prdid,@PrdbatId,@LcnId,@TranDate,@StockInHand,1,@Pi_ErrNo = @StckLcn OUTPUT
												EXEC Proc_UpdateProductBatchLocation 1,2,@Prdid,@PrdbatId,@LcnId,@TranDate,@StockInHand,1,@Pi_ErrNo = @Po_StkPosting OUTPUT	
											
												IF @StckLcn<>0 OR @Po_StkPosting <> 0
												BEGIN
													SET @Po_ErrNo=1
													--SELECT 'Saleable Stock Out Error'																								
													CLOSE Cur_StkProduct
													DEALLOCATE Cur_StkProduct
													CLOSE Cur_StkAdj
													DEALLOCATE Cur_StkAdj
													ROLLBACK TRANSACTION
													RETURN
												END
											END	
											IF UPPER(@StockType)='OFFER'
											BEGIN
													EXEC Proc_UpdateStockLedger 15,1,@Prdid,@PrdbatId,@LcnId,@TranDate,@StockInHand,1,@Pi_ErrNo = @StckLcn OUTPUT
													EXEC Proc_UpdateProductBatchLocation 3,2,@Prdid,@PrdbatId,@LcnId,@TranDate,@StockInHand,1,@Pi_ErrNo = @Po_StkPosting OUTPUT	
													IF @StckLcn<>0 OR @Po_StkPosting <> 0
													BEGIN
														--SELECT 'Offer Stock Out Error'	
														SET @Po_ErrNo=1																							
														CLOSE Cur_StkProduct
														DEALLOCATE Cur_StkProduct
														CLOSE Cur_StkAdj
														DEALLOCATE Cur_StkAdj
														ROLLBACK TRANSACTION
														RETURN
													END
											END
											
											IF UPPER(@StockType)='UNSALEABLE'
											BEGIN
													SET @VocPost=1
													EXEC Proc_UpdateStockLedger 14,1,@Prdid,@PrdbatId,@LcnId,@TranDate,@StockInHand,1,@Pi_ErrNo = @StckLcn OUTPUT
													EXEC Proc_UpdateProductBatchLocation 2,2,@Prdid,@PrdbatId,@LcnId,@TranDate,@StockInHand,1,@Pi_ErrNo = @Po_StkPosting OUTPUT	
													IF @StckLcn<>0 OR @Po_StkPosting <> 0
													BEGIN
														--SELECT 'Unsaleable Stock Out Error'	
														SET @Po_ErrNo=1																							
														CLOSE Cur_StkProduct
														DEALLOCATE Cur_StkProduct
														CLOSE Cur_StkAdj
														DEALLOCATE Cur_StkAdj
														ROLLBACK TRANSACTION
														RETURN
													END
											END
												
										END
									 
										SET @NextRefNumber=@StkNumber	
								END
							FETCH NEXT FROM Cur_StkProduct INTO @Prdid,@PrdbatId,@StockTypeId,@UomId,@StockInHand,@StockType,@Prdccode,@LocationCode
							END
							CLOSE Cur_StkProduct
							DEALLOCATE Cur_StkProduct 	
							
								IF (@VocPost=1 AND UPPER(@TransType)='REDUCE' AND @StockOutError=0)
								BEGIN
									EXEC Proc_VoucherPosting 13,0,@StkNumber,5,0,1,@TranDate,@Pi_VocError OUTPUT
										--SELECT 'T'
										--SELECT @Pi_VocError
										--SELECT @StkNumber
									IF @Pi_VocError<0
									BEGIN
										SET @VocPost=0
										SET @Po_ErrNo=1		
										--SELECT @Pi_VocError
										--SELECT 'Stock Out Voucher Error'							
										CLOSE Cur_StkAdj
										DEALLOCATE Cur_StkAdj										
										ROLLBACK TRANSACTION
										RETURN
									END		
								END
							 
								UPDATE COUNTERS SET CurrValue=@CurrValue
								WHERE TabName='STOCKMANAGEMENT' and FldName='STKMNGREFNO'
								SET @VocPost=0
								
								
						END
			FETCH NEXT FROM Cur_StkAdj INTO @DocRefNo,@LcnId,@TransType
			END
			CLOSE Cur_StkAdj
			DEALLOCATE Cur_StkAdj
			
			
			
			UPDATE A SET DownLoadFlag='Y' FROM ETL_Prk_StockOut A 
			INNER JOIN StockManagement B (NOLOCK) ON A.DocRefNo=B.DocRefNo
			AND StkMgmtTypeId= 2
			
			--INACTIVE PRODUCTS
			--INACTIVE PRODUCTS
			UPDATE A SET PrdStatus = 0 FROM PRODUCT A INNER JOIN TBL_GR_BUILD_PH B ON A.PrdId =B.PrdId 
			WHERE Brand_Code IN ('B10010130','B10080130','B10090118','B10090142','B10090182','B10100105','B10100115','B10100177','B10110130','B10120146',
			'B10180121','B10200111','B10230141','B10240141','B10310152','B10340113','B10340114','B10340130','B10350130','B10480130','B10540184','B10540185','B10540187')			
			
			COMMIT TRANSACTION
			
			RETURN
	END TRY
	BEGIN CATCH
		SET @Po_ErrNo=1																						
		
		CLOSE Cur_StkAdj
		DEALLOCATE Cur_StkAdj
		--CLOSE Cur_StkProduct
		--DEALLOCATE Cur_StkProduct
		ROLLBACK TRANSACTION
		--SELECT ERROR_MESSAGE()
	END CATCH			
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_UpdateRetailerClassShift' AND TYPE ='P')
DROP PROCEDURE Proc_UpdateRetailerClassShift
GO
/*
Begin Tran
--update salesinvoice Set Dlvsts=2 where salid=245167
--update RetailerValueClassMap set RtrValueclassid=80  Where Rtrid=8433
	Exec Proc_UpdateRetailerClassShift 2
	--select * From AutoRetailerClassShift --Where Rtrid=8462 Order by 1 desc 
	--select * From AutoRetailerClassShift --Where Rtrid in (8433,9250) Order by 1 desc 
Rollback Tran
*/
CREATE PROCEDURE Proc_UpdateRetailerClassShift
(
	@Pi_UsrId INT
)
AS
/************************************************************
* VIEW	: [Proc_UpdateRetailerClassShift]
* PURPOSE	: To Update Retailer Class Values
* CREATED BY	: MarySubashini.S
* CREATED DATE	: 19/04/2010
* NOTE		:
* MODIFIED
* DATE		 AUTHOR				 CR/BZ		USER STORY ID		DESCRIPTION					
-------------------------------------------------------------
26-Jun-19	Kalai                CR         CRCRSTPAR0072      1.Retailer class shift logic in Core stocky instead of system date , it should consider JC calendar only
															   2.Negative value should be updated to lowest class.
07-11-2019  M Lakshman           SR         ILCRSTPAR6597        Retailer class shift classification changes every quaters(Dec, Mar, Jun, Sep) month end completed then uploading to console.
*************************************************************/
BEGIN
SET NOCOUNT ON
	DECLARE @NoOfMonths AS INT 
	DECLARE @CmpId AS INT 
	DECLARE @GrossorNet AS INT 
	DECLARE @Return AS INT 
	DECLARE @FromDate AS DATETIME 
	DECLARE @ToDate AS DATETIME 
	DECLARE @RtrClassId AS INT
	DECLARE @OldRtrClassId AS INT
	DECLARE @NewCtgMainId AS INT 
	DECLARE @OldCtgMainId AS INT 
	DECLARE @NewCtgLevelId AS INT 
	DECLARE @OldCtgLevelId AS INT 
	DECLARE @RtrId AS INT 
	DECLARE @Amount AS INT 
	DECLARE @CtgMainId AS INT 
	DECLARE @MaxAmount AS NUMERIC(38,2)
	DECLARE @MinAmount AS NUMERIC(38,2)
	DECLARE @MaxRtrClassId AS INT
	DECLARE @MinRtrClassId AS INT
	DECLARE @JCEDate AS DATETIME
	DECLARE @JCLEDate AS DATETIME
	DECLARE @EffDate AS DATETIME  
	 
	SELECT @CmpId=CmpId FROM Company WHERE DefaultCompany=1
	----------------------- Added By Lakshman M Dated ON 17-11-2019 PMS ID: ILCRSTPAR6597 ------------------
	IF EXISTS (SELECT '*' FROM DayEndProcess WHERE ProcDesc ='UpdateRetailerClassShift' AND  DateDiff(dd,NextUpDate,Getdate())>=0)
	BEGIN
		UPDATE DayEndProcess SET ProcDate = CONVERT(VARCHAR(10),DATEADD(MM, 3, DATEADD(m, DATEDIFF(m, 0, getdate()), 0)),121),
		NextUpDate =  CONVERT(VARCHAR(10),DATEADD(MM, 3, DATEADD(m, DATEDIFF(m, 0, getdate()), 0)),121) WHERE ProcDesc ='UpdateRetailerClassShift'
	END

	IF EXISTS (SELECT '*',* FROM DayEndProcess WHERE ProcDesc ='UpdateRetailerClassShift' AND  DateDiff(dd,NextUpDate,Getdate())<0)
	BEGIN
		RETURN
	END
	--------------------- Till here ------------------------------------------------

	DECLARE @RetailerClassShift  TABLE
	(
		RtrId INT,
		SalesGrossAmount NUMERIC(38,6),
		SalesNetAmount NUMERIC(38,6),
		SalesRtnGrossAmount NUMERIC(38,6),
		SalesRtnNetAmount NUMERIC(38,6),
		RtrValueClassId INT,
		TurnOver NUMERIC(38,6),
		RtrClassId  INT ,
		CtgMainId INT ,
		CtgLevelId INT,
		NewClassId INT
	)
	DECLARE @RetailerNewClass TABLE
	(
		RtrId INT,
		Amount NUMERIC(38,6),
		CtgMainId INT
	)
	DECLARE @JcMonth AS INT
	SELECT @JcMonth=ISNULL(ConfigValue,0)  FROM Configuration WHERE ModuleName='RetailerClassShift' AND ModuleId='RCS5' AND Status=1
	IF @JcMonth=1
	BEGIN
		--IF EXISTS(SELECT BasedOnLastMonth FROM RetailerAutoClass (NOLOCK))
		--BEGIN
		--	SELECT @NoOfMonths=-1*ISNULL(BasedOnLastMonth,3) FROM RetailerAutoClass (NOLOCK)
		--	IF @NoOfMonths IS NULL OR @NoOfMonths=''
		--	BEGIN
		--		SET @NoOfMonths=-3
		--	END
		--END
		--ELSE
		IF NOT EXISTS (SELECT *  FROM Configuration WHERE ModuleName='RetailerClassShift' AND ModuleId='RCS2' AND Status=1)
		BEGIN
			SET @NoOfMonths=-3
		END
		ELSE
		BEGIN
			SELECT @NoOfMonths=(-1)*CAST(ConfigValue AS INT) FROM Configuration WHERE ModuleName='RetailerClassShift' AND ModuleId='RCS2'
		END
	END
	ELSE
	BEGIN
		IF NOT EXISTS (SELECT *  FROM Configuration WHERE ModuleName='RetailerClassShift' AND ModuleId='RCS2' AND Status=1)
		BEGIN
			SET @NoOfMonths=-3
		END
		ELSE
		BEGIN
			SELECT @NoOfMonths=(-1)*CAST(ConfigValue AS INT) FROM Configuration WHERE ModuleName='RetailerClassShift' AND ModuleId='RCS2'
		END
	END
	
	SET @FromDate='2011-06-18' --CONVERT(NVARCHAR(10),GETDATE(),121)
	--Added by Mohanakrishna A.B ICRSTJNJ4218
	SELECT   @JCEDate=CurMonEndDate,@JCLEDate=LastMonEndDate   FROM FN_ReturnJcDetails() 
	----SET @EffDate= (SELECT Distinct EffectiveDate  FROM RetailerAutoClass (NOLOCK))
	
	----IF CONVERT(NVARCHAR(10),(@EffDate),121)= CONVERT(NVARCHAR(10),GETDATE(),121)
	----	BEGIN
	----		SET @FromDate=CONVERT(NVARCHAR(10),DATEADD(M,@NoOfMonths,@JCEDate),121)
	----		SET @ToDate=CONVERT(NVARCHAR(10),@JCEDate,121)
	----	END
	----ELSE
	----	BEGIN
			SET @FromDate=CONVERT(NVARCHAR(10),DATEADD(M,@NoOfMonths,@JCLEDate),121)
			SET @ToDate=CONVERT(NVARCHAR(10),@JCLEDate,121)
		--END
	
	--SET @FromDate=CONVERT(NVARCHAR(10),DATEADD(M,@NoOfMonths,@JCEDate),121) Commented by Mohanakrishna A.B
	--SET @ToDate=CONVERT(NVARCHAR(10),GETDATE(),121) Commented by Mohanakrishna A.B
	 
	-- SELECT   CurMonEndDate,*  FROM FN_ReturnJcDetails() 
	
	-- select @FromDate,@ToDate,@NoOfMonths
	--Till END
	
	
	EXEC Proc_ReturnSalesProductTaxPercentage @FromDate,@ToDate 
	 
	 
	IF  EXISTS (SELECT *  FROM Configuration WHERE ModuleName='RetailerClassShift' AND ModuleId='RCS3' AND Status=1)
	BEGIN
		SET @GrossorNet=1
	END
	ELSE
	BEGIN
		SELECT @GrossorNet=ConfigValue FROM Configuration WHERE ModuleName='RetailerClassShift' AND ModuleId='RCS3'
	END 
	IF NOT EXISTS (SELECT *  FROM Configuration WHERE ModuleName='RetailerClassShift' AND ModuleId='RCS4' AND Status=1)
	BEGIN
		SET @Return=0
	END
	ELSE
	BEGIN
		SET @Return=1
	END
	
	CREATE TABLE #TempCategory
	(
		CtgMainId	INT
	)
	
	--IF EXISTS(SELECT * FROM RetailerAutoClass (NOLOCK))
	--BEGIN
	--	INSERT INTO #TempCategory
	--	SELECT DISTINCT CtgMainId FROM RetailerCategory A,
	--	(SELECT A.CtgLinkCode FROM RetailerCategory A (NOLOCK)
	--	INNER JOIN RetailerAutoClass B (NOLOCK) ON A.CtgLevelId=B.CtgLevelId AND A.CtgMainId=B.CtgMainId) B 
	--	WHERE A.CtgLinkCode LIKE B.CtgLinkCode+'%' and A.CtgLevelId<>1
	--END
	--ELSE
	--BEGIN
		INSERT INTO #TempCategory
		SELECT DISTINCT CtgMainId FROM RetailerCategory A
		WHERE A.CtgLevelId<>1
	--END
	
	INSERT INTO @RetailerClassShift (RtrId,SalesGrossAmount,SalesNetAmount,SalesRtnGrossAmount,
		SalesRtnNetAmount,RtrValueClassId,TurnOver,RtrClassId,CtgMainId,CtgLevelId,NewClassId)
			
	SELECT RtrId,SUM(GrossAmount),SUM(NetAmount),SUM(ReturnGrossAmt),SUM(ReturnNetAmt),
		RtrValueClassId,Turnover,RtrClassId,CtgMainId,CtgLevelId,NewClassId
	FROM (
	--SELECT SI.RtrId,SUM(SI.SalGrossAmount) AS GrossAmount,SUM(SI.SalNetAmt) AS NetAmount,0 AS ReturnGrossAmt,0 AS ReturnNetAmt, Commented by Mohanakrishna A.B
	SELECT SI.RtrId,SUM(SP.PrdGrossAmount+SP.PrdTaxAmount) AS GrossAmount,SUM ((SP.PrdGrossAmount)-(SP.PrdSplDiscAmount+SP.PrdSchDiscAmount+SP.PrdDBDiscAmount+SP.PrdCDAmount)+(SP.PrdTaxAmount)) AS NetAmount,---ICRSTJNJ4218
	0 AS ReturnGrossAmt,0 AS ReturnNetAmt,
	RVC.RtrValueClassId,RC.Turnover,RC.RtrClassId,
	RCC.CtgMainId,RCL.CtgLevelId,0 AS NewClassId FROM SalesInvoice SI (Nolock)
	LEFT OUTER JOIN Retailer RTR ON RTR.RtrId = SI.RTRId 
	LEFT OUTER JOIN  RetailerValueClassmap RVC ON RVC.RtrId = SI.RtrId 
	INNER JOIN SalesInvoiceProduct SP (Nolock) ON SI.SalId =SP.SalId 
	INNER JOIN RetailerValueClass RC ON RVC.RtrValueClassId = RC.RtrClassId and RC.CmpId= @CmpId
	INNER JOIN RetailerCategory RCC ON RCC.CtgMainId = RC.CtgMainId
	INNER JOIN RetailerCategoryLevel RCL ON RCL.CtgLevelId = RCC.CtgLevelId and RCL.CmpId=@CmpId
	INNER JOIN #TempCategory TC ON TC.CtgMainId=RCC.CtgMainId 
	WHERE SI.OrderDate BETWEEN @FromDate AND @ToDate AND SI.DlvSts IN (4,5)
	GROUP BY SI.RtrId,RVC.RtrValueClassId,RCC.CtgMainId,RCL.CtgLevelId,RC.Turnover,RC.RtrClassId
	UNION 
	--SELECT SI.RtrId,0 AS GrossAmount,0  AS NetAmount,SUM(SI.RtnGrossAmt) AS ReturnGrossAmt,SUM(SI.RtnNetAmt)AS ReturnNetAmt, Commented by Mohanakrishna A.B
	SELECT SI.RtrId,0 AS GrossAmount,0  AS NetAmount,SUM(RP.PrdGrossAmt+PrdTaxAmt) AS ReturnGrossAmt,SUM((RP.PrdGrossAmt)- (RP.PrdSplDisAmt+RP.PrdSplDisAmt+RP.PrdSchDisAmt+RP.PrdCDDisAmt+RP.PrdDBDisAmt)+(PrdTaxAmt))AS ReturnNetAmt,---ICRSTJNJ4218
	RVC.RtrValueClassId,RC.TurnOver,RC.RtrClassId,
	RCC.CtgMainId,RCL.CtgLevelId,0 FROM ReturnHeader SI 
	LEFT OUTER JOIN Retailer RTR ON RTR.RtrId = SI.RTRId 
	LEFT OUTER JOIN  RetailerValueClassmap RVC ON RVC.RtrId = SI.RtrId 
	INNER JOIN ReturnProduct RP ON SI.ReturnID =RP.ReturnID 
	INNER JOIN RetailerValueClass RC ON RVC.RtrValueClassId = RC.RtrClassId and RC.CmpId= @CmpId
	INNER JOIN RetailerCategory RCC ON RCC.CtgMainId = RC.CtgMainId
	INNER JOIN RetailerCategoryLevel RCL ON RCL.CtgLevelId = RCC.CtgLevelId and RCL.CmpId=@CmpId
	INNER JOIN #TempCategory TC ON TC.CtgMainId=RCC.CtgMainId 
	WHERE SI.ReturnDate BETWEEN @FromDate AND @ToDate AND SI.ReturnType=2 AND SI.Status=0
	GROUP BY SI.RtrId,RVC.RtrValueClassId,RCC.CtgMainId,RCL.CtgLevelId,RC.Turnover,RC.RtrClassId) A
	GROUP BY  RtrId,RtrValueClassId,Turnover,RtrClassId,CtgMainId,CtgLevelId,NewClassId
	
	--select * from @RetailerClassShift -- Where Rtrid=8462
	--select * from @RetailerClassShift --Where Rtrid=8433	
	
	IF @GrossorNet=1 
		BEGIN
			IF @Return=1
			BEGIN 
				INSERT INTO @RetailerNewClass (RtrId,Amount,CtgMainId)
				SELECT RtrId,(CAST((SalesGrossAmount-SalesRtnGrossAmount) AS NUMERIC(38,6)) / CAST (ABS(@NoOfMonths) AS  NUMERIC(38,6))) AS Amount ,CtgMainId FROM @RetailerClassShift 
			END 
			ELSE
			BEGIN 
				INSERT INTO @RetailerNewClass (RtrId,Amount,CtgMainId)
				SELECT RtrId, (CAST(SalesGrossAmount AS NUMERIC(38,6)) / CAST (ABS(@NoOfMonths) AS  NUMERIC(38,6))) AS Amount,CtgMainId FROM @RetailerClassShift 
				
				
			END 
		END
	ELSE
		BEGIN
			IF @Return=1
			BEGIN 
				INSERT INTO @RetailerNewClass (RtrId,Amount,CtgMainId)
				SELECT RtrId,(CAST((SalesNetAmount-SalesRtnNetAmount) AS NUMERIC(38,6)) / CAST (ABS(@NoOfMonths) AS  NUMERIC(38,6))) AS Amount,CtgMainId FROM @RetailerClassShift 
			END 
			ELSE
			BEGIN 
				INSERT INTO @RetailerNewClass (RtrId,Amount,CtgMainId)
				SELECT RtrId,(CAST(SalesNetAmount AS NUMERIC(38,6)) / CAST (ABS(@NoOfMonths) AS  NUMERIC(38,6))) AS Amount,CtgMainId FROM @RetailerClassShift 
			END 
		END 
		
		select * from @RetailerNewClass --Where Rtrid=8433
	DECLARE @MainRtrDt TABLE
	(
		Mode		INT,
		RtrId		INT,
		CtgMainId	INT,
		RtrClassId	INT,
		TurnOver	NUMERIC(18,6),
		Amount		NUMERIC(18,6)
	)
	DELETE FROM AutoRetailerClassShift WHERE ShiftDate=CONVERT(NVARCHAR(10),GETDATE(),121)
	DECLARE Cur_RetailerSlassShift CURSOR
          FOR SELECT RtrId,CtgMainId,Amount FROM @RetailerNewClass
    OPEN Cur_RetailerSlassShift
	FETCH NEXT FROM Cur_RetailerSlassShift INTO @RtrId,@CtgMainId,@Amount
	WHILE @@FETCH_STATUS=0
    BEGIN
   --- Added  By Mohanakrishna A.B ICRSTJNJ4218
		IF @Amount<0 
		BEGIN
			INSERT INTO @MainRtrDt
			SELECT 1,@RtrId,@CtgMainId,RtrClassId,TurnOver,@Amount FROM RetailerValueClass WHERE CtgMainId=@CtgMainId
				AND TurnOver IN
			 (SELECT MIN(TurnOver) FROM RetailerValueClass WHERE  CtgMainId=@CtgMainId AND 
				TurnOver > @Amount AND  CmpId = @CmpId) AND CmpId=@CmpId
		END
		ELSE
		BEGIN
			INSERT INTO @MainRtrDt
			SELECT 1,@RtrId,@CtgMainId,RtrClassId,TurnOver,@Amount FROM RetailerValueClass WHERE CtgMainId=@CtgMainId
				AND TurnOver IN
			 (SELECT MAX(TurnOver) FROM RetailerValueClass WHERE  CtgMainId=@CtgMainId AND 
				TurnOver > @Amount AND  CmpId = @CmpId) AND CmpId=@CmpId
		END
	---	Till End
	
   /* Commented By Mohanakrishna A.B
		INSERT INTO @MainRtrDt
		SELECT 1,@RtrId,@CtgMainId,RtrClassId,TurnOver,@Amount FROM RetailerValueClass WHERE CtgMainId=@CtgMainId
			AND TurnOver IN
		 (SELECT MAX(TurnOver) FROM RetailerValueClass WHERE  CtgMainId=@CtgMainId AND 
			TurnOver > @Amount AND  CmpId = @CmpId) AND CmpId=@CmpId
	*/	
		INSERT INTO @MainRtrDt
		SELECT 2,@RtrId,@CtgMainId,RtrClassId,TurnOver,@Amount FROM RetailerValueClass WHERE CtgMainId=@CtgMainId
			AND TurnOver IN
		 (SELECT MAX(TurnOver) FROM RetailerValueClass WHERE  CtgMainId=@CtgMainId AND 
			TurnOver < @Amount AND  CmpId = @CmpId) AND CmpId=@CmpId
			
		INSERT INTO @MainRtrDt
		SELECT 3,@RtrId,@CtgMainId,A.RtrClassId,A.TurnOver,@Amount FROM RetailerValueClass A 
		INNER JOIN RetailerValueClassMap B On A.RtrClassId=B.RtrValueClassId WHERE A.CtgMainId=@CtgMainId
		AND B.RtrId=@RtrId
	
    FETCH NEXT FROM Cur_RetailerSlassShift INTO  @RtrId,@CtgMainId,@Amount
    END
    CLOSE Cur_RetailerSlassShift
    DEALLOCATE Cur_RetailerSlassShift
		IF EXISTS (SELECT * FROM @MainRtrDt)
		BEGIN
			IF EXISTS (SELECT RtrValueClassId FROM RetailerValueClassMap WHERE RtrId=@RtrId )
			BEGIN
				UPDATE A SET A.RtrValueClassId=B.RtrClassId FROM RetailerValueClassMap A
				INNER JOIN 
						(SELECT A.RtrId,B.RtrClassId FROM @MainRtrDt B INNER JOIN 
							(SELECT DISTINCT Max(Mode) As Mode,RtrId FROM @MainRtrDt WHERE Mode<3 GROUP BY RtrId) A
							ON A.RtrId=B.RtrId AND A.Mode=B.Mode) B ON A.RtrId=B.RtrId
					
					select 'aa',B.RtrClassId,a.* FROM RetailerValueClassMap A
				INNER JOIN 
						(SELECT A.RtrId,B.RtrClassId FROM @MainRtrDt B INNER JOIN 
							(SELECT DISTINCT Max(Mode) As Mode,RtrId FROM @MainRtrDt WHERE Mode<3 GROUP BY RtrId) A
							ON A.RtrId=B.RtrId AND A.Mode=B.Mode) B ON A.RtrId=B.RtrId
							
				--INSERT INTO RetailerClassUpdateStatus
				--SELECT GETDATE(),@Pi_UsrId
				
				INSERT INTO AutoRetailerClassShift (ShiftDate,RtrId,OldRtrClassId,NewRtrClassId)
				SELECT CONVERT(NVARCHAR(10),GETDATE(),121),A.RtrId,A.RtrClassId,B.RtrClassId
				FROM (SELECT DISTINCT RtrId,RtrClassId FROM @MainRtrDt WHERE Mode=3) A INNER JOIN
				(SELECT A.RtrId,B.RtrClassId FROM @MainRtrDt B INNER JOIN 
				(SELECT DISTINCT Max(Mode) As Mode,RtrId FROM @MainRtrDt WHERE Mode<3 GROUP BY RtrId) A
				ON A.RtrId=B.RtrId AND A.Mode=B.Mode) B ON A.RtrId=B.RtrId
				INSERT INTO Track_RtrCategoryandClassChange
				SELECT -1000,A.RtrId,C.CtgLevelId,A.CtgMainId,A.RtrClassId,C.CtgLevelId,A.CtgMainId,B.RtrClassId,
				CONVERT(NVARCHAR(10),GETDATE(),121),CONVERT(NVARCHAR(23),GETDATE(),121),2 FROM 
				(SELECT DISTINCT RtrId,CtgMainId,RtrClassId FROM @MainRtrDt WHERE Mode=3) A INNER JOIN
				(SELECT A.RtrId,B.RtrClassId FROM @MainRtrDt B INNER JOIN 
				(SELECT DISTINCT Max(Mode) As Mode,RtrId FROM @MainRtrDt WHERE Mode<3 GROUP BY RtrId) A
					ON A.RtrId=B.RtrId AND A.Mode=B.Mode) B ON A.RtrId=B.RtrId
				INNER JOIN RetailerCategory C ON A.CtgMainId=C.CtgMainId
				WHERE A.RtrClassId<>B.RtrClassId

			    UPDATE Retailer SET Upload='N' WHERE RtrId IN (SELECT RtrId FROM AutoRetailerClassShift WHERE ShiftDate=CONVERT(NVARCHAR(10),GETDATE(),121))

			END
		END
RETURN
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Fn_GetCirDetails' AND TYPE='FN')
DROP FUNCTION Fn_GetCirDetails
GO
 --SELECT dbo.Fn_GetCirDetails(2,1)
CREATE FUNCTION Fn_GetCirDetails(@Type INT,@UsrId INT)
RETURNS   VARCHAR(100)	 
AS
/*******************************************************************************************************************
* PROCEDURE	: Fn_GetCirDetails  
* PURPOSE	: TO VALIDATE CIRCULAR DETAILS WHILE SAVING THE CLAIM
* NOTES		:  
* CREATED	: S.MOHANA 
* DATE		: 14-11-2019
* PMS		: CRCRSTPAR0079  
**********************************************************************************************************************/
BEGIN
DECLARE @Msg AS VARCHAR(MAX)	
SET @Msg = ''
IF @Type = 1 
BEGIN
	IF EXISTS (SELECT '*' FROM TempSamplingClaimDetails WHERE ISNULL(CircularNo,'') = '' AND UsrId = @Usrid)
	BEGIN 
		SET @Msg = 'Circular No Not available For SAMPLING CLAIM'	
	END
	  
	IF EXISTS (SELECT '*' FROM TempTradeSchemeClaimDetails  WHERE ISNULL(CirNo,'') = '' AND UsrId = @Usrid)
	BEGIN 
		If @Msg = '' 
		BEGIN
			SET @Msg = 'Circular No Not available For Trade Scheme'	
		END
		ELSE
		BEGIN
			SET @Msg = @Msg+ CHAR(13) + 'TRADE SCHEME CLAIM'	
		END
	END
	 
	IF EXISTS (SELECT '*' FROM TempInsTargetClaimDetails  WHERE ISNULL(CirNo,'') = '' AND UsrId = @Usrid)
	BEGIN 
		If @Msg = '' 
		BEGIN
			SET @Msg = 'Circular No Not available For Institutional Target'	
		END
		ELSE
		BEGIN
			SET @Msg = @Msg+ CHAR(13)  + 'INSTITUTIONAL TARGET CLAIM'	
		END
	END
	IF EXISTS (SELECT '*' FROM TempTOTClaimDetails  WHERE ISNULL(CirNo,'') = '' AND UsrId = @Usrid)
	BEGIN 
		If @Msg = '' 
		BEGIN
			SET @Msg = 'Circular No Not available For TOT CLAIM'	
		END
		ELSE
		BEGIN
			SET @Msg = @Msg+ CHAR(13) + 'TOT'	
		END
	END
		IF EXISTS (SELECT '*' FROM TempManualClaimDetails  WHERE ISNULL(CirNo,'') = '' AND UsrId = @Usrid)
	BEGIN 
		If @Msg = '' 
		BEGIN
			SET @Msg = 'Circular No Not available For MANUAL CLAIM'	
		END
		ELSE
		BEGIN
			SET @Msg = @Msg+ CHAR(13)+ 'MANUAL CLAIM'	
		END
	END
		IF EXISTS (SELECT '*' FROM TempDistIncClaimDetails  WHERE ISNULL(CirNo,'') = '' AND UsrId = @Usrid)
	BEGIN 
		If @Msg = '' 
		BEGIN
			SET @Msg = 'Circular No Not available For DISTRIBUTOR INCENTIVE CLAIM'	
		END
		ELSE
		BEGIN
			SET @Msg = @Msg + CHAR(13)+ 'DISTRIBUTOR INCENTIVE CLAIM'	
		END
	END
	IF EXISTS (SELECT '*' FROM TempSMIncClaimDetails  WHERE ISNULL(CirNo,'') = '' AND UsrId = @Usrid)
	BEGIN 
		If @Msg = '' 
		BEGIN
			SET @Msg = 'Circular No Not available For SALESMAN INCENTIVE CLAIM'	
		END
		ELSE
		BEGIN
			SET @Msg = @Msg + CHAR(13) + 'SALESMAN INCENTIVE CLAIM'	
		END 
	END
END

If @Type = 2 
BEGIN
	IF EXISTS (SELECT * FROM TempTradeSchemeClaimDetails A WHERE NOT EXISTS 
				(SELECT SCHID FROM TradeSchemeFactors B WHERE A.Schid =B.SCHID AND A.Lst2Avg =B.L2MPrimarySales AND A.Wk4PriVal =B.L4WPrimarySales )
				AND UsrId = @Usrid )
	BEGIN
		SET @Msg = ''
		SET @Msg = 'Last2MonthPrimary & 4th Week Primary Not downloaded ' + CHAR(13) + 'from Console For Loaded Schemes'	
	END

	IF @Msg =''
	BEGIN
		IF EXISTS (SELECT * FROM DN_Claim_Scheme A INNER JOIN SchemeMaster B ON A.Schid = B.SchId AND Claimable = 1 WHERE UsrId =@Usrid)
		BEGIN
			IF NOT EXISTS (SELECT * FROM TempTradeSchemeClaimDetails A WHERE UsrId =@Usrid)
			BEGIN
			SET @Msg = ''
			SET @Msg = 'Trade Scheme Not Loaded Properly' + CHAR(13) + 'Kindy Reload The Debit Note Top Sheet Again'
			END
		END
	END
	
END
RETURN (@Msg)
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE name ='Proc_Export_CS2WS_SalesInvoiceHeader' AND XTYPE='P')
DROP PROCEDURE Proc_Export_CS2WS_SalesInvoiceHeader
GO
---exec Proc_Export_CS2WS_SalesInvoiceHeader '1'
CREATE PROCEDURE Proc_Export_CS2WS_SalesInvoiceHeader
(
	@SalRpCode varchar(50)
)
AS
/*******************************************************************************************
* PROCEDURE		: Proc_Export_CS2WS_SalesInvoiceHeader
* PURPOSE		: To Export Invoice Header Details to the PDA Intermediate Database
* CREATED		: S.Moorthi
* CREATED DATE	: 23/08/2018
* MODIFIED		:
* DATE      AUTHOR     DESCRIPTION
*****************************************************************************************************
* DATE         AUTHOR       CR/BZ	   USER STORY ID   DESCRIPTION                         
*****************************************************************************************************
  23/08/2018   S.Moorthi    CR         CRCRSTPAR0020   Parle SFA integration to Vxceed server(P
********************************************************************************************/
BEGIN
	DECLARE @DistCode AS NVARCHAR(100)
	DECLARE @FromDate AS DateTime
	DECLARE @ToDate	AS DateTime
	DECLARE @Days AS int
		
	SELECT @DistCode=DistributorCode FROM Distributor (NOLOCK)
	
	SELECT pListId Slno,pListValue Smid INTO #SMLIST1 from DBo.fn_getList(@SalRpCode)
	
	IF @DistCode <> ''
    BEGIN
		DELETE FROM Export_CS2WS_SalesInvoiceHeader WHERE UploadFlag='Y'
		DELETE FROM Export_CS2WS_SalesInvoiceDetails WHERE UploadFlag='Y'
		
		--Sales Header
		INSERT INTO Export_CS2WS_SalesInvoiceHeader (TenantCode,LocationCode,TransactionType,InvoiceNo,HHTOrderNo,
		DocumentDate,RouteCode,SalesmanCode,CustomerCode,DivisionCode,TotalQuantity,
		SalesAmount,ReturnAmount,DocumentAmount,CurrencyCode,UploadFlag)
		(SELECT @DistCode,@DistCode,2,SalinvNo,LEFT(SalInvRef,20),SalinvDate,SMCode,SMCode,CmpRtrCode,'D1',SUM(BaseQty), --CmpRtrCode OR RtrCode
		SalNetAmt,0,SalNetAmt,'INR','N'  ---SalGrossAmount
		FROM Salesinvoice A 
		INNER JOIN SalesinvoiceProduct B ON A.Salid =B.SalId 
		INNER JOIN ROUTEMASTER C ON A.RMID =C.RMID 
		INNER JOIN Salesman D ON A.Smid =D.Smid 
		INNER JOIN #SMLIST1 SM ON SM.Smid=D.SMId AND  SM.Smid=A.Smid
		INNER JOIN RETAILER E ON A.RTRid =E.Rtrid 
		WHERE SALINVDATE>='2018-09-01' AND Dlvsts in(4,5) AND 
		NOT EXISTS (SELECT * FROM WSMasterExportUploadTrack X WHERE X.MasterCode=A.SalinvNO and ProcessName='Sales Invoice')
		GROUP BY SalinvNo,SalInvRef,SalinvDate,SMCode,CmpRtrCode,SalGrossAmount,SalTaxAmount,totalDeduction,SalRoundOffAmt,SalNetAmt
		UNION ALL
		SELECT @DistCode,@DistCode,3,ReturnCode,'',ReturnDate,SMCode,SMCode,CmpRtrCode,'D1',SUM(BaseQty),0,
		RtnNetAmt,RtnNetAmt,'INR','N' ---RtnGrossAmt
		FROM ReturnHeader A 
		INNER JOIN ReturnProduct B ON A.Returnid =B.Returnid  
		INNER JOIN ROUTEMASTER C ON A.RMID =C.RMID 
		INNER JOIN Salesman D ON A.Smid =D.Smid 
		INNER JOIN #SMLIST1 SM ON SM.Smid=D.SMId AND  SM.Smid=A.Smid
		INNER JOIN RETAILER E ON A.RTRid =E.Rtrid 
		WHERE ReturnDate >='2018-09-01' AND A.Status =0 
		AND NOT EXISTS (SELECT * FROM WSMasterExportUploadTrack X WHERE X.MasterCode=A.ReturnCode and ProcessName='Sales Return')
		GROUP BY ReturnCode,ReturnDate,SMCode,CmpRtrCode,RtnGrossAmt,RtnTaxAmt, RtnRoundOffAmt,RtnNetAmt
		)	
		
		--- Sales Details   ----
		INSERT INTO Export_CS2WS_SalesInvoiceDetails (TenantCode,LocationCode,InvoiceNo,
		SequenceNumber,ItemTransactionType,	ItemCode,UnitsOfMeasure,ItemTypeCode,ItemQuantity,ItemPrice,
		DiscountAmount,TaxAmount,NetUnitPrice,NetLineAmount,IsFreeGood,UploadFlag)
		(SELECT @DistCode,@DistCode,SalinvNo,Case WHEN B.Slno < 0 THEN B.Slno*-1 ELSE B.Slno END as Slno,1,PrdCCode,UM.UomCode,1,BaseQty,PrdUnitSelRate,
		--SUM(PrdSplDiscAmount+PrdSchDiscAmount+PrdDBDiscAmount+PrdCDAmount),PrdtaxAmount,SUM(PrdActualNetAmount/Baseqty),
		SUM(PrdSplDiscAmount+PrdSchDiscAmount+PrdDBDiscAmount+PrdCDAmount)/BaseQty ,PrdtaxAmount/BaseQty,SUM(PrdActualNetAmount/Baseqty), -- chenaged By Venkat. M PMS no : 
		PrdNetAmount,0,'N'
		FROM Salesinvoice A 
		INNER JOIN SalesinvoiceProduct B ON A.Salid =B.SalId 
		INNER JOIN Salesman S ON A.SMId =S.SMId 
		INNER JOIN #SMLIST1 SM ON SM.Smid=S.SMId AND  SM.Smid=A.Smid
		INNER JOIN PRODUCT C ON B.PRDID =C.PRDID 
		INNER JOIN UomGroup D ON C.UomGroupid =D.UomGroupid AND D.BaseUom='Y'
		INNER JOIN UomMaster UM ON UM.UomId=D.UomId  		
		WHERE SALINVDATE>='2018-09-01' AND Dlvsts in(4,5)
		AND NOT EXISTS (SELECT * FROM WSMasterExportUploadTrack X WHERE X.MasterCode=A.SalinvNO and ProcessName='Sales Invoice')
		GROUP BY SalinvNo,B.Slno,PrdCCode,UM.UomCode,BaseQty,PrdUnitSelRate,PrdtaxAmount,PrdNetAmount
		UNION ALL
		SELECT @DistCode,@DistCode,SalinvNo,1,1,PrdCCode,UM.UomCode,1,freeQty,0,0,0,0,0,1,'N' ----- free qty 
		FROM Salesinvoice A INNER JOIN SalesInvoiceSchemeDtFreePrd B ON A.Salid =B.SalId 
		INNER JOIN Salesman S ON A.SMId =S.SMId 
		INNER JOIN PRODUCT C ON B.FreePrdId =C.PRDID 
		INNER JOIN UomGroup D ON C.UomGroupid =D.UomGroupid AND D.BaseUom='Y'
		INNER JOIN UomMaster UM ON UM.UomId=D.UomId  
		WHERE SALINVDATE>='2018-09-01' AND Dlvsts in(4,5)
		AND NOT EXISTS (SELECT * FROM WSMasterExportUploadTrack X WHERE X.MasterCode=A.SalinvNO and ProcessName='Sales Invoice')
		UNION ALL
		SELECT @DistCode,@DistCode,SalinvNo,1,1,PrdCCode,UM.UomCode,1,B.SalManFreeQty,0,0,0,0,0,1,'N' ---- freee
		FROM Salesinvoice A INNER JOIN SalesInvoiceProduct B ON A.Salid =B.SalId 
		INNER JOIN Salesman S ON A.SMId =S.SMId 
		INNER JOIN PRODUCT C ON B.PrdId =C.PRDID 
		INNER JOIN UomGroup D ON C.UomGroupid =D.UomGroupid  AND D.BaseUom='Y'
		INNER JOIN UomMaster UM ON UM.UomId=D.UomId  
		WHERE SALINVDATE>='2018-09-01' AND Dlvsts in(4,5) AND SalManFreeQty>0
		AND NOT EXISTS (SELECT * FROM WSMasterExportUploadTrack X WHERE X.MasterCode=A.SalinvNO and ProcessName='Sales Invoice')
		UNION ALL
		SELECT @DistCode,@DistCode,ReturnCode,Case WHEN B.Slno < 0 THEN B.Slno*-1 ELSE B.Slno END ,2,PrdCCode,UM.UomCode,1,BaseQty,PrdUnitSelRte,
		SUM(PrdSplDisAmt+PrdSchDisAmt+PrdDBDisAmt+PrdCDDisAmt),PrdtaxAmt,SUM(PrdNetAmt/Baseqty),PrdNetAmt,0,'N'
		FROM ReturnHeader A 
		INNER JOIN ReturnProduct  B ON A.ReturnId  =B.ReturnId 
		INNER JOIN Salesman S ON A.SMId =S.SMId 
		INNER JOIN #SMLIST1 SM ON SM.Smid=S.SMId AND  SM.Smid=A.Smid
		INNER JOIN PRODUCT C ON B.PRDID =C.PRDID 
		INNER JOIN UomGroup D ON C.UomGroupid =D.UomGroupid AND D.BaseUom='Y' 
		INNER JOIN UomMaster UM ON UM.UomId=D.UomId   
		WHERE ReturnDate >='2018-09-01' AND a.Status =0
		AND NOT EXISTS (SELECT * FROM WSMasterExportUploadTrack X WHERE X.MasterCode=A.ReturnCode and ProcessName='Sales Return')
		GROUP BY ReturnCode,B.Slno,PrdCCode,UM.UomCode,BaseQty,PrdUnitSelRte,PrdtaxAmt,PrdNetAmt
		)	
		
		INSERT INTO WSMasterExportUploadTrack(ProcessName,MasterCode,MasterName,ExportTime,Status,Reference1,Reference2,Reference3,Ref4Value)
		SELECT 'Sales Invoice',InvoiceNo,InvoiceNo,GETDATE(),0,'','','',0 FROM Export_CS2WS_SalesInvoiceHeader B WHERE UploadFlag='N' AND TransactionType=2 UNION ALL
		SELECT 'Sales Return',InvoiceNo,CustomerCode,GETDATE(),0,'','','',0 FROM Export_CS2WS_SalesInvoiceHeader B WHERE UploadFlag='N' AND TransactionType=3
				
		update Export_CS2WS_SalesInvoiceHeader  SET DivisionCode='DD' WHERE UploadFlag='N'
		
		SELECT Distinct TenantCode,
				LocationCode,
				TransactionType,
				InvoiceNo,
				HHTOrderNo,
				DocumentDate,
				RouteCode,
				SalesmanCode,
				CustomerCode,
				DivisionCode,
				TotalQuantity,
				SalesAmount,
				ReturnAmount,
				DocumentAmount,
				CurrencyCode 
				FROM Export_CS2WS_SalesInvoiceHeader(NOLOCK) WHERE UploadFlag='N'
				
				
		SELECT	Distinct TenantCode,
				LocationCode,
				InvoiceNo,
				SequenceNumber,
				ItemTransactionType,
				ItemCode,
				UnitsOfMeasure,
				ItemTypeCode,
				ItemQuantity,
				ItemPrice,
				DiscountAmount,
				TaxAmount,
				NetUnitPrice,
				NetLineAmount,
				IsFreeGood
			FROM Export_CS2WS_SalesInvoiceDetails(NOLOCK) WHERE UploadFlag='N'
    END	
	
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Proc_AutoBatchTransfer_Inactive' AND XTYPE='P' )
DROP PROCEDURE Proc_AutoBatchTransfer_Inactive
GO
CREATE PROCEDURE Proc_AutoBatchTransfer_Inactive
(
	@Pi_OldMaxPrdBatId	INT,
	@Po_ErrNo INT OUTPUT
)
AS
/*********************************
* PROCEDURE		: Proc_AutoBatchTransfer
* PURPOSE		: To do Batch Transfer automatically while downloading New Batch for Existing Product
* CREATED		: Nandakumar R.G
* CREATED DATE	: 06/02/2010
* MODIFIED
**************************************************************************************************************************************************************************************
* VERSION    |  DATE      |     PERSON                  | USER STORY ID  |  CR/BZ |                                    REMARKS                                       | CODE REVIEW BY     | REVIEW DATE
**************************************************************************************************************************************************************************************
		      | 2020-05-17 | Venkat M				    |			     | SR     | Mentioned products Validation added to Inactive Batch Stock to transfer Active Batch Stock           |
***************************************************************************************************************************************************************************************/
SET NOCOUNT ON
BEGIN
	SET @Po_ErrNo=0
	
	DECLARE @Exist 				AS 	INT
	DECLARE @Trans				AS 	INT
	DECLARE @Tabname 			AS  NVARCHAR(100)
	DECLARE @DestTabname 		AS 	NVARCHAR(100)
	DECLARE @Fldname 			AS  NVARCHAR(100)
	
	DECLARE @PrdDCode 	        AS 	NVARCHAR(100)
	DECLARE @BatchCode			AS 	NVARCHAR(100)
	DECLARE @CmpBatchCode		AS 	NVARCHAR(100)	
	DECLARE @PriceCode			AS 	NVARCHAR(4000)		
	DECLARE @MnfDate			AS 	NVARCHAR(100)
	DECLARE @ExpDate			AS 	NVARCHAR(100)
	DECLARE @TaxGroupCode		AS 	NVARCHAR(100)
	DECLARE @Status				AS 	NVARCHAR(100)
	DECLARE	@BatchSeqCode 		AS 	NVARCHAR(100)
	DECLARE @RefCode           	AS 	NVARCHAR(100)
	DECLARE @PriceValue         AS 	NVARCHAR(100)	
	DECLARE @DefaultPrice       AS 	NVARCHAR(100)	  	
	DECLARE @ExistPrdDCode		AS 	NVARCHAR(100)  	
	DECLARE @ExistBatchCode		AS 	NVARCHAR(100)
	DECLARE @ExistPriceCode		AS 	NVARCHAR(100)  	
	
	DECLARE @PrdId 				AS 	INT
	DECLARE @PrdBatId 			AS 	INT
	DECLARE @PriceId 			AS 	INT
	DECLARE @TaxGroupId 		AS 	INT
	DECLARE @BatchSeqId 		AS 	INT
	DECLARE @BatchStatus		AS 	INT
	DECLARE @SlNo	 			AS 	INT
	DECLARE @NoOfPrices 		AS 	INT
	DECLARE @ExistPrices 		AS 	INT
	DECLARE @DefaultPriceId 	AS 	INT
	DECLARE @ExistPriceId 		AS 	INT
	DECLARE @TransStr 			AS 	NVARCHAR(4000)
	DECLARE @ExistPrdBatMaxId	AS 	INT
	DECLARE @NewPrdBatMaxId		AS 	INT
	DECLARE @ContPrdId 			AS 	INT
	DECLARE @ContPrdBatId 		AS 	INT
	DECLARE @ContExistPrdBatId 	AS 	INT
	DECLARE @ContPriceId 		AS 	INT
	DECLARE @ContractId 		AS 	INT
	DECLARE @ContPriceCode		AS NVARCHAR(100)
	DECLARE @ContPrdBatId1		AS INT
	DECLARE @ContPriceId1		AS INT
	DECLARE @BatchTransfer		AS INT
	DECLARE @SalStock			AS INT
	DECLARE @UnSalStock			AS INT
	DECLARE @OfferStock			AS INT
	DECLARE @FromPrdBatId		AS INT
	DECLARE @FromPrdBatCode		AS NVARCHAR(200)
	DECLARE @ToPrdBatId			AS INT
	DECLARE @LcnId				AS INT
	DECLARE @Po_StkPosting		AS INT
	DECLARE @TransDate			AS DATETIME
	
	DECLARE @ReceiptNo AS VARCHAR(100)
	DECLARE @ToPriceId AS BIGINT
	DECLARE @FromPriceId AS BIGINT
		
	SET @BatchTransfer=0
	SELECT @TransDate=CONVERT(NVARCHAR(10),GETDATE(),121)
	---->Needs to be changed
	SELECT @BatchTransfer=Status FROM Configuration(NOLOCK) WHERE ModuleId='GENConfig000001'
	
	SET @Exist=0
	SET @ExistPrdDCode=''	
	SET @ExistBatchCode=''
	SET @ExistPriceCode=''
	
	SET @DestTabname='ProductBatch'
	SET @Fldname='PrdBatId'
	SET @Tabname = 'ETL_Prk_ProductBatch'
	SET @Exist=0
		
	DECLARE @KeyNumber AS VARCHAR(100)
	DECLARE @StockTypeId AS INT
	
	DECLARE @ReasonId AS INT
	SELECT @ReasonId=ReasonId FROM ReasonMaster(NOLOCK) WHERE Description='Free Stock Movement'
		
	SELECT DISTINCT Prdbatid INTO #FreeBatch 
	FROM ProductBatchDetails (NOLOCK)GROUP BY Prdbatid having SUM(PrdBatDetailValue)=0
		
		SELECT A.PrdId , A.Prdccode, PrdName, B.PrdBatId , B.CmpBatCode  INTO #Prdccode FROM Product A(NOLOCK) INNER JOIN ProductBatch B(NOLOCK) ON A.PrdId =B.PrdId
		INNER JOIN TempDistBatch C(NOLOCK) On A.PrdCCode =C.PrdCCode INNER JOIN Distributor D(NOLOCK) ON C.DistCode= D.DistributorCode

		UPDATE PB SET  PB.Status =1	FROM ProductBatchLocation PBL(NOLOCK)  INNER JOIN ProductBAtch PB(NOLOCK) ON PB.Prdid =PBL.Prdid and PBL .PrdBatid=PB.PrdBatId  WHERE
		((PBL.PrdBatLcnSih-PBL.PrdBatLcnRessih)+(PBL.PrdBatLcnUih-PBL.PrdBatLcnResUih)+(PBL.PrdBatLcnFre-PBL.PrdBatLcnResFre))>0
		and PBL.PrdbatId NOT IN(Select Prdbatid FROM #FreeBatch)
		AND PB.PRDID IN(SELECT PRDID FROM #Prdccode)


	SELECT C.Prdid, MAX(A.PrdBatId ) Prdbatid INTO #Prdbatch FROM ProductBatchDetails A(NOLOCK) INNER JOIN ProductBatch B(NOLOCK) ON A .Prdbatid =B.Prdbatid 
	INNER JOIN #Prdccode C ON  B.PrdId =C.Prdid GROUP BY C.Prdid 
	BEGIN TRY
		BEGIN TRANSACTION
	--Till Here By Venkat M
	DECLARE Cur_ProductBatch CURSOR
	FOR SELECT PrdId,PrdBatId  FROM #Prdbatch
	WHERE PrdBatId >@Pi_OldMaxPrdBatId and PrdbatId NOT IN(Select Prdbatid FROM #FreeBatch) ORDER BY PrdId	
	OPEN Cur_ProductBatch
	FETCH NEXT FROM Cur_ProductBatch INTO @PrdId,@PrdBatId
	WHILE @@FETCH_STATUS=0
	BEGIN
		
		DECLARE Cur_BatchTransfer CURSOR
		FOR SELECT PBL.LcnId,PBL.PrdBatId,(PBL.PrdBatLcnSih-PBL.PrdBatLcnRessih) AS SalStock,(PBL.PrdBatLcnUih-PBL.PrdBatLcnResUih) AS UnSalStock,
		(PBL.PrdBatLcnFre-PBL.PrdBatLcnResFre) AS OfferStock
		FROM ProductBatchLocation PBL (NOLOCK) INNER JOIN #Prdccode B ON PBL.Prdid =B.Prdid AND PBL.PrdBatid =B.prdBatid   WHERE PBL.PrdId=@PrdId AND PBL.PrdBatId<>@PrdBatId
		AND ((PBL.PrdBatLcnSih-PBL.PrdBatLcnRessih)+(PBL.PrdBatLcnUih-PBL.PrdBatLcnResUih)+(PBL.PrdBatLcnFre-PBL.PrdBatLcnResFre))>0
		and PBL.PrdbatId NOT IN(Select Prdbatid FROM #FreeBatch)
		OPEN Cur_BatchTransfer
		FETCH NEXT FROM Cur_BatchTransfer INTO @LcnId,@FromPrdBatId,@SalStock,@UnSalStock,@Offerstock
		WHILE @@FETCH_STATUS=0
		BEGIN
			
			SET @Po_ErrNo=0
			
			IF @SalStock>0
			BEGIN
				EXEC Proc_UpdateProductBatchLocation 1,2,@PrdId,@FromPrdBatId,@LcnId,@TransDate,@SalStock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
				IF @Po_StkPosting=0
				BEGIN
					EXEC Proc_UpdateProductBatchLocation 1,1,@PrdId,@PrdBatId,@LcnId,@TransDate,@SalStock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
					IF @Po_StkPosting=0
					BEGIN	
						EXEC Proc_UpdateStockLedger 30,1,@PrdId,@FromPrdBatId,@LcnId,@TransDate,@SalStock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
						IF @Po_StkPosting=0
						BEGIN
							EXEC Proc_UpdateStockLedger 27,1,@PrdId,@PrdBatId,@LcnId,@TransDate,@SalStock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
							IF @Po_StkPosting<>0
							BEGIN
								SET @Po_ErrNo=1
							END
							ELSE
							BEGIN
								SET @KeyNumber=''
								SELECT @KeyNumber=dbo.Fn_GetPrimaryKeyString ('BatchTransfer','BatRefNo',YEAR(GETDATE()),MONTH(GETDATE()))
								SELECT @StockTypeId=StockTypeId FROM STOCKTYPE (NOLOCK) WHERE LcnId = @LcnId AND SystemStockType=1
								
								SELECT @FromPriceID=DefaultPriceid FROM ProductBatch (NOLOCK) WHERE PrdBatId=@FromPrdBatId
								SELECT @ToPriceID=DefaultPriceid FROM ProductBatch(NOLOCK) WHERE PrdBatId=@PrdBatId
								
								INSERT INTO BatchTransfer(BatRefNo,BatTrfDate,LcnId,PrdId,
								StockTypeId,FromBatId,ToBatId,TrfQty,ReasonId,DocRefNo,Remarks,FromPriceId,ToPriceId,
								Availability,LastModBy,LastModDate,AuthId,AuthDate)
								SELECT @KeyNumber,CONVERT(VARCHAR(10),GETDATE(),121),@LcnId,@PrdId,@StockTypeId,@FromPrdBatId,@PrdBatId,
								@SalStock,@ReasonId,'','Sales return Transfer',@FromPriceID,@ToPriceID,1,1,GETDATE(),1,GETDATE()
								
								UPDATE A SET CurrValue=CurrValue+1 FROM COUNTERS A(NOLOCK) WHERE TabName='BatchTransfer' and FldName='BatRefNo'
							END												
						END
						ELSE
						BEGIN
							SET @Po_ErrNo=1
						END
					END
					ELSE
					BEGIN
						SET @Po_ErrNo=1
					END
				END
				ELSE
				BEGIN
					SET @Po_ErrNo=1
				END
			END
			
			IF @UnSalStock>0 AND @Po_ErrNo = 0
			BEGIN
				Exec Proc_UpdateProductBatchLocation 2,2,@PrdId,@FromPrdBatId,@LcnId,@TransDate,@UnSalStock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
				IF @Po_StkPosting=0
				BEGIN
					Exec Proc_UpdateProductBatchLocation 2,1,@PrdId,@PrdBatId,@LcnId,@TransDate,@UnSalStock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
					IF @Po_StkPosting=0
					BEGIN	
						Exec Proc_UpdateStockLedger 31,1,@PrdId,@FromPrdBatId,@LcnId,@TransDate,@UnSalStock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
						IF @Po_StkPosting=0
						BEGIN
							Exec Proc_UpdateStockLedger 28,1,@PrdId,@PrdBatId,@LcnId,@TransDate,@UnSalStock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
							IF @Po_StkPosting<>0
							BEGIN
								SET @Po_ErrNo=1
							END
							ELSE
							BEGIN
								SET @KeyNumber=''
								SELECT @KeyNumber=dbo.Fn_GetPrimaryKeyString ('BatchTransfer','BatRefNo',YEAR(GETDATE()),MONTH(GETDATE()))
								SELECT @StockTypeId=StockTypeId FROM STOCKTYPE (NOLOCK) WHERE LcnId = @LcnId AND SystemStockType=2
								
								SELECT @FromPriceID=DefaultPriceid FROM ProductBatch(NOLOCK) WHERE PrdBatId=@FromPrdBatId
								SELECT @ToPriceID=DefaultPriceid FROM ProductBatch(NOLOCK) WHERE PrdBatId=@PrdBatId
								
								INSERT INTO BatchTransfer(BatRefNo,BatTrfDate,LcnId,PrdId,
								StockTypeId,FromBatId,ToBatId,TrfQty,ReasonId,DocRefNo,Remarks,FromPriceId,ToPriceId,
								Availability,LastModBy,LastModDate,AuthId,AuthDate)
								SELECT @KeyNumber,CONVERT(VARCHAR(10),GETDATE(),121),@LcnId,@PrdId,@StockTypeId,@FromPrdBatId,@PrdBatId,
								@UnSalStock,@ReasonId,'','Sales return Transfer',@FromPriceID,@ToPriceID,1,1,GETDATE(),1,GETDATE()
								
								UPDATE A SET CurrValue=CurrValue+1 FROM COUNTERS A(NOLOCK) WHERE TabName='BatchTransfer' and FldName='BatRefNo'
							END						
						END
						ELSE
						BEGIN
							SET @Po_ErrNo=1
						END
					END
					ELSE
					BEGIN
						SET @Po_ErrNo=1
					END
				END
				ELSE
				BEGIN
					SET @Po_ErrNo=1
				END
			END
				
			IF @Offerstock>0 AND @Po_ErrNo = 0
			BEGIN
				Exec Proc_UpdateProductBatchLocation 3,2,@PrdId,@FromPrdBatId,@LcnId,@TransDate,@Offerstock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
				IF @Po_StkPosting=0
				BEGIN
					Exec Proc_UpdateProductBatchLocation 3,1,@PrdId,@PrdBatId,@LcnId,@TransDate,@Offerstock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
					IF @Po_StkPosting=0
					BEGIN	
						Exec Proc_UpdateStockLedger 32,1,@PrdId,@FromPrdBatId,@LcnId,@TransDate,@Offerstock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
						IF @Po_StkPosting=0
						BEGIN
							Exec Proc_UpdateStockLedger 29,1,@PrdId,@PrdBatId,@LcnId,@TransDate,@Offerstock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
							IF @Po_StkPosting<>0
							BEGIN
								SET @Po_ErrNo=1
							END
							ELSE
							BEGIN
								SET @KeyNumber=''
								SELECT @KeyNumber=dbo.Fn_GetPrimaryKeyString ('BatchTransfer','BatRefNo',YEAR(GETDATE()),MONTH(GETDATE()))
								SELECT @StockTypeId=StockTypeId FROM STOCKTYPE (NOLOCK) WHERE LcnId = @LcnId AND SystemStockType=3
								
								SELECT @FromPriceID=DefaultPriceid FROM ProductBatch(NOLOCK) WHERE PrdBatId=@FromPrdBatId
								SELECT @ToPriceID=DefaultPriceid FROM ProductBatch(NOLOCK) WHERE PrdBatId=@PrdBatId
								
								INSERT INTO BatchTransfer(BatRefNo,BatTrfDate,LcnId,PrdId,
								StockTypeId,FromBatId,ToBatId,TrfQty,ReasonId,DocRefNo,Remarks,FromPriceId,ToPriceId,
								Availability,LastModBy,LastModDate,AuthId,AuthDate)
								SELECT @KeyNumber,CONVERT(VARCHAR(10),GETDATE(),121),@LcnId,@PrdId,@StockTypeId,@FromPrdBatId,@PrdBatId,
								@Offerstock,@ReasonId,'','Sales return Transfer',@FromPriceID,@ToPriceID,1,1,GETDATE(),1,GETDATE()
								
								UPDATE A SET CurrValue=CurrValue+1 FROM COUNTERS A(NOLOCK) WHERE TabName='BatchTransfer' and FldName='BatRefNo'
							END						
						END
						ELSE
						BEGIN
							SET @Po_ErrNo=1
						END
					END
					ELSE
					BEGIN
						SET @Po_ErrNo=1
					END
				END
				ELSE
				BEGIN
					SET @Po_ErrNo=1
				END
			END
			IF @Po_ErrNo>0
			BEGIN
				INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
				VALUES(@FromPrdBatId,'','Error','Error In ProdutBat Transfer')
				CLOSE Cur_BatchTransfer
				DEALLOCATE Cur_BatchTransfer
				CLOSE Cur_ProductBatch
				DEALLOCATE Cur_ProductBatch
				ROLLBACK TRANSACTION
				RETURN
			END
			--Added By Alphonse J on 2014-07-25 ICRSTKAL0154 to inactivate the old Batch
			DECLARE @LastPrdBatId AS NUMERIC(18,0)
			SET @LastPrdBatId = 0
			SELECT @LastPrdBatId = ISNULL(MAX(PrdBatId),0) FROM ProductBatch (NOLOCK) WHERE PrdId = @PrdId
			AND PrdBatId NOT IN (SELECT Prdbatid FROM #FreeBatch (NOLOCK))--ICRSTKAL0282
			IF @Po_ErrNo=0
			BEGIN
			    IF @LastPrdBatId <> @FromPrdBatId
			    BEGIN
				 UPDATE Productbatch  SET Status=0 WHERE PrdBatId=@FromPrdBatId
			    END   
			    ELSE
			    BEGIN
				 UPDATE Productbatch  SET Status=1 WHERE PrdBatId=@FromPrdBatId       
			    END
			END
			--Till here
			FETCH NEXT FROM Cur_BatchTransfer INTO @LcnId,@FromPrdBatId,@SalStock,@UnSalStock,@Offerstock
		END
		CLOSE Cur_BatchTransfer
		DEALLOCATE Cur_BatchTransfer
		FETCH NEXT FROM Cur_ProductBatch INTO @PrdId,@PrdBatId
		END
		CLOSE Cur_ProductBatch
		DEALLOCATE Cur_ProductBatch
		COMMIT TRANSACTION
	RETURN
END TRY
BEGIN CATCH
		SET @Po_ErrNo=1	
		CLOSE Cur_BatchTransfer
		DEALLOCATE Cur_BatchTransfer
																						
		CLOSE Cur_ProductBatch
		DEALLOCATE Cur_ProductBatch
		
		ROLLBACK TRANSACTION
END CATCH
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_InsertTradeSchemePrdDetails' AND TYPE='P')
DROP PROCEDURE Proc_InsertTradeSchemePrdDetails
GO
CREATE PROCEDURE Proc_InsertTradeSchemePrdDetails
(
@Pi_DNRefid INT,
@Pi_Usrid	INT,
@Pi_TransId	INT,
@Po_ErrNo INT OUTPUT
)
AS
/*********************************
* PROCEDURE	:  Proc_TradeSchemeClaimDetails
* PURPOSE	: TO LOAD SCHEME WISE CLAIM AMOUNT
* DATE		:  07-11-2019
* CREATED	:  MOHANA S
* PMS NO	:  CRCRSTPAR0079
*****************************************************************
16-01-2020	 MOHANA S		BZ	ILCRSTPAR7420     Sales Return Issue Fix
14-05-2020	 MOHANA S		BZ	--				    CIRCULAR NO UPDATE FOR NEW IBM DOWNLOAD
**************************************************************************/
BEGIN
SET NOCOUNT ON
	Set @Po_ErrNo = 0
	DELETE FROM DebitNoteTopSheetClaim_Trade_PrdWise WHERE DNRefid = @Pi_DNRefid 

	--FOR NEW CIRCULAR NO FROM SAP 
	SELECT DISTINCT CmpSchCode,CircularNo INTO #SchemeCircularDetails FROM SchemeCircularDetails

	UPDATE B SET CirNo = C.CircularNo FROM DebitNoteTopSheetClaimHd A (NOLOCK)
	INNER JOIN DebitNoteTopSheetClaim_Trade B(NOLOCK) ON A.DNRefId = B.DNRefId AND UPLOAD = 'N'  AND A.DNRefid = @Pi_DNRefid      
	INNER JOIN SchemeMaster S(NOLOCK) ON S.Schid = B.SchId
	INNER JOIN SchemeCircularDetails C(NOLOCK) ON S.CmpSchCode = C.CmpSchCode
	-- TILL HERE
			 
	IF NOT EXISTS (SELECT *FROM DebitNoteTopSheetClaimHd A(NOLOCK) INNER JOIN DebitNoteTopSheetClaim_Trade B(NOLOCK) ON A.DNRefid = B.DNRefId AND A.DNRefid = @Pi_DNRefid)
	BEGIN 
		Set @Po_ErrNo = 0 
		RETURN
	END
	IF NOT EXISTS (SELECT *FROM DN_Claim_Scheme A(NOLOCK) WHERE @Pi_Usrid = UsrId AND @Pi_TransId = Transid)
	BEGIN 
		SET @Po_ErrNo = 1 
		RETURN
	END
	IF NOT EXISTS (SELECT *FROM TaxPerCentage_DNCLaim A(NOLOCK) WHERE @Pi_Usrid = UsrId AND @Pi_TransId = Tranid)
	BEGIN 
		SET @Po_ErrNo = 1 
		RETURN
	END
	BEGIN TRY 
		BEGIN TRAN	
				
		SELECT * INTO #TAX FROM  TaxPerCentage_DNCLaim(NOLOCK) WHERE UsrId = @Pi_Usrid AND tranId = @Pi_TransId 

		SELECT DISTINCT TaxPerc,B.SalId,B.PrdId  INTO #TaxPerc FROM SalesInvoiceProduct B(NOLOCK)       
		INNER JOIN #TAX P ON P.SalId = B.SalId AND  B.SlNo = P.PrdSlno AND TRANSID = 1   


		select DISTINCT TaxPerc,B.ReturnID AS Salid,B.PrdId 
		into #TaxPer_Return
		from  #TAX A INNER JOIN ReturnProduct B ON A.SalId = B.ReturnID  where --A.SalId = 2	and 
		TransId = 2 and A.PrdSlno = B.Slno and StockTypeId IN (SELECT StockTypeId FROM STOCKTYPE WHERE SystemStockType = 1)
		 
							
			INSERT INTO DebitNoteTopSheetClaim_Trade_PrdWise  
			SELECT DISTINCT @Pi_DNRefid ,A.SchId,SlabId,Salid,FlatAmount,DiscountPer,BudgetUtilized,Linetype,Salinvdate ,A.Prdid,TaxPerc,
			CASE ApplyTaxForClaim WHEN 0 THEN SUM(FlatAmount+DiscountPer) ELSE  (SUM(FlatAmount+DiscountPer)+SUM(FlatAmount+DiscountPer)*(TaxPerc/100)) END  AS SchAmtWithTax,GETDATE()
			FROM (
			SELECT DISTINCT SchId,A.Salid,SlabId,A.Prdid,FlatAmount,DiscountPer,BudgetUtilized,Salinvdate,TaxPerc,Linetype  FROM DN_Claim_Scheme A 
			INNER JOIN #TaxPerc B ON A.Salid = B.SalId AND A.Prdid = B.PrdId 
			AND LineType=1 AND A.UsrId = @Pi_Usrid AND A.transId = @Pi_TransId  
			UNION ALL
			SELECT SchId,A.Salid,SlabId,A.Prdid,FlatAmount,DiscountPer,BudgetUtilized,Salinvdate,TaxPerc,A.Linetype FROM DN_Claim_Scheme A 
			INNER JOIN  #TaxPer_Return B ON A.Salid = B.SALID AND Linetype = 2 AND A.Prdid = B.PRDID 
				AND   A.UsrId =@Pi_Usrid AND A.transId =@Pi_TransId 
			)A INNER JOIN SchemeMaster S ON A.Schid =S.Schid 
			GROUP BY  A.SchId,Salid,SlabId,A.Prdid,BudgetUtilized,Salinvdate,TaxPerc,Linetype,ApplyTaxForClaim,FlatAmount,DiscountPer
			IF NOT EXISTS (SELECT * FROM DebitNoteTopSheetClaim_Trade_PrdWise WHERE DNREFID = @Pi_DNRefid )
			BEGIN
				SET @Po_ErrNo = 1
			END
		COMMIT TRAN
	END TRY
	BEGIN CATCH
	ROLLBACK TRAN
		SET @Po_ErrNo = 1		
	END CATCH	 
	SELECT @Po_ErrNo
	RETURN
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_Validate_InstitutionsTargetSetting' AND TYPE='P')
DROP PROCEDURE Proc_Validate_InstitutionsTargetSetting
GO
/*
BEGIN TRAN  
EXEC Proc_Validate_InstitutionsTargetSetting 0 
--SELECT * FROM INSTARGETHD where insrefno='Target0050'
--select * from instargetdetails WHERE RTRID in (137 ,11)
--select * from errorlog
ROLLBACK TRAN
*/  
CREATE PROCEDURE Proc_Validate_InstitutionsTargetSetting
(  
 @Po_ErrNo INT OUTPUT  
)  
AS  
/*****************************************************************************************************************************************************************  
* PROCEDURE : Proc_Validate_InstitutionsTargetSetting 0  
* PURPOSE : To Validate Proc_Validate_InstitutionsTargetSetting and move to main  
* CREATED : Aravindh Deva C  
* CREATED DATE : 20/05/2016  
* MODIFIED   
' Version      Date        Person           User Story ID    CR/BZ          Remarks               Code Review By   Review Date
' 436       15/05/2018    S.MOORTHI        CRCRSTPAR0004    CR			 Target Resetting 
' 432       04/11/2019    M.Lakshman       ILCRSTPAR6556    SR           while download target setting program code year,month and retailer wise status validation included.  
' 442		04-02-2020	  MOHANA S		   ILCRSTPAR7560    SR			 DELETED THE RETAILER WHICH IS NOT AVAILABLE IN CS
' 443		27-02-2020	  MOHANA S		   CRCRSTPAR0098    CR			 SAME TARGET WILL MAINTAIN FOR NEW RETAILER TILL ONE FINANCIAL YEAR
*******************************************************************************************************************************************************************/   
BEGIN  
SET @Po_ErrNo=0  
	BEGIN TRY 
	
	--Target Download Issue
		IF EXISTS (SELECT * FROM Cn2Cs_Prk_InstitutionsTargetSetting (NOLOCK) WHERE DownloadFlag='D' AND ProgramCode='TARGET0112')
		BEGIN
		DELETE FROM InsTargetDetails WHERE InsId IN (SELECT Insid FROM InsTargetHd WHERE InsRefNo='TARGET0112')
		DELETE FROM InsTargetHd WHERE InsRefNo='TARGET0112'
		END

		IF EXISTS (SELECT * FROM Cn2Cs_Prk_InstitutionsTargetSetting (NOLOCK) WHERE DownloadFlag='D' AND ProgramCode='Target0113')
		BEGIN
		DELETE FROM InsTargetDetails WHERE InsId IN (SELECT Insid FROM InsTargetHd WHERE InsRefNo='Target0113')
		DELETE FROM InsTargetHd WHERE InsRefNo='Target0113'
		END

		DECLARE @InsID INT
		SELECT @InsID = ISNULL(MAX(InsId),0)  FROM InsTargetHd
		UPDATE A SET CurrValue =@InsID FROM Counters A WHERE TabName ='InsTargetHD'
   
	-- TILL HERE

			DELETE PRK FROM Cn2Cs_Prk_InstitutionsTargetSetting PRK (NOLOCK) WHERE DownloadFlag='Y'  
   
			SELECT DISTINCT * INTO #Cn2Cs_Prk_InstitutionsTargetSetting FROM Cn2Cs_Prk_InstitutionsTargetSetting A(NOLOCK) WHERE DownloadFlag='D'  
			AND NOT EXISTS (SELECT INSREFNO,TargetYear,TargetMonth FROM INSTARGETHD  B WHERE A.ProgramCode=B.INSREFNO AND A.FromProgramYear = B.TargetYear 
			AND A.EffFromMonthId = B.TargetMonth) AND ISNULL(TargetAmount,0)>0 AND ISNULL(AVGSales,0)>0
   
			SELECT DISTINCT * INTO #EXISTSTargetSetting FROM Cn2Cs_Prk_InstitutionsTargetSetting A(NOLOCK) WHERE DownloadFlag='D'  
			AND EXISTS (SELECT INSREFNO,TargetYear,TargetMonth FROM INSTARGETHD  B WHERE A.ProgramCode=B.INSREFNO AND A.FromProgramYear = B.TargetYear 
			AND A.EffFromMonthId = B.TargetMonth) AND ISNULL(TargetAmount,0)>0 AND ISNULL(AVGSales,0)>0

			IF NOT EXISTS (SELECT * FROM #Cn2Cs_Prk_InstitutionsTargetSetting (NOLOCK)	UNION ALL SELECT * FROM  #EXISTSTargetSetting) 
			BEGIN
				RETURN
			END
     
			CREATE TABLE #InsToAvoid  
			(  
			ProgramCode VARCHAR(50),  
			SlNo INT,  
			TableName NVARCHAR (200),  
			FieldName NVARCHAR (200),  
			ErrDesc NVARCHAR (1000)  
			) 
    
			SELECT DISTINCT C.CtgCode,R.CmpRtrCode,C.CtgMainId,R.RtrId  
			INTO #CSCtgCode  
			FROM RetailerCategory C (NOLOCK)  
			INNER JOIN RetailerValueClass V (NOLOCK) ON C.CtgMainId = V.CtgMainId  
			INNER JOIN RetailerValueClassMap M (NOLOCK) ON V.RtrClassId = M.RtrValueClassId  
			INNER JOIN Retailer R (NOLOCK) ON M.RtrId = R.RtrId  


			DELETE PRK FROM #Cn2Cs_Prk_InstitutionsTargetSetting PRK  WHERE  NOT EXISTS  
			(SELECT * FROM #CSCtgCode C (NOLOCK) WHERE Prk.RtrGroup = C.CtgCode AND Prk.CmpRtrCode = C.CmpRtrCode)  

			DELETE PRK FROM #EXISTSTargetSetting PRK  WHERE  NOT EXISTS  
			(SELECT * FROM #CSCtgCode C (NOLOCK) WHERE Prk.RtrGroup = C.CtgCode AND Prk.CmpRtrCode = C.CmpRtrCode) 


			--INSERT INTO #InsToAvoid (ProgramCode,SlNo,TableName,FieldName,ErrDesc)  
			--SELECT DISTINCT ProgramCode,1,'Cn2Cs_Prk_InstitutionsTargetSetting','ProgramCode','The program code is already existing ' +   
			--ProgramCode FROM #Cn2Cs_Prk_InstitutionsTargetSetting Prk (NOLOCK)   
			--WHERE EXISTS (SELECT 'C' FROM InsTargetHD C (NOLOCK) WHERE Prk.ProgramCode = C.InsRefNo)  

			INSERT INTO #InsToAvoid (ProgramCode,SlNo,TableName,FieldName,ErrDesc)  
			SELECT DISTINCT ProgramCode,2,'Cn2Cs_Prk_InstitutionsTargetSetting','CtgCode','Retailer / Category / Retailer and Category mapping is not valid for Program ' +   
			ProgramCode  FROM #Cn2Cs_Prk_InstitutionsTargetSetting Prk (NOLOCK) WHERE NOT EXISTS  
			(SELECT * FROM #CSCtgCode C (NOLOCK) WHERE Prk.RtrGroup = C.CtgCode AND Prk.CmpRtrCode = C.CmpRtrCode)  
			UNION ALL
			SELECT DISTINCT ProgramCode,2,'Cn2Cs_Prk_InstitutionsTargetSetting','CtgCode','Retailer / Category / Retailer and Category mapping is not valid for Program ' +   
			ProgramCode  FROM #EXISTSTargetSetting Prk (NOLOCK) WHERE NOT EXISTS  
			(SELECT * FROM #CSCtgCode C (NOLOCK) WHERE Prk.RtrGroup = C.CtgCode AND Prk.CmpRtrCode = C.CmpRtrCode)  
			

			INSERT INTO #InsToAvoid (ProgramCode,SlNo,TableName,FieldName,ErrDesc)  
			SELECT DISTINCT ProgramCode,3,'Cn2Cs_Prk_InstitutionsTargetSetting','ProgramCode','No values should be NULL for the Program ' +  
			ProgramCode FROM #Cn2Cs_Prk_InstitutionsTargetSetting   
			WHERE (FromProgramYear) IS NULL  Or (ToProgramYear) IS NULL  
			OR (RtrGroup + CmpRtrCode) IS NULL  
			OR (AVGSales + TargetAmount + EffFromMonthId) IS NULL  
			UNION ALL
			SELECT DISTINCT ProgramCode,3,'Cn2Cs_Prk_InstitutionsTargetSetting','ProgramCode','No values should be NULL for the Program ' +  
			ProgramCode FROM #EXISTSTargetSetting   
			WHERE (FromProgramYear) IS NULL  Or (ToProgramYear) IS NULL  
			OR (RtrGroup + CmpRtrCode) IS NULL  
			OR (AVGSales + TargetAmount + EffFromMonthId) IS NULL  

			INSERT INTO #InsToAvoid (ProgramCode,SlNo,TableName,FieldName,ErrDesc)  
			SELECT DISTINCT ProgramCode,4,'Cn2Cs_Prk_InstitutionsTargetSetting','TargetAmount','TargetAmount field should not be Zero Or NULL' +  
			ProgramCode FROM #Cn2Cs_Prk_InstitutionsTargetSetting   
			WHERE ISNULL(TargetAmount,0) = 0  
			UNION ALL
			SELECT DISTINCT ProgramCode,4,'Cn2Cs_Prk_InstitutionsTargetSetting','TargetAmount','TargetAmount field should not be Zero Or NULL' +  
			ProgramCode FROM #EXISTSTargetSetting   
			WHERE ISNULL(TargetAmount,0) = 0  

			INSERT INTO #InsToAvoid (ProgramCode,SlNo,TableName,FieldName,ErrDesc)  
			SELECT DISTINCT ProgramCode,5,'Cn2Cs_Prk_InstitutionsTargetSetting','EffFromMonthId','EffFromMonthId field should not be Zero Or NULL' +  
			ProgramCode FROM #Cn2Cs_Prk_InstitutionsTargetSetting   
			WHERE ISNULL(EffFromMonthId,0) = 0  
			UNION ALL
			SELECT DISTINCT ProgramCode,5,'Cn2Cs_Prk_InstitutionsTargetSetting','EffFromMonthId','EffFromMonthId field should not be Zero Or NULL' +  
			ProgramCode FROM #EXISTSTargetSetting   
			WHERE ISNULL(EffFromMonthId,0) = 0  

			INSERT INTO #InsToAvoid (ProgramCode,SlNo,TableName,FieldName,ErrDesc)  
			SELECT DISTINCT ProgramCode,6,'Cn2Cs_Prk_InstitutionsTargetSetting','EffToMonthId','EffToMonthId field should not be Zero Or NULL' +  
			ProgramCode FROM #Cn2Cs_Prk_InstitutionsTargetSetting   
			WHERE ISNULL(EffToMonthId,0) = 0
			UNION ALL
			SELECT DISTINCT ProgramCode,6,'Cn2Cs_Prk_InstitutionsTargetSetting','EffToMonthId','EffToMonthId field should not be Zero Or NULL' +  
			ProgramCode FROM #EXISTSTargetSetting   
			WHERE ISNULL(EffToMonthId,0) = 0
     
			INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)  
			SELECT DISTINCT SlNo,TableName,FieldName,ErrDesc FROM #InsToAvoid (NOLOCK)  
   
   
			--DELETE P FROM #Cn2Cs_Prk_InstitutionsTargetSetting P  
			--WHERE EXISTS (SELECT 'C' FROM #InsToAvoid A (NOLOCK) WHERE P.ProgramCode = A.ProgramCode)  

			DECLARE @CurrValue AS INT  
			SELECT @CurrValue = CurrValue FROM Counters  (NOLOCK)   
			WHERE TabName='InsTargetHD' AND FldName='InsId'  
   
			DELETE FROM #Cn2Cs_Prk_InstitutionsTargetSetting WHERE CMPRTRCODE NOT IN (SELECT CMPRTRCODE FROM RETAILER) --UAT ISSUE FIX 
			
			DELETE FROM #EXISTSTargetSetting WHERE CMPRTRCODE NOT IN (SELECT CMPRTRCODE FROM RETAILER)  

 
			----CRCRSTPAR0004
			-----Added by lakshman M dated ON 04/11/2019 PMS ID: ILCRSTPAR6556 -----
			--[IF NEW TARGET DOWNLOAD FOR ANY ONE EXISTING RETAILER WITH DIFFERENT GROUP AND TARGET REF, WHOLE EXISTING TARGET GET INACTIVE FOR ALL RETAILES]
			--[HENCE THE QUERY COMMENTED]
			--UPDATE B SET B.[Status]=0 FROM #Cn2Cs_Prk_InstitutionsTargetSetting A 
			--INNER JOIN InsTargetHD B ON A.FromProgramYear=B.TargetYear and A.EffFromMonthId=B.TargetMonth
			--INNER JOIN InsTargetdetails C ON C.insid =B.insid AND C.CmpRtrCode = A.CmpRtrCode
			--WHERE CAST(CAST(TargetYear AS VARCHAR(5))+ '-' + CAST(targetmonth AS VARCHAR(2))+ '-01'  AS DATETIME)>=
			--(SELECT JcmSdt FROM JCMonth WHERE CONVERT(VARCHAR(10),GETDATE(),121) BETWEEN JcmSdt AND JcmEdt)
	
			--DELETE A FROM #Cn2Cs_Prk_InstitutionsTargetSetting A  
			--INNER JOIN InsTargetHD B ON A.FromProgramYear=B.TargetYear and A.EffFromMonthId=B.TargetMonth
			--INNER JOIN InsTargetdetails C ON C.insid =B.insid AND C.CmpRtrCode = A.CmpRtrCode
			--WHERE CAST(CAST(TargetYear AS VARCHAR(5))+ '-' + CAST(targetmonth AS VARCHAR(2))+ '-01'  AS DATETIME)<
			--(SELECT JcmSdt FROM JCMonth WHERE CONVERT(VARCHAR(10),GETDATE(),121) BETWEEN JcmSdt AND JcmEdt)
			---------------- Till here ------------------------------
			--CRCRSTPAR0004
			--Header  
					 
			IF EXISTS (SELECT * FROM #Cn2Cs_Prk_InstitutionsTargetSetting)
			BEGIN

				INSERT INTO InsTargetHD (InsId,InsRefNo,TargetDate,TargetMonth,TargetYear,[Status],Confirm,Upload,Availability,  
				LastModBy,LastModDate,AuthId,AuthDate,EffFromMonthId,EffToMonthId,ToTargetYear)  
				SELECT ROW_NUMBER() OVER(ORDER BY ProgramCode) + @CurrValue InsId,  
				ProgramCode InsRefNo,GETDATE() TargetDate,EffFromMonthId [TargetMonth],FromProgramYear [TargetYear],1 [Status],0 Confirm,0 Upload,  
				1 Availability,1 LastModBy,GETDATE() LastModDate,1 AuthId,MAX(CreatedDate) AuthDate,EffFromMonthId,EffToMonthId,ToProgramYear [ToTargetYear]     
				FROM #Cn2Cs_Prk_InstitutionsTargetSetting   WHERE ProgramCode NOT IN (SELECT DISTINCT InsRefNo FROM InsTargetHD(nolock))
				GROUP BY ProgramCode,[FromProgramYear],EffFromMonthId,EffToMonthId,ToProgramYear  
 
   
				--Retailer Details  
				--INSERT INTO InsTargetDetails (InsId,RtrCtgMainId,RtrId,AvgSal,[Target],Achievement,BaseAch,TargetAch,  
				--ValBaseAch,ValTargetAch,ClmAmount,Liability,Availability,LastModBy,LastModDate,AuthId,AuthDate,  
				--RtrUniqueCode,CmpRtrCode,AchDownloadDate,MonthName,RtrGroup)  
				--SELECT DISTINCT H.InsId,C.CtgMainId,C.RtrId,P.AVGSales,P.[TargetAmount],  
				--0 Achievement,0 BaseAch,0 TargetAch,0 ValBaseAch,0 ValTargetAch,0 ClmAmount,0 Liability,  
				--1 Availability,1 LastModBy,GETDATE() LastModDate,1 AuthId,CreatedDate AuthDate,  
				--P.RtrUniqueCode,P.CmpRtrCode,'1900-01-01','',P.RtrGroup     
				--FROM #Cn2Cs_Prk_InstitutionsTargetSetting P (NOLOCK)  
				--INNER JOIN InsTargetHD H (NOLOCK) ON P.ProgramCode = H.InsRefNo  
				--INNER JOIN #CSCtgCode C (NOLOCK) ON P.RtrGroup = C.CtgCode AND P.CmpRtrCode = C.CmpRtrCode  
				--ORDER BY InsId,C.CtgMainId,C.RtrId  
 
				INSERT INTO InsTargetDetails (InsId,RtrCtgMainId,RtrId,AvgSal,[Target],Achievement,BaseAch,TargetAch,  
				ValBaseAch,ValTargetAch,ClmAmount,Liability,Availability,LastModBy,LastModDate,AuthId,AuthDate,  
				RtrUniqueCode,CmpRtrCode)  
				SELECT DISTINCT H.InsId,C.CtgMainId,C.RtrId,P.AVGSales,P.[TargetAmount],  
				0 Achievement,0 BaseAch,0 TargetAch,0 ValBaseAch,0 ValTargetAch,0 ClmAmount,0 Liability,  
				1 Availability,1 LastModBy,GETDATE() LastModDate,1 AuthId,CreatedDate AuthDate,  
				P.RtrUniqueCode,P.CmpRtrCode    
				FROM #Cn2Cs_Prk_InstitutionsTargetSetting P (NOLOCK)  
				INNER JOIN InsTargetHD H (NOLOCK) ON P.ProgramCode = H.InsRefNo and P.EffFromMonthId=H.EffFromMonthId  
				AND P.FromProgramYear=H.TargetYear  
				INNER JOIN #CSCtgCode C (NOLOCK) ON P.RtrGroup = C.CtgCode AND P.CmpRtrCode = C.CmpRtrCode  
				ORDER BY InsId,C.CtgMainId,C.RtrId  


				UPDATE A SET A.ChnId = C.CtgMainId FROM	InsTargetHd A INNER JOIN #Cn2Cs_Prk_InstitutionsTargetSetting  B ON A.InsRefNO = B.ProgramCode 
				INNER JOIN RetailerCategory C ON B.ChannelCode  = C.CtgCode 
				
				UPDATE A SET A.ChnId = D.CtgMainId FROM	InsTargetHd A INNER JOIN InsTargetDetails B ON A.InsId = B.InsId 
				INNER JOIN RetailerCategory C ON B.RtrCtgMainId  = C.CtgMainId 
				INNER JOIN RetailerCategory D ON D.CtgMainId = C.CtgLinkId  WHERE ISNULL(Chnid,0)=0

			END

			IF EXISTS (SELECT DISTINCT ProgramCode FROM InsTargetHD A INNER JOIN #EXISTSTargetSetting B ON A.InsRefno=B.ProgramCode)
			BEGIN

				SELECT DISTINCT C.CmpRtrCode ,ProgramCode INTO #ExistRetailer  FROM InsTargetHD A INNER JOIN InsTargetDetails B ON A.InsId = B.InsId 
				INNER JOIN #EXISTSTargetSetting C ON A.InsRefNo = ProgramCode AND A.TargetYear = C.FromProgramYear 
				AND A.EffFromMonthId = C.EffFromMonthId AND A.EffToMonthId = C.EffToMonthId 
				INNER JOIN Retailer R ON C.CmpRtrCode = R.CmpRtrCode AND B.RtrId = R.RtrId 

				SELECT DISTINCT C.CmpRtrCode,RtrId ,ProgramCode,InsId INTO #NotExistRetailer  FROM InsTargetHD A 
				INNER JOIN #EXISTSTargetSetting C ON A.InsRefNo = ProgramCode AND A.TargetYear = C.FromProgramYear 
				AND A.EffFromMonthId = C.EffFromMonthId AND A.EffToMonthId = C.EffToMonthId 
				INNER JOIN Retailer R ON C.CmpRtrCode = R.CmpRtrCode  
				
				
				DELETE A FROM #NotExistRetailer A INNER JOIN InsTargetDetails I ON A.INSID =I.INSID AND A.RTRID =I.RtrId
								
				IF EXISTS (SELECT * FROM #ExistRetailer)
				BEGIN

						INSERT INTO  InsTargetDetails_Backup(InsId,RtrCtgMainId,RtrId,AvgSal,Target,Achievement,BaseAch,TargetAch,ValBaseAch,ValTargetAch,ClmAmount,Liability,
						Availability,LastModBy,LastModDate,AuthId,AuthDate,RtrUniqueCode,CmpRtrCode)
						SELECT DISTINCT B.InsId,RtrCtgMainId,B.RtrId,AvgSal,Target,Achievement,BaseAch,TargetAch,ValBaseAch,ValTargetAch,ClmAmount,Liability,
						B.Availability,B.LastModBy,B.LastModDate,B.AuthId,GETDATE(),B.RtrUniqueCode,B.CmpRtrCode FROM  InsTargetHD A INNER JOIN InsTargetDetails B ON A.InsId = B.InsId 
						INNER JOIN #EXISTSTargetSetting C ON A.InsRefNo = ProgramCode AND A.TargetYear = C.FromProgramYear 
						AND A.EffFromMonthId = C.EffFromMonthId AND A.EffToMonthId = C.EffToMonthId 
						INNER JOIN Retailer R ON C.CmpRtrCode = R.CmpRtrCode AND B.RtrId = R.RtrId 

						UPDATE B SET AvgSal = AVGSales,	Target=TargetAmount 
						FROM InsTargetHD A INNER JOIN InsTargetDetails B ON A.InsId = B.InsId 
						INNER JOIN #EXISTSTargetSetting C ON A.InsRefNo = ProgramCode AND A.TargetYear = C.FromProgramYear 
						AND A.EffFromMonthId = C.EffFromMonthId AND A.EffToMonthId = C.EffToMonthId 
						INNER JOIN Retailer R ON C.CmpRtrCode = R.CmpRtrCode AND B.RtrId = R.RtrId 
				END

				IF EXISTS (SELECT * FROM #NotExistRetailer)
				BEGIN
		
						INSERT INTO InsTargetDetails
						SELECT DISTINCT H.InsId,C.CtgMainId,C.RtrId,P.AVGSales,P.[TargetAmount],  
						0 Achievement,0 BaseAch,0 TargetAch,0 ValBaseAch,0 ValTargetAch,0 ClmAmount,0 Liability,  
						1 Availability,1 LastModBy,GETDATE() LastModDate,1 AuthId,CreatedDate AuthDate,  
						P.RtrUniqueCode,P.CmpRtrCode    
						FROM #EXISTSTargetSetting P (NOLOCK)  
						INNER JOIN InsTargetHD H (NOLOCK) ON P.ProgramCode = H.InsRefNo and P.EffFromMonthId=H.EffFromMonthId  
						AND P.FromProgramYear=H.TargetYear  
						INNER JOIN #CSCtgCode C (NOLOCK) ON P.RtrGroup = C.CtgCode AND P.CmpRtrCode = C.CmpRtrCode  
						WHERE ProgramCode IN (SELECT DISTINCT ProgramCode FROM #NotExistRetailer(nolock))
						AND C.CmpRtrCode in (SELECT Cmprtrcode from #NotExistRetailer)
						ORDER BY InsId,C.CtgMainId,C.RtrId  

				END

			END 
  
			UPDATE C SET C.CurrValue = (SELECT ISNULL(MAX(InsId),0) FROM InsTargetHD (NOLOCK))  
			FROM Counters C (NOLOCK)   WHERE TabName='InsTargetHD' AND FldName='InsId'  
  
			UPDATE P SET P.DownloadFlag='Y'  
			FROM Cn2Cs_Prk_InstitutionsTargetSetting P (NOLOCK),  #Cn2Cs_Prk_InstitutionsTargetSetting HP,  
			InsTargetHD H (NOLOCK) WHERE P.ProgramCode = HP.ProgramCode AND P.ProgramCode = H.InsRefNo  

			UPDATE P SET P.DownloadFlag='Y'  
			FROM Cn2Cs_Prk_InstitutionsTargetSetting P (NOLOCK),  #ExistsTargetSetting HP,  
			InsTargetHD H (NOLOCK) WHERE P.ProgramCode = HP.ProgramCode AND P.ProgramCode = H.InsRefNo  

	END TRY 
	 
	BEGIN CATCH  
		INSERT INTO ErrorLog 
		SELECT 1,'TARGETSETTING','TARGETSETTING',ERROR_MESSAGE()
		SET @Po_ErrNo=1 -- 1 will rollback the process through Sync EXE  
		RETURN  
	END CATCH    
RETURN  
END
GO
IF EXISTS (SELECT * FROM CustomUpDownload WHERE Module ='Daily Product Details')
BEGIN 
DELETE FROM CustomUpDownload WHERE module ='Daily Product Details'
END
GO
IF EXISTS (SELECT * FROM Tbl_UploadIntegration WHERE ProcessName='Daily Product Details')
BEGIN
DELETE FROM tbl_uploadintegration WHERE processname='Daily Product Details'
END
GO
TRUNCATE TABLE Cs2Cn_Prk_DailyProductDetails
GO
IF EXISTS (SELECT *FROM SYSOBJECTS WHERE NAME ='Proc_Cs2Cn_DailyProductDetails' AND TYPE='P')
DROP PROCEDURE Proc_Cs2Cn_DailyProductDetails
GO
/*  
BEGIN TRANSACTION
EXEC Proc_Cs2Cn_DailyProductDetails 0 ,''
SELECT COUNT(*) FROM Cs2Cn_Prk_DailyProductDetails  
--DELETE FROM Cs2Cn_Prk_DailyProductDetails  
SELECT * FROM DayEndProcess WHERE ProcId=15  
--UPDATE DayEndProcess SET NextUpDate='2010-08-10' WHERE ProcId>13  
--UPDATE Configuration SET Status=1,ConfigValue=2 WHERE ModuleId='BotreePrdUpload'  
SELECT * FROM Configuration WHERE ModuleId='BotreeRtrUpload'  
ROLLBACK TRANSACTION  
*/  
CREATE PROCEDURE Proc_Cs2Cn_DailyProductDetails  
(  
 @Po_ErrNo INT OUTPUT,  
 @ServerDate DATETIME  
)  
AS  
/*********************************  
* PROCEDURE  : Proc_Cs2Cn_DailyProductDetails  
* PURPOSE  : Upload Daily Product Details from CoreStocky to Console  
* NOTES   :  
* CREATED BY : Nandakumar R.G  
* CREATED DATE : 30-03-2010  
* MODIFIED  
* DATE			AUTHOR     CR/BZ	 USERSTORYID		DESCRIPTION  
*************************************************  
* 26-05-2020	MOHANA S	BZ		LOCAL FIX			PROCEDURE HAS BEEN BLOCKED
*************************************************/  
SET NOCOUNT ON  
BEGIN  

SET @Po_ErrNo=0  

RETURN

 DECLARE @DistCode As nVarchar(50)  
 DECLARE @Days  AS INT  
 SELECT @DistCode = DistributorCode FROM Distributor  
 DELETE FROM Cs2Cn_Prk_DailyProductDetails WHERE UploadFlag = 'Y'  
 IF EXISTS(SELECT * FROM Configuration WHERE ModuleId='BotreePrdUpload' AND Status=1)  
 BEGIN  
  SELECT @Days=ISNULL(ConfigValue,0) FROM Configuration WHERE ModuleId='BotreePrdUpload'  
  IF EXISTS(SELECT * FROM DayEndProcess WHERE DATEADD(DAY,@Days,NextUpDate)<=GETDATE() AND ProcId=15)  
  BEGIN  
   INSERT INTO Cs2Cn_Prk_DailyProductDetails  
   (  
    DistCode,  
    PrdId,  
    ProductCompanyCode,  
    ProductDistributorCode,  
    ProductName,  
    ProductShortName,  
    ProductStatus,  
    PrdBatId,  
    ProductBatchCode,  
    CompanyBatchCode,  
    ProductBatchStatus,  
    DefaultPriceCode,  
    DefaultMRP,  
    DefaultListPrice,  
    DefaultSellingRate,  
    DefaultClaimRate,  
    AddRate1,  
    AddRate2,  
    AddRate3,  
    AddRate4,  
    AddRate5,  
    AddRate6,  
    UploadedDate,  
    UploadFlag  
   )  
   SELECT  
   @DistCode,  
   P.PrdId,  
   P.PrdCCode AS ProductCompanyCode,  
   P.PrdDCode AS ProductDistributorCode,  
   P.PrdName AS ProductName,  
   P.PrdShrtName AS ProductShortName,  
   (CASE P.PrdStatus WHEN 1 THEN 'Active' ELSE 'InActive' END) AS ProductStatus,  
   ISNULL(PB.PrdBatId,0) AS PrdBatId,  
   ISNULL(PB.PrdBatCode,'') AS ProductBatchCode,  
   ISNULL(PB.CmpBatCode,'') AS CompanyBatchCode,  
   (CASE PB.Status WHEN 1 THEN 'Active' WHEN 0 THEN 'InActive' ELSE '' END) AS ProductBatchStatus,  
   ISNULL(PB.DefaultPriceCode,'') As DefaultPriceCode,  
   ISNULL(PB.DefaultMRP,0) AS DefaultMRP,  
   ISNULL(PB.DefaultListPrice,0) AS DefaultListPrice,  
   ISNULL(PB.DefaultSellingRate,0) AS DefaultSellingRate,  
   ISNULL(PB.DefaultClaimRate,0) AS DefaultClaimRate,  
   ISNULL(PB.AddRate1,0) AS AddRate1,  
   ISNULL(PB.AddRate2,0) AS AddRate2,  
   ISNULL(PB.AddRate3,0) AS AddRate3,  
   ISNULL(PB.AddRate4,0) AS AddRate4,  
   ISNULL(PB.AddRate5,0) AS AddRate5,  
   ISNULL(PB.AddRate6,0) AS AddRate6,  
   GETDATE(),  
   'N' AS UploadFlag  
   FROM Product P  
   LEFT OUTER JOIN  
   (SELECT PB.PrdId,PB.PrdBatId,PB.CmpBatCode,PB.Status,PB.PrdBatCode,PBDM.PriceCode AS DefaultPriceCode,  
   PBDM.PrdBatDetailValue AS DefaultMRP,  
   PBDL.PrdBatDetailValue AS DefaultListPrice,  
   PBDS.PrdBatDetailValue AS DefaultSellingRate,  
   PBDC.PrdBatDetailValue AS DefaultClaimRate,  
   0 AS AddRate1,  
   0 AS AddRate2,  
   0 AS AddRate3,  
   0 AS AddRate4,  
   0 AS AddRate5,  
   0 AS AddRate6  
   FROM ProductBatch PB  
   INNER JOIN ProductBatchDetails PBDM ON PB.PrdBatId=PBDM.PrdBatId AND PBDM.DefaultPrice=1  
   INNER JOIN BatchCreation BCM ON PBDM.SlNo=BCM.SlNo AND PBDM.BatchSeqId=BCM.BatchSeqId  
   AND PBDM.BatchSeqId =BCM.BatchSeqId AND BCM.MRP=1  
   INNER JOIN ProductBatchDetails PBDL ON PB.PrdBatId=PBDL.PrdBatId AND PBDL.DefaultPrice=1  
   INNER JOIN BatchCreation BCL ON PBDL.SlNo=BCL.SlNo AND PBDL.BatchSeqId=BCL.BatchSeqId  
   AND PBDL.BatchSeqId =BCL.BatchSeqId AND BCL.ListPrice=1  
   INNER JOIN ProductBatchDetails PBDS ON PB.PrdBatId=PBDS.PrdBatId AND PBDS.DefaultPrice=1  
   INNER JOIN BatchCreation BCS ON PBDS.SlNo=BCS.SlNo AND PBDS.BatchSeqId=BCS.BatchSeqId  
   AND PBDS.BatchSeqId =BCS.BatchSeqId AND BCS.SelRte=1  
   INNER JOIN ProductBatchDetails PBDC ON PB.PrdBatId=PBDC.PrdBatId AND PBDC.DefaultPrice=1  
   INNER JOIN BatchCreation BCC ON PBDC.SlNo=BCC.SlNo AND PBDC.BatchSeqId=BCC.BatchSeqId  
   AND PBDC.BatchSeqId =BCC.BatchSeqId AND BCC.ClmRte=1   
   ) PB  
   ON P.PrdId=PB.PrdId AND P.PrdCCode=PB.PrdBatCode  
   UPDATE Prk SET AddRate1=PB.AddRate1  
   FROM Cs2Cn_Prk_DailyProductDetails Prk,  
   (SELECT PBDAD1.PrdBatId,PBDAD1.PrdBatDetailvalue AS AddRate1  
   FROM BatchCreation BCAD1,ProductBatchDetails PBDAD1  
   WHERE PBDAD1.SlNo=BCAD1.SlNo AND PBDAD1.BatchSeqId=BCAD1.BatchSeqId  
   AND BCAD1.RefCode='E' AND PBDAD1.DefaultPrice=1) AS PB  
   WHERE Prk.PrdBatId=PB.PrdBatId  
   UPDATE DayEndProcess SET NextUpDate=DATEADD(DAY,@Days,NextUpDate) WHERE ProcId=15  
  END   
 END  
 UPDATE Cs2Cn_Prk_DailyProductDetails SET ServerDate=@ServerDate  
END
GO
DELETE FROM Tbl_UploadIntegration Where ProcessName = 'StatusUploadForSAPRelease'
INSERT INTO  Tbl_UploadIntegration (SequenceNo,ProcessName,FolderName,PrkTableName,CreatedDate)
VALUES(80,'StatusUploadForSAPRelease','StatusUploadForSAPRelease','Cs2Cn_Prk_StatusUpload',GETDATE())
GO
DELETE FROM CustomUpDownload Where Module = 'StatusUploadForSAPRelease' AND UpDownload='upload'
INSERT INTO CustomUpDownload (SlNo,SeqNo,Module,Screen,ExportFnName,ImportProcName, ParkTable,ValidateProcName,TranType,UpDownload,MandatoryFile)
VALUES( 181,1,'StatusUploadForSAPRelease','StatusUploadForSAPRelease','Proc_Cs2Cn_StatusUpload','','Cs2Cn_Prk_StatusUpload','','Transaction','Upload',1)
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE name='Cs2Cn_Prk_StatusUpload' AND Xtype ='U')
BEGIN
CREATE TABLE Cs2Cn_Prk_StatusUpload
(
	SlNo				NUMERIC(38, 0) IDENTITY(1,1) NOT NULL,
	DistCode			NVARCHAR(100) NULL,
	ProcessName			NVARCHAR(100) NULL,
	Code				NVARCHAR(100) NULL,
	Fromdate			DATETIME,
	Todate				DATETIME,
	Status				INT,
	UpdatedDate			DATETIME,
	UploadFlag			NVARCHAR(1) NULL,
	SyncId				NUMERIC(38, 0) NULL,
	ServerDate			DATETIME NULL
)
END
GO
IF EXISTS(SELECT * FROM SYS.OBJECTS WHERE name='Proc_Cs2Cn_StatusUpload' and type='P')
DROP PROC Proc_Cs2Cn_StatusUpload
GO
CREATE PROCEDURE Proc_Cs2Cn_StatusUpload
(
	@Po_ErrNo	INT OUTPUT,
	@ServerDate DATETIME
)
AS
/*********************************
* PROCEDURE		: Proc_Cs2Cn_StatusUpload
* PURPOSE		: To Extract Scheme & Contract Pricing status Upload for SAP Release
* CREATED		: MOHANA S
* CREATED DATE	: 31-05-2020
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
--------------------------------------------------------------------------------
* 06-07-2020    Deepak Philip   BZ          PARLESECS/0720/027      Upload blocked.
***************************************************************************************************/ 
SET NOCOUNT ON
BEGIN
	DECLARE @DistCode	As nVarchar(50)
	
	SET @Po_ErrNo=0
	
	DELETE FROM Cs2Cn_Prk_StatusUpload WHERE UploadFlag='Y'
	RETURN
	--IF EXISTS (SELECT '*' FROM Cs2Cn_Prk_StatusUpload )
	--BEGIN
	--	RETURN
	--END
	
	SELECT @DistCode = DistributorCode FROM Distributor
	
	IF EXISTS (SELECT * FROM MonthEndClosing WHERE StkMonth='MAY' AND StkYear ='2020')
	BEGIN
		INSERT INTO Cs2Cn_Prk_StatusUpload(DistCode,ProcessName,Code,Fromdate,Todate,Status,UpdatedDate,UploadFlag,ServerDate)		
		SELECT DISTINCT @DistCode,'SchemeMaster',CmpSchCode,SchValidFrom,SchValidTill,SchStatus,AuthDate,'N',@ServerDate 
		FROM SchemeMaster (NOLOCK)
		WHERE SchValidTill>'2020-05-31'
		UNION ALL
		SELECT DISTINCT @DistCode,'ContractPricing',ComConRefNo,ValidFromDate,ValidTillDate,Status,AuthDate,'N',@ServerDate 
		FROM ContractPricingMaster (NOLOCK)
		WHERE ValidTillDate	>'2020-05-31'	
	END	 
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Cn2Cs_SpecialDiscount' AND TYPE='P')
DROP PROCEDURE Proc_Cn2Cs_SpecialDiscount
GO
/*    
BEGIN TRAN   
EXEC Proc_Cn2Cs_SpecialDiscount 0  
ROLLBACK TRAN  
*/    
CREATE PROCEDURE Proc_Cn2Cs_SpecialDiscount
(    
 @Po_ErrNo INT OUTPUT    
)    
AS    
/*********************************    
* PROCEDURE  : Proc_Cn2Cs_SpecialDiscount    
* PURPOSE  : To insert SpecialRateDetails in Productbatchdetails table    
* CREATED  :  Muthukrishnan.G.P    
* CREATED DATE :  31-12-2012    
* MODIFIED      :       
* DATE AUTHOR   : DESCRIPTION    
------------------------------------------------    
* {date}  {developer}  {brief modification description}    
* 2013-03-01 Vijendra Kumar  CR(PM)-CCRSTPVM0001    
* 05-10-2015 Mahesh Babu D      Tax Not Attached for Product  ICRSTPAR1798    
* 28-12-2015 Mahesh Babu D      Selling Rate Spl Rate Calc   ICRSTPAR1960     
* 04-06-2019 MOHANA   CR CRCRSTPAR0058   INCLUDED CATEGORY WISE DOWNLOAD FOR SPL RATE    
* 29-07-2019    Lakshman M  SR  ILCRSTPAR5341   while downloading refnocode is null  we will created Dummy reference no. after special price got downloaded.    
* 22-08-2019    Lakshman M  SR  ILCRSTPAR5594   Contract pricing Retailer category wsie validation  
* 04-09-2019    MOHANA S  SR ILCRSTPAR5800   INCLUDED RETAILER WISE CONTRACT PRICING   
*********************************/    
SET NOCOUNT ON    
BEGIN    
 DECLARE @RtrHierLevelCode   AS  NVARCHAR(100)    
 DECLARE @RtrHierLevelValueCode  AS  NVARCHAR(100)    
 DECLARE @RtrCode    AS  NVARCHAR(100)    
 DECLARE @PrdCCode    AS  NVARCHAR(100)    
 DECLARE @PrdBatCode    AS  NVARCHAR(100)    
 DECLARE @PrdBatCodeAll   AS  NVARCHAR(100)    
 DECLARE @PriceCode    AS  NVARCHAR(4000)    
 DECLARE @Disperc                AS  NUMERIC(38,6)    
 DECLARE @SplRate    AS  NUMERIC(38,6)    
 DECLARE @PrdCtgValMainId  AS INT    
 DECLARE @CtgLevelId    AS  INT    
 DECLARE @CtgMainId    AS  INT    
 DECLARE @RtrId      AS  INT    
 DECLARE @PrdId      AS  INT    
 DECLARE @PrdBatId    AS  INT    
 DECLARE @PriceId    AS  INT    
 DECLARE @ContractReq   AS  INT    
 DECLARE @SRReCalc    AS  INT    
 DECLARE @ReCalculatedSR   AS  NUMERIC(38,6)    
 DECLARE @EffFromDate   AS  DATETIME    
 DECLARE @EffToDate    AS  DATETIME    
 DECLARE @CreatedDate   AS  DATETIME    
 DECLARE @MulTaxGrp    AS  INT    
 DECLARE @TaxGroupId    AS INT    
 DECLARE @MulRtrId    AS INT    
 DECLARE @MulTaxGroupId   AS  INT    
 DECLARE @DownldSplRate   AS  NUMERIC(38,6)    
 DECLARE @ContHistExist   AS INT    
 DECLARE @ContractPriceIds  AS NVARCHAR(1000)    
 DECLARE @RefPriceId    AS INT    
 DECLARE @CmpId     AS INT    
 DECLARE @CmpPrdCtgId   AS INT    
 DECLARE @RefRtrId    AS INT    
 DECLARE @ErrStatus    AS INT    
 DECLARE @RtrTaxGrp AS INT    
 ------------------- Added By lakshman M Dated ON 29-07-2019 PMS ID: ILCRSTPAR5341    
 DECLARE @Distcode AS NVarchar(20)    
 --DECLARE @Prefixdatemonth As NVARchar(50)    
 --DECLARE @PrefixdatemonthTime AS NVARchar(50)    
 SET @Po_ErrNo=0    
 SET @ErrStatus=0    
 SET @RtrTaxGrp=0    

 RETURN
 --SELECT @Distcode='CP-'+ Substring(DistributorCode,1,4)  FROM Distributor     
 --SELECT @Prefixdatemonth =cast(replace(convert( VARCHAR(10),getdate(),121),'-','') as NVARCHAR(10))+''+replace(convert(VARCHAR(5),getdate(),108),':','')    
 --SELECT @PrefixdatemonthTime = @Distcode+'-'+@Prefixdatemonth    
 --UPDATE A SET CPRefCode=@PrefixdatemonthTime,CPRefName=@PrefixdatemonthTime  FROM Cn2Cs_Prk_SpecialDiscount A where CPRefCode is null and CPRefName is null    
 -------------------------- Till here ----------------------------------    
 SET @ContractReq=1    
 SET @SRReCalc=2    
    TRUNCATE TABLE ETL_Prk_BLContractPricing     
 CREATE TABLE #SpecialRateToAvoid    
 (    
  Slno    BIGINT,    
  RtrHierLevel  NVARCHAR(100) COLLATE DATABASE_DEFAULT,    
  RtrHierValue  NVARCHAR(100) COLLATE DATABASE_DEFAULT,    
  RtrCode    NVARCHAR(100) COLLATE DATABASE_DEFAULT,    
  PrdCCode   NVARCHAR(100) COLLATE DATABASE_DEFAULT,    
  PrdBatCode   NVARCHAR(100) COLLATE DATABASE_DEFAULT,    
  EffectiveFromDate DATETIME    
 )    
 CREATE TABLE #RetailerCategory    
 (    
 CHANNEL NVARCHAR(100),    
 GRP NVARCHAR(100)    
 )    
INSERT INTO #RetailerCategory      
SELECT DISTINCT R.CtgCode AS CHANNEL,RC.CtgCode  AS GRP    
FROM RetailerCategory R(nolock)    
INNER JOIN RetailerCategory RC(nolock)  ON R.CtgMainId  = RC.CtgLinkId     
INNER JOIN RetailerValueClass RVC(nolock) ON  RC.CtgMainId=RVC.CtgMainId    
--INNER JOIN RetailerValueClassMap RCM(nolock) ON RCM.RtrValueClassId=RVC.RtrClassId    
DELETE A FROM Cn2Cs_Prk_SpecialDiscount A(NOLOCK) WHERE RetCatLevelValue NOT IN (SELECT GRP FROm #RetailerCategory) AND RetCategoryLevel ='Group'  
DELETE A FROM Cn2Cs_Prk_SpecialDiscount A(NOLOCK)  WHERE RetCatLevelValue NOT IN (SELECT CHANNEL FROm #RetailerCategory) AND RetCategoryLevel ='Channel'  
  EXEC Proc_CalculateSpecialDiscountAftRate    
 --SELECT DISTINCT CtgCode    
 --FROM RetailerCategory RC     
 --INNER JOIN RetailerValueClass RVC ON  RC.CtgMainId=RVC.CtgMainId    
 --INNER JOIN RetailerValueClassMap RCM ON RCM.RtrValueClassId=RVC.RtrClassId     
  ---Retailer Class Validation    
  --INSERT INTO #SpecialRateToAvoid(SlNo,RtrHierLevel,RtrHierValue,RtrCode,PrdCCode,PrdBatCode,EffectiveFromDate)    
  --SELECT DISTINCT T.SlNo,CtgLevelName,T.CtgCode,RtrCode,PrdCCode,PrdBatCode,T.EffectiveFromDate    
  --FROM TempSpecialRateDiscountProduct T    
  --WHERE NOT EXISTS(SELECT GRP FROM #RetailerCategory R WHERE R.GRP=T.CtgCode) AND rtrcode='ALL' AND CtgLevelName ='GROUP'    
  --UNION     
  --SELECT DISTINCT T.SlNo,CtgLevelName,T.CtgCode,RtrCode,PrdCCode,PrdBatCode,T.EffectiveFromDate    
  --FROM TempSpecialRateDiscountProduct T    
  --WHERE NOT EXISTS(SELECT CHANNEL FROM #RetailerCategory R WHERE R.CHANNEL=T.CtgCode) AND rtrcode='ALL' AND CtgLevelName ='CHANNEL'    
  --INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)    
  --SELECT DISTINCT 1,'Special Rate','Retailer','Retailer Not Attached to Category:'+RtrHierLevel+' Not Available' FROM #SpecialRateToAvoid    
  INSERT INTO #SpecialRateToAvoid(SlNo,RtrHierLevel,RtrHierValue,RtrCode,PrdCCode,PrdBatCode,EffectiveFromDate)    
  SELECT DISTINCT T.SlNo,CtgLevelName,T.CtgCode,RtrCode,PrdCCode,PrdBatCode,T.EffectiveFromDate    
  FROM TempSpecialRateDiscountProduct T    
  WHERE NOT EXISTS(SELECT CmpRtrCode  FROM Retailer R WHERE R.CmpRtrCode=T.RTRCODE)  AND CtgLevelName='ALL'    
  INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)    
  SELECT DISTINCT 1,'Special Rate','Retailer','Retailer Not Available :'+RtrCode  FROM #SpecialRateToAvoid    
  DELETE A FROM TempSpecialRateDiscountProduct A INNER JOIN #SpecialRateToAvoid B ON  
   A.Slno=B.Slno and A.CtgCode=B.RtrHierValue and A.Prdccode=B.Prdccode   
  --Product Batch Validation    
  --INSERT INTO #SpecialRateToAvoid(SlNo,RtrHierLevel,RtrHierValue,RtrCode,PrdCCode,PrdBatCode,EffectiveFromDate)    
  --SELECT DISTINCT 1,RetCategoryLevel,RetCatLevelValue,'ALL',PrdCategoryLevelValue,'ALL',EffFromDate     
  --FROM Cn2Cs_Prk_SpecialDiscount A (NOLOCK) WHERE DownLoadFlag = 'D' AND PrdCategoryLevel = 'Product'    
  --AND NOT EXISTS (SELECT DISTINCT PrdCCode FROM Product B (NOLOCK)     
  --INNER JOIN ProductBatch C (NOLOCK) ON B.PrdId = C.PrdId WHERE A.PrdCategoryLevelValue = B.PrdCCode)    
  --INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)    
  --SELECT DISTINCT 1,'Product','Product & ProductBatch','Product or Product Batch Not Available-'+PrdCategoryLevelValue    
  --FROM Cn2Cs_Prk_SpecialDiscount A (NOLOCK) WHERE DownLoadFlag = 'D' AND PrdCategoryLevel = 'Product'     
  --AND NOT EXISTS (SELECT DISTINCT PrdCCode FROM Product B (NOLOCK)     
  --INNER JOIN ProductBatch C (NOLOCK) ON B.PrdId = C.PrdId WHERE A.PrdCategoryLevelValue = B.PrdCCode)    
 INSERT INTO SpecialDiscountDownload_track (Slno,Productcode,ProductBatch,ErrorDescription,Createddate,CpRefcode)  
 SELECT DISTINCT 1,'Product','Product & ProductBatch','Product or Product Batch Not Available-'+PrdCategoryLevelValue,Getdate(),CpRefcode    
 FROM Cn2Cs_Prk_SpecialDiscount A (NOLOCK) WHERE DownLoadFlag = 'D' AND PrdCategoryLevel = 'Product'     
 AND NOT EXISTS (SELECT DISTINCT PrdCCode FROM Product B (NOLOCK)     
 INNER JOIN ProductBatch C (NOLOCK) ON B.PrdId = C.PrdId WHERE A.PrdCategoryLevelValue = B.PrdCCode)  
 SELECT A.* INTO #Cn2Cs_Prk_SpecialDisc FROM Cn2Cs_Prk_SpecialDiscount A (NOLOCK) WHERE DownLoadFlag = 'D' AND PrdCategoryLevel = 'Product'     
 AND NOT EXISTS (SELECT DISTINCT PrdCCode FROM Product B (NOLOCK)     
 INNER JOIN ProductBatch C (NOLOCK) ON B.PrdId = C.PrdId WHERE A.PrdCategoryLevelValue = B.PrdCCode)  
 DELETE A FROM Cn2Cs_Prk_SpecialDiscount A (NOLOCK) WHERE DownLoadFlag = 'D' AND PrdCategoryLevel = 'Product'     
 AND NOT EXISTS (SELECT DISTINCT PrdCCode FROM Product B (NOLOCK)     
 INNER JOIN ProductBatch C (NOLOCK) ON B.PrdId = C.PrdId WHERE A.PrdCategoryLevelValue = B.PrdCCode)  
  --Till Here     
  ---Retailer Category Level Validation    
  INSERT INTO #SpecialRateToAvoid(SlNo,RtrHierLevel,RtrHierValue,RtrCode,PrdCCode,PrdBatCode,EffectiveFromDate)    
  SELECT DISTINCT SlNo,CtgLevelName,CtgCode,RtrCode,PrdCCode,PrdBatCode,EffectiveFromDate    
  FROM TempSpecialRateDiscountProduct    
  WHERE CtgLevelName NOT IN (SELECT CtgLevelName FROM RetailerCategoryLevel)  AND ISNULL(RtrCode,'ALL') ='ALL'  
  INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)    
  SELECT DISTINCT 1,'Special Rate','Retailer Category Level','Retailer Category Level:'+CtgLevelName+' Not Available' FROM TempSpecialRateDiscountProduct    
  WHERE CtgLevelName NOT IN (SELECT CtgLevelName FROM RetailerCategoryLevel)   AND ISNULL(RtrCode,'ALL') ='ALL'  
  DELETE A FROM TempSpecialRateDiscountProduct A INNER JOIN #SpecialRateToAvoid B ON A.Slno=B.Slno and A.CtgCode=B.RtrHierValue and A.Prdccode=B.Prdccode--Modified by Raja.C    
  ----    
        --ProductTaxGroup Validation       
  INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)    
  SELECT DISTINCT 2,'Tax Group','TaxGroup Not Attached','Tax Group for :'+PrdCCode+' Not Available' FROM TempSpecialRateDiscountProduct    
  WHERE PrdCCode  IN (SELECT PrdCCode FROM Product(NOLOCK) WHERE TaxGroupId=0 and prdstatus =1)      
  DELETE A FROM TempSpecialRateDiscountProduct A INNER JOIN Product B(NOLOCK)  ON A.PrdCCode=B.PrdCCode and B.TaxGroupId=0     
  --Till here    
  ---Retailer Category Code Validation    
  INSERT INTO #SpecialRateToAvoid(SlNo,RtrHierLevel,RtrHierValue,RtrCode,PrdCCode,PrdBatCode,EffectiveFromDate)    
  SELECT DISTINCT SlNo,CtgLevelName,CtgCode,RtrCode,PrdCCode,PrdBatCode,EffectiveFromDate    
  FROM TempSpecialRateDiscountProduct    
  WHERE CtgCode NOT IN (SELECT CtgCode FROM RetailerCategory)     AND ISNULL(RtrCode,'ALL') ='ALL'     
  INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)    
  SELECT DISTINCT 1,'Special Rate','Retailer Category Level Value','Retailer Category Level Value:'+CtgCode+' Not Available' FROM TempSpecialRateDiscountProduct    
  WHERE CtgCode NOT IN (SELECT CtgCode FROM RetailerCategory)   AND ISNULL(RtrCode,'ALL') ='ALL'     
  DELETE A FROM TempSpecialRateDiscountProduct A INNER JOIN #SpecialRateToAvoid B ON A.Slno=B.Slno and A.CtgCode=B.RtrHierValue and A.Prdccode=B.Prdccode  
   
  --Eeffective From Date Validation    
  INSERT INTO #SpecialRateToAvoid(SlNo,RtrHierLevel,RtrHierValue,RtrCode,PrdCCode,PrdBatCode,EffectiveFromDate)    
  SELECT DISTINCT SlNo,CtgLevelName,CtgCode,RtrCode,PrdCCode,PrdBatCode,EffectiveFromDate    
  FROM TempSpecialRateDiscountProduct    
  WHERE CONVERT(VARCHAR(10),EffectiveFromDate,121)>CONVERT(VARCHAR(10),GETDATE(),121) 
     
  INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)    
  SELECT DISTINCT 1,'Special Rate','Effective From Date','Effective Date :'+CAST(EffectiveFromDate AS NVARCHAR(12))+' is greater '     
  FROM TempSpecialRateDiscountProduct    
  WHERE CONVERT(VARCHAR(10),EffectiveFromDate,121)>CONVERT(VARCHAR(10),GETDATE(),121) 
     
  DELETE A FROM TempSpecialRateDiscountProduct A INNER JOIN #SpecialRateToAvoid B ON A.Slno=B.Slno and A.CtgCode=B.RtrHierValue  and A.Prdccode=B.Prdccode --Modified by Raja.C    
  IF NOT EXISTS(SELECT * FROM TempSpecialRateDiscountProduct)    
  BEGIN    
   RETURN    
  END    
  SELECT @CmpId=ISNULL(CmpId,0) FROM Company C WHERE DefaultCompany=1    
  IF EXISTS(Select 'X' FROM TaxSettingMaster A (NOLOCK)     
  INNER JOIN  TaxGroupSetting B (NOLOCK) ON A.RtrId=B.TaxGroupId     
  WHERE TaxGroup=1 and A.TaxType='GST')    
  BEGIN        
   Select @RtrTaxGrp=MIN(Distinct A.RtriD) FROM TaxSettingMaster A (NOLOCK)     
   INNER JOIN  TaxGroupSetting B (NOLOCK) ON A.RtrId=B.TaxGroupId     
   WHERE TaxGroup=1 and A.TaxType='GST' AND RtrGroup='RTRINTRA'       
  END     
  ELSE    
  BEGIN    
   SELECT @RtrTaxGrp=MIN(Distinct A.RtriD) FROM TaxSettingMaster A (NOLOCK)     
   INNER JOIN  TaxGroupSetting B (NOLOCK) ON A.RtrId=B.TaxGroupId     
   WHERE TaxGroup=1 and A.TaxType='VAT'        
  END    
  SELECT DISTINCT ISNULL(Prk.CtgLevelName,'') as RtrHierLevelCode,ISNULL(Prk.CtgCode,'') as RtrHierLevelValueCode,    
  RtrCode,0 as RTRID,ISNULL(Prk.PrdCCode,'') as PrdCCode,ISNULL(Prk.PrdBatCode,'') as PrdBatCodeAll,  
  ISNULL(DiscPer,0) as Disperc,ISNULL(SpecialSellingRate,0) as SplRate,    
  ISNULL(Prk.EffectiveFromDate,GETDATE()) as EffFromDate,ISNULL(Prk.EffectiveToDate,CONVERT(VARCHAR(10),GETDATE(),121)) as EffToDate,    
  ISNULL(CreatedDate,GETDATE()) as CreatedDate,ISNULL(P.PrdId,0) AS PrdId,    
  ISNULL(RCL.CtgLevelId,0) AS CtgLevelId,ISNULL(RC.CtgMainId,0) AS CtgMainId,    
  Prdbatid,Prk.PrdCtgValMainId,CmpPrdCtgId,ISNULL(Prk.ApplyOn,0) AS ApplyOn,ISNULL(Prk.[Type],0) AS [Type],CPRefCode,CPRefName     
  INTO #SplPriceDetails    
  FROM TempSpecialRateDiscountProduct Prk(nolock)     
  INNER JOIN Product P(nolock) ON Prk.PrdCCode=P.PrdCCode     
  INNER JOIN Productbatch PB(nolock) ON PB.prdid=P.Prdid and PB.PrdBatCode=Prk.PrdBatCode    
  INNER JOIN ProductCategoryValue PCV(nolock) ON P.PrdCtgValMainId=PCV.PrdCtgValMainId    
  INNER JOIN RetailerCategoryLevel RCL(nolock) ON Prk.CtgLevelName=RCL.CtgLevelName     
  INNER JOIN RetailerCategory RC(nolock) ON Prk.CtgCode=RC.CtgCode     
  WHERE  Prk.EffectiveFromDate<=GETDATE()   AND Prk.PrdCtgValMainId <> 0 AND PRK.RTRCODE='ALL'  
  INSERT INTO #SplPriceDetails    
  SELECT DISTINCT ISNULL(Prk.CtgLevelName,'') as RtrHierLevelCode,ISNULL(Prk.CtgCode,'') as RtrHierLevelValueCode,    
  RtrCode,0 as RTRID,ISNULL(Prk.PrdCCode,'') as PrdCCode,ISNULL(Prk.PrdBatCode,'') as PrdBatCodeAll,  
  ISNULL(DiscPer,0) as Disperc,ISNULL(SpecialSellingRate,0) as SplRate,    
  ISNULL(Prk.EffectiveFromDate,GETDATE()) as EffFromDate,ISNULL(Prk.EffectiveToDate,CONVERT(VARCHAR(10),GETDATE(),121)) as EffToDate,    
  ISNULL(CreatedDate,GETDATE()) as CreatedDate,ISNULL(P.PrdId,0) AS PrdId,    
  ISNULL(RCL.CtgLevelId,0) AS CtgLevelId,ISNULL(RC.CtgMainId,0) AS CtgMainId,    
  Prdbatid,0,0,ISNULL(Prk.ApplyOn,0) AS ApplyOn,ISNULL(Prk.[Type],0) AS [Type],CPRefCode,CPRefName     
  FROM TempSpecialRateDiscountProduct Prk(nolock)     
  INNER JOIN Product P(nolock) ON Prk.PrdCCode=P.PrdCCode     
  INNER JOIN Productbatch PB(nolock) ON PB.prdid=P.Prdid and PB.PrdBatCode=Prk.PrdBatCode    
  INNER JOIN RetailerCategoryLevel RCL(nolock) ON Prk.CtgLevelName=RCL.CtgLevelName     
  INNER JOIN RetailerCategory RC(nolock) ON Prk.CtgCode=RC.CtgCode     
  WHERE  Prk.EffectiveFromDate<=GETDATE() AND Prk.PrdCtgValMainId = 0 AND  RTRCODE='ALL'  
  --INSERT INTO #SplPriceDetails    
  --SELECT DISTINCT ISNULL(Prk.CtgLevelName,'') as RtrHierLevelCode,ISNULL(Prk.CtgCode,'') as RtrHierLevelValueCode,    
  --RtrCode,RTRID,ISNULL(Prk.PrdCCode,'') as PrdCCode,ISNULL(Prk.PrdBatCode,'') as PrdBatCodeAll,  
  --ISNULL(DiscPer,0) as Disperc,ISNULL(SpecialSellingRate,0) as SplRate,    
  --ISNULL(Prk.EffectiveFromDate,GETDATE()) as EffFromDate,ISNULL(Prk.EffectiveToDate,'2013-12-31') as EffToDate,    
  --ISNULL(CreatedDate,GETDATE()) as CreatedDate,ISNULL(P.PrdId,0) AS PrdId,    
  --ISNULL(RCL.CtgLevelId,0) AS CtgLevelId,ISNULL(RC.CtgMainId,0) AS CtgMainId,    
  --Prdbatid,Prk.PrdCtgValMainId,CmpPrdCtgId,ISNULL(Prk.ApplyOn,0) AS ApplyOn,ISNULL(Prk.[Type],0) AS [Type],CPRefCode,CPRefName      
  --FROM TempSpecialRateDiscountProduct Prk   (nolock)  
  --INNER JOIN Product P (nolock)ON Prk.PrdCCode=P.PrdCCode     
  --INNER JOIN Productbatch PB (nolock)ON PB.prdid=P.Prdid and PB.PrdBatCode=Prk.PrdBatCode    
  --INNER JOIN ProductCategoryValue PCV(nolock) ON P.PrdCtgValMainId=PCV.PrdCtgValMainId    
  --INNER JOIN RetailerCategoryLevel RCL(nolock) ON Prk.CtgLevelName=RCL.CtgLevelName     
  --INNER JOIN RetailerCategory RC(nolock) ON Prk.CtgCode=RC.CtgCode    
  --INNER JOIN RetailerCategory R (nolock)ON R.CtgLinkCode =RC.CtgCode     
  --WHERE  Prk.EffectiveFromDate<=GETDATE()   AND Prk.PrdCtgValMainId <> 0 AND PRK.RTRCODE='ALL'    
  --INSERT INTO #SplPriceDetails    
  --SELECT DISTINCT ISNULL(Prk.CtgLevelName,'') as RtrHierLevelCode,ISNULL(Prk.CtgCode,'') as RtrHierLevelValueCode,    
  --RtrCode,ISNULL(Prk.PrdCCode,'') as PrdCCode,ISNULL(Prk.PrdBatCode,'') as PrdBatCodeAll,    
  --ISNULL(DiscPer,0) as Disperc,ISNULL(SpecialSellingRate,0) as SplRate,    
  --ISNULL(Prk.EffectiveFromDate,GETDATE()) as EffFromDate,ISNULL(Prk.EffectiveToDate,'2013-12-31') as EffToDate,    
  --ISNULL(CreatedDate,GETDATE()) as CreatedDate,ISNULL(P.PrdId,0) AS PrdId,    
  --ISNULL(RCL.CtgLevelId,0) AS CtgLevelId,ISNULL(RC.CtgMainId,0) AS CtgMainId,    
  --Prdbatid,0,0,ISNULL(Prk.ApplyOn,0) AS ApplyOn,ISNULL(Prk.[Type],0) AS [Type],CPRefCode,CPRefName     
  --FROM TempSpecialRateDiscountProduct Prk (nolock)    
  --INNER JOIN Product P (nolock)ON Prk.PrdCCode=P.PrdCCode     
  --INNER JOIN Productbatch PB(nolock) ON PB.prdid=P.Prdid and PB.PrdBatCode=Prk.PrdBatCode    
  --INNER JOIN RetailerCategoryLevel RCL (nolock)ON Prk.CtgLevelName=RCL.CtgLevelName     
  --INNER JOIN RetailerCategory RC (nolock)ON Prk.CtgCode=RC.CtgCode     
  --INNER JOIN RetailerCategory R (nolock)ON R.CtgLinkCode =RC.CtgCode     
  --WHERE  Prk.EffectiveFromDate<=GETDATE() AND Prk.PrdCtgValMainId = 0 AND  RTRCODE='ALL'    
 INSERT INTO #SplPriceDetails  
  SELECT DISTINCT ISNULL(Prk.CtgLevelName,'') as RtrHierLevelCode,ISNULL(Prk.CtgCode,'') as RtrHierLevelValueCode,  
  CMPRtrCode,RTRID,ISNULL(Prk.PrdCCode,'') as PrdCCode,ISNULL(Prk.PrdBatCode,'') as PrdBatCodeAll,  
  ISNULL(DiscPer,0) as Disperc,ISNULL(SpecialSellingRate,0) as SplRate,  
  ISNULL(Prk.EffectiveFromDate,GETDATE()) as EffFromDate,ISNULL(Prk.EffectiveToDate,CONVERT(VARCHAR(10),GETDATE(),121)) as EffToDate,  
  ISNULL(CreatedDate,GETDATE()) as CreatedDate,ISNULL(P.PrdId,0) AS PrdId,  
  0 AS CtgLevelId,0 AS CtgMainId,  
  Prdbatid,Prk.PrdCtgValMainId,CmpPrdCtgId,ISNULL(Prk.ApplyOn,0) AS ApplyOn,ISNULL(Prk.[Type],0) AS [Type],CPRefCode,CPRefName     
  FROM TempSpecialRateDiscountProduct Prk   
  INNER JOIN Product P ON Prk.PrdCCode=P.PrdCCode   
  INNER JOIN Productbatch PB ON PB.prdid=P.Prdid and PB.PrdBatCode=Prk.PrdBatCode  
  INNER JOIN ProductCategoryValue PCV ON P.PrdCtgValMainId=PCV.PrdCtgValMainId  
  INNER JOIN RETAILER R ON R.CmpRtrCode = PRK.RtrCode    
  WHERE  Prk.EffectiveFromDate<=GETDATE()   AND Prk.PrdCtgValMainId <> 0 AND prk.RTRCODE<>'ALL'  
  INSERT INTO #SplPriceDetails  
  SELECT DISTINCT ISNULL(Prk.CtgLevelName,'') as RtrHierLevelCode,ISNULL(Prk.CtgCode,'') as RtrHierLevelValueCode,  
  CmpRtrCode,RTRID ,ISNULL(Prk.PrdCCode,'') as PrdCCode,ISNULL(Prk.PrdBatCode,'') as PrdBatCodeAll,  
  ISNULL(DiscPer,0) as Disperc,ISNULL(SpecialSellingRate,0) as SplRate,  
  ISNULL(Prk.EffectiveFromDate,GETDATE()) as EffFromDate,ISNULL(Prk.EffectiveToDate,CONVERT(VARCHAR(10),GETDATE(),121)) as EffToDate,  
  ISNULL(CreatedDate,GETDATE()) as CreatedDate,ISNULL(P.PrdId,0) AS PrdId,  
  0 AS CtgLevelId,0 AS CtgMainId,  
  Prdbatid,0,0,ISNULL(Prk.ApplyOn,0) AS ApplyOn,ISNULL(Prk.[Type],0) AS [Type],CPRefCode,CPRefName   
  FROM TempSpecialRateDiscountProduct Prk   
  INNER JOIN Product P ON Prk.PrdCCode=P.PrdCCode   
  INNER JOIN Productbatch PB ON PB.prdid=P.Prdid and PB.PrdBatCode=Prk.PrdBatCode  
  INNER JOIN RETAILER R ON R.CmpRtrCode = PRK.RtrCode   
  WHERE  Prk.EffectiveFromDate<=GETDATE() AND Prk.PrdCtgValMainId = 0 AND prk.RTRCODE<>'ALL'     
  ---Tax Calculation    
  DECLARE @PrdIdTax as BIGINT    
  DECLARE @PrdbatIdTax AS BIGINT    
  DECLARE Cur_Tax CURSOR    
  FOR     
  SELECT DISTINCT PrdId,PrdbatId FROM #SplPriceDetails      
  OPEN Cur_Tax     
  FETCH NEXT FROM Cur_Tax INTO @PrdIdTax,@PrdbatIdTax    
  WHILE @@FETCH_STATUS=0    
  BEGIN     
    EXEC Proc_SellingTaxCalCulation @PrdIdTax,@PrdbatIdTax    
  FETCH NEXT FROM Cur_Tax INTO @PrdIdTax,@PrdbatIdTax      
  END      
  CLOSE Cur_Tax    
  DEALLOCATE Cur_Tax     
  DECLARE @MaxPriceId as BIGINT    
  SELECT @MaxPriceId=ISNULL(MAX(PriceId),0) from ProductBatchDetails    
  --SELECT A.*,CAST(SplRate*100/(100+TaxPercentage) AS NUMERIC(38,6)) AS NewSellRate    
  SELECT A.*,CASE A.ApplyOn WHEN 1 THEN     
           (CASE [Type] WHEN 1 THEN (SplRate*100)/(100+TaxPercentage)    
            WHEN 2 THEN (SplRate*100)/(100+TaxPercentage) END)    
  ELSE CAST(SplRate AS NUMERIC(38,6)) END AS NewSellRate,   -- MODIFIED FOR ICRSTPAR1960     
  @MaxPriceId+ROW_NUMBER() OVER(Order by A.PrdId,A.PrdBatId,CtgLevelId,CtgMainId,A.PrdCtgValMainId,CmpPrdCtgId,RtrCode)    
  as NewPriceId    
  INTO #PriceMaster    
  FROM #SplPriceDetails A(nolock) INNER JOIN ProductBatchTaxPercent B (nolock) ON A.PrdId=B.PrdId    
  AND A.PrdBatId=b.PrdBatId    
  --SELECT A.*,CASE A.ApplyOn WHEN 1 THEN     
  --         (CASE [Type] WHEN 1 THEN SplRate-(SplRate*(TaxPercentage/100))    
  --          WHEN 2 THEN SplRate-(SplRate*(TaxPercentage/100)) END)    
  --ELSE CAST(SplRate*100/(100+TaxPercentage) AS NUMERIC(38,6)) END AS NewSellRate    
  --,@MaxPriceId+ROW_NUMBER() OVER(Order by A.PrdId,A.PrdBatId,CtgLevelId,CtgMainId,PrdCtgValMainId,CmpPrdCtgId)    
  --as NewPriceId    
  --INTO #PriceMaster    
  --FROM #SplPriceDetails A INNER JOIN ProductBatchTaxPercent B ON A.PrdId=B.PrdId    
  --AND A.PrdBatId=b.PrdBatId    
  --SELECT * FROM ProductBatchTaxPercent WHERE PRDID=2556    
  SELECT PrdbatId,MAX(PriceId) as PriceId     
  INTO #ProductbatchDetails     
  FROM ProductBatchDetails GROUP BY PrdbatId    
  INSERT INTO ProductBatchDetails(    
  PriceId,PrdBatId,PriceCode,BatchSeqId,SLNo,PrdBatDetailValue,DefaultPrice,PriceStatus,    
  Availability,LastModBy,LastModDate,AuthId,AuthDate,XMLUpload)    
  SELECT DISTINCT     
  NewPriceId,A.PrdBatId,PrdBatCode+'-SplRate-'+CAST(NewSellRate AS NVARCHAR(100))    
      +CAST(GETDATE() AS NVARCHAR(20)) ,        
  D.BatchSeqId,D.SlNo,    
    (CASE BC.SelRte WHEN 1 THEN NewSellRate ELSE D.PrdBatDetailValue END) AS SelRte,    
    0,1,1,1,GETDATE(),1,GETDATE(),0     
  FROM #PriceMaster A  (nolock)   
  INNER JOIN #ProductbatchDetails B (nolock)ON A.PrdBatId=B.PrdBatId    
  INNER JOIN ProductBatchDetails D (nolock)ON D.PrdBatId=A.PrdBatId and D.PrdBatId=B.PrdBatId and D.PriceId=B.PriceId    
  INNER JOIN BatchCreation BC (nolock)ON BC.BatchSeqId=D.BatchSeqId AND D.SlNo=BC.SlNo    
  INNER JOIN ProductBatch C (nolock)ON C.PrdBatId=A.PrdBatId and C.PrdBatId=B.PrdBatId and C.PrdId=A.PRdId    
  and D.PrdBatId=C.PrdBatId    
  ORder by NewPriceId,A.PrdBatId,D.SlNo    
  UPDATE Counters SET CurrValue=(SELECT ISNULL(Max(PriceId),0) FROM ProductBatchDetails) WHERE TabName='ProductBatchDetails' AND FldName='PriceId'          
  --Contract Price Praking Table insert    
 INSERT INTO Cn2Cs_Prk_ContractPricing(CmpId,CtgLevelId,CtgMainId,RtrClassId,CmpPrdCtgId,PrdCtgValMainId,    
 RtrId,PrdId,PrdBatId,PriceId,DiscountPerc,FlatAmount,EffectiveDate,ToDate,CreatedDate,RtrTaxGroupId,ApplyOn,SplPrice,WithTax,ComConRefNo,ComConRefName)    
 SELECT DISTINCT @CmpId,CtgLevelId,CtgMainId,0,0,a.PrdCtgValMainId,CASE WHEN RtrCode='ALL' THEN '0' ELSE ISNULL(RtrCode,'') END,    
 Prdid,Prdbatid,NewPriceId,0,0,A.EffFromDate,A.EffToDate,A.CreatedDate,@RtrTaxGrp,A.ApplyON,SplPrice,SPWTax,B.CPRefCode,B.CPRefName    
 FROM #PriceMaster A (nolock) INNER JOIN Cn2Cs_Prk_SpecialDiscount B (nolock) ON A.RtrHierLevelCode = B.RetCategoryLevel     
 AND A.RtrHierLevelValueCode = B.RetCatLevelValue AND A.CPRefCode=B.CPRefCode  AND A.CPRefName = B.CPRefName    
 UNION ALL  
 SELECT DISTINCT @CmpId,CtgLevelId,CtgMainId,0,0,a.PRDCTGVALMAINID,rtrid,  
 Prdid,Prdbatid,NewPriceId,0,0,A.EffFromDate,A.EffToDate,A.CreatedDate,@RtrTaxGrp,A.ApplyON,SplPrice,SPWTax,B.CPRefCode,B.CPRefName  
 FROM #PriceMaster A INNER JOIN Cn2Cs_Prk_SpecialDiscount B ON A.RtrCode  = B.RetCatLevelValue   
 AND A.CPRefCode=B.CPRefCode  AND A.CPRefName = B.CPRefName --AND DiscPer>0   
  ---Special Rate Screen Table Insert and Update    
  INSERT INTO SpecialRateAftDownLoad(RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCCode,PrdBatCCode,    
  SplSelRate,FromDate,CreatedDate,DownloadedDate,ContractPriceIds,DiscountPerc)       
  SELECT DISTINCT RtrHierLevelCode,RtrHierLevelValueCode,RtrCode,PrdCCode,PrdBatCodeAll,    
  NewSellRate,EffFromDate,CreatedDate,GETDATE(),'-'+CAST(NewPriceId AS NVARCHAR(10))+'-',Disperc     
  FROM #PriceMaster A (nolock)    
  WHERE NOT EXISTS(      
   SELECT RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCCode,PrdBatCCode, FromDate     
   FROM     
   SpecialRateAftDownLoad B (nolock) WHERE B.RtrCtgCode=A.RtrHierLevelCode    
   and B.RtrCtgValueCode=A.RtrHierLevelValueCode and B.RtrCode= A.RtrCode    
   And B.PrdCCode=A.PrdCCode and B.PrdBatCCode=A.PrdBatCodeAll    
   and FromDate<=EffFromDate and B.SplSelRate=A.SplRate    
      )     
  --Added by Rajesh    
  INSERT INTO SpecialRateAftDownLoad_Calc(RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCCode,PrdBatCCode,    
  SplSelRate,FromDate,CreatedDate,DownloadedDate,ContractPriceIds,DiscountPerc,ApplyOn,TYPE)      
  SELECT DISTINCT RtrHierLevelCode,RtrHierLevelValueCode,RtrCode,PrdCCode,PrdBatCodeAll,    
  NewSellRate,EffFromDate,CreatedDate,GETDATE(),'-'+CAST(NewPriceId AS NVARCHAR(10))+'-',Disperc     
  ,ApplyOn,TYPE FROM #PriceMaster A (nolock)   
  WHERE NOT EXISTS(      
   SELECT RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCCode,PrdBatCCode, FromDate     
   FROM     
   SpecialRateAftDownLoad_Calc B (nolock) WHERE B.RtrCtgCode=A.RtrHierLevelCode    
   and B.RtrCtgValueCode=A.RtrHierLevelValueCode and B.RtrCode= A.RtrCode    
   And B.PrdCCode=A.PrdCCode and B.PrdBatCCode=A.PrdBatCodeAll    
   and FromDate<=EffFromDate and B.SplSelRate=A.SplRate    
    )    
  UPDATE B  SET SplSelRate=NewSellRate,ContractPriceIds='-'+CAST(NewPriceId AS NVARCHAR(10))+'-',DiscountPerc=Disperc    
  FROM #PriceMaster A INNER JOIN SpecialRateAftDownLoad_Calc B ON     
  B.RtrCtgCode=A.RtrHierLevelCode    
  and B.RtrCtgValueCode=A.RtrHierLevelValueCode and B.RtrCode= A.RtrCode    
  And B.PrdCCode=A.PrdCCode and B.PrdBatCCode=A.PrdBatCodeAll     
  AND B.DiscountPerc=A.DisPerc      
  WHERE  FromDate<=EffFromDate    
  --Till here     
  UPDATE B  SET SplSelRate=NewSellRate,ContractPriceIds='-'+CAST(NewPriceId AS NVARCHAR(10))+'-',DiscountPerc=Disperc    
  FROM #PriceMaster A INNER JOIN SpecialRateAftDownLoad B ON     
  B.RtrCtgCode=A.RtrHierLevelCode    
  and B.RtrCtgValueCode=A.RtrHierLevelValueCode and B.RtrCode= A.RtrCode    
  And B.PrdCCode=A.PrdCCode and B.PrdBatCCode=A.PrdBatCodeAll     
  AND B.DiscountPerc=A.DisPerc  -- Added FOR ICRSTPAR1960    
  WHERE  FromDate<=EffFromDate    
  ---    
  EXEC Proc_Validate_ContractPricing @Po_ErrNo=@ErrStatus    
  SET @Po_ErrNo=@ErrStatus    
  ------------ Added By Lakshman M ON -------  
  SELECT * INTO #SpecialRateAftDownload FROM SpecialRateAftDownload(Nolock) WHERE DownloadedDate >='2019-08-01'
  IF EXISTS (SELECT * FROM  Cn2Cs_Prk_SpecialDiscount WHERE PrdCategoryLevel='Category')    
  BEGIN    
   UPDATE A SET A.DownLoadFlag='Y' FROM Cn2Cs_Prk_SpecialDiscount A (NOLOCK)    
   INNER JOIN TBL_GR_BUILD_PH P on A.PrdCategoryLevelValue=P.Category_Code     
   INNER JOIN #SpecialRateAftDownload B (NOLOCK) ON B.PrdCCode=p.productcode    
   AND A.RetCategoryLevel = B.RtrCtgCode AND A.RetCatLevelValue = B.RtrCtgValueCode AND RtrCode='ALL' 
   AND PrdCategoryLevel='Category' 
   UPDATE A SET A.DownLoadFlag='Y' FROM Cn2Cs_Prk_SpecialDiscount A (NOLOCK)    
   INNER JOIN TBL_GR_BUILD_PH P(NOLOCK) on A.PrdCategoryLevelValue=P.Category_Code     
   INNER JOIN #SpecialRateAftDownload B (NOLOCK) ON B.PrdCCode=p.productcode     
   AND A.RetCatLevelValue = B.RtrCode    AND RtrCode<>'ALL' AND PrdCategoryLevel='Category'  
  END    
  IF EXISTS (SELECT * FROM  Cn2Cs_Prk_SpecialDiscount WHERE PrdCategoryLevel='Brand')    
  BEGIN     
   UPDATE A SET A.DownLoadFlag='Y' FROM Cn2Cs_Prk_SpecialDiscount A (NOLOCK)    
   INNER JOIN TBL_GR_BUILD_PH P(NOLOCK)  on A.PrdCategoryLevelValue=P.Brand_code     
   INNER JOIN #SpecialRateAftDownload B (NOLOCK) ON B.PrdCCode=p.productcode    
   AND A.RetCategoryLevel = B.RtrCtgCode AND A.RetCatLevelValue = B.RtrCtgValueCode AND RtrCode='ALL' 
   AND PrdCategoryLevel='Brand'  
   UPDATE A SET A.DownLoadFlag='Y' FROM Cn2Cs_Prk_SpecialDiscount A (NOLOCK)    
   INNER JOIN TBL_GR_BUILD_PH P(NOLOCK)  on A.PrdCategoryLevelValue=P.Brand_code     
   INNER JOIN #SpecialRateAftDownload B (NOLOCK) ON B.PrdCCode=p.productcode    
    AND A.RetCatLevelValue = B.RtrCode AND RtrCode<>'ALL' AND PrdCategoryLevel='Brand' 
  END    
  IF EXISTS (SELECT * FROM  Cn2Cs_Prk_SpecialDiscount WHERE PrdCategoryLevel='PriceSlot')    
  BEGIN     
   UPDATE A SET A.DownLoadFlag='Y' FROM Cn2Cs_Prk_SpecialDiscount A (NOLOCK)    
   INNER JOIN TBL_GR_BUILD_PH P(NOLOCK)  on A.PrdCategoryLevelValue=P.Priceslot_code     
   INNER JOIN #SpecialRateAftDownload B (NOLOCK) ON B.PrdCCode=p.productcode    
   AND A.RetCategoryLevel = B.RtrCtgCode AND A.RetCatLevelValue = B.RtrCtgValueCode  AND RtrCode='ALL' 
   AND PrdCategoryLevel='PriceSlot'
   UPDATE A SET A.DownLoadFlag='Y' FROM Cn2Cs_Prk_SpecialDiscount A (NOLOCK)    
   INNER JOIN TBL_GR_BUILD_PH P(NOLOCK)  on A.PrdCategoryLevelValue=P.Priceslot_code     
   INNER JOIN #SpecialRateAftDownload B (NOLOCK) ON B.PrdCCode=p.productcode    
    AND A.RetCatLevelValue = B.RtrCode  AND RtrCode<>'ALL' AND PrdCategoryLevel='PriceSlot'
  END    
  IF EXISTS (SELECT * FROM  Cn2Cs_Prk_SpecialDiscount WHERE PrdCategoryLevel='Flavor')    
  BEGIN    
   UPDATE A SET A.DownLoadFlag='Y' FROM Cn2Cs_Prk_SpecialDiscount A (NOLOCK)    
   INNER JOIN TBL_GR_BUILD_PH P(NOLOCK)  on A.PrdCategoryLevelValue=P.Flavor_Code      
   INNER JOIN #SpecialRateAftDownload B (NOLOCK) ON B.PrdCCode=p.productcode    
   AND A.RetCategoryLevel = B.RtrCtgCode AND A.RetCatLevelValue = B.RtrCtgValueCode AND RtrCode='ALL' 
   AND PrdCategoryLevel='Flavor'  
   UPDATE A SET A.DownLoadFlag='Y' FROM Cn2Cs_Prk_SpecialDiscount A (NOLOCK)    
   INNER JOIN TBL_GR_BUILD_PH P(NOLOCK)  on A.PrdCategoryLevelValue=P.Flavor_Code      
   INNER JOIN #SpecialRateAftDownload B (NOLOCK) ON B.PrdCCode=p.productcode    
    AND A.RetCatLevelValue = B.RtrCode  AND RtrCode<>'ALL'  
    AND PrdCategoryLevel='Flavor'
  END    
 ------------- Till Here --------------    
  --IF @Po_ErrNo=0    
  --BEGIN     
   UPDATE A SET A.DownLoadFlag='Y' FROM Cn2Cs_Prk_SpecialDiscount A (NOLOCK)     
   INNER JOIN #SpecialRateAftDownload B (NOLOCK) ON A.PrdCategoryLevelValue = B.PrdCCode     
   AND A.RetCategoryLevel = B.RtrCtgCode AND A.RetCatLevelValue = B.RtrCtgValueCode AND RtrCode='ALL'   
   AND PrdCategoryLevel='Product'
   UPDATE A SET A.DownLoadFlag='Y' FROM Cn2Cs_Prk_SpecialDiscount A (NOLOCK)     
   INNER JOIN #SpecialRateAftDownload B (NOLOCK) ON A.PrdCategoryLevelValue = B.PrdCCode     
   AND A.RetCatLevelValue = B.RtrCode  AND RtrCode<>'ALL' AND PrdCategoryLevel='Product'
   --INSERT FOR REMOVED  
   IF EXISTS (SELECT * FROM #Cn2Cs_Prk_SpecialDisc WHERE DownLoadFlag ='D')  
   BEGIN  
    INSERT INTO Cn2Cs_Prk_SpecialDiscount  
    SELECT * FROM #Cn2Cs_Prk_SpecialDisc WHERE DownLoadFlag ='D'  
   END
  --END    
  ----ADDED BY MOHANA     
  INSERT INTO SpecialRate_Track(RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCtgLevel,Prdccode,PrdCtgcode,DiscountPerc,ApplyOn ,Type,FromDate,CreatedDate,DownloadedDate,CpRefNo)    
  SELECT DISTINCT A.RetCategoryLevel,CASE RetCategoryLevel WHEN 'RETAILER' THEN 'ALL' ELSE A.RetCatLevelValue END,    
  CASE WHEN RetCategoryLevel ='RETAILER' THEN A.RetCatLevelValue ELSE 'ALL' END ,PrdCategoryLevel,'',PrdCategoryLevelvalue,DISCPER,ApplyOn ,Type,A.EffFromDate,A.CreatedDate,GETDATE(),  
  CPRefCode FROM  Cn2Cs_Prk_SpecialDiscount A (NOLOCK)  WHERE A.PrdCategoryLevel <>'PRODUCT' AND DOWNLOADFLAG='Y'    
  UNION ALL    
  SELECT DISTINCT A.RetCategoryLevel,CASE RetCategoryLevel WHEN  'RETAILER' THEN 'ALL' ELSE A.RetCatLevelValue END,CASE RetCategoryLevel WHEN 'RETAILER' THEN A.RetCatLevelValue ELSE '' END  ,    
  PrdCategoryLevel,PrdCategoryLevelValue,'',DISCPER,ApplyOn,Type,    
  A.EffFromDate,A.CreatedDate,GETDATE(),CPRefCode FROM  Cn2Cs_Prk_SpecialDiscount A (NOLOCK)     
  WHERE A.PrdCategoryLevel = 'PRODUCT'  AND DOWNLOADFLAG='Y'   
  IF EXISTS (SELECT * FROM SpecialRate_Track WHERE  RtrCode = '')  
  BEGIN  
 UPDATE SpecialRate_Track SET RTRCODE='ALL' WHERE RtrCode = ''  
  END  
  RETURN    
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Fn_GetRptCaption' AND TYPE='FN')
DROP FUNCTION Fn_GetRptCaption
GO
--SELECT DBO.Fn_GetRptCaption (288,'Railway Discount Reconsolidation Report' ) as Caption
CREATE FUNCTION Fn_GetRptCaption(@Pi_RptId INT,@Pi_RptName NVARCHAR(100))
RETURNS NVARCHAR(100)
AS
/*****************************************************************************************************************************
* PROCEDURE		: Fn_GetRptCaption
* PURPOSE		: To Get Rpt Caption
* CREATED		: Mohana S
* CREATED DATE	: 12-06-2020
* NOTE			: To get the Rpt Caption name
* USER STORY ID : PARCS202100022 
******************************************************************************************************************************/
BEGIN

DECLARE @RptCaption NVARCHAR(100)

SET @RptCaption=''
IF @Pi_RptId = 288
BEGIN
	IF @Pi_RptName ='TOT Consolidation Report'
	BEGIN
		SET @RptCaption = 'TOT Consolidation Report'
	END

	IF @Pi_RptName ='MT Chain SKU wise Offer and Combi details Report'
	BEGIN
		SET @RptCaption = 'MT Chain SKU wise Offer and Combi details Report'
	END

	IF @Pi_RptName ='Chain Wise Bill Details Including Railways Report'
	BEGIN
		SET @RptCaption = 'Chain Wise Bill Details Including Railways Report'
	END

	IF @Pi_RptName ='MT Debit Summary Report'
	BEGIN
		SET @RptCaption = 'MT Debit Summary Report'
	END
END

RETURN (@RptCaption)
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='FN_ReturnContractHeader' AND TYPE='TF')
DROP FUNCTION FN_ReturnContractHeader
GO
CREATE FUNCTION FN_ReturnContractHeader(@ContractId AS INT)
RETURNS @ContractHeader TABLE
(
	ConDate DATETIME,
	ValidFromDate DATETIME,
	Status INT,
	AllowDiscount INT,
	DisplayMode INT,
	ValidTillDate DATETIME,
	CmpId INT,
	CmpName NVARCHAR(100),
	CtgLevelId INT,
	CtgLevelName NVARCHAR(100),
	CtgMainId INT,
	CtgName NVARCHAR(100),
	RtrClassId INT,
	ValueClassName NVARCHAR(100),
	CmpPrdCtgId INT,
	CmpPrdCtgName NVARCHAR(100),
	PrdCtgValMainId INT,
	PrdCtgValName NVARCHAR(100),
	Comconrefno NVARCHAR(50),
	RtrLevel INT,
	Rtrid NVARCHAR(1000)
)
AS
BEGIN
	INSERT INTO @ContractHeader 
	SELECT A.ConDate,A.ValidFromDate,A.Status,A.AllowDiscount,A.DisplayMode,A.ValidTillDate,A.CmpId,
	ISNULL(C.CmpName,'') AS CmpName,
	A.CtgLevelId,ISNULL(RCL.CtgLevelName,'ALL') AS CtgLevelName,A.CtgMainId,ISNULL(RC.CtgName,'ALL') AS CtgName,
	A.RtrClassId,ISNULL(RVC.ValueClassName,'ALL') AS ValueClassName,  A.CmpPrdCtgId,ISNULL(PCL.CmpPrdCtgName,'ALL') AS CmpPrdCtgName,
	A.PrdCtgValMainId,ISNULL(PCV.PrdCtgValName,'ALL') AS PrdCtgValName,comconrefno,RtrLevel,RtrId
	FROM ContractPricingMaster A (NOLOCK)  
	LEFT OUTER JOIN Company C (NOLOCK) ON  A.CmpId=C.CmpId  
	LEFT OUTER JOIN RetailerCategoryLevel RCL (NOLOCK) ON A.CtgLevelId=RCL.CtgLevelId  
	LEFT OUTER JOIN RetailerCategory RC (NOLOCK) ON A.CtgMainId=RC.CtgMainId  
	LEFT OUTER JOIN RetailerValueClass RVC (NOLOCK)  ON A.RtrClassId=RVC.RtrClassId  
	LEFT OUTER JOIN ProductCategoryLevel PCL  (NOLOCK)ON A.CmpPrdCtgId=PCL.CmpPrdCtgId  
	LEFT OUTER JOIN ProductCategoryValue PCV  (NOLOCK)  ON A.PrdCtgValMainId=PCV.PrdCtgValMainId  
	WHERE ContractId=@ContractId
RETURN
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Fn_ReturnContractPricingDetails' AND TYPE='TF')
DROP FUNCTION Fn_ReturnContractPricingDetails
GO
CREATE FUNCTION Fn_ReturnContractPricingDetails
(
	@Pi_CmpId INT,
	@Pi_CmpPrdId INT,
	@Pi_PrdCtgValMainId INT,
	@Pi_ContractId INT,
	@Pi_Display INT
)    
RETURNS @ContractDetails TABLE    
 (    
	  PrdId   INT,    
	  PrdCCode NVARCHAR(100),    
	  PrdName  NVARCHAR(100),    
	  PrdBatId  INT,    
	  SellingRate NUMERIC(18,6),
	  ApplyOn INT,
	  WithTax INT,
	  Discount NUMERIC(38,6),    
	  FlatAmtDisc NUMERIC(38,6),
	  SpecialPrice NUMERIC(38,6)    
 )    
AS
BEGIN    
/*********************************    
* FUNCTION: Fn_ReturnContractPricingDetails    
* PURPOSE: Returns the Product and Batch Details for the Selected Contract Pricing    
* NOTES:     
* CREATED: NandaKumar R.G On 29-11-2007    
* MODIFIED     
* DATE      AUTHOR     DESCRIPTION    
------------------------------------------------    
*     
*********************************/ 

  IF @Pi_Display=0 
   BEGIN
		INSERT INTO @ContractDetails 
		SELECT B.PrdId,B.PrdCcode,B.PrdName,0 AS Prdbatid,ISNULL(prdbatdetailvalue,0),CD.ApplyOn,CD.WithTax,CD.Discount,CD.FlatAmtDisc,CD.SpecialPrice    
		FROM ProductCategoryValue C     
		INNER JOIN ProductCategoryValue D ON  D.PrdCtgValLinkCode LIKE CAST(c.PrdCtgValLinkCode AS NVARCHAR(1000)) + '%'  
		INNER JOIN Product B ON D.PrdCtgValMainId = B.PrdCtgValMainId
		LEFT OUTER JOIN (SELECT P.PrdId,MAX(PB.PrdBATID)PrdBATID FROM PRODUCT P INNER JOIN ProductBatch PB ON P.PrdId=PB.PrdId GROUP BY P.PrdId)PB
			ON B.PrdId=PB.PrdId
		LEFT OUTER JOIN ProductBatchDetails PBD ON PBD.PrdBatId =PB.PrdBATID AND PBD.DEFAULTPRICE=1 AND SLNO=3
		INNER JOIN ContractPricingDetails CD ON CD.PrdId=B.PrdId
		WHERE CD.ContractId=@Pi_ContractId AND C.PrdCtgValMainId = CASE @Pi_PrdCtgValMainId  WHEN 0 THEN   B.PrdCtgValMainId  ELSE @Pi_PrdCtgValMainId END 
				AND B.CmpId = CASE  @Pi_CmpId  WHEN 0  THEN B.CmpId ELSE @Pi_CmpId END   
				AND B.PrdStatus=1 AND B.PrdType<>3 AND PrdType<>4
	END 
	ELSE
	BEGIN
		INSERT INTO @ContractDetails 
		SELECT PrdId,PrdCCode,PrdName,0 AS Prdbatid,0,ApplyOn,WithTax,Discount,FlatAmtDisc,SpecialPrice    
		FROM  
		(SELECT C.PrdCtgValMainId AS PrdId,PrdCtgValCode AS PrdCCode,PrdCtgValName AS PrdName,CR.ApplyOn,CR.WithTax,
				 CR.Discount,CR.FlatAmtDisc,CR.SpecialPrice        
		FROM ProductCategoryValue C WITH(NOLOCK)
		INNER JOIN ContractPricingMaster CM ON C.CmpPrdCtgId =CASE CM.CmpPrdCtgId WHEN 0 THEN C.CmpPrdCtgId ELSE CM.CmpPrdCtgId END
				AND C.PrdCtgValMainId=CASE CM.PrdCtgValMainId WHEN 0 THEN C.PrdCtgValMainId ELSE CM.PrdCtgValMainId END 
		INNER JOIN ContractPricingDetails CR  ON CM.ContractId=CR.ContractId AND CR.PrdId=C.PrdCtgValMainId
		WHERE CM.ContractId=@Pi_ContractId AND C.CmpPrdCtgId= CASE @Pi_CmpPrdId WHEN 0 THEN C.CmpPrdCtgId ELSE @Pi_CmpPrdId END
		AND C.PrdCtgValMainId = CASE @Pi_PrdCtgValMainId  WHEN 0 THEN  C.PrdCtgValMainId  ELSE @Pi_PrdCtgValMainId END) A
	END	
RETURN    
END
GO
UPDATE A SET  FilterDesc='TOT Consolidation Report' FROM RptFilter A WHERE Rptid = 288 AND FilterId = 1
GO
DELETE FROM ManualConfiguration WHERE ModuleId ='DebitNoteTopSheet'
INSERT INTO ManualConfiguration
SELECT 'PARLE','DebitNoteTopSheet','DebitNoteTopSheet','Printer setup based on configuration',1,1,0,1
GO
UPDATE A SET BtnStatus = 0 FROM ProfileDT A WHERE Menuid ='mCus10' AND BtnDescription<>'Print'
GO
Delete From  MenuDef Where  SrlNo = 205 and MenuId = 'mStk34'
GO
Insert Into MenuDef (SrlNo,MenuId,MenuName,ParentId,Caption,MenuStatus,FormName,DefaultCaption)
Values (205,'mStk34','mnuticketingtool','mStk','Complaint Register',0,'C:\CoreStocky-CITRIX\CSSourceCitrix\CoreStocky\Export\DistributorHelper.exe','Complaint Register')
GO
DELETE FROM ProfileDt WHERE MENUID='mStk34'
INSERT INTO ProfileDt(PrfId,MenuId,BtnIndex,BtnDescription,BtnStatus,Availability,LastModBy,LastModDate,AuthId,AuthDate)
SELECT PRFID,'mStk34',0,'Distributor Help',1,1,1,GETDATE(),1,GETDATE() from ProfileHD 
GO
--DELETE FROM MenuDefToAvoid WHERE MenuId = 'mStk34'
--INSERT INTO MenuDefToAvoid(Slno,MenuId,MenuName,ParentId,Caption,Status)
--SELECT 205,'mStk34','mnuticketingtool','mStk','Ticketing Tool',0
--GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_DistributorHelperFormLoad' and xtype='P')
DROP PROCEDURE Proc_DistributorHelperFormLoad
GO
CREATE PROCEDURE Proc_DistributorHelperFormLoad
as
/*
Exec Proc_DistributorHelperFormLoad
*/
Begin

---reports,others,Sync,purchasereturn
	SELECT TransactionDescription AS TEXT, TransactionDescription as Value from TransactionMaster T (nolock)
	WHERE TransactionDescription IN('Billing','Order Booking','Sales Return','Purchase','Purchase Return','Collection',
	'Stock Management','Credit Note Retailer','Debit Note Retailer','Sales Panel','Delivery Process',
	'Retailer Master','Route Master','Scheme','User Login')
	UNION
	SELECT 'Reports' AS TEXT, 'Reports' as Value UNION
	SELECT 'Others' AS TEXT, 'Others' as Value UNION
	SELECT 'Sync' AS TEXT, 'Sync' as Value UNION
	SELECT 'Debit Note Top Sheet' AS TEXT, 'Debit Note Top Sheet' as Value
	
	select top 1 DistributorCode,PhoneNo from [dbo].[Distributor] D (nolock)
End
GO
DELETE FROM ManualConfiguration WHERE ProjectName='PARLE' and ModuleId='DATATRANSFER48'
GO
INSERT INTO ManualConfiguration values ('PARLE','DATATRANSFER48','DataTransfer','Upload Path_DistributorHelper','1',
'http://sehyog.parle.biz/WdHelperTool/Service.asmx','0.00','48')
GO
IF NOT EXISTS(SELECT * FROM MANUALCONFIGURATION WHERE PROJECTNAME='PARLE' AND MODULEID='DATATRANSFER49' AND SEQNO='49')
BEGIN
Insert into ManualConfiguration values('PARLE','DATATRANSFER49','DataTransfer','Response Message for DistributorHelper','1','Message Sent to Parle Support','0.00','49')
END
GO
--INSERT INTO ManualConfiguration values ('PARLE','DATATRANSFER48','DataTransfer','Upload Path_DistributorHelper','1',
--'http://192.168.1.53/IssueCaptureWS/Service.asmx','0.00','48')
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='DistributorHelper' AND xtype='U')
BEGIN
      Create table DistributorHelper
      (
		  SeqId bigint identity(1,1) not null,
		  DistCode varchar(100),
		  MobileNo varchar(10),
		  Module varchar(200),
		  Descriptions varchar(500),
		  RefId varchar(200) ,
		  MessageStatus varchar(500),
		  CreatedDate datetime default getdate() not null,
		  Constraint PK_DistributorHelper_SeqId Primary key (SeqId)
      )
      CREATE nonclustered INDEX IX_DistributorHelper_DistCode ON DistributorHelper(DistCode)
      CREATE nonclustered INDEX IX_DistributorHelper_MobileNo ON DistributorHelper(MobileNo)
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.ID 
WHERE A.NAME='DistributorHelper' AND B.NAME='MessageStatus' AND A.xtype='U')
BEGIN
      ALTER TABLE DistributorHelper ADD MessageStatus varchar(500)
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_InsertDistHelper_and_GetWebServiceConfig' and xtype='P')
DROP PROCEDURE Proc_InsertDistHelper_and_GetWebServiceConfig
GO
CREATE PROCEDURE Proc_InsertDistHelper_and_GetWebServiceConfig
(
@DistCode varchar(100)='',
@MobNo varchar(10),
@Module varchar(100),
@Desc varchar(500),
@SeqId bigint=0,
@RefId varchar(200)='',
@Type int,
@MessageStatus varchar(500)=''
)
as
/*
Exec Proc_InsertDistHelper_and_GetWebServiceConfig '123','9566494950','Sales','Test1','0','',1
*/
Begin
	if @Type=1
	begin
		Insert into DistributorHelper(DistCode,MobileNo,Module,Descriptions) 
		values(@DistCode,@MobNo,@Module,@Desc);
		SELECT SCOPE_IDENTITY() as SeqId;
		Select top 1 Condition from ManualConfiguration (nolock) WHERE ProjectName='PARLE' and ModuleId='DATATRANSFER48' and SeqNo='48';
		Select top 1 Condition from ManualConfiguration (nolock) WHERE ProjectName='PARLE' and ModuleId='DATATRANSFER49' and SeqNo='49';
	end
	else if @Type=2
	begin
		Update DistributorHelper set RefId=@RefId,MessageStatus=@MessageStatus where SeqId=@SeqId
	end
End
GO
DELETE FROM HotsearchEditorHd WHERE FormId=795
INSERT INTO HotsearchEditorHd(FormId,FormName,ControlName,SltString,RemainsltString)
SELECT 795,'Contract Pricing Master','DisplayHierarchyValue','select','
SELECT PrdId,PrdDCode,  PrdName,0 as SellingRate FROM  (SELECT PrdCtgValMainId AS PrdId,PrdCtgValCode AS PrdDCode,PrdCtgValName AS PrdName      FROM ProductCategoryValue WITH(NOLOCK) WHERE  CmpPrdCtgId= CASE vFParam WHEN 0 THEN CmpPrdCtgId ELSE vFParam END  AND PrdCtgValMainId = CASE vSParam  WHEN 0 THEN  PrdCtgValMainId  ELSE vSParam END) A'
GO
DELETE FROM HotsearchEditorHd WHERE FormId=188
INSERT INTO HotsearchEditorHd(FormId,FormName,ControlName,SltString,RemainsltString)
SELECT 188,'Contract Pricing Master','ContractPricingProductCategoryValue','select','
SELECT Prdid,PrdDCode,PrdCcode,  PrdName,PrdShrtName,SellingRate From (SELECT B.PrdId,B.PrdDCode,B.PrdCcode,B.PrdName,B.PrdShrtName,prdbatdetailvalue as SellingRate FROM ProductCategoryValue C       INNER JOIN   ProductCategoryValue D ON  D.PrdCtgValLinkCode LIKE Cast(c.PrdCtgValLinkCode as nvarchar(1000)) + ''%''    INNER JOIN Product B On D.PrdCtgValMainId = B.PrdCtgValMainId    INNER JOIN (SELECT P.PrdId,MAX(PB.PrdBATID)PrdBATID FROM PRODUCT P INNER JOIN ProductBatch PB ON P.PrdId=PB.PrdId GROUP BY P.PrdId)PB    ON B.PrdId=PB.PrdId INNER JOIN ProductBatchDetails PBD ON PBD.PrdBatId =PB.PrdBATID AND PBD.DEFAULTPRICE=1 AND SLNO=3    WHERE C.PrdCtgValMainId = Case vSParam  WHEN 0 THEN   B.PrdCtgValMainId  ELSE vSParam END    AND B.CmpId = Case  vFParam  WHEN 0  THEN B.CmpId ELSE vFParam END   AND B.PrdStatus=1 AND B.PrdType<>3 AND PrdType<>4)MainSql'
GO
DELETE FROM HotSearchEditorHd WHERE FORMID =538
INSERT INTO HotSearchEditorHd(FormId,FormName,ControlName,SltString,RemainsltString)
SELECT 538,'Billing','SalesMan','select','SELECT SMId,SMCode,SMName,SMMktCredit,SMCreditDays,SMCreditAmountAlert,SMCreditDaysAlert 
FROM SalesMan (NOLOCK) WHERE Status=1 AND  (CmpId = (Case vFParam When 0 Then CmpId Else vFParam END) OR CmpId = 0) AND SMCODE <>''SMDummy01'''
GO
DELETE FROM HotSearchEditorHd WHERE FORMID IN (546,547,548,549)
INSERT INTO HotSearchEditorHd([FormId],[FormName],[ControlName],[SltString],[RemainsltString]) VALUES (549,'Billing','Select Display with Route Coverage Plan and without attached Salesman','select','SELECT RMId,
RMCode,RMName FROM (SELECT A.RMId,A.RMCode,A.RMName FROM RouteMaster A (NOLOCK) INNER JOIN RouteCovPlanMaster C ON 
C.RMId = A.RMId INNER JOIN RouteCovPlanDetails D ON C.RCPMAsterId = D.RCPMasterId AND A.RMCode <>''SRDummy01''
WHERE A.RMSRouteType=1 AND RCPGeneratedDates = ''vSParam'' AND RCPHolidayStatus=0 
AND A.RMStatus=1 AND  (A.CmpId = (Case vFParam When 0 Then A.CmpId Else vFParam END) OR A.CmpId = 0)) a')
INSERT INTO HotSearchEditorHd([FormId],[FormName],[ControlName],[SltString],[RemainsltString]) VALUES (548,'Billing','Unselect Display with Route Coverage Plan and without attached Salesman','select','SELECT RMId,
RMCode,RMName FROM (SELECT A.RMId,A.RMCode,A.RMName FROM RouteMaster A (NOLOCK) WHERE RMSRouteType=1 AND RMCode <>''SRDummy01''
AND RMStatus=1 AND  (CmpId = (Case vFParam When 0 Then CmpId Else vFParam END) OR CmpId = 0)) a ')
INSERT INTO HotSearchEditorHd([FormId],[FormName],[ControlName],[SltString],[RemainsltString]) VALUES (546,'Billing','Unselect Display with Route Coverage Plan and with attached Salesman','select','SELECT RMId,
RMCode,RMName FROM (SELECT A.RMId,A.RMCode,A.RMName FROM RouteMaster A (NOLOCK) INNER JOIN 
SalesmanMarket B (NOLOCK) ON A.RMId= B.RMId and B.SMId=vFParam WHERE RMSRouteType=1 AND RMStatus=1 AND RMCode <>''SRDummy01''
AND  (A.CmpId = (Case vSParam When 0 Then A.CmpId Else vSParam END) OR A.CmpId = 0)) a ')
INSERT INTO HotSearchEditorHd([FormId],[FormName],[ControlName],[SltString],[RemainsltString]) VALUES (547,'Billing','Select Display with Route Coverage Plan and with attached Salesman','select','SELECT RMId,
RMCode,RMName FROM (SELECT A.RMId,A.RMCode,A.RMName FROM RouteMaster A (NOLOCK) INNER JOIN SalesmanMarket B 
(NOLOCK) ON A.RMId= B.RMId and B.SMId=vFParam INNER JOIN RouteCovPlanMaster C ON C.RMId = A.RMId AND RMCode <>''SRDummy01''
INNER JOIN RouteCovPlanDetails D ON C.RCPMAsterId = D.RCPMasterId 
WHERE A.RMSRouteType=1 AND RCPGeneratedDates = ''vTParam'' AND RCPHolidayStatus=0 
AND A.RMStatus=1 AND  (A.CmpId = (Case vSParam When 0 Then A.CmpId Else vSParam END) OR A.CmpId = 0)) a')
GO
DELETE FROM CUSTOMCAPTIONS WHERE TRANSID=206 and CtrlId=10
INSERT INTO CUSTOMCAPTIONS(TransId,CtrlId,SubCtrlId,CtrlName,Caption,PnlMsg,MsgBox,LngId,Availability,LastModBy,LastModDate,
AuthId,AuthDate,DefaultCaption,DefaultPnlMsg,DefaultMsgBox,Visibility,[Enabled])
SELECT 206,10,1,'lblSupport','Click Here for Support','','',1,1,1,CONVERT(VARCHAR(10),GETDATE(),121),1,CONVERT(VARCHAR(10),GETDATE(),121),'Click Here for Support','','',1,1
GO
DELETE FROM ManualConfiguration WHERE ModuleId='SalesReturnSave' 
INSERT INTO ManualConfiguration 
SELECT 'PARLE','SalesReturnSave','Sales Return Save','Restrict Save in SalesReturn',1,0,0,1
GO
--PARCS202100036
DELETE FROM HotSearchEditorHd WHERE Formid in (556,557,558,553,554,555,551,550,552)
INSERT INTO hotsearcheditorhd([FormId],[FormName],[ControlName],[SltString],[RemainsltString]) VALUES (558,'Billing','Direct Retailer Based on Code','select','SELECT RtrId,RtrCode,RtrName,RtrAdd1,RtrAdd2,RtrAdd3,RtrSeqDtId,RtrCovMode,RtrCashDiscPerc,RtrCashdiscCond,RtrCashDiscAmt,
RtrTaxType,DelvRMId,RTRDayOff,RtrCrBills,RtrCrLimit,RtrCrDays,RtrTINNo,RtrCSTNo,RtrLicNo,  
RtrLicExpiryDate,RtrDrugLicNo,RtrDrugExpiryDate,RtrPestLicNo,RtrPestExpiryDate,RtrRegDate,RtrDOB,RtrAnniversary,RtrCrDaysAlert,RtrCrBillsAlert,RtrCrLimitAlert FROM 
(SELECT D.RtrId,D.RtrCode,D.RtrName,D.RtrAdd1,D.RtrAdd2,D.RtrAdd3,100000 as RtrSeqDtId,D.RtrCovMode,D.RtrCashDiscPerc,D.RtrCashdiscCond,D.RtrCashDiscAmt,D.RtrTaxType,D.RMId AS DelvRMId,
D.RTRDayOff,D.RtrCrBills,D.RtrCrLimit,D.RtrCrDays,D.RtrTINNo,D.RtrCSTNo, D.RtrLicNo,ISNULL(D.RtrLicExpiryDate,Convert(Varchar(10),GetDate(),121)) AS RtrLicExpiryDate,
D.RtrDrugLicNo,ISNULL(D.RtrDrugExpiryDate,Convert(Varchar(10),GetDate(),121)) AS RtrDrugExpiryDate,D.RtrPestLicNo,ISNULL(D.RtrPestExpiryDate,Convert(Varchar(10),
GetDate(),121)) AS RtrPestExpiryDate, ISNULL(D.RtrRegDate,Convert(Varchar(10),GetDate(),121)) AS RtrRegDate,ISNULL(D.RtrDOB,Convert(Varchar(10),GetDate(),121)) AS RtrDOB,
ISNULL(D.RtrAnniversary,Convert(Varchar(10),GetDate(),121)) AS RtrAnniversary,  RtrCrDaysAlert,RtrCrBillsAlert,RtrCrLimitAlert FROM Retailer D (NOLOCK)
Where D.RtrStatus = 1 AND RtrCOde <> ''Dummy'') a ORDER BY RtrSeqDtId')
INSERT INTO hotsearcheditorhd([FormId],[FormName],[ControlName],[SltString],[RemainsltString]) VALUES (551,'Billing','Retailer Display Based On Sequence','Select',
'SELECT RtrId,RtrSeqDtId,RtrCode,RtrName,RtrAdd1,RtrAdd2,RtrAdd3,RtrCovMode,RtrCashDiscPerc,RtrCashdiscCond,  RtrCashDiscAmt,RtrTaxType,DelvRMId,RTRDayOff,RtrCrBills,
RtrCrLimit,RtrCrDays,RtrTINNo,RtrCSTNo,  RtrLicNo,RtrLicExpiryDate,RtrDrugLicNo,RtrDrugExpiryDate,RtrPestLicNo,RtrPestExpiryDate,RtrRegDate,  RtrDOB,RtrAnniversary,
RtrCrDaysAlert,RtrCrBillsAlert,RtrCrLimitAlert FROM (SELECT C.RtrId,B.RtrSeqDtId,C.RtrCode,  C.RtrName,C.RtrAdd1,C.RtrAdd2,C.RtrAdd3,C.RtrCovMode,C.RtrCashDiscPerc,
C.RtrCashdiscCond,C.RtrCashDiscAmt,C.RtrTaxType,C.RMId AS DelvRMId,C.RTRDayOff,  C.RtrCrBills,C.RtrCrLimit,C.RtrCrDays,C.RtrTINNo,C.RtrCSTNo, C.RtrLicNo,
ISNULL(C.RtrLicExpiryDate,Convert(Varchar(10),GetDate(),121)) AS RtrLicExpiryDate,  C.RtrDrugLicNo,ISNULL(C.RtrDrugExpiryDate,Convert(Varchar(10),GetDate(),121)) AS RtrDrugExpiryDate,
C.RtrPestLicNo,  ISNULL(C.RtrPestExpiryDate,Convert(Varchar(10),GetDate(),121)) AS RtrPestExpiryDate,ISNULL(C.RtrRegDate,Convert(Varchar(10),GetDate(),121)) AS RtrRegDate, 
ISNULL(C.RtrDOB,Convert(Varchar(10),GetDate(),121)) AS RtrDOB,   ISNULL(C.RtrAnniversary,Convert(Varchar(10),GetDate(),121)) AS RtrAnniversary,  
RtrCrDaysAlert,RtrCrBillsAlert,RtrCrLimitAlert FROM RetailerSequence A (NOLOCK) INNER JOIN RetailerSeqDetails B (NOLOCK) ON A.RtrSeqID = B.RtrSeqId   INNER JOIN   
Retailer C (NOLOCK) on C.RtrId = B.RtrId  Where C.RtrStatus = 1 And A.SMId = vFParam And A.RMId = vSParam And TransactionType=vTParam    Union   SELECT D.RtrId,100000 as RtrSeqDtId,
D.RtrCode,D.RtrName,D.RtrAdd1,D.RtrAdd2,D.RtrAdd3,D.RtrCovMode,D.RtrCashDiscPerc,  D.RtrCashdiscCond,D.RtrCashDiscAmt,D.RtrTaxType,  D.RMId AS DelvRMId,D.RTRDayOff,D.RtrCrBills,
D.RtrCrLimit,D.RtrCrDays,D.RtrTINNo,D.RtrCSTNo, D.RtrLicNo,  ISNULL(D.RtrLicExpiryDate,Convert(Varchar(10),GetDate(),121)) AS RtrLicExpiryDate,D.RtrDrugLicNo,
ISNULL(D.RtrDrugExpiryDate,  Convert(Varchar(10),GetDate(),121)) AS RtrDrugExpiryDate,  D.RtrPestLicNo,ISNULL(D.RtrPestExpiryDate,Convert(Varchar(10),GetDate(),121)) AS 
RtrPestExpiryDate,  ISNULL(D.RtrRegDate,Convert(Varchar(10),GetDate(),121)) AS RtrRegDate,   ISNULL(D.RtrDOB,Convert(Varchar(10),GetDate(),121)) AS RtrDOB,  
ISNULL(D.RtrAnniversary,Convert(Varchar(10),GetDate(),121)) AS RtrAnniversary,RtrCrDaysAlert,RtrCrBillsAlert,RtrCrLimitAlert FROM Retailer D (NOLOCK)   INNER JOIN   
RetailerMarket E (NOLOCK) ON D.RtrId = E.RtrId Where D.RtrStatus = 1 And E.RMId = vSParam AND RtrCOde <> ''Dummy''   And D.Rtrid Not In (SELECT C.RtrId FROM RetailerSequence A (NOLOCK) INNER JOIN  
RetailerSeqDetails B (NOLOCK) ON A.RtrSeqID = B.RtrSeqId   INNER JOIN Retailer C (NOLOCK) on   C.RtrId = B.RtrId Where C.RtrStatus = 1 And A.SMId = vFParam And A.RMId = vSParam    
And TransactionType=vTParam)) A ORDER BY RtrSeqDtId')
INSERT INTO hotsearcheditorhd([FormId],[FormName],[ControlName],[SltString],[RemainsltString]) VALUES (556,'Billing','Direct Retailer Based on Sequence','select','SELECT RtrId,RtrSeqDtId,RtrCode,RtrName,RtrAdd1,RtrAdd2,RtrAdd3,RtrCovMode,
RtrCashDiscPerc,RtrCashdiscCond,RtrCashDiscAmt,RtrTaxType,DelvRMId,RTRDayOff,RtrCrBills,RtrCrLimit,RtrCrDays,
RtrTINNo,RtrCSTNo,  RtrLicNo,RtrLicExpiryDate,RtrDrugLicNo,RtrDrugExpiryDate,RtrPestLicNo,RtrPestExpiryDate,RtrRegDate,RtrDOB,RtrAnniversary,RtrCrDaysAlert,
RtrCrBillsAlert,RtrCrLimitAlert FROM (SELECT D.RtrId,100000 as RtrSeqDtId,D.RtrCode,D.RtrName,D.RtrAdd1,D.RtrAdd2,D.RtrAdd3,D.RtrCovMode, D.RtrCashDiscPerc,D.RtrCashdiscCond,D.RtrCashDiscAmt,
D.RtrTaxType,D.RMId AS DelvRMId,D.RTRDayOff,D.RtrCrBills,D.RtrCrLimit,D.RtrCrDays,D.RtrTINNo,D.RtrCSTNo,D.RtrLicNo,ISNULL(D.RtrLicExpiryDate,Convert(Varchar(10),
GetDate(),121)) AS RtrLicExpiryDate,D.RtrDrugLicNo,ISNULL(D.RtrDrugExpiryDate,Convert(Varchar(10),GetDate(),121)) AS RtrDrugExpiryDate,D.RtrPestLicNo,ISNULL(D.RtrPestExpiryDate,
Convert(Varchar(10),GetDate(),121)) AS RtrPestExpiryDate,ISNULL(D.RtrRegDate,Convert(Varchar(10),GetDate(),121)) AS RtrRegDate,ISNULL(D.RtrDOB,Convert(Varchar(10),
GetDate(),121)) AS RtrDOB,ISNULL(D.RtrAnniversary,Convert(Varchar(10),GetDate(),121)) AS RtrAnniversary,RtrCrDaysAlert,RtrCrBillsAlert,RtrCrLimitAlert FROM Retailer D (NOLOCK)
Where D.RtrStatus = 1 AND RtrCOde <> ''Dummy'') a ORDER BY RtrSeqDtId')
INSERT INTO hotsearcheditorhd([FormId],[FormName],[ControlName],[SltString],[RemainsltString]) VALUES (557,'Billing','Direct Retailer Based on Name','select','SELECT RtrId,RtrName,RtrCode,RtrAdd1,RtrAdd2,RtrAdd3,RtrSeqDtId,RtrCovMode,
RtrCashDiscPerc,RtrCashdiscCond,RtrCashDiscAmt,RtrTaxType,DelvRMId,RTRDayOff,RtrCrBills,RtrCrLimit,
RtrCrDays,RtrTINNo,RtrCSTNo,  RtrLicNo,RtrLicExpiryDate,RtrDrugLicNo,RtrDrugExpiryDate,RtrPestLicNo,RtrPestExpiryDate,RtrRegDate,RtrDOB,RtrAnniversary,  
RtrCrDaysAlert,RtrCrBillsAlert,RtrCrLimitAlert FROM (SELECT D.RtrId,D.RtrName,D.RtrCode,D.RtrAdd1,D.RtrAdd2,D.RtrAdd3,100000 as RtrSeqDtId,D.RtrCovMode,D.RtrCashDiscPerc,
D.RtrCashdiscCond,D.RtrCashDiscAmt,D.RtrTaxType,D.RMId AS DelvRMId,D.RTRDayOff,D.RtrCrBills,  D.RtrCrLimit,D.RtrCrDays,D.RtrTINNo,D.RtrCSTNo, 
D.RtrLicNo,ISNULL(D.RtrLicExpiryDate,Convert(Varchar(10),GetDate(),121)) AS RtrLicExpiryDate,  D.RtrDrugLicNo,ISNULL(D.RtrDrugExpiryDate,Convert(Varchar(10),
GetDate(),121)) AS RtrDrugExpiryDate,D.RtrPestLicNo,  ISNULL(D.RtrPestExpiryDate,Convert(Varchar(10),GetDate(),121)) AS RtrPestExpiryDate,  
ISNULL(D.RtrRegDate,Convert(Varchar(10),GetDate(),121)) AS RtrRegDate,ISNULL(D.RtrDOB,Convert(Varchar(10),GetDate(),121)) AS RtrDOB,  
ISNULL(D.RtrAnniversary,Convert(Varchar(10),GetDate(),121)) AS RtrAnniversary,RtrCrDaysAlert,RtrCrBillsAlert,RtrCrLimitAlert FROM Retailer D (NOLOCK) 
Where D.RtrStatus = 1 AND RtrCOde <> ''Dummy'' ) a ORDER BY RtrSeqDtId')
INSERT INTO hotsearcheditorhd([FormId],[FormName],[ControlName],[SltString],[RemainsltString]) VALUES (550,'Billing','Retailer Display Based On Name','Select','SELECT RtrId,RtrName,RtrCode,RtrAdd1,RtrAdd2,RtrAdd3,RtrSeqDtId,RtrCovMode,RtrCashDiscPerc,
RtrCashdiscCond,RtrCashDiscAmt,RtrTaxType,DelvRMId,RTRDayOff,
RtrCrBills,RtrCrLimit,  RtrCrDays,RtrTINNo,RtrCSTNo,RtrLicNo,RtrLicExpiryDate,  RtrDrugLicNo,RtrDrugExpiryDate,RtrPestLicNo,RtrPestExpiryDate,RtrRegDate,
RtrDOB,RtrAnniversary,  RtrCrDaysAlert,RtrCrBillsAlert,RtrCrLimitAlert FROM (SELECT C.RtrId,C.RtrName,C.RtrCode,B.RtrSeqDtId,C.RtrAdd1,C.RtrAdd2,C.RtrAdd3,
C.RtrCovMode,C.RtrCashDiscPerc, C.RtrCashdiscCond,  C.RtrCashDiscAmt,C.RtrTaxType,C.RMId AS DelvRMId,C.RTRDayOff,C.RtrCrBills,C.RtrCrLimit,C.RtrCrDays,
C.RtrTINNo,C.RtrCSTNo, C.RtrLicNo,ISNULL(C.RtrLicExpiryDate,Convert(Varchar(10),GetDate(),121)) AS RtrLicExpiryDate,C.RtrDrugLicNo,ISNULL(C.RtrDrugExpiryDate,
Convert(Varchar(10),GetDate(),121)) AS RtrDrugExpiryDate,  C.RtrPestLicNo,ISNULL(C.RtrPestExpiryDate,Convert(Varchar(10),GetDate(),121)) AS RtrPestExpiryDate,  
ISNULL(C.RtrRegDate,Convert(Varchar(10),GetDate(),121)) AS RtrRegDate,ISNULL(C.RtrDOB,Convert(Varchar(10),GetDate(),121)) AS RtrDOB,ISNULL(C.RtrAnniversary,
Convert(Varchar(10),GetDate(),121)) AS RtrAnniversary, RtrCrDaysAlert,RtrCrBillsAlert,RtrCrLimitAlert FROM RetailerSequence A (NOLOCK) 
INNER JOIN RetailerSeqDetails B (NOLOCK) ON A.RtrSeqID = B.RtrSeqId INNER JOIN   Retailer C (NOLOCK) on C.RtrId = B.RtrId Where C.RtrStatus = 1 AND RtrCOde <> ''Dummy'' 
And A.SMId=vFParam And A.RMId=vSParam And TransactionType=vTParam   Union   SELECT D.RtrId,D.RtrName,D.RtrCode,
100000 as RtrSeqDtId,D.RtrAdd1,D.RtrAdd2,D.RtrAdd3,D.RtrCovMode,D.RtrCashDiscPerc, D.RtrCashdiscCond,D.RtrCashDiscAmt,D.RtrTaxType,
D.RMId AS DelvRMId,D.RTRDayOff, D.RtrCrBills,D.RtrCrLimit,D.RtrCrDays,D.RtrTINNo,D.RtrCSTNo, D.RtrLicNo,ISNULL(D.RtrLicExpiryDate,
Convert(Varchar(10),GetDate(),121)) AS RtrLicExpiryDate,   D.RtrDrugLicNo,ISNULL(D.RtrDrugExpiryDate,Convert(Varchar(10),GetDate(),121)) AS RtrDrugExpiryDate,  
D.RtrPestLicNo,ISNULL(D.RtrPestExpiryDate,Convert(Varchar(10),GetDate(),121)) AS RtrPestExpiryDate,ISNULL(D.RtrRegDate,Convert(Varchar(10),GetDate(),121)) AS RtrRegDate,ISNULL(D.RtrDOB,Convert(Varchar(10),GetDate(),121)) AS RtrDOB,  
ISNULL(D.RtrAnniversary,Convert(Varchar(10),GetDate(),121)) AS RtrAnniversary, RtrCrDaysAlert,RtrCrBillsAlert,RtrCrLimitAlert FROM Retailer D (NOLOCK)   INNER JOIN RetailerMarket E (NOLOCK) ON D.RtrId = E.RtrId   Where D.RtrStatus = 1 And E.RMId = vSParam AND RtrCOde <> ''Dummy'' And D.Rtrid Not In
(SELECT C.RtrId FROM   RetailerSequence A (NOLOCK)   INNER JOIN RetailerSeqDetails B (NOLOCK) ON A.RtrSeqID = B.RtrSeqId INNER JOIN Retailer C (NOLOCK) on   C.RtrId = B.RtrId Where C.RtrStatus = 1 And A.SMId=vFParam And A.RMId=vSParam And TransactionType=vTParam) ) a  ORDER BY RtrSeqDtId')
INSERT INTO hotsearcheditorhd([FormId],[FormName],[ControlName],[SltString],[RemainsltString]) VALUES (552,'Billing','Retailer Display Based On Code','Select','SELECT RtrId,RtrCode,
RtrName,RtrAdd1,RtrAdd2,RtrAdd3,RtrSeqDtId,RtrCovMode,  RtrCashDiscPerc,RtrCashdiscCond,RtrCashDiscAmt,RtrTaxType,DelvRMId,RTRDayOff,RtrCrBills,  RtrCrLimit,RtrCrDays,RtrTINNo,
RtrCSTNo,RtrLicNo,RtrLicExpiryDate,RtrDrugLicNo,RtrDrugExpiryDate,RtrPestLicNo,  RtrPestExpiryDate,RtrRegDate,RtrDOB,RtrAnniversary,  RtrCrDaysAlert,RtrCrBillsAlert,RtrCrLimitAlert 
FROM (SELECT C.RtrId,C.RtrCode,C.RtrName,  B.RtrSeqDtId,C.RtrAdd1,C.RtrAdd2,C.RtrAdd3,C.RtrCovMode,C.RtrCashDiscPerc,C.RtrCashdiscCond,C.RtrCashDiscAmt,C.RtrTaxType,
C.RMId AS DelvRMId,C.RTRDayOff,  C.RtrCrBills,C.RtrCrLimit,C.RtrCrDays,C.RtrTINNo,C.RtrCSTNo, C.RtrLicNo,  ISNULL(C.RtrLicExpiryDate,Convert(Varchar(10),GetDate(),121)) AS RtrLicExpiryDate,
C.RtrDrugLicNo,  ISNULL(C.RtrDrugExpiryDate,Convert(Varchar(10),GetDate(),121)) AS RtrDrugExpiryDate,C.RtrPestLicNo,  
ISNULL(C.RtrPestExpiryDate,Convert(Varchar(10),GetDate(),121)) AS RtrPestExpiryDate,ISNULL(C.RtrRegDate,Convert(Varchar(10),GetDate(),121)) AS RtrRegDate,  
ISNULL(C.RtrDOB,Convert(Varchar(10),GetDate(),121)) AS RtrDOB,   ISNULL(C.RtrAnniversary,Convert(Varchar(10),GetDate(),121)) AS RtrAnniversary,  RtrCrDaysAlert,
RtrCrBillsAlert,RtrCrLimitAlert FROM RetailerSequence A (NOLOCK) INNER JOIN RetailerSeqDetails B (NOLOCK) ON A.RtrSeqID = B.RtrSeqId   INNER JOIN Retailer C (NOLOCK) on  
C.RtrId = B.RtrId Where C.RtrStatus = 1 AND RtrCOde <> ''Dummy'' And A.SMId = vFParam And A.RMId = vSParam And TransactionType=vTParam    Union   SELECT D.RtrId,D.RtrCode,D.RtrName,100000 as RtrSeqDtId,
D.RtrAdd1,D.RtrAdd2,D.RtrAdd3,D.RtrCovMode,D.RtrCashDiscPerc,D.RtrCashdiscCond,D.RtrCashDiscAmt,D.RtrTaxType,  D.RMId AS DelvRMId,D.RTRDayOff,   D.RtrCrBills,D.RtrCrLimit,
D.RtrCrDays,D.RtrTINNo,D.RtrCSTNo,D.RtrLicNo,ISNULL(D.RtrLicExpiryDate,  Convert(Varchar(10),GetDate(),121)) AS RtrLicExpiryDate,   D.RtrDrugLicNo,ISNULL(D.RtrDrugExpiryDate,
Convert(Varchar(10),GetDate(),121)) AS RtrDrugExpiryDate,  D.RtrPestLicNo,ISNULL(D.RtrPestExpiryDate,Convert(Varchar(10),GetDate(),121)) AS RtrPestExpiryDate,  
ISNULL(D.RtrRegDate,Convert(Varchar(10),GetDate(),121)) AS RtrRegDate,   ISNULL(D.RtrDOB,Convert(Varchar(10),GetDate(),121)) AS RtrDOB,  ISNULL(D.RtrAnniversary,Convert(Varchar(10),GetDate(),121)) AS RtrAnniversary,
RtrCrDaysAlert,RtrCrBillsAlert,RtrCrLimitAlert FROM Retailer D (NOLOCK)   INNER JOIN   RetailerMarket E (NOLOCK) ON D.RtrId = E.RtrId Where D.RtrStatus = 1 AND RtrCOde <> ''Dummy'' And E.RMId = vSParam And 
D.Rtrid Not In (SELECT C.RtrId FROM   RetailerSequence A (NOLOCK)   INNER JOIN RetailerSeqDetails B (NOLOCK) ON A.RtrSeqID = B.RtrSeqId INNER JOIN Retailer C (NOLOCK) on   
C.RtrId = B.RtrId   Where C.RtrStatus = 1   And A.SMId = vFParam And A.RMId = vSParam And TransactionType=vTParam)) a ORDER BY RtrSeqDtId')
INSERT INTO hotsearcheditorhd([FormId],[FormName],[ControlName],[SltString],[RemainsltString]) VALUES (553,'Billing','Select Display with Route Coverage Plan Based on Retailer Sequence','select','SELECT RtrId,RtrSeqDtId,RtrCode,RtrName,
RtrAdd1,RtrAdd2,RtrAdd3,RtrCovMode,RtrCashDiscPerc,RtrCashdiscCond,RtrCashDiscAmt,RtrTaxType,DelvRMId,RTRDayOff,RtrCrBills,RtrCrLimit,RtrCrDays,
RtrTINNo,RtrCSTNo,RtrLicNo,  RtrLicExpiryDate,RtrDrugLicNo,RtrDrugExpiryDate,RtrPestLicNo,RtrPestExpiryDate,RtrRegDate,RtrDOB,RtrAnniversary,RtrCrDaysAlert,
RtrCrBillsAlert,RtrCrLimitAlert FROM (SELECT D.RtrId,100000 as RtrSeqDtId,D.RtrCode,D.RtrName,D.RtrAdd1,D.RtrAdd2,D.RtrAdd3,D.RtrCovMode,D.RtrCashDiscPerc,D.RtrCashdiscCond,D.RtrCashDiscAmt,
D.RtrTaxType,D.RMId AS DelvRMId,D.RTRDayOff,D.RtrCrBills,D.RtrCrLimit,D.RtrCrDays,D.RtrTINNo,D.RtrCSTNo,D.RtrLicNo,ISNULL(D.RtrLicExpiryDate,Convert(Varchar(10),
GetDate(),121)) AS RtrLicExpiryDate,D.RtrDrugLicNo,ISNULL(D.RtrDrugExpiryDate,Convert(Varchar(10),GetDate(),121)) AS RtrDrugExpiryDate,D.RtrPestLicNo,IsNull(D.RtrPestExpiryDate, 
Convert(VarChar(10),GetDate(), 121)) AS RtrPestExpiryDate,ISNULL(D.RtrRegDate,Convert(Varchar(10),GetDate(),121)) AS RtrRegDate,ISNULL(D.RtrDOB,
Convert(Varchar(10),GetDate(),121)) AS RtrDOB,ISNULL(D.RtrAnniversary,Convert(Varchar(10),GetDate(),121)) AS RtrAnniversary,RtrCrDaysAlert,RtrCrBillsAlert,
RtrCrLimitAlert FROM Retailer D (NOLOCK) INNER JOIN RetailerMarket B ON D.RtrId = B.RtrId  INNER JOIN RouteCovPlanMaster C ON C.RMId = B.RMId AND C.RMSRouteType=1 
AND D.RtrId = CASE C.RtrId WHEN 0 THEN D.RtrId else C.RtrId END  INNER JOIN RouteCovPlanDetails E ON C.RCPMAsterId = E.RCPMasterId  AND RCPGeneratedDates = ''vSParam''
AND RCPHolidayStatus=0 Where D.RtrStatus = 1  AND B.RMId = vFParam AND RtrCOde <> ''Dummy'' ) a ORDER BY RtrSeqDtId')
INSERT INTO hotsearcheditorhd([FormId],[FormName],[ControlName],[SltString],[RemainsltString]) VALUES (554,'Billing','Select Display with Route Coverage Plan Based on Retailer Name','select','SELECT RtrId,RtrName,RtrCode,RtrAdd1,RtrAdd2,
RtrAdd3,RtrSeqDtId,RtrCovMode,RtrCashDiscPerc,RtrCashdiscCond,RtrCashDiscAmt,RtrTaxType,DelvRMId,RTRDayOff,RtrCrBills,RtrCrLimit,RtrCrDays,
RtrTINNo,RtrCSTNo,RtrLicNo,RtrLicExpiryDate,RtrDrugLicNo,RtrDrugExpiryDate,RtrPestLicNo,RtrPestExpiryDate,RtrRegDate,RtrDOB,RtrAnniversary,RtrCrDaysAlert,RtrCrBillsAlert,
RtrCrLimitAlert FROM (SELECT D.RtrId,D.RtrName,D.RtrCode,D.RtrAdd1,D.RtrAdd2,D.RtrAdd3,100000 as RtrSeqDtId,D.RtrCovMode,D.RtrCashDiscPerc,D.RtrCashdiscCond,D.RtrCashDiscAmt,D.RtrTaxType,
D.RMId AS DelvRMId,D.RTRDayOff,  D.RtrCrBills,D.RtrCrLimit,D.RtrCrDays,D.RtrTINNo,D.RtrCSTNo, D.RtrLicNo,  ISNULL(D.RtrLicExpiryDate,Convert(Varchar(10),
GetDate(),121)) AS RtrLicExpiryDate,  D.RtrDrugLicNo,ISNULL(D.RtrDrugExpiryDate,Convert(Varchar(10),GetDate(),121)) AS RtrDrugExpiryDate,D.RtrPestLicNo ,IsNull(D.RtrPestExpiryDate, 
Convert(VarChar(10), GetDate(), 121)) AS RtrPestExpiryDate,  ISNULL(D.RtrRegDate,Convert(Varchar(10),GetDate(),121)) AS RtrRegDate, ISNULL(D.RtrDOB,Convert(Varchar(10),GetDate(),121)) AS RtrDOB,  
ISNULL(D.RtrAnniversary,Convert(Varchar(10),GetDate(),121)) AS RtrAnniversary,RtrCrDaysAlert,RtrCrBillsAlert,RtrCrLimitAlert FROM Retailer D (NOLOCK) INNER JOIN RetailerMarket B ON   
D.RtrId = B.RtrId INNER JOIN RouteCovPlanMaster C ON C.RMId = B.RMId AND C.RMSRouteType=1  AND D.RtrId = CASE C.RtrId WHEN 0 THEN D.RtrId else C.RtrId END INNER JOIN RouteCovPlanDetails E ON C.RCPMAsterId = E.RCPMasterId  
AND RCPGeneratedDates = ''vSParam'' AND RCPHolidayStatus=0 Where D.RtrStatus = 1 AND B.RMId = vFParam AND RtrCOde <> ''Dummy'') a ORDER BY RtrSeqDtId')
INSERT INTO hotsearcheditorhd([FormId],[FormName],[ControlName],[SltString],[RemainsltString]) VALUES (555,'Billing','Select Display with Route Coverage Plan Based on Retailer Code','select','SELECT RtrId,RtrCode,RtrName,RtrAdd1,RtrAdd2,RtrAdd3,
RtrSeqDtId,RtrCovMode,RtrCashDiscPerc,RtrCashdiscCond,RtrCashDiscAmt,RtrTaxType,DelvRMId,RTRDayOff,RtrCrBills,RtrCrLimit,RtrCrDays,
RtrTINNo,  RtrCSTNo,RtrLicNo,RtrLicExpiryDate,RtrDrugLicNo,RtrDrugExpiryDate,RtrPestLicNo,RtrPestExpiryDate,RtrRegDate,RtrDOB,RtrAnniversary,RtrCrDaysAlert,
RtrCrBillsAlert,RtrCrLimitAlert FROM (SELECT D.RtrId,D.RtrCode,D.RtrName,D.RtrAdd1,D.RtrAdd2,D.RtrAdd3,100000 as RtrSeqDtId,D.RtrCovMode,D.RtrCashDiscPerc,D.RtrCashdiscCond,D.RtrCashDiscAmt,
D.RtrTaxType,D.RMId AS DelvRMId,D.RTRDayOff, D.RtrCrBills,D.RtrCrLimit,D.RtrCrDays,D.RtrTINNo,D.RtrCSTNo,D.RtrLicNo,ISNULL(D.RtrLicExpiryDate,Convert(Varchar(10),
GetDate(),121)) AS RtrLicExpiryDate,D.RtrDrugLicNo,ISNULL(D.RtrDrugExpiryDate,Convert(Varchar(10),GetDate(),121)) AS RtrDrugExpiryDate,D.RtrPestLicNo,
IsNull(D.RtrPestExpiryDate,Convert(VarChar(10), GetDate(), 121)) AS RtrPestExpiryDate,ISNULL(D.RtrRegDate,Convert(Varchar(10),GetDate(),121)) AS RtrRegDate,
ISNULL(D.RtrDOB,Convert(Varchar(10),GetDate(),121)) AS RtrDOB,ISNULL(D.RtrAnniversary,Convert(Varchar(10),GetDate(),121)) AS RtrAnniversary,RtrCrDaysAlert,
RtrCrBillsAlert,RtrCrLimitAlert FROM Retailer D (NOLOCK) INNER JOIN RetailerMarket B ON  D.RtrId = B.RtrId  INNER JOIN RouteCovPlanMaster C ON C.RMId = B.RMId 
AND C.RMSRouteType=1 AND D.RtrId = CASE C.RtrId WHEN 0 THEN D.RtrId else C.RtrId END  INNER JOIN RouteCovPlanDetails E ON C.RCPMAsterId = E.RCPMasterId 
AND RCPGeneratedDates = ''vSParam'' AND RtrCOde <> ''Dummy''  AND RCPHolidayStatus=0 Where D.RtrStatus = 1 AND B.RMId = vFParam) a ORDER BY RtrSeqDtId')
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Cn2Cs_RetailerCreditNote' AND TYPE='P')
DROP PROCEDURE Proc_Cn2Cs_RetailerCreditNote
GO
--exec Proc_Cn2Cs_RetailerCreditNote 0
CREATE PROCEDURE Proc_Cn2Cs_RetailerCreditNote
(
	@Po_ErrNo INT OUTPUT
)
AS
/*********************************
* PROCEDURE	: Proc_Cn2Cs_RetailerCreditNote 0
* PURPOSE	: To Insert and Update records  from xml file in the Table CreditNoteRetailer 
* CREATED	: Gopikrishnan.R
* CREATED DATE	: 10/11/2016
* MODIFIED 
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}      
*********************************/ 
SET NOCOUNT ON
BEGIN
SET @Po_ErrNo = 0
DECLARE @CreditRefNo AS NVARCHAR(50)
DECLARE @CreditDate AS Datetime
DECLARE @CmpRtrCode AS NVARCHAR(100)
DECLARE @CreditAccount AS NVARCHAR(100)
DECLARE @Reason AS NVARCHAR(200)
DECLARE @CreditAmount AS NVARCHAR(100)
DECLARE @Status AS NVARCHAR(100)
DECLARE @CrNoteNumber AS NVARCHAR(50)
DECLARE @Rtrid AS INT
DECLARE @CoaId AS INT
DECLARE @ReasonId AS INT
DECLARE @Taction AS INT
DECLARE @Tabname AS NVARCHAR(100)
DECLARE @CntTabname AS NVARCHAR(100)
DECLARE @Fldname AS NVARCHAR(100)
DECLARE @ErrDesc AS NVARCHAR(1000)
DECLARE @sSql AS NVARCHAR(4000)
DECLARE @ErrStatus		INT
DELETE FROM Cn2Cs_Prk_RetailerCreditNote WHERE DownloadFlag = 'Y'
	SET @CntTabname='CreditNoteRetailer'
	SET @Fldname='CrNoteNumber'
	SET @Tabname = 'Cn2Cs_Prk_RetailerCreditNote'
	SET @Taction=1
	DECLARE Cur_CreditNoteRetailer CURSOR 
	FOR SELECT DISTINCT ISNULL([CreditRefNumber],''),ISNULL([CmpRtrCode],''),
	ISNULL([CreditAmount],'0'),ISNULL(Status,''),ISNULL([Reason],'')
	FROM Cn2Cs_Prk_RetailerCreditNote where DownloadFlag='D'
	
	OPEN Cur_CreditNoteRetailer
	FETCH NEXT FROM Cur_CreditNoteRetailer INTO @CreditRefNo,@CmpRtrCode,@CreditAmount,@Status,@Reason
	WHILE @@FETCH_STATUS=0
		
		BEGIN

			SET @Po_ErrNo=0
			SET @Taction=1

	        IF EXISTS (SELECT DISTINCT [CreditRefNumber] FROM Cn2Cs_Prk_RetailerCreditNote A WITH(NOLOCK),CreditNoteRetailer B WITH(NOLOCK)
	                   WHERE A.[CreditRefNumber] = @CreditRefNo AND A.[CreditRefNumber] = B.PostedRefNo AND ([CreditRefNumber] <> '' OR [CreditRefNumber] IS NOT NULL))
	        BEGIN
	             	SET @Po_ErrNo=1
					SET @Taction=0
					SET @ErrDesc = 'Credit RefNumber:  ' + @CreditRefNo + ' Already available in CreditNote Supplier' 		 
					INSERT INTO Errorlog VALUES (1,@Tabname,'CreditRefNumber',@ErrDesc)
	        END
	        IF EXISTS (SELECT DISTINCT [CreditRefNumber] FROM Cn2Cs_Prk_RetailerCreditNote WITH(NOLOCK) WHERE [CreditRefNumber] = @CreditRefNo AND 
	                   ([CreditRefNumber] = '' OR [CreditRefNumber] IS NULL))
	        BEGIN
	             	SET @Po_ErrNo=1
					SET @Taction=0
					SET @ErrDesc = 'Credit RefNumber:  ' + @CreditRefNo + ' Should not be Empty' 		 
					INSERT INTO Errorlog VALUES (1,@Tabname,'CreditRefNumber',@ErrDesc)
	        END            
	          
			IF NOT EXISTS  (SELECT * FROM Retailer WHERE CmpRtrCode = @CmpRtrCode )    
		  		BEGIN
					SET @Po_ErrNo=1
					SET @Taction=0
					SET @ErrDesc = 'Retailer Code:  ' + @CmpRtrCode + ' is not available' 		 
					INSERT INTO Errorlog VALUES (1,@Tabname,'CmpRtrCode',@ErrDesc)
				END
				
			  IF EXISTS (SELECT DISTINCT [CreditRefNumber] FROM Cn2Cs_Prk_RetailerCreditNote WITH(NOLOCK) WHERE [CreditRefNumber] = @CreditRefNo AND 
	                   ([Reason] = '' OR [Reason] IS NULL))
	        BEGIN
	             	SET @Po_ErrNo=1
					SET @Taction=0
					SET @ErrDesc = 'Reason for Credit Note Number :  ' + @CreditRefNo + ' Should not be Empty' 		 
					INSERT INTO Errorlog VALUES (1,@Tabname,'Reason',@ErrDesc)
	        END 
	        
	        IF NOT EXISTS(SELECT * FROM COAMaster (NOLOCK) WHERE AcName='Institutions Target Setting')
			BEGIN
					SET @Po_ErrNo=1
					SET @Taction=0
					SET @ErrDesc = 'Credit Account for Credit Reference No:  ' + @CreditRefNo + ' is not available' 		 
					INSERT INTO Errorlog VALUES (1,@Tabname,'CreditAccount',@ErrDesc)
				END
				
		   IF NOT EXISTS(SELECT * FROM ReasonMaster (NOLOCK) WHERE DESCRIPTION='Institutions Target Setting')
			BEGIN
					SET @Po_ErrNo=1
					SET @Taction=0
					SET @ErrDesc = 'Reason for Credit Reference No:  ' + @CreditRefNo + ' is not available' 		 
					INSERT INTO Errorlog VALUES (1,@Tabname,'ReasonMaster',@ErrDesc)
				END
			
			IF ISNUMERIC(@CreditAmount)=0
				BEGIN
					SET @Po_ErrNo=1	
					SET @Taction=0
					SET @ErrDesc = 'Credit Amount should not be empty'		 
					INSERT INTO Errorlog VALUES (6,@Tabname,'CreditAmount',@ErrDesc)
	
				END	
			ELSE
				BEGIN
					IF CAST(@CreditAmount AS NUMERIC(18,2))<=0
						BEGIN
							SET @Po_ErrNo=1	
							SET @Taction=0
							SET @ErrDesc = 'Credit Amount should be greater than zero'		 
							INSERT INTO Errorlog VALUES (7,@Tabname,'CreditAmount',@ErrDesc)
						END
				END
									
			IF LTRIM(RTRIM(@Status))='' 
				BEGIN
					SET @Po_ErrNo=0
					SET @Taction=0
					SET @ErrDesc = 'Status should not be empty'		 
					INSERT INTO Errorlog VALUES (8,@Tabname,'Status',@ErrDesc)
				END
			ELSE
				BEGIN
					IF LTRIM(RTRIM(@Status))='Active' OR LTRIM(RTRIM(@Status))='InActive'
						BEGIN
							IF @Po_ErrNo=0
								BEGIN
									SET @Po_ErrNo=0	
								END	
						END
					ELSE
						BEGIN
							SET @Po_ErrNo=1		
							SET @Taction=0
							SET @ErrDesc = 'Status Type '+@Status+ ' is not available'		 
							INSERT INTO Errorlog VALUES (9,@Tabname,'Status',@ErrDesc)
						END
				END
				
				SELECT @CrNoteNumber= dbo.Fn_GetPrimaryKeyString('CreditNoteRetailer','CrNoteNumber',CAST(YEAR(GETDATE()) AS INT),MONTH(GETDATE()))
			IF @CrNoteNumber=''
				BEGIN
					SET @Po_ErrNo=1		
					SET @Taction=0
					SET @ErrDesc = 'Reset the Counter value'		 
					INSERT INTO Errorlog VALUES (10,@Tabname,'Counter Value',@ErrDesc)
				END
				
			IF  @Taction=1 AND @Po_ErrNo=0
				BEGIN
				    SET @Rtrid =(SELECT TOP 1 Rtrid from  Retailer(Nolock) WHERE CmpRtrCode = @CmpRtrCode)
					SET @CoaId =(SELECT TOP 1 CoaId FROM  CoaMaster WHERE AcName='Institutions Target Setting')
					SET @ReasonId =(SELECT TOP 1 ReasonId FROM  ReasonMaster (Nolock) WHERE DESCRIPTION='Institutions Target Setting')
				    SET @CreditDate=CONVERT(NVARCHAR(10),GETDATE(),121)
				    
					INSERT INTO CreditNoteRetailer (CrNoteNumber,CrNoteDate,Rtrid,CoaId,ReasonId,Amount,CrAdjAmount,Status,PostedFrom,TransId,PostedRefNo,
					Availability,LastModBy,LastModDate,AuthId,AuthDate,Remarks,XMLUpload) 
					VALUES(@CrNoteNumber,CONVERT(NVARCHAR(10),@CreditDate,121),@Rtrid,@CoaId,@ReasonId,CAST(@CreditAmount AS NUMERIC(18,2)),0,
					(CASE @Status WHEN 'Active' THEN 1 WHEN 'InActive' THEN 2  END),@CrNoteNumber,32,@CreditRefNo,
					1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121),
					'Download from Console: '+@Reason,0)
					
					UPDATE Counters SET CurrValue=CurrValue+1 WHERE TabName='CreditNoteRetailer' AND FldName='CrNoteNumber'
					
					EXEC Proc_VoucherPosting 18,1,@CrNoteNumber,3,6,1,@CreditDate,@Po_ErrNo=@ErrStatus OUTPUT
				   
				    IF @ErrStatus<>1
					BEGIN
						SET @Po_ErrNo=1
						--
						CLOSE Cur_CreditNoteRetailer
						DEALLOCATE Cur_CreditNoteRetailer
						RETURN
					END
					ELSE
					BEGIN
						SET @Po_ErrNo=0
					END
				END
		FETCH NEXT FROM Cur_CreditNoteRetailer INTO @CreditRefNo,@CmpRtrCode,@CreditAmount,@Status,@Reason
	END

	CLOSE Cur_CreditNoteRetailer
	DEALLOCATE Cur_CreditNoteRetailer

    UPDATE Cn2Cs_Prk_RetailerCreditNote SET DownloadFlag = 'Y' WHERE CreditRefNumber IN (SELECT PostedRefNo FROM CreditNoteRetailer WITH (NOLOCK))
RETURN
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Fn_ReturnBudgetUtilizedForDashBoard' AND TYPE='FN')
DROP FUNCTION Fn_ReturnBudgetUtilizedForDashBoard
GO
CREATE  FUNCTION [dbo].[Fn_ReturnBudgetUtilizedForDashBoard](@Pi_CurrDate AS DATETIME)
RETURNS NUMERIC(38,6)
AS
BEGIN
/*********************************
* FUNCTION: Fn_ReturnBudgetUtilizedForDashBoard
* PURPOSE: Returns the Budget Utilized for the Range of Scheme for Dashboard
* NOTES: 
* CREATED: Jisha Mathew	02-06-2010
* MODIFIED 
* DATE			AUTHOR												DESCRIPTION
------------------------------------------------
 23-06-2020		MOHANA	S	  SR		PARCS202100039		Scheme amount with tax as per report	
*********************************/

	DECLARE @SchemeAmt 	NUMERIC(38,6)
	DECLARE @FreeValue	NUMERIC(38,6)
	DECLARE @GiftValue	NUMERIC(38,6)
	DECLARE @Points		INT
	DECLARE @RetSchemeAmt 	NUMERIC(38,6)
	DECLARE @RetFreeValue	NUMERIC(38,6)
	DECLARE @RetGiftValue	NUMERIC(38,6)
	DECLARE @RetPoints		INT
	DECLARE @WindowAmt	NUMERIC(38,6)
	DECLARE @BudgetUtilized	NUMERIC(38,6)

	SET @Points=0
	SET @RetPoints=0
	--SELECT @SchemeAmt = (ISNULL(SUM(FlatAmount - ReturnFlatAmount),0) + 
	--	ISNULL(SUM(DiscountPerAmount - ReturnDiscountPerAmount),0))
	--	FROM SalesInvoiceSchemeLineWise A INNER JOIN SalesInvoice B ON A.SalId = B.SalId 
	--	WHERE SchId In (SELECT SchID FROM SchemeMaster WHERE @Pi_CurrDate BETWEEN SchValidFrom AND SchValidTill AND SchStatus = 1)
	--	AND DlvSts <> 3

	DECLARE  @SalesSchemeDetailsTax	TABLE
	(
	SalId		nVarChar(100),
	SchId			INT,
	SlabId			INT, 
	PrdId			INT,
	PrdBatId		INT,
	SlNo            INT,
	GSTTax          Numeric(38,6)
	)

	INSERT INTO @SalesSchemeDetailsTax (SalId,SchId,SlabId,PrdId,PrdBatId,SlNo,GSTTax  )
	SELECT B.SalId,A.SchId,A.SlabId,A.PrdId,A.PrdBatId,A.Rowid,
	SUM((FlatAmount + DiscountPerAmount)*(C.TaxPerc/100)) 
	FROM SalesInvoiceSchemeLineWise A(NOLOCK) INNER JOIN SalesInvoice B (NOLOCK)ON A.SalId = B.SalId 
	INNER JOIN SalesInvoiceProductTax C(NOLOCK) ON C.SalId=A.SalId AND C.SalId=B.SalId
	AND C.PrdSlNo=A.RowId
	WHERE DlvSts in (4,5)  AND C.TaxPerc>0.00
	AND A.SchId In (SELECT SchID FROM SchemeMaster WHERE @Pi_CurrDate BETWEEN SchValidFrom AND SchValidTill AND SchStatus = 1) 
	GROUP BY B.SalId,A.SchId,A.SlabId,A.PrdId,A.PrdBatId,A.RowId
	
 
 	DECLARE @SchemeDetails TABLE 
	(
		Salid INT,
		Prdid INT,
		Prdbatid INT,
		Schid INT,
		Slabid INT,
		DiscPer NUMERIC(38,6),
		Tax NUMERIC(38,6)
	)

	INSERT INTO @SchemeDetails(Salid,Prdid,Prdbatid,Schid,Slabid,DiscPer )
	SELECT A.Salid,Prdid,Prdbatid,Schid,Slabid,(ISNULL(SUM(FlatAmount - ReturnFlatAmount),0) + ISNULL(SUM(DiscountPerAmount - ReturnDiscountPerAmount),0)) DiscPer
	FROM SalesInvoiceSchemeLineWise A INNER JOIN SalesInvoice B ON A.SalId = B.SalId 
	WHERE SchId In (SELECT SchID FROM SchemeMaster WHERE @Pi_CurrDate BETWEEN SchValidFrom AND SchValidTill AND SchStatus = 1)  AND DlvSts <> 3 
	GROUP BY A.Salid,Prdid,Schid,Slabid,Prdbatid

	UPDATE A SET Tax = B.GSTTax FROM @SchemeDetails A INNER JOIN (SELECT  S.Schid,SalId,Prdid,Prdbatid,slabid,CASE ApplyTaxForClaim WHEN 1 THEN SUM(GstTax) ELSE 0 END AS GstTax 	
	FRom  @SalesSchemeDetailsTax  A INNER JOIN SchemeMaster S ON S.Schid = A.Schid  GROUP BY S.SchId,SalId,Prdid,Prdbatid,slabid,ApplyTaxForClaim) B ON A.SchId = B.SchId AND A.SalId = B.SalId AND B.PrdId=A.Prdid 
	AND B.PrdBatId = A.PrdBatid

	SELECT @SchemeAmt = SUM(DiscPer+Tax) From @SchemeDEtails


	SELECT @FreeValue = ISNULL(SUM((FreeQty - ReturnFreeQty) * D.PrdBatDetailValue),0)
		FROM SalesInvoiceSchemeDtFreePrd A INNER JOIN SalesInvoice B ON A.SalId = B.SalId
		INNER JOIN ProductBatch C (NOLOCK) ON A.FreePrdId = C.PrdId AND 
		A.FreePrdBatId = C.PrdBatId INNER JOIN ProductBatchDetails D (NOLOCK) ON 
		C.PrdBatId = D.PrdBatId AND A.FreePriceId = D.PriceId INNER JOIN BatchCreation E (NOLOCK)
			ON E.BatchSeqId = C.BatchSeqId AND D.SlNo = E.SlNo AND E.ClmRte = 1 
		WHERE SchId In (SELECT SchID FROM SchemeMaster WHERE @Pi_CurrDate BETWEEN SchValidFrom AND SchValidTill AND SchStatus = 1) 
		AND DlvSts <> 3

	SELECT @GiftValue = ISNULL(SUM((GiftQty - ReturnGiftQty) * D.PrdBatDetailValue),0)
		FROM SalesInvoiceSchemeDtFreePrd A INNER JOIN SalesInvoice B ON A.SalId = B.SalId
		INNER JOIN ProductBatch C (NOLOCK) ON A.GiftPrdId = C.PrdId AND 
		A.GiftPrdBatId = C.PrdBatId INNER JOIN ProductBatchDetails D (NOLOCK) ON 
		C.PrdBatId = D.PrdBatId AND A.GiftPriceId = D.PriceId INNER JOIN BatchCreation E (NOLOCK)
			ON E.BatchSeqId = C.BatchSeqId AND D.SlNo = E.SlNo AND E.ClmRte = 1 
		WHERE SchId In (SELECT SchID FROM SchemeMaster WHERE @Pi_CurrDate BETWEEN SchValidFrom AND SchValidTill AND SchStatus = 1) 
		AND DlvSts <> 3

	SELECT @WindowAmt = ISNULL(SUM(AdjAmt),0) FROM SalesInvoiceWindowDisplay A 
		INNER JOIN SalesInvoice B ON A.SalId = B.SalId 
		WHERE SchId In (SELECT SchID FROM SchemeMaster WHERE @Pi_CurrDate BETWEEN SchValidFrom AND SchValidTill AND SchStatus = 1) 
		AND DlvSts <> 3

	SELECT @WindowAmt = @WindowAmt + ISNULL(SUM(Amount),0) FROM ChequeDisbursalMaster A 
		INNER JOIN ChequeDisbursalDetails B ON A.ChqDisRefNo = B.ChqDisRefNo 
		WHERE TransId In (SELECT SchID FROM SchemeMaster WHERE @Pi_CurrDate BETWEEN SchValidFrom AND SchValidTill AND SchStatus = 1) 
		AND TransType = 1

	SET @BudgetUtilized = ISNULL((@SchemeAmt + @FreeValue + @GiftValue + @Points + @WindowAmt),0)

	RETURN(@BudgetUtilized)
END 
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Proc_DashboardSummary' AND TYPE='P')
DROP PROCEDURE Proc_DashboardSummary
GO
--EXEC Proc_DashboardSummary
--SELECT * FROM DashBoardHD
--SELECT * FROM DashBoardBusinessPendingDT
--SELECT * FROM DashBoardSchemeDT
--SELECT * FROM DashBoardInventoryDT
CREATE PROCEDURE Proc_DashboardSummary
AS
/*********************************************************************************
* PROCEDURE	: Proc_DashboardSummary
* PURPOSE	: Dash Board Summary
* CREATED	: Jisha Mathew
* CREATED DATE	: 01/06/2010
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
----------------------------------------------------------------------------------
23-06-2020		MOHANA	S	  SR		PARCS202100039		Scheme amount with tax as per report
----------------------------------------------------------------------------------*/
SET NOCOUNT ON
BEGIN
	DECLARE @SchId INT
	DECLARE @Budget NUMERIC(38,3)
	DECLARE @CurrDate DATETIME
	DECLARE @YTDSales NUMERIC(38,3)
	DECLARE @MTDSales NUMERIC(38,3)
	DECLARE @PendingCollection NUMERIC(38,3)
	DECLARE @PenCollBillCnt INT
	DECLARE @TotSchemesCntforMonth INT
	DECLARE @TotSchemeBudget NUMERIC(38,3)
	DECLARE @TotSchemeUtilization NUMERIC(38,3)
	DECLARE @UtilPercenatge NUMERIC(38,3)
	DECLARE @TotSkuCnt INT
	DECLARE @TotActiveSkuCnt INT
	DECLARE @TotSkuCntWithStock INT
	DECLARE @StockValue NUMERIC(38,3)
	DECLARE @Utilization NUMERIC(38,3)
	DECLARE @Balance NUMERIC(38,3)
	DECLARE @UtilPercenatgeDT NUMERIC(38,3)
	SET  @YTDSales = 0.0
	SET  @MTDSales = 0.0
	SET  @PendingCollection = 0.0
	SET  @StockValue = 0.0
	SET  @PenCollBillCnt = 0
	TRUNCATE TABLE DashBoardHD
	TRUNCATE TABLE DashBoardBusinessPendingDT
	TRUNCATE TABLE  DashBoardSchemeDT
	TRUNCATE TABLE DashBoardInventoryDT
	/* Business Summary Details */
		/* YTD Sales Calculation */
		DECLARE @FDate DATETIME
		DECLARE @TDate DATETIME
		DECLARE @FrstYear INTEGER
		DECLARE @FrstMonth INTEGER
		SET @TDate = CONVERT(VARCHAR(10),GETDATE(),121)
		SET @FrstYear =  YEAR(GETDATE())
		SET @FDate =CAST(@FrstYear AS VARCHAR(5)) +  '-01-01'
----		SET @FDate = (SELECT TOP 1 JcmSdt FROM JCMast A,JCMonth B
----		WHERE A.JcmId = B.JcmId AND JcmYr = @FrstYear ORDER BY JcmSdt) 
		SELECT @YTDSales = ISNULL(SUM(SalGrossAmount),0) FROM SalesInvoice
		WHERE SalInvDate BETWEEN @FDate  AND @TDate  AND DlvSts <> 3 --AND YEAR(SalInvDate) = @FrstYear
		/* MTD Sales Calculation */
		DECLARE @MFDate DATETIME
		DECLARE @MTDate DATETIME
		DECLARE @MFrstYear INTEGER
		DECLARE @MFrstMonth INTEGER
		SET @MTDate = CONVERT(VARCHAR(10),GETDATE(),121)
		SET @MFrstYear  =YEAR(GETDATE())
		SET @MFrstMonth =MONTH(GETDATE())
		SET @MFDate = CAST(@MFrstYear AS VARCHAR(5)) +  '-' + Cast(@MFrstMonth AS VARCHAR(5)) + '-01'
		SELECT @MTDSales = Isnull(SUM(SalGrossAmount),0) FROM SalesInvoice
		WHERE SalInvDate BETWEEN @MFDate AND @MTDate AND DlvSts <> 3  --AND Month(SalInvDate) = @MFrstMonth
		INSERT INTO DashBoardHD (YTDSales,MTDSales,PendingCollBillCnt,PendingCollectionAmt,TotSchemesCntforMonth,TotSchemeBudget,
		TotSchemeUtilization,UtilPercenatge,TotSkuCnt,TotActiveSkuCnt,TotSkuCntWithStock,StockValue)
		SELECT @YTDSales,@MTDSales,0,0.00,0,0.00,0.00,0.00,0,0,0,0.00
		
		INSERT INTO DashBoardBusinessPendingDT (SMId,SMCode,SMName,BillsCnt,LinesCut,UndeliveredBillsCnt,
		CancellededBillsCnt,SalesValue,ReturnValue,YTD,MTD,PendingBillsCnt,PendingAmount)
		SELECT B.SMId,SMCode,SMName,COUNT(DISTINCT A.SalId) AS BillCnt,COUNT(DISTINCT PrdID) AS LinesCut,0,0,
		0,0.00,1,0,0,0.00
		FROM SalesInvoice A,SalesMan B,SalesInvoiceProduct C
		WHERE A.SmId = B.SmId AND SalInvDate BETWEEN @FDate AND @TDate AND DlvSts <> 3 AND A.SalId = C.SalId
		GROUP BY B.SMId,SMCode,SMName ORDER BY B.SmId
		UPDATE DashBoardBusinessPendingDT SET SalesValue=A.SalesValue FROM (
		SELECT B.SMId,ISNULL(SUM(SalGrossAmount),0) AS SalesValue
		FROM SalesInvoice A,SalesMan B
		WHERE A.SmId = B.SmId AND SalInvDate BETWEEN @FDate AND @TDate AND DlvSts <> 3 
		GROUP BY B.SMId) A WHERE DashBoardBusinessPendingDT.SMId=A.SMId AND DashBoardBusinessPendingDT.YTD=1
		INSERT INTO DashBoardBusinessPendingDT (SMId,SMCode,SMName,BillsCnt,LinesCut,UndeliveredBillsCnt,
		CancellededBillsCnt,SalesValue,ReturnValue,YTD,MTD,PendingBillsCnt,PendingAmount)
		SELECT B.SMId,SMCode,SMName,COUNT(DISTINCT A.SalId) AS BillCnt,COUNT(DISTINCT PrdID) AS LinesCut,0,0,
		0,0.00,0,1,0,0.00
		FROM SalesInvoice A,SalesMan B,SalesInvoiceProduct C
		WHERE A.SmId = B.SmId AND SalInvDate BETWEEN @MFDate AND @MTDate AND DlvSts <> 3 AND A.SalId = C.SalId
		GROUP BY B.SMId,SMCode,SMName ORDER BY B.SmId
		
		UPDATE DashBoardBusinessPendingDT SET SalesValue=A.SalesValue FROM (
		SELECT B.SMId,ISNULL(SUM(SalGrossAmount),0) AS SalesValue
		FROM SalesInvoice A,SalesMan B
		WHERE A.SmId = B.SmId AND SalInvDate BETWEEN @MFDate AND @MTDate AND DlvSts <> 3 
		GROUP BY B.SMId) A WHERE DashBoardBusinessPendingDT.SMId=A.SMId AND DashBoardBusinessPendingDT.MTD=1
		SELECT COUNT(SalId) AS UDBillsCnt,SmID INTO #TempYTDUDBills FROM SalesInvoice 
		WHERE SalInvDate BETWEEN @FDate AND @TDate AND DlvSts IN (1,2) GROUP BY SmId ORDER BY SmId
		SELECT COUNT(SalId) AS UDBillsCnt,SmID INTO #TempMTDUDBills FROM SalesInvoice 
		WHERE SalInvDate BETWEEN @MFDate AND @MTDate AND DlvSts IN (1,2) GROUP BY SmId ORDER BY SmId
		UPDATE DashBoardBusinessPendingDT SET UndeliveredBillsCnt = UDBillsCnt FROM DashBoardBusinessPendingDT A,
		#TempYTDUDBills B WHERE A.SmID = B.SmID AND YTD = 1
		UPDATE DashBoardBusinessPendingDT SET UndeliveredBillsCnt = UDBillsCnt FROM DashBoardBusinessPendingDT A,
		#TempMTDUDBills B WHERE A.SmID = B.SmID AND MTD = 1
		SELECT COUNT(SalId) AS CancelBillsCnt,SmID INTO #TempYTDCancelBills FROM SalesInvoice 
		WHERE SalInvDate BETWEEN @FDate AND @TDate AND DlvSts IN (3) GROUP BY SmId ORDER BY SmId
		SELECT COUNT(SalId) AS CancelBillsCnt,SmID INTO #TempMTDCancelBills FROM SalesInvoice 
		WHERE SalInvDate BETWEEN @MFDate AND @MTDate AND DlvSts IN (3) GROUP BY SmId ORDER BY SmId
		UPDATE DashBoardBusinessPendingDT SET CancellededBillsCnt = CancelBillsCnt FROM DashBoardBusinessPendingDT A,
		#TempYTDCancelBills B WHERE A.SmID = B.SmID AND YTD = 1
		UPDATE DashBoardBusinessPendingDT SET CancellededBillsCnt = CancelBillsCnt FROM DashBoardBusinessPendingDT A,
		#TempMTDCancelBills B WHERE A.SmID = B.SmID AND MTD = 1
		SELECT ISNULL(SUM(RtnGrossAmt),0) AS ReturnValue,SmId INTO #TempYTDReturn FROM ReturnHeader 
		WHERE ReturnDate BETWEEN @FDate AND @TDate GROUP BY SmId ORDER BY SmId
		SELECT ISNULL(SUM(RtnGrossAmt),0) AS ReturnValue,SmId INTO #TempMTDReturn FROM ReturnHeader 
		WHERE ReturnDate BETWEEN @MFDate AND @MTDate GROUP BY SmId ORDER BY SmId
		UPDATE DashBoardBusinessPendingDT SET ReturnValue = B.ReturnValue FROM DashBoardBusinessPendingDT A,
		#TempYTDReturn B WHERE A.SmID = B.SmID AND YTD = 1
		UPDATE DashBoardBusinessPendingDT SET ReturnValue = B.ReturnValue FROM DashBoardBusinessPendingDT A,
		#TempMTDReturn B WHERE A.SmID = B.SmID AND MTD = 1
	/* Pending Bills Details */
		SELECT @PenCollBillCnt = Count(*) FROM SalesInvoice WHERE DlvSts = 4
		SELECT @PendingCollection = Isnull(SUM(SalNetAmt - SalPayAmt),0) FROM SalesInvoice WHERE DlvSts IN (4,5)
--		INSERT INTO DashBoardHD (DashBoardNo,YTDSales,MTDSales,PendingCollBillCnt,PendingCollectionAmt,TotSchemesCntforMonth,TotSchemeBudget,
--		TotSchemeUtilization,UtilPercenatge,TotSkuCnt,TotActiveSkuCnt,TotSkuCntWithStock,StockValue)
--		SELECT 2,0.00,0.00,@PenCollBillCnt,@PendingCollection,0,0.00,0.00,0.00,0,0,0,0.00
		UPDATE DashBoardHD SET PendingCollBillCnt = @PenCollBillCnt,PendingCollectionAmt = @PendingCollection
		SELECT COUNT(SalId) AS PendingBillCnt,Isnull(SUM(SalNetAmt - SalPayAmt),0) AS PendingAmount,SmID 
		INTO #TempPending FROM SalesInvoice WHERE DlvSts IN (4) GROUP BY SmId ORDER BY SmId
		UPDATE DashBoardBusinessPendingDT SET PendingBillsCnt = PendingBillCnt--,PendingAmount = B.PendingAmount
		FROM DashBoardBusinessPendingDT A,#TempPending B WHERE A.SmID = B.SmID AND YTD = 1
		SELECT COUNT(SalId) AS PendingBillCnt,Isnull(SUM(SalNetAmt - SalPayAmt),0) AS PendingAmount,SmID 
		INTO #TempPendingAmt FROM SalesInvoice WHERE DlvSts IN (4,5) GROUP BY SmId ORDER BY SmId
		UPDATE DashBoardBusinessPendingDT SET PendingAmount = B.PendingAmount
		FROM DashBoardBusinessPendingDT A,#TempPendingAmt B WHERE A.SmID = B.SmID AND YTD = 1
	/* Scheme Utilization Details */
		SET @CurrDate = CONVERT(Varchar(10),GetDate(),121)
		SELECT @TotSchemesCntforMonth = Count(*) FROM SchemeMaster 
		WHERE @CurrDate BETWEEN SchValidFrom AND SchValidTill AND SchStatus = 1
		SELECT @TotSchemeBudget = ISNULL(SUM(Budget),0) FROM SchemeMaster 
		WHERE @CurrDate BETWEEN SchValidFrom AND SchValidTill AND SchStatus = 1
		SELECT @TotSchemeUtilization = ISNULL(dbo.Fn_ReturnBudgetUtilizedForDashBoard(@CurrDate),0)
		SET @UtilPercenatge = (SELECT CASE @TotSchemeBudget WHEN 0 THEN 0 ELSE ISNULL(((@TotSchemeUtilization / @TotSchemeBudget) * 100),0) END)
--		INSERT INTO DashBoardHD (DashBoardNo,YTDSales,MTDSales,PendingCollBillCnt,PendingCollectionAmt,TotSchemesCntforMonth,TotSchemeBudget,
--		TotSchemeUtilization,UtilPercenatge,TotSkuCnt,TotActiveSkuCnt,TotSkuCntWithStock,StockValue)
--		SELECT 3,0.00,0.00,0,0.00,@TotSchemesCntforMonth,@TotSchemeBudget,@TotSchemeUtilization,@UtilPercenatge,0,0,0,0.00
		UPDATE DashBoardHD SET TotSchemesCntforMonth = @TotSchemesCntforMonth,TotSchemeBudget = @TotSchemeBudget,
		TotSchemeUtilization = @TotSchemeUtilization,UtilPercenatge = @UtilPercenatge
		INSERT INTO DashBoardSchemeDT (SchId,SchCode,SchDsc,Budget,Utilization,Balance,UtilPercenatgeDT)
		SELECT SchId,SchCode,SchDsc,Budget,0.00,0.00,0.00 FROM SchemeMaster 
		WHERE @CurrDate BETWEEN SchValidFrom AND SchValidTill AND SchStatus = 1
		DECLARE Cur_SchId Cursor For
		SELECT DISTINCT SchID,Budget FROM DashBoardSchemeDT ORDER By SchId
		OPEN Cur_SchId	
		FETCH NEXT FROM Cur_SchId INTO @SchId,@Budget
		WHILE @@FETCH_STATUS =0
		BEGIN
			SET @Utilization = 0.00
			SELECT @Utilization = ISNULL(dbo.Fn_ReturnBudgetUtilized_DashBoard(@SchId),0)
			SELECT @Balance = ISNULL((@Budget - @Utilization),0) 
			SET @UtilPercenatgeDT = (SELECT CASE @Budget WHEN 0 THEN 0 ELSE ISNULL(((@Utilization / @Budget) * 100),0) END)
			
			UPDATE DashBoardSchemeDT SET Utilization = @Utilization,Balance = @Balance,UtilPercenatgeDT = @UtilPercenatgeDT
			WHERE SchId = @SchId
			FETCH NEXT FROM Cur_SchId INTO @SchId,@Budget
		END
		CLOSE Cur_SchId
		DEALLOCATE Cur_SchId
	/*  Inventory Details */
	
		SELECT @TotSkuCnt = COUNT(*) FROM Product
		SELECT @TotActiveSkuCnt = COUNT(*) FROM Product WHERE PrdStatus = 1
		SELECT @TotSkuCntWithStock= COUNT(DISTINCT A.PrdId) FROM Product A (NOLOCK) INNER JOIN
		(SELECT (SUM(PrdBatLcnSih)+SUM(PrdBatLcnUih)+SUM(PrdBatLcnFre))-
		(SUM(PrdBatLcnRessih)+SUM(PrdBatLcnResUih)+SUM(PrdBatLcnResFre)) AS Stock,PrdId FROM 
			ProductBatchLocation (NOLOCK) GROUP BY PrdId HAVING (SUM(PrdBatLcnSih)+SUM(PrdBatLcnUih)+SUM(PrdBatLcnFre))-
			(SUM(PrdBatLcnRessih)+SUM(PrdBatLcnResUih)+SUM(PrdBatLcnResFre))>0) B ON A.PrdId = B.PrdId
		WHERE A.PrdStatus = 1
		
		--Stock Details
		SELECT A.PrdId,A.PrdBatId,A.LcnId,A.TransDate,SUM(SalClsStock) AS SalClsStock 
		INTO #TmpStockValue FROM StockLedger A (NOLOCK) 
		INNER JOIN (SELECT PrdId,PrdBatId,LcnId,MAX(TransDate) AS TransDate FROM StockLedger (NOLOCK) GROUP BY PrdId,PrdBatId,LcnId)B
		ON A.PrdId = B.PrdId AND A.PrdBatId = B.PrdBatId AND A.LcnId = B.LcnId AND A.TransDate = B.TransDate
		GROUP BY A.PrdId,A.PrdBatId,A.LcnId,A.TransDate
		
		--Product Batch Price Details
		SELECT DISTINCT A.PrdId,A.PrdBatId,C.MRP,C.PurRate,C.SelRate INTO #ProductBatchDetails FROM ProductBatch A (NOLOCK)
		INNER JOIN (SELECT DISTINCT PrdBatId,MAX(PriceId) AS PriceId FROM ProductBatchDetails (NOLOCK) GROUP BY PrdBatId)B ON A.PrdBatId = B.PrdBatId 
		INNER JOIN (
		SELECT DISTINCT PrdBatId,PriceId,SUM(MRP) AS MRP,SUM(PurRate) AS PurRate,SUM(SelRate) AS SelRate FROM(
		SELECT DISTINCT PrdBatId,PriceId,PrdBatDetailValue AS MRP,0 AS PurRate,0 AS SelRate FROM ProductBatchDetails B (NOLOCK) WHERE SLNo = 1 UNION
		SELECT DISTINCT PrdBatId,PriceId,0 AS MRP,PrdBatDetailValue AS PurRate,0 AS SelRate FROM ProductBatchDetails B (NOLOCK) WHERE SLNo = 2 UNION
		SELECT DISTINCT PrdBatId,PriceId,0 AS MRP,0 AS PurRate,PrdBatDetailValue AS SelRate FROM ProductBatchDetails B (NOLOCK) WHERE SLNo = 3)Qry
		GROUP BY PrdBatId,PriceId) C ON A.PrdBatId = C.PrdBatId AND B.PrdBatId = C.PrdBatId AND B.PriceId = C.PriceId
		ORDER BY A.PrdId,A.PrdBatId
		--Till Here
		 
		SELECT @StockValue = ISNULL(SUM(StockValue),0) FROM (
		SELECT A.PrdId,A.PrdBatId,(SUM(SalClsStock)*SelRate) AS StockValue FROM #TmpStockValue A 
		INNER JOIN #ProductBatchDetails B ON A.PrdId = B.PrdId AND A.PrdBatId = B.PrdBatId GROUP BY A.PrdId,A.PrdBatId,SelRate)Qry
		
		UPDATE DashBoardHD SET TotSkuCnt = @TotSkuCnt,TotActiveSkuCnt = @TotActiveSkuCnt,
		TotSkuCntWithStock = @TotSkuCntWithStock,StockValue = @StockValue		
			
		INSERT INTO DashBoardInventoryDT(StockValueSelRte,StockValuePurRte,StockValueMRP)
		SELECT DISTINCT SUM(StockValueSelRte) AS StockValueSelRte,SUM(StockValuePurRte) AS StockValuePurRte,SUM(StockValueMRP) AS StockValueMRP
		FROM (SELECT DISTINCT A.PrdId,A.PrdBatId,ISNULL((SUM(SalClsStock)*SelRate),0) StockValueSelRte,
		ISNULL((SUM(SalClsStock)*PurRate),0) StockValuePurRte,ISNULL((SUM(SalClsStock)*MRP),0) StockValueMRP FROM #TmpStockValue A 
		INNER JOIN #ProductBatchDetails B (NOLOCK) ON A.PrdId = B.PrdId GROUP BY A.PrdId,A.PrdBatId,SelRate,PurRate,MRP)Qry	
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Fn_ReturnBudgetUtilized_DashBoard' AND TYPE='FN')
DROP FUNCTION Fn_ReturnBudgetUtilized_DashBoard
GO
  --SELECT dbo.Fn_ReturnBudgetUtilized(8) AS Amt
CREATE FUNCTION Fn_ReturnBudgetUtilized_DashBoard
(
	@Pi_SchId INT
)
RETURNS NUMERIC(38,6)
AS
/***********************************************
* FUNCTION: Fn_ReturnBudgetUtilized
* PURPOSE: Returns the Budget Utilized for the Selected Scheme
* NOTES:
* CREATED: Thrinath Kola	11-06-2007
* MODIFIED
* DATE			AUTHOR     DESCRIPTION
------------------------------------------------
* 22/04/2010	Nanda	   Added FBM Scheme	
23-06-2020		MOHANA	S	  SR		PARCS202100039		Scheme amount with tax as per report
************************************************/
BEGIN
	DECLARE @SchemeAmt 		NUMERIC(38,6)
	DECLARE @FreeValue		NUMERIC(38,6)
	DECLARE @GiftValue		NUMERIC(38,6)
	DECLARE @Points			INT
	DECLARE @RetSchemeAmt 	NUMERIC(38,6)
	DECLARE @RetFreeValue	NUMERIC(38,6)
	DECLARE @RetGiftValue	NUMERIC(38,6)
	DECLARE @RetPoints		INT
	DECLARE @WindowAmt		NUMERIC(38,6)
	DECLARE @BudgetUtilized	NUMERIC(38,6)
	DECLARE @FBMSchAmt		NUMERIC(38,6)
	DECLARE @QPSSchAmt		NUMERIC(38,6)
	SET @Points=0
	SET @RetPoints=0
	--Added by Sathishkumar Veeramani 2013/03/14
	DECLARE @ProductBatchDetails TABLE 
	(
		PrdId NUMERIC(18,0),
		PrdBatId NUMERIC(18,0),
		PriceId NUMERIC(18,0),
		PrdBatDetailValue NUMERIC(18,6)
	)
	
		
	INSERT INTO @ProductBatchDetails (PrdId,PrdBatId,PriceId,PrdBatDetailValue) 
	SELECT DISTINCT A.PrdId,A.PrdBatId,B.PriceId,B.PrdBatDetailValue 
	FROM ProductBatch A WITH (NOLOCK) 
	INNER JOIN ProductBatchDetails B WITH (NOLOCK) ON A.PrdBatId = B.PrdBatId 
	INNER JOIN BatchCreation C WITH (NOLOCK) ON  A.BatchSeqId = C.BatchSeqId  AND B.SLNo = C.SLNo AND C.ClmRte = 1
	INNER JOIN SalesInvoiceSchemeDtFreePrd S (NOLOCK) ON A.PrdBatId = S.FreePrdBatId AND B.PrdBatId = S.FreePrdBatId  AND S.Schid = @Pi_SchId
	AND B.PriceId = S.FreePriceId 
	--Till Here
	
	--SELECT @SchemeAmt = (ISNULL(SUM(FlatAmount - ReturnFlatAmount),0) +
	--	ISNULL(SUM(DiscountPerAmount - ReturnDiscountPerAmount),0)) FROM
	--	(SELECT A.SalId,A.SchId,A.FlatAmount,A.ReturnFlatAmount,A.DiscountPerAmount,A.ReturnDiscountPerAmount FROM 
	--	SalesInvoiceSchemeLineWise A (NOLOCK)INNER JOIN SalesInvoice B (NOLOCK) ON A.SalId = B.SalId AND A.SchId = @Pi_SchId AND B.Dlvsts<> 3)A1
	--	INNER JOIN SchemeMaster S (NOLOCK) ON A1.SchId=S.SchId AND S.FBM=0 AND S.SchId = @Pi_SchId
	--SELECT @FreeValue = ISNULL(SUM((FreeQty - ReturnFreeQty) * D.PrdBatDetailValue),0)
	--	FROM SalesInvoiceSchemeDtFreePrd A INNER JOIN SalesInvoice B ON A.SalId = B.SalId
	--	INNER JOIN ProductBatch C (NOLOCK) ON A.FreePrdId = C.PrdId AND A.FreePrdBatId = C.PrdBatId
	--	INNER JOIN ProductBatchDetails D (NOLOCK) ON C.PrdBatId = D.PrdBatId AND A.FreePriceId = D.PriceId
	--	INNER JOIN BatchCreation E (NOLOCK)	ON E.BatchSeqId = C.BatchSeqId AND D.SlNo = E.SlNo AND E.ClmRte = 1
	--	INNER JOIN SchemeMaster S ON A.SchId=S.SchId AND S.FBM=0
	--	WHERE A.SchId = @Pi_SchId AND DlvSts <> 3

	DECLARE  @SalesSchemeDetailsTax	TABLE
	(
	SalId		nVarChar(100),
	SchId			INT,
	SlabId			INT, 
	PrdId			INT,
	PrdBatId		INT,
	SlNo            INT,
	GSTTax          Numeric(38,6)
	)

	INSERT INTO @SalesSchemeDetailsTax (SalId,SchId,SlabId,PrdId,PrdBatId,SlNo,GSTTax  )
	SELECT B.SalId,A.SchId,A.SlabId,A.PrdId,A.PrdBatId,A.Rowid,
	SUM((FlatAmount + DiscountPerAmount)*(C.TaxPerc/100)) 
	FROM SalesInvoiceSchemeLineWise A(NOLOCK) INNER JOIN SalesInvoice B (NOLOCK)ON A.SalId = B.SalId 
	INNER JOIN SalesInvoiceProductTax C(NOLOCK) ON C.SalId=A.SalId AND C.SalId=B.SalId
	AND C.PrdSlNo=A.RowId
	WHERE DlvSts in (4,5)  AND C.TaxPerc>0.00
	AND A.SchId = @Pi_SchId
	GROUP BY B.SalId,A.SchId,A.SlabId,A.PrdId,A.PrdBatId,A.RowId
	
 
 	DECLARE @SchemeDetails TABLE 
	(
		Salid INT,
		Prdid INT,
		Prdbatid INT,
		Schid INT,
		Slabid INT,
		DiscPer NUMERIC(38,6),
		Tax NUMERIC(38,6)
	)

	INSERT INTO @SchemeDetails(Salid,Prdid,Prdbatid,Schid,Slabid,DiscPer )
	SELECT A.Salid,Prdid,Prdbatid,Schid,Slabid,(ISNULL(SUM(FlatAmount - ReturnFlatAmount),0) + ISNULL(SUM(DiscountPerAmount - ReturnDiscountPerAmount),0)) DiscPer
	FROM SalesInvoiceSchemeLineWise A INNER JOIN SalesInvoice B ON A.SalId = B.SalId 
	WHERE SchId =@Pi_SchId  AND DlvSts <> 3 
	GROUP BY A.Salid,Prdid,Schid,Slabid,Prdbatid

	UPDATE A SET Tax = B.GSTTax FROM @SchemeDetails A INNER JOIN (SELECT  S.Schid,SalId,Prdid,Prdbatid,slabid,CASE ApplyTaxForClaim WHEN 1 THEN SUM(GstTax) ELSE 0 END AS GstTax 	
	FRom  @SalesSchemeDetailsTax  A INNER JOIN SchemeMaster S ON S.Schid = A.Schid  GROUP BY S.SchId,SalId,Prdid,Prdbatid,slabid,ApplyTaxForClaim) B ON A.SchId = B.SchId AND A.SalId = B.SalId AND B.PrdId=A.Prdid 
	AND B.PrdBatId = A.PrdBatid

	SELECT @SchemeAmt = SUM(DiscPer+Tax) From @SchemeDEtails

	SELECT  @FreeValue =ISNULL(SUM((FreeQty - ReturnFreeQty) * C.PrdBatDetailValue),0)
		FROM 
		(SELECT A.SchId,A.FreePrdId,A.FreePrdBatId,A.FreePriceId,A.FreeQty,A.ReturnFreeQty FROM 
		SalesInvoiceSchemeDtFreePrd A (NOLOCK) INNER JOIN SalesInvoice B (NOLOCK) ON A.SalId = B.SalId WHERE A.SchId=@Pi_SchId AND B.DlvSts <> 3) A2
		INNER JOIN @ProductBatchDetails C ON A2.FreePrdId = C.PrdId AND A2.FreePrdBatId = C.PrdBatId AND A2.FreePriceId = C.PriceId
		--INNER JOIN @ProductBatchDetails D ON C.PrdBatId = D.PrdBatId AND A2.FreePriceId = D.PriceId
		--INNER JOIN BatchCreation E (NOLOCK)	ON E.BatchSeqId = C.BatchSeqId AND D.SlNo = E.SlNo AND E.ClmRte = 1
		INNER JOIN SchemeMaster S ON A2.SchId=S.SchId AND S.FBM=0 AND S.SchId = @Pi_SchId
		WHERE A2.SchId = @Pi_SchId 		
	SELECT @GiftValue = ISNULL(SUM((GiftQty - ReturnGiftQty) * C.PrdBatDetailValue),0) FROM
		(SELECT A.SchId,A.GiftPrdId,A.GiftPrdBatId,A.GiftPriceId,A.GiftQty,A.ReturnGiftQty FROM SalesInvoiceSchemeDtFreePrd A (NOLOCK)	
			INNER JOIN SalesInvoice B (NOLOCK) ON A.SalId = B.SalId AND DlvSts <> 3 )A3
		INNER JOIN @ProductBatchDetails C ON A3.GiftPrdId = C.PrdId AND A3.GiftPrdBatId = C.PrdBatId AND A3.GiftPriceId = C.PriceId
		--INNER JOIN @ProductBatchDetails D ON C.PrdBatId = D.PrdBatId AND A3.GiftPriceId = D.PriceId
		--INNER JOIN BatchCreation E (NOLOCK)	ON E.BatchSeqId = C.BatchSeqId AND D.SlNo = E.SlNo AND E.ClmRte = 1
		INNER JOIN SchemeMaster S ON A3.SchId=S.SchId AND S.FBM=0 AND S.SchId = @Pi_SchId
		WHERE A3.SchId = @Pi_SchId 
--	 SELECT @Points = ISNULL(SUM(Points - ReturnPoints),0) FROM SalesInvoiceSchemeDtPoints A
-- 		INNER JOIN SalesInvoice B ON A.SalId = B.SalId WHERE SchId = @Pi_SchId
-- 		AND DlvSts <> 3
--	 SELECT @RetSchemeAmt = (ISNULL(SUM(ReturnFlatAmount),0) +
-- 		ISNULL(SUM(ReturnDiscountPerAmount),0))
-- 		FROM ReturnSchemeLineDt A INNER JOIN ReturnHeader B ON A.ReturnId = B.ReturnId
-- 		WHERE SchId = @Pi_SchId AND Status = 0
--
--	 SELECT @RetFreeValue = ISNULL(SUM(ReturnFreeQty * D.PrdBatDetailValue),0)
-- 		FROM ReturnSchemeFreePrdDt A INNER JOIN ReturnHeader B ON A.ReturnId = B.ReturnId
-- 		INNER JOIN ProductBatch C (NOLOCK) ON A.FreePrdId = C.PrdId AND
-- 		A.FreePrdBatId = C.PrdBatId INNER JOIN ProductBatchDetails D (NOLOCK) ON
-- 		C.PrdBatId = D.PrdBatId AND A.FreePriceId = D.PriceId INNER JOIN BatchCreation E (NOLOCK)
--			 ON E.BatchSeqId = C.BatchSeqId AND D.SlNo = E.SlNo AND E.ClmRte = 1
-- 		WHERE SchId = @Pi_SchId AND B.Status = 0
--
--	 SELECT @RetGiftValue = ISNULL(SUM(ReturnGiftQty * D.PrdBatDetailValue),0)
-- 		FROM ReturnSchemeFreePrdDt A INNER JOIN ReturnHeader B ON A.ReturnId = B.ReturnId
-- 		INNER JOIN ProductBatch C (NOLOCK) ON A.GiftPrdId = C.PrdId AND
-- 		A.GiftPrdBatId = C.PrdBatId INNER JOIN ProductBatchDetails D (NOLOCK) ON
-- 		C.PrdBatId = D.PrdBatId AND A.GiftPriceId = D.PriceId INNER JOIN BatchCreation E (NOLOCK)
--			 ON E.BatchSeqId = C.BatchSeqId AND D.SlNo = E.SlNo AND E.ClmRte = 1
-- 		WHERE SchId = @Pi_SchId AND B.Status = 0
--	 SELECT @RetPoints = ISNULL(SUM(ReturnPoints),0) FROM ReturnSchemePointsDt A
-- 		INNER JOIN ReturnHeader B ON A.ReturnId = B.ReturnId WHERE SchId = @Pi_SchId
-- 		AND Status = 0
	SELECT @WindowAmt = ISNULL(SUM(AdjAmt),0) FROM SalesInvoiceWindowDisplay A (NOLOCK)
		INNER JOIN SalesInvoice B ON A.SalId = B.SalId
		WHERE SchId = @Pi_SchId AND DlvSts <> 3
	SELECT @WindowAmt = @WindowAmt + ISNULL(SUM(Amount),0) FROM ChequeDisbursalMaster A (NOLOCK)
		INNER JOIN ChequeDisbursalDetails B (NOLOCK) ON A.ChqDisRefNo = B.ChqDisRefNo
		WHERE TransId = @Pi_SchId AND TransType = 1 
	SELECT @FBMSchAmt=ISNULL(SUM(DiscAmt),0) FROM FBMSchDetails (NOLOCK) WHERE SchId=@Pi_SchId AND TransId IN (2)
	AND SchId IN(SELECT SchId FROM SchemeMaster (NOLOCK) WHERE FBM=1)
	--->Added By Nanda on 27/10/2010
	SELECT @QPSSchAmt=ISNULL(SUM(CrNoteAmount),0) FROM SalesInvoiceQPSSchemeAdj SIQ (NOLOCK)
	INNER JOIN SalesInvoice SI (NOLOCK) ON SI.SalId=SIQ.SalId AND SI.DlvSts>3 AND SIQ.SchId=@Pi_SchId
	WHERE SIQ.SchId IN(SELECT SchId FROM SchemeMaster (NOLOCK) WHERE FBM=0)
	
	SET @BudgetUtilized = (ISNULL(@SchemeAmt,0) + ISNULL(@FreeValue,0) + ISNULL(@GiftValue,0) + ISNULL(@Points,0) + ISNULL(@WindowAmt,0)+ ISNULL(@FBMSchAmt,0)+ISNULL(@QPSSchAmt,0))
	-- 	- (@RetSchemeAmt + @RetFreeValue + @RetGiftValue + @RetPoints)
	SET @BudgetUtilized=ISNULL(@BudgetUtilized,0)
	
	--Added By Sathishkumar Veeramani 2013/09/04
	IF EXISTS (SELECT * FROM SchemeMaster WHERE SchId = @Pi_SchId AND SchType = 5)
	BEGIN
		SET @BudgetUtilized = 0
		SELECT @BudgetUtilized = ISNULL(SUM(SchemeUtlzAmt),0) FROM (
		SELECT DISTINCT A.SalId,SchId,CurSchAmt AS SchemeUtlzAmt FROM PercentageWiseSchemeHD A WITH(NOLOCK),SalesInvoice B WITH (NOLOCK)
		WHERE A.SalId = B.SalId AND DlvSts <> 3 AND SchId = @Pi_SchId AND A.SalId NOT IN (SELECT SalId FROM ReturnHeader WITH (NOLOCK)
		WHERE InvoiceType = 1 AND ReturnMode = 1)UNION
		SELECT DISTINCT A.SalId,SchId,-1*(ReturnAmt) AS SchemeUtlzAmt FROM PercentageWiseSchemeHD A WITH (NOLOCK),
		ReturnHeader B WITH (NOLOCK) WHERE A.SalId = B.SalId AND SchId = @Pi_SchId AND ReturnAmt <> 0 AND InvoiceType = 1 AND ReturnMode = 2
		AND A.SalId NOT IN (SELECT SalId FROM ReturnHeader WITH (NOLOCK) WHERE InvoiceType = 1 AND ReturnMode = 1)) Qry
	END	
	--Till Here
	
	RETURN(@BudgetUtilized)
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_RptDebitNoteclaim' AND TYPE='P')
DROP PROCEDURE Proc_RptDebitNoteclaim
GO
/*  
BEGIN TRAN  
EXEC Proc_RptDebitNoteclaim 293,1,0,'',0,0,1,'DNTS1900001'      
SELECT * FROM RptDebitNoteClaim_Excel1WID      
SELECT * FROM RptDebitNoteClaim_Excel2WID   
SELECT * FROM RptDebitNoteClaim_Excel3WID   
SELECT * FROM RptDebitNoteClaim_Excel4WID  
SELECT * FROM RptDebitNoteClaim_Excel5WID  
SELECT * FROM RptDebitNoteClaim_Excel6WID  
SELECT * FROM RptDebitNoteClaim_Excel7WID  
SELECT * FROM RptDebitNoteTopSheet_Excel_GrandTotal  
SELECT * FROM RPTFORMULA WHERE RPTID =293
ROLLBACK TRAN      
*/
CREATE PROCEDURE Proc_RptDebitNoteclaim
(      
 @Pi_RptId   INT,      
 @Pi_UsrId   INT,      
 @Pi_SnapId   INT,      
 @Pi_DbName   NVARCHAR(50),      
 @Pi_SnapRequired INT,@Pi_GetFromSnap  INT,      
 @Pi_CurrencyId  INT,
 @Pi_DNDocNo NVARCHAR(100)      
)      
AS      
/************************************************************************************************************************************      
* PROCEDURE : Proc_RptDebitNoteclaim      
* PURPOSE : Debit Note Claim in Crystal format  
* CREATED : Deepan     
* CREATED DATE :13-11-2019      
* NOTE  : Parle SP for Debit Note Claim      
* MODIFIED       
*************************************************************************************************************************************      
* DATE       AUTHOR			CR/BZ    USER STORY ID           DESCRIPTION                               
*************************************************************************************************************************************      
13-11-2019  DEEPAN			 CR		CRCRSTPAR0090	       Debit note Claim report (Design in Crystal Reports)  
16-12-2019  MOHANA S		 CR		CRCRSTPAR0079	       Checked only console Ref NO
30-12-2019	MOHANA S		 CR		CRCRSTPAR0095		   INCLUDED DESCRIPTION FOR INSTITUTIONAL CLAIM
26-06-2020	MOHANA S		 CR		PARCS202100040		   Credit note no and Credit note Date is not Capturing now in Debit Note PDF report
************************************************************************************************************************************/           
BEGIN      
 SET NOCOUNT ON      
 DECLARE @FromDate   AS DATETIME      
 DECLARE @ToDate    AS DATETIME      
 
 --SELECT @FromDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,10,@Pi_UsrId)      
 --SELECT @ToDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,11,@Pi_UsrId)      
 --Report 1      
 DECLARE @CityName AS NVARCHAR(100)      
 DECLARE @DistributorCode AS NVARCHAR(40)      
 DECLARE @DistributorName AS NVARCHAR(100)      
 DECLARE @DBMonth As INT 
 DECLARE @CirNo As NVARCHAR(100)      
 SELECT @DistributorCode = DistributorCode, @DistributorName = DistributorName,      
 @CityName = G.GeoName      
 FROM Distributor D (NOLOCK),      
 Geography G (NOLOCK) WHERE D.GeoMainId = G.GeoMainId      
 --Added By Mohana       
 --SELECT @DBMonth = COUNT(*) FROM ACMaster  A INNER JOIN ACPeriod B ON A.AcmId=B.AcmId WHERE AcmYr = YEAR (GETDATE()) AND AcmSdt < =@ToDate      
 SELECT @DBMonth = CASE MonthId       
  WHEN 4 THEN 1      
  WHEN 5 THEN 2      
  WHEN 6 THEN 3      
  WHEN 7 THEN 4      
  WHEN 8 THEN 5      
  WHEN 9 THEN 6      
  WHEN 10 THEN 7      
  WHEN 11 THEN 8      
  WHEN 12 THEN 9      
  WHEN 1 THEN 10      
  WHEN 2 THEN 11      
  WHEN 3 THEN 12      
 END 
 FROM DebitNoteTopSheetClaimHd WHERE DNDocNo =@Pi_DNDocNo
 --Report 1      
 --Report 2      
 DECLARE @slno AS INT      
 DECLARE @SamplingAmount AS NUMERIC(18,2)      
 SELECT @slno = SlNo FROM BatchCreation WHERE FieldDesc = 'Selling Price'  
 IF NOT EXISTS(SELECT * FROM DebitNoteTopSheetClaimHd(NOLOCK) WHERE DNDocNo=@Pi_DNDocNo AND ConDocRefNo<>'')-- Commented by MOhana FOR UAT Change AND SAPDocRefNo<>'')
 BEGIN
	RETURN
 END
 --SELECT @SamplingAmount = ISNULL(SUM(D.TotalAmt),0)      
 --FROM FreeIssueHd J (NOLOCK),      
 --FreeIssueDt D (NOLOCK),      
 --ProductBatchDetails P (NOLOCK)      
 --WHERE J.IssueId = D.IssueId       
 --AND P.PrdBatId = D.PrdBatId AND P.PriceId = D.PriceId       
 --AND P.SLNo = 3 AND J.IssueDate BETWEEN @FromDate AND @ToDate    
 -- SELECT @SamplingAmount = ISNULL(SUM(D.TotalAmt),0)      
 --FROM FreeIssueHd J (NOLOCK),      
 --FreeIssueDt D (NOLOCK),      
 --ProductBatchDetails P (NOLOCK)      
 --WHERE J.IssueId = D.IssueId       
 --AND P.PrdBatId = D.PrdBatId AND P.PriceId = D.PriceId       
 --AND P.SLNo = 3 AND J.IssueDate BETWEEN @FromDate AND @ToDate  
SELECT @SamplingAmount = ISNULL(SUM(D.SamAmt),0) FROM DebitNoteTopSheetClaim_Sampling D INNER JOIN DebitNoteTopSheetClaimHd T ON
D.DNRefId=T.DNRefId 
--WHERE T.ClmDate Between @FromDate AND @ToDate
WHERE T.DNDocNo =@Pi_DNDocNo
SELECT @FromDate = D.FromDate FROM DebitNoteTopSheetClaim_Sampling D INNER JOIN DebitNoteTopSheetClaimHd T ON
D.DNRefId=T.DNRefId 
--WHERE T.ClmDate Between @FromDate AND @ToDate
WHERE T.DNDocNo =@Pi_DNDocNo     
SELECT @ToDate = D.ToDate FROM DebitNoteTopSheetClaim_Sampling D INNER JOIN DebitNoteTopSheetClaimHd T ON
D.DNRefId=T.DNRefId 
--WHERE T.ClmDate Between @FromDate AND @ToDate
WHERE T.DNDocNo =@Pi_DNDocNo 
SELECT @CirNo = D.CirNo FROM DebitNoteTopSheetClaim_Sampling D INNER JOIN DebitNoteTopSheetClaimHd T ON
D.DNRefId=T.DNRefId 
--WHERE T.ClmDate Between @FromDate AND @ToDate
WHERE T.DNDocNo =@Pi_DNDocNo     
 --Report 2      
 --DELETE FROM REPORTFILTERDT WHERE RPTID=291  
 --INSERT INTO REPORTFILTERDT(RptId,SelId,SelValue,SelDate,UsrId,LikeOn,LikeText,FilterDate)  
 --SELECT 291,SelId,SelValue,SelDate,UsrId,LikeOn,LikeText,FilterDate from ReportFilterDt WHERE RptId=@Pi_RptId  
 --    EXEC Proc_RptDebitNoteTopSheet  @Pi_RptId,@Pi_UsrId,@Pi_SnapId,@Pi_DbName,@Pi_SnapRequired,@Pi_GetFromSnap,@Pi_CurrencyId  
 TRUNCATE TABLE RptDebitNoteClaim_Excel1WID  
 TRUNCATE TABLE RptDebitNoteClaim_Excel2WID   
 TRUNCATE TABLE RptDebitNoteClaim_Excel3WID   
 TRUNCATE TABLE RptDebitNoteClaim_Excel4WID   
 TRUNCATE TABLE RptDebitNoteClaim_Excel5WID   
 TRUNCATE TABLE RptDebitNoteClaim_Excel6WID  
 TRUNCATE TABLE RptDebitNoteClaim_Excel7WID  
 INSERT INTO RptDebitNoteClaim_Excel1WID(DNRefId,RefNo,SMName,CirNo,TotAchSales,FrmRange,ToRange,
 FixedPay,VarPay,IncAmount)
 SELECT D.DNRefId,D.RefNo,D.SMName,D.CirNo,D.TotAchSales,D.FrmRange,D.ToRange,D.FixedPay,D.VarPay,D.IncAmount
 FROM DebitNoteTopSheetClaim_SMInc D INNER JOIN DebitNoteTopSheetClaimHd T ON
 D.DNRefId=T.DNRefId
  --WHERE T.ClmDate Between @FromDate AND @ToDate
   WHERE T.DNDocNo =@Pi_DNDocNo
  IF NOT EXISTS (SELECT * FROM  RptDebitNoteClaim_Excel1WID(NOLOCK) WHERE ISNULL(DNRefId,0) <> 0)
  BEGIN
	 INSERT INTO RptDebitNoteClaim_Excel1WID(DNRefId,RefNo,SMName,CirNo,TotAchSales,FrmRange,ToRange,
	 FixedPay,VarPay,IncAmount)
	SELECT T.DNRefId,'0','0','0','0','0','0','0','0','0'  FROM DebitNoteTopSheetClaimHd T(NOLOCK)  WHERE T.DNDocNo =@Pi_DNDocNo
  END
 DELETE FROM RPTFORMULA WHERE RptId=@Pi_RptId  
 INSERT INTO RPTFORMULA([RptId],[SlNo],[Formula],[FormulaValue],[LcId],[SelcId])   
 SELECT @Pi_RptId,1,'SamplingAmount','Sampling Amount : ' + CAST(@SamplingAmount AS VARCHAR(30)),1,0 UNION  
 SELECT @Pi_RptId,2,'From','From : ' + CONVERT(VARCHAR(11),@FromDate,105) ,1,0 UNION  
 SELECT @Pi_RptId,3,'To','To : ' + CONVERT(VARCHAR(11),@ToDate,105),1,0 UNION  
 SELECT @Pi_RptId,4,'Heading1','PARLE - DEBIT NOTE / CREDIT NOTE' ,1,0 UNION  
 SELECT @Pi_RptId,5,'WholesalerName','Name of the Wholesaler : ' + ISNULL(@DistributorName,'') ,1,0 UNION  
 SELECT @Pi_RptId,6,'Town','Name of the Town : ' + ISNULL(@CityName,'') ,1,0 UNION  
 SELECT @Pi_RptId,7,'DebitNoteNo','Credit Note No :   ' + CONVERT(NVARCHAR(10),@DBMonth)  ,1,0 UNION  
 SELECT @Pi_RptId,8,'WholesalerCode','Wholesaler Code : ' + ISNULL(@DistributorCode,'') ,1,0 UNION  
 SELECT @Pi_RptId,9,'ProductSampled','Product Sampled during the period  '  ,1,0  UNION
 SELECT top 1 @Pi_RptId,10,'GrandTotal',CONVERT(NVARCHAR(30),TotalAmt),1,0 from DebitNoteTopSheetClaimHd(NOLOCK) WHERE DNDocNo =@Pi_DNDocNo UNION
 SELECT @Pi_RptId,11,'DNNO','DN RefNo : ' + @Pi_DNDocNo ,1,0 UNION 
 SELECT @Pi_RptId,12,'ConRefNo','Con Doc.RefNo : ' + ConDocRefNo  ,1,0 from DebitNoteTopSheetClaimHd(NOLOCK) WHERE DNDocNo =@Pi_DNDocNo UNION 
 SELECT @Pi_RptId,13,'SAPDocRefNo','SAP Doc.RefNo : ' + SAPDocRefNo  ,1,0 from DebitNoteTopSheetClaimHd(NOLOCK) WHERE DNDocNo =@Pi_DNDocNo  UNION
 SELECT @Pi_RptId,14,'CirNo','Circular No : ' + @CirNo ,1,0  UNION
 SELECT @Pi_RptId,15,'DNDate',CONVERT(NVARCHAR(10),ClmDate,105),1,0 from DebitNoteTopSheetClaimHd(NOLOCK) WHERE DNDocNo =@Pi_DNDocNo

 --UNION  
-- SELECT top 1 @Pi_RptId,10,'GrandTotal',CONVERT(NVARCHAR(10),Column6)  ,1,0 from RptDebitNoteTopSheet_Excel_GrandTotal(NOLOCK)   
INSERT INTO RptDebitNoteClaim_Excel2WID(DNRefId,RefNo,SMCnt,CirNo,TotAchSales,IncAmt)
SELECT D.DNRefId,D.RefNo,D.SMCnt,D.CirNo,D.TotAchSales,D.IncAmt FROM DebitNoteTopSheetClaim_DistInc D 
INNER JOIN DebitNoteTopSheetClaimHd T ON
D.DNRefId=T.DNRefId 
--WHERE T.ClmDate Between @FromDate AND @ToDate
WHERE T.DNDocNo =@Pi_DNDocNo
 IF NOT EXISTS (SELECT * FROM  RptDebitNoteClaim_Excel2WID(NOLOCK) WHERE ISNULL(DNRefId,0) <> 0)
 BEGIN
	INSERT INTO RptDebitNoteClaim_Excel2WID(DNRefId,RefNo,SMCnt,CirNo,TotAchSales,IncAmt)
	SELECT T.DNRefId,'0','0','0','0','0' FROM DebitNoteTopSheetClaimHd T(NOLOCK)  WHERE T.DNDocNo =@Pi_DNDocNo
 END
INSERT INTO RptDebitNoteClaim_Excel3WID(DNRefId,SchDesc,FromDate,ToDate,CirNo,SchBudget,SecSales,
LiabPerc,ClmAmt)
SELECT D.DNRefId,D.SchDesc,D.FromDate,D.ToDate,D.CirNo,D.SchBudget,D.SecSales,
D.LiabPerc,D.ClmAmt FROM DebitNoteTopSheetClaim_Manual D INNER JOIN DebitNoteTopSheetClaimHd T ON
 D.DNRefId=T.DNRefId 
 --WHERE T.ClmDate Between @FromDate AND @ToDate
 WHERE T.DNDocNo =@Pi_DNDocNo
 IF NOT EXISTS (SELECT * FROM  RptDebitNoteClaim_Excel3WID(NOLOCK) WHERE ISNULL(DNRefId,0) <> 0)
 BEGIN
	INSERT INTO RptDebitNoteClaim_Excel3WID(DNRefId,SchDesc,FromDate,ToDate,CirNo,SchBudget,SecSales,LiabPerc,ClmAmt)
	SELECT T.DNRefId,'0',CONVERT(CHAR(10),GETDATE(),121),CONVERT(CHAR(10),GETDATE(),121),'0','0','0','0','0' FROM DebitNoteTopSheetClaimHd T(NOLOCK)  WHERE T.DNDocNo =@Pi_DNDocNo
 END
INSERT INTO RptDebitNoteClaim_Excel4WID(DNRefId,CtgName,FromDate,ToDate,CirNo,NrmlAmt,TOTAmt,DiffAmt)
SELECT D.DNRefId,D.CtgName,D.FromDate,D.ToDate,D.CirNo,D.NrmlAmt,D.TOTAmt,D.DiffAmt 
 FROM DebitNoteTopSheetClaim_TOTDiff D INNER JOIN DebitNoteTopSheetClaimHd T ON
 D.DNRefId=T.DNRefId 
 --WHERE T.ClmDate Between @FromDate AND @ToDate
 WHERE T.DNDocNo =@Pi_DNDocNo
  IF NOT EXISTS (SELECT * FROM  RptDebitNoteClaim_Excel4WID(NOLOCK) WHERE ISNULL(DNRefId,0) <> 0)
 BEGIN
	INSERT INTO RptDebitNoteClaim_Excel4WID(DNRefId,CtgName,FromDate,ToDate,CirNo,NrmlAmt,TOTAmt,DiffAmt)
	SELECT T.DNRefId,'0',CONVERT(CHAR(10),GETDATE(),121),CONVERT(CHAR(10),GETDATE(),121),'0','0','0','0' FROM DebitNoteTopSheetClaimHd T(NOLOCK)  WHERE T.DNDocNo =@Pi_DNDocNo
 END
INSERT INTO RptDebitNoteClaim_Excel5WID(DNRefId,CtgName,FromDate,ToDate,CirNo,MonTarget,Lst2MntSAl,CurMonth,OutletCnt,TotDiscount)
SELECT D.DNRefId,D.CtgName,D.FromDate,D.ToDate,(D.CirNo + '~' + CASE SCHTYPE WHEN 1 THEN 'BaseDisc' ELSE 'TGT' END),
D.MonTarget,D.Lst2MntSAl,D.CurMonth,D.OutletCnt,D.TotDiscount 
FROM DebitNoteTopSheetClaim_InstTarget D INNER JOIN DebitNoteTopSheetClaimHd T ON
 D.DNRefId=T.DNRefId 
 --WHERE T.ClmDate Between @FromDate AND @ToDate
 WHERE T.DNDocNo =@Pi_DNDocNo
 IF NOT EXISTS (SELECT * FROM  RptDebitNoteClaim_Excel5WID(NOLOCK) WHERE ISNULL(DNRefId,0) <> 0)
 BEGIN
	INSERT INTO RptDebitNoteClaim_Excel5WID(DNRefId,CtgName,FromDate,ToDate,CirNo,MonTarget,Lst2MntSAl,CurMonth,OutletCnt,TotDiscount)
	SELECT T.DNRefId,'0',CONVERT(CHAR(10),GETDATE(),121),CONVERT(CHAR(10),GETDATE(),121),'0','0','0','0','0','0' FROM DebitNoteTopSheetClaimHd T(NOLOCK)  WHERE T.DNDocNo =@Pi_DNDocNo
 END
INSERT INTO RptDebitNoteClaim_Excel6WID(DNRefId,SchId,SchDesc,FrmDate,ToDate,CirNo,SchBudget,Lst2MntSAl,Wk4PriVal,SchPrimary,SecSales,LaibPer,CalClmAmt,OrgClmAmt)
SELECT D.DNRefId,D.SchId,D.SchDesc,D.FrmDate,D.ToDate,D.CirNo,D.SchBudget,D.Lst2MntSAl,D.Wk4PriVal,D.SchPrimary,D.SecSales,D.LaibPer,D.CalClmAmt,D.OrgClmAmt 
FROM DebitNoteTopSheetClaim_Trade D INNER JOIN DebitNoteTopSheetClaimHd T ON
 D.DNRefId=T.DNRefId 
 --WHERE T.ClmDate Between @FromDate AND @ToDate
 WHERE T.DNDocNo =@Pi_DNDocNo
  IF NOT EXISTS (SELECT * FROM  RptDebitNoteClaim_Excel6WID(NOLOCK) WHERE ISNULL(DNRefId,0) <> 0)
  BEGIN
	INSERT INTO RptDebitNoteClaim_Excel6WID(DNRefId,SchId,SchDesc,FrmDate,ToDate,CirNo,SchBudget,Lst2MntSAl,Wk4PriVal,SchPrimary,SecSales,LaibPer,CalClmAmt,OrgClmAmt)
	SELECT T.DNRefId,'0','0',CONVERT(CHAR(10),GETDATE(),121),CONVERT(CHAR(10),GETDATE(),121),'0','0','0','0','0','0','0','0','0' FROM DebitNoteTopSheetClaimHd T(NOLOCK)  WHERE T.DNDocNo =@Pi_DNDocNo
 END
INSERT INTO RptDebitNoteClaim_Excel7WID(DNRefId,SancDate,FromDate,ToDate,CirNo,SamAmt)
SELECT D.DNRefId,D.SancDate,D.FromDate,D.ToDate,D.CirNo,D.SamAmt FROM DebitNoteTopSheetClaim_Sampling D INNER JOIN DebitNoteTopSheetClaimHd T ON
 D.DNRefId=T.DNRefId 
 --WHERE T.ClmDate Between @FromDate AND @ToDate
 WHERE T.DNDocNo =@Pi_DNDocNo
 IF NOT EXISTS (SELECT * FROM  RptDebitNoteClaim_Excel7WID(NOLOCK) WHERE ISNULL(DNRefId,0) <> 0)
  BEGIN
	INSERT INTO RptDebitNoteClaim_Excel7WID(DNRefId,SancDate,FromDate,ToDate,CirNo,SamAmt)
	SELECT T.DNRefId,CONVERT(CHAR(10),GETDATE(),121),CONVERT(CHAR(10),GETDATE(),121),CONVERT(CHAR(10),GETDATE(),121),'0','0'	FROM DebitNoteTopSheetClaimHd T(NOLOCK)  WHERE T.DNDocNo =@Pi_DNDocNo
  END
 ---------------- Added  By Lakshman M Dated On 10-08-2019 PMS ID: ILCRSTPAR5448    
 DELETE FROM RptDataCount WHERE RptId = @Pi_RptId AND UserId = @Pi_UsrId    
 IF NOT exists(SELECT * FROM RptDebitNoteClaim_Excel6WID)  
 BEGIN  
  SELECT MAX(RecCount ) RecCount INTO #temp  FROM (  
  SELECT MAX(DNRefId) as RecCount FROM RptDebitNoteClaim_Excel1WID(NOLOCK)  
  union all   
  SELECT MAX(DNRefId) as RecCount FROM RptDebitNoteClaim_Excel2WID(NOLOCK)  
  union all   
  SELECT MAX(DNRefId) as RecCount FROM RptDebitNoteClaim_Excel3WID(NOLOCK)  
  union all   
  SELECT MAX(DNRefId) as RecCount FROM RptDebitNoteClaim_Excel4WID(NOLOCK)  
  union all   
  SELECT MAX(DNRefId) as RecCount FROM RptDebitNoteClaim_Excel5WID(NOLOCK)  
  union all   
  SELECT MAX(DNRefId) as RecCount FROM RptDebitNoteClaim_Excel6WID(NOLOCK)  
    union all   
  SELECT MAX(DNRefId) as RecCount FROM RptDebitNoteClaim_Excel7WID(NOLOCK)  
  ) A
 END  
 --IF NOT EXISTS(SELECT * FROM RptDebitNoteTopSheet_Excel1WID)  
 --BEGIN  
 -- INSERT INTO RptDebitNoteTopSheet_Excel1WID  
 -- SELECT '','','','','',cast(0 as varchar(10)),'',cast(0 as varchar(10)),cast(0 as varchar(10)),cast(0 as varchar(10)),RecCount FROM #temp  
 --END  
 INSERT INTO RptDataCount (RptId,RecCount,ErrNo,UserId)   
 SELECT  @Pi_RptId, COUNT(*) ,0 ErrNo , @Pi_UsrId FROM RptDebitNoteClaim_Excel6WID  
 SELECT * FROM RptDebitNoteClaim_Excel6WID  
 ---ILCRSTPAR4278  
 RETURN       
END
GO
DELETE FROM HotSearchEditorHd  WHERE FormId IN (817,781)
INSERT INTO HotSearchEditorHd([FormId],[FormName],[ControlName],[SltString],[RemainsltString]) VALUES (781,'SampleMaintenance','ProductCodeWor','select','SELECT Prdid,PrdDCode,PrdCCode,PrdName,
PrdShrtName,AvailableQty FROM ( SELECT P.Prdid,P.PrdDCode,P.PrdCCode,P.PrdName,P.PrdShrtName,
ISNULL(SUM((PrdBatLcnFre - PrdBatLcnResFre) ),0)AS AvailableQty FROM Product P 
INNER JOIN ProductBatchLocation PBl ON P.Prdid=PBL.Prdid WHERE P.PrdStatus = 1 AND PBl.Lcnid=vFParam  and P.Cmpid=vSParam 
GROUP BY P.Prdid,P.PrdDCode,P.PrdcCode,P.PrdName,P.PrdShrtName 
Having IsNull(Sum(PrdBatLcnFre - PrdBatLcnResFre),0)>0) MainSql')
INSERT INTO HotSearchEditorHd([FormId],[FormName],[ControlName],[SltString],[RemainsltString]) VALUES (817,'SampleMaintenance','ProductCodeWorSaleable','Select','SELECT DISTINCT PrdId,PrdName,PrdShrtName,PrdDCode,PrdCCode FROM 
(SELECT P.PrdId,P.PrdDCode,P.PrdCCode,P.PrdName,P.PrdShrtName FROM Product P
INNER JOIN ProductBatch PB ON P.PrdId = PB.PrdId INNER JOIN ProductBatchLocation PBL ON P.Prdid=PBL.PrdId 
WHERE P.PrdStatus = 1 AND PBL.LcnId=vFParam AND P.Cmpid=vSParam  AND ((PBL.PrdBatLcnSih-PBL.PrdBatLcnRessih) > 0   OR (PBL.PrdBatLcnUih-PBL.PrdBatLcnResUih) > 0  
OR (PBL.PrdBatLcnFre-PBL.PrdBatLcnResFre) > 0)) MainSql')
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Validate_ETLRetailerDetails' AND TYPE='P')
DROP PROCEDURE Proc_Validate_ETLRetailerDetails
GO
CREATE PROCEDURE Proc_Validate_ETLRetailerDetails
AS
/************************************************
* FUNCTION	 : Fn_ValidateParentChild
* PURPOSE    : TO RETURN MISMATCH CHILD DETAILS FOR THE SELECTED RETAILER
* CREATED BY : MOHANA S 
* CREATED ON : 2019-06-25
* PMS NO	 : CRCRSTPAR0064 
*************************************************/   
BEGIN
TRUNCATE TABLE ETLRetailerErrorlog
CREATE TABLE #AVOIDRETAILER
(
RTRCODE NVARCHAR(100)
)
--SELECT * FROM ETL_PRK_RETAILER
INSERT INTO ETLRetailerErrorlog 
SELECT 1000,A.[Retailer Code],'GEO NOT AVAILABLE' FROM ETL_PRK_RETAILER A WHERE NOT EXISTS (SELECT  GeoCode FROM Geography B WHERE A.[Geography Hierarchy Value] = B.GeoCode )
INSERT INTO #AVOIDRETAILER 
SELECT A.[Retailer Code]  FROM ETL_PRK_RETAILER A WHERE NOT EXISTS (SELECT  GeoCode FROM Geography B WHERE A.[Geography Hierarchy Value] = B.GeoCode )
INSERT INTO ETLRetailerErrorlog 
SELECT 1000,A.[Retailer Code],'DELIVERY CODE NOT AVAILABLE' FROM ETL_PRK_RETAILER A WHERE NOT EXISTS (SELECT  RMCODE FROM RouteMaster B WHERE A.[Delivery Route Code] = B.RMCODE )
INSERT INTO #AVOIDRETAILER 
SELECT A.[Retailer Code] FROM ETL_PRK_RETAILER A WHERE NOT EXISTS (SELECT  RMCODE FROM RouteMaster B WHERE A.[Delivery Route Code] = B.RMCODE )
--INSERT INTO ETLRetailerErrorlog 
--SELECT 1000,A.[Retailer Code],'Potential Class Code Not Available' FROM ETL_PRK_RETAILER A WHERE NOT EXISTS (SELECT  PotentialClassCode FROM RetailerPotentialClass B WHERE  B.PotentialClassCode = A.[Potential Class Code] )
--INSERT INTO #AVOIDRETAILER 
--SELECT A.[Retailer Code] FROM ETL_PRK_RETAILER A WHERE NOT EXISTS (SELECT  PotentialClassCode FROM RetailerPotentialClass B WHERE  B.PotentialClassCode = A.[Potential Class Code] )
INSERT INTO ETLRetailerErrorlog 
SELECT 1000,A.[Retailer Code],'Retailer Tax Group Not Available' FROM ETL_PRK_RETAILER A WHERE NOT EXISTS (SELECT  RtrGroup FROM TaxGroupSetting B WHERE  B.RtrGroup = A.[Tax Group] )
INSERT INTO #AVOIDRETAILER 
SELECT A.[Retailer Code] FROM ETL_PRK_RETAILER A  WHERE NOT EXISTS (SELECT  RtrGroup FROM TaxGroupSetting B WHERE  B.RtrGroup = A.[Tax Group] )
--INSERT INTO ETLRetailerErrorlog 
--SELECT 1000,A.[Retailer Code],'Village Code Code Not Available' FROM ETL_PRK_RETAILER A WHERE NOT EXISTS (SELECT  VillageCode FROM RouteVillage B WHERE  B.VillageCode = A.[Village Code] )
--INSERT INTO #AVOIDRETAILER 
--SELECT A.[Retailer Code] FROM ETL_PRK_RETAILER A  WHERE NOT EXISTS (SELECT  VillageCode FROM RouteVillage B WHERE  B.VillageCode = A.[Village Code] )
INSERT INTO ETLRetailerErrorlog 
SELECT 1000,[Retailer Code],'Retailer Code/Name Should not Empty' FROM ETL_PRK_RETAILER WHERE ISNULL([Retailer Code],'') = '' OR ISNULL([Retailer Name] ,'')= ''
INSERT INTO #AVOIDRETAILER 
SELECT [Retailer Code]    FROM ETL_PRK_RETAILER WHERE ISNULL([Retailer Code],'') = '' OR ISNULL([Retailer Name] ,'')= ''
INSERT INTO ETLRetailerErrorlog 
SELECT 1000,[Retailer Code],'Retailer Address  should not be empty' FROM ETL_PRK_RETAILER WHERE ISNULL(Address1,'') = '' 
INSERT INTO #AVOIDRETAILER 
SELECT [Retailer Code]    FROM ETL_PRK_RETAILER WHERE ISNULL(Address1,'') = '' 
INSERT INTO ETLRetailerErrorlog 
SELECT 1000,[Retailer Code],'Retailer Pincode  should not be empty' FROM ETL_PRK_RETAILER WHERE len([Pin Code]) = 0 
INSERT INTO #AVOIDRETAILER 
SELECT [Retailer Code]    FROM ETL_PRK_RETAILER WHERE len([Pin Code]) = 0 
INSERT INTO ETLRetailerErrorlog 
SELECT 1000,[Retailer Code],'Key Account  should not be empty' FROM ETL_PRK_RETAILER WHERE isnull([Key Account],'') = '' 
INSERT INTO #AVOIDRETAILER 
SELECT [Retailer Code]    FROM ETL_PRK_RETAILER WHERE  isnull([Key Account],'') = '' 
INSERT INTO ETLRetailerErrorlog 
SELECT 1000,[Retailer Code],'Coverage Mode Type does not exists' FROM ETL_PRK_RETAILER WHERE   LTRIM(RTRIM([Coverage Mode]))NOT IN ('Order Booking','Van Sales','Counter Sales')
INSERT INTO #AVOIDRETAILER 
SELECT [Retailer Code]    FROM ETL_PRK_RETAILER WHERE  LTRIM(RTRIM([Coverage Mode])) NOT IN ('Order Booking','Van Sales','Counter Sales')
	 
INSERT INTO ETLRetailerErrorlog 
SELECT 1000,[Retailer Code],'Registration Date should not be empty' FROM ETL_PRK_RETAILER WHERE LTRIM(RTRIM([Registration Date]))='' OR ISDATE([Registration Date])=0
INSERT INTO #AVOIDRETAILER 
SELECT [Retailer Code]    FROM ETL_PRK_RETAILER WHERE  LTRIM(RTRIM([Registration Date]))='' OR ISDATE([Registration Date])=0
INSERT INTO ETLRetailerErrorlog 
SELECT 1000,[Retailer Code],'Registration Date should not be empty' FROM ETL_PRK_RETAILER WHERE LTRIM(RTRIM([Day Off]))=''
INSERT INTO #AVOIDRETAILER 
SELECT [Retailer Code]    FROM ETL_PRK_RETAILER WHERE LTRIM(RTRIM([Day Off]))='' 
 		 
INSERT INTO ETLRetailerErrorlog 
SELECT 1000,[Retailer Code],'Day Off Type is not available' FROM ETL_PRK_RETAILER WHERE  LTRIM(RTRIM([Day Off])) NOT IN ('Sunday','Monday' ,'Tuesday','Wednesday','Thursday','Friday','Saturday')
INSERT INTO #AVOIDRETAILER 
SELECT [Retailer Code]    FROM ETL_PRK_RETAILER WHERE  LTRIM(RTRIM([Day Off])) NOT IN ('Sunday','Monday' ,'Tuesday','Wednesday','Thursday','Friday','Saturday')
INSERT INTO ETLRetailerErrorlog 
SELECT 1000,[Retailer Code],'Taxable should not be empty' FROM ETL_PRK_RETAILER WHERE  LTRIM(RTRIM(Taxable))=''
INSERT INTO #AVOIDRETAILER 
SELECT [Retailer Code]    FROM ETL_PRK_RETAILER WHERE  LTRIM(RTRIM(Taxable))=''
INSERT INTO ETLRetailerErrorlog 
SELECT 1000,[Retailer Code],'Taxable should not be empty' FROM ETL_PRK_RETAILER WHERE  LTRIM(RTRIM(status ))=''
INSERT INTO #AVOIDRETAILER 
SELECT [Retailer Code]    FROM ETL_PRK_RETAILER WHERE  LTRIM(RTRIM(status))=''
INSERT INTO ETLRetailerErrorlog 
SELECT 1000,[Retailer Code],'TaxType should not be empty' FROM ETL_PRK_RETAILER WHERE  LTRIM(RTRIM([Tax Type]))=''
INSERT INTO #AVOIDRETAILER 
SELECT [Retailer Code]    FROM ETL_PRK_RETAILER WHERE  LTRIM(RTRIM([Tax Type]))=''
INSERT INTO ETLRetailerErrorlog 
select 1000,[Retailer Code]  ,'Phone No must be in unique'
  FRom ETL_Prk_Retailer WHERE [Phone No] IN (
select [Phone No] from (
SELECT [Phone No] ,Count([retailer code]) cnt from ETL_PRK_RETAILER group by  [Phone No] having count([retailer code])>1)A)
 insert into #AVOIDRETAILER 
 select  [Retailer Code]  
  FRom ETL_Prk_Retailer WHERE [Phone No] IN (
select [Phone No] from (
SELECT [Phone No] ,Count([retailer code]) cnt from ETL_PRK_RETAILER group by  [Phone No] having count([retailer code])>1)A)
INSERT INTO ETLRetailerErrorlog 
select 1000,[Retailer Code]  ,'Phone No should not be empty'  FRom ETL_Prk_Retailer WHERE ISNULL([Phone No] ,'') =''
 insert into #AVOIDRETAILER 
select  [Retailer Code]  FRom ETL_Prk_Retailer WHERE ISNULL([Phone No] ,'') ='' 
--INSERT INTO ETLRetailerErrorlog 
--SELECT 1000,[Retailer Code],'Credit Bills value Should be Number' FROM ETL_PRK_RETAILER WHERE   (LTRIM(RTRIM([Credit Limit]))=0)  or (ISNUMERIC([Credit Limit])=0)
--INSERT INTO #AVOIDRETAILER 
--SELECT [Retailer Code]    FROM ETL_PRK_RETAILER WHERE  (LTRIM(RTRIM([Credit Limit]))=0)  or (ISNUMERIC([Credit Limit])=0)
--INSERT INTO ETLRetailerErrorlog 
--SELECT 1000,[Retailer Code],'Credit Days value Should be Number' FROM ETL_PRK_RETAILER WHERE  (LTRIM(RTRIM([Credit Days]))=0) OR  (ISNUMERIC([Credit Days])=0)
--INSERT INTO #AVOIDRETAILER 
--SELECT [Retailer Code]    FROM ETL_PRK_RETAILER WHERE (LTRIM(RTRIM([Credit Days]))=0) OR  (ISNUMERIC([Credit Days])=0)
--INSERT INTO ETLRetailerErrorlog 
--SELECT 1000,[Retailer Code],'Cash Discount Percentage value Should be Number' FROM ETL_PRK_RETAILER WHERE  (LTRIM(RTRIM([Cash Discount Percentage]))=0) OR  (ISNUMERIC([Cash Discount Percentage] )=0)
--INSERT INTO #AVOIDRETAILER 
--SELECT [Retailer Code]    FROM ETL_PRK_RETAILER WHERE  LTRIM(RTRIM([Cash Discount Percentage]))=0 OR  ISNUMERIC([Cash Discount Percentage] )=0
--INSERT INTO ETLRetailerErrorlog 
--SELECT 1000,[Retailer Code],'License Number Expiry Date should not be empty' FROM ETL_PRK_RETAILER WHERE  LTRIM(RTRIM([License Number]))<>'' OR LTRIM(RTRIM([License Number]))=''
--INSERT INTO #AVOIDRETAILER 
--SELECT [Retailer Code]    FROM ETL_PRK_RETAILER WHERE LTRIM(RTRIM([License Number]))<>'' OR LTRIM(RTRIM([License Number]))=''
--INSERT INTO ETLRetailerErrorlog 
--SELECT 1000,[Retailer Code],'License Number Expiry Date should not be empty' FROM ETL_PRK_RETAILER WHERE LTRIM(RTRIM([Drug License Number]))<>'' OR  LTRIM(RTRIM([Drug License Number]))=''
--INSERT INTO #AVOIDRETAILER 
--SELECT [Retailer Code]    FROM ETL_PRK_RETAILER WHERE LTRIM(RTRIM([Drug License Number]))<>'' OR  LTRIM(RTRIM([Drug License Number]))=''
INSERT INTO ETLRetailerErrorlog 
SELECT 1000,[Retailer Code],'Retailer Frequency  should not be empty' FROM ETL_PRK_RETAILER WHERE  LTRIM(RTRIM([Retailer Frequency]))='' OR LTRIM(RTRIM([Retailer Frequency])) NOT IN ('Weekly','Bi-Weekly','Fort Nightly','Monthly','Daily')
INSERT INTO #AVOIDRETAILER 
SELECT [Retailer Code] FROM ETL_PRK_RETAILER WHERE   (LTRIM(RTRIM([Retailer Frequency]))='') OR (LTRIM(RTRIM([Retailer Frequency])) NOT IN ('Weekly','Bi-Weekly','Fort Nightly','Monthly','Daily'))
--RETIALER ROUTE
INSERT INTO ETLRetailerErrorlog 
SELECT 1000,[Retailer Code],'ROUTE CODE NOT AVAILABLE' FROM  ETL_PRK_RETAILERROUTE  A 
WHERE NOT EXISTS (SELECT RMCODE FROM ROUTEMASTER B WHERE A.[Route Code] = B.RMCode )
----INSERT INTO #AVOIDRETAILER 
----SELECT [Retailer Code] FROM ETL_PRK_RETAILERROUTE  A WHERE NOT EXISTS (SELECT RMCODE FROM ROUTEMASTER B WHERE A.[Route Code] = B.RMCode )
		  
----INSERT INTO ETLRetailerErrorlog 
----SELECT 1000,[Retailer Code],'SELECTION TYPE NOT AVAILABLE' FROM  ETL_PRK_RETAILERROUTE  A WHERE A.[Selection Type] =''
----INSERT INTO #AVOIDRETAILER 
----SELECT [Retailer Code] FROM ETL_PRK_RETAILERROUTE  A WHERE A.[Selection Type] ='' 
------RETAILER SHIPPING ADDRESS
----INSERT INTO ETLRetailerErrorlog 
----SELECT 1000,[Retailer Code],'Retailer Not available in Retailer Shipping Address' FROM ETL_Prk_Retailer A WHERE [Retailer Code]
---- NOT IN (SELECT [Retailer Code] FROM  ETL_Prk_RetailerShippingAddress )
----INSERT INTO #AVOIDRETAILER
----SELECT [Retailer Code] FROM ETL_Prk_Retailer A WHERE [Retailer Code] NOT IN (SELECT [Retailer Code] FROM  ETL_Prk_RetailerShippingAddress )
------RETAILER SELECTION TYPE
----INSERT INTO ETLRetailerErrorlog 
----SELECT 1000,[Retailer Code],'Value Class Selection Type should not be empty in Retailer VALUE CLASS'  FROM ETL_Prk_RetailerValueClassMap WHERE ISNULL([Selection Type],'') = ''
----INSERT INTO #AVOIDRETAILER
----SELECT [Retailer Code] FROM ETL_Prk_RetailerValueClassMap WHERE ISNULL([Selection Type],'') = ''
------RETAILER CATEGORY AND CLASS
----INSERT INTO ETLRetailerErrorlog
----SELECT  1000,[Retailer Code],'CLASS AND CATEGORY MAPPING NOT DONE PROPERLY FOR RETAILER'
----FROM ETL_Prk_RetailerValueClassMap E
----WHERE NOT EXISTS (
----SELECT DISTINCT Rc.CtgCode ,ValueClassCode 
----FROM RetailerCategory R
----INNER JOIN RetailerCategory RC  ON R.CtgMainId  = RC.CtgLinkId 
----INNER JOIN RetailerValueClass RVC ON  RC.CtgMainId=RVC.CtgMainId
----WHERE RC.CtgCode = E.[Category Level Value] 
----AND E.[Value Class Code] = RVC.ValueClassCode)
----INSERT INTO #AVOIDRETAILER 
----SELECT [Retailer Code]  FROM ETL_Prk_RetailerValueClassMap E
----WHERE NOT EXISTS (
----SELECT DISTINCT Rc.CtgCode ,ValueClassCode 
----FROM RetailerCategory R
----INNER JOIN RetailerCategory RC  ON R.CtgMainId  = RC.CtgLinkId 
----INNER JOIN RetailerValueClass RVC ON  RC.CtgMainId=RVC.CtgMainId
----WHERE RC.CtgCode = E.[Category Level Value] 
----AND E.[Value Class Code] = RVC.ValueClassCode)
DELETE FROM ETL_Prk_Retailer WHERE [Retailer Code] IN (SELECT RTRCODE FROM #AVOIDRETAILER)
DELETE FROM ETL_Prk_RetailerShippingAddress WHERE [Retailer Code] IN (SELECT RTRCODE FROM #AVOIDRETAILER)
DELETE FROM ETL_Prk_RetailerValueClassMap  WHERE [Retailer Code] IN (SELECT RTRCODE FROM #AVOIDRETAILER)
DELETE FROM ETL_Prk_RetailerRoute WHERE [Retailer Code] IN (SELECT RTRCODE FROM #AVOIDRETAILER)
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Proc_TradeSchemeClaimDetails' AND TYPE='P')
DROP PROCEDURE Proc_TradeSchemeClaimDetails
GO
CREATE PROCEDURE Proc_TradeSchemeClaimDetails
(
	@Pi_Year	int,
	@Pi_Month	INT,
	@Pi_Usrid	INT,
	@Pi_Transid	INT
)
AS
/****************************************************************************
* PROCEDURE	:  Proc_TradeSchemeClaimDetails
* PURPOSE	: TO LOAD SCHEME WISE CLAIM AMOUNT
* DATE		:  07-11-2019
* CREATED	:  MOHANA S
* PMS NO	:  CRCRSTPAR0079
************************************************************************************************************************************
* DATE      |	  PERSON			  | USER STORY ID  |	  CR/BZ		|       REMARKS                      
************************************************************************************************************************************
* 09-01-2020		MOHANA S			ILCRSTPAR7358 		    SR			Changed the claim Logic based on Sch Budget & LiabPer
* 16-01-2020		MOHANA S			ILCRSTPAR7420			BZ			Same Product different Qty sales return issue fix (from debitnote report)
* 05-02-2020      Lakshman M         		ILCRSTPAR7726           	BZ          Due to liability column values multiple with 100. 
* 06-02-2020	  MOHNAA S			ILCRSTPAR7748			SR			Scheme Primary value increased with 5.5% only for comparision
*************************************************************************************************************************************/
BEGIN
	DELETE FROM  TempTradeSchemeClaimDetails  
	DECLARE @FromDate  DATETIME
	DECLARE @ToDate	   DATETIME
	SELECT @FromDate= DATEADD(MONTH, (@Pi_Month)-1,DATEADD(YEAR, @Pi_Year - 1900, 0))
	SELECT @ToDate = DATEADD(dd, -1, DATEADD(MONTH, @Pi_Month,DATEADD(YEAR, @Pi_Year - 1900, 0)))
	 
	--EXEC Proc_SchUtilization_DNClaim @Pi_Year,@Pi_Month,@Pi_Usrid,@Pi_Transid    
	--EXEC Proc_ProductTaxPercentage_DNClaim  @Pi_Year,@Pi_Month,@Pi_Usrid,@Pi_Transid 
	     
			IF @FromDate ='2020-05-01'
			BEGIN
				SELECT Schid INTO #SchDelete FROM SchemeMaster WHERE CmpSchCode NOT IN (SELECT CmpSchCode FROM SchemeCorrection )

				DELETE A FROM DN_Claim_Scheme A INNER JOIN #SchDelete B ON A.SchId =B.SchId 

				DELETE A FROM DN_Claim_Scheme A INNER JOIN SchemeMaster B ON A.SchId = B.SchId 
				INNER JOIN SchemeCorrection C ON C.CmpSchCode = B.CmpSchCode 
				AND A.SalInvdate>C.ValidTill 			
			END
	SELECT * INTO #ParleOutputTaxPercentage FROM TaxPercentage_DNClaim (NOLOCK)  WHERE USRID =@Pi_Usrid AND TRANID = @Pi_Transid 
	
	SELECT S.Salid,SalInvNo,SalInvDate,RtrId ,Prdid,PrdBatId ,BaseQty,Slno,PrdTaxAmount,PrdUnitSelRate 
	INTO #SalesInvoice 
	FROM SalesInvoice S (NOLOCK)          
	INNER JOIN SalesInvoiceProduct SP (NOLOCK) ON S.SalId = SP.SalId  
	WHERE S.SalInvDate BETWEEN @FromDate AND @ToDate AND S.DlvSts > 3 
	SELECT S.ReturnID,S.ReturnCode,S.ReturnDate,S.RtrId,SP.PrdId,SP.PrdBatId,-1 * SP.BaseQty BaseQty,SP.PrdUnitMRP,          
	SP.SlNo,SP.PrdEditSelRte,sp.PrdTaxAmt as prdtaxamount,PrdUnitSelRte as  PrdUnitSelRate,StockTypeId,S.SalId       
	INTO #ReturnHeader          
	FROM ReturnHeader S (NOLOCK)          
	INNER JOIN ReturnProduct SP (NOLOCK) ON S.ReturnID = SP.ReturnID AND
	S.ReturnDate BETWEEN  @FromDate AND @ToDate AND S.[Status] = 0 
	SELECT DISTINCT * INTO #ProductBatchDetails
	FROM(
	SELECT P.* FROM ProductBatchDetails P WHERE EXISTS (SELECT * FROM #SalesInvoice S WHERE S.PRDBATID = P.PRDBATID) AND   DefaultPrice =1 AND SLNo =3  
	UNION 
	SELECT P.* FROM ProductBatchDetails P WHERE EXISTS (SELECT * FROM #SalesInvoice S WHERE S.PRDBATID = P.PRDBATID) AND   DefaultPrice =1 AND SLNo =3 
	)A
	SELECT S.SalId,S.SalInvNo,S.SalInvDate,S.RtrId,S.PrdId,S.PrdBatId,S.BaseQty BaseQty,          
	B.DefaultPriceId ActualPriceId,S.SlNo,S.PrdTaxAmount,PrdUnitSelRate,PrdBatDetailValue,CAST(0 AS Int) AS Schid          
	INTO #BillingDetails          
	FROM #SalesInvoice S (NOLOCK)     
	INNER JOIN ProductBatch B (NOLOCK) ON S.PrdBatId = B.PrdBatId       
	INNER JOIN #ProductBatchDetails PBD (NOLOCK) ON PBD.PrdBatId =B.PrdBatId AND DefaultPrice =1        
	AND  PBD.SLNo =3 
	SELECT S.ReturnID,S.ReturnCode,S.ReturnDate,S.RtrId,S.PrdId,S.PrdBatId,-1 * S.BaseQty BaseQty,S.PrdUnitMRP MRP,          
	B.DefaultPriceId,S.SlNo,S.PrdEditSelRte,S.prdtaxamount,S.PrdUnitSelRate,PrdBatDetailValue,CAST(0 AS Int) AS Schid          
	INTO #ReturnDetails          
	FROM #RETURNHEADER S (NOLOCK)       
	INNER JOIN ProductBatch B (NOLOCK) ON S.PrdBatId = B.PrdBatId          
	INNER JOIN #ProductBatchDetails PBD (NOLOCK) ON PBD.PrdBatId =B.PrdBatId AND DefaultPrice =1 AND PBD.SLNo =3   
	AND StockTypeId IN (SELECT StockTypeId FROM STOCKTYPE WHERE SystemStockType = 1)       
	
	SELECT TransType,RtrId,SalId,TransDate,PrdId,PrdBatId,BaseQty,ActualPriceId,SlNo,CAST (0 AS NUMERIC(18,6)) AS ActualSellRate,prdtaxamount,      
	PrdBatDetailValue as PrdUnitSelRate,Schid,         
	CAST (0 AS NUMERIC(18,6)) AS LCTR      
	INTO #DebitSalesDetails          
	FROM           
	(          
	SELECT 1 TransType,RtrId,SalId,SalInvDate TransDate,PrdId,PrdBatId,BaseQty,ActualPriceId,SlNo,prdtaxamount,PrdBatDetailValue,Schid  FROM #BillingDetails(NOLOCK)         
	UNION ALL          
	SELECT 2 TransType,RtrId,ReturnID,ReturnDate TransDate,PrdId,PrdBatId,BaseQty,DefaultPriceId ,SlNo,prdtaxamount,PrdBatDetailValue,Schid  FROM #ReturnDetails (NOLOCK)       
	) Consolidated       
	UPDATE M SET M.ActualSellRate = round(D.PrdBatDetailValue,2)          
	FROM #DebitSalesDetails M (NOLOCK),          
	#ProductBatchDetails D (NOLOCK)           
	WHERE M.ActualPriceId = D.PriceId AND D.SLNo = 3      
	UPDATE R SET R.LCTR = ROUND(((R.BaseQty *(R.PrdUnitSelRate))+(R.BaseQty*R.PrdUnitSelRate)*(T.TaxPerc/100)),2)            
	FROM #DebitSalesDetails R (NOLOCK),          
	#ParleOutputTaxPercentage T (NOLOCK)      
	WHERE R.SalId = T.Salid AND R.Slno = T.PrdSlno AND T.TransId = R.TransType   
	CREATE TABLE #ApplicableProduct      
	(      
	SchId  INT,      
	PrdId   INT      
	)      
	INSERT INTO #ApplicableProduct(SchId,PrdId)      
	SELECT DISTINCT A.SchId,B.Prdid      
	FROM SchemeMaster A(NOLOCK)      
	INNER JOIN SchemeProducts B(NOLOCK) ON A.Schid = B.Schid  AND A.SchemeLvlMode = 0
	AND  A.SchId  IN (SELECT SCHID FROM DN_Claim_Scheme(NOLOCK))    
	INNER JOIN Product C(NOLOCK) On B.Prdid = C.PrdId  AND B.PrdId <> 0    
	UNION ALL      
	SELECT DISTINCT A.SchId,E.Prdid      
	FROM SchemeMaster A (NOLOCK)     
	INNER JOIN SchemeProducts B(NOLOCK) ON A.Schid = B.Schid AND A.SchemeLvlMode = 0  AND B.PrdCtgValMainId <> 0 
	AND  A.SchId  IN (SELECT SCHID FROM DN_Claim_Scheme(NOLOCK))
	INNER JOIN ProductCategoryValue C(NOLOCK) ON B.PrdCtgValMainId = C.PrdCtgValMainId       
	INNER JOIN ProductCategoryValue D(NOLOCK) ON D.PrdCtgValLinkCode LIKE Cast(C.PrdCtgValLinkCode as nvarchar(1000)) + '%'      
	INNER JOIN Product E(NOLOCK) On D.PrdCtgValMainId = E.PrdCtgValMainId       
	INNER JOIN ProductBatch F(NOLOCK) On F.PrdId = E.Prdid	       
	UNION ALL      
	SELECT DISTINCT S.SchId,B.MasterRecordId      
	FROM SchemeProducts A(NOLOCK)   
	INNER JOIN UdcDetails B(NOLOCK) on B.UDCUniqueId =A.PrdCtgValMainId   AND  A.SchId  IN (SELECT SCHID FROM DN_Claim_Scheme)     
	INNER JOIN SchemeMaster S(NOLOCK) ON A.SchId = S.SchId AND  S.SchemeLvlMode = 1     
	INSERT INTO #ApplicableProduct(SchId,PrdId)      
	SELECT Schid ,PrdId FROM SchemeMasterControlHistory A(NOLOCK)
	INNER JOIN SchemeMaster B ON A.CmpSchCode = B.CmpSchCode  AND ChangeType='Remove' 
	AND EXISTS (SELECT SchId FROM SchemeProducts SP(NOLOCK) Where SP.SCHID=B.SCHID AND PrdCtgValMainId = 0 ) 
	AND EXISTS (SELECT SCHID FROM DN_Claim_Scheme D WHERE D.SCHID = B.SCHID)     
	INNER JOIN Product C ON c.PrdCCode = A.FromValue      
	WHERE ChangeType='Remove'   
	INSERT INTO #ApplicableProduct(SchId,PrdId)        
	SELECT DISTINCT A.SchId,E.Prdid      
	FROM SchemeMaster A      
	INNER JOIN SchemeMasterControlHistory B(NOLOCK) ON A.CmpSchCode = B.CmpSchCode  AND ChangeType='Remove' AND A.SchemeLvlMode = 0  
	AND EXISTS (SELECT SchId FROM SchemeProducts SP(NOLOCK) Where SP.SCHID=A.SCHID AND PrdCtgValMainId = 0 ) 
	AND EXISTS (SELECT SCHID FROM DN_Claim_Scheme D WHERE D.SCHID = A.SCHID)      
	INNER JOIN ProductCategoryValue C(NOLOCK) ON B.FromValue = C.PrdCtgValCode      
	INNER JOIN ProductCategoryValue D(NOLOCK) ON D.PrdCtgValLinkCode LIKE Cast(c.PrdCtgValLinkCode as nvarchar(1000)) + '%'      
	INNER JOIN Product E(NOLOCK) On D.PrdCtgValMainId = E.PrdCtgValMainId       
	INNER JOIN ProductBatch F(NOLOCK) On F.PrdId = E.Prdid  
		 
	SELECT S.Schid,SUM(PrdNetAmount) SchPrimary INTO #PrimaryBasedOnSch FROM PurchaseReceipt A (NOLOCK)
	INNER JOIN PurchaseReceiptProduct B(NOLOCK) ON A.PurRcptId = B.PurRcptId 
	INNER JOIN #ApplicableProduct C(NOLOCK) ON B.Prdid =C.Prdid AND SchId in (SELECT SchId FROM DN_Claim_Scheme(NOLOCK) )
	INNER JOIN Schememaster S ON S.Schid = C.Schid  
			INNER JOIN TradeSchemeFactors T ON S.CmpschCode=T.CmpSchCode AND InvDate BETWEEN CONVERT(VARCHAR(10),T.ClaimDate,121) AND @ToDate
	GROUP BY S.Schid 

	CREATE TABLE #ApplicableScheme      
	(      
	SchId   INT,      
	SchDsc   NVARCHAR(100),      
	SchValidFrom DATETIME,      
	SchValidTill DATETIME,       
	Budget   NUMERIC(18,2),      
	BudgetAllocationNo VARCHAR(100),      
	PrdId   INT      
	)     
	 
	INSERT INTO #ApplicableScheme (SchId,SchDsc,SchValidFrom,SchValidTill,Budget,BudgetAllocationNo,PrdId)         
	SELECT DISTINCT A.SchId,S.SchDsc,S.SchValidFrom,S.SchValidTill,S.Budget,S.BudgetAllocationNo, A.PrdId      
	FROM #ApplicableProduct A (NOLOCK),      
	SchemeMaster S (NOLOCK)      
	WHERE A.SchId = S.SchId AND A.SchId  IN (SELECT SCHID FROM DN_Claim_Scheme)       
	AND S.Claimable = 1  
	SELECT S.SchId,S.SchDsc,S.SchValidFrom,S.SchValidTill,SC.SchemeBudget,CircularNo, CircularDate,      
	SUM(B.BaseQty) [SecSalesQty],CAST(SUM(B.LCTR) AS NUMERIC(18,6)) [SecSalesVal],CAST(0 AS NUMERIC(18,6)) Liab,      
	CAST(0 AS NUMERIC(18,6)) Amount     
	INTO #SchemeDebit1      
	FROM #ApplicableScheme S (NOLOCK), 
	#DebitSalesDetails B (NOLOCK) ,
	SchemeMaster SM(NOLOCK) 
	LEFT OUTER JOIN SchemeCirculardetails SC(NOLOCK) ON SM.CmpSchCode=SC.CmpSchcode   
	WHERE S.PrdId = B.PrdId AND S.SchId=SM.SchId  AND Transtype=1 AND      
	(B.Transdate BETWEEN @FromDate AND @ToDate OR B.TransDate BETWEEN @FromDate AND @ToDate)     
	AND SM.CmpSchCode in (select Cmpschcode from SchemeCategorydetails(NOLOCK) where Schcategory_type IN ('Trade Scheme','General Scheme'))
	GROUP BY S.SchId,S.SchDsc,S.SchValidFrom,S.SchValidTill,SC.SchemeBudget,CircularNo,CircularDate,Transdate      
	ORDER BY S.SchId      
	INSERT INTO #SchemeDebit1       
	SELECT APS.Schid,APS.SchDsc,APS.SchValidFrom,APS.SchValidTill,SC.SchemeBudget,CircularNo, CircularDate,      
	SUM(S.BaseQty) [SecSalesQty],Round(CAST((sum(S.BaseQty*PrdBatDetailValue)+ (sum(S.BaseQty*PrdBatDetailValue)*(T.TaxPerc/100))) AS Numeric(18,2)),2)  AS  [SecSalesVal],      
	CAST(0 AS NUMERIC(18,6)) Liab,CAST(0 AS NUMERIC(18,6)) Amount      
	from #SalesInvoice S (NOLOCK)      
	INNER JOIN SalesInvoiceSchemeLineWise SIL(NOLOCK) ON SIL.Salid=s.Salid   AND SIL.Prdid =S.Prdid AND sil.prdbatid =S.PrdBatId       
	INNER JOIN #DebitSalesDetails DS (NOLOCK)ON DS.Salid =S.Salid   AND DS.Salid =SIl.Salid AND DS.Prdid =S.Prdid AND DS.prdbatid = S.prdbatid 
	AND DS.Prdid =SIL.Prdid AND DS.prdbatid =SIl.prdbatid        
	INNER JOIN #ApplicableScheme APS(NOLOCK) ON APS.schid = SIL.schid AND APS.Prdid =DS.Prdid AND APS.Prdid =SIL.Prdid       
	INNER JOIN SchemeMaster SM(NOLOCK) ON SM.schid =SIL.Schid AND SM.Schid =APS.Schid       
	INNER JOIN #ParleOutputTaxPercentage T(NOLOCK) ON T.Salid =DS.Salid AND S.Salid =T.Salid AND S.Salid =SIL.Salid AND DS.SlNo =T.PrdSlno AND T.TransId = DS.TransType       
	LEFT OUTER JOIN SchemeCirculardetails SC(NOLOCK) ON SM.CmpSchCode=SC.CmpSchcode     
	INNER JOIN #ProductBatchDetails D(NOLOCK) on D.prdbatid=SIL.prdbatid AND D.prdbatid=S.prdbatid AND D.SlNo=3 AND DefaultPrice=1      
	WHERE APS.PrdId = DS.PrdId AND APS.SchId=SM.SchId  AND Transtype=1 AND   
	(DS.Transdate BETWEEN @FromDate AND @ToDate      
	OR DS.TransDate BETWEEN @FromDate AND @ToDate)     
	AND SM.cmpschcode in (select Cmpschcode from SchemeCategorydetails(NOLOCK) where Schcategory_type NOT IN ('Trade Scheme','General Scheme'))      
	GROUP BY APS.SchId,APS.SchDsc,APS.SchValidFrom,APS.SchValidTill,SC.SchemeBudget,CircularNo,CircularDate,S.BaseQty,PrdBatDetailValue,T.TaxPerc      
	ORDER BY APS.SchId      
	INSERT INTO #SchemeDebit1      
	SELECT S.SchId,S.SchDsc,S.SchValidFrom,S.SchValidTill,SC.SchemeBudget,CircularNo, CircularDate,      
	SUM(B.BaseQty) [SecSalesQty],CAST(SUM(B.LCTR) AS NUMERIC(18,6)) [SecSalesVal],CAST(0 AS NUMERIC(18,6)) Liab,      
	CAST(0 AS NUMERIC(18,6)) Amount      
	FROM #ApplicableScheme S (NOLOCK),      
	#DebitSalesDetails B (NOLOCK) ,      
	SchemeMaster SM (NOLOCK)
	LEFT OUTER JOIN SchemeCirculardetails SC (NOLOCK) ON SM.CmpSchCode=SC.CmpSchcode     
	WHERE S.PrdId = B.PrdId AND S.SchId=SM.SchId  AND Transtype=2 AND       
	(B.Transdate BETWEEN @FromDate AND @ToDate      
	OR  B.Transdate  BETWEEN @FromDate AND @ToDate)     
	AND SM.cmpschcode in (select Cmpschcode from SchemeCategorydetails(NOLOCK) where Schcategory_type  IN ('Trade Scheme','General Scheme'))     
	GROUP BY S.SchId,S.SchDsc,S.SchValidFrom,S.SchValidTill,SC.SchemeBudget,CircularNo,CircularDate,Transdate       
	ORDER BY S.SchId      
	INSERT INTO #SchemeDebit1      
	SELECT  APS.Schid,APS.SchDsc,APS.SchValidFrom,APS.SchValidTill,SC.SchemeBudget,CircularNo, CircularDate,      
	SUM(S.BaseQty) [SecSalesQty],Round(cast((sum(S.BaseQty*PrdBatDetailValue)+ (sum(S.BaseQty*PrdBatDetailValue)*(T.TaxPerc/100))) AS Numeric(18,6)),2) AS  [SecSalesVal],CAST(0 AS NUMERIC(18,6)) Liab,CAST(0 AS NUMERIC(18,6)) Amount      
	from #Returnheader S (NOLOCK)       
	INNER JOIN ReturnSchemeLineDt SIL(NOLOCK) ON SIL.Returnid=s.Returnid  AND SIL.Prdid =S.Prdid AND sil.prdbatid =S.PrdBatId       
	INNER JOIN #DebitSalesDetails DS(NOLOCK) ON DS.Salid =S.Returnid  AND DS.Salid =SIl.Returnid AND DS.Prdid =S.Prdid AND DS.prdbatid = S.prdbatid AND DS.Prdid =SIL.Prdid AND DS.prdbatid =SIl.prdbatid        
	INNER JOIN #ApplicableScheme APS(NOLOCK) ON APS.schid = SIL.schid AND APS.Prdid =DS.Prdid AND APS.Prdid =SIL.Prdid       
	INNER JOIN SchemeMaster SM(NOLOCK) ON SM.schid =SIL.Schid AND SM.Schid =APS.Schid       
	INNER JOIN #ParleOutputTaxPercentage T(NOLOCK) ON T.Salid =DS.Salid AND S.Returnid =T.Salid AND S.Salid =SIL.Returnid       
	AND DS.slno =T.PrdSlno AND T.TransId = DS.TransType       
	LEFT Outer JOIN SchemeCirculardetails SC(NOLOCK) ON SM.CmpSchCode=SC.CmpSchcode       
	INNER JOIN #ProductBatchDetails D(NOLOCK) on D.prdbatid=SIL.prdbatid AND D.prdbatid=S.prdbatid AND D.SlNo=3 AND DefaultPrice=1      
	WHERE APS.PrdId = DS.PrdId AND APS.SchId=SM.SchId  AND Transtype=2 AND      
	(DS.Transdate BETWEEN @FromDate AND @ToDate      
	OR DS.TransDate BETWEEN @FromDate AND @ToDate)    
	AND SM.cmpschcode in (select Cmpschcode from SchemeCategorydetails(NOLOCK) where Schcategory_type not IN ('Trade Scheme','General Scheme'))     
	GROUP BY APS.SchId,APS.SchDsc,APS.SchValidFrom,APS.SchValidTill,SC.SchemeBudget,CircularNo,CircularDate,S.BaseQty,PrdBatDetailValue,T.TaxPerc      
	ORDER BY APS.SchId      
	DELETE FROM #SchemeDebit1 WHERE SchId NOT IN (SELECT Schid FROM DN_Claim_Scheme WHERE Linetype=1)            
	INSERT INTO #SchemeDebit1      
	SELECT  S.SchId,S.SchDsc,S.SchValidFrom,S.SchValidTill,SC.SchemeBudget,CircularNo, CircularDate,      
	SUM(B.BaseQty) [SecSalesQty],CAST(SUM(B.LCTR) AS NUMERIC(18,6)) [SecSalesVal],CAST(0 AS NUMERIC(18,6)) Liab,      
	CAST(0 AS NUMERIC(18,6)) Amount      
	FROM #ApplicableScheme S (NOLOCK),      
	#DebitSalesDetails B (NOLOCK) ,      
	SchemeMaster SM INNER JOIN SchemeCirculardetails SC(NOLOCK) ON SM.CmpSchCode=SC.CmpSchcode-- added By Mohana      
	,DN_Claim_Scheme D         
	WHERE S.PrdId = B.PrdId AND S.SchId=SM.SchId  AND Transtype=2        
	AND S.Schid = D.Schid AND B.Prdid =D.Prdid AND B.Salid =D.Salid       
	AND S.SchId NOT IN (SELECT schid FROM #SchemeDebit1)      
	GROUP BY S.SchId,S.SchDsc,S.SchValidFrom,S.SchValidTill,SC.SchemeBudget,CircularNo,CircularDate      
	ORDER BY S.SchId      
	SELECT  A.SchId,A.SchDsc,A.SchValidFrom,A.SchValidTill,SchemeBudget,CircularNo, CircularDate,      
	SUM(SecSalesQty) SecSalesQty,CAST(SUM(SecSalesVal) AS NUMERIC(18,6)) [SecSalesVal],CAST(0 AS NUMERIC(18,6)) Liab,      
	CAST(0 AS NUMERIC(18,6)) Amount      
	INTO #SchemeDebit       
	from #SchemeDebit1 A (NOLOCK)     
	INNER JOIN SCHEMEMASTER B(NOLOCK) ON A.schid=B.schid AND B.cmpschcode in (select Cmpschcode from SchemeCategorydetails(NOLOCK) 
	where Schcategory_type IN ('Trade Scheme','General Scheme') )        --ILCRSTPAR5132
	GROUP BY A.SchId,A.SchDsc,a.SchValidFrom,a.SchValidTill,SchemeBudget,CircularNo, CircularDate 
	     
	INSERT  INTO #SchemeDebit      
	SELECT  A.SchId,A.SchDsc,A.SchValidFrom,A.SchValidTill,SchemeBudget,CircularNo, CircularDate,      
	SUM(SecSalesQty) SecSalesQty,CAST(SUM(SecSalesVal) AS NUMERIC(18,6)) [SecSalesVal],CAST(0 AS NUMERIC(18,6)) Liab,      
	CAST(0 AS NUMERIC(18,6)) Amount      
	from #SchemeDebit1 A      
	INNER JOIN SCHEMEMASTER B(NOLOCK) ON A.schid=B.schid AND 
	B.cmpschcode in (select Cmpschcode from SchemeCategorydetails(NOLOCK) where Schcategory_type NOT IN ('Trade Scheme','General Scheme') )      --ILCRSTPAR5132  
	GROUP BY A.SchId,A.SchDsc,a.SchValidFrom,a.SchValidTill,SchemeBudget,CircularNo, CircularDate      
	
	SELECT DISTINCT TaxPerc,B.SalId,B.PrdId  INTO #TaxPerc FROM SalesInvoiceProduct B(NOLOCK)       
	INNER JOIN #ParleOutputTaxPercentage P ON P.SalId = B.SalId AND  B.SlNo = P.PrdSlno AND TRANSID = 1     
	
	  
	SELECT Schid,SUM(Schamt) SchAmt ,Sum(taxamt) TaxAmt INTO #SchFinal FROM       
	(      
	SELECT A.SchId,SUM(A.schamt) SchAmt, (SUM(A.schamt)*(TaxPerc/100)) TaxAmt       
	FROM (              
	SELECT  Schid ,a.PRDID,TaxPerc,SUM (FlatAmount+DiscountPer+FreeValue+GiftValue)schamt FROM DN_Claim_Scheme A(NOLOCK)       
	INNER JOIN #TaxPerc B ON A.Salid = b.SalId AND a.Prdid = b.PrdId AND Linetype = 1   AND A.UsriD   =@Pi_Usrid  AND A.Transid = @Pi_Transid     
	GROUP BY  A.PRDID,A.SchId,TaxPerc      
	)A      
	GROUP BY A.SchId,TaxPerc      
	)B Group by  sCHID 


	select DISTINCT TaxPerc,B.ReturnID AS Salid,B.PrdId 
	into #TaxPer_Return
	from  #ParleOutputTaxPercentage A INNER JOIN ReturnProduct B ON A.SalId = B.ReturnID  where --A.SalId = 2	and 
	TransId = 2 and A.PrdSlno = B.Slno and StockTypeId IN (SELECT StockTypeId FROM STOCKTYPE WHERE SystemStockType = 1)

	INSERT INTO #SchFinal      
	SELECT Schid,SUM(Schamt) SchAmt ,Sum(taxamt) TaxAmt FROM       
	(      
	SELECT A.SchId,SUM(A.schamt) SchAmt, (SUM(A.schamt)*(TaxPerc/100)) TaxAmt          
	FROM (      
	SELECT Schid ,a.PRDID,TaxPerc,SUM (FlatAmount+DiscountPer+FreeValue+GiftValue)schamt FROM DN_Claim_Scheme A(NOLOCK)      
	INNER JOIN #TaxPer_Return P ON   A.Salid = P.SalId   and a.Prdid = P.pRDID And  LineType=2 AND 
	A.UsriD =@Pi_Usrid  AND A.Transid = @Pi_Transid 
	GROUP BY  A.PRDID,A.SchId,TaxPerc     
	)A      
	GROUP BY A.SchId,TaxPerc      
	)B Group by  sCHID
	       
	UPDATE SD SET SD.Amount = CASE S.ApplyTaxForClaim WHEN 0 THEN schamt ELSE  (SchAmt+TaxAmt) END      
	FROM #SchemeDebit SD (NOLOCK) INNER JOIN (SELECT Schid,SUM(SchAmt) SchAmt ,Sum(Taxamt) TaxAmt FROM  #SchFinal GROUP BY Schid) D 
	ON SD.Schid = D.Schid --CHANGED FOR CLAIMAMT MISMATCH  
	INNER JOIN SchemeMaster S ON S.SchId = D.SCHID AND S.SchId = SD.SCHID   
	
	-----------------added by lakshman M PMS ID: ILCRSTPAR7726
	UPDATE SD SET SD.Liab = ((CAST(( SD.Amount / SD.[SecSalesVal]) AS NUMERIC(18,6))) *100)
	FROM #SchemeDebit SD (NOLOCK)      
	WHERE SD.[SecSalesVal] <> 0   

	UPDATE #SchemeDebit SET Liab = (Amount / SecSalesVal) * 100 WHERE Liab > 0 
	---------------Till here ------------------
	INSERT INTO TempTradeSchemeClaimDetails 
	SELECT DISTINCT a.SchId,SchDsc,SchValidFrom,SchValidTill,ISNULL(CircularNo,''),ISNULL(SchemeBudget,0),0,0,0 AS SchPerdPriVal,SecSalesVal,
	Liab,Amount,Amount,0,@Pi_Usrid,@Pi_Transid FROM #SchemeDebit A 
	--LEFT OUTER JOIN TradeSchemeFactors B(NOLOCK)
	--ON A.Schid = B.Schid 
	Order by Schid 
	
	UPDATE A SET Lst2Avg= B.L2MPrimarySales ,Wk4PriVal=B.L4WPrimarySales FROM  TempTradeSchemeClaimDetails A 
	INNER JOIN TradeSchemeFactors B(NOLOCK)ON A.Schid = B.Schid 
	 
	UPDATE A  SET SchPerdPriVal = B.SchPrimary FROM TempTradeSchemeClaimDetails A(NOLOCK) INNER JOIN #PrimaryBasedOnSch B(NOLOCK) ON A.SCHID =B.SchId 
	AND  A.UsriD   =@Pi_Usrid  AND A.Transid = @Pi_Transid 
	
	--SELECT DISTINCT B.Schid,ISNULL(SUM(CapAmount+(SchPerdPriVal+((SchPerdPriVal*5.5)/100))),0)  AS CapAmount INTO #CapValue --SchPri Value Increased with 5.5% ILCRSTPAR7748
	SELECT DISTINCT B.Schid,ISNULL(SUM(CapAmount+SchPerdPriVal),0)  AS CapAmount INTO #CapValue
	FROM TempTradeSchemeClaimDetails A(NOLOCK) INNER JOIN TradeSchemeFactors B(NOLOCK) ON A.Schid = B.Schid 
	AND  A.UsriD   =@Pi_Usrid  AND A.Transid = @Pi_Transid 
	GROUP BY B.Schid
	
	--UPDATE A SET CalClmAmt = ISNULL(( CASE WHEN ISNULL(CapAmount,0)>OrgClmAmt THEN OrgClmAmt ELSE ISNULL(CapAmount,0) END ),0),ApplycapVal =ISNULL(( CASE WHEN ISNULL(CapAmount,0)>OrgClmAmt THEN 0 ELSE 1 END ),0) 
	--FROM TempTradeSchemeClaimDetails A (NOLOCK)
	--INNER JOIN #CapValue B ON A.Schid = B.Schid  AND CapAmount>0
	--AND  A.UsriD   =@Pi_Usrid  AND A.Transid = @Pi_Transid 



	SELECT  A.Schid,ISNULL(( CASE WHEN ISNULL(CapAmount,0)>SecSalValue  THEN (SecSalValue * (SchBudget/100)) 
	ELSE ISNULL((CapAmount * (SchBudget/100)),0) END ),0) AS CapAmt INTO #FinalCap
	FROM TempTradeSchemeClaimDetails A (NOLOCK)
	INNER JOIN #CapValue B ON A.Schid = B.Schid  --AND CapAmount>0
	AND  A.UsriD   =@Pi_Usrid  AND A.Transid = @Pi_Transid 

	UPDATE A SET CalClmAmt = CASE WHEN ISNULL(CapAmt,0)>OrgClmAmt  THEN OrgClmAmt
	ELSE ISNULL(CapAmt,0) END , ApplyCapVal = CASE WHEN ISNULL(CapAmt,0)>OrgClmAmt  THEN 0
	ELSE 1 END
	FROM TempTradeSchemeClaimDetails A INNER JOIN #FinalCap B ON A.Schid = B.Schid 
	AND CapAmt>0
	-----------------added by lakshman M PMS ID: ILCRSTPAR7726
	UPDATE SD SET SD.LibPerc = (ISNULL(CAST(( SD.CalClmAmt/ nullif(SD.SecSalValue,0)) AS NUMERIC(18,6)),0)*100)
	FROM TempTradeSchemeClaimDetails SD (NOLOCK)      
	WHERE ApplyCapVal = 1 
	----------------- till here ----------
	--SELECT Schid,CASE WHEN LibPerc>SchBudget THEN ((CalClmAmt*SchBudget)/LibPerc)  ELSE 0 END NewClmAmt  INTO #NewClmAmt  FROM TempTradeSchemeClaimDetails A
	--WHERE  A.UsriD   =@Pi_Usrid  AND A.Transid = @Pi_Transid 
	
	--UPDATE A SET CalClmAmt = NewClmAmt,  ApplycapVal = CASE ApplycapVal WHEN 0 THEN 2 ELSE 12 END  
	--FROM TempTradeSchemeClaimDetails A (NOLOCK)
	--INNER JOIN #NewClmAmt B ON A.Schid = B.Schid  AND NewClmAmt>0
	--AND  A.UsriD   =@Pi_Usrid  AND A.Transid = @Pi_Transid  
 	
END
GO
IF EXISTS (SELECT *FROM SYSOBJECTS WHERE NAME ='Proc_Cs2Cn_DebitNoteTopSheetClaimDt' AND TYPE='P')
DROP PROCEDURE Proc_Cs2Cn_DebitNoteTopSheetClaimDt
GO
CREATE PROCEDURE Proc_Cs2Cn_DebitNoteTopSheetClaimDt
(
	@Po_ErrNo	INT OUTPUT,
	@ServerDate DATETIME
)
AS
/****************************************************************************
* PROCEDURE	:  Proc_Cs2Cn_DebitNoteTopSheetClaimDt
* PURPOSE	:  TO UPLOAD THE SAVED DEBITNOTETOPSHEET CLAIM DATA IN DETAIL
* DATE		:  14-11-2019
* CREATED	:  MOHANA S	
* PMS NO	:  CRCRSTPAR0079
******************************************************************************
16-01-2020	 MOHANA S		BZ	ILCRSTPAR7420		validation for Institutional
*******************************************************************************/
SET NOCOUNT ON
BEGIN
	SET @Po_ErrNo=0
	DECLARE @DistCode	AS NVARCHAR(50)
	SELECT @DistCode = DistributorCode FROM Distributor
	DELETE FROM Cs2Cn_Prk_DebitNoteTopSheetClaimDt  WHERE UploadFlag ='Y'
	IF NOT EXISTS (SELECT * FROM DebitNoteTopSheetClaimHd WHERE UPLOAD = 'N')
	BEGIN
		RETURN
	END
	DECLARE @FromDate  DATETIME
	DECLARE @ToDate	   DATETIME
	DECLARE @Month INT
	DECLARE @Year  INT
	DECLARE @SecSales NUMERIC(38,2)
	--SELECT TOP 1  @Month = MonthiD,@Year = ClmYear FROM DebitNoteTopSheetClaimHd WHERE UPLOAD = 'N'
	--SELECT @FromDate= DATEADD(MONTH, (@Month)-1,DATEADD(YEAR, @Year - 1900, 0))
	--SELECT @ToDate = DATEADD(dd, -1, DATEADD(MONTH, @Month,DATEADD(YEAR, @Year - 1900, 0)))
	
	SELECT DISTINCT CirNo INTO #CirNO FROM (
	SELECT Dnrefid,CirNo FROM DebitNoteTopSheetClaim_SMInc		UNION    
	SELECT Dnrefid,CirNo FROM DebitNoteTopSheetClaim_DistInc	UNION 
	SELECT Dnrefid,CirNo FROM DebitNoteTopSheetClaim_Manual		UNION 
	SELECT Dnrefid,CirNo FROM DebitNoteTopSheetClaim_TOTDiff	UNION 
	SELECT Dnrefid,CirNo FROM DebitNoteTopSheetClaim_InstTarget UNION 
	SELECT Dnrefid,CirNo FROM DebitNoteTopSheetClaim_Sampling
	)A INNER JOIN   DebitNoteTopSheetClaimHd B ON A.DNRefId = B.DNRefId WHERE UPLOAD = 'N'
	
	SELECT DISTINCT CircularNo,ClaimType,AttrCode ,Max(CreatedDate) CreatedDate
	INTO #MaxDate
	FROM SchemeCLaimCircular WHERE CircularNo IN (SELECT CirNO FROM #CirNO)
	GROUP BY CircularNo,AttrCode,ClaimType
	
	SELECT DISTINCT ConRefNo,A.ClaimType,AttrType,A.AttrCode,A.CircularNo,CircularDate,CircularBudget
	INTO #SchemeCLaimCircular1
	FROM SchemeCLaimCircular A INNER JOIN #MaxDate B ON A.AttrCode =B.AttrCode AND A.CreatedDate =B.CreatedDate AND A.ClaimType=B.ClaimType
	AND A.CircularNo = B.CircularNo
	WHERE A.CircularNo IN (SELECT CirNO FROM #CirNO)
	
	SELECT DISTINCT ConRefNo,ClaimType,AttrType,AttrCode,CircularNo,CircularDate,CircularBudget
	INTO #SchemeCLaimCircular
	FROM #SchemeCLaimCircular1 
			 
	INSERT INTO Cs2Cn_Prk_DebitNoteTopSheetClaimDt(DistCode,DNDocRefNO,ClmDate,ClmType,FromDate,ToDate,CirRefNO,CirNo,SancDate,ClmAmt,UploadFlag,ServerDate)
	SELECT DISTINCT @DistCode,DNDocNo,ClmDate ,'Sampling Claim',FromDate ,ToDate,ConRefNo,CirNo ,SancDate,SamAmt,'N',@ServerDate  from DebitNoteTopSheetClaim_Sampling A 
	INNER JOIN DebitNoteTopSheetClaimHd B(NOLOCK) ON A.DNRefId = B.DNRefId
	INNER JOIN #SchemeCLaimCircular C(NOLOCK) ON A.CirNo=C.CircularNO AND ClaimType ='Sampling Claim'
	-- AND ((@FromDate  BETWEEN  SchValidFrom AND SchValidTill  ) OR (@ToDate  BETWEEN  SchValidFrom AND SchValidTill)) 
	WHERE B.UPLOAD='N'
			
	INSERT INTO Cs2Cn_Prk_DebitNoteTopSheetClaimDt(DistCode,DNDocRefNO,ClmDate,ClmType,FromDate,ToDate,SchDesc,CirRefNO,CirNo,SchBudget,Lst2MntSAl,SecSales,LaibPer,
	Wk4PriVal,SchPrimary,OrgClmAmt,ClmAmt,UploadFlag,ServerDate)
	SELECT DISTINCT @DistCode,DNDocNo,ClmDate ,'Trade Scheme Claim',FrmDate,ToDate,SchDesc,S.CmpSchCode,CirNo,SchBudget,Lst2MntSAl,SecSales,LaibPer,Wk4PriVal,SchPrimary,OrgClmAmt,CalClmAmt,'N',@ServerDate
	FROM DebitNoteTopSheetClaim_Trade A(NOLOCK) INNER JOIN DebitNoteTopSheetClaimHd B(NOLOCK) ON A.DNRefId = B.DNRefId 
	INNER JOIN SchemeMaster S(NOLOCK) ON A.Schid =  S.Schid
	INNER JOIN SchemeCircularDetails C(NOLOCK) ON S.CmpSchCode=C.CmpSchCode  AND A.CirNo = C.CircularNo
	--AND ((SchValidFrom BETWEEN FrmDate AND ToDate) OR (SchValidTill BETWEEN FrmDate AND ToDate ))
	WHERE B.UPLOAD='N'
			
	INSERT INTO Cs2Cn_Prk_DebitNoteTopSheetClaimDt(DistCode,DNDocRefNO,ClmDate,ClmType,FromDate,ToDate,CtgCode,CirRefNO,CirNo,Lst2MntSAl,MonTarget,CurMonth,OutletCnt,ClmAmt,UploadFlag,ServerDate)
	SELECT DISTINCT @DistCode,DNDocNo,ClmDate ,'Institutional Claim',fromDate,ToDate,CtgCode,ConRefNo,CirNo,Lst2MntSAl,MonTarget ,CurMonth,OutletCnt,TotDiscount,'N',@ServerDate
	FROM DebitNoteTopSheetClaim_InstTarget A(NOLOCK) INNER JOIN DebitNoteTopSheetClaimHd B(NOLOCK) ON A.DNRefId = B.DNRefId
	INNER JOIN RetailerCategory R(NOLOCK) ON A.CtgName=R.CtgName
	INNER JOIN #SchemeCLaimCircular C(NOLOCK) ON A.CirNo=C.CircularNO AND ClaimType ='Institutional Claim' AND AttrCode = R.CtgCode 
	--AND ((@FromDate  BETWEEN  SchValidFrom AND SchValidTill  ) OR (@ToDate  BETWEEN  SchValidFrom AND SchValidTill)) 
	WHERE B.UPLOAD='N' AND A.SchType=0
			
	--INSERT INTO Cs2Cn_Prk_DebitNoteTopSheetClaimDt(DistCode,DNDocRefNO,ClmDate,ClmType,FromDate,ToDate,CtgCode,CirRefNO,CirNo,NrmlAmt,TOTAmt,ClmAmt,UploadFlag,ServerDate)
	--SELECT DISTINCT @DistCode,DNDocNo,ClmDate ,'TOT cLAIM',FromDate,TODate,CtgCode,ConRefNo,CirNo,NrmlAmt,TOTAmt,DiffAmt,'N',@ServerDate  FROM DebitNoteTopSheetClaim_TOTDiff A 
	--INNER JOIN DebitNoteTopSheetClaimHd B(NOLOCK)ON A.DNRefId = B.DNRefId
	--INNER JOIN RetailerCategory R(NOLOCK) ON A.CtgName=R.CtgName 
	--INNER JOIN #SchemeCLaimCircular C (NOLOCK) ON A.CirNo=C.CircularNO AND R.CtgCode =C.AttrCode AND ClaimType ='TOT cLAIM'
	--AND ((SchValidFrom BETWEEN @FromDate AND @ToDate) OR (SchValidTill BETWEEN @FromDate AND @ToDate ))
	--WHERE B.UPLOAD='N'
			 
	INSERT INTO Cs2Cn_Prk_DebitNoteTopSheetClaimDt(DistCode,DNDocRefNO,ClmDate,ClmType,FromDate,ToDate,CtgCode,CirRefNO,CirNo,Lst2MntSAl,MonTarget,CurMonth,OutletCnt,ClmAmt,UploadFlag,ServerDate)
	SELECT DISTINCT @DistCode,DNDocNo,ClmDate ,'Institutional Claim',fromDate,ToDate,CtgCode,S.CmpSchcode,CirNo,Lst2MntSAl,MonTarget ,CurMonth,OutletCnt,TotDiscount,'N',@ServerDate
	FROM DebitNoteTopSheetClaim_InstTarget A(NOLOCK) INNER JOIN DebitNoteTopSheetClaimHd B(NOLOCK) ON A.DNRefId = B.DNRefId
	INNER JOIN (SELECT DISTINCT CtgMainId,DnrefId,Schid FROM DebitNoteTopSheetClaim_Inst_prdwise) CD ON A.DNRefId = CD.DNRefId AND CD.DNRefId = B.DNRefId
	INNER JOIN RetailerCategory R(NOLOCK) ON A.CtgName=R.CtgName AND R.CtgMainId = CD.CtgMainId 
	INNER JOIN SchemeMaster S ON S.SchId = CD.Schid 
	INNER JOIN SchemeCircularDetails C(NOLOCK) ON A.CirNo=C.CircularNO AND S.CmpSchCode =C.CmpSchcode 
	WHERE B.UPLOAD='N' AND A.SchType=1 
			
	INSERT INTO Cs2Cn_Prk_DebitNoteTopSheetClaimDt(DistCode,DNDocRefNO,ClmDate,ClmType,FromDate,ToDate,CtgCode,CirRefNO,CirNo,NrmlAmt,TOTAmt,ClmAmt,UploadFlag,ServerDate)
	SELECT DISTINCT @DistCode,DNDocNo,ClmDate ,'TOT CLAIM',FromDate,TODate,CtgCode,ConRefNo,CirNo,NrmlAmt,TOTAmt,DiffAmt,'N',@ServerDate 
	FROM DebitNoteTopSheetClaim_TOTDiff A 	 
	INNER JOIN DebitNoteTopSheetClaimHd B(NOLOCK)ON A.DNRefId = B.DNRefId
	INNER JOIN (SELECT DISTINCT DNRefId,rtrid FROM  DebitNoteTopSheetClaim_TOT_PrdWise) DD ON A.DNRefId = DD.DNRefId AND  B.DNRefId = DD.DNRefId
	INNER JOIN RetailerValueClassMap RC ON DD.Rtrid = RC.RtrId 
	INNER JOIN RetailerValueClass RV ON RC.RtrValueClassId = RV.RtrClassId 
	INNER JOIN RetailerCategory R(NOLOCK) ON A.CtgName=R.CtgName AND R.CtgMainId = RV.CtgMainId 
	INNER JOIN #SchemeCLaimCircular C (NOLOCK) ON A.CirNo=C.CircularNO AND R.CtgCode =C.AttrCode AND ClaimType ='TOT cLAIM'
	--AND ((SchValidFrom BETWEEN @FromDate AND @ToDate) OR (SchValidTill BETWEEN @FromDate AND @ToDate ))
	WHERE B.UPLOAD='N'

	INSERT INTO Cs2Cn_Prk_DebitNoteTopSheetClaimDt(DistCode,DNDocRefNO,ClmDate,ClmType,FromDate,ToDate,SchDesc,CirRefNO,CirNo,SchBudget,SecSales,LaibPer,ClmAmt,UploadFlag,ServerDate)
	SELECT DISTINCT  @DistCode,DNDocNo,ClmDate ,'Manual Claim',FromDate,Todate,SchDesc,''ConRefNo,CirNo,SchBudget ,SecSales ,LiabPerc,ClmAmt,'N',@ServerDate  FROM DebitNoteTopSheetClaim_Manual A 
	INNER JOIN DebitNoteTopSheetClaimHd B(NOLOCK) ON A.DNRefId = B.DNRefId 
	WHERE B.UPLOAD='N'
			
	INSERT INTO Cs2Cn_Prk_DebitNoteTopSheetClaimDt(DistCode,DNDocRefNO,ClmDate,ClmType,FromDate,ToDate,RefNo,CirRefNO,CirNo,SMCnt,TotAchSales,ClmAmt,UploadFlag,ServerDate)
	SELECT DISTINCT @DistCode,DNDocNo,ClmDate ,'Distributor Incentive Claim',IncfromDate,InctODate,RefNo,ConRefNo,CirNO,SMCnt,TotAchSales,IncAmt,'N',@ServerDate 
	FROM DebitNoteTopSheetClaim_DistInc A(NOLOCK) 
	INNER JOIN DebitNoteTopSheetClaimHd B(NOLOCK) ON A.DNRefId = B.DNRefId 
	INNER JOIN #SchemeCLaimCircular C(NOLOCK) ON A.CirNo=C.CircularNO AND ClaimType ='Distributor Incentive Claim'
	INNER JOIN DistributorIncentiveMaster D(NOLOCK) ON A.RefNo = D.DistIRefno --AND IncMonth =  DateName(mm,DATEADD(mm,@Month,-1)) AND IncYear=@Year
	--AND ((IncfromDate BETWEEN @FromDate AND @ToDate) OR (IncToDate BETWEEN @FromDate AND @ToDate )) 
	WHERE B.UPLOAD='N'
			
	INSERT INTO Cs2Cn_Prk_DebitNoteTopSheetClaimDt(DistCode,DNDocRefNO,ClmDate,ClmType,RefNo,CirRefNO, CirNo,TotAchSales,FrmRange,ToRange,FixedPay,VarPay,ClmAmt,UploadFlag,ServerDate)
	SELECT DISTINCT @DistCode,DNDocNo,ClmDate ,'SalesMan Incentive Claim',RefNo,ConRefNo ,CirNO,TotAchSales,FrmRange,ToRange,FixedPay,VarPay,A.IncAmount,'N',@ServerDate
	FROM DebitNoteTopSheetClaim_SMInc A(NOLOCK) 
	INNER JOIN DebitNoteTopSheetClaimHd B(NOLOCK) ON A.DNRefId = B.DNRefId 
	INNER JOIN #SchemeCLaimCircular C(NOLOCK) ON A.CirNo=C.CircularNO AND ClaimType ='SalesMan Incentive Claim'
	INNER JOIN SalesManincentiveDetail D(NOLOCK) ON A.RefNo = D.SMIRefno AND A.SMID =D. SMID 
	--AND INCMONTH =DateName(mm,DATEADD(mm,@Month,-1)) AND INCYEAr = @Year  
	WHERE B.UPLOAD='N'


	UPDATE Cs2Cn_Prk_DebitNoteTopSheetClaimDt SET  SancDate='1900-01-01' WHERE SancDate IS NULL
	UPDATE Cs2Cn_Prk_DebitNoteTopSheetClaimDt SET FromDate='1900-01-01',ToDate ='1900-01-01' WHERE FromDate IS NULL OR TODATE IS NULL
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME ='Proc_SMIncClaimDetails' AND TYPE='P')
DROP PROCEDURE Proc_SMIncClaimDetails
GO
CREATE PROCEDURE Proc_SMIncClaimDetails
(
	@Pi_Year	int,
	@Pi_Month	INT,
	@Pi_Usrid	INT,
	@Pi_Transid	INT
)
AS
/****************************************************************************
* PROCEDURE	:  Proc_DistIncClaimDetails
* PURPOSE	:  TO LOAD DISTRIBUTOR INCENTIVE CLAIMS 
* DATE		:  14-11-2019
* CREATED	:  MOHANA S
* PMS NO	:  CRCRSTPAR0079
**********************************************************************************************************************
* Date			Author				userStoryid			CR/BZ				Descriptiom
* 11-01-2020	MOHANA S			ILCRSTPAR7391     	SR					Blocked the claim
* 16-01-2020	MOHANA S			ILCRSTPAR7420		SR					Removed the block
*******************************************************************************/
BEGIN
SET NOCOUNT ON 

	DELETE FROM  TempSMIncClaimDetails  
	
	RETURN

	DECLARE @Month1 VARCHAR(100)
	DECLARE @Pi_Year1 INT

	DECLARE @FromDate  DATETIME
	DECLARE @ToDate	   DATETIME
	DECLARE @CirNO	   NVARCHAR(100)
  
	SELECT @FromDate= DATEADD(MONTH, (@Pi_Month)-1,DATEADD(YEAR, @Pi_Year - 1900, 0))

	SELECT @ToDate = DATEADD(dd, -1, DATEADD(MONTH, @Pi_Month,DATEADD(YEAR, @Pi_Year - 1900, 0)))

	 
	SET @Month1=DATENAME(MONTH, @FromDate)
	SET @Pi_Year1=@Pi_Year	 

	SELECT ClaimType,MAX(CreatedDate) CreatedDate INTO #MAXDATE FROM SchemeClaimCircular A 
	WHERE  ((@FromDate  BETWEEN  SchValidFrom AND SchValidTill  ) OR (@ToDate  BETWEEN  SchValidFrom AND SchValidTill)) 
	AND ClaimType='SalesMan Incentive Claim' GROUP BY ClaimType
		
	SELECT @CirNO = CircularNo FROM
	(
	SELECT DISTINCT TOP 1  CircularNo FROM SchemeClaimCircular A INNER JOIN #MAXDATE B ON A.ClaimType = B.ClaimType AND A.CreatedDate =B.CreatedDate ) A
	
	SELECT DISTINCT SMID INTO #SMDETAIL FROM SalesInvoice WHERE SalInvdate BETWEEN @FromDate AND @ToDate AND DLVSTS>3

	INSERT INTO TempSMIncClaimDetails
	SELECT S.SMIRefNo,SMName,ISNULL(@CirNO,''),AchSales,[FromRange],[ToRange],FixedPay,VariablePay,IncPerc,IncAmount,TotalIncAmount,SD.SMID,@Pi_Usrid,@Pi_Transid  
	FROM SalesManIncentiveMaster S INNER JOIN SalesManincentiveDetail SD
	ON S.SMIRefno = SD.SMIRefno 
	INNER JOIN SalesmanIncentiveSlabs SS ON SS.SMIRefno = S.SMIRefno AND SD.SMIRefno=SS.SMIRefno AND SD.AchSlab = SS.Slab 
	INNER JOIN SalesMan A ON SD.SMid = A.SMId AND SMIRefStatus = 1 AND A.SMID IN (SELECT SMID FROM #SMDETAIL )
	WHERE  SMCODE NOT IN('SMDUMMY01') AND S.IncMonth =@Month1 AND S.Incyear =@Pi_Year1   AND SMIrefStatus=1

END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Cs2Cn_DNTSClaimBrandWise' AND TYPE='P')
DROP PROCEDURE Proc_Cs2Cn_DNTSClaimBrandWise 
GO
CREATE PROCEDURE Proc_Cs2Cn_DNTSClaimBrandWise
(
	@Po_ErrNo	INT OUTPUT,
	@ServerDate DATETIME
)
AS
/**********************************************************************************************************************************
* PROCEDURE	:  Proc_Cs2Cn_DNTSClaimBrandWise
* PURPOSE	:  TO UPLOAD SAVED DEBITNOTETOPSHEET CLAIM IN BRAND AND COST CENTRE WISE
* DATE		:  14-11-2019
* CREATED	:  MOHANA S
* PMS NO	:  CRCRSTPAR0079
************************************************************************************************************************************
* DATE      |	  PERSON			  | USER STORY ID  |	  CR/BZ		|       REMARKS                      
************************************************************************************************************************************
* 09-01-2020		MOHANA S			ILCRSTPAR7358 		    SR			Changed the claim Logic based on Sch Budget & LiabPer
* 16-01-2020		MOHANA S			ILCRSTPAR7420			BZ			Institutional Changes
* 06-03-2020		MOHANA S			ILCRSTPAR8160			CR			Channel Wise Upload for Trade Claim
* 12-05-2020		MOHANA S		    PARCS202100018			SR			Utilization split up Channel, Group, Product: Brand, PriceSlot, Flavor level
* 07-07-2020		S.Moorthi		    PARCS202100019			SR			Claim upload for Target Achievement
*************************************************************************************************************************************/ 
SET NOCOUNT ON
BEGIN
	SET @Po_ErrNo=0
	DECLARE @DistCode	AS NVARCHAR(50)
	SELECT @DistCode = DistributorCode FROM Distributor
	DELETE FROM Cs2Cn_Prk_DNTSClaimBrandWise  WHERE UploadFlag ='Y'
			 
	IF NOT EXISTS (SELECT * FROM DebitNoteTopSheetClaimHd WHERE UPLOAD = 'N')
	BEGIN
		RETURN
	END
			
	DECLARE @FromDate  DATETIME
	DECLARE @ToDate	   DATETIME
	DECLARE @Month INT
	DECLARE @Year  INT
	DECLARE @SecSales NUMERIC(38,2)

	SELECT  DISTINCT MonthiD, ClmYear INTO #Clmdate FROM DebitNoteTopSheetClaimHd WHERE UPLOAD = 'N'

	--SELECT @FromDate= DATEADD(MONTH, (@Month)-1,DATEADD(YEAR, @Year - 1900, 0))

	--SELECT @ToDate = DATEADD(dd, -1, DATEADD(MONTH, @Month,DATEADD(YEAR, @Year - 1900, 0)))

	--SELECT @SecSales = SecSales FROM (
	--SELECT ISNULL(SUM(SalNetAmt),0) SecSales FROM Salesinvoice WHERE SalInvDate BETWEEN @FromDate AND @ToDate 
	--UNION
	--SELECT ISNULL(-1*SUM(RtnNetamt),0) SecSales FROM Returnheader  WHERE REturnDate BETWEEN @FromDate AND @ToDate  
	--)A
		
	DECLARE Cur_Date Cursor
	FOR SELECT MonthiD, ClmYear FROM #Clmdate
	OPEN Cur_Date
	FETCH NEXT FROM Cur_Date INTO @Month,@Year	
	WHILE @@FETCH_STATUS = 0
	BEGIN
	EXEC Proc_ProductTaxPercentage_DNClaim  @Year,@Month  ,0,0  
	FETCH NEXT FROM Cur_Date INTO @Month,@Year	
	END
	CLOSE Cur_Date
	DEALLOCATE Cur_Date  

	SELECT DISTINCT CirNo INTO #CirNO FROM (
	SELECT Dnrefid,CirNo FROM DebitNoteTopSheetClaim_SMInc		UNION    
	SELECT Dnrefid,CirNo FROM DebitNoteTopSheetClaim_DistInc	UNION 
	SELECT Dnrefid,CirNo FROM DebitNoteTopSheetClaim_Manual		UNION 
	SELECT Dnrefid,CirNo FROM DebitNoteTopSheetClaim_TOTDiff	UNION 
	SELECT Dnrefid,CirNo FROM DebitNoteTopSheetClaim_InstTarget UNION 
	SELECT Dnrefid,CirNo FROM DebitNoteTopSheetClaim_Sampling
	)A INNER JOIN   DebitNoteTopSheetClaimHd B ON A.DNRefId = B.DNRefId WHERE UPLOAD = 'N'
	
	SELECT DISTINCT CircularNo,ClaimType,AttrCode ,Max(CreatedDate) CreatedDate
	INTO #MaxDate
	FROM SchemeCLaimCircular WHERE CircularNo IN (SELECT CirNO FROM #CirNO)
	GROUP BY CircularNo,AttrCode,ClaimType

	SELECT DISTINCT ConRefNo,A.ClaimType,AttrType,A.AttrCode,A.CircularNo,CircularDate,CircularBudget
	INTO #SchemeCLaimCircular1
	FROM SchemeCLaimCircular A INNER JOIN #MaxDate B ON A.AttrCode =B.AttrCode AND A.CreatedDate =B.CreatedDate AND A.ClaimType=B.ClaimType
	AND A.CircularNo = B.CircularNo
	WHERE A.CircularNo IN (SELECT CirNO FROM #CirNO)

	SELECT DISTINCT ConRefNo,ClaimType,AttrType,AttrCode,CircularNo,CircularDate,CircularBudget 
	INTO #SchemeCLaimCircular
	FROM #SchemeCLaimCircular1
			
	SELECT DISTINCT  A.CmpSchcode,CircularNo,CircularDate,SchemeBudget INTO #Schemecirculardetails 
	FROM Schemecirculardetails A 

	--SAMPLING
	INSERT INTO Cs2Cn_Prk_DNTSClaimBrandWise(DistCode,DNDocRefNO,ClmDate,FromDate,ToDate,ClmType,CirSchCode,BrandCode,CostCentreCde,CirNo,
					CirDate,LaibPer,SecSales,ClmAmt,UploadFlag,ServerDate,PriceSlotCode,FlavourCode)
	SELECT @DistCode,DNDocNo,ClmDate,FromDate ,ToDate,'Sampling Claim',ConRefNo,BrandCode,CostCenter,CirNo ,Circulardate,CircularBudget,0,
	SUM(FD.TotalAmt),'N',@ServerDate,PriceSlot_Code,Flavor_Code  from DebitNoteTopSheetClaim_Sampling A(NOLOCK) 
	INNER JOIN DebitNoteTopSheetClaimHd B(NOLOCK) ON A.DNRefId = B.DNRefId AND B.UPLOAD='N'
	INNER JOIN FreeIssueHd F (NOLOCK) ON DATENAME(Month,F.IssueDate)=B.ClmMonth AND YEAR (F.IssueDate)=B.ClmYear  --F.IssueDate BETWEEN A.FromDate AND A.Todate REGIONAL SETTING ISSUE
	INNER JOIN FreeissueDt FD(NOLOCK) ON F.IssueId = FD.IssueId 
	INNER JOIN TBL_GR_BUILD_PH T(NOLOCK) ON T.Prdid = FD.PrdId 
	INNER JOIN CostCentreDetails C(NOLOCK) ON C.BrandCode = T.Brand_Code 
	INNER JOIN #SchemeClaimCircular S(NOLOCK) ON S.CircularNo=A.CirNo AND S.ClaimType = 'Sampling Claim'
	GROUP BY DNDocNo,ClmDate,FromDate ,ToDate,ConRefNo,BrandCode,CostCenter,CirNo ,Circulardate,CircularBudget,PriceSlot_Code,Flavor_Code
			
	--TRADE Commented For Calculation change -Final from AMARENDRA
	--SELECT SchId, SUM(OrgClmAmt/CalClmAmt) AS ClmPer  INTO #TradePer FROM DebitNoteTopSheetClaim_Trade A(NOLOCK) INNER JOIN DebitNoteTopSheetClaimHd B(NOLOCK)  
	--ON A.DNRefId = B.DNRefId AND B.UPLOAD='N' AND ApplyCapVal IN (2,12,1)    AND CALCLMAMT<>0
	--GROUP BY SchId 
			
	--SELECT DISTINCT A.Schid,DNDocNo,ClmDate,FrmDate,ToDate,S.CmpSchCode,BrandCode,CostCenter,CirNo,CircularDate,Schbudget,
	--CASE ISNULL(CalClmAmt,'') WHEN 0 THEN 0 ELSE
	--CASE ApplyCapVal 
	--	WHEN 0 THEN 
	--			CASE ApplyTaxForClaim WHEN 1 THEN SUM(SchAmtWithTax) ELSE SUM(DiscountPer)  END
	--	WHEN 2 THEN
	--			CASE ApplyTaxForClaim WHEN 1 THEN SUM(SchAmtWithTax/ ClmPer ) ELSE SUM(DiscountPer/ ClmPer )  END
	--	WHEN 1 THEN 
	--			CASE ApplyTaxForClaim WHEN 1 THEN SUM(SchAmtWithTax/ ClmPer ) ELSE SUM(DiscountPer/ ClmPer ) END
	--	WHEN 12 THEN 
	--			CASE ApplyTaxForClaim WHEN 1 THEN SUM(SchAmtWithTax/ ClmPer ) ELSE SUM(DiscountPer/ ClmPer ) END
	--END END AS ClmAmt,SecSales 
	--INTO #TradeClaimBrandWise
	--FROM DebitNoteTopSheetClaim_Trade A(NOLOCK) INNER JOIN DebitNoteTopSheetClaimHd B (NOLOCK) ON A.DNRefId = B.DNRefId AND B.UPLOAD='N'
	--INNER JOIN DebitNoteTopSheetClaim_Trade_PrdWise  D(NOLOCK) ON A.Schid =D.Schid 	 
	--INNER JOIN TBL_GR_BUILD_PH T(NOLOCK) ON D.Prdid =T.PrdiD
	--INNER JOIN CostCentreDetails C(NOLOCK) ON C.BrandCode = T.Brand_Code 
	--INNER JOIN Schememaster S(NOLOCK) ON S.Schid=A.Schid AND D.SchId = S.SchId 
	--INNER JOIN SchemeCircularDetails SC(NOLOCK) ON S.CmpSchCode=SC.CmpSchCode
	--LEFT OUTER JOIN #TradePer TS(NOLOCK) ON A.SchId =TS.SchId AND D.SchId = Ts.SchId AND S.schid = Ts.Schid
	--GROUP BY A.Schid,DNDocNo,ClmDate,FrmDate ,ToDate,S.CmpSchCode,BrandCode,CostCenter,CirNo,CircularDate ,Schbudget,ApplyCapVal,ClmPer,
	--CalClmAmt,ApplyTaxForClaim,SecSales
			 
	 

	SELECT DISTINCT Salid,D.DnRefId  INTO #SalDet FROM DebitNoteTopSheetClaim_Trade A(NOLOCK) INNER JOIN DebitNoteTopSheetClaimHd B (NOLOCK) 
	ON A.DNRefId = B.DNRefId AND B.UPLOAD='N'
	INNER JOIN DebitNoteTopSheetClaim_Trade_PrdWise  D(NOLOCK) ON A.Schid =D.Schid 	 AND A.DNRefId = D.DnRefId AND B.DNRefId = D.DnRefId
			
	SELECT DISTINCT A.Salid,R.CtgCode as ChnCode,RC.CtgCode As GrpCode,DnRefId INTO #RtrCtgDet FROM SalesInvoice A INNER JOIN #SalDet B ON A.SalId = B.Salid   
	INNER JOIN RetailervalueClass RV ON A.RtrvalueClassiD = RV.Rtrclassid
	INNER JOIN RetailerCategory RC ON RV.CtgMainId = RC.CtgMainId
	INNER JOIN RetailerCategory R ON RC.CtgLinkId = R.CtgMainId 

	--TRADE
	SELECT A.DNRefId,SchId, SUM(OrgClmAmt/CalClmAmt) AS ClmPer  INTO #TradePer FROM DebitNoteTopSheetClaim_Trade A(NOLOCK) 
	INNER JOIN DebitNoteTopSheetClaimHd B(NOLOCK)  
	ON A.DNRefId = B.DNRefId AND B.UPLOAD='N' AND ApplyCapVal = 1   AND CALCLMAMT<>0
	GROUP BY SchId,A.DNRefId 

	SELECT DISTINCT A.Schid,DNDocNo,ClmDate,FrmDate,ToDate,S.CmpSchCode,BrandCode,PriceSlot_Code ,Flavor_Code,CostCenter,CirNo,CircularDate,Schbudget,
	CASE ISNULL(CalClmAmt,'') WHEN 0 THEN 0 ELSE
	CASE ApplyCapVal WHEN 1 THEN  CASE ApplyTaxForClaim WHEN 1 THEN SUM(SchAmtWithTax/ ClmPer ) ELSE SUM((DiscountPer+FlatAmount) / ClmPer ) END
	ELSE
	CASE ApplyTaxForClaim WHEN 1 THEN SUM(SchAmtWithTax) ELSE SUM(DiscountPer+FlatAmount )  END END END AS ClmAmt,SecSales,R.ChnCode,R.GrpCode  
	INTO #TradeClaimBrandWise
	FROM DebitNoteTopSheetClaim_Trade A(NOLOCK) INNER JOIN DebitNoteTopSheetClaimHd B (NOLOCK) ON A.DNRefId = B.DNRefId AND B.UPLOAD='N'
	INNER JOIN DebitNoteTopSheetClaim_Trade_PrdWise  D(NOLOCK) ON A.Schid =D.Schid 	 AND A.DNRefId = D.DnRefId AND B.DNRefId = D.DnRefId  
	INNER JOIN TBL_GR_BUILD_PH T(NOLOCK) ON D.Prdid =T.PrdiD
	INNER JOIN CostCentreDetails C(NOLOCK) ON C.BrandCode = T.Brand_Code 
	INNER JOIN Schememaster S(NOLOCK) ON S.Schid=A.Schid AND D.SchId = S.SchId 
	INNER JOIN SchemeCircularDetails SC(NOLOCK) ON S.CmpSchCode=SC.CmpSchCode
	INNER JOIN #RtrCtgDet R ON R.SalId = D.Salid AND D.DnrefId = R.DNRefiD AND A.DnrefId = R.DNRefiD AND B.DnrefId = R.DNRefiD
	LEFT OUTER JOIN #TradePer TS(NOLOCK) ON A.SchId =TS.SchId AND D.SchId = Ts.SchId AND S.schid = Ts.Schid
    AND TS.DNRefId = B.DNRefId AND Ts.DNRefId = A.DNRefId AND D.DnRefId = Ts.DNRefId 
	GROUP BY A.Schid,DNDocNo,ClmDate,FrmDate ,ToDate,S.CmpSchCode,BrandCode,CostCenter,CirNo,CircularDate ,Schbudget,ApplyCapVal,ClmPer,
	CalClmAmt,ApplyTaxForClaim,SecSales,R.ChnCode,R.GrpCode ,PriceSlot_Code ,Flavor_Code
				 
	INSERT INTO Cs2Cn_Prk_DNTSClaimBrandWise(DistCode,DNDocRefNO,ClmDate,FromDate,ToDate,ClmType,CirSchCode,BrandCode,CostCentreCde,CirNo,
	CirDate,LaibPer,SecSales,ClmAmt,UploadFlag,ServerDate,ChannelCode,GrpCode,PriceSlotCode,FlavourCode)
	SELECT  @DistCode,DNDocNo,ClmDate,FrmDate,ToDate,'Trade Scheme Claim',CmpSchCode,BrandCode,CostCenter,CirNo,CircularDate,Schbudget,SecSales,
	round(casT(sum(ClmAmt) AS NUMERIC(38,4)),4),'N',@Serverdate,ChnCode,GrpCode,PriceSlot_Code ,Flavor_Code
	FROM #TradeClaimBrandWise GROUP BY DNDocNo,ClmDate,FrmDate,ToDate,CmpSchCode,BrandCode,CostCenter,CirNo,CircularDate,Schbudget,SecSales,ChnCode,GrpCode,PriceSlot_Code ,Flavor_Code	 

	--TOT
	SELECT DISTINCT R.RtrId,RC.CtgMainId,RC.CtgCode,RC.CtgName,RtrValueClassId,RC1.CtgCode As ChnCode
	INTO #Retailer      
	FROM Retailer R (NOLOCK),      
	RetailerValueClassMap RVCM (NOLOCK),      
	RetailerValueClass RVC (NOLOCK),      
	RetailerCategory RC (NOLOCK),  
    RetailerCategory RC1
	WHERE R.Rtrid = RVCM.RtrId AND RVCM.RtrValueClassId = RVC.RtrClassId      
	AND  RVC.CtgMainId=RC.CtgMainId AND  RC1.CtgMainId=RC.CtgLinkId 
			 
	SELECT  DNDocNo,ClmDate,FromDate ,ToDate,'TOT Claim' Clmtype,ConRefNo,ChnCode,R.CtgCode,R.CtgName,BrandCode,PriceSlot_Code ,Flavor_Code,CostCenter,CircularNO,
	CircularDate,CircularBudget,NrmlAmt,SUM(T.Diff) ClmAmt
	INTO #TotFinal
	FROM DebitNoteTopSheetClaim_TOTDiff A(NOLOCK) 
	INNER JOIN DebitNoteTopSheetClaimHd B(NOLOCK) ON A.DNRefId = B.DNRefId AND B.UPLOAD='N'
	INNER JOIN DebitNoteTopSheetClaim_TOT_PrdWise T(NOLOCK) ON A.DNREFID = T.DNREFID AND B.DNREFID = T.DNREFID 
	INNER JOIN TBL_GR_BUILD_PH TH (NOLOCK) ON T.Prdid =TH.PrdiD
	INNER JOIN CostCentreDetails C(NOLOCK) ON C.BrandCode = TH.Brand_Code
	INNER JOIN #Retailer R(NOLOCK) ON T.Rtrid = R.RtrId AND A.CtgName = R.CtgName    
	INNER JOIN #SchemeCLaimCircular S ON S.AttrCode = R.CtgCode AND 
	--((@FromDate  BETWEEN  SchValidFrom AND SchValidTill  ) OR (@ToDate  BETWEEN  SchValidFrom AND SchValidTill)) AND
	ClaimTYpe='TOT Claim'  AND A.CirNo = S.CircularNo 
	GROUP BY DNDocNo,ClmDate,FromDate ,ToDate,BrandCode,CostCenter,R.CtgCode,R.CtgName,ConRefNo,CircularNO,PriceSlot_Code ,Flavor_Code,ChnCode,
	CircularDate,CircularBudget,NrmlAmt
			
	INSERT INTO Cs2Cn_Prk_DNTSClaimBrandWise(DistCode,DNDocRefNO,ClmDate,FromDate,ToDate,ClmType,CirSchCode,BrandCode,CostCentreCde,CirNo,
	CirDate,LaibPer,SecSales,ClmAmt,UploadFlag,ServerDate,ChannelCode,GrpCode,PriceSlotCode,FlavourCode)
	SELECT @DistCode,DNDocNo,ClmDate,FromDate,ToDate,Clmtype,ConRefNo,BrandCode,CostCenter,CircularNO,CircularDate,CircularBudget,NrmlAmt,ClmAmt,
	'N',@ServerDate,ChnCode,CtgCode,PriceSlot_Code ,Flavor_Code	 
	FROM #TotFinal 


	--MANUAL
	SELECT ManualClmDesc,ValidFrom,ValidTo,CircularNo,COUNT(CostCentreCde) CntCC INTO #ManualClaimCostCentre FROM ManualClaimCostCentre(NOLOCK)
	GROUP BY ManualClmDesc,ValidFrom,ValidTo,CircularNo

	INSERT INTO Cs2Cn_Prk_DNTSClaimBrandWise(DistCode,DNDocRefNO,ClmDate,FromDate,ToDate,ClmType,CirSchCode,CostCentreCde,CirNo,CirDate,LaibPer,SecSales,ClmAmt,UploadFlag,ServerDate)
	SELECT DISTINCT @DistCode,DNDocNo,ClmDate,FromDate,Todate ,'Manual Claim','' ConRefNo,CostCentreCde,CirNo,CircularDate,0 CircularBudget,SecSales,ClmAmt/CntCC,'N',@ServerDate  
	FROM DebitNoteTopSheetClaim_Manual A(NOLOCK) INNER JOIN DebitNoteTopSheetClaimHd B(NOLOCK) ON A.DNRefId = B.DNRefId AND B.UPLOAD='N'
	INNER JOIN ManualClaimDescription S(NOLOCK) ON  ((S.ValidFromDate BETWEEN A.FromDate AND A.ToDate) 
	OR (S.ValidToDate  BETWEEN A.FromDate AND ToDate) OR  (A.FromDate BETWEEN S.ValidFromDate AND S.ValidToDate) OR (A.ToDate BETWEEN S.ValidFromDate AND S.ValidToDate )) AND A.SCHDESC = S.MANUALCLMDESC AND A.CIRNO = S.CIRCULARNO
	INNER JOIN ManualClaimCostCentre M(NOLOCK) ON  M.MANUALCLMDESC = S.MANUALCLMDESC AND M.CircularNo = S.CircularNo AND  A.SchDesc = M.MANUALCLMDESC
	AND A.CIRNO = M.CircularNo AND M.ValidFrom = S.ValidFromDate OR M.ValidTo = S.ValidToDate 
	INNER JOIN #ManualClaimCostCentre N(NOLOCK) ON  N.MANUALCLMDESC = S.MANUALCLMDESC AND N.CircularNo = S.CircularNo AND  A.SchDesc = N.MANUALCLMDESC
	AND A.CIRNO = N.CircularNo AND M.ValidFrom = N.ValidFrom  AND M.ValidTo = N.ValidTo AND M.MANUALCLMDESC = N.MANUALCLMDESC AND M.CircularNo = N.CircularNo

	--DIST INCENTIVE
	SELECT DISTINCT DistIRefno,IncFromDate,IncToDate INTO #DistributorIncentiveMaster FROM DistributorIncentiveMaster A   
	INNER JOIN DebitnoteTopSheetClaim_Distinc E(NOLOCK) ON E.RefNo = A.DistIRefno  
	INNER JOIN DebitNoteTopSheetClaimHd H(NOLOCK) ON h.DNRefId = e.DNRefId AND H.Upload ='N' 

	SELECT DistIRefno,SMId,PrdId,SUM(Sales) Sales  
	INTO #DistSales
	FROM (
	SELECT DIM.DistIRefno,SS.SMId,SIP.PrdId,
	ROUND(SUM(((SIP.BaseQty*PBD.PrdBatDetailValue)+((SIP.BaseQty*PBD.PrdBatDetailValue)*(PO.TaxPerc/100)))),2) Sales 
	FROM SalesInvoice SS (NOLOCK) INNER JOIN Salesinvoiceproduct  SIP (NOLOCK) ON SS.SalId=SIP.SalId 
	INNER JOIN ProductBatch PB (NOLOCK) ON PB.PrdId=SIP.PrdId and PB.PrdBatId=SIP.PrdBatId 
	INNER JOIN ProductBatchDetails PBD (NOLOCK) ON PBD.PrdBatId=PB.PrdBatId AND PBD.PrdBatId=SIP.PrdBatId AND DefaultPrice=1 AND PBD.SLNo=3
	INNER JOIN TaxPercentage_DNClaim  PO (NOLOCK) ON PO.SalId=SS.SalId AND PO.SalId=SIP.SalId AND PO.PrdSlno=SIP.SlNo and PO.TransId=1
	AND PO.UsrId = 0 AND PO.tranId = 0
	INNER JOIN #DistributorIncentiveMaster DIM ON SS.SalInvDate BETWEEN DIM.IncFromDate AND DIM.IncToDate
	WHERE SS.Dlvsts>3  
	GROUP  BY DIM.DistIRefno,SS.SMId,SIP.PrdId 
	UNION ALL
	SELECT DIM.DistIRefno,SS.SMId,SIP.PrdId,
	-1*ROUND(SUM(((SIP.BaseQty*PBD.PrdBatDetailValue)+((SIP.BaseQty*PBD.PrdBatDetailValue)*(PO.TaxPerc/100)))),2)  Sales 
	FROM Returnheader SS (NOLOCK) INNER JOIN Returnproduct  SIP (NOLOCK) ON SS.returnid=Sip.returnid 
	INNER JOIN STOCKTYPE ST (NOLOCK) ON ST.StockTypeId=SIP.StockTypeId AND ST.SystemStockType=1
	INNER JOIN ProductBatch PB (NOLOCK) ON PB.PrdId=SIP.PrdId and PB.PrdBatId=SIP.PrdBatId 
	INNER JOIN ProductBatchDetails PBD (NOLOCK) ON PBD.PrdBatId=PB.PrdBatId AND PBD.PrdBatId=SIP.PrdBatId AND DefaultPrice=1  AND PBD.SLNo=3
	INNER JOIN  TaxPercentage_DNClaim PO (NOLOCK) ON PO.SalId=SS.ReturnID AND PO.SalId=SIP.ReturnID AND PO.PrdSlno=SIP.SlNo and PO.TransId=2
	INNER JOIN  #DistributorIncentiveMaster DIM ON SS.ReturnDate BETWEEN DIM.IncFromDate AND DIM.IncToDate
	AND PO.UsrId = 0 AND PO.tranId = 0
	WHERE SS.Status=0  GROUP  BY DIM.DistIRefno,SS.SMId,SIP.PrdId
	) A
	GROUP BY DistIRefno,SMId,PrdId  

	INSERT INTO Cs2Cn_Prk_DNTSClaimBrandWise(DistCode,DNDocRefNO,ClmDate,FromDate,ToDate,ClmType,CirSchCode,BrandCode,CostCentreCde,CirNo,
	CirDate,LaibPer,SecSales,ClmAmt,UploadFlag,ServerDate,PriceSlotCode,FlavourCode)
	SELECT @DistCode,DNDocNo,ClmDate,IncFromDate,IncToDate ,'Distributor Incentive Claim',ConRefNo,BrandCode,CostCenter,CirNo,CircularDate,CircularBudget,TotAchSales,
	SUM(ROUND(((Sales*C.IncPerc)/100),2)),'N',@ServerDate,PriceSlot_Code,Flavor_Code
	FROM #DistSales A(NOLOCK) INNER JOIN TBL_GR_BUILD_PH B(NOLOCK) ON A.Prdid = B.Prdid
	INNER JOIN DistributorIncentiveAchDetail C(NOLOCK) ON C.SMid=A.SMID  AND  A.DistIRefno=C.DistIRefno
	INNER JOIN #DistributorIncentiveMaster D(NOLOCK) ON C.DistIRefno=D.DistIRefno AND    A.DistIRefno=D.DistIRefno
	INNER JOIN DebitnoteTopSheetClaim_Distinc E(NOLOCK) ON E.RefNo = C.DistIRefno AND E.RefNo =D.DistIRefno AND  A.DistIRefno=E.RefNo
	INNER JOIN DebitNoteTopSheetClaimHd H(NOLOCK) ON h.DNRefId = e.DNRefId AND H.Upload ='N'
	INNER JOIN CostCentreDetails CC(NOLOCK) ON CC.BrandCode = B.Brand_Code
	INNER JOIN  #SchemeCLaimCircular S(NOLOCK) ON 
	--((@FromDate  BETWEEN  SchValidFrom AND SchValidTill  ) OR (@ToDate  BETWEEN  SchValidFrom AND SchValidTill)) AND
		S.ClaimType ='Distributor Incentive Claim'  AND E.CirNo = S.CircularNO
	GROUP BY   DNDocNo,ClmDate,ConRefNo,CirNo,CircularDate,CircularBudget,BrandCode,CostCenter,TotAchSales,IncFromDate ,IncToDate ,PriceSlot_Code,Flavor_Code
			
	SELECT DISTINCT  Prdid,SMIRefno,ClmYear,Monthid  INTO  #IncentiveProducts
	FROM (
		SELECT DISTINCT E.Prdid ,B.SMIRefno  AS SMIRefno  FROM SMincentiveProducts  B(NOLOCK)
		INNER JOIN SalesManIncentiveMaster SS(NOLOCK) ON SS.SMIRefno=B.Smirefno 
		INNER JOIN ProductCateGOryValue C (Nolock) ON B.PrdCtgValMainId = C.PrdCtgValMainId 
		INNER JOIN ProductCateGOryValue D (Nolock) ON D.PrdCtgValLinkCode  LIKE Cast(c.PrdCtgValLinkCode as nvarchar(1000)) + '%'
		INNER JOIN Product E  (Nolock) On	D.PrdCtgValMainId = E.PrdCtgValMainId  
		WHERE-- SS.IncMonth= DateName(mm,DATEADD(mm,@Month,-1))   AND Incyear=@Year
			B.ActStatus=1 AND SMIRefStatus = 1
		UNION
		SELECT DISTINCT E.Prdid,SS.SMIRefno  AS SMIRefno  FROM SMincentiveProducts  B(NOLOCK)
		INNER JOIN SalesManIncentiveMaster SS(NOLOCK) ON SS.SMIRefno=B.Smirefno 
		INNER JOIN Product E  (Nolock) On	E.Prdid = B.Prdid
		WHERE-- SS.IncMonth=DateName(mm,DATEADD(mm,@Month,-1))  AND Incyear=@Year
			B.ActStatus=1 AND SMIRefStatus = 1		
	) A	INNER JOIN DebitNoteTopSheetClaim_SMInc B(NOLOCK) ON A.SMIRefno = B.RefNo  
	INNER JOIN DebitNoteTopSheetClaimHd C(NOLOCK) ON B.DNREFID =C.DnREfid AND upload='N'

	SELECT DISTINCT SMIrefno,SMID,Prdid into #SMIncentive1
	FROM (
		SELECT IP.SMIRefno,SS.SMID,SIP.Prdid,Sum(Sip.prdnetamount)  Sales FROM SalesInvoice SS (NOLOCK) INNER JOIN Salesinvoiceproduct  SIP (NOLOCK) 
		ON SS.Salid=Sip.Salid
		INNER JOIN #IncentiveProducts IP (NOLOCK)  ON   IP.Prdid=Sip.prdid 
		WHERE SS.Dlvsts>3 AND DATENAME(MM,(SS.SalInvDate))=DateName(mm,DATEADD(mm,Monthid,-1)) AND Year(SS.Salinvdate)=ClmYear --ILCRSTPAR5199
		GROUP  by SS.SMID,IP.SMIRefno,SIP.Prdid
		UNION ALL
		SELECT IP.SMIrefno,SS.SMID,SIP.Prdid,-Sum(Sip.prdnetamt)  Sales FROM Returnheader SS (NOLOCK)
		INNER JOIN Returnproduct  SIP (NOLOCK) ON SS.returnid=Sip.returnid  and StockTypeId IN (SELECT StockTypeId FROM STOCKTYPE WHERE SystemStockType = 1) 
		INNER JOIN  #IncentiveProducts  IP (NOLOCK)  ON   SIP.Prdid=Sip.prdid   
		WHERE SS.Status=0 AND DATENAME(MM,(SS.Returndate))=DateName(mm,DATEADD(mm,Monthid,-1))  AND Year(SS.Returndate)=ClmYear --ILCRSTPAR5199
		GROUP  by SS.SMID,IP.SMIRefno,SIP.Prdid
	) A
	GROUP BY SMID,SMIRefno,Prdid

			 
	SELECT  distinct A.SMIRefno,BrandCode,PriceSlot_Code,Flavor_Code,CostCenter,A.smid into #CostCentre
	FROM #SMIncentive1 A (NOLOCK)
	INNER JOIN SalesManincentiveDetail S (NOLOCK) ON A.SMIRefno = S.SMIRefno AND A.SMID =S.SMID 
	INNER JOIN DebitNoteTopSheetClaim_SMInc B(NOLOCK) ON A.SMIRefno = B.RefNo AND A.SMId = B.SmID and S.SMIRefno = B.RefNo  AND S.SMId = B.SmID 
	INNER JOIN DebitNoteTopSheetClaimHd C(NOLOCK) ON B.DNREFID =C.DnREfid AND C.UPLOAD='N'
	INNER JOIN TBL_GR_BUILD_PH T(NOLOCK) ON A.Prdid = T.PrdId 
	INNER JOIN CostCentreDetails CC(NOLOCK) ON CC.BrandCode = T.Brand_Code

	SELECT DISTINCT SMIRefno,Smid,count(Flavor_Code) Cnt into #Cnt FROM #CostCentre(NOLOCK) group by  SMIRefno,smid	

	INSERT INTO Cs2Cn_Prk_DNTSClaimBrandWise(DistCode,DNDocRefNO,ClmDate,FromDate,ToDate,ClmType,CirSchCode,BrandCode,CostCentreCde,CirNo,
	CirDate,LaibPer,SecSales,ClmAmt,UploadFlag,ServerDate,PriceSlotCode,FlavourCode)
	SELECT DISTINCT @DistCode,DNDocNo,ClmDate,DATEADD(MONTH, (Monthid)-1,DATEADD(YEAR, ClmYear - 1900, 0)) ,DATEADD(dd, -1, DATEADD(MONTH, Monthid,DATEADD(YEAR, ClmYear - 1900, 0))),
	'SalesMan Incentive Claim',ConRefNo,BrandCode,CostCenter,CirNo,CircularDate,CircularBudget,TotAchSales,
	SUM((B.IncAmount/CAST(Cnt AS NUMERIC(38,6)))),'N',@ServerDate,PriceSlot_Code,Flavor_Code 
	FROM #CostCentre A(NOLOCK) 
	INNER JOIN SalesManincentiveDetail S(NOLOCK) ON A.SMIRefno = S.SMIRefno AND A.SMID =S.SMID 
	INNER JOIN DebitNoteTopSheetClaim_SMInc B(NOLOCK) ON A.SMIRefno = B.RefNo AND A.SMId = B.SmID and S.SMIRefno = B.RefNo  AND S.SMId = B.SmID 
	INNER JOIN DebitNoteTopSheetClaimHd C(NOLOCK) ON B.DNREFID =C.DnREfid AND C.UPLOAD='N'
	INNER JOIN #Cnt N(NOLOCK) ON  A.SMIRefno = N.SMIRefno AND A.SMId = N.SmID and S.SMIRefno = N.SMIRefno  AND S.SMId = N.SmID
	INNER JOIN  #SchemeCLaimCircular SS(NOLOCK) ON 
	--( SS.SchValidFrom BETWEEN @FromDate  AND @ToDate OR SS.SchValidTill BETWEEN @FromDate  AND @ToDate )   AND
	SS.ClaimType ='SalesMan Incentive Claim'
	AND B.CirNo = SS.CircularNO 
	GROUP BY DNDocNo,ClmDate,ConRefNo,BrandCode,CostCenter,CirNo,CircularDate,CircularBudget,TotAchSales ,MonthId ,ClmYear,PriceSlot_Code,Flavor_Code  

	INSERT INTO Cs2Cn_Prk_DNTSClaimBrandWise(DistCode,DNDocRefNO,ClmDate,FromDate,ToDate,ClmType,CirSchCode,BrandCode,CostCentreCde,CirNo,
	CirDate,LaibPer,SecSales,ClmAmt,UploadFlag,ServerDate,ChannelCode,GrpCode,PriceSlotCode,FlavourCode)
	SELECT  @DistCode,DNDocNo,ClmDate,FromDate ,ToDate,'INSTITUTIONAL CLAIM' Clmtype,S.CMPSCHCODE,BrandCode,CostCenter,CircularNO,
	CircularDate,sCHEMEBudget,CurMonth,SUM(T.ClmAmt) ClmAmt,'N',@ServerDate,R1.CtgCode,R.CtgCode,TH.PriceSlot_Code,TH.Flavor_Code 
	FROM DebitNoteTopSheetClaim_InstTarget A(NOLOCK) 
	INNER JOIN DebitNoteTopSheetClaimHd B(NOLOCK) ON A.DNRefId = B.DNRefId AND B.UPLOAD='N' AND SCHTYPE=1
	INNER JOIN RetailerCategory R ON R.CtgName = A.CtgName 
	INNER JOIN RetailerCategory R1 ON R.CtgLinkId = R1.CtgMainId 
	INNER JOIN DebitNoteTopSheetClaim_Inst_PrdWise T(NOLOCK) ON A.DNREFID = T.DNREFID AND B.DNREFID = T.DNREFID AND R.CtgMainId = T.CTGMAINID
	INNER JOIN SchemeMaster S ON S.SchId = T.SCHID
	INNER JOIN TBL_GR_BUILD_PH TH (NOLOCK) ON T.Prdid =TH.PrdiD
	INNER JOIN CostCentreDetails C(NOLOCK) ON C.BrandCode = TH.Brand_Code
	INNER JOIN #SchemeCircularDetails SC ON S.CMPSCHCODE = SC.CMPSCHCODE AND A.CIRNO = SC.CIRCULARNO
	GROUP BY DNDocNo,ClmDate,FromDate ,ToDate,BrandCode,CostCenter,A.CtgName,S.CMPSCHCODE,CircularNO,
	CircularDate,sCHEMEBudget,CurMonth,R1.CtgCode,R.CtgCode,TH.PriceSlot_Code,TH.Flavor_Code 
		 
	
	SELECT C.DNRefId,A.TargetYear,A.TargetMonth,A.InsId,B.ChnId,A.GrpId,RC.CtgCode as GroupCode,RC1.CtgCode As ChannelCode,
	A.BrandCode,A.FlavorCode,A.PriceSlot,SUM(PrdAchievement) AS Sales,SUM(Isnull(ClmAmount,0)) as ClmAmount 
	INTO #ProductLevelAch
	FROM InsTargetDetailsProductLevelAch A 
	INNER JOIN InsTargetHD B ON A.InsId=B.InsId
	INNER JOIN RetailerCategory RC ON RC.CtgMainId = A.GrpId
	INNER JOIN RetailerCategory RC1 ON RC1.CtgMainId = B.ChnId
	INNER JOIN DebitNoteTopSheetClaimHd C ON C.ClmYear=B.TargetYear and C.MonthId=B.TargetMonth
	WHERE C.Upload='N' AND B.Confirm=1
	GROUP BY C.DNRefId,A.TargetYear,A.TargetMonth,A.InsId,B.ChnId,A.GrpId,RC.CtgCode,RC1.CtgCode,
	A.BrandCode,A.FlavorCode,A.PriceSlot -- HAVING SUM(Isnull(ClmAmount,0))>0

	SELECT DISTINCT DNRefId,FromDate,ToDate,CirNo INTO #DebitNoteTopSheetClaim_InstTarget 
	FROM DebitNoteTopSheetClaim_InstTarget A WHERE DNRefId IN (SELECT DNRefId FROM #ProductLevelAch) and SCHTYPE=0
			
	SELECT DNRefId,A.TargetYear,A.TargetMonth,GrpId,SUM(Sales) as Sales INTO #Sales FROM #ProductLevelAch A
	GROUP BY DNRefId,A.TargetYear,A.TargetMonth,GrpId
	
	UPDATE A SET A.Sales=B.Sales FROM #ProductLevelAch A INNER JOIN #Sales B ON A.DNRefId=B.DNRefId 
	AND A.TargetYear=B.TargetYear AND A.TargetMonth=B.TargetMonth AND A.GrpId=B.GrpId
	
	INSERT INTO Cs2Cn_Prk_DNTSClaimBrandWise(DistCode,DNDocRefNO,ClmDate,FromDate,ToDate,ClmType,CirSchCode,BrandCode,CostCentreCde,CirNo,
	CirDate,LaibPer,SecSales,ClmAmt,UploadFlag,ServerDate,ChannelCode,GrpCode,PriceSlotCode,FlavourCode)
	SELECT @DistCode,DNDocNo,ClmDate,FromDate,ToDate,'INSTITUTIONAL CLAIM' Clmtype,SC.ConRefNo,T.BrandCode,CostCenter,CircularNO,
	CircularDate,CirCularBudget,Sales AS Sales,SUM(T.ClmAmount) ClmAmt,'N',@ServerDate,ChannelCode,GroupCode,PriceSlot,FlavorCode 
	FROM #DebitNoteTopSheetClaim_InstTarget A(NOLOCK) 
	INNER JOIN DebitNoteTopSheetClaimHd B(NOLOCK) ON A.DNRefId = B.DNRefId AND B.UPLOAD='N' --AND SCHTYPE=0
	INNER JOIN #ProductLevelAch T(NOLOCK) ON A.DNREFID = T.DNREFID AND B.DNREFID = T.DNREFID 
	INNER JOIN CostCentreDetails C(NOLOCK) ON C.BrandCode = T.BrandCode
	INNER JOIN #SchemeClaimCircular SC ON A.CIRNO = SC.CIRCULARNO  AND ATTRCODE=T.GroupCode 
	GROUP BY DNDocNo,ClmDate,FromDate ,ToDate,T.BrandCode,CostCenter,SC.ConRefNo,CircularNO,
	CircularDate,CirCularBudget,Sales,GroupCode,ChannelCode,PriceSlot,FlavorCode 

END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Cs2Cn_DebitNoteTopSheetClaimHd' AND  TYPE='P')
DROP PROCEDURE Proc_Cs2Cn_DebitNoteTopSheetClaimHd
GO
CREATE PROCEDURE Proc_Cs2Cn_DebitNoteTopSheetClaimHd
(
	@Po_ErrNo   INT OUTPUT,
	@ServerDate DATETIME
)
AS
/****************************************************************************
* PROCEDURE   :  Proc_Cs2Cn_DebitNoteTopSheetClaimHd
* PURPOSE         :  TO UPLOAD SAVED CLAIM DETAILS IN HEADER WISE
* DATE                  :  18-11-2019
* CREATED          :  MOHANA S
* PMS NO           :  CRCRSTPAR0079
*****************************************************************************
16-01-2020	 MOHANA S		BZ	ILCRSTPAR7420		validation for uploaded data
05-05-2020	 MOHANA S		BZ	--				    Validation Removed to upload 
*******************************************************************************/
SET NOCOUNT ON
	BEGIN
	SET @Po_ErrNo=0

	DECLARE @DistCode      AS NVARCHAR(50)

	SELECT @DistCode = DistributorCode FROM Distributor

	DELETE FROM Cs2Cn_Prk_DebitNoteTopSheetClaimHd WHERE UploadFlag ='Y'

	DELETE FROM Cs2Cn_Prk_DebitNoteTopSheetClaimDt WHERE UploadFlag ='Y'

	DELETE FROM Cs2Cn_Prk_DNTSClaimBrandWise WHERE UploadFlag ='Y'

	IF NOT EXISTS (SELECT * FROM DebitNoteTopSheetClaimHd WHERE UPLOAD = 'N')
	BEGIN
	  RETURN
	END

	INSERT INTO Cs2Cn_Prk_DebitNoteTopSheetClaimHd(DistCode,DNDocRefNo,DNDate,ClmYear,ClmMonth,SampAmt,TradeSchAmt,InstTarAmt,
													TOTDiffAmt,ManualClmAmt,DistIncAmt,SMIncAmt,TotalAmt,UploadFlag,ServerDate )
	SELECT DISTINCT @DistCode,DNDocNo,ClmDate,ClmYear ,ClmMonth,SampAmt,TradeSchAmt,InstTarAmt,TOTDiffAmt,ManualClmAmt,DistIncAmt,
	SMIncAmt,TotalAmt,'N',@ServerDate FROM DebitNoteTopSheetClaimHd WHERE UPLOAD = 'N'     
	          
			
	EXEC Proc_Cs2Cn_DebitNoteTopSheetClaimDt  @Po_ErrNo,@ServerDate
			
	EXEC Proc_Cs2Cn_DNTSClaimBrandWise @Po_ErrNo,@ServerDate 

	UPDATE  DebitNoteTopSheetClaimHd SET UPload ='Y',DNStatus = 1 WHERE DNDocNo  IN (SELECT DNDocRefNo FROM Cs2Cn_Prk_DebitNoteTopSheetClaimHd)
	AND UPload = 'N'
		   
	--SELECT DNDocRefNO,SUM(ISNULL(ClmAmt,0)) ClmAmt
	--INTO #Header
	--FROM (
	--SELECT DNDocRefNO,'Sampling Claim' ClmType,SampAmt ClmAmt FROM Cs2Cn_Prk_DebitNoteTopSheetClaimHd  UNION
	--SELECT DNDocRefNO,'Trade Scheme Claim',TradeSchAmt FROM Cs2Cn_Prk_DebitNoteTopSheetClaimHd UNION                
	--SELECT DNDocRefNO,'TOT CLAIM',TOTDiffAmt FROM Cs2Cn_Prk_DebitNoteTopSheetClaimHd UNION
	--SELECT DNDocRefNO,'Manual Claim',ManualClmAmt FROM Cs2Cn_Prk_DebitNoteTopSheetClaimHd     UNION
	--SELECT DNDocRefNO,'Distributor Incentive Claim',DistIncAmt FROM Cs2Cn_Prk_DebitNoteTopSheetClaimHd    UNION
	--SELECT DNDocRefNO,'SalesMan Incentive Claim',SMIncAmt FROM Cs2Cn_Prk_DebitNoteTopSheetClaimHd )A
	--GROUP BY DNDocRefNO


	--SELECT DNDocRefNO,SUM(ISNULL(ClmAmt,0)) ClmAmt INTO #SUMMARY   FROM Cs2Cn_Prk_DebitNoteTopSheetClaimDt
	--WHERE ClmType <> 'Institutional Claim'  GROUP BY  DNDocRefNO
		    
			 
	--SELECT A.DNDocRefNO,SUM(ISNULL(A.CLMAMT-C.clmamt,0)) CLMAMT INTO #CALCULATED  FROM #SUMMARY A             
	--INNER JOIN #Header C ON A.DNDocRefNO = C.DNDocRefNO                       
	--GROUP BY A.DNDocRefNO 

	--SELECT DNDocRefNO,SUM(ISNULL(ClmAmt,0)) ClmAmt INTO #CHECK FROM #CALCULATED GROUP BY DNDocRefNO   
			
	--IF NOT EXISTS (SELECT * FROM Cs2Cn_Prk_DNTSClaimBrandWise)
	--BEGIN
	--	INSERT INTO DebitNoteClaimMisMatch
	--	SELECT DNDocRefNO,0,0,GETDATE() FROM #CHECK
				 
	--	UPDATE DebitNoteTopSheetClaimHd SET UPload ='N',DNStatus = 0 WHERE DNDocNo  IN (SELECT DNDocRefNo FROM Cs2Cn_Prk_DebitNoteTopSheetClaimHd)
	--	DELETE FROM Cs2Cn_Prk_DebitNoteTopSheetClaimHd
	--	DELETE FROM Cs2Cn_Prk_DebitNoteTopSheetClaimDt
	--	DELETE FROM Cs2Cn_Prk_DNTSClaimBrandWise
	--END       
	--IF EXISTS (SELECT * FROM #CHECK WHERE CLMAMT  BETWEEN -5 AND 5)
	--BEGIN
	--	UPDATE  DebitNoteTopSheetClaimHd SET UPload ='Y',DNStatus = 1 WHERE DNDocNo  IN (SELECT DNDocRefNo FROM Cs2Cn_Prk_DebitNoteTopSheetClaimHd)
	--	AND UPload = 'N'
	--END
	--ELSE
	--BEGIN
	--	INSERT INTO DebitNoteClaimMisMatch
	--	SELECT DNDocRefNO,CLMaMT,0,GETDATE() FROM #CHECK WHERE CLMAMT NOT BETWEEN -5 AND 5
					
	--	UPDATE DebitNoteTopSheetClaimHd SET UPload ='N',DNStatus = 0 WHERE DNDocNo  IN (SELECT DNDocRefNo FROM Cs2Cn_Prk_DebitNoteTopSheetClaimHd)
						
	--	DELETE FROM Cs2Cn_Prk_DebitNoteTopSheetClaimHd
	--	DELETE FROM Cs2Cn_Prk_DebitNoteTopSheetClaimDt
	--	DELETE FROM Cs2Cn_Prk_DNTSClaimBrandWise
	--END
			
END
GO
DELETE FROM manualconfiguration wherE Moduleid='AutoBackup_Upload2'
INSERT INTO manualconfiguration 
SELECT 'ALL','AutoBackup_Upload2' ,'AutoBackup_Upload2','Disable S3 Backup Configuration',1,'',0,1
GO
UPDATE A SET A.[Status]=0 FROM AutoBackupConfiguration A WITH (NoLock) where Moduleid ='AUTOBACKUP2'
UPDATE A SET A.[Status]=0 FROM AutoBackupConfiguration A WITH (NoLock) where Moduleid ='AUTOBACKUP3'
UPDATE A SET A.[Status]=0 FROM AutoBackupConfiguration A(NOLOCK) WHERE MODULEID='AUTOBACKUP15'
GO
DELETE FROM manualconfiguration wherE Moduleid='AutoBackup_Upload'
INSERT INTO manualconfiguration 
SELECT 'ALL','AutoBackup_Upload' ,'AutoBackup_Upload','Enable AuotBackup Upload',1,'',0,1
GO
DELETE FROM manualconfiguration WHERE Moduleid='DataBaseHealthCheck1'
INSERT INTO manualconfiguration 
SELECT 'ALL','DataBaseHealthCheck1' ,'DataBaseHealthCheck1','Enable Database Health check in Login and Database Backup Exe',1,'',1,1
GO
DELETE FROM MANUALCONFIGURATION WHERE MODULEID='S3BACKUP1'
INSERT INTO MANUALCONFIGURATION(ProjectName,ModuleId,ModuleName,Description,Status,Condition,ConfigValue,SeqNo)
SELECT 'ALL','S3BACKUP1','S3 BACKUP','DpUpload.exe mandatory check',1,'',0,1
GO
DELETE FROM MANUALCONFIGURATION WHERE MODULEID='S3BACKUP2'
INSERT INTO MANUALCONFIGURATION(ProjectName,ModuleId,ModuleName,Description,Status,Condition,ConfigValue,SeqNo)
SELECT 'ALL','S3BACKUP2','S3 BACKUP','Zip with Password Protection',0,'',0,1
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE name='DataBaseBackupConfiguration' AND XTYPE='U')
CREATE TABLE DataBaseBackupConfiguration
(
	[ModuleId]		NVARCHAR(50),
	[ModuleName]	NVARCHAR(50),
	[Description]	NVARCHAR(100),
	[Status]		TINYINT,
	[Condition]		NVARCHAR(300),
	[ConfigValue]	NUMERIC(18,2),
	[BackupDate]	DATETIME,
	[SeqNo]			INT
)
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE name='DatabaseBackupDetails' AND XTYPE='U')
CREATE TABLE DatabaseBackupDetails
(
	[Slno] [bigint]	 IDENTITY(1,1) NOT NULL,
	[DBBacupDate]	 [datetime] NULL,
	BackupType		 VARCHAR(20),
	[FilePath]		 [varchar](2000) NULL,
	[ZipFileName]	 [varchar](100) NULL,
	[DbName]		 [varchar](200) NULL,
	[DbStatus]		 [tinyint] NULL,
	[HotFixNumber]   [numeric](36, 0) NULL,
	[HFReleasedOn]   [datetime] NULL,
	[HFFixedOn]      [datetime] NULL,
	[UpdaterNumber]  [numeric](36, 0) NULL,
	[USReleasedOn]   [datetime] NULL,
	[USFixedOn]      [datetime] NULL,
	[CSVersionNumber][varchar](100) NULL,
	[SyncVersion]    [varchar](100) NULL,
	[WindowsVersion] [varchar](150) NULL,
	[RAMSize]		 [varchar](200) NULL,
	[ProcSpeed]		 [varchar](50) NULL,
	[IPAddr]		 [varchar](100) NULL,
	[MachineName]	 [varchar](100) NULL,
	[DiskSize]		 [numeric](38, 6) NULL,
	[DiskUsedSpace]  [varchar](1000) NULL,
	[DiskFreeSpace]  [varchar](1000) NULL,
	[ProcesssorName] [varchar](300) NULL,
	[BackupFileCount][int] NULL,
	[Servicepack]    [varchar](500) NULL,
	[UploadFlag]     [tinyint] NULL,
	[ServerUploadFlag][tinyint],
	[FileUploaded]   [Int],
	BakFileName		[VARCHAR](50),
	FilePassword [VARCHAR](50),
	CompressFlag [VARCHAR](50)
)
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.id=B.id 
WHERE A.name='DatabaseBackupDetails' AND B.name='BucketFileDelFlag' AND A.xtype='U')
BEGIN
	ALTER TABLE DatabaseBackupDetails ADD BucketFileDelFlag INT
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.id=B.id 
WHERE A.name='DatabaseBackupDetails' AND B.name='BucketFileDelDate' AND A.xtype='U')
BEGIN
	ALTER TABLE DatabaseBackupDetails ADD BucketFileDelDate DATETIME
END
GO
UPDATE DatabaseBackupDetails SET BucketFileDelFlag=0 WHERE BucketFileDelFlag IS NULL
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='FnToReturnDatabaseHealthCheck' AND XTYPE='FN')
DROP FUNCTION FnToReturnDatabaseHealthCheck
GO
--SELECT DBO.FnToReturnDatabaseHealthCheck(1)
CREATE FUNCTION FnToReturnDatabaseHealthCheck (@REFID INT)
RETURNS INT
/************************
* PROCEDURE		: FnToReturnDatabaseHealthCheck
* PURPOSE		: Return Value from a string
* CREATED		: S.Moorthi
* CREATED DATE	: 2018-11-08
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
* CR NO :ILCRSTJNJ0960
***************************/
AS
BEGIN
DECLARE @ReturnVal AS INT
SET @ReturnVal=0

	IF @REFID=1
	BEGIN
		IF EXISTS(SELECT * FROM manualconfiguration WHERE ProjectName='JNJ' and Moduleid='DataBaseHealthCheck1' 
		AND ConfigValue=2 AND Status=1)
		BEGIN
			SET @ReturnVal=1
		END
	END
	
	IF @REFID=2
	BEGIN
		IF EXISTS(SELECT * FROM manualconfiguration WHERE ProjectName='JNJ' and Moduleid='DataBaseHealthCheck1' 
		AND ConfigValue<>0 AND Status=1)
		BEGIN
			SET @ReturnVal=1
		END
	END
	
RETURN @ReturnVal
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='AutoBackup_Exists' AND XTYPE='U')
DROP TABLE AutoBackup_Exists
GO
CREATE TABLE AutoBackup_Exists
(
	[Back_Id] [numeric](38, 0) IDENTITY(1,1) NOT NULL,
	[Back_Path] [nvarchar](100) NULL,
	[Back_File] [nvarchar](100) NULL,
	[Back_Date] [datetime] NULL
)
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='PROC_FillAutoBackUpConfiguration' AND XTYPE='P')
DROP PROCEDURE PROC_FillAutoBackUpConfiguration
GO
CREATE PROCEDURE PROC_FillAutoBackUpConfiguration
/************************
* PROCEDURE		: PROC_FillAutoBackUpConfiguration
* PURPOSE		: FillAutoBackUpConfiguration
* CREATED		: Karthick
* CREATED DATE	: 2017-12-01
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
* CR NO :CCRSTJNJ0272
***************************/
AS
BEGIN

CREATE TABLE #GETDRIVESIZE
(
	DRIVE	VARCHAR(10),
	SIZE	NUMERIC(36,0)	
)

 CREATE TABLE #ResultSet 
 (
	Directory varchar(200)
 )

DECLARE @Drive AS VARCHAR(10)
DECLARE @Folder AS VARCHAR(50)
DECLARE @Directory AS VARCHAR(200)
DECLARE @Folder1 AS VARCHAR(50)
DECLARE @Directory1 AS VARCHAR(200)
	
	IF NOT EXISTS(SELECT * FROM DataBaseBackupConfiguration(NOLOCK))
	BEGIN

		DECLARE @Path AS NVARCHAR(100)
		SELECT @Path=left(Condition,3) FROM AUTOBACKUPCONFIGURATION WHERE ModuleId='AUTOBACKUP9'
		IF @Path<>''
		BEGIN
		
			SET @Directory=@Path+'AutoBackUp_Differntial\'
			SET @Directory1=@Path+'AutoBackUp_Differntial\Processed\'
		END
		ELSE
		BEGIN
			SET @Folder='AutoBackUp_Differntial\'

		--GET ALL DRIVE SIZE
			INSERT INTO #GETDRIVESIZE
			EXEC MASTER..xp_fixeddrives

			SET @Drive=(SELECT TOP 1 DRIVE+':\' FROM #GETDRIVESIZE ORDER BY SIZE DESC)

		--CHECK FOLDER EXISTS
			 INSERT INTO #ResultSet
			 EXEC master.dbo.xp_subdirs @Drive

			IF NOT EXISTS(SELECT * FROM #ResultSet WHERE Directory='AutoBackUp_Differntial')
			BEGIN
				SET @Directory='MD '+@Drive +@Folder

				EXEC xp_cmdshell @Directory
			END
			
			SET @Directory =@Drive +@Folder

			IF NOT EXISTS(SELECT * FROM #ResultSet WHERE Directory='Processed')
			BEGIN
				SET @Directory1='MD '+@Drive+@Folder +'Processed\'
				--SET @Directory1='MD '+@Drive +'Processed\'

				EXEC xp_cmdshell @Directory1
			END
			
			SET @Directory1 =@Drive+@Folder +'Processed\'
		END
		
		INSERT INTO DataBaseBackupConfiguration(ModuleId,ModuleName,Description,Status,Condition,ConfigValue,BackupDate,SeqNo)
		SELECT 'AUTOBACKUP_DIFF1','AutomaticBackup','Take Compulsary Backup during Login',1,'',0,GETDATE(),1 UNION 
		SELECT 'AUTOBACKUP_DIFF2','AutomaticBackup','Take Compulsary Backup during Logout',1,'',0,GETDATE(),2 UNION
		SELECT 'AUTOBACKUP_DIFF3','AutomaticBackup','Take Full Backup of the database once in',1,'',1,GETDATE()-10,3 UNION
		SELECT 'AUTOBACKUP_DIFF4','AutomaticBackup','Take compulsory differential backup once in ',0,'',1,GETDATE(),4 UNION
		SELECT 'AUTOBACKUP_DIFF5','AutomaticBackup','Take compulsory differential backup once in ',0,'',3,GETDATE(),5 UNION
		SELECT 'AUTOBACKUP_DIFF6','AutomaticBackup','Remove backup files after   ',1,'',15,GETDATE(),6 UNION
		SELECT 'AUTOBACKUP_DIFF7','AutomaticBackup','Alert User if Backup is not taken for more than ',1,'',2,GETDATE(),7 UNION
		SELECT 'AUTOBACKUP_DIFF8','AutomaticBackup','Block CoreStocky if DB is restored',1,'',0,GETDATE(),8 UNION
		SELECT 'AUTOBACKUP_DIFF9','AutomaticBackup','Alert User if DB size Exceeds',1,'',6,GETDATE(),9 UNION
		SELECT 'AUTOBACKUP_DIFF10','AutomaticBackup','Take Backup in the following path',1,@Directory,0,GETDATE(),10 UNION
		SELECT 'AUTOBACKUP_DIFF11','AutomaticBackup','Upload Files To',1,'',0,GETDATE(),11 UNION
		SELECT 'AUTOBACKUP_DIFF12','AutomaticBackup','Check DataBase Health once in',1,'',3,GETDATE(),12 UNION		
		SELECT 'AUTOBACKUP_DIFF13','AutomaticBackup','Clear Temporary tables while taking backup',1,'',0,GETDATE(),13 UNION
		SELECT 'AUTOBACKUP_DIFF14','AutomaticBackup','Compact database while taking backup',1,'',0,GETDATE(),14 UNION
		SELECT 'AUTOBACKUP_DIFF15','AutomaticBackup','Remove backup based on',1,'Count(s)',0,GETDATE(),15 UNION
		SELECT 'AUTOBACKUP_DIFF16','AutomaticBackup','Enter Number of Count(s)',1,'Count(s)',15.00,GETDATE(),16 UNION
		SELECT 'AUTOBACKUP_DIFF17','AutomaticBackup','Block Corestocky if DB Backup is not taken for more than  ',1,'Count(s)',2.00,GETDATE(),17 UNION
		SELECT 'AUTOBACKUP_DIFF18','AutomaticBackup','Move uploaded DB to the path',1,@Directory1,0,GETDATE(),18
	END

END
GO
IF NOT EXISTS(SELECT * FROM DataBaseBackupConfiguration(NOLOCK))
BEGIN
	EXEC PROC_FillAutoBackUpConfiguration
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE name='TempReturnDbDetails' AND XTYPE='U')
DROP TABLE TempReturnDbDetails
GO
CREATE TABLE TempReturnDbDetails
(
	DbName				VARCHAR(200),
	CreatedDate			DATETIME,
	size				NUMERIC(18,2),
	LastFullbackupdate	NVARCHAR(20),
	Health				VARCHAR(50)	
)
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE name='PROC_ReturnDbDetails' AND XTYPE='P')
DROP PROCEDURE PROC_ReturnDbDetails
GO
--exec PROC_ReturnDbDetails 'JNJ'
CREATE PROCEDURE PROC_ReturnDbDetails
(
	@DbName	varchar(100)
)
/************************
* PROCEDURE		: PROC_ReturnDbDetails
* PURPOSE		: ReturnDbDetails
* CREATED		: Karthick
* CREATED DATE	: 2017-12-01
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
* CR NO :CCRSTJNJ0272
***************************/
AS
BEGIN
	 
DECLARE @CreatedDate	AS	DATETIME
DECLARE @size			AS NUMERIC(18,2)	
DECLARE @LastFullbackupdate	AS DATETIME
DECLARE @Health				AS VARCHAR(50)	


CREATE TABLE #DBDETAILS 
(
	name		varchar(200),
	[size]		nvarchar(50),
	owner		varchar(50),
	dbid		int,
	created		datetime,
	status		varchar(4000),
	compat		int
)

	INSERT INTO #DBDETAILS
	EXEC sp_helpdb
	
	SELECT @CreatedDate=created
	,@size=CAST(ltrim(rtrim(REPLACE(size,'MB',''))) AS NUMERIC(18,0)) FROM #DBDETAILS WHERE name=@DbName
	
	SELECT @LastFullbackupdate=dbbacupdate FROM DatabaseBackupDetails WHERE backuptype='FullBackUp'
 	
	DELETE FROM TempReturnDbDetails
	INSERT INTO TempReturnDbDetails(DbName,CreatedDate,size,LastFullbackupdate,Health)
	SELECT @DbName,@CreatedDate,@size/1024,isnull(@LastFullbackupdate,''),'Good'
	
	UPDATE TempReturnDbDetails SET  LastFullbackupdate='' WHERE LastFullbackupdate= 'Jan  1 1900 12:00AM'
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE name='DatabaseHealthCheck' AND XTYPE='U')
CREATE TABLE DatabaseHealthCheck
(
	DatabaseName		NVARCHAR(100),
	DbccCheckdate		DATETIME,
	ERRORS_FOUND		INT,
	ERRORS_REPAIRED		INT,
	Upload				INT,
	ServerUploadFlag	TINYINT	
)
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='GetStringBetween' AND XTYPE='FN')
DROP FUNCTION GetStringBetween
GO
CREATE FUNCTION GetStringBetween (@str varchar(500), @str1 varchar(30), @str2 varchar(30))
RETURNS varchar(200)
/************************
* PROCEDURE		: GetStringBetween
* PURPOSE		: Return Value from a string
* CREATED		: Karthick
* CREATED DATE	: 2017-12-02
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
* CR NO :CCRSTJNJ0272
***************************/
AS
BEGIN
   DECLARE @Result varchar(200)
   DECLARE @p1 int
   DECLARE @p2 int
   SET @p1 = charindex (@str1 , @str ,1)
   SET @p2 = charindex (@str2 , @str ,1)
   RETURN rtrim(ltrim(substring (@str, @p1 + len(@str1) , @p2 - len(@str1) - @p1  )))
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='PROC_DBCC_CheckDB' AND XTYPE='P')
DROP PROCEDURE PROC_DBCC_CheckDB
GO
---exec PROC_DBCC_CheckDB 'JNJCorrupt',0
CREATE PROCEDURE PROC_DBCC_CheckDB
(
	@Database Nvarchar(100),
	@Error INT OUTPUT
)
/************************
* PROCEDURE		: PROC_DBCC_CheckDB
* PURPOSE		: Database Health Check
* CREATED		: Karthick
* CREATED DATE	: 2017-12-02
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
* CR NO :CCRSTJNJ0272
***************************/
AS
BEGIN
 SET NOCOUNT ON

	BEGIN TRY
	 SET @Error=0
	--dbcc checkdb with no_infomsgs
	--CREATE TABLE #CheckDB 
	--(
	--	 [Error] int, [Level] int, [State] int,  
	--	 [MessageText] varchar(7000), [RepairLevel] int, [Status] int, 
	--	 [DbId] int, [ObjectID] int, [IndexId] int, [PartitionId] int, 
	--	 [AllocUnitId] int, [File] int, [Page] int, [Slot] int,  
	--	 [RefFile] int, [RefPage] int, [RefSlot] int, [Allocation] int
	-- )
	  

	--INSERT INTO #CheckDB
	--EXEC ('dbcc checkdb('''+ @Database +''') with tableresults')

	--EXEC ('dbcc checkdb(''['+ @Database +']'')')
	
	EXEC ('dbcc checkdb('''+ @Database +''') with no_infomsgs')

	--SELECT [MessageText] FROM #CheckDB 	WHERE [Error] = 8989 

	CREATE TABLE #tempLogRes 
	  (LogDate datetime,
	   ProcessInfo varchar(100),
	   TextLine varchar(MAX))

	INSERT #tempLogRes EXEC sp_readerrorlog 0, 1, 'DBCC CHECKDB'

	INSERT INTO DatabaseHealthCheck(DatabaseName,DbccCheckdate,ERRORS_FOUND,ERRORS_REPAIRED,Upload,ServerUploadFlag)	
	SELECT TOP 1     
	  dbo.GetStringBetween (TextLine ,'(',')' ) AS CHECKED_DB, LogDate,
	  dbo.GetStringBetween (TextLine ,'found','errors' ) AS ERRORS_FOUND,
	  dbo.GetStringBetween (TextLine ,'repaired','errors.' ) AS ERRORS_REPAIRED,0,0
	FROM 
	  #tempLogRes 
	WHERE 
	  TextLine like '%DBCC CHECKDB%' 
	  AND LogDate > GETDATE() - 1
	ORDER BY LogDate DESC 

	IF EXISTS(SELECT ERRORS_FOUND from(
	 SELECT TOP 1 LogDate,
	  dbo.GetStringBetween (TextLine ,'found','errors' ) AS ERRORS_FOUND 
	FROM 
	  #tempLogRes 
	WHERE 
	  TextLine like '%DBCC CHECKDB%' 
	  AND LogDate > GETDATE() - 1
	ORDER BY LogDate DESC ) A WHERE ERRORS_FOUND>0)
	BEGIN
		SET @Error=1		
	END
	--SELECT @Error,'T'
	END TRY
	BEGIN CATCH
		--SELECT @Error,'S'
		
		INSERT INTO DatabaseHealthCheck(DatabaseName,DbccCheckdate,ERRORS_FOUND,ERRORS_REPAIRED,Upload,ServerUploadFlag)
		SELECT @Database,GETDATE(),1,0,0,0
		
		SET @Error=1	
	END CATCH
 RETURN 
   SET NOCOUNT OFF
 
END
GO
-----upload script
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE name='Prk_DataBaseBackupConfiguration' AND XTYPE='U')
DROP TABLE Prk_DataBaseBackupConfiguration
GO
CREATE TABLE Prk_DataBaseBackupConfiguration
(
	SlNo				INT IDENTITY(1,1),
	DistributorCode		VARCHAR(50),
	DistributorName		VARCHAR(100),
	CompanyName			VARCHAR(100),
	[ModuleId]			VARCHAR(50),
	[ModuleName]		VARCHAR(50),
	[Description]		VARCHAR(100),
	[Status]			TINYINT,
	[Condition]			NVARCHAR(300),
	[ConfigValue]		NUMERIC(18,2),
	UploadFlag			VARCHAR(1),
	UploadDate			DATETIME	
)
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE name='DB_Backup_ErrorLog' AND XTYPE='U')
BEGIN
CREATE TABLE DB_Backup_ErrorLog
(
	sFileName		NVARCHAR(200),
	sFileSize		NUMERIC(36,0),
	CheckSum_Val	NVARCHAR(200),
	ErrDescription  VARCHAR(MAX),
	ErrorTime		DATETIME,
	UploadStatus	INT,
	UploadFlag		VARCHAR(1),
	UploadDate		DATETIME
)
END
GO
DELETE FROM Tbl_UploadIntegration_QS WHERE PROCESSNAME='DB_BackupDetails'
INSERT INTO Tbl_UploadIntegration_QS(SequenceNo,ProcessName,FolderName,PrkTableName,CreatedDate)
SELECT 82,'DB_BackupDetails','DB_BackupDetails','Cs2Cn_Prk_DatabaseBackupDetails',GETDATE()
GO
DELETE FROM CUSTOMUPDOWNLOAD  WHERE MODULE='DB_BackupDetails' and UpDownload='Upload'
INSERT INTO CustomUpDownload(SlNo,SeqNo,Module,Screen,ExportFnName,ImportProcName,ParkTable,ValidateProcName,TranType,UpDownload,MandatoryFile)
SELECT 183,1,'DB_BackupDetails','DB_BackupDetails','Proc_Cs2Cn_DB_Details','','Cs2Cn_Prk_DatabaseBackupDetails','','Master','Upload',1 
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE name='Cs2Cn_Prk_DatabaseBackupDetails' AND XTYPE='U')
DROP TABLE Cs2Cn_Prk_DatabaseBackupDetails
GO
CREATE TABLE Cs2Cn_Prk_DatabaseBackupDetails
(
	[Slno]			 [bigint] IDENTITY(1,1) NOT NULL,
	[DistCode]		 VARCHAR(50), 
	[DbBackupId]	 INT,
	[DBBacupDate]	 DATETIME NULL,
	BackupType		 VARCHAR(20),
	[FilePath]		 VARCHAR(MAX),
	[ZipFileName]	 VARCHAR(100),
	[DbName]		 VARCHAR(200),
	[DbStatus]		 TINYINT,
	[HotFixNumber]   NUMERIC(36, 0),
	[HFReleasedOn]   DATETIME,
	[HFFixedOn]      DATETIME,
	[UpdaterNumber]  NUMERIC(36, 0),
	[USReleasedOn]   DATETIME,
	[USFixedOn]      DATETIME,
	[CSVersionNumber]VARCHAR(100),
	[SyncVersion]    VARCHAR(100),
	[WindowsVersion] VARCHAR(150),
	[RAMSize]		 VARCHAR(200),
	[ProcSpeed]		 VARCHAR(50),
	[IPAddr]		 VARCHAR(100),
	[MachineName]	 VARCHAR(100),
	[DiskSize]		 NUMERIC(38, 6),
	[DiskUsedSpace]  VARCHAR(1000),
	[DiskFreeSpace]  VARCHAR(1000),
	[ProcesssorName] VARCHAR(300),
	[BackupFileCount]INT,
	[Servicepack]    VARCHAR(500),
	[UploadFlag]	 VARCHAR(2),
	[SyncId]		 NUMERIC(38,6),
	[ServerDate]	 DATETIME,
	[AWSUploadStatus] NVARCHAR(200),
	[AWSUploadDate] DATETIME
)
GO
IF EXISTS(SELECT * fROM SYSOBJECTS WHERE name='Proc_Cs2Cn_DB_Details' AND xtype='P')
DROP PROCEDURE Proc_Cs2Cn_DB_Details
GO
--EXEC Proc_Cs2Cn_DB_Details 0,'2020-05-01' 
CREATE PROCEDURE Proc_Cs2Cn_DB_Details
(
	@Po_ErrNo INT OUTPUT,
	@ServerDate DATETIME 
)
AS
/*********************************
* PROCEDURE		: Proc_Cs2Cn_DB_Details
* PURPOSE		: To Extract_DB_Details to console
* CREATED BY	: karthick.kj
* CREATED DATE	: 2018-03-01
* NOTE			:
* MODIFIED
**************************************************************************************************************************************************************************************
* VERSION    |  DATE      |	  PERSON			  | USER STORY ID  |  CR/BZ |  REMARKS                      | CODE REVIEW BY     | REVIEW DATE
**************************************************************************************************************************************************************************************
  443		   25/05/2020	S.Moorthi					CRCRSTPAR0090	 CR	   Database Backup Details Upload
*********************************/
SET NOCOUNT ON
BEGIN	
    SET @Po_ErrNo= 0
	DECLARE @DistCode	As nVarchar(50)
	SELECT @DistCode = DistributorCode FROM Distributor	(NOLOCK)	
	DELETE FROM Cs2Cn_Prk_DatabaseBackupDetails WHERE UploadFlag='Y'

	INSERT INTO Cs2Cn_Prk_DatabaseBackupDetails(
	DistCode,DbBackupId,DBBacupDate,BackupType,FilePath,ZipFileName,DbName,DbStatus,HotFixNumber,HFReleasedOn,HFFixedOn,
	UpdaterNumber,USReleasedOn,USFixedOn,CSVersionNumber,SyncVersion,WindowsVersion,RAMSize,ProcSpeed,IPAddr,MachineName,DiskSize,
	DiskUsedSpace,DiskFreeSpace,ProcesssorName,BackupFileCount,Servicepack,UploadFlag,ServerDate,AWSUploadStatus,AWSUploadDate)	
	SELECT @DistCode,Slno,DBBacupDate,BackupType,FilePath,ZipFileName,DbName,DbStatus,HotFixNumber,HFReleasedOn,HFFixedOn,
		UpdaterNumber,USReleasedOn,USFixedOn,CSVersionNumber,SyncVersion,WindowsVersion,RAMSize,ProcSpeed,IPAddr,MachineName,DiskSize,
		DiskUsedSpace,DiskFreeSpace,ProcesssorName,BackupFileCount,Servicepack,'N' as UploadFlag,@ServerDate as ServerDate,
		ErrDescription,UploadDate 
	FROM DatabaseBackupDetails A
	INNER JOIN DB_Backup_ErrorLog B ON A.ZipFileName=B.sFileName  
	WHERE A.UploadFlag=0 and FileUploaded=1 
	
	--AND ZipFileName IN (SELECT sFileName FROM DB_Backup_ErrorLog WHERE ErrDescription='Successfully uploaded')
	
	
	UPDATE D SET Uploadflag=1 FROM DatabaseBackupDetails D 
	INNER JOIN Cs2Cn_Prk_DatabaseBackupDetails C ON D.Slno=C.DbBackupId and D.ZipFileName=C.ZipFileName
		
END
GO
DELETE FROM MANUALCONFIGURATION WHERE MODULEID='S3BACKUP3'
INSERT INTO MANUALCONFIGURATION(ProjectName,ModuleId,ModuleName,Description,Status,Condition,ConfigValue,SeqNo)
SELECT 'ALL','S3BACKUP3','S3 BACKUP','AWS file maintain count to delete',1,'',2,1
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE name='DB_Backup_AWSDeleteLog' AND XTYPE='U')
BEGIN
CREATE TABLE DB_Backup_AWSDeleteLog
(
	sFileName		NVARCHAR(200),
	ErrDescription  VARCHAR(MAX),
	DeleteTime		DATETIME,
	Upload			INT
)
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.id=B.id 
WHERE A.name='DB_Backup_AWSDeleteLog' AND B.name='Upload' AND A.xtype='U')
BEGIN
	ALTER TABLE DB_Backup_AWSDeleteLog ADD Upload INT
END
GO
UPDATE DB_Backup_AWSDeleteLog SET Upload=0 WHERE Upload IS NULL
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_BackupUploadDailyOnceFlag' AND XTYPE='P')
DROP PROCEDURE Proc_BackupUploadDailyOnceFlag
GO
CREATE PROCEDURE Proc_BackupUploadDailyOnceFlag(@Pi_ErrNo INT OUTPUT)
/************************
* PROCEDURE		: Proc_OneTimeUpload
* PURPOSE		: Proc_OneTimeUpload
* CREATED		: S.Moorthi
* CREATED DATE	: 2020-07-13
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
* CR NO :CCRSTJNJ0272
***************************/
AS
BEGIN
SET @Pi_ErrNo=0
	IF EXISTS(SELECT * FROM DatabaseBackupDetails WHERE FileUploaded=0)
	BEGIN
	
		SELECT COnvert(VARCHAR(10),DBBacupDate,121) AS BackUpDate,MAX(Slno) AS Slno INTO #TempToFlag 
		FROM DatabaseBackupDetails WHERE FileUploaded=0 GROUP BY COnvert(VARCHAR(10),DBBacupDate,121)
		
		SELECT DISTINCT COnvert(VARCHAR(10),DBBacupDate,121) AS BackUpDate INTO #Temp1 FROM 
		DatabaseBackupDetails WHERE FileUploaded=1 and ServerUploadFlag<>2
		

		IF EXISTS(SELECT * FROM #Temp1)
		BEGIN
			UPDATE  A SET  A.FileUploaded=1,ServerUploadFlag=1 from DatabaseBackupDetails A 
			INNER JOIN #Temp1 B ON  B.BackUpDate=COnvert(VARCHAR(10),A.DBBacupDate,121)
			WHERE ServerUploadFlag=0 and 
			ZipFileName not in (SELECT sFileName FROM DB_Backup_ErrorLog where ErrDescription='Successfully uploaded')
		END
		
		IF EXISTS(SELECT * FROM #TempToFlag)
		BEGIN
			UPDATE B SET B.FileUploaded=1,ServerUploadFlag=1 FROM #TempToFlag A 
			INNER JOIN DatabaseBackupDetails B ON A.BackUpDate=COnvert(VARCHAR(10),B.DBBacupDate,121)
			WHERE FileUploaded=0 and ServerUploadFlag=0 AND A.Slno<>B.Slno
		END
		
	--	IF EXISTS(SELECT *  FROM MANUALCONFIGURATION WHERE MODULEID='S3BACKUP3' AND Status=1 AND ISNULL(ConfigValue,0)>1)
	--	BEGIN
	--		DECLARE @Cnt AS INT
	--		DECLARE @TotCnt AS INT
	--		SELECT @Cnt=ISNULL(ConfigValue,0)  FROM MANUALCONFIGURATION WHERE MODULEID='S3BACKUP3' AND Status=1 
	--		IF @Cnt<>0
	--		BEGIN
				
	--			SELECT ROW_NUMBER() OVER(ORDER BY SLNO) AS RowNo,B.Slno,B.ZipFileName INTO #TempToDelete FROM DB_Backup_ErrorLog A 
	--			INNER JOIN DatabaseBackupDetails B ON A.sFileName=B.ZipFileName
	--			WHERE ErrDescription='Successfully uploaded'
	--			AND ZipFileName NOT IN (SELECT sFileName FROM DB_Backup_AWSDeleteLog WHERE ErrDescription='Delete Successfuly')
	--			ORDER BY Slno DESC
				
	--			SELECT @TotCnt=MAX(ISNULL(RowNo,0)) FROM #TempToDelete
				
	--			--SET @Cnt=@Cnt-1
				
	--			IF EXISTS(SELECT * FROM #TempToDelete)
	--			BEGIN
	--				IF @TotCnt>=@Cnt
	--				BEGIN
						
	--					UPDATE A SET A.BucketFileDelFlag=2 FROM DatabaseBackupDetails A 
	--					INNER JOIN #TempToDelete B ON A.ZipFileName=b.ZipFileName  and A.Slno=B.Slno
	--					WHERE RowNo<=@TotCnt-@Cnt AND A.ZipFileName NOT IN (SELECT sFileName FROM DB_Backup_AWSDeleteLog  WHERE ErrDescription='Delete Successfuly')
	--					 and A.ZipFileName in (SELECT sFileName FROM DB_Backup_ErrorLog where ErrDescription='Successfully uploaded')
						
	--				END
	--			END
	--		END
		
	--	END
	END
	
RETURN
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_AWSBackupDeleteFlag' AND XTYPE='P')
DROP PROCEDURE Proc_AWSBackupDeleteFlag
GO
CREATE PROCEDURE Proc_AWSBackupDeleteFlag(@Pi_ErrNo INT OUTPUT)
/************************
* PROCEDURE		: Proc_AWSBackupDeleteFlag
* PURPOSE		: Database Backup Delete based on configuration
* CREATED		: S.Moorthi
* CREATED DATE	: 2020-07-31
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
* CR NO :CCRSTJNJ0272
***************************/
AS
BEGIN
SET @Pi_ErrNo=0
		
		IF EXISTS(SELECT *  FROM MANUALCONFIGURATION WHERE MODULEID='S3BACKUP3' AND Status=1 AND ISNULL(ConfigValue,0)>1)
		BEGIN
		
			DECLARE @Cnt AS INT
			DECLARE @TotCnt AS INT
			SELECT @Cnt=ISNULL(ConfigValue,0)  FROM MANUALCONFIGURATION WHERE MODULEID='S3BACKUP3' AND Status=1 
			
			IF @Cnt<>0
			BEGIN
				
				SELECT ROW_NUMBER() OVER(ORDER BY SLNO) AS RowNo,B.Slno,B.ZipFileName INTO #TempToDelete FROM DB_Backup_ErrorLog A 
				INNER JOIN DatabaseBackupDetails B ON A.sFileName=B.ZipFileName
				WHERE ErrDescription='Successfully uploaded'
				AND ZipFileName NOT IN (SELECT sFileName FROM DB_Backup_AWSDeleteLog WHERE ErrDescription='Delete Successfuly')
				ORDER BY Slno DESC
				
				SELECT @TotCnt=MAX(ISNULL(RowNo,0)) FROM #TempToDelete
				
				--SET @Cnt=@Cnt-1
				
				IF EXISTS(SELECT * FROM #TempToDelete)
				BEGIN
					IF @TotCnt>@Cnt
					BEGIN
						
						UPDATE A SET A.BucketFileDelFlag=2 FROM DatabaseBackupDetails A 
						INNER JOIN #TempToDelete B ON A.ZipFileName=b.ZipFileName  and A.Slno=B.Slno
						WHERE RowNo<=@TotCnt-@Cnt AND A.ZipFileName NOT IN (SELECT sFileName FROM DB_Backup_AWSDeleteLog  WHERE ErrDescription='Delete Successfuly')
						 and A.ZipFileName in (SELECT sFileName FROM DB_Backup_ErrorLog where ErrDescription='Successfully uploaded')
						
					END
				END
			END
		
		END
	
RETURN
END
GO
DELETE FROM Tbl_UploadIntegration_QS WHERE PROCESSNAME='DB_Backup Delete Details'
DELETE FROM Tbl_UploadIntegration_QS WHERE PROCESSNAME='DB_BackupDeleteDetails'
INSERT INTO Tbl_UploadIntegration_QS(SequenceNo,ProcessName,FolderName,PrkTableName,CreatedDate)
SELECT 83,'DB_BackupDeleteDetails','DB_BackupDeleteDetails','Cs2Cn_Prk_DatabaseBackupDeleteDetails',GETDATE()
GO
DELETE FROM CUSTOMUPDOWNLOAD  WHERE MODULE='DB_Backup Delete Details' and UpDownload='Upload'
DELETE FROM CUSTOMUPDOWNLOAD  WHERE MODULE='DB_BackupDeleteDetails' and UpDownload='Upload'
INSERT INTO CustomUpDownload(SlNo,SeqNo,Module,Screen,ExportFnName,ImportProcName,ParkTable,ValidateProcName,TranType,UpDownload,MandatoryFile)
SELECT 184,1,'DB_BackupDeleteDetails','DB_BackupDeleteDetails','Proc_Cs2Cn_DatabaseBackupDeleteDetails','','Cs2Cn_Prk_DatabaseBackupDeleteDetails','','Master','Upload',1 
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE name='Cs2Cn_Prk_DatabaseBackupDeleteDetails' AND XTYPE='U')
DROP TABLE Cs2Cn_Prk_DatabaseBackupDeleteDetails
GO
CREATE TABLE Cs2Cn_Prk_DatabaseBackupDeleteDetails
(
	[Slno]			 [bigint] IDENTITY(1,1) NOT NULL,
	[DistCode]		 VARCHAR(50), 
	[ZipFileName]	 VARCHAR(100),
	[UploadDateTime] Datetime,
	[DeleteDateTime] Datetime,
	[ErrDescription] VARCHAR(500),
	[UploadFlag]	 VARCHAR(2),
	[SyncId]		 NUMERIC(38,6),
	[ServerDate]	 DATETIME
)
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Cs2Cn_DatabaseBackupDeleteDetails' AND XTYPE='P')
DROP PROCEDURE Proc_Cs2Cn_DatabaseBackupDeleteDetails
GO
--EXEC Proc_Cs2Cn_DatabaseBackupDeleteDetails 0,'2020-05-01' 
CREATE PROCEDURE Proc_Cs2Cn_DatabaseBackupDeleteDetails
(
	@Po_ErrNo INT OUTPUT,
	@ServerDate DATETIME 
)
AS
/*********************************
* PROCEDURE		: Proc_Cs2Cn_DB_Details
* PURPOSE		: To Extract_DB_Details to console
* CREATED BY	: S.Moorthi
* CREATED DATE	: 23/07/2020
* NOTE			:
* MODIFIED
**************************************************************************************************************************************************************************************
* VERSION    |  DATE      |	  PERSON			  | USER STORY ID  |  CR/BZ |  REMARKS                      | CODE REVIEW BY     | REVIEW DATE
**************************************************************************************************************************************************************************************
  443		   23/07/2020	S.Moorthi					PARCS202100048	 CR		Aws database Backup delete in server based on configuration
*********************************/
SET NOCOUNT ON
BEGIN	
    SET @Po_ErrNo= 0
	DECLARE @DistCode	As nVarchar(50)
	SELECT @DistCode = DistributorCode FROM Distributor	(NOLOCK)	
	DELETE FROM Cs2Cn_Prk_DatabaseBackupDetails WHERE UploadFlag='Y'
	
	UPDATE DB_Backup_AWSDeleteLog SET Upload=0 where Upload IS NULL
	
	INSERT INTO Cs2Cn_Prk_DatabaseBackupDeleteDetails(DistCode,ZipFileName,UploadDateTime,DeleteDateTime,
	ErrDescription,UploadFlag,ServerDate)	
	SELECT @DistCode,ZipFileName,DBBacupDate,DeleteTime,B.ErrDescription,'N' as UploadFlag,@ServerDate as ServerDate 
	FROM DatabaseBackupDetails A INNER JOIN DB_Backup_AWSDeleteLog B ON A.ZipFileName=B.sFileName 
	WHERE FileUploaded=1 AND BucketFileDelFlag=1 AND B.Upload=0	
	
	UPDATE A SET Upload=1 FROM DB_Backup_AWSDeleteLog A 
	INNER JOIN Cs2Cn_Prk_DatabaseBackupDeleteDetails B ON A.sFileName=B.ZipFileName AND B.ErrDescription=A.ErrDescription
		
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Server_Credentials' AND XTYPE='U')
CREATE TABLE Server_Credentials
(
	ServerName			NVARCHAR(200) PRIMARY KEY,
	Bucket_Name			NVARCHAR(200),
	Region				NVARCHAR(200),
	sKey				NVARCHAR(300),
	SecretKey			NVARCHAR(300),
	Authid				INT,
	Authdate			DATETIME
)
GO
--IF NOT EXISTS(SELECT '1' FROM Server_Credentials(NOLOCK))
--BEGIN
--	INSERT INTO Server_Credentials
--	SELECT 'Amazon-S3','cs-dbbackup','ap-south-1','AKIAJBKTKANTEU6TJJ6A','3CgxgjK0xqEuQvBc/Tuuq3hS4Umdlx/Q/BiB5cTF',1,GETDATE()
--END
--GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE name='Fn_AutoBackupReturnMoveOldFiles' and XTYPE='TF')
DROP FUNCTION Fn_AutoBackupReturnMoveOldFiles
GO
--SELECT * FROM Fn_AutoBackupReturnMoveOldFiles()
CREATE FUNCTION Fn_AutoBackupReturnMoveOldFiles()
RETURNS @ReturnMoveOldFiles TABLE
(
FromLocation	VARCHAR(300),
ToLocation		VARCHAR(300),
ZipFileName		VARCHAR(100)
)
AS
BEGIN

	DECLARE @Tolocation AS varchar(100)
	
	SELECT @Tolocation=Condition FROM DataBaseBackupConfiguration WHERE ModuleId='AUTOBACKUP_DIFF18'
	
	IF @Tolocation<>''
	BEGIN

		INSERT INTO @ReturnMoveOldFiles	
		SELECT FilePath+ZipFileName,@Tolocation+ZipFileName,ZipFileName FROM DatabaseBackupDetails WHERE FileUploaded=1 and ServerUploadFlag=1
	
	END 

RETURN
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE name='Proc_GetZipFiles' AND xtype='P')
DROP PROCEDURE Proc_GetZipFiles
GO
-- Proc_GetZipFiles 1
CREATE proc Proc_GetZipFiles(
@piTypeid int = 0,
@piSlno int = 0,
@piBakFileName Varchar(500) = '',
@piZipFileName Varchar(500) = '',
@piZipFilePath Varchar(500) = '',
@piZipPass Varchar(50) = ''
)
as
Begin
	
	if @piTypeid = 1
	Begin
		Declare @Distcode Varchar(Max)
		Select top 1 @Distcode = DistributorCode from Distributor(Nolock)
		select Condition FolderPath from DataBaseBackupConfiguration a Where Moduleid ='AUTOBACKUP_DIFF10'
		select @Distcode Distcode,Slno,BakFileName from DatabaseBackupDetails(Nolock)a Where CompressFlag = 'N'
	End
	
	if @piTypeid = 2
	Begin
		Update a set  
			CompressFlag = 'Y',
			FilePath = @piZipFilePath,
			ZipFileName = @piZipFileName,
			FilePassword = @piZipPass
		from DatabaseBackupDetails(Nolock) a
		Where CompressFlag = 'N'
		and BakFileName = @piBakFileName
		and Slno = @piSlno
		
	End
	if @piTypeid = 3
	Begin
		Update a set  
			CompressFlag = 'Er'
		from DatabaseBackupDetails(Nolock) a
		Where CompressFlag = 'N'
		and BakFileName = @piBakFileName
		and Slno = @piSlno
	End
End
GO
IF EXISTS(SELECT 'X' FROM SYSOBJECTS WHERE XTYPE='TF' AND name='Fn_ReturnDatabaseSize')
DROP FUNCTION Fn_ReturnDatabaseSize
GO
CREATE FUNCTION [Fn_ReturnDatabaseSize](@DBNAME AS VARCHAR(100),@TypeId AS TINYINT)
RETURNS @Tbl_DBSize TABLE
(
	DbSize NUMERIC(10,5),
	Status TinyInt,
	Usermessages Varchar(3000),
	DriveName Varchar(10),
	DriveFlag TinyInt,
	Condition TinyInt
)
AS
/****************************************************************************
* PROCEDURE	:  Fn_ReturnDatabaseSize
* PURPOSE	:  To return database size
* DATE		:  22-05-2020
* CREATED	:  Murugan.R
* PMS NO	:  AMLCS202100021
*******************************************************************************/
BEGIN
		DECLARE @DbSize NUMERIC(10,5)
		DECLARE @ConfigValue NUMERIC(10,0)
		DECLARE @Condition NUMERIC(10,0)
		DECLARE @Drive AS Varchar(10)
		DECLARE @Edition AS Sql_variant
		DECLARE @MaxBackupDate DATETIME
		DECLARE @NoOfDays INT
		
		DECLARE @S3Backup AS INT
		
		IF EXISTS(SELECT * FROM DataBaseBackupConfiguration (NOLOCK) WHERE ModuleId='AUTOBACKUP_DIFF1' AND Status=1)
		BEGIN
			SET @S3Backup=1
		END
		
		SELECT @Edition= SERVERPROPERTY ('edition')
			
		
		SELECT @DbSize=(SUM(mf.size) * 8 / 1024) / 1024.0000 
		FROM sys.master_files mf
		INNER JOIN sys.databases d ON d.database_id = mf.database_id
		WHERE d.database_id > 4  and D.name=@DBNAME
		GROUP BY d.NAME
		ORDER BY d.NAME
		
		
		IF @TypeId=1
		BEGIN
				IF (@Edition<>('Express Edition'))
				BEGIN	
					INSERT INTO @Tbl_DBSize(DbSize,Status,Usermessages,DriveName,DriveFlag,Condition)
					SELECT @DbSize,0,'','',0,0				
					RETURN
				END
		
				IF EXISTS(SELECT Status,Condition,ConfigValue FROM ManualConfiguration (NOLOCK) WHERE ModuleId='DatabaseSize' and ISNULL(Status,0)=1)
				BEGIN
					SELECT @ConfigValue=ConfigValue,@Condition=Condition FROM ManualConfiguration (NOLOCK) WHERE ModuleId='DatabaseSize' and Status=1
					IF CAST(ISNULL(@ConfigValue,0) AS NUMERIC(10,0))< ISNULL(@DbSize,0)
					BEGIN
						--Condition 1-Alert and Stop, 0-Only Alert						
						INSERT INTO @Tbl_DBSize(DbSize,Status,Usermessages,DriveName,DriveFlag,Condition)
						SELECT @DbSize,1,'Alert! Your database size has been exceeded.Please contact customer support to reduce the size and secure your data',''
						,0,ISNULL(@Condition,0)
						RETURN						
					END
				END						
		END
		IF 	@TypeId = 2
		BEGIN
			IF EXISTS(SELECT Status,Condition,ConfigValue FROM ManualConfiguration (NOLOCK) WHERE ModuleId='AutoBackupDriveSpace' and ISNULL(Status,0)=1)
			BEGIN
				SELECT @ConfigValue=ConfigValue,@Condition=Condition FROM ManualConfiguration (NOLOCK) WHERE ModuleId='AutoBackupDriveSpace' and Status=1
				
				IF @S3Backup=0
				BEGIN
					SELECT @Drive=SUBSTRING(ISNULL(Condition,''),1,CHARINDEX(':',ISNULL(Condition,''),1)) 
					FROM AutoBackupConfiguration WHERE ModuleId='AUTOBACKUP9' and ISNULL(Status,0)=1
					IF LEN(@Drive)=2--Drive letter checking
					BEGIN						
						INSERT INTO @Tbl_DBSize(DbSize,Status,Usermessages,DriveName,DriveFlag,Condition)
						SELECT @DbSize,1,Condition,@Drive,1,ISNULL(@Condition,0)
						FROM AutoBackupConfiguration WHERE ModuleId='AUTOBACKUP9' and ISNULL(Status,0)=1
						RETURN					
					END
					ELSE
					BEGIN
						INSERT INTO @Tbl_DBSize(DbSize,Status,Usermessages,DriveName,DriveFlag,Condition)
						SELECT @DbSize,1,'Alert! The Auto back path not configured in your system, Please contact customer support for further assistant',
						@Drive,2,ISNULL(@Condition,0)
						FROM AutoBackupConfiguration WHERE ModuleId='AUTOBACKUP9' and ISNULL(Status,0)=1
						RETURN	
					END
				END			
				ELSE
				BEGIN
					SELECT @Drive=SUBSTRING(ISNULL(Condition,''),1,CHARINDEX(':',ISNULL(Condition,''),1)) 
					FROM DataBaseBackupConfiguration WHERE ModuleId='AUTOBACKUP_DIFF10' and ISNULL(Status,0)=1
					IF LEN(@Drive)=2--Drive letter checking
					BEGIN						
						INSERT INTO @Tbl_DBSize(DbSize,Status,Usermessages,DriveName,DriveFlag,Condition)
						SELECT @DbSize,1,Condition,@Drive,1,ISNULL(@Condition,0)
						FROM DataBaseBackupConfiguration WHERE ModuleId='AUTOBACKUP_DIFF10' and ISNULL(Status,0)=1
						RETURN					
					END
					ELSE
					BEGIN
						INSERT INTO @Tbl_DBSize(DbSize,Status,Usermessages,DriveName,DriveFlag,Condition)
						SELECT @DbSize,1,'Alert! The Auto back path not configured in your system, Please contact customer support for further assistant',
						@Drive,2,ISNULL(@Condition,0)
						FROM DataBaseBackupConfiguration WHERE ModuleId='AUTOBACKUP_DIFF10' and ISNULL(Status,0)=1
						RETURN	
					END
				END
			END
		END
		IF @TypeId = 3
		BEGIN			
			IF EXISTS(SELECT Status,Condition,ConfigValue FROM ManualConfiguration (NOLOCK) WHERE ModuleId='AutoBackupDayCount' and ISNULL(Status,0)=1)
			BEGIN
				IF @S3Backup=0
				BEGIN				
					IF EXISTS(SELECT 'X' FROM DbBackupDt (NOLOCK))
					BEGIN
						SELECT @ConfigValue=ConfigValue,@Condition=Condition FROM ManualConfiguration (NOLOCK) WHERE ModuleId='AutoBackupDayCount' and Status=1					
						SELECT @MaxBackupDate =Max(DbBacupDate) FROM DbBackupDt (NOLOCK) WHERE DbStatus=1	
						SET @MaxBackupDate=ISNULL(@MaxBackupDate,CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121))	
						IF DATEDIFF(Day,CONVERT(DATETIME,CONVERT(VARCHAR(10),@MaxBackupDate,121),121),CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121))>ISNULL(@ConfigValue,0)
						BEGIN
							SET @NoOfDays=DATEDIFF(Day,CONVERT(DATETIME,CONVERT(VARCHAR(10),@MaxBackupDate,121),121),CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121))
							INSERT INTO @Tbl_DBSize(DbSize,Status,Usermessages,DriveName,DriveFlag,Condition)
							SELECT 0,1,'Alert! Database backup has not been taken for the past '+CAST(ISNULL(@NoOfDays,0) as Varchar(5))+' Days.Please take up the backup immediately to secure your data.','',0,ISNULL(@Condition,0)
							RETURN
						END					
					END					
				END
				ELSE
				BEGIN
					IF EXISTS(SELECT 'X' FROM DatabaseBackupDetails (NOLOCK))
					BEGIN
						SELECT @ConfigValue=ConfigValue,@Condition=Condition FROM ManualConfiguration (NOLOCK) WHERE ModuleId='AutoBackupDayCount' and Status=1					
						SELECT @MaxBackupDate =Max(DBBacupDate) FROM DatabaseBackupDetails (NOLOCK) --WHERE DbStatus=1	
						SET @MaxBackupDate=ISNULL(@MaxBackupDate,CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121))	
						IF DATEDIFF(Day,CONVERT(DATETIME,CONVERT(VARCHAR(10),@MaxBackupDate,121),121),CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121))>ISNULL(@ConfigValue,0)
						BEGIN
							SET @NoOfDays=DATEDIFF(Day,CONVERT(DATETIME,CONVERT(VARCHAR(10),@MaxBackupDate,121),121),CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121))
							INSERT INTO @Tbl_DBSize(DbSize,Status,Usermessages,DriveName,DriveFlag,Condition)
							SELECT 0,1,'Alert! Database backup has not been taken for the past '+CAST(ISNULL(@NoOfDays,0) as Varchar(5))+' Days.Please take up the backup immediately to secure your data.','',0,ISNULL(@Condition,0)
							RETURN
						END					
					END					
				END
			END	
		END
		INSERT INTO @Tbl_DBSize(DbSize,Status,Usermessages,DriveName,DriveFlag,Condition)
		SELECT @DbSize,0,'','',0,0
RETURN 
END
GO
DELETE FROM UPDATERLOG WHERE FixId in (20121011,20121030,20150317)
GO
IF NOT EXISTS(SELECT * FROM Tbl_Generic_Reports WHERE RptName='Database Backup Details')
BEGIN

	DECLARE @RptId AS INT
	SET @RptId=0
	SELECT @RptId=ISNULL(MAX(RptId),0)+1 FROM Tbl_Generic_Reports

	INSERT INTO Tbl_Generic_Reports(RptId,RptName,SPName,Instructions,DrillDown)
	SELECT @RptId,'Database Backup Details','Proc_GR_DatabaseBackupDetails','Database Backup Details','Not Available'

	INSERT INTO Tbl_Generic_Reports_Filters(RptId,FilterId,FilterCaption,ParamName,rptname)
	SELECT @RptId,1,'Not Applicable','Proc_GR_DatabaseBackupDetails_Values','Database Backup Details' UNION ALL
	SELECT @RptId,2,'Not Applicable','Proc_GR_DatabaseBackupDetails_Values','Database Backup Details'  UNION ALL
	SELECT @RptId,3,'Not Applicable','Proc_GR_DatabaseBackupDetails_Values','Database Backup Details'  UNION ALL
	SELECT @RptId,4,'Not Applicable','Proc_GR_DatabaseBackupDetails_Values','Database Backup Details'  UNION ALL
	SELECT @RptId,5,'Not Applicable','Proc_GR_DatabaseBackupDetails_Values','Database Backup Details'  UNION ALL
	SELECT @RptId,6,'Not Applicable','Proc_GR_DatabaseBackupDetails_Values','Database Backup Details'

END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='P' AND NAME='Proc_GR_DatabaseBackupDetails_Values')
DROP PROCEDURE Proc_GR_DatabaseBackupDetails_Values
GO
--EXEC Proc_GR_DatabaseBackupDetails_Values 'JC Year','202'
CREATE PROCEDURE [Proc_GR_DatabaseBackupDetails_Values]
(
		@FILTERCAPTION  NVARCHAR(100),
		@TEXTLIKE  NVARCHAR(100)
)
/*********************************
* PROCEDURE	: Proc_GR_DatabaseBackupDetails_Values
* PURPOSE	: Filter the Ins Target
* CREATED	: S.Moorthi
* CREATED DATE	: 18/05/2020
* MODIFIED
* DATE				 AUTHOR				CR\BUG	UserStorageID		DESCRIPTION
------------------------------------------------------------------------------------------------
* 16/05/2020		 S.MOORTHI			  CR	PARCS202100019		Target achievement should be calculated in the Core Stocky
*********************************/
AS
BEGIN
		SET @TEXTLIKE='%'+ISNULL(@TEXTLIKE,'')+'%'
		 
END
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'Proc_GR_DatabaseBackupDetails') AND type in (N'P', N'PC'))
DROP PROCEDURE Proc_GR_DatabaseBackupDetails
GO
--Exec Proc_GR_DatabaseBackupDetails 'Program Master','2020-04-01','2020-12-02','2020','May','','','',''
CREATE PROCEDURE Proc_GR_DatabaseBackupDetails
(    
  @Pi_RptName  NVARCHAR(100),    
  @Pi_FromDate DATETIME,    
  @Pi_ToDate   DATETIME,    
  @Pi_Filter1  NVARCHAR(100),    
  @Pi_Filter2  NVARCHAR(100),
  @Pi_Filter3  NVARCHAR(100),
  @Pi_Filter4  NVARCHAR(100),
  @Pi_Filter5  NVARCHAR(100),
  @Pi_Filter6  NVARCHAR(100)
)
/*********************************
* PROCEDURE	: Proc_GR_DatabaseBackupDetails
* PURPOSE	: Institution Target Report
* CREATED	: S.Moorthi
* CREATED DATE	: 18/05/2020
* MODIFIED
* DATE				 AUTHOR				CR\BUG	UserStorageID		DESCRIPTION
------------------------------------------------------------------------------------------------
* 16/05/2020		 S.MOORTHI			  CR	PARCS202100019		Target achievement should be calculated in the Core Stocky
*********************************/    
AS     
BEGIN    
	SET @Pi_FILTER1='%'+ISNULL(@Pi_FILTER1,'')+'%'            
	SET @Pi_FILTER2='%'+ISNULL(@Pi_FILTER2,'')+'%'
	SET @Pi_FILTER3='%'+ISNULL(@Pi_FILTER3,'')+'%'             
	SET @Pi_FILTER4='%'+ISNULL(@Pi_FILTER4,'')+'%' 
	SET @Pi_FILTER5='%'+ISNULL(@Pi_FILTER5,'')+'%'      
	SET @Pi_FILTER6='%'+ISNULL(@Pi_FILTER6,'')+'%' 
	
	SELECT DISTINCT 'AWS Data Base Backup Details',DBBacupDate,BackupType,FilePath,ZipFileName,DbName,HotFixNumber,HFReleasedOn,HFFixedOn,
		UpdaterNumber,USReleasedOn,USFixedOn,CSVersionNumber,SyncVersion,B.UploadDate [File Upload Date],
		B.ErrDescription [Upload Description],C.DeleteTime [File Delete Date]		 
	FROM DatabaseBackupDetails A 
	INNER JOIN DB_Backup_ErrorLog B ON A.ZipFileName=B.sFileName 
	LEFT OUTER JOIN DB_Backup_AWSDeleteLog C ON C.sFileName=B.sFileName AND C.sFileName=A.ZipFileName 
	WHERE CONVERT(VARCHAR(10),DBBacupDate,121) BETWEEN @Pi_FromDate AND @Pi_ToDate

END
GO
---Added by Deepan
IF EXISTS(SELECT 'X' FROM Counters WHERE  TabName = 'Retailer'  AND FldName = 'RtrCode' and CurrValue<3000)
BEGIN
	UPDATE Counters SET Prefix='RET' ,CurrValue=3000 WHERE TabName = 'Retailer'  AND FldName = 'RtrCode'
END
GO
UPDATE Configuration SET Status=1   where ModuleId='RET26'
GO
DELETE FROM HotSearchEditorHd WHERE FormId=820
INSERT INTO HotSearchEditorHd(FormId,FormName,ControlName,SltString,RemainsltString)
SELECT 820,'Retailer Master','Reason','select','SELECT ReasonId,ReasonCode,Description FROM ReasonMaster (NOLOCK) WHERE Retailer = 1'  
GO
DELETE FROM HotSearchEditorDt WHERE FormId=820
INSERT INTO HotSearchEditorDt(Slno,FormId,FieldName,AliasName,SrchFieldNm,Colwidth,SortedType,HotSearchName,TransId)
SELECT 1,820,'Reason','Code','ReasonCode','1500',0,'HotSch-79-2000-26',79
UNION ALL
SELECT 2,820,'Reason','Description','Description','3000',0,'HotSch-79-2000-27',79
GO
DELETE FROM CustomCaptions WHERE TransId=79 and CtrlId=2000 and SubCtrlId IN(26,27)
INSERT INTO CustomCaptions(TransId,CtrlId,SubCtrlId,CtrlName,Caption,PnlMsg,MsgBox,LngId,Availability,LastModBy,LastModDate,
AuthId,AuthDate,DefaultCaption,DefaultPnlMsg,DefaultMsgBox,Visibility,Enabled)
SELECT 79,2000,26,'HotSch-79-2000-26','ReasonCode','','',1,1,1,GETDATE(),1,GETDATE(),'ReasonCode','','',1,1
UNION ALL
SELECT 79,2000,27,'HotSch-79-2000-27','Description','','',1,1,1,GETDATE(),1,GETDATE(),'Description','','',1,1
GO
DELETE FROM CustomCaptions WHERE TransId=79 and CtrlId=100060 and SubCtrlId IN(0)
INSERT INTO CustomCaptions(TransId,CtrlId,SubCtrlId,CtrlName,Caption,PnlMsg,MsgBox,LngId,Availability,LastModBy,LastModDate,
AuthId,AuthDate,DefaultCaption,DefaultPnlMsg,DefaultMsgBox,Visibility,Enabled)
SELECT 79,100060,0,'fxtReason','Reason','','',1,1,1,GETDATE(),1,GETDATE(),'Reason','','',1,1
GO
DELETE FROM CustomCaptions WHERE TransId=79 and CtrlId=100061 and SubCtrlId IN(0)
INSERT INTO CustomCaptions(TransId,CtrlId,SubCtrlId,CtrlName,Caption,PnlMsg,MsgBox,LngId,Availability,LastModBy,LastModDate,
AuthId,AuthDate,DefaultCaption,DefaultPnlMsg,DefaultMsgBox,Visibility,Enabled)
SELECT 79,100061,0,'fxtRtrLandLine','RtrLandLine','','',1,1,1,GETDATE(),1,GETDATE(),'RtrLandLine','','',1,1
GO
IF EXISTS(SELECT 'X' FROM SYSOBJECTS WHERE NAME='Proc_ValidateRetailerMaster' AND XTYPE='P') 
DROP PROCEDURE Proc_ValidateRetailerMaster
GO
/*
BEGIN TRANSACTION
Exec Proc_ValidateRetailerMaster 0
--SELECT * FROM Retailer
--SELECT * FROM ErrorLog
ROLLBACK TRANSACTION
*/
CREATE PROCEDURE [Proc_ValidateRetailerMaster]
(
	@Po_ErrNo INT OUTPUT
)
AS
/*********************************
* PROCEDURE		: Proc_ValidateRetailerMaster
* PURPOSE		: To Insert and Update records  from xml file in the Table Retailer
* CREATED		: MarySubashini.S
* CREATED DATE	: 13/09/2007
* MODIFIED
  * DATE         AUTHOR				CR/BZ	   USER STORY ID	DESCRIPTION                         
*****************************************************************************************************
  2013/10/10   Sathishkumar V		CR								Junk Characters Removed  
  10/05/2018   S.Moorthi			CR         CRCRSTPAR0001		Retailer Approval process - Manual
  24-06-2019   S.Mohana				CR		   CRCRSTPAR0064		Include validation procedure 
  26/06/2019   S.Moorthi			CR		  CRCRSTPAR0071			Salesman and Route master access level changes in user login
  19/07/2020   Murugan				CR		  PARCS202100043		RetailerCode Auto Generate
*****************************************************************************/ 
SET NOCOUNT ON
BEGIN
	DECLARE @RetailerCode AS NVARCHAR(100)
	DECLARE @RetailerName AS NVARCHAR(100)
	DECLARE	@Address1 AS NVARCHAR(100)
	DECLARE	@Address2 AS NVARCHAR(100)
	DECLARE	@Address3 AS NVARCHAR(100)
	DECLARE	@PinCode AS NVARCHAR(100)
	DECLARE	@PhoneNo AS NVARCHAR(100)
	DECLARE	@EmailId AS NVARCHAR(100)
	DECLARE	@KeyAccount AS NVARCHAR(100)
	DECLARE	@CoverageMode AS NVARCHAR(100)
	DECLARE	@RegistrationDate AS DATETIME
	DECLARE	@DayOff	AS NVARCHAR(100)
	DECLARE	@Status	AS NVARCHAR(100)
	DECLARE	@Taxable AS NVARCHAR(100)
	DECLARE	@TaxType AS NVARCHAR(100)
	DECLARE	@TINNumber AS NVARCHAR(100)
	DECLARE @CSTNumber AS NVARCHAR(100)
	DECLARE	@TaxGroup AS NVARCHAR(100)
	DECLARE	@CreditBills AS NVARCHAR(100)
	DECLARE	@CreditLimit AS NVARCHAR(100)
	DECLARE	@CreditDays AS NVARCHAR(100)
	DECLARE	@CashDiscountPercentage AS NVARCHAR(100)
	DECLARE	@CashDiscountCondition AS NVARCHAR(100)
	DECLARE	@CashDiscountLimitValue AS NVARCHAR(100)
	DECLARE	@LicenseNumber AS NVARCHAR(100)
	DECLARE	@LicNumberExDate AS NVARCHAR(10)
	DECLARE	@DrugLicNumber AS NVARCHAR(100)
	DECLARE	@DrugLicExDate AS NVARCHAR(10)
	DECLARE	@PestLicNumber	AS NVARCHAR(100)
	DECLARE	@PestLicExDate AS NVARCHAR(10)
	DECLARE	@GeographyHierarchyValue AS NVARCHAR(100)
	DECLARE	@DeliveryRoute	AS NVARCHAR(100)
	DECLARE	@ResidencePhoneNo AS NVARCHAR(100)
	DECLARE	@OfficePhoneNo 	AS NVARCHAR(100)
	DECLARE	@DepositAmount 	AS NVARCHAR(100)
	DECLARE	@VillageCode 	AS NVARCHAR(100)
	DECLARE	@PotentialClassCode AS NVARCHAR(100)
	DECLARE	@RetailerType AS NVARCHAR(100)
	DECLARE	@RetailerFrequency AS NVARCHAR(100)
	DECLARE	@RtrCrDaysAlert AS NVARCHAR(100)
	DECLARE	@RtrCrBillAlert AS NVARCHAR(100)
	DECLARE	@RtrCrLimitAlert AS NVARCHAR(100)
	DECLARE @GeoMainId AS INT
	DECLARE @RMId AS INT
	DECLARE @VillageId AS INT
	DECLARE @RtrId AS INT
	DECLARE @TaxGroupId AS INT
	DECLARE @RtrClassId AS INT
	DECLARE @Taction AS INT
	DECLARE @Tabname AS NVARCHAR(100)
	DECLARE @CntTabname AS NVARCHAR(100)
	DECLARE @Fldname AS NVARCHAR(100)
	DECLARE @ErrDesc AS NVARCHAR(1000)
	DECLARE @sSql AS NVARCHAR(4000)
	DECLARE @CoaId AS INT
	DECLARE @AcCode AS NVARCHAR(1000)
	DECLARE @CmpRtrCode AS NVARCHAR(200)	
	
	--RtrCode Auto Generate--PARCS202100043
	DECLARE @AutoRtrCode AS NVARCHAR(200)
	DECLARE @RtrCodeUserInput AS NVARCHAR(200)
	DECLARE @AutoRtrCodeConfig AS TINYINT
	SET @AutoRtrCodeConfig=0
	IF EXISTS(SELECT 'X' FROM Configuration (NOLOCK) where ModuleId='RET26' and Status=1)
	BEGIN
		SET @AutoRtrCodeConfig=1
	END
	--Till Here--PARCS202100043
	
	EXEC Proc_Validate_ETLRetailerDetails --added by Mohana 
	SET @CntTabname='Retailer'
	SET @Fldname='RtrId'
	SET @Tabname = 'ETL_Prk_Retailer'
	SET @Taction=0
	SET @Po_ErrNo=0
	SET @VillageId=0
	DECLARE Cur_Retailer CURSOR
	FOR SELECT dbo.Fn_Removejunk(ISNULL([Retailer Code],'')),dbo.Fn_Removejunk(ISNULL([Retailer Name],'')),dbo.Fn_Removejunk(ISNULL([Address1],'')),
		dbo.Fn_Removejunk(ISNULL([Address2],'')),dbo.Fn_Removejunk(ISNULL([Address3],'')),
		ISNULL([Pin Code],'0'),ISNULL([Phone No],'0'),dbo.Fn_Removejunk(ISNULL(EmailId,'')),ISNULL([Key Account],''),
		ISNULL([Coverage Mode],''),CAST([Registration Date] AS DATETIME) AS [Registration Date],ISNULL([Day Off],''),
		ISNULL([Status],''),ISNULL([Taxable],''),ISNULL([Tax Type],''),ISNULL([TIN Number],''),
		ISNULL([CST Number],''),ISNULL([Tax Group],''),ISNULL([Credit Bills],'0'),ISNULL([Credit Limit],'0'),
		ISNULL([Credit Days],'0'),ISNULL([Cash Discount Percentage],'0'),ISNULL([Cash Discount Condition],''),
		ISNULL([Cash Discount Limit Value],'0'),ISNULL([License Number],''),
		ISNULL([License Number Expiry Date],NULL),
		ISNULL([Drug License Number],''),ISNULL([Drug License Number Expiry Date],NULL),
		ISNULL([Pesticide License Number],''),ISNULL([Pesticide License Number Expiry Date],NULL),
		ISNULL([Geography Hierarchy Value],''),ISNULL([Delivery Route Code],''),ISNULL([Village Code],''),
		ISNULL([Residence Phone No],''),ISNULL([Office Phone No],''),ISNULL([Deposit Amount],'0'),
		ISNULL([Potential Class Code],''),
		ISNULL([Retailer Type],'') ,
		ISNULL([Retailer Frequency],''),ISNULL([Credit Days Alert],'') ,
		ISNULL([Credit Bills Alert],'') ,ISNULL([Credit Limit Alert],'')
	FROM ETL_Prk_Retailer WITH(NOLOCK) ORDER BY [Retailer Code]
	OPEN Cur_Retailer
	FETCH NEXT FROM Cur_Retailer INTO @RetailerCode,@RetailerName,@Address1,@Address2,@Address3,@PinCode,@PhoneNo,@EmailId,@KeyAccount,@CoverageMode,@RegistrationDate,@DayOff,
	@Status,@Taxable,@TaxType,@TINNumber,@CSTNumber,@TaxGroup,@CreditBills,@CreditLimit,@CreditDays,
	@CashDiscountPercentage,@CashDiscountCondition,@CashDiscountLimitValue,@LicenseNumber,
	@LicNumberExDate,@DrugLicNumber,@DrugLicExDate,@PestLicNumber,@PestLicExDate,@GeographyHierarchyValue,
	@DeliveryRoute,@VillageCode,@ResidencePhoneNo,@OfficePhoneNo,@DepositAmount,@PotentialClassCode,
	@RetailerType,@RetailerFrequency,@RtrCrDaysAlert,@RtrCrBillAlert,@RtrCrLimitAlert
	WHILE @@FETCH_STATUS=0		
	BEGIN
		
		SET @RtrId=0
		
		---Start--PARCS202100043
		SET @RtrCodeUserInput=''
		SET @AutoRtrCode=''		
		SET @RtrCodeUserInput=@RetailerCode
		
		IF (@AutoRtrCodeConfig=1)
		BEGIN		
			SELECT  @AutoRtrCode=CASE Len(CurrValue+1)  
			WHEN 1 THEN Prefix + '0000' + Cast(Isnull(CurrValue,0) + 1 AS Varchar)
			WHEN 2 THEN Prefix + '000' + Cast(Isnull(CurrValue,0) + 1 AS Varchar) 
			WHEN 3 THEN Prefix + '00' + Cast(Isnull(CurrValue,0) + 1  AS Varchar) 
			WHEN 4 THEN Prefix + '0' + Cast(Isnull(CurrValue,0) + 1  AS Varchar) 
			WHEN 5 THEN Prefix + Cast(Isnull(CurrValue,0) + 1 AS Varchar) END
			FROM Counters (NOLOCK) WHERE TabName = 'Retailer'  AND FldName = 'RtrCode'		
						
			IF LEN(ISNULL(@AutoRtrCode,''))>0
			BEGIN
				SET @RetailerCode=@AutoRtrCode				
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Auto Retailer Code not generated '  		
				INSERT INTO Errorlog VALUES (6,@Tabname,'RetailerCode',@ErrDesc)
				IF (SELECT CURSOR_STATUS('global','Cur_Retailer')) >= -1
				BEGIN
					DEALLOCATE Cur_Retailer
				END
				RETURN
			END	
			
			IF EXISTS(SELECT 'X' FROM Retailer (NOLOCK) WHERE RtrCode=@RetailerCode)
			BEGIN
				SET @Po_ErrNo=1 
				SET @Taction=0
				SET @ErrDesc = 'Auto generate retailer code already exists,Increase counters value ' +@AutoRtrCode 		
				INSERT INTO Errorlog VALUES (6,@Tabname,'RetailerCode',@ErrDesc)			
				IF (SELECT CURSOR_STATUS('global','Cur_Retailer')) >= -1
				BEGIN
					DEALLOCATE Cur_Retailer
				END					
				RETURN
			END
							
		END
		--END --PARCS202100043
		IF NOT EXISTS  (SELECT * FROM Geography WHERE GeoCode = @GeographyHierarchyValue )
  		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Geogrpahy Code: ' + @GeographyHierarchyValue + ' is not available'  		
			INSERT INTO Errorlog VALUES (1,@Tabname,'GeographyHierarchyValue',@ErrDesc)
		END
		ELSE
		BEGIN
			SELECT @GeoMainId =GeoMainId FROM Geography WHERE GeoCode = @GeographyHierarchyValue
		END
		IF NOT EXISTS  (SELECT * FROM RouteMaster WHERE RMCode = @DeliveryRoute AND RMSRouteType=2 )
  		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Route Code ' + @DeliveryRoute + ' is not available'  		
			INSERT INTO Errorlog VALUES (2,@Tabname,'DeliveryRoute',@ErrDesc)
		END
		ELSE
		BEGIN		
			SELECT @RMId =RMId FROM RouteMaster WHERE RMCode = @DeliveryRoute
		END
		IF LTRIM(RTRIM(@PotentialClassCode)) <> ''
		BEGIN
			IF NOT EXISTS  (SELECT * FROM RetailerPotentialClass WHERE PotentialClassCode = @PotentialClassCode )
	  		BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Potential Class Code ' + @PotentialClassCode + ' is not available'  		
				INSERT INTO Errorlog VALUES (3,@Tabname,'PotentialClassCode',@ErrDesc)
			END
			ELSE
			BEGIN
				SELECT @RtrClassId =RtrClassId FROM RetailerPotentialClass WHERE PotentialClassCode = @PotentialClassCode
			END
		END
		SELECT @TaxGroupId = 0
		IF LTRIM(RTRIM(@TaxGroup)) <> ''
		BEGIN
			IF NOT EXISTS  (SELECT * FROM TaxGroupSetting WHERE RtrGroup = @TaxGroup)
	  		BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Retailer Tax Group Code ' + @TaxGroup + ' is not available'  		
				INSERT INTO Errorlog VALUES (4,@Tabname,'TaxGroup',@ErrDesc)
			END
			ELSE
			BEGIN
				SELECT @TaxGroupId =TaxGroupId FROM TaxGroupSetting WHERE RtrGroup = @TaxGroup
			END
		END
		IF LTRIM(RTRIM(@VillageCode)) <> ''
		BEGIN
			IF NOT EXISTS  (SELECT * FROM RouteVillage WHERE VillageCode = @VillageCode)
	  		BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Village Code ' + @VillageCode + ' is not available'  		
				INSERT INTO Errorlog VALUES (5,@Tabname,'VillageCode',@ErrDesc)
			END
			ELSE
			BEGIN
				SELECT @VillageId =VillageId FROM RouteVillage WHERE VillageCode = @VillageCode
			END
		END
		IF (LTRIM(RTRIM(@RetailerCode))<>'' AND LTRIM(RTRIM(@RtrCodeUserInput))<>'')
		BEGIN
			IF EXISTS  (SELECT * FROM Retailer WHERE 
			(RtrCode = @RetailerCode OR RtrCodeUserInput=@RtrCodeUserInput
				OR RtrCode =@RtrCodeUserInput
				))
			BEGIN
				SET @Taction=2
				SELECT @RtrId=RtrId from Retailer WHERE 
				(RtrCode = @RetailerCode OR RtrCodeUserInput=@RtrCodeUserInput
				OR RtrCode =@RtrCodeUserInput)
			END
			ELSE
			BEGIN
				SET @Taction=1
			END
		END
		ELSE
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Retailer Code should not be empty '  		
			INSERT INTO Errorlog VALUES (6,@Tabname,'RetailerCode',@ErrDesc)
		END
		
			
		IF LTRIM(RTRIM(@RetailerName))=''
		BEGIN
			SET @Po_ErrNo=1	
			SET @Taction=0
			SET @ErrDesc = 'Retailer Name should not be empty'		
			INSERT INTO Errorlog VALUES (7,@Tabname,'RetailerName',@ErrDesc)
		END	
		IF LTRIM(RTRIM(@Address1))=''
		BEGIN
			SET @Po_ErrNo=1	
			SET @Taction=0
			SET @ErrDesc = 'Retailer Address  should not be empty'		
			INSERT INTO Errorlog VALUES (8,@Tabname,'Address',@ErrDesc)
		END
		IF LEN(@PinCode)<>0
		BEGIN
			IF ISNUMERIC(@PinCode)=0
			BEGIN
				SET @Po_ErrNo=1	
				SET @Taction=0
				SET @ErrDesc = 'PinCode is not in correct format'		
				INSERT INTO Errorlog VALUES (9,@Tabname,'PinCode',@ErrDesc)
			END	
		END					
				
		IF LTRIM(RTRIM(@KeyAccount))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'KeyAccount should not be empty'		
			INSERT INTO Errorlog VALUES (10,@Tabname,'KeyAccount',@ErrDesc)
		END
		ELSE
		BEGIN
			IF LTRIM(RTRIM(@KeyAccount))='Yes' OR LTRIM(RTRIM(@KeyAccount))='No'
			BEGIN
				IF @Po_ErrNo=0
				BEGIN
					SET @Po_ErrNo=0	
				END
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Key Account Type '+@KeyAccount+ ' is not available'		
				INSERT INTO Errorlog VALUES (11,@Tabname,'KeyAccount',@ErrDesc)
			END
		END
		IF LTRIM(RTRIM(@CoverageMode))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Coverage Mode should not be empty'		
			INSERT INTO Errorlog VALUES (12,@Tabname,'CoverageMode',@ErrDesc)
		END
		ELSE
			BEGIN
			IF LTRIM(RTRIM(@CoverageMode))='Order Booking' OR LTRIM(RTRIM(@CoverageMode))='Van Sales' OR LTRIM(RTRIM(@CoverageMode))='Counter Sales'
			BEGIN
				IF @Po_ErrNo=0
				BEGIN
					SET @Po_ErrNo=0	
				END	
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Coverage Mode Type '+@CoverageMode+ ' does not exists'		
				INSERT INTO Errorlog VALUES (13,@Tabname,'CoverageMode',@ErrDesc)
			END
		END
		
		IF LTRIM(RTRIM(@RegistrationDate))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Registration Date should not be empty'		
			INSERT INTO Errorlog VALUES (14,@Tabname,'RegistrationDate',@ErrDesc)
		END
		ELSE
		BEGIN
			IF ISDATE(@RegistrationDate)=0
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Registration Date '+@RegistrationDate+ ' not in date format'		
				INSERT INTO Errorlog VALUES (15,@Tabname,'RegistrationDate',@ErrDesc)
			END
			ELSE
			BEGIN
				IF @RegistrationDate > (CONVERT(NVARCHAR(11),GETDATE(),121))
				BEGIN
					SET @Po_ErrNo=1		
					SET @Taction=0
					SET @ErrDesc = 'Invalid Registration Date'		
					INSERT INTO Errorlog VALUES (16,@Tabname,'RegistrationDate',@ErrDesc)
				END
			END
		END
		IF LTRIM(RTRIM(@DayOff))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Day Off should not be empty'		
			INSERT INTO Errorlog VALUES (17,@Tabname,'DayOff',@ErrDesc)
		END
		ELSE
		BEGIN
			IF LTRIM(RTRIM(@DayOff))='Sunday' OR LTRIM(RTRIM(@DayOff))='Monday' OR LTRIM(RTRIM(@DayOff))='Tuesday' OR
			LTRIM(RTRIM(@DayOff))='Wednesday' OR LTRIM(RTRIM(@DayOff))='Thursday' OR LTRIM(RTRIM(@DayOff))='Friday' OR
			LTRIM(RTRIM(@DayOff))='Saturday'
			BEGIN
				IF @Po_ErrNo=0
				BEGIN
					SET @Po_ErrNo=0	
				END	
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Day Off Type '+@DayOff+ ' is not available'		
				INSERT INTO Errorlog VALUES (18,@Tabname,'DayOff',@ErrDesc)
			END
		END
		IF LTRIM(RTRIM(@Status))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Status should not be empty'		
			INSERT INTO Errorlog VALUES (19,@Tabname,'Status',@ErrDesc)
		END
		ELSE
		BEGIN
			IF LTRIM(RTRIM(@Status))='Active' OR LTRIM(RTRIM(@Status))='Inactive'
			BEGIN
				IF @Po_ErrNo=0
				BEGIN
					SET @Po_ErrNo=0	
				END
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Status Type '+@Status+ ' is not available'		
				INSERT INTO Errorlog VALUES (20,@Tabname,'Status',@ErrDesc)
			END
		END
		IF LTRIM(RTRIM(@Taxable))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Taxable should not be empty'		
			INSERT INTO Errorlog VALUES (21,@Tabname,'Taxable',@ErrDesc)
		END
		ELSE
		BEGIN
			IF LTRIM(RTRIM(@Taxable))='Yes' OR LTRIM(RTRIM(@Taxable))='No'
			BEGIN
				IF @Po_ErrNo=0
				BEGIN
					SET @Po_ErrNo=0	
				END	
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Taxable Type '+@Taxable+ ' is not available'		
				INSERT INTO Errorlog VALUES (22,@Tabname,'Taxable',@ErrDesc)
			END
		END
		IF LTRIM(RTRIM(@TaxType))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'TaxType should not be empty'		
			INSERT INTO Errorlog VALUES (23,@Tabname,'TaxType',@ErrDesc)
		END
		ELSE
		BEGIN
			IF LTRIM(RTRIM(@TaxType))='VAT' OR LTRIM(RTRIM(@TaxType))='NON VAT'
			BEGIN
				IF @Po_ErrNo=0
				BEGIN
					SET @Po_ErrNo=0	
				END	
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'TaxType Type '+@TaxType+ ' is not available'		
				INSERT INTO Errorlog VALUES (24,@Tabname,'TaxType',@ErrDesc)
			END
		END
		IF @TaxType='VAT'
		BEGIN
			IF LTRIM(RTRIM(@TINNumber))=''
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'TIN Number should not be empty'		
				INSERT INTO Errorlog VALUES (25,@Tabname,'TINNumber',@ErrDesc)
			END
			ELSE
			BEGIN
				IF LEN(@TINNumber)>11
				BEGIN
					SET @Po_ErrNo=1
					SET @Taction=0
					SET @ErrDesc = 'TIN Number Maximum Length should be 11'		
					INSERT INTO Errorlog VALUES (26,@Tabname,'TINNumber',@ErrDesc)
				END
			END
		END
		IF LTRIM(RTRIM(@CreditBills))<>''
		BEGIN
			IF ISNUMERIC(@CreditBills)=0
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Credit Bills value Should be Number'		
				INSERT INTO Errorlog VALUES (27,@Tabname,'CreditBills',@ErrDesc)
			END
		END
		IF LTRIM(RTRIM(@CreditLimit))<>''
		BEGIN
			IF ISNUMERIC(@CreditLimit)=0
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Credit Limit value Should be Number'		
				INSERT INTO Errorlog VALUES (28,@Tabname,'CreditLimit',@ErrDesc)
			END
		END
		IF LTRIM(RTRIM(@CreditDays))<>''
		BEGIN
			IF ISNUMERIC(@CreditDays)=0
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Credit Days value Should be Number'		
				INSERT INTO Errorlog VALUES (29,@Tabname,'CreditDays',@ErrDesc)
			END
		END
		IF LTRIM(RTRIM(@CashDiscountPercentage))<>''
		BEGIN
			IF ISNUMERIC(@CashDiscountPercentage)=0
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Cash Discount Percentage value Should be Number'		
				INSERT INTO Errorlog VALUES (30,@Tabname,'CashDiscountPercentage',@ErrDesc)
			END
		END
		
		IF LTRIM(RTRIM(@CashDiscountPercentage))<>''
		BEGIN
			IF ISNUMERIC(@CashDiscountPercentage)=0
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Cash Discount Percentage value Should be Number'		
				INSERT INTO Errorlog VALUES (31,@Tabname,'CashDiscountPercentage',@ErrDesc)
			END
		END
		IF LTRIM(RTRIM(@CashDiscountCondition))<>''
		BEGIN
			IF LTRIM(RTRIM(@CashDiscountCondition))='>=' OR LTRIM(RTRIM(@CashDiscountCondition))='<='
			BEGIN
				IF @Po_ErrNo=0
				BEGIN
					SET @Po_ErrNo=0	
				END	
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Cash Discount Condition Type '+@CashDiscountCondition+ ' is not available'		
				INSERT INTO Errorlog VALUES (32,@Tabname,'CashDiscountCondition',@ErrDesc)
			END
		END
			
	
		IF LTRIM(RTRIM(@CashDiscountLimitValue))<>''
		BEGIN
			IF ISNUMERIC(@CashDiscountLimitValue)=0
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Cash Discount Limit Value value Should be Number'		
				INSERT INTO Errorlog VALUES (33,@Tabname,'CashDiscountLimitValue',@ErrDesc)
			END
		END
		
		IF LTRIM(RTRIM(@LicenseNumber))<>''
		BEGIN
			IF LTRIM(RTRIM(@LicNumberExDate))=''
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'License Number Expiry Date  should not be empty'		
				INSERT INTO Errorlog VALUES (34,@Tabname,'LicenseNumberExpiryDate',@ErrDesc)
			END
			ELSE
			BEGIN
				IF ISDATE(CONVERT(NVARCHAR(10),@LicNumberExDate,121))=0
				BEGIN
					SET @Po_ErrNo=1		
					SET @Taction=0
					SET @ErrDesc = 'License Number Expiry Date '+@LicNumberExDate+ 'not in date format'		
					INSERT INTO Errorlog VALUES (35,@Tabname,'LicenseNumberExpiryDate',@ErrDesc)
				END
				ELSE
				BEGIN
					IF  (CONVERT(NVARCHAR(10),@LicNumberExDate,121)) < CONVERT(NVARCHAR(10),GETDATE(),121)
					BEGIN
						SET @Po_ErrNo=1		
						SET @Taction=0
						SET @ErrDesc = 'Invalid License Number Expiry Date'		
						INSERT INTO Errorlog VALUES (36,@Tabname,'LicenseNumberExpiryDate',@ErrDesc)
					END
				END
			END
		END
		IF LTRIM(RTRIM(@DrugLicNumber))<>''
		BEGIN
			IF LTRIM(RTRIM(@DrugLicExDate))=''
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Drug License Number Expiry Date  should not be empty'		
				INSERT INTO Errorlog VALUES (37,@Tabname,'DrugLicenseNumberExpiryDate',@ErrDesc)
			END
			ELSE
			BEGIN
				IF ISDATE(CONVERT(NVARCHAR(10),@DrugLicExDate,121))=0
				BEGIN
					SET @Po_ErrNo=1		
					SET @Taction=0
					SET @ErrDesc = 'Drug License Number Expiry Date '+@DrugLicExDate+ 'not in date format'		
					INSERT INTO Errorlog VALUES (38,@Tabname,'DrugLicenseNumberExpiryDate',@ErrDesc)
				END
				ELSE
				BEGIN
					IF (CONVERT(NVARCHAR(10),@DrugLicExDate,121))< CONVERT(NVARCHAR(10),GETDATE(),121)
					BEGIN
						SET @Po_ErrNo=1		
						SET @Taction=0
						SET @ErrDesc = 'Invalid Drug License Number Expiry Date'		
						INSERT INTO Errorlog VALUES (39,@Tabname,'DrugLicenseNumberExpiryDate',@ErrDesc)
					END
				END
			END
		END
		IF LTRIM(RTRIM(@PestLicNumber))<>''
		BEGIN
			IF LTRIM(RTRIM(@PestLicExDate))=''
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Pesticide License Number Expiry Date  was not given'		
				INSERT INTO Errorlog VALUES (40,@Tabname,'PesticideLicenseNumberExpiryDate',@ErrDesc)
			END
			ELSE
			BEGIN
				IF ISDATE(CONVERT(NVARCHAR(10),@PestLicExDate,121))=0
					BEGIN
						SET @Po_ErrNo=1		
						SET @Taction=0
						SET @ErrDesc = 'Pesticide License Number Expiry Date '+@PestLicExDate+ 'not in date format'		
						INSERT INTO Errorlog VALUES (41,@Tabname,'PesticideLicenseNumberExpiryDate',@ErrDesc)
					END
				ELSE
				BEGIN
					IF (CONVERT(NVARCHAR(10),@PestLicExDate,121)) < CONVERT(NVARCHAR(10),GETDATE(),121)
					BEGIN
						SET @Po_ErrNo=1		
						SET @Taction=0
						SET @ErrDesc = 'Invalid Pesticide License Number Expiry Date '		
						INSERT INTO Errorlog VALUES (42,@Tabname,'PesticideLicenseNumberExpiryDate',@ErrDesc)
					END
				END
			END
		END
		IF LTRIM(RTRIM(@RetailerType))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Retailer Type should not be empty'		
			INSERT INTO Errorlog VALUES (43,@Tabname,'Retailer Type',@ErrDesc)
		END
		ELSE
		BEGIN
			IF LTRIM(RTRIM(@RetailerType))='Retailer' OR LTRIM(RTRIM(@RetailerType))='Sub Stockist'
			BEGIN
				IF @Po_ErrNo=0
				BEGIN
					SET @Po_ErrNo=0	
				END
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Retailer Type '+@RetailerType+ ' is not available'		
				INSERT INTO Errorlog VALUES (44,@Tabname,'Retailer Type',@ErrDesc)
			END
		END
		IF LTRIM(RTRIM(@RetailerFrequency))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Retailer Frequency should not be empty'		
			INSERT INTO Errorlog VALUES (45,@Tabname,'Retailer Frequency',@ErrDesc)
		END
		ELSE
		BEGIN
			IF LTRIM(RTRIM(@RetailerFrequency))='Weekly' OR LTRIM(RTRIM(@RetailerFrequency))='Bi-Weekly' OR LTRIM(RTRIM(@RetailerFrequency))='Fort Nightly' OR LTRIM(RTRIM(@RetailerFrequency))='Monthly' OR LTRIM(RTRIM(@RetailerFrequency))='Daily'
			BEGIN
				IF @Po_ErrNo=0
				BEGIN
					SET @Po_ErrNo=0	
				END
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Retailer Frequency '+@RetailerFrequency+ ' is not available'		
				INSERT INTO Errorlog VALUES (46,@Tabname,'Retailer Frequency',@ErrDesc)
			END
		END
		IF LTRIM(RTRIM(@RtrCrDaysAlert))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Credit Days Alert should not be empty'		
			INSERT INTO Errorlog VALUES (47,@Tabname,'Credit Days Alert',@ErrDesc)
		END
		ELSE
		BEGIN
			IF LTRIM(RTRIM(@RtrCrDaysAlert))='None' OR LTRIM(RTRIM(@RtrCrDaysAlert))='Alert & Allow' OR LTRIM(RTRIM(@RtrCrDaysAlert))='Alert & Stop'
			BEGIN
				IF @Po_ErrNo=0
				BEGIN
					SET @Po_ErrNo=0	
				END
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Credit Days Alert '+@RtrCrDaysAlert+ ' is not available'		
				INSERT INTO Errorlog VALUES (48,@Tabname,'Credit Days Alert',@ErrDesc)
			END
		END
		
		IF LTRIM(RTRIM(@RtrCrBillAlert))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Credit Bills Alert should not be empty'		
			INSERT INTO Errorlog VALUES (49,@Tabname,'Credit Bills Alert',@ErrDesc)
		END
		ELSE
		BEGIN
			IF LTRIM(RTRIM(@RtrCrBillAlert))='None' OR LTRIM(RTRIM(@RtrCrBillAlert))='Alert & Allow' OR LTRIM(RTRIM(@RtrCrBillAlert))='Alert & Stop'
			BEGIN
				IF @Po_ErrNo=0
				BEGIN
					SET @Po_ErrNo=0	
				END
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Credit Days Alert '+@RtrCrBillAlert+ ' is not available'		
				INSERT INTO Errorlog VALUES (50,@Tabname,'Credit Bills Alert',@ErrDesc)
			END
		END
		IF LTRIM(RTRIM(@RtrCrLimitAlert))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Credit Limit Alert should not be empty'		
			INSERT INTO Errorlog VALUES (51,@Tabname,'Credit Days Alert',@ErrDesc)
		END
		ELSE
		BEGIN
			IF LTRIM(RTRIM(@RtrCrLimitAlert))='None' OR LTRIM(RTRIM(@RtrCrLimitAlert))='Alert & Allow' OR LTRIM(RTRIM(@RtrCrLimitAlert))='Alert & Stop'
			BEGIN
				IF @Po_ErrNo=0
				BEGIN
					SET @Po_ErrNo=0	
				END
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Credit Limit Alert '+@RtrCrLimitAlert+ ' is not available'		
				INSERT INTO Errorlog VALUES (52,@Tabname,'Credit Limit Alert',@ErrDesc)
			END
		END
		
		IF @Taction=1
		BEGIN
			SET @CmpRtrCode=''
			SELECT @RtrId=dbo.Fn_GetPrimaryKeyInteger(@CntTabname,@FldName,CAST(YEAR(GetDate()) AS INT),MONTH(GETDATE()))
			SELECT @CoaId=dbo.Fn_GetPrimaryKeyInteger('CoaMaster','CoaId',CAST(YEAR(GetDate()) AS INT),MONTH(GETDATE()))
			SELECT @AcCode=AcCode+1 FROM COAMaster WHERE CoaId=(SELECT MAX(A.CoaId) FROM COAMaster A Where A.MainGroup=2 and A.AcCode LIKE '216%')	
			IF (SELECT Status FROM Configuration WHERE ModuleId='RET33' AND ModuleName='Retailer')=1
			BEGIN			
				IF NOT EXISTS(SELECT * FROM Retailer)
				BEGIN
					UPDATE CompanyCounters SET CurrValue = 0 WHERE Tabname =  'Retailer' AND Fldname = 'CmpRtrCode'	
				END
				SELECT @CmpRtrCode=dbo.Fn_GetPrimaryKeyCmpString('Retailer','CmpRtrCode',CAST(YEAR(GetDate()) AS INT),MONTH(GETDATE()))			
			END
			ELSE
			BEGIN
				SET @CmpRtrCode=@RetailerCode
			END
			IF @CmpRtrCode=''
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Company Retailer Code should not be empty'		
				INSERT INTO Errorlog VALUES (43,@Tabname,'Counter Value',@ErrDesc)
			END
		END
		
		
		
		IF @RtrId=0
		BEGIN
			SET @Po_ErrNo=1		
			SET @Taction=0
			SET @ErrDesc = 'Reset the Counter Year Value '		
			INSERT INTO Errorlog VALUES (43,@Tabname,'Counter Value',@ErrDesc)
		END
		
		IF EXISTS (SELECT '*' FROM Configuration WHERE ModuleId = 'GENCONFIG30' AND ModuleName = 'General Configuration' AND Status = 1)
		BEGIN
			IF LTRIM(RTRIM(@PhoneNo))=''
			BEGIN
				--IF EXISTS (SELECT RtrPhoneNo from Retailer (Nolock) where RtrPhoneNo = @PhoneNo AND RtdId NOT IN (@RetailerCode))
				IF EXISTS (SELECT RtrPhoneNo from Retailer (Nolock) where RtrPhoneNo = @PhoneNo AND 
				(RtrCode NOT IN (@RetailerCode) OR RtrCodeUserInput NOT IN(@RtrCodeUserInput)
				OR RtrCode NOT IN (@RtrCodeUserInput)))
				BEGIN
					SET @Po_ErrNo=1		
					SET @Taction=0
					SET @ErrDesc = 'Retailer Phone Number not be Empty '		
					INSERT INTO Errorlog VALUES (43,@Tabname,'Phone Number',@ErrDesc)
				END				
			END			
		END
		
		IF LTRIM(RTRIM(@PhoneNo))<>''
		BEGIN
			--IF EXISTS (SELECT RtrPhoneNo from Retailer (Nolock) where RtrPhoneNo = @PhoneNo AND RtrId  NOT IN (@RetailerCode))
			IF EXISTS (SELECT RtrPhoneNo from Retailer (Nolock) where RtrPhoneNo = @PhoneNo AND 
			(RtrCode  NOT IN (@RetailerCode) OR RtrCodeUserInput NOT IN(@RtrCodeUserInput)
			OR RtrCode NOT IN (@RtrCodeUserInput)))
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Retailer Phone Number should be unique '		
				INSERT INTO Errorlog VALUES (43,@Tabname,'Phone Number',@ErrDesc)
			END			
		END
		IF LTRIM(RTRIM(@TINNumber))<>''
		BEGIN
			--IF EXISTS (SELECT RtrTINNo from Retailer (Nolock) where RtrTINNo = @TINNumber AND RtrId NOT IN (@RetailerCode))
			IF EXISTS (SELECT RtrTINNo from Retailer (Nolock) where RtrTINNo = @TINNumber AND 
			(RtrCode NOT IN (@RetailerCode)OR RtrCodeUserInput NOT IN(@RtrCodeUserInput)
			OR RtrCode NOT IN (@RtrCodeUserInput)))
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Retailer Tin Number Should be unique '		
				INSERT INTO Errorlog VALUES (43,@Tabname,'TiN Number',@ErrDesc)
			END			
		END
		
		IF @Po_ErrNo=0
		BEGIN		
			DECLARE @MSG AS VARCHAR(100)
			SET @MSG=''
			SELECT @MSG=DBO.Fn_RetailerApprovalStatus(@RtrId)
			IF ISNULL(@MSG,'')<>''
			BEGIN
				INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)  
				SELECT DISTINCT 5,'Retailer ApprovalStatus','ApprovalStatus',@MSG 
				SET @Po_ErrNo =1 
			END
		END
		
					
		IF  @Taction=1 AND @Po_ErrNo=0
		BEGIN	
			INSERT INTO Retailer(RtrId,RtrCode,CmpRtrCode,RtrName,RtrAdd1,RtrAdd2,RtrAdd3,RtrPinNo,RtrPhoneNo,RtrEmailId,RtrKeyAcc,RtrCovMode,
			RtrRegDate,RtrDayOff,RtrStatus,RtrTaxable,RtrTaxType,RtrTINNo,RtrCSTNo,TaxGroupId,RtrCrBills,RtrCrLimit,RtrCrDays,
			RtrCashDiscPerc,RtrCashDiscCond,RtrCashDiscAmt,RtrLicNo,RtrLicExpiryDate,RtrDrugLicNo,RtrDrugExpiryDate,
			RtrPestLicNo,RtrPestExpiryDate,GeoMainId,RMId,VillageId,RtrResPhone1,RtrOffPhone1,RtrDepositAmt,RtrAnniversary,RtrDOB,CoaId,RtrOnAcc,
			RtrShipId,RtrType,RtrFrequency,RtrCrDaysAlert,RtrCrBillsAlert,RtrCrLimitAlert,Upload,Approved,XmlUpload,
			Availability,LastModBy,LastModDate,AuthId,AuthDate,RtrUniqueCode,RtrCodeUserInput)--Gopi at 08/11/2016
			VALUES(@RtrId,@RetailerCode,@CmpRtrCode,@RetailerName,@Address1,@Address2,@Address3,CAST(@PinCode AS INT),@PhoneNo,@EmailId,
			(CASE @KeyAccount WHEN 'Yes' THEN 1 ELSE 0 END),
			(CASE @CoverageMode WHEN 'Order Booking' THEN 1 WHEN 'Counter Sales' THEN 2 WHEN 'Van Sales' THEN 3 END),
			@RegistrationDate,
			(CASE @DayOff WHEN 'Sunday' THEN 0 WHEN 'Monday' THEN 1 WHEN 'Tuesday' THEN 2 WHEN 'Wednesday' THEN 3 WHEN 'Thursday' THEN 4 WHEN 'Friday' THEN 5 WHEN 'Saturday' THEN 6 END),
			(CASE @Status WHEN 'Active' THEN 1 ELSE 0 END),
			(CASE @Taxable WHEN 'Yes' THEN 1 ELSE 0 END),
			(CASE @TaxType WHEN 'VAT' THEN 0 ELSE 1 END),@TINNumber,@CSTNumber,@TaxGroupId,CAST(@CreditBills AS INT),CAST(@CreditLimit AS NUMERIC(18,2)),CAST(@CreditDays AS INT),
			(CAST(@CashDiscountPercentage AS NUMERIC(18,2))),(CASE @CashDiscountCondition WHEN '>=' THEN 1 ELSE 0 END),CAST(@CashDiscountLimitValue AS NUMERIC (18,2)),
			@LicenseNumber,CONVERT(NVARCHAR(10),@LicNumberExDate,121),@DrugLicNumber,CONVERT(NVARCHAR(10),@DrugLicExDate,121),
			@PestLicNumber,CONVERT(NVARCHAR(10),@PestLicExDate,121),@GeoMainId,@RMId,@VillageId,@ResidencePhoneNo,@OfficePhoneNo,
			CAST(@DepositAmount AS NUMERIC(18,2)),CONVERT(NVARCHAR(10),GETDATE(),121),CONVERT(NVARCHAR(10),GETDATE(),121),@CoaId,0,0,
			(CASE @RetailerType WHEN 'Retailer' THEN 1 WHEN 'Sub Stockist' THEN 2 END),
			(CASE @RetailerFrequency WHEN 'Weekly' THEN 0 WHEN 'Bi-Weekly' THEN 1 WHEN 'Fort Nightly' THEN 2 WHEN 'Monthly' THEN 3 WHEN 'Daily' THEN 4 END),
			(CASE @RtrCrDaysAlert WHEN 'None' THEN 0 WHEN 'Alert & Allow' THEN 1 WHEN 'Alert & Stop' THEN 2 END),
			(CASE @RtrCrBillAlert WHEN 'None' THEN 0 WHEN 'Alert & Allow' THEN 1 WHEN 'Alert & Stop' THEN 2 END),
			(CASE @RtrCrLimitAlert WHEN 'None' THEN 0 WHEN 'Alert & Allow' THEN 1 WHEN 'Alert & Stop' THEN 2 END),
			'N',0,0,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121),'',@RtrCodeUserInput)
			
			UPDATE CompanyCounters SET CurrValue = CurrValue+1 WHERE Tabname =  'Retailer' AND Fldname = 'CmpRtrCode'
			--RtrCode Auto Generate
			IF @AutoRtrCodeConfig=1
			BEGIN
				UPDATE Counters SET CurrValue = CurrValue+1 WHERE TabName = 'Retailer'  AND FldName = 'RtrCode'
				
				SET @sSql='UPDATE Counters SET CurrValue =CurrValue'+'+1'+' WHERE Tabname =''Retailer'' AND Fldname =''RtrCode'''
				INSERT INTO Translog(strSql1) VALUES (@sSql) 
				
			END
			--Till Here
			
			
			SET @sSql='UPDATE CompanyCounters SET CurrValue =CurrValue'+'+1'+' WHERE Tabname =''Retailer'' AND Fldname =''CmpRtrCode'''
			INSERT INTO Translog(strSql1) VALUES (@sSql) 		
			SET @sSql='INSERT INTO Retailer(RtrId,RtrCode,CmpRtrCode,RtrName,RtrAdd1,RtrAdd2,RtrAdd3,RtrPinNo,RtrPhoneNo,RtrEmailId,RtrKeyAcc,RtrCovMode,
			RtrRegDate,RtrDayOff,RtrStatus,RtrTaxable,RtrTaxType,RtrTINNo,RtrCSTNo,TaxGroupId,RtrCrBills,RtrCrLimit,RtrCrDays,RtrCashDiscPerc,
			RtrCashDiscCond,RtrCashDiscAmt,RtrLicNo,RtrDrugLicNo,RtrPestLicNo,GeoMainId,RMId,VillageId,RtrResPhone1,RtrOffPhone1,RtrDepositAmt,RtrAnniversary,RtrDOB,CoaId,RtrOnAcc,
			RtrShipId,RtrType,RtrFrequency,RtrCrDaysAlert,RtrCrBillsAlert,RtrCrLimitAlert,Upload,XmlUpload,Availability,LastModBy,LastModDate,AuthId,AuthDate,RtrLicExpiryDate,RtrDrugExpiryDate,RtrPestExpiryDate,Approved,RtrCodeUserInput)
			VALUES('+CAST(@RtrId AS VARCHAR(10))+','''+@RetailerCode+''','''+@CmpRtrCode+''','''+@RetailerName+''','''+@Address1+''','''+@Address2+''','''+@Address3+''','+CAST(CAST(@PinCode AS INT)AS VARCHAR(10))+','''+@PhoneNo+''','''+@EmailId+''',
			'+CAST((CASE @KeyAccount WHEN 'Yes' THEN 1 ELSE 0 END)AS VARCHAR(10))+',
			'+CAST((CASE @CoverageMode WHEN 'Order Booking' THEN 1 WHEN 'Counter Sales' THEN 2 WHEN 'Van Sales' THEN 3 END)AS VARCHAR(10))+',
			'''+CAST(@RegistrationDate AS VARCHAR(12))+''',
			'+CAST((CASE @DayOff WHEN 'Sunday' THEN 0 WHEN 'Monday' THEN 1 WHEN 'Tuesday' THEN 2 WHEN 'Wednesday' THEN 3 WHEN 'Thursday' THEN 4 WHEN 'Friday' THEN 5 WHEN 'Saturday' THEN 6 END)AS VARCHAR(10))+',
			'+CAST((CASE @Status WHEN 'Active' THEN 1 ELSE 0 END)AS VARCHAR(10))+',
			'+CAST((CASE @Taxable WHEN 'Yes' THEN 1 ELSE 0 END)AS VARCHAR(10))+',
			'+CAST((CASE @TaxType WHEN 'VAT' THEN 0 ELSE 1 END)AS VARCHAR(10))+','''+@TINNumber+''','''+@CSTNumber+''','+CAST(@TaxGroupId AS VARCHAR(10))+','+CAST(CAST(@CreditBills AS INT) AS VARCHAR(10))+','+CAST(CAST(@CreditLimit AS NUMERIC(18,2)) AS VARCHAR(20))+','+CAST(CAST(@CreditDays AS INT) AS VARCHAR(10))+',
			'+CAST((CAST(@CashDiscountPercentage AS NUMERIC(18,2)))AS VARCHAR(20))+','+CAST((CASE @CashDiscountCondition WHEN '>=' THEN 1 ELSE 0 END)AS VARCHAR(10))+','+CAST(CAST(@CashDiscountLimitValue AS NUMERIC (18,2))AS VARCHAR(20))+',
			'''+@LicenseNumber+''','''+@DrugLicNumber+''',
			'''+@PestLicNumber+''','+CAST(@GeoMainId AS VARCHAR(10))+','+CAST(@RMId AS VARCHAR(10))+','+CAST(@VillageId AS VARCHAR(10))+','''+@ResidencePhoneNo+''','''+@OfficePhoneNo+''',
			'+CAST(CAST(@DepositAmount AS NUMERIC(18,2))AS VARCHAR(20))+','''+CONVERT(NVARCHAR(10),GETDATE(),121)+''','''+CONVERT(NVARCHAR(10),GETDATE(),121)+''','+CAST(@CoaId AS VARCHAR(10))+',0,0
			,'+CAST((CASE @RetailerType WHEN 'Retailer' THEN 1 WHEN 'Sub Stockist' THEN 2 END) AS VARCHAR(10))+'
			,'+CAST((CASE @RetailerFrequency WHEN 'Weekly' THEN 0 WHEN 'Bi-Weekly' THEN 1 WHEN 'Fort Nightly' THEN 2 WHEN 'Monthly' THEN 3 WHEN 'Daily' THEN 4 END) AS VARCHAR(10))+'
			,'+CAST((CASE @RtrCrDaysAlert WHEN 'None' THEN 0 WHEN 'Alert & Allow' THEN 1 WHEN 'Alert & Stop' THEN 2 END) AS VARCHAR(10))+'
			,'+CAST((CASE @RtrCrBillAlert WHEN 'None' THEN 0 WHEN 'Alert & Allow' THEN 1 WHEN 'Alert & Stop' THEN 2 END) AS VARCHAR(10))+'
			,'+CAST((CASE @RtrCrLimitAlert WHEN 'None' THEN 0 WHEN 'Alert & Allow' THEN 1 WHEN 'Alert & Stop' THEN 2 END)AS VARCHAR(10))+'
			,''N'',0,0,1,1,'''+CONVERT(NVARCHAR(10),GETDATE(),121)+''',1,'''+CONVERT(NVARCHAR(10),GETDATE(),121)+''',0'
			
			IF LTRIM(RTRIM(@LicNumberExDate)) IS NULL
			BEGIN
				SET @sSql=@sSql + ',Null'
			END
			ELSE
			BEGIN
				SET @sSql=@sSql + ','''+CONVERT(NVARCHAR(10),@LicNumberExDate,121)+''''
			END
			IF LTRIM(RTRIM(@DrugLicExDate))IS NULL
			BEGIN
				SET @sSql=@sSql + ',Null'
			END
			ELSE
			BEGIN
				SET @sSql=@sSql + ','''+CONVERT(NVARCHAR(10),@DrugLicExDate,121)+''''
			END
			IF LTRIM(RTRIM(@PestLicExDate))IS NULL
			BEGIN
				SET @sSql=@sSql + ',Null'
			END
			ELSE
			BEGIN
				SET @sSql=@sSql + ','''+CONVERT(NVARCHAR(10),@PestLicExDate,121)+''''
			END
			--RtrCode Auto Generate
			SET @sSql=@sSql + ','''+ISNULL(@RtrCodeUserInput,'')+''')'
			---Till Here
			INSERT INTO Translog(strSql1) VALUES (@sSql)
			UPDATE Counters SET CurrValue = CurrValue+1 WHERE Tabname =  @CntTabname AND Fldname = @FldName
			SET @sSql='UPDATE Counters SET CurrValue =CurrValue'+'+1'+' WHERE Tabname ='''+@CntTabname+''' AND Fldname ='''+@FldName+''''
			INSERT INTO Translog(strSql1) VALUES (@sSql)
			IF EXISTS (SELECT * FROM Retailer WHERE RtrId=@RtrId)
			BEGIN
				INSERT INTO CoaMaster (CoaId,AcCode,AcName,AcLevel,MainGroup,Status,Availability,LastModBy,LastModDate,AuthId,AuthDate)
				VALUES (@CoaId,@AcCode,@RetailerName,4,2,2,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121))
				SET @sSql='INSERT INTO CoaMaster (CoaId,AcCode,AcName,AcLevel,MainGroup,Status,Availability,LastModBy,LastModDate,AuthId,AuthDate)
				VALUES ('+CAST(@CoaId AS VARCHAR(10))+','''+@AcCode+''','''+@RetailerName+''',4,2,2,1,1,'''+CONVERT(NVARCHAR(10),GETDATE(),121)+''',1,'''+CONVERT(NVARCHAR(10),GETDATE(),121)+''')'
				INSERT INTO Translog(strSql1) VALUES (@sSql)
				
				IF @PotentialClassCode<>''
				BEGIN
					DELETE FROM RetailerPotentialClassMap WHERE RtrId=@RtrId
					SET @sSql='DELETE FROM RetailerPotentialClassMap WHERE RtrId='+CAST(@RtrId AS VARCHAR(10))+''
					INSERT INTO RetailerPotentialClassMap (RtrId,RtrPotentialClassId,Availability,LastModBy,LastModDate,AuthId,AuthDate) VALUES(@RtrId,@RtrClassId,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121))
					SET @sSql='INSERT INTO RetailerPotentialClassMap (RtrId,RtrPotentialClassId,Availability,LastModBy,LastModDate,AuthId,AuthDate)
					VALUES('+CAST(@RtrId AS VARCHAR(10))+','+CAST(@RtrClassId AS VARCHAR(10))+',1,1,'''+CONVERT(NVARCHAR(10),GETDATE(),121)+''',1,'''+CONVERT(NVARCHAR(10),GETDATE(),121)+''')'
				END
				UPDATE Counters SET CurrValue = CurrValue+1 WHERE Tabname =  'CoaMaster' AND Fldname = 'CoaId'
				SET @sSql='UPDATE Counters SET CurrValue =CurrValue'+'+1'+' WHERE Tabname =  ''CoaMaster'' AND Fldname = ''CoaId'''
				INSERT INTO Translog(strSql1) VALUES (@sSql)
			END			
		END		
		IF  @Taction=2 AND @Po_ErrNo=0
		BEGIN
			--CRCRSTPAR0070
			IF @Taction=2
			BEGIN
				
				----PARCS202100043 OR condition added RtrCodeUserInput
				DECLARE @ReturnMsg AS VARCHAR(100)
				SET @ReturnMsg=(SELECT DBO.Fn_ReturnToBloackRetailerColumns(79,@RtrId,'RtrName',@Taction,1000))
				IF RTRIM(LTRIM(@ReturnMsg))<>''
					BEGIN
					SET @RetailerName=(SELECT RtrName FROM Retailer WHERE (RtrCode=@RetailerCode OR RtrCodeUserInput=@RtrCodeUserInput
					OR  RtrCode =@RtrCodeUserInput))
				END
				
				SET @ReturnMsg=''
				SET @ReturnMsg=(SELECT DBO.Fn_ReturnToBloackRetailerColumns(79,@RtrId,'RtrStatus',@Taction,1000))
				IF RTRIM(LTRIM(@ReturnMsg))<>''
				BEGIN
					SET @Status=(SELECT CASE RTRSTATUS WHEN 1 THEN 'Active' ELSE 'InActive' END FROM Retailer 
					WHERE (RtrCode=@RetailerCode OR RtrCodeUserInput=@RtrCodeUserInput
					OR  RtrCode =@RtrCodeUserInput))					
				END
				
				SET @ReturnMsg=''
				SET @ReturnMsg=(SELECT DBO.Fn_ReturnToBloackRetailerColumns(79,@RtrId,'Geography',@Taction,1000))
				IF RTRIM(LTRIM(@ReturnMsg))<>''
				BEGIN
					SET @GeoMainId=(SELECT GeoMainId FROM Retailer WHERE (RtrCode=@RetailerCode OR RtrCodeUserInput=@RtrCodeUserInput
					OR  RtrCode =@RtrCodeUserInput))
				END
			END
			
			--Added By S.Moorthi CRCRSTPAR0001
				IF EXISTS (SELECT '*' FROM Retailer (NOLOCK) WHERE RTRID = @RtrId and (RtrName<>@RetailerName
				or RtrStatus<>(CASE @Status WHEN 'Active' THEN 1 ELSE 0 END) or ISNULL(GeoMainId,0)<>ISNULL(@GeoMainId,0)))
				BEGIN
					IF NOT EXISTS (SELECT DISTINCT RtrId FROM RetailerApprovalStatus WHERE RtrId = @RtrId)
					BEGIN
						INSERT INTO RetailerApprovalStatus(RtrId,RtrCtgId,RtrClassId,RtrStatus,
						Rtrname,Geoid,Upload,Mode,ModDate)
						SELECT @RtrId,0,0,
						CASE WHEN RtrStatus=(CASE @Status WHEN 'Active' THEN 1 ELSE 0 END) THEN 2 ELSE (CASE @Status WHEN 'Active' THEN 1 ELSE 0 END) END,
						CASE WHEN RtrName=@RetailerName THEN '' ELSE @RetailerName END,
						CASE WHEN GeoMainId=@GeoMainId THEN 0 ELSE @GeoMainId END,
						0,2,GETDATE() FROM Retailer (NOLOCK) WHERE RtrId = @RtrId
					END
								  
					UPDATE A SET RtrName = CASE WHEN RTRIM(LTRIM(B.RtrName))=RTRIM(LTRIM(@RetailerName)) THEN '' ELSE @RetailerName END,
					RtrStatus=CASE WHEN B.RtrStatus=(CASE @Status WHEN 'Active' THEN 1 ELSE 0 END) THEN 2 ELSE (CASE @Status WHEN 'Active' THEN 1 ELSE 0 ENd) END,
					GeoId=CASE WHEN GeoMainId=@GeoMainId THEN 0 ELSE @GeoMainId END FROM RetailerApprovalStatus A INNER JOIN Retailer B ON A.RtrId=B.RtrId
					WHERE A.RtrId = @RtrId 
					SELECT @RetailerName=CASE WHEN RtrName=@RetailerName THEN @RetailerName ELSE RtrName END,
					@GeoMainId=CASE WHEN GeoMainId=@GeoMainId THEN @GeoMainId ELSE GeoMainId END,	
					@Status= CASE WHEN RtrStatus=(CASE @Status WHEN 'Active' THEN 1 ELSE 0 END) THEN (CASE @Status WHEN 'Active' THEN 1 ELSE 0 END) ELSE RtrStatus END 
					FROM Retailer (NOLOCK) WHERE RtrId = @RtrId
					UPDATE R SET R.Upload='N' FROM RetailerApprovalStatus A(NOLOCK)     
					INNER JOIN  RETAILER R (NOLOCK) ON A.RTRID=R.RTRID    
					WHERE A.Upload=0 AND R.RtrId=@RtrId    
						
				END
			--Till Here
					
			UPDATE Retailer SET  RtrName=@RetailerName,RtrAdd1=@Address1,RtrAdd2=@Address2,RtrAdd3=@Address3,
			RtrPinNo=CAST (@PinCode AS INT),RtrPhoneNo=@PhoneNo,
			RtrEmailId=@EmailId,
			RtrKeyAcc=(CASE @KeyAccount WHEN 'Yes' THEN 1 ELSE 0 END),
			RtrCovMode=(CASE @CoverageMode WHEN 'Order Booking' THEN 1 WHEN 'Counter Sales' THEN 2 WHEN 'Van Sales' THEN 3 END)
			,RtrRegDate=CONVERT(NVARCHAR(10),@RegistrationDate,121),
			RtrDayOff=(CASE @DayOff WHEN 'Sunday' THEN 0 WHEN 'Monday' THEN 1 WHEN 'Tuesday' THEN 2 WHEN 'Wednesday' THEN 3 WHEN 'Thursday' THEN 4 WHEN 'Friday' THEN 5 WHEN 'Saturday' THEN 6 END),
			RtrStatus=(CASE @Status WHEN 'Active' THEN 1 ELSE 0 END),
			RtrTaxable=(CASE @Taxable WHEN 'Yes' THEN 1 ELSE 0 END),
			RtrTaxType=(CASE @TaxType WHEN 'VAT' THEN 0 ELSE 1 END),
			RtrTINNo=@TINNumber,
			RtrCSTNo=@CSTNumber,TaxGroupId=@TaxGroupId,RtrCrBills=CAST(@CreditBills AS INT),RtrCrLimit=CAST(@CreditLimit AS NUMERIC(18,2)),RtrCrDays=CAST(@CreditDays AS INT),
			RtrCashDiscPerc=CAST(@CashDiscountPercentage AS NUMERIC(18,2)),
			RtrCashDiscCond=(CASE @CashDiscountCondition WHEN '>=' THEN 1 ELSE 0 END),RtrCashDiscAmt=CAST(@CashDiscountLimitValue AS NUMERIC(18,2)),
			RtrLicNo=@LicenseNumber,RtrLicExpiryDate=CONVERT(NVARCHAR(10),@LicNumberExDate,121),RtrDrugLicNo=@DrugLicNumber,
			RtrDrugExpiryDate=CONVERT(NVARCHAR(10),@DrugLicExDate,121),RtrPestLicNo=@PestLicNumber,
			RtrPestExpiryDate=CONVERT(NVARCHAR(10),@PestLicExDate,121),GeoMainId=@GeoMainId,
			RMId=@RMId,VillageId=@VillageId,RtrResPhone1=@ResidencePhoneNo,RtrOffPhone1=@OfficePhoneNo,RtrDepositAmt=CAST(@DepositAmount AS NUMERIC(18,2)), 
			RtrType=(CASE @RetailerType WHEN 'Retailer' THEN 1 WHEN 'Sub Stockist' THEN 2 END),
			RtrFrequency=(CASE @RetailerFrequency WHEN 'Weekly' THEN 0 WHEN 'Bi-Weekly' THEN 1 WHEN 'Fort Nightly' THEN 2 WHEN 'Monthly' THEN 3 WHEN 'Daily' THEN 4 END),
			RtrCrDaysAlert=(CASE @RtrCrDaysAlert WHEN 'None' THEN 0 WHEN 'Alert & Allow' THEN 1 WHEN 'Alert & Stop' THEN 2 END),
			RtrCrBillsAlert=(CASE @RtrCrBillAlert WHEN 'None' THEN 0 WHEN 'Alert & Allow' THEN 1 WHEN 'Alert & Stop' THEN 2 END),
			RtrCrLimitAlert=(CASE @RtrCrLimitAlert WHEN 'None' THEN 0 WHEN 'Alert & Allow' THEN 1 WHEN 'Alert & Stop' THEN 2 END)
			WHERE (RtrCode=@RetailerCode OR RtrCodeUserInput =@RtrCodeUserInput OR RtrCode=@RtrCodeUserInput)
				
			SET @sSql='UPDATE Retailer SET  RtrName='''+@RetailerName+''',RtrAdd1='''+@Address1+''',RtrAdd2='''+@Address2+''',RtrAdd3='''+@Address3+''',
			RtrPinNo='+CAST(CAST(@PinCode AS INT) AS VARCHAR(20))+',RtrPhoneNo='''+@PhoneNo+''',
			RtrEmailId='''+@EmailId+''',
			RtrKeyAcc='+CAST((CASE @KeyAccount WHEN 'Yes' THEN 1 ELSE 0 END)AS VARCHAR(10))+',
			RtrCovMode='+CAST((CASE @CoverageMode WHEN 'Order Booking' THEN 1 WHEN 'Counter Sales' THEN 2 WHEN 'Van Sales' THEN 3 END)AS VARCHAR(10))+'
			,RtrRegDate='''+CONVERT(NVARCHAR(10),@RegistrationDate,121)+''',
			RtrDayOff='+CAST((CASE @DayOff WHEN 'Sunday' THEN 0 WHEN 'Monday' THEN 1 WHEN 'Tuesday' THEN 2 WHEN 'Wednesday' THEN 3 WHEN 'Thursday' THEN 4 WHEN 'Friday' THEN 5 WHEN 'Saturday' THEN 6 END)AS VARCHAR(10))+',
			RtrStatus='+CAST((CASE @Status WHEN 'Active' THEN 1 ELSE 0 END)AS VARCHAR(10))+',
			RtrTaxable='+CAST((CASE @Taxable WHEN 'Yes' THEN 1 ELSE 0 END)AS VARCHAR(10))+',
			RtrTaxType='+CAST((CASE @TaxType WHEN 'VAT' THEN 0 ELSE 1 END)AS VARCHAR(10))+',
			RtrTINNo='''+@TINNumber+''',
			RtrCSTNo='''+@CSTNumber+''',TaxGroupId='+CAST(@TaxGroupId AS VARCHAR(10))+',RtrCrBills='+CAST(CAST(@CreditBills AS INT) AS VARCHAR(10))+',RtrCrLimit='+CAST(CAST(@CreditLimit AS NUMERIC(18,2)) AS VARCHAR(20))+',RtrCrDays='+CAST(CAST(@CreditDays AS INT) AS VARCHAR(10))+',
			RtrCashDiscPerc='+CAST(CAST(@CashDiscountPercentage AS NUMERIC(18,2)) AS VARCHAR(20))+',
			RtrCashDiscCond='+CAST((CASE @CashDiscountCondition WHEN '>=' THEN 1 ELSE 0 END)AS VARCHAR(10))+',RtrCashDiscAmt='+CAST(CAST(@CashDiscountLimitValue AS NUMERIC(18,2)) AS VARCHAR(20))+',
			RtrLicNo='''+@LicenseNumber+''',RtrDrugLicNo='''+@DrugLicNumber+''',RtrPestLicNo='''+@PestLicNumber+''',GeoMainId='+CAST(@GeoMainId AS VARCHAR(10))+',
			RMId='+CAST(@RMId AS VARCHAR(20))+',VillageId='+CAST(@VillageId AS VARCHAR(20))+',RtrResPhone1='''+@ResidencePhoneNo+''',RtrOffPhone1='''+@OfficePhoneNo+''',RtrDepositAmt='+CAST(CAST(@DepositAmount AS NUMERIC(18,2)) AS VARCHAR(20))+''
					
			IF LTRIM(RTRIM(@LicNumberExDate)) IS NULL
			BEGIN
				SET @sSql=@sSql + ',RtrLicExpiryDate=Null'
			END
			ELSE
			BEGIN
				SET @sSql=@sSql + ',RtrLicExpiryDate='''+CONVERT(NVARCHAR(10),@LicNumberExDate,121)+''''
			END
			IF LTRIM(RTRIM(@DrugLicExDate))IS NULL
			BEGIN
				SET @sSql=@sSql + ',RtrDrugExpiryDate=Null'
			END
			ELSE
			BEGIN
				SET @sSql=@sSql + ',RtrDrugExpiryDate='''+CONVERT(NVARCHAR(10),@DrugLicExDate,121)+''''
			END
			IF LTRIM(RTRIM(@PestLicExDate))IS NULL
			BEGIN
				SET @sSql=@sSql + ',RtrPestExpiryDate=Null'
			END
			ELSE
			BEGIN
				SET @sSql=@sSql + ',RtrPestExpiryDate='''+CONVERT(NVARCHAR(10),@PestLicExDate,121)+''''
			END
			SET @sSql=@sSql + ',RtrType='+CAST((CASE @RetailerType WHEN 'Retailer' THEN 1 WHEN 'Sub Stockist' THEN 2 END) AS VARCHAR(10))+'
			,RtrFrequency='+CAST((CASE @RetailerFrequency WHEN 'Weekly' THEN 0 WHEN 'Bi-Weekly' THEN 1 WHEN 'Fort Nightly' THEN 2 WHEN 'Monthly' THEN 3 WHEN 'Daily' THEN 4 END) AS VARCHAR(10))+'
			,RtrCrDaysAlert='+CAST((CASE @RtrCrDaysAlert WHEN 'None' THEN 0 WHEN 'Alert & Allow' THEN 1 WHEN 'Alert & Stop' THEN 2 END) AS VARCHAR(10))+'
			,RtrCrBillsAlert='+CAST((CASE @RtrCrBillAlert WHEN 'None' THEN 0 WHEN 'Alert & Allow' THEN 1 WHEN 'Alert & Stop' THEN 2 END) AS VARCHAR(10))+'
			,RtrCrLimitAlert='+CAST((CASE @RtrCrLimitAlert WHEN 'None' THEN 0 WHEN 'Alert & Allow' THEN 1 WHEN 'Alert & Stop' THEN 2 END)AS VARCHAR(10))+''
			SET @sSql=@sSql +' WHERE RtrCode='''+@RetailerCode+''''
			INSERT INTO Translog(strSql1) VALUES (@sSql)
			SELECT @CoaId=CoaId FROM Retailer WHERE (RtrCode=@RetailerCode OR RtrCodeUserInput=@RtrCodeUserInput OR  RtrCode =@RtrCodeUserInput)
			UPDATE CoaMAster SET AcName=@RetailerName WHERE CoaId=@CoaId
			SET @sSql='UPDATE CoaMaster SET AcName='''+@RetailerName+''' WHERE CoaId='+CAST(@CoaId AS VARCHAR(10))+''
			INSERT INTO Translog(strSql1) VALUES (@sSql)
			SELECT @RtrId=RtrId FROM Retailer WHERE (RtrCode=@RetailerCode OR RtrCodeUserInput=@RtrCodeUserInput OR  RtrCode =@RtrCodeUserInput)
			IF @PotentialClassCode<>''
			BEGIN
				DELETE FROM RetailerPotentialClassMap WHERE RtrId=@RtrId
				SET @sSql='DELETE FROM RetailerPotentialClassMap WHERE RtrId='+CAST(@RtrId AS VARCHAR(10))+''
				INSERT INTO Translog(strSql1) VALUES (@sSql)
				INSERT INTO RetailerPotentialClassMap (RtrId,RtrPotentialClassId,Availability,LastModBy,LastModDate,AuthId,AuthDate)
				VALUES(@RtrId,@RtrClassId,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121))
				SET @sSql='INSERT INTO RetailerPotentialClassMap (RtrId,RtrPotentialClassId,Availability,LastModBy,LastModDate,AuthId,AuthDate)
				VALUES('+CAST(@RtrId AS VARCHAR(10))+','+CAST(@RtrClassId AS VARCHAR(10))+',1,1,'''+CONVERT(NVARCHAR(10),GETDATE(),121)+''',1,'''+CONVERT(NVARCHAR(10),GETDATE(),121)+''')'
				INSERT INTO Translog(strSql1) VALUES (@sSql)
			END
		END
		FETCH NEXT FROM Cur_Retailer INTO @RetailerCode,@RetailerName,@Address1,@Address2,@Address3,@PinCode,@PhoneNo,@EmailId,@KeyAccount,@CoverageMode,@RegistrationDate,@DayOff,
		@Status,@Taxable,@TaxType,@TINNumber,@CSTNumber,@TaxGroup,@CreditBills,@CreditLimit,@CreditDays,
		@CashDiscountPercentage,@CashDiscountCondition,@CashDiscountLimitValue,@LicenseNumber,
		@LicNumberExDate,@DrugLicNumber,@DrugLicExDate,@PestLicNumber,@PestLicExDate,@GeographyHierarchyValue,
		@DeliveryRoute,@VillageCode,@ResidencePhoneNo,@OfficePhoneNo,@DepositAmount,@PotentialClassCode,
		@RetailerType,@RetailerFrequency,@RtrCrDaysAlert,@RtrCrBillAlert,@RtrCrLimitAlert
	END
	CLOSE Cur_Retailer
	DEALLOCATE Cur_Retailer
	RETURN
END
GO
IF EXISTS(SELECT 'X' FROM SYSOBJECTS WHERE NAME='Proc_CN2Cs_RetailerMasterDownload_New' AND XTYPE='P') 
DROP PROCEDURE Proc_CN2Cs_RetailerMasterDownload_New
GO
/*
BEGIN TRAN
delete from errorlog
exec Proc_CN2Cs_RetailerMasterDownload_New 0
----select * from CN2Cs_Prk_RetailerMasterDownload
--select * from retailer -- where Rtrid >574
--select * from errorlog
ROLLBACK TRAN
*/
CREATE PROCEDURE [Proc_CN2Cs_RetailerMasterDownload_New]
(  
 @Po_ErrNo INT OUTPUT  
)  
AS  
/*********************************  
* PROCEDURE  : NG2Cs_Prk_RetailerMasterDownload  
* PURPOSE  : To Update RetailerMaster data.
* CREATED  : VENKAT. M PMS NO : ILCRSTCKL0147
* CREATED DATE : 25-01-2019  
* MODIFIED  
* DATE      AUTHOR     DESCRIPTION  
------------------------------------------------  
* [DATE]      [DEVELOPER]         [USER_STORY_ID]   [CR/BUG]  [DESCRIPTION]
* 23/09/2019  Kishore R			  ILCRSTPAR5992		 SR		   Retailer Download From Console		
* 13/11/2019  M Lakshman          ILCRSTPAR6671      SR        Due to Phone no & TIN no blank and max length validation has been removed in CS. 
* 18/07/2020  Murugan.R          PARCS202100043      CR        Retailer Code Auto Generate

*********************************/  
SET NOCOUNT ON  
BEGIN  
 DECLARE @sSql   NVARCHAR(2000)  
 DECLARE @Taction    INT  
 DECLARE @ErrDesc    NVARCHAR(1000)  
 DECLARE @Tabname    NVARCHAR(50)  
 Declare @RtrCode  	varchar	(50) 
 Declare @RtrName  	varchar	(100) 
 Declare @RtrAddress1  	varchar	(100) 
 Declare @RtrAddress2  	varchar	(100)
 Declare @RtrAddress3  	varchar	(100) 
 Declare @CityName  	varchar	(100) 
 Declare @StateName  	varchar	(50)
 Declare @PostalCode  	varchar	(50) 
 Declare @RtrChannelCode  	varchar (50) 
 Declare @RtrGroupCode  	varchar (50) 
 Declare @RtrClassCode  	varchar	(50) 
 Declare @RtrKeyAcc  	varchar	(50) 
 Declare @RelationStatus 	nvarchar (100)
 Declare @ParentCode 	nvarchar (100)
 Declare @Status  	varchar	(50) 
 Declare @GeoLevel  	nvarchar	(100) 
 Declare @GeoLevelValue  	nvarchar	(200) 
 Declare @PhNumber  	varchar	(50) 
 Declare @ContactPerson  	varchar	(50)
 Declare @TinNumber  	varchar	(50) 
 Declare @TaxType  	varchar	(50) 
 Declare @RtrTaxGroup  	varchar	(50) 
 Declare @SalesRoute  	varchar	(50) 
 Declare @DeliveryRoute  	varchar	(50) 
 Declare @CashDisc  	numeric	(9, 2) 
 Declare @RtrCrLimit 	numeric	(18,2) 
 Declare @RtrCrDays  	int	 
 Declare @CSRtrType  	varchar	(50) 
 Declare @RegDate  	DateTime	 
 Declare @FrequencyMode  	varchar	(50) 
 Declare @Eligible  	int	       
 Declare @RetailerType  	varchar	(50) 
 Declare @Composition  	varchar	(50) 
 Declare @PANNumber  	varchar	(50) 
 Declare @GSTIN  	varchar	(50) 
 Declare @RelatedParty  	varchar	(50) 
 Declare @Latitude  	varchar	(50) 
	Declare @Longitude  	varchar	(50) 
	Declare @RtrUniqueCode  	varchar	(50)        
	Declare @Approved  	varchar	(50) 
	Declare @DownLoadFlag  	varchar	(10) 
	Declare @CreatedDate  	datetime	 
	Declare @RtrMobileNo  	varchar	(50) 
	DeClare @RtrCovMode as Int
	Declare @RtrDayOff as Int
	Declare @RtrTaxable as varchar(10)
	Declare @KeyAccId as Int
	   Declare @CtgClassMainId as Int
	   Declare @RtrClassId as Int
	   Declare @TaxGroupId as Int
	   Declare @RMID as Int
	   Declare @SRMID as Int	   
	   Declare @ApprovedId as Int
	   Declare @RTRFREQUENCYID as Int
	   Declare @CmpRtrCode as Varchar(50)
	   Declare @RtrId as Int
	   Declare @Pi_UserId as Int
	   Declare @DefultRMid as Int
	   Declare @DefultRMNAME as varchar(50)
	   DECLARE @GeoLevelId AS INT 
	   Declare @GeoMainId as Int	   
	   Declare @RelationStatusID as Int
	   Declare @RtrChildId as Int
	   Declare @RtrCashDiscPerc as numeric(18,2)
	   Declare @CoaId as Int
	   Declare @AcCode	as Nvarchar(100)
	   Declare @RtrType as varchar(50)
	   Declare @RtrTypeID as Int
	   Declare @RtrShipId as Int	   
	
 SET @Taction=0 
 SET @Po_ErrNo=0  
 SET @Tabname = 'CN2Cs_Prk_RetailerMasterDownload'  
 SET @Pi_UserId=1  
 SET @GeoLevelId = 0
 SET @RtrChildId = 0
 
--RtrCode Auto Generate--PARCS202100043
DECLARE @AutoRtrCode AS NVARCHAR(200)
DECLARE @RtrCodeUserInput AS NVARCHAR(200)
DECLARE @AutoRtrCodeConfig AS TINYINT
SET @AutoRtrCodeConfig=0
IF EXISTS(SELECT 'X' FROM Configuration (NOLOCK) where ModuleId='RET26' and Status=1)
BEGIN
	SET @AutoRtrCodeConfig=1
END
--Till Here--PARCS202100043
 
 DELETE FROM CN2Cs_Prk_RetailerMasterDownload WHERE DOWNLOADFLAG='Y'
 DECLARE Cur_RetailerMasterDownload_New CURSOR  
 FOR SELECT DISTINCT ISNULL(RtrCode,''),ISNULL(RtrName,''),ISNULL(RtrAddress1,''),ISNULL(RtrAddress2,''),ISNULL(RtrAddress3,''),ISNULL(PostalCode,''),ISNULL(PhNumber,''),
 ISNULL(ContactPerson,''),ISNULL(RtrKeyAcc,''),1 AS RtrCovMode, ISNULL(RegDate,'1900-01-01'),0 AS RtrDayOff,ISNULL(Status,''),'Yes' as RtrTaxable,ISNULL(TaxType,''),
 ISNULL(TinNumber,''),ISNULL(GeoLevel,''),ISNULL(GeoLevelValue,''),ISNULL(DeliveryRoute,''),ISNULL(SalesRoute,''),
 ISNULL(CashDisc,0),ISNULL(RtrCrLimit,0),ISNULL(RtrCrDays,0)
 ,ISNULL(RtrTaxGroup,''),
 ISNULL(RtrMobileNo,''),ISNULL(FrequencyMode,''),ISNULL(RtrUniqueCode,''), ISNULL(Approved,''),ISNULL(RelationStatus,''),
 ISNULL(ParentCode,''),ISNULL(RtrGroupCode,''),ISNULL(RtrChannelCode,''),ISNULL(RtrClassCode,''),ISNULL(CSRtrType,''),
 ISNULL(Latitude,''),ISNULL(Longitude,''),ISNULL(StateName,''),ISNULL(RetailerType,''),ISNULL(Composition,''),
 ISNULL(PANNumber,''),ISNULL(GSTIN,''),ISNULL(RelatedParty,'')		
 FROM CN2Cs_Prk_RetailerMasterDownload WHERE [DownLoadFlag] ='D' -- and CSRtrType='Sub Stockist' 
 OPEN Cur_RetailerMasterDownload_New  
 FETCH NEXT FROM Cur_RetailerMasterDownload_New INTO @RtrCode,@RtrName,@RtrAddress1,@RtrAddress2,@RtrAddress3,@PostalCode,@PhNumber,
 @ContactPerson,@RtrKeyAcc,@RtrCovMode,@RegDate,@RtrDayOff,@Status,@RtrTaxable,@TaxType,@TinNumber,@GeoLevel,@GeoLevelValue,
 @DeliveryRoute,@SalesRoute,@RtrCashDiscPerc,@RtrCrLimit,@RtrCrDays,
 @RtrTaxGroup,@RtrMobileNo,@FrequencyMode,@RtrUniqueCode,@Approved,@RelationStatus,@ParentCode,
 @RtrGroupCode,@RtrChannelCode,@RtrClassCode,@RtrType,
 @Latitude,@Longitude,@StateName,@RetailerType,@Composition,@PANNumber,@GSTIN,@RelatedParty
 WHILE @@FETCH_STATUS=0  
 BEGIN  
		SET @Po_ErrNo=0  
		SET @Taction=0 
		Delete from ETL_Prk_UdcDetails
		
		 --START--PARCS202100043
		SET @RtrCodeUserInput=''
		SET @AutoRtrCode=''		
		SET @RtrCodeUserInput=@RtrCode
		
		IF (@AutoRtrCodeConfig=1)
		BEGIN		
			SELECT  @AutoRtrCode=CASE Len(CurrValue+1)  
			WHEN 1 THEN Prefix + '0000' + Cast(Isnull(CurrValue,0) + 1 AS Varchar)
			WHEN 2 THEN Prefix + '000' + Cast(Isnull(CurrValue,0) + 1 AS Varchar) 
			WHEN 3 THEN Prefix + '00' + Cast(Isnull(CurrValue,0) + 1  AS Varchar) 
			WHEN 4 THEN Prefix + '0' + Cast(Isnull(CurrValue,0) + 1  AS Varchar) 
			WHEN 5 THEN Prefix + Cast(Isnull(CurrValue,0) + 1 AS Varchar) END
			FROM Counters (NOLOCK) WHERE TabName = 'Retailer'  AND FldName = 'RtrCode'		
						
			IF LEN(ISNULL(@AutoRtrCode,''))>0
			BEGIN
				SET @RtrCode=@AutoRtrCode				
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Auto Retailer Code not generated '  		
				INSERT INTO Errorlog VALUES (6,@Tabname,'RetailerCode',@ErrDesc)
				IF (SELECT CURSOR_STATUS('global','Cur_RetailerMasterDownload_New')) >= -1
				BEGIN
					DEALLOCATE Cur_RetailerMasterDownload_New
				END
				RETURN
			END	
			
			IF EXISTS(SELECT 'X' FROM Retailer (NOLOCK) WHERE RtrCode=@RtrCode)
			BEGIN
				SET @Po_ErrNo=1 
				SET @Taction=0
				SET @ErrDesc = 'Auto generate retailer code already exists,Increase counters value ' +@AutoRtrCode 		
				INSERT INTO Errorlog VALUES (6,@Tabname,'RetailerCode',@ErrDesc)			
				IF (SELECT CURSOR_STATUS('global','Cur_RetailerMasterDownload_New')) >= -1
				BEGIN
					DEALLOCATE Cur_RetailerMasterDownload_New
				END					
				RETURN
			END
							
		END
		--END --PARCS202100043
		
		
		
					
		IF (LTRIM(RTRIM(@RtrCode))<>'' AND LTRIM(RTRIM(@RtrCodeUserInput))<>'') 
		BEGIN  
			IF EXISTS (SELECT '*' FROM Retailer WHERE (RtrCode = @RtrCode 
			OR RtrCodeUserInput=@RtrCodeUserInput
				OR RtrCode =@RtrCodeUserInput)
			)  
			BEGIN  
				SET @Taction=2  
			END  
			ELSE  
			BEGIN  
				SET @Taction=1  
			END  
		END  
		ELSE  
		BEGIN  
			SET @Po_ErrNo=1  
			SET @Taction=0  
			SET @ErrDesc = 'Retailer Code should not be empty '      
			INSERT INTO Errorlog VALUES (1,@Tabname,'RetailerCode',@ErrDesc)  
		END  
		IF LTRIM(RTRIM(@RtrName))=''  
		BEGIN  
			SET @Po_ErrNo=1   
			SET @Taction=0  
			SET @ErrDesc = 'Retailer Name should not be empty'    
			INSERT INTO Errorlog VALUES (2,@Tabname,'RetailerName',@ErrDesc)  
		END
		IF LTRIM(RTRIM(@RtrAddress1))=''  
		BEGIN  
			SET @Po_ErrNo=1   
			SET @Taction=0  
			SET @ErrDesc = 'Retailer Address  should not be empty'    
			INSERT INTO Errorlog VALUES (3,@Tabname,'Address',@ErrDesc)  
		END 		   
		--IF LTRIM(RTRIM(@PhNumber))=''
		--BEGIN
		--	SET @Po_ErrNo=1
		--	SET @Taction=0
		--	SET @ErrDesc = 'Ph Number should not be empty'		
		--	INSERT INTO Errorlog VALUES (4,@Tabname,'TINNumber',@ErrDesc)
		--END
		--ELSE
		--BEGIN
		--	IF LEN(@PhNumber)>12
		--	BEGIN
		--		SET @Po_ErrNo=1
		--		SET @Taction=0
		--		SET @ErrDesc = 'Ph Number Maximum Length should be 12'		
		--		INSERT INTO Errorlog VALUES (5,@Tabname,'TINNumber',@ErrDesc)
		--	END
		--END
		IF UPPER(LTRIM(RTRIM(@RtrKeyAcc)))=UPPER('Yes')  
		BEGIN  
			SET @KeyAccId=1   
		END 
		ELSE  
		BEGIN  
			SET	@KeyAccId=0
		END		
		IF UPPER(LTRIM(RTRIM(@Status)))=UPPER('ACTIVE')  
		--IF UPPER(LTRIM(RTRIM(@Status)))= 1  
		BEGIN  
			SET @Status=1   
		END  
		ELSE  
		BEGIN  
			SET @Status=0  
		END
		IF LTRIM(RTRIM(@TaxType))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'TaxType should not be empty'		
			INSERT INTO Errorlog VALUES (6,@Tabname,'TaxType',@ErrDesc)
		END
		ELSE
		BEGIN
			IF LTRIM(RTRIM(@TaxType))='VAT' OR LTRIM(RTRIM(@TaxType))='NON VAT' OR LTRIM(RTRIM(@TaxType))='GST' 
			BEGIN
				IF @Po_ErrNo=0
				BEGIN
					SET @Po_ErrNo=0	
				END	
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'TaxType Type '+@TaxType+ ' is not available'		
				INSERT INTO Errorlog VALUES (7,@Tabname,'TaxType',@ErrDesc)
			END
		END
		--IF @TaxType='VAT'
		--BEGIN
		--	IF LTRIM(RTRIM(@TINNumber))=''
		--	BEGIN
		--		SET @Po_ErrNo=1
		--		SET @Taction=0
		--		SET @ErrDesc = 'TIN Number should not be empty'		
		--		INSERT INTO Errorlog VALUES (8,@Tabname,'TINNumber',@ErrDesc)
		--	END
		--	ELSE
		--	BEGIN
		--		IF LEN(@TINNumber)>11
		--		BEGIN
		--			SET @Po_ErrNo=1
		--			SET @Taction=0
		--			SET @ErrDesc = 'TIN Number Maximum Length should be 11'		
		--			INSERT INTO Errorlog VALUES (9,@Tabname,'TINNumber',@ErrDesc)
		--		END
		--	END
		--END
		
		IF LTRIM(RTRIM(@RtrTaxGroup)) <> ''
		BEGIN
			IF NOT EXISTS  (SELECT '*' FROM TaxGroupSetting WHERE RtrGroup = @RtrTaxGroup)
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Retailer Tax Group Code ' + @RtrTaxGroup + ' is not available'  		
				INSERT INTO Errorlog VALUES (10,@Tabname,'TaxGroup',@ErrDesc)
			END
			ELSE
			BEGIN
				SELECT @TaxGroupId =TaxGroupId FROM TaxGroupSetting WHERE RtrGroup = @RtrTaxGroup
			END
		END
		IF NOT EXISTS  (SELECT '*' FROM RouteMaster WHERE RMCode = @DeliveryRoute AND RMSRouteType=2 )  
		BEGIN  
			SET @Po_ErrNo=1  
			SET @Taction=0  
			SET @ErrDesc = 'Route Code ' + @DeliveryRoute + ' is not available'      
			INSERT INTO Errorlog VALUES (11,@Tabname,'DeliveryRoute',@ErrDesc)  
		END  
		ELSE  
		BEGIN    
			SELECT @RMId =RMId FROM RouteMaster WHERE RMCode = @DeliveryRoute AND RMSRouteType=2 
		END
		IF NOT EXISTS (SELECT '*' FROM SalesmanMarket A INNER JOIN Routemaster B ON A.Rmid =B.Rmid and RmsRouteType =1 WHERE RMCode=@SalesRoute)  
		BEGIN  
		   SET @ErrDesc = 'Route Code:'+@SalesRoute+'does not Mapped Salesman'  
		   INSERT INTO Errorlog VALUES (12,@TabName,'Route Code',@ErrDesc)  
		   SET @Po_ErrNo=1  
		   
		END  
		ELSE  
		BEGIN  
			SELECT @SRMID =B.Rmid  FROM SalesmanMarket A INNER JOIN Routemaster B ON A.Rmid =B.Rmid and RmsRouteType =1 WHERE RMCode=@SalesRoute    
		END 		
		IF LTRIM(RTRIM(@FrequencyMode))=''
		BEGIN
			SET @Po_ErrNo=1	
			SET @Taction=0
			SET @ErrDesc = 'Retailer Frequency  should not be empty'		
			INSERT INTO Errorlog VALUES (13,@Tabname,'Retailer Frequency',@ErrDesc)
		END		
		IF UPPER(LTRIM(RTRIM(@FrequencyMode)))=UPPER('Weekly')  
		BEGIN  
			SET @RTRFREQUENCYID=0   
		END  
		ELSE IF UPPER(LTRIM(RTRIM(@FrequencyMode)))=UPPER('Bi-Weekly')  
		BEGIN  
			SET @RTRFREQUENCYID=1  
		END  
		ELSE IF UPPER(LTRIM(RTRIM(@FrequencyMode)))=UPPER('Fort Nightly')  
		BEGIN  
			SET @RTRFREQUENCYID=2  
		END 
		ELSE IF UPPER(LTRIM(RTRIM(@FrequencyMode)))=UPPER('Monthly')  
		BEGIN  
			SET @RTRFREQUENCYID=3  
		END
		ELSE IF UPPER(LTRIM(RTRIM(@FrequencyMode)))=UPPER('Daily')  
		BEGIN  
			SET @RTRFREQUENCYID=4 
		END 
		IF ISNULL(@RtrUniqueCode,'')='' AND UPPER(ISNULL(@Approved,'PENDING'))='APPROVED'  
		BEGIN  
			SET @ErrDesc = 'Retailer Unique Code Mandatory for Approved retailers :'+@RtrCodeUserInput  
			INSERT INTO Errorlog VALUES (14,@TabName,'Retailer Unique Code',@ErrDesc)  
			SET @Po_ErrNo=1  
		END 
		
		IF @Approved = ''
		BEGIN
			SET @Po_ErrNo=1	
			SET @Taction=0
			SET @ErrDesc = 'Approved  should not be empty'		
			INSERT INTO Errorlog VALUES (24,@Tabname,'Approved',@ErrDesc)		
		END
		ELSE
		IF UPPER(LTRIM(RTRIM(@Approved)))=UPPER('PENDING')  
		BEGIN  
			SET @ApprovedId=0   
		END  
		ELSE IF UPPER(LTRIM(RTRIM(@Approved)))=UPPER('APPROVED')  
		BEGIN  
			SET @ApprovedId=1  
		END  
		ELSE IF UPPER(LTRIM(RTRIM(@Approved)))=UPPER('REJECTED')  
		BEGIN  
			SET @ApprovedId=2  
		END
		
		IF LTRIM(RTRIM(@RtrCrLimit))<>''  
		BEGIN  
			IF ISNUMERIC(@RtrCrLimit)=0  
			BEGIN  
				SET @Po_ErrNo=1  
				SET @Taction=0  
				SET @ErrDesc = 'Credit Limit value Should be Number'    
				INSERT INTO Errorlog VALUES (15,@Tabname,'CreditLimit',@ErrDesc)  
			END  
		END  
		IF LTRIM(RTRIM(@RtrCrDays))<>''  
		BEGIN  
			IF ISNUMERIC(@RtrCrDays)=0  
			BEGIN  
				SET @Po_ErrNo=1  
				SET @Taction=0  
				SET @ErrDesc = 'Credit Days value Should be Number'    
				INSERT INTO Errorlog VALUES (16,@Tabname,'CreditDays',@ErrDesc)  
			END  
		END  
		IF LTRIM(RTRIM(@RtrCashDiscPerc))<>''  
		BEGIN  
			IF ISNUMERIC(@RtrCashDiscPerc)=0  
			BEGIN  
				SET @Po_ErrNo=1  
				SET @Taction=0  
				SET @ErrDesc = 'Cash Discount Percentage value Should be Number'    
				INSERT INTO Errorlog VALUES (17,@Tabname,'CashDiscountPercentage',@ErrDesc)  
			END  
		END  
		 
		IF NOT EXISTS  (SELECT '*' FROM GEOGRAPHYLEVEL(NOLOCK) WHERE GeoLevelName = @GeoLevel )  
		BEGIN
			SET @Po_ErrNo=1  
			SET @Taction=0  
			SET @ErrDesc = 'Geogrpahy Level: ' + @GeoLevel + ' is not available'      
			INSERT INTO Errorlog VALUES (18,@Tabname,'GEOGRAPHYLEVEL',@ErrDesc)				
		END
		ELSE
		BEGIN
			SELECT @GeoLevelId = GeoLevelId FROM GEOGRAPHYLEVEL WHERE GeoLevelName = @GeoLevel 
		END
		 
		IF @GeoLevelId <> 0 
		BEGIN
			IF NOT EXISTS  (SELECT '*' FROM Geography(NOLOCK) WHERE GeoName = @GeoLevelValue )  
			BEGIN  
				SET @Po_ErrNo=1  
				SET @Taction=0  
				SET @ErrDesc = 'Geogrpahy Code: ' + @GeoLevelValue + ' is not available'      
				INSERT INTO Errorlog VALUES (19,@Tabname,'GeographyHierarchyValue',@ErrDesc)  
			END  
			ELSE  
			BEGIN  
				SELECT @GeoMainId =GeoMainId FROM Geography WHERE GeoName = @GeoLevelValue  
			END	
		END
	
		IF UPPER(LTRIM(RTRIM(@RelationStatus)))=UPPER('Independent')
		BEGIN
			SET @RelationStatusID =1
		END
		ELSE IF UPPER(LTRIM(RTRIM(@RelationStatus)))=UPPER('Parent')
		BEGIN
			SET @RelationStatusID =2
			IF UPPER(LTRIM(RTRIM(@ParentCode))) <> ''
			BEGIN			
				Select @RtrChildId = rtrid from Retailer (Nolock) where RtrCode = @ParentCode
			END
		END
		ELSE IF UPPER(LTRIM(RTRIM(@RelationStatus)))=UPPER('Child')
		BEGIN
			SET @RelationStatusID =3 
		END
		
		IF UPPER(LTRIM(RTRIM(@RtrType)))=UPPER('Sub Stockist')
		BEGIN
			SET @RtrTypeID = 2
		END
		ELSE
		BEGIN
			SET @RtrTypeID = 1		
		END
	
		IF NOT EXISTS(SELECT '*' FROM RETAILERCATEGORY A (NOLOCK) 
		INNER JOIN RETAILERCATEGORY B (NOLOCK) ON A.Ctgmainid=B.CtglinkId
		inner join retailervalueclass C (NOLOCK) ON C.CTGMAINID=B.ctgmainid
		where B.CTGCODE=@RtrGroupCode AND A.CTGCODE=@RtrChannelCode AND C.Valueclasscode=@RtrClassCode)
		BEGIN
			SET @Po_ErrNo=1  
			SET @Taction=0  
			SET @ErrDesc = 'Retailer Category: ' + @RtrClassCode + ' is not available'      
			INSERT INTO Errorlog VALUES (20,@Tabname,'RETAILERCATEGORY',@ErrDesc)		 
		END
		ELSE
		BEGIN
			 SELECT @RtrClassId = RtrClassId FROM RETAILERCATEGORY A (NOLOCK)
			 INNER JOIN RETAILERCATEGORY B (NOLOCK) ON A.Ctgmainid=B.CtglinkId
			 inner join retailervalueclass C (NOLOCK) ON C.CTGMAINID=B.ctgmainid
			 where B.CTGCODE=@RtrGroupCode AND A.CTGCODE=@RtrChannelCode AND C.Valueclasscode=@RtrClassCode		 
		END
		SET @CmpRtrCode = ''			
		--IF @Po_ErrNo = 0 AND @Taction = 1
		--BEGIN
			SELECT @RtrId=dbo.Fn_GetPrimaryKeyInteger('Retailer','RtrId',CAST(YEAR(GetDate()) AS INT),MONTH(GETDATE()))
			SELECT @RtrShipId=dbo.Fn_GetPrimaryKeyInteger('retailershipadd','RtrShipId',CAST(YEAR(GetDate()) AS INT),MONTH(GETDATE()))
			
			SELECT @CoaId=dbo.Fn_GetPrimaryKeyInteger('CoaMaster','CoaId',CAST(YEAR(GetDate()) AS INT),MONTH(GETDATE()))
			SELECT @AcCode=AcCode+1 FROM COAMaster WHERE CoaId=(SELECT MAX(A.CoaId) 
			FROM COAMaster A Where A.MainGroup=2 and A.AcCode LIKE '216%')  
			
			IF (SELECT Status FROM Configuration WHERE ModuleId='RET33' AND ModuleName='Retailer')=1  
			BEGIN     
				IF NOT EXISTS(SELECT '*' FROM Retailer)  
				BEGIN  
					UPDATE CompanyCounters SET CurrValue = 0 WHERE Tabname =  'Retailer' AND Fldname = 'CmpRtrCode'   
				END  
				SELECT @CmpRtrCode=dbo.Fn_GetPrimaryKeyCmpString('Retailer','CmpRtrCode',CAST(YEAR(GetDate()) AS INT),MONTH(GETDATE()))     				
			END  
			ELSE  
			BEGIN  
				SET @CmpRtrCode=@RtrCode  
			END 	
			IF @CmpRtrCode=''  
			BEGIN  
				SET @Po_ErrNo=1    
				SET @Taction=0  
				SET @ErrDesc = 'Company Retailer Code should not be empty'    
				INSERT INTO Errorlog VALUES (21,@Tabname,'Counter Value',@ErrDesc)  
			END  
			IF @RtrId=0  
			BEGIN  
				SET @Po_ErrNo=1    
				SET @Taction=0  
				SET @ErrDesc = 'Reset the Counter Year Value '    
				INSERT INTO Errorlog VALUES (22,@Tabname,'Counter Value',@ErrDesc)  
			END	
			IF @RtrShipId=0  
			BEGIN  
				SET @Po_ErrNo=1    
				SET @Taction=0  
				SET @ErrDesc = 'Reset the Counter Year Value '    
				INSERT INTO Errorlog VALUES (23,@Tabname,'Counter Value',@ErrDesc)  
			END	
			IF @StateName = '' 
			BEGIN
				SET @Po_ErrNo=1    
				SET @Taction=0  
				SET @ErrDesc = 'Sate name Should not be Empty '    
				INSERT INTO Errorlog VALUES (25,@Tabname,'Sate name',@ErrDesc) 			
			
			END
			IF @RetailerType = '' 
			BEGIN
				SET @Po_ErrNo=1    
				SET @Taction=0  
				SET @ErrDesc = 'Retailer Type Should not be Empty '    
				INSERT INTO Errorlog VALUES (26,@Tabname,'Retailer Type',@ErrDesc) 			
			
			END
			ELSE
			BEGIN
				IF Upper(@RetailerType) = 'REGISTERED'
				BEGIN
					IF UPPER(@Composition) NOT IN('YES','NO','')
					BEGIN
						SET @Po_ErrNo=1    
						SET @Taction=0  
						SET @ErrDesc = 'REGISTERED Retailer Composition Should not be Empty OR either Yes / No'    
						INSERT INTO Errorlog VALUES (27,@Tabname,'Composition',@ErrDesc) 			
					
					END
				END
			END	
			IF UPPER(@RelatedParty) NOT IN('YES','NO')
			BEGIN
				SET @Po_ErrNo=1    
				SET @Taction=0  
				SET @ErrDesc = 'Retailer PARTY Should not be yes / No '    
				INSERT INTO Errorlog VALUES (26,@Tabname,'Retailer PARTY',@ErrDesc) 			
			
			END				
		
		IF @Po_ErrNo = 0 AND @Taction = 1
		BEGIN			
			INSERT INTO Retailer(RtrId,RtrCode,RtrName,RtrAdd1,RtrAdd2,RtrAdd3,RtrPinNo,RtrPhoneNo,RtrContactPerson,RtrKeyAcc,
			RtrCovMode,RtrRegDate,RtrDayOff,RtrStatus,RtrTaxable,RtrTaxType,RtrTINNo,RtrDepositAmt,RtrCrBills,RtrCrLimit,RtrCrDays,
			RtrCashDiscPerc,RtrCashDiscCond,RtrCashDiscAmt,GeoMainId,RMId,VillageId,RtrShipId,TaxGroupId,RtrOffPhone2,RtrDOB,
			RtrAnniversary,RtrRemark1,CoaId,RtrOnAcc,RtrType,RtrFrequency,RtrCrBillsAlert,RtrCrLimitAlert,RtrCrDaysAlert,Upload,
			RtrRlStatus,Availability,LastModBy,LastModDate,AuthId,AuthDate,CmpRtrCode,Approved,XMLUpload,RtrPayment,RtrUniqueCode,
			WSUpload,RtrCodeUserInput)
			
			SELECT @RtrId,@RtrCode,@RtrName,@RtrAddress1,@RtrAddress2,@RtrAddress3,@PostalCode,@PhNumber,
			@ContactPerson,@KeyAccId,@RtrCovMode,@RegDate,@RtrDayOff,@Status,(CASE UPPER(@RtrTaxable) WHEN 'YES' THEN 1 ELSE 0 END) RtrTaxable,
			(CASE @TaxType WHEN 'VAT' THEN 0 WHEN 'GST' THEN 2 ELSE 1 END) TaxType
			,@TinNumber,0 RtrDepositAmt,0 RtrCrBills,@RtrCrLimit,@RtrCrDays,@RtrCashDiscPerc,1 RtrCashDiscCond,0 RtrCashDiscAmt,
			@GeoMainId,@RMId,0 VillageId,@RtrShipId,@TaxGroupId,@RtrMobileNo,@RegDate,@RegDate,'Downloaded Retailer',@CoaId,0 RtrOnAcc,
			@RtrTypeID,@RTRFREQUENCYID,0 RtrCrBillsAlert,0 RtrCrLimitAlert,0 RtrCrDaysAlert,'N' Upload,@RelationStatusID,
			1,@Pi_UserId,GETDATE(),@Pi_UserId,GETDATE(),@CmpRtrCode,@ApprovedId,0 XMLUpload,1 RtrPayment,@RtrUniqueCode,
			'N' WSUpload,@RtrCodeUserInput
			
			IF EXISTS (SELECT '*' FROM Retailer WHERE RtrId=@RtrId)  
			BEGIN  
				INSERT INTO CoaMaster (CoaId,AcCode,AcName,AcLevel,MainGroup,Status,Availability,LastModBy,
				LastModDate,AuthId,AuthDate)
				VALUES (@CoaId,@AcCode,@RtrName,4,2,2,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),
				GETDATE(),121))  
			 			
				INSERT INTO RETAILERMARKET(RtrId,RMId,Availability,LastModBy,LastModDate,AuthId,AuthDate,Upload)
				SELECT @Rtrid,@SRMID,1,1,GETDATE(),1,GETDATE(),0
				
				INSERT INTO RetailerValueClassMap(RtrId,RtrValueClassId,Availability,LastModBy,LastModDate,AuthId,AuthDate)
				VALUES(@RtrId,@RtrClassId,1,@Pi_UserId,CONVERT(NVARCHAR(10),GETDATE(),121),@Pi_UserId,
				CONVERT(NVARCHAR(10),GETDATE(),121))
				
				IF ISNULL(@RtrChildId,0) <> 0
				BEGIN
					INSERT INTO Retailerrelation(RtrId,RtrChildId,Availability,LastModBy,LastModDate,AuthId,AuthDate)
					Select @RtrId,@RtrChildId,1,@Pi_UserId,CONVERT(NVARCHAR(10),GETDATE(),121),@Pi_UserId,
					CONVERT(NVARCHAR(10),GETDATE(),121)
				END
								
				INSERT INTO Retailershipadd (RtrShipId,RtrId,RtrShipAdd1,RtrShipAdd2,RtrShipAdd3,RtrShipPinNo,RtrShipPhoneNo,
				RtrShipDefaultAdd,Availability,LastModBy,LastModDate,AuthId,AuthDate,TaxGroupId,StateId,GSTTinNo,Upload)
				SELECT @RtrShipId,@RtrId,@RtrAddress1,@RtrAddress2,@RtrAddress3,@PostalCode,@PhNumber,1,1,@Pi_UserId,
				CONVERT(NVARCHAR(10),GETDATE(),121),@Pi_UserId,CONVERT(NVARCHAR(10),GETDATE(),121),@TaxGroupId,0,'','N'
					
				INSERT INTO ETL_Prk_UdcDetails
				SELECT 'Retailer Master','Latitude', @RtrCode,(CASE @Latitude WHEN '' THEN '0' ELSE @Latitude END) UNION ALL								
				SELECT 'Retailer Master','Longitude', @RtrCode,(CASE @Longitude WHEN '' THEN '0' ELSE @Longitude END) UNION ALL
				SELECT 'Retailer Master','State Name', @RtrCode,@StateName  UNION ALL
				SELECT 'Retailer Master','Retailer Type', @RtrCode,@RetailerType UNION ALL				
				SELECT 'Retailer Master','Composition', @RtrCode,(CASE @Composition WHEN '' THEN 'NA' ELSE @Composition END) UNION ALL
				SELECT 'Retailer Master','PAN Number', @RtrCode,(CASE @PANNumber WHEN '' THEN NULL ELSE @PANNumber END) UNION ALL
				SELECT 'Retailer Master','GSTIN', @RtrCode,(CASE @GSTIN WHEN '' THEN NULL ELSE @GSTIN END) UNION ALL
				SELECT 'Retailer Master','Related Party', @RtrCode,(CASE @RelatedParty WHEN '' THEN 'NO' ELSE @RelatedParty END)
				IF EXISTS(SELECT * FROM ETL_Prk_UdcDetails)
				BEGIN
					EXEC Proc_ValidateUdcDetails 0
				END
				
				UPDATE Counters SET CurrValue = CurrValue+1 WHERE Tabname =  'CoaMaster' AND Fldname = 'CoaId'  
				UPDATE Counters SET CurrValue = CurrValue+1 WHERE Tabname =  'retailershipadd' AND Fldname = 'RtrShipId'  
				UPDATE companycounters SET CurrValue = CurrValue+1 WHERE Tabname =  'Retailer' AND Fldname = 'CmpRtrCode'  
				UPDATE Counters SET CurrValue = CurrValue+1 WHERE Tabname =  'Retailer' AND Fldname = 'RtrId'
				--RtrCode Auto Generate
				IF @AutoRtrCodeConfig=1
				BEGIN
					UPDATE Counters SET CurrValue = CurrValue+1 WHERE TabName = 'Retailer'  AND FldName = 'RtrCode'
				END
				--Till Here
				
			END		  		  
		END
	 FETCH NEXT FROM Cur_RetailerMasterDownload_New INTO @RtrCode,@RtrName,@RtrAddress1,@RtrAddress2,@RtrAddress3,@PostalCode,@PhNumber,
	 @ContactPerson,@RtrKeyAcc,@RtrCovMode,@RegDate,@RtrDayOff,@Status,@RtrTaxable,@TaxType,@TinNumber,@GeoLevel,@GeoLevelValue,
	 @DeliveryRoute,@SalesRoute,@RtrCashDiscPerc,@RtrCrLimit,@RtrCrDays,
	 @RtrTaxGroup,@RtrMobileNo,@FrequencyMode,@RtrUniqueCode,@Approved,@RelationStatus,@ParentCode,
	 @RtrGroupCode,@RtrChannelCode,@RtrClassCode,@RtrType,
	 @Latitude,@Longitude,@StateName,@RetailerType,@Composition,@PANNumber,@GSTIN,@RelatedParty
 END  
 CLOSE Cur_RetailerMasterDownload_New  
 DEALLOCATE Cur_RetailerMasterDownload_New  
 UPDATE C SET C.DownLoadFlag='Y' FROM CN2Cs_Prk_RetailerMasterDownload C INNER JOIN Retailer R ON R.RtrCode=C.RtrCODE 
 UPDATE C SET C.DownLoadFlag='Y' FROM CN2Cs_Prk_RetailerMasterDownload C INNER JOIN Retailer R ON R.RtrCodeUserInput=C.RtrCODE
 RETURN  
END
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Fn_ValidateSaveUDC]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[Fn_ValidateSaveUDC]
GO
--SELECT dbo.Fn_ValidateSaveUDC(79,446,2,'GSTIN','11GPKPM5222K1G5')
CREATE FUNCTION [dbo].[Fn_ValidateSaveUDC](@TransId as INT,@RtrId as BIGINT,@MasterId AS INT,@ColumnName AS VARCHAR(200),@ColumnValue AS VARCHAR(200))
RETURNS VARCHAR(200)
AS
/*********************************
* PROCEDURE		: Fn_ValidateSaveUDC
* PURPOSE		: To Validate UDC 
* CREATED		: S.Moorthi
* CREATED DATE	: 11-05-2017
* MODIFIED
*************************************************************************************************************************************        
* DATE		AUTHOR		CR/BZ   USER STORY ID           DESCRIPTION                                 
*************************************************************************************************************************************        
15/10/2019  Lakshman   BZ		ILCRSTPAR6197			PAN number & GSTIN No Allow duplicate
17-07-2020	Deepan    CR         PARCS202100041      GSTIN fields with validations. 

*********************************/
BEGIN
	DECLARE @ValMsg AS VARCHAR(200)
	SET @ValMsg=''
	DECLARE @PANNO AS NVARCHAR(20)
	DECLARE @GSTIN AS NVARCHAR(20)
	
	IF NOT EXISTS(SELECT * FROM GSTConfiguration (NOLOCK) 
	WHERE ModuleId='GSTCONFIG' and ActivationStatus=1 and 
	ConsoleAckStatus=1)
	BEGIN
		RETURN @ValMsg
	END 
	
	IF @ColumnValue=''
	BEGIN
		SET @ColumnValue='NULL'
	END
	
	IF @TransId=41
	BEGIN
		IF EXISTS(SELECT b.* FROM Retailer A (NOLOCK)
		INNER JOIN UdcDetails B(NOLOCK) ON A.RtrId=B.MasterRecordId 
		INNER JOIN UdcMaster C(NOLOCK) ON C.MasterId=B.MasterId AND C.UdcMasterId=B.UdcMasterId
		WHERE C.ColumnName='Retailer Type' and UPPER(B.ColumnValue)='REGISTERED' AND C.MasteriD=2)
		BEGIN
			IF @ColumnValue='NULL'
			BEGIN
				SET @ColumnValue=''
			END
		END
	END
	
	IF @TransId in (79,41)
	BEGIN
	
	IF @TransId=41  ----Gopi at 25/06/2017 GST10
	 BEGIN
	  IF EXISTS(SELECT b.* FROM Retailer A (NOLOCK)
		INNER JOIN UdcDetails B(NOLOCK) ON A.RtrId=B.MasterRecordId 
		INNER JOIN UdcMaster C(NOLOCK) ON C.MasterId=B.MasterId AND C.UdcMasterId=B.UdcMasterId
		WHERE A.Rtrid=@Rtrid and C.ColumnName='Retailer Type' and UPPER(B.ColumnValue)='UNREGISTERED' AND C.MasteriD=2)
		BEGIN
		   RETURN @ValMsg
		END
	  END  ---Till Here 
	  
	  IF @ColumnName='PAN Number'
		BEGIN	
			IF RTRIM(LTRIM(UPPER(ISNULL(@ColumnValue,'NULL'))))<>'NULL'
			BEGIN
				IF (SELECT DBO.Fn_ISPanNumber(@ColumnValue))=1
				BEGIN
					SET @ValMsg='Invalid Pan Number'
				END
				ELSE
				BEGIN
					SET @PANNO=RTRIM(LTRIM(@ColumnValue))
				END
				
			END
		END
		
		IF UPPER(@ColumnName)='GSTIN'
		BEGIN
			IF RTRIM(LTRIM(UPPER(ISNULL(@ColumnValue,'NULL'))))<>'NULL'
			BEGIN
				IF (SELECT DBO.Fn_ISGSTINNumber(@ColumnValue))=1
				BEGIN					
					SET @ValMsg='Invalid GST Tin Number'					
				END
				ELSE
				BEGIN
					SET @GSTIN=RTRIM(LTRIM(@ColumnValue))
				END
			END
		END
		
		IF @GSTIN<> '' AND @PANNO <> ''
		BEGIN	
				IF (SELECT DBO.Fn_ISPANGSTINNumber(@GSTIN,@PANNO))=1
				BEGIN
					SET @ValMsg='GSTIN NUMBER Should Match PAN NUMBER'
				END
				
		
		END
		--IF @ColumnName='GSTIN' or @ColumnName='PAN Number'
		--BEGIN
		--	IF ISNULL(@ColumnValue,'')<>'' AND ISNULL(@ColumnValue,'NULL')<>'NULL'
		--	BEGIN
		--		IF EXISTS(SELECT UD.* FROM UdcHD A (NOLOCK)
		--			INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId 
		--			INNER JOIN UdcDetails UD (NOLOCK) ON B.MasterId=UD.MasterId and B.UdcMasterId=UD.UdcMasterId 
		--			INNER JOIN Retailer R (NOLOCK) ON R.RtrId=UD.MasterRecordId 
		--			WHERE A.MasterId=@MasterId AND B.ColumnName=@ColumnName and ISNULL(ColumnValue,'')<>''
		--			AND R.RtrId<>@RtrId and ColumnValue=@ColumnValue)
		--		BEGIN
		--			SET @ValMsg='Duplicate '+ @ColumnName +' Not Allow'
		--		END
		--	END
		--END
	END
	
RETURN @ValMsg
END
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Fn_ValidPhoneNo]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[Fn_ValidPhoneNo]
GO
CREATE FUNCTION [dbo].[Fn_ValidPhoneNo](@TransId as INT,@PhoneNO AS VARCHAR(200),@Flag As INT)
RETURNS VARCHAR(200)
AS
/*********************************
* PROCEDURE		: Fn_ValidPhoneLandLine
* PURPOSE		:   
* CREATED		:  
* CREATED DATE	:  
* MODIFIED
*************************************************************************************************** 
* DATE				AUTHOR      CR/BZ       USER STORY ID       DESCRIPTION                           
***************************************************************************************************  
 17-07-2020	     Deepan			 CR          PARCS202100041      Phone No fields with validations. 
**************************************************************************************************************************************/
BEGIN
	DECLARE @ValMsg Varchar(200)
	SET @ValMsg = ''
	IF LEN(LTRIM(RTRIM(@PhoneNO))) > 0--(LTRIM(RTRIM(@PhoneNO)) <> '0' OR LTRIM(RTRIM(@PhoneNO)) <> '')
	BEGIN
		IF (SUBSTRING(@PhoneNO,1,1) = '1' OR SUBSTRING(@PhoneNO,1,1) = '2' OR SUBSTRING(@PhoneNO,1,1) = '3' OR 
		SUBSTRING(@PhoneNO,1,1) = '4' OR SUBSTRING(@PhoneNO,1,1) = '5' OR SUBSTRING(@PhoneNO,1,1) = '0')
		BEGIN
			SET  @ValMsg = 'Mobile Number should start with 6,7,8,9'
		END
		IF LEN(LTRIM(RTRIM(@PhoneNO)))<>10
		BEGIN
			SET  @ValMsg = 'Mobile Number should be 10 Digits'
		END
	END
	ELSE
	BEGIN
		SET  @ValMsg = 'Mobile Number Should be Mandatory'
	END
	
RETURN @ValMsg
END
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Fn_ValidPinCode]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[Fn_ValidPinCode]
GO
CREATE FUNCTION [dbo].[Fn_ValidPinCode](@TransId as INT,@Pincode AS VARCHAR(200))
RETURNS VARCHAR(200)
AS
/*********************************
* PROCEDURE		: Fn_ValidPinCode
* PURPOSE		:   
* CREATED		:  
* CREATED DATE	:  
* MODIFIED
*************************************************************************************************** 
* DATE				AUTHOR      CR/BZ       USER STORY ID       DESCRIPTION                           
***************************************************************************************************  
 17-07-2020	     Deepan			 CR          PARCS202100041      PinCode fields with validations. 
**************************************************************************************************************************************/
BEGIN
	DECLARE @ValMsg Varchar(200)
	SET @ValMsg = ''
	IF LEN(LTRIM(RTRIM(@Pincode))) > 0
	BEGIN
		IF (SUBSTRING(@Pincode,1,1) = '0')
		BEGIN
			SET  @ValMsg = 'PinCode should not start with 0'
		END
		IF LEN(LTRIM(RTRIM(@Pincode)))<>6
		BEGIN
			SET  @ValMsg = 'PinCode should be 6 Digits'
		END
	END
	ELSE
	BEGIN
		SET  @ValMsg = 'Pin Code Should be Mandatory'
	END
	
RETURN @ValMsg
END
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Fn_ISPANGSTINNumber]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[Fn_ISPANGSTINNumber]
GO
CREATE FUNCTION [dbo].[Fn_ISPANGSTINNumber](@gSTIN AS NVarchar(20),@PANNO AS NVarchar(20))--,@StateId as Int
RETURNS INT
/*********************************
* FUNCTION: Fn_ISPANGSTINNumber
* PURPOSE: GSTIN AND PAN Number Validation
* NOTES: 
* CREATED: Deepan
* MODIFIED 
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* 17-07-2020	Deepan    CR         PARCS202100041      GSTIN fields with validations. 
*********************************/
AS
BEGIN
	DECLARE @GSTINNO NVARCHAR(20)
	DECLARE @PANGSTINNumber AS TINYINT
	SET @PANGSTINNumber=0
	SELECT @GSTINNO=SUBSTRING(@gSTIN,3,10)
	
	 IF(@GSTINNO <> @PANNO)
		BEGIN							
			SET @PANGSTINNumber=1
		END
	

	RETURN @PANGSTINNumber
	
END
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Fn_RtrStatusCheck]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [Fn_RtrStatusCheck]
GO
create FUNCTION [Fn_RtrStatusCheck](@RtrId As INT)
RETURNS VARCHAR(200)
AS
/*********************************
* PROCEDURE		: Fn_ValidPhoneLandLine
* PURPOSE		:   
* CREATED		:  
* CREATED DATE	:  
* MODIFIED
*************************************************************************************************** 
* DATE				AUTHOR      CR/BZ       USER STORY ID       DESCRIPTION                           
***************************************************************************************************  
 19-07-2020	     Deepan			 CR          PARCS202100041      RtrStatus fields with validations. 
**************************************************************************************************************************************/
BEGIN
	DECLARE @ValMsg Varchar(200)
	SET @ValMsg = ''
	IF EXISTS(SELECT * FROM Retailer(Nolock) WHERE RTRSTATUS =0 AND RTRID =@RtrId)
	BEGIN
		
			SET  @ValMsg = 'Retailer has been InActivated.We can not edit the Retailer'
	END
	
RETURN @ValMsg
END
GO
DELETE FROM HotsearchEditorHd WHERE FormId=41
INSERT INTO HotsearchEditorHd(FormId,FormName,ControlName,SltString,RemainsltString)
SELECT 41,'Retailer Master','Route','select','SELECT RMId,RMCode,RMName FROM RouteMaster WHERE RMSRouteType=1 AND RMName <>''Dummy Route'''
GO
DELETE FROM HotsearchEditorHd WHERE FormId=43
INSERT INTO HotsearchEditorHd(FormId,FormName,ControlName,SltString,RemainsltString)
SELECT 43,'Retailer Master','DeliveryRoute','select','SELECT RMId,RMCode,RMName FROM RouteMaster WHERE RMSRouteType=2 AND RMName <>''Dummy Route'''
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Fn_ValidRetailerTaxGroup]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[Fn_ValidRetailerTaxGroup]
GO
CREATE FUNCTION [dbo].[Fn_ValidRetailerTaxGroup](@TransId as INT,@RtrId Int,@RtrTaxGroup as Varchar(50),@StateName as Varchar(50))
RETURNS VARCHAR(200)
AS
/*********************************
* PROCEDURE		: Fn_ValidRetailerTaxGroup
* PURPOSE		:   
* CREATED		:  
* CREATED DATE	:  
* MODIFIED
*************************************************************************************************** 
* DATE				AUTHOR      CR/BZ       USER STORY ID       DESCRIPTION                           
***************************************************************************************************  
 17-07-2020	   '  Deepan			 CR          PARCS202100041      TaxGroup fields with validations. 
**************************************************************************************************************************************/
BEGIN
			DECLARE @ValMsg Varchar(200)
			SET @ValMsg = ''
			Declare @DistState Varchar(50)
			Declare @DistId Int
			Declare @RtrState Varchar(50)
			Declare @CmpRtrCode Varchar(50)
			
			SELECT TOP 1 @DistState=ISNULL(S.StateCode,''),@DistId=D.DistributorId FROM UdcMaster U (NOLOCK) 
			INNER JOIN UdcDetails UD (NOLOCK) ON U.MasterId=UD.MasterId and U.UdcMasterId=UD.UdcMasterId
			INNER JOIN Distributor D (NOLOCK) ON D.DistributorId=UD.MasterRecordId
			INNER JOIN StateMaster S (NOLOCK) ON S.StateName=UD.ColumnValue
			WHERE U.MasterId=16 and ColumnName='State Name'
			
			--SELECT DISTINCT @RtrState= StateCode ,@CmpRtrCode=CmpRtrCode 
			--FROM UdcMaster U (NOLOCK) 
			--INNER JOIN UdcDetails UD (NOLOCK) ON U.MasterId=UD.MasterId and U.UdcMasterId=UD.UdcMasterId
			--INNER JOIN Retailer D (NOLOCK) ON D.RtrId=UD.MasterRecordId
			--INNER JOIN StateMaster S (NOLOCK) ON S.StateName=UD.ColumnValue
			--WHERE U.MasterId=2 and ColumnName='State Name' and D.RtrId=@RtrId and LEN(LTRIM(RTRIM(ISNULL(ColumnValue,''))))>0
			
			SELECT @RtrState = StateCode FROM StateMaster(NOLOCK) WHERE StateName =@StateName
			
			IF @DistState <> @RtrState and @RtrTaxGroup='Retailer Intra'
			BEGIN
				SET  @ValMsg ='Distributor state and Retailer state are different.Choose RtrInter in Retailer group to save'
			END
			IF @DistState = @RtrState and @RtrTaxGroup='Retailer Inter'
			BEGIN
				SET  @ValMsg ='Distributor state and Retailer state are Same.Choose RtrIntra in Retailer group to save'
			END
			IF ((@RtrTaxGroup<>'Retailer Intra') AND (@RtrTaxGroup<>'Retailer Inter'))
			BEGIN
				SET  @ValMsg ='BOTH Tax Group not Available'
			END
			
			RETURN @ValMsg
END
GO
---Deepan Till Here
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE NAME='RtrLandLine' AND id = OBJECT_ID('Cs2Cn_Prk_Retailer'))
BEGIN
	ALTER TABLE Cs2Cn_Prk_Retailer ADD  RtrLandLine NVARCHAR(50) DEFAULT '' WITH VALUES
END
GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE NAME='ReasonCode' AND id = OBJECT_ID('Cs2Cn_Prk_Retailer'))
BEGIN
	ALTER TABLE Cs2Cn_Prk_Retailer ADD  ReasonCode NVARCHAR(50) DEFAULT '' WITH VALUES
END
GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE NAME='ReasonName' AND id = OBJECT_ID('Cs2Cn_Prk_Retailer'))
BEGIN
	ALTER TABLE Cs2Cn_Prk_Retailer ADD  ReasonName NVARCHAR(150) DEFAULT '' WITH VALUES
END
GO
IF NOT EXISTS(SELECT 'X' FROM SYSCOLUMNS A INNER JOIN SYSOBJECTS B ON A.ID=B.ID 
WHERE B.XTYPE='U' AND A.name='RtrCodeUserInput' AND B.name='Cs2Cn_Prk_Retailer')
BEGIN
	ALTER TABLE Cs2Cn_Prk_Retailer ADD RtrCodeUserInput Varchar(100) DEFAULT '' WITH VALUES
END
GO
IF NOT EXISTS(SELECT 'X' FROM SYSCOLUMNS A INNER JOIN SYSOBJECTS B ON A.ID=B.ID 
WHERE B.XTYPE='U' AND A.name='RtrCodeUserInput' AND B.name='Cn2Cs_Prk_RetailerMigration')
BEGIN
	ALTER TABLE Cn2Cs_Prk_RetailerMigration ADD RtrCodeUserInput Varchar(100) DEFAULT '' WITH VALUES
END
GO
IF NOT EXISTS(SELECT 'X' FROM SYSCOLUMNS A INNER JOIN SYSOBJECTS B ON A.ID=B.ID 
WHERE B.XTYPE='U' AND A.name='RtrCodeUserInput' AND B.name='RetailerMasterMigration')
BEGIN
	ALTER TABLE RetailerMasterMigration ADD RtrCodeUserInput Varchar(100) DEFAULT '' WITH VALUES
END
GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE NAME='RtrLandLine' AND id = OBJECT_ID('Cn2Cs_Prk_RetailerReDownload'))
BEGIN
	ALTER TABLE Cn2Cs_Prk_RetailerReDownload ADD  RtrLandLine NVARCHAR(50) DEFAULT '' WITH VALUES
END
GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE NAME='ReasonCode' AND id = OBJECT_ID('Cn2Cs_Prk_RetailerReDownload'))
BEGIN
	ALTER TABLE Cn2Cs_Prk_RetailerReDownload ADD  ReasonCode NVARCHAR(50) DEFAULT '' WITH VALUES
END
GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE NAME='RtrCodeUserInput' AND id = OBJECT_ID('Cn2Cs_Prk_RetailerReDownload'))
BEGIN
	ALTER TABLE Cn2Cs_Prk_RetailerReDownload ADD  RtrCodeUserInput NVARCHAR(150) DEFAULT '' WITH VALUES
END
GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE NAME='RtrLandLine' AND id = OBJECT_ID('RetailerReDownloadTracking'))
BEGIN
	ALTER TABLE RetailerReDownloadTracking ADD  RtrLandLine NVARCHAR(50) DEFAULT '' WITH VALUES
END
GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE NAME='ReasonCode' AND id = OBJECT_ID('RetailerReDownloadTracking'))
BEGIN
	ALTER TABLE RetailerReDownloadTracking ADD  ReasonCode NVARCHAR(50) DEFAULT '' WITH VALUES
END
GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE NAME='RtrCodeUserInput' AND id = OBJECT_ID('RetailerReDownloadTracking'))
BEGIN
	ALTER TABLE RetailerReDownloadTracking ADD  RtrCodeUserInput NVARCHAR(150) DEFAULT '' WITH VALUES
END
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Proc_Cn2Cs_RetailerMigration]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Proc_Cn2Cs_RetailerMigration]
GO
/*
Begin transaction
delete from ErrorLog
select * from RetailerMasterMigration
exec Proc_Cn2Cs_RetailerMigration 0
select * from RetailerMasterMigration
select * from ErrorLog
rollback transaction
*/  
CREATE PROCEDURE [Proc_Cn2Cs_RetailerMigration]
(
	@Po_ErrNo INT OUTPUT
)
AS
/*********************************
* PROCEDURE		: Proc_Cn2Cs_RetailerMigration 0
* PURPOSE		: Retailer to be Migrated from One DB to Other DB
* CREATED		: Sathishkumar Veeramani
* CREATED DATE	: 06/06/2014
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* DATE       AUTHOR     CR/BZ	USER STORY ID           DESCRIPTION                         
***************************************************************************************************
17-01-2018  lakshman M   BZ     ICRSTPAR7316          Retailer Tin No & Retailer Phone Number null values validation removed in Core stocky.
03-02-2018  lakshman M   BZ     ICRSTPAR7619          RtrPhone Number & RtrTinNumber Null values allowed in RetailerMasterMigartion Table
28-12-2018  Lakshman M   SR     ILCRSTPAR2934         As per client request Retailer default taxgroup validation included in core stocky.
22-06-2020	MOHANA S	 BZ		PARCS202100035		  NEW COLUMN IS NOT DOWNLOADED FOR SALEMAN. HENCE NULL ERROR OCURRED WHILE LOADING IN SALESMAN SCREEN
20-07-2020  Deepan       CR     PARCS202100041         USER INPUT added

***************************************************************************************************/
SET NOCOUNT ON
BEGIN
SET @Po_ErrNo=0
DECLARE @CmpId AS NUMERIC(18,0)
DECLARE @SmId AS NUMERIC(18,0)
DECLARE @RmId AS NUMERIC(18,0)
DECLARE @DlvRmId AS NUMERIC(18,0)
DECLARE @UdcMasterId AS NUMERIC(18,0)
DECLARE @DistCode AS NVARCHAR(200)
DECLARE @Taxgroupid AS INT
DELETE FROM Cn2Cs_Prk_RetailerMigration WHERE DownLoadFlag = 'Y'
SELECT @DistCode = DistributorCode FROM Distributor WITH(NOLOCK)
SELECT @CmpId = CmpId FROM Company (NOLOCK) WHERE DefaultCompany = 1
	
	CREATE TABLE #ToAvoidRetailerMigration
	(
	  SalesmanCode   NVARCHAR(200),
	  SalRouteCode   NVARCHAR(200),
	  DlvRouteCode   NVARCHAR(200), 
	  RetailerCode   NVARCHAR(200),
	  GeoLevel       NVARCHAR(200),
	  GeoCode        NVARCHAR(200)
	)
	
	--Route Geography Level Validation
	INSERT INTO #ToAvoidRetailerMigration(SalRouteCode,DlvRouteCode,GeoLevel)
	SELECT DISTINCT SalRouteCode,DlvRouteCode,RouteGeoLevel FROM Cn2Cs_Prk_RetailerMigration WITH(NOLOCK) WHERE RouteGeoLevel NOT IN 
	(SELECT GeoLevelName FROM GeographyLevel (NOLOCK)) AND DownloadFlag = 'D'
	
	INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)	
	SELECT DISTINCT 1,'GeographyLevel','GeoLevelName','Route Geography Level Not Available-'+RouteGeoLevel FROM Cn2Cs_Prk_RetailerMigration WITH(NOLOCK) 
	WHERE RouteGeoLevel NOT IN (SELECT GeoLevelName FROM GeographyLevel (NOLOCK)) AND DownloadFlag = 'D'
	
	--Route Geography Value Validation
	INSERT INTO #ToAvoidRetailerMigration(SalRouteCode,DlvRouteCode,GeoCode)
	SELECT DISTINCT SalRouteCode,DlvRouteCode,RouteGeoCode FROM Cn2Cs_Prk_RetailerMigration WITH(NOLOCK) WHERE RouteGeoCode NOT IN 
	(SELECT GeoCode FROM Geography (NOLOCK)) AND DownloadFlag = 'D'
	
	INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)	
	SELECT DISTINCT 1,'Geography','GeoCode','Route Geography Not Available-'+RouteGeoCode FROM Cn2Cs_Prk_RetailerMigration WITH(NOLOCK) 
	WHERE RouteGeoCode NOT IN (SELECT GeoCode FROM Geography (NOLOCK)) AND DownloadFlag = 'D'
	
	INSERT INTO #ToAvoidRetailerMigration(SalRouteCode,DlvRouteCode,GeoCode)
	SELECT DISTINCT SalRouteCode,DlvRouteCode,RouteGeoCode FROM Cn2Cs_Prk_RetailerMigration A (NOLOCK) WHERE NOT EXISTS 
	(SELECT DISTINCT GeoLevelName,GeoCode FROM GeographyLevel B (NOLOCK) INNER JOIN Geography C (NOLOCK) ON B.GeoLevelId = C.GeoLevelId
	WHERE A.RouteGeoLevel = B.GeoLevelName AND A.RouteGeoCode = C.GeoCode)
	 
	INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)	
	SELECT DISTINCT 1,'Geography','GeoCode','Route Geography Wrongly Mapped-'+RouteGeoLevel+'-'+RouteGeoCode	
	FROM Cn2Cs_Prk_RetailerMigration A (NOLOCK) WHERE NOT EXISTS (SELECT DISTINCT GeoLevelName,GeoCode FROM GeographyLevel B (NOLOCK) 
	INNER JOIN Geography C (NOLOCK) ON B.GeoLevelId = C.GeoLevelId WHERE A.RouteGeoLevel = B.GeoLevelName AND A.RouteGeoCode = C.GeoCode)
	
	--Salesman Details Validation
	INSERT INTO #ToAvoidRetailerMigration(SalesmanCode)
	SELECT DISTINCT SalesManCode FROM Cn2Cs_Prk_RetailerMigration WITH(NOLOCK) WHERE SalesManName IN 
	(SELECT SmName FROM Salesman WITH(NOLOCK)) AND DownloadFlag = 'D'
	
	--INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)	
	--SELECT DISTINCT 1,'Salesman','Salesman Name','Salesman Name Already Availabe-'+SalesManName 
	--FROM Cn2Cs_Prk_RetailerMigration WITH(NOLOCK) WHERE SalesManName IN (SELECT SmName FROM Salesman WITH(NOLOCK)) AND DownloadFlag = 'D'
	
	--Sales Route Details Validation
	INSERT INTO #ToAvoidRetailerMigration(SalRouteCode)
	SELECT DISTINCT SalRouteCode FROM Cn2Cs_Prk_RetailerMigration WITH(NOLOCK) WHERE SalRouteName IN 
	(SELECT RMName FROM RouteMaster WITH(NOLOCK) WHERE RMSRouteType = 1) AND DownloadFlag = 'D'
	
	--INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)	
	--SELECT DISTINCT 1,'RouteMaster','Route Name','Sales Route Name Already Availabe-'+SalRouteName FROM Cn2Cs_Prk_RetailerMigration WITH(NOLOCK) 
	--WHERE SalRouteName IN (SELECT RMName FROM RouteMaster WITH(NOLOCK) WHERE RMSRouteType = 1) AND DownloadFlag = 'D'
	
	--Delivery Route Details Validation
	INSERT INTO #ToAvoidRetailerMigration(DlvRouteCode)
	SELECT DISTINCT DlvRouteCode FROM Cn2Cs_Prk_RetailerMigration WITH(NOLOCK) WHERE DlvRouteName IN 
	(SELECT RMName FROM RouteMaster WITH(NOLOCK) WHERE RMSRouteType = 2) AND DownloadFlag = 'D'
	
	--INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)	
	--SELECT DISTINCT 1,'RouteMaster','Route Name','Delivery Route Name Already Availabe-'+DlvRouteName FROM Cn2Cs_Prk_RetailerMigration WITH(NOLOCK) 
	--WHERE DlvRouteName IN (SELECT RMName FROM RouteMaster WITH(NOLOCK) WHERE RMSRouteType = 2) AND DownloadFlag = 'D'
	
	--Retailer Details Validation
	--Retailer UNIQUE Code
	INSERT INTO #ToAvoidRetailerMigration(RetailerCode)
	SELECT DISTINCT CmpRtrCode FROM Cn2Cs_Prk_RetailerMigration A WITH(NOLOCK) WHERE EXISTS(
	SELECT * FROM RETAILER B WHERE A.RtrUniqueCode=B.RtrUniqueCode) AND DownloadFlag = 'D'
--	(RtrCode IS NULL OR RtrCode = '') AND DownloadFlag = 'D'
	
	INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)	
	SELECT DISTINCT 1,'Retailer','RtrUniqueCode','Duplicate Retailer Unique Code Not Allow-'+RtrUniqueCode FROM Cn2Cs_Prk_RetailerMigration A WITH(NOLOCK) WHERE EXISTS(
	SELECT * FROM RETAILER B WHERE A.RtrUniqueCode=B.RtrUniqueCode) AND DownloadFlag = 'D'
	
	
	--Retailer UNIQUE Code
	INSERT INTO #ToAvoidRetailerMigration(RetailerCode)
	SELECT DISTINCT CmpRtrCode FROM Cn2Cs_Prk_RetailerMigration WITH(NOLOCK) WHERE (RtrUniqueCode IS NULL OR RtrUniqueCode = '') AND DownloadFlag = 'D'
	
	INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)	
	SELECT DISTINCT 1,'Retailer','RtrUniqueCode','Retailer Unique Code Should Not be Empty-'+RtrCode FROM Cn2Cs_Prk_RetailerMigration WITH(NOLOCK) 
	WHERE (RtrUniqueCode IS NULL OR RtrUniqueCode = '') AND DownloadFlag = 'D'
		
	----Duplicate Retailer Phone No & Tin No.
	INSERT INTO #ToAvoidRetailerMigration(RetailerCode)
	SELECT DISTINCT CmpRtrCode FROM Cn2Cs_Prk_RetailerMigration A WITH(NOLOCK) WHERE 
	EXISTS(SELECT RTRID FROM RETAILER B(NOLOCK) WHERE A.RtrPhoneNo=B.RtrPhoneNo) AND DownloadFlag = 'D'
	And ISNULL(A.RTRPHONENO,'') <> ''
	
	INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)	
	SELECT DISTINCT 1,'Retailer','RtrPhoneNo','Duplicate Phone Number Not allow-'+RtrCode FROM Cn2Cs_Prk_RetailerMigration A WITH(NOLOCK) WHERE 
	EXISTS(SELECT RTRID FROM RETAILER B(NOLOCK) WHERE A.RtrPhoneNo=B.RtrPhoneNo) AND DownloadFlag = 'D'
	AND ISNULL(A.RTRPHONENO,'') <> ''
	
	INSERT INTO #ToAvoidRetailerMigration(RetailerCode)
	SELECT DISTINCT CmpRtrCode FROM Cn2Cs_Prk_RetailerMigration A WITH(NOLOCK) WHERE 
	EXISTS(SELECT RTRID FROM RETAILER B(NOLOCK) WHERE A.RtrTinNumber=B.RtrTINNo) AND DownloadFlag = 'D'
	AND ISNULL(A.RtrTinNumber,'') <> ''
	----------------- Retailer Tin No validation commented by lakshman M on 17/01/2018 PMS ID: ICRSTPAR7316 --------------------
	--INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)	
	--SELECT DISTINCT 1,'Retailer','RtrTinNumber','Duplicate Tin Number Not allow-'+RtrCode FROM Cn2Cs_Prk_RetailerMigration A WITH(NOLOCK) WHERE 
	--EXISTS(SELECT RTRID FROM RETAILER B(NOLOCK) WHERE A.RtrTinNumber=B.RtrTINNo) AND DownloadFlag = 'D'
	--AND ISNULL(A.RtrTinNumber,'') <> ''
	
	--INSERT INTO #ToAvoidRetailerMigration(RetailerCode)
	--SELECT DISTINCT CmpRtrCode FROM Cn2Cs_Prk_RetailerMigration A WITH(NOLOCK) WHERE LEN(RtrTinNumber) NOT BETWEEN 8 AND 12 AND DownloadFlag = 'D'
	--INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)	
	--SELECT DISTINCT 1,'Retailer','RtrTinNumber','Tin Number length Should be between 8 to 12-'+RtrCode FROM Cn2Cs_Prk_RetailerMigration A WITH(NOLOCK) WHERE 
	--LEN(RtrTinNumber) NOT BETWEEN 8 AND 12 AND DownloadFlag = 'D'
	
	--INSERT INTO #ToAvoidRetailerMigration(RetailerCode)
	--SELECT DISTINCT CmpRtrCode FROM Cn2Cs_Prk_RetailerMigration A WITH(NOLOCK) WHERE LEN(RtrPhoneNo) NOT BETWEEN 8 AND 10 AND DownloadFlag = 'D'
	--INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)	
	--SELECT DISTINCT 1,'Retailer','RtrPhoneNo','Phone Number length Should be between 8 to 10-'+RtrCode FROM Cn2Cs_Prk_RetailerMigration A WITH(NOLOCK) WHERE 
	--LEN(RtrPhoneNo) NOT BETWEEN 8 AND 10 AND DownloadFlag = 'D'
---------------------- Till Here ---------------------
	--Retailer Code
	INSERT INTO #ToAvoidRetailerMigration(RetailerCode)
	SELECT DISTINCT CmpRtrCode FROM Cn2Cs_Prk_RetailerMigration WITH(NOLOCK) WHERE (RtrCode IS NULL OR RtrCode = '') AND DownloadFlag = 'D'
	
	INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)	
	SELECT DISTINCT 1,'Retailer','RtrCode','Retailer Code Should Not be Empty-'+RtrCode FROM Cn2Cs_Prk_RetailerMigration WITH(NOLOCK) 
	WHERE (RtrCode IS NULL OR RtrCode = '') AND DownloadFlag = 'D'
	
	--Company Retailer Code
	INSERT INTO #ToAvoidRetailerMigration(RetailerCode)
	SELECT DISTINCT CmpRtrCode FROM Cn2Cs_Prk_RetailerMigration WITH(NOLOCK) WHERE (CmpRtrCode IS NULL OR CmpRtrCode = '') AND DownloadFlag = 'D'
	
	INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)	
	SELECT DISTINCT 1,'Retailer','RtrCode','Company Retailer Code Should Not be Empty-'+CmpRtrCode FROM Cn2Cs_Prk_RetailerMigration WITH(NOLOCK) 
	WHERE (CmpRtrCode IS NULL OR CmpRtrCode = '') AND DownloadFlag = 'D'
	
	--Retailer Name
	INSERT INTO #ToAvoidRetailerMigration(RetailerCode)
	SELECT DISTINCT CmpRtrCode FROM Cn2Cs_Prk_RetailerMigration WITH(NOLOCK) WHERE (RtrName IS NULL OR RtrName = '') AND DownloadFlag = 'D'
	
	INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)	
	SELECT DISTINCT 1,'Retailer','RtrCode','Retailer Name Should Not be Empty-'+RtrName FROM Cn2Cs_Prk_RetailerMigration WITH(NOLOCK) 
	WHERE (RtrName IS NULL OR RtrName = '') AND DownloadFlag = 'D'
	
	--Retailer Address
	INSERT INTO #ToAvoidRetailerMigration(RetailerCode)
	SELECT DISTINCT CmpRtrCode FROM Cn2Cs_Prk_RetailerMigration WITH(NOLOCK) WHERE (RtrAddress1 IS NULL OR RtrAddress1 = '') AND DownloadFlag = 'D'
	
	INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)	
	SELECT DISTINCT 1,'Retailer','RtrCode','Retailer Address1 Should Not be Empty-'+RtrAddress1 FROM Cn2Cs_Prk_RetailerMigration WITH(NOLOCK) 
	WHERE (RtrAddress1 IS NULL OR RtrAddress1 = '') AND DownloadFlag = 'D'
	
	--Retailer Geography Level Validation
	INSERT INTO #ToAvoidRetailerMigration(RetailerCode)
	SELECT DISTINCT CmpRtrCode FROM Cn2Cs_Prk_RetailerMigration WITH(NOLOCK) WHERE RetailerGeoLevel NOT IN 
	(SELECT GeoLevelName FROM GeographyLevel (NOLOCK)) AND DownloadFlag = 'D'
	
	INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)	
	SELECT DISTINCT 1,'GeographyLevel','GeoLevelName','Retailer Geography Level Not Available-'+RetailerGeoLevel FROM Cn2Cs_Prk_RetailerMigration WITH(NOLOCK) 
	WHERE RetailerGeoLevel NOT IN (SELECT GeoLevelName FROM GeographyLevel (NOLOCK)) AND DownloadFlag = 'D'
	
	INSERT INTO #ToAvoidRetailerMigration(RetailerCode)
	SELECT DISTINCT CmpRtrCode FROM (SELECT DISTINCT CmpRtrCode,COUNT(DISTINCT RetailerGeoLevel) AS RetailerGeoLevel 
	FROM Cn2Cs_Prk_RetailerMigration WITH(NOLOCK) WHERE DownloadFlag = 'D' GROUP BY CmpRtrCode HAVING COUNT(DISTINCT RetailerGeoLevel) > 1)Qry
	
	INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)	
	SELECT DISTINCT 1,'GeographyLevel','GeoLevelName','Retailer Geography Level Should be Same-'+CmpRtrCode FROM (
	SELECT DISTINCT CmpRtrCode,COUNT(DISTINCT RetailerGeoLevel) AS Counts FROM Cn2Cs_Prk_RetailerMigration WITH(NOLOCK) WHERE DownloadFlag = 'D'
	GROUP BY CmpRtrCode HAVING COUNT(DISTINCT RetailerGeoLevel) > 1)Qry
	
	--Retailer Geography Value Validation
	INSERT INTO #ToAvoidRetailerMigration(RetailerCode)
	SELECT DISTINCT CmpRtrCode FROM Cn2Cs_Prk_RetailerMigration WITH(NOLOCK) WHERE RetailerGeoCode NOT IN 
	(SELECT GeoName FROM Geography (NOLOCK)) AND DownloadFlag = 'D'
	
	INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)	
	SELECT DISTINCT 1,'Geography','GeoCode','Retailer Geography Not Available-'+RetailerGeoCode FROM Cn2Cs_Prk_RetailerMigration WITH(NOLOCK) 
	WHERE RetailerGeoCode NOT IN (SELECT GeoName FROM Geography (NOLOCK)) AND DownloadFlag = 'D'
	
	INSERT INTO #ToAvoidRetailerMigration(RetailerCode)
	SELECT DISTINCT CmpRtrCode FROM (SELECT DISTINCT CmpRtrCode,COUNT(DISTINCT RetailerGeoCode) AS RetailerGeoCode 
	FROM Cn2Cs_Prk_RetailerMigration WITH(NOLOCK) WHERE DownloadFlag = 'D' GROUP BY CmpRtrCode HAVING COUNT(DISTINCT RetailerGeoCode) > 1)Qry
	
	INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)	
	SELECT DISTINCT 1,'GeographyLevel','GeoLevelName','Retailer Geography Should be Same-'+CmpRtrCode FROM (
	SELECT DISTINCT CmpRtrCode,COUNT(DISTINCT RetailerGeoCode) AS RetailerGeoCode FROM Cn2Cs_Prk_RetailerMigration WITH(NOLOCK) WHERE DownloadFlag = 'D' 
	GROUP BY CmpRtrCode HAVING COUNT(DISTINCT RetailerGeoCode) > 1)Qry
	
	INSERT INTO #ToAvoidRetailerMigration(RetailerCode)
	SELECT DISTINCT CmpRtrCode FROM Cn2Cs_Prk_RetailerMigration A (NOLOCK) WHERE NOT EXISTS 
	(SELECT DISTINCT GeoLevelName,GeoCode FROM GeographyLevel B (NOLOCK) INNER JOIN Geography C (NOLOCK) ON B.GeoLevelId = C.GeoLevelId
	WHERE A.RetailerGeoLevel = B.GeoLevelName AND A.RetailerGeoCode = C.GeoName)
	 
	INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)	
	SELECT DISTINCT 1,'Geography','GeoCode','Retailer Geography Wrongly Mapped-'+RetailerGeoLevel+'-'+RetailerGeoCode 
	FROM Cn2Cs_Prk_RetailerMigration A (NOLOCK) WHERE NOT EXISTS (SELECT DISTINCT GeoLevelName,GeoCode FROM GeographyLevel B (NOLOCK) 
	INNER JOIN Geography C (NOLOCK) ON B.GeoLevelId = C.GeoLevelId WHERE A.RetailerGeoLevel = B.GeoLevelName AND A.RetailerGeoCode = C.GeoName)
	
	--Retailer Multiple Delivery Route
	INSERT INTO #ToAvoidRetailerMigration(RetailerCode)
	SELECT DISTINCT CmpRtrCode FROM (
	SELECT DISTINCT CmpRtrCode,COUNT(DISTINCT DlvRouteCode) AS Counts FROM Cn2Cs_Prk_RetailerMigration WITH(NOLOCK) WHERE DownloadFlag = 'D'
	GROUP BY CmpRtrCode	HAVING COUNT(DISTINCT DlvRouteCode) >1) Qry
	
	INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)	
	SELECT DISTINCT 1,'Route','RMcode','Retailer Delivery Route Should be Same-'+CmpRtrCode FROM (
	SELECT DISTINCT CmpRtrCode,COUNT(DISTINCT DlvRouteCode) AS Counts FROM Cn2Cs_Prk_RetailerMigration WITH(NOLOCK) WHERE DownloadFlag = 'D' 
	GROUP BY CmpRtrCode	HAVING COUNT(DISTINCT DlvRouteCode) >1) Qry	
	
	--Retailer Category Value Class	Validation
	INSERT INTO #ToAvoidRetailerMigration(RetailerCode)
    SELECT CmpRtrCode FROM Cn2Cs_Prk_RetailerMigration A WITH(NOLOCK) WHERE DownLoadFlag = 'D' AND NOT EXISTS (
    SELECT DISTINCT C.CtgCode,D.CtgCode,E.ValueClassCode FROM RetailerCategoryLevel B WITH(NOLOCK)
    INNER JOIN RetailerCategory C WITH(NOLOCK) ON B.CtgLevelId = C.CtgLevelId 
    INNER JOIN RetailerCategory D WITH(NOLOCK) ON C.CtgMainId = D.CtgLinkId 
    INNER JOIN RetailerValueClass E WITH(NOLOCK) ON D.CtgMainId = E.CtgMainId WHERE A.RtrChannelCode = C.CtgCode AND
    A.RtrGroupCode = D.CtgCode AND A.RtrClassCode = E.ValueClassCode)
	
	INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)	
	SELECT DISTINCT 1,'RetailerValueClass','ValueClassCode','Retailer Category and Value Class Not Available-'+
	RtrChannelCode+'-'+RtrGroupCode+'-'+RtrClassCode FROM Cn2Cs_Prk_RetailerMigration A WITH(NOLOCK) WHERE DownLoadFlag = 'D' AND NOT EXISTS (
    SELECT DISTINCT C.CtgCode,D.CtgCode,E.ValueClassCode FROM RetailerCategoryLevel B WITH(NOLOCK)
    INNER JOIN RetailerCategory C WITH(NOLOCK) ON B.CtgLevelId = C.CtgLevelId 
    INNER JOIN RetailerCategory D WITH(NOLOCK) ON C.CtgMainId = D.CtgLinkId 
    INNER JOIN RetailerValueClass E WITH(NOLOCK) ON D.CtgMainId = E.CtgMainId WHERE A.RtrChannelCode = C.CtgCode AND
    A.RtrGroupCode = D.CtgCode AND A.RtrClassCode = E.ValueClassCode)
    -- Phone & Tin Number Dublicate Validation
	--IF EXISTS (SELECT '*' FROM Configuration WHERE ModuleId = 'GENCONFIG30' AND ModuleName = 'General Configuration' AND Status = 1)
	--BEGIN
	--	INSERT INTO #ToAvoidRetailerMigration(RetailerCode)		
	--	SELECT DISTINCT CmpRtrCode from Cn2Cs_Prk_RetailerMigration (NOLOCK) WHERE isnull(RtrPhoneNo,'') = ''
		
	--	INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)	
	--	SELECT DISTINCT 1,'Retailer','RtrPhoneNo','Retailer Phone Number Should be Mandatory-'+ RtrCode 
	--	FROM Cn2Cs_Prk_RetailerMigration  (NOLOCK)	where isnull(RtrPhoneNo,'') = ''		
		
	--END
    	
	SELECT DISTINCT RtrPhoneNo,COUNT(RtrPhoneNo) AS Counts INTO #RtrPhoneNo FROM Cn2Cs_Prk_RetailerMigration WITH(NOLOCK) WHERE DownloadFlag = 'D' 
	group BY RtrPhoneNo HAVING COUNT(RtrPhoneNo) >1	
	
	INSERT INTO #ToAvoidRetailerMigration(RetailerCode)		
	SELECT DISTINCT CmpRtrCode from Cn2Cs_Prk_RetailerMigration A (NOLOCK) 
	INNER JOIN #RtrPhoneNo B (NOLOCK) ON A.RtrPhoneNo = B.RtrPhoneNo
	where isnull(A.RtrPhoneNo,'') <> ''
	
	INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)	
	SELECT DISTINCT 1,'Retailer','RtrPhoneNo','Retailer Phone Number Should be Unique-'+ A.RtrCode 
	FROM Cn2Cs_Prk_RetailerMigration A (NOLOCK) INNER JOIN #RtrPhoneNo B (NOLOCK) ON A.RtrPhoneNo = B.RtrPhoneNo	
	where isnull(A.RtrPhoneNo,'') <> ''
	--Tin Number Validation
	SELECT DISTINCT RtrTinNumber,COUNT(RtrTinNumber) AS Counts INTO #RtrTinNumber FROM Cn2Cs_Prk_RetailerMigration WITH(NOLOCK) WHERE DownloadFlag = 'D' 
	group BY RtrTinNumber HAVING COUNT(RtrTinNumber) >1
	INSERT INTO #ToAvoidRetailerMigration(RetailerCode)		
	SELECT DISTINCT CmpRtrCode from Cn2Cs_Prk_RetailerMigration A (NOLOCK) 
	INNER JOIN #RtrTinNumber B (NOLOCK) ON A.RtrTinNumber = B.RtrTinNumber
	WHERE isnull(A.RtrTinNumber,'') <> '' 
	
	INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)	
	SELECT DISTINCT 1,'Retailer','RtrTinNumber','Retailer Tin Number Should be Unique-'+ A.RtrCode 
	FROM Cn2Cs_Prk_RetailerMigration A (NOLOCK) INNER JOIN #RtrTinNumber B (NOLOCK) ON A.RtrTinNumber = B.RtrTinNumber
	WHERE isnull(A.RtrTinNumber,'') <> '' 
     	
	--To Insert the Salesman Details
	SELECT @SmId = ISNULL(MAX(SMId),0) FROM Salesman (NOLOCK)
	
	INSERT INTO SalesmanMasterMigration (SMDCode,SMNCode,SMName,Upload,DownloadedDate)
	SELECT DISTINCT SalesmanCode,'SM0'+CAST((DENSE_RANK ()OVER (ORDER BY SalesManName)+@SmId) AS NVARCHAR(200))+'-'+@DistCode AS SMCode,
	SalesManName,0 AS Upload,CONVERT(NVARCHAR(10),GETDATE(),121)
	FROM Cn2Cs_Prk_RetailerMigration A (NOLOCK) WHERE DownLoadFlag = 'D' AND NOT EXISTS 
	(SELECT ISNULL(SalesmanCode,'') FROM #ToAvoidRetailerMigration B WHERE A.SalesmanCode = ISNULL(B.SalesmanCode,''))
	
	INSERT INTO Salesman (SMId,SMCode,SMName,SMPhoneNumber,SMEmailID,SMOtherDetails,SMDailyAllowance,SMMonthlySalary,SMMktCredit,SMCreditDays,CmpId,
    SalesForceMainId,Status,SMCreditAmountAlert,SMCreditDaysAlert,UpLoad,Availability,LastModBy,LastModDate,AuthId,AuthDate,XMLUpload,HHTDeviceSerialNumber) -- UAT ISSUE
	SELECT DISTINCT (DENSE_RANK ()OVER (ORDER BY SalesManName)+@SmId) AS SmId,
	'SM0'+CAST((DENSE_RANK ()OVER (ORDER BY SalesManName)+@SmId) AS NVARCHAR(200))+'-'+@DistCode AS SMCode,SalesManName,0 AS SMPhoneNumer,
	'' AS SMEmailID,'' AS SMOtherDetails,0.00 AS SMDailyAllowance,0.00 AS SMMonthlySalary,0.00 AS SMMktCredit,0 AS SMCreditDays,0 AS CmpId,
	0 AS SalesForceMainId,1 AS [Status],0 AS SMCreditAmountAlert,0 AS SMCreditDaysAlert,'N' AS UpLoad,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,
	CONVERT(NVARCHAR(10),GETDATE(),121),0,'' FROM Cn2Cs_Prk_RetailerMigration A (NOLOCK) WHERE DownLoadFlag = 'D' AND NOT EXISTS -- UAT ISSUE
	(SELECT ISNULL(SalesmanCode,'') FROM #ToAvoidRetailerMigration B WHERE A.SalesmanCode = ISNULL(B.SalesmanCode,''))
	
	SELECT @SmId = ISNULL(MAX(SMId),0) FROM Salesman (NOLOCK)	
	UPDATE Counters SET CurrValue = @SmId WHERE TabName = 'Salesman' AND FldName = 'SMId'
	
	--To Insert the Sales Route Details 
	SELECT @RmId = ISNULL(MAX(RMId),0) FROM RouteMaster (NOLOCK)
	SELECT @DlvRmId = ISNULL(MAX(RMId),0) FROM RouteMaster (NOLOCK)
	
	INSERT INTO RouteMasterMigration (RMSalDCode,RMSalNCode,RMSalName,RMDlvDCode,RMDlvNCode,RMDlvName,Upload,DownloadedDate)
	SELECT DISTINCT SalRouteCode,'SR0'+CAST((DENSE_RANK ()OVER (ORDER BY SalRouteName)+@RmId) AS NVARCHAR(200))+'-'+@DistCode AS RMCode,SalRouteName,
	DlvRouteCode,'DR0'+CAST((DENSE_RANK ()OVER (ORDER BY DlvRouteName)+@DlvRmId) AS NVARCHAR(200))+'-'+@DistCode AS RMCode,
	DlvRouteName,0 AS Upload,CONVERT(NVARCHAR(10),GETDATE(),121)
	FROM Cn2Cs_Prk_RetailerMigration A WITH(NOLOCK) INNER JOIN Geography B WITH(NOLOCK) ON A.RouteGeoCode = B.GeoCode 
	WHERE DownLoadFlag = 'D' AND NOT EXISTS (SELECT ISNULL(SalRouteCode,'') FROM #ToAvoidRetailerMigration C 
	WHERE A.SalRouteCode = ISNULL(C.SalRouteCode,'') AND A.DlvRouteCode = ISNULL(C.DlvRouteCode,'')) 
	
	INSERT INTO RouteMaster (RMId,RMCode,RMName,CmpId,RMDistance,RMPopulation,GeoMainId,RMVanRoute,RMSRouteType,RMLocalUpcountry,RMMon,RMTue,
    RMWed,RMThu,RMFri,RMSat,RMSun,RMstatus,UpLoad,Availability,LastModBy,LastModDate,AuthId,AuthDate,XMLUpload)
	SELECT DISTINCT (DENSE_RANK ()OVER (ORDER BY SalRouteName)+@RmId) AS RmId,
	'SR0'+CAST((DENSE_RANK ()OVER (ORDER BY SalRouteName)+@RmId) AS NVARCHAR(200))+'-'+@DistCode AS RMCode,SalRouteName,@CmpId,0.00 AS RMDistance,
	0.00 AS RMPopulation,GeoMainId,1 AS RMVanRoute,1 AS RMSRouteType,1 AS RMLocalUpcountry,0 AS RMMon,0 AS RMTue,0 AS RMWed,0 AS RMThu,0 AS RMFri,
	0 AS RMSat,0 AS RMSun,1 AS RMstatus,'N' AS UpLoad,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121),0   
	FROM Cn2Cs_Prk_RetailerMigration A WITH(NOLOCK) INNER JOIN Geography B WITH(NOLOCK) ON A.RouteGeoCode = B.GeoCode 
	WHERE DownLoadFlag = 'D' AND NOT EXISTS (SELECT ISNULL(SalRouteCode,'') FROM #ToAvoidRetailerMigration C WHERE A.SalRouteCode = ISNULL(C.SalRouteCode,''))
	
	--To Insert the Delivery Route Details
	SELECT @RmId = ISNULL(MAX(RMId),0) FROM RouteMaster (NOLOCK)
	
	INSERT INTO RouteMaster (RMId,RMCode,RMName,CmpId,RMDistance,RMPopulation,GeoMainId,RMVanRoute,RMSRouteType,RMLocalUpcountry,RMMon,RMTue,
    RMWed,RMThu,RMFri,RMSat,RMSun,RMstatus,UpLoad,Availability,LastModBy,LastModDate,AuthId,AuthDate,XMLUpload)
	SELECT DISTINCT (DENSE_RANK ()OVER (ORDER BY DlvRouteName)+@RmId) AS RmId,
	'DR0'+CAST((DENSE_RANK ()OVER (ORDER BY DlvRouteName)+@DlvRmId) AS NVARCHAR(200))+'-'+@DistCode AS RMCode,DlvRouteName,@CmpId,0.00 AS RMDistance,
	0.00 AS RMPopulation,GeoMainId,1 AS RMVanRoute,2 AS RMSRouteType,1 AS RMLocalUpcountry,0 AS RMMon,0 AS RMTue,0 AS RMWed,0 AS RMThu,0 AS RMFri,
	0 AS RMSat,0 AS RMSun,1 AS RMstatus,'N' AS UpLoad,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121),0   
	FROM Cn2Cs_Prk_RetailerMigration A WITH(NOLOCK) INNER JOIN Geography B WITH(NOLOCK) ON A.RouteGeoCode = B.GeoCode 
	WHERE DownLoadFlag = 'D' AND NOT EXISTS (SELECT ISNULL(DlvRouteCode,'') FROM #ToAvoidRetailerMigration C WHERE A.DlvRouteCode = ISNULL(C.DlvRouteCode,''))
	
	SELECT @RmId = ISNULL(MAX(RMId),0) FROM RouteMaster (NOLOCK)
	UPDATE Counters SET CurrValue = @RmId WHERE TabName = 'RouteMaster' AND FldName = 'RMId'
	
	--Salesman Market Value Added
	INSERT INTO SalesmanMarket (SMId,RMId,Availability,LastModBy,LastModDate,AuthId,AuthDate)
	SELECT DISTINCT SMId,RmId,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121)FROM Cn2Cs_Prk_RetailerMigration A WITH(NOLOCK) 
	INNER JOIN RouteMaster B WITH(NOLOCK) ON A.SalRouteName = B.RMName 
	INNER JOIN Salesman C WITH(NOLOCK) ON A.SalesmanName = C.SMName WHERE B.RMSRouteType = 1 AND NOT EXISTS
	(SELECT SMId,RMId FROM SalesmanMarket D WITH(NOLOCK) WHERE C.SMId = D.SMId AND B.RMId = D.RMId)	
	
	
	--To Insert the Retailer Details
    SELECT DISTINCT SalesManName,RtrCode,CmpRtrCode,RtrName,RtrAddress1,RtrAddress2,RtrAddress3,RtrPincode,B.CtgMainId AS CtgLevelId,
    B.CtgCode AS CtgLevelCode,B.CtgName AS CtgLevelName,C.CtgMainId,C.CtgCode,C.CtgName,D.RtrClassId,D.ValueClassCode,D.ValueClassName,
    SalRouteName,DlvRouteName,[Status],RetailerGeoLevel,RetailerGeoCode,RtrPhoneNo,RtrTinNumber,RtrTaxGroupCode,ISNULL(E.RtrUniqueCode,'')  AS RtrUniqueCode,
    ISNULL(E.RtrCodeUserInput,'') AS RtrCodeUserInput
    INTO #RetailerMigrationDetails FROM RetailerCategoryLevel A WITH(NOLOCK) 
    INNER JOIN RetailerCategory B WITH(NOLOCK) ON A.CtgLevelId = B.CtgLevelId
    INNER JOIN RetailerCategory C WITH(NOLOCK) ON B.CtgMainId = C.CtgLinkId  
    INNER JOIN RetailerValueClass D WITH(NOLOCK) ON C.CtgMainId = D.CtgMainId 
    INNER JOIN Cn2Cs_Prk_RetailerMigration E WITH(NOLOCK) ON B.CtgCode = E.RtrChannelCode AND C.CtgCode = E.RtrGroupCode AND DownLoadFlag = 'D'
    AND D.ValueClassCode = E.RtrClassCode WHERE CmpRtrCode NOT IN (SELECT ISNULL(RetailerCode,'') FROM #ToAvoidRetailerMigration)
    
	INSERT INTO RetailerMasterMigration (SMName,RtrCode,CmpRtrCode,RtrName,RtrAddress1,RtrAddress2,RtrAddress3,RtrPincode,RtrCtgLevelId,RtrChannelCode,
	RtrCtgMainId,RtrGroupCode,RtrValClassId,RtrClassCode,RtrGeoLevelId,RtrGeoLvelName,RtrGeoId,RtrGeoName,RtrSalRMId,RtrSalRoute,RtrDlvRMId,RtrDlvRoute,
	RtrStatus,Upload,DownloadedDate,RtrPhoneNo,RtrTinNumber,RtrTaxGroupId,RtrUniqueCode,RtrCodeUserInput)
	SELECT DISTINCT SalesManName,RtrCode,CmpRtrCode,RtrName,RtrAddress1,ISNULL(RtrAddress2,0) AS RtrAddress2,ISNULL(RtrAddress3,0) as RtrAddress3,RtrPincode,CtgLevelId,CtgLevelName,
	CtgMainId,CtgName,RtrClassId,ValueClassName,B.GeoLevelId,RetailerGeoLevel,C.GeoMainId,GeoName,D.RmId,SalRouteName,E.RmId,DlvRouteName,
	[Status],0 AS Upload,CONVERT(NVARCHAR(10),GETDATE(),121),ISNULL(RtrPhoneNo,0) AS RtrPhoneNo,ISNULL(RtrTinNumber,0) AS RtrTinNumber,---------- Null Values validation added in CS Pms id: ICRSTPAR7619
	ISNULL(TaxGroupId,0)AS RtrTaxGroupId,A.RtrUniqueCode,A.RtrCodeUserInput
	FROM #RetailerMigrationDetails A (NOLOCK) 
	INNER JOIN GeographyLevel B WITH(NOLOCK) ON A.RetailerGeoLevel = B.GeoLevelName
	INNER JOIN Geography C WITH(NOLOCK) ON A.RetailerGeoCode = C.Geoname AND B.GeoLevelId = C.GeoLevelId
	INNER JOIN RouteMaster D WITH(NOLOCK) ON A.SalRouteName = D.RMName AND D.RMSRouteType = 1
	INNER JOIN RouteMaster E WITH(NOLOCK) ON A.DlvRouteName = E.RMName AND E.RMSRouteType = 2
	LEFT OUTER JOIN TaxGroupSetting TGS (NOLOCK) ON A.RtrTaxGroupCode = TGS.RtrGroup AND TGS.TaxGroup = 1
	WHERE CmpRtrCode NOT IN (SELECT DISTINCT CmpRtrCode FROM RetailerMasterMigration (NOLOCK))
			
	UPDATE A SET A.Upload = 1 FROM SalesmanMasterMigration A WITH(NOLOCK) INNER JOIN Salesman B WITH (NOLOCK) ON A.SMName = B.SMName 
	
	UPDATE A SET A.Upload = 1 FROM RouteMasterMigration A WITH(NOLOCK) 
	INNER JOIN RouteMaster B WITH (NOLOCK) ON A.RMSalName = B.RMName AND B.RMSRouteType = 1
	INNER JOIN RouteMaster C WITH (NOLOCK) ON A.RMDlvName = C.RMName AND C.RMSRouteType = 2
	UPDATE A SET DownloadFlag = 'Y' FROM Cn2Cs_Prk_RetailerMigration A WITH(NOLOCK) 
	INNER JOIN RetailerMasterMigration B WITH(NOLOCK) ON A.CmpRtrCode = B.CmpRtrCode
	--------------- Added  by Lakshman M Dated ON 28-12-2018 PMS ID:ILCRSTPAR2934 Default taxgroup validation added.
	SELECT  @Taxgroupid = Taxgroupid from TaxGroupSetting where RtrGroup ='RTRINTRA'
	UPDATE A set Rtrtaxgroupid =@Taxgroupid FROM RetailerMasterMigration A WHERE Rtrtaxgroupid = 0
	------------- Till here ------------
END
GO
IF EXISTS(SELECT 'X' FROM SYSOBJECTS WHERE XTYPE='P' AND NAME='Proc_Cs2Cn_Retailer')
DROP PROCEDURE Proc_Cs2Cn_Retailer
GO
/*
BEGIN TRAN
delete FROM RETAILERvalueclassmap where rtrid in(1,2,3,5,6)
update A set upload ='N' FROM  RETAILER A 
EXEC Proc_Cs2Cn_Retailer 0,'2020-07-20'
SELECT * FROM CS2CN_PRK_RETAILER 
--SELECT * FROM RETAILER
--SELECT * FROM RETAILERvalueclassmap
--SELECT 'Approval Track After upload',* FROM RetailerApprovalStatus
ROLLBACK TRAN 
*/
CREATE PROCEDURE [Proc_Cs2Cn_Retailer]
(
	@Po_ErrNo	INT OUTPUT,
	@ServerDate DATETIME
)
AS
SET NOCOUNT ON
BEGIN
/*********************************
* PROCEDURE	: Proc_Cs2Cn_Retailer 0,'2016-11-11'
* PURPOSE	: Extract Retailer Details from CoreStocky to Console
* NOTES		:
* CREATED	: Nandakumar R.G 09-01-2009
* MODIFIED	:
* DATE         AUTHOR       CR/BZ	   USER STORY ID   DESCRIPTION                         
*****************************************************************************************************
  10/05/2018   S.Moorthi     CR        CRCRSTPAR0001   Retailer Approval process - Manual
  05-04-2019   M. Lkashman   BZ        ILCRSTPAR3971   Retailer values class valiation included based on retailer wise upload process.
  21-05-2019   M.Lakshman    BZ        ILCRSTPAR4514   Retailer approval process trace validation included.
  07/05/2020	Murugan.R	CR		   PARCS202100016  Retailer Type Consumer added instead of HUB  
  20-07-2020    Deepan       CR        PARCS202100041   Reason and  USER INPUT added
 
*********************************/
	DECLARE @CmpID 		AS INTEGER
	DECLARE @DistCode	As nVarchar(50)
	
	SET @Po_ErrNo=0
	
	----Commented by Moorthi CRCRSTPAR0001 --CHANGED BY MAHESH FOR ICRSTPAR1505
	--IF EXISTS (SELECT * FROM RETAILER WHERE APPROVED=0)
	--BEGIN
	--	UPDATE RETAILER SET Approved=1 WHERE Approved=0
	--END
	----Till Here
	DELETE FROM Cs2Cn_Prk_Retailer WHERE UploadFlag = 'Y'
	SELECT @CmpID = CmpId FROM Company WHERE DefaultCompany = 1	
	SELECT @DistCode = DistributorCode FROM Distributor
	-------------------- Added by lakshman M Dated ON 05-04-2019 PMS ID: ILCRSTPAR3971 ------------- 
	INSERT INTO Cs2Cn_Prk_Retailer
	(
		DistCode ,
		RtrId ,
		RtrCode ,
		CmpRtrCode,
		RtrName ,
		RtrAddress1,
		RtrAddress2,
		RtrAddress3,
		RtrPINCode,
		RtrChannelCode ,
		RtrGroupCode ,
		RtrClassCode ,
		Status,
		KeyAccount,
		RelationStatus,
		ParentCode,
		RtrRegDate,
		GeoLevel,
		GeoLevelValue,
		VillageId,
		VillageCode,
		VillageName,
		Mode,
		DrugLNo,
		RtrFrequency,
		RtrPhoneNo,
		RtrTINNumber,
		RtrTaxGroupCode,
		RtrCrLimit,
		RtrCrDays,
		Approved,
		RtrType,
		RtrLandLine,
		ReasonCode,
		ReasonName,
		RtrCodeUserInput,
		UploadFlag
		)
		
		SELECT @DistCode ,
		R.RtrId ,
		R.RtrCode ,
		R.CmpRtrCode ,
		R.RtrName ,
		R.RtrAdd1 ,
		R.RtrAdd2 ,
		R.RtrAdd3 ,
		R.RtrPinNo ,
		RC1.CtgCode ,
		RC.CtgCode,
		RVC.ValueClassCode,
		RtrStatus,	
		CASE RtrKeyAcc WHEN 0 THEN 'NO' ELSE 'YES' END AS KeyAccount,
		CASE RtrRlStatus WHEN 2 THEN 'PARENT' WHEN 3 THEN 'CHILD' WHEN 1 THEN 'INDEPENDENT' ELSE 'INDEPENDENT' END AS RelationStatus,
		(CASE RtrRlStatus WHEN 3 THEN ISNULL(RET.RtrCode,'') ELSE '' END) AS ParentCode,
		CONVERT(VARCHAR(10),R.RtrRegDate,121),'' AS GeoLevelName,'' AS GeoName,0,'','','New',R.RtrDrugLicNo,
		CASE RtrFrequency WHEN 0 THEN 'WEEKLY' WHEN 1 THEN 'BI-WEEKLY' WHEN 2 THEN 'FORT NIGHTLY' when 3 then 'MONTHLY' when 4 then 'DAILY' END AS RtrFrequency,
		ISNULL(RtrPhoneNo,''),ISNULL(RtrTINNo,''),ISNULL(TGS.RtrGroup,''),R.RtrCrLimit,
		R.RtrCrDays,(CASE ISNULL(R.Approved,0) WHEN 0 THEN 'PENDING' WHEN 1 THEN 'APPROVED' ELSE 'REJECTED' END) AS Approved,
		(CASE R.RtrType WHEN 1 THEN 'Retailer' WHEN 2 THEN 'Sub Stockist' WHEN 3 THEN 'Consumer' WHEN 4 THEN 'Spoke' ELSE 'Distributor' END) AS RtrType,
		R.RtrLandLine,ISNULL(RAM.ReasonCode,''),ISNULL(RAM.Description,''),R.RtrCodeUserInput,'N'					
		FROM Retailer R (NOLOCK)
		LEFT OUTER JOIN (SELECT K.RtrCode,RE.RtrId,RE.RtrChildId FROM RetailerRelation RE (NOLOCK)
		INNER JOIN Retailer K (NOLOCK)ON RE.RtrId=K.RtrId) RET ON RET.RtrChildId=R.RtrId
		LEFT OUTER JOIN ReasonMaster RAM(NOLOCK) ON RAM.REASONID=R.Reason
		LEFT OUTER JOIN TaxGroupSetting TGS (NOLOCK) ON R.TaxGroupId = TGS.TaxGroupId AND TGS.TaxGroup = 1
		INNER JOIN RetailerValueClassMap RVCM ON RVCM.Rtrid =R.Rtrid
		inner join RetailerValueClass RVC ON RVCM.RtrValueClassId = RVC.RtrClassId
		inner join RetailerCategory RC ON RVC.CtgMainId=RC.CtgMainId
		inner join RetailerCategoryLevel RCL ON RCL.CtgLevelId=RC.CtgLevelId
		inner join RetailerCategory RC1 ON RC.CtgLinkId = RC1.CtgMainId
		WHERE R.Upload = 'N' AND  NOT EXISTS (SELECT DISTINCT RAS.RtrId FROM RetailerApprovalStatus RAS (NOLOCK) WHERE R.RtrId = RAS.RtrId)		
	UNION
	SELECT
		@DistCode ,
		RCC.RtrId,
		R.RtrCode,
		R.CmpRtrCode,
		(CASE ISNULL(RCC.RtrName,'') WHEN '' THEN R.RtrName ELSE RCC.RtrName END) AS RtrName,
		--RCC.RtrName ,
		R.RtrAdd1 ,	
		R.RtrAdd2 ,
		R.RtrAdd3 ,
		R.RtrPinNo ,
		RC1.CtgCode ,
		RC.CtgCode,
		RVC.ValueClassCode ,
		--RtrStatus,
		(CASE ISNULL(RCC.RtrStatus,2) WHEN 2 THEN R.RtrStatus ELSE RCC.RtrStatus END) AS RtrStatus,
		CASE RtrKeyAcc WHEN 0 THEN 'NO' ELSE 'YES' END AS KeyAccount,
		CASE RtrRlStatus WHEN 2 THEN 'PARENT' WHEN 3 THEN 'CHILD' WHEN 1 THEN 'INDEPENDENT' ELSE 'INDEPENDENT' END AS RelationStatus,
		(CASE RtrRlStatus WHEN 3 THEN ISNULL(RET.RtrCode,'') ELSE '' END) AS ParentCode,
		CONVERT(VARCHAR(10),R.RtrRegDate,121),'' AS GeoLevelName,'' AS GeoName,0,'','','AP',R.RtrDrugLicNo,
		CASE RtrFrequency WHEN 0 THEN 'WEEKLY' WHEN 1 THEN 'BI-WEEKLY' WHEN 2 THEN 'FORT NIGHTLY' when 3 then 'MONTHLY' when 4 then 'DAILY' END AS RtrFrequency,
		ISNULL(RtrPhoneNo,''),ISNULL(RtrTINNo,''),ISNULL(TGS.RtrGroup,''),R.RtrCrLimit,
        R.RtrCrDays,(CASE ISNULL(R.Approved,0) WHEN 0 THEN 'PENDING' WHEN 1 THEN 'APPROVED' ELSE 'REJECTED' END) AS Approved,
        (CASE R.RtrType WHEN 1 THEN 'Retailer' WHEN 2 THEN 'Sub Stockist' WHEN 3 THEN 'Consumer' WHEN 4 THEN 'Spoke' ELSE 'Distributor' END) AS RtrType,
        	R.RtrLandLine,ISNULL(RAM.ReasonCode,''),ISNULL(RAM.Description,''),R.RtrCodeUserInput,'N'	
	
	FROM 
		RetailerApprovalStatus RCC (NOLOCK)	--CRCRSTPAR0001		
		INNER JOIN Retailer R (NOLOCK) ON R.RtrId=RCC.RtrId
		LEFT OUTER JOIN (SELECT K.RtrCode,RE.RtrId,RE.RtrChildId FROM RetailerRelation RE (NOLOCK)
		INNER JOIN Retailer K (NOLOCK) ON RE.RtrId=K.RtrId) RET ON RET.RtrChildId=R.RtrId
		LEFT OUTER JOIN ReasonMaster RAM(NOLOCK) ON RAM.REASONID=R.Reason
		LEFT OUTER JOIN TaxGroupSetting TGS (NOLOCK) ON R.TaxGroupId = TGS.TaxGroupId AND TGS.TaxGroup = 1
		INNER JOIN RetailerValueClassMap RVCM ON RVCM.Rtrid =R.Rtrid
		inner join RetailerValueClass RVC ON RVCM.RtrValueClassId = RVC.RtrClassId
		inner join RetailerCategory RC ON RVC.CtgMainId=RC.CtgMainId
		inner join RetailerCategoryLevel RCL ON RCL.CtgLevelId=RC.CtgLevelId
		inner join RetailerCategory RC1 ON RC.CtgLinkId = RC1.CtgMainId
		WHERE RCC.Upload=0 
		
	--	RetailerClassficationChange RCC			
	--	INNER JOIN Retailer R ON R.RtrId=RCC.RtrId
	--	LEFT OUTER JOIN (SELECT K.RtrCode,RE.RtrId,RE.RtrChildId FROM RetailerRelation RE
	--	INNER JOIN Retailer K ON RE.RtrId=K.RtrId) RET ON RET.RtrChildId=R.RtrId
	--	LEFT OUTER JOIN TaxGroupSetting TGS (NOLOCK) ON R.TaxGroupId = TGS.TaxGroupId AND TGS.TaxGroup = 1
	--WHERE 	
	--	UpLoadFlag=0
	
	------------ commented by lakshman M dated on 05-04-2019 PMS ID: ILCRSTPAR3971 -----------
	--UPDATE ETL SET ETL.RtrChannelCode=RVC.ChannelCode,ETL.RtrGroupCode=RVC.GroupCode,ETL.RtrClassCode=RVC.ValueClassCode
	--FROM Cs2Cn_Prk_Retailer ETL,
	--(
	--	SELECT R.RtrId,RC1.CtgCode AS ChannelCode,RC.CtgCode  AS GroupCode ,RVC.ValueClassCode
	--	FROM
	--	RetailerValueClassMap RVCM ,
	--	RetailerValueClass RVC	,
	--	RetailerCategory RC ,
	--	RetailerCategoryLevel RCL,
	--	RetailerCategory RC1,
	--	Retailer R  		
	--WHERE
	--	R.Rtrid = RVCM.RtrId
	--	AND	RVCM.RtrValueClassId = RVC.RtrClassId
	--	AND	RVC.CtgMainId=RC.CtgMainId
	--	AND	RCL.CtgLevelId=RC.CtgLevelId
	--	AND	RC.CtgLinkId = RC1.CtgMainId
	--) AS RVC
	--WHERE ETL.RtrId=RVC.RtrId

	--------------------- Till here  -------------
	
	UPDATE ETL SET ETL.GeoLevel=Geo.GeoLevelName,ETL.GeoLevelValue=Geo.GeoName
	FROM Cs2Cn_Prk_Retailer ETL,
	(
		SELECT R.RtrId,ISNULL(GL.GeoLevelName,'City') AS GeoLevelName,
		ISNULL(G.GeoName,'') AS GeoName
		FROM			
		Retailer R  		
		LEFT OUTER JOIN Geography G (NOLOCK) ON R.GeoMainId=G.GeoMainId  
		LEFT OUTER JOIN GeographyLevel GL(NOLOCK) ON GL.GeoLevelId=G.GeoLevelId  
	) AS Geo
	WHERE ETL.RtrId=Geo.RtrId	
	
	UPDATE ETL SET ETL.VillageId=V.VillageId,ETL.VillageCode=V.VillageCode,ETL.VillageName=V.VillageName
	FROM Cs2Cn_Prk_Retailer ETL,
	(
		SELECT R.RtrId,R.VillageId,V.VillageCode,V.VillageName
		FROM			
		Retailer R  		
		INNER JOIN RouteVillage V ON R.VillageId=V.VillageId
	) V
	WHERE ETL.RtrId=V.RtrId	
	
	--Added By MohanaKrishna A.B For GST
	Update Cs2Cn_Prk_Retailer SET StateName='' where StateName is Null
	Update Cs2Cn_Prk_Retailer SET GSTTIN ='' where GSTTIN is Null
	Update Cs2Cn_Prk_Retailer SET PanNumber ='' where PanNumber is Null
	Update Cs2Cn_Prk_Retailer SET RetailerType ='' where RetailerType is Null
	Update Cs2Cn_Prk_Retailer SET Composite ='' where Composite is Null
	Update Cs2Cn_Prk_Retailer SET RelatedParty ='' where RelatedParty is Null
	----
	
	--Added By Mohana For GST
	SELECT C.MasterRecordId,B.ColumnName,ISNULL(C.ColumnValue,'') ColumnValue INTO #RtrUDC FROM UdcHD A INNER JOIN UdcMaster B ON A.MasterId=B.MasterId AND A.MasterName='Retailer Master'
	INNER JOIN UdcDetails C ON A.MasterId= C.MasterId AND B.UdcMasterId=C.UdcMasterId --AND masterrecordid =445
	INNER JOIN Retailer R ON R.RtrId =C.MasterRecordId AND B.ColumnName IN ('State name','GSTIN','PAN Number','Retailer Type','Related Party','Composition')
	UPDATE A SET StateName =ISNULL(C.ColumnValue,'') FROM Cs2Cn_Prk_Retailer A INNER JOIN Retailer B ON A.RtrCode=B.RtrCode
	INNER JOIN #RtrUDC C ON B.RtrId = C.MasterRecordid AND ColumnName ='State Name'
	UPDATE A SET GSTTIN = ISNULL(C.ColumnValue,'')  FROM Cs2Cn_Prk_Retailer A INNER JOIN Retailer B ON A.RtrCode=B.RtrCode
	INNER JOIN #RtrUDC C ON B.RtrId = C.MasterRecordid AND ColumnName ='GSTIN'
	UPDATE A SET PanNumber = ISNULL(C.ColumnValue,'')  FROM Cs2Cn_Prk_Retailer A INNER JOIN Retailer B ON A.RtrCode=B.RtrCode
	INNER JOIN #RtrUDC C ON B.RtrId = C.MasterRecordid AND ColumnName ='PAN Number'
	UPDATE A SET RetailerType = ISNULL(C.ColumnValue,'') FROM Cs2Cn_Prk_Retailer A INNER JOIN Retailer B ON A.RtrCode=B.RtrCode
	INNER JOIN #RtrUDC C ON B.RtrId = C.MasterRecordid AND ColumnName ='Retailer Type'
	UPDATE A SET RelatedParty = ISNULL(C.ColumnValue,'')  FROM Cs2Cn_Prk_Retailer A INNER JOIN Retailer B ON A.RtrCode=B.RtrCode
	INNER JOIN #RtrUDC C ON B.RtrId = C.MasterRecordid AND ColumnName ='Related Party'
	UPDATE A SET Composite = ISNULL(C.ColumnValue,'')  FROM Cs2Cn_Prk_Retailer A INNER JOIN Retailer B ON A.RtrCode=B.RtrCode
	INNER JOIN #RtrUDC C ON B.RtrId = C.MasterRecordid AND ColumnName ='Composition'
	--Till Here
	 --Added By lakshman M DAted ON 21-05-2019 PMS ID: ILCRSTPAR4514  
	 INSERT INTO RetailerApprovalStatus_Trace (RtrId,Rtrctgid,Rtrclassid,Rtrstatus,Rtrname,Geoid,Upload,Mode,ModDate,Uploadeddate)  
	 SELECT R.RtrId,R.Rtrctgid,R.Rtrclassid,R.Rtrstatus,R.Rtrname,R.Geoid,R.Upload,R.Mode,R.ModDate,GETDATE() AS Uploadeddate  
	 FROM RetailerApprovalStatus R (NOLOCK) WHERE R.Upload=0  
     
	 --------- Till here -------  
	--Added By S.Moorthi	
	SELECT R.RtrId,RC1.CtgCode AS ChannelCode,RC.CtgCode  AS GroupCode,RVC.ValueClassCode 
	INTO #TempCategory	
		   FROM
		   RetailerValueClass RVC (NOLOCK),  
		   RetailerCategory RC (NOLOCK) ,  
		   RetailerCategoryLevel RCL (NOLOCK),  
		   RetailerCategory RC1 (NOLOCK),    
		   RetailerApprovalStatus R (NOLOCK)  
		WHERE			
			R.RtrClassId = RVC.RtrClassId
			AND	RVC.CtgMainId=RC.CtgMainId
			AND	RCL.CtgLevelId=RC.CtgLevelId
			AND	RC.CtgLinkId = RC1.CtgMainId
			AND ISNULL(R.RtrClassId,0)<>0
			AND R.Upload=0
			
	UPDATE ETL SET ETL.RtrChannelCode=RVC.ChannelCode,ETL.RtrGroupCode=RVC.GroupCode,
	ETL.RtrClassCode=RVC.ValueClassCode
	FROM Cs2Cn_Prk_Retailer ETL (NOLOCK) 
	INNER JOIN RetailerApprovalStatus RAS (NOLOCK) ON ETL.RtrId=RAS.RtrId 
 	INNER JOIN #TempCategory RVC (NOLOCK) ON RVC.RtrId=ETL.RtrId and RVC.RtrId=RAS.RtrId  
	WHERE ETL.UploadFlag='N' AND RAS.Upload=0
	
	UPDATE ETL SET ETL.GeoLevel=Geo.GeoLevelName,ETL.GeoLevelValue=Geo.GeoName
	FROM Cs2Cn_Prk_Retailer ETL,
	(
		SELECT R.RtrId,ISNULL(GL.GeoLevelName,'City') AS GeoLevelName,
		ISNULL(G.GeoName,'') AS GeoName
		FROM			
		Retailer R  	
		INNER JOIN RetailerApprovalStatus RAS (NOLOCK) ON R.RtrId=RAS.RtrId 	
		LEFT OUTER JOIN Geography G ON R.GeoMainId=G.GeoMainId
  		LEFT OUTER JOIN GeographyLevel GL (NOLOCK) ON GL.GeoLevelId=G.GeoLevelId  
		WHERE ISNULL(RAS.Geoid,0)<>0  AND RAS.Upload=0
	) AS Geo
	WHERE ETL.RtrId=Geo.RtrId
	--UPDATE Cs2Cn_Prk_Retailer SET Mode = 'CR' WHERE ISNULL(Approved,'PENDING') IN ('APPROVED','REJECTED') AND Mode = 'New' AND UploadFlag='N'
	--UPDATE Cs2Cn_Prk_Retailer SET Mode = 'New' WHERE ISNULL(Approved,'PENDING') NOT IN ('APPROVED','REJECTED') AND UploadFlag='N'
	UPDATE Cs2Cn_Prk_Retailer SET Mode = 'CR' WHERE ISNULL(Approved,'PENDING') IN ('APPROVED') AND Mode = 'New' AND UploadFlag='N'
	UPDATE Cs2Cn_Prk_Retailer SET Mode = 'New' WHERE ISNULL(Approved,'PENDING') IN ('PENDING','REJECTED') AND UploadFlag='N'
	--Till Here
	
	UPDATE Retailer SET Upload='Y' WHERE Upload='N'
	AND CmpRtrCode IN(SELECT CmpRtrCode FROM Cs2Cn_Prk_Retailer WHERE UploadFlag='N') --WHERE Mode='New')
	
	UPDATE RetailerClassficationChange SET UpLoadFlag=1 WHERE UpLoadFlag=0
	AND RtrCode IN(SELECT RtrCode FROM Cs2Cn_Prk_Retailer WHERE Mode='AP' AND UploadFlag='N')
	
	UPDATE RetailerApprovalStatus SET Upload=1 WHERE Upload=0
	AND RtrId IN(SELECT RtrId FROM Cs2Cn_Prk_Retailer WHERE Mode='AP' AND UploadFlag='N')
	
	UPDATE Cs2Cn_Prk_Retailer SET ServerDate=@ServerDate
	 ----------- added by lakshman M Dated ON 21-05-2019 PMS ID: ILCRSTPAR4514  
	 INSERT INTO Cs2Cn_Prk_Retailer_trace (DistCode,RtrId,RtrCode,CmpRtrCode,RtrName,RtrAddress1,RtrAddress2,RtrAddress3,RtrPINCode,RtrChannelCode,RtrGroupCode,RtrClassCode,KeyAccount,RelationStatus,   
	 ParentCode,RtrRegDate,GeoLevel,GeoLevelValue,VillageId,VillageCode,VillageName,Status,Mode,DrugLNo,RtrFrequency,RtrPhoneNo,RtrTINNumber,RtrTaxGroupCode,RtrCrLimit,RtrCrDays,   
	 Approved,RtrType,UploadFlag,SyncId,ServerDate,StateName,GSTTIN,PanNumber,RetailerType,Composite,RelatedParty,Uploadeddate)  
	 SELECT DistCode,RtrId,RtrCode,CmpRtrCode,RtrName,RtrAddress1,RtrAddress2,RtrAddress3,RtrPINCode,RtrChannelCode,RtrGroupCode,RtrClassCode,KeyAccount,RelationStatus,   
	 ParentCode,RtrRegDate,GeoLevel,GeoLevelValue,VillageId,VillageCode,VillageName,Status,Mode,DrugLNo,RtrFrequency,RtrPhoneNo,RtrTINNumber,RtrTaxGroupCode,RtrCrLimit,RtrCrDays,   
	 Approved,RtrType,UploadFlag,SyncId,ServerDate,StateName,GSTTIN,PanNumber,RetailerType,Composite,RelatedParty,GETDATE() AS Uploadeddate FROM Cs2Cn_Prk_Retailer (NOLOCK) WHERE UploadFlag ='N'  
	 -------------- Till here -----------------------  
END
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Proc_Cn2Cs_RetailerReDownload]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[Proc_Cn2Cs_RetailerReDownload]
GO
/*
BEGIN TRAN
DELETE FROM ERRORLOG
--EXEC Proc_CN2CS_RouteMaster 0
--EXEC Proc_CN2CS_SalesManMaster 0
EXEC Proc_Cn2Cs_RetailerReDownload 0
SELECT * FROM Retailer 
select * from RetailerMarket where rtrid =1314
SELECT * FROM ERRORLOG
ROLLBACK TRAN
*/
CREATE PROCEDURE [dbo].[Proc_Cn2Cs_RetailerReDownload]
(
	@Po_ErrNo	INT OUTPUT
)
AS
/*********************************
* PROCEDURE		: Proc_Cn2Cs_RetailerMigration
* PURPOSE		: To validate and update records from parking table to main table
* CREATED		: S.MOORTHI
* CREATED DATE	: 08/01/2018
* MODIFIED
**************************************************************************************************
* DATE       AUTHOR     CR/BZ	USER STORY ID       DESCRIPTION                         
**************************************************************************************************
 08/01/2018  S.Moorthi   CR     ICRSTPAR7299        for 1 CR point
 09-08-2019  M.Lakshman  SR     ILCRSTPAR5462       New route updated validation included.
 20-07-2020	  Deepan     CR     PARCS202100041      USER INPUT and Reason added

*********************************************************************/
SET NOCOUNT ON
BEGIN
	DECLARE @MasterId INT
	DECLARE @UDCMasterId INT
	DECLARE @RtrId INT
	DECLARE @RtrShipAddId INT
	DECLARE @UdcCurrMasterId INT
	DECLARE @UdcCurrUniqueID INT	
	DECLARE @CoaID INT
	DECLARE @AccCode VARCHAR(200)
	DECLARE @AutoRtrCode AS NVARCHAR(200)
    DECLARE @RtrCode  	varchar	(50) 
	DECLARE @RtrCodeUserInput AS NVARCHAR(200)
	DECLARE @AutoRtrCodeConfig AS TINYINT
	SET @AutoRtrCodeConfig=0
	IF EXISTS(SELECT 'X' FROM Configuration (NOLOCK) where ModuleId='RET26' and Status=1)
		BEGIN
			SET @AutoRtrCodeConfig=1
		END	

	
	BEGIN TRY
			
		
		SET @Po_ErrNo = 0
		SELECT @RtrId = CurrValue From Counters WHERE TabName = 'Retailer' AND FldName = 'RtrId'
		SELECT @RtrShipAddId = CurrValue From Counters WHERE TabName = 'RetailerShipAdd'
		SELECT @UdcCurrMasterId = CurrValue From Counters WHERE TabName = 'UDCDetails' AND FldName = 'UdcDetailsId'
		SELECT @UdcCurrUniqueID = CurrValue From Counters WHERE TabName = 'UDCDetails' AND FldName = 'UDCUniqueId'		
		SELECT @CoaID = CurrValue From Counters WHERE TabName = 'CoaMaster'
		SELECT @AccCode = MAX(AcCode) From COAMaster A Where A.MainGroup=2 and A.AcCode LIKE '216%'
		
		SET @RtrCodeUserInput=''
		SET @AutoRtrCode=''		
		
		
		--IF (@AutoRtrCodeConfig=1)
		--BEGIN		
		--	SELECT  @AutoRtrCode=CASE Len(CurrValue+1)  
		--	WHEN 1 THEN Prefix + '0000' + Cast(Isnull(CurrValue,0) + 1 AS Varchar)
		--	WHEN 2 THEN Prefix + '000' + Cast(Isnull(CurrValue,0) + 1 AS Varchar) 
		--	WHEN 3 THEN Prefix + '00' + Cast(Isnull(CurrValue,0) + 1  AS Varchar) 
		--	WHEN 4 THEN Prefix + '0' + Cast(Isnull(CurrValue,0) + 1  AS Varchar) 
		--	WHEN 5 THEN Prefix + Cast(Isnull(CurrValue,0) + 1 AS Varchar) END
		--	FROM Counters (NOLOCK) WHERE TabName = 'Retailer'  AND FldName = 'RtrCode'		
						
		--	IF LEN(ISNULL(@AutoRtrCode,''))>0
		--	BEGIN
		--		SET @RtrCode=@AutoRtrCode				
		--	END
		--	ELSE
		--	BEGIN
		--		RETURN
		--	END	
		--END
		DELETE FROM Cn2Cs_Prk_RetailerReDownload WHERE DownloadFlag = 'Y'
		
		CREATE TABLE #TempMigrateRetailer
			(
				[RetailerCode] [nvarchar](100) COLLATE DATABASE_DEFAULT,
				[CmpRtrCode] [nvarchar](100) COLLATE DATABASE_DEFAULT,
				[RetailerName] [nvarchar](200) COLLATE DATABASE_DEFAULT,
				[RtrAddress1] [nvarchar](200) COLLATE DATABASE_DEFAULT,
				[RtrAddress2] [nvarchar](200) COLLATE DATABASE_DEFAULT,
				[RtrAddress3] [nvarchar](200) COLLATE DATABASE_DEFAULT,
				[RtrPinNo] [int] NULL,
				[RtrChannelCode] [nvarchar](100) COLLATE DATABASE_DEFAULT,
				[RtrGroupCode] [nvarchar](100) COLLATE DATABASE_DEFAULT,
				[RtrClassCode] [nvarchar](100) COLLATE DATABASE_DEFAULT,
				[KeyAccount] [nvarchar](20) COLLATE DATABASE_DEFAULT,
				[RelationStatus] [nvarchar](100) COLLATE DATABASE_DEFAULT,
				[ParentCode] [nvarchar](100) COLLATE DATABASE_DEFAULT,
				[RtrRegDate] [nvarchar](100) COLLATE DATABASE_DEFAULT,
				[RtrStatus] [int]NULL,
				[Approved] [varchar](10) NULL,
				[SalesRoute] [nvarchar](50) COLLATE DATABASE_DEFAULT,
				[DeliveryRoute] [nvarchar](50) COLLATE DATABASE_DEFAULT,
				[RtrType] [varchar](100) NULL,
				[RtrTINNo] [nvarchar](100) COLLATE DATABASE_DEFAULT,
				[RtrCrBills] [int] NULL,
				[RtrCrLimit] [numeric](38, 6) NULL,
				[RtrCrDays] [int] NULL,
				[RtrDayOff] [int] NULL,
				[RtrCSTNo] [nvarchar](100) COLLATE DATABASE_DEFAULT,
				[RtrPhoneNo] [nvarchar](100) COLLATE DATABASE_DEFAULT,
				[RtrContactPerson] [nvarchar](100) COLLATE DATABASE_DEFAULT,
				[RtrTaxGroup] [nvarchar](100) COLLATE DATABASE_DEFAULT,
				[RtrTaxable] [varchar](1) NULL,
				[RtrUniqueCode]	[nvarchar](100) COLLATE DATABASE_DEFAULT,
				[RtrShippAdd1] [nvarchar](200) COLLATE DATABASE_DEFAULT,
				[RtrShippAdd2] [nvarchar](200) COLLATE DATABASE_DEFAULT,
				[RtrShippAdd3] [nvarchar](200) COLLATE DATABASE_DEFAULT,
				[RtrLandLine] [nvarchar](100) COLLATE DATABASE_DEFAULT,
				[ReasonCode]  [nvarchar](100) COLLATE DATABASE_DEFAULT,
				[RtrCodeUserInput] [nvarchar](150) COLLATE DATABASE_DEFAULT,
				[DownloadFlag] [varchar](1) NULL
			)
	
			DELETE FROM Errorlog WHERE TableName = 'Cn2Cs_Prk_RetailerReDownload'
			
			--Find Duplicate Retailers From Download
			SELECT PR.RetailerCode INTO #ParkingDuplicateRetailers 
			FROM Cn2Cs_Prk_RetailerReDownload PR (NOLOCK)
			WHERE DownloadFlag = 'D' GROUP BY PR.RetailerCode
			HAVING COUNT(7)>1


			SELECT PR.RtrCodeUserInput INTO #ParkingDuplicateUserInput
			FROM Cn2Cs_Prk_RetailerReDownload PR (NOLOCK)
			WHERE DownloadFlag = 'D' AND (PR.RtrCodeUserInput IN(SELECT RTRCODEUSERINPUT FROM RETAILER) OR PR.RtrCodeUserInput IN(SELECT RTRCODE FROM RETAILER))

		
			
			SELECT Row_Number() OVER(Order By RetailerCode,CmpRtrCode) RowNo,RetailerCode,CmpRtrCode 
			INTO #DuplicateRetailers
			FROM 
			(
				SELECT PR.RetailerCode,PR.CmpRtrCode FROM Cn2Cs_Prk_RetailerReDownload PR (NOLOCK) 
				INNER JOIN #ParkingDuplicateRetailers D ON PR.RetailerCode = D.RetailerCode
				WHERE DownloadFlag = 'D'		
				UNION				
				SELECT PR.RetailerCode,PR.CmpRtrCode FROM Cn2Cs_Prk_RetailerReDownload PR (NOLOCK)
				INNER JOIN Retailer R (NOLOCK) ON PR.RetailerCode = R.RtrCode
				WHERE DownloadFlag = 'D'
			) A
			
			--Find Duplicate Retailers From Download			
			SELECT Row_Number() OVER(Order By RetailerCode,RtrUniqueCode) RowNo,RetailerCode,RtrUniqueCode 
			INTO #DuplicateRetailers1
			FROM 
			(
				SELECT PR.RetailerCode,PR.RtrUniqueCode FROM Cn2Cs_Prk_RetailerReDownload PR (NOLOCK) 
				INNER JOIN #ParkingDuplicateRetailers D ON PR.RetailerCode = D.RetailerCode
				WHERE DownloadFlag = 'D'		
				UNION				
				SELECT PR.RetailerCode,PR.RtrUniqueCode FROM Cn2Cs_Prk_RetailerReDownload PR (NOLOCK)
				INNER JOIN Retailer R (NOLOCK) ON PR.RetailerCode = R.RtrCode
				WHERE DownloadFlag = 'D'
			) A


			SELECT Row_Number() OVER(Order By RtrCodeUserInput,CmpRtrCode) RowNo,RtrCodeUserInput,CmpRtrCode 
			INTO #DuplicateRetUserInput
			FROM 
			(
				SELECT PR.RtrCodeUserInput,PR.CmpRtrCode FROM Cn2Cs_Prk_RetailerReDownload PR (NOLOCK) 
				INNER JOIN #ParkingDuplicateUserInput D ON PR.RtrCodeUserInput = D.RtrCodeUserInput
				WHERE DownloadFlag = 'D'		
				UNION				
				SELECT PR.RtrCodeUserInput,PR.CmpRtrCode FROM Cn2Cs_Prk_RetailerReDownload PR (NOLOCK)
				INNER JOIN Retailer R (NOLOCK) ON PR.RtrCodeUserInput = R.RtrCodeUserInput
				WHERE DownloadFlag = 'D'
			) A
			
			--Find Duplicate Retailers From Download			
			SELECT Row_Number() OVER(Order By RtrCodeUserInput,RtrUniqueCode) RowNo,RtrCodeUserInput,RtrUniqueCode 
			INTO #DuplicateRetUserInput1
			FROM 
			(
				SELECT PR.RtrCodeUserInput,PR.RtrUniqueCode FROM Cn2Cs_Prk_RetailerReDownload PR (NOLOCK) 
				INNER JOIN #ParkingDuplicateUserInput D ON PR.RtrCodeUserInput = D.RtrCodeUserInput
				WHERE DownloadFlag = 'D'		
				UNION				
				SELECT PR.RtrCodeUserInput,PR.RtrUniqueCode FROM Cn2Cs_Prk_RetailerReDownload PR (NOLOCK)
				INNER JOIN Retailer R (NOLOCK) ON PR.RtrCodeUserInput = R.RtrCodeUserInput
				WHERE DownloadFlag = 'D'
			) A
						
			--Delete Duplicate Retailers in Temp Table WHILE RtrStatus=1
			--DELETE D FROM #DuplicateRetailers D  (NOLOCK) 
			--INNER JOIN Retailer R (NOLOCK) ON D.RetailerCode = R.RtrCode AND D.CmpRtrCode = R.CmpRtrCode
			--WHERE R.RtrStatus = 1  --Approved=1
			
			--IF EXISTS (SELECT 7 FROM #DuplicateRetailers)
			--BEGIN
			
			--	SELECT RtrCode INTO #ExistingRtrCode FROM
			--	(
			--		SELECT RetailerCode AS RtrCode FROM Cn2Cs_Prk_RetailerReDownload PR (NOLOCK) WHERE DownloadFlag = 'D'
			--		UNION
			--		SELECT RtrCode  FROM Retailer R (NOLOCK)
			--	)X
			--	DECLARE @CntOfDuplicate AS INTEGER
			--	DECLARE @CurrentNo AS NVARCHAR(3)
			--	DECLARE @Counter AS NVARCHAR(6)
			--	DECLARE @RtrFlag AS TINYINT
			--	DECLARE @RetailerCode AS NVARCHAR(200)
			--	DECLARE @FreshRtrCode AS NVARCHAR(200)
			--	SET @CntOfDuplicate = 0
			--	SET @CurrentNo = 1
				
			--	--Duplicate Retailer Count
			--	SELECT @CntOfDuplicate = COUNT(7) FROM #DuplicateRetailers (NOLOCK)
			--	WHILE (@CntOfDuplicate >= @CurrentNo)
			--	BEGIN
			--		SET @RtrFlag = 0
			--		SET @Counter = 1
					
			--		SELECT @RetailerCode = RetailerCode FROM #DuplicateRetailers (NOLOCK) WHERE RowNo = @CurrentNo
					
			--		WHILE (@RtrFlag = 0)
			--		BEGIN
										
			--			SET @FreshRtrCode = 'M'+@Counter+@RetailerCode
						
			--			IF NOT EXISTS(SELECT 7 FROM #ExistingRtrCode E (NOLOCK) WHERE RtrCode = @FreshRtrCode)
			--			BEGIN
						
			--				UPDATE D SET RetailerCode = @FreshRtrCode FROM #DuplicateRetailers D (NOLOCK) WHERE RowNo = @CurrentNo
							
			--				INSERT INTO #ExistingRtrCode
			--				SELECT @FreshRtrCode
							
			--				SET @RtrFlag = 1			
			--			END
			--			ELSE
			--			BEGIN
			--				SET @Counter = @Counter + 1
			--			END						
			--		 END
					 					 
			--		 SET @CurrentNo = @CurrentNo + 1	
			--	 END
			
			--	UPDATE P SET P.RetailerCode = D.RetailerCode
			--	FROM #DuplicateRetailers D (NOLOCK) INNER JOIN Cn2Cs_Prk_RetailerReDownload P (NOLOCK) 
			--	ON P.CmpRtrCode = D.CmpRtrCode WHERE DownloadFlag = 'D'	
			--END
			--Till Here
			
			
			INSERT INTO #TempMigrateRetailer (RetailerCode,CmpRtrCode,RetailerName,RtrAddress1,RtrAddress2,
			RtrAddress3,RtrPinNo,RtrChannelCode,RtrGroupCode,RtrClassCode,KeyAccount,RelationStatus,ParentCode,RtrRegDate,RtrStatus,
			Approved,SalesRoute,DeliveryRoute,RtrType,RtrTINNo,RtrCrBills,RtrCrLimit,RtrCrDays,RtrDayOff,RtrCSTNo,RtrPhoneNo,
			RtrContactPerson,RtrTaxGroup,RtrTaxable,RtrUniqueCode,RtrShippAdd1,RtrShippAdd2,RtrShippAdd3,RtrLandLine,ReasonCode,RtrCodeUserInput)
			SELECT DISTINCT RetailerCode,CmpRtrCode,RetailerName,RtrAddress1,RtrAddress2,
			RtrAddress3,RtrPinNo,RtrChannelCode,RtrGroupCode,RtrClassCode,KeyAccount,RelationStatus,ParentCode,RtrRegDate,RtrStatus,
			Approved,SalesRoute,DeliveryRoute,RtrType,RtrTINNo,RtrCrBills,RtrCrLimit,RtrCrDays,RtrDayOff,RtrCSTNo,RtrPhoneNo,
			RtrContactPerson,RtrTaxGroup,RtrTaxable,RtrUniqueCode,RtrShippAdd1,RtrShippAdd2,RtrShippAdd3,RtrLandLine,ReasonCode,RtrCodeUserInput
			FROM Cn2Cs_Prk_RetailerReDownload A WITH (NOLOCK)  WHERE DownLoadFlag = 'D'
			AND NOT EXISTS(SELECT RetailerCode,CmpRtrCode FROM #DuplicateRetailers B WHERE A.RetailerCode=B.RetailerCode and A.CmpRtrCode=B.CmpRtrCode)	
			AND NOT EXISTS(SELECT RetailerCode,RtrUniqueCode FROM #DuplicateRetailers1 C WHERE A.RetailerCode=C.RetailerCode and A.RtrUniqueCode=C.RtrUniqueCode)	
			AND NOT EXISTS(SELECT RtrCodeUserInput,CmpRtrCode FROM #DuplicateRetUserInput D WHERE A.RtrCodeUserInput=D.RtrCodeUserInput and A.CmpRtrCode=D.CmpRtrCode)	
			AND NOT EXISTS(SELECT RtrCodeUserInput,RtrUniqueCode FROM #DuplicateRetUserInput1 E WHERE A.RtrCodeUserInput=E.RtrCodeUserInput and A.RtrUniqueCode=E.RtrUniqueCode)

			SELECT DISTINCT RetailerCode,CmpRtrCode,RetailerName,RtrAddress1,RtrAddress2,
			RtrAddress3,RtrPinNo,RtrChannelCode,RtrGroupCode,RtrClassCode,KeyAccount,RelationStatus,ParentCode,RtrRegDate,RtrStatus,
			Approved,SalesRoute,DeliveryRoute,RtrType,RtrTINNo,RtrCrBills,RtrCrLimit,RtrCrDays,RtrDayOff,RtrCSTNo,RtrPhoneNo,
			RtrContactPerson,RtrTaxGroup,RtrTaxable,RtrUniqueCode,RtrShippAdd1,RtrShippAdd2,RtrShippAdd3,RtrLandLine,ReasonCode,RtrCodeUserInput
			INTO #TempMigrateRetailerExisting FROM Cn2Cs_Prk_RetailerReDownload A WITH (NOLOCK)  WHERE DownLoadFlag = 'D'
			AND  EXISTS(SELECT RetailerCode,CmpRtrCode FROM #DuplicateRetailers B WHERE A.RetailerCode=B.RetailerCode and A.CmpRtrCode=B.CmpRtrCode)	
			AND EXISTS(SELECT RetailerCode,RtrUniqueCode FROM #DuplicateRetailers1 C WHERE A.RetailerCode=C.RetailerCode and A.RtrUniqueCode=C.RtrUniqueCode)	
			AND  EXISTS(SELECT RtrCodeUserInput,CmpRtrCode FROM #DuplicateRetUserInput D WHERE A.RtrCodeUserInput=D.RtrCodeUserInput and A.CmpRtrCode=D.CmpRtrCode)	
			AND  EXISTS(SELECT RtrCodeUserInput,RtrUniqueCode FROM #DuplicateRetUserInput1 E WHERE A.RtrCodeUserInput=E.RtrCodeUserInput and A.RtrUniqueCode=E.RtrUniqueCode)
	
			--Check Cmp Retailer Code --> Join Check RtrCode?
			INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)
			SELECT 2,'RetailerMigration','CmpRtrCode','Retailer '+B.CmpRtrCode+' Already Exists' FROM Retailer A (NOLOCK)  
			INNER JOIN #TempMigrateRetailer B (NOLOCK) ON A.CmpRtrCode = B.CmpRtrCode AND A.RtrCode = B.RetailerCode 			
			
			DELETE B FROM Retailer A
			INNER JOIN #TempMigrateRetailer B ON A.CmpRtrCode = B.CmpRtrCode AND A.RtrCode = B.RetailerCode	
			
			--Retailer Code Length
			INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)
			SELECT 2,'Retailer','RetailerCode','Retailer Code '+RetailerCode+' Maximum Length should be 25' 
			FROM #TempMigrateRetailer (NOLOCK) WHERE LEN(LTRIM(RTRIM(RetailerCode)))>25
			
			DELETE FROM #TempMigrateRetailer WHERE LEN(LTRIM(RTRIM(RetailerCode)))>25
			
			--Retailer Code Blank
			INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)
			SELECT 2,'Retailer','RetailerCode','Company Retailer Code for '+RetailerCode+' is mandatory for Restored retailers' 
			FROM #TempMigrateRetailer (NOLOCK) WHERE LEN(LTRIM(RTRIM(RetailerCode)))<=0
			
			DELETE FROM #TempMigrateRetailer WHERE LEN(LTRIM(RTRIM(RetailerCode)))<=0
			
			--Company Retailer Code Blank
			INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)
			SELECT 2,'Retailer','Company RetailerCode','Company Retailer Code for '+CmpRtrCode+' is mandatory for Restored retailers' 
			FROM #TempMigrateRetailer (NOLOCK) WHERE LEN(LTRIM(RTRIM(CmpRtrCode)))<=0
			
			DELETE FROM #TempMigrateRetailer WHERE LEN(LTRIM(RTRIM(CmpRtrCode)))<=0
			
			
			--RtrUniqueCode Blank
			INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)
			SELECT 2,'Retailer','Company RetailerCode','Retailer Unique Code for '+RtrUniqueCode+' is mandatory for Restored retailers' 
			FROM #TempMigrateRetailer (NOLOCK) WHERE LEN(LTRIM(RTRIM(RtrUniqueCode)))<=0
			
			DELETE FROM #TempMigrateRetailer WHERE LEN(LTRIM(RTRIM(RtrUniqueCode)))<=0

			INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)
			SELECT 2,'Retailer','RetailerCode',' Retailer Code for '+RtrCodeUserInput+' is mandatory for Restored retailers' 
			FROM #TempMigrateRetailer (NOLOCK) WHERE LEN(LTRIM(RTRIM(RtrCodeUserInput)))<=0
			
			DELETE FROM #TempMigrateRetailer WHERE LEN(LTRIM(RTRIM(RtrCodeUserInput)))<=0

				INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)
			SELECT 2,'Retailer','RetailerCode','Retailer Code '+RtrCodeUserInput+' Maximum Length should be 25' 
			FROM #TempMigrateRetailer (NOLOCK) WHERE LEN(LTRIM(RTRIM(RtrCodeUserInput)))>25
			
			DELETE FROM #TempMigrateRetailer WHERE LEN(LTRIM(RTRIM(RtrCodeUserInput)))>25

			
			--Retailer Category CHANNEL
			INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)
			SELECT 5,'Retailer Category','Catagory Code','Category Code '+RtrChannelCode+' does not exists' 
			FROM #TempMigrateRetailer A (NOLOCK) WHERE NOT EXISTS(SELECT CtgCode FROM RetailerCategory B (NOLOCK) 
			INNER JOIN RetailerCategoryLevel  C (NOLOCK) ON C.CtgLevelId=B.CtgLevelId
			WHERE A.RtrChannelCode=B.CtgCode AND UPPER(C.CtgLevelName)='CHANNEL') 
			
			DELETE A FROM #TempMigrateRetailer A WHERE NOT EXISTS(SELECT CtgCode FROM RetailerCategory B (NOLOCK) 
			INNER JOIN RetailerCategoryLevel C  (NOLOCK)ON C.CtgLevelId=B.CtgLevelId
			WHERE A.RtrChannelCode=B.CtgCode AND UPPER(C.CtgLevelName)='CHANNEL') 
			
			--Retailer Category GROUP
			INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)
			SELECT 5,'Retailer Category','Catagory Code','Group Code '+RtrGroupCode+' does not exists' 
			FROM #TempMigrateRetailer A (NOLOCK) WHERE NOT EXISTS(SELECT CtgCode FROM RetailerCategory B (NOLOCK) 
			INNER JOIN RetailerCategoryLevel C (NOLOCK) ON C.CtgLevelId=B.CtgLevelId
			WHERE A.RtrGroupCode=B.CtgCode AND UPPER(C.CtgLevelName)='GROUP') 
			
			DELETE A FROM #TempMigrateRetailer A WHERE NOT EXISTS(SELECT CtgCode FROM RetailerCategory B (NOLOCK) 
			INNER JOIN RetailerCategoryLevel  C (NOLOCK) ON C.CtgLevelId=B.CtgLevelId
			WHERE A.RtrGroupCode=B.CtgCode AND UPPER(C.CtgLevelName)='GROUP')
						
			--Retailer Value Class
			INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)
			SELECT 5,'Retailer Category','Catagory Code','Value Class Code '+RtrClassCode+' does not exists' 
			FROM #TempMigrateRetailer A (NOLOCK) WHERE NOT EXISTS(SELECT ValueClassCode FROM RetailerValueClass B (NOLOCK) 			
			WHERE A.RtrClassCode=B.ValueClassCode) 
			
			DELETE A FROM #TempMigrateRetailer A WHERE NOT EXISTS(SELECT ValueClassCode FROM RetailerValueClass B (NOLOCK) 			
			WHERE A.RtrClassCode=B.ValueClassCode)  
			
			--INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)
			--SELECT 9,'Retailer','MigrateDate','Migrate Date for '+CmpRtrCode+' is mandatory for Migrated/Restored retailers' 
			--FROM #TempMigrateRetailer (NOLOCK) WHERE LEN(LTRIM(RTRIM(MigrateDate)))<=0 
			--DELETE FROM #TempMigrateRetailer WHERE LEN(LTRIM(RTRIM(MigrateDate)))<=0 
			
			--Sales Route Blank
			INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)
			SELECT 10,'Retailer','RmCode','Sales Route for '+CmpRtrCode+' is mandatory for Migrated retailers' 
			FROM #TempMigrateRetailer (NOLOCK) WHERE LEN(LTRIM(RTRIM(SalesRoute)))<=0
			
			DELETE FROM #TempMigrateRetailer WHERE LEN(LTRIM(RTRIM(SalesRoute)))<=0
			
			--Delivery Route Blank
			INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)
			SELECT 11,'Retailer','DRmCode','Delivery Route for '+CmpRtrCode+' is mandatory for Migrated retailers' 
			FROM #TempMigrateRetailer (NOLOCK) WHERE LEN(LTRIM(RTRIM(DeliveryRoute)))<=0
			
			DELETE FROM #TempMigrateRetailer WHERE LEN(LTRIM(RTRIM(DeliveryRoute)))<=0
			
			--Sales Route --> Route Master
			INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)
			SELECT 12,'Retailer','RmCode','Sales Route for '+CmpRtrCode+' does not exists for Migrated retailers' 
			FROM #TempMigrateRetailer (NOLOCK) WHERE SalesRoute NOT IN (SELECT RMCode FROM RouteMaster WHERE RmStatus = 1 AND RMSRouteType = 1) 
			
			DELETE FROM #TempMigrateRetailer WHERE SalesRoute NOT IN (SELECT RMCode FROM RouteMaster WHERE RmStatus = 1 AND RMSRouteType = 1)
			
			--Delivery Route -->Route Master
			INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)
			SELECT 13,'Retailer','DRmCode','Delivery Route for '+CmpRtrCode+' does not exists for Migrated retailers' 
			FROM #TempMigrateRetailer (NOLOCK) WHERE DeliveryRoute NOT IN (SELECT RMCode FROM RouteMaster WHERE RmStatus = 1) 
			
			DELETE FROM #TempMigrateRetailer WHERE DeliveryRoute NOT IN (SELECT RMCode FROM RouteMaster WHERE RmStatus = 1)	
			--Take Geography Details
			CREATE TABLE #Geography
			(
				RtrCode			NVARCHAR(200) COLLATE DATABASE_DEFAULT,
				RmId			INT,
				RmCode			NVARCHAR(100) COLLATE DATABASE_DEFAULT,
				GeoMainid		INT,
				GeoLevelId		INT,
				GeoName			NVARCHAR(200) COLLATE DATABASE_DEFAULT,
				GeoLevelName	NVARCHAR(200) COLLATE DATABASE_DEFAULT
			)
			
			INSERT INTO #Geography (RtrCode,RmId,RmCode,GeoMainid,GeoLevelId,GeoName,GeoLevelName)
			SELECT DISTINCT A.RetailerCode,R.RMId,R.RMCode,B.GeoMainId,C.GeoLevelId,B.GeoName,C.GeoLevelName 
			FROM #TempMigrateRetailer A (NOLOCK)
				INNER JOIN RouteMaster R (NOLOCK) ON A.SalesRoute=R.RMCode
				INNER JOIN Geography B (NOLOCK) ON R.GeoMainId=B.GeoMainId AND RMSRouteType=1
				INNER JOIN GeographyLevel C (NOLOCK) ON B.GeoLevelId=C.GeoLevelId
			
			
			--Take Delivery Route
			CREATE TABLE #DeliveryRoute
			(
				RtrCode			NVARCHAR(200) COLLATE DATABASE_DEFAULT,
				RmId			INT,
				RmCode			NVARCHAR(100) COLLATE DATABASE_DEFAULT
			)
			
			INSERT INTO #DeliveryRoute (RtrCode,RmId,RmCode)
			SELECT DISTINCT A.RetailerCode,R.RMId,R.RMCode
			FROM #TempMigrateRetailer A (NOLOCK)
				INNER JOIN RouteMaster R (NOLOCK) ON A.DeliveryRoute=R.RMCode AND RMSRouteType=2
				
			SET @RtrId=ISNULL(@RtrId,0)
			
			
						
			----(CASE R.RtrType WHEN 1 THEN 'Retailer' WHEN 2 THEN 'Sub Stockist' WHEN 3 THEN 'Hub' WHEN 4 THEN 'Spoke' ELSE 'Distributor' END)
			INSERT INTO Retailer(RtrId,RtrCode,RtrName,RtrAdd1,RtrAdd2,RtrAdd3,RtrPinNo,RtrPhoneNo,RtrEmailId,RtrContactPerson,
			RtrKeyAcc,RtrCovMode,RtrRegDate,RtrDayOff,RtrStatus,RtrTaxable,RtrTaxType,RtrTINNo,RtrCSTNo,RtrDepositAmt,
			RtrCrBills,RtrCrLimit,RtrCrDays,RtrCashDiscPerc,RtrCashDiscCond,RtrCashDiscAmt,RtrLicNo,RtrLicExpiryDate,
			RtrDrugLicNo,RtrDrugExpiryDate,RtrPestLicNo,RtrPestExpiryDate,GeoMainId,RMId,VillageId,RtrShipId,TaxGroupId,RtrResPhone1,
			RtrResPhone2,RtrOffPhone1,RtrOffPhone2,RtrDOB,RtrAnniversary,RtrRemark1,RtrRemark2,RtrRemark3,CoaId,RtrOnAcc,RtrType,RtrFrequency,
			RtrCrBillsAlert,RtrCrLimitAlert,RtrCrDaysAlert,Upload,RtrRlStatus,Availability,LastModBy,LastModDate,AuthId,AuthDate,CmpRtrCode,
			Approved,XMLUpload,RtrPayment,RtrUniqueCode,RtrLandLine,Reason,RtrCodeUserInput)
			SELECT @RtrId + ROW_NUMBER() OVER (ORDER BY RetailerCode,RetailerName),
			RetailerCode ,RetailerName,ISNULL(RtrAddress1,''),ISNULL(RtrAddress2,''),
			ISNULL(RtrAddress3,''),ISNULL(RtrPinNo,''),ISNULL(RtrPhoneNo,''),'' AS RtrEmailId,ISNULL(RtrContactPerson,''),
			(CASE ISNULL(KeyAccount,'NO') WHEN 'NO' THEN 0 ELSE 1 END) AS KeyAccount,
			1,CONVERT(VARCHAR(10),CAST(RtrRegDate as datetime),121),ISNULL(RtrDayOff,0),ISNULL(RtrStatus,1),(CASE ISNULL(RtrTaxable,'Y') WHEN 'Y' THEN 1 ELSE 1 END) AS RtrTaxable,
			(CASE ISNULL(RtrTINNo,'') WHEN '' THEN 1 ELSE 0 END) AS RtrTaxType,ISNULL(RtrTINNo,'') AS RtrTINNo,ISNULL(RtrCSTNo,'') AS RtrCSTNo,0,ISNULL(RtrCrBills,0),ISNULL(RtrCrLimit,0),ISNULL(RtrCrDays,0),
			0,0,0,'','','','','','',ISNULL(#Geography.GeoMainid,0),ISNULL(#DeliveryRoute.RmId,0),0 VillageId,0 RtrShipId,0 TaxGroupId,'',
			'','','',GETDATE(),GETDATE(),'','','',0 AS CoaId,0,CASE RtrType WHEN 'Retailer' THEN 1 WHEN 'Sub Stockist' THEN  2 WHEN  'Hub' THEN 3 WHEN 'Spoke'  THEN  3 ELSE 0 END as RtrType,0, --ISNULL(RtrType,1),0,
			0,0,0,'N',CASE ISNULL(RelationStatus,'INDEPENDENT') WHEN 'PARENT' THEN 2 WHEN 'CHILD' THEN 3  ELSE 1 END AS RelationStatus,
						1,1,GETDATE(),1,GETDATE(),CmpRtrCode,CASE ISNULL(Approved,'APPROVED') WHEN 'APPROVED' THEN 1 WHEN 'PENDING' THEN 0  ELSE 2 END Approved,0,1,RtrUniqueCode,RtrLandLine,RE.ReasonId,RtrCodeUserInput
			 FROM #TempMigrateRetailer A (NOLOCK)
			 LEFT OUTER JOIN ReasonMaster RE(NOLOCK) ON RE.ReasonCode=A.ReasonCode
			LEFT OUTER JOIN #Geography ON A.RetailerCode =#Geography.RtrCode AND A.SalesRoute=#Geography.RmCode
			INNER JOIN #DeliveryRoute ON A.RetailerCode = #DeliveryRoute.RtrCode
			WHERE LEN(RetailerCode) > 0 AND LEN(RetailerName) > 0 AND LEN(A.CmpRtrCode) > 0
			
			
			DECLARE @TrackID as BIGINT			
			SELECT @TrackID=MAX(ISNULL(TrackID,0)) FROM RetailerReDownloadTracking
			
			INSERT INTO RetailerReDownloadTracking (TrackID,RetailerCode,CmpRtrCode,RetailerName,RtrAddress1,RtrAddress2,
			RtrAddress3,RtrPinNo,RtrChannelCode,RtrGroupCode,RtrClassCode,KeyAccount,RelationStatus,ParentCode,RtrRegDate,RtrStatus,
			Approved,SalesRoute,DeliveryRoute,RtrType,RtrTINNo,RtrCrBills,RtrCrLimit,RtrCrDays,RtrDayOff,RtrCSTNo,RtrPhoneNo,
			RtrContactPerson,RtrTaxGroup,RtrTaxable,RtrUniqueCode,RtrShippAdd1,RtrShippAdd2,RtrShippAdd3,CreatedDate,RtrLandLine,ReasonCode,RtrCodeUserInput)
			SELECT DISTINCT ISNULL(@TrackID,0)+1,RetailerCode,CmpRtrCode,RetailerName,RtrAddress1,RtrAddress2,
			RtrAddress3,RtrPinNo,RtrChannelCode,RtrGroupCode,RtrClassCode,KeyAccount,RelationStatus,ParentCode,RtrRegDate,RtrStatus,
			Approved,SalesRoute,DeliveryRoute,RtrType,RtrTINNo,RtrCrBills,RtrCrLimit,RtrCrDays,RtrDayOff,RtrCSTNo,RtrPhoneNo,
			RtrContactPerson,RtrTaxGroup,RtrTaxable,RtrUniqueCode,RtrShippAdd1,RtrShippAdd2,RtrShippAdd3,GETDATE(),RtrLandLine,ReasonCode,RtrCodeUserInput
			FROM #TempMigrateRetailer 
			
			--------------Added By lakshman M Dated ON 09082019 PMS ID: ILCRSTPAR5462  (Retailer Market Old Route Bakup and New route updating.) ---------------- 
			INSERT INTO RetailerMarketOldRouteTrack (RtrId,RMId,Availability,LastModBy,LastModDate,AuthId,AuthDate,Upload,LastRouteRemoveddate)
			SELECT Distinct  A.*,GETDATE() FROM retailermarket A INNER JOIN Retailer B ON A.Rtrid =b.rtrid 
			--left outer JOin RouteMaster C ON A.Rmid =C.Rmid 
			INNER JOIN #TempMigrateRetailerExisting D ON B.rtrCode =D.RetailerCode 
			inner join RouteMaster C ON C.RmCode =D.SalesRoute AND  EXISTS (SELECT * FROM Retailermarket R WHERE R.Rmid = A.Rmid ANd R.Rtrid =A.Rtrid )
	
			DELETE A FROM RetailerMarket A  inner join RetailerMarketOldRouteTrack B ON A.Rtrid =B.Rtrid --And A.Rmid=B.RMId

			INSERT INTO RetailerMarket (RtrId,RMId,Availability,LastModBy,LastModDate,AuthId,AuthDate,Upload)
			SELECT Distinct B.Rtrid,ISNULL(C.Rmid,0),1,1,CONVERT(VARCHAR(10),GETDATE(),121),1,CONVERT(VARCHAR(10),GETDATE(),121),0 
			FROM RetailerMarketOldRouteTrack A (NOLOCK) INNER JOIN Retailer B (NOLOCK) ON A.Rtrid =b.rtrid 
			--left outer JOin RouteMaster C ON A.Rmid =C.Rmid 
			INNER JOIN #TempMigrateRetailerExisting D ON B.rtrCode =D.RetailerCode 
			inner join RouteMaster C (NOLOCK) ON C.RmCode =D.SalesRoute AND EXISTS (SELECT * FROM RetailerMarketOldRouteTrack R WHERE  R.Rtrid =A.Rtrid )
			-------------------------- Till here  PMS ID: ILCRSTPAR5462 -----------------------------------------------------

			--Retailer Market
			INSERT INTO RetailerMarket(RtrId,RMId,Availability,LastModBy,LastModDate,AuthId,AuthDate,Upload)
			SELECT R.RtrId,ISNULL(#Geography.RmId,0),1,1,CONVERT(VARCHAR(10),GETDATE(),121),1,CONVERT(VARCHAR(10),GETDATE(),121),0
			FROM Retailer R (NOLOCK)
			INNER JOIN #TempMigrateRetailer A (NOLOCK) ON R.RtrCode = A.RetailerCode AND R.CmpRtrCode = A.CmpRtrCode 
			LEFT OUTER JOIN #Geography ON R.RtrCode =#Geography.RtrCode 
			
			--Retailer Value Class
			CREATE TABLE #RetailerDet
			(
				RetailerCode		NVARCHAR(200) COLLATE DATABASE_DEFAULT,
				ChannelCode			NVARCHAR(100) COLLATE DATABASE_DEFAULT,
				GroupCode			NVARCHAR(200) COLLATE DATABASE_DEFAULT,				
				ValueClassCode		NVARCHAR(100) COLLATE DATABASE_DEFAULT,				
				RtrClassId			INT,
				CtgMainId			INT,
				CtgLinkId			INT,
				CtgLevelId			INT,		
				CtgLinkCode			NVARCHAR(200) COLLATE DATABASE_DEFAULT,
				CtgLevelName		NVARCHAR(200) COLLATE DATABASE_DEFAULT,
				CmpId				INT,		
				CmpName				NVARCHAR(200) COLLATE DATABASE_DEFAULT
			)
	
	
			INSERT INTO #RetailerDet (RetailerCode,ChannelCode,GroupCode,ValueClassCode,RtrClassId,CtgMainId,CtgLinkId,CtgLevelId,CtgLinkCode,
									  CtgLevelName,CmpId,CmpName)
			SELECT DISTINCT TR.RetailerCode,RC1.CtgCode AS ChannelCode,RC.CtgCode  AS GroupCode,RVC.ValueClassCode,
			RVC.RtrClassId,RC.CtgMainId,RC.CtgLinkId,RC.CtgLevelId,RC.CtgLinkCode,RCL.CtgLevelName,C.CmpId,C.CmpName
				FROM
				RetailerValueClass RVC,
				RetailerCategory RC,
				RetailerCategoryLevel RCL,
				RetailerCategory RC1,
				Cn2Cs_Prk_RetailerReDownload TR,
				Company C
			WHERE RVC.CtgMainId=RC.CtgMainId
				AND	RCL.CtgLevelId=RC.CtgLevelId
				AND	RC.CtgLinkId = RC1.CtgMainId				
				AND TR.RtrClassCode=RVC.ValueClassCode			
				AND RC.CtgCode=TR.RtrGroupCode
				AND C.CmpId=RCL.CmpId AND C.DefaultCompany=1
				
					
			INSERT INTO RetailerValueClassMap(RtrId,RtrValueClassId,Availability,LastModBy,LastModDate,AuthId,AuthDate)
			SELECT R.RtrId,ISNULL(#RetailerDet.RtrClassId,0),1,1,CONVERT(VARCHAR(10),GETDATE(),121),1,CONVERT(VARCHAR(10),GETDATE(),121)
			FROM Retailer R (NOLOCK)
			INNER JOIN #TempMigrateRetailer A (NOLOCK) ON R.RtrCode = A.RetailerCode AND R.CmpRtrCode = A.CmpRtrCode 
			LEFT OUTER JOIN #RetailerDet ON R.RtrCode =#RetailerDet.RetailerCode
			--Till Here
			
			--RetailerShipAdd
			INSERT INTO RetailerShipAdd (RtrShipId,RtrId,RtrShipAdd1,RtrShipAdd2,RtrShipAdd3,RtrShipPinNo,RtrShipPhoneNo,RtrShipDefaultAdd,
			Availability,LastModBy,LastModDate,AuthId,AuthDate)
			SELECT @RtrShipAddId + ROW_NUMBER() OVER (ORDER BY RetailerCode,RetailerName),@RtrId + ROW_NUMBER() OVER (ORDER BY RetailerCode,RetailerName),
			A.RtrShippAdd1,A.RtrShippAdd2,A.RtrShippAdd3,'','',
			1,1,1,CONVERT(VARCHAR(10),GETDATE(),121),1,CONVERT(VARCHAR(10),GETDATE(),121)
			FROM Retailer R (NOLOCK)
			INNER JOIN #TempMigrateRetailer A (NOLOCK) ON R.RtrCode = A.RetailerCode AND R.CmpRtrCode = A.CmpRtrCode 
			
			UPDATE A SET A.RtrShipId=B.RtrShipId FROM Retailer A(NOLOCK) 			
			INNER JOIN RetailerShipAdd B (NOLOCK) ON A.RtrId=B.RtrId 
			
			--UPDATE R SET R.VillageId=B.VillageId FROM Retailer R(NOLOCK) 			
			--INNER JOIN #TempMigrateRetailer A (NOLOCK) ON R.RtrCode = A.RetailerCode AND R.CmpRtrCode = A.CmpRtrCode 		
			--INNER JOIN RouteVillage B (NOLOCK) ON B.VillageCode=A.VillageCode 
			
			UPDATE R SET R.TaxGroupId=B.TaxGroupId FROM Retailer R(NOLOCK) 			
			INNER JOIN #TempMigrateRetailer A (NOLOCK) ON R.RtrCode = A.RetailerCode AND R.CmpRtrCode = A.CmpRtrCode 		
			INNER JOIN TaxGroupSetting B (NOLOCK) ON B.RtrGroup=A.RtrTaxGroup 
			
			--CoaMaster
			CREATE TABLE #TempCoaMaster
				(
					CoaId		INT,
					AcCode		VARCHAR(100),
					RtrCode		VARCHAR(100),
					CmpRtrCode	VARCHAR(100),
					RetailerName VARCHAR(200)	
				)
			
			INSERT INTO #TempCoaMaster(CoaId,AcCode,RtrCode,CmpRtrCode,RetailerName)
			SELECT @CoaId + ROW_NUMBER() OVER (ORDER BY RetailerCode,RetailerName),@AccCode + ROW_NUMBER() OVER (ORDER BY RetailerCode,RetailerName),RetailerCode,R.CmpRtrCode,RetailerName
			FROM #TempMigrateRetailer A
			INNER JOIN Retailer R WITH (NOLOCK) ON A.RetailerCode = R.RtrCode AND A.CmpRtrCode = R.CmpRtrCode
			WHERE LEN(RetailerCode) > 0 AND LEN(RetailerName) > 0 AND LEN(A.CmpRtrCode) > 0 
			
			--Coa Master
			INSERT INTO CoaMaster (CoaId,AcCode,AcName,AcLevel,MainGroup,Status,Availability,LastModBy,LastModDate,AuthId,AuthDate)
			SELECT CoaId,AcCode,RetailerName,4,2,2,1,1,CONVERT(VARCHAR(10),GETDATE(),121),1,CONVERT(VARCHAR(10),GETDATE(),121)
			FROM #TempCoaMaster
			
			UPDATE A SET A.CoaId=R.CoaId FROM Retailer A
			INNER JOIN #TempCoaMaster R WITH (NOLOCK) ON A.RtrCode = R.RtrCode AND A.CmpRtrCode = R.CmpRtrCode
			
			--UPDATE COUNTERS
			SELECT @CoaID = ISNULL(MAX(CoaID),0) FROM COAMaster 	
			UPDATE Counters SET CurrValue = @CoaID WHERE TabName = 'COAMaster'
			
			
			SELECT @RtrShipAddId = ISNULL(MAX(RtrShipId),0) FROM RetailerShipAdd
			UPDATE Counters SET CurrValue = @RtrShipAddId WHERE TabName = 'RetailerShipAdd'
			
			SELECT @RtrID = ISNULL(MAX(RtrId),0) FROM Retailer
			UPDATE Counters SET CurrValue = @RtrID WHERE TabName = 'Retailer' AND FldName = 'RtrId'
			
			--Update CompanyCounters 
			IF EXISTS(SELECT 7 FROM Cn2Cs_Prk_RetailerReDownload P (NOLOCK))
			BEGIN
				SELECT Prefix,CurYear,MAX(REPLACE(CmpRtrCode,(Prefix+RIGHT(CurYear,2)),0)) CurValue
				INTO #UpdatingCompanyCounters
				FROM CompanyCounters C (NOLOCK)
				INNER JOIN Retailer R (NOLOCK) ON R.CmpRtrCode LIKE (C.Prefix+RIGHT(C.CurYear,2))+'%'
				WHERE TabName = 'Retailer' AND FldName = 'CmpRtrCode' --AND CurrValue = 0
				GROUP BY Prefix,CurYear
				
				UPDATE T SET T.CurrValue = F.CurValue
				FROM #UpdatingCompanyCounters F (NOLOCK)
				INNER JOIN CompanyCounters T (NOLOCK) ON F.Prefix = T.Prefix AND F.CurYear = T.CurYear
			END
			
			IF EXISTS(SELECT '*' FROM Cn2Cs_Prk_RetailerGST(NOLOCK) WHERE ISNULL(DownLoadFlag,'D')='D')
			BEGIN
				EXEC Proc_Cn2Cs_RetailerGST 0
			END
			
			UPDATE A SET A.DownloadFlag='Y' FROM Cn2Cs_Prk_RetailerReDownload A (NOLOCK) 
			INNER JOIN Retailer B (NOLOCK) ON A.RetailerCode=B.RtrCode AND A.CmpRtrCode = B.CmpRtrCode 
			WHERE LEN(RetailerCode) > 0 AND LEN(RetailerName) > 0 AND LEN(A.CmpRtrCode) > 0 AND DownloadFlag = 'D' 
	
	END TRY
	BEGIN CATCH
		SET @Po_ErrNo=1
		SELECT ERROR_LINE(),ERROR_MESSAGE ()
	END CATCH
END
GO
IF EXISTS(SELECT * FROM SYS.OBJECTS WHERE name='Proc_Cs2Cn_CounterGST' and type='P')
DROP PROC Proc_Cs2Cn_CounterGST
GO
CREATE PROCEDURE Proc_Cs2Cn_CounterGST
(
   @Po_ErrNo INT OUTPUT,
   @ServerDate DATETIME
)
AS
/*****************************************************************************
* PROCEDURE		: Proc_Cs2Cn_CounterGST
* PURPOSE		: To Extract Counter details from CoreStocky to  Console
* CREATED BY	: Raja C
* CREATED DATE	: 13/06/2017
* NOTE			:
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* 06-07-2020    Deepak Philip   BZ          PARLESECS/0720/027      Upload blocked.
	
********************************************************************************/
SET NOCOUNT ON
BEGIN	
    SET @Po_ErrNo=0
    
	DECLARE @DistCode As nVarchar(50)
	DELETE FROM Cs2Cn_Prk_CountersGST WHERE UploadFlag = 'Y'	
	RETURN
	SELECT @DistCode = DistributorCode FROM Distributor(NOLOCK)
    INSERT INTO Cs2Cn_Prk_CountersGST(DistCode,TabName,FldName,Prefix,Zpad,CmpId,CurrValue,ModuleName,DisplayFlag,CurYear,UploadFlag,ServerDate)
    SELECT @DistCode,TabName,FldName,Prefix,Zpad,CmpId,CurrValue,ModuleName,DisplayFlag,CurYear,'N',@ServerDate
    FROM Counters (NOLOCK)
END
GO
IF EXISTS(SELECT * FROM SYS.OBJECTS WHERE name='Proc_Cs2Cn_UploadRecordCheck' and type='P')
DROP PROC Proc_Cs2Cn_UploadRecordCheck
GO
CREATE PROCEDURE Proc_Cs2Cn_UploadRecordCheck
(
	@Po_ErrNo	INT OUTPUT,
	@ServerDate DATETIME
)
AS
/*********************************
* PROCEDURE	: Proc_Cs2Cn_UploadRecordCheck
* PURPOSE	: Extract the Details of uploaded data from CoreStocky to Console
* NOTES		:
* CREATED	: Nandakumar R.G 
* DATE		: 15-02-2010
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* * 06-07-2020    Deepak Philip   BZ          PARLESECS/0720/027      Upload blocked.
*********************************/
SET NOCOUNT ON
BEGIN
	SET @Po_ErrNo=0
	DECLARE @DistCode	As nVarchar(50)
	DECLARE @ChkDate	AS DATETIME
	DECLARE @sSql		As nVarchar(4000)
	DECLARE @SeqNo		As INT
	DECLARE @sProcName	As nVarchar(200)
	SELECT @DistCode = DistributorCode FROM Distributor
	DELETE FROM Cs2Cn_Prk_UploadRecordCheck WHERE UploadFlag='Y'
	RETURN
	DECLARE Cur_UploadTrack CURSOR
	FOR SELECT SequenceNo,ProcessName FROM Tbl_UploadIntegration ORDER BY SequenceNo
	OPEN Cur_UploadTrack
	FETCH NEXT FROM Cur_UploadTrack INTO @SeqNo,@sProcName
	WHILE @@FETCH_STATUS=0
	BEGIN
		SELECT @sSql='INSERT INTO Cs2Cn_Prk_UploadRecordCheck(DistCode,SeqNo,ProcessName,UploadDate,
		CSMinCount,CSMaxCount,CSRecCount,UploadFlag) 
		SELECT '''+ @DistCode+''','+CAST(@SeqNo AS NVARCHAR(100))+','''+ProcessName+''' ,GETDATE(),ISNULL(MIN(SlNo),0),ISNULL(MAX(SlNo),0),
		ISNULL(COUNT(SlNo),0),''N'' 
		FROM '+PrkTableName+' WHERE UpLoadFlag=''N''' FROM Tbl_UploadIntegration WHERE Sequenceno=@SeqNo AND
		ProcessName=@sProcName 
			
		EXEC(@sSql)
		FETCH NEXT FROM Cur_UploadTrack INTO @SeqNo,@sProcName
	END
	CLOSE Cur_UploadTrack
	DEALLOCATE Cur_UploadTrack
	UPDATE Cs2Cn_Prk_UploadRecordCheck SET ServerDate=@ServerDate
END
GO
IF EXISTS(SELECT * FROM SYS.OBJECTS WHERE name='Proc_Cs2Cn_BillSeriesDtGST' and type='P')
DROP PROC Proc_Cs2Cn_BillSeriesDtGST
GO
CREATE PROCEDURE Proc_Cs2Cn_BillSeriesDtGST
(
   @Po_ErrNo INT OUTPUT,
   @ServerDate DATETIME
)
AS
/*****************************************************************************
* PROCEDURE		: Proc_Cs2Cn_BillSeriesDtGST
* PURPOSE		: To Extract BillSeries Prefix details from CoreStocky to  Console
* CREATED BY	: Raja C
* CREATED DATE	: 13/06/2017
* NOTE			:
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
** 06-07-2020    Deepak Philip   BZ          PARLESECS/0720/027      Upload blocked.
********************************************************************************/
SET NOCOUNT ON
BEGIN	
    SET @Po_ErrNo=0
    
	DECLARE @DistCode As nVarchar(50)
	DELETE FROM Cs2Cn_Prk_BillSeriesDtGST WHERE UploadFlag = 'Y'
	RETURN	
	SELECT @DistCode = DistributorCode FROM Distributor(NOLOCK)
    INSERT INTO Cs2Cn_Prk_BillSeriesDtGST(DistCode,SeriesDtId,Prefix,Zpad,CurrValue,UploadFlag,ServerDate)
    SELECT @DistCode,SeriesDtId,Prefix,Zpad,CurrValue,'N',@ServerDate
    FROM BillSeriesDtvalue (NOLOCK)
END
GO
IF EXISTS(SELECT * FROM SYS.OBJECTS WHERE name='Proc_Cs2Cn_CompanyCountersGST' and type='P')
DROP PROC Proc_Cs2Cn_CompanyCountersGST
GO
CREATE PROCEDURE Proc_Cs2Cn_CompanyCountersGST
(
   @Po_ErrNo INT OUTPUT,
   @ServerDate DATETIME
)
AS
/*****************************************************************************
* PROCEDURE		: Proc_Cs2Cn_CompanyCountersGST
* PURPOSE		: To Extract Retailer Company Code series details from CoreStocky to  Console
* CREATED BY	: Raja C
* CREATED DATE	: 13/06/2017
* NOTE			:
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
* 06-07-2020    Deepak Philip   BZ          PARLESECS/0720/027      Upload blocked.
********************************************************************************/
SET NOCOUNT ON
BEGIN	
    SET @Po_ErrNo=0
    
	DECLARE @DistCode As nVarchar(50)
	DELETE FROM Cs2Cn_Prk_CompanyCountersGST WHERE UploadFlag = 'Y'	
	RETURN
	SELECT @DistCode = DistributorCode FROM Distributor(NOLOCK)
    INSERT INTO Cs2Cn_Prk_CompanyCountersGST(DistCode,TabName,FldName,Prefix,Zpad,CmpId,CurrValue,ModuleName,DisplayFlag,CurYear,UploadFlag,ServerDate)
    SELECT @DistCode,TabName,FldName,Prefix,Zpad,CmpId,CurrValue,ModuleName,DisplayFlag,CurYear,'N',@ServerDate
    FROM CompanyCounters (NOLOCK)
END
GO
IF EXISTS(SELECT * FROM SYS.OBJECTS WHERE name='Proc_Cs2Cn_PurchaseinvSeriesDtGST' and type='P')
DROP PROC Proc_Cs2Cn_PurchaseinvSeriesDtGST
GO
CREATE PROCEDURE Proc_Cs2Cn_PurchaseinvSeriesDtGST
(
   @Po_ErrNo INT OUTPUT,
   @ServerDate DATETIME
)
AS
/*****************************************************************************
* PROCEDURE		: Proc_Cs2Cn_PurchaseinvSeriesDtGST
* PURPOSE		: To Extract PurchaseSeries Prefix details from CoreStocky to  Console
* CREATED BY	: Raja C
* CREATED DATE	: 13/06/2017
* NOTE			:
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
* 06-07-2020    Deepak Philip   BZ          PARLESECS/0720/027      Upload blocked.
********************************************************************************/
SET NOCOUNT ON
BEGIN	
    SET @Po_ErrNo=0
    
	DECLARE @DistCode As nVarchar(50)
	DELETE FROM Cs2Cn_Prk_PurchaseinvSeriesDtGST WHERE UploadFlag = 'Y'	
	RETURN
	SELECT @DistCode = DistributorCode FROM Distributor(NOLOCK)
    INSERT INTO Cs2Cn_Prk_PurchaseinvSeriesDtGST(DistCode,MainId,RowNo,AttrList,Prefix,Zpad,CurrValue,UploadFlag,ServerDate)
    SELECT @DistCode,MainId,RowNo,AttrList,Prefix,Zpad,CurrValue,'N',@ServerDate
    FROM PurInvSeriesPrefix (NOLOCK)
END
GO
IF NOT EXISTS(SELECT * FROM DayEndProcess where ProcDesc='UDCDetails')
BEGIN
	INSERT INTO DayEndProcess
	SELECT '2020-07-05',MAX(Procid)+1,'2020-07-05','UDCDetails' from DayEndProcess
END
GO
IF NOT EXISTS(SELECT * FROM DayEndProcess where ProcDesc='Daily Business Details')
BEGIN
	INSERT INTO DayEndProcess
	SELECT '2020-07-05',MAX(Procid)+1,'2020-07-05','Daily Business Details' from DayEndProcess
END
GO
IF EXISTS(SELECT * FROM SYS.OBJECTS WHERE name='Proc_Cs2Cn_UDCDetails' and type='P')
DROP PROC Proc_Cs2Cn_UDCDetails
GO
CREATE PROCEDURE Proc_Cs2Cn_UDCDetails
(
	@Po_ErrNo	INT OUTPUT,
	@ServerDate DATETIME
)
AS
SET NOCOUNT ON
BEGIN
/*********************************
* PROCEDURE		: Proc_Cs2Cn_UDCDetails
* PURPOSE		: To Extract UDC Details from CoreStocky to upload to Console
* CREATED		: Nandakumar R.G
* CREATED DATE	: 23/06/2010
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* 06-07-2020    Deepak Philip   BZ          PARLESECS/0720/027     validation added to  upload data daily once.
	
*********************************/
	DECLARE @DistCode	As nVarchar(50)
	
	SET @Po_ErrNo=0
	DELETE FROM Cs2Cn_Prk_UDCDetails WHERE UploadFlag = 'Y'
	
	SELECT @DistCode = DistributorCode FROM Distributor
	
	IF EXISTS(SELECT 'X' FROM DayEndProcess WHERE NextUpDate<CONVERT(nVarChar(10),GetDate(),121) and ProcDesc='UDCDetails')
	BEGIN
		INSERT INTO Cs2Cn_Prk_UDCDetails
		(
			DistCode,
			MasterId,
			MasterName,
			MasterValueCode,
			MasterValueName,
			ColumnName,
			ColumnValue,
			UploadFlag,
			ServerDate
		)
		SELECT @DistCode,UD.MasterId,UH.MasterName,R.RtrCode,R.RtrName,UM.ColumnName,UD.ColumnValue,'N' ,@ServerDate
		FROM UDCDetails UD,UdcHd UH,UDCMaster UM,Retailer R
		WHERE UD.MasterId=UH.MasterId AND UD.UdcMasterId=UM.UdcMasterId
		AND UD.MasterRecordId=R.RtrId AND UD.MasterId=2 AND UD.Upload=0
		
		UPDATE UDCDetails SET Upload=1 WHERE MasterId IN (2)
		UPDATE DayEndProcess SET NextUpDate = CONVERT(nVarChar(10),GetDate(),121),    
		ProcDate = CONVERT(nVarChar(10),GetDate(),121)    
		Where ProcDesc='UDCDetails'
	END	
END
GO
IF EXISTS(SELECT * FROM SYS.OBJECTS WHERE name='Proc_Cs2Cn_DailyBusinessDetails' and type='P')
DROP PROC Proc_Cs2Cn_DailyBusinessDetails
GO
CREATE PROCEDURE Proc_Cs2Cn_DailyBusinessDetails
(
	@Po_ErrNo INT OUTPUT,
	@ServerDate DATETIME
)
AS
/*********************************
* PROCEDURE		: Proc_Cs2Cn_DailyBusinessDetails
* PURPOSE		: To Extract Daily Business Details from CoreStocky to upload to Console
* CREATED BY	: Nandakumar R.G
* CREATED DATE	: 01/10/2010
* NOTE			:
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* 06-07-2020    Deepak Philip   BZ          PARLESECS/0720/027     validation added to  upload data daily once.
	
*********************************/
SET NOCOUNT ON
BEGIN
	DECLARE @CmpId 			AS INT
	DECLARE @DistCode		AS nVarchar(50)
	DECLARE @DefCmpAlone	AS INT
	DECLARE @Idx			AS INT
	SET @Po_ErrNo=0
	DELETE FROM Cs2Cn_Prk_DailyBusinessDetails WHERE UploadFlag = 'Y'
	SELECT @DistCode=DistributorCode FROM Distributor
	DECLARE @BusinessDates TABLE
	(
		SLNo			INT,
		BusinessDate	DATETIME
	)
	SET @Idx=1
	WHILE @Idx<=7
	BEGIN
		INSERT INTO @BusinessDates(SlNo,BusinessDate)
		SELECT 1,CONVERT(NVARCHAR(10),GETDATE()-(7-@Idx),121)
		SET @Idx=@Idx+1
	END
	
	IF EXISTS(SELECT 'X' FROM DayEndProcess WHERE NextUpDate<CONVERT(nVarChar(10),GetDate(),121) and ProcDesc='Daily Business Details')
	BEGIN
	
		INSERT INTO Cs2Cn_Prk_DailyBusinessDetails(DistCode,UploadedDate,TransDate,SalInvCount,SalInvGrossValue,SalInvNetValue,PurInvCount,PurInvGrossValue,
		PurInvNetValue,SRNCount,SRNGrossValue,SRNNetValue,PRNCount,PRNGrossValue,PRNNetValue,InventoryCount,RetailerCount,SchSalInvCount,UploadFlag)
		SELECT @DistCode,GETDATE(),BusinessDate,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'N'
		FROM @BusinessDates
		--Sales Details	
		UPDATE A SET A.SalInvCount=B.SalInvCount,A.SalInvGrossValue=B.SalInvGrossValue,A.SalInvNetValue=B.SalInvNetValue
		FROM Cs2Cn_Prk_DailyBusinessDetails A,
		(SELECT BD.BusinessDate,COUNT(SalId) AS SalInvCount,SUM(SalGrossAmount) AS SalInvGrossValue,SUM(SalNetAmt) AS SalInvNetValue
		FROM SalesInvoice SI(NOLOCK),@BusinessDates BD WHERE SI.SalInvDate=BD.BusinessDate
		AND SI.DlvSts>3
		GROUP BY BD.BusinessDate) B
		WHERE A.TransDate=B.BusinessDate
		--Sales Return Details
		UPDATE A SET A.SRNCount=B.SRNCount,A.SRNGrossValue=B.SRNGrossValue,A.SRNNetValue=B.SRNNetValue
		FROM Cs2Cn_Prk_DailyBusinessDetails A,
		(SELECT BD.BusinessDate,COUNT(ReturnId) AS SRNCount,SUM(RtnGrossAmt) AS SRNGrossValue,SUM(RtnNetAmt) AS SRNNetValue
		FROM ReturnHeader SI(NOLOCK),@BusinessDates BD WHERE SI.ReturnDate=BD.BusinessDate
		AND SI.Status=0
		GROUP BY BD.BusinessDate) B
		WHERE A.TransDate=B.BusinessDate
		--Purchase Details
		UPDATE A SET A.PurInvCount=B.PurInvCount,A.PurInvGrossValue=B.PurInvGrossValue,A.PurInvNetValue=B.PurInvNetValue
		FROM Cs2Cn_Prk_DailyBusinessDetails A,
		(SELECT BD.BusinessDate,COUNT(PurRcptId) AS PurInvCount,SUM(GrossAmount) AS PurInvGrossValue,SUM(NetAmount) AS PurInvNetValue
		FROM PurchaseReceipt SI(NOLOCK),@BusinessDates BD WHERE SI.GoodsRcvdDate=BD.BusinessDate
		AND SI.Status=1
		GROUP BY BD.BusinessDate) B
		WHERE A.TransDate=B.BusinessDate
		--Purchase Return Details
		UPDATE A SET A.PRNCount=B.PRNCount,A.PRNGrossValue=B.PRNGrossValue,A.PRNNetValue=B.PRNNetValue
		FROM Cs2Cn_Prk_DailyBusinessDetails A,
		(SELECT BD.BusinessDate,COUNT(PurRetId) AS PRNCount,SUM(GrossAmount) AS PRNGrossValue,SUM(NetAmount) AS PRNNetValue
		FROM PurchaseReturn SI(NOLOCK),@BusinessDates BD WHERE SI.PurRetDate=BD.BusinessDate
		AND SI.Status=1
		GROUP BY BD.BusinessDate) B
		WHERE A.TransDate=B.BusinessDate
		--Inventory Details
		UPDATE A SET A.InventoryCount=B.InventoryCount
		FROM Cs2Cn_Prk_DailyBusinessDetails A,
		(SELECT BD.BusinessDate,COUNT(PrdId) AS InventoryCount
		FROM StockLedger SI(NOLOCK),@BusinessDates BD WHERE SI.TransDate=BD.BusinessDate	
		GROUP BY BD.BusinessDate) B
		WHERE A.TransDate=B.BusinessDate
		
		--Retailer Details
		UPDATE A SET A.RetailerCount=B.RetailerCount
		FROM Cs2Cn_Prk_DailyBusinessDetails A,
		(SELECT BD.BusinessDate,COUNT(RtrId) AS RetailerCount
		FROM Retailer SI(NOLOCK),@BusinessDates BD WHERE SI.RtrRegDate<=BD.BusinessDate
		GROUP BY BD.BusinessDate) B
		WHERE A.TransDate=B.BusinessDate
		--Scheme Utilization Details
		UPDATE A SET A.SchSalInvCount=B.SchSalInvCount
		FROM Cs2Cn_Prk_DailyBusinessDetails A,
		(SELECT BusinessDate,COUNT(DISTINCT SalId) AS SchSalInvCount FROM
		(
			SELECT DISTINCT BD.BusinessDate,SIS.SalId FROM SalesInvoiceSchemeLineWise SIS(NOLOCK),SalesInvoice SI(NOLOCK),@BusinessDates BD
			WHERE SIS.SalId=SI.SalId AND SI.SalInvDate=BD.BusinessDate AND Si.DlvSts>3
			UNION ALL
			SELECT DISTINCT BD.BusinessDate,SIS.SalId FROM SalesInvoiceSchemeDtFreePrd SIS(NOLOCK),SalesInvoice SI(NOLOCK),@BusinessDates BD
			WHERE SIS.SalId=SI.SalId AND SI.SalInvDate=BD.BusinessDate AND Si.DlvSts>3
			UNION ALL
			SELECT DISTINCT BD.BusinessDate,SIS.SalId FROM SalesInvoiceWindowDisplay SIS(NOLOCK),SalesInvoice SI(NOLOCK),@BusinessDates BD
			WHERE SIS.SalId=SI.SalId AND SI.SalInvDate=BD.BusinessDate AND Si.DlvSts>3
			UNION ALL
			SELECT DISTINCT BD.BusinessDate,SIS.SalId FROM SalesInvoiceQPSSchemeAdj SIS(NOLOCK),SalesInvoice SI(NOLOCK),@BusinessDates BD
			WHERE SIS.SalId=SI.SalId AND SI.SalInvDate=BD.BusinessDate AND Si.DlvSts>3	
		) AS Sch
		GROUP BY BusinessDate)B
		WHERE A.TransDate=B.BusinessDate
		UPDATE Cs2Cn_Prk_DailyBusinessDetails SET ServerDate=@ServerDate
		UPDATE DayEndProcess SET NextUpDate = CONVERT(nVarChar(10),GetDate(),121),    
		ProcDate = CONVERT(nVarChar(10),GetDate(),121)    
		Where ProcDesc='Daily Business Details'
	END	
END
GO
IF EXISTS(SELECT 'X' FROM SYSOBJECTS WHERE XTYPE='P' AND NAME='Proc_ValidateRetailerRoute')
DROP PROCEDURE Proc_ValidateRetailerRoute
GO
CREATE PROCEDURE [Proc_ValidateRetailerRoute]
(
	@Po_ErrNo INT OUTPUT
)
AS
/*********************************
* PROCEDURE	: Proc_ValidateRetailer
* PURPOSE	: To Insert and Update records  from xml file in the Table Retailer 
* CREATED	: MarySubashini.S
* CREATED DATE	: 13/09/2007
* MODIFIED 
* DATE      AUTHOR     DESCRIPTION
----------------------------------------------------------------------------
* {Date}         {Developer}          CR\BUG	USER STORYID		   {Brief modification description}
  2013/10/10   Sathishkumar Veeramani									Junk Characters Removed 
  24/07/2020   Murugan.R				CR       PARCS202100043			Refer RtrCodeUserInput Retailer Code. 
*****************************************************************************/ 
SET NOCOUNT ON
BEGIN
	DECLARE @RetailerCode AS NVARCHAR(100)
	DECLARE @RouteCode AS NVARCHAR(100)
	DECLARE @RtrId AS INT
	DECLARE @RMId AS INT
	DECLARE @Taction AS INT
	DECLARE @Tabname AS NVARCHAR(100)
	DECLARE @TransType AS INT
	DECLARE @SelectionType AS NVARCHAR(100)
	DECLARE @ErrDesc AS NVARCHAR(1000)
	DECLARE @sSql AS NVARCHAR(4000)
	
	SET @Taction=1
	SET @TransType=0
	SET @Tabname='ETL_Prk_RetailerRoute'
	
	DECLARE @AutoRtrCodeConfig AS TINYINT
	SET @AutoRtrCodeConfig=0
	IF EXISTS(SELECT 'X' FROM Configuration (NOLOCK) where ModuleId='RET26' and Status=1)
	BEGIN
		SET @AutoRtrCodeConfig=1
	END
	
	DECLARE Cur_RetailerRoute CURSOR 
	FOR SELECT dbo.Fn_Removejunk(ISNULL([Retailer Code],'')),dbo.Fn_Removejunk(ISNULL([Route Code],'')),ISNULL([Selection Type],'')
	FROM ETL_Prk_RetailerRoute WITH(NOLOCK) ORDER BY [Retailer Code]
	OPEN Cur_RetailerRoute
	FETCH NEXT FROM Cur_RetailerRoute INTO @RetailerCode,@RouteCode,@SelectionType
	WHILE @@FETCH_STATUS=0		
	BEGIN			
		SET @Po_ErrNo=0
		
		IF @AutoRtrCodeConfig=0
		BEGIN
			IF NOT EXISTS  (SELECT * FROM Retailer WHERE RtrCode = @RetailerCode )    
  			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Retailer Code ' + @RetailerCode + ' does not exist'  		 
				INSERT INTO Errorlog VALUES (1,@Tabname,'RetailerCode',@ErrDesc)
			END
			ELSE
			BEGIN
				SELECT @RtrId =RtrId FROM Retailer WHERE RtrCode = @RetailerCode 
			END
		END
		ELSE
		BEGIN
			IF NOT EXISTS  (SELECT * FROM Retailer WHERE  RtrCodeUserInput=@RetailerCode )    
  			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Retailer Code ' + @RetailerCode + ' does not exist'  		 
				INSERT INTO Errorlog VALUES (1,@Tabname,'RetailerCode',@ErrDesc)
			END
			ELSE
			BEGIN
				SELECT @RtrId =RtrId FROM Retailer WHERE  RtrCodeUserInput=@RetailerCode
			END
		END
		
		
		IF NOT EXISTS  (SELECT * FROM RouteMaster WHERE  RMCode=@RouteCode AND RMSRouteType<>2)    
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Route Code ' + @RouteCode + ' does not exist'  		 
			INSERT INTO Errorlog VALUES (2,@Tabname,'RouteCode',@ErrDesc)
		END
		ELSE
		BEGIN				
			SELECT @RMId =RMId FROM RouteMaster WITH (NOLOCK)WHERE RMCode=@RouteCode
		END
		
		IF EXISTS  (SELECT * FROM RetailerMarket WHERE  RMId=@RMId AND RtrId=@RtrId)    
		BEGIN
			SET @Taction=2
		END
		ELSE
		BEGIN
			SET @Taction=1				
		END
		IF LTRIM(RTRIM(@SelectionType))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Route Selection Type should not be empty'  		 
			INSERT INTO Errorlog VALUES (3,@Tabname,'SelectionType',@ErrDesc)
		END
		ELSE
		BEGIN
			IF LTRIM(RTRIM(@SelectionType))='ADD' OR LTRIM(RTRIM(@SelectionType))='REDUCE'
			BEGIN
				IF LTRIM(RTRIM(@SelectionType))='ADD' 
				BEGIN
					SET @TransType=1
				END
				IF LTRIM(RTRIM(@SelectionType))='REDUCE' 
				BEGIN
					SET @TransType=2
				END
			END
			ELSE 
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Route Selection Type '+@SelectionType+'is not available'  		 
				INSERT INTO Errorlog VALUES (4,@Tabname,'SelectionType',@ErrDesc)
			END
		END
		IF @TransType=1 
		BEGIN
			IF  @Taction=1 AND @Po_ErrNo=0 
			BEGIN
				INSERT INTO RetailerMarket 
				(RtrId,RMId,Availability,LastModBy,LastModDate,AuthId,AuthDate,Upload)
				VALUES(@RtrId,@RMId,
				1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121),0)
				SET @sSql='INSERT INTO RetailerMarket 
				(RtrId,RMId,Availability,LastModBy,LastModDate,AuthId,AuthDate,Upload)
				VALUES('+CAST(@RtrId AS VARCHAR(10))+','+CAST(@RMId AS VARCHAR(10))+',
				1,1,'''+CONVERT(NVARCHAR(10),GETDATE(),121)+''',1,'''+CONVERT(NVARCHAR(10),GETDATE(),121)+''',0)'
				INSERT INTO Translog(strSql1) VALUES (@sSql)
			END
		END
			
		IF @TransType=2 
		BEGIN
			IF @Po_ErrNo=0
			BEGIN
				DELETE FROM RetailerMarket WHERE RtrId=@RtrId AND RMId=@RMId
				SET @sSql='DELETE FROM RetailerMarket WHERE RtrId='+CAST(@RtrId AS VARCHAR(10))+' AND RMId='+CAST(@RMId AS VARCHAR(10))+''
				INSERT INTO Translog(strSql1) VALUES (@sSql)
			END
		END
			
		FETCH NEXT FROM Cur_RetailerRoute INTO @RetailerCode,@RouteCode,@SelectionType
	END
	CLOSE Cur_RetailerRoute
	DEALLOCATE Cur_RetailerRoute
	--->Added By Nanda 04/03/2010
	IF EXISTS(SELECT * FROM Retailer WHERE RtrId NOT IN(SELECT RtrId FROM RetailerMarket))
	BEGIN
		INSERT INTO Errorlog(SlNo,TableName,FieldName,ErrDesc) 
		SELECT 100,'Retailer','Route','Route is not mapped correctly for Retailer Code:'+RtrCode
		FROM Retailer WHERE RtrId NOT IN (SELECT DISTINCT RtrId FROM RetailerMarket)
		DELETE FROM RetailerValueClassMap WHERE RtrId NOT IN(SELECT RtrId FROM RetailerMarket)
		DELETE FROM CoaMaster WHERE CoaId IN (SELECT CoaId FROM Retailer WHERE RtrId NOT IN (SELECT RtrId FROM RetailerMarket))
		DELETE FROM Retailer WHERE RtrId NOT IN(SELECT RtrId FROM RetailerMarket)
		SET @sSql='DELETE FROM RetailerValueClassMap WHERE RtrId NOT IN(SELECT RtrId FROM RetailerMarket)
		DELETE FROM CoaMaster WHERE CoaId IN (SELECT CoaId FROM Retailer WHERE RtrId NOT IN (SELECT RtrId FROM RetailerMarket))
		DELETE FROM Retailer WHERE RtrId NOT IN(SELECT RtrId FROM RetailerMarket)'
		INSERT INTO Translog(strSql1) VALUES (@sSql)
	END
	--->Till Here
	RETURN
END
GO
IF EXISTS(SELECT 'X' FROM SYSOBJECTS WHERE XTYPE='P' AND NAME='Proc_ValidateRetailerShippingAddress')
DROP PROCEDURE Proc_ValidateRetailerShippingAddress
GO
CREATE PROCEDURE [Proc_ValidateRetailerShippingAddress]
(
	@Po_ErrNo INT OUTPUT
)
AS
/***********************************************************************************************
* PROCEDURE	: Proc_ValidateRetailerShippingAddress
* PURPOSE	: To Insert and Update records  from xml file in the Table RetailerShippingAddress 
* CREATED	: MarySubashini.S
* CREATED DATE	: 13/09/2007
* MODIFIED 
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------------------------------------------------------
* {Date}       {Developer}               {brief modification description}      
* 21/07/2009   Nanda	                 Modified for Default Shipping Address Validation
  2013/10/10   Sathishkumar Veeramani    Junk Characters Removed  
 * DATE         AUTHOR				CR/BZ	   USER STORY ID   DESCRIPTION 
 24/07/2020   Murugan.R				CR        PARCS202100043    Refer RtrCodeUserInput Retailer Code.  
*************************************************************************************************/ 
SET NOCOUNT ON
BEGIN
	DECLARE @RetailerCode AS NVARCHAR(100)
	DECLARE @Address1 AS NVARCHAR(100)
	DECLARE @Address2 AS NVARCHAR(100)
	DECLARE @Address3 AS NVARCHAR(100)
	DECLARE @RtrShipPinNo AS NVARCHAR(100)
	DECLARE @RtrShipPhoneNo AS NVARCHAR(100)
	DECLARE @DefaultShippingAddress AS NVARCHAR(100)
	DECLARE @RtrId AS INT
	DECLARE @RtrShipId AS INT
	DECLARE @SNewRtrId AS INT
	DECLARE @SOldRtrId AS INT
	DECLARE @DefCount AS INT 
	DECLARE @Tabname AS NVARCHAR(100)
	DECLARE @CntTabname AS NVARCHAR(100)
	DECLARE @FldName AS NVARCHAR(100)
	DECLARE @SRetailerCode AS NVARCHAR(100)
	DECLARE @ErrDesc AS NVARCHAR(1000)
	DECLARE @sSql AS NVARCHAR(4000)
	DECLARE @NewShipAddr AS NVARCHAR(4000)	
	
	DECLARE @ShipSlNo TABLE
	(
		SlNo		 INT IDENTITY,
		ErrorDesc	NVARCHAR(1000) COLLATE DATABASE_DEFAULT
	)
	
	SET @DefCount=0
	SET @Po_ErrNo=0
	SET @CntTabname='RetailerShipAdd'
	SET @Tabname='ETL_Prk_RetailerShippingAddress'
	SET @FldName='RtrShipId'
	SET @SRetailerCode=''
	
	DECLARE @AutoRtrCodeConfig AS TINYINT
	SET @AutoRtrCodeConfig=0
	IF EXISTS(SELECT 'X' FROM Configuration (NOLOCK) where ModuleId='RET26' and Status=1)
	BEGIN
		SET @AutoRtrCodeConfig=1
	END
	
	DECLARE Cur_RetailerShippingAddress CURSOR 
	FOR SELECT dbo.Fn_Removejunk(ISNULL([Retailer Code],'')),dbo.Fn_Removejunk(ISNULL(Address1,'')),dbo.Fn_Removejunk(ISNULL(Address2,'')),
	dbo.Fn_Removejunk(ISNULL(Address3,'')),dbo.Fn_Removejunk(ISNULL([Retailer Shipping Pin Code],'0')),
	ISNULL([Retailer Shipping Phone No],''),dbo.Fn_Removejunk(ISNULL([Default Shipping Address],''))
	FROM ETL_Prk_RetailerShippingAddress WITH(NOLOCK) ORDER BY [Retailer Code],[Default Shipping Address]
	
	OPEN Cur_RetailerShippingAddress
	FETCH NEXT FROM Cur_RetailerShippingAddress INTO @RetailerCode,@Address1,@Address2,@Address3,
				@RtrShipPinNo,@RtrShipPhoneNo,@DefaultShippingAddress
	WHILE @@FETCH_STATUS=0
	BEGIN
		IF @AutoRtrCodeConfig=0
		BEGIN
			IF NOT EXISTS  (SELECT * FROM Retailer WHERE RtrCode = @RetailerCode)    
  			BEGIN
				SET @Po_ErrNo=1
				SET @ErrDesc = 'Retailer Code ' + @RetailerCode + ' does not exist'  		 
				INSERT INTO Errorlog VALUES (1,@Tabname,'RetailerCode',@ErrDesc)
			END
			ELSE
			BEGIN
				SELECT @RtrId =RtrId FROM Retailer WHERE RtrCode = @RetailerCode
			END
		END
		ELSE
		BEGIN
			IF NOT EXISTS  (SELECT * FROM Retailer WHERE RtrCodeUserInput = @RetailerCode)    
  			BEGIN
				SET @Po_ErrNo=1
				SET @ErrDesc = 'Retailer Code ' + @RetailerCode + ' does not exist'  		 
				INSERT INTO Errorlog VALUES (1,@Tabname,'RetailerCode',@ErrDesc)
			END
			ELSE
			BEGIN
				SELECT @RtrId =RtrId FROM Retailer WHERE RtrCodeUserInput = @RetailerCode
			END
		END		
		IF LTRIM(RTRIM(@Address1))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @ErrDesc = 'Retailer Shipping Address should not be empty'  		 
			INSERT INTO Errorlog VALUES (2,@Tabname,'Address',@ErrDesc)
		END
		IF LEN(@RtrShipPinNo)<>0
		BEGIN
			IF ISNUMERIC(@RtrShipPinNo)=0
			BEGIN
				SET @Po_ErrNo=1	
				SET @ErrDesc = 'PinCode is not in correct format'		 
				INSERT INTO Errorlog VALUES (3,@Tabname,'RtrShipPinNo',@ErrDesc)
			END	
		END					
		IF LTRIM(RTRIM(@RtrShipPhoneNo))<>'' 
		BEGIN		
			SET @Po_ErrNo=0	
		END	
	
		SET @DefCount=0
		
		IF LTRIM(RTRIM(@DefaultShippingAddress))='YES' 
		BEGIN
			IF NOT EXISTS (SELECT * FROM RetailerShipAdd WHERE RtrId=@RtrId AND 
			RtrShipDefaultAdd=1)
			BEGIN
				SET @DefCount=1
			END
			ELSE
			BEGIN
				SET @DefaultShippingAddress='NO'
				SET @DefCount=1
			END
		END
		ELSE
		BEGIN
			SET @DefCount=1
		END
		IF @DefCount=2
		BEGIN
			SET @Po_ErrNo=1		
			SET @ErrDesc = 'Default Shipping Address already exists for the Retailer '+@RetailerCode		 
			INSERT INTO Errorlog VALUES (6,@Tabname,'DefaultShippingAddress',@ErrDesc)
		END
		IF @DefCount=0 
		BEGIN
			SET @Po_ErrNo=1		
			SET @ErrDesc = 'Default Shipping Address is not available for the Retailer '+@RetailerCode		 
			INSERT INTO Errorlog VALUES (7,@Tabname,'DefaultShippingAddress',@ErrDesc)
		END
			
		SELECT @RtrShipId=dbo.Fn_GetPrimaryKeyInteger(@CntTabname,@FldName,CAST(YEAR(GetDate()) AS INT),MONTH(GETDATE()))
	
		IF @RtrShipId=0 
		BEGIN
			SET @Po_ErrNo=1		
			SET @ErrDesc = 'Reset the Counter value '+@RetailerCode		 
			INSERT INTO Errorlog VALUES (8,@Tabname,'Counter Value',@ErrDesc)
		END
			
		SELECT @NewShipAddr=@Address1+@Address2+@Address3+@RtrShipPinNo+@RtrShipPhoneNo
		IF NOT EXISTS(SELECT LTRIM(RTRIM(RtrShipAdd1))+LTRIM(RTRIM(RtrShipAdd2))+LTRIM(RTRIM(RtrShipAdd3))+
		LTRIM(RTRIM(CAST(RtrShipPinNo AS NVARCHAR(10))))+LTRIM(RTRIM(RtrShipPhoneNo))
		FROM RetailerShipAdd WHERE RtrId=@RtrId AND LTRIM(RTRIM(RtrShipAdd1))+LTRIM(RTRIM(RtrShipAdd2))+LTRIM(RTRIM(RtrShipAdd3))+
		LTRIM(RTRIM(CAST(RtrShipPinNo AS NVARCHAR(10))))+LTRIM(RTRIM(RtrShipPhoneNo))=LTRIM(RTRIM(@NewShipAddr)))
		BEGIN
			IF  @Po_ErrNo=0
			BEGIN	
				INSERT INTO RetailerShipAdd(RtrShipId,RtrId,RtrShipAdd1,RtrShipAdd2,RtrShipAdd3,RtrShipPinNo,RtrShipPhoneNo,RtrShipDefaultAdd,
				Availability,LastModBy,LastModDate,AuthId,AuthDate,TaxGroupId,StateId,GSTTinNo,Upload) 
				VALUES(@RtrShipId,@RtrId,@Address1,@Address2,@Address3,@RtrShipPinNo,@RtrShipPhoneNo,
				(CASE @DefaultShippingAddress WHEN 'YES' THEN 1 ELSE 0 END),
				1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121),0,0,'','N')
				
				SET @sSql='INSERT INTO RetailerShipAdd(RtrShipId,RtrId,RtrShipAdd1,RtrShipAdd2,RtrShipAdd3,RtrShipPinNo,RtrShipPhoneNo,RtrShipDefaultAdd,Availability,LastModBy,LastModDate,AuthId,AuthDate) 
				VALUES('+CAST(@RtrShipId AS VARCHAR(10))+','+CAST(@RtrId AS VARCHAR(10))+','''+@Address1+''','''+@Address2+''','''+@Address3+''','''','''','+CAST(@RtrShipPinNo AS VARCHAR(10))+','''+@RtrShipPhoneNo+''',
				'+CAST((CASE @DefaultShippingAddress WHEN 'YES' THEN 1 ELSE 0 END)AS VARCHAR(10))+',
				1,1,'''+CONVERT(NVARCHAR(10),GETDATE(),121)+''',1,'''+CONVERT(NVARCHAR(10),GETDATE(),121)+''')'
				INSERT INTO Translog(strSql1) VALUES (@sSql)
		
				UPDATE Retailer SET RtrShipId=@RtrShipId WHERE RtrId=@RtrId
				EXEC Proc_UpdateRetailerShipping @RtrId,@RtrShipId
		
				SET @sSql='UPDATE Retailer SET RtrShipId='+CAST(@RtrShipId AS VARCHAR(10))+' WHERE RtrId='+CAST(@RtrId AS VARCHAR(10))+''
				INSERT INTO Translog(strSql1) VALUES (@sSql)
			END
	
			IF EXISTS (SELECT * FROM RetailerShipAdd WHERE RtrShipId=@RtrShipId)
			BEGIN
				UPDATE Counters SET CurrValue=CurrValue+1 WHERE TabName=@CntTabname AND FldName=@FldName
		
				SET @sSql='UPDATE Counters SET CurrValue=CurrValue'+'+1'+' WHERE TabName='''+@CntTabname+''' AND FldName='''+@FldName+''''
				INSERT INTO Translog(strSql1) VALUES (@sSql)
			END
		END
			
		FETCH NEXT FROM Cur_RetailerShippingAddress INTO @RetailerCode,@Address1,@Address2,@Address3,@RtrShipPinNo,@RtrShipPhoneNo,@DefaultShippingAddress
	END
	CLOSE Cur_RetailerShippingAddress
	DEALLOCATE Cur_RetailerShippingAddress
	
	IF EXISTS(SELECT * FROM Retailer WHERE RtrId NOT IN(SELECT RtrId FROM RetailerShipAdd WHERE RtrShipDefaultAdd=1))
	BEGIN
		INSERT INTO Errorlog(SlNo,TableName,FieldName,ErrDesc) 
		SELECT 1,@Tabname,'Default Shipping Address','Default Shipping Address not available for '+CAST(RtrCode AS NVARCHAR(50)) FROM Retailer
		WHERE RtrId NOT IN(SELECT RtrId FROM RetailerShipAdd)
		SET @Po_ErrNo=1
	END
	--->Added By Nanda on 04/03/2010
	IF EXISTS(SELECT * FROM Retailer WHERE RtrId NOT IN(SELECT RtrId FROM RetailerShipAdd))
	BEGIN
		INSERT INTO Errorlog(SlNo,TableName,FieldName,ErrDesc) 
		SELECT 100,'Retailer','Shipping Address','Shipping Address is not mapped correctly for Retailer Code:'+RtrCode
		FROM Retailer WHERE RtrId NOT IN (SELECT DISTINCT RtrId FROM RetailerShipAdd)
		DELETE FROM RetailerMarket WHERE RtrId NOT IN(SELECT RtrId FROM RetailerShipAdd)
		DELETE FROM RetailerValueClassMap WHERE RtrId NOT IN(SELECT RtrId FROM RetailerShipAdd)		
		DELETE FROM CoaMaster WHERE CoaId IN (SELECT CoaId FROM Retailer WHERE RtrId NOT IN (SELECT RtrId FROM RetailerShipAdd))
		DELETE FROM Retailer WHERE RtrId NOT IN(SELECT RtrId FROM RetailerShipAdd)
		SET @sSql='DELETE FROM RetailerMarket WHERE RtrId NOT IN(SELECT RtrId FROM RetailerShipAdd)
		DELETE FROM RetailerValueClassMap WHERE RtrId NOT IN(SELECT RtrId FROM RetailerShipAdd)		
		DELETE FROM CoaMaster WHERE CoaId IN (SELECT CoaId FROM Retailer WHERE RtrId NOT IN (SELECT RtrId FROM RetailerShipAdd))
		DELETE FROM Retailer WHERE RtrId NOT IN(SELECT RtrId FROM RetailerShipAdd)'
		INSERT INTO Translog(strSql1) VALUES (@sSql)
	END
	ELSE IF EXISTS(SELECT * FROM Retailer WHERE RtrId NOT IN(SELECT RtrId FROM RetailerMarket))
	BEGIN
		INSERT INTO Errorlog(SlNo,TableName,FieldName,ErrDesc) 
		SELECT 100,'Retailer','Route','Route is not mapped correctly for Retailer Code:'+RtrCode
		FROM Retailer WHERE RtrId NOT IN (SELECT DISTINCT RtrId FROM RetailerMarket)
		DELETE FROM RetailerValueClassMap WHERE RtrId NOT IN(SELECT RtrId FROM RetailerMarket)
		DELETE FROM CoaMaster WHERE CoaId IN (SELECT CoaId FROM Retailer WHERE RtrId NOT IN (SELECT RtrId FROM RetailerMarket))
		DELETE FROM Retailer WHERE RtrId NOT IN(SELECT RtrId FROM RetailerMarket)
		SET @sSql='DELETE FROM RetailerValueClassMap WHERE RtrId NOT IN(SELECT RtrId FROM RetailerMarket)
		DELETE FROM CoaMaster WHERE CoaId IN (SELECT CoaId FROM Retailer WHERE RtrId NOT IN (SELECT RtrId FROM RetailerMarket))
		DELETE FROM Retailer WHERE RtrId NOT IN(SELECT RtrId FROM RetailerMarket)'
		INSERT INTO Translog(strSql1) VALUES (@sSql)
	END
	ELSE IF EXISTS(SELECT * FROM Retailer WHERE RtrId NOT IN(SELECT RtrId FROM RetailerValueClassMap))
	BEGIN
		INSERT INTO Errorlog(SlNo,TableName,FieldName,ErrDesc) 
		SELECT 100,'Retailer','Value Class','Value Class is not mapped correctly for Retailer Code:'+RtrCode
		FROM Retailer WHERE RtrId NOT IN (SELECT DISTINCT RtrId FROM RetailerValueClassMap)
		DELETE FROM CoaMaster WHERE CoaId IN (SELECT CoaId FROM Retailer WHERE RtrId NOT IN (SELECT RtrId FROM RetailerValueClassMap))
		DELETE FROM Retailer WHERE RtrId NOT IN(SELECT RtrId FROM RetailerValueClassMap)
		SET @sSql='DELETE FROM CoaMaster WHERE CoaId IN (SELECT CoaId FROM Retailer WHERE RtrId NOT IN (SELECT RtrId FROM RetailerValueClassMap))
		DELETE FROM Retailer WHERE RtrId NOT IN(SELECT RtrId FROM RetailerValueClassMap)'
		INSERT INTO Translog(strSql1) VALUES (@sSql)
	END
	--->Till Here
	RETURN
END
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Fn_FillRetailerDetailsinRetailerMaster]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [Fn_FillRetailerDetailsinRetailerMaster]
GO
CREATE FUNCTION [dbo].[Fn_FillRetailerDetailsinRetailerMaster](@Pi_TransId INT,@Pi_LgnId INT)
RETURNS @FillRetailerDetails TABLE
(
RtrId	INT,
RtrCode	NVARCHAR(100),
RtrName	NVARCHAR(100),
RtrAdd1	NVARCHAR(100),
RtrAdd2	NVARCHAR(100),
RtrAdd3	NVARCHAR(100),
RtrPinNo	INT,
RtrPhoneNo	NVARCHAR(100),
RtrEmailId	NVARCHAR(100),
RtrContactPerson	NVARCHAR(100),
RtrKeyAcc	NVARCHAR(100),
RtrCovMode	NVARCHAR(100),
RtrRegDate	DATETIME,
RtrDepositAmt	NUMERIC(18,2),
RtrStatus	NVARCHAR(100),
RtrTaxable	NVARCHAR(100),
RtrTaxType	NVARCHAR(100),
TaxGroupName	NVARCHAR(100),
RtrTINNo	NVARCHAR(100),
RtrCSTNo	NVARCHAR(100),
RtrDayOff	NVARCHAR(100),
RtrCrBills	INT,
RtrCrLimit	NUMERIC(18,2),
RtrCrDays	INT,
RtrCashDiscPerc	NUMERIC(18,2),
RtrCashDiscCond	VARCHAR(50),
RtrCashDiscAmt	NUMERIC(18,2),
RtrLicNo	NVARCHAR(100),
RtrLicExpiryDate	DATETIME,
RtrDrugLicNo	NVARCHAR(100),
RtrDrugExpiryDate	DATETIME,
RtrPestLicNo	NVARCHAR(100),
RtrPestExpiryDate	DATETIME,
GeoMainId	INT,
GeoName	NVARCHAR(100),
GeoLevelName	NVARCHAR(100),
RmId	INT,
RMName	NVARCHAR(100),
VillageId	INT,
VillageName	NVARCHAR(100),
RtrShipId	INT,
RtrShipAdd1	NVARCHAR(100),
RtrShipAdd2	NVARCHAR(100),
RtrShipAdd3	NVARCHAR(100),
RtrShipPinNo	INT,
RtrResPhone1	NVARCHAR(100),
RtrResPhone2	NVARCHAR(100),
RtrOffPhone1	NVARCHAR(100),
RtrOffPhone2	NVARCHAR(100),
RtrDOB	DATETIME,
RtrAnniversary	DATETIME,
RtrRemark1	NVARCHAR(100),
RtrRemark2	NVARCHAR(100),
RtrRemark3	NVARCHAR(100),
COAId	INT,
OnAccount	NUMERIC(18,2),
TaxGroupId	INT,
RtrType	NVARCHAR(100),
RtrFrequency	TINYINT,
RtrCrBillsAlert	TINYINT,
RtrCrLimitAlert	TINYINT,
RtrCrDaysAlert	TINYINT,
RtrKeyId	TINYINT,
RtrCoverageId	TINYINT,
RtrStatusId	TINYINT,
RtrDayOffId	INT,
RtrTaxableId	TINYINT,
RtrTaxTypeId	TINYINT,
RtrTypeId	TINYINT,
RtrRlStatus	NVARCHAR(100),
RlStatus	TINYINT,
CmpRtrCode	NVARCHAR(100),
Upload	NVARCHAR(10),
RtrPayment NVARCHAR(100),
RtrPaymentId INT,
RtrApproval NVARCHAR(100),
RtrApprovalId INT,
RtrUniqueCode NVARCHAR(200), ---Gopi at 08/11/2016
RtrLandLine	NVARCHAR(100),
Reason	NVARCHAR(100),
RtrCodeUserInput NVARCHAR(100)	
)
AS
/*********************************
* PROCEDURE		: Fn_FillRetailerDetailsinRetailerMaster
* PURPOSE		:   
* CREATED		:  
* CREATED DATE	:  
* MODIFIED
*************************************************************************************************** 
* DATE				AUTHOR      CR/BZ       USER STORY ID       DESCRIPTION                           
***************************************************************************************************  
 17-07-2020	     Deepan			 CR          PARCS202100041      Retailer Details
**************************************************************************************************************************************/
BEGIN
	INSERT INTO @FillRetailerDetails (RtrId,RtrCode,RtrName,RtrAdd1,RtrAdd2,RtrAdd3,RtrPinNo,RtrPhoneNo,RtrEmailId,RtrContactPerson,RtrKeyAcc,
    RtrCovMode,RtrRegDate,RtrDepositAmt,RtrStatus,RtrTaxable,RtrTaxType,TaxGroupName,RtrTINNo,RtrCSTNo,RtrDayOff,RtrCrBills,RtrCrLimit,RtrCrDays,
    RtrCashDiscPerc,RtrCashDiscCond,RtrCashDiscAmt,RtrLicNo,RtrLicExpiryDate,RtrDrugLicNo,RtrDrugExpiryDate,RtrPestLicNo,RtrPestExpiryDate,GeoMainId,
    GeoName,GeoLevelName,RmId,RMName,VillageId,VillageName,RtrShipId,RtrShipAdd1,RtrShipAdd2,RtrShipAdd3,RtrShipPinNo,RtrResPhone1,RtrResPhone2,
    RtrOffPhone1,RtrOffPhone2,RtrDOB,RtrAnniversary,RtrRemark1,RtrRemark2,RtrRemark3,COAId,OnAccount,TaxGroupId,RtrType,RtrFrequency,RtrCrBillsAlert,
    RtrCrLimitAlert,RtrCrDaysAlert,RtrKeyId,RtrCoverageId,RtrStatusId,RtrDayOffId,RtrTaxableId,RtrTaxTypeId,RtrTypeId,RtrRlStatus,RlStatus,
    CmpRtrCode,Upload,RtrPayment,RtrPaymentId,RtrApproval,RtrApprovalId,RtrUniqueCode,RtrLandLine,Reason,RtrCodeUserInput)
    SELECT Rt.RtrId,Rt.RtrCode,Rt.RtrName,Rt.RtrAdd1,Rt.RtrAdd2,Rt.RtrAdd3,Rt.RtrPinNo,Rt.RtrPhoneNo,Rt.RtrEmailId,Rt.RtrContactPerson, 
	ISNULL(SD1.CtrlDesc,'') AS RtrKeyAcc, ISNULL(SD2.CtrlDesc,'') AS RtrCovMode,Rt.RtrRegDate,Rt.RtrDepositAmt,ISNULL(SD3.CtrlDesc,'') AS RtrStatus, 
	ISNULL(SD4.CtrlDesc,'') AS RtrTaxable, ISNULL(SD5.CtrlDesc,'') AS RtrTaxType,ISNULL(TG.TaxGroupName,'') AS  TaxGroupName,
	Rt.RtrTINNo,Rt.RtrCSTNo, ISNULL(SD6.CtrlDesc,'') AS RtrDayOff, Rt.RtrCrBills,Rt.RtrCrLimit,Rt.RtrCrDays, Rt.RtrCashDiscPerc,  
	(CASE Rt.RtrCashDiscCond WHEN 1 THEN '>=' WHEN 0 THEN '<=' End)As RtrCashDiscCond,Rt.RtrCashDiscAmt,
	Rt.RtrLicNo,Rt.RtrLicExpiryDate,Rt.RtrDrugLicNo,Rt.RtrDrugExpiryDate,Rt.RtrPestLicNo,Rt.RtrPestExpiryDate,
	GE.GeoMainId,GE.GeoName,Gl.GeoLevelName,Rm.RmId,Rm.RMName,Rv.VillageId,Rv.VillageName,Rs.RtrShipId,
	Rs.RtrShipAdd1,Rs.RtrShipAdd2,Rs.RtrShipAdd3,Rs.RtrShipPinNo,Rt.RtrResPhone1,Rt.RtrResPhone2,Rt.RtrOffPhone1,Rt.RtrOffPhone2,
	Rt.RtrDOB,Rt.RtrAnniversary,Rt.RtrRemark1,Rt.RtrRemark2,Rt.RtrRemark3
	,Rt.COAId ,Rt.RtrOnAcc as OnAccount,Rt.TaxGroupId,  ISNULL(SD7.CtrlDesc,'') AS RtrType, Rt.RtrFrequency , 
	Rt.RtrCrBillsAlert, Rt.RtrCrLimitAlert, Rt.RtrCrDaysAlert, Rt.RtrKeyAcc AS RtrKeyId,Rt.RtrCovMode AS RtrCoverageId,Rt.RtrStatus 
	AS RtrStatusId,Rt.RtrDayOff AS RtrDayOffId, Rt.RtrTaxable AS RtrTaxableId,Rt.RtrTaxType AS RtrTaxTypeId,Rt.RtrType AS RtrTypeId ,
	ISNULL(SD8.CtrlDesc,'') AS RtrRlStatus,ISNULL(Rt.RtrRlStatus,1) AS RlStatus,Rt.CmpRtrCode,Rt.Upload ,
	ISNULL(SD9.CtrlDesc,'') AS RtrPayment,Rt.RtrPayment AS RtrPayModeId,ISNULL(SD10.CtrlDesc,'') AS RtrApproval,
	Rt.Approved AS RtrApprovalId,ISNULL(Rt.RtrUniqueCode,'') AS RtrUniqueCode,ISNULL(Rt.RtrLandLine,'') AS RtrLandLine,
	ISNULL(Re.Description,'') AS Reason,ISNULL(Rt.RtrCodeUserInput,'') AS RtrCodeUserInput
	FROM GeographyLevel Gl,Retailer Rt  
	LEFT OUTER JOIN Geography Ge ON GE.GeoMainId=Rt.GeoMainId  
	LEFT OUTER JOIN RouteMaster Rm ON Rm.RMId=Rt.RMId  
	LEFT OUTER JOIN ReasonMaster Re ON Re.ReasonId=Rt.Reason
	LEFT OUTER JOIN RouteVillage Rv ON Rv.VillageId=Rt.VillageId  
	LEFT OUTER JOIN RetailerShipAdd Rs ON Rs.RtrShipId=Rt.RtrShipId  
	LEFT OUTER JOIN TaxGroupSetting TG ON TG.TaxGroupId=Rt.TaxGroupId  
	LEFT OUTER JOIN ScreenDefaultValues SD1 ON SD1.CtrlValue=Rt.RtrKeyAcc AND SD1.CtrlId=10 AND SD1.TransId=@Pi_TransId AND SD1.LngId=@Pi_LgnId 
	LEFT OUTER JOIN ScreenDefaultValues SD2 ON SD2.CtrlValue=Rt.RtrCovMode AND SD2.CtrlId=11 AND SD2.TransId=@Pi_TransId AND SD2.LngId=@Pi_LgnId 
	LEFT OUTER JOIN ScreenDefaultValues SD3 ON SD3.CtrlValue=Rt.RtrStatus AND SD3.CtrlId=14 AND SD3.TransId=@Pi_TransId AND SD3.LngId=@Pi_LgnId 
	LEFT OUTER JOIN ScreenDefaultValues SD4 ON SD4.CtrlValue=Rt.RtrTaxable AND SD4.CtrlId=18 AND SD4.TransId=@Pi_TransId AND SD4.LngId=@Pi_LgnId 
	LEFT OUTER JOIN ScreenDefaultValues SD5 ON SD5.CtrlValue=Rt.RtrTaxType AND SD5.CtrlId=19 AND SD5.TransId=@Pi_TransId AND SD5.LngId=@Pi_LgnId 
	LEFT OUTER JOIN ScreenDefaultValues SD6 ON SD6.CtrlValue=Rt.RtrDayOff AND SD6.CtrlId=13 AND SD6.TransId=@Pi_TransId AND SD6.LngId=@Pi_LgnId 
	LEFT OUTER JOIN ScreenDefaultValues SD7 ON SD7.CtrlValue=Rt.RtrType AND SD7.CtrlId=56 AND SD7.TransId=@Pi_TransId AND SD7.LngId=@Pi_LgnId 
	LEFT OUTER JOIN ScreenDefaultValues SD8 ON SD8.CtrlValue=Rt.RtrRlStatus AND SD8.CtrlId=135 AND SD8.TransId=@Pi_TransId AND SD8.LngId=@Pi_LgnId 
	LEFT OUTER JOIN ScreenDefaultValues SD9 ON SD9.CtrlValue=Rt.RtrPayment AND SD9.CtrlId=163 AND SD9.TransId=@Pi_TransId AND SD9.LngId=@Pi_LgnId 
	LEFT OUTER JOIN ScreenDefaultValues SD10 ON SD10.CtrlValue=Rt.Approved AND SD10.CtrlId=164 AND SD10.TransId=@Pi_TransId AND SD10.LngId=@Pi_LgnId 
	WHERE GE.GeoLevelId = Gl.GeoLevelId
RETURN
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE name='Proc_RptBTBillTemplate' AND xtype='P')
DROP PROCEDURE Proc_RptBTBillTemplate
GO
--select * from Rptbilltemplatefinal
--Exec Proc_RptBTBillTemplate 1,1,2
CREATE PROCEDURE Proc_RptBTBillTemplate
(
	@Pi_UsrId Int = 1,
	@Pi_Type INT,
	@Pi_InvDC INT
)
AS
/*********************************
* PROCEDURE		: Proc_RptBTBillTemplate
* PURPOSE		: To Get the Bill Details 
* CREATED		: Nandakumar R.G
* CREATED DATE	: 29/03/2010
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
* UserId and Distinct added to avoid doubling value in Bill Print. by Boopathy and Shyam on 24-08-2011
* optimize the bill print generation by Boopathy on 02-11-2011
*********************************/
SET NOCOUNT ON
BEGIN
	DECLARE @FROMBillId AS  VARCHAR(25)
	DECLARE @ToBillId   AS  VARCHAR(25)
	DECLARE @Cnt AS INT
	--->Added By Nanda on 2011/09/19
	DECLARE @FromDate	AS DATETIME
	DECLARE @ToDate		AS DATETIME
	SELECT @FromDate=FilterDate FROM ReportFilterDt (NOLOCK) WHERE SelId=10 AND UsrId=@Pi_UsrId AND RptId=16
	SELECT @ToDate=FilterDate FROM ReportFilterDt (NOLOCK) WHERE SelId=11 AND UsrId=@Pi_UsrId AND RptId=16
	--->Till Here
	DECLARE @TempSalId TABLE
	(
		SalId	INT,
		UsrId	INT
	)
	DECLARE  @RptBillTemplate Table
	(
		[Base Qty] numeric(38,0),
		[Batch Code] nvarchar(50),
		[Batch Expiry Date] datetime,
		[Batch Manufacturing Date] datetime,
		[Batch MRP] numeric(38,2),
		[Batch Selling Rate] numeric(38,2),
		[Bill Date] datetime,
		[Bill Doc Ref. Number] nvarchar(50),
		[Bill Mode] tinyint,
		[Bill Type] tinyint,
		[CD Disc Base Qty Amount] numeric(38,2),
		[CD Disc Effect Amount] numeric(38,2),
		[CD Disc Header Amount] numeric(38,2),
		[CD Disc LineUnit Amount] numeric(38,2),
		[CD Disc Qty Percentage] numeric(38,2),
		[CD Disc Unit Percentage] numeric(38,2),
		[CD Disc UOM Amount] numeric(38,2),
		[CD Disc UOM Percentage] numeric(38,2),
		[Company Address1] nvarchar(50),
		[Company Address2] nvarchar(50),
		[Company Address3] nvarchar(50),
		[Company Code] nvarchar(20),
		[Company Contact Person] nvarchar(100),
		[Company EmailId] nvarchar(50),
		[Company Fax Number] nvarchar(50),
		[Company Name] nvarchar(100),
		[Company Phone Number] nvarchar(50),
		[Contact Person] nvarchar(50),
		[CST Number] nvarchar(50),
		[DB Disc Base Qty Amount] numeric(38,2),
		[DB Disc Effect Amount] numeric(38,2),
		[DB Disc Header Amount] numeric(38,2),
		[DB Disc LineUnit Amount] numeric(38,2),
		[DB Disc Qty Percentage] numeric(38,2),
		[DB Disc Unit Percentage] numeric(38,2),
		[DB Disc UOM Amount] numeric(38,2),
		[DB Disc UOM Percentage] numeric(38,2),
		[DC DATE] DATETIME,
		[DC NUMBER] nvarchar(100),
		[Delivery Boy] nvarchar(50),
		[Delivery Date] datetime,
		[Deposit Amount] numeric(38,2),
		[Distributor Address1] nvarchar(50),
		[Distributor Address2] nvarchar(50),
		[Distributor Address3] nvarchar(50),
		[Distributor Code] nvarchar(20),
		[Distributor Name] nvarchar(50),
		[Drug Batch Description] nvarchar(50),
		[Drug Licence Number 1] nvarchar(50),
		[Drug Licence Number 2] nvarchar(50),
		[Drug1 Expiry Date] DateTime,
		[Drug2 Expiry Date] DateTime,
		[EAN Code] varchar(50),
		[EmailID] nvarchar(50),
		[Geo Level] nvarchar(50),
		[Interim Sales] tinyint,
		[Licence Number] nvarchar(50),
		[Line Base Qty Amount] numeric(38,2),
		[Line Base Qty Percentage] numeric(38,2),
		[Line Effect Amount] numeric(38,2),
		[Line Unit Amount] numeric(38,2),
		[Line Unit Percentage] numeric(38,2),
		[Line UOM1 Amount] numeric(38,2),
		[Line UOM1 Percentage] numeric(38,2),
		[LST Number] nvarchar(50),
		[Manual Free Qty] int,
		[Order Date] datetime,
		[Order Number] nvarchar(50),
		[Pesticide Expiry Date] DateTime,
		[Pesticide Licence Number] nvarchar(50),
		[PhoneNo] nvarchar(50),
		[PinCode] int,
		[Product Code] nvarchar(50),
		[Product Name] nvarchar(200),
		[Product Short Name] nvarchar(100),
		[Product SL No] Int,
		[Product Type] int,
		[Remarks] nvarchar(200),
		[Retailer Address1] nvarchar(100),
		[Retailer Address2] nvarchar(100),
		[Retailer Address3] nvarchar(100),
		[Retailer Code] nvarchar(50),
		[Retailer ContactPerson] nvarchar(100),
		[Retailer Coverage Mode] tinyint,
		[Retailer Credit Bills] int,
		[Retailer Credit Days] int,
		[Retailer Credit Limit] numeric(38,2),
		[Retailer CSTNo] nvarchar(50),
		[Retailer Deposit Amount] numeric(38,2),
		[Retailer Drug ExpiryDate] datetime,
		[Retailer Drug License No] nvarchar(50),
		[Retailer EmailId] nvarchar(100),
		[Retailer GeoLevel] nvarchar(50),
		[Retailer License ExpiryDate] datetime,
		[Retailer License No] nvarchar(50),
		[Retailer Name] nvarchar(150),
		[Retailer OffPhone1] nvarchar(50),
		[Retailer OffPhone2] nvarchar(50),
		[Retailer OnAccount] numeric(38,2),
		[Retailer Pestcide ExpiryDate] datetime,
		[Retailer Pestcide LicNo] nvarchar(50),
		[Retailer PhoneNo] nvarchar(50),
		[Retailer Pin Code] nvarchar(50),
		[Retailer ResPhone1] nvarchar(50),
		[Retailer ResPhone2] nvarchar(50),
		[Retailer Ship Address1] nvarchar(100),
		[Retailer Ship Address2] nvarchar(100),
		[Retailer Ship Address3] nvarchar(100),
		[Retailer ShipId] int,
		[Retailer TaxType] tinyint,
		[Retailer TINNo] nvarchar(50),
		[Retailer Village] nvarchar(100),
		[Route Code] nvarchar(50),
		[Route Name] nvarchar(50),
		[Sales Invoice Number] nvarchar(50),
		[SalesInvoice ActNetRateAmount] numeric(38,2),
		[SalesInvoice CDPer] numeric(9,6),
		[SalesInvoice CRAdjAmount] numeric(38,2),
		[SalesInvoice DBAdjAmount] numeric(38,2),
		[SalesInvoice GrossAmount] numeric(38,2),
		[SalesInvoice Line Gross Amount] numeric(38,2),
		[SalesInvoice Line Net Amount] numeric(38,2),
		[SalesInvoice MarketRetAmount] numeric(38,2),
		[SalesInvoice NetAmount] numeric(38,2),
		[SalesInvoice NetRateDiffAmount] numeric(38,2),
		[SalesInvoice OnAccountAmount] numeric(38,2),
		[SalesInvoice OtherCharges] numeric(38,2),
		[SalesInvoice RateDiffAmount] numeric(38,2),
		[SalesInvoice ReplacementDiffAmount] numeric(38,2),
		[SalesInvoice RoundOffAmt] numeric(38,2),
		[SalesInvoice TotalAddition] numeric(38,2),
		[SalesInvoice TotalDeduction] numeric(38,2),
		[SalesInvoice WindowDisplayAmount] numeric(38,2),
		[SalesMan Code] nvarchar(50),
		[SalesMan Name] nvarchar(50),
		[SalId] int,
		[Sch Disc Base Qty Amount] numeric(38,2),
		[Sch Disc Effect Amount] numeric(38,2),
		[Sch Disc Header Amount] numeric(38,2),
		[Sch Disc LineUnit Amount] numeric(38,2),
		[Sch Disc Qty Percentage] numeric(38,2),
		[Sch Disc Unit Percentage] numeric(38,2),
		[Sch Disc UOM Amount] numeric(38,2),
		[Sch Disc UOM Percentage] numeric(38,2),
		[Scheme Points] numeric(38,2),
		[Spl. Disc Base Qty Amount] numeric(38,2),
		[Spl. Disc Effect Amount] numeric(38,2),
		[Spl. Disc Header Amount] numeric(38,2),
		[Spl. Disc LineUnit Amount] numeric(38,2),
		[Spl. Disc Qty Percentage] numeric(38,2),
		[Spl. Disc Unit Percentage] numeric(38,2),
		[Spl. Disc UOM Amount] numeric(38,2),
		[Spl. Disc UOM Percentage] numeric(38,2),
		[Tax 1] numeric(38,2),
		[Tax 2] numeric(38,2),
		[Tax 3] numeric(38,2),
		[Tax 4] numeric(38,2),
		[Tax Amount1] numeric(38,2),
		[Tax Amount2] numeric(38,2),
		[Tax Amount3] numeric(38,2),
		[Tax Amount4] numeric(38,2),
		[Tax Amt Base Qty Amount] numeric(38,2),
		[Tax Amt Effect Amount] numeric(38,2),
		[Tax Amt Header Amount] numeric(38,2),
		[Tax Amt LineUnit Amount] numeric(38,2),
		[Tax Amt Qty Percentage] numeric(38,2),
		[Tax Amt Unit Percentage] numeric(38,2),
		[Tax Amt UOM Amount] numeric(38,2),
		[Tax Amt UOM Percentage] numeric(38,2),
		[Tax Type] tinyint,
		[TIN Number] nvarchar(50),
		[Uom 1 Desc] nvarchar(50),
		[Uom 1 Qty] int,
		[Uom 2 Desc] nvarchar(50),
		[Uom 2 Qty] int,
		[Vehicle Name] nvarchar(50),
		UsrId int,
		Visibility tinyint,
		[Distributor Product Code] nvarchar(50),
		[Allotment No] nvarchar(50),
		[Bx Selling Rate] numeric(18,2)
	)
	IF EXISTS (SELECT * FROM dbo.SysObjects WHERE Id = Object_Id(N'[RptBillTemplate]') AND OBJECTPROPERTY(Id, N'IsUserTable') = 1)
	DROP TABLE [RptBillTemplate]
	DELETE FROM RptSELECTedBills WHERE UsrId=@Pi_UsrId
	IF @Pi_Type=1
	BEGIN
		--->Modified By Nanda on 2011/09/19
		INSERT INTO @TempSalId
		/* Added Distinct Shyam-Boopathy 24082011 16:*/
		--SELECT Distinct SelValue,UsrId FROM ReportFilterDt WHERE RptId = 16 AND SelId = 34 AND UsrId=@Pi_UsrId
		SELECT DISTINCT R.SelValue,UsrId FROM ReportFilterDt R (NOLOCK),SalesInvoice SI (NOLOCK)
		WHERE RptId = 16 AND SelId = 34  AND UsrId=@Pi_UsrId AND R.SelValue=Si.SalId AND SI.SalInvDate BETWEEN @FromDate AND @ToDate
		--->Till Here
		INSERT INTO RptSELECTedBills
		SELECT SalId,UsrId FROM @TempSalId
	END
	ELSE
	BEGIN
		IF @Pi_InvDC=1
		BEGIN
			DECLARE @FROMId INT
			DECLARE @ToId INT
			DECLARE @FROMSeq INT
			DECLARE @ToSeq INT
			SELECT @FROMId=SelValue FROM ReportFilterDt (NOLOCK) WHERE RptId=16 AND SelId=14 AND UsrId=@Pi_UsrId
			SELECT @ToId=SelValue FROM ReportFilterDt (NOLOCK) WHERE RptId=16 AND SelId=15 AND UsrId=@Pi_UsrId
			SELECT @FROMSeq=SeqNo FROM SalInvoiceDeliveryChallan (NOLOCK) WHERE SalId=@FROMId
			SELECT @ToSeq=SeqNo FROM SalInvoiceDeliveryChallan (NOLOCK) WHERE SalId=@ToId
			
			INSERT INTO RptSELECTedBills
/* Added Distinct Shyam-Boopathy 24082011 16:*/
			SELECT Distinct SalId,@Pi_UsrId FROM SalInvoiceDeliveryChallan (NOLOCK) WHERE SeqNo BETWEEN @FROMSeq AND @ToSeq
		END
		ELSE
		BEGIN
			SELECT @FROMBillId=SelValue FROM ReportFilterDt (NOLOCK) WHERE RptId = 16 AND SelId = 14 AND UsrId=@Pi_UsrId
			SELECT @ToBillId=SelValue FROM ReportFilterDt (NOLOCK) WHERE RptId = 16 AND SelId = 15 AND UsrId=@Pi_UsrId
			INSERT INTO RptSELECTedBills
/* Added Distinct Shyam-Boopathy 24082011 16:*/
			SELECT Distinct SalId,@Pi_UsrId FROM SalesINvoice (NOLOCK) WHERE SalId BETWEEN @FROMBillId AND @ToBillId
		END
	END
	
	IF @Pi_Type=1
	BEGIN
		INSERT INTO @RptBillTemplate
		SELECT DISTINCT BaseQty,PrdBatCode,ExpDate,MnfDate,MRP,[Selling Rate],SalInvDate,SalInvRef,BillMode,BillType,
		[CD Disc_Amount_Dt],[CD Disc_EffectAmt_Dt],[CD Disc_HD],[CD Disc_UnitAmt_Dt],[CD Disc_QtyPerc_Dt],[CD Disc_UnitPerc_Dt],[CD Disc_UomAmt_Dt],
		[CD Disc_UomPerc_Dt],Address1,Address2,Address3,CmpCode,ContactPerson,EmailId,FaxNumber,CmpName,PhoneNumber,D_ContactPerson,CSTNo,
		[DB Disc_Amount_Dt],[DB Disc_EffectAmt_Dt],[DB Disc_HD],[DB Disc_UnitAmt_Dt],[DB Disc_QtyPerc_Dt],[DB Disc_UnitPerc_Dt],[DB Disc_UomAmt_Dt],
		[DB Disc_UomPerc_Dt],DCDate,DCNo,DlvBoyName,SalDlvDate,DepositAmt,DistributorAdd1,DistributorAdd2,DistributorAdd3,DistributorCode,
		DistributorName,DrugBatchDesc,DrugLicNo1,DrugLicNo2,Drug1ExpiryDate,Drug2ExpiryDate,EANCode,D_EmailID,D_GeoLevelName,InterimSales,LicNo,
		LineBaseQtyAmount,LineBaseQtyPerc,LineEffectAmount,LineUnitamount,LineUnitPerc,LineUom1Amount,LineUom1Perc,LSTNo,SalManFreeQty,OrderDate,
		OrderKeyNo,PestExpiryDate,PestLicNo,PhoneNo,PinCode,PrdCCode,PrdName,PrdShrtName,SLNo,PrdType,Remarks,RtrAdd1,RtrAdd2,RtrAdd3,RtrCode,
		RtrContactPerson,RtrCovMode,RtrCrBills,RtrCrDays,RtrCrLimit,RtrCSTNo,RtrDepositAmt,RtrDrugExpiryDate,RtrDrugLicNo,RtrEmailId,
		GeoLevelName,RtrLicExpiryDate,RtrLicNo,RtrName,RtrOffPhone1,RtrOffPhone2,RtrOnAcc,RtrPestExpiryDate,RtrPestLicNo,RtrPhoneNo,RtrPinNo,
		RtrResPhone1,RtrResPhone2,RtrShipAdd1,RtrShipAdd2,RtrShipAdd3,RtrShipId,RtrTaxType,RtrTINNo,VillageName,RMCode,RMName,SalInvNo,
		SalActNetRateAmount,SalCDPer,CRAdjAmount,DBAdjAmount,SalGrossAmount,PrdGrossAmountAftEdit,PrdNetAmount,MarketRetAmount,SalNetAmt,
		SalNetRateDiffAmount,OnAccountAmount,OtherCharges,SalRateDiffAmount,ReplacementDiffAmount,SalRoundOffAmt,TotalAddition,TotalDeduction,
		WindowDisplayamount,SMCode,SMName,SalId,[Sch Disc_Amount_Dt],[Sch Disc_EffectAmt_Dt],[Sch Disc_HD],[Sch Disc_UnitAmt_Dt],[Sch Disc_QtyPerc_Dt],
		[Sch Disc_UnitPerc_Dt],[Sch Disc_UomAmt_Dt],[Sch Disc_UomPerc_Dt],Points,[Spl. Disc_Amount_Dt],[Spl. Disc_EffectAmt_Dt],[Spl. Disc_HD],
		[Spl. Disc_UnitAmt_Dt],[Spl. Disc_QtyPerc_Dt],[Spl. Disc_UnitPerc_Dt],[Spl. Disc_UomAmt_Dt],[Spl. Disc_UomPerc_Dt],
		Tax1Perc,Tax2Perc,Tax3Perc,Tax4Perc,Tax1Amount,Tax2Amount,Tax3Amount,Tax4Amount,[Tax Amt_Amount_Dt],[Tax Amt_EffectAmt_Dt],[Tax Amt_HD],
		[Tax Amt_UnitAmt_Dt],[Tax Amt_QtyPerc_Dt],[Tax Amt_UnitPerc_Dt],[Tax Amt_UomAmt_Dt],[Tax Amt_UomPerc_Dt],TaxType,TINNo,
		Uom1Id,Uom1Qty,Uom2Id,Uom2Qty,VehicleCode,@Pi_UsrId,1 Visibility,PrdDcode,'',0
		FROM
		(
			SELECT DisDt.*,RepAll.*
			FROM
			(
				SELECT D.DistributorCode,D.DistributorName,D.DistributorAdd1,D.DistributorAdd2,D.DistributorAdd3, D.PinCode,D.PhoneNo,
				D.ContactPerson D_ContactPerson,D.EmailID D_EmailID,D.TaxType,D.TINNo,D.DepositAmt,GL.GeoLevelName D_GeoLevelName,
				D.CSTNo,D.LSTNo,D.LicNo,D.DrugLicNo1,D.Drug1ExpiryDate,D.DrugLicNo2,D.Drug2ExpiryDate,D.PestLicNo , D.PestExpiryDate
				FROM Distributor D WITH (NOLOCK)
				LEFT OUTER JOIN Geography G WITH (NOLOCK) ON D.GeoMainId = G.GeoMainId
				LEFT OUTER JOIN GeographyLevel GL WITH (NOLOCK) ON G.GeoLevelId = GL.GeoLevelId
			) DisDt ,
			(
				SELECT RepHD.*,RepDt.* FROM
				(
					SELECT SalesInv.* , RtrDt.*, HDAmt.* FROM
					(
						SELECT SI.SalId SalIdHD,SalInvNo,SalInvDate,SalDlvDate,SalInvRef,SM.SMID,SM.SMCode,SDC.DCDATE,SDC.DCNO,SM.SMName,
						RM.RMID,RM.RMCode,RM.RMName,RtrId,InterimSales,OrderKeyNo,OrderDate,billtype,billmode,remarks,SalGrossAmount,
						SalRateDiffAmount,SalCDPer,DBAdjAmount,CRAdjAmount,Marketretamount,OtherCharges,Windowdisplayamount,onaccountamount,
						Replacementdiffamount,TotalAddition,TotalDeduction,SalActNetRateAmount,SalNetRateDiffAmount,SalNetAmt,
						SalRoundOffAmt,V.VehicleId,V.VehicleCode,D.DlvBoyId , D.DlvBoyName FROM SalesInvoice SI WITH (NOLOCK)
						LEFT OUTER JOIN SalInvoiceDeliveryChallan SDC ON SI.SALID=SDC.SALID
						LEFT OUTER JOIN Salesman SM WITH (NOLOCK) ON SI.SMId = SM.SMId
						LEFT OUTER JOIN RouteMaster RM WITH (NOLOCK) ON SI.RMId = RM.RMId
						LEFT OUTER JOIN Vehicle V WITH (NOLOCK) ON SI.VehicleId = V.VehicleId
						LEFT OUTER JOIN DeliveryBoy D WITH (NOLOCK) ON SI.DlvBoyId = D.DlvBoyId
						WHERE SI.SalId IN (SELECT SalId FROM RptSELECTedBills (NOLOCK) WHERE UsrId=@Pi_UsrId)
					) SalesInv
					LEFT OUTER JOIN
					(
						SELECT R.RtrId RtrId1,R.RtrCode,R.RtrName,R.RtrAdd1,R.RtrAdd2,R.RtrAdd3,R.RtrPinNo,R.RtrPhoneNo,
						R.RtrEmailId,R.RtrContactPerson,R.RtrCovMode,R.RtrTaxType,R.RtrTINNo,R.RtrCSTNo,R.RtrDepositAmt,R.RtrCrBills,
						R.RtrCrLimit,R.RtrCrDays,R.RtrLicNo,R.RtrLicExpiryDate,R.RtrDrugLicNo,R.RtrDrugExpiryDate,R.RtrPestLicNo,R.RtrPestExpiryDate,
						GL.GeoLevelName,RV.VillageName,R.RtrShipId,RS.RtrShipAdd1,RS.RtrShipAdd2,RS.RtrShipAdd3,R.RtrResPhone1,
						R.RtrResPhone2 , R.RtrOffPhone1, R.RtrOffPhone2, R.RtrOnAcc FROM Retailer R WITH (NOLOCK)
						INNER JOIN  SalesInvoice SI WITH (NOLOCK) ON R.RtrId=SI.RtrId
						LEFT OUTER JOIN RouteVillage RV WITH (NOLOCK) ON R.VillageId = RV.VillageId
						LEFT OUTER JOIN RetailerShipAdd RS WITH (NOLOCK) ON R.RtrShipId = RS.RtrShipId,
						Geography G WITH (NOLOCK),
						GeographyLevel GL WITH (NOLOCK) WHERE R.GeoMainId = G.GeoMainId
						AND G.GeoLevelId = GL.GeoLevelId AND SI.SalId IN (SELECT SalId FROM RptSELECTedBills (NOLOCK) WHERE UsrId=@Pi_UsrId)
					) RtrDt ON SalesInv.RtrId = RtrDt.RtrId1
					LEFT OUTER JOIN
					(
						SELECT SI.SalId,  ISNULL(D.Amount,0) AS [Spl. Disc_HD], ISNULL(E.Amount,0) AS [Sch Disc_HD], ISNULL(F.Amount,0) AS [DB Disc_HD],
						ISNULL(G.Amount,0) AS [CD Disc_HD], ISNULL(H.Amount,0) AS [Tax Amt_HD]
						FROM SalesInvoice SI
						INNER JOIN (SELECT SalId,BaseQtyAmount AS Amount FROM View_SalInvHDAmt WHERE RefCode='D') D ON SI.SalId = D.SalId
						INNER JOIN (SELECT SalId,BaseQtyAmount AS Amount FROM View_SalInvHDAmt WHERE RefCode='E') E ON SI.SalId = E.SalId
						INNER JOIN (SELECT SalId,BaseQtyAmount AS Amount FROM View_SalInvHDAmt WHERE RefCode='F') F ON SI.SalId = F.SalId
						INNER JOIN (SELECT SalId,BaseQtyAmount AS Amount FROM View_SalInvHDAmt WHERE RefCode='G') G ON SI.SalId = G.SalId
						INNER JOIN (SELECT SalId,BaseQtyAmount AS Amount FROM View_SalInvHDAmt WHERE RefCode='H') H ON SI.SalId = H.SalId
						WHERE SI.SalId IN (SELECT SalId FROM RptSELECTedBills (NOLOCK) WHERE UsrId=@Pi_UsrId)
					)HDAmt ON SalesInv.SalIdHD = HDAmt.SalId
				) RepHD
				LEFT OUTER JOIN
				(
					SELECT SalesInvPrd.*,LiAmt.*,LNUOM.*,BATPRC.MRP,BATPRC.[Selling Rate]
					FROM
					(
						SELECT SPR.*,C.CmpCode,C.CmpName,C.Address1,C.Address2,C.Address3,C.PhoneNumber,C.FaxNumber,C.EmailId,C.ContactPerson
						FROM
						(
							SELECT SIP.PrdGrossAmountAftEdit,SIP.PrdNetAmount,SIP.SalId SalIdDt,SIP.SlNo,SIP.PrdId,P.PrdCCode,PrdDcode,P.PrdName,P.PrdShrtName,
							P.CmpId,P.PrdType,SIP.PrdBatId,PB.PrdBatCode,PB.MnfDate,PB.ExpDate,P.EANCode,
							U1.UomDescription Uom1Id,SIP.Uom1Qty,U2.UomDescription Uom2Id,SIP.Uom2Qty,SIP.BaseQty,
							SIP.DrugBatchDesc,SIP.SalManFreeQty,ISNULL(SPO.Points,0) Points,SIP.PriceId,BPT.Tax1Perc,BPT.Tax2Perc,BPT.Tax3Perc,
							BPT.Tax4Perc,BPT.Tax5Perc,BPT.Tax1Amount,BPT.Tax2Amount,BPT.Tax3Amount,BPT.Tax4Amount,BPT.Tax5Amount
							FROM SalesInvoiceProduct SIP WITH (NOLOCK)
							LEFT OUTER JOIN BillPrintTaxTemp BPT WITH (NOLOCK) ON SIP.SalId=BPT.SalID AND SIP.PrdId=BPT.PrdId AND SIP.PrdBatId=BPT.PrdBatId AND BPT.UsrId=@Pi_UsrId
							INNER JOIN  SalesInvoice SI WITH (NOLOCK) ON SIP.SalId=SI.SalId
							INNER JOIN Product P WITH (NOLOCK) ON SIP.PRdID = P.PrdId INNER JOIN ProductBatch PB WITH (NOLOCK) ON SIP.PrdBatId = PB.PrdBatId
							INNER JOIN UomMaster U1 WITH (NOLOCK) ON SIP.Uom1Id = U1.UomId
							LEFT OUTER JOIN UomMaster U2 WITH (NOLOCK) ON SIP.Uom2Id = U2.UomId
							LEFT OUTER JOIN
							(
								SELECT LW.SalId,LW.RowId,LW.SchId,LW.slabId,LW.PrdId, LW.PrdBatId, PO.Points
								FROM SalesInvoiceSchemeLineWise LW WITH (NOLOCK)
								LEFT OUTER JOIN SalesInvoiceSchemeDtpoints PO WITH (NOLOCK) ON LW.SalId = PO.SalId AND LW.SchId = PO.SchId AND
								--LW.SlabId = PO.SlabId
								LW.SlabId = PO.SlabId AND LW.PrdId=PO.PrdId AND LW.PrdBatId=PO.PrdBatId 
								WHERE LW.SalId IN (SELECT SalId FROM RptSELECTedBills (NOLOCK) WHERE UsrId=@Pi_UsrId)
							) SPO ON SIP.SalId = SPO.SalId AND SIP.SlNo = SPO.RowId AND
							SIP.PrdId = SPO.PrdId AND SIP.PrdBatId = SPO.PrdBatId
							WHERE SIP.SalId IN (SELECT SalId FROM RptSELECTedBills (NOLOCK) WHERE UsrId=@Pi_UsrId) 
						) SPR
						INNER JOIN Company C WITH (NOLOCK) ON SPR.CmpId = C.CmpId
						UNION ALL
						SELECT SPR.*,0 Points,0 Tax1Perc,0 Tax2Perc,0 Tax3Perc,0 Tax4Perc,0 Tax5Perc,0 Tax1Amount,0 Tax2Amount,0 Tax3Amount,0 Tax4Amount,
						0 Tax5Amount,C.CmpCode,C.CmpName,C.Address1,C.Address2,C.Address3,C.PhoneNumber,C.FaxNumber,C.EmailId,C.ContactPerson
						FROM
						(
--							SELECT 0 PrdGrossAmountAftEdit,0 PrdNetAmount,SIP.SalId SalIdDt,0 SlNo,SIP.FreePrdId PrdId,P.PrdCCode,P.PrdName,P.PrdShrtName,
--							P.CmpId,P.PrdType,SIP.FreePrdBatId PrdBatId,PB.PrdBatCode,PB.MnfDate,PB.ExpDate,'' AS EANCode,'0' UOM1,'0' Uom1Qty,
--							'0' UOM2,'0' Uom2Qty,SIP.FreeQty BaseQty,'0' DrugBatchDesc,'0' SalManFreeQty,SIP.FreePriceId AS PriceId
--							FROM SalesInvoiceSchemeDtFreePrd SIP WITH (NOLOCK)
--							INNER JOIN Product P WITH (NOLOCK) ON SIP.FreePRdID = P.PrdId
--							INNER JOIN ProductBatch PB WITH (NOLOCK) ON SIP.FreePrdBatId = PB.PrdBatId
--							WHERE SIP.SalId IN (SELECT SalId FROM RptSELECTedBills)
							SELECT 0 PrdGrossAmountAftEdit,0 PrdNetAmount,SIP.SalId SalIdDt,0 SlNo,SIP.FreePrdId PrdId,P.PrdCCode,PrdDcode,P.PrdName,P.PrdShrtName,
							P.CmpId,P.PrdType,SIP.FreePrdBatId PrdBatId,PB.PrdBatCode,PB.MnfDate,PB.ExpDate,'' AS EANCode,'0' UOM1,'0' Uom1Qty,
							'0' UOM2,'0' Uom2Qty,SUM(SIP.FreeQty) BaseQty,'0' DrugBatchDesc,'0' SalManFreeQty,SIP.FreePriceId AS PriceId
							FROM SalesInvoiceSchemeDtFreePrd SIP WITH (NOLOCK)
							INNER JOIN Product P WITH (NOLOCK) ON SIP.FreePRdID = P.PrdId
							INNER JOIN ProductBatch PB WITH (NOLOCK) ON SIP.FreePrdBatId = PB.PrdBatId
							WHERE SIP.SalId IN (SELECT SalId FROM RptSELECTedBills (NOLOCK) WHERE UsrId=@Pi_UsrId)
							GROUP BY SIP.SalId,SIP.FreePrdId,P.PrdCCode,PrdDcode,P.PrdName,P.PrdShrtName,
							P.CmpId,P.PrdType,SIP.FreePrdBatId,PB.PrdBatCode,PB.MnfDate,PB.ExpDate,SIP.FreePriceId
						) SPR INNER JOIN Company C WITH (NOLOCK) ON SPR.CmpId = C.CmpId
						UNION ALL
						SELECT SPR.*,0 AS Points,0 Tax1Perc,0 Tax2Perc,0 Tax3Perc,0 Tax4Perc,0 Tax5Perc,0 Tax1Amount,0 Tax2Amount,0 Tax3Amount,
						0 Tax4Amount,0 Tax5Amount,C.CmpCode,C.CmpName,C.Address1,C.Address2,C.Address3,C.PhoneNumber,C.FaxNumber,C.EmailId,C.ContactPerson
						FROM
						(
--							SELECT 0 PrdGrossAmountAftEdit,0 PrdNetAmount,SIP.SalId SalIdDt,0 SlNo,SIP.GiftPrdId PrdId,P.PrdCCode,P.PrdName,P.PrdShrtName,
--							P.CmpId,P.PrdType,SIP.GiftPrdBatId PrdBatId,PB.PrdBatCode,PB.MnfDate,PB.ExpDate,'' AS EANCode,
--							'0' UOM1,'0' Uom1Qty,'0' UOM2,'0' Uom2Qty,SIP.GiftQty BaseQty,'0' DrugBatchDesc,'0' SalManFreeQty,SIP.GiftPriceId AS PriceId
--							FROM SalesInvoiceSchemeDtFreePrd SIP WITH (NOLOCK)
--							INNER JOIN Product P WITH (NOLOCK) ON SIP.GiftPRdID = P.PrdId
--							INNER JOIN ProductBatch PB WITH (NOLOCK) ON SIP.GiftPrdBatId = PB.PrdBatId
--							WHERE SIP.SalId IN (SELECT SalId FROM RptSELECTedBills)
							SELECT 0 PrdGrossAmountAftEdit,0 PrdNetAmount,SIP.SalId SalIdDt,0 SlNo,SIP.GiftPrdId PrdId,P.PrdCCode,PrdDcode,P.PrdName,P.PrdShrtName,
							P.CmpId,P.PrdType,SIP.GiftPrdBatId PrdBatId,PB.PrdBatCode,PB.MnfDate,PB.ExpDate,'' AS EANCode,
							'0' UOM1,'0' Uom1Qty,'0' UOM2,'0' Uom2Qty,SUM(SIP.GiftQty) AS BaseQty,'0' DrugBatchDesc,'0' SalManFreeQty,SIP.GiftPriceId AS PriceId
							FROM SalesInvoiceSchemeDtFreePrd SIP WITH (NOLOCK)
							INNER JOIN Product P WITH (NOLOCK) ON SIP.GiftPRdID = P.PrdId
							INNER JOIN ProductBatch PB WITH (NOLOCK) ON SIP.GiftPrdBatId = PB.PrdBatId
							WHERE SIP.SalId IN (SELECT SalId FROM RptSELECTedBills (NOLOCK) WHERE UsrId=@Pi_UsrId)
							GROUP BY SIP.SalId,SIP.GiftPrdId,P.PrdCCode,PrdDcode,P.PrdName,P.PrdShrtName,
							P.CmpId,P.PrdType,SIP.GiftPrdBatId,PB.PrdBatCode,PB.MnfDate,PB.ExpDate,SIP.GiftPriceId
						) SPR INNER JOIN Company C ON SPR.CmpId = C.CmpId
					)SalesInvPrd
					LEFT OUTER JOIN
					(
						SELECT SI.SalId SalId1,ISNULL(SI.SlNo,0) SlNo1,SI.PRdId PrdId1,SI.PRdBatId PRdBatId1,
						ISNULL(D.LineUnitAmount,0) AS [Spl. Disc_UnitAmt_Dt], ISNULL(D.Amount,0) AS [Spl. Disc_Amount_Dt],
						ISNULL(D.LineUom1Amount,0) AS [Spl. Disc_UomAmt_Dt], ISNULL(D.LineUnitPerc,0) AS [Spl. Disc_UnitPerc_Dt],
						ISNULL(D.LineBaseQtyPerc,0) AS [Spl. Disc_QtyPerc_Dt], ISNULL(D.LineUom1Perc,0) AS [Spl. Disc_UomPerc_Dt],
						ISNULL(D.LineEffectAmount,0) AS [Spl. Disc_EffectAmt_Dt], ISNULL(E.LineUnitAmount,0) AS [Sch Disc_UnitAmt_Dt],
						ISNULL(E.Amount,0) AS [Sch Disc_Amount_Dt], ISNULL(E.LineUom1Amount,0) AS [Sch Disc_UomAmt_Dt],
						ISNULL(E.LineUnitPerc,0) AS [Sch Disc_UnitPerc_Dt], ISNULL(E.LineBaseQtyPerc,0) AS [Sch Disc_QtyPerc_Dt],
						ISNULL(E.LineUom1Perc,0) AS [Sch Disc_UomPerc_Dt], ISNULL(E.LineEffectAmount,0) AS [Sch Disc_EffectAmt_Dt],
						ISNULL(F.LineUnitAmount,0) AS [DB Disc_UnitAmt_Dt], ISNULL(F.Amount,0) AS [DB Disc_Amount_Dt],
						ISNULL(F.LineUom1Amount,0) AS [DB Disc_UomAmt_Dt], ISNULL(F.LineUnitPerc,0) AS [DB Disc_UnitPerc_Dt],
						ISNULL(F.LineBaseQtyPerc,0) AS [DB Disc_QtyPerc_Dt], ISNULL(F.LineUom1Perc,0) AS [DB Disc_UomPerc_Dt],
						ISNULL(F.LineEffectAmount,0) AS [DB Disc_EffectAmt_Dt], ISNULL(G.LineUnitAmount,0) AS [CD Disc_UnitAmt_Dt],
						ISNULL(G.Amount,0) AS [CD Disc_Amount_Dt], ISNULL(G.LineUom1Amount,0) AS [CD Disc_UomAmt_Dt],
						ISNULL(G.LineUnitPerc,0) AS [CD Disc_UnitPerc_Dt], ISNULL(G.LineBaseQtyPerc,0) AS [CD Disc_QtyPerc_Dt],
						ISNULL(G.LineUom1Perc,0) AS [CD Disc_UomPerc_Dt], ISNULL(G.LineEffectAmount,0) AS [CD Disc_EffectAmt_Dt],
						ISNULL(H.LineUnitAmount,0) AS [Tax Amt_UnitAmt_Dt], ISNULL(H.Amount,0) AS [Tax Amt_Amount_Dt],
						ISNULL(H.LineUom1Amount,0) AS [Tax Amt_UomAmt_Dt], ISNULL(H.LineUnitPerc,0) AS [Tax Amt_UnitPerc_Dt],
						ISNULL(H.LineBaseQtyPerc,0) AS [Tax Amt_QtyPerc_Dt], ISNULL(H.LineUom1Perc,0) AS [Tax Amt_UomPerc_Dt],
						ISNULL(H.LineEffectAmount,0) AS [Tax Amt_EffectAmt_Dt] 
						FROM SalesInvoiceProduct SI WITH (NOLOCK)
						INNER JOIN
						(
							SELECT DISTINCT SalId,PrdSlNo,LineUnitAmount,LineBaseQtyAmount AS Amount,LineUom1Amount,
							LineUnitPerc,LineBaseQtyPerc,LineUom1Perc,LineEffectAmount
							FROM View_SalInvLineAmt WHERE RefCode='D'
						) D ON SI.SalId = D.SalId AND SI.SlNo = D.PrdSlNo
						INNER JOIN
						(
							SELECT DISTINCT SalId,PrdSlNo,LineUnitAmount,LineBaseQtyAmount AS Amount,LineUom1Amount,
							LineUnitPerc,LineBaseQtyPerc,LineUom1Perc,LineEffectAmount
							FROM View_SalInvLineAmt WHERE RefCode='E'
						) E ON SI.SalId = E.SalId AND SI.SlNo = E.PrdSlNo
						INNER JOIN
						(
							SELECT DISTINCT SalId,PrdSlNo,LineUnitAmount,LineBaseQtyAmount AS Amount,LineUom1Amount,
							LineUnitPerc,LineBaseQtyPerc,LineUom1Perc,LineEffectAmount
							FROM View_SalInvLineAmt WHERE RefCode='F'
						) F ON SI.SalId = F.SalId AND SI.SlNo = F.PrdSlNo
						INNER JOIN
						(
							SELECT DISTINCT SalId,PrdSlNo,LineUnitAmount,LineBaseQtyAmount AS Amount,LineUom1Amount,
							LineUnitPerc,LineBaseQtyPerc,LineUom1Perc,LineEffectAmount
							FROM View_SalInvLineAmt WHERE RefCode='G'
						) G ON SI.SalId = G.SalId AND SI.SlNo = G.PrdSlNo
						INNER JOIN
						(
							SELECT DISTINCT SalId,PrdSlNo,LineUnitAmount,LineBaseQtyAmount AS Amount,LineUom1Amount,
							LineUnitPerc,LineBaseQtyPerc,LineUom1Perc,LineEffectAmount
							FROM View_SalInvLineAmt WHERE RefCode='H'
						) H ON SI.SalId = H.SalId AND SI.SlNo = H.PrdSlNo
						WHERE SI.SalId IN (SELECT SalId FROM RptSELECTedBills (NOLOCK) WHERE UsrId=@Pi_UsrId)
					) LiAmt  ON SalesInvPrd.SalIdDt = LiAmt.SalId1 AND SalesInvPrd.PrdId = LiAmt.PrdId1
					AND SalesInvPrd.PrdBatId = LiAmt.PRdBatId1 AND SalesInvPrd.SlNo = LiAmt.SlNo1
					LEFT OUTER JOIN
					(
						SELECT DISTINCT SalId SalId2,SlNo PrdSlNo2,0 LineUnitPerc,0 AS LineBaseQtyPerc,0 LineUom1Perc,Prduom1selrate LineUnitAmount,
						(Prduom1selrate * BaseQty)  LineBaseQtyAmount,PrdUom1EditedSelRate LineUom1Amount, 0 LineEffectAmount
						FROM SalesInvoiceProduct WITH (NOLOCK)
					) LNUOM  ON SalesInvPrd.SalIdDt = LNUOM.SalId2 AND SalesInvPrd.SlNo = LNUOM.PrdSlNo2
					LEFT OUTER JOIN
					(
						SELECT DISTINCT MRP.PrdId,MRP.PrdBatId,MRP.BatchSeqId,MRP.MRP,SelRtr.[Selling Rate],MRP.PriceId
						FROM
						(
							SELECT PB.PrdId,PB.PrdBatId,PBV.BatchSeqId, PBV.PrdBatDetailValue 'MRP',PBV.PriceId
							FROM ProductBatch PB WITH (NOLOCK),BatchCreation BC WITH (NOLOCK), ProductBatchDetails PBV WITH (NOLOCK)
							WHERE PBV.BatchSeqId = BC.BatchSeqId AND PBV.PrdBatId = PB.PrdBatId AND PBV.SLNo = BC.SlNo AND (MRP = 1 )
						) MRP
						LEFT OUTER JOIN
						(
						SELECT PB.PrdId,PB.PrdBatId,PBV.BatchSeqId, PBV.PrdBatDetailValue 'Selling Rate',PBV.PriceId
						FROM ProductBatch PB  WITH (NOLOCK), BatchCreation BC WITH (NOLOCK), ProductBatchDetails PBV WITH (NOLOCK)
						WHERE PBV.BatchSeqId = BC.BatchSeqId AND PBV.PrdBatId = PB.PrdBatId AND PBV.SLNo = BC.SlNo AND (SelRte= 1 )
						) SelRtr ON MRP.PrdId = SelRtr.PrdId AND MRP.PrdBatId = SelRtr.PrdBatId AND MRP.BatchSeqId = SelRtr.BatchSeqId
						AND MRP.PriceId=SelRtr.PriceId
					) BATPRC ON SalesInvPrd.PrdId = BATPRC.PrdId AND SalesInvPrd.PrdBatId = BATPRC.PrdBatId AND BATPRC.PriceId=SalesInvPrd.PriceId
				) RepDt ON RepHd.SalIdHd = RepDt.SalIdDt
			) RepAll
		) FinalSI  WHERE SalId IN (SELECT SalId FROM @TempSalId)
		
	END
	ELSE
	BEGIN
	
		SELECT SI.* INTO #SalesInvoiceProduct FROM SalesInvoiceProduct SI WITH (NOLOCK) 
		INNER JOIN  RptSELECTedBills B ON SI.SALID=B.SalId WHERE B.UsrId=@Pi_UsrId
		 
		INSERT INTO @RptBillTemplate
		SELECT DISTINCT BaseQty,PrdBatCode,ExpDate,MnfDate,MRP,[Selling Rate],SalInvDate,SalInvRef,BillMode,BillType,[CD Disc_Amount_Dt],
		[CD Disc_EffectAmt_Dt],[CD Disc_HD],[CD Disc_UnitAmt_Dt],[CD Disc_QtyPerc_Dt],[CD Disc_UnitPerc_Dt],[CD Disc_UomAmt_Dt],[CD Disc_UomPerc_Dt],
		Address1,Address2,Address3,CmpCode,ContactPerson,EmailId,FaxNumber,CmpName,PhoneNumber,D_ContactPerson,CSTNo,[DB Disc_Amount_Dt],
		[DB Disc_EffectAmt_Dt],[DB Disc_HD],[DB Disc_UnitAmt_Dt],[DB Disc_QtyPerc_Dt],[DB Disc_UnitPerc_Dt],[DB Disc_UomAmt_Dt],[DB Disc_UomPerc_Dt],
		DCDate,DCNo,DlvBoyName,SalDlvDate,DepositAmt,DistributorAdd1,DistributorAdd2,DistributorAdd3,DistributorCode,DistributorName,DrugBatchDesc,
		DrugLicNo1,DrugLicNo2,Drug1ExpiryDate,Drug2ExpiryDate,EANCode,D_EmailID,D_GeoLevelName,InterimSales,LicNo,LineBaseQtyAmount,LineBaseQtyPerc,
		LineEffectAmount,LineUnitamount,LineUnitPerc,LineUom1Amount,LineUom1Perc,LSTNo,SalManFreeQty,OrderDate,OrderKeyNo,PestExpiryDate,PestLicNo,
		PhoneNo,PinCode,PrdCCode,PrdName,PrdShrtName,SLNo,PrdType,Remarks,RtrAdd1,RtrAdd2,RtrAdd3,RtrCode,RtrContactPerson,RtrCovMode,
		RtrCrBills,RtrCrDays,RtrCrLimit,RtrCSTNo,RtrDepositAmt,RtrDrugExpiryDate,RtrDrugLicNo,RtrEmailId,GeoLevelName,RtrLicExpiryDate,RtrLicNo,
		RtrName,RtrOffPhone1,RtrOffPhone2,RtrOnAcc,RtrPestExpiryDate,RtrPestLicNo,RtrPhoneNo,RtrPinNo,RtrResPhone1,RtrResPhone2,
		RtrShipAdd1,RtrShipAdd2,RtrShipAdd3,RtrShipId,RtrTaxType,RtrTINNo,VillageName,RMCode,RMName,SalInvNo,SalActNetRateAmount,SalCDPer,
		CRAdjAmount,DBAdjAmount,SalGrossAmount,PrdGrossAmountAftEdit,PrdNetAmount,MarketRetAmount,SalNetAmt,SalNetRateDiffAmount,OnAccountAmount,
		OtherCharges,SalRateDiffAmount,ReplacementDiffAmount,SalRoundOffAmt,TotalAddition,TotalDeduction,WindowDisplayamount,SMCode,SMName,B.SalId,
		[Sch Disc_Amount_Dt],[Sch Disc_EffectAmt_Dt],[Sch Disc_HD],[Sch Disc_UnitAmt_Dt],[Sch Disc_QtyPerc_Dt],[Sch Disc_UnitPerc_Dt],[Sch Disc_UomAmt_Dt],
		[Sch Disc_UomPerc_Dt],Points,[Spl. Disc_Amount_Dt],[Spl. Disc_EffectAmt_Dt],[Spl. Disc_HD],[Spl. Disc_UnitAmt_Dt],[Spl. Disc_QtyPerc_Dt],
		[Spl. Disc_UnitPerc_Dt],[Spl. Disc_UomAmt_Dt],[Spl. Disc_UomPerc_Dt],Tax1Perc,Tax2Perc,Tax3Perc,Tax4Perc,Tax1Amount,Tax2Amount,Tax3Amount,
		Tax4Amount,[Tax Amt_Amount_Dt],[Tax Amt_EffectAmt_Dt],[Tax Amt_HD],[Tax Amt_UnitAmt_Dt],[Tax Amt_QtyPerc_Dt],[Tax Amt_UnitPerc_Dt],
		[Tax Amt_UomAmt_Dt],[Tax Amt_UomPerc_Dt],TaxType,TINNo,Uom1Id,Uom1Qty,Uom2Id,Uom2Qty,VehicleCode,@Pi_UsrId,1 Visibility,PrdDcode,'',0
		FROM
		(
			SELECT DisDt.*,RepAll.*
			FROM
			(
				SELECT D.DistributorCode,D.DistributorName,D.DistributorAdd1,D.DistributorAdd2,D.DistributorAdd3, D.PinCode,D.PhoneNo,
				D.ContactPerson D_ContactPerson,D.EmailID D_EmailID,D.TaxType,D.TINNo,D.DepositAmt,GL.GeoLevelName D_GeoLevelName,
				D.CSTNo,D.LSTNo,D.LicNo,D.DrugLicNo1,D.Drug1ExpiryDate,D.DrugLicNo2,D.Drug2ExpiryDate,D.PestLicNo , D.PestExpiryDate
				FROM Distributor D WITH (NOLOCK)
				LEFT OUTER JOIN Geography G WITH (NOLOCK) ON D.GeoMainId = G.GeoMainId
				LEFT OUTER JOIN GeographyLevel GL WITH (NOLOCK) ON G.GeoLevelId = GL.GeoLevelId
			) DisDt ,
			(
				SELECT RepHD.*,RepDt.* FROM
				(
					SELECT DISTINCT SalesInv.* , RtrDt.*,HDAmt.* FROM
					(
						SELECT SI.SalId SalIdHD,SalInvNo,SalInvDate,SalDlvDate,SalInvRef,SM.SMID,SM.SMCode,SDC.DCDATE,SDC.DCNO,SM.SMName,
						RM.RMID,RM.RMCode,RM.RMName,RtrId,InterimSales,OrderKeyNo,OrderDate,billtype,billmode,remarks,SalGrossAmount,SalRateDiffAmount,
						SalCDPer,DBAdjAmount,CRAdjAmount,Marketretamount,OtherCharges,Windowdisplayamount,onaccountamount,Replacementdiffamount,
						TotalAddition,TotalDeduction,SalActNetRateAmount,SalNetRateDiffAmount,SalNetAmt,SalRoundOffAmt,V.VehicleId,V.VehicleCode,
						D.DlvBoyId,D.DlvBoyName
						FROM SalesInvoice SI WITH (NOLOCK)
						LEFT OUTER JOIN SalInvoiceDeliveryChallan SDC ON SI.SALID=SDC.SALID
						LEFT OUTER JOIN Salesman SM WITH (NOLOCK) ON SI.SMId = SM.SMId
						LEFT OUTER JOIN RouteMaster RM WITH (NOLOCK) ON SI.RMId = RM.RMId
						LEFT OUTER JOIN Vehicle V WITH (NOLOCK) ON SI.VehicleId = V.VehicleId
						LEFT OUTER JOIN DeliveryBoy D WITH (NOLOCK) ON SI.DlvBoyId = D.DlvBoyId
						INNER JOIN RptSELECTedBills E (NOLOCK) ON SI.SalId=E.SalId
						WHERE E.UsrId=@Pi_UsrId 
					) SalesInv
					INNER JOIN
					(
						SELECT R.RtrId RtrId1,R.RtrCode,R.RtrName,R.RtrAdd1,R.RtrAdd2,R.RtrAdd3,R.RtrPinNo,R.RtrPhoneNo,
						R.RtrEmailId,R.RtrContactPerson,R.RtrCovMode,R.RtrTaxType,R.RtrTINNo,R.RtrCSTNo,R.RtrDepositAmt,R.RtrCrBills,R.RtrCrLimit,
						R.RtrCrDays,R.RtrLicNo,R.RtrLicExpiryDate,R.RtrDrugLicNo,R.RtrDrugExpiryDate,R.RtrPestLicNo,R.RtrPestExpiryDate,GL.GeoLevelName,
						RV.VillageName,R.RtrShipId,RS.RtrShipAdd1,RS.RtrShipAdd2,RS.RtrShipAdd3,R.RtrResPhone1,
						R.RtrResPhone2,R.RtrOffPhone1,R.RtrOffPhone2,R.RtrOnAcc
						FROM Retailer R WITH (NOLOCK)
						INNER JOIN  SalesInvoice SI WITH (NOLOCK) ON R.RtrId=SI.RtrId
						INNER JOIN RptSELECTedBills E (NOLOCK) ON SI.SalId=E.SalId
						LEFT OUTER JOIN RouteVillage RV WITH (NOLOCK) ON R.VillageId = RV.VillageId
						LEFT OUTER JOIN RetailerShipAdd RS WITH (NOLOCK) ON R.RtrShipId = RS.RtrShipId,
						Geography G WITH (NOLOCK),
						GeographyLevel GL WITH (NOLOCK)
						WHERE R.GeoMainId = G.GeoMainId
						AND G.GeoLevelId = GL.GeoLevelId AND E.UsrId=@Pi_UsrId --SI.SalId IN (SELECT SalId FROM RptSELECTedBills (NOLOCK) WHERE UsrId=@Pi_UsrId)
					) RtrDt ON SalesInv.RtrId = RtrDt.RtrId1
					INNER JOIN
					(   -- Comment by Boopathy on 02-11-2011 for taking long time to generate
						--SELECT SI.SalId,  ISNULL(D.Amount,0) AS [Spl. Disc_HD], ISNULL(E.Amount,0) AS [Sch Disc_HD], ISNULL(F.Amount,0) AS [DB Disc_HD],
						--ISNULL(G.Amount,0) AS [CD Disc_HD], ISNULL(H.Amount,0) AS [Tax Amt_HD]
						--FROM SalesInvoice SI (NOLOCK)
						--INNER JOIN
						--(
						--	SELECT SalId,BaseQtyAmount AS Amount FROM View_SalInvHDAmt WHERE RefCode='D' AND SalId IN(SELECT SalId FROM RptSELECTedBills (NOLOCK) WHERE UsrId=@Pi_UsrId)
						--) D ON SI.SalId = D.SalId
						--INNER JOIN
						--(
						--	SELECT SalId,BaseQtyAmount AS Amount FROM View_SalInvHDAmt WHERE RefCode='E' AND SalId IN(SELECT SalId FROM RptSELECTedBills (NOLOCK) WHERE UsrId=@Pi_UsrId)
						--) E ON SI.SalId = E.SalId
						--INNER JOIN
						--(
						--	SELECT SalId,BaseQtyAmount AS Amount FROM View_SalInvHDAmt WHERE RefCode='F' AND SalId IN(SELECT SalId FROM RptSELECTedBills (NOLOCK) WHERE UsrId=@Pi_UsrId)
						--) F ON SI.SalId = F.SalId
						--INNER JOIN
						--(
						--	SELECT SalId,BaseQtyAmount AS Amount FROM View_SalInvHDAmt WHERE RefCode='G' AND SalId IN(SELECT SalId FROM RptSELECTedBills (NOLOCK) WHERE UsrId=@Pi_UsrId)
						--) G ON SI.SalId = G.SalId
						--INNER JOIN
						--(
						--	SELECT SalId,BaseQtyAmount AS Amount FROM View_SalInvHDAmt WHERE RefCode='H' AND SalId IN(SELECT SalId FROM RptSELECTedBills (NOLOCK) WHERE UsrId=@Pi_UsrId)
						--) H ON SI.SalId = H.SalId
						--WHERE SI.SalId IN (SELECT SalId FROM RptSELECTedBills (NOLOCK) WHERE UsrId=@Pi_UsrId)
						
						
						SELECT DISTINCT D.SalId,  ISNULL(D.Amount,0) AS [Spl. Disc_HD], ISNULL(E.Amount,0) AS [Sch Disc_HD], ISNULL(F.Amount,0) AS [DB Disc_HD],
						ISNULL(G.Amount,0) AS [CD Disc_HD], ISNULL(H.Amount,0) AS [Tax Amt_HD]
						FROM 
						(
							SELECT SalId,BaseQtyAmount AS Amount FROM View_SalInvHDAmt WHERE RefCode='D' AND SalId IN(SELECT SalId FROM RptSELECTedBills (NOLOCK) WHERE UsrId=@Pi_UsrId)
						) D, --ON SI.SalId = D.SalId
						--INNER JOIN
						(
							SELECT SalId,BaseQtyAmount AS Amount FROM View_SalInvHDAmt WHERE RefCode='E' AND SalId IN(SELECT SalId FROM RptSELECTedBills (NOLOCK) WHERE UsrId=@Pi_UsrId)
						) E, --ON SI.SalId = E.SalId
						--INNER JOIN
						(
							SELECT SalId,BaseQtyAmount AS Amount FROM View_SalInvHDAmt WHERE RefCode='F' AND SalId IN(SELECT SalId FROM RptSELECTedBills (NOLOCK) WHERE UsrId=@Pi_UsrId)
						) F, --ON SI.SalId = F.SalId
						--INNER JOIN
						(
							SELECT SalId,BaseQtyAmount AS Amount FROM View_SalInvHDAmt WHERE RefCode='G' AND SalId IN(SELECT SalId FROM RptSELECTedBills (NOLOCK) WHERE UsrId=@Pi_UsrId)
						) G, --ON SI.SalId = G.SalId
						--INNER JOIN
						(
							SELECT SalId,BaseQtyAmount AS Amount FROM View_SalInvHDAmt WHERE RefCode='H' AND SalId IN(SELECT SalId FROM RptSELECTedBills (NOLOCK) WHERE UsrId=@Pi_UsrId)
						) H --ON SI.SalId = H.SalId
						WHERE D.SalId =E.SalId AND E.SalId=F.SalId AND F.SalId=G.SalId AND G.SalId=H.SalId
												
					)HDAmt ON SalesInv.SalIdHD = HDAmt.SalId
				) RepHD
				LEFT OUTER JOIN
				(
					SELECT SalesInvPrd.*,LiAmt.*,LNUOM.*,BATPRC.MRP,BATPRC.[Selling Rate]
					FROM
					(
						SELECT SPR.*,C.CmpCode,C.CmpName,C.Address1,C.Address2,C.Address3,C.PhoneNumber,C.FaxNumber,
						C.EmailId,C.ContactPerson
						FROM
						(
							SELECT SIP.PrdGrossAmountAftEdit,SIP.PrdNetAmount,SIP.SalId SalIdDt,SIP.SlNo,SIP.PrdId,P.PrdCCode,PrdDcode,
							P.PrdName,P.PrdShrtName,P.CmpId,P.PrdType,SIP.PrdBatId,PB.PrdBatCode,PB.MnfDate,PB.ExpDate,P.EANCode,
							U1.UomDescription Uom1Id,SIP.Uom1Qty,U2.UomDescription Uom2Id,SIP.Uom2Qty,SIP.BaseQty,
							SIP.DrugBatchDesc,SIP.SalManFreeQty,ISNULL(SPO.Points,0) Points,SIP.PriceId,BPT.Tax1Perc,BPT.Tax2Perc,
							BPT.Tax3Perc,BPT.Tax4Perc,BPT.Tax5Perc,BPT.Tax1Amount,BPT.Tax2Amount,BPT.Tax3Amount,BPT.Tax4Amount,BPT.Tax5Amount
							FROM #SalesInvoiceProduct SIP WITH (NOLOCK)
							LEFT OUTER JOIN BillPrintTaxTemp BPT WITH (NOLOCK) ON SIP.SalId=BPT.SalID AND SIP.PrdId=BPT.PrdId AND SIP.PrdBatId=BPT.PrdBatId AND BPT.UsrId=@Pi_UsrId
							INNER JOIN  RptSELECTedBills E WITH (NOLOCK) ON SIP.SalId=E.SalId
							INNER JOIN Product P WITH (NOLOCK) ON SIP.PRdID = P.PrdId
							INNER JOIN ProductBatch PB WITH (NOLOCK) ON SIP.PrdBatId = PB.PrdBatId
							INNER JOIN UomMaster U1 WITH (NOLOCK) ON SIP.Uom1Id = U1.UomId
							LEFT OUTER JOIN UomMaster U2 WITH (NOLOCK) ON SIP.Uom2Id = U2.UomId
							LEFT OUTER JOIN
							(
								SELECT LW.SalId,LW.RowId,LW.SchId,LW.slabId,LW.PrdId, LW.PrdBatId, PO.Points
								FROM SalesInvoiceSchemeLineWise LW WITH (NOLOCK)
								INNER JOIN  RptSELECTedBills E WITH (NOLOCK) ON LW.SalId=E.SalId
								LEFT OUTER JOIN SalesInvoiceSchemeDtpoints PO WITH (NOLOCK) ON LW.SalId = PO.SalId
								AND LW.SchId = PO.SchId AND LW.SlabId = PO.SlabId
								WHERE E.UsrId=@Pi_UsrId
							) SPO ON SIP.SalId = SPO.SalId AND SIP.SlNo = SPO.RowId AND
							SIP.PrdId = SPO.PrdId AND SIP.PrdBatId = SPO.PrdBatId
							WHERE E.UsrId=@Pi_UsrId --.SalId IN (SELECT SalId FROM RptSELECTedBills (NOLOCK) WHERE UsrId=@Pi_UsrId) 
						) SPR
						INNER JOIN Company C WITH (NOLOCK) ON SPR.CmpId = C.CmpId
						UNION ALL
						SELECT SPR.*,0 Points,0 Tax1Perc,0 Tax2Perc,0 Tax3Perc,0 Tax4Perc,0 Tax5Perc,0 Tax1Amount,0 Tax2Amount,0 Tax3Amount,0 Tax@Pi_UsrIdAmount,
						0 Tax5Amount,C.CmpCode,C.CmpName,C.Address1,C.Address2,C.Address3,C.PhoneNumber,C.FaxNumber,C.EmailId,C.ContactPerson
						FROM
						(
							SELECT 0 PrdGrossAmountAftEdit,0 PrdNetAmount,SIP.SalId SalIdDt,0 SlNo,SIP.FreePrdId PrdId,P.PrdCCode,PrdDcode,P.PrdName,
							P.PrdShrtName,P.CmpId,P.PrdType,SIP.FreePrdBatId PrdBatId,PB.PrdBatCode,PB.MnfDate,PB.ExpDate,'' AS EANCode,
							'0' UOM1,'0' Uom1Qty,'0' UOM2,'0' Uom2Qty,SIP.FreeQty BaseQty,'0' DrugBatchDesc,'0' SalManFreeQty,SIP.FreePriceId AS PriceId
							FROM SalesInvoiceSchemeDtFreePrd SIP WITH (NOLOCK)
							INNER JOIN  RptSELECTedBills E WITH (NOLOCK) ON SIP.SalId=E.SalId
							INNER JOIN Product P WITH (NOLOCK) ON SIP.FreePRdID = P.PrdId
							INNER JOIN ProductBatch PB WITH (NOLOCK) ON SIP.FreePrdBatId = PB.PrdBatId
							WHERE E.UsrId=@Pi_UsrId
						) SPR INNER JOIN Company C WITH (NOLOCK) ON SPR.CmpId = C.CmpId
						UNION ALL
						SELECT SPR.*,0 AS Points,0 Tax1Perc,0 Tax2Perc,0 Tax3Perc,0 Tax4Perc,0 Tax5Perc,0 Tax1Amount,0 Tax2Amount,0 Tax3Amount,
						0 Tax@Pi_UsrIdAmount,0 Tax5Amount,C.CmpCode,C.CmpName,C.Address1,C.Address2,C.Address3,C.PhoneNumber,C.FaxNumber,C.EmailId,C.ContactPerson
						FROM
						(
							SELECT 0 PrdGrossAmountAftEdit,0 PrdNetAmount,SIP.SalId SalIdDt,0 SlNo,SIP.GiftPrdId PrdId,P.PrdCCode,PrdDcode,P.PrdName,
							P.PrdShrtName,P.CmpId,P.PrdType,SIP.GiftPrdBatId PrdBatId,PB.PrdBatCode,PB.MnfDate,PB.ExpDate,'' AS EANCode,
							'0' UOM1,'0' Uom1Qty,'0' UOM2,'0' Uom2Qty,SIP.GiftQty BaseQty,'0' DrugBatchDesc,'0' SalManFreeQty,SIP.GiftPriceId AS PriceId
							FROM SalesInvoiceSchemeDtFreePrd SIP WITH (NOLOCK)
							INNER JOIN  RptSELECTedBills E WITH (NOLOCK) ON SIP.SalId=E.SalId
							INNER JOIN Product P WITH (NOLOCK) ON SIP.GiftPRdID = P.PrdId
							INNER JOIN ProductBatch PB WITH (NOLOCK) ON SIP.GiftPrdBatId = PB.PrdBatId
							WHERE E.UsrId=@Pi_UsrId
						) SPR INNER JOIN Company C ON SPR.CmpId = C.CmpId
					)SalesInvPrd
					LEFT OUTER JOIN
					(
						SELECT DISTINCT SI.SalId SalId1,ISNULL(SI.SlNo,0) SlNo1,SI.PRdId PrdId1,SI.PRdBatId PRdBatId1,
						ISNULL(D.LineUnitAmount,0) AS [Spl. Disc_UnitAmt_Dt], ISNULL(D.Amount,0) AS [Spl. Disc_Amount_Dt],
						ISNULL(D.LineUom1Amount,0) AS [Spl. Disc_UomAmt_Dt], ISNULL(D.LineUnitPerc,0) AS [Spl. Disc_UnitPerc_Dt],
						ISNULL(D.LineBaseQtyPerc,0) AS [Spl. Disc_QtyPerc_Dt], ISNULL(D.LineUom1Perc,0) AS [Spl. Disc_UomPerc_Dt],
						ISNULL(D.LineEffectAmount,0) AS [Spl. Disc_EffectAmt_Dt], ISNULL(E.LineUnitAmount,0) AS [Sch Disc_UnitAmt_Dt],
						ISNULL(E.Amount,0) AS [Sch Disc_Amount_Dt], ISNULL(E.LineUom1Amount,0) AS [Sch Disc_UomAmt_Dt],
						ISNULL(E.LineUnitPerc,0) AS [Sch Disc_UnitPerc_Dt], ISNULL(E.LineBaseQtyPerc,0) AS [Sch Disc_QtyPerc_Dt],
						ISNULL(E.LineUom1Perc,0) AS [Sch Disc_UomPerc_Dt], ISNULL(E.LineEffectAmount,0) AS [Sch Disc_EffectAmt_Dt],
						ISNULL(F.LineUnitAmount,0) AS [DB Disc_UnitAmt_Dt], ISNULL(F.Amount,0) AS [DB Disc_Amount_Dt],
						ISNULL(F.LineUom1Amount,0) AS [DB Disc_UomAmt_Dt], ISNULL(F.LineUnitPerc,0) AS [DB Disc_UnitPerc_Dt],
						ISNULL(F.LineBaseQtyPerc,0) AS [DB Disc_QtyPerc_Dt], ISNULL(F.LineUom1Perc,0) AS [DB Disc_UomPerc_Dt],
						ISNULL(F.LineEffectAmount,0) AS [DB Disc_EffectAmt_Dt], ISNULL(G.LineUnitAmount,0) AS [CD Disc_UnitAmt_Dt],
						ISNULL(G.Amount,0) AS [CD Disc_Amount_Dt], ISNULL(G.LineUom1Amount,0) AS [CD Disc_UomAmt_Dt],
						ISNULL(G.LineUnitPerc,0) AS [CD Disc_UnitPerc_Dt], ISNULL(G.LineBaseQtyPerc,0) AS [CD Disc_QtyPerc_Dt],
						ISNULL(G.LineUom1Perc,0) AS [CD Disc_UomPerc_Dt], ISNULL(G.LineEffectAmount,0) AS [CD Disc_EffectAmt_Dt],
						ISNULL(H.LineUnitAmount,0) AS [Tax Amt_UnitAmt_Dt], ISNULL(H.Amount,0) AS [Tax Amt_Amount_Dt],
						ISNULL(H.LineUom1Amount,0) AS [Tax Amt_UomAmt_Dt], ISNULL(H.LineUnitPerc,0) AS [Tax Amt_UnitPerc_Dt],
						ISNULL(H.LineBaseQtyPerc,0) AS [Tax Amt_QtyPerc_Dt], ISNULL(H.LineUom1Perc,0) AS [Tax Amt_UomPerc_Dt],
						ISNULL(H.LineEffectAmount,0) AS [Tax Amt_EffectAmt_Dt]
						FROM #SalesInvoiceProduct SI WITH (NOLOCK)
						INNER JOIN  RptSELECTedBills E1 WITH (NOLOCK) ON SI.SalId=E1.SalId,
						--INNER JOIN -- Comment by Boopathy on 02-11-2011 for taking long time to generate
						--(
						--	SELECT SalId,PrdSlNo,LineUnitAmount,LineBaseQtyAmount AS Amount,LineUom1Amount,LineUnitPerc,LineBaseQtyPerc,LineUom1Perc,
						--	LineEffectAmount FROM View_SalInvLineAmt WHERE RefCode='D' AND SalId IN(SELECT SalId FROM RptSELECTedBills (NOLOCK) WHERE UsrId=@Pi_UsrId)
						--) D ON SI.SalId = D.SalId AND SI.SlNo = D.PrdSlNo
						--INNER JOIN
						--(
						--	SELECT SalId,PrdSlNo,LineUnitAmount,LineBaseQtyAmount AS Amount,LineUom1Amount,LineUnitPerc,LineBaseQtyPerc,LineUom1Perc,
						--	LineEffectAmount FROM View_SalInvLineAmt WHERE RefCode='E' AND SalId IN(SELECT SalId FROM RptSELECTedBills (NOLOCK) WHERE UsrId=@Pi_UsrId)
						--) E ON SI.SalId = E.SalId AND SI.SlNo = E.PrdSlNo
						--INNER JOIN
						--(
						--	SELECT SalId,PrdSlNo,LineUnitAmount,LineBaseQtyAmount AS Amount,LineUom1Amount,LineUnitPerc,LineBaseQtyPerc,LineUom1Perc,
						--	LineEffectAmount FROM View_SalInvLineAmt WHERE RefCode='F' AND SalId IN(SELECT SalId FROM RptSELECTedBills (NOLOCK) WHERE UsrId=@Pi_UsrId)
						--) F ON SI.SalId = F.SalId AND SI.SlNo = F.PrdSlNo
						--INNER JOIN
						--(
						--	SELECT SalId,PrdSlNo,LineUnitAmount,LineBaseQtyAmount AS Amount,LineUom1Amount,LineUnitPerc,LineBaseQtyPerc,LineUom1Perc,
						--	LineEffectAmount FROM View_SalInvLineAmt WHERE RefCode='G' AND SalId IN(SELECT SalId FROM RptSELECTedBills (NOLOCK) WHERE UsrId=@Pi_UsrId)
						--) G ON SI.SalId = G.SalId AND SI.SlNo = G.PrdSlNo
						--INNER JOIN
						--(
						--	SELECT SalId,PrdSlNo,LineUnitAmount,LineBaseQtyAmount AS Amount,LineUom1Amount,LineUnitPerc,LineBaseQtyPerc,LineUom1Perc,
						--	LineEffectAmount FROM View_SalInvLineAmt WHERE RefCode='H'AND SalId IN(SELECT SalId FROM RptSELECTedBills (NOLOCK) WHERE UsrId=@Pi_UsrId)
						--) H ON SI.SalId = H.SalId AND SI.SlNo = H.PrdSlNo
						--INNER JOIN
						(
							SELECT SalId,PrdSlNo,LineUnitAmount,LineBaseQtyAmount AS Amount,LineUom1Amount,LineUnitPerc,LineBaseQtyPerc,LineUom1Perc,
							LineEffectAmount FROM View_SalInvLineAmt WHERE RefCode='D' AND SalId IN(SELECT SalId FROM RptSELECTedBills (NOLOCK) WHERE UsrId=@Pi_UsrId)
						) D,-- ON SI.SalId = D.SalId AND SI.SlNo = D.PrdSlNo
						--INNER JOIN
						(
							SELECT SalId,PrdSlNo,LineUnitAmount,LineBaseQtyAmount AS Amount,LineUom1Amount,LineUnitPerc,LineBaseQtyPerc,LineUom1Perc,
							LineEffectAmount FROM View_SalInvLineAmt WHERE RefCode='E' AND SalId IN(SELECT SalId FROM RptSELECTedBills (NOLOCK) WHERE UsrId=@Pi_UsrId)
						) E ,--ON SI.SalId = E.SalId AND SI.SlNo = E.PrdSlNo
						--INNER JOIN
						(
							SELECT SalId,PrdSlNo,LineUnitAmount,LineBaseQtyAmount AS Amount,LineUom1Amount,LineUnitPerc,LineBaseQtyPerc,LineUom1Perc,
							LineEffectAmount FROM View_SalInvLineAmt WHERE RefCode='F' AND SalId IN(SELECT SalId FROM RptSELECTedBills (NOLOCK) WHERE UsrId=@Pi_UsrId)
						) F ,--ON SI.SalId = F.SalId AND SI.SlNo = F.PrdSlNo
						--INNER JOIN
						(
							SELECT SalId,PrdSlNo,LineUnitAmount,LineBaseQtyAmount AS Amount,LineUom1Amount,LineUnitPerc,LineBaseQtyPerc,LineUom1Perc,
							LineEffectAmount FROM View_SalInvLineAmt WHERE RefCode='G' AND SalId IN(SELECT SalId FROM RptSELECTedBills (NOLOCK) WHERE UsrId=@Pi_UsrId)
						) G ,--ON SI.SalId = G.SalId AND SI.SlNo = G.PrdSlNo
						--INNER JOIN
						(
							SELECT SalId,PrdSlNo,LineUnitAmount,LineBaseQtyAmount AS Amount,LineUom1Amount,LineUnitPerc,LineBaseQtyPerc,LineUom1Perc,
							LineEffectAmount FROM View_SalInvLineAmt WHERE RefCode='H'AND SalId IN(SELECT SalId FROM RptSELECTedBills (NOLOCK) WHERE UsrId=@Pi_UsrId)
						) H --ON SI.SalId = H.SalId AND SI.SlNo = H.PrdSlNo						
						WHERE SI.SalId=D.SalId AND E1.UsrId=@Pi_UsrId AND D.SalId =E.SalId AND E.SalId=F.SalId AND F.SalId=G.SalId AND G.SalId=H.SalId
						AND SI.SlNo = D.PrdSlNo AND D.PrdSlNo=E.PrdSlNo AND E.PrdSlNo=F.PrdSlNo AND F.PrdSlNo=G.PrdSlNo AND G.PrdSlNo=H.PrdSlNo
						
					) LiAmt  ON SalesInvPrd.SalIdDt = LiAmt.SalId1 AND SalesInvPrd.PrdId = LiAmt.PrdId1 AND
					SalesInvPrd.PrdBatId = LiAmt.PRdBatId1 AND SalesInvPrd.SlNo = LiAmt.SlNo1
					LEFT OUTER JOIN
					(
						SELECT E1.SalId SalId2,SlNo PrdSlNo2,0 LineUnitPerc,0 AS LineBaseQtyPerc,0 LineUom1Perc,Prduom1selrate LineUnitAmount,
						(Prduom1selrate * BaseQty)  LineBaseQtyAmount,PrdUom1EditedSelRate LineUom1Amount, 0 LineEffectAmount
						FROM #SalesInvoiceProduct WITH (NOLOCK) INNER JOIN  RptSELECTedBills E1 WITH (NOLOCK) ON #SalesInvoiceProduct.SalId=E1.SalId
						WHERE E1.UsrId=@Pi_UsrId
					) LNUOM  ON SalesInvPrd.SalIdDt = LNUOM.SalId2 AND SalesInvPrd.SlNo = LNUOM.PrdSlNo2
					LEFT OUTER JOIN
					(
						SELECT DISTINCT MRP.PrdId,MRP.PrdBatId,MRP.BatchSeqId,MRP.MRP,SelRtr.[Selling Rate],MRP.PriceId
						FROM
						(
							SELECT E1.SalId,PB.PrdId,PB.PrdBatId,PBV.BatchSeqId, PBV.PrdBatDetailValue 'MRP',PBV.PriceId
							FROM 
							#SalesInvoiceProduct SI WITH (NOLOCK) INNER JOIN  RptSELECTedBills E1 WITH (NOLOCK) ON SI.SalId=E1.SalId,
							ProductBatch PB WITH (NOLOCK),BatchCreation BC WITH (NOLOCK), ProductBatchDetails PBV WITH (NOLOCK)
							WHERE PBV.BatchSeqId = BC.BatchSeqId AND PBV.PrdBatId = PB.PrdBatId AND PBV.SLNo = BC.SlNo AND (MRP = 1 )
							AND SI.PrdId=PB.PrdId AND SI.PrdBatId=PB.PrdBatId AND SI.PriceId=PBV.PriceId AND E1.UsrId=@Pi_UsrId
						) MRP
						INNER JOIN
						(
							SELECT E1.SalId,PB.PrdId,PB.PrdBatId,PBV.BatchSeqId, PBV.PrdBatDetailValue 'Selling Rate',PBV.PriceId
							FROM 
							#SalesInvoiceProduct SI WITH (NOLOCK) INNER JOIN  RptSELECTedBills E1 WITH (NOLOCK) ON SI.SalId=E1.SalId,
							ProductBatch PB  WITH (NOLOCK), BatchCreation BC WITH (NOLOCK), ProductBatchDetails PBV WITH (NOLOCK)
							WHERE PBV.BatchSeqId = BC.BatchSeqId AND PBV.PrdBatId = PB.PrdBatId AND PBV.SLNo = BC.SlNo AND (SelRte= 1 )
							AND SI.PrdId=PB.PrdId AND SI.PrdBatId=PB.PrdBatId AND SI.PriceId=PBV.PriceId AND E1.UsrId=@Pi_UsrId
						) SelRtr ON MRP.PrdId = SelRtr.PrdId AND SelRtr.SalId=MRP.SalId
						AND MRP.PrdBatId = SelRtr.PrdBatId AND MRP.BatchSeqId = SelRtr.BatchSeqId AND MRP.PriceId=SelRtr.PriceId
					) BATPRC ON SalesInvPrd.PrdId = BATPRC.PrdId AND SalesInvPrd.PrdBatId = BATPRC.PrdBatId AND BATPRC.PriceId=SalesInvPrd.PriceId
				) RepDt ON RepHd.SalIdHd = RepDt.SalIdDt
			) RepAll
		) FinalSI  INNER JOIN RptSELECTedBills B (NOLOCK) ON B.SalId=FinalSI.SalId WHERE UsrId=@Pi_UsrId
	END
	
	
	UPDATE @RptBillTemplate set [Allotment No]=V.AllotmentNumber from @RptBillTemplate R inner join VehicleAllocationDetails V on R.[Sales Invoice Number]=V.SaleInvNo
	
	UPDATE @RptBillTemplate set [Bx Selling Rate]=PrdBatDetailValue*ConversionFactor from @RptBillTemplate R inner join 
	(SELECT PrdCCode,pb.PrdBatCode,PBD.PrdBatDetailValue,uG.ConversionFactor from Product P inner join ProductBatch PB on P.PrdId=PB.PrdId
	INNER JOIN ProductBatchDetails PBD on PBD.PrdBatId=PB.PrdBatId and PBD.DefaultPrice=1 and SLNo=3
	INNER JOIN UomGroup UG on P.UomGroupId=UG.UomGroupId and UOMId=1)A	
	on R.[Batch Code]=A.PrdBatCode AND R.[Product Code]=PrdCCode
	
	IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[RptBTBillTemplate]')
	AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
--	DROP TABLE [RptBTBillTemplate]
	BEGIN
		DELETE FROM RptBTBillTemplate WHERE UsrId=@Pi_UsrId
		INSERT INTO RptBTBillTemplate
		SELECT DISTINCT *  FROM @RptBillTemplate WHERE UsrId=@Pi_UsrId
	END
	ELSE
	BEGIN
		SELECT DISTINCT * INTO RptBTBillTemplate FROM @RptBillTemplate WHERE UsrId=@Pi_UsrId
	END
END
GO
UPDATE A SET A.Status=1 FROM DataBaseBackupConfiguration A (NOLOCK) WHERE ModuleId='AUTOBACKUP_DIFF2'
GO
UPDATE UtilityProcess SET VersionId = 'AD.0.0.1' WHERE ProcessName = 'Auto Deployment.exe'
GO
UPDATE UtilityProcess SET VersionId = '3.1.0.21' WHERE ProcId = 1 AND ProcessName = 'Core Stocky.Exe'
GO
DELETE FROM AppTitle
INSERT INTO AppTitle (TitleName,SynVersion)
SELECT 'Core Stocky 3.1.0.21',443
GO
IF NOT EXISTS (SELECT * FROM Hotfixlog WHERE fixid = 443)
INSERT INTO Hotfixlog(fixid,fixtype,releasedon,fixedon,fixedby,errorsfixed) 
VALUES(443,'D','2020-08-06',GETDATE(),1,'Core Stocky Service Pack 443')
GO
EXEC sp_configure 'show advanced options', 1;
GO
RECONFIGURE;
GO
EXEC sp_configure 'xp_cmdshell', 1;
GO
RECONFIGURE;
GO