--[Stocky HotFix Version]=432
DELETE FROM Versioncontrol WHERE Hotfixid='432'
INSERT INTO VersionControl(HotFixId,VersionNo,FixType,FixedOn,HotFixReleasedOn,VersionReleasedOn,ReplacedOn,ChangesDone) 
VALUES('432','3.1.0.9','D','2017-07-01','2017-07-01','2017-07-01',CONVERT(VARCHAR(11),GETDATE()),'Product Version-Major: Product GST Developments CR')
GO
/*
	--> GST Developments
	/*
		ITC Report 
		GRN Tracking in Billing/SalesReturn/StockJournal
		STate Master Screen
		Service Master Screen
		ServiceTaxGroup Download
		Transaction Screen Display Tax Details
	TABLE
		TransactionWiseGrnTracking
		VatClosingStock
		BilledPrdGRNTrack
		ServiceTaxGroupMaster
		ServiceTaxGroupSetting
		GSSTMonthEndDetails
		Gst_FieldLevelConfiguration
	DOWNLOAD 	
		Cn2Cs_Prk_ServiceTaxSetting
	UPLOAD
		Cs2Cn_Prk_InputTaxCreditReport
	FUNCTION
		Fn_ReturnServiceMasterDetails
		Fn_ReturnStateMasterDetails
		FN_CheckForGstEnabled
		Fn_ReturnTaxError
		FN_RETURN_ITC_Report
		FN_ReturnGstWelcomeMsg
	PROCEDURE
		 Proc_ComputeITCReport
		 Proc_UpdatePurchaseStock
		 Proc_InvoiceWiseGrnTrack
		 Proc_DisplayTaxDetails
		 Proc_CheckForGstTransaction
		 Proc_CS2CN_InputTaxCreditReport	
		 
		 From Updater --> Proc_AutoBatchTransfer_Parle,Proc_ValidateRetailerMaster,Proc_GetStockLedgerSummaryDatewiseParle,Proc_ClosingStock,
					  --Proc_GR_EffectiveCoverageAnalysis,Proc_ApplyQPSSchemeInBill,Proc_Cs2Cn_Retailer_Reupload,Proc_LoadingInstitutionsTarget 
	*/
*/
DECLARE @dbName AS NVARCHAR(200)
SELECT @dbName=DB_NAME()
IF EXISTS(SELECT NAME from sys.databases where name=@dbName and compatibility_level=80)
BEGIN
	EXEC sp_dbcmptlevel @dbName, 90
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Tbl_DownloadIntegration_BEFOREGST' AND xtype='U')
BEGIN
	SELECT * INTO Tbl_DownloadIntegration_BEFOREGST FROM Tbl_DownloadIntegration
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Tbl_UploadIntegration_BEFOREGST' AND xtype='U')
BEGIN
	SELECT * INTO Tbl_UploadIntegration_BEFOREGST FROM Tbl_UploadIntegration
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='CustomUpdownload_BEFOREGST' AND xtype='U')
BEGIN
	SELECT * INTO CustomUpdownload_BEFOREGST FROM CustomUpdownload
END
GO
DELETE FROM Tbl_DownloadIntegration 
INSERT INTO Tbl_DownloadIntegration([SequenceNo],[ProcessName],[PrkTableName],[SPName],[TRowCount],[SelectCount],[CreatedDate]) 
SELECT 1,'GSTConfiguration','Cn2Cs_Prk_GSTConfiguration','Proc_Import_GSTConfiguration',0,500,CONVERT(VARCHAR(10),GETDATE(),121) UNION ALL
SELECT 2,'StateMaster','Cn2Cs_Prk_StateMaster','Proc_Import_StateMaster',0,500,CONVERT(VARCHAR(10),GETDATE(),121) UNION ALL
SELECT 3,'Hierarchy Level','Cn2Cs_Prk_HierarchyLevel','Proc_Import_HierarchyLevel',0,500,'2011-03-22' UNION ALL
SELECT 4,'Hierarchy Level Value','Cn2Cs_Prk_HierarchyLevelValue','Proc_Import_HierarchyLevelValue',0,500,'2011-03-22' UNION ALL
SELECT 5,'Retailer Hierarchy','Cn2Cs_Prk_BLRetailerCategoryLevelValue','Proc_ImportBLRtrCategoryLevelValue',0,500,'2011-03-22' UNION ALL
SELECT 6,'Retailer Classification','Cn2Cs_Prk_BLRetailerValueClass','Proc_ImportBLRetailerValueClass',0,500,'2011-03-22' UNION ALL
SELECT 7,'Prefix Master','Cn2Cs_Prk_PrefixMaster','Proc_Import_PrefixMaster',0,500,'2011-03-22' UNION ALL
SELECT 8,'Retailer Approval','Cn2Cs_Prk_RetailerApproval','Proc_Import_RetailerApproval',0,500,'2011-03-22' UNION ALL
SELECT 9,'UOM','Cn2Cs_Prk_BLUOM','Proc_ImportBLUOM',0,500,'2011-03-22' UNION ALL
SELECT 10,'Tax Configuration Group Setting','Etl_Prk_TaxConfig_GroupSetting','Proc_ImportTaxMaster',0,500,'2011-03-22' UNION ALL
SELECT 11,'Tax Settings','Etl_Prk_TaxSetting','Proc_ImportTaxConfigGroupSetting',0,500,'2011-03-22' UNION ALL
SELECT 12,'Product Hierarchy Change','Cn2Cs_Prk_BLProductHiereachyChange','Proc_ImportBLProductHiereachyChange',0,500,'2011-03-22' UNION ALL
SELECT 13,'Product','Cn2Cs_Prk_Product','Proc_Import_Product',0,500,'2011-03-22' UNION ALL
SELECT 14,'Product Batch','Cn2Cs_Prk_ProductBatch','Proc_Import_ProductBatch',0,200,'2011-03-22' UNION ALL
SELECT 15,'Product Batch GST','Cn2Cs_Prk_ProductBatch_GST','Proc_Import_ProductBatch_GST',0,200,'2012-05-24' UNION ALL
SELECT 16,'Product Tax Mapping GST','ETL_Prk_TaxMapping_GST','Proc_ImportTaxGrpMapping_GST',0,500,'2012-06-28' UNION ALL
SELECT 17,'Product Tax Mapping','Etl_Prk_TaxMapping','Proc_ImportTaxGrpMapping',0,500,'2011-03-22' UNION ALL
SELECT 18,'Special Rate','Cn2Cs_Prk_SpecialRate','Proc_Import_SpecialRate',0,500,'2011-03-22' UNION ALL
SELECT 19,'Scheme Header Slabs Rules','Etl_Prk_SchemeHD_Slabs_Rules','Proc_ImportSchemeHD_Slabs_Rules',0,100,'2011-03-22' UNION ALL
SELECT 20,'Scheme Products','Etl_Prk_SchemeProducts_Combi','Proc_ImportSchemeProducts_Combi',0,100,'2011-03-22' UNION ALL
SELECT 21,'Scheme Attributes','Etl_Prk_Scheme_OnAttributes','Proc_ImportScheme_OnAttributes',0,100,'2011-03-22' UNION ALL
SELECT 22,'Scheme Free Products','Etl_Prk_Scheme_Free_Multi_Products','Proc_ImportScheme_Free_Multi_Products',0,100,'2011-03-22' UNION ALL
SELECT 23,'Scheme On Another Product','Etl_Prk_Scheme_OnAnotherPrd','Proc_ImportScheme_OnAnotherPrd',0,100,'2011-03-22' UNION ALL
SELECT 24,'Scheme Retailer Validation','Etl_Prk_Scheme_RetailerLevelValid','Proc_ImportScheme_RetailerLevelValid',0,100,'2011-03-22' UNION ALL
SELECT 25,'Purchase','Cn2Cs_Prk_BLPurchaseReceipt','Proc_ImportBLPurchaseReceipt',0,500,'2011-03-22' UNION ALL
SELECT 26,'Purchase Receipt Mapping','Cn2Cs_Prk_PurchaseReceiptMapping','Proc_Import_PurchaseReceiptMapping',0,500,'2011-03-22' UNION ALL
SELECT 27,'Scheme Master Control','Cn2Cs_Prk_NVSchemeMasterControl','Proc_ImportNVSchemeMasterControl',0,500,'2011-03-22' UNION ALL
SELECT 28,'Claim Norm','Cn2Cs_Prk_ClaimNorm','Proc_Import_ClaimNorm',0,500,'2011-03-22' UNION ALL
SELECT 28,'Reason Master','Cn2Cs_Prk_ReasonMaster','Proc_Import_ReasonMaster',0,500,'2011-03-22' UNION ALL
SELECT 30,'Bulletin Board','Cn2Cs_Prk_BulletinBoard','Proc_Import_BulletinBoard',0,500,'2011-03-22' UNION ALL
SELECT 31,'ERP Product Mapping','Cn2Cs_Prk_ERPPrdCCodeMapping','Proc_Import_ERPPrdCCodeMapping',0,500,'2011-03-22' UNION ALL
SELECT 32,'Configuration','Cn2Cs_Prk_Configuration','Proc_Import_Configuration',0,500,'2011-03-22' UNION ALL
SELECT 33,'Claim Settlement','Cn2Cs_Prk_ClaimSettlementDetails','Proc_Import_ClaimSettlementDetails',0,500,'2011-03-22' UNION ALL
SELECT 34,'Cluster Master','Cn2Cs_Prk_ClusterMaster','Proc_Import_ClusterMaster',0,100,'2011-03-22' UNION ALL
SELECT 35,'Cluster Group','Cn2Cs_Prk_ClusterGroup','Proc_Import_ClusterGroup',0,100,'2011-03-22' UNION ALL
SELECT 36,'Cluster Assign Approval','Cn2Cs_Prk_ClusterAssignApproval','Proc_Import_ClusterAssignApproval',0,100,'2011-03-22' UNION ALL
SELECT 37,'SupplierMaster','Cn2Cs_Prk_SupplierMaster','Proc_Import_SupplierMaster',0,100,'2011-03-22' UNION ALL
SELECT 38,'UDC Master','Cn2Cs_Prk_UDCMaster','Proc_Import_UDCMaster',0,500,'2011-03-22' UNION ALL
SELECT 39,'UDC Details','Cn2Cs_Prk_UDCDetails','Proc_Import_UDCDetails',0,500,'2011-03-22' UNION ALL
SELECT 40,'UDC Defaults','Cn2Cs_Prk_UDCDefaults','Proc_Import_UDCDefaults',0,500,'2011-03-22' UNION ALL
SELECT 41,'Retailer Migration','Cn2Cs_Prk_RetailerMigration','Proc_Import_RetailerMigration',0,500,'2011-03-22' UNION ALL
SELECT 42,'Points Rules Header','Cn2Cs_Prk_PointsRulesHeader','Proc_Import_PointsRulesHeader',0,100,'2011-03-22' UNION ALL
SELECT 43,'Points Rules Retailer','Cn2Cs_Prk_PointsRulesRetailer','Proc_Import_PointsRulesRetailer',0,100,'2011-03-22' UNION ALL
SELECT 44,'Points Rules Slab','CN2CS_Prk_PointsRulesSlab','Proc_Import_PointsRulesSlab',0,100,'2011-03-22' UNION ALL
SELECT 45,'Points Rules Slab Product','Cn2Cs_Prk_PointsRulesProduct','Proc_Import_PointsRulesSlabProduct',0,100,'2011-03-22' UNION ALL
SELECT 46,'ReUpload','Cn2Cs_Prk_ReUpload','Proc_Import_ReUpload',0,500,'2011-03-22' UNION ALL
SELECT 47,'Purchase Receipt Adjustments','Cn2Cs_Prk_PurchaseReceiptAdjustments','Proc_Import_PurchaseReceiptAdjustments',0,100,'2011-03-22' UNION ALL
SELECT 48,'Village Master','Cn2Cs_Prk_VillageMaster','Proc_Import_VillageMaster',0,100,'2011-03-22' UNION ALL
SELECT 49,'Scheme Payout','Cn2Cs_Prk_SchemePayout','Proc_Import_SchemePayout',0,100,'2011-03-22' UNION ALL
SELECT 50,'KitItem','Cn2Cs_Prk_KitProducts','Proc_ImportKitProduct',0,500,'2015-11-30' UNION ALL
SELECT 51,'SupplierCreditNote','ETL_Prk_CreditNoteSupplier','Proc_ImportCreditNoteSupplier',0,500,'2015-11-30' UNION ALL
SELECT 52,'SupplierDebitNote','ETL_Prk_DebitNoteSupplier','Proc_ImportDebitNoteSupplier',0,500,'2015-11-30' UNION ALL
SELECT 53,'MarketIntelligence','Cn2Cs_Prk_MarketIntelligenceHD','Proc_ImportMarketIntelligenceHD',0,500,'2015-11-30' UNION ALL
SELECT 54,'MarketIntelligenceDT','Cn2Cs_Prk_MarketIntelligenceDT','Proc_ImportMarketIntelligenceDT',0,500,'2015-11-30' UNION ALL
SELECT 55,'ProductUnification','CN2CS_Prk_ProductCodeUnification','Proc_Import_ProductCodeUnification',0,500,'2015-11-30' UNION ALL
SELECT 56,'Purchase With Location Code','CN2CS_Prk_PurchaseWithLocationCode','Proc_Import_PurchaseWithLocationCode',0,500,'2015-11-30' UNION ALL
SELECT 57,'SpecialDiscount','Cn2Cs_Prk_SpecialDiscount','Proc_Import_SpecialDiscount',0,500,'2015-11-30' UNION ALL
SELECT 58,'Bulletin Board Status','CN2CS_PRK_BulletinBoardStatus','PROC_IMPORT_BulletinBoardStatus',0,500,'2015-11-30' UNION ALL
SELECT 59,'KitProductCategory','Cn2Cs_Prk_KitItemRetailerCategory','Proc_Import_KitProductCategory',0,500,'2016-03-23' UNION ALL
SELECT 60,'Target Setting','Cn2Cs_Prk_InstitutionsTargetSetting','Proc_Import_InstitutionsTargetSetting',0,500,'2017-01-03' UNION ALL
SELECT 61,'InstitutionsTargetAchievement','Cn2Cs_Prk_InstitutionsTargetAchievement','Proc_Import_InstitutionsTargetAchievement',0,500,'2017-01-03' UNION ALL
SELECT 62,'RetailerCreditNote','Cn2Cs_Prk_RetailerCreditNote','Proc_Import_RetailerCreditNote',0,500,'2017-01-03' UNION ALL
SELECT 63,'SFAProductAlliasName','Cn2cs_Prk_ProductAlliasName','Proc_Import_SFAproductAlliasName',0,500,'2017-04-07' UNION ALL
SELECT 64,'DistributorInfo','Cn2Cs_Prk_DistributorInfo','Proc_Import_DistributorInfo',0,500,'2017-04-19' UNION ALL
SELECT 65,'ServiceTaxSetting','Cn2Cs_Prk_ServiceTaxSetting','Proc_Import_ServiceTaxSetting',0,500,GETDATE() UNION ALL
SELECT 66,'ServiceMaster','Cn2Cs_Prk_ServiceMaster','Proc_Import_ServiceMaster',0,500,'2017-04-19' UNION ALL
SELECT 67,'Product HSN','Cn2Cs_Prk_ProductHSNCode','Proc_Import_ProductHSNCode',0,500,'2017-04-19' UNION ALL
SELECT 68,'RetailerGST','Cn2Cs_Prk_RetailerGST','Proc_Import_RetailerGST',0,500,'2017-04-12' UNION ALL
SELECT 69,'PurchaseReturn_GST','Cn2Cs_Prk_PurchaseReturn','Proc_Import_PurchaseReturn',0,500,GETDATE()UNION ALL
SELECT 70,'ServiceClaimGroup','Cn2Cs_Prk_ServiceClaimGroup','Proc_Import_ServiceClaimGroup',0,500,getdate() UNION ALL
SELECT 71,'PurchaseinvSeriesDtGST','Cn2CS_Prk_PurchaseinvSeriesDtGST','Proc_Import_PurchaseinvSeriesDtGST',0,500,GETDATE() UNION ALL
SELECT 72,'BillSeriesDtUpdationGST','Cn2CS_Prk_BillSeriesDtUpdationGST','Proc_Import_BillSeriesDtUpdationGST',0,500,GETDATE() UNION ALL
SELECT 73,'CompanyCountersUpdationGST','Cn2CS_Prk_CompanyCountersUpdationGST','Proc_Import_CompanyCountersUpdationGST',0,500,GETDATE() UNION ALL
SELECT 74,'CountersUpdationGST','Cn2CS_Prk_CountersUpdationGST','Proc_Import_CountersUpdationGST',0,500,GETDATE() UNION ALL
SELECT 75,'ServiceInvoiceApproval','Cn2Cs_Prk_ServiceInvoiceApproval','',0,500,GETDATE()
GO
DELETE FROM CustomUpdownload WHERE UpDownload='Download'
INSERT INTO CustomUpdownload([SlNo],[SeqNo],[Module],[Screen],[ExportFnName],[ImportProcName],[ParkTable],[ValidateProcName],[TranType],[UpDownload],[MandatoryFile])
SELECT 201,1,'GSTConfiguration','GSTConfiguration','','Proc_Import_GSTConfiguration','Cn2Cs_Prk_GSTConfiguration','Proc_Cn2Cs_GSTConfiguration','Master','Download',1 UNION ALL
SELECT 202,1,'StateMaster','StateMaster','','Proc_Import_StateMaster','Cn2Cs_Prk_StateMaster','Proc_Cn2Cs_StateMaster','Master','Download',1 UNION ALL
SELECT 203,1,'Hierarchy Level','Hieararchy Level','Proc_Cs2Cn_HierarchyLevel','Proc_Import_HierarchyLevel','Cn2Cs_Prk_HierarchyLevel','Proc_Cn2Cs_HierarchyLevel','Master','Download',1 UNION ALL
SELECT 204,1,'Hierarchy Level Value','Hieararchy Level Value','Proc_Cs2Cn_HierarchyLevelValue','Proc_Import_HierarchyLevelValue','Cn2Cs_Prk_HierarchyLevelValue','Proc_Cn2Cs_HierarchyLevelValue','Master','Download',1 UNION ALL
SELECT 205,1,'Retailer Category Level Value','Retailer Category Level Value','Proc_CS2CNBLRetailerCategoryLevelValue','Proc_ImportBLRtrCategoryLevelValue','Cn2Cs_Prk_BLRetailerCategoryLevelValue','Proc_Cn2Cs_BLRetailerCategoryLevelValue','Master','Download',1 UNION ALL
SELECT 206,1,'Retailer Value Classification','Retailer Value Classification','Proc_CS2CNBLRetailerValueClass','Proc_ImportBLRetailerValueClass','Cn2Cs_Prk_BLRetailerValueClass','Proc_Cn2Cs_BLRetailerValueClass','Master','Download',1 UNION ALL
SELECT 207,1,'Prefix Master','Prefix Master','Proc_Cs2Cn_PrefixMaster','Proc_Import_PrefixMaster','Cn2Cs_Prk_PrefixMaster','Proc_Cn2Cs_PrefixMaster','Master','Download',1 UNION ALL
SELECT 208,1,'Retailer Aproval','Retailer Approval','Proc_Cs2Cn_RetailerApproval','Proc_Import_RetailerApproval','Cn2Cs_Prk_RetailerApproval','Proc_Cn2Cs_RetailerApproval','Master','Download',0 UNION ALL
SELECT 209,1,'UOM','UOM','Proc_Cn2Cs_BLUOM','Proc_ImportBLUOM','Cn2Cs_Prk_BLUOM','Proc_Cn2Cs_BLUOM','Master','Download',1 UNION ALL
SELECT 210,1,'Tax Configuration','Tax Configuration','Proc_ValidateTaxConfig_Group','Proc_ImportTaxMaster','Etl_Prk_TaxConfig_GroupSetting','Proc_ValidateTaxConfig_Group','Master','Download',1 UNION ALL
SELECT 211,1,'Tax Setting','Tax Setting','Proc_CN2CS_TaxSetting','Proc_ImportTaxConfigGroupSetting','Etl_Prk_TaxSetting','Proc_CN2CS_TaxSetting','Master','Download',1 UNION ALL
SELECT 212,1,'Product Hierarchy Change','Product Hierarchy Change','Proc_CS2CNBLProductHierarchyChange','Proc_ImportBLProductHiereachyChange','Cn2Cs_Prk_BLProductHiereachyChange','Proc_Cn2Cs_BLProductHiereachyChange','Master','Download',1 UNION ALL
SELECT 213,1,'Product','Product','Proc_Cs2Cn_Product','Proc_Import_Product','Cn2Cs_Prk_Product','Proc_Cn2Cs_Product','Master','Download',1 UNION ALL
SELECT 214,1,'Product Batch','Product Batch','Proc_Cs2Cn_ProductBatch','Proc_Import_ProductBatch','Cn2Cs_Prk_ProductBatch','Proc_Cn2Cs_ProductBatch','Master','Download',1 UNION ALL
SELECT 215,1,'Product Batch GST','Product Batch GST','Proc_Cs2Cn_ProductBatch','Proc_Import_ProductBatch_GST','Cn2Cs_Prk_ProductBatch_GST','Proc_Cn2Cs_ProductBatch_GST','Master','Download',1 UNION ALL
SELECT 216,1,'Tax Group Mapping','Tax Group Mapping','Proc_ValidateTaxMapping','Proc_ImportTaxGrpMapping','Etl_Prk_TaxMapping','Proc_ValidateTaxMapping','Master','Download',1 UNION ALL
SELECT 217,1,'Product Tax Mapping GST','Product Tax Mapping GST','Proc_ValidateTaxMapping_GST','Proc_ImportTaxGrpMapping_GST','ETL_Prk_TaxMapping_GST','Proc_ValidateTaxMapping_GST','Master','Download',1 union all
SELECT 218,1,'Special Rate','Special Rate','Proc_Cs2Cn_SpecialRate','Proc_Import_SpecialRate','Cn2Cs_Prk_SpecialRate','Proc_Cn2Cs_SpecialRate','Master','Download',1 UNION ALL
SELECT 219,1,'Cluster Master','Cluster Master','Proc_Cs2Cn_ClusterMaster','Proc_Import_ClusterMaster','Cn2Cs_Prk_ClusterMaster','Proc_Cn2Cs_ClusterMaster','Master','Download',1 UNION ALL
SELECT 220,1,'Cluster Group','Cluster Group','Proc_Cs2Cn_ClusterGroup','Proc_Import_ClusterGroup','Cn2Cs_Prk_ClusterGroup','Proc_Cn2Cs_ClusterGroup','Master','Download',1 UNION ALL
SELECT 221,1,'Scheme','Scheme Master','Proc_CS2CNBLSchemeMaster','Proc_ImportBLSchemeMaster','Etl_Prk_SchemeHD_Slabs_Rules','Proc_CN2CS_BLSchemeMaster','Transaction','Download',1 UNION ALL
SELECT 221,2,'Scheme','Scheme Attributes','Proc_CS2CNBLSchemeAttributes','Proc_ImportBLSchemeAttributes','Etl_Prk_Scheme_OnAttributes','Proc_CN2CS_BLSchemeAttributes','Transaction','Download',1 UNION ALL
SELECT 221,3,'Scheme','Scheme Products','Proc_CS2CNBLSchemeProducts','Proc_ImportBLSchemeProducts','Etl_Prk_SchemeProducts_Combi','Proc_CN2CS_BLSchemeProducts','Transaction','Download',1 UNION ALL
SELECT 221,4,'Scheme','Scheme Slabs','Proc_CS2CNBLSchemeSlab','Proc_ImportBLSchemeSlab','Etl_Prk_SchemeHD_Slabs_Rules','Proc_CN2CS_BLSchemeSlab','Transaction','Download',1 UNION ALL
SELECT 221,5,'Scheme','Scheme Rule Setting','Proc_CS2CNBLSchemeRulesetting','Proc_ImportBLSchemeRulesetting','Etl_Prk_SchemeHD_Slabs_Rules','Proc_CN2CS_BLSchemeRulesetting','Transaction','Download',0 UNION ALL
SELECT 221,6,'Scheme','Scheme Free Products','Proc_CS2CNBLSchemeFreeProducts','Proc_ImportBLSchemeFreeProducts','Etl_Prk_Scheme_Free_Multi_Products','Proc_CN2CS_BLSchemeFreeProducts','Transaction','Download',0 UNION ALL
SELECT 221,7,'Scheme','Scheme Combi Products','Proc_CS2CNBLSchemeCombiPrd','Proc_ImportBLSchemeCombiPrd','Etl_Prk_SchemeProducts_Combi','Proc_CN2CS_BLSchemeCombiPrd','Transaction','Download',0 UNION ALL
SELECT 221,8,'Scheme','Scheme On Another Product','Proc_CS2CNBLSchemeOnAnotherPrd','Proc_ImportBLSchemeOnAnotherPrd','Etl_Prk_Scheme_OnAnotherPrd','Proc_CN2CS_BLSchemeOnAnotherPrd','Transaction','Download',0 UNION ALL
SELECT 222,1,'Scheme Master Control','Scheme Master Control','Proc_CS2CNNVSchemeMasterControl','Proc_ImportNVSchemeMasterControl','Cn2Cs_Prk_NVSchemeMasterControl','Proc_Cn2Cs_NVSchemeMasterControl','Master','Download',1 UNION ALL
SELECT 223,1,'Claim Settlement','Claim Settlement','Proc_Cs2Cn_ClaimSettlementDetails','Proc_Import_ClaimSettlementDetails','Cn2Cs_Prk_ClaimSettlementDetails','Proc_Cn2Cs_ClaimSettlementDetails','Transaction','Download',1 UNION ALL
SELECT 224,1,'SupplierCreditNote','SupplierCreditNote','Proc_ValidateCreditNoteSupplier','Proc_ImportCreditNoteSupplier','ETL_Prk_CreditNoteSupplier','Proc_ValidateCreditNoteSupplier','Master','Download',1 UNION ALL
SELECT 225,1,'SupplierDebitNote','SupplierDebitNote','Proc_ValidateDebitNoteSupplier','Proc_ImportDebitNoteSupplier','ETL_Prk_DebitNoteSupplier','Proc_ValidateDebitNoteSupplier','Master','Download',1 UNION ALL
SELECT 226,1,'Supplier','Supplier','Proc_Cs2Cn_SupplierMaster','Proc_Import_SupplierMaster','Cn2Cs_Prk_SupplierMaster','Proc_Cn2Cs_SupplierMaster','Master','Download',1 UNION ALL
SELECT 227,1,'Purchase Receipt','Purchase Receipt','Proc_Cs2Cn_PurchaseReceipt','Proc_ImportBLPurchaseReceipt','Cn2Cs_Prk_BLPurchaseReceipt','Proc_Cn2Cs_PurchaseReceipt','Transaction','Download',1 UNION ALL
SELECT 228,1,'Purchase Receipt Mapping','Purchase Receipt Mapping','Proc_Cs2Cn_PurchaseReceiptMapping','Proc_Import_PurchaseReceiptMapping','Cn2Cs_Prk_PurchaseReceiptMapping','Proc_Cn2Cs_PurchaseReceiptMapping','Transaction','Download',1 UNION ALL
SELECT 229,1,'Claim Norm Mapping','Claim Norm Mapping','Proc_Cs2Cn_ClaimNorm','Proc_Import_ClaimNorm','Cn2Cs_Prk_ClaimNorm','Proc_Cn2Cs_ClaimNorm','Master','Download',1 UNION ALL
SELECT 230,1,'Reason Master','Reason Master','Proc_Cs2Cn_ReasonMaster','Proc_Import_ReasonMaster','Cn2Cs_Prk_ReasonMaster','Proc_Cn2Cs_ReasonMaster','Master','Download',1 UNION ALL
SELECT 231,1,'Bulletin Board','BulletingBoard','Proc_Cs2Cn_BulletinBoard','Proc_Import_BulletinBoard','Cn2Cs_Prk_BulletinBoard','Proc_Cn2Cs_BulletinBoard','Master','Download',1 UNION ALL
SELECT 232,1,'ERP Product Mapping','ERP Product Mapping','Proc_Cs2Cn_ERPPrdCCodeMapping','Proc_Import_ERPPrdCCodeMapping','Cn2Cs_Prk_ERPPrdCCodeMapping','Proc_Cn2Cs_ERPPrdCCodeMapping','Transaction','Download',1 UNION ALL
SELECT 233,1,'Configuration','Configuration','Proc_Cs2Cn_Configuration','Proc_Import_Configuration','Cn2Cs_Prk_Configuration','Proc_Cn2Cs_Configuration','Master','Download',1 UNION ALL
SELECT 234,1,'Cluster Assign Approval','Cluster Assign Approval','Proc_Cs2Cn_ClusterAssignApproval','Proc_Import_ClusterAssignApproval','Cn2Cs_Prk_ClusterAssignApproval','Proc_Cn2Cs_ClusterAssignApproval','Master','Download',1 UNION ALL
SELECT 235,1,'UDC Master','UDC Master','Proc_Cs2Cn_UDCMaster','Proc_Import_UDCMaster','Cn2Cs_Prk_UDCMaster','Proc_Cn2Cs_UDCMaster','Master','Download',1 UNION ALL
SELECT 236,1,'UDC Details','UDC Details','Proc_Cs2Cn_UDCDetailss','Proc_Import_UDCDetails','Cn2Cs_Prk_UDCDetails','Proc_Cn2Cs_UDCDetails','Master','Download',1 UNION ALL
SELECT 237,1,'UDC Defaults','UDC Defaults','Proc_Cs2Cn_UDCDefaults','Proc_Import_UDCDefaults','Cn2Cs_Prk_UDCDefaults','Proc_Cn2Cs_UDCDefaults','Master','Download',1 UNION ALL
SELECT 238,1,'Retailer Migration','Retailer Migration','Proc_Cs2Cn_RetailerMigration','Proc_Import_RetailerMigration','Cn2Cs_Prk_RetailerMigration','Proc_Cn2Cs_RetailerMigration','Master','Download',1 UNION ALL
SELECT 239,1,'Point Redemption Rules','Point Redemption Rules','Proc_Cs2Cn_PointsRulesSetting','Proc_Import_PointsRulesSetting','Cn2Cs_Prk_PointsRulesHeader','Proc_Cn2Cs_PointsRulesSetting','Master','Download',1 UNION ALL
SELECT 240,1,'Village Master','Village Master','Proc_Cs2Cn_VillageMaster','Proc_Import_VillageMaster','Cn2Cs_Prk_VillageMaster','Proc_Cn2Cs_Dummy','Master','Download',1 UNION ALL
SELECT 241,1,'Scheme Payout','Scheme Payout','Proc_Cs2Cn_SchemePayout','Proc_Import_SchemePayout','Cn2Cs_Prk_SchemePayout','Proc_Cn2Cs_SchemePayout','Transaction','Download',1 UNION ALL
SELECT 242,1,'ReUpload','ReUpload','Proc_Cs2Cn_ReUpload','Proc_Import_ReUpload','Cn2Cs_Prk_ReUpload','Proc_Cn2Cs_ReUpload','Transaction','Download',1 UNION ALL
SELECT 243,1,'KitItem','KitItem','Proc_Cn2Cs_KitProduct','Proc_ImportKitProduct','Cn2Cs_Prk_KitProducts','Proc_Cn2Cs_KitProduct','Master','Download',1 UNION ALL
SELECT 244,1,'MarketIntelligence','MarketIntelligence','','Proc_ImportMarketIntelligenceHD','Cn2Cs_Prk_MarketIntelligenceHD','Proc_ValidatetMarketIntelligenceHD','Master','Download',1 UNION ALL
SELECT 245,1,'MarketIntelligenceDT','MarketIntelligenceDT','','Proc_ImportMarketIntelligenceDT','Cn2Cs_Prk_MarketIntelligenceDT','Proc_ValidatetMarketIntelligenceDT','Master','Download',1 UNION ALL
SELECT 246,1,'ProductUnification','ProductUnification','Proc_CN2CS_ProductCodeUnification','','CN2CS_Prk_ProductCodeUnification','Proc_CN2CS_ProductCodeUnification','Transaction','Download',1 UNION ALL
SELECT 247,1,'Purchase With Location Code','Purchase With Location Code','Proc_CN2CS_PurchaseWithLocationCode','Proc_Import_PurchaseWithLocationCode','CN2CS_Prk_PurchaseWithLocationCode','Proc_CN2CS_PurchaseWithLocationCode','Transaction','Download',1 UNION ALL
SELECT 248,1,'SpecialDiscount','SpecialDiscount','Proc_Cn2Cs_SpecialDiscount','Proc_Import_SpecialDiscount','Cn2Cs_Prk_SpecialDiscount','Proc_Cn2Cs_SpecialDiscount','Master','Download',1 UNION ALL
SELECT 249,1,'Scheme Flag Change','Scheme Flag Change','Proc_CN2CS_BLSchemeFlagChange','','Etl_Prk_SchemeHD_Slabs_Rules','Proc_CN2CS_BLSchemeFlagChange','Master','Download',1 UNION ALL
SELECT 250,1,'Bulletin Board Status','Bulletin Board Status','','PROC_IMPORT_BulletinBoardStatus','CN2CS_PRK_BulletinBoardStatus','PROC_VALIDATE_BulletinBoardStatus','Master','Download',1 UNION ALL
SELECT 251,1,'KitProductCategory','KitProductCategory','','Proc_Import_KitProductCategory','Cn2Cs_Prk_KitItemRetailerCategory','Proc_ValiDate_KitProductCategory','Master','Download',1 UNION ALL
SELECT 252,1,'Target Setting','Target Setting','','Proc_Import_InstitutionsTargetSetting','Cn2Cs_Prk_InstitutionsTargetSetting','Proc_Validate_InstitutionsTargetSetting','Master','Download',1 UNION ALL
SELECT 253,1,'InstitutionsTargetAchievement','InstitutionsTargetAchievement','','Proc_Import_InstitutionsTargetAchievement','Cn2Cs_Prk_InstitutionsTargetAchievement','Proc_Cn2Cs_InstitutionsTargetAchievement','Transaction','Download',0 UNION ALL
SELECT 254,1,'RetailerCreditNote','RetailerCreditNote','','Proc_Import_RetailerCreditNote','Cn2Cs_Prk_RetailerCreditNote','Proc_Cn2Cs_RetailerCreditNote','Master','Download',0 UNION ALL
SELECT 255,1,'SFAProductAlliasName','SFAProductAlliasName','','Proc_Import_SFAproductAlliasName','Cn2cs_Prk_ProductAlliasName','Proc_Cn2cs_ProductAlliasName','Master','Download',0 UNION ALL
SELECT 256,1,'DistributorInfo','DistributorInfo','','Proc_Import_DistributorInfo','Cn2Cs_Prk_DistributorInfo','Proc_Cn2Cs_DistributorInfo','Master','Download',1 UNION ALL
SELECT 257,1,'ServiceTaxSetting','ServiceTaxSetting','','Proc_Import_ServiceTaxSetting','Cn2Cs_Prk_ServiceTaxSetting','Proc_Cn2Cs_Prk_ServiceTaxSetting','Transaction','Download',1 UNION ALL
SELECT 258,1,'ServiceMaster','ServiceMaster','','Proc_Import_ServiceMaster','Cn2Cs_Prk_ServiceMaster','Proc_Cn2Cs_ServiceMaster','Master','Download',1 UNION ALL
SELECT 259,1,'Product HSN','Product HSN','','Proc_Import_ProductHSNCode','Cn2Cs_Prk_ProductHSNCode','Proc_Cn2Cs_ProductHSNCode','Master','Download',1 UNION ALL
SELECT 260,1,'RetailerGST','RetailerGST','','Proc_Import_RetailerGST','Cn2Cs_Prk_RetailerGST','Proc_Cn2Cs_RetailerGST','Master','Download',1 UNION ALL
SELECT 261,1,'PurchaseReturn_GST','PurchaseReturn_GST','','Proc_Import_PurchaseReturn','Cn2Cs_Prk_PurchaseReturn','Proc_Cn2Cs_PurchaseReturn','Transaction','Download',1  UNION ALL
SELECT 262,1,'ServiceClaimGroup','ServiceClaimGroup','','Proc_Import_ServiceClaimGroup','Cn2Cs_Prk_ServiceClaimGroup','Proc_Cn2Cs_ServiceClaimGroup','Master','Download',1 UNION ALL
SELECT 263,1,'PurchaseinvSeriesDtGST','PurchaseinvSeriesDtGST','','Proc_Import_PurchaseinvSeriesDtGST','Cn2CS_Prk_PurchaseinvSeriesDtGST','Proc_Cn2Cs_PurchaseinvSeriesDtGST','Master','Download',1 UNION ALL
SELECT 264,1,'BillSeriesDtUpdationGST','BillSeriesDtUpdationGST','','Proc_Import_BillSeriesDtUpdationGST','Cn2CS_Prk_BillSeriesDtUpdationGST','Proc_Cn2Cs_BillSeriesDtUpdationGST','Master','Download',1 UNION ALL
SELECT 265,1,'CompanyCountersUpdationGST','CompanyCountersUpdationGST','','Proc_Import_CompanyCountersUpdationGST','Cn2CS_Prk_CompanyCountersUpdationGST','Proc_Cn2Cs_CompanyCountersUpdationGST','Master','Download',1 UNION ALL
SELECT 266,1,'CountersUpdationGST','CountersUpdationGST','','Proc_Import_CountersUpdationGST','Cn2CS_Prk_CountersUpdationGST','Proc_Cn2Cs_CountersUpdationGST','Master','Download',1 UNION ALL
SELECT 267,1,'ServiceInvoiceApproval','ServiceInvoiceApproval','','Proc_Import_ServiceInvoiceApproval','Cn2Cs_Prk_ServiceInvoiceApproval','Proc_Cn2Cs_ServiceInvoiceApproval','Master','Download',1
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='ManualConfiguration' AND XTYPE='U')
CREATE TABLE ManualConfiguration
(
	[ProjectName] [nvarchar](50) NOT NULL,
	[ModuleId] [nvarchar](50) NOT NULL,
	[ModuleName] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](300) NOT NULL,
	[Status] [tinyint] NOT NULL,
	[Condition] [nvarchar](4000) NULL,
	[ConfigValue] [numeric](18, 2) NULL,
	[SeqNo] [int] NOT NULL
)
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='VATDefaultSupplierGST' and xtype='U')
BEGIN
CREATE TABLE VATDefaultSupplierGST
(
	SpmId	INT,
	TaxGroupId	INT,
	CreatedDate	DATETIME,
	FOREIGN KEY(SpmId) REFERENCES Supplier(SpmId)
)
END
GO
IF NOT EXISTS(SELECT * FROM VATDefaultSupplierGST(NOLOCK))
BEGIN
	IF EXISTS(SELECT '*' FROM Supplier WHERE ISNULL(TaxGroupId,0)<>0)
	BEGIN
		DECLARE @SpmId AS INT
		DECLARE @TaxGroupId AS INT
		SET @SpmId=0
		SET @TaxGroupId=0
		SELECT @SpmId=MAX(ISNULL(SpmId,0)) FROM Supplier WHERE ISNULL(TaxGroupId,0)<>0
		SELECT @TaxGroupId=TaxGroupId FROM Supplier WHERE SpmId=@SpmId

		INSERT INTO VATDefaultSupplierGST(SpmId,TaxGroupId,CreatedDate)
		SELECT @SpmId,@TaxGroupId,GETDATE()
		
	END
END
GO
IF NOT EXISTS (SELECT 'X' FROM  ManualConfiguration WHERE PROJECTNAME='GST' AND ModuleId='BILL_EDIT1' AND MODULENAME='BILLING')
BEGIN
INSERT INTO ManualConfiguration
SELECT 'GST','BILL_EDIT1','BILLING','Block Editing of Billing Once Bill Print is Taken',0,'',0.00,1
END
GO
DELETE FROM MANUALCONFIGURATION WHERE ProjectName='GST' AND ModuleId='SAL_RETURN1' AND ModuleName='Sales Return'
INSERT INTO MANUALCONFIGURATION(ProjectName,ModuleId,ModuleName,Description,Status,Condition,ConfigValue,SeqNo)
SELECT 'GST','SAL_RETURN1','Sales Return','Tax Submission Month for Sales Return',1,'',09,1
GO
DELETE FROM MANUALCONFIGURATION WHERE ProjectName='GST' AND ModuleId='SAL_RETURN2' AND ModuleName='Sales Return'
INSERT INTO MANUALCONFIGURATION(ProjectName,ModuleId,ModuleName,Description,Status,Condition,ConfigValue,SeqNo)
SELECT 'GST','SAL_RETURN2','Sales Return','Block With Reference in MultiInvoice Option',1,'',0,1
GO
DELETE FROM MANUALCONFIGURATION WHERE ProjectName='GST' and ModuleId='SAL_RETURN3'
INSERT INTO MANUALCONFIGURATION(ProjectName,ModuleId,ModuleName,Description,Status,Condition,ConfigValue,SeqNo)
SELECT 'GST','SAL_RETURN3','Sales Return','Enable Without Referenece ',1,'',0,1
GO
DELETE FROM MANUALCONFIGURATION WHERE ProjectName='GST' and ModuleId='SAL_RETURN4'
INSERT INTO MANUALCONFIGURATION(ProjectName,ModuleId,ModuleName,Description,Status,Condition,ConfigValue,SeqNo)
SELECT 'GST','SAL_RETURN4','Sales Return','Without Refrence Tax applicable',0,'',0,1
GO
DELETE FROM MANUALCONFIGURATION WHERE ProjectName='GST' and ModuleId='SAL_RETURN5'
INSERT INTO MANUALCONFIGURATION(ProjectName,ModuleId,ModuleName,Description,Status,Condition,ConfigValue,SeqNo)
SELECT 'GST','SAL_RETURN5','Sales Return','Selling Rate Edit',0,'',0,1
GO
IF NOT EXISTS(SELECT '*' FROM ManualConfiguration WHERE PROJECTNAME='GST' AND ModuleId='REPLACEMENT1' AND MODULENAME='CreditNoteReplacement')
BEGIN
INSERT INTO ManualConfiguration([ProjectName],[ModuleId],[ModuleName],[Description],[Status],[Condition],[ConfigValue],[SeqNo])
SELECT 'GST','REPLACEMENT1','CreditNoteReplacement','Block Repalcement in CreditNoteReplacement',0,'',0.00,1
END
GO
DELETE FROM ManualConfiguration WHERE ProjectName='GST' and ModuleId='TAXALERT'
INSERT INTO ManualConfiguration(ProjectName,ModuleId,ModuleName,Description,Status,Condition,ConfigValue,SeqNo)
SELECT 'GST','TAXALERT','TaxGroup','GST Tax Group Alert',1,'','0.00',1
GO
DELETE FROM MANUALCONFIGURATION WHERE MODULEID IN ('BlockRcvdQtyDownloadPO','BlockRcvdQtyManualPO') and ProjectName='GST'
INSERT INTO MANUALCONFIGURATION(ProjectName,ModuleId,ModuleName,Description,Status,Condition,ConfigValue,SeqNo)
SELECT 'GST','BlockRcvdQtyDownloadPO','Purchase Receipt','Block Received Qty for Downloaded Purchase after GST',1,'',0.00,1 UNION ALL
SELECT 'GST','BlockRcvdQtyManualPO','Purchase Receipt','Block Received Qty for Manual Purchase after GST',0,'',0.00,1
GO
IF NOT EXISTS(SELECT * FROM ManualConfiguration WHERE PROJECTNAME='GST' AND ModuleId='BILL_EDIT2' AND MODULENAME='BillSeriesSetting')
BEGIN
	INSERT INTO ManualConfiguration(ProjectName,ModuleId,ModuleName,Description,Status,Condition,ConfigValue,SeqNo)
	SELECT 'GST','BILL_EDIT2','BillSeriesSetting','Distributor Code Added in Bill series Prefix',0,'MT',5.00,2
END
GO
IF NOT EXISTS(SELECT * FROM ManualConfiguration WHERE PROJECTNAME='GST' AND ModuleId='ReturnHeader' AND MODULENAME='ReturnCode')
BEGIN
	INSERT INTO ManualConfiguration([ProjectName],[ModuleId],[ModuleName],[Description],[Status],[Condition],[ConfigValue],[SeqNo])
	Select 'GST','ReturnHeader','ReturnCode','Distributor Code Added in Slaes Return',0,'MT',5.00,3
END
GO
IF NOT EXISTS(SELECT * FROM ManualConfiguration WHERE PROJECTNAME='GST' AND ModuleId='ClaimSheetHD' AND MODULENAME='ClmCode')
BEGIN
	INSERT INTO ManualConfiguration([ProjectName],[ModuleId],[ModuleName],[Description],[Status],[Condition],[ConfigValue],[SeqNo])
	Select 'GST','ClaimSheetHD','ClmCode','Distributor Code Added in Claim Sheet HD',0,'MT',5.00,4 
END
GO
IF NOT EXISTS(SELECT * FROM ManualConfiguration WHERE PROJECTNAME='GST' AND ModuleId='PurchaseReturn' AND MODULENAME='PurRetRefNo')
BEGIN
	INSERT INTO ManualConfiguration([ProjectName],[ModuleId],[ModuleName],[Description],[Status],[Condition],[ConfigValue],[SeqNo])
	Select 'GST','PurchaseReturn','PurRetRefNo','Distributor Code Added in Purchase Return',0,'MT',5.00,5
END
GO
IF NOT EXISTS(SELECT '*' FROM ManualConfiguration WHERE PROJECTNAME='GST' AND ModuleId='BILL_EDIT3' AND MODULENAME='BillSeriesSetting')
BEGIN
	INSERT INTO ManualConfiguration([ProjectName],[ModuleId],[ModuleName],[Description],[Status],[Condition],[ConfigValue],[SeqNo])
	SELECT 'GST','BILL_EDIT3','BillSeriesSetting','Bill Series curr value reset',0,'',0.00,2
END
GO
IF EXISTS(SELECT B.* FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.id=B.ID 
WHERE A.NAME='UDCDetails' AND B.name='ColumnValue' AND B.LENGTH<'100')
BEGIN
	ALTER TABLE UDCDetails ALTER COLUMN ColumnValue VARCHAR(100)
END
GO
IF NOT EXISTS(SELECT SS.NAME FROM SYSOBJECTS S INNER JOIN SYSCOLUMNS SS ON S.id=SS.id WHERE S.XTYPE='U' and SS.NAME='TaxType' and S.NAME='TaxSettingMaster')
BEGIN
	ALTER TABLE TaxSettingMaster ADD TaxType Varchar(20) DEFAULT '' WITH VALUES
END
GO
IF NOT EXISTS(SELECT SS.NAME FROM SYSOBJECTS S INNER JOIN SYSCOLUMNS SS ON S.id=SS.id WHERE S.XTYPE='U' and SS.NAME='EffectiveFrom' and S.NAME='TaxSettingMaster')
BEGIN
	ALTER TABLE TaxSettingMaster ADD EffectiveFrom DATETIME 
END
GO
IF NOT EXISTS(SELECT SS.NAME FROM SYSOBJECTS S INNER JOIN SYSCOLUMNS SS ON S.id=SS.id WHERE S.XTYPE='U' and SS.NAME='Status' and S.NAME='TaxSettingMaster')
BEGIN
	ALTER TABLE TaxSettingMaster ADD Status TinyInt  DEFAULT 0 WITH VALUES
END
GO
UPDATE TaxSettingMaster SET TaxType='VAT' WHERE LEN(ISNULL(TaxType,''))=0
GO
UPDATE TaxSettingMaster SET Status=1 WHERE TaxType='VAT'
GO
UPDATE TaxSettingMaster SET EffectiveFrom=SequenceDate where EffectiveFrom IS NULL 
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='ProductBatchVATTaxB4GST' and xtype='U')
BEGIN
CREATE TABLE ProductBatchVATTaxB4GST
(
	PrdId				BIGINT NOT NULL,
	PrdBatId			BIGINT NOT NULL,
	PrdTaxGroupId		INT NOT NULL,
	BatchTaxGroupId		INT NOT NULL,
	DefaultPriceId		BIGINT NOT NULL,
	CreatedDate			DATETIME,
	PRIMARY KEY(PrdId,PrdBatId) 
)
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='RetailerVATTaxB4GST' and xtype='U')
BEGIN
CREATE TABLE RetailerVATTaxB4GST
(
	RtrId				BIGINT NOT NULL,	
	TaxGroupId			INT NOT NULL,
	DefaultShipId		INT,
	ShippingTaxGroupId	INT,
	CreatedDate			DATETIME,
	PRIMARY KEY(RtrId,TaxGroupId) 
)
END
GO
IF NOT EXISTS(SELECT NAME FROM SYSOBJECTS WHERE NAME='RetailerGSTTaxGroupUpdate' AND XTYPE='U')
BEGIN
CREATE TABLE RetailerGSTTaxGroupUpdate(
	[RetailerCode] [varchar](100) NULL,
	[TaxGroup] [varchar](100) NULL,
	[UpdateDateTime] [datetime] NULL,
	[UpdateFlag] [tinyint] NULL
) ON [PRIMARY]
END
GO
IF NOT EXISTS(SELECT NAME FROM SYSOBJECTS WHERE NAME='SupplierGSTTaxGroupUpdate' AND XTYPE='U')
BEGIN
CREATE TABLE SupplierGSTTaxGroupUpdate(
	[SpmCode] [varchar](100) NULL,
	[TaxGroup] [varchar](100) NULL,
	[UpdateDateTime] [datetime] NULL,
	[UpdateFlag] [tinyint] NULL
) ON [PRIMARY]
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='U' AND NAME='TaxForBilltoShipId')
DROP TABLE TaxForBilltoShipId
GO
CREATE TABLE TaxForBilltoShipId
(
	TransId INT,
	RtrId INT,
	RtrShipId INT,
	BillDate DATETIME,
	UsrId INT
)
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='U' and name='Cn2Cs_Prk_ProductBatch_GST')
DROP TABLE Cn2Cs_Prk_ProductBatch_GST
GO
CREATE TABLE [Cn2Cs_Prk_ProductBatch_GST](
	[DistCode] [nvarchar](50) NULL,
	[PrdCCode] [nvarchar](200) NULL,
	[PrdBatCode] [nvarchar](200) NULL,
	[ManufacturingDate] [datetime] NULL,
	[ExpiryDate] [datetime] NULL,
	[EffectiveDate] [datetime] NULL,
	[MRP] [numeric](38, 6) NULL,
	[ListPrice] [numeric](38, 6) NULL,
	[SellingRate] [numeric](38, 6) NULL,
	[ClaimRate] [numeric](38, 6) NULL,
	[AddRate1] [numeric](38, 6) NULL,
	[AddRate2] [numeric](38, 6) NULL,
	[AddRate3] [numeric](38, 6) NULL,
	[AddRate4] [numeric](38, 6) NULL,
	[AddRate5] [numeric](38, 6) NULL,
	[AddRate6] [numeric](38, 6) NULL,
	[DownLoadFlag] [nvarchar](10) NULL,
	[CreatedDate] [datetime] NULL
)
GO
IF NOT EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='U' AND name='ProductBatch_Temp_GST')
BEGIN
CREATE TABLE [ProductBatch_Temp_GST]
(
	[DistCode] [nvarchar](50) NULL,
	[PrdCCode] [nvarchar](200) NULL,
	[PrdBatCode] [nvarchar](200) NULL,
	[ManufacturingDate] [datetime] NULL,
	[ExpiryDate] [datetime] NULL,
	[EffectiveDate] [datetime] NULL,
	[MRP] [numeric](38, 6) NULL,
	[ListPrice] [numeric](38, 6) NULL,
	[SellingRate] [numeric](38, 6) NULL,
	[ClaimRate] [numeric](38, 6) NULL,
	[AddRate1] [numeric](38, 6) NULL,
	[AddRate2] [numeric](38, 6) NULL,
	[AddRate3] [numeric](38, 6) NULL,
	[AddRate4] [numeric](38, 6) NULL,
	[AddRate5] [numeric](38, 6) NULL,
	[AddRate6] [numeric](38, 6) NULL,
	[DownLoadFlag] [nvarchar](10) NULL,
	[BatchStkStatus] TinyInt	
)
END	
GO
IF EXISTS(SELECT B.* FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.id=B.ID 
WHERE A.NAME='TaxGroupSetting' AND B.name='RtrGroup' AND B.LENGTH<'400')
BEGIN
	ALTER TABLE TaxGroupSetting ALTER COLUMN RtrGroup NVARCHAR(200)
END
GO
IF EXISTS(SELECT B.* FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.id=B.ID 
WHERE A.NAME='TaxGroupSetting' AND B.name='PrdGroup' AND B.LENGTH<'400')
BEGIN
	ALTER TABLE TaxGroupSetting ALTER COLUMN PrdGroup NVARCHAR(200)
END
GO
IF EXISTS(SELECT B.* FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.id=B.ID 
WHERE A.NAME='TaxGroupSetting' AND B.name='TaxGroupName' AND B.LENGTH<'400')
BEGIN
	ALTER TABLE TaxGroupSetting ALTER COLUMN TaxGroupName NVARCHAR(200)
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='VATDefaultIDT' and xtype='U')
BEGIN
CREATE TABLE VATDefaultIDT
(
	SpmId	INT,
	TaxGroupId	INT,
	CreatedDate	DATETIME,
	FOREIGN KEY(SpmId) REFERENCES IDTMaster(SpmId)
)
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='VATDefaultSupplier' and xtype='U')
BEGIN
CREATE TABLE VATDefaultSupplier
(
	SpmId	INT,
	TaxGroupId	INT,
	CreatedDate	DATETIME,
	FOREIGN KEY(SpmId) REFERENCES Supplier(SpmId)
)
END
GO
IF NOT EXISTS(SELECT * FROM SYS.OBJECTS A INNER JOIN SYS.COLUMNS B ON A.object_id=B.object_id WHERE 
A.NAME='Supplier' AND B.name='VATTaxGroupId' and A.type='U')
BEGIN
	ALTER TABLE Supplier ADD VATTaxGroupId INT
END
GO
IF NOT EXISTS(SELECT * FROM SYS.OBJECTS A INNER JOIN SYS.COLUMNS B ON A.object_id=B.object_id WHERE 
A.NAME='IDTMaster' AND B.name='VATTaxGroupId' and A.type='U')
BEGIN
	ALTER TABLE IDTMaster ADD VATTaxGroupId INT
END
GO
UPDATE Supplier SET VATTaxGroupId=TaxGroupId WHERE VATTaxGroupId IS NULL
GO
UPDATE IDTMaster SET VATTaxGroupId=TaxGroupId WHERE VATTaxGroupId IS NULL
GO
IF NOT EXISTS(SELECT * FROM SYS.OBJECTS A INNER JOIN SYS.COLUMNS B ON A.object_id=B.object_id WHERE 
A.NAME='RetailerShipAdd' AND B.name='TaxGroupId' and A.type='U')
BEGIN
	ALTER TABLE RetailerShipAdd ADD TaxGroupId INT
END
GO
IF NOT EXISTS(SELECT * FROM SYS.OBJECTS A INNER JOIN SYS.COLUMNS B ON A.object_id=B.object_id WHERE 
A.NAME='RetailerShipAdd' AND B.name='StateId' and A.type='U')
BEGIN
	ALTER TABLE RetailerShipAdd ADD StateId INT
END
GO
IF NOT EXISTS(SELECT * FROM SYS.OBJECTS A INNER JOIN SYS.COLUMNS B ON A.object_id=B.object_id WHERE 
A.NAME='RetailerShipAdd' AND B.name='GSTTinNo' and A.type='U')
BEGIN
	ALTER TABLE RetailerShipAdd ADD GSTTinNo VARCHAR(100)
END
GO
IF NOT EXISTS(SELECT * FROM SYS.OBJECTS A INNER JOIN SYS.COLUMNS B ON A.object_id=B.object_id WHERE 
A.NAME='RetailerShipAdd' AND B.name='Upload' and A.type='U')
BEGIN
	ALTER TABLE RetailerShipAdd ADD Upload VARCHAR(2) Default 'N' WITH VALUES
END
GO
UPDATE A SET A.TaxGroupId=B.TaxGroupId FROM RetailerShipAdd A (NOLOCK) 
INNER JOIN Retailer B (NOLOCK) ON A.RtrId=B.RtrId
WHERE ISNULL(A.TaxGroupId,0)=0
GO
UPDATE RetailerShipAdd SET StateId=0 WHERE ISNULL(StateId,0)=0
GO
UPDATE RetailerShipAdd SET GSTTinNo='' WHERE ISNULL(GSTTinNo,'')=''
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE name='ServiceTaxGroupMaster' AND XTYPE='U')
CREATE TABLE ServiceTaxGroupMaster
(
	ServiceGroupId		INT PRIMARY KEY,		
	ServiceGroupCode	VARCHAR(100),
	Availability		TINYINT,
	LastModBy			TINYINT,
	LastModDate			DATETIME,
	AuthId				TINYINT,
	AuthDate			DATETIME		
)
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE name='ServiceMaster' AND XTYPE='U')
BEGIN
CREATE TABLE ServiceMaster
(
	ServiceId	Int NOT NULL,
	SerCode	Varchar(100) NOT NULL,
	SerName	Varchar(100) NOT NULL,
	SerACCode	Varchar(50) NOT NULL,
	SerACName	Varchar(100) NOT NULL,
	TaxGroupId	Int NOT NULL,
	SerStatus	tinyint NOT NULL,
	Availability	TinyInt,
	LastModBy	TinyInt,
	LastModDate	Datetime,
	AuthId	TinyInt,
	AuthDate	 Datetime,
	CONSTRAINT PK_StateMaster_ServiceId PRIMARY KEY CLUSTERED (ServiceId)
)
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE name='Cn2Cs_Prk_ServiceMaster' AND XTYPE='U')
DROP TABLE Cn2Cs_Prk_ServiceMaster
GO
CREATE TABLE Cn2Cs_Prk_ServiceMaster
(
	DistCode 	[nvarchar](100) NULL,
	SerCode		Varchar(100) NOT NULL,
	SerName		Varchar(100) NOT NULL,
	SerACCode	Varchar(50) NOT NULL,
	SerACName	Varchar(100) NOT NULL,
	TaxGroup	Varchar(50) NOT NULL,
	SerStatus   Varchar(50) NOT NULL,
	DownLoadFlag	 [nvarchar](10) NULL,
	CreatedDate	 [datetime] NULL
)
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE name='Cn2Cs_Prk_GSTConfiguration' AND XTYPE='U')
BEGIN
CREATE TABLE Cn2Cs_Prk_GSTConfiguration
(
	DistCode 	[nvarchar](100) NULL,
	ModuleId	[Varchar](50) NOT NULL,
	ActivationDate	 [datetime] NULL,
	ActivationStatus	 [Varchar](50) NOT NULL,
	ConsoleAcknowledgeStatus	[Varchar](10) NOT NULL,
	DownLoadFlag	 [nvarchar](10) NULL,
	CreatedDate	 [datetime] NULL
)
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE name='GSTConfiguration' AND XTYPE='U')
BEGIN
CREATE TABLE GSTConfiguration
(
	ModuleId			Varchar(50),
	Description			Varchar(200),
	ActivationDate		[datetime] NULL,
	ActivationStatus	TinyInt,
	AcknowledgeStatus	TinyInt,
	ConsoleAckStatus	TinyInt,
	DownloadActDate		Datetime,
	DownloadAcknowDate	Datetime,
	UploadFlag			Varchar(2),
	Availability		[TinyInt],
	LastModBy			[TinyInt],
	LastModDate			[Datetime],
	AuthId				[TinyInt],
	AuthDate			[Datetime]
)
END
GO
IF NOT EXISTS(SELECT * FROM GSTConfiguration)
BEGIN
INSERT INTO GSTConfiguration
(
	ModuleId,
	Description,
	ActivationDate,
	ActivationStatus,
	AcknowledgeStatus,
	ConsoleAckStatus,
	DownloadActDate,
	DownloadAcknowDate,
	UploadFlag,
	Availability,
	LastModBy,
	LastModDate,
	AuthId,
	AuthDate
)
SELECT 'GSTCONFIG','GST Configuration',CONVERT(VARCHAR(10),GETDATE(),121),
0,0,0,'1990-01-01','1990-01-01','N',1,1,Getdate(),1,GETDATE()
END
GO
IF NOT EXISTS(SELECT SS.NAME FROM SYSOBJECTS S INNER JOIN SYSCOLUMNS SS ON S.id=SS.id WHERE S.XTYPE='U' and SS.NAME='OrgNetAmount' and S.NAME='SalesInvoice')
BEGIN
	ALTER TABLE SalesInvoice ADD OrgNetAmount NUMERIC(18,6) DEFAULT 0 WITH VALUES
END
GO
IF NOT EXISTS(SELECT SS.NAME FROM SYSOBJECTS S INNER JOIN SYSCOLUMNS SS ON S.id=SS.id WHERE S.XTYPE='U' and SS.NAME='VatGst' and S.NAME='SalesInvoice')
BEGIN
	ALTER TABLE SalesInvoice ADD VatGst Varchar(20) DEFAULT 'VAT' WITH VALUES
END
GO
IF NOT EXISTS(SELECT SS.NAME FROM SYSOBJECTS S INNER JOIN SYSCOLUMNS SS ON S.id=SS.id WHERE S.XTYPE='U' and SS.NAME='BillEdit' and S.NAME='SalesInvoice')
BEGIN
	ALTER TABLE SalesInvoice ADD BillEdit INT DEFAULT 0 WITH VALUES
END
GO
IF NOT EXISTS(SELECT SS.NAME FROM SYSOBJECTS S INNER JOIN SYSCOLUMNS SS ON S.id=SS.id WHERE S.XTYPE='U' and SS.NAME='BillCopy' and S.NAME='SalesInvoice')
BEGIN
	ALTER TABLE SalesInvoice ADD BillCopy INT DEFAULT 0 WITH VALUES
END
GO
IF NOT EXISTS(SELECT SS.NAME FROM SYSOBJECTS S INNER JOIN SYSCOLUMNS SS ON S.id=SS.id WHERE S.XTYPE='U' and SS.NAME='GstUpload1' and S.NAME='SalesInvoice')
BEGIN
	ALTER TABLE SalesInvoice ADD GstUpload1 INT DEFAULT 0 WITH VALUES
END
GO
IF NOT EXISTS(SELECT SS.NAME FROM SYSOBJECTS S INNER JOIN SYSCOLUMNS SS ON S.id=SS.id WHERE S.XTYPE='U' and SS.NAME='GstUpload2' and S.NAME='SalesInvoice')
BEGIN
	ALTER TABLE SalesInvoice ADD GstUpload2 INT DEFAULT 0 WITH VALUES
END
GO
IF NOT EXISTS(SELECT SS.NAME FROM SYSOBJECTS S INNER JOIN SYSCOLUMNS SS ON S.id=SS.id WHERE S.XTYPE='U' and SS.NAME='GstUpload3' and S.NAME='SalesInvoice')
BEGIN
	ALTER TABLE SalesInvoice ADD GstUpload3 INT DEFAULT 0 WITH VALUES
END
GO
IF NOT EXISTS(SELECT SS.NAME FROM SYSOBJECTS S INNER JOIN SYSCOLUMNS SS ON S.id=SS.id WHERE S.XTYPE='U' and SS.NAME='VatGst' and S.NAME='ReturnHeader')
BEGIN
	ALTER TABLE ReturnHeader ADD VatGst Varchar(20) DEFAULT 'VAT' WITH VALUES
END
GO
IF NOT EXISTS(SELECT SS.NAME FROM SYSOBJECTS S INNER JOIN SYSCOLUMNS SS ON S.id=SS.id WHERE S.XTYPE='U' and SS.NAME='GstUpload1' and S.NAME='ReturnHeader')
BEGIN
	ALTER TABLE ReturnHeader ADD GstUpload1 INT DEFAULT 0 WITH VALUES
END
GO
IF NOT EXISTS(SELECT SS.NAME FROM SYSOBJECTS S INNER JOIN SYSCOLUMNS SS ON S.id=SS.id WHERE S.XTYPE='U' and SS.NAME='GstUpload2' and S.NAME='ReturnHeader')
BEGIN
	ALTER TABLE ReturnHeader ADD GstUpload2 INT DEFAULT 0 WITH VALUES
END
GO
IF NOT EXISTS(SELECT SS.NAME FROM SYSOBJECTS S INNER JOIN SYSCOLUMNS SS ON S.id=SS.id WHERE S.XTYPE='U' and SS.NAME='GstUpload3' and S.NAME='ReturnHeader')
BEGIN
	ALTER TABLE ReturnHeader ADD GstUpload3 INT DEFAULT 0 WITH VALUES
END
GO
IF NOT EXISTS(SELECT SS.NAME FROM SYSOBJECTS S INNER JOIN SYSCOLUMNS SS ON S.id=SS.id WHERE S.XTYPE='U' and SS.NAME='VatGst' and S.NAME='PurchaseReceipt')
BEGIN
	ALTER TABLE PurchaseReceipt ADD VatGst Varchar(20) DEFAULT 'VAT' WITH VALUES
END
GO
IF NOT EXISTS(SELECT SS.NAME FROM SYSOBJECTS S INNER JOIN SYSCOLUMNS SS ON S.id=SS.id WHERE S.XTYPE='U' and SS.NAME='GstUpload1' and S.NAME='PurchaseReceipt')
BEGIN
	ALTER TABLE PurchaseReceipt ADD GstUpload1 INT DEFAULT 0 WITH VALUES
END
GO
IF NOT EXISTS(SELECT SS.NAME FROM SYSOBJECTS S INNER JOIN SYSCOLUMNS SS ON S.id=SS.id WHERE S.XTYPE='U' and SS.NAME='GstUpload2' and S.NAME='PurchaseReceipt')
BEGIN
	ALTER TABLE PurchaseReceipt ADD GstUpload2 INT DEFAULT 0 WITH VALUES
END
GO
IF NOT EXISTS(SELECT * FROM SYSCOLUMNS WHERE NAME='BilledSalQty' AND ID IN (SELECT ID FROM SYSOBJECTS WHERE NAME='PurchaseReceiptProduct' AND XTYPE='U'))
BEGIN
	ALTER TABLE PurchaseReceiptProduct ADD BilledSalQty  NUMERIC(18,0)  DEFAULT 0 WITH VALUES
END
GO
IF NOT EXISTS(SELECT SS.NAME FROM SYSOBJECTS S INNER JOIN SYSCOLUMNS SS ON S.id=SS.id WHERE S.XTYPE='U' and SS.NAME='VatGst' and S.NAME='PurchaseReturn')
BEGIN
	ALTER TABLE PurchaseReturn ADD VatGst Varchar(20) DEFAULT 'VAT' WITH VALUES
END
GO
IF NOT EXISTS(SELECT SS.NAME FROM SYSOBJECTS S INNER JOIN SYSCOLUMNS SS ON S.id=SS.id WHERE S.XTYPE='U' and SS.NAME='GstUpload1' and S.NAME='PurchaseReturn')
BEGIN
	ALTER TABLE PurchaseReturn ADD GstUpload1 INT DEFAULT 0 WITH VALUES
END
GO
IF NOT EXISTS(SELECT SS.NAME FROM SYSOBJECTS S INNER JOIN SYSCOLUMNS SS ON S.id=SS.id WHERE S.XTYPE='U' and SS.NAME='GstUpload2' and S.NAME='PurchaseReturn')
BEGIN
	ALTER TABLE PurchaseReturn ADD GstUpload2 INT DEFAULT 0 WITH VALUES
END
GO
IF NOT EXISTS(SELECT SS.NAME FROM SYSOBJECTS S INNER JOIN SYSCOLUMNS SS ON S.id=SS.id WHERE S.XTYPE='U' and SS.NAME='OrgRetSalBaseQty' and S.NAME='PurchaseReturnProduct')
BEGIN
	ALTER TABLE PurchaseReturnProduct ADD OrgRetSalBaseQty INT DEFAULT 0 WITH VALUES
END
GO
IF NOT EXISTS(SELECT SS.NAME FROM SYSOBJECTS S INNER JOIN SYSCOLUMNS SS ON S.id=SS.id WHERE S.XTYPE='U' and SS.NAME='OrgRetUnSalBaseQty' and S.NAME='PurchaseReturnProduct')
BEGIN
	ALTER TABLE PurchaseReturnProduct ADD OrgRetUnSalBaseQty INT DEFAULT 0 WITH VALUES
END
GO
IF NOT EXISTS(SELECT * FROM SYSCOLUMNS WHERE name='OrgFreeQty' AND ID IN(SELECT ID FROM SYSOBJECTS WHERE name='PurchaseReturnClaimScheme' AND XTYPE='U'))
BEGIN
	ALTER TABLE PurchaseReturnClaimScheme ADD OrgFreeQty  INT DEFAULT 0 WITH VALUES
END
GO
IF NOT EXISTS(SELECT SS.NAME FROM SYSOBJECTS S INNER JOIN SYSCOLUMNS SS ON S.id=SS.id WHERE S.XTYPE='U' and SS.NAME='VatGst' and S.NAME='StockManagement')
BEGIN
	ALTER TABLE StockManagement ADD VatGst Varchar(20) DEFAULT 'VAT' WITH VALUES
END
GO
IF NOT EXISTS(SELECT * FROM SYSCOLUMNS WHERE NAME='ReverseCharges' AND ID IN(SELECT ID FROM SYSOBJECTS WHERE name='ReturnHeader' AND XTYPE='U'))
BEGIN
	ALTER TABLE ReturnHeader ADD ReverseCharges NUMERIC(18,6) DEFAULT 0 WITH VALUES
END
GO
IF EXISTS(SELECT 'A' FROM GSTConfiguration WHERE ActivationStatus=0)
BEGIN
	UPDATE PurchaseReturn SET GstUpload1=2
END
GO
IF NOT EXISTS(SELECT SS.NAME FROM SYSOBJECTS S INNER JOIN SYSCOLUMNS SS ON S.ID=SS.ID WHERE S.NAME='ReturnHeader' AND SS.NAME='GSTTag' and S.XTYPE='U')
BEGIN
ALTER TABLE ReturnHeader ADD GSTTag Varchar(20) DEFAULT '' WITH VALUES
END
GO
IF NOT EXISTS(SELECT SS.NAME FROM SYSOBJECTS S INNER JOIN SYSCOLUMNS SS ON S.ID=SS.ID WHERE S.NAME='ReturnProduct' AND SS.NAME='ActSalRowId' and S.XTYPE='U')
BEGIN
ALTER TABLE ReturnProduct ADD ActSalRowId INT 
END
GO
UPDATE ReturnHeader SET GSTtag='VAT' WHERE ISNULL(GSTTag,'')=''
GO
UPDATE ReturnProduct SET ActSalRowId=Slno WHERE ISNULL(ActSalRowId,0)=0
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='U' and name ='TempReturnVatInvoiceSlno')
DROP TABLE TempReturnVatInvoiceSlno
GO
CREATE TABLE TempReturnVatInvoiceSlno
(
	Salid BIGINT,
	ActRow INT,
	SpreadRow INT,
	Slno INT,
	UsrId INT
)
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='U' and name ='BilledPrdHdForTax_GST')
DROP TABLE BilledPrdHdForTax_GST
GO
CREATE TABLE [BilledPrdHdForTax_GST](
	[RowId] [int] NULL,
	[SalRowId] INT,
	[Salid] BIGINT,
	[RtrId] [int] NULL,
	[PrdId] [int] NULL,
	[PrdBatId] [int] NULL,
	[BaseQty] [int] NULL,
	[BillSeqId] [int] NULL,
	[Usrid] [int] NULL,
	[TransId] [int] NULL,
	[PriceId] [bigint] NULL
)
GO
IF NOT EXISTS(SELECT 'X' FROM Counters WHERE TabName='ReturnGSTR1' and FldName='ReturnCode')
BEGIN
INSERT INTO Counters(TabName,FldName,Prefix,Zpad,CmpId,CurrValue,ModuleName,DisplayFlag,CurYear,Availability,LastModBy,LastModDate,AuthId,AuthDate)
SELECT 'ReturnGSTR1','ReturnCode','GSTR',5,1,0,'Sales Return',1,2017,1,1,Getdate(),1,Getdate()
END
GO
IF NOT EXISTS(SELECT * FROM SYSCOLUMNS WHERE NAME='ServiceInvId' AND ID IN (SELECT ID FROM SYSOBJECTS WHERE NAME='SalInvCrNoteAdj' AND XTYPE='U'))
BEGIN
	ALTER TABLE SalInvCrNoteAdj ADD ServiceInvId INT DEFAULT 0 WITH VALUES
END
GO
IF NOT EXISTS(SELECT * FROM SYSCOLUMNS WHERE NAME='GspUpload1' AND ID IN (SELECT ID FROM SYSOBJECTS WHERE NAME='SalInvCrNoteAdj' AND XTYPE='U'))
BEGIN
	ALTER TABLE SalInvCrNoteAdj ADD GspUpload1 INT DEFAULT 0 WITH VALUES
END
GO
IF NOT EXISTS(SELECT * FROM SYSCOLUMNS WHERE NAME='GspUpload2' AND ID IN (SELECT ID FROM SYSOBJECTS WHERE NAME='SalInvCrNoteAdj' AND XTYPE='U'))
BEGIN
	ALTER TABLE SalInvCrNoteAdj ADD GspUpload2 INT DEFAULT 0 WITH VALUES
END
GO
IF NOT EXISTS(SELECT * FROM SYSCOLUMNS WHERE NAME='GspUpload3' AND ID IN (SELECT ID FROM SYSOBJECTS WHERE NAME='SalInvCrNoteAdj' AND XTYPE='U'))
BEGIN
	ALTER TABLE SalInvCrNoteAdj ADD GspUpload3 INT DEFAULT 0 WITH VALUES
END
GO
IF NOT EXISTS(SELECT * FROM SYSCOLUMNS WHERE NAME='TotSpentAmtGross' AND ID IN (SELECT ID FROM SYSOBJECTS WHERE NAME='RateDifferenceClaim' AND XTYPE='U'))
BEGIN
	ALTER TABLE RateDifferenceClaim ADD TotSpentAmtGross NUMERIC(18,2) DEFAULT 0 WITH VALUES
END
GO
IF NOT EXISTS(SELECT * FROM SYSCOLUMNS WHERE NAME='TotSpentTaxAmt' AND ID IN (SELECT ID FROM SYSOBJECTS WHERE NAME='RateDifferenceClaim' AND XTYPE='U'))
BEGIN
	ALTER TABLE RateDifferenceClaim ADD TotSpentTaxAmt NUMERIC(18,2) DEFAULT 0 WITH VALUES
END
GO
IF NOT EXISTS(SELECT * FROM SYSCOLUMNS WHERE NAME='TotNegSpentAmtGross' AND ID IN (SELECT ID FROM SYSOBJECTS WHERE NAME='RateDifferenceClaim' AND XTYPE='U'))
BEGIN
	ALTER TABLE RateDifferenceClaim ADD TotNegSpentAmtGross NUMERIC(18,2) DEFAULT 0 WITH VALUES
END
GO
IF NOT EXISTS(SELECT * FROM SYSCOLUMNS WHERE NAME='TotNegSpentTaxAmt' AND ID IN (SELECT ID FROM SYSOBJECTS WHERE NAME='RateDifferenceClaim' AND XTYPE='U'))
BEGIN
	ALTER TABLE RateDifferenceClaim ADD TotNegSpentTaxAmt NUMERIC(18,2) DEFAULT 0 WITH VALUES
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='TransactionWiseGrnTracking' AND XTYPE='U')
CREATE TABLE  TransactionWiseGrnTracking
(
	Transid			INT,	
	RefId			BIGINT ,
	RefNo			NVARCHAR(50),
	Refdate			DATETIME,
	Prdid			INT,
	PrdBatid		INT,
	Slno			INT,
	BaseQty			INT,
	FreeQty			INT,
	GrnPrdSlNo		INT,
	GrnQty			INT,
	GrnFreeQty		INT,
	PurRcptRefNo	NVARCHAR(100),				
	GrnDate			DATETIME,
	GSPUpload1		INT,
	GSPUpload2		INT,
	GSPUpload3		INT,
	GSPUpload4		INT,
	GSPUpload5		INT,
	Availability	INT,
	LastModBy		INT,
	LastModDate		DATETIME,
	Authid			INT,
	AuthDate		DATETIME,
	PRIMARY KEY (RefNo,Refdate,Prdid,PrdBatid,Slno,GrnQty,PurRcptRefNo)
)
GO
IF NOT EXISTS(SELECT '*' FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.ID
WHERE A.NAME='TransactionWiseGrnTracking' AND B.NAME='GSPUpload1' AND A.Xtype='U')
BEGIN
	ALTER TABLE TransactionWiseGrnTracking ADD GSPUpload1 INT CONSTRAINT CT_TransactionWiseGrnTracking_GSPUpload1 DEFAULT 0 WITH VALUES
END
GO
IF NOT EXISTS(SELECT '*' FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.ID
WHERE A.NAME='TransactionWiseGrnTracking' AND B.NAME='GSPUpload2' AND A.Xtype='U')
BEGIN
	ALTER TABLE TransactionWiseGrnTracking ADD GSPUpload2 INT CONSTRAINT CT_TransactionWiseGrnTracking_GSPUpload2 DEFAULT 0 WITH VALUES
END
GO
IF NOT EXISTS(SELECT '*' FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.ID
WHERE A.NAME='TransactionWiseGrnTracking' AND B.NAME='GSPUpload3' AND A.Xtype='U')
BEGIN
	ALTER TABLE TransactionWiseGrnTracking ADD GSPUpload3 INT CONSTRAINT CT_TransactionWiseGrnTracking_GSPUpload3 DEFAULT 0 WITH VALUES
END
GO
IF NOT EXISTS(SELECT '*' FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.ID
WHERE A.NAME='TransactionWiseGrnTracking' AND B.NAME='GSPUpload4' AND A.Xtype='U')
BEGIN
	ALTER TABLE TransactionWiseGrnTracking ADD GSPUpload4 INT CONSTRAINT CT_TransactionWiseGrnTracking_GSPUpload4 DEFAULT 0 WITH VALUES
END
GO
IF NOT EXISTS(SELECT '*' FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.ID
WHERE A.NAME='TransactionWiseGrnTracking' AND B.NAME='GSPUpload5' AND A.Xtype='U')
BEGIN
	ALTER TABLE TransactionWiseGrnTracking ADD GSPUpload5 INT CONSTRAINT CT_TransactionWiseGrnTracking_GSPUpload5 DEFAULT 0 WITH VALUES
END
GO
DELETE FROM ScreenDefaultValues WHERE TransId=108 and CtrlId=20
INSERT INTO ScreenDefaultValues(TransId,CtrlId,CtrlValue,CtrlDesc,SeqId,LngId,Availability,LastModBy,LastModDate,
AuthId,AuthDate,DefaultCtrlDesc)
SELECT 108,20,1,'Service Invoice',1,1,1,1,GETDATE(),1,GETDATE(),'Service Invoice'
UNION ALL
SELECT 108,20,2,'Goods Invoice',2,1,1,1,GETDATE(),1,GETDATE(),'Goods Invoice'
GO
DELETE FROM ScreenDefaultValues WHERE TransId=108 and CtrlId=21
INSERT INTO ScreenDefaultValues(TransId,CtrlId,CtrlValue,CtrlDesc,SeqId,LngId,Availability,LastModBy,LastModDate,
AuthId,AuthDate,DefaultCtrlDesc)
SELECT 108,21,0,'No',1,1,1,1,GETDATE(),1,GETDATE(),'No'
UNION ALL
SELECT 108,21,1,'Yes',2,1,1,1,GETDATE(),1,GETDATE(),'Yes'
GO
DELETE FROM ScreenDefaultValues WHERE TransId=108 and CtrlId=22
INSERT INTO ScreenDefaultValues(TransId,CtrlId,CtrlValue,CtrlDesc,SeqId,LngId,Availability,LastModBy,LastModDate,
AuthId,AuthDate,DefaultCtrlDesc)
SELECT 108,22,1,'Retailer',1,1,1,1,GETDATE(),1,GETDATE(),'Retailer'
UNION ALL
SELECT 108,22,2,'Distributor',2,1,1,1,GETDATE(),1,GETDATE(),'Distributor'
UNION ALL
SELECT 108,22,3,'Both',3,1,1,1,GETDATE(),1,GETDATE(),'Both'
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.ID
WHERE A.NAME='ClaimGroupMaster' AND B.name='DisplayStatus' and A.xtype='U')
BEGIN
ALTER TABLE ClaimGroupMaster ADD DisplayStatus TINYINT DEFAULT 1 WITH VALUES
END
GO
IF NOT EXISTS(SELECT * FROM SYSCOLUMNS WHERE NAME='GSTTax' AND ID IN (SELECT ID FROM SYSOBJECTS WHERE NAME='ClaimGroupMaster' AND XTYPE='U'))
BEGIN
	ALTER TABLE ClaimGroupMaster ADD GSTTax INT DEFAULT 0 WITH VALUES
END
GO
IF NOT EXISTS(SELECT * FROM SYSCOLUMNS WHERE NAME='ServiceType' AND ID IN (SELECT ID FROM SYSOBJECTS WHERE NAME='ClaimGroupMaster' AND XTYPE='U'))
BEGIN
	ALTER TABLE ClaimGroupMaster ADD ServiceType INT DEFAULT 0 WITH VALUES
END
GO
IF NOT EXISTS(SELECT * FROM SYSCOLUMNS WHERE NAME='ServiceId' AND ID IN (SELECT ID FROM SYSOBJECTS WHERE NAME='ClaimGroupMaster' AND XTYPE='U'))
BEGIN
	ALTER TABLE ClaimGroupMaster ADD ServiceId INT DEFAULT 0 WITH VALUES
END
GO
IF NOT EXISTS(SELECT * FROM SYSCOLUMNS WHERE NAME='ServiceOrGoods' AND ID IN (SELECT ID FROM SYSOBJECTS WHERE NAME='ClaimGroupMaster' AND XTYPE='U'))
BEGIN
	ALTER TABLE ClaimGroupMaster ADD ServiceOrGoods INT DEFAULT 0 WITH VALUES
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='VatClosingStock' AND XTYPE='U')
CREATE TABLE  VatClosingStock
(
	ProductCode			NVARCHAR(50),
	BatchCode			NVARCHAR(100),
	Prdid				INT,
	Prdbatid			INT,
	Lcnid				INT,
	ClosingSaleable		BIGINT,	
	ClosingUnSaleable	BIGINT,
	ClosingFree			BIGINT,	
	MRP					NUMERIC(18,6),
	SellingRate			NUMERIC(18,6),
	PurchaseRate		NUMERIC(18,6),		
	TaxPerc				NUMERIC(18,6),
	ClosingSelValue		NUMERIC(18,6),
	ClosingPurValue		NUMERIC(18,6),
	ClosingSalVolume	NUMERIC(18,6),
	ClosingUnSalVolume	NUMERIC(18,6),
	ClosingFreeVolume	NUMERIC(18,6),
	TaxableAmount		NUMERIC(18,6),
	TaxAmount			NUMERIC(18,6),
	GrnDate				DATETIME,
	GrnRefNo			NVARCHAR(50),
	CmpInvNo			NVARCHAR(50),
	GrnQty				BIGINT,
	GrnFreeQty			INT,
	Upload				INT,
	Authid				INT,
	AuthDate			DATETIME	
)
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='BilledPrdGRNTrack' AND XTYPE='U')
CREATE TABLE BilledPrdGRNTrack
(
	RowId		 INT,
	Refid		 INT,
	RefNo		 NVARCHAR(50),
	Lcnid		 INT,
	Prdid		 INT,
	PrdBatid	 INT,
	BaseQty		 INT,
	FreeQty		 INT,
	PurRcptId	 INT,
	PurRcptRefNo VARCHAR(50),
	PurRcptDate  DATETIME,
	PrdSlNo		 INT,
	GrnQty		 INT,
	FreeGrnQty	 INT,
	Usrid		 INT,
	Transid		 INT,
	CalledFrom   INT
)
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='U' AND NAME='ETL_Prk_TaxSetting')
DROP TABLE ETL_Prk_TaxSetting
GO
CREATE TABLE [ETL_Prk_TaxSetting]
(
	[DistCode] [nvarchar](50) NULL,
	[TaxGroupCode] [nvarchar](200) NULL,
	[Type] [nvarchar](200) NULL,
	[PrdTaxGroupCode] [nvarchar](200) NULL,
	[TaxCode] [nvarchar](200) NULL,
	[Percentage] [numeric](38, 6) NULL,
	[ApplyOn] [nvarchar](200) NULL,
	[Discount] [nvarchar](200) NULL,
	[SchDiscount] [nvarchar](200) NULL,
	[DBDiscount] [nvarchar](200) NULL,
	[CDDiscount] [nvarchar](200) NULL,
	[ApplyTax] [nvarchar](200) NULL,
	[DownloadFlag] [varchar](1) NULL,
	[CreatedDate] [datetime] NULL,
	[FreightCharge] [nvarchar](200) NULL,
	[TaxType] nVarchar(10),
	[EffectiveFrom] Datetime
)
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='FN' AND NAME='Fn_ISAlpha')
DROP FUNCTION Fn_ISAlpha
GO
CREATE FUNCTION Fn_ISAlpha(@STR VARCHAR(20))
RETURNS INT
/*********************************
* FUNCTION: Fn_ISAlpha
* PURPOSE: Check Alphabets
* NOTES: 
* CREATED: Murugan.R 27/02/2017
* MODIFIED 
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* 

*********************************/
AS
BEGIN

	DECLARE @IS_ALPHA AS INT

	SET @IS_ALPHA = PATINDEX('%[^A-Z]%' ,@STR)

	RETURN CASE @IS_ALPHA

	WHEN 0 THEN 1

	ELSE 0

	END

END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='FN' AND NAME='Fn_ISInt')
DROP FUNCTION Fn_ISInt
GO
CREATE FUNCTION [Fn_ISInt](@STR VARCHAR(20))
RETURNS INT
/*********************************
* FUNCTION: Fn_ISInt
* PURPOSE: Check Interger
* NOTES: 
* CREATED: Murugan.R 27/02/2017
* MODIFIED 
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* 

*********************************/
AS
BEGIN

	DECLARE @IS_INT AS INT

	SET @IS_INT = PATINDEX('%[^0-9]%' ,@STR)

	RETURN CASE @IS_INT

	WHEN 0 THEN 1

	ELSE 0

	END

END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Fn_ISGSTINNumber' AND XTYPE='FN')
DROP FUNCTION Fn_ISGSTINNumber
GO
--SELECT DBO.Fn_ISGSTINNumber('11GPKPM5222K1G5')
CREATE FUNCTION [dbo].[Fn_ISGSTINNumber](@gSTINNumber AS Varchar(20))--,@StateId as Int
RETURNS INT
/*********************************
* FUNCTION: Fn_ISGSTINNumber
* PURPOSE: GSTIN Number Validation
* NOTES: 
* CREATED: Murugan.R 27/02/2017
* MODIFIED 
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* 

*********************************/
AS
BEGIN
	/*
	a.	First 2 digits should be Numeric.
	b.	Next 10 digits should be as PAN no validation (First 5 character should alphabetic, next 4 character should be Numeric and last character should alphabetic).
	c.	13th digit should be Numeric.
	d.	14th digit should be Alphabetic.
	e.	15th digit should be Numeric.
	*/
	DECLARE @gSTIN AS TINYINT
	DECLARE @gStateCode AS Varchar(15)
	SET @gSTIN=0
	
	IF LEN(LTRIM(RTRIM(@gSTINNumber)))<>15
	BEGIN
		SET @gSTIN=1
	END
	---First 2 digits should be Numeric 
	IF (SELECT DBO.Fn_ISInt(LEFT(@gSTINNumber,2)))=0
	BEGIN
		SET @gSTIN=1
	END

	---Next 10 digits should be as PAN no validation (First 5 character should alphabetic, 
	--next 4 character should be Numeric and last character should alphabetic
	IF (SELECT DBO.Fn_ISAlpha(SUBSTRING(@gSTINNumber,3,5)))=0
	BEGIN
		SET @gSTIN=1
	END
	
	
	IF (SELECT DBO.Fn_ISInt(SUBSTRING(@gSTINNumber,8,4)))=0
	BEGIN
		SET @gSTIN=1
	END
	
	IF (SELECT DBO.Fn_ISAlpha(SUBSTRING(@gSTINNumber,12,1)))=0
	BEGIN
		SET @gSTIN=1
	END
	
	IF ((SELECT DBO.Fn_ISInt(SUBSTRING(@gSTINNumber,13,1)))=0) AND  ((SELECT DBO.Fn_ISAlpha(SUBSTRING(@gSTINNumber,13,1)))=0)
	BEGIN
		SET @gSTIN=1
	END
	
	IF ((SELECT DBO.Fn_ISAlpha(SUBSTRING(@gSTINNumber,14,1)))=0) AND ((SELECT DBO.Fn_ISInt(SUBSTRING(@gSTINNumber,14,1)))=0)
	BEGIN
		SET @gSTIN=1
	END
	
	IF ((SELECT DBO.Fn_ISInt(SUBSTRING(@gSTINNumber,15,1)))=0) AND ((SELECT DBO.Fn_ISAlpha(SUBSTRING(@gSTINNumber,15,1)))=0)
	BEGIN
		SET @gSTIN=1
	END
	
	--IF @gSTIN=0 AND @StateId>0
	--BEGIN
	--	SELECT @gStateCode=StateCode FROM StateMaster (NOLOCK) WHERE Stateid=@StateId 
	--	IF @gStateCode<>LEFT(@gSTINNumber,2)
	--	BEGIN
	--		SET @gSTIN=2
	--	END
	--END 
	
	RETURN @gSTIN
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='FN' AND NAME='Fn_ISPanNumber')
DROP FUNCTION Fn_ISPanNumber
GO
--SELECT DBO.Fn_ISPanNumber('GAAAY3556Y')
CREATE FUNCTION Fn_ISPanNumber(@gPanNumber AS Varchar(20))--,@StateId as Int
RETURNS INT
/*********************************
* FUNCTION: Fn_ISPanNumber
* PURPOSE: Pancard Number Validation
* NOTES: 
* CREATED: Murugan.R 27/02/2017
* MODIFIED 
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* 

*********************************/
AS
BEGIN
	/*	
	1. First 5 character should alphabetic. 
	2. Next 4 character should be Numeric 
	3. Last character should alphabetic.	
	*/
	DECLARE @gPnum AS TINYINT
	
	SET @gPnum=0
	
	IF LEN(LTRIM(RTRIM(@gPanNumber)))<>10
	BEGIN
		SET @gPnum=1
	END
	IF (SELECT DBO.Fn_ISAlpha(SUBSTRING(@gPanNumber,1,5)))=0
	BEGIN
		SET @gPnum=1
	END
		
	IF (SELECT DBO.Fn_ISInt(SUBSTRING(@gPanNumber,6,4)))=0
	BEGIN
		SET @gPnum=1
	END
	
	IF (SELECT DBO.Fn_ISAlpha(SUBSTRING(@gPanNumber,10,1)))=0
	BEGIN
		SET @gPnum=1
	END
	
	RETURN @gPnum
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='ETL_Prk_CN2CS_UdcDetails' and xtype='U')
BEGIN
CREATE TABLE [dbo].[ETL_Prk_CN2CS_UdcDetails](
	[MasterName]	[nvarchar](100) NULL,
	[ColumnName]	[nvarchar](100) NULL,
	[Column Code]	[nvarchar](100) NULL,
	[ColumnValue]	[nvarchar](100) NULL,
	[UpdateFlag]	[int]
) ON [PRIMARY]
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE name='Proc_Validate_CN2CS_UdcDetails' AND XTYPE='P')
DROP PROCEDURE Proc_Validate_CN2CS_UdcDetails
GO
-- EXEC Proc_ValidateUdcDetails ''
CREATE PROCEDURE Proc_Validate_CN2CS_UdcDetails
(
	@Po_ErrNo INT OUTPUT 
)
AS       
/*********************************    
* PROCEDURE: Proc_Validate_CN2CS_UdcDetails    
* PURPOSE: To Insert and Update records      
* CREATED: S.Moorthi
*********************************/       
SET NOCOUNT ON    
BEGIN       
	DECLARE @ErrDesc AS VARCHAR(1000)  
	DECLARE @rno AS INT  
	DECLARE @TabName AS VARCHAR(50)  
	DECLARE @GetKey AS INT
	DECLARE @Taction AS INT
	DECLARE @MasterName AS Varchar(100)
	DECLARE @ColName AS Varchar(100)
	DECLARE @ColName1 AS Varchar(100)
	DECLARE @ColCode AS Varchar(100)
	DECLARE @ColValue AS Varchar(100)
	DECLARE @UdcHdId AS INT
	DECLARE @UdcMasId AS INT
	DECLARE @RecId AS INT
	DECLARE @UdcDtId AS INT
	DECLARE @TempStr AS VARCHAR(4000)
	DECLARE @sSQL AS VARCHAR(4000)
	DECLARE @UniqueId AS INT
	DECLARE @Mandatory AS INT
	DECLARE @TempUdcMasterId AS Varchar(50)
	SET @TabName = 'ETL_Prk_CN2CS_UdcDetails'  
	SET @Po_ErrNo =0
	
	DECLARE Cur_UdcDt CURSOR   
	FOR SELECT DISTINCT ISNULL(MasterName,'') MasterName,ISNULL([ColumnName],'') ColumnName,ISNULL([Column Code],'') AS [Column Code],ISNULL([ColumnValue],'') AS [ColumnValue]
    	FROM ETL_Prk_CN2CS_UdcDetails (NOLOCK) WHERE UpdateFlag=0
	OPEN Cur_UdcDt  
	FETCH NEXT FROM Cur_UdcDt INTO @MasterName,@ColName,@ColCode,@ColValue 
	set @Rno = 0  
	WHILE @@FETCH_STATUS=0  
	BEGIN  	  
		set @Taction = 2
		SET @Po_ErrNo = 0 

		IF @Po_ErrNo = 0 
		BEGIN
			
			IF @MasterName='PRODUCT MASTER'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('PRODUCT MASTER')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('PRODUCT','PrdCCode','PrdId',LTRIM(RTRIM(@ColCode)),1)
					END
				END
			END
			
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'RETAILER MASTER'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('RETAILER MASTER')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('RETAILER','RtrCode','RtrId',LTRIM(RTRIM(@ColCode)),1)
					END
				END
			END
			
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'SUPPLIER MASTER'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('SUPPLIER MASTER')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('SUPPLIER','SpmCode','SpmId',LTRIM(RTRIM(@ColCode)),1)
					END
				END
			END
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'DISTRIBUTOR INFO MASTER'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('DISTRIBUTOR INFO MASTER')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('DISTRIBUTOR','DistributorCode','DistributorId',LTRIM(RTRIM(@ColCode)),1)
					END
				END
			END
			
			IF exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[TempTbl]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
			drop table [dbo].[TempTbl]
			CREATE TABLE TempTbl (ColId INT)
			INSERT INTO TempTbl EXEC (@TempStr)
			IF (SELECT Count(*) FROM TempTbl) > 0
			BEGIN
				SELECT @RecId = ColId FROM TempTbl
			END
			ELSE
			BEGIN
				SET @RecId=0
			END
			
			IF @RecId <> 0 			
			BEGIN			
				SELECT @UdcDtId = dbo.Fn_ReturnMasterRecId(@RecId,@UdcHdId,@UdcMasId)	
				IF @UdcDtId <> 0
				BEGIN
					UPDATE UdcDetails SET ColumnValue =LTRIM(RTRIM(@ColValue)) WHERE MasterId = @UdcHdId AND UdcMasterId = @UdcMasId AND MasterRecordId=@RecId 			
				END
				ELSE
				BEGIN
					SELECT @GetKey= dbo.Fn_GetPrimaryKeyInteger('UDCDetails','UdcDetailsId',CAST(YEAR(GetDate())AS INT),MONTH(GETDATE()))
					
					SELECT @UniqueId= Dbo.Fn_ReturnUDCUniqueId(LTRIM(RTRIM(@ColValue)),@UdcMasId)
					
					IF @UniqueId=0 
					BEGIN
						SELECT @UniqueId=dbo.Fn_GetPrimaryKeyInteger('UDCDetails','UDCUniqueId',CAST(YEAR(GetDate())AS INT),MONTH(GETDATE()))
					END

					INSERT INTO UDCDetails(UdcDetailsId,UdcMasterId,MasterId,MasterRecordId,ColumnValue,UDCUniqueId,Availability,LastModBy,LastModDate,AuthId,AuthDate) 
					VALUES (@GetKey,@UdcMasId,@UdcHdId,@RecId,LTRIM(RTRIM(@ColValue)),@UniqueId,1,1,convert(varchar(10),getdate(),121),1,convert(varchar(10),getdate(),121))

					UPDATE counters SET currvalue = currvalue+1 where tabname = 'UDCDetails' and fldname = 'UdcDetailsId'

					UPDATE counters SET currvalue = currvalue+1 where tabname = 'UDCDetails' and fldname = 'UDCUniqueId'
				END
				
				UPDATE ETL_Prk_CN2CS_UdcDetails SET UpdateFlag=1 WHERE MasterName=@MasterName and ColumnName=@ColName and [Column Code]=@ColCode
				
			END
		END

	
		FETCH NEXT FROM Cur_UdcDt INTO @MasterName,@ColName,@ColCode,@ColValue 
	END  
	CLOSE Cur_UdcDt  
	DEALLOCATE Cur_UdcDt
END
GO
IF EXISTS(SELECT NAME FROM Sysobjects WHERE XTYPE='P' and NAME='Proc_Import_GSTConfiguration')
DROP PROCEDURE Proc_Import_GSTConfiguration
GO
CREATE PROCEDURE Proc_Import_GSTConfiguration
(
	@Pi_Records TEXT
)
AS
/*********************************
* PROCEDURE		: Proc_Import_ServiceMaster
* PURPOSE		: To Insert records from xml file in the Table Proc_Cn2Cs_ServiceMaster
* CREATED		: S.Moorthi
* CREATED DATE	: 17-04-2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
SET NOCOUNT ON
BEGIN
	DECLARE @hDoc INTEGER
	
	EXEC sp_xml_preparedocument @hDoc OUTPUT,@Pi_Records
	INSERT INTO Cn2Cs_Prk_GSTConfiguration(
		DistCode,
		ModuleId,
		ActivationDate,
		ActivationStatus,
		ConsoleAcknowledgeStatus,
		DownLoadFlag,
		CreatedDate
	)
	SELECT DistCode,
		ModuleId,
		ActivationDate,
		ActivationStatus,
		ConsoleAcknowledgeStatus,
		ISNULL(DownLoadFlag,'D'),
		GETDATE()
	FROM OPENXML (@hdoc,'/Root/Console2CS_GSTConfiguration',1)
	WITH
	(
		DistCode 			[nvarchar](100),
		ModuleId			[Varchar](50),
		ActivationDate		[datetime],
		ActivationStatus	 [Varchar](50),
		ConsoleAcknowledgeStatus	[Varchar](10),
		DownLoadFlag	 [nvarchar](10)
	) XMLObj
	EXEC sp_xml_removedocument @hDoc
END
GO
IF NOT EXISTS(SELECT * FROM Counters WHERE TABNAME='StateMaster' and FldName='StateId')
BEGIN	
	INSERT INTO Counters(TabName,FldName,Prefix,Zpad,CmpId,CurrValue,ModuleName,
	DisplayFlag,CurYear,Availability,LastModBy,LastModDate,AuthId,AuthDate)	
	SELECT 'StateMaster','StateId','',0,1,0,'StateMaster',0,2017,1,1,Getdate(),1,Getdate()
END
GO
IF NOT EXISTS(SELECT NAME FROM Sysobjects WHERE XTYPE='U' and NAME='StateMaster')
BEGIN
	CREATE TABLE StateMaster
	(
		StateId	  Int NOT NULL,	
		StateCode Varchar(10) NOT NULL,
		StateName Varchar(100) NOT NULL,
		TinFirst2Digit	Varchar(10),
		StateType Varchar(15),
		Availability TinyInt,
		LastModBy TinyInt,
		LastModDate datetime,
		AuthId TinyInt,
		AuthDate datetime,
		CONSTRAINT PK_StateMaster_StatId PRIMARY KEY CLUSTERED (StateId),
		CONSTRAINT UK_StateMaster_StateCode UNIQUE NONCLUSTERED  (StateCode)
	)	
END
GO
IF EXISTS(SELECT NAME FROM Sysobjects WHERE XTYPE='U' and NAME='Cn2Cs_Prk_StateMaster')
DROP TABLE Cn2Cs_Prk_StateMaster
GO
CREATE TABLE Cn2Cs_Prk_StateMaster
(
		DistCode [nvarchar](100) NULL,
		StateCode Varchar(10) NOT NULL,
		StateName Varchar(100) NOT NULL,
		TinFirst2Digit	Varchar(10),
		StateType Varchar(15),
		DownLoadFlag [nvarchar](100) NULL,
		CreatedDate [datetime] NULL
)
GO
IF EXISTS(SELECT NAME FROM Sysobjects WHERE XTYPE='P' and NAME='Proc_Import_StateMaster')
DROP PROCEDURE Proc_Import_StateMaster
GO
CREATE PROCEDURE Proc_Import_StateMaster
(
	@Pi_Records TEXT
)
AS
/*********************************
* PROCEDURE		: Proc_Import_ServiceMaster
* PURPOSE		: To Insert records from xml file in the Table Proc_Cn2Cs_ServiceMaster
* CREATED		: S.Moorthi
* CREATED DATE	: 17-04-2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
SET NOCOUNT ON
BEGIN
	DECLARE @hDoc INTEGER
	
	EXEC sp_xml_preparedocument @hDoc OUTPUT,@Pi_Records
	INSERT INTO Cn2Cs_Prk_StateMaster(
		DistCode,
		StateCode,
		StateName,
		TinFirst2Digit,
		StateType,
		DownLoadFlag,
		CreatedDate
	)
	SELECT DistCode,
		StateCode,
		StateName,
		TinFirst2Digit,
		StateType,
		ISNULL(DownLoadFlag,'D'),
		GETDATE()
	FROM OPENXML (@hdoc,'/Root/Console2CS_StateMaster',1)
	WITH
	(
		DistCode [nvarchar](100),
		StateCode Varchar(10),
		StateName Varchar(100),
		TinFirst2Digit	Varchar(10),
		StateType Varchar(15),
		DownLoadFlag [nvarchar](100)		
	) XMLObj
	EXEC sp_xml_removedocument @hDoc
END
GO
IF EXISTS(SELECT NAME FROM Sysobjects WHERE XTYPE='P' and NAME='Proc_Cn2Cs_StateMaster')
DROP PROCEDURE Proc_Cn2Cs_StateMaster
GO
/*
BEGIN TRAN
DELETE from UdcDefault where Masterid=16
delete from StateMaster
DELETE FROM ERRORLOG
EXEC Proc_Cn2Cs_StateMaster 0
SELECT * FROM StateMaster
Select * from UDCMASTER
Select * from UdcDefault where Masterid=16
SELECT * FROM ERRORLOG
ROLLBACK TRAN
*/
CREATE PROCEDURE [Proc_Cn2Cs_StateMaster]
(
	@Po_ErrNo INT OUTPUT
)
AS
/*********************************
* PROCEDURE		: Proc_Cn2Cs_StateMaster
* PURPOSE		: To validate the downloaded State details from Console
* CREATED		: Murugan.R
* CREATED DATE	: 06/03/2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
SET NOCOUNT ON
BEGIN
	SET @Po_ErrNo=0
	DECLARE @CurrValue as INT
	CREATE TABLE #Cn2Cs_Prk_StateMaster
	(
		
		StateCode Varchar(10) NOT NULL,
		StateName Varchar(100) NOT NULL,
		TinFirst2Digit Varchar(10),
		StateType Varchar(15)
		
	)
	DECLARE @MasterId AS INT
	DECLARE @UdcMasterId AS INT

	DELETE FROM Cn2Cs_Prk_StateMaster WHERE DownLoadFlag='Y'
	
	IF NOT EXISTS(SELECT 'X' FROM Cn2Cs_Prk_StateMaster (NOLOCK) WHERE DownLoadFlag='D')
	BEGIN
		RETURN
	END
		
	SELECT StateCode ,MAX(CreatedDate) as CreatedDate
	INTO #LatestMaster
	FROM Cn2Cs_Prk_StateMaster WHERE DownLoadFlag='D'
	GROUP BY StateCode
	
	INSERT INTO #Cn2Cs_Prk_StateMaster(StateCode,StateName,TinFirst2Digit,StateType)
	SELECT DISTINCT A.StateCode,A.StateName,A.TinFirst2Digit,A.StateType
	FROM Cn2Cs_Prk_StateMaster A (NOLOCK) INNER JOIN #LatestMaster B ON A.StateCode=B.StateCode
	and A.CreatedDate=B.CreatedDate
	WHERE NOT EXISTS(SELECT StateCode FROM StateMaster C (NOLOCK) WHERE C.StateCode=A.StateCode and C.StateCode=B.StateCode)
	and DownLoadFlag='D'
	
		
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 1,'State Master','StateCode,StateName,StateType','Name Should not be empty' FROM #Cn2Cs_Prk_StateMaster
	WHERE (
	LEN(RTRIM(LTRIM(ISNULL(StateCode,''))))=0 
	OR LEN(RTRIM(LTRIM(ISNULL(StateName,''))))=0 
	OR LEN(RTRIM(LTRIM(ISNULL(StateType,''))))=0 
	OR LEN(RTRIM(LTRIM(ISNULL(TinFirst2Digit,''))))=0 
	)

	DELETE A FROM #Cn2Cs_Prk_StateMaster A
	WHERE 
	(
	LEN(RTRIM(LTRIM(ISNULL(StateCode,''))))=0 
	OR LEN(RTRIM(LTRIM(ISNULL(StateName,''))))=0 
	OR LEN(RTRIM(LTRIM(ISNULL(StateType,''))))=0 
	OR LEN(RTRIM(LTRIM(ISNULL(TinFirst2Digit,''))))=0 
	)
	
	
	---Validate State Type
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT  2,'State Master','StateType','State Type should be UT/STATE - '+StateType FROM #Cn2Cs_Prk_StateMaster
	WHERE UPPER(StateType) NOT IN ('STATE','UT')
	
	DELETE FROM #Cn2Cs_Prk_StateMaster WHERE UPPER(StateType) NOT IN ('STATE','UT')
	
	---Validate TinFirst2Digit
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT  4,'State Master','TinFirst2Digit','Tin No First 2 Digit should be 2 digit - '+StateCode FROM #Cn2Cs_Prk_StateMaster
	WHERE LEN(RTRIM(LTRIM(ISNULL(TinFirst2Digit,''))))<>2
	
	DELETE FROM #Cn2Cs_Prk_StateMaster
	WHERE LEN(RTRIM(LTRIM(ISNULL(TinFirst2Digit,''))))<>2
	
	---Validate State Duplicate Name
	SELECT StateName INTO #DuplicateStateName FROM #Cn2Cs_Prk_StateMaster
	GROUP BY StateName HAVING COUNT(StateName)>1	
	
	IF EXISTS(SELECT * FROM #DuplicateStateName)
	BEGIN
		INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
		SELECT  3,'State Master','StateName','Duplicate State name not allow-'+StateName FROM #Cn2Cs_Prk_StateMaster
		GROUP BY StateName HAVING COUNT(StateName)>1	
		
		DELETE FROM #Cn2Cs_Prk_StateMaster 
		WHERE StateName IN (SELECT STATENAME FROM #DuplicateStateName)
	END
		
	SELECT DISTINCT A.StateCode,A.StateName,A.StateType,A.TinFirst2Digit
	INTO #ExistsState
	FROM Cn2Cs_Prk_StateMaster A (NOLOCK) INNER JOIN #LatestMaster B ON A.StateCode=B.StateCode
	and A.CreatedDate=B.CreatedDate
	WHERE EXISTS(SELECT StateCode FROM StateMaster C (NOLOCK) WHERE C.StateCode=A.StateCode and C.StateCode=B.StateCode)
	and DownLoadFlag='D'
	
	UPDATE A SET A.StateName=B.StateName,A.stateType=B.statetype,A.TinFirst2Digit=B.TinFirst2Digit FROM
	StateMaster A INNER JOIN #ExistsState B ON A.StateCode=B.StateCode
	
	SELECT @CurrValue=CurrValue FROM Counters WHERE TABNAME='StateMaster' and FldName='StateId'
	
	INSERT INTO StateMaster(StateId,StateCode,StateName,TinFirst2Digit,StateType,Availability,LastModBy,LastModDate,AuthId,AuthDate)
	SELECT @CurrValue+ROW_NUMBER() OVER(ORDER BY StateCode),StateCode,StateName,TinFirst2Digit,StateType,1,1,Getdate(),1,GETDATE()
	FROM #Cn2Cs_Prk_StateMaster
		
	UPDATE Counters Set CurrValue=(SELECT ISNULL(MAX(StateId),0) FROM StateMaster) 
	WHERE TABNAME='StateMaster' and FldName='StateId'
	
	---Distributor Info UDC Default
	SELECT @MasterId=A.MasterId,@UdcMasterId=A.UdcMasterId  
	FROM UdcMaster A (NOLOCK) INNER JOIN UdcHd B(NOLOCK)  ON A.MasterId=B.MasterId
	WHERE ColumnName='State Name' and MasterName='Distributor Info Master'
		
	IF ISNULL(@MasterId,0)<>0 and ISNULL(@UdcMasterId,0)<>0
	BEGIN
		INSERT INTO UdcDefault(SeqId,MasterId,UdcMasterId,ColValue)
		SELECT StateId,@MasterId,@UdcMasterId,StateName
		FROM StateMaster A (NOLOCK) 
		WHERE NOT EXISTS(SELECT SeqId FROM UdcDefault B (NOLOCK) 
						WHERE B.SeqId=A.StateId and UdcMasterId=@UdcMasterId and MasterId=@MasterId) 
						
		UPDATE B SET ColValue=StateName
		FROM StateMaster A (NOLOCK)	INNER JOIN UdcDefault B (NOLOCK) ON A.StateId=B.SeqId
		WHERE UdcMasterId=@UdcMasterId and MasterId=@MasterId 				
	END
	
	---Supplier UDC Default
	SELECT @MasterId=A.MasterId,@UdcMasterId=A.UdcMasterId  
	FROM UdcMaster A (NOLOCK) INNER JOIN UdcHd B(NOLOCK)  ON A.MasterId=B.MasterId
	WHERE ColumnName='State Name' and MasterName='Supplier Master'
		
	IF ISNULL(@MasterId,0)<>0 and ISNULL(@UdcMasterId,0)<>0
	BEGIN
		INSERT INTO UdcDefault(SeqId,MasterId,UdcMasterId,ColValue)
		SELECT StateId,@MasterId,@UdcMasterId,StateName
		FROM StateMaster A (NOLOCK) 
		WHERE NOT EXISTS(SELECT SeqId FROM UdcDefault B (NOLOCK) 
						WHERE B.SeqId=A.StateId and UdcMasterId=@UdcMasterId and MasterId=@MasterId) 
						
		UPDATE B SET ColValue=StateName
		FROM StateMaster A (NOLOCK)	INNER JOIN UdcDefault B (NOLOCK) ON A.StateId=B.SeqId
		WHERE UdcMasterId=@UdcMasterId and MasterId=@MasterId 				
	END
	
	---Retailer GST UDC Default
	SELECT @MasterId=A.MasterId,@UdcMasterId=A.UdcMasterId  
	FROM UdcMaster A (NOLOCK) INNER JOIN UdcHd B(NOLOCK)  ON A.MasterId=B.MasterId
	WHERE ColumnName='State Name' and MasterName='Retailer Master'
		
	IF ISNULL(@MasterId,0)<>0 and ISNULL(@UdcMasterId,0)<>0
	BEGIN
		INSERT INTO UdcDefault(SeqId,MasterId,UdcMasterId,ColValue)
		SELECT StateId,@MasterId,@UdcMasterId,StateName
		FROM StateMaster A (NOLOCK) 
		WHERE NOT EXISTS(SELECT SeqId FROM UdcDefault B (NOLOCK) 
						WHERE B.SeqId=A.StateId and UdcMasterId=@UdcMasterId and MasterId=@MasterId) 
						
		UPDATE B SET ColValue=StateName
		FROM StateMaster A (NOLOCK)	INNER JOIN UdcDefault B (NOLOCK) ON A.StateId=B.SeqId
		WHERE UdcMasterId=@UdcMasterId and MasterId=@MasterId 				
	END
	
	---Supplier UDC Default
	SELECT @MasterId=A.MasterId,@UdcMasterId=A.UdcMasterId  
	FROM UdcMaster A (NOLOCK) INNER JOIN UdcHd B(NOLOCK)  ON A.MasterId=B.MasterId
	WHERE ColumnName='State Name' and MasterName='Company Master'
		
	IF ISNULL(@MasterId,0)<>0 and ISNULL(@UdcMasterId,0)<>0
	BEGIN
		INSERT INTO UdcDefault(SeqId,MasterId,UdcMasterId,ColValue)
		SELECT StateId,@MasterId,@UdcMasterId,StateName
		FROM StateMaster A (NOLOCK) 
		WHERE NOT EXISTS(SELECT SeqId FROM UdcDefault B (NOLOCK) 
						WHERE B.SeqId=A.StateId and UdcMasterId=@UdcMasterId and MasterId=@MasterId) 
						
		UPDATE B SET ColValue=StateName
		FROM StateMaster A (NOLOCK)	INNER JOIN UdcDefault B (NOLOCK) ON A.StateId=B.SeqId
		WHERE UdcMasterId=@UdcMasterId and MasterId=@MasterId 				
	END
	
	
	UPDATE A SET DownLoadFlag='Y' FROM Cn2Cs_Prk_StateMaster A 
	INNER JOIN StateMaster B ON A.StateCode=B.StateCode
	
	RETURN
END
GO
IF NOT EXISTS(SELECT 'X' FROM UdcMaster A (NOLOCK) INNER JOIN UdcHd B(NOLOCK)  ON A.MasterId=B.MasterId
				 WHERE ColumnName='State Name' and MasterName='Company Master')
BEGIN
	DECLARE @MasterId AS INT
	DECLARE @UdcMasterId AS INT			 
	SELECT @MasterId=MasterId FROM UdcHd with (nolock) WHERE MasterName='Company Master'
	IF @MasterId>0
	BEGIN
		SELECT @UdcMasterId=ISNULL(MAX(UdcMasterId),1) FROM UdcMaster (NOLOCK)
		SET @UdcMasterId=ISNULL(@UdcMasterId,1)
		IF @UdcMasterId>0
		BEGIN
			INSERT INTO UdcMaster(UdcMasterId,MasterId,ColumnName,ColumnDataType,ColumnSize,
			ColumnPrecision,ColumnMandatory,PickFromDefault,Availability,LastModBy,LastModDate,AuthId,
			AuthDate,Editable)
			SELECT @UdcMasterId+1,@MasterId,'State Name','Varchar',100,0,1,1,1,1,Getdate(),1,GETDATE(),1
			
			UPDATE Counters Set CurrValue=@UdcMasterId+1 where TabName='UdcMaster' and FldName='UdcMasterId'
		END
	END
END
GO
IF NOT EXISTS(SELECT 'X' FROM UdcMaster A (NOLOCK) INNER JOIN UdcHd B(NOLOCK)  ON A.MasterId=B.MasterId
				 WHERE ColumnName='PAN Number' and MasterName='Company Master')
BEGIN				 
	DECLARE @MasterId AS INT
	DECLARE @UdcMasterId AS INT
	SELECT @MasterId=MasterId FROM UdcHd with (nolock) WHERE MasterName='Company Master'
	IF @MasterId>0
	BEGIN
		SELECT @UdcMasterId=ISNULL(MAX(UdcMasterId),1) FROM UdcMaster (NOLOCK)
		SET @UdcMasterId=ISNULL(@UdcMasterId,1)
		IF @UdcMasterId>0
		BEGIN
		
			INSERT INTO UdcMaster(UdcMasterId,MasterId,ColumnName,ColumnDataType,ColumnSize,
			ColumnPrecision,ColumnMandatory,PickFromDefault,Availability,LastModBy,LastModDate,AuthId,
			AuthDate,Editable)
			SELECT @UdcMasterId+1,@MasterId,'PAN Number','Varchar',15,0,0,0,1,1,Getdate(),1,GETDATE(),1
			
			UPDATE Counters Set CurrValue=@UdcMasterId+1 where TabName='UdcMaster' and FldName='UdcMasterId'
		END
	END
END
GO
IF NOT EXISTS(SELECT 'X' FROM UdcMaster A (NOLOCK) INNER JOIN UdcHd B(NOLOCK)  ON A.MasterId=B.MasterId
				 WHERE ColumnName='GSTIN' and MasterName='Company Master')
BEGIN				 
	DECLARE @MasterId AS INT
	DECLARE @UdcMasterId AS INT
	SELECT @MasterId=MasterId FROM UdcHd with (nolock) WHERE MasterName='Company Master'
	IF @MasterId>0
	BEGIN
		SELECT @UdcMasterId=ISNULL(MAX(UdcMasterId),1) FROM UdcMaster (NOLOCK)
		SET @UdcMasterId=ISNULL(@UdcMasterId,1)
		IF @UdcMasterId>0
		BEGIN
		
			INSERT INTO UdcMaster(UdcMasterId,MasterId,ColumnName,ColumnDataType,ColumnSize,
			ColumnPrecision,ColumnMandatory,PickFromDefault,Availability,LastModBy,LastModDate,AuthId,
			AuthDate,Editable)
			SELECT @UdcMasterId+1,@MasterId,'GSTIN','Varchar',25,0,1,0,1,1,Getdate(),1,GETDATE(),1
			
			UPDATE Counters Set CurrValue=@UdcMasterId+1 where TabName='UdcMaster' and FldName='UdcMasterId'
			
		END
	END
END
GO
IF NOT EXISTS(SELECT 'X' FROM UdcMaster A (NOLOCK) INNER JOIN UdcHd B(NOLOCK)  ON A.MasterId=B.MasterId
				 WHERE ColumnName='State Name' and MasterName='Distributor Info Master')
BEGIN
	DECLARE @MasterId AS INT
	DECLARE @UdcMasterId AS INT			 
	SELECT @MasterId=MasterId FROM UdcHd with (nolock) WHERE MasterName='Distributor Info Master'
	IF @MasterId>0
	BEGIN
		SELECT @UdcMasterId=ISNULL(MAX(UdcMasterId),1) FROM UdcMaster (NOLOCK)
		SET @UdcMasterId=ISNULL(@UdcMasterId,1)
		IF @UdcMasterId>0
		BEGIN
			INSERT INTO UdcMaster(UdcMasterId,MasterId,ColumnName,ColumnDataType,ColumnSize,
			ColumnPrecision,ColumnMandatory,PickFromDefault,Availability,LastModBy,LastModDate,AuthId,
			AuthDate,Editable)
			SELECT @UdcMasterId+1,@MasterId,'State Name','Varchar',100,0,1,1,1,1,Getdate(),1,GETDATE(),1
			
			UPDATE Counters Set CurrValue=@UdcMasterId+1 where TabName='UdcMaster' and FldName='UdcMasterId'
		END
	END
END
GO
IF NOT EXISTS(SELECT 'X' FROM UdcMaster A (NOLOCK) INNER JOIN UdcHd B(NOLOCK)  ON A.MasterId=B.MasterId
				 WHERE ColumnName='GSTIN' and MasterName='Distributor Info Master')
BEGIN
	DECLARE @MasterId AS INT
	DECLARE @UdcMasterId AS INT			 
	SELECT @MasterId=MasterId FROM UdcHd with (nolock) WHERE MasterName='Distributor Info Master'
	IF @MasterId>0
	BEGIN
		SELECT @UdcMasterId=ISNULL(MAX(UdcMasterId),1) FROM UdcMaster (NOLOCK)
		SET @UdcMasterId=ISNULL(@UdcMasterId,1)
		IF @UdcMasterId>0
		BEGIN
			INSERT INTO UdcMaster(UdcMasterId,MasterId,ColumnName,ColumnDataType,ColumnSize,
			ColumnPrecision,ColumnMandatory,PickFromDefault,Availability,LastModBy,LastModDate,AuthId,
			AuthDate,Editable)
			SELECT @UdcMasterId+1,@MasterId,'GSTIN','Varchar',25,0,1,0,1,1,Getdate(),1,GETDATE(),0
			
			UPDATE Counters Set CurrValue=@UdcMasterId+1 where TabName='UdcMaster' and FldName='UdcMasterId'
		END
	END
END
GO
IF NOT EXISTS(SELECT 'X' FROM UdcMaster A (NOLOCK) INNER JOIN UdcHd B(NOLOCK)  ON A.MasterId=B.MasterId
				 WHERE ColumnName='PAN Number' and MasterName='Distributor Info Master')
BEGIN				 
DECLARE @MasterId AS INT
DECLARE @UdcMasterId AS INT
	SELECT @MasterId=MasterId FROM UdcHd with (nolock) WHERE MasterName='Distributor Info Master'
	IF @MasterId>0
	BEGIN
		SELECT @UdcMasterId=ISNULL(MAX(UdcMasterId),1) FROM UdcMaster (NOLOCK)
		SET @UdcMasterId=ISNULL(@UdcMasterId,1)
		IF @UdcMasterId>0
		BEGIN
			INSERT INTO UdcMaster(UdcMasterId,MasterId,ColumnName,ColumnDataType,ColumnSize,
			ColumnPrecision,ColumnMandatory,PickFromDefault,Availability,LastModBy,LastModDate,AuthId,
			AuthDate,Editable)
			SELECT @UdcMasterId+1,@MasterId,'PAN Number','Varchar',10,0,1,0,1,1,Getdate(),1,GETDATE(),0
			
			UPDATE Counters Set CurrValue=@UdcMasterId+1 where TabName='UdcMaster' and FldName='UdcMasterId'
		END
	END
END
GO
IF NOT EXISTS(SELECT 'X' FROM UdcMaster A (NOLOCK) INNER JOIN UdcHd B(NOLOCK)  ON A.MasterId=B.MasterId
				 WHERE ColumnName='Distributor Type' and MasterName='Distributor Info Master')
BEGIN
	DECLARE @MasterId AS INT
	DECLARE @UdcMasterId AS INT			 
	SELECT @MasterId=MasterId FROM UdcHd with (nolock) WHERE MasterName='Distributor Info Master'
	IF @MasterId>0
	BEGIN
		SELECT @UdcMasterId=ISNULL(MAX(UdcMasterId),1) FROM UdcMaster (NOLOCK)
		SET @UdcMasterId=ISNULL(@UdcMasterId,1)
		IF @UdcMasterId>0
		BEGIN
			INSERT INTO UdcMaster(UdcMasterId,MasterId,ColumnName,ColumnDataType,ColumnSize,
			ColumnPrecision,ColumnMandatory,PickFromDefault,Availability,LastModBy,LastModDate,AuthId,
			AuthDate,Editable)
			SELECT @UdcMasterId+1,@MasterId,'Distributor Type','Varchar',50,0,1,1,1,1,Getdate(),1,GETDATE(),1
			
			UPDATE Counters Set CurrValue=@UdcMasterId+1 where TabName='UdcMaster' and FldName='UdcMasterId'
		END
	END
END
GO
IF NOT EXISTS(SELECT A.MasterId,A.UdcMasterId  
	FROM UdcMaster A (NOLOCK) 
	INNER JOIN UdcHd B(NOLOCK)  ON A.MasterId=B.MasterId
	INNER JOIN UdcDefault C (NOLOCK) ON C.MasterId=A.MasterId AND C.MasterId=B.MasterId AND C.UdcMasterId=A.UdcMasterId
	WHERE ColumnName='Distributor Type' and MasterName='Distributor Info Master')
BEGIN
	DECLARE @MasterId AS INT
	DECLARE @UdcMasterId AS INT

	SELECT @MasterId=A.MasterId,@UdcMasterId=A.UdcMasterId  
	FROM UdcMaster A (NOLOCK) INNER JOIN UdcHd B(NOLOCK)  ON A.MasterId=B.MasterId
	WHERE ColumnName='Distributor Type' and MasterName='Distributor Info Master'
		
	IF ISNULL(@MasterId,0)<>0 and ISNULL(@UdcMasterId,0)<>0
	BEGIN
		INSERT INTO UdcDefault(SeqId,MasterId,UdcMasterId,ColValue)
		SELECT 1,@MasterId,@UdcMasterId,'Composition' UNION ALL
		SELECT 2,@MasterId,@UdcMasterId,'Regular'			
	END
END
GO
IF NOT EXISTS(SELECT 'X' FROM UdcMaster A (NOLOCK) INNER JOIN UdcHd B(NOLOCK)  ON A.MasterId=B.MasterId
				 WHERE ColumnName='Aadhar No' and MasterName='Distributor Info Master')
BEGIN
	DECLARE @MasterId AS INT
	DECLARE @UdcMasterId AS INT			 
	SELECT @MasterId=MasterId FROM UdcHd with (nolock) WHERE MasterName='Distributor Info Master'
	IF @MasterId>0
	BEGIN
		SELECT @UdcMasterId=ISNULL(MAX(UdcMasterId),1) FROM UdcMaster (NOLOCK)
		SET @UdcMasterId=ISNULL(@UdcMasterId,1)
		IF @UdcMasterId>0
		BEGIN
			INSERT INTO UdcMaster(UdcMasterId,MasterId,ColumnName,ColumnDataType,ColumnSize,
			ColumnPrecision,ColumnMandatory,PickFromDefault,Availability,LastModBy,LastModDate,AuthId,
			AuthDate,Editable)
			SELECT @UdcMasterId+1,@MasterId,'Aadhar No','Varchar',25,0,0,0,1,1,Getdate(),1,GETDATE(),1
			
			UPDATE Counters Set CurrValue=@UdcMasterId+1 where TabName='UdcMaster' and FldName='UdcMasterId'
		END
	END
END
GO
----Supplier Master
IF NOT EXISTS(SELECT 'X' FROM UdcMaster A (NOLOCK) INNER JOIN UdcHd B(NOLOCK)  ON A.MasterId=B.MasterId
				 WHERE ColumnName='GSTIN' and MasterName='Supplier Master')
BEGIN
	DECLARE @MasterId AS INT
	DECLARE @UdcMasterId AS INT	 
	SELECT @MasterId=MasterId FROM UdcHd with (nolock) WHERE MasterName='Supplier Master'
	IF @MasterId>0
	BEGIN
		SELECT @UdcMasterId=ISNULL(MAX(UdcMasterId),1) FROM UdcMaster (NOLOCK)
		SET @UdcMasterId=ISNULL(@UdcMasterId,1)
		IF @UdcMasterId>0
		BEGIN
			INSERT INTO UdcMaster(UdcMasterId,MasterId,ColumnName,ColumnDataType,ColumnSize,
			ColumnPrecision,ColumnMandatory,PickFromDefault,Availability,LastModBy,LastModDate,AuthId,
			AuthDate,Editable)
			SELECT @UdcMasterId+1,@MasterId,'GSTIN','Varchar',25,0,1,0,1,1,Getdate(),1,GETDATE(),0
			
			UPDATE Counters Set CurrValue=@UdcMasterId+1 where TabName='UdcMaster' and FldName='UdcMasterId'
		END
	END
END
GO
IF NOT EXISTS(SELECT 'X' FROM UdcMaster A (NOLOCK) INNER JOIN UdcHd B(NOLOCK)  ON A.MasterId=B.MasterId
				 WHERE ColumnName='State Name' and MasterName='Supplier Master')
BEGIN
	DECLARE @MasterId AS INT
	DECLARE @UdcMasterId AS INT			 
	SELECT @MasterId=MasterId FROM UdcHd with (nolock) WHERE MasterName='Supplier Master'
	IF @MasterId>0
	BEGIN
		SELECT @UdcMasterId=ISNULL(MAX(UdcMasterId),1) FROM UdcMaster (NOLOCK)
		SET @UdcMasterId=ISNULL(@UdcMasterId,1)
		IF @UdcMasterId>0
		BEGIN
			INSERT INTO UdcMaster(UdcMasterId,MasterId,ColumnName,ColumnDataType,ColumnSize,
			ColumnPrecision,ColumnMandatory,PickFromDefault,Availability,LastModBy,LastModDate,AuthId,
			AuthDate,Editable)
			SELECT @UdcMasterId+1,@MasterId,'State Name','Varchar',100,0,1,1,1,1,Getdate(),1,GETDATE(),1
			
			UPDATE Counters Set CurrValue=@UdcMasterId+1 where TabName='UdcMaster' and FldName='UdcMasterId'
		END
	END
END
GO
IF NOT EXISTS(SELECT 'X' FROM UdcMaster A (NOLOCK) INNER JOIN UdcHd B(NOLOCK)  ON A.MasterId=B.MasterId
				 WHERE ColumnName='Status' and MasterName='Supplier Master')
BEGIN
	DECLARE @MasterId AS INT
	DECLARE @UdcMasterId AS INT			 
	SELECT @MasterId=MasterId FROM UdcHd with (nolock) WHERE MasterName='Supplier Master'
	IF @MasterId>0
	BEGIN
		SELECT @UdcMasterId=ISNULL(MAX(UdcMasterId),1) FROM UdcMaster (NOLOCK)
		SET @UdcMasterId=ISNULL(@UdcMasterId,1)
		IF @UdcMasterId>0
		BEGIN
			INSERT INTO UdcMaster(UdcMasterId,MasterId,ColumnName,ColumnDataType,ColumnSize,
			ColumnPrecision,ColumnMandatory,PickFromDefault,Availability,LastModBy,LastModDate,AuthId,
			AuthDate,Editable)
			SELECT @UdcMasterId+1,@MasterId,'Status','Varchar',50,0,1,1,1,1,Getdate(),1,GETDATE(),1
			
			UPDATE Counters Set CurrValue=@UdcMasterId+1 where TabName='UdcMaster' and FldName='UdcMasterId'
		END
	END
END
GO
IF NOT EXISTS(SELECT A.MasterId,A.UdcMasterId,C.* 
	FROM UdcMaster A (NOLOCK) 
	INNER JOIN UdcHd B(NOLOCK)  ON A.MasterId=B.MasterId
	INNER JOIN UdcDefault C (NOLOCK) ON C.MasterId=A.MasterId AND C.MasterId=B.MasterId AND C.UdcMasterId=A.UdcMasterId
	WHERE ColumnName='Status' and MasterName='Supplier Master')
BEGIN
	DECLARE @MasterId AS INT
	DECLARE @UdcMasterId AS INT

	SELECT @MasterId=A.MasterId,@UdcMasterId=A.UdcMasterId  
	FROM UdcMaster A (NOLOCK) INNER JOIN UdcHd B(NOLOCK)  ON A.MasterId=B.MasterId
	WHERE ColumnName='Status' and MasterName='Supplier Master'
		
	IF ISNULL(@MasterId,0)<>0 and ISNULL(@UdcMasterId,0)<>0
	BEGIN
		INSERT INTO UdcDefault(SeqId,MasterId,UdcMasterId,ColValue)
		SELECT 1,@MasterId,@UdcMasterId,'Active' UNION ALL
		SELECT 2,@MasterId,@UdcMasterId,'In Active'			
	END
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE name='Cn2Cs_Prk_DistributorInfo' AND XTYPE='U')
DROP TABLE Cn2Cs_Prk_DistributorInfo
GO
CREATE TABLE Cn2Cs_Prk_DistributorInfo
(
	DistCode 			[nvarchar](50) NULL,
	PanNumber			[Varchar](15) NOT NULL,
	GSTTIN				[Varchar](25) NOT NULL,
	[DistributorType]	[Varchar](20) NOT NULL,
	EmailID				[Varchar](50) NULL,
	ContactNumber		[Varchar](50) NULL,
	StateCode			[Varchar](20) NOT NULL,
	AadharNo            [Varchar](50) NOT NULL,
	DrugLicense         [Varchar](50) NOT NULL,
	DLvalidTill         [datetime] NOT NULL,
	FoodLicense         [Varchar](50) NOT NULL,
	FLvalidTill         [datetime] NOT NULL,
	DownLoadFlag		[nvarchar](10) NULL,
	CreatedDate			[datetime] NULL
)
GO
IF EXISTS(SELECT NAME FROM Sysobjects WHERE XTYPE='P' and NAME='Proc_Import_DistributorInfo')
DROP PROCEDURE Proc_Import_DistributorInfo
GO
CREATE PROCEDURE Proc_Import_DistributorInfo
(
	@Pi_Records TEXT
)
AS
/*********************************
* PROCEDURE		: Proc_Import_DistributorInfo
* PURPOSE		: To Insert records from xml file in the Table Cn2Cs_Prk_DistributorInfo
* CREATED		: S.Moorthi
* CREATED DATE	: 13-04-2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
SET NOCOUNT ON
BEGIN
	DECLARE @hDoc INTEGER
	
	EXEC sp_xml_preparedocument @hDoc OUTPUT,@Pi_Records
	INSERT INTO Cn2Cs_Prk_DistributorInfo(
		DistCode,
		PanNumber,
		GSTTIN,
		DistributorType,
		EmailID,
		ContactNumber,
		StateCode,
		AadharNo,
		DrugLicense,
		DLvalidTill,
		FoodLicense,
		FLvalidTill,
		DownLoadFlag,
		CreatedDate
	)
	SELECT DistCode,
		PanNumber,
		GSTTIN,
		DistributorType,
		EmailID,
		ContactNumber,
		StateCode,
		AadharNo,
		DrugLicense,
		DLvalidTill,
		FoodLicense,
		FLvalidTill,
		ISNULL(DownLoadFlag,'D'),
		GETDATE()
	FROM OPENXML (@hdoc,'/Root/Console2CS_DistributorInfo',1)
	WITH
	(
		DistCode 			[nvarchar](50),
		PanNumber			[Varchar](15),
		GSTTIN				[Varchar](25),
		[DistributorType]	[Varchar](20),
		EmailID				[Varchar](50),
		ContactNumber		[Varchar](50),
		StateCode			[Varchar](20),
		AadharNo            [Varchar](50),
		DrugLicense         [Varchar](50),
		DLvalidTill         [datetime],
		FoodLicense         [Varchar](50),
		FLvalidTill         [datetime],
		DownLoadFlag		[nvarchar](10)
	) XMLObj
	EXEC sp_xml_removedocument @hDoc
END
GO
IF EXISTS(SELECT NAME FROM Sysobjects WHERE XTYPE='P' and NAME='Proc_Cn2Cs_DistributorInfo')
DROP PROCEDURE Proc_Cn2Cs_DistributorInfo
GO
/*
BEGIN TRAN
DELETE FROM ERRORLOG
INSERT INTO Cn2Cs_Prk_DistributorInfo
SELECT 'KAM0107','GAAA53556Y','11GPKPM5222K1G5','REGULAR','Sm@botree.co.in','23432423423','01','D',GETDATE()
EXEC Proc_Cn2Cs_DistributorInfo 0
SELECT * FROM Cn2Cs_Prk_DistributorInfo where downloadflag='D'
Select * from UDCMASTER where Masterid=16
Select * from UDCDETAILS where Masterid=16
SELECT * FROM Distributor
SELECT  * FROM ERRORLOG
ROLLBACK TRAN
 */
CREATE PROCEDURE Proc_Cn2Cs_DistributorInfo
(
	@Po_ErrNo INT OUTPUT
)
AS
/*********************************
* PROCEDURE		: Proc_Cn2Cs_DistributorInfo
* PURPOSE		: To validate the downloaded Distributor Info details from Console
* CREATED		: S.Moorthi
* CREATED DATE	: 13/04/2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
SET NOCOUNT ON
BEGIN

	/*
	COMPOSITE
	REGULAR
	*/
	SET @Po_ErrNo=0
	DECLARE @PanNumber AS VARCHAR(25)
	DECLARE @GSTTIN AS VARCHAR(25)	
	DECLARE @StateName as VARCHAR(200)
	DECLARE @DistributorType AS VARCHAR(20)
	DECLARE @EmailID AS VARCHAR(50)	
	DECLARE @ContactNumber AS VARCHAR(50)
	DECLARE @DistCode AS VARCHAR(50)	
	DECLARE @AadharNo AS VARCHAR(50)
	DECLARE @DrugLicense AS VARCHAR(50)
	DECLARE @DLvalidTill AS DATETIME
	DECLARE @FoodLicense AS VARCHAR(50)
	DECLARE @FLvalidTill AS DATETIME
	
	SET @PanNumber=''
	SET @DistributorType=''
	SET @GSTTIN=''
	SET @StateName=''
	SET @EmailID=''
	SET @ContactNumber=''
	SET @DistCode=''
	SET @AadharNo=''
	SET @DrugLicense=''
	SET @DLvalidTill=''
	SET @FoodLicense=''
	SET @FLvalidTill=''
		
	IF NOT EXISTS(SELECT '*' FROM Cn2Cs_Prk_DistributorInfo WHERE DownLoadFlag='D')
	BEGIN
		RETURN
	END

	SELECT * INTO #Cn2Cs_Prk_DistributorInfo FROM Cn2Cs_Prk_DistributorInfo WHERE DownLoadFlag='D'
	
	DELETE A FROM #Cn2Cs_Prk_DistributorInfo A
	WHERE CreatedDate<>(SELECT MAX(CreatedDate) FROM #Cn2Cs_Prk_DistributorInfo)
	
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 1,'Distributor Info','Distributor Info','Invalid Distributor' FROM #Cn2Cs_Prk_DistributorInfo A 
	WHERE NOT EXISTS(SELECT DISTRIBUTORCODE FROM Distributor B WHERE A.DISTCODE=B.DISTRIBUTORCODE)
	
	DELETE A FROM  #Cn2Cs_Prk_DistributorInfo A
	WHERE NOT EXISTS(SELECT DISTRIBUTORCODE FROM Distributor B WHERE A.DISTCODE=B.DISTRIBUTORCODE)
	
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 1,'Distributor Info','Distributor Info','Distributor Info Should not be empty' 
	FROM #Cn2Cs_Prk_DistributorInfo
	WHERE (RTRIM(LTRIM(ISNULL(PanNumber,'')))='' 
	OR RTRIM(LTRIM(ISNULL(StateCode,'')))='' 
	OR RTRIM(LTRIM(ISNULL(DistributorType,'')))=''	
	OR RTRIM(LTRIM(ISNULL(GSTTIN,'')))='')
	
	
	DELETE A FROM  #Cn2Cs_Prk_DistributorInfo A
	WHERE (RTRIM(LTRIM(ISNULL(PanNumber,'')))='' 
	OR RTRIM(LTRIM(ISNULL(StateCode,'')))='' 
	OR RTRIM(LTRIM(ISNULL(DistributorType,'')))=''	
	OR RTRIM(LTRIM(ISNULL(GSTTIN,'')))='')

	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 6,'Distributor Info','DistributorType','DistributorType Should be COMPOSITE / REGULAR 'e FROM 
	#Cn2Cs_Prk_DistributorInfo A WHERE RTRIM(LTRIM(UPPER(ISNULL(DistributorType,'')))) NOT IN ('Composition','REGULAR')
	
	DELETE A  FROM #Cn2Cs_Prk_DistributorInfo A 
	WHERE RTRIM(LTRIM(UPPER(ISNULL(DistributorType,'')))) NOT IN ('Composition','REGULAR')
		
	IF EXISTS(SELECT DISTINCT DistCode FROM #Cn2Cs_Prk_DistributorInfo A 
	WHERE NOT EXISTS(SELECT StateCode FROM StateMaster B WHERE A.StateCode=ISNULL(B.StateCode,'')))
	BEGIN
		
		INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
		SELECT DISTINCT 4,'Distributor Info','State Code','Distributor Info State Code Not available-' FROM #Cn2Cs_Prk_DistributorInfo A 
		WHERE NOT EXISTS(SELECT StateCode FROM StateMaster B WHERE A.StateCode=ISNULL(B.StateCode,''))
		
		DELETE A  FROM #Cn2Cs_Prk_DistributorInfo A 
		WHERE NOT EXISTS(SELECT StateCode FROM StateMaster B WHERE A.StateCode=ISNULL(B.StateCode,''))
	END
	
	IF EXISTS(SELECT '*' FROM #Cn2Cs_Prk_DistributorInfo CSM
			INNER JOIN StateMaster SM ON CSM.StateCode=SM.StateCode
			WHERE NOT EXISTS(
				SELECT UD.* FROM UdcHD A (NOLOCK)
				INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId 
				INNER JOIN UdcDefault UD (NOLOCK) ON B.MasterId=UD.MasterId and B.UdcMasterId=UD.UdcMasterId
				WHERE UPPER(A.MasterName)='DISTRIBUTOR INFO MASTER' AND B.ColumnName='State Name' 
				AND UD.ColValue=SM.StateName and UD.SeqId=SM.StateId)
				)
	BEGIN
	
		INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
		SELECT DISTINCT 5,'Distributor Info','StateName','Distributor Info State Code Not available ' FROM #Cn2Cs_Prk_DistributorInfo CSM
			INNER JOIN StateMaster SM ON CSM.StateCode=SM.StateCode
			WHERE NOT EXISTS(
				SELECT UD.* FROM UdcHD A (NOLOCK)
				INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId 
				INNER JOIN UdcDefault UD (NOLOCK) ON B.MasterId=UD.MasterId and B.UdcMasterId=UD.UdcMasterId
				WHERE UPPER(A.MasterName)='DISTRIBUTOR INFO MASTER' AND B.ColumnName='State Name' 
				AND UD.ColValue=SM.StateName and UD.SeqId=SM.StateId)
				
			DELETE CSM FROM #Cn2Cs_Prk_DistributorInfo CSM
			INNER JOIN StateMaster SM ON CSM.StateCode=SM.StateCode
			WHERE NOT EXISTS(
				SELECT UD.* FROM UdcHD A (NOLOCK)
				INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId 
				INNER JOIN UdcDefault UD (NOLOCK) ON B.MasterId=UD.MasterId and B.UdcMasterId=UD.UdcMasterId
				WHERE UPPER(A.MasterName)='DISTRIBUTOR INFO MASTER' AND B.ColumnName='State Name' 
				AND UD.ColValue=SM.StateName and UD.SeqId=SM.StateId)
	END

	SET @AadharNo=''
	SET @DrugLicense=''
	SET @DLvalidTill=''
	SET @FoodLicense=''
	SET @FLvalidTill=''
	
	SELECT @GSTTIN=GSTTIN,@DistributorType=DistributorType,@PanNumber=PanNumber,@StateName=B.StateName,
	@EmailID=EmailID,@ContactNumber=ContactNumber,@DistCode=DistCode,@AadharNo=AadharNo,
	@DrugLicense=DrugLicense,@DLvalidTill=ISNULL(DLvalidTill,'1990-01-01'),
	@FoodLicense=FoodLicense,@FLvalidTill=ISNULL(FLvalidTill,'1990-01-01') FROM #Cn2Cs_Prk_DistributorInfo A 
	INNER JOIN StateMaster B ON A.StateCode=B.StateCode
	
	IF RTRIM(LTRIM(UPPER(ISNULL(@GSTTIN,''))))<>''
	BEGIN
		IF (SELECT DBO.Fn_ISGSTINNumber(@GSTTIN))=1
		BEGIN
			INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
			SELECT DISTINCT 1,'Retailer GST','GSTIN','Invalid GST Tin Number'
			SET @Po_ErrNo =1
		END
	END
	
	IF RTRIM(LTRIM(UPPER(ISNULL(@PanNumber,''))))<>''
	BEGIN
		IF (SELECT DBO.Fn_ISPanNumber(@PanNumber))=1
		BEGIN
			INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
			SELECT DISTINCT 1,'Retailer GST','PanNumber','Invalid Pan Number'
			SET @Po_ErrNo =1
		END
	END
	
	IF @Po_ErrNo=0
	BEGIN
	
		IF ISNULL(@ContactNumber,'')<>''
		BEGIN
			UPDATE Distributor SET PhoneNo=@ContactNumber
		END
		
		IF ISNULL(@EmailID,'')<>''
		BEGIN
			UPDATE Distributor SET EmailID=@EmailID
		END
		
		
		DELETE FROM ETL_Prk_CN2CS_UdcDetails WHERE MasterName='DISTRIBUTOR INFO MASTER' AND [Column Code]=@DistCode
		
		INSERT INTO ETL_Prk_CN2CS_UdcDetails (MasterName,ColumnName,[Column Code],[ColumnValue],UpdateFlag)
		SELECT DISTINCT 'DISTRIBUTOR INFO MASTER','State Name',@DistCode,@StateName,0 UNION ALL
		SELECT DISTINCT 'DISTRIBUTOR INFO MASTER','Distributor Type',@DistCode,@DistributorType,0 --UNION ALL
		
		IF RTRIM(LTRIM(UPPER(ISNULL(@AadharNo,''))))<>''
		BEGIN
			INSERT INTO ETL_Prk_CN2CS_UdcDetails (MasterName,ColumnName,[Column Code],[ColumnValue],UpdateFlag)
			SELECT DISTINCT 'DISTRIBUTOR INFO MASTER','Aadhar No',@DistCode,@AadharNo,0 
		END
		
		IF RTRIM(LTRIM(UPPER(ISNULL(@GSTTIN,''))))<>''
		BEGIN
			INSERT INTO ETL_Prk_CN2CS_UdcDetails (MasterName,ColumnName,[Column Code],[ColumnValue],UpdateFlag)
			SELECT DISTINCT 'DISTRIBUTOR INFO MASTER','GSTIN',@DistCode,@GSTTIN,0 
		END
		
		IF RTRIM(LTRIM(UPPER(ISNULL(@PanNumber,''))))<>''
		BEGIN
			--IF EXISTS(SELECT * FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.ID 
			--	WHERE A.NAME='Distributor' and B.Name='PANNumber' AND A.XTYPE='U')
			--BEGIN
			--	UPDATE Distributor SET PANNumber=@PanNumber
			--END
			--ELSE
			--BEGIN
				INSERT INTO ETL_Prk_CN2CS_UdcDetails (MasterName,ColumnName,[Column Code],[ColumnValue],UpdateFlag)	
				SELECT DISTINCT 'DISTRIBUTOR INFO MASTER','PAN Number',@DistCode,@PanNumber,0
			--END
		END
		
		IF EXISTS(SELECT * FROM ETL_Prk_CN2CS_UdcDetails WHERE MasterName='DISTRIBUTOR INFO MASTER')
		BEGIN		
			EXEC Proc_Validate_CN2CS_UdcDetails 0			
		END
	END
	
	UPDATE E SET E.DownLoadFlag='Y' FROM UdcHD A (NOLOCK)
	INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId 
	INNER JOIN UdcDetails C (NOLOCK) ON C.MasterId=B.MasterId AND C.UdcMasterId=C.UdcMasterId 
	INNER JOIN Distributor D (NOLOCK) ON D.DistributorId=C.MasterRecordId 
	INNER JOIN Cn2Cs_Prk_DistributorInfo E (NOLOCK) ON E.DistCode=D.DistributorCode AND C.ColumnValue=E.GSTTIN
	WHERE UPPER(A.MasterName)='DISTRIBUTOR INFO MASTER' AND B.ColumnName='GSTIN' 
		
	RETURN
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE name='Cn2Cs_Prk_ProductHSNCode' AND XTYPE='U')
DROP TABLE Cn2Cs_Prk_ProductHSNCode
GO
CREATE TABLE Cn2Cs_Prk_ProductHSNCode
(
	DistCode 	[nvarchar](100) NULL,
	CompanyCode	 [Varchar](75) NOT NULL,
	HSNCode	 [Varchar](100) NOT NULL,
	HSNDescription	 [Varchar](100) NOT NULL,
	DownLoadFlag	 [nvarchar](10) NULL,
	CreatedDate	 [datetime] NULL
)
GO
IF EXISTS(SELECT NAME FROM Sysobjects WHERE XTYPE='P' and NAME='Proc_Import_ProductHSNCode')
DROP PROCEDURE Proc_Import_ProductHSNCode
GO
CREATE PROCEDURE Proc_Import_ProductHSNCode
(
	@Pi_Records TEXT
)
AS
/*********************************
* PROCEDURE		: Proc_Import_ProductHSNCode
* PURPOSE		: To Insert records from xml file in the Table Cn2Cs_Prk_ProductHSNCode
* CREATED		: S.Moorthi
* CREATED DATE	: 10-04-2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
SET NOCOUNT ON
BEGIN
	DECLARE @hDoc INTEGER
	
	EXEC sp_xml_preparedocument @hDoc OUTPUT,@Pi_Records
	INSERT INTO Cn2Cs_Prk_ProductHSNCode(
		DistCode,
		CompanyCode,
		HSNCode,
		HSNDescription,
		DownLoadFlag,
		CreatedDate
	)
	SELECT DistCode,
		CompanyCode,
		HSNCode,
		HSNDescription,
		ISNULL(DownLoadFlag,'D'),
		GETDATE()
	FROM OPENXML (@hdoc,'/Root/Console2CS_ProductHSNCode',1)
	WITH
	(
		DistCode 	[nvarchar](100),
		CompanyCode	 [Varchar](75),
		HSNCode	 [Varchar](100),
		HSNDescription	 [Varchar](100),
		DownLoadFlag	 [nvarchar](100)
	) XMLObj
	EXEC sp_xml_removedocument @hDoc
END
GO
IF NOT EXISTS(SELECT 'X' FROM UdcMaster A (NOLOCK) INNER JOIN UdcHd B(NOLOCK)  ON A.MasterId=B.MasterId
			 WHERE ColumnName='HSN Code' and MasterName='Product Master')
BEGIN
	DECLARE @MasterId AS INT
	DECLARE @UdcMasterId AS INT	
				 
	SELECT @MasterId=MasterId FROM UdcHd with (nolock) WHERE MasterName='Product Master'
	IF @MasterId>0
	BEGIN
		SELECT @UdcMasterId=ISNULL(MAX(UdcMasterId),1) FROM UdcMaster (NOLOCK)
		SET @UdcMasterId=ISNULL(@UdcMasterId,1)
		IF @UdcMasterId>0
		BEGIN
			INSERT INTO UdcMaster(UdcMasterId,MasterId,ColumnName,ColumnDataType,ColumnSize,
			ColumnPrecision,ColumnMandatory,PickFromDefault,Availability,LastModBy,LastModDate,AuthId,
			AuthDate,Editable)
			SELECT @UdcMasterId+1,@MasterId,'HSN Code','Varchar',100,0,1,1,1,1,Getdate(),1,GETDATE(),0
			
			UPDATE Counters Set CurrValue=@UdcMasterId+1 where TabName='UdcMaster' and FldName='UdcMasterId'
		END
	END
END
GO
IF NOT EXISTS(SELECT 'X' FROM UdcMaster A (NOLOCK) INNER JOIN UdcHd B(NOLOCK)  ON A.MasterId=B.MasterId
			 WHERE ColumnName='HSN Description' and MasterName='Product Master')
BEGIN
	DECLARE @MasterId AS INT
	DECLARE @UdcMasterId AS INT	
				 
	SELECT @MasterId=MasterId FROM UdcHd with (nolock) WHERE MasterName='Product Master'
	IF @MasterId>0
	BEGIN
		SELECT @UdcMasterId=ISNULL(MAX(UdcMasterId),1) FROM UdcMaster (NOLOCK)
		SET @UdcMasterId=ISNULL(@UdcMasterId,1)
		IF @UdcMasterId>0
		BEGIN
			INSERT INTO UdcMaster(UdcMasterId,MasterId,ColumnName,ColumnDataType,ColumnSize,
			ColumnPrecision,ColumnMandatory,PickFromDefault,Availability,LastModBy,LastModDate,AuthId,
			AuthDate,Editable)
			SELECT @UdcMasterId+1,@MasterId,'HSN Description','Varchar',100,0,1,1,1,1,Getdate(),1,GETDATE(),0
			
			UPDATE Counters Set CurrValue=@UdcMasterId+1 where TabName='UdcMaster' and FldName='UdcMasterId'
		END
	END
END
GO
IF EXISTS(SELECT NAME FROM Sysobjects WHERE XTYPE='P' and NAME='Proc_Cn2Cs_ProductHSNCode')
DROP PROCEDURE Proc_Cn2Cs_ProductHSNCode
GO
/*
 BEGIN TRAN
 EXEC Proc_Cn2Cs_ProductHSNCode 0
 SELECT * FROM Cn2Cs_Prk_ProductHSNCode where downloadflag='D'
 Select * from UDCMASTER where Masterid=1
 SELECT  * FROM ERRORLOG
 ROLLBACK TRAN
 */
CREATE PROCEDURE [Proc_Cn2Cs_ProductHSNCode]
(
	@Po_ErrNo INT OUTPUT
)
AS
/*********************************
* PROCEDURE		: Proc_Cn2Cs_ProductHSNCode
* PURPOSE		: To validate the downloaded Product HSN Code details from Console
* CREATED		: S.Moorthi
* CREATED DATE	: 10/04/2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
SET NOCOUNT ON
BEGIN
	SET @Po_ErrNo=0
	DECLARE @CurrValue as INT	
	DECLARE @UdcMasterId AS INT
	
	CREATE TABLE #ToAvoidUDCProduct
	(
		PrdCCode NVARCHAR(200)
	)
	
	CREATE TABLE #Cn2Cs_Prk_ProductHSNCode
	(
		CompanyCode	 [Varchar](75),
		HSNCode	 [Varchar](100),
		HSNDescription	 [Varchar](100),
		DownLoadFlag	[varchar](5)	
	)
		
	DELETE FROM Cn2Cs_Prk_ProductHSNCode WHERE DownLoadFlag='Y'
	
	IF NOT EXISTS(SELECT 'X' FROM Cn2Cs_Prk_ProductHSNCode (NOLOCK) WHERE DownLoadFlag='D')
	BEGIN
		RETURN
	END
	
	SELECT CompanyCode ,MAX(CreatedDate) as CreatedDate
	INTO #LatestMaster
	FROM Cn2Cs_Prk_ProductHSNCode WHERE DownLoadFlag='D'
	GROUP BY CompanyCode
	
	INSERT INTO #Cn2Cs_Prk_ProductHSNCode(CompanyCode,HSNCode,HSNDescription,DownLoadFlag)
	SELECT DISTINCT A.CompanyCode,HSNCode,HSNDescription,DownLoadFlag
	FROM Cn2Cs_Prk_ProductHSNCode A (NOLOCK) INNER JOIN #LatestMaster B ON A.CompanyCode=B.CompanyCode
	and A.CreatedDate=B.CreatedDate
	WHERE DownLoadFlag='D'	
			
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 1,'Product HSN','HSN Code,HSN Description','HSN Code/Description Should not be empty' 
	FROM #Cn2Cs_Prk_ProductHSNCode
	WHERE (RTRIM(LTRIM(ISNULL(CompanyCode,'')))='' 
	OR RTRIM(LTRIM(ISNULL(HSNCode,'')))='' 
	OR RTRIM(LTRIM(ISNULL(HSNDescription,'')))='')
	
	DELETE A FROM #Cn2Cs_Prk_ProductHSNCode A
	WHERE (RTRIM(LTRIM(ISNULL(CompanyCode,'')))='' 
	OR RTRIM(LTRIM(ISNULL(HSNCode,'')))='' 
	OR RTRIM(LTRIM(ISNULL(HSNDescription,'')))='')	
	
	INSERT INTO #ToAvoidUDCProduct (PrdCCode)
	SELECT CompanyCode FROM #Cn2Cs_Prk_ProductHSNCode
	GROUP BY CompanyCode HAVING COUNT(CompanyCode)>1
	
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT  2,'Product','ProductCode','Product Code HSN Not allow more than 1-'+CompanyCode FROM #Cn2Cs_Prk_ProductHSNCode
	GROUP BY CompanyCode HAVING COUNT(CompanyCode)>1	
	
	INSERT INTO #ToAvoidUDCProduct (PrdCCode)
	SELECT DISTINCT CompanyCode FROM #Cn2Cs_Prk_ProductHSNCode  A(NOLOCK) 
	WHERE NOT EXISTS(SELECT PRDID FROM Product B(NOLOCK) WHERE A.CompanyCode=B.PrdCCode) and DownLoadFlag='D'

	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 1,'Product','ProductCode','Product Code not Available-'+CompanyCode FROM #Cn2Cs_Prk_ProductHSNCode A (NOLOCK) 
	WHERE NOT EXISTS(SELECT PRDID FROM Product B(NOLOCK) WHERE A.CompanyCode=B.PrdCCode) and DownLoadFlag='D'
	
	DELETE FROM ETL_Prk_CN2CS_UdcDetails WHERE MasterName='PRODUCT MASTER' 

	INSERT INTO ETL_Prk_CN2CS_UdcDetails (MasterName,ColumnName,[Column Code],[ColumnValue],UpdateFlag)
	SELECT DISTINCT 'PRODUCT MASTER','HSN Code',CompanyCode,HSNCode,0 FROM #Cn2Cs_Prk_ProductHSNCode 
	WHERE CompanyCode NOT IN (SELECT PrdCCode FROM #ToAvoidUDCProduct) AND DownloadFlag = 'D' 
	
	INSERT INTO ETL_Prk_CN2CS_UdcDetails (MasterName,ColumnName,[Column Code],[ColumnValue],UpdateFlag)
	SELECT DISTINCT 'PRODUCT MASTER','HSN Description',CompanyCode,HSNDescription,0 FROM #Cn2Cs_Prk_ProductHSNCode 
	WHERE CompanyCode NOT IN (SELECT PrdCCode FROM #ToAvoidUDCProduct) AND DownloadFlag = 'D' 

	IF EXISTS(SELECT * FROM ETL_Prk_CN2CS_UdcDetails WHERE MasterName='PRODUCT MASTER')
	BEGIN
		EXEC Proc_Validate_CN2CS_UdcDetails 0
	END
	
	UPDATE E SET E.DownLoadFlag='Y' FROM UdcHD A (NOLOCK)
	INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId 
	INNER JOIN UdcDetails C (NOLOCK) ON C.MasterId=B.MasterId AND C.UdcMasterId=C.UdcMasterId 
	INNER JOIN Product D (NOLOCK) ON D.PrdId=C.MasterRecordId 
	INNER JOIN Cn2Cs_Prk_ProductHSNCode E (NOLOCK) ON E.CompanyCode=D.PrdCCode AND C.ColumnValue=E.HSNCode
	WHERE UPPER(A.MasterName)='PRODUCT MASTER' AND B.ColumnName='HSN Code' AND NOT EXISTS(
	SELECT PrdCCode from #ToAvoidUDCProduct C WHERE C.PrdCCode=E.CompanyCode)
		
	RETURN
END
GO
IF NOT EXISTS(SELECT * FROM Counters WHERE TABNAME='ServiceMaster' and FldName='ServiceId')
BEGIN	
	INSERT INTO Counters(TabName,FldName,Prefix,Zpad,CmpId,CurrValue,ModuleName,
	DisplayFlag,CurYear,Availability,LastModBy,LastModDate,AuthId,AuthDate)	
	SELECT 'ServiceMaster','ServiceId','',0,1,0,'ServiceMaster',0,2017,1,1,Getdate(),1,Getdate()
END
GO
IF EXISTS(SELECT NAME FROM Sysobjects WHERE XTYPE='P' and NAME='Proc_Import_ServiceMaster')
DROP PROCEDURE Proc_Import_ServiceMaster
GO
CREATE PROCEDURE Proc_Import_ServiceMaster
(
	@Pi_Records TEXT
)
AS
/*********************************
* PROCEDURE		: Proc_Import_ServiceMaster
* PURPOSE		: To Insert records from xml file in the Table Proc_Cn2Cs_ServiceMaster
* CREATED		: S.Moorthi
* CREATED DATE	: 13-04-2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
SET NOCOUNT ON
BEGIN
	DECLARE @hDoc INTEGER
	
	EXEC sp_xml_preparedocument @hDoc OUTPUT,@Pi_Records
	INSERT INTO Cn2Cs_Prk_ServiceMaster(
		DistCode,
		SerCode,
		SerName,
		SerACCode,
		SerACName,
		TaxGroup,
		SerStatus,
		DownLoadFlag,
		CreatedDate
	)
	SELECT DistCode,
		SerCode,
		SerName,
		SerACCode,
		SerACName,
		TaxGroup,
		SerStatus,
		ISNULL(DownLoadFlag,'D'),
		GETDATE()
	FROM OPENXML (@hdoc,'/Root/Console2CS_ServiceMaster',1)
	WITH
	(
		DistCode 	[nvarchar](100),
		SerCode	Varchar(100),
		SerName	Varchar(100),
		SerACCode	Varchar(50),
		SerACName	Varchar(100),
		TaxGroup	Varchar(50),
		SerStatus   Varchar(50),
		DownLoadFlag	 [nvarchar](10)
	) XMLObj
	EXEC sp_xml_removedocument @hDoc
END
GO
IF EXISTS(SELECT NAME FROM Sysobjects WHERE XTYPE='P' and NAME='Proc_Cn2Cs_ServiceMaster')
DROP PROCEDURE Proc_Cn2Cs_ServiceMaster
GO
/*
BEGIN TRAN
INSERT INTO Cn2Cs_Prk_ServiceMaster
SELECT '','Ser1','Service1','000234234','Ser Account Name','','D',GETDATE() UNION
SELECT '','Ser2','Service2','000234235','Ser Account Name1','RTN00001','D',GETDATE()
EXEC Proc_Cn2Cs_ServiceMaster 0
select * from Cn2Cs_Prk_ServiceMaster
SELECT * FROM ServiceMAster
SELECT * FROM COUNTERS WHERE TABNAME='ServiceMaster'
ROLLBACK TRAN
*/
CREATE PROCEDURE [Proc_Cn2Cs_ServiceMaster]
(
	@Po_ErrNo INT OUTPUT
)
AS
/*********************************
* PROCEDURE		: Proc_Cn2Cs_ServiceMaster
* PURPOSE		: To validate the downloaded State details from Console
* CREATED		: S.Moorthi
* CREATED DATE	: 13/04/2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
SET NOCOUNT ON
BEGIN
	SET @Po_ErrNo=0
	DECLARE @CurrValue as INT
	
	CREATE TABLE #Cn2Cs_Prk_ServiceMaster
	(
		SerCode		varchar(100),
		SerName		varchar(100),
		SerACCode	varchar(50),
		SerACName	varchar(100),
		TaxGroup	varchar(50),
		TaxGroupId	INT,
		SerStatus	varchar(50),
		DownLoadFlag nvarchar(10)
		
	)

	DELETE FROM Cn2Cs_Prk_ServiceMaster WHERE DownLoadFlag='Y'
	
	IF NOT EXISTS(SELECT 'X' FROM Cn2Cs_Prk_ServiceMaster (NOLOCK) WHERE DownLoadFlag='D')
	BEGIN
		RETURN
	END
	
	SELECT SerCode,SerACCode,MAX(CreatedDate) as CreatedDate
	INTO #LatestMaster
	FROM Cn2Cs_Prk_ServiceMaster WHERE DownLoadFlag='D'
	GROUP BY SerCode,SerACCode
	
	INSERT INTO #Cn2Cs_Prk_ServiceMaster(SerCode,SerName,SerACCode,SerACName,TaxGroup,TaxGroupId,SerStatus,DownLoadFlag)
	SELECT DISTINCT A.SerCode,A.SerName,A.SerACCode,A.SerACName,A.TaxGroup,0,SerStatus,A.DownLoadFlag
	FROM Cn2Cs_Prk_ServiceMaster A (NOLOCK) INNER JOIN #LatestMaster B ON A.SerCode=B.SerCode AND A.SerACCode=B.SerACCode
	and A.CreatedDate=B.CreatedDate
	WHERE DownLoadFlag='D' 
	
	
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 1,'Service Master','ServiceCode,ServiceName,ServiceType','Service Details Should not be empty' FROM #Cn2Cs_Prk_ServiceMaster
	WHERE (
	LEN(RTRIM(LTRIM(ISNULL(SerCode,''))))=0 
	OR LEN(RTRIM(LTRIM(ISNULL(SerName,''))))=0 
	OR LEN(RTRIM(LTRIM(ISNULL(SerACCode,''))))=0 
	OR LEN(RTRIM(LTRIM(ISNULL(SerACName,''))))=0 
	--OR LEN(RTRIM(LTRIM(ISNULL(TaxGroup,''))))=0 
	)

	DELETE A FROM #Cn2Cs_Prk_ServiceMaster A
	WHERE 
	(
		LEN(RTRIM(LTRIM(ISNULL(SerCode,''))))=0 
		OR LEN(RTRIM(LTRIM(ISNULL(SerName,''))))=0 
		OR LEN(RTRIM(LTRIM(ISNULL(SerACCode,''))))=0 
		OR LEN(RTRIM(LTRIM(ISNULL(SerACName,''))))=0 
		--OR LEN(RTRIM(LTRIM(ISNULL(TaxGroup,''))))=0 
	)
	
	
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 1,'ServiceMaster','Service Status','Service Status Should be ACTIVE / INACTIVE' FROM 
	#Cn2Cs_Prk_ServiceMaster A WHERE RTRIM(LTRIM(UPPER(ISNULL(SerStatus,'')))) NOT IN ('ACTIVE','INACTIVE')
	
	DELETE A  FROM #Cn2Cs_Prk_ServiceMaster A 
	WHERE RTRIM(LTRIM(UPPER(ISNULL(SerStatus,'')))) NOT IN ('ACTIVE','INACTIVE')
	
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 1,'ServiceMaster','Service Tax Group','Service Tax Group Code Not Available '+A.TaxGroup FROM 
	#Cn2Cs_Prk_ServiceMaster A WHERE NOT EXISTS(SELECT * FROM ServiceTaxGroupMaster B WHERE A.TaxGroup=B.ServiceGroupCode)
	DELETE A  FROM #Cn2Cs_Prk_ServiceMaster A 
	WHERE NOT EXISTS(SELECT * FROM ServiceTaxGroupMaster B WHERE A.TaxGroup=B.ServiceGroupCode)
	UPDATE A SET A.TaxGroupId=B.ServiceGroupId FROM #Cn2Cs_Prk_ServiceMaster A 
	INNER JOIN ServiceTaxGroupMaster B (NOLOCK) ON A.TaxGroup=B.ServiceGroupCode
	WHERE ISNULL(A.TaxGroup,'')<>'' 
	
	SELECT DISTINCT A.SerCode,A.SerName,A.SerACCode,SerACName,A.TaxGroupId,SerStatus
	INTO #ExistsData
	FROM #Cn2Cs_Prk_ServiceMaster A (NOLOCK)
	WHERE EXISTS(SELECT SerCode FROM ServiceMaster C (NOLOCK) WHERE C.SerCode=A.SerCode and C.SerACCode=A.SerACCode)
	and DownLoadFlag='D'
		
	UPDATE A SET A.SerName=B.SerName,A.SerACName=B.SerACName,A.TaxGroupId=B.TaxGroupId,
	A.SerStatus=(CASE WHEN RTRIM(LTRIM(UPPER(ISNULL(B.SerStatus,''))))='ACTIVE' THEN 1 ELSE 0 END) FROM
	ServiceMaster A INNER JOIN #ExistsData B ON A.SerCode=B.SerCode and A.SerACCode=B.SerACCode
			
	SELECT @CurrValue=CurrValue FROM Counters WHERE TABNAME='ServiceMaster' and FldName='ServiceId'
	
	INSERT INTO ServiceMaster
	(
		ServiceId,SerCode,SerName,SerACCode,SerACName,TaxGroupId,SerStatus,Availability,LastModBy,LastModDate,AuthId,AuthDate
	)
	SELECT @CurrValue+ROW_NUMBER() OVER(ORDER BY SerCode,SerACCode),SerCode,SerName,SerACCode,SerACName,TaxGroupId,
	CASE WHEN RTRIM(LTRIM(UPPER(ISNULL(A.SerStatus,''))))='ACTIVE' THEN 1 ELSE 0 END,1,1,Getdate(),1,GETDATE()
	FROM #Cn2Cs_Prk_ServiceMaster A WHERE NOT EXISTS(
	SELECT SerCode FROM ServiceMaster C (NOLOCK) WHERE C.SerCode=A.SerCode and C.SerACCode=A.SerACCode)
		
	UPDATE Counters Set CurrValue=(SELECT ISNULL(MAX(ServiceId),0) FROM ServiceMaster) 
	WHERE TABNAME='ServiceMaster' and FldName='ServiceId'
	
	UPDATE A SET DownLoadFlag='Y' FROM Cn2Cs_Prk_ServiceMaster A 
	INNER JOIN ServiceMaster B ON A.SerCode=B.SerCode AND A.SerACCode=B.SerACCode
	
	RETURN
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.ID 
WHERE A.NAME='Cn2Cs_Prk_SupplierMaster' AND B.NAME='StateCode' AND A.XTYPE='U')
BEGIN

	IF EXISTS(SELECT * FROM Cn2Cs_Prk_SupplierMaster(NOLOCK) WHERE DOWNLOADFlag='D')
	BEGIN
			IF NOT EXISTS(SELECT * FROM SYSOBJECTS A WHERE A.NAME='Cn2Cs_Prk_SupplierMaster_BkGST' AND A.XTYPE='U')
			BEGIN
			CREATE TABLE Cn2Cs_Prk_SupplierMaster_BkGST(
				[DistCode] [nvarchar](100) NULL,
				[SpmCode] [nvarchar](100) NULL,
				[SpmName] [nvarchar](100) NULL,
				[SpmAdd1] [nvarchar](100) NULL,
				[SpmAdd2] [nvarchar](100) NULL,
				[SpmAdd3] [nvarchar](100) NULL,
				[TaxGroupCode] [nvarchar](100) NULL,
				[PhoneNo] [nvarchar](100) NULL,
				[FaxNo] [nvarchar](100) NULL,
				[EmailId] [nvarchar](100) NULL,
				[ContPerson] [nvarchar](100) NULL,
				[DefaultSpm] [nvarchar](100) NULL,				
				[DownLoadFlag] [nvarchar](100) NULL,
				[CreatedDate] [datetime] NULL
			) ON [PRIMARY]
			END
	

			INSERT INTO Cn2Cs_Prk_SupplierMaster_BkGST(DistCode,SpmCode,SpmName,SpmAdd1,SpmAdd2,SpmAdd3,TaxGroupCode,
			PhoneNo,FaxNo,EmailId,ContPerson,DefaultSpm,DownLoadFlag,CreatedDate)
			SELECT DistCode,SpmCode,SpmName,SpmAdd1,SpmAdd2,SpmAdd3,TaxGroupCode,
			PhoneNo,FaxNo,EmailId,ContPerson,DefaultSpm,DownLoadFlag,CreatedDate
			FROM Cn2Cs_Prk_SupplierMaster (NOLOCK) WHERE DOWNLOADFlag='D'
	END
	
	DROP TABLE Cn2Cs_Prk_SupplierMaster
	
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS A WHERE A.NAME='Cn2Cs_Prk_SupplierMaster' AND A.XTYPE='U')
BEGIN
CREATE TABLE Cn2Cs_Prk_SupplierMaster
(
	[DistCode]		[nvarchar](100) NULL,
	[SpmCode]		[nvarchar](100) NULL,
	[SpmName]		[nvarchar](100) NULL,
	[SpmAdd1]		[nvarchar](100) NULL,
	[SpmAdd2]		[nvarchar](100) NULL,
	[SpmAdd3]		[nvarchar](100) NULL,
	[TaxGroupCode]  [nvarchar](100) NULL,
	[PhoneNo]		[nvarchar](100) NULL,
	[FaxNo]			[nvarchar](100) NULL,
	[EmailId]		[nvarchar](100) NULL,
	[ContPerson]	[nvarchar](100) NULL,
	[DefaultSpm]	[nvarchar](100) NULL,
	[SpmTinNo]		[nvarchar](50) NULL,
	[StateCode]		[nVarchar](20) NULL,
	[GSTTIN]		[nVarchar](20) NULL,
	[SupplierStatus] [nVarchar](50) NULL,
	[DownLoadFlag]	[nvarchar](100) NULL,
	[CreatedDate]	[datetime] NULL
)
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS A WHERE A.NAME='Cn2Cs_Prk_SupplierMaster_BkGST' AND A.XTYPE='U')
BEGIN
	IF EXISTS(SELECT '*' FROM Cn2Cs_Prk_SupplierMaster_BkGST(NOLOCK))
	BEGIN
		INSERT INTO Cn2Cs_Prk_SupplierMaster(DistCode,SpmCode,SpmName,SpmAdd1,SpmAdd2,SpmAdd3,TaxGroupCode,
			PhoneNo,FaxNo,EmailId,ContPerson,DefaultSpm,SpmTinNo,StateCode,GSTTIN,DownLoadFlag,CreatedDate)
		SELECT DistCode,SpmCode,SpmName,SpmAdd1,SpmAdd2,SpmAdd3,TaxGroupCode,
			PhoneNo,FaxNo,EmailId,ContPerson,DefaultSpm,'','','',DownLoadFlag,CreatedDate
		FROM Cn2Cs_Prk_SupplierMaster_BkGST (NOLOCK)
	END
	
	DROP TABLE Cn2Cs_Prk_SupplierMaster_BkGST	
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE NAME='Proc_Import_SupplierMaster' AND XTYPE='P')
DROP PROCEDURE Proc_Import_SupplierMaster
GO
CREATE PROCEDURE Proc_Import_SupplierMaster
(
	@Pi_Records TEXT
)
AS
/*********************************
* PROCEDURE		: Proc_Import_SupplierMaster
* PURPOSE		: To Insert the records from xml file in the Table SupplierMaster
* CREATED		: Nandakumar R.G
* CREATED DATE	: 26/10/2010
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
SET NOCOUNT ON
BEGIN
	DECLARE @hDoc INTEGER
	EXEC sp_xml_preparedocument @hDoc OUTPUT,@Pi_Records
	INSERT INTO Cn2Cs_Prk_SupplierMaster(DistCode,SpmCode,SpmName,SpmAdd1,SpmAdd2,SpmAdd3,TaxGroupCode,PhoneNo,
	FaxNo,EmailId,ContPerson,DefaultSpm,SpmTinNo,StateCode,GSTTIN,SupplierStatus,DownLoadFlag)
	SELECT DistCode,SpmCode,SpmName,SpmAdd1,SpmAdd2,SpmAdd3,TaxGroupCode,PhoneNo,
	FaxNo,EmailId,ContPerson,DefaultSpm,SpmTinNo,ISNULL(StateCode,''),ISNULL(GSTTIN,''),ISNULL(SupplierStatus,''),ISNULL(DownLoadFlag,'D')
	FROM OPENXML(@hdoc,'/Root/Console2CS_SupplierMaster',1)
	WITH (
				[DistCode]			NVARCHAR(100),
				[SpmCode]			NVARCHAR(100),
				[SpmName]			NVARCHAR(100),
				[SpmAdd1]			NVARCHAR(100),
				[SpmAdd2]			NVARCHAR(100),
				[SpmAdd3]			NVARCHAR(100),
				[TaxGroupCode]		NVARCHAR(100),
				[PhoneNo]			NVARCHAR(100),
				[FaxNo]				NVARCHAR(100),
				[EmailId]			NVARCHAR(100),
				[ContPerson]		NVARCHAR(100),
				[DefaultSpm]		NVARCHAR(100),
				[SpmTinNo]			NVARCHAR(50),
				[StateCode]			[nVarchar](20),
				[GSTTIN]			[nVarchar](20),
				[SupplierStatus] [nVarchar](50),
				[DownLoadFlag]		NVARCHAR(10)
	     ) XMLObj
	EXECUTE sp_xml_removedocument @hDoc
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE NAME='Proc_Cn2Cs_SupplierMaster' AND XTYPE='P')
DROP PROCEDURE Proc_Cn2Cs_SupplierMaster
GO
CREATE PROCEDURE Proc_Cn2Cs_SupplierMaster
(
	@Po_ErrNo INT OUTPUT
)
AS
/*********************************
* PROCEDURE		: Proc_Cn2Cs_SupplierMaster
* PURPOSE		: To validate the downloaded Supplier details from Console
* CREATED		: Nandakumar R.G
* CREATED DATE	: 15/10/2010
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
SET NOCOUNT ON
BEGIN
	DECLARE @TabName		NVARCHAR(100)
	DECLARE @ErrDesc		NVARCHAR(1000)
	DECLARE @SpmCode 		NVARCHAR(50)
	DECLARE @SpmName  		NVARCHAR(100)
	DECLARE @SpmAdd1	  	NVARCHAR(100)
	DECLARE @SpmAdd2		NVARCHAR(100)
	DECLARE @SpmAdd3		NVARCHAR(100)
	DECLARE @TaxGrpCode  	NVARCHAR(100)
	DECLARE @PhoneNo  		NVARCHAR(100)
	DECLARE @FaxNo  		NVARCHAR(100)
	DECLARE @EmailId  		NVARCHAR(100)
	DECLARE @ContPerson  	NVARCHAR(100)
	DECLARE @SpmTinNo       NVARCHAR(100)
	DECLARE @DefaultSpm  	NVARCHAR(100)
	DECLARE @AcCode			NVARCHAR(100)
	DECLARE @GSTTIN AS VARCHAR(100)
	DECLARE @StateCode AS VARCHAR(100)
	DECLARE @StateName AS VARCHAR(100)
	DECLARE @SupplierStatus AS VARCHAR(100)
	
	DECLARE @SpmId  		INT
	DECLARE @CoaId  		INT
	DECLARE @CmpId  		INT
	DECLARE @TaxGrpId  		INT
	DECLARE @Exist		 	INT
	SET @TabName = 'Cn2Cs_Prk_SupplierMaster'
	SET @Po_ErrNo=0
	DECLARE @GSTEnabled AS TINYINT
	SET @GSTEnabled=0
	IF EXISTS(SELECT 'X' FROM GSTConfiguration WHERE ActivationStatus=1 and AcknowledgeStatus=1 and ConsoleAckStatus=1)
	BEGIN
		SET @GSTEnabled=1
	END
	IF EXISTS (SELECT * FROM DBO.SysObjects WHERE ID = OBJECT_ID(N'SpmToAvoid')
	AND OBJECTPROPERTY(ID, N'IsUserTable') = 1)
	BEGIN
		DROP TABLE SpmToAvoid	
	END
	
	CREATE TABLE SpmToAvoid
	(
		SpmCode NVARCHAR(50)
	)
	
	IF EXISTS(SELECT DISTINCT SpmCode FROM Cn2Cs_Prk_SupplierMaster
	WHERE LTRIM(RTRIM(ISNULL(SpmCode,'')))='' OR LTRIM(RTRIM(ISNULL(SpmName,'')))='')
	BEGIN
		INSERT INTO SpmToAvoid(SpmCode)
		SELECT DISTINCT SpmCode FROM Cn2Cs_Prk_SupplierMaster
		WHERE LTRIM(RTRIM(ISNULL(SpmCode,'')))='' OR LTRIM(RTRIM(ISNULL(SpmName,'')))=''
		INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
		SELECT DISTINCT 1,'Supplier Master','SpmCode','Supplier Code/Name Should not be empty' FROM Cn2Cs_Prk_SupplierMaster
		WHERE LTRIM(RTRIM(ISNULL(SpmCode,'')))='' OR LTRIM(RTRIM(ISNULL(SpmName,'')))=''
	END
	
	--Added by Sathishkumar Veeramani 	--Supplier Code Exists
 --   IF EXISTS(SELECT DISTINCT A.SpmCode FROM Cn2Cs_Prk_SupplierMaster A WITH (NOLOCK),Supplier B WITH (NOLOCK)
	--WHERE A.SpmCode = B.SpmCode AND LTRIM(RTRIM(ISNULL(A.SpmCode,'')))<>'')
	--BEGIN
	--	INSERT INTO SpmToAvoid(SpmCode)
	--	SELECT DISTINCT A.SpmCode FROM Cn2Cs_Prk_SupplierMaster A WITH (NOLOCK),Supplier B WITH (NOLOCK)
	--    WHERE A.SpmCode = B.SpmCode AND LTRIM(RTRIM(ISNULL(A.SpmCode,'')))<>''
	--	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	--	SELECT DISTINCT 1,'Supplier Master','SpmCode','Supplier Code Already Available-'+A.SpmCode FROM Cn2Cs_Prk_SupplierMaster A WITH (NOLOCK),
	--	Supplier B WITH (NOLOCK) WHERE A.SpmCode = B.SpmCode AND LTRIM(RTRIM(ISNULL(A.SpmCode,'')))<>''
	--END
	--Till Here		
	
	IF EXISTS(SELECT DISTINCT SpmCode FROM Cn2Cs_Prk_SupplierMaster
	WHERE LTRIM(RTRIM(ISNULL(SpmAdd1,'')))='')
	BEGIN
		INSERT INTO SpmToAvoid(SpmCode)
		SELECT DISTINCT SpmCode FROM Cn2Cs_Prk_SupplierMaster
		WHERE LTRIM(RTRIM(ISNULL(SpmAdd1,'')))=''
		INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
		SELECT DISTINCT 1,'Supplier Master','SpmCode','Supplier Address1 Should not be empty' FROM Cn2Cs_Prk_SupplierMaster
		WHERE LTRIM(RTRIM(ISNULL(SpmAdd1,'')))=''
	END	
	
	IF EXISTS(SELECT DISTINCT SpmCode FROM Cn2Cs_Prk_SupplierMaster
	WHERE LTRIM(RTRIM(ISNULL(PhoneNo,'')))='')
	BEGIN
		INSERT INTO SpmToAvoid(SpmCode)
		SELECT DISTINCT SpmCode FROM Cn2Cs_Prk_SupplierMaster
		WHERE LTRIM(RTRIM(ISNULL(PhoneNo,'')))=''
		INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
		SELECT DISTINCT 1,'Supplier Master','SpmCode','Supplier Phone No Should not be empty' FROM Cn2Cs_Prk_SupplierMaster
		WHERE LTRIM(RTRIM(ISNULL(PhoneNo,'')))=''
	END
	
	IF EXISTS(SELECT DISTINCT SpmCode FROM Cn2Cs_Prk_SupplierMaster
	WHERE LTRIM(RTRIM(ISNULL(GSTTIN,'')))='')
	BEGIN
		INSERT INTO SpmToAvoid(SpmCode)
		SELECT DISTINCT SpmCode FROM Cn2Cs_Prk_SupplierMaster
		WHERE LTRIM(RTRIM(ISNULL(GSTTIN,'')))=''
		INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
		SELECT DISTINCT 1,'Supplier Master','GSTIN','Supplier GST TIN No Should not be empty' FROM Cn2Cs_Prk_SupplierMaster
		WHERE LTRIM(RTRIM(ISNULL(GSTTIN,'')))=''
	END
	
	IF EXISTS(SELECT DISTINCT SpmCode FROM Cn2Cs_Prk_SupplierMaster
	WHERE LTRIM(RTRIM(ISNULL(SupplierStatus,''))) NOT IN('ACTIVE','INACTIVE','IN ACTIVE'))
	BEGIN
		INSERT INTO SpmToAvoid(SpmCode)
		SELECT DISTINCT SpmCode FROM Cn2Cs_Prk_SupplierMaster
		WHERE LTRIM(RTRIM(ISNULL(SupplierStatus,''))) NOT IN('ACTIVE','INACTIVE','IN ACTIVE')
		INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
		SELECT DISTINCT 1,'Supplier Master','SupplierStatus','Supplier Status Should be Active/InActive' FROM Cn2Cs_Prk_SupplierMaster
		WHERE LTRIM(RTRIM(ISNULL(SupplierStatus,''))) NOT IN('ACTIVE','INACTIVE','IN ACTIVE')
	END
	
	IF EXISTS(SELECT DISTINCT SpmCode FROM Cn2Cs_Prk_SupplierMaster A 
	WHERE NOT EXISTS(SELECT StateCode FROM StateMaster B WHERE A.StateCode=ISNULL(B.StateCode,'')))
	BEGIN
		INSERT INTO SpmToAvoid(SpmCode)
		SELECT DISTINCT SpmCode FROM Cn2Cs_Prk_SupplierMaster A 
		WHERE NOT EXISTS(SELECT StateCode FROM StateMaster B WHERE A.StateCode=ISNULL(B.StateCode,''))
	
		INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
		SELECT DISTINCT 1,'Supplier Master','StateCode','Supplier State Code Not available' FROM Cn2Cs_Prk_SupplierMaster A 
		WHERE NOT EXISTS(SELECT StateCode FROM StateMaster B WHERE A.StateCode=ISNULL(B.StateCode,''))
	END
	
	IF EXISTS(SELECT '*' FROM Cn2Cs_Prk_SupplierMaster CSM
			INNER JOIN StateMaster SM ON CSM.StateCode=SM.StateCode
			WHERE NOT EXISTS(
				SELECT UD.* FROM UdcHD A (NOLOCK)
				INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId 
				INNER JOIN UdcDefault UD (NOLOCK) ON B.MasterId=UD.MasterId and B.UdcMasterId=UD.UdcMasterId
				WHERE UPPER(A.MasterName)='Supplier Master' AND B.ColumnName='State Name' 
				AND UD.ColValue=SM.StateName and UD.SeqId=SM.StateId)
				)
	BEGIN
		INSERT INTO SpmToAvoid(SpmCode)
		SELECT DISTINCT SpmCode FROM Cn2Cs_Prk_SupplierMaster CSM
		INNER JOIN StateMaster SM ON CSM.StateCode=SM.StateCode
		WHERE NOT EXISTS(
			SELECT UD.* FROM UdcHD A (NOLOCK)
			INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId 
			INNER JOIN UdcDefault UD (NOLOCK) ON B.MasterId=UD.MasterId and B.UdcMasterId=UD.UdcMasterId
			WHERE UPPER(A.MasterName)='Supplier Master' AND B.ColumnName='State Name' 
			AND UD.ColValue=SM.StateName and UD.SeqId=SM.StateId)
	
		INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
		SELECT DISTINCT 1,'Supplier Master','StateCode','Supplier State Code Not available'+SpmName FROM Cn2Cs_Prk_SupplierMaster CSM
			INNER JOIN StateMaster SM ON CSM.StateCode=SM.StateCode
			WHERE NOT EXISTS(
				SELECT UD.* FROM UdcHD A (NOLOCK)
				INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId 
				INNER JOIN UdcDefault UD (NOLOCK) ON B.MasterId=UD.MasterId and B.UdcMasterId=UD.UdcMasterId
				WHERE UPPER(A.MasterName)='Supplier Master' AND B.ColumnName='State Name' 
				AND UD.ColValue=SM.StateName and UD.SeqId=SM.StateId)
	END
	
	DELETE FROM ETL_Prk_CN2CS_UdcDetails WHERE MasterName='Supplier Master' 
	
	DECLARE Cur_SupplierMaster CURSOR
	FOR SELECT ISNULL(LTRIM(RTRIM([SpmCode])),''),ISNULL(LTRIM(RTRIM([SpmName])),''),ISNULL(LTRIM(RTRIM([SpmAdd1])),''),
	ISNULL(LTRIM(RTRIM([SpmAdd2])),''),ISNULL(LTRIM(RTRIM([SpmAdd3])),''),ISNULL(LTRIM(RTRIM([TaxGroupCode])),''),
	ISNULL(LTRIM(RTRIM([PhoneNo])),''),ISNULL(LTRIM(RTRIM([FaxNo])),''),ISNULL(LTRIM(RTRIM([EmailId])),''),
	ISNULL(LTRIM(RTRIM([ContPerson])),''),ISNULL(LTRIM(RTRIM(SpmTinNo)),'0'),ISNULL(LTRIM(RTRIM([DefaultSpm])),'No'),
	ISNULL(LTRIM(RTRIM(GSTTIN)),''),ISNULL(LTRIM(RTRIM(StateCode)),''),ISNULL(LTRIM(RTRIM(SupplierStatus)),'')
	FROM Cn2Cs_Prk_SupplierMaster WHERE [DownLoadFlag] ='D' AND
	SpmCode NOT IN (SELECT SpmCode FROM SpmToAvoid)
	OPEN Cur_SupplierMaster
	FETCH NEXT FROM Cur_SupplierMaster INTO @SpmCode,@SpmName,@SpmAdd1,@SpmAdd2,@SpmAdd3,
	@TaxGrpCode,@PhoneNo,@FaxNo,@EmailId,@ContPerson,@SpmTinNo,@DefaultSpm,@GSTTIN,@StateCode,@SupplierStatus
	WHILE @@FETCH_STATUS=0
	BEGIN
				
		SET @Po_ErrNo=0
		SET @Exist=0		
		IF NOT EXISTS(SELECT * FROM Company WHERE DefaultCompany=1)
		BEGIN
			INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
			SELECT DISTINCT 1,'Supplier Master','CmpCode','Default Company Not Foud'
			SET @Po_ErrNo =1
		END
		ELSE
		BEGIN
			SELECT @CmpId=CmpId FROM Company WHERE DefaultCompany=1
			--SELECT @CmpId=CmpId FROM COMPANY WHERE UPPER(LTRIM(RTRIM(CMPCODE)))='ALL'
		END
		IF NOT EXISTS(SELECT * FROM TaxGroupSetting WHERE RtrGroup=@TaxGrpCode AND TaxGroup=3)
		BEGIN
			--INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
			--SELECT DISTINCT 1,'Supplier Master','Tax Group Code','Tax Group Code Not Foud'
			--SET @Po_ErrNo =1
			SET @TaxGrpId=0
		END
		ELSE
		BEGIN
			SELECT @TaxGrpId=TaxGroupId FROM TaxGroupSetting WHERE RtrGroup=@TaxGrpCode AND TaxGroup=3
		END
		IF NOT EXISTS (SELECT * FROM Supplier WHERE SpmCode=@SpmCode)
		BEGIN			
			SET @SpmId = dbo.Fn_GetPrimaryKeyInteger('Supplier','SpmId',CAST(YEAR(GETDATE()) AS INT),MONTH(GETDATE()))
			SET @Exist=0			
			IF @SpmId<=(SELECT ISNULL(MAX(SpmId),0) AS SpmId FROM Supplier)
			BEGIN
				SET @ErrDesc = 'Reset the counters/Check the system date'
				INSERT INTO ErrorLog VALUES (67,@TabName,'SpmId',@ErrDesc)
				SET @Po_ErrNo =1
			END
		END
		ELSE
		BEGIN
			SELECT @SpmId=SpmId FROM Supplier WHERE SpmCode=@SpmCode			
			SET @Exist=1
		END
		
		IF ISNULL(@GSTTIN,'')<>''
		BEGIN
			IF (SELECT DBO.Fn_ISGSTINNumber(@GSTTIN))=1
			BEGIN
				INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
				SELECT DISTINCT 1,'Supplier Master','GSTIN','Invalid GST Tin Number'
				SET @Po_ErrNo =1
			END
		END
		
		SET @StateName=''
		SELECT @StateName=StateName FROM StateMaster WHERE StateCode=@StateCode
		
		IF @Po_ErrNo=0
		BEGIN
			DECLARE @VatTaxGroupId AS INT
			SET @VatTaxGroupId=0
			IF EXISTS(SELECT * FROM VATDefaultSupplier (NOLOCK))
			BEGIN
				SELECT @VatTaxGroupId=MAX(ISNULL(TaxGroupId,0)) FROM VATDefaultSupplier (NOLOCK)
			END
		
			IF @Exist=0
			BEGIN
				SET @CoaId = dbo.Fn_GetPrimaryKeyInteger('CoaMaster','CoaId',CAST(YEAR(GetDate()) AS INT),Month(GetDate()))
				SELECT @AcCode = CAST(CAST(AcCode as Numeric(18,0)) + 1 as nVarchar(50)) FROM COAMaster
				WHERE CoaId=(SELECT MAX(A.CoaId) FROM COAMaster A Where A.MainGroup=1
				and A.AcCode LIKE '133%')
				INSERT INTO CoaMaster(CoaId,AcCode,AcName,AcLevel,MainGroup,Status,Availability,LastModBy,
				LastModDate,AuthId,AuthDate)
				Values (@CoaId,@AcCode,@SpmName,4,1,2,1,1,CONVERT(VARCHAR(10),GETDATE(),121),1,
				CONVERT(VARCHAR(10),GETDATE(),121))
				
				INSERT INTO Supplier(SpmId,SpmCode,SpmName,SpmAdd1,SpmAdd2,SpmAdd3,SpmPhone,SpmFax,SpmEmail,
				SpmContact,SpmDefault,CoaId,CmpId,TaxGroupId,SpmOnAcc,Availability,LastModBy,LastModDate,AuthId,AuthDate,SpmTinNo,SpmSupplier,VATTaxGroupId)			
				VALUES(@SpmId,@SpmCode,@SpmName,@SpmAdd1,@SpmAdd2,@SpmAdd3,@PhoneNo,@FaxNo,@EmailId,
				@ContPerson,(CASE @DefaultSpm WHEN 'Yes' THEN 1 ELSE 0 END),@CoaId,@CmpId,
				CASE @GSTEnabled WHEN 1 THEN @TaxGrpId ELSE 0 END,0,1,1,GETDATE(),1,GETDATE(),@SpmTinNo,1,@VatTaxGroupId)								
				UPDATE Counters SET CurrValue=CurrValue+1 WHERE TabName='Supplier' AND FldName='SpmId'	  								
				UPDATE Counters SET CurrValue=CurrValue+1 WHERE TabName='CoaMaster' AND FldName='CoaId'
			END		
			ELSE
			BEGIN
				UPDATE Supplier SET SpmName=@SpmName,SpmAdd1=@SpmAdd1,SpmAdd2=@SpmAdd2,SpmAdd3=@SpmAdd3,
				SpmPhone=@PhoneNo,SpmFax=@FaxNo,SpmContact=@ContPerson,SpmTinNo=@SpmTinNo,SpmDefault=(CASE @DefaultSpm WHEN 'Yes' THEN 1 ELSE 0 END)				
				WHERE SpmId=@SpmId
				
				IF @GSTEnabled=1
				BEGIN
					UPDATE Supplier SET TaxGroupId=CASE @GSTEnabled WHEN 1 THEN @TaxGrpId ELSE 0 END 
					WHERE SpmId=@SpmId AND ISNULL(@TaxGrpId,0)<>0
				END	
				
			END
			
			DECLARE @DefspmId AS INT
			SET @DefspmId=0			
			IF EXISTS(SELECT '*' from Supplier (NOLOCK) Having Count(SpmId)>1)
			BEGIN
				SELECT @DefspmId=Max(SpmId) FROM Supplier (NOLOCK)
				
				UPDATE Supplier SET SpmDefault=0
				UPDATE Supplier SET SpmDefault=1 where SpmId=@DefspmId
			END
			ELSE
			BEGIN
				UPDATE Supplier SET SpmDefault=1
			END
			
			
			IF @GSTEnabled=0
			BEGIN
				DELETE FROM SupplierGSTTaxGroupUpdate WHERE SpmCode=@SpmCode
				INSERT INTO SupplierGSTTaxGroupUpdate(SpmCode,TaxGroup,UpdateDateTime,UpdateFlag)
				SELECT @SpmCode,@TaxGrpCode,GETDATE(),0
			END
			
			
			IF @SupplierStatus='INACTIVE'
			BEGIN
				SET @SupplierStatus='In Active'
			END
			
			INSERT INTO ETL_Prk_CN2CS_UdcDetails (MasterName,ColumnName,[Column Code],[ColumnValue],UpdateFlag)
			SELECT DISTINCT 'Supplier Master','State Name',@SpmCode,@StateName,0 UNION ALL
			SELECT DISTINCT 'Supplier Master','GSTIN',@SpmCode,@GSTTIN,0 UNION ALL
			SELECT DISTINCT 'Supplier Master','Status',@SpmCode,@SupplierStatus,0 
			
			IF EXISTS(SELECT * FROM ETL_Prk_CN2CS_UdcDetails WHERE MasterName='Supplier Master')
			BEGIN
				EXEC Proc_Validate_CN2CS_UdcDetails 0
			END
				
		END
		FETCH NEXT FROM Cur_SupplierMaster INTO @SpmCode,@SpmName,@SpmAdd1,@SpmAdd2,@SpmAdd3,
		@TaxGrpCode,@PhoneNo,@FaxNo,@EmailId,@ContPerson,@SpmTinNo,@DefaultSpm,@GSTTIN,@StateCode,@SupplierStatus
	END
	CLOSE Cur_SupplierMaster
	DEALLOCATE Cur_SupplierMaster
	
	UPDATE Cn2Cs_Prk_SupplierMaster SET DownLoadFlag='Y' WHERE
	DownLoadFlag ='D' AND SpmCode IN (SELECT SpmCode FROM Supplier)
	AND SpmCode NOT IN (SELECT SpmCode FROM SpmToAvoid)
	
	RETURN
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE name='Cn2Cs_Prk_RetailerGST' AND XTYPE='U')
DROP TABLE Cn2Cs_Prk_RetailerGST
GO
CREATE TABLE Cn2Cs_Prk_RetailerGST
(
	DistCode 		[nvarchar](100) NULL,
	RtrCode			[Varchar](50) NOT NULL,
	StateCode		[Varchar](20) NOT NULL,
	RtrTaxGroup		[Varchar](75) NOT NULL,
	Composite		[Varchar](5) NOT NULL,
	RelatedParty	[Varchar](5) NOT NULL,
	PanNumber		[Varchar](15) NOT NULL,
	GSTTIN			[Varchar](25) NOT NULL,
	RetailerType	[varchar] (25) NOT NULL,
	DownLoadFlag	[nvarchar](100) NULL,
	CreatedDate		[datetime] NULL
)
GO
IF EXISTS(SELECT NAME FROM Sysobjects WHERE XTYPE='P' and NAME='Proc_Import_RetailerGST')
DROP PROCEDURE Proc_Import_RetailerGST
GO
CREATE PROCEDURE Proc_Import_RetailerGST
(
	@Pi_Records TEXT
)
AS
/*********************************
* PROCEDURE		: Proc_Import_RetailerGST
* PURPOSE		: To Insert records from xml file in the Table Cn2Cs_Prk_RetailerGST
* CREATED		: S.Moorthi
* CREATED DATE	: 10-04-2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
SET NOCOUNT ON
BEGIN
	DECLARE @hDoc INTEGER
	
	EXEC sp_xml_preparedocument @hDoc OUTPUT,@Pi_Records
	INSERT INTO Cn2Cs_Prk_RetailerGST(		
		DistCode,
		RtrCode,
		StateCode,
		RtrTaxGroup,
		Composite,
		RelatedParty,
		PanNumber,
		GSTTIN,
		RetailerType,
		DownLoadFlag,
		CreatedDate
	)
	SELECT DistCode,
		RtrCode,
		StateCode,
		RtrTaxGroup,
		Composite,
		RelatedParty,
		PanNumber,
		GSTTIN,
		RetailerType,
		ISNULL(DownLoadFlag,'D'),
		GETDATE()		
	FROM OPENXML (@hdoc,'/Root/Console2CS_RetailerGST',1)
	WITH
	(
		DistCode 		[nvarchar](100),
		RtrCode			[Varchar](50),
		StateCode		[Varchar](20),
		RtrTaxGroup		[Varchar](75),
		Composite		[Varchar](5),
		RelatedParty	[Varchar](5),
		PanNumber		[Varchar](15),
		GSTTIN			[Varchar](25),
		RetailerType	[varchar] (25),
		DownLoadFlag	[nvarchar](100)
	) XMLObj
	EXEC sp_xml_removedocument @hDoc
END
GO
IF NOT EXISTS(SELECT 'X' FROM UdcMaster A (NOLOCK) INNER JOIN UdcHd B(NOLOCK)  ON A.MasterId=B.MasterId
				 WHERE ColumnName='State Name' and MasterName='Retailer Master')
BEGIN				 
	DECLARE @MasterId AS INT
	DECLARE @UdcMasterId AS INT
	SELECT @MasterId=MasterId FROM UdcHd with (nolock) WHERE MasterName='Retailer Master'
	IF @MasterId>0
	BEGIN
		SELECT @UdcMasterId=ISNULL(MAX(UdcMasterId),1) FROM UdcMaster (NOLOCK)
		SET @UdcMasterId=ISNULL(@UdcMasterId,1)
		IF @UdcMasterId>0
		BEGIN
			INSERT INTO UdcMaster(UdcMasterId,MasterId,ColumnName,ColumnDataType,ColumnSize,
			ColumnPrecision,ColumnMandatory,PickFromDefault,Availability,LastModBy,LastModDate,AuthId,
			AuthDate,Editable)
			SELECT @UdcMasterId+1,@MasterId,'State Name','Varchar',100,0,1,1,1,1,Getdate(),1,GETDATE(),1
			
			UPDATE Counters Set CurrValue=@UdcMasterId+1 where TabName='UdcMaster' and FldName='UdcMasterId'
		END
	END
END
GO
IF NOT EXISTS(SELECT 'X' FROM UdcMaster A (NOLOCK) INNER JOIN UdcHd B(NOLOCK)  ON A.MasterId=B.MasterId
				 WHERE ColumnName='Retailer Type' and MasterName='Retailer Master')
BEGIN				 
	DECLARE @MasterId AS INT
	DECLARE @UdcMasterId AS INT
	SELECT @MasterId=MasterId FROM UdcHd with (nolock) WHERE MasterName='Retailer Master'
	IF @MasterId>0
	BEGIN
		SELECT @UdcMasterId=ISNULL(MAX(UdcMasterId),1) FROM UdcMaster (NOLOCK)
		SET @UdcMasterId=ISNULL(@UdcMasterId,1)
		IF @UdcMasterId>0
		BEGIN
		
			INSERT INTO UdcMaster(UdcMasterId,MasterId,ColumnName,ColumnDataType,ColumnSize,
			ColumnPrecision,ColumnMandatory,PickFromDefault,Availability,LastModBy,LastModDate,AuthId,
			AuthDate,Editable)
			SELECT @UdcMasterId+1,@MasterId,'Retailer Type','Varchar',50,0,1,1,1,1,Getdate(),1,GETDATE(),1
			
			UPDATE Counters Set CurrValue=@UdcMasterId+1 where TabName='UdcMaster' and FldName='UdcMasterId'
			
			IF ISNULL(@MasterId,0)<>0 and ISNULL(@UdcMasterId,0)<>0
			BEGIN
				INSERT INTO UdcDefault(SeqId,MasterId,UdcMasterId,ColValue)
				SELECT 1,@MasterId,@UdcMasterId+1,'Registered' UNION ALL
				SELECT 2,@MasterId,@UdcMasterId+1,'Unregistered' --UNION ALL
				--SELECT 3,@MasterId,@UdcMasterId+1,'NA'
			END			
		END
	END
END
GO
IF NOT EXISTS(SELECT 'X' FROM UdcMaster A (NOLOCK) INNER JOIN UdcHd B(NOLOCK)  ON A.MasterId=B.MasterId
				 WHERE ColumnName='Composition' and MasterName='Retailer Master')
BEGIN				 
	DECLARE @MasterId AS INT
	DECLARE @UdcMasterId AS INT
	SELECT @MasterId=MasterId FROM UdcHd with (nolock) WHERE MasterName='Retailer Master'
	IF @MasterId>0
	BEGIN
		SELECT @UdcMasterId=ISNULL(MAX(UdcMasterId),1) FROM UdcMaster (NOLOCK)
		SET @UdcMasterId=ISNULL(@UdcMasterId,1)
		IF @UdcMasterId>0
		BEGIN
		
			INSERT INTO UdcMaster(UdcMasterId,MasterId,ColumnName,ColumnDataType,ColumnSize,
			ColumnPrecision,ColumnMandatory,PickFromDefault,Availability,LastModBy,LastModDate,AuthId,
			AuthDate,Editable)
			SELECT @UdcMasterId+1,@MasterId,'Composition','Varchar',5,0,1,1,1,1,Getdate(),1,GETDATE(),1
			
			UPDATE Counters Set CurrValue=@UdcMasterId+1 where TabName='UdcMaster' and FldName='UdcMasterId'
			
			IF ISNULL(@MasterId,0)<>0 and ISNULL(@UdcMasterId,0)<>0
			BEGIN
				INSERT INTO UdcDefault(SeqId,MasterId,UdcMasterId,ColValue)
				SELECT 1,@MasterId,@UdcMasterId+1,'YES' UNION ALL
				SELECT 2,@MasterId,@UdcMasterId+1,'NO'
			END
			
		END
	END
END
GO
IF NOT EXISTS(SELECT 'X' FROM UdcMaster A (NOLOCK) INNER JOIN UdcHd B(NOLOCK)  ON A.MasterId=B.MasterId
				 WHERE ColumnName='PAN Number' and MasterName='Retailer Master')
BEGIN				 
	DECLARE @MasterId AS INT
	DECLARE @UdcMasterId AS INT
	SELECT @MasterId=MasterId FROM UdcHd with (nolock) WHERE MasterName='Retailer Master'
	IF @MasterId>0
	BEGIN
		SELECT @UdcMasterId=ISNULL(MAX(UdcMasterId),1) FROM UdcMaster (NOLOCK)
		SET @UdcMasterId=ISNULL(@UdcMasterId,1)
		IF @UdcMasterId>0
		BEGIN
		
			INSERT INTO UdcMaster(UdcMasterId,MasterId,ColumnName,ColumnDataType,ColumnSize,
			ColumnPrecision,ColumnMandatory,PickFromDefault,Availability,LastModBy,LastModDate,AuthId,
			AuthDate,Editable)
			SELECT @UdcMasterId+1,@MasterId,'PAN Number','Varchar',15,0,0,0,1,1,Getdate(),1,GETDATE(),1
			
			UPDATE Counters Set CurrValue=@UdcMasterId+1 where TabName='UdcMaster' and FldName='UdcMasterId'
		END
	END
END
GO
IF NOT EXISTS(SELECT 'X' FROM UdcMaster A (NOLOCK) INNER JOIN UdcHd B(NOLOCK)  ON A.MasterId=B.MasterId
				 WHERE ColumnName='GSTIN' and MasterName='Retailer Master')
BEGIN				 
	DECLARE @MasterId AS INT
	DECLARE @UdcMasterId AS INT
	SELECT @MasterId=MasterId FROM UdcHd with (nolock) WHERE MasterName='Retailer Master'
	IF @MasterId>0
	BEGIN
		SELECT @UdcMasterId=ISNULL(MAX(UdcMasterId),1) FROM UdcMaster (NOLOCK)
		SET @UdcMasterId=ISNULL(@UdcMasterId,1)
		IF @UdcMasterId>0
		BEGIN
		
			INSERT INTO UdcMaster(UdcMasterId,MasterId,ColumnName,ColumnDataType,ColumnSize,
			ColumnPrecision,ColumnMandatory,PickFromDefault,Availability,LastModBy,LastModDate,AuthId,
			AuthDate,Editable)
			SELECT @UdcMasterId+1,@MasterId,'GSTIN','Varchar',25,0,1,0,1,1,Getdate(),1,GETDATE(),1
			
			UPDATE Counters Set CurrValue=@UdcMasterId+1 where TabName='UdcMaster' and FldName='UdcMasterId'
			
		END
	END
END
GO
IF NOT EXISTS(SELECT 'X' FROM UdcMaster A (NOLOCK) INNER JOIN UdcHd B(NOLOCK)  ON A.MasterId=B.MasterId
				 WHERE ColumnName='Related Party' and MasterName='Retailer Master')
BEGIN				 
	DECLARE @MasterId AS INT
	DECLARE @UdcMasterId AS INT
	SELECT @MasterId=MasterId FROM UdcHd with (nolock) WHERE MasterName='Retailer Master'
	IF @MasterId>0
	BEGIN
		SELECT @UdcMasterId=ISNULL(MAX(UdcMasterId),1) FROM UdcMaster (NOLOCK)
		SET @UdcMasterId=ISNULL(@UdcMasterId,1)
		IF @UdcMasterId>0
		BEGIN
		
			INSERT INTO UdcMaster(UdcMasterId,MasterId,ColumnName,ColumnDataType,ColumnSize,
			ColumnPrecision,ColumnMandatory,PickFromDefault,Availability,LastModBy,LastModDate,AuthId,
			AuthDate,Editable)
			SELECT @UdcMasterId+1,@MasterId,'Related Party','Varchar',5,0,1,1,1,1,Getdate(),1,GETDATE(),1
			
			UPDATE Counters Set CurrValue=@UdcMasterId+1 where TabName='UdcMaster' and FldName='UdcMasterId'
			
			IF ISNULL(@MasterId,0)<>0 and ISNULL(@UdcMasterId,0)<>0
			BEGIN
				INSERT INTO UdcDefault(SeqId,MasterId,UdcMasterId,ColValue)
				SELECT 1,@MasterId,@UdcMasterId+1,'YES' UNION ALL
				SELECT 2,@MasterId,@UdcMasterId+1,'NO'
			END
		END
	END
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='P' AND NAME='Proc_UpdateRetailerShipping')
DROP PROCEDURE Proc_UpdateRetailerShipping
GO
CREATE PROCEDURE [Proc_UpdateRetailerShipping](@RtrId AS BIGINT,@RtrShipAddId AS INT)
AS
BEGIN

DECLARE @StateId as INT
DECLARE @GSTTin as VARCHAR(100)
DECLARE @TaxGroupId AS INT
DECLARE @GSTEnabled AS TINYINT
SET @GSTEnabled=0
SET @StateId=0
SET @TaxGroupId=0
SET @GSTTin=''

		IF EXISTS(SELECT 'X' FROM GSTConfiguration WHERE ActivationStatus=1 and AcknowledgeStatus=1 and ConsoleAckStatus=1 
		and CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121)>=ActivationDate)
		BEGIN
			SET @GSTEnabled=1
		END

		IF @RtrShipAddId=0
		BEGIN
			SELECT @RtrShipAddId=RtrShipId FROM RetailerShipAdd WHERE RtrId=@RtrId and RtrShipDefaultAdd=1 
		END

		SELECT @StateId=SM.StateId FROM UdcHD A (NOLOCK)
		INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId 
		INNER JOIN UdcDetails UD (NOLOCK) ON B.MasterId=UD.MasterId and B.UdcMasterId=UD.UdcMasterId 
		INNER JOIN Retailer R (NOLOCK) ON R.RtrId=UD.MasterRecordId 
		INNER JOIN StateMaster SM (NOLOCK) ON SM.StateName=UD.ColumnValue
		WHERE A.MasterId=2 AND B.ColumnName='State Name' and ISNULL(ColumnValue,'')<>''
		AND R.RtrId=@RtrId 
		
		SELECT @GSTTin=UD.ColumnValue FROM UdcHD A (NOLOCK)
		INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId 
		INNER JOIN UdcDetails UD (NOLOCK) ON B.MasterId=UD.MasterId and B.UdcMasterId=UD.UdcMasterId 
		INNER JOIN Retailer R (NOLOCK) ON R.RtrId=UD.MasterRecordId 		
		WHERE A.MasterId=2 AND B.ColumnName='GSTIN' and ISNULL(ColumnValue,'')<>''
		AND R.RtrId=@RtrId
		
		SELECT @TaxGroupId=ISNULL(TaxGroupId,0) FROM Retailer (NOLOCK) WHERE RtrId=@RtrId
		
		IF ISNULL(@StateId,0)<>0
		BEGIN
			UPDATE A SET StateId=@StateId FROM RetailerShipAdd A WHERE RtrId=@RtrId and RtrShipId=@RtrShipAddId
		END
		
		IF ISNULL(@GSTTin,'')<>''
		BEGIN
			UPDATE A SET GSTTinNo=@GSTTin FROM RetailerShipAdd A WHERE RtrId=@RtrId and RtrShipId=@RtrShipAddId
		END
		IF @GSTEnabled=1
		BEGIN
			IF ISNULL(@TaxGroupId,0)<>0
			BEGIN
				UPDATE A SET TaxGroupId=@TaxGroupId FROM RetailerShipAdd A WHERE RtrId=@RtrId and RtrShipId=@RtrShipAddId
			END
		END	 

RETURN
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE NAME='Fn_ValidateSaveUDC' AND XTYPE In ('TF','FN'))
DROP FUNCTION Fn_ValidateSaveUDC
GO
--SELECT dbo.Fn_ValidateSaveUDC(79,446,2,'GSTIN','11GPKPM5222K1G5')
CREATE FUNCTION Fn_ValidateSaveUDC(@TransId as INT,@RtrId as BIGINT,@MasterId AS INT,@ColumnName AS VARCHAR(200),@ColumnValue AS VARCHAR(200))
RETURNS VARCHAR(200)
AS
/*********************************
* PROCEDURE		: Fn_ValidateSaveUDC
* PURPOSE		: To Validate UDC 
* CREATED		: S.Moorthi
* CREATED DATE	: 11-05-2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
BEGIN
	DECLARE @ValMsg AS VARCHAR(200)
	SET @ValMsg=''
	
	IF NOT EXISTS(SELECT * FROM GSTConfiguration (NOLOCK) 
	WHERE ModuleId='GSTCONFIG' and ActivationStatus=1 and 
	ConsoleAckStatus=1)
	BEGIN
		RETURN @ValMsg
	END 
	
	IF @ColumnValue=''
	BEGIN
		SET @ColumnValue='NULL'
	END
	
	IF @TransId=41
	BEGIN
		IF EXISTS(SELECT b.* FROM Retailer A (NOLOCK)
		INNER JOIN UdcDetails B(NOLOCK) ON A.RtrId=B.MasterRecordId 
		INNER JOIN UdcMaster C(NOLOCK) ON C.MasterId=B.MasterId AND C.UdcMasterId=B.UdcMasterId
		WHERE C.ColumnName='Retailer Type' and UPPER(B.ColumnValue)='REGISTERED' AND C.MasteriD=2)
		BEGIN
			IF @ColumnValue='NULL'
			BEGIN
				SET @ColumnValue=''
			END
		END
	END
	
	IF @TransId in (79,41)
	BEGIN
	
	IF @TransId=41  ----Gopi at 25/06/2017 GST10
	 BEGIN
	  IF EXISTS(SELECT b.* FROM Retailer A (NOLOCK)
		INNER JOIN UdcDetails B(NOLOCK) ON A.RtrId=B.MasterRecordId 
		INNER JOIN UdcMaster C(NOLOCK) ON C.MasterId=B.MasterId AND C.UdcMasterId=B.UdcMasterId
		WHERE A.Rtrid=@Rtrid and C.ColumnName='Retailer Type' and UPPER(B.ColumnValue)='UNREGISTERED' AND C.MasteriD=2)
		BEGIN
		   RETURN @ValMsg
		END
	  END  ---Till Here 
		
		IF UPPER(@ColumnName)='GSTIN'
		BEGIN
			IF RTRIM(LTRIM(UPPER(ISNULL(@ColumnValue,'NULL'))))<>'NULL'
			BEGIN
				IF (SELECT DBO.Fn_ISGSTINNumber(@ColumnValue))=1
				BEGIN					
					SET @ValMsg='Invalid GST Tin Number'					
				END
			END
		END
		
		IF @ColumnName='PAN Number'
		BEGIN	
			IF RTRIM(LTRIM(UPPER(ISNULL(@ColumnValue,'NULL'))))<>'NULL'
			BEGIN
				IF (SELECT DBO.Fn_ISPanNumber(@ColumnValue))=1
				BEGIN
					SET @ValMsg='Invalid Pan Number'
				END
				
			END
		END
		IF @ColumnName='GSTIN' or @ColumnName='PAN Number'
		BEGIN
			IF ISNULL(@ColumnValue,'')<>'' AND ISNULL(@ColumnValue,'NULL')<>'NULL'
			BEGIN
				IF EXISTS(SELECT UD.* FROM UdcHD A (NOLOCK)
					INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId 
					INNER JOIN UdcDetails UD (NOLOCK) ON B.MasterId=UD.MasterId and B.UdcMasterId=UD.UdcMasterId 
					INNER JOIN Retailer R (NOLOCK) ON R.RtrId=UD.MasterRecordId 
					WHERE A.MasterId=@MasterId AND B.ColumnName=@ColumnName and ISNULL(ColumnValue,'')<>''
					AND R.RtrId<>@RtrId and ColumnValue=@ColumnValue)
				BEGIN
					SET @ValMsg='Duplicate '+ @ColumnName +' Not Allow'
				END
			END
		END
	END
	
RETURN @ValMsg
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='P' AND NAME='Proc_Cn2Cs_RetailerGST')
DROP PROCEDURE Proc_Cn2Cs_RetailerGST
GO
/*
 BEGIN TRAN
 EXEC Proc_Cn2Cs_RetailerGST 0
 SELECT * FROM Cn2Cs_Prk_RetailerGST where downloadflag='D'
 Select * from UDCMASTER where Masterid=2
 SELECT  * FROM ERRORLOG
 ROLLBACK TRAN
 */
CREATE PROCEDURE [Proc_Cn2Cs_RetailerGST]
(
	@Po_ErrNo INT OUTPUT
)
AS
/*********************************
* PROCEDURE		: Proc_Cn2Cs_RetailerGST
* PURPOSE		: To validate the downloaded Retailer GST details from Console
* CREATED		: S.Moorthi
* CREATED DATE	: 12/04/2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
SET NOCOUNT ON
BEGIN
	SET @Po_ErrNo=0
	DECLARE @CurrValue as INT	
	DECLARE @UdcMasterId AS INT
	DECLARE @RtrCode VARCHAR(100)
	DECLARE @StateCode VARCHAR(100)
	DECLARE @RtrTaxGroup VARCHAR(100)
	DECLARE @Composite VARCHAR(10)
	DECLARE @RelatedParty AS VARCHAR(10)
	DECLARE @PanNumber AS VARCHAR(25)
	DECLARE @GSTTIN AS VARCHAR(25)
	DECLARE @TaxGrpId AS INT
	DECLARE @StateName as VARCHAR(200)
	DECLARE @RetailerType as VARCHAR(100)
	DECLARE @GSTEnabled AS TINYINT
	SET @GSTEnabled=0
	
	CREATE TABLE #ToAvoidUDCRetailer
	(
		RtrCode NVARCHAR(200)
	)
	
	CREATE TABLE #Cn2Cs_Prk_RetailerGST
	(
		RtrCode			[Varchar](50),
		StateCode		[Varchar](20),
		RtrTaxGroup		[Varchar](75),
		Composite		[Varchar](5),
		RelatedParty	[Varchar](5),
		PanNumber		[Varchar](15),
		GSTTIN			[Varchar](25),
		RetailerType	[Varchar](25),
		DownLoadFlag	[nvarchar](100)
	)
		
	DELETE FROM Cn2Cs_Prk_RetailerGST WHERE DownLoadFlag='Y'
	
	IF NOT EXISTS(SELECT 'X' FROM Cn2Cs_Prk_RetailerGST (NOLOCK) WHERE DownLoadFlag='D')
	BEGIN
		RETURN
	END
	
	IF EXISTS(SELECT 'X' FROM GSTConfiguration WHERE ActivationStatus=1 and AcknowledgeStatus=1 and ConsoleAckStatus=1 
	and CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121)>=ActivationDate)
	BEGIN
		SET @GSTEnabled=1
	END
	
	SELECT RtrCode,MAX(CreatedDate) as CreatedDate
	INTO #LatestMaster
	FROM Cn2Cs_Prk_RetailerGST WHERE DownLoadFlag='D'
	GROUP BY RtrCode
	
	INSERT INTO #Cn2Cs_Prk_RetailerGST(RtrCode,StateCode,RtrTaxGroup,
	Composite,RelatedParty,PanNumber,GSTTIN,RetailerType,DownLoadFlag)
	SELECT DISTINCT A.RtrCode,StateCode,RtrTaxGroup,
	Composite,RelatedParty,PanNumber,GSTTIN,RetailerType,DownLoadFlag
	FROM Cn2Cs_Prk_RetailerGST A (NOLOCK) INNER JOIN #LatestMaster B ON A.RtrCode=B.RtrCode
	and A.CreatedDate=B.CreatedDate
	WHERE DownLoadFlag='D'	
			
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 1,'Retailer GST','Retailer Code','Retailer GST Details Should not be empty' 
	FROM #Cn2Cs_Prk_RetailerGST
	WHERE (RTRIM(LTRIM(ISNULL(RtrCode,'')))='' 
	OR RTRIM(LTRIM(ISNULL(StateCode,'')))='' 
	OR RTRIM(LTRIM(ISNULL(RtrTaxGroup,'')))='')
	--OR RTRIM(LTRIM(ISNULL(PanNumber,'')))=''
	--OR RTRIM(LTRIM(ISNULL(GSTTIN,'')))='')
	
	
	DELETE A FROM #Cn2Cs_Prk_RetailerGST A
	WHERE (RTRIM(LTRIM(ISNULL(RtrCode,'')))='' 
	OR RTRIM(LTRIM(ISNULL(StateCode,'')))='' 
	OR RTRIM(LTRIM(ISNULL(RtrTaxGroup,'')))='')
	--OR RTRIM(LTRIM(ISNULL(PanNumber,'')))=''
	--OR RTRIM(LTRIM(ISNULL(GSTTIN,'')))='')
	
	
	INSERT INTO #ToAvoidUDCRetailer (RtrCode)
	SELECT RtrCode FROM #Cn2Cs_Prk_RetailerGST
	GROUP BY RtrCode HAVING COUNT(RtrCode)>1
	
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT  2,'RetailerGST','Retailer','Retailer GST Details Not allow more than 1-'+RtrCode FROM #Cn2Cs_Prk_RetailerGST
	GROUP BY RtrCode HAVING COUNT(RtrCode)>1
	
	INSERT INTO #ToAvoidUDCRetailer (RtrCode)
	SELECT DISTINCT RtrCode FROM #Cn2Cs_Prk_RetailerGST  A(NOLOCK) 
	WHERE NOT EXISTS(SELECT RtrCode FROM Retailer B(NOLOCK) WHERE A.RtrCode=B.RtrCode) and DownLoadFlag='D'

	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 3,'RetailerGST','RetailerCode','Retailer Code not Available-'+RtrCode FROM #Cn2Cs_Prk_RetailerGST  A(NOLOCK) 
	WHERE NOT EXISTS(SELECT RtrCode FROM Retailer B(NOLOCK) WHERE A.RtrCode=B.RtrCode) and DownLoadFlag='D'

	IF EXISTS(SELECT DISTINCT RtrCode FROM #Cn2Cs_Prk_RetailerGST A 
	WHERE NOT EXISTS(SELECT StateCode FROM StateMaster B WHERE A.StateCode=ISNULL(B.StateCode,'')))
	BEGIN
		INSERT INTO #ToAvoidUDCRetailer (RtrCode)
		SELECT DISTINCT RtrCode FROM #Cn2Cs_Prk_RetailerGST A 
		WHERE NOT EXISTS(SELECT StateCode FROM StateMaster B WHERE A.StateCode=ISNULL(B.StateCode,''))
	
		INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
		SELECT DISTINCT 4,'RetailerGST','State Code','Retailer GST State Code Not available-'+RtrCode FROM #Cn2Cs_Prk_RetailerGST A 
		WHERE NOT EXISTS(SELECT StateCode FROM StateMaster B WHERE A.StateCode=ISNULL(B.StateCode,''))
	END
	
	
	IF EXISTS(SELECT '*' FROM #Cn2Cs_Prk_RetailerGST CSM
			INNER JOIN StateMaster SM ON CSM.StateCode=SM.StateCode
			WHERE NOT EXISTS(
				SELECT UD.* FROM UdcHD A (NOLOCK)
				INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId 
				INNER JOIN UdcDefault UD (NOLOCK) ON B.MasterId=UD.MasterId and B.UdcMasterId=UD.UdcMasterId
				WHERE UPPER(A.MasterName)='Retailer Master' AND B.ColumnName='State Name' 
				AND UD.ColValue=SM.StateName and UD.SeqId=SM.StateId)
				)
	BEGIN
	
		INSERT INTO #ToAvoidUDCRetailer (RtrCode)
		SELECT DISTINCT RtrCode FROM #Cn2Cs_Prk_RetailerGST CSM
		INNER JOIN StateMaster SM ON CSM.StateCode=SM.StateCode
		WHERE NOT EXISTS(
			SELECT UD.* FROM UdcHD A (NOLOCK)
			INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId 
			INNER JOIN UdcDefault UD (NOLOCK) ON B.MasterId=UD.MasterId and B.UdcMasterId=UD.UdcMasterId
			WHERE UPPER(A.MasterName)='Retailer Master' AND B.ColumnName='State Name' 
			AND UD.ColValue=SM.StateName and UD.SeqId=SM.StateId)
	
		INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
		SELECT DISTINCT 5,'Retailer GST','StateName','Retailer State Code Not available '+RtrCode FROM #Cn2Cs_Prk_RetailerGST CSM
			INNER JOIN StateMaster SM ON CSM.StateCode=SM.StateCode
			WHERE NOT EXISTS(
				SELECT UD.* FROM UdcHD A (NOLOCK)
				INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId 
				INNER JOIN UdcDefault UD (NOLOCK) ON B.MasterId=UD.MasterId and B.UdcMasterId=UD.UdcMasterId
				WHERE UPPER(A.MasterName)='Retailer Master' AND B.ColumnName='State Name' 
				AND UD.ColValue=SM.StateName and UD.SeqId=SM.StateId)
	END
	
	
	INSERT INTO #ToAvoidUDCRetailer (RtrCode)
	SELECT DISTINCT RtrCode FROM #Cn2Cs_Prk_RetailerGST 
	WHERE RTRIM(LTRIM(UPPER(ISNULL(RetailerType,'')))) NOT IN ('REGISTERED','Unregistered','NOT ASSIGNED')
	
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 6,'Retailer GST','RetailerType','RetailerType Should be REGISTERED / UN REGISTERED / NOT ASSIGNED'+RtrCode FROM #Cn2Cs_Prk_RetailerGST CSM
	WHERE RTRIM(LTRIM(UPPER(ISNULL(RetailerType,'')))) NOT IN ('REGISTERED','Unregistered','NOT ASSIGNED')
	
	INSERT INTO #ToAvoidUDCRetailer (RtrCode)
	SELECT DISTINCT RtrCode FROM #Cn2Cs_Prk_RetailerGST CSM
	WHERE RTRIM(LTRIM(UPPER(ISNULL(Composite,'')))) NOT IN ('YES','NO') AND 
	EXISTS(SELECT * FROM #Cn2Cs_Prk_RetailerGST B WHERE CSM.RtrCode=B.RtrCode and RTRIM(LTRIM(UPPER(ISNULL(B.RetailerType,''))))='REGISTERED')
	
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 6,'Retailer GST','Composition','Composition Should be YES / No '+RtrCode FROM #Cn2Cs_Prk_RetailerGST CSM
	WHERE RTRIM(LTRIM(UPPER(ISNULL(Composite,'')))) NOT IN ('YES','NO') AND 
	EXISTS(SELECT * FROM #Cn2Cs_Prk_RetailerGST B WHERE CSM.RtrCode=B.RtrCode and RTRIM(LTRIM(UPPER(ISNULL(B.RetailerType,''))))='REGISTERED')
	
	
	INSERT INTO #ToAvoidUDCRetailer (RtrCode)
	SELECT DISTINCT RtrCode FROM #Cn2Cs_Prk_RetailerGST CSM
	WHERE RTRIM(LTRIM(UPPER(ISNULL(Composite,'')))) IN ('YES','NO') AND 
	NOT EXISTS(SELECT * FROM #Cn2Cs_Prk_RetailerGST B WHERE CSM.RtrCode=B.RtrCode and RTRIM(LTRIM(UPPER(ISNULL(B.RetailerType,''))))='REGISTERED')
	
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 6,'Retailer GST','Composition','Composition Not allow YES/NO, when Retailer Type is  Non Regesitered'+RtrCode FROM #Cn2Cs_Prk_RetailerGST CSM
	WHERE RTRIM(LTRIM(UPPER(ISNULL(Composite,'')))) IN ('YES','NO') AND 
	NOT EXISTS(SELECT * FROM #Cn2Cs_Prk_RetailerGST B WHERE CSM.RtrCode=B.RtrCode and RTRIM(LTRIM(UPPER(ISNULL(B.RetailerType,''))))='REGISTERED')
	INSERT INTO #ToAvoidUDCRetailer (RtrCode)
	SELECT DISTINCT RtrCode FROM #Cn2Cs_Prk_RetailerGST 
	WHERE RTRIM(LTRIM(UPPER(ISNULL(RelatedParty,'')))) NOT IN ('YES','NO')
	
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 7,'Retailer GST','Related Party','Related Party Should be YES / No '+RtrCode FROM #Cn2Cs_Prk_RetailerGST CSM
	WHERE RTRIM(LTRIM(UPPER(ISNULL(RelatedParty,'')))) NOT IN ('YES','NO')
		
	DELETE FROM ETL_Prk_CN2CS_UdcDetails WHERE MasterName='RETAILER MASTER' AND UpdateFlag=1
	
	DECLARE @RtrId AS INT
	SET @RtrId=0
	
	DECLARE Cur_RetailerGST CURSOR
	FOR SELECT ISNULL(LTRIM(RTRIM(A.RtrCode)),''),ISNULL(LTRIM(RTRIM([StateCode])),''),ISNULL(LTRIM(RTRIM([RtrTaxGroup])),''),
	ISNULL(LTRIM(RTRIM([Composite])),'NA'),ISNULL(LTRIM(RTRIM([RelatedParty])),''),ISNULL(LTRIM(RTRIM([PanNumber])),''),
	ISNULL(LTRIM(RTRIM([GSTTIN])),''),ISNULL(LTRIM(RTRIM([RetailerType])),''),R.RtrId 
	FROM #Cn2Cs_Prk_RetailerGST A
	INNER JOIN Retailer R (NOLOCK) ON A.RtrCode=R.RtrCode WHERE [DownLoadFlag] ='D' AND
	A.RtrCode NOT IN (SELECT RtrCode FROM #ToAvoidUDCRetailer)
	OPEN Cur_RetailerGST
	FETCH NEXT FROM Cur_RetailerGST INTO @RtrCode,@StateCode,@RtrTaxGroup,@Composite,
	@RelatedParty,@PanNumber,@GSTTIN,@RetailerType,@RtrId
	WHILE @@FETCH_STATUS=0
	BEGIN
	
			SET @Po_ErrNo=0
			SET @TaxGrpId=0			
			
			DELETE FROM ETL_Prk_CN2CS_UdcDetails WHERE MasterName='RETAILER MASTER' AND [Column Code]=@RtrCode
			
			IF NOT EXISTS(SELECT * FROM TaxGroupSetting WHERE RtrGroup=@RtrTaxGroup AND TaxGroup=1)
			BEGIN
				INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
				SELECT DISTINCT 1,'Retailer GST','Tax Group Code','Tax Group Code Not Foud'
				SET @Po_ErrNo =1
				SET @TaxGrpId=0
			END
			ELSE
			BEGIN
				SELECT @TaxGrpId=TaxGroupId FROM TaxGroupSetting WHERE RtrGroup=@RtrTaxGroup AND TaxGroup=1
			END
			
			IF RTRIM(LTRIM(UPPER(ISNULL(@GSTTIN,''))))<>''
			BEGIN
				IF (SELECT dbo.Fn_ValidateSaveUDC(79,@RtrId,2,'GSTIN',@GSTTIN))<>''
				BEGIN
					INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
					SELECT 1,'Retailer GST','GSTIN',dbo.Fn_ValidateSaveUDC(79,@RtrId,2,'GSTIN',@GSTTIN)					
					SET @Po_ErrNo =1
				END
			END
			
			IF RTRIM(LTRIM(UPPER(ISNULL(@PanNumber,''))))<>''
			BEGIN								
				IF (SELECT dbo.Fn_ValidateSaveUDC(79,@RtrId,2,'PanNumber',@PanNumber))<>''
				BEGIN
					INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
					SELECT 1,'Retailer GST','PanNumber',dbo.Fn_ValidateSaveUDC(79,@RtrId,2,'PanNumber',@PanNumber)
					--SELECT DISTINCT 1,'Retailer GST','PanNumber','Invalid Pan Number'
					SET @Po_ErrNo =1
				END
				
			END
			
			IF RTRIM(LTRIM(UPPER(ISNULL(@RetailerType,''))))='REGISTERED' 
			BEGIN			
				IF (SELECT DBO.Fn_ISGSTINNumber(@GSTTIN))=1
				BEGIN
					INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
					SELECT DISTINCT 1,'Retailer GST','GSTIN','Invalid GST Tin Number'
					SET @Po_ErrNo =1
				END
				
				IF (SELECT DBO.Fn_ISPanNumber(@PanNumber))=1
				BEGIN
					INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
					SELECT DISTINCT 1,'Retailer GST','PanNumber','Invalid Pan Number'
					SET @Po_ErrNo =1
				END
			END			
			
			SET @StateName=''
			SELECT @StateName=StateName FROM StateMaster WHERE StateCode=@StateCode
			
		
			 			
			IF @Po_ErrNo=0
			BEGIN		
				IF @GSTEnabled=1
				BEGIN
					IF ISNULL(@TaxGrpId,0)<>0
					BEGIN
						UPDATE A SET TaxGroupId=@TaxGrpId,LastModDate=CONVERT(VARCHAR(10),GETDATE(),121) FROM Retailer A 
						WHERE RtrCode=@RtrCode
					END
				END
				ELSE
				BEGIN
					DELETE FROM RetailerGSTTaxGroupUpdate WHERE RetailerCode=@RtrCode
					INSERT INTO RetailerGSTTaxGroupUpdate(RetailerCode,TaxGroup,UpdateDateTime,UpdateFlag)
					SELECT @RtrCode,@RtrTaxGroup,Getdate(),0
				END	
			
				INSERT INTO ETL_Prk_CN2CS_UdcDetails (MasterName,ColumnName,[Column Code],[ColumnValue],UpdateFlag)
				SELECT DISTINCT 'Retailer Master','State Name',@RtrCode,@StateName,0 UNION ALL
				SELECT DISTINCT 'Retailer Master','GSTIN',@RtrCode,@GSTTIN,0 UNION ALL
				SELECT DISTINCT 'Retailer Master','Composition',@RtrCode,@Composite,0 UNION ALL
				SELECT DISTINCT 'Retailer Master','Related Party',@RtrCode,@RelatedParty,0 UNION ALL
				SELECT DISTINCT 'Retailer Master','Retailer Type',@RtrCode,@RetailerType,0 UNION ALL
				SELECT DISTINCT 'Retailer Master','PAN Number',@RtrCode,@PanNumber,0
				
				IF EXISTS(SELECT * FROM ETL_Prk_CN2CS_UdcDetails WHERE MasterName='Retailer Master')
				BEGIN
					EXEC Proc_Validate_CN2CS_UdcDetails 0
				END
				--Shipping Address
				EXEC Proc_UpdateRetailerShipping @RtrId,0
				
			END
			
		FETCH NEXT FROM Cur_RetailerGST INTO @RtrCode,@StateCode,@RtrTaxGroup,@Composite,
		@RelatedParty,@PanNumber,@GSTTIN,@RetailerType,@RtrId
	END
	CLOSE Cur_RetailerGST
	DEALLOCATE Cur_RetailerGST

	UPDATE E SET E.DownLoadFlag='Y' FROM Cn2Cs_Prk_RetailerGST E (NOLOCK) 
	WHERE EXISTS(SELECT * FROM ETL_Prk_CN2CS_UdcDetails A WHERE UPPER(A.MasterName)='RETAILER MASTER' AND [Column Code]=E.RtrCode)
	AND NOT EXISTS(SELECT RtrCode from #ToAvoidUDCRetailer C WHERE C.RtrCode=E.RtrCode)
		
	RETURN
END
GO
DELETE FROM CustomUpDownload WHERE UpDownload='Upload' AND Module IN ('GSTAcknowledge','TransactionWiseGrnTracking','UDCDetails','InputTaxCreditReport','PurchaseReturn_Approval_GST','ReturnTaxuploadGST','SalesTaxUploadGST','RetailerShipAddress')
GO
DELETE FROM CustomUpDownload WHERE UpDownload='Upload' AND Module IN ('BillSeriesDtGST','WindowsDisplayService','ServiceInvoice','PurchaseinvSeriesDtGST','CompanyCountersGST','CountersGST')
GO
DECLARE @UploadSlNo AS INT
SET @UploadSlNo=0
SELECT @UploadSlNo=ISNULL(MAX(SlNo),0) FROM CustomUpDownload WHERE Updownload='Upload'
INSERT INTO CustomUpDownload(SlNo,SeqNo,Module,Screen,ExportFnName,ImportProcName,ParkTable,ValidateProcName,TranType,UpDownload,MandatoryFile)
SELECT @UploadSlNo+1,1,'GSTAcknowledge','GSTAcknowledge','Proc_Cs2Cn_GSTAcknowledge','','Cs2Cn_Prk_GSTAcknowledge','','Master','Upload',1 UNION
SELECT @UploadSlNo+2,1,'PurchaseReturn_Approval_GST','PurchaseReturn_Approval_GST','Proc_Cs2Cn_PurchaseReturn_Approval','','Cs2Cn_Prk_PurchaseReturn_Approval','','Master','Upload',1  UNION
SELECT @UploadSlNo+3,1,'SalesTaxUploadGST','SalesTaxUploadGST','Proc_Cs2Cn_SalesTaxuploadGST','','Cs2Cn_SalesTaxuploadGST','','Transaction','Upload',1 UNION
SELECT @UploadSlNo+4,1,'ReturnTaxuploadGST','ReturnTaxuploadGST','Proc_Cs2Cn_ReturnTaxuploadGST','','Cs2Cn_ReturnTaxuploadGST','','Transaction','Upload',1 UNION
SELECT @UploadSlNo+5,1,'RetailerShipAddress','RetailerShipAddress','Proc_Cs2Cn_RetailerShipAddress','','Cs2Cn_Prk_RetailerShipAddress','','Master','Upload',1 UNION
SELECT @UploadSlNo+6,1,'UDCDetails','UDCDetails','Proc_Cs2Cn_UDCDetails','','Cs2Cn_Prk_UDCDetails','','Master','Upload',1 UNION
SELECT @UploadSlNo+7,1,'InputTaxCreditReport','InputTaxCreditReport','Proc_CS2CN_InputTaxCreditReport','','Cs2Cn_Prk_InputTaxCreditReport','','Transaction','Upload',1 UNION
SELECT @UploadSlNo+8,1,'TransactionWiseGrnTracking','TransactionWiseGrnTracking','Proc_Cs2Cn_TransactionWiseGrnTracking','','Cs2Cn_Prk_TransactionWiseGrnTracking','','Transaction','Upload',1
GO
DECLARE @UploadSlNo1 AS INT
SET @UploadSlNo1=0
SELECT @UploadSlNo1=ISNULL(MAX(SlNo),0) FROM CustomUpDownload WHERE Updownload='Upload'
INSERT INTO CustomUpDownload(SlNo,SeqNo,Module,Screen,ExportFnName,ImportProcName,ParkTable,ValidateProcName,TranType,UpDownload,MandatoryFile)
SELECT @UploadSlNo1+1,1,'PurchaseinvSeriesDtGST','PurchaseinvSeriesDtGST','Proc_Cs2Cn_PurchaseinvSeriesDtGST','','Cs2Cn_Prk_PurchaseinvSeriesDtGST','','Master','Upload',1 UNION
SELECT @UploadSlNo1+2,1,'BillSeriesDtGST','BillSeriesDtGST','Proc_Cs2Cn_BillSeriesDtGST','','Cs2Cn_Prk_BillSeriesDtGST','','Master','Upload',1 UNION
SELECT @UploadSlNo1+3,1,'CompanyCountersGST','CompanyCountersGST','Proc_Cs2Cn_CompanyCountersGST','','Cs2Cn_Prk_CompanyCountersGST','','Master','Upload',1 UNION
SELECT @UploadSlNo1+4,1,'CountersGST','CountersGST','Proc_Cs2Cn_CounterGST','','Cs2Cn_Prk_CountersGST','','Master','Upload',1 UNION
SELECT @UploadSlNo1+5,1,'ServiceInvoice','ServiceInvoice','Proc_Cs2Cn_ServiceInvoice','','Cs2Cn_Prk_ServiceInvoice','','Transaction','Upload',1 UNION ALL
SELECT @UploadSlNo1+6,1,'WindowsDisplayService','WindowsDisplayService','Proc_Cs2Cn_Prk_ServiceWindow','','Cs2Cn_Prk_ServiceWindow','Proc_Cs2Cn_Prk_ServiceWindow','Transaction','Upload',1
GO
DELETE FROM Tbl_UploadIntegration
INSERT INTO Tbl_UploadIntegration([SequenceNo],[ProcessName],[FolderName],[PrkTableName],[CreatedDate]) 
SELECT 1,'Upload Record Check','UploadRecordCheck','Cs2Cn_Prk_UploadRecordCheck','2011-03-22' UNION ALL
SELECT 2,'Retailer','Retailer','Cs2Cn_Prk_Retailer','2011-03-22' UNION ALL
SELECT 3,'Daily Sales','Daily_Sales','Cs2Cn_Prk_DailySales','2011-03-22' UNION ALL
SELECT 4,'Stock','Stock','Cs2Cn_Prk_Stock','2011-03-22' UNION ALL
SELECT 5,'Sales Return','Sales_Return','Cs2Cn_Prk_SalesReturn','2011-03-22' UNION ALL
SELECT 6,'Purchase Confirmation','Purchase_Confirmation','Cs2Cn_Prk_PurchaseConfirmation','2011-03-22' UNION ALL
SELECT 7,'Purchase Return','Purchase_Return','Cs2Cn_Prk_PurchaseReturn','2011-03-22' UNION ALL
SELECT 8,'Claims','Claims','Cs2Cn_Prk_ClaimAll','2011-03-22' UNION ALL
SELECT 9,'Scheme Utilization','Scheme_Utilization','Cs2Cn_Prk_SchemeUtilizationDetails','2011-03-22' UNION ALL
SELECT 10,'Sample Issue','Sample_Issue','Cs2Cn_Prk_SampleIssue','2011-03-22' UNION ALL
SELECT 11,'Sample Receipt','Sample_Receipt','Cs2Cn_Prk_SampleReceipt','2011-03-22' UNION ALL
SELECT 12,'Sample Return','Sample_Return','Cs2Cn_Prk_SampleReturn','2011-03-22' UNION ALL
SELECT 13,'Salesman','Salesman','Cs2Cn_Prk_Salesman','2011-03-22' UNION ALL
SELECT 14,'Route','Route','Cs2Cn_Prk_Route','2011-03-22' UNION ALL
SELECT 15,'Retailer Route','Retailer_Route','Cs2Cn_Prk_RetailerRoute','2011-03-22' UNION ALL
SELECT 16,'Order Booking','Order_Booking','Cs2Cn_Prk_OrderBooking','2011-03-22' UNION ALL
SELECT 17,'Sales Invoice Orders','Sales_Invoice_Orders','Cs2Cn_Prk_SalesInvoiceOrders','2011-03-22' UNION ALL
SELECT 18,'Scheme Claim Details','Scheme_Claim_Details','Cs2Cn_Prk_Claim_SchemeDetails','2011-03-22' UNION ALL
SELECT 19,'Daily Business Details','Daily_Business_Details','Cs2Cn_Prk_DailyBusinessDetails','2011-03-22' UNION ALL
SELECT 20,'DB Details','DB_Details','Cs2Cn_Prk_DBDetails','2011-03-22' UNION ALL
SELECT 21,'Download Tracing','DownloadTracing','Cs2Cn_Prk_DownLoadTracing','2011-03-22' UNION ALL
SELECT 22,'Upload Tracing','UploadTracing','Cs2Cn_Prk_UpLoadTracing','2011-03-22' UNION ALL
SELECT 23,'Daily Retailer Details','Daily_Retailer_Details','Cs2Cn_Prk_DailyRetailerDetails','2011-03-22' UNION ALL
SELECT 25,'Cluster Assign','Cluster_Assign','Cs2Cn_Prk_ClusterAssign','2011-03-22' UNION ALL
SELECT 26,'Purchase Order','Purchase_Order','Cs2Cn_Prk_PurchaseOrder','2011-03-22' UNION ALL
SELECT 27,'Route Village','Route_Village','Cs2Cn_Prk_RouteVillage','2011-03-22' UNION ALL
SELECT 28,'MIS Details','MIS_Details','Cs2Cn_Prk_MISDetails','2015-11-30' UNION ALL
SELECT 29,'TaxSettingDetails','TaxSettingDetails','Cs2Cn_Prk_TempTaxSettingDetails','2015-11-30' UNION ALL
SELECT 30,'InstitutionsTargetSetting','InstitutionsTargetSetting','Cs2Cn_Prk_InstitutionsTargetSetting','2017-01-03' UNION ALL
SELECT 31,'RailwayDiscountReconsolidation','RailwayDiscountReconsolidation','Cs2Cn_Prk_RailwayDiscountReconsolidation','2017-01-03' UNION ALL
SELECT 32,'ChainWiseBillDetails','ChainWiseBillDetails','Cs2Cn_Prk_ChainWiseBillDetails','2017-01-03' UNION ALL
SELECT 33,'MTChainSKUWise','MTChainSKUWise','Cs2Cn_Prk_MTChainSKUWise','2017-01-03' UNION ALL
SELECT 34,'MTDebitSummary','MTDebitSummary','Cs2Cn_Prk_MTDebitSummary','2017-01-03' UNION ALL
SELECT 35,'SchemeStockReconsolidation','SchemeStockReconsolidation','Cs2Cn_Prk_SchemeStockReconsolidation','2017-01-03' UNION ALL
SELECT 36,'DebitNoteTopSheet1','DebitNoteTopSheet1','Cs2Cn_Prk_DebitNoteTopSheet1','2017-01-03' UNION ALL
SELECT 37,'DebitNoteTopSheet2','DebitNoteTopSheet2','Cs2Cn_Prk_DebitNoteTopSheet2','2017-01-03' UNION ALL
SELECT 38,'DebitNoteTopSheet3','DebitNoteTopSheet3','Cs2Cn_Prk_DebitNoteTopSheet3','2017-01-03' UNION ALL
SELECT 39,'GSTAcknowledge','GSTAcknowledge','Cs2Cn_Prk_GSTAcknowledge',CONVERT(VARCHAR(10),GETDATE(),121) UNION ALL
SELECT 40,'PurchaseReturn_Approval_GST','PurchaseReturn_Approval_GST','Cs2Cn_Prk_PurchaseReturn_Approval',GETDATE() UNION ALL
SELECT 41,'SalesTaxUploadGST','SalesTaxUploadGST','Cs2Cn_SalesTaxuploadGST',GETDATE() UNION ALL
SELECT 42,'ReturnTaxuploadGST','ReturnTaxuploadGST','Cs2Cn_ReturnTaxuploadGST',GETDATE() UNION ALL
SELECT 43,'RetailerShipAddress','RetailerShipAddress','Cs2Cn_Prk_RetailerShipAddress',GETDATE() UNION ALL
SELECT 44,'UDCDetails','UDCDetails','Cs2Cn_Prk_UDCDetails',GETDATE() UNION ALL
SELECT 45,'InputTaxCreditReport','InputTaxCreditReport','Cs2Cn_Prk_InputTaxCreditReport',GETDATE() UNION ALL
SELECT 46,'TransactionWiseGrnTracking','TransactionWiseGrnTracking','Cs2Cn_Prk_TransactionWiseGrnTracking',GETDATE() UNION ALL
SELECT 1001,'ReUpload Initiate','ReUploadInitiate','Cs2Cn_Prk_ReUploadInitiate','2011-03-22' UNION ALL
SELECT 1002,'Downloaded Details','Downloaded_Details','Cs2Cn_Prk_DownloadedDetails','2011-03-22'
GO
DECLARE @SequenceNo1 AS INT
SET @SequenceNo1=0
SELECT @SequenceNo1=ISNULL(MAX(SequenceNo),0) FROM Tbl_UploadIntegration WHERE SequenceNo<1000
INSERT INTO Tbl_UploadIntegration(SequenceNo,ProcessName,FolderName,PrkTableName,CreatedDate)
SELECT @SequenceNo1+1,'PurchaseinvSeriesDtGST','PurchaseinvSeriesDtGST','Cs2Cn_Prk_PurchaseinvSeriesDtGST',GETDATE() UNION
SELECT @SequenceNo1+2,'BillSeriesDtGST','BillSeriesDtGST','Cs2Cn_Prk_BillSeriesDtGST',GETDATE() UNION
SELECT @SequenceNo1+3,'CompanyCountersGST','CompanyCountersGST','Cs2Cn_Prk_CompanyCountersGST',GETDATE() UNION
SELECT @SequenceNo1+4,'CountersGST','CountersGST','Cs2Cn_Prk_CountersGST',GETDATE() UNION
SELECT @SequenceNo1+5,'ServiceInvoice','ServiceInvoice','Cs2Cn_Prk_ServiceInvoice',GETDATE() UNION 
SELECT @SequenceNo1+6,'WindowsDisplayService','WindowsDisplayService','Cs2Cn_Prk_ServiceWindow',GETDATE() 
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Cs2Cn_Prk_GSTAcknowledge' AND xtype='U')
BEGIN
CREATE TABLE Cs2Cn_Prk_GSTAcknowledge
(
	SlNo		[numeric](38, 0) IDENTITY(1,1) NOT NULL,	
	DistCode	[varchar](50) NULL,
	ModuleId	[varchar](50) NULL,
	AcknowledgeStatus	[Varchar](10) NULL,
	UploadFlag	[varchar](2)NULL,
	[SyncId] [numeric](38, 0) NULL,
	[ServerDate] [datetime] NULL
)
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Cs2Cn_GSTAcknowledge' AND xtype='P')
DROP PROCEDURE Proc_Cs2Cn_GSTAcknowledge
GO
--update GSTConfiguration set AcknowledgeStatus=1 where ActivationStatus=0
--exec Proc_Cs2Cn_GSTAcknowledge 0,'2017-04-19'
CREATE PROCEDURE Proc_Cs2Cn_GSTAcknowledge
(
	@Po_ErrNo INT OUTPUT,
	@ServerDate DATETIME
)
AS 
SET NOCOUNT ON
BEGIN
/*********************************
* PROCEDURE	: Proc_Cs2Cn_GSTAcknowledge
* PURPOSE	: Extract GST ACKNOWLEDGE Status from CoreStocky to Console
* NOTES		:
* CREATED	: S.MOORTHI ON 18/04/2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
*
*********************************/
	
	DECLARE @DistCode	AS NVARCHAR(50)
	
	DELETE FROM Cs2Cn_Prk_GSTAcknowledge WHERE UploadFlag='Y' 	
	SELECT @DistCode = DistributorCode FROM Distributor
	
	SET @Po_ErrNo=0
	
	INSERT INTO Cs2Cn_Prk_GSTAcknowledge 
	(	
		DistCode,
		ModuleId,
		AcknowledgeStatus,
		UploadFlag,
		ServerDate
	)
	SELECT @DistCode,'GSTCONFIG','YES','N',@ServerDate from GSTConfiguration
	WHERE ActivationStatus=1 and AcknowledgeStatus=1 AND ConsoleAckStatus=0 and ModuleId='GSTCONFIG'
	AND UploadFlag='N'
	
	UPDATE GSTConfiguration SET UploadFlag='Y' 
	WHERE ActivationStatus=1 and AcknowledgeStatus=1 AND ConsoleAckStatus=0 and ModuleId='GSTCONFIG'
	AND UploadFlag='N'
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE name='Proc_ValidateUdcDetails' AND XTYPE='P')
DROP PROCEDURE Proc_ValidateUdcDetails
GO
-- EXEC Proc_ValidateUdcDetails ''
CREATE PROCEDURE Proc_ValidateUdcDetails
(
	@Po_ErrNo INT OUTPUT 
)
AS       
/*********************************    
* PROCEDURE: Proc_ValidateUdcDetails    
* PURPOSE: To Insert and Update records      
* CREATED: Boopathy.P on 20/09/2007    
*********************************/       
SET NOCOUNT ON    
BEGIN       
	DECLARE @ErrDesc AS VARCHAR(1000)  
	DECLARE @rno AS INT  
	DECLARE @TabName AS VARCHAR(50)  
	DECLARE @GetKey AS INT
	DECLARE @Taction AS INT
	DECLARE @MasterName AS Varchar(100)
	DECLARE @ColName AS Varchar(100)
	DECLARE @ColCode AS Varchar(100)
	DECLARE @ColValue AS Varchar(100)
	DECLARE @UdcHdId AS INT
	DECLARE @UdcMasId AS INT
	DECLARE @RecId AS INT
	DECLARE @UdcDtId AS INT
	DECLARE @TempStr AS VARCHAR(4000)
	DECLARE @sSQL AS VARCHAR(4000)
	DECLARE @UniqueId AS INT
	DECLARE @Mandatory AS INT
	DECLARE @RtrId AS INT
	DECLARE @TempUdcMasterId AS Varchar(50)
	SET @TabName = 'ETL_Prk_UdcDetails'  
	SET @Po_ErrNo =0
	
	SELECT * INTO #ETL_Prk_UdcDetails FROM ETL_Prk_UdcDetails
	CREATE TABLE #UdcToAvoid
	(
		[MasterName]	VARCHAR(100),
		[ColumnName]	VARCHAR(100)
	)
		
	INSERT INTO #UdcToAvoid([MasterName],[ColumnName])
	SELECT DISTINCT MasterName,ColumnName FROM ETL_Prk_UdcDetails (NOLOCK) WHERE UPPER(LTRIM(RTRIM([MasterName])))= 'PRODUCT MASTER' 
	and [ColumnName] IN ('HSN Code','HSN Description')
	UNION ALL	
	SELECT DISTINCT MasterName,ColumnName FROM ETL_Prk_UdcDetails (NOLOCK) WHERE UPPER(LTRIM(RTRIM([MasterName])))= 'SUPPLIER MASTER' 
	AND [ColumnName] in ('State Name','GSTIN','Status')
	UNION ALL
	SELECT DISTINCT MasterName,ColumnName FROM ETL_Prk_UdcDetails (NOLOCK) WHERE UPPER(LTRIM(RTRIM([MasterName])))= 'DISTRIBUTOR INFO MASTER' 
	AND [ColumnName] in ('State Name','GSTIN','Distributor Type','PAN Number')
	
	IF EXISTS(SELECT * FROM #UdcToAvoid)
	BEGIN
		INSERT INTO Errorlog 
		SELECT 1,@TabName,'MasterName,ColumnName','Udc Details should be download from Console : '
		+[MasterName]+' - '+ColumnName FROM #UdcToAvoid 
	END
	
	DECLARE Cur_UdcDt CURSOR   
	FOR SELECT DISTINCT ISNULL([MasterName],'') AS [MasterName],ISNULL([ColumnName],'') AS [ColumnName],
    	ISNULL([Column Code],'') AS [Column Code],ISNULL([ColumnValue],'') AS [ColumnValue]
    	FROM #ETL_Prk_UdcDetails A
    	WHERE NOT EXISTS(SELECT * FROM #UdcToAvoid B WHERE A.[MasterName]=B.[MasterName] AND A.ColumnName=B.ColumnName)
    	Order By [MasterName],[ColumnName],[Column Code]
	
	OPEN Cur_UdcDt  
	FETCH NEXT FROM Cur_UdcDt INTO @MasterName,@ColName,@ColCode,@ColValue 
	set @Rno = 0  
	WHILE @@FETCH_STATUS=0  
	BEGIN  	  
		set @Taction = 2
	
		IF LTRIM(RTRIM(@MasterName))= ''
		BEGIN
			SET @ErrDesc = 'Master Name should not be blank'  
			INSERT INTO Errorlog VALUES (1,@TabName,'Master Name',@ErrDesc)   
			SET @Taction = 0 
			SET @Po_ErrNo =1 
		END
		ELSE IF LTRIM(RTRIM(@ColName))= ''
		BEGIN
			SET @ErrDesc = 'Column Name should not be blank'  
			INSERT INTO Errorlog VALUES (1,@TabName,'Column Name',@ErrDesc)   
			SET @Taction = 0 
			SET @Po_ErrNo =1 
		END
		ELSE IF LTRIM(RTRIM(@ColCode))= ''
		BEGIN
			SET @ErrDesc = 'Column Code should not be blank'  
			INSERT INTO Errorlog VALUES (1,@TabName,'Column Code',@ErrDesc)   
			SET @Taction = 0 
			SET @Po_ErrNo =1 
		END
		
		SELECT @TempUdcMasterId=B.UdcMasterId FROM UdcHD A INNER JOIN UdcMaster B ON A.MasterId=B.MasterId WHERE UPPER(B.ColumnName)=UPPER(LTRIM(RTRIM(@ColName)))
		IF EXISTS (SELECT UdcMasterId FROM UdcMaster WHERE UdcMasterId=@TempUdcMasterId)
		BEGIN
			SELECT @Mandatory=ColumnMandatory FROM UdcMaster WHERE UdcMasterId=@TempUdcMasterId
		END
		IF @Mandatory=1
		BEGIN
			IF LTRIM(RTRIM(@ColValue))= ''
			BEGIN
				SET @ErrDesc = 'Column Value should not be blank'  
				INSERT INTO Errorlog VALUES (1,@TabName,'Column Value',@ErrDesc)   
				SET @Taction = 0 
				SET @Po_ErrNo =1 
			END
		END
		--ELSE
		--BEGIN
			--SET @ColValue=NULL
		--END
		
		IF @ColName='GSTIN'
		BEGIN
			IF RTRIM(LTRIM(UPPER(ISNULL(@ColValue,''))))<>''
			BEGIN
				IF UPPER(LTRIM(RTRIM(@MasterName)))= 'RETAILER MASTER'
				BEGIN					
					SET @RtrId=0
					SELECT @RtrId=RtrId FROM Retailer where RtrCode=@ColCode
					IF (SELECT dbo.Fn_ValidateSaveUDC(79,@RtrId,2,'GSTIN',@ColValue))<>''
					BEGIN
						INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
						SELECT 1,'Retailer GST','GSTIN',dbo.Fn_ValidateSaveUDC(79,@RtrId,2,'GSTIN',@ColValue)	
						SET @Po_ErrNo =1
					END				
					ELSE
					BEGIN
						IF (SELECT DBO.Fn_ISGSTINNumber(@ColValue))=1
						BEGIN
							INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
							SELECT DISTINCT 1,@TabName,'GSTIN','Invalid GST Tin Number'
							SET @Po_ErrNo =1
						END
					END
				END
			END
		END
		
		IF @ColName='PanNumber' or @ColName='PAN Number'
		BEGIN
			IF RTRIM(LTRIM(UPPER(ISNULL(@ColValue,''))))<>''
			BEGIN
				IF UPPER(LTRIM(RTRIM(@MasterName)))= 'RETAILER MASTER'
				BEGIN
					SET @RtrId=0
					SELECT @RtrId=RtrId FROM Retailer where RtrCode=@ColCode
					IF (SELECT dbo.Fn_ValidateSaveUDC(79,@RtrId,2,'PanNumber',@ColValue))<>''
					BEGIN
						INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
						SELECT 1,'Retailer GST','PanNumber',dbo.Fn_ValidateSaveUDC(79,@RtrId,2,'PanNumber',@ColValue)	
						SET @Po_ErrNo =1
					END				
				END			
				ELSE
				BEGIN
					IF (SELECT DBO.Fn_ISPanNumber(@ColValue))=1
					BEGIN
						INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
						SELECT DISTINCT 1,'Retailer GST','PanNumber','Invalid Pan Number'
						SET @Po_ErrNo =1
					END
				END
			END
		END
		
		IF RTRIM(LTRIM(UPPER(ISNULL(@ColName,''))))='REGISTERED' 
		BEGIN
			IF @ColName='GSTIN'
			BEGIN		
				IF (SELECT DBO.Fn_ISGSTINNumber(@ColValue))=1
				BEGIN
					INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
					SELECT DISTINCT 1,'Retailer GST','GSTIN','Invalid GST Tin Number'
					SET @Po_ErrNo =1
				END
			END
			
			IF @ColName='PanNumber' or @ColName='PAN Number'
			BEGIN
				IF (SELECT DBO.Fn_ISPanNumber(@ColValue))=1
				BEGIN
					INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
					SELECT DISTINCT 1,'Retailer GST','PanNumber','Invalid Pan Number'
					SET @Po_ErrNo =1
				END
			END
		END		
		
		IF @Po_ErrNo = 0 
		BEGIN
			IF UPPER(LTRIM(RTRIM(@MasterName)))= 'PRODUCT MASTER' 
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('PRODUCT MASTER')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('PRODUCT','PrdCCode','PrdId',LTRIM(RTRIM(@ColCode)),1)
					END
				END
			END
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'RETAILER MASTER'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('RETAILER MASTER')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('RETAILER','RtrCode','RtrId',LTRIM(RTRIM(@ColCode)),1)
					END
				END
			END
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'ROUTE MASTER'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('ROUTE MASTER')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('ROUTEMASTER','RMCode','RMId',LTRIM(RTRIM(@ColCode)),1)
					END
				END
			END
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'SALESMAN MASTER'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('SALESMAN MASTER')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('SALESMAN','SMCode','SMId',LTRIM(RTRIM(@ColCode)),1)
					END
				END
			END
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'BANK MASTER'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('BANK MASTER')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('BANK','BnkCode','BnkId',LTRIM(RTRIM(@ColCode)),1)
					END
				END
			END
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'BANK BRANCH MASTER'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('BANK BRANCH MASTER')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('BANKBRANCH','BnkBrCode','BnkBrId',LTRIM(RTRIM(@ColCode)),1)
					END
				END
			END
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'COMPANY MASTER'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('COMPANY MASTER')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('COMPANY','CmpCode','CmpId',LTRIM(RTRIM(@ColCode)),1)
					END
				END
			END
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'SUPPLIER MASTER'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('SUPPLIER MASTER')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('SUPPLIER','SpmCode','SpmId',LTRIM(RTRIM(@ColCode)),1)
					END
				END
			END  
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'ROUTE VILLAGE MAPPING'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('ROUTE VILLAGE MAPPING')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('ROUTEVILLAGE','VillageCode','VillageId',LTRIM(RTRIM(@ColCode)),1)
					END
				END
			END 
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'TRANSPORTER MASTER'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('TRANSPORTER MASTER')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('TRANSPORTER','TransporterCode','TransporterId',LTRIM(RTRIM(@ColCode)),1)
					END
				END
			END 
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'RETAILER SHIPPING ADDRESS'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('RETAILER SHIPPING ADDRESS')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('RETAILERSHIPADD','RtrCode','RtrShipId',LTRIM(RTRIM(@ColCode)),2)
					END
				END
			END
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'VEHICLE CATEGORY MASTER'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('VEHICLE CATEGORY MASTER')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('VEHICLECATEGORY','VehicleCtgCode','VehicleCtgId',LTRIM(RTRIM(@ColCode)),1)
					END
				END
			END 
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'VEHICLE'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('VEHICLE')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('VEHICLE','VehicleCode','VehicleId',LTRIM(RTRIM(@ColCode)),1)
					END
				END
			END 
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'TAXGROUPSETTING'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('TAXGROUPSETTING')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('TaxGroupSetting','RtrGroup','TaxGroupId',LTRIM(RTRIM(@ColCode)),3)
					END
				END
			END 
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'TAXCONFIGURATION'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('TAXCONFIGURATION')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('TAXCONFIGURATION','TaxCode','TaxId',LTRIM(RTRIM(@ColCode)),1)
					END
				END
			END 
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'DISTRIBUTOR INFO MASTER'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('DISTRIBUTOR INFO MASTER')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('DISTRIBUTOR','DistributorCode','DistributorId',LTRIM(RTRIM(@ColCode)),1)
					END
				END
			END 
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'VEHICLE SUBSIDY MASTER'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('VEHICLE SUBSIDY MASTER')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('VEHICLESUBSIDY','VehicleSubCode','VehicleSubId',LTRIM(RTRIM(@ColCode)),1)
					END
				END
			END 
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'BATCH MASTER'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('BATCH MASTER')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('PRODUCTBATCH','PrdbatCode','PrdBatId',LTRIM(RTRIM(@ColCode)),1)
					END
				END
			END 
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'DELIVERYBOY MASTER'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('DELIVERYBOY MASTER')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('DELIVERYBOY','DlvBoyCode','DlvBoyId',LTRIM(RTRIM(@ColCode)),1)
					END
				END
			END 
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'KIT PRODUCT REGISTER'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('KIT PRODUCT REGISTER')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('KITPRODUCT','PrdDCode','PrdId',LTRIM(RTRIM(@ColCode)),4)
					END
				END
			END
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'LOCATION MASTER'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('LOCATION MASTER')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('LOCATION','LcnCode','LcnId',LTRIM(RTRIM(@ColCode)),1)
					END
				END
			END 
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'RETAILER CATEGORY HIERARCHY'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('RETAILER CATEGORY HIERARCHY')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('RETAILERCATEGORY','CtgCode','CtgMainId',LTRIM(RTRIM(@ColCode)),1)
					END
				END
			END 
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'SALESFORCE HIERARCHY'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('SALESFORCE HIERARCHY')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('SALESFORCE','SalesForceCode','SalesForceMainId',LTRIM(RTRIM(@ColCode)),1)
					END
				END
			END 
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'GEOGRAPHY HIERARCHY'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('GEOGRAPHY HIERARCHY')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('GEOGRAPHY','GeoCode','GeoMainId',LTRIM(RTRIM(@ColCode)),1)
					END
				END
			END 
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'REASON MASTER'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('REASON MASTER')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('REASONMASTER','ReasonCode','ReasonId',LTRIM(RTRIM(@ColCode)),1)
					END
				END
			END 
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'CREDIT NOTE RETAILER'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('CREDIT NOTE RETAILER')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQueryWithMaster('CREDITNOTERETAILER','RtrCode','CrNoteNumber',LTRIM(RTRIM(@ColCode)),@UdcHdId,@UdcMasId,1)
					END
				END
			END 
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'DEBIT NOTE RETAILER'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('DEBIT NOTE RETAILER')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQueryWithMaster('DEBITNOTERETAILER','RtrCode','DbNoteNumber',LTRIM(RTRIM(@ColCode)),@UdcHdId,@UdcMasId,1)
					END
				END
			END 
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'CREDIT NOTE SUPPLIER'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('CREDIT NOTE SUPPLIER')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQueryWithMaster('CREDITNOTESUPPLIER','SpmCode','CrNoteNumber',LTRIM(RTRIM(@ColCode)),@UdcHdId,@UdcMasId,2)
					END
				END
			END
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'DEBIT NOTE SUPPLIER'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('DEBIT NOTE SUPPLIER')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQueryWithMaster('DEBITNOTESUPPLIER','SpmCode','DbNoteNumber',LTRIM(RTRIM(@ColCode)),@UdcHdId,@UdcMasId,2)
					END
				END
			END
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'CLAIM GROUP MASTER'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('CLAIM GROUP MASTER')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('CLAIMGROUPMASTER','ClmGrpCode','ClmGrpId',LTRIM(RTRIM(@ColCode)),1)
					END
				END
			END 
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'STOCK MANAGEMENT'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('STOCK MANAGEMENT')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('STOCKMANAGEMENTTYPE','Description','StkMgmtTypeId',LTRIM(RTRIM(@ColCode)),1)
					END
				END
			END 
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'MANUAL CLAIM'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('MANUAL CLAIM')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('ManualClaimMaster','MacRefNo','MacRefId',LTRIM(RTRIM(@ColCode)),1)
					END
				END
			END 
			IF exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[TempTbl]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
			drop table [dbo].[TempTbl]
			CREATE TABLE TempTbl (ColId INT)
			INSERT INTO TempTbl EXEC (@TempStr)
			IF (SELECT Count(*) FROM TempTbl) > 0
			BEGIN
				SELECT @RecId = ColId FROM TempTbl
			END
			ELSE
			BEGIN
				SET @RecId=0
			END
			IF @RecId <> 0 			BEGIN			
				SELECT @UdcDtId = dbo.Fn_ReturnMasterRecId(@RecId,@UdcHdId,@UdcMasId)	
				IF @UdcDtId <> 0
				BEGIN
					UPDATE UdcDetails SET ColumnValue =LTRIM(RTRIM(@ColValue)) WHERE MasterId = @UdcHdId AND UdcMasterId = @UdcMasId AND MasterRecordId=@RecId 			
					SET @sSQL = 'UPDATE UdcDetails SET ColumnValue = ' + CAST(@ColValue AS VARCHAR(50)) + 'WHERE MasterId =' + CAST(@UdcHdId AS VARCHAR(10)) + 
						    ' AND UdcMasterId =' + CAST(@UdcMasId AS VARCHAR(10)) + ' AND MasterRecordId=' + CAST(@RecId AS VARCHAR(10)) 
				DELETE FROM ETL_Prk_UdcDetails WHERE MasterName=@MasterName AND ColumnName=@ColName and [Column Code]=@ColCode and ColumnValue=@ColValue ---ABM
				END
				ELSE
				BEGIN
					SELECT @GetKey= dbo.Fn_GetPrimaryKeyInteger('UDCDetails','UdcDetailsId',CAST(YEAR(GetDate())AS INT),MONTH(GETDATE()))
					
					SELECT @UniqueId= Dbo.Fn_ReturnUDCUniqueId(LTRIM(RTRIM(@ColValue)),@UdcMasId)
					
					IF @UniqueId=0 
					BEGIN
						SELECT @UniqueId=dbo.Fn_GetPrimaryKeyInteger('UDCDetails','UDCUniqueId',CAST(YEAR(GetDate())AS INT),MONTH(GETDATE()))
					END

					INSERT INTO UDCDetails(UdcDetailsId,UdcMasterId,MasterId,MasterRecordId,ColumnValue,UDCUniqueId,Availability,LastModBy,LastModDate,AuthId,AuthDate) 
					VALUES (@GetKey,@UdcMasId,@UdcHdId,@RecId,LTRIM(RTRIM(@ColValue)),@UniqueId,1,1,convert(varchar(10),getdate(),121),1,convert(varchar(10),getdate(),121))

				DELETE FROM ETL_Prk_UdcDetails WHERE MasterName=@MasterName AND ColumnName=@ColName and [Column Code]=@ColCode and ColumnValue=@ColValue --ABM
					SET @sSQL = 'INSERT INTO UDCDetails(UdcDetailsId,UdcMasterId,MasterId,MasterRecordId,ColumnValue,UDCUniqueId,Availability,LastModBy,LastModDate,AuthId,AuthDate) VALUES(' +
						    CAST(@GetKey AS VARCHAR(50)) + ',' + CAST(@UdcMasId AS VARCHAR(10)) + ',' + CAST(@UdcHdId AS VARCHAR(10)) + ',' + CAST(@UdcHdId AS VARCHAR(50)) + ',' + 
						    CAST(@RecId AS VARCHAR(50)) + ',' + CAST(@ColValue AS VARCHAR(50)) + ','+ CAST(@UniqueId AS VARCHAR(50)) + ',1,1,''' + convert(varchar(10),getdate(),121) + ''',1,''' + convert(varchar(10),getdate(),121) + ''')'
					INSERT INTO Translog(strSql1) Values (@sSQL)

					UPDATE counters SET currvalue = currvalue+1 where tabname = 'UDCDetails' and fldname = 'UdcDetailsId'
					SET @sSQL = 'UPDATE counters SET currvalue = currvalue + 1 where tabname = ''UDCDetails'' and fldname = ''UdcDetailsId'''
					INSERT INTO Translog(strSql1) Values (@sSQL)

					UPDATE counters SET currvalue = currvalue+1 where tabname = 'UDCDetails' and fldname = 'UDCUniqueId'
					SET @sSQL = 'UPDATE counters SET currvalue = currvalue + 1 where tabname = ''UDCDetails'' and fldname = ''UDCUniqueId'''
					INSERT INTO Translog(strSql1) Values (@sSQL)
				END
			END
		END

	
		FETCH NEXT FROM Cur_UdcDt INTO @MasterName,@ColName,@ColCode,@ColValue
	END  
	CLOSE Cur_UdcDt  
	DEALLOCATE Cur_UdcDt   
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='U' and NAME='ETL_Prk_TaxMapping_GST')
DROP TABLE ETL_Prk_TaxMapping_GST
GO
CREATE TABLE [ETL_Prk_TaxMapping_GST](
	[DistCode] [nvarchar](200) NULL,
	[PrdCode] [nvarchar](200) NULL,
	[TaxGroupCode] [nvarchar](200) NULL,
	[MapStatus] [int] NULL,
	[DownloadFlag] [varchar](1) NULL,
	[CreatedDate] [datetime] NULL
)
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='P' and NAME='Proc_ImportTaxGrpMapping_GST')
DROP PROCEDURE Proc_ImportTaxGrpMapping_GST
GO
CREATE   PROCEDURE [Proc_ImportTaxGrpMapping_GST]
(
	@Pi_Records TEXT
)
AS
/***************************************************************************************************
* PROCEDURE	: Proc_ImportTaxGrpMapping_GST
* PURPOSE	: To Insert records from xml file in the Table ETL_Prk_TaxMapping_GST
* CREATED	: Murugan.R
* CREATED DATE	: 25/04/2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
----------------------------------------------------------------------------------
* {date}		{developer}  {brief modification description}
* 
**************************************************************************************************/
SET NOCOUNT ON
BEGIN
	DECLARE @hDoc INTEGER
	DELETE FROM ETL_Prk_TaxMapping_GST WHERE DownloadFlag = 'Y'

	EXEC sp_xml_preparedocument @hDoc OUTPUT,@Pi_Records

	INSERT INTO ETL_Prk_TaxMapping_GST(DistCode,PrdCode,TaxGroupCode,MapStatus,DownloadFlag,CreatedDate)
	SELECT DistCode,PrdCode,TaxGroupCode,MapStatus,DownloadFlag,ISNULL(CreatedDate,GETDATE())
	FROM OPENXML (@hdoc,'/Root/Console2CS_ProductGroupSkuMap_GST',1)
	WITH (
			DistCode		NVARCHAR(200),
			PrdCode			NVARCHAR(200),
			TaxGroupCode	NVARCHAR(200),
			MapStatus		INT,
			DownloadFlag    NVARCHAR(1),
			CreatedDate		DATETIME
		 ) XMLObj

	EXEC sp_xml_removedocument @hDoc
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='P' and NAME='Proc_ValidateTaxMapping_GST')
DROP PROCEDURE Proc_ValidateTaxMapping_GST
GO
--EXEC Proc_ValidateTaxMapping 0
CREATE PROCEDURE Proc_ValidateTaxMapping_GST
(
	@Po_ErrNo INT OUTPUT
)
AS
/*************************************************************************************************
* PROCEDURE: Proc_ValidateTaxMapping_GST
* PURPOSE: To Insert and UPDATE records from xml file in the Table Tax Mapping
* CREATED: Murugan.R 25/04/2017 One time download for GST migration
***************************************************************************************************
*
**************************************************************************************************/
BEGIN
SET NOCOUNT ON
	SET @Po_ErrNo=0
	DELETE FROM ETL_Prk_TaxMapping_GST WHERE DownloadFlag = 'Y'
	
	CREATE TABLE #ToAvoidTaxGroup
	(
	  PrdCCode     NVARCHAR (200) COLLATE SQL_Latin1_General_CP1_CI_AS,
	  TaxGrpCode   NVARCHAR (200) COLLATE SQL_Latin1_General_CP1_CI_AS
	)
	
	IF NOT EXISTS(SELECT 'X' FROM GSTConfiguration (NOLOCK) WHERE ConsoleAckStatus=1 and  ActivationStatus=1 AND AcknowledgeStatus=1)
	BEGIN
		RETURN
	END
	
	/*Added by Raja C for INC-13461 Begins Here */
    SELECT PrdCode,MAX(CreatedDate)CreatedDate INTO #MaxDateData FROM ETL_Prk_TaxMapping_GST
	WHERE DownloadFlag ='D'	GROUP BY PrdCode
	
	DELETE A FROM ETL_Prk_TaxMapping_GST A(NOLOCK)INNER JOIN #MaxDateData B ON A.PrdCode = B.PrdCode
	WHERE A.CreatedDate <> B.CreatedDate
	/*Added by Raja C for INC-13461 Ends Here */
	
	--Product Code Validation
	INSERT INTO #ToAvoidTaxGroup (PrdCCode,TaxGrpCode)
	SELECT DISTINCT PrdCode,TaxGroupCode FROM ETL_Prk_TaxMapping_GST A (NOLOCK) 
	WHERE NOT EXISTS (SELECT DISTINCT PrdCCode FROM Product B (NOLOCK) WHERE A.PrdCode = B.PrdCCode)
	AND DownloadFlag = 'D'
	
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 1,'Product','PrdCCode','Product Code Not Available-'+PrdCode FROM ETL_Prk_TaxMapping_GST A (NOLOCK) 
	WHERE NOT EXISTS (SELECT DISTINCT PrdCCode FROM Product B (NOLOCK) WHERE A.PrdCode = B.PrdCCode)
	AND DownloadFlag = 'D'
	
	INSERT INTO #ToAvoidTaxGroup (PrdCCode,TaxGrpCode)
	SELECT DISTINCT PrdCode,TaxGroupCode FROM ETL_Prk_TaxMapping_GST (NOLOCK) WHERE LTRIM(RTRIM(ISNULL(PrdCode,''))) = ''
	AND DownloadFlag = 'D'
	
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 1,'Product','PrdCCode','Product Code Should not be Empty or Null'+PrdCode
	FROM ETL_Prk_TaxMapping_GST (NOLOCK) WHERE LTRIM(RTRIM(ISNULL(PrdCode,''))) = '' AND DownloadFlag = 'D'
	
	--Tax Group Code Validation
	INSERT INTO #ToAvoidTaxGroup (PrdCCode,TaxGrpCode)
	SELECT DISTINCT PrdCode,TaxGroupCode FROM ETL_Prk_TaxMapping_GST A (NOLOCK) 
	WHERE NOT EXISTS (SELECT DISTINCT PrdGroup FROM TaxGroupSetting B (NOLOCK) WHERE A.TaxGroupCode = B.PrdGroup AND TaxGroup = 2)
	AND DownloadFlag = 'D'
	
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 1,'TaxGroupSetting','PrdGroup','Product Tax Group Code Not Available-'+TaxGroupCode FROM ETL_Prk_TaxMapping_GST A (NOLOCK) 
	WHERE NOT EXISTS (SELECT DISTINCT PrdGroup FROM TaxGroupSetting B (NOLOCK) WHERE A.TaxGroupCode = B.PrdGroup AND TaxGroup = 2)
	AND DownloadFlag = 'D'
	
	INSERT INTO #ToAvoidTaxGroup (PrdCCode,TaxGrpCode)
	SELECT DISTINCT PrdCode,TaxGroupCode FROM ETL_Prk_TaxMapping_GST (NOLOCK) WHERE LTRIM(RTRIM(ISNULL(TaxGroupCode,''))) = ''
	AND DownloadFlag = 'D'
	
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 1,'TaxGroupSetting','PrdGroup','Product Tax Group Code Should not be Empty or Null'+TaxGroupCode
	FROM ETL_Prk_TaxMapping_GST (NOLOCK) WHERE LTRIM(RTRIM(ISNULL(TaxGroupCode,''))) = '' AND DownloadFlag = 'D'
	
	--Duplcate Check Multiple Tax Group Code in Single Product
	INSERT INTO #ToAvoidTaxGroup (PrdCCode,TaxGrpCode)
	SELECT DISTINCT A.PrdCode,TaxGroupCode FROM ETL_Prk_TaxMapping_GST A (NOLOCK) INNER JOIN 
	(SELECT DISTINCT PrdCode,COUNT(DISTINCT TaxGroupCode) AS Counts FROM ETL_Prk_TaxMapping_GST A (NOLOCK) WHERE
	NOT EXISTS (SELECT PrdCCode,TaxGrpCode FROM #ToAvoidTaxGroup B WHERE A.PrdCode = B.PrdCCode AND A.TaxGroupCode = B.TaxGrpCode) 
	GROUP BY PrdCode HAVING COUNT(DISTINCT TaxGroupCode) > 1) B ON A.PrdCode = B.PrdCode
	
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 1,'ETL_Prk_TaxMapping_GST','PrdCode','Same Product Should not Allow Multiple TaxGroup Code-'+A.PrdCode
	FROM ETL_Prk_TaxMapping_GST A (NOLOCK) INNER JOIN (SELECT DISTINCT PrdCode,COUNT(DISTINCT TaxGroupCode) AS Counts 
	FROM ETL_Prk_TaxMapping_GST A (NOLOCK) WHERE NOT EXISTS (SELECT PrdCCode,TaxGrpCode FROM #ToAvoidTaxGroup B 
	WHERE A.PrdCode = B.PrdCCode AND A.TaxGroupCode = B.TaxGrpCode) GROUP BY PrdCode 
	HAVING COUNT(DISTINCT TaxGroupCode) > 1) B ON A.PrdCode = B.PrdCode	 	
	
	--Product Tax Group Code Updated
	UPDATE A SET A.TaxGroupId  = C.TaxGroupId FROM Product A (NOLOCK) 
	INNER JOIN ETL_Prk_TaxMapping_GST B (NOLOCK) ON A.PrdCCode = B.PrdCode
	INNER JOIN TaxGroupSetting C (NOLOCK) ON B.TaxGroupCode = C.PrdGroup
	WHERE C.TaxGroup = 2 AND DownloadFlag = 'D' AND MapStatus = 1 AND
	NOT EXISTS (SELECT PrdCCode,TaxGrpCode FROM #ToAvoidTaxGroup D WHERE B.PrdCode = D.PrdCCode AND B.TaxGroupCode = D.TaxGrpCode)
	
	--Product Batch Tax Group Code Updated
	UPDATE PB SET PB.TaxGroupId  = C.TaxGroupId FROM ProductBatch PB (NOLOCK)
	INNER JOIN Product A (NOLOCK) ON PB.PrdId = A.PrdId 
	INNER JOIN ETL_Prk_TaxMapping_GST B (NOLOCK) ON A.PrdCCode = B.PrdCode
	INNER JOIN TaxGroupSetting C (NOLOCK) ON B.TaxGroupCode = C.PrdGroup
	WHERE C.TaxGroup = 2 AND DownloadFlag = 'D' AND MapStatus = 1 AND
	NOT EXISTS (SELECT PrdCCode,TaxGrpCode FROM #ToAvoidTaxGroup D WHERE B.PrdCode = D.PrdCCode AND B.TaxGroupCode = D.TaxGrpCode)
		
	DECLARE @RtrTaxGrpid AS INT
	SET @RtrTaxGrpid=0
	IF EXISTS (SELECT 'X' FROM TaxGroupSetting(Nolock) where UPPER(RtrGroup)='RTRINTRA')
	BEGIN
	 SET @RtrTaxGrpid=(SELECT TOP 1 TaxGroupid from TaxGroupSetting(Nolock)  where UPPER(RtrGroup)='RTRINTRA' Order by TaxGroupid Desc)
	 UPDATE Retailer SET TaxGroupid=@RtrTaxGrpid where TaxGroupid=0
	 UPDATE RetailerShipadd SET TaxGroupid=@RtrTaxGrpid where TaxGroupid=0
	END
	
	--Download Flag Change
	UPDATE A SET A.DownloadFlag = 'Y' FROM ETL_Prk_TaxMapping_GST A (NOLOCK) 
	INNER JOIN TaxGroupSetting B (NOLOCK) ON A.TaxGroupCode = B.PrdGroup 
	INNER JOIN Product C (NOLOCK) ON A.PrdCode = C.PrdCCode AND B.TaxGroupId = C.TaxGroupId 
	WHERE TaxGroup = 2 AND DownloadFlag = 'D'
	
RETURN
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='P' and NAME='Proc_ImportTaxConfigGroupSetting')
DROP PROCEDURE Proc_ImportTaxConfigGroupSetting
GO
--Exec Proc_ImportTaxConfigGroupSetting '<Data></Data>'
CREATE PROCEDURE [Proc_ImportTaxConfigGroupSetting]
(
	@Pi_Records TEXT
)
AS
/*********************************
* PROCEDURE	: Proc_ImportTaxConfigGroupSetting
* PURPOSE	: To Insert records from xml file in the Table Etl_Prk_TaxConfig_GroupSetting
* CREATED	: Mahalakshmi .A
* CREATED DATE	: 02/09/2009
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
SET NOCOUNT ON
BEGIN
	DECLARE @hDoc INTEGER
	DELETE FROM Etl_Prk_TaxSetting WHERE DownloadFlag='Y'
	EXEC sp_xml_preparedocument @hDoc OUTPUT,@Pi_Records
	INSERT INTO Etl_Prk_TaxSetting(TaxGroupCode,Type,PrdTaxGroupCode,TaxCode,Percentage,ApplyOn,Discount,
        SchDiscount,DBDiscount,CDDiscount,ApplyTax,CreatedDate,FreightCharge,[TaxType],[EffectiveFrom],DownloadFlag)
	SELECT TaxGroupCode,Type,PrdTaxGroupCode,TaxCode,Percentage,ApplyOn,Discount,SchDiscount,DBDiscount,CDDiscount,
        ApplyTax,CreatedDate,FreightCharge,[TaxType],[EffectiveFrom],DownloadFlag
	FROM OPENXML (@hdoc,'/Root/Console2CS_TaxSettings',1)
	WITH (
		TaxGroupCode		 NVARCHAR(100),
		Type			     NVARCHAR(100),
		PrdTaxGroupCode		 NVARCHAR(100),
		TaxCode				 NVARCHAR(100),
		Percentage			 NVARCHAR(100),
		ApplyOn				 NVARCHAR(100),
		Discount 			 NVARCHAR(100),
        SchDiscount          NVARCHAR(100),
        DBDiscount           NVARCHAR(100),
        CDDiscount           NVARCHAR(100), 
		ApplyTax			 NVARCHAR(100),
		CreatedDate          NVARCHAR(100),  
		FreightCharge        NVARCHAR(100),
		[TaxType]			 NVARCHAR(20),
		[EffectiveFrom]		 DATETIME,
		DownLoadFlag		 NVARCHAR(100)
	) XMLObj
	
	EXEC sp_xml_removedocument @hDoc 
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='P' and NAME='Proc_Cn2Cs_TaxSetting')
DROP PROCEDURE Proc_Cn2Cs_TaxSetting
GO
/*
BEGIN TRANSACTION
EXEC Proc_CN2CS_TaxSetting 0
--SELECT * FROM Etl_Prk_TaxSetting WHERE DownloadFlag='D'
--SELECT * FROM TaxSettingEffectiveDate
--SELECT * FROM ErrorLog
SELECT * FROM TaxSettingMaster
--SELECT * FROM TaxSettingDetail
--SElect * from Etl_Prk_TaxSetting
ROLLBACK TRANSACTION
*/
CREATE PROCEDURE [dbo].[Proc_Cn2Cs_TaxSetting]
(
	@Po_ErrNo INT OUTPUT
)
AS
/*************************************************************************************************************
* PROCEDURE	: Proc_CN2CS_TaxSetting
* PURPOSE	: To Store TaxGroup Setting records  from xml file in the Table TaxGroupSetting
* CREATED	: Mahalakshmi.A
* CREATED DATE	: 20/08/2009
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
--------------------------------------------------------------------------------------------------------------
* {date}		{developer}		{brief modification description}
* 07/09/2009    Nandakumar R.G  Change the validations for Tax on Tax and other basic validations
* 09.09.2009    Panneer			Update the Download Flag in Parking Table
* 19/08/2010    Nandakumar R.G  Discount Validation Changes
* 28/04/2011    Nandakumar R.G  Discount Validation Changes
* 25/04/2017    Murugan.R		GST Migration (Taxtype,EffectiveFrom,Status)
**************************************************************************************************************/
SET NOCOUNT ON
BEGIN
	DECLARE @TaxGroupCode	 AS NVARCHAR(200)
	DECLARE @Type			 AS NVARCHAR(200)
	DECLARE @PrdTaxGroupCode AS NVARCHAR(200)
	DECLARE @TaxCode		 AS NVARCHAR(200)
	DECLARE @Percentage	     AS NUMERIC(38,6)
	DECLARE @ApplyOn		 AS NVARCHAR(100)
	DECLARE @Discount		 AS NVARCHAR(100)
	DECLARE @Tabname		 AS NVARCHAR(100)
	DECLARE @ErrDesc		 AS NVARCHAR(1000)
	DECLARE @sSql			 AS NVARCHAR(4000)
	DECLARE @ErrStatus		 AS INT
	DECLARE @Taction		 AS INT
	DECLARE @TaxSeqId	 AS INT
	DECLARE @RtrId		 AS INT
	DECLARE @PrdId		 AS INT
	DECLARE @BillSeqId	 AS INT
	DECLARE @Slno		 AS INT
	DECLARE @ColNo		 AS INT
	DECLARE @iCntColNo	 AS INT
	DECLARE @iColType	 AS INT
	DECLARE @ColValue	 AS INT
	DECLARE @RowId		 AS INT
	DECLARE @TaxId		 AS INT
	DECLARE @iApplyOn	 AS INT
	DECLARE @iDiscount	 AS INT
	DECLARE @DColNo		 AS INT
	DECLARE @FieldDesc	 AS NVARCHAR(100)
	DECLARE @SColNo		 AS INT
	DECLARE @ColId		 AS INT
	DECLARE @SlNo1		 AS INT
	DECLARE @SlNo2		 AS INT
	DECLARE @BillSeqId_Temp	AS	INT
	DECLARE @EffetOnTax		AS	INT
	DECLARE @SchDiscount		 AS NVARCHAR(100)
	DECLARE @DBDiscount		 AS NVARCHAR(100)
	DECLARE @CDDiscount		 AS NVARCHAR(100)
	DECLARE @FreightCharge   AS NVARCHAR(100)
	DECLARE @TaxType	 AS NVARCHAR(20)
	DECLARE @EffectiveFrom			 AS DATETIME
	DECLARE @ActivationFlag			 AS TinyInt
	/*
		SET @iColType=1   For TaxPercentage Value Column
		SET @iColType=2	  For MRP,SellingRate,PurchaseRate , Bill Column Sequence Value and Purchase Column Sequence
		SET @iColType=3   For Tax Configuration TaxCode Column Value
		SET @ColValue=0	  For "NONE"
		SET @ColValue=1   For "ADD"
		SET @ColValue=2   For "REDUCE"		
	*/
	
	SET @Tabname = 'Etl_Prk_TaxSetting'
	SET @Po_ErrNo=0
	SET @iCntColNo=0
	DECLARE @TblColNo TABLE
	(
		ColNo			INT IDENTITY(0,1) NOT NULL,
		SlNo1			INT,
		SlNo2			INT,
		FieldDesc		NVARCHAR(50)
	)
	DECLARE @T1 TABLE
	(
		SlNo			INT,
		FieldDesc		NVARCHAR(50)
	)
	DELETE FROM Etl_Prk_TaxSetting WHERE DownLoadFlag='Y'
	SET @ActivationFlag=0
	
	IF EXISTS(SELECT 'X' FROM GSTConfiguration (NOLOCK) WHERE ActivationStatus=1 and AcknowledgeStatus=1 and ConsoleAckStatus=1 
	and CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121)>=ActivationDate and ModuleId='GSTConfig')
	BEGIN
		SELECT @ActivationFlag=1
	END

	
	SELECT DISTINCT ISNULL(TaxGroupCode,'') as TaxGroupCode,ISNULL(Type,'') as Type,ISNULL(PrdTaxGroupCode,'') as PrdTaxGroupCode,
	ISNULL(TaxType,'VAT') as TaxType,
	MAX(ISNULL(EffectiveFrom,CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121))) as EffectiveFrom
	INTO #EtlTaxSettings
	FROM Etl_Prk_TaxSetting WHERE DownloadFlag='D'
	GROUP BY ISNULL(TaxGroupCode,''),ISNULL(Type,''),ISNULL(PrdTaxGroupCode,''),ISNULL(TaxType,'VAT')
	
	
	DELETE A FROM Etl_Prk_TaxSetting A (NOLOCK)	
	INNER JOIN #EtlTaxSettings B ON
	ISNULL(A.TaxGroupCode,'')=ISNULL(B.TaxGroupCode,'')
	AND ISNULL(A.PrdTaxGroupCode,'')=ISNULL(B.PrdTaxGroupCode,'')
	AND ISNULL(A.Type,'')=ISNULL(B.Type,'')
	AND ISNULL(A.TaxType,'VAT')=ISNULL(B.TaxType,'VAT')
	AND ISNULL(A.EffectiveFrom,CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121))<>ISNULL(B.EffectiveFrom,CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121))
	WHERE DownloadFlag='D'
	
	
	SELECT DISTINCT DistCode,A.TaxGroupCode,A.Type,A.PrdTaxGroupCode,A.TaxCode,
	Percentage,ApplyOn,Discount,SchDiscount,DBDiscount,CDDiscount,ApplyTax,
	DownloadFlag,CreatedDate,A.TaxType,A.EffectiveFrom,FreightCharge
	INTO #Etl_Prk_Tax
	FROM Etl_Prk_TaxSetting A (NOLOCK) INNER JOIN #EtlTaxSettings B ON
	ISNULL(A.TaxGroupCode,'')=ISNULL(B.TaxGroupCode,'')
	AND ISNULL(A.PrdTaxGroupCode,'')=ISNULL(B.PrdTaxGroupCode,'')
	AND ISNULL(A.Type,'')=ISNULL(B.Type,'')
	AND ISNULL(A.TaxType,'VAT')=ISNULL(B.TaxType,'VAT')
	AND ISNULL(A.EffectiveFrom,CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121))=ISNULL(B.EffectiveFrom,CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121))
	WHERE DownloadFlag='D'
	DECLARE Cur_TaxSettingMaster CURSOR		--TaxSettingMaster Cursor
	FOR SELECT DISTINCT ISNULL(TaxGroupCode,''),ISNULL(Type,''),ISNULL(PrdTaxGroupCode,''),TaxType,EffectiveFrom
	FROM #EtlTaxSettings
	-- WHERE DownloadFlag='D'
	OPEN Cur_TaxSettingMaster
	FETCH NEXT FROM Cur_TaxSettingMaster INTO @TaxGroupCode,@Type,@PrdTaxGroupCode,@TaxType,@EffectiveFrom
	WHILE @@FETCH_STATUS=0
	BEGIN
		--Check the Empty Values for TaxSetting Master
		SET @iCntColNo=6
		IF @TaxGroupCode=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Tax Group Code: ' + @TaxGroupCode + ' should not be Empty'
			INSERT INTO Errorlog VALUES (1,@Tabname,'Tax Group code',@ErrDesc)
		END
		IF @Type=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Type ' + @Type + ' should not be Empty'
			INSERT INTO Errorlog VALUES (1,@Tabname,'Type',@ErrDesc)
		END
		IF @PrdTaxGroupCode=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Product Tax Group Code ' + @PrdTaxGroupCode + ' should not be Empty'
			INSERT INTO Errorlog VALUES (1,@Tabname,'Type',@ErrDesc)
		END
		--Till Here
		IF NOT EXISTS  (SELECT * FROM TaxgroupSetting WHERE RtrGroup = @TaxGroupCode) --Get the Retailer/Supplier TaxGroupId's
		BEGIN
			SET @Po_ErrNo=1
			SET @ErrDesc = 'TaxGroupCode ' + @TaxGroupCode + ' is not available' 		
			INSERT INTO Errorlog VALUES (2,@Tabname,'Tax Group Code',@ErrDesc)
		END
		ELSE
		BEGIN
			SELECT @RtrId=TaxGroupId FROM TaxGroupSetting WHERE RtrGroup= @TaxGroupCode
		END
		IF NOT EXISTS  (SELECT * FROM TaxgroupSetting WHERE PrdGroup = @PrdTaxGroupCode) --Get the Product TaxGroupId's
		BEGIN
			SET @Po_ErrNo=1
			SET @ErrDesc = 'Product TaxGroupCode ' + @PrdTaxGroupCode + ' is not available' 		
			INSERT INTO Errorlog VALUES (2,@Tabname,'Product Tax Group Code',@ErrDesc)
		END
		ELSE
		BEGIN
			SELECT @PrdId=TaxGroupId FROM TaxGroupSetting WHERE PrdGroup= @PrdTaxGroupCode
		END
		
		DELETE FROM @T1
		IF UPPER(@Type)='RETAILER'
		BEGIN
			SELECT DISTINCT @BillSeqId=BillSeqId FROM BillSequenceDetail (NOLOCK)
			WHERE SlNo >= 4 and SlNo < (SELECT Slno From BillSequenceDetail WHERE RefCode='H' and BillSeqId in
			(SELECT Max(BillSeqId) FROM BillSequenceMaster)) and BillSeqId in
			(SELECT Max(BillSeqId) FROM BillSequenceMaster)
			SELECT @iCntColNo=@iCntColNo+COUNT(BillSeqId) FROM BillSequenceDetail (NOLOCK)
			WHERE SlNo >= 4 and SlNo < (SELECT Slno From BillSequenceDetail WHERE RefCode='H' and BillSeqId in
			(SELECT Max(BillSeqId) FROM BillSequenceMaster)) and BillSeqId in
			(SELECT Max(BillSeqId) FROM BillSequenceMaster)
			
			INSERT INTO @T1(SlNo,FieldDesc)
			SELECT Slno,FieldDesc
			FROM BillSequenceDetail (NOLOCK)
			WHERE SlNo >= 4 and SlNo <
			(SELECT Slno From BillSequenceDetail WHERE RefCode='H' and BillSeqId in
			(SELECT Max(BillSeqId) FROM BillSequenceMaster)) Order By SlNo
		END
		ELSE IF UPPER(@Type)='SUPPLIER'
		BEGIN
			SELECT DISTINCT @BillSeqId=PurSeqId FROM PurchaseSequenceDetail (NOLOCK)
			WHERE SlNo >= 3 and SlNo <
			(SELECT Slno From PurchaseSequenceDetail WHERE RefCode='D' and PurSeqId in
			(SELECT Max(PurSeqId) FROM PurchaseSequenceMaster))  and PurSeqId in
			(SELECT Max(PurSeqId) FROM PurchaseSequenceMaster)
			
			SELECT @iCntColNo=@iCntColNo+COUNT(PurSeqId) FROM PurchaseSequenceDetail (NOLOCK)
			WHERE SlNo >= 3 and SlNo <
			(SELECT Slno From PurchaseSequenceDetail WHERE RefCode='D' and PurSeqId in
			(SELECT Max(PurSeqId) FROM PurchaseSequenceMaster))  and PurSeqId in
			(SELECT Max(PurSeqId) FROM PurchaseSequenceMaster)
			INSERT INTO @T1(SlNo,FieldDesc)
			SELECT Slno,FieldDesc FROM PurchaseSequenceDetail (NOLOCK)
			WHERE SlNo >= 3 and SlNo <
			(SELECT Slno From PurchaseSequenceDetail WHERE RefCode='D' and PurSeqId in
			(SELECT Max(PurSeqId) FROM PurchaseSequenceMaster))
			and PurSeqId in
			(SELECT Max(PurSeqId) FROM PurchaseSequenceMaster) Order By SlNo
		END
		SELECT @iCntColNo=@iCntColNo+(COUNT(TaxId)) FROM TaxConfiguration
		SELECT @TaxSeqId= dbo.Fn_GetPrimaryKeyInteger('TaxSettingMaster','TaxSeqId',CAST(YEAR(GetDate())AS INT),MONTH(GETDATE()))
		IF  @Po_ErrNo=0
		BEGIN	
			INSERT INTO TaxSettingMaster(TaxSeqId,RtrId,PrdId,SequenceDate,Availability,LastModBy,LastModDate,AuthId,AuthDate,TaxType,EffectiveFrom,Status)
			VALUES(@TaxSeqId,@RtrId,@PrdID,CONVERT(NVARCHAR(11),GETDATE(),121),1,1,CONVERT(NVARCHAR(11),GETDATE(),121),1,CONVERT(NVARCHAR(11),GETDATE(),121),@TaxType,@EffectiveFrom,
			CASE @TaxType WHEN  'VAT' THEN 1 
									  ELSE 
										  CASE @ActivationFlag 
										  WHEN 1 THEN 1							
										  ELSE 0 
										  END  
									  END)
			SET @sSql= 'INSERT INTO TaxSettingMaster(TaxSeqId,RtrId,PrdId,SequenceDate,Availability,LastModBy,LastModDate,AuthId,AuthDate)VALUES('
						+ CAST(@TaxSeqId AS NVARCHAR(100)) + ',' + CAST(@RtrId AS NVARCHAR(100)) +','+ CAST(@PrdId AS NVARCHAR(100))+ ','''
						+ CONVERT(NVARCHAR(11),GETDATE(),121)+''',1,1,''' + CONVERT(NVARCHAR(11),GETDATE(),121)+''',1,'''+ CONVERT(NVARCHAR(11),GETDATE(),121)+ ''')'
						
			INSERT INTO Translog(strSql1) VALUES (@sSql)
			UPDATE Counters SET Currvalue = Currvalue + 1  WHERE	Tabname = 'TaxSettingMaster' AND Fldname = 'TaxSeqId'
			
			SET @sSQL='UPDATE Counters SET Currvalue = Currvalue + 1 WHERE Tabname = ''TaxSettingMaster'' AND Fldname = ''TaxSeqId'''
			
			INSERT INTO Translog(strSql1) Values (@sSQL)
		END
		
		DECLARE @TaxSettingTable TABLE
		(
			TaxId			INT,
			TaxGrpCode		NVARCHAR(200),
			Type			NVARCHAR(200),
			TaxPrdGrpCode	NVARCHAR(200),
			TaxCode			NVARCHAR(200),
			Percentage		NUMERIC(38,6),
			Applyon			NVARCHAR(200),
			Discount		NVARCHAR(200),
			SchDiscount		NVARCHAR(200),
			DBDiscount		NVARCHAR(200),
			CDDiscount		NVARCHAR(200),
			FreightCharge   NVARCHAR(200)
		)
		DELETE FROM @TaxSettingTable
		INSERT INTO @TaxSettingTable (TaxId,TaxGrpCode,Type,TaxPrdGrpCode,TaxCode,Percentage,Applyon,Discount,
		SchDiscount,DBDiscount,CDDiscount,FreightCharge)
		SELECT DISTINCT TC.TaxId, ISNULL(ETL1.TaxGroupCode,''),ISNULL(ETL1.Type,''),
		ISNULL(ETL1.PrdTaxGroupCode,''),ISNULL(TC.TaxCode,''),ISNULL(ETL1.Percentage,0),
		ISNULL(ETL1.ApplyOn,'None'),ISNULL(ETL1.Discount,'None'),ISNULL(ETL1.SchDiscount,'None'),
		ISNULL(ETL1.DBDiscount,'None'),ISNULL(ETL1.CDDiscount,'None'),ISNULL(ETL1.FreightCharge,'None') 
		FROM
		(SELECT ISNULL(ETL.TaxGroupCode,'') AS TaxGroupCode,ISNULL(ETL.Type,'') AS Type,ISNULL(ETL.TaxCode,'') AS TaxCode,
		ISNULL(ETL.PrdTaxGroupCode,'') AS PrdTaxGroupCode,ISNULL(ETL.Percentage,0) AS Percentage,ISNULL(ETL.ApplyOn,'') AS ApplyOn,
		ISNULL(ETL.Discount,'') AS Discount,ISNULL(ETL.SchDiscount,'') AS SchDiscount,ISNULL(ETL.DBDiscount,'') AS DBDiscount,
		ISNULL(ETL.CDDiscount,'') AS CDDiscount,ISNULL(ETL.FreightCharge,'') AS FreightCharge
		FROM Etl_Prk_TaxSetting ETL
		WHERE DownloadFlag='D' AND TaxGroupCode=@TaxGroupCode AND PrdTaxGroupCode=@PrdTaxGroupCode) ETL1
		RIGHT OUTER JOIN TaxConfiguration TC ON TC.TaxCode=ETL1.TaxCode
		SET @RowId=0
		DECLARE Cur_TaxSettingDetail CURSOR		--TaxSettingDetail Cursor
		FOR SELECT TaxGrpCode,Type,TaxPrdGrpCode,TaxCode,Percentage,Applyon,Discount,SchDiscount,DBDiscount,CDDiscount,FreightCharge
		FROM @TaxSettingTable Order By TaxId
		OPEN Cur_TaxSettingDetail
		FETCH NEXT FROM Cur_TaxSettingDetail INTO @TaxGroupCode,@Type,@PrdTaxGroupCode,@TaxCode,@Percentage,@ApplyOn,@Discount,
		@SchDiscount,@DBDiscount,@CDDiscount,@FreightCharge
		WHILE @@FETCH_STATUS=0
		BEGIN
			SET @RowId=@RowId+1
			--Nanda
			--SELECT @TaxGroupCode,@Type,@PrdTaxGroupCode,@TaxCode,@Percentage,@ApplyOn,@Discount
			
			IF @TaxCode=''	--Check Empty Values For TaxSetting Details
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Tax Code' + @TaxCode + ' should not be Empty'
				INSERT INTO Errorlog VALUES (1,@Tabname,'Tax Code',@ErrDesc)
			END
			
			IF @Percentage<0
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Percentage' + CAST(@Percentage AS NVARCHAR(20)) + ' should not be Empty'
				INSERT INTO Errorlog VALUES (1,@Tabname,'Percentage',@ErrDesc)
			END
			IF @Applyon=''
			BEGIN
				SET @iApplyOn=0
			END
			ELSE IF UPPER(@ApplyOn)='SELLINGRATE' OR UPPER(@ApplyOn)='MRP' OR UPPER(@ApplyOn)='PURCHASERATE'
			BEGIN
				SET @iApplyOn=1
			END
			ELSE
			BEGIN
				SET @iApplyOn=2
			END
			IF @Discount='ADD'
			BEGIN
				SET @iDiscount=1
			END
			ELSE IF UPPER(@Discount)='REDUCE'
			BEGIN
				SET @iDiscount=2
			END
			ELSE
			BEGIN
				SET @iDiscount=0
			END		
			--Till Here
			IF NOT EXISTS  (SELECT * FROM TaxConfiguration WHERE TaxCode = @TaxCode )
			BEGIN
				SET @Po_ErrNo=1
				SET @ErrDesc = 'Tax Code: ' + @TaxCode + ' is not available' 		
				INSERT INTO Errorlog VALUES (1,@Tabname,'Tax Code',@ErrDesc)
			END
			ELSE
			BEGIN
				SELECT @TaxId=TaxId FROM TaxConfiguration WHERE TaxCode=@TaxCode	
			END
			DELETE FROM @TblColNo
			INSERT INTO @TblColNo(SlNo1,SlNo2,FieldDesc)
			SELECT 1,1,'TaxID' AS FieldDesc
			UNION
			SELECT 2,1,'Tax Name' AS FieldDesc
			UNION
			SELECT 3,1,'Tax%' AS FieldDesc
			UNION
			SELECT 4,1,'MRP' AS FieldDesc
			UNION
			SELECT 5,1,'SELLING RATE' AS FieldDesc
			UNION
			SELECT 6,1,'PURCHASE RATE' AS FieldDesc
			UNION
			SELECT 7,Slno,FieldDesc FROM @T1
			UNION
			SELECT 8,TaxId,TaxName FROM TaxConfiguration
			
			SELECT @Slno= dbo.Fn_GetPrimaryKeyInteger('TaxSetting','SlNo',CAST(YEAR(GetDate())AS INT),MONTH(GETDATE()))					
			
			INSERT INTO TaxSettingDetail (RowId,ColNo,SlNo,BillSeqId,TaxSeqId,
			ColType,ColId,ColVal,Availability,LastModBy,LastModDate,AuthId,AuthDate)
			VALUES(@RowId,1,@SlNo,@BillSeqId,@TaxSeqId,1,@TaxId,@TaxId,1,1,CONVERT(NVARCHAR(11),GETDATE(),121),1,CONVERT(NVARCHAR(11),GETDATE(),121))
			
			SET @sSql= 'INSERT INTO TaxSettingDetail(RowId,ColNo,SlNo,BillSeqId,TaxSeqId,ColType,ColId,ColVal,Availability,LastModBy,LastModDate,AuthId,AuthDate)VALUES('
				+ CAST(@RowId AS NVARCHAR(100)) + ',1,' + CAST(@SlNo AS NVARCHAR(100)) +','+ CAST(@BillSeqId AS NVARCHAR(100))
				+ ',' + CAST(@TaxSeqId AS NVARCHAR(100)) + ',1,' + CAST(@TaxId AS NVARCHAR(100)) + ',' +CAST(@TaxId AS NVARCHAR(100)) + ',1,1,'''+CONVERT(NVARCHAR(11),GETDATE(),121) + ''',1,''' + CONVERT(NVARCHAR(11),GETDATE(),121) + ''')'
											
			INSERT INTO Translog(strSql1) VALUES (@sSql)
			UPDATE Counters SET Currvalue = Currvalue + 1  WHERE Tabname = 'TaxSetting' AND Fldname = 'SlNo'
			SET @sSQL='UPDATE Counters SET Currvalue = Currvalue + 1 WHERE Tabname = ''TaxSetting'' AND Fldname = ''SlNo'''
			INSERT INTO Translog(strSql1) Values (@sSQL)
			SELECT @Slno= dbo.Fn_GetPrimaryKeyInteger('TaxSetting','SlNo',CAST(YEAR(GetDate())AS INT),MONTH(GETDATE()))					
			INSERT INTO TaxSettingDetail (RowId,ColNo,SlNo,BillSeqId,TaxSeqId,
			ColType,ColId,ColVal,Availability,LastModBy,LastModDate,AuthId,AuthDate)
			VALUES(@RowId,3,@SlNo,@BillSeqId,@TaxSeqId,1,0,@Percentage,1,1,CONVERT(NVARCHAR(11),GETDATE(),121),1,CONVERT(NVARCHAR(11),GETDATE(),121))
					
			SET @sSql= 'INSERT INTO TaxSettingDetail(RowId,ColNo,SlNo,BillSeqId,TaxSeqId,ColType,ColId,ColVal,Availability,LastModBy,LastModDate,AuthId,AuthDate)VALUES('
				+ CAST(@RowId AS NVARCHAR(100)) + ',3,' + CAST(@SlNo AS NVARCHAR(100)) +','+ CAST(@BillSeqId AS NVARCHAR(100))
				+ ',' + CAST(@TaxSeqId AS NVARCHAR(100)) + ',1,0,' +CAST(@Percentage AS NVARCHAR(100)) + ',1,1,'''+CONVERT(NVARCHAR(11),GETDATE(),121) + ''',1,''' + CONVERT(NVARCHAR(11),GETDATE(),121) + ''')'
										
			INSERT INTO Translog(strSql1) VALUES (@sSql)
			
			UPDATE Counters SET Currvalue = Currvalue + 1  WHERE Tabname = 'TaxSetting' AND Fldname = 'SlNo'
	
			SET @sSQL='UPDATE Counters SET Currvalue = Currvalue + 1 WHERE Tabname = ''TaxSetting'' AND Fldname = ''SlNo'''
			INSERT INTO Translog(strSql1) Values (@sSQL)
			SET @sColNo=4
			
			--------TaxSetting1-->Price Settings---------------------
			DECLARE Cur_TaxSetting1 CURSOR		--Column Wise Details Inserts row Wise Cursor
			FOR SELECT ColNo,FieldDesc FROM @TblColNo WHERE SlNo1>3 AND SlNo1<7
			OPEN Cur_TaxSetting1
			FETCH NEXT FROM Cur_TaxSetting1 INTO @DColNo,@FieldDesc
			WHILE @@FETCH_STATUS=0
			BEGIN
				IF @sColNo=4 AND UPPER(@ApplyOn)='MRP'
				BEGIN
					--SET MRP as 1 Value
					SELECT @Slno= dbo.Fn_GetPrimaryKeyInteger('TaxSetting','SlNo',CAST(YEAR(GetDate())AS INT),MONTH(GETDATE()))					
					
					INSERT INTO TaxSettingDetail (RowId,ColNo,SlNo,BillSeqId,TaxSeqId,
					ColType,ColId,ColVal,Availability,LastModBy,LastModDate,AuthId,AuthDate)
					VALUES(@RowId,4,@SlNo,@BillSeqId,@TaxSeqId,2,1,1,1,1,CONVERT(NVARCHAR(11),GETDATE(),121),1,CONVERT(NVARCHAR(11),GETDATE(),121))
					SET @sSql= 'INSERT INTO TaxSettingDetail(RowId,ColNo,SlNo,BillSeqId,TaxSeqId,ColType,ColId,ColVal,Availability,LastModBy,LastModDate,AuthId,AuthDate)VALUES('
						+ CAST(@RowId AS NVARCHAR(100)) + ',' + CAST(@sColNo AS NVARCHAR(100)) + ',' + CAST(@SlNo AS NVARCHAR(100)) +','+ CAST(@BillSeqId AS NVARCHAR(100))
						+ ',' + CAST(@TaxSeqId AS NVARCHAR(100)) + ',2,1,1,1,1,'''+CONVERT(NVARCHAR(11),GETDATE(),121) + ''',1,''' + CONVERT(NVARCHAR(11),GETDATE(),121) + ''')'
											
					
					INSERT INTO Translog(strSql1) VALUES (@sSql)
					UPDATE Counters SET Currvalue = Currvalue + 1  WHERE Tabname = 'TaxSetting' AND Fldname = 'SlNo'
					SET @sSQL='UPDATE Counters SET Currvalue = Currvalue + 1 WHERE Tabname = ''TaxSetting'' AND Fldname = ''SlNo'''
					--SET Sellling Rate as 0 Value
					SELECT @Slno= dbo.Fn_GetPrimaryKeyInteger('TaxSetting','SlNo',CAST(YEAR(GetDate())AS INT),MONTH(GETDATE()))					
					INSERT INTO TaxSettingDetail (RowId,ColNo,SlNo,BillSeqId,TaxSeqId,
					ColType,ColId,ColVal,Availability,LastModBy,LastModDate,AuthId,AuthDate)
					VALUES(@RowId,5,@SlNo,@BillSeqId,@TaxSeqId,2,2,0,1,1,CONVERT(NVARCHAR(11),GETDATE(),121),1,CONVERT(NVARCHAR(11),GETDATE(),121))
					SET @sSql= 'INSERT INTO TaxSettingDetail(RowId,ColNo,SlNo,BillSeqId,TaxSeqId,ColType,ColId,ColVal,Availability,LastModBy,LastModDate,AuthId,AuthDate)VALUES('
						+ CAST(@RowId AS NVARCHAR(100)) + ',' + CAST(@sColNo AS NVARCHAR(100)) + ',' + CAST(@SlNo AS NVARCHAR(100)) +','+ CAST(@BillSeqId AS NVARCHAR(100))
						+ ',' + CAST(@TaxSeqId AS NVARCHAR(100)) + ',2,2,0,1,1,'''+CONVERT(NVARCHAR(11),GETDATE(),121) + ''',1,''' + CONVERT(NVARCHAR(11),GETDATE(),121) + ''')'
											
					
					INSERT INTO Translog(strSql1) VALUES (@sSql)
					UPDATE Counters SET Currvalue = Currvalue + 1  WHERE Tabname = 'TaxSetting' AND Fldname = 'SlNo'
					SET @sSQL='UPDATE Counters SET Currvalue = Currvalue + 1 WHERE Tabname = ''TaxSetting'' AND Fldname = ''SlNo'''
					INSERT INTO Translog(strSql1) Values (@sSQL)
					--SET Purchase Rate as 0 Value
					SELECT @Slno= dbo.Fn_GetPrimaryKeyInteger('TaxSetting','SlNo',CAST(YEAR(GetDate())AS INT),MONTH(GETDATE()))					
					INSERT INTO TaxSettingDetail (RowId,ColNo,SlNo,BillSeqId,TaxSeqId,
					ColType,ColId,ColVal,Availability,LastModBy,LastModDate,AuthId,AuthDate)
					VALUES(@RowId,6,@SlNo,@BillSeqId,@TaxSeqId,2,3,0,1,1,CONVERT(NVARCHAR(11),GETDATE(),121),1,CONVERT(NVARCHAR(11),GETDATE(),121))
					SET @sSql= 'INSERT INTO TaxSettingDetail(RowId,ColNo,SlNo,BillSeqId,TaxSeqId,ColType,ColId,ColVal,Availability,LastModBy,LastModDate,AuthId,AuthDate)VALUES('
						+ CAST(@RowId AS NVARCHAR(100)) + ',6,' + CAST(@SlNo AS NVARCHAR(100)) +','+ CAST(@BillSeqId AS NVARCHAR(100))
						+ ',' + CAST(@TaxSeqId AS NVARCHAR(100)) + ',2,3,0,1,1,'''+CONVERT(NVARCHAR(11),GETDATE(),121) + ''',1,''' + CONVERT(NVARCHAR(11),GETDATE(),121) + ''')'
											
					
					INSERT INTO Translog(strSql1) VALUES (@sSql)
					UPDATE Counters SET Currvalue = Currvalue + 1  WHERE Tabname = 'TaxSetting' AND Fldname = 'SlNo'
					SET @sSQL='UPDATE Counters SET Currvalue = Currvalue + 1 WHERE Tabname = ''TaxSetting'' AND Fldname = ''SlNo'''
					INSERT INTO Translog(strSql1) Values (@sSQL)
				END
				ELSE IF @sColNo=5 AND UPPER(@ApplyOn)='SELLINGRATE'	
				BEGIN
					--SET MRP AS Value as 0
					SELECT @Slno= dbo.Fn_GetPrimaryKeyInteger('TaxSetting','SlNo',CAST(YEAR(GetDate())AS INT),MONTH(GETDATE()))					
					INSERT INTO TaxSettingDetail (RowId,ColNo,SlNo,BillSeqId,TaxSeqId,
					ColType,ColId,ColVal,Availability,LastModBy,LastModDate,AuthId,AuthDate)
					VALUES(@RowId,4,@SlNo,@BillSeqId,@TaxSeqId,2,1,0,1,1,CONVERT(NVARCHAR(11),GETDATE(),121),1,CONVERT(NVARCHAR(11),GETDATE(),121))
					SET @sSql= 'INSERT INTO TaxSettingDetail(RowId,ColNo,SlNo,BillSeqId,TaxSeqId,ColType,ColId,ColVal,Availability,LastModBy,LastModDate,AuthId,AuthDate)VALUES('
						+ CAST(@RowId AS NVARCHAR(100)) + ',4,' + CAST(@SlNo AS NVARCHAR(100)) +','+ CAST(@BillSeqId AS NVARCHAR(100))
						+ ',' + CAST(@TaxSeqId AS NVARCHAR(100)) + ',2,1,0,1,1,'''+CONVERT(NVARCHAR(11),GETDATE(),121) + ''',1,''' + CONVERT(NVARCHAR(11),GETDATE(),121) + ''')'
											
					
					INSERT INTO Translog(strSql1) VALUES (@sSql)
					UPDATE Counters SET Currvalue = Currvalue + 1  WHERE Tabname = 'TaxSetting' AND Fldname = 'SlNo'
		
					SET @sSQL='UPDATE Counters SET Currvalue = Currvalue + 1 WHERE Tabname = ''TaxSetting'' AND Fldname = ''SlNo'''
		
					INSERT INTO Translog(strSql1) Values (@sSQL)
					--SET Selling Rate Value as 1
					SELECT @Slno= dbo.Fn_GetPrimaryKeyInteger('TaxSetting','SlNo',CAST(YEAR(GetDate())AS INT),MONTH(GETDATE()))					
					INSERT INTO TaxSettingDetail (RowId,ColNo,SlNo,BillSeqId,TaxSeqId,
					ColType,ColId,ColVal,Availability,LastModBy,LastModDate,AuthId,AuthDate)
					VALUES(@RowId,5,@SlNo,@BillSeqId,@TaxSeqId,2,2,1,1,1,CONVERT(NVARCHAR(11),GETDATE(),121),1,CONVERT(NVARCHAR(11),GETDATE(),121))
					SET @sSql= 'INSERT INTO TaxSettingDetail(RowId,ColNo,SlNo,BillSeqId,TaxSeqId,ColType,ColId,ColVal,Availability,LastModBy,LastModDate,AuthId,AuthDate)VALUES('
						+ CAST(@RowId AS NVARCHAR(100)) + ',5,' + CAST(@SlNo AS NVARCHAR(100)) +','+ CAST(@BillSeqId AS NVARCHAR(100))
						+ ',' + CAST(@TaxSeqId AS NVARCHAR(100)) + ',2,2,1,1,1,'''+CONVERT(NVARCHAR(11),GETDATE(),121) + ''',1,''' + CONVERT(NVARCHAR(11),GETDATE(),121) + ''')'
											
					
					INSERT INTO Translog(strSql1) VALUES (@sSql)
					UPDATE Counters SET Currvalue = Currvalue + 1  WHERE Tabname = 'TaxSetting' AND Fldname = 'SlNo'
		
					SET @sSQL='UPDATE Counters SET Currvalue = Currvalue + 1 WHERE Tabname = ''TaxSetting'' AND Fldname = ''SlNo'''
	
					INSERT INTO Translog(strSql1) Values (@sSQL)
					--SET Purchase Rate as 0 Value
					SELECT @Slno= dbo.Fn_GetPrimaryKeyInteger('TaxSetting','SlNo',CAST(YEAR(GetDate())AS INT),MONTH(GETDATE()))					
					INSERT INTO TaxSettingDetail (RowId,ColNo,SlNo,BillSeqId,TaxSeqId,
					ColType,ColId,ColVal,Availability,LastModBy,LastModDate,AuthId,AuthDate)
					VALUES(@RowId,6,@SlNo,@BillSeqId,@TaxSeqId,2,3,0,1,1,CONVERT(NVARCHAR(11),GETDATE(),121),1,CONVERT(NVARCHAR(11),GETDATE(),121))
					SET @sSql= 'INSERT INTO TaxSettingDetail(RowId,ColNo,SlNo,BillSeqId,TaxSeqId,ColType,ColId,ColVal,Availability,LastModBy,LastModDate,AuthId,AuthDate)VALUES('
						+ CAST(@RowId AS NVARCHAR(100)) + ',6,' + CAST(@SlNo AS NVARCHAR(100)) +','+ CAST(@BillSeqId AS NVARCHAR(100))
						+ ',' + CAST(@TaxSeqId AS NVARCHAR(100)) + ',2,3,0,1,1,'''+CONVERT(NVARCHAR(11),GETDATE(),121) + ''',1,''' + CONVERT(NVARCHAR(11),GETDATE(),121) + ''')'
											
					
					INSERT INTO Translog(strSql1) VALUES (@sSql)
					UPDATE Counters SET Currvalue = Currvalue + 1  WHERE Tabname = 'TaxSetting' AND Fldname = 'SlNo'
					SET @sSQL='UPDATE Counters SET Currvalue = Currvalue + 1 WHERE Tabname = ''TaxSetting'' AND Fldname = ''SlNo'''
					INSERT INTO Translog(strSql1) Values (@sSQL)
				END
				ELSE IF @sColNo=6 AND UPPER(@ApplyOn)='PURCHASERATE'	
				BEGIN
					--SET MRP AS Value as 0
					SELECT @Slno= dbo.Fn_GetPrimaryKeyInteger('TaxSetting','SlNo',CAST(YEAR(GetDate())AS INT),MONTH(GETDATE()))					
					INSERT INTO TaxSettingDetail (RowId,ColNo,SlNo,BillSeqId,TaxSeqId,
					ColType,ColId,ColVal,Availability,LastModBy,LastModDate,AuthId,AuthDate)
					VALUES(@RowId,4,@SlNo,@BillSeqId,@TaxSeqId,2,1,0,1,1,CONVERT(NVARCHAR(11),GETDATE(),121),1,CONVERT(NVARCHAR(11),GETDATE(),121))
					SET @sSql= 'INSERT INTO TaxSettingDetail(RowId,ColNo,SlNo,BillSeqId,TaxSeqId,ColType,ColId,ColVal,Availability,LastModBy,LastModDate,AuthId,AuthDate)VALUES('
						+ CAST(@RowId AS NVARCHAR(100)) + ',4,' + CAST(@SlNo AS NVARCHAR(100)) +','+ CAST(@BillSeqId AS NVARCHAR(100))
						+ ',' + CAST(@TaxSeqId AS NVARCHAR(100)) + ',2,1,0,1,1,'''+CONVERT(NVARCHAR(11),GETDATE(),121) + ''',1,''' + CONVERT(NVARCHAR(11),GETDATE(),121) + ''')'
											
					
					INSERT INTO Translog(strSql1) VALUES (@sSql)
					UPDATE Counters SET Currvalue = Currvalue + 1  WHERE Tabname = 'TaxSetting' AND Fldname = 'SlNo'
		
					SET @sSQL='UPDATE Counters SET Currvalue = Currvalue + 1 WHERE Tabname = ''TaxSetting'' AND Fldname = ''SlNo'''
		
					INSERT INTO Translog(strSql1) Values (@sSQL)
					--SET Sellling Rate as 0 Value
					SELECT @Slno= dbo.Fn_GetPrimaryKeyInteger('TaxSetting','SlNo',CAST(YEAR(GetDate())AS INT),MONTH(GETDATE()))					
					INSERT INTO TaxSettingDetail (RowId,ColNo,SlNo,BillSeqId,TaxSeqId,
					ColType,ColId,ColVal,Availability,LastModBy,LastModDate,AuthId,AuthDate)
					VALUES(@RowId,5,@SlNo,@BillSeqId,@TaxSeqId,2,2,0,1,1,CONVERT(NVARCHAR(11),GETDATE(),121),1,CONVERT(NVARCHAR(11),GETDATE(),121))
					SET @sSql= 'INSERT INTO TaxSettingDetail(RowId,ColNo,SlNo,BillSeqId,TaxSeqId,ColType,ColId,ColVal,Availability,LastModBy,LastModDate,AuthId,AuthDate)VALUES('
						+ CAST(@RowId AS NVARCHAR(100)) + ',' + CAST(@sColNo AS NVARCHAR(100)) + ',' + CAST(@SlNo AS NVARCHAR(100)) +','+ CAST(@BillSeqId AS NVARCHAR(100))
						+ ',' + CAST(@TaxSeqId AS NVARCHAR(100)) + ',2,2,0,1,1,'''+CONVERT(NVARCHAR(11),GETDATE(),121) + ''',1,''' + CONVERT(NVARCHAR(11),GETDATE(),121) + ''')'
											
					
					INSERT INTO Translog(strSql1) VALUES (@sSql)
					UPDATE Counters SET Currvalue = Currvalue + 1  WHERE Tabname = 'TaxSetting' AND Fldname = 'SlNo'
					SET @sSQL='UPDATE Counters SET Currvalue = Currvalue + 1 WHERE Tabname = ''TaxSetting'' AND Fldname = ''SlNo'''
					INSERT INTO Translog(strSql1) Values (@sSQL)
					--SET Purchase Rate as 1						
					SELECT @Slno= dbo.Fn_GetPrimaryKeyInteger('TaxSetting','SlNo',CAST(YEAR(GetDate())AS INT),MONTH(GETDATE()))					
					INSERT INTO TaxSettingDetail (RowId,ColNo,SlNo,BillSeqId,TaxSeqId,
					ColType,ColId,ColVal,Availability,LastModBy,LastModDate,AuthId,AuthDate)
					VALUES(@RowId,6,@SlNo,@BillSeqId,@TaxSeqId,2,3,1,1,1,CONVERT(NVARCHAR(11),GETDATE(),121),1,CONVERT(NVARCHAR(11),GETDATE(),121))
					
					SET @sSql= 'INSERT INTO TaxSettingDetail(RowId,ColNo,SlNo,BillSeqId,TaxSeqId,ColType,ColId,ColVal,Availability,LastModBy,LastModDate,AuthId,AuthDate)VALUES('
						+ CAST(@RowId AS NVARCHAR(100)) + ',6,' + CAST(@SlNo AS NVARCHAR(100)) +','+ CAST(@BillSeqId AS NVARCHAR(100))
						+ ',' + CAST(@TaxSeqId AS NVARCHAR(100)) + ',2,3,1,1,1,'''+CONVERT(NVARCHAR(11),GETDATE(),121) + ''',1,''' + CONVERT(NVARCHAR(11),GETDATE(),121) + ''')'											
					
					INSERT INTO Translog(strSql1) VALUES (@sSql)
					UPDATE Counters SET Currvalue = Currvalue + 1  WHERE Tabname = 'TaxSetting' AND Fldname = 'SlNo'
	
					SET @sSQL='UPDATE Counters SET Currvalue = Currvalue + 1 WHERE Tabname = ''TaxSetting'' AND Fldname = ''SlNo'''
	
					INSERT INTO Translog(strSql1) Values (@sSQL)
				END
				ELSE IF EXISTS(SELECT TaxCode FROM TaxConfiguration WHERE TaxCode=@ApplyOn) OR UPPER(@ApplyOn)='NONE'
				BEGIN					
					IF @sColNo=4
					BEGIN
						--SET MRP as 0 Value
						SELECT @Slno= dbo.Fn_GetPrimaryKeyInteger('TaxSetting','SlNo',CAST(YEAR(GetDate())AS INT),MONTH(GETDATE()))					
						
						INSERT INTO TaxSettingDetail (RowId,ColNo,SlNo,BillSeqId,TaxSeqId,
						ColType,ColId,ColVal,Availability,LastModBy,LastModDate,AuthId,AuthDate)
						VALUES(@RowId,4,@SlNo,@BillSeqId,@TaxSeqId,2,1,0,1,1,CONVERT(NVARCHAR(11),GETDATE(),121),1,CONVERT(NVARCHAR(11),GETDATE(),121))
						SET @sSql= 'INSERT INTO TaxSettingDetail(RowId,ColNo,SlNo,BillSeqId,TaxSeqId,ColType,ColId,ColVal,Availability,LastModBy,LastModDate,AuthId,AuthDate)VALUES('
							+ CAST(@RowId AS NVARCHAR(100)) + ',' + CAST(@sColNo AS NVARCHAR(100)) + ',' + CAST(@SlNo AS NVARCHAR(100)) +','+ CAST(@BillSeqId AS NVARCHAR(100))
							+ ',' + CAST(@TaxSeqId AS NVARCHAR(100)) + ',2,1,0,1,1,'''+CONVERT(NVARCHAR(11),GETDATE(),121) + ''',1,''' + CONVERT(NVARCHAR(11),GETDATE(),121) + ''')'
											
						INSERT INTO Translog(strSql1) VALUES (@sSql)
						UPDATE Counters SET Currvalue = Currvalue + 1  WHERE Tabname = 'TaxSetting' AND Fldname = 'SlNo'
						SET @sSQL='UPDATE Counters SET Currvalue = Currvalue + 1 WHERE Tabname = ''TaxSetting'' AND Fldname = ''SlNo'''
					END
					ELSE IF @sColNo=5
					BEGIN
						--SET Sellling Rate as 0 Value
						SELECT @Slno= dbo.Fn_GetPrimaryKeyInteger('TaxSetting','SlNo',CAST(YEAR(GetDate())AS INT),MONTH(GETDATE()))					
						INSERT INTO TaxSettingDetail (RowId,ColNo,SlNo,BillSeqId,TaxSeqId,
						ColType,ColId,ColVal,Availability,LastModBy,LastModDate,AuthId,AuthDate)
						VALUES(@RowId,5,@SlNo,@BillSeqId,@TaxSeqId,2,2,0,1,1,CONVERT(NVARCHAR(11),GETDATE(),121),1,CONVERT(NVARCHAR(11),GETDATE(),121))
						SET @sSql= 'INSERT INTO TaxSettingDetail(RowId,ColNo,SlNo,BillSeqId,TaxSeqId,ColType,ColId,ColVal,Availability,LastModBy,LastModDate,AuthId,AuthDate)VALUES('
							+ CAST(@RowId AS NVARCHAR(100)) + ',' + CAST(@sColNo AS NVARCHAR(100)) + ',' + CAST(@SlNo AS NVARCHAR(100)) +','+ CAST(@BillSeqId AS NVARCHAR(100))
							+ ',' + CAST(@TaxSeqId AS NVARCHAR(100)) + ',2,2,0,1,1,'''+CONVERT(NVARCHAR(11),GETDATE(),121) + ''',1,''' + CONVERT(NVARCHAR(11),GETDATE(),121) + ''')'
						
						INSERT INTO Translog(strSql1) VALUES (@sSql)
						UPDATE Counters SET Currvalue = Currvalue + 1  WHERE Tabname = 'TaxSetting' AND Fldname = 'SlNo'
						SET @sSQL='UPDATE Counters SET Currvalue = Currvalue + 1 WHERE Tabname = ''TaxSetting'' AND Fldname = ''SlNo'''
						INSERT INTO Translog(strSql1) Values (@sSQL)
					END
					ELSE IF @sColNo=6
					BEGIN
						--SET Purchase Rate as 0 Value
						SELECT @Slno= dbo.Fn_GetPrimaryKeyInteger('TaxSetting','SlNo',CAST(YEAR(GetDate())AS INT),MONTH(GETDATE()))					
						INSERT INTO TaxSettingDetail (RowId,ColNo,SlNo,BillSeqId,TaxSeqId,
						ColType,ColId,ColVal,Availability,LastModBy,LastModDate,AuthId,AuthDate)
						VALUES(@RowId,6,@SlNo,@BillSeqId,@TaxSeqId,2,3,0,1,1,CONVERT(NVARCHAR(11),GETDATE(),121),1,CONVERT(NVARCHAR(11),GETDATE(),121))
						SET @sSql= 'INSERT INTO TaxSettingDetail(RowId,ColNo,SlNo,BillSeqId,TaxSeqId,ColType,ColId,ColVal,Availability,LastModBy,LastModDate,AuthId,AuthDate)VALUES('
							+ CAST(@RowId AS NVARCHAR(100)) + ',6,' + CAST(@SlNo AS NVARCHAR(100)) +','+ CAST(@BillSeqId AS NVARCHAR(100))
							+ ',' + CAST(@TaxSeqId AS NVARCHAR(100)) + ',2,3,0,1,1,'''+CONVERT(NVARCHAR(11),GETDATE(),121) + ''',1,''' + CONVERT(NVARCHAR(11),GETDATE(),121) + ''')'
												
						INSERT INTO Translog(strSql1) VALUES (@sSql)
						UPDATE Counters SET Currvalue = Currvalue + 1  WHERE Tabname = 'TaxSetting' AND Fldname = 'SlNo'
						SET @sSQL='UPDATE Counters SET Currvalue = Currvalue + 1 WHERE Tabname = ''TaxSetting'' AND Fldname = ''SlNo'''
						INSERT INTO Translog(strSql1) Values (@sSQL)
					END
				END	
--				--Nanda
--				SELECT * FROM TaxSettingDetail WHERE TaxSeqId=@TaxSeqId AND RowId=@RowId
				SET @sColNo=@sColNo+1
	
				FETCH NEXT FROM Cur_TaxSetting1 INTO @DColNo,@FieldDesc
			END
			CLOSE Cur_TaxSetting1
			DEALLOCATE Cur_TaxSetting1
			-----TaxSetting1--------------------------------
			----------------TaxSetting2-->Bill/Purchase Column Sequnce Settings---------------------
			SET @sColNo=7
			SET @ColId=4
			--Nanda
			--SELECT ColNo,SlNo1,FieldDesc FROM @TblColNo WHERE SlNo1=7
			DECLARE Cur_TaxSetting2 CURSOR		--Column Wise Details Inserts row Wise Cursor
			FOR
				SELECT ColNo,SlNo1,FieldDesc,SlNo2  FROM @TblColNo WHERE SlNo1=7
			OPEN Cur_TaxSetting2
			FETCH NEXT FROM Cur_TaxSetting2 INTO @DColNo,@SlNo1,@FieldDesc,@SlNo2
			WHILE @@FETCH_STATUS=0
			BEGIN
				
				SET @EffetOnTax=0
				IF UPPER(@Type)='RETAILER'
				BEGIN
					SELECT @BillSeqId_Temp=MAX(BillSeqId) FROM dbo.BillSequenceMaster
					SELECT @EffetOnTax=EffectInNetAmount FROM dbo.BillSequenceDetail WHERE BillSeqId=@BillSeqId_Temp 
					AND SlNo=@SlNo2
					--->Added By Nanda on 28/04/2011										
					IF @FieldDesc='Spl. Disc' 
					BEGIN
						IF UPPER(@Discount)='ADD'
						BEGIN
							SET @iDiscount=1
						END
						ELSE IF UPPER(@Discount)='REDUCE'
						BEGIN
							SET @iDiscount=2
						END
						ELSE
						BEGIN
							SET @iDiscount=0
						END					
					END	
					ELSE IF @FieldDesc='Sch Disc' 
					BEGIN
						IF UPPER(@SchDiscount)='ADD'
						BEGIN
							SET @iDiscount=1
						END
						ELSE IF UPPER(@SchDiscount)='REDUCE'
						BEGIN
							SET @iDiscount=2
						END
						ELSE
						BEGIN
							SET @iDiscount=0
						END					
					END	
					ELSE IF @FieldDesc='DB Disc' 
					BEGIN
						IF UPPER(@DBDiscount)='ADD'
						BEGIN
							SET @iDiscount=1
						END
						ELSE IF UPPER(@DBDiscount)='REDUCE'
						BEGIN
							SET @iDiscount=2
						END
						ELSE
						BEGIN
							SET @iDiscount=0
						END					
					END	
					ELSE IF @FieldDesc='CD Disc'
					BEGIN
						IF UPPER(@CDDiscount)='ADD'
						BEGIN
							SET @iDiscount=1
						END
						ELSE IF UPPER(@CDDiscount)='REDUCE'
						BEGIN
							SET @iDiscount=2
						END
						ELSE
						BEGIN
							SET @iDiscount=0
						END					
					END	
					ELSE
					BEGIN
						IF UPPER(@Discount)='ADD'
						BEGIN
							SET @iDiscount=1
						END
						ELSE IF UPPER(@Discount)='REDUCE'
						BEGIN
							SET @iDiscount=2
						END
						ELSE
						BEGIN
							SET @iDiscount=0
						END					
					END	
					--->Till Here
				END
				ELSE IF UPPER(@Type)='SUPPLIER'
				BEGIN
					SELECT @BillSeqId_Temp=MAX(PurSeqId) FROM dbo.PurchaseSequenceMaster
					SELECT @EffetOnTax=EffectInNetAmount FROM dbo.PurchaseSequenceDetail WHERE PurSeqId=@BillSeqId_Temp 
					AND SlNo=@SlNo2
					
					IF UPPER(@FieldDesc)='FREIGHTCHARGES' 
					BEGIN
						IF UPPER(@FreightCharge)='ADD'
						BEGIN
							SET @iDiscount=1
						END
						ELSE IF UPPER(@FreightCharge)='REDUCE'
						BEGIN
							SET @iDiscount=2
						END
						ELSE
						BEGIN
							SET @iDiscount=0
						END					
				     END
				     ELSE IF UPPER(@FieldDesc) = 'DISC'
					 BEGIN
					    IF UPPER(@Discount)='ADD'
					    BEGIN
							SET @iDiscount=1
						END
						ELSE IF UPPER(@Discount)='REDUCE'
						BEGIN
							SET @iDiscount=2
						END
						ELSE
						BEGIN
							SET @iDiscount=0
						END
					 END
					 ELSE
					 BEGIN
					     SET @iDiscount=0
					 END
				END			        		 
									
				IF @iApplyOn=2
				BEGIN
					SET @EffetOnTax=0
				END				
				SELECT @Slno= dbo.Fn_GetPrimaryKeyInteger('TaxSetting','SlNo',CAST(YEAR(GetDate())AS INT),MONTH(GETDATE()))					
				INSERT INTO TaxSettingDetail (RowId,ColNo,SlNo,BillSeqId,TaxSeqId,
				ColType,ColId,ColVal,Availability,LastModBy,LastModDate,AuthId,AuthDate)
				--VALUES(@RowId,@sColNo,@SlNo,@BillSeqId,@TaxSeqId,2,@ColId,@EffetOnTax,1,1,CONVERT(NVARCHAR(11),GETDATE(),121),1,CONVERT(NVARCHAR(11),GETDATE(),121))
				VALUES(@RowId,@sColNo,@SlNo,@BillSeqId,@TaxSeqId,2,@ColId,@iDiscount,1,1,CONVERT(NVARCHAR(11),GETDATE(),121),1,CONVERT(NVARCHAR(11),GETDATE(),121))
					SET @sSql= 'INSERT INTO TaxSettingDetail(RowId,ColNo,SlNo,BillSeqId,TaxSeqId,ColType,ColId,ColVal,Availability,LastModBy,LastModDate,AuthId,AuthDate)VALUES('
						+ CAST(@RowId AS NVARCHAR(100)) + ',' + CAST(@sColNo AS NVARCHAR(100)) + ',' + CAST(@SlNo AS NVARCHAR(100)) +','+ CAST(@BillSeqId AS NVARCHAR(100))
						+ ',' + CAST(@TaxSeqId AS NVARCHAR(100)) + ',2,'+ CAST(@ColId AS NVARCHAR(100))+ ',' +CAST(@EffetOnTax AS NVARCHAR(100))+',1,1,'''+CONVERT(NVARCHAR(11),GETDATE(),121) + ''',1,''' + CONVERT(NVARCHAR(11),GETDATE(),121) + ''')'
										
				
				INSERT INTO Translog(strSql1) VALUES (@sSql)
				
				UPDATE Counters SET Currvalue = Currvalue + 1  WHERE Tabname = 'TaxSetting' AND Fldname = 'SlNo'
	
				SET @sSQL='UPDATE Counters SET Currvalue = Currvalue + 1 WHERE Tabname = ''TaxSetting'' AND Fldname = ''SlNo'''
		
				INSERT INTO Translog(strSql1) Values (@sSQL)					
				SET @sColNo=@sColNo+1
				SET @ColId=@ColId+1
				FETCH NEXT FROM Cur_TaxSetting2 INTO @DColNo,@SlNo1,@FieldDesc,@SlNo2
			END
			CLOSE Cur_TaxSetting2
			DEALLOCATE Cur_TaxSetting2
			------TaxSetting2-----------------------
			-------TaxSetting3-->Tax On Tax Settings-----------------------
			SET @sColNo=@sColNo
			SET @ColId=1
			
			DECLARE Cur_TaxSetting3 CURSOR		--Column Wise Details Inserts row Wise Cursor
			FOR SELECT ColNo,SlNo1,FieldDesc,SlNo2 FROM @TblColNo WHERE SlNo1=8 AND SlNo2<>@TaxId
			OPEN Cur_TaxSetting3
			FETCH NEXT FROM Cur_TaxSetting3 INTO @DColNo,@SlNo1,@FieldDesc,@SlNo2
			WHILE @@FETCH_STATUS=0
			BEGIN
				SELECT @Slno= dbo.Fn_GetPrimaryKeyInteger('TaxSetting','SlNo',CAST(YEAR(GetDate())AS INT),MONTH(GETDATE()))					
				IF @iApplyOn<>2
				BEGIN
					INSERT INTO TaxSettingDetail (RowId,ColNo,SlNo,BillSeqId,TaxSeqId,
						ColType,ColId,ColVal,Availability,LastModBy,LastModDate,AuthId,AuthDate)
					VALUES(@RowId,@sColNo,@SlNo,@BillSeqId,@TaxSeqId,3,@TaxId,0,1,1,
					CONVERT(NVARCHAR(11),GETDATE(),121),1,CONVERT(NVARCHAR(11),GETDATE(),121))
				END
				ELSE
				BEGIN
					IF EXISTS(SELECT * FROM TaxConfiguration WHERE TaxCode=@Applyon AND TaxId=@SlNo2)
					BEGIN
						INSERT INTO TaxSettingDetail (RowId,ColNo,SlNo,BillSeqId,TaxSeqId,
						ColType,ColId,ColVal,Availability,LastModBy,LastModDate,AuthId,AuthDate)
						VALUES(@RowId,@sColNo,@SlNo,@BillSeqId,@TaxSeqId,3,@TaxId,@SlNo2,1,1,
						CONVERT(NVARCHAR(11),GETDATE(),121),1,CONVERT(NVARCHAR(11),GETDATE(),121))
						SET @iApplyOn=1
					END
					ELSE
					BEGIN
						INSERT INTO TaxSettingDetail (RowId,ColNo,SlNo,BillSeqId,TaxSeqId,
						ColType,ColId,ColVal,Availability,LastModBy,LastModDate,AuthId,AuthDate)
						VALUES(@RowId,@sColNo,@SlNo,@BillSeqId,@TaxSeqId,3,@TaxId,0,1,1,
						CONVERT(NVARCHAR(11),GETDATE(),121),1,CONVERT(NVARCHAR(11),GETDATE(),121))
					END
				END
				SET @sSql= 'INSERT INTO TaxSettingDetail(RowId,ColNo,SlNo,BillSeqId,TaxSeqId,ColType,ColId,ColVal,Availability,LastModBy,LastModDate,AuthId,AuthDate)VALUES('
						+ CAST(@RowId AS NVARCHAR(100)) + ',' + CAST(@sColNo AS NVARCHAR(100)) + ',' + CAST(@SlNo AS NVARCHAR(100)) +','+ CAST(@BillSeqId AS NVARCHAR(100))
						+ ',' + CAST(@TaxSeqId AS NVARCHAR(100)) + ',3,'+ CAST(@TaxId AS NVARCHAR(100))+ ',0,1,1,'''+CONVERT(NVARCHAR(11),GETDATE(),121) + ''',1,''' + CONVERT(NVARCHAR(11),GETDATE(),121) + ''')'
										
				
				INSERT INTO Translog(strSql1) VALUES (@sSql)
				UPDATE Counters SET Currvalue = Currvalue + 1  WHERE Tabname = 'TaxSetting' AND Fldname = 'SlNo'
	
				SET @sSQL='UPDATE Counters SET Currvalue = Currvalue + 1 WHERE Tabname = ''TaxSetting'' AND Fldname = ''SlNo'''
	
				INSERT INTO Translog(strSql1) Values (@sSQL)
				SET @ColId=@ColId+1
				FETCH NEXT FROM Cur_TaxSetting3 INTO @DColNo,@SlNo1,@FieldDesc,@SlNo2
			END
			CLOSE Cur_TaxSetting3
			DEALLOCATE Cur_TaxSetting3
			UPDATE Etl_Prk_TaxSetting  SET DownloadFlag = 'Y'
			WHERE TaxGroupCode = @TaxGroupCode AND TaxCode = @TaxCode AND Percentage = @Percentage
			AND Type = @Type AND PrdTaxGroupCode = @PrdTaxGroupCode
			FETCH NEXT FROM Cur_TaxSettingDetail INTO @TaxGroupCode,@Type,@PrdTaxGroupCode,@TaxCode,@Percentage,@ApplyOn,@Discount,
			@SchDiscount,@DBDiscount,@CDDiscount,@FreightCharge
		END
		CLOSE Cur_TaxSettingDetail
		DEALLOCATE Cur_TaxSettingDetail
		FETCH NEXT FROM Cur_TaxSettingMaster INTO @TaxGroupCode,@Type,@PrdTaxGroupCode,@TaxType,@EffectiveFrom
	END
	CLOSE Cur_TaxSettingMaster
	DEALLOCATE Cur_TaxSettingMaster	
	UPDATE TaxSettingDetail SET ColVal=0 WHERE ColId=1 AND ColType=2 AND CAST(TaxSeqId AS NVARCHAR(10))+'~'+CAST(RowId AS NVARCHAR(10))
	NOT IN (SELECT CAST(TaxSeqId AS NVARCHAR(10))+'~'+CAST(RowId AS NVARCHAR(10)) FROM TaxSettingDetail WHERE ColType=1 AND ColId IN(SELECT TaxId FROM TaxConfiguration WHERE TaxCode='VAT'))
	AND  CAST(TaxSeqId AS NVARCHAR(10))+'~'+CAST(RowId AS NVARCHAR(10)) IN (
	SELECT CAST(TaxSeqId AS NVARCHAR(10))+'~'+CAST(RowId AS NVARCHAR(10)) FROM TaxSettingDetail WHERE ColType=1 AND ColId=0 AND ColVal=0)
	
	----Retailer Latest Tax Group Updation
	--IF NOT EXISTS (SELECT DISTINCT [Type],COUNT(DISTINCT TaxGroupCode) FROM Etl_Prk_TaxSetting (NOLOCK) WHERE [Type] = 'Retailer' 
	--GROUP BY [Type] HAVING COUNT(DISTINCT TaxGroupCode)>1)
	--BEGIN
	--	DECLARE @RtrTaxGroupId AS NUMERIC(18,0)
	--	SET @RtrTaxGroupId = 0
	--	SELECT @RtrTaxGroupId = B.TaxGroupId FROM Etl_Prk_TaxSetting A (NOLOCK) 
	--	INNER JOIN TaxGroupSetting B (NOLOCK) ON A.TaxGroupCode = B.RtrGroup WHERE B.TaxGroup = 1
	--	IF @RtrTaxGroupId <> 0
	--	BEGIN 	
	--	   UPDATE Retailer SET TaxGroupId = @RtrTaxGroupId
	--	END
	--END
	----Till Here
	----Supplier Latest Tax Group Updation
	--IF NOT EXISTS (SELECT DISTINCT [Type],COUNT(DISTINCT TaxGroupCode) FROM Etl_Prk_TaxSetting (NOLOCK) WHERE [Type] = 'Supplier' 
	--GROUP BY [Type] HAVING COUNT(DISTINCT TaxGroupCode)>1)
	--BEGIN
	--	DECLARE @SupTaxGroupId AS NUMERIC(18,0)
	--	SET @SupTaxGroupId = 0
	--	SELECT @SupTaxGroupId = B.TaxGroupId FROM Etl_Prk_TaxSetting A (NOLOCK) 
	--	INNER JOIN TaxGroupSetting B (NOLOCK) ON A.TaxGroupCode = B.RtrGroup WHERE B.TaxGroup = 3
	--	IF @SupTaxGroupId <> 0
	--	BEGIN 	
	--	   UPDATE Supplier SET TaxGroupId = @SupTaxGroupId
	--	END
	--END
	----Till Here
	
	RETURN
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Fn_ReturnRtrShippingAddId' and xtype in ('FN','TF'))
DROP FUNCTION Fn_ReturnRtrShippingAddId
GO
CREATE FUNCTION Fn_ReturnRtrShippingAddId(@RtrID AS INT,@SalId AS BIGINT)
RETURNS INT
AS
BEGIN

DECLARE @ShippingId AS INT
SET @ShippingId=0

	IF ISNULL(@SalId,0)<>0
	BEGIN
		SELECT @ShippingId=ISNULL(RtrShipId,0) FROM SalesInvoice(NOLOCK) WHERE SalId=@SalId
	END

RETURN  @ShippingId

END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='P' and NAME='Proc_ComputeTax')
DROP PROCEDURE Proc_ComputeTax
GO
/*
BEGIN  TRANSACTION
EXEC Proc_ComputeTax 1,26,1
ROLLBACK TRANSACTION
*/
CREATE PROCEDURE [Proc_ComputeTax]      
(      
 @Pi_RowId  INT,      
 @Pi_CalledFrom  INT,        
 @Pi_UserId  INT,
 @Pi_RtrShipId  INT=0,
 @Pi_gServerDate DateTime='1990-01-01',
 @Pi_ApplyTax INT=1
)      
AS      
/*********************************      
* PROCEDURE : Proc_ComputeTax      
* PURPOSE : To Calculate the Line Level Tax      
* CREATED : Thrinath      
* CREATED DATE : 22/03/2007      
* MODIFIED
* DATE      AUTHOR     DESCRIPTION 
24/05/2009	MURUGAN	   OID CalCulation For Nestle	
15-09-2011  Boopathy	   Taxable amount from MRP to Gross amount only for J&J
15-09-2011  Boopathy	   Taxable amount from MRP to Gross amount only for J&J
------------------------------------------------      
* {date} {developer}  {brief modification description}            
@Pi_CalledFrom  2  For Sales      
@Pi_CalledFrom  3  For Sales Return       
@Pi_CalledFrom  5  For Purchase      
@Pi_CalledFrom  7  For Purchase Return      
@Pi_CalledFrom  20 For Replacement      
@Pi_CalledFrom  23  For Market Return       
@Pi_CalledFrom  24 For Return And Replacement      
@Pi_CalledFrom  25 For Sales Panel   
@Pi_CalledFrom  26 For Purchase Order
*********************************/       
SET NOCOUNT ON      
BEGIN      
	DECLARE @PrdBatTaxGrp   INT      
	DECLARE @RtrTaxGrp   INT      
	DECLARE @TaxSlab  INT      
	DECLARE @MRP   NUMERIC(28,10)      
	DECLARE @SellingRate  NUMERIC(28,10)      
	DECLARE @PurchaseRate  NUMERIC(28,10)      
	DECLARE @TaxableAmount  NUMERIC(28,10)    
	DECLARE @TotalDedAmt  NUMERIC(28,10)  
	DECLARE @ParTaxableAmount NUMERIC(28,10)      
	DECLARE @TaxPer   NUMERIC(38,6)      
	DECLARE @TaxId   INT      
	DECLARE	@ApplyOn INT
	DECLARE @TaxSetting TABLE       
	(      
		TaxSlab   INT,      
		ColNo   INT,      
		SlNo   INT,      
		BillSeqId  INT,      
		TaxSeqId  INT,      
		ColType   INT,       
		ColId   INT,      
		ColVal   NUMERIC(38,6)      
	)      
	IF ISNULL(@Pi_gServerDate,'1990-01-01')='1990-01-01'
	BEGIN
		SET @Pi_gServerDate=CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121)
	END
	
	IF ISNULL(@Pi_RtrShipId,0)=0
	BEGIN
		SET @Pi_RtrShipId=0
	END
	--To Take the Batch TaxGroup Id      
	SELECT @PrdBatTaxGrp = TaxGroupId FROM ProductBatch A (NOLOCK) INNER JOIN      
	BilledPrdHdForTax B (NOLOCK) On A.PrdId = B.PrdId AND A.PrdBatID = B.PrdBatID      
	AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom      
	--To Take the Batch MRP      
	SELECT @MRP = ISNULL((C.PrdBatDetailValue * BaseQty),0) FROM ProductBatch A (NOLOCK) INNER JOIN      
	BilledPrdHdForTax B (NOLOCK) On A.PrdId = B.PrdId AND A.PrdBatID = B.PrdBatID      
	AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom      
	INNER JOIN ProductBatchDetails C (NOLOCK)      
	ON A.PrdBatId = C.PrdBatID AND C.PriceId = B.PriceId      
	INNER JOIN BatchCreation D (NOLOCK)      
	ON D.BatchSeqId = A.BatchSeqId AND D.SlNo = C.SlNo      
	AND D.MRP = 1       
	--To Take the Batch Selling Rate      
	IF @Pi_CalledFrom = 2 OR @Pi_CalledFrom = 25 OR @Pi_CalledFrom = 3 OR @Pi_CalledFrom = 23      
	BEGIN      
		SELECT @SellingRate = ColValue FROM BilledPrddtForTax WHERE TransId = @Pi_CalledFrom       
		AND UsrId = @Pi_UserId AND RowId = @Pi_RowId AND ColId = -2      
	END      
	ELSE      
	BEGIN      
		IF @Pi_CalledFrom = 20
		BEGIN 
			SELECT @SellingRate = ISNULL((C.PrdBatDetailValue * BaseQty),0) FROM ProductBatch A (NOLOCK) INNER JOIN      
			BilledPrdHdForTax B (NOLOCK) On A.PrdId = B.PrdId AND A.PrdBatID = B.PrdBatID      
			AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom      
			INNER JOIN ProductBatchDetails C (NOLOCK)      
			ON A.PrdBatId = C.PrdBatID AND C.PriceId IN (SELECT max(PBD.priceid) FROM productbatchdetails PBD WHERE pbd.prdbatid=b.PrdBatId)    
			INNER JOIN BatchCreation D (NOLOCK)      
			ON D.BatchSeqId = A.BatchSeqId AND D.SlNo = C.SlNo      
			AND D.SelRte = 1      
		END      
		ELSE      
		BEGIN      
			SELECT @SellingRate = ISNULL((C.PrdBatDetailValue * BaseQty),0) FROM ProductBatch A (NOLOCK) INNER JOIN      
			BilledPrdHdForTax B (NOLOCK) On A.PrdId = B.PrdId AND A.PrdBatID = B.PrdBatID      
			AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom      
			INNER JOIN ProductBatchDetails C (NOLOCK)      
			ON A.PrdBatId = C.PrdBatID AND C.PriceId = B.PriceId      
			INNER JOIN BatchCreation D (NOLOCK)      
			ON D.BatchSeqId = A.BatchSeqId AND D.SlNo = C.SlNo      
			AND D.SelRte = 1      
		END      
	END 
	--To Take the Batch List Price 
	--Added by Murugan For OID Calculation
	IF (@Pi_CalledFrom = 5 OR @Pi_CalledFrom = 26 OR @Pi_CalledFrom = 7 OR @Pi_CalledFrom = 37)
	BEGIN   
		IF  EXISTS(SELECT Status FROM Configuration WHERE ModuleId = 'PURCHASERECEIPT16' and Status=1)   
		BEGIN  
			SELECT  @PurchaseRate = Isnull(ColValue,0) FROM BilledPrdDtForTax B  
			WHERE  B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom 
			and COLID=3	   
		END  
		ELSE  
		BEGIN 
			SELECT @PurchaseRate =ISNULL((C.PrdBatDetailValue * BaseQty),0) FROM ProductBatch A (NOLOCK) INNER JOIN      
			BilledPrdHdForTax B (NOLOCK) On A.PrdId = B.PrdId AND A.PrdBatID = B.PrdBatID      
			AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom      
			INNER JOIN ProductBatchDetails C (NOLOCK)      
			ON A.PrdBatId = C.PrdBatID AND C.PriceId = B.PriceId      
			INNER JOIN BatchCreation D (NOLOCK)      
			ON D.BatchSeqId = A.BatchSeqId AND D.SlNo = C.SlNo      
			AND D.ListPrice = 1     
		END  
		--->Added By Nanda on 2011/05/12
		IF @Pi_CalledFrom = 37
		BEGIN
			IF EXISTS(SELECT * FROM CONFIGURATION WHERE MODULEID='RTNTOCOMPANY7' AND Status=1)
			BEGIN
				SELECT @PurchaseRate =ISNULL((C.PrdBatDetailValue * BaseQty),0) FROM ProductBatch A (NOLOCK) INNER JOIN      
				BilledPrdHdForTax B (NOLOCK) On A.PrdId = B.PrdId AND A.PrdBatID = B.PrdBatID      
				AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom      
				INNER JOIN ProductBatchDetails C (NOLOCK)      
				ON A.PrdBatId = C.PrdBatID AND C.PriceId = B.PriceId      
				INNER JOIN BatchCreation D (NOLOCK)      
				ON D.BatchSeqId = A.BatchSeqId AND D.SlNo = C.SlNo      
				AND LTRIM(RTRIM(D.RefCode)) IN (SELECT LEFT(Condition,1) FROM CONFIGURATION WHERE MODULEID='RTNTOCOMPANY7' AND Status=1)
			END
		END
		--->Till Here
	END
	ELSE
	BEGIN
		SELECT @PurchaseRate =ISNULL((C.PrdBatDetailValue * BaseQty),0) FROM ProductBatch A (NOLOCK) INNER JOIN      
		BilledPrdHdForTax B (NOLOCK) On A.PrdId = B.PrdId AND A.PrdBatID = B.PrdBatID      
		AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom      
		INNER JOIN ProductBatchDetails C (NOLOCK)      
		ON A.PrdBatId = C.PrdBatID AND C.PriceId = B.PriceId      
		INNER JOIN BatchCreation D (NOLOCK)      
		ON D.BatchSeqId = A.BatchSeqId AND D.SlNo = C.SlNo      
		AND D.ListPrice = 1  
	END
	IF (@Pi_CalledFrom = 2 OR @Pi_CalledFrom = 3 OR @Pi_CalledFrom = 20 OR @Pi_CalledFrom = 23 OR       
	@Pi_CalledFrom = 24 OR @Pi_CalledFrom = 25)      
	BEGIN      
		--To Take the Retailer TaxGroup Id      
		IF EXISTS(SELECT 'X' FROM RetailerShipAdd C (NOLOCK)
		INNER JOIN Retailer A (NOLOCK) ON A.RtrId=C.RtrId
		INNER JOIN  BilledPrdHdForTax B (NOLOCK) On A.RtrId = B.RtrId  and  B.RtrId = C.RtrId  
		WHERE C.RtrShipId=@Pi_RtrShipId AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId       
		AND B.TransId = @Pi_CalledFrom and C.TaxGroupId>0)
		BEGIN
			SELECT @RtrTaxGrp=C.TaxGroupId FROM RetailerShipAdd C (NOLOCK)
			INNER JOIN Retailer A (NOLOCK) ON A.RtrId=C.RtrId
			INNER JOIN  BilledPrdHdForTax B (NOLOCK) On A.RtrId = B.RtrId  and  B.RtrId = C.RtrId  
			WHERE C.RtrShipId=@Pi_RtrShipId AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId       
			AND B.TransId = @Pi_CalledFrom and C.TaxGroupId>0
		END
		ELSE
		BEGIN		 
			SELECT @RtrTaxGrp = TaxGroupId FROM Retailer A (NOLOCK) INNER JOIN      
			BilledPrdHdForTax B (NOLOCK) On A.RtrId = B.RtrId      
			AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId       
			AND B.TransId = @Pi_CalledFrom      
		END		 
	END      
	IF (@Pi_CalledFrom = 5 OR  @Pi_CalledFrom = 26 OR @Pi_CalledFrom = 7 OR @Pi_CalledFrom = 37)      
	BEGIN      
		--To Take the Supplier TaxGroup Id      
		SELECT @RtrTaxGrp = TaxGroupId FROM Supplier A (NOLOCK) INNER JOIN      
		BilledPrdHdForTax B (NOLOCK) On A.SpmId = B.RtrId      
		AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId      
		AND B.TransId = @Pi_CalledFrom      
	END      
	--Store the Tax Setting for the Corresponding Retailer and Batch      
	INSERT INTO @TaxSetting (TaxSlab,ColNo,SlNo,BillSeqId,TaxSeqId,ColType,ColId,ColVal)      
	SELECT B.RowId,B.ColNo,B.SlNo,B.BillSeqId,B.TaxSeqId,B.ColType,B.ColId,B.ColVal      
	FROM TaxSettingMaster A (NOLOCK) INNER JOIN      
	TaxSettingDetail B (NOLOCK) ON A.TaxSeqId = B.TaxSeqId      
	INNER JOIN BilledPrdHdForTax C (NOLOCK) ON C.BillSeqId = B.BillSeqId      
	WHERE A.RtrId = @RtrTaxGrp AND A.Prdid = @PrdBatTaxGrp AND C.UsrId = @Pi_UserId      
	AND C.RowId = @Pi_RowId AND C.TransId = @Pi_CalledFrom      
	AND A.TaxSeqId in (Select ISNULL(Max(TaxSeqId),0) FROM TaxSettingMaster WHERE      
	RtrId = @RtrTaxGrp AND Prdid = @PrdBatTaxGrp
	and CONVERT(DATETIME,CONVERT(VARCHAR(10),EffectiveFrom,121),121)<=CONVERT(DATETIME,CONVERT(VARCHAR(10),@Pi_gServerDate,121),121) --GST
	)
	--Delete the OLD Details From the BilledPrdDtCalculatedTax For the Row and User      
	DELETE FROM BilledPrdDtCalculatedTax WHERE RowId = @Pi_RowId AND UsrId = @Pi_UserId       
	AND TransId = @Pi_CalledFrom      
	--Cursor For Taking Each Slab and Calculate Tax      
	DECLARE  CurTax CURSOR FOR      
	SELECT DISTINCT TaxSlab FROM @TaxSetting      
	OPEN CurTax        
	FETCH NEXT FROM CurTax INTO @TaxSlab      
	WHILE @@FETCH_STATUS = 0        
	BEGIN      
		SET @TaxableAmount = 0      
		--To Filter the Records Which Has Tax Percentage (>=0)      
		IF EXISTS (SELECT * FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 1      
		AND ColId = 0 and ColVal >= 0)      
		BEGIN
			--To Get the Tax Percentage for the selected slab      
			SELECT @TaxPer = ColVal FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 1      
			AND ColId = 0      
			IF @Pi_ApplyTax=0 
			BEGIN
				SET @TaxPer=0
				--SET @CalSurCharge=0
				--SET @AddtionTax=0
			END			
			--To Get the TaxId for the selected slab      
			SELECT @TaxId = Cast(ColVal as INT) FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 1      
			AND ColId > 0      
	         
			--To Get the Adjustable amount from Other Columns      
			SELECT @TaxableAmount = ISNULL(SUM(ColValue),0) FROM       
			(SELECT CASE B.ColVal WHEN 1 THEN A.ColValue WHEN 2 THEN -1 * A.ColValue END       
			AS ColValue FROM BilledPrdDtForTax A INNER JOIN @TaxSetting B      
			ON A.ColId = B.ColId AND A.RowId =  @Pi_RowId AND A.UsrId = @Pi_UserId       
			AND A.TransId = @Pi_CalledFrom      
			WHERE TaxSlab = @TaxSlab AND B.ColType = 2 and B.ColId>3      
			And B.ColVal >0) as C      
			SET @ApplyOn=0
			SET @TotalDedAmt=@TaxableAmount
			--To add MRP to Taxable Amount if MRP Is Selected for the Slab      
			IF EXISTS (SELECT * FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 2      
			AND ColId = 1 and ColVal > 0)       
			BEGIN
				SET @TaxableAmount = ISNULL(@TaxableAmount,0) + @MRP      
				SET @ApplyOn=1 
			END
			--To add Selling Rate to Taxable Amount if Selling Rate Is Selected for the Slab      
			IF EXISTS (SELECT * FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 2      
			AND ColId = 2 and ColVal > 0)       
			SET @TaxableAmount = ISNULL(@TaxableAmount,0) + @SellingRate      
	      
			--To add Purchase Rate to Taxable Amount if Purchase Rate Is Selected for the Slab      
			IF EXISTS (SELECT * FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 2      
			AND ColId = 3 and ColVal > 0)       
			SET @TaxableAmount = ISNULL(@TaxableAmount,0) + @PurchaseRate      
			--To Get the Parent Taxable Amount for the Tax Slab      
			SELECT @ParTaxableAmount =  ISNULL(SUM(TaxAmount),0) FROM BilledPrdDtCalculatedTax A      
			INNER JOIN @TaxSetting B ON A.TaxId = B.ColVal AND A.RowId = @Pi_RowId      
			AND A.UsrId = @Pi_UserId AND B.ColType = 3 AND B.TaxSlab = @TaxSlab      
			AND A.TransId = @Pi_CalledFrom     
			Set @TaxableAmount = @TaxableAmount + @ParTaxableAmount      
	      
			--Insert the New Tax Amounts        
			INSERT INTO BilledPrdDtCalculatedTax (RowId,PrdId,PrdBatId,TaxId,TaxSlabId,TaxPercentage,      
			TaxableAmount,TaxAmount,Usrid,TransId)      
			SELECT @Pi_RowId,B.PrdId,B.PrdBatId,@TaxId,@TaxSlab,@TaxPer,      
		    @TaxableAmount, CASE @ApplyOn 
			WHEN 0 THEN	cast(@TaxableAmount * (@TaxPer / 100 ) AS NUMERIC(38,6))
			WHEN 1 THEN cast(@TaxableAmount * (@TaxPer / (100 +@TaxPer)) AS NUMERIC(38,6)) END,      
			@Pi_UserId,@Pi_CalledFrom FROM BilledPrdHdForTax B (NOLOCK) WHERE       
			B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom     
			IF EXISTS (SELECT * FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 2      
			AND ColId = 1 and ColVal > 0)       
			BEGIN
				SET @TaxableAmount =  @TotalDedAmt+ @SellingRate
				UPDATE BilledPrdDtCalculatedTax SET TaxableAmount=@TaxableAmount
				WHERE RowId = @Pi_RowId AND UsrId = @Pi_UserId AND TransId = @Pi_CalledFrom 							
			END 
			
		END      
		FETCH NEXT FROM CurTax INTO @TaxSlab      
	END        
	CLOSE CurTax        
	DEALLOCATE CurTax           
	
		----Gopi at 02-06-2017 for GST
	UPDATE BilledPrdDtCalculatedTax SET TaxId=0 where TaxId Is null
	UPDATE BilledPrdDtCalculatedTax SET TaxSlabId=0 where TaxSlabId Is null
	UPDATE BilledPrdDtCalculatedTax SET TaxableAmount=0 where TaxableAmount Is null
	UPDATE BilledPrdDtCalculatedTax SET TaxPercentage=0 where TaxPercentage Is null
	UPDATE BilledPrdDtCalculatedTax SET TaxAmount=0 where TaxAmount Is null
	 ---Till Here ----        
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='P' and NAME='Proc_ComputeTaxForPurchase')
DROP PROCEDURE Proc_ComputeTaxForPurchase
GO
/*
BEGIN  TRANSACTION
EXEC Proc_ComputeTax 2,2,1
select * from BilledPrdDtCalculatedTax
ROLLBACK TRANSACTION
*/
CREATE PROCEDURE Proc_ComputeTaxForPurchase      
(      
 @Pi_RowId  INT,      
 @Pi_CalledFrom  INT,        
 @Pi_UserId  INT,
 @Pi_RtrShipId  INT=0,
 @Pi_gServerDate DateTime='1990-01-01',
 @Pi_TaxType  VARCHAR(20)=''
)      
AS      
/*********************************      
* PROCEDURE : Proc_ComputeTax      
* PURPOSE : To Calculate the Line Level Tax      
* CREATED : Thrinath      
* CREATED DATE : 22/03/2007      
* MODIFIED
* DATE      AUTHOR     DESCRIPTION 
24/05/2009	MURUGAN	   OID CalCulation For Nestle	
15-09-2011  Boopathy	   Taxable amount from MRP to Gross amount only for J&J
			Mahesh Babu. D for Tax Setting On MRP  13/10/2015			--
------------------------------------------------      
* {date} {developer}  {brief modification description}            
@Pi_CalledFrom  2  For Sales      
@Pi_CalledFrom  3  For Sales Return       
@Pi_CalledFrom  5  For Purchase      
@Pi_CalledFrom  7  For Purchase Return      
@Pi_CalledFrom  20 For Replacement      
@Pi_CalledFrom  23  For Market Return       
@Pi_CalledFrom  24 For Return And Replacement      
@Pi_CalledFrom  25 For Sales Panel   
@Pi_CalledFrom  26 For Purchase Order
*********************************/       
SET NOCOUNT ON      
BEGIN      
	DECLARE @PrdBatTaxGrp   INT      
	DECLARE @RtrTaxGrp   INT      
	DECLARE @TaxSlab  INT      
	DECLARE @MRP   NUMERIC(28,10)      
	DECLARE @SellingRate  NUMERIC(28,10)      
	DECLARE @PurchaseRate  NUMERIC(28,10)      
	DECLARE @TaxableAmount  NUMERIC(28,10)    
	DECLARE @TotalDedAmt  NUMERIC(28,10)  
	DECLARE @ParTaxableAmount NUMERIC(28,10)      
	DECLARE @TaxPer   NUMERIC(38,6)      
	DECLARE @TaxId   INT      
	DECLARE	@ApplyOn INT
	DECLARE @GstEnabled AS INT --GST5
	DECLARE @TaxSetting TABLE       
	(      
		TaxSlab   INT,      
		ColNo   INT,      
		SlNo   INT,      
		BillSeqId  INT,      
		TaxSeqId  INT,      
		ColType   INT,       
		ColId   INT,      
		ColVal   NUMERIC(38,6)      
	)      
	IF ISNULL(@Pi_gServerDate,'1990-01-01')='1990-01-01'
	BEGIN
		SET @Pi_gServerDate=CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121)
	END
	
	IF ISNULL(@Pi_RtrShipId,0)=0
	BEGIN
		SET @Pi_RtrShipId=0
	END
	
	--GST5
	SET @GstEnabled=0 --GST		
	IF EXISTS(SELECT * fROM GSTCONFIGURATION WHERE ActivationStatus=1 and AcknowledgeStatus=1 and ConsoleAckStatus=1)
	BEGIN
		IF ISNULL(@Pi_TaxType,'')=''
		BEGIN
			SET @Pi_TaxType='GST'
		END
		SET @GstEnabled=1
	END
	
	IF ISNULL(@Pi_TaxType,'')=''
	BEGIN
		SET @Pi_TaxType='VAT'
	END	
	--Till Here
	--GST5
	IF @Pi_TaxType='VAT' AND @GstEnabled=1
	BEGIN
	--To Take the Batch TaxGroup Id      
		SELECT @PrdBatTaxGrp =BatchTaxGroupId FROM ProductBatchVATTaxB4GST A (NOLOCK)
		INNER JOIN BilledPrdHdForTax B (NOLOCK) ON 
		A.PrdId = B.PrdId AND A.PrdBatID = B.PrdBatID      
		AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom    
	--To Take the Batch MRP
	END
	ELSE
	BEGIN
	--To Take the Batch TaxGroup Id      
		SELECT @PrdBatTaxGrp = TaxGroupId FROM ProductBatch A (NOLOCK)
		INNER JOIN BilledPrdHdForTax B (NOLOCK) On A.PrdId = B.PrdId AND A.PrdBatID = B.PrdBatID      
		AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom      
	--To Take the Batch MRP
	END
	      
	SELECT @MRP = ISNULL((C.PrdBatDetailValue * BaseQty),0) FROM ProductBatch A (NOLOCK) INNER JOIN      
	BilledPrdHdForTax B (NOLOCK) On A.PrdId = B.PrdId AND A.PrdBatID = B.PrdBatID      
	AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom      
	INNER JOIN ProductBatchDetails C (NOLOCK)      
	ON A.PrdBatId = C.PrdBatID AND C.PriceId = B.PriceId      
	INNER JOIN BatchCreation D (NOLOCK)      
	ON D.BatchSeqId = A.BatchSeqId AND D.SlNo = C.SlNo      
	AND D.MRP = 1       
	--To Take the Batch Selling Rate      
	IF @Pi_CalledFrom = 2 OR @Pi_CalledFrom = 25 OR @Pi_CalledFrom = 3 OR @Pi_CalledFrom = 23      
	BEGIN      
		SELECT @SellingRate = ColValue FROM BilledPrddtForTax WHERE TransId = @Pi_CalledFrom       
		AND UsrId = @Pi_UserId AND RowId = @Pi_RowId AND ColId = -2      
	END      
	ELSE      
	BEGIN      
		IF @Pi_CalledFrom = 20
		BEGIN 
			SELECT @SellingRate = ISNULL((C.PrdBatDetailValue * BaseQty),0) FROM ProductBatch A (NOLOCK) INNER JOIN      
			BilledPrdHdForTax B (NOLOCK) On A.PrdId = B.PrdId AND A.PrdBatID = B.PrdBatID      
			AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom      
			INNER JOIN ProductBatchDetails C (NOLOCK)      
			ON A.PrdBatId = C.PrdBatID AND C.PriceId IN (SELECT max(PBD.priceid) FROM productbatchdetails PBD WHERE pbd.prdbatid=b.PrdBatId)    
			INNER JOIN BatchCreation D (NOLOCK)      
			ON D.BatchSeqId = A.BatchSeqId AND D.SlNo = C.SlNo      
			AND D.SelRte = 1      
		END      
		ELSE      
		BEGIN      
			SELECT @SellingRate = ISNULL((C.PrdBatDetailValue * BaseQty),0) FROM ProductBatch A (NOLOCK) INNER JOIN      
			BilledPrdHdForTax B (NOLOCK) On A.PrdId = B.PrdId AND A.PrdBatID = B.PrdBatID      
			AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom      
			INNER JOIN ProductBatchDetails C (NOLOCK)      
			ON A.PrdBatId = C.PrdBatID AND C.PriceId = B.PriceId      
			INNER JOIN BatchCreation D (NOLOCK)      
			ON D.BatchSeqId = A.BatchSeqId AND D.SlNo = C.SlNo      
			AND D.SelRte = 1      
		END      
	END 
	--To Take the Batch List Price 
	--Added by Murugan For OID Calculation
	IF (@Pi_CalledFrom = 5 OR @Pi_CalledFrom = 26 OR @Pi_CalledFrom = 7 OR @Pi_CalledFrom = 37)
	BEGIN   
		IF  EXISTS(SELECT Status FROM Configuration WHERE ModuleId = 'PURCHASERECEIPT16' and Status=1)   
		BEGIN  
			SELECT  @PurchaseRate = Isnull(ColValue,0) FROM BilledPrdDtForTax B  
			WHERE  B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom 
			and COLID=3	   
		END  
		ELSE  
		BEGIN 
			SELECT @PurchaseRate =ISNULL((C.PrdBatDetailValue * BaseQty),0) FROM ProductBatch A (NOLOCK) INNER JOIN      
			BilledPrdHdForTax B (NOLOCK) On A.PrdId = B.PrdId AND A.PrdBatID = B.PrdBatID      
			AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom      
			INNER JOIN ProductBatchDetails C (NOLOCK)      
			ON A.PrdBatId = C.PrdBatID AND C.PriceId = B.PriceId      
			INNER JOIN BatchCreation D (NOLOCK)      
			ON D.BatchSeqId = A.BatchSeqId AND D.SlNo = C.SlNo      
			AND D.ListPrice = 1     
		END  
		--->Added By Nanda on 2011/05/12
		IF @Pi_CalledFrom = 37
		BEGIN
			IF EXISTS(SELECT * FROM CONFIGURATION WHERE MODULEID='RTNTOCOMPANY7' AND Status=1)
			BEGIN
				SELECT @PurchaseRate =ISNULL((C.PrdBatDetailValue * BaseQty),0) FROM ProductBatch A (NOLOCK) INNER JOIN      
				BilledPrdHdForTax B (NOLOCK) On A.PrdId = B.PrdId AND A.PrdBatID = B.PrdBatID      
				AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom      
				INNER JOIN ProductBatchDetails C (NOLOCK)      
				ON A.PrdBatId = C.PrdBatID AND C.PriceId = B.PriceId      
				INNER JOIN BatchCreation D (NOLOCK)      
				ON D.BatchSeqId = A.BatchSeqId AND D.SlNo = C.SlNo      
				AND LTRIM(RTRIM(D.RefCode)) IN (SELECT LEFT(Condition,1) FROM CONFIGURATION WHERE MODULEID='RTNTOCOMPANY7' AND Status=1)
			END
		END
		--->Till Here
	END
	ELSE
	BEGIN
		SELECT @PurchaseRate =ISNULL((C.PrdBatDetailValue * BaseQty),0) FROM ProductBatch A (NOLOCK) INNER JOIN      
		BilledPrdHdForTax B (NOLOCK) On A.PrdId = B.PrdId AND A.PrdBatID = B.PrdBatID      
		AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom      
		INNER JOIN ProductBatchDetails C (NOLOCK)      
		ON A.PrdBatId = C.PrdBatID AND C.PriceId = B.PriceId      
		INNER JOIN BatchCreation D (NOLOCK)      
		ON D.BatchSeqId = A.BatchSeqId AND D.SlNo = C.SlNo      
		AND D.ListPrice = 1  
	END
	IF (@Pi_CalledFrom = 2 OR @Pi_CalledFrom = 3 OR @Pi_CalledFrom = 20 OR @Pi_CalledFrom = 23 OR       
	@Pi_CalledFrom = 24 OR @Pi_CalledFrom = 25)      
	BEGIN      
		--To Take the Retailer TaxGroup Id      
		--GST Take the Retailer TaxGroup Id     
			IF EXISTS(SELECT 'X' FROM RetailerShipAdd C (NOLOCK)
		INNER JOIN Retailer A (NOLOCK) ON A.RtrId=C.RtrId
		INNER JOIN  BilledPrdHdForTax B (NOLOCK) On A.RtrId = B.RtrId  and  B.RtrId = C.RtrId  
		WHERE C.RtrShipId=@Pi_RtrShipId AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId       
		AND B.TransId = @Pi_CalledFrom and C.TaxGroupId>0)
		BEGIN
			SELECT @RtrTaxGrp=C.TaxGroupId FROM RetailerShipAdd C (NOLOCK)
			INNER JOIN Retailer A (NOLOCK) ON A.RtrId=C.RtrId
			INNER JOIN  BilledPrdHdForTax B (NOLOCK) On A.RtrId = B.RtrId  and  B.RtrId = C.RtrId  
			WHERE C.RtrShipId=@Pi_RtrShipId AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId       
			AND B.TransId = @Pi_CalledFrom and C.TaxGroupId>0
		END
		ELSE
		BEGIN		 
			SELECT @RtrTaxGrp = TaxGroupId FROM Retailer A (NOLOCK) INNER JOIN      
			BilledPrdHdForTax B (NOLOCK) On A.RtrId = B.RtrId      
			AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId       
			AND B.TransId = @Pi_CalledFrom  
		END		 
	END      
	IF (@Pi_CalledFrom = 5 OR  @Pi_CalledFrom = 26 OR @Pi_CalledFrom = 7 OR @Pi_CalledFrom = 37)      
	BEGIN      
		--GST To Take the Supplier TaxGroup Id  --GST5
		IF @Pi_TaxType='VAT' AND @GstEnabled=1 
		BEGIN 
			SELECT @RtrTaxGrp = CASE WHEN ISNULL(VATTaxGroupId,0)=0 THEN TaxGroupId ELSE VATTaxGroupId END FROM Supplier A (NOLOCK) 
			INNER JOIN BilledPrdHdForTax B (NOLOCK) On A.SpmId = B.RtrId      
			AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId      
			AND B.TransId = @Pi_CalledFrom     
		END
		ELSE
		BEGIN			
			SELECT @RtrTaxGrp = TaxGroupId FROM Supplier A (NOLOCK) 
			INNER JOIN BilledPrdHdForTax B (NOLOCK) On A.SpmId = B.RtrId      
			AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId      
			AND B.TransId = @Pi_CalledFrom 
		END       
	END      
	--Store the Tax Setting for the Corresponding Retailer and Batch      
	INSERT INTO @TaxSetting (TaxSlab,ColNo,SlNo,BillSeqId,TaxSeqId,ColType,ColId,ColVal)      
	SELECT B.RowId,B.ColNo,B.SlNo,B.BillSeqId,B.TaxSeqId,B.ColType,B.ColId,B.ColVal      
	FROM TaxSettingMaster A (NOLOCK) INNER JOIN      
	TaxSettingDetail B (NOLOCK) ON A.TaxSeqId = B.TaxSeqId      
	INNER JOIN BilledPrdHdForTax C (NOLOCK) ON C.BillSeqId = B.BillSeqId      
	WHERE A.RtrId = @RtrTaxGrp AND A.Prdid = @PrdBatTaxGrp AND C.UsrId = @Pi_UserId      
	AND C.RowId = @Pi_RowId AND C.TransId = @Pi_CalledFrom      
	AND A.TaxSeqId in (Select ISNULL(Max(TaxSeqId),0) FROM TaxSettingMaster WHERE      
	RtrId = @RtrTaxGrp AND Prdid = @PrdBatTaxGrp
	and CONVERT(DATETIME,CONVERT(VARCHAR(10),EffectiveFrom,121),121)<=CONVERT(DATETIME,CONVERT(VARCHAR(10),@Pi_gServerDate,121),121) --GST
	)
	--Delete the OLD Details From the BilledPrdDtCalculatedTax For the Row and User      
	DELETE FROM BilledPrdDtCalculatedTax WHERE RowId = @Pi_RowId AND UsrId = @Pi_UserId       
	AND TransId = @Pi_CalledFrom      
	--Cursor For Taking Each Slab and Calculate Tax      
	DECLARE  CurTax CURSOR FOR      
	SELECT DISTINCT TaxSlab FROM @TaxSetting      
	OPEN CurTax        
	FETCH NEXT FROM CurTax INTO @TaxSlab      
	WHILE @@FETCH_STATUS = 0        
	BEGIN      
		SET @TaxableAmount = 0      
		--To Filter the Records Which Has Tax Percentage (>=0)      
		IF EXISTS (SELECT * FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 1      
		AND ColId = 0 and ColVal >= 0)      
		BEGIN
			--To Get the Tax Percentage for the selected slab      
			SELECT @TaxPer = ColVal FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 1      
			AND ColId = 0      
			--GST Added by Karthick For Sales Return Tax Reversal
			--IF @Pi_ApplyTax=0 
		--	BEGIN
		--		SET @TaxPer=0
				--SET @CalSurCharge=0
				--SET @AddtionTax=0
		--	END			
			--Till here     
			--To Get the TaxId for the selected slab      
			SELECT @TaxId = Cast(ColVal as INT) FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 1      
			AND ColId > 0      
	         
			--To Get the Adjustable amount from Other Columns      
			SELECT @TaxableAmount = ISNULL(SUM(ColValue),0) FROM       
			(SELECT CASE B.ColVal WHEN 1 THEN A.ColValue WHEN 2 THEN -1 * A.ColValue END       
			AS ColValue FROM BilledPrdDtForTax A INNER JOIN @TaxSetting B      
			ON A.ColId = B.ColId AND A.RowId =  @Pi_RowId AND A.UsrId = @Pi_UserId       
			AND A.TransId = @Pi_CalledFrom      
			WHERE TaxSlab = @TaxSlab AND B.ColType = 2 and B.ColId>3      
			And B.ColVal >0) as C      
			SET @ApplyOn=0
			SET @TotalDedAmt=@TaxableAmount
			--To add MRP to Taxable Amount if MRP Is Selected for the Slab      
			IF EXISTS (SELECT * FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 2      
			AND ColId = 1 and ColVal > 0)       
			BEGIN
				SET @TaxableAmount = ISNULL(@TaxableAmount,0) + @MRP      
				SET @ApplyOn=1 
			END
			--To add Selling Rate to Taxable Amount if Selling Rate Is Selected for the Slab      
			IF EXISTS (SELECT * FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 2      
			AND ColId = 2 and ColVal > 0)       
			SET @TaxableAmount = ISNULL(@TaxableAmount,0) + @SellingRate      
	      
			--To add Purchase Rate to Taxable Amount if Purchase Rate Is Selected for the Slab      
			IF EXISTS (SELECT * FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 2      
			AND ColId = 3 and ColVal > 0)       
			SET @TaxableAmount = ISNULL(@TaxableAmount,0) + @PurchaseRate      
			--To Get the Parent Taxable Amount for the Tax Slab      
			SELECT @ParTaxableAmount =  ISNULL(SUM(TaxAmount),0) FROM BilledPrdDtCalculatedTax A      
			INNER JOIN @TaxSetting B ON A.TaxId = B.ColVal AND A.RowId = @Pi_RowId      
			AND A.UsrId = @Pi_UserId AND B.ColType = 3 AND B.TaxSlab = @TaxSlab      
			AND A.TransId = @Pi_CalledFrom     
			Set @TaxableAmount = @TaxableAmount + @ParTaxableAmount      
			--Insert the New Tax Amounts
			INSERT INTO BilledPrdDtCalculatedTax (RowId,PrdId,PrdBatId,TaxId,TaxSlabId,TaxPercentage,      
			TaxableAmount,TaxAmount,Usrid,TransId)      
			SELECT @Pi_RowId,B.PrdId,B.PrdBatId,@TaxId,@TaxSlab,@TaxPer,      
		    @TaxableAmount, CASE @ApplyOn 
			WHEN 0 THEN	cast(@TaxableAmount * (@TaxPer / 100 ) AS NUMERIC(38,6))
			WHEN 1 THEN cast(@TaxableAmount * (@TaxPer / (100 +@TaxPer)) AS NUMERIC(38,6)) END,      
			@Pi_UserId,@Pi_CalledFrom FROM BilledPrdHdForTax B (NOLOCK) WHERE       
			B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom     
			
			IF EXISTS (SELECT * FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 2      
			AND ColId = 1 and ColVal > 0)       
			BEGIN
				SET @TaxableAmount =  @TotalDedAmt+ @SellingRate
				UPDATE BilledPrdDtCalculatedTax SET TaxableAmount=@TaxableAmount
				WHERE RowId = @Pi_RowId AND UsrId = @Pi_UserId AND TransId = @Pi_CalledFrom 				
			END 
			
		END      
		FETCH NEXT FROM CurTax INTO @TaxSlab      
	END        
	CLOSE CurTax        
	DEALLOCATE CurTax           
	----Gopi at 02-06-2017 for GST
	UPDATE BilledPrdDtCalculatedTax SET TaxId=0 where TaxId Is null
	UPDATE BilledPrdDtCalculatedTax SET TaxSlabId=0 where TaxSlabId Is null
	UPDATE BilledPrdDtCalculatedTax SET TaxableAmount=0 where TaxableAmount Is null
	UPDATE BilledPrdDtCalculatedTax SET TaxPercentage=0 where TaxPercentage Is null
	UPDATE BilledPrdDtCalculatedTax SET TaxAmount=0 where TaxAmount Is null
	 ---Till Here ----     
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE NAME='Proc_ComputeTaxForSupplier' AND XTYPE='P')
DROP PROCEDURE Proc_ComputeTaxForSupplier
GO
CREATE PROCEDURE Proc_ComputeTaxForSupplier
(  
 @Pi_RowId  INT,  
 @Pi_CalledFrom  INT,    
 @Pi_UserId  INT,
 @Pi_gServerDate DateTime='1990-01-01'
)  
AS  
/*********************************  
* PROCEDURE : Proc_ComputeTaxForSupplier  
* PURPOSE : To Calculate the Tax (For Selling Rate Recalculation)  
* CREATED : Nandakumar R.G  
* CREATED DATE : 22/03/2007  
* MODIFIED   
* DATE      AUTHOR     DESCRIPTION  
------------------------------------------------  
* {date} {developer}  {brief modification description}        
@Pi_CalledFrom  2  For Sales  
*********************************/   
SET NOCOUNT ON  
BEGIN  
DECLARE @PrdBatTaxGrp   INT  
DECLARE @RtrTaxGrp   INT  
DECLARE @TaxSlab  INT  
DECLARE @SellingRate  NUMERIC(28,10)  
DECLARE @PurchaseRate  NUMERIC(28,10)  
DECLARE @TaxableAmount  NUMERIC(28,10)  
DECLARE @ParTaxableAmount NUMERIC(28,10)  
DECLARE @TaxPer   NUMERIC(38,6)  
DECLARE @TaxId   INT  
DECLARE @TaxSetting TABLE   
(  
 TaxSlab   INT,  
 ColNo   INT,  
 SlNo   INT,  
 BillSeqId  INT,  
 TaxSeqId  INT,  
 ColType   INT,   
 ColId   INT,  
 ColVal   NUMERIC(38,6)  
)  

	IF ISNULL(@Pi_gServerDate,'1990-01-01')='1990-01-01'
	BEGIN
		SET @Pi_gServerDate=CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121)
	END

 --To Take the Batch TaxGroup Id  
 SELECT @PrdBatTaxGrp = TaxGroupId FROM ProductBatch A (NOLOCK) INNER JOIN  
  BilledPrdHdForTax B (NOLOCK) On A.PrdId = B.PrdId AND A.PrdBatID = B.PrdBatID  
  AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom  
 --To Take the Batch Selling Rate  
 SELECT @SellingRate = 100  
 
 --To Take the Supplier TaxGroup Id  
SELECT @RtrTaxGrp = TaxGroupId FROM Supplier A (NOLOCK) INNER JOIN
BilledPrdHdForTax B (NOLOCK) On A.SpmId = B.RtrId
AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId
AND B.TransId = @Pi_CalledFrom

 --Store the Tax Setting for the Corresponding Retailer and Batch  
 INSERT INTO @TaxSetting (TaxSlab,ColNo,SlNo,BillSeqId,TaxSeqId,ColType,ColId,ColVal)  
 SELECT B.RowId,B.ColNo,B.SlNo,B.BillSeqId,B.TaxSeqId,B.ColType,B.ColId,B.ColVal  
  FROM TaxSettingMaster A (NOLOCK) INNER JOIN  
  TaxSettingDetail B (NOLOCK) ON A.TaxSeqId = B.TaxSeqId  
  INNER JOIN BilledPrdHdForTax C (NOLOCK) ON C.BillSeqId = B.BillSeqId  
  WHERE A.RtrId = @RtrTaxGrp AND A.Prdid = @PrdBatTaxGrp AND C.UsrId = @Pi_UserId  
  AND C.RowId = @Pi_RowId AND C.TransId = @Pi_CalledFrom  
  AND A.TaxSeqId in (Select ISNULL(Max(TaxSeqId),0) FROM TaxSettingMaster WHERE  
   RtrId = @RtrTaxGrp AND Prdid = @PrdBatTaxGrp
   and CONVERT(DATETIME,CONVERT(VARCHAR(10),EffectiveFrom,121),121)<=CONVERT(DATETIME,CONVERT(VARCHAR(10),@Pi_gServerDate,121),121)
   )  
SELECT * FROm @TaxSetting
 --Delete the OLD Details From the BilledPrdDtCalculatedTax For the Row and User  
 DELETE FROM BilledPrdDtCalculatedTax WHERE RowId = @Pi_RowId AND UsrId = @Pi_UserId   
  AND TransId = @Pi_CalledFrom  
  --Cursor For Taking Each Slab and Calculate Tax  
 DECLARE  CurTax CURSOR FOR  
 SELECT DISTINCT TaxSlab FROM @TaxSetting  
  OPEN CurTax    
  FETCH NEXT FROM CurTax INTO @TaxSlab  
 WHILE @@FETCH_STATUS = 0    
 BEGIN  
  SET @TaxableAmount = 0  
  --To Filter the Records Which Has Tax Percentage (>=0)  
  IF EXISTS (SELECT * FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 1  
   AND ColId = 0 and ColVal >= 0)  
  BEGIN  
   --To Get the Tax Percentage for the selected slab  
   SELECT @TaxPer = ColVal FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 1  
    AND ColId = 0  
   --To Get the TaxId for the selected slab  
   SELECT @TaxId = Cast(ColVal as INT) FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 1  
    AND ColId > 0  
   --SELECT @TaxableAmount = 100  
	--To add MRP to Taxable Amount if MRP Is Selected for the Slab
	IF EXISTS (SELECT * FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 2
	AND ColId = 1 and ColVal > 0)
	SET @TaxableAmount = ISNULL(@TaxableAmount,0) + @SellingRate
	--To add Selling Rate to Taxable Amount if Selling Rate Is Selected for the Slab
	IF EXISTS (SELECT * FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 2
	AND ColId = 2 and ColVal > 0)
	SET @TaxableAmount = ISNULL(@TaxableAmount,0) + @SellingRate
	--To add Purchase Rate to Taxable Amount if Purchase Rate Is Selected for the Slab
	IF EXISTS (SELECT * FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 2
	AND ColId = 3 and ColVal > 0)
	SET @TaxableAmount = ISNULL(@TaxableAmount,0) + @SellingRate
   --To Get the Parent Taxable Amount for the Tax Slab  
   SELECT @ParTaxableAmount =  ISNULL(SUM(TaxAmount),0) FROM BilledPrdDtCalculatedTax A  
   INNER JOIN @TaxSetting B ON A.TaxId = B.ColVal AND A.RowId = @Pi_RowId  
   AND A.UsrId = @Pi_UserId AND B.ColType = 3 AND B.TaxSlab = @TaxSlab  
   AND A.TransId = @Pi_CalledFrom  
   Set @TaxableAmount = @TaxableAmount + @ParTaxableAmount  
   PRINT @TaxableAmount
   --Insert the New Tax Amounts  
	IF @Pi_CalledFrom=21 
		BEGIN 
			IF EXISTS (SELECT * FROM Configuration WHERE ModuleId='SALVAGE26' AND Status=1 AND ConfigValue='5.00')
				BEGIN 
					INSERT INTO BilledPrdDtCalculatedTax (RowId,PrdId,PrdBatId,TaxId,TaxSlabId,TaxPercentage,  
						TaxableAmount,TaxAmount,Usrid,TransId)  
							SELECT @Pi_RowId,B.PrdId,B.PrdBatId,@TaxId,@TaxSlab,0.00,  
							 @TaxableAmount,0.00,  
							 @Pi_UserId,@Pi_CalledFrom FROM BilledPrdHdForTax B (NOLOCK) WHERE   
							 B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom  
				END 
			ELSE
				BEGIN 
					INSERT INTO BilledPrdDtCalculatedTax (RowId,PrdId,PrdBatId,TaxId,TaxSlabId,TaxPercentage,  
						 TaxableAmount,TaxAmount,Usrid,TransId)  
						       SELECT @Pi_RowId,B.PrdId,B.PrdBatId,@TaxId,@TaxSlab,@TaxPer,  
								 @TaxableAmount,cast(@TaxableAmount * (@TaxPer / 100 ) AS NUMERIC(28,10)),  
								 @Pi_UserId,@Pi_CalledFrom FROM BilledPrdHdForTax B (NOLOCK) WHERE   
								 B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom  
				END 
		END 
   ELSE 
		BEGIN 
			INSERT INTO BilledPrdDtCalculatedTax (RowId,PrdId,PrdBatId,TaxId,TaxSlabId,TaxPercentage,  
			 TaxableAmount,TaxAmount,Usrid,TransId)  
			SELECT @Pi_RowId,B.PrdId,B.PrdBatId,@TaxId,@TaxSlab,@TaxPer,  
			 @TaxableAmount,cast(@TaxableAmount * (@TaxPer / 100 ) AS NUMERIC(28,10)),  
			 @Pi_UserId,@Pi_CalledFrom FROM BilledPrdHdForTax B (NOLOCK) WHERE   
			 B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom  
		END 
  END  
  FETCH NEXT FROM CurTax INTO @TaxSlab  
 END    
 CLOSE CurTax    
 DEALLOCATE CurTax    
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE NAME='Proc_ComputeTaxLSPReCalculate' AND XTYPE='P')
DROP PROCEDURE Proc_ComputeTaxLSPReCalculate
GO
CREATE PROCEDURE [dbo].[Proc_ComputeTaxLSPReCalculate]
(
	@Pi_RowId		INT,
	@Pi_CalledFrom		INT,		
	@Pi_UserId		INT,
	@Pi_Mode		INT='0',
	@Pi_LSP			NUMERIC(38,6)='0.00',
	@Pi_RtrShipId	INT=0,
	@Pi_gServerDate DateTime='1990-01-01',
	@Pi_TaxType  VARCHAR(20)='',
	@Pi_ApplyTax	INT=1
)
AS
/*********************************
* PROCEDURE	: Proc_ComputeTax
* PURPOSE	: To Calculate the Line Level Tax
* CREATED	: Thrinath
* CREATED DATE	: 22/03/2007
* MODIFIED 
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}      
	
@Pi_CalledFrom  2 	For Sales
@Pi_CalledFrom  3 	For Sales Return 
@Pi_CalledFrom  5 	For Purchase
@Pi_CalledFrom  7 	For Purchase Return
@Pi_CalledFrom  20	For Replacement
@Pi_CalledFrom  23 	For Market Return 
@Pi_CalledFrom  24	For Return And Replacement
@Pi_CalledFrom  25	For Sales Panel
*********************************/ 
SET NOCOUNT ON
BEGIN	
DECLARE @PrdBatTaxGrp 		INT
DECLARE @RtrTaxGrp 		INT
DECLARE @TaxSlab		INT
DECLARE @MRP			NUMERIC(28,10)
DECLARE @SellingRate		NUMERIC(28,10)
DECLARE @PurchaseRate		NUMERIC(28,10)
DECLARE @TaxableAmount		NUMERIC(28,10)
DECLARE @ParTaxableAmount	NUMERIC(28,10)
DECLARE @TaxPer			NUMERIC(38,6)
DECLARE @TaxId			INT
DECLARE	@ApplyOn INT

DECLARE @GstEnabled AS INT --GST5

DECLARE @TaxSetting TABLE 
(
	TaxSlab			INT,
	ColNo			INT,
	SlNo			INT,
	BillSeqId		INT,
	TaxSeqId		INT,
	ColType			INT,	
	ColId			INT,
	ColVal			NUMERIC(38,6)
)
	IF ISNULL(@Pi_gServerDate,'1990-01-01')='1990-01-01'
	BEGIN
		SET @Pi_gServerDate=CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121)
	END
	
	IF ISNULL(@Pi_RtrShipId,0)=0
	BEGIN
		SET @Pi_RtrShipId=0
	END
	
	--GST5
	SET @GstEnabled=0 --GST		
	IF EXISTS(SELECT * fROM GSTCONFIGURATION WHERE ActivationStatus=1 and AcknowledgeStatus=1 and ConsoleAckStatus=1)
	BEGIN
		IF ISNULL(@Pi_TaxType,'')=''
		BEGIN
			SET @Pi_TaxType='GST'
		END
		SET @GstEnabled=1
	END
	
	IF ISNULL(@Pi_TaxType,'')=''
	BEGIN
		SET @Pi_TaxType='VAT'
	END	
	--Till Here
	--GST5
	IF @Pi_TaxType='VAT' AND @GstEnabled=1
	BEGIN
	--To Take the Batch TaxGroup Id      
		SELECT @PrdBatTaxGrp =BatchTaxGroupId FROM ProductBatchVATTaxB4GST A (NOLOCK)
		INNER JOIN BilledPrdHdForTax B (NOLOCK) ON 
		A.PrdId = B.PrdId AND A.PrdBatID = B.PrdBatID      
		AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom    
	--To Take the Batch MRP
	END
	ELSE
	BEGIN
	--To Take the Batch TaxGroup Id      
		SELECT @PrdBatTaxGrp = TaxGroupId FROM ProductBatch A (NOLOCK)
		INNER JOIN BilledPrdHdForTax B (NOLOCK) On A.PrdId = B.PrdId AND A.PrdBatID = B.PrdBatID      
		AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom      
	--To Take the Batch MRP
	END
	--To Take the Batch MRP
	SELECT @MRP = ISNULL((C.PrdBatDetailValue * BaseQty),0) FROM ProductBatch A (NOLOCK) INNER JOIN
		BilledPrdHdForTax B (NOLOCK) On A.PrdId = B.PrdId AND A.PrdBatID = B.PrdBatID
		AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom
		INNER JOIN ProductBatchDetails C (NOLOCK)
		ON A.PrdBatId = C.PrdBatID AND C.PriceId = B.PriceId
		INNER JOIN BatchCreation D (NOLOCK)
		ON D.BatchSeqId = A.BatchSeqId AND D.SlNo = C.SlNo
		AND D.MRP = 1 
	--To Take the Batch Selling Rate
	IF @Pi_CalledFrom = 2 OR @Pi_CalledFrom = 25 OR @Pi_CalledFrom = 3 OR @Pi_CalledFrom = 23
	BEGIN
		SELECT @SellingRate = ColValue FROM BilledPrddtForTax WHERE TransId = @Pi_CalledFrom 
			AND UsrId = @Pi_UserId AND RowId = @Pi_RowId AND ColId = -2
	END
	ELSE
	BEGIN
		SELECT @SellingRate = ISNULL((C.PrdBatDetailValue * BaseQty),0) FROM ProductBatch A (NOLOCK) INNER JOIN
			BilledPrdHdForTax B (NOLOCK) On A.PrdId = B.PrdId AND A.PrdBatID = B.PrdBatID
			AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom
			INNER JOIN ProductBatchDetails C (NOLOCK)
			ON A.PrdBatId = C.PrdBatID AND C.PriceId = B.PriceId
			INNER JOIN BatchCreation D (NOLOCK)
			ON D.BatchSeqId = A.BatchSeqId AND D.SlNo = C.SlNo
			AND D.SelRte = 1
	END
	--To Take the Batch List Price
	
		SELECT @PurchaseRate =ISNULL((@Pi_LSP*BaseQty),0) FROM 
				BilledPrdHdForTax WHERE RowId = @Pi_RowId AND UsrId = @Pi_UserId 
					AND TransId = @Pi_CalledFrom
	IF (@Pi_CalledFrom = 2 OR @Pi_CalledFrom = 3 OR @Pi_CalledFrom = 20 OR @Pi_CalledFrom = 23 OR 
		@Pi_CalledFrom = 24 OR @Pi_CalledFrom = 25)
	BEGIN
		--GST To Take the Retailer TaxGroup Id     
		IF EXISTS(SELECT 'X' FROM RetailerShipAdd C (NOLOCK)
		INNER JOIN Retailer A (NOLOCK) ON A.RtrId=C.RtrId
		INNER JOIN  BilledPrdHdForTax B (NOLOCK) On A.RtrId = B.RtrId  and  B.RtrId = C.RtrId  
		WHERE C.RtrShipId=@Pi_RtrShipId AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId       
		AND B.TransId = @Pi_CalledFrom and C.TaxGroupId>0)
		BEGIN
			SELECT @RtrTaxGrp=C.TaxGroupId FROM RetailerShipAdd C (NOLOCK)
			INNER JOIN Retailer A (NOLOCK) ON A.RtrId=C.RtrId
			INNER JOIN  BilledPrdHdForTax B (NOLOCK) On A.RtrId = B.RtrId  and  B.RtrId = C.RtrId  
			WHERE C.RtrShipId=@Pi_RtrShipId AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId       
			AND B.TransId = @Pi_CalledFrom and C.TaxGroupId>0
		END
		ELSE
		BEGIN
			
			SELECT @RtrTaxGrp = TaxGroupId FROM Retailer A (NOLOCK) INNER JOIN      
			BilledPrdHdForTax B (NOLOCK) On A.RtrId = B.RtrId      
			AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId       
			AND B.TransId = @Pi_CalledFrom 
		END	
	END
	
	
	IF (@Pi_CalledFrom = 5 OR @Pi_CalledFrom = 7)
	BEGIN
		--GST5
		--GST To Take the Supplier TaxGroup Id 
		IF @Pi_TaxType='VAT' AND @GstEnabled=1 
		BEGIN 
			SELECT @RtrTaxGrp = CASE WHEN ISNULL(VATTaxGroupId,0)=0 THEN TaxGroupId ELSE VATTaxGroupId END FROM Supplier A (NOLOCK) 
			INNER JOIN BilledPrdHdForTax B (NOLOCK) On A.SpmId = B.RtrId      
			AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId      
			AND B.TransId = @Pi_CalledFrom     
		END
		ELSE
		BEGIN
			SELECT @RtrTaxGrp = TaxGroupId FROM Supplier A (NOLOCK) 
			INNER JOIN BilledPrdHdForTax B (NOLOCK) On A.SpmId = B.RtrId      
			AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId      
			AND B.TransId = @Pi_CalledFrom 
		END
	END
	
	--Store the Tax Setting for the Corresponding Retailer and Batch
	INSERT INTO @TaxSetting (TaxSlab,ColNo,SlNo,BillSeqId,TaxSeqId,ColType,ColId,ColVal)
	SELECT B.RowId,B.ColNo,B.SlNo,B.BillSeqId,B.TaxSeqId,B.ColType,B.ColId,B.ColVal
		FROM TaxSettingMaster A (NOLOCK) INNER JOIN
		TaxSettingDetail B (NOLOCK) ON A.TaxSeqId = B.TaxSeqId
		INNER JOIN BilledPrdHdForTax C (NOLOCK) ON C.BillSeqId = B.BillSeqId
		WHERE A.RtrId = @RtrTaxGrp AND A.Prdid = @PrdBatTaxGrp AND C.UsrId = @Pi_UserId
		AND C.RowId = @Pi_RowId AND C.TransId = @Pi_CalledFrom
		AND A.TaxSeqId in (Select ISNULL(Max(TaxSeqId),0) FROM TaxSettingMaster WHERE
			RtrId = @RtrTaxGrp AND Prdid = @PrdBatTaxGrp
			and CONVERT(DATETIME,CONVERT(VARCHAR(10),EffectiveFrom,121),121)<=CONVERT(DATETIME,CONVERT(VARCHAR(10),@Pi_gServerDate,121),121) --GST
			)
	--Delete the OLD Details From the BilledPrdDtCalculatedTax For the Row and User
	DELETE FROM BilledPrdDtCalculatedTax WHERE RowId = @Pi_RowId AND UsrId = @Pi_UserId 
		AND TransId = @Pi_CalledFrom
		--Cursor For Taking Each Slab and Calculate Tax
	DECLARE  CurTax CURSOR FOR
	SELECT DISTINCT TaxSlab FROM @TaxSetting
		OPEN CurTax  
		FETCH NEXT FROM CurTax INTO @TaxSlab
	WHILE @@FETCH_STATUS = 0  
	BEGIN
		SET @TaxableAmount = 0
		--To Filter the Records Which Has Tax Percentage (>=0)
		IF EXISTS (SELECT * FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 1
			AND ColId = 0 and ColVal >= 0)
		BEGIN
			--To Get the Tax Percentage for the selected slab
			SELECT @TaxPer = ColVal FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 1
				AND ColId = 0
			
			--Added by Karthick For Sales Return Tax Reversal
			IF @Pi_ApplyTax=0 
			BEGIN
				SET @TaxPer=0
				--SET @CalSurCharge=0
				--SET @AddtionTax=0
			END			
			--Till here 
			
			--To Get the TaxId for the selected slab
			SELECT @TaxId = Cast(ColVal as INT) FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 1
				AND ColId > 0
			
			--To Get the Adjustable amount from Other Columns
			SELECT @TaxableAmount = ISNULL(SUM(ColValue),0) FROM 
				(SELECT CASE B.ColVal WHEN 1 THEN A.ColValue WHEN 2 THEN -1 * A.ColValue END 
					AS ColValue FROM BilledPrdDtForTax A INNER JOIN @TaxSetting B
					ON A.ColId = B.ColId AND A.RowId =  @Pi_RowId AND A.UsrId = @Pi_UserId 
					AND A.TransId = @Pi_CalledFrom
					WHERE TaxSlab = @TaxSlab AND B.ColType = 2 and B.ColId>3
					And B.ColVal >0) as C
			SET @ApplyOn=0
			--To add MRP to Taxable Amount if MRP Is Selected for the Slab
			IF EXISTS (SELECT * FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 2
					AND ColId = 1 and ColVal > 0)	
			BEGIN
						SET @TaxableAmount = ISNULL(@TaxableAmount,0) + @MRP
				SET @ApplyOn=1 
			END
			--To add Selling Rate to Taxable Amount if Selling Rate Is Selected for the Slab
			IF EXISTS (SELECT * FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 2
					AND ColId = 2 and ColVal > 0)	
				SET @TaxableAmount = ISNULL(@TaxableAmount,0) + @SellingRate
			--To add Purchase Rate to Taxable Amount if Purchase Rate Is Selected for the Slab
			IF EXISTS (SELECT * FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 2
					AND ColId = 3 and ColVal > 0)	
				SET @TaxableAmount = ISNULL(@TaxableAmount,0) + @PurchaseRate
			--To Get the Parent Taxable Amount for the Tax Slab
			SELECT @ParTaxableAmount =  ISNULL(SUM(TaxAmount),0) FROM BilledPrdDtCalculatedTax A
			INNER JOIN @TaxSetting B ON A.TaxId = B.ColVal AND A.RowId = @Pi_RowId
			AND A.UsrId = @Pi_UserId AND B.ColType = 3 AND B.TaxSlab = @TaxSlab
			AND A.TransId = @Pi_CalledFrom
			Set @TaxableAmount = @TaxableAmount + @ParTaxableAmount
			--Insert the New Tax Amounts
			INSERT INTO BilledPrdDtCalculatedTax (RowId,PrdId,PrdBatId,TaxId,TaxSlabId,TaxPercentage,
					TaxableAmount,TaxAmount,Usrid,TransId)
				SELECT @Pi_RowId,B.PrdId,B.PrdBatId,@TaxId,@TaxSlab,@TaxPer,
				@TaxableAmount, CASE @ApplyOn 
					WHEN 0 THEN	cast(@TaxableAmount * (@TaxPer / 100 ) AS NUMERIC(38,6))
					WHEN 1 THEN cast(@TaxableAmount * (@TaxPer / (100 +@TaxPer)) AS NUMERIC(38,6)) END,      
					@Pi_UserId,@Pi_CalledFrom FROM BilledPrdHdForTax B (NOLOCK) WHERE 
					B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom
		END
		FETCH NEXT FROM CurTax INTO @TaxSlab
	END  
	CLOSE CurTax  
	DEALLOCATE CurTax 
	----Gopi at 02-06-2017 for GST
	UPDATE BilledPrdDtCalculatedTax SET TaxId=0 where TaxId Is null
	UPDATE BilledPrdDtCalculatedTax SET TaxSlabId=0 where TaxSlabId Is null
	UPDATE BilledPrdDtCalculatedTax SET TaxableAmount=0 where TaxableAmount Is null
	UPDATE BilledPrdDtCalculatedTax SET TaxPercentage=0 where TaxPercentage Is null
	UPDATE BilledPrdDtCalculatedTax SET TaxAmount=0 where TaxAmount Is null
	 ---Till Here ----     
END
GO
DELETE FROM CustomCaptions WHERE TransId=41 and CtrlId IN (100008,100009,100010,50,51,52,53,54,55)
INSERT INTO CustomCaptions([TransId],[CtrlId],[SubCtrlId],[CtrlName],[Caption],[PnlMsg],[MsgBox],[LngId],[Availability],[LastModBy],[LastModDate],[AuthId],[AuthDate],[DefaultCaption],[DefaultPnlMsg],[DefaultMsgBox],[Visibility],[Enabled]) 
SELECT 41,100008,0,'fxtTaxGroupId','Tax Group','','',1,1,1,'2017-05-11',1,'2017-05-11','','','',1,1 UNION ALL
SELECT 41,100009,0,'fxtStateId','State Name','','',1,1,1,'2017-05-11',1,'2017-05-11','','','',1,1 UNION ALL
SELECT 41,100010,0,'fxtGSTTinNo','GST Tin Number','','',1,1,1,'2017-05-11',1,'2017-05-11','','','',1,1 UNION ALL
SELECT 41,50,0,'lblTaxGroup','Tax Group*...','','',1,1,1,'2009-04-28',1,'2009-04-28','Tax Group*...','','',1,1 UNION ALL
SELECT 41,51,0,'LblStateName','State Name*...','','',1,1,1,'2009-04-28',1,'2009-04-28','State Name*...','','',1,1 UNION ALL
SELECT 41,52,0,'LblGSTTin','GSTIN No.*...','','',1,1,1,'2009-04-28',1,'2009-04-28','GSTIN No.*...','','',1,1 UNION ALL
SELECT 41,53,0,'fxtTaxGroupId','','Press F4/Double Click to Select Tax Group','',1,1,1,'2009-04-28',1,'2009-04-28','','Press F4/Double Click to Select Tax Group','',1,1 UNION ALL
SELECT 41,54,0,'fxtStateId','','Press F4/Double Click to Select State','',1,1,1,'2009-04-28',1,'2009-04-28','','Press F4/Double Click to Select State','',1,1 UNION ALL
SELECT 41,55,0,'fxtGSTTinNo','','Enter GSTIN ','',1,1,1,'2009-04-28',1,'2009-04-28','','Enter GSTIN ','',1,1
GO
DELETE FROM CustomCaptions WHERE TransId=41  and CtrlId=2000 and SubCtrlId in (3,4,5,6)
INSERT INTO CustomCaptions([TransId],[CtrlId],[SubCtrlId],[CtrlName],[Caption],[PnlMsg],[MsgBox],[LngId],[Availability],[LastModBy],[LastModDate],[AuthId],[AuthDate],[DefaultCaption],[DefaultPnlMsg],[DefaultMsgBox],[Visibility],[Enabled]) 
SELECT 41,2000,3,'HotSch-41-2000-3','Tax Group Code','','',1,1,1,'2009-04-28',1,'2009-04-28','Tax Group Code','','',1,1 UNION ALL
SELECT 41,2000,4,'HotSch-41-2000-4','Tax Group Name','','',1,1,1,'2009-04-28',1,'2009-04-28','Tax Group Name','','',1,1 UNION ALL
SELECT 41,2000,5,'HotSch-41-2000-5','State Code','','',1,1,1,'2009-04-28',1,'2009-04-28','State Code','','',1,1 UNION ALL
SELECT 41,2000,6,'HotSch-41-2000-6','State Name','','',1,1,1,'2009-04-28',1,'2009-04-28','State Name','','',1,1 
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE NAME='Fn_ValidateGST' AND XTYPE In ('TF','FN'))
DROP FUNCTION Fn_ValidateGST
GO
CREATE FUNCTION Fn_ValidateGST(@TransId AS INT)
RETURNS INT
AS
/*********************************
* PROCEDURE		: Fn_ValidateGST
* PURPOSE		: To Validate GST Enabled
* CREATED		: S.Moorthi
* CREATED DATE	: 11-05-2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
BEGIN
DECLARE @ValidateGST AS INT
SET @ValidateGST=0
	IF EXISTS(SELECT * FROM GSTConfiguration (NOLOCK) 
	WHERE ModuleId='GSTCONFIG' and ActivationStatus=1 and 
	ConsoleAckStatus=1)
	BEGIN
		SET @ValidateGST=1
	END
RETURN @ValidateGST
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE NAME='Fn_LoadRetailerShippingDetails' AND XTYPE In ('TF','FN'))
DROP FUNCTION Fn_LoadRetailerShippingDetails
GO
CREATE FUNCTION Fn_LoadRetailerShippingDetails(@Type as INT)
RETURNS @LoadRetailerShippingDetails TABLE
(
	[RtrId]				[int],
	[RtrShipId]			[int],
	[RtrName]			[nvarchar](100),
	[RtrShipAdd1]		[nvarchar](100),
	[RtrShipAdd2]		[nvarchar](100),
	[RtrShipAdd3]		[nvarchar](100),
	[RtrShipPinNo]		[varchar](100),
	[RtrShipPhoneNo]	[nvarchar](50),
	[RtrShipDefaultAdd] [varchar](10),
	[TaxGroupId]		[INT],
	[TaxGroupName]		[nvarchar](100),
	[StateId]			[INT],
	[StateName]			[VARCHAR] (200),
	[GSTTinNo]			[VARCHAR] (25)
)
AS
/*********************************
* PROCEDURE		: Fn_LoadRetailerShippingDetails
* PURPOSE		: To Load RetailerShippingDetails
* CREATED		: S.Moorthi
* CREATED DATE	: 11-05-2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
BEGIN
	IF @Type=0
	BEGIN
		INSERT INTO @LoadRetailerShippingDetails(RtrId,RtrShipId,RtrName,RtrShipAdd1,RtrShipAdd2,RtrShipAdd3,RtrShipPinNo,
		RtrShipPhoneNo,RtrShipDefaultAdd,[TaxGroupId],[TaxGroupName],[StateId],[StateName],[GSTTinNo])
		SELECT A.RtrId,A.RtrShipId,B.RtrName,A.RtrShipAdd1,A.RtrShipAdd2,A.RtrShipAdd3,A.RtrShipPinNo,A.RtrShipPhoneNo,	
		CASE A.RtrShipDefaultAdd WHEN 0 THEN 'No' else 'Yes' end as RtrShipDefaultAdd ,
		ISNULL(A.TaxGroupId,0),ISNULL(D.TaxGroupName,'') TaxGroupName,ISNULL(A.StateId,0),ISNULL(C.StateName,''),ISNULL(GSTTinNo,'')
		FROM RetailerShipAdd A 
		LEFT OUTER JOIN Retailer B on A.RtrID=B.RtrID 
		LEFT OUTER JOIN StateMaster C (NOLOCK) ON C.StateId=A.StateId
		LEFT OUTER JOIN TaxGroupSetting D (NOLOCK) ON D.TaxGroupId=A.TaxGroupId
	END
	ELSE
	BEGIN
		INSERT INTO @LoadRetailerShippingDetails(RtrId,RtrShipId,RtrName,RtrShipAdd1,RtrShipAdd2,RtrShipAdd3,RtrShipPinNo,
		RtrShipPhoneNo,RtrShipDefaultAdd,[TaxGroupId],[TaxGroupName],[StateId],[StateName],[GSTTinNo])
		SELECT A.RtrId,A.RtrShipId,B.RtrName,A.RtrShipAdd1,A.RtrShipAdd2,A.RtrShipAdd3,A.RtrShipPinNo,A.RtrShipPhoneNo,	
		CASE A.RtrShipDefaultAdd WHEN 0 THEN 'No' else 'Yes' end as RtrShipDefaultAdd ,
		ISNULL(A.TaxGroupId,0),ISNULL(D.TaxGroupName,'') TaxGroupName,ISNULL(A.StateId,0),ISNULL(C.StateName,''),ISNULL(GSTTinNo,'')
		FROM RetailerShipAdd A 
		LEFT OUTER JOIN Retailer B on A.RtrID=B.RtrID 
		LEFT OUTER JOIN StateMaster C (NOLOCK) ON C.StateId=A.StateId
		LEFT OUTER JOIN TaxGroupSetting D (NOLOCK) ON D.TaxGroupId=A.TaxGroupId
		WHERE A.RtrShipId in (SELECT MIN(RtrShipId) FROM RetailerShipAdd) 
	END
RETURN
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE NAME='Fn_HotSearchState' AND XTYPE In ('TF','FN'))
DROP FUNCTION Fn_HotSearchState
GO
CREATE FUNCTION Fn_HotSearchState(@RtrId as BIGINT)
RETURNS @LoadHotSearchState TABLE
(
	[StateId]			[INT],
	[StateCode]			[VARCHAR] (50),
	[StateName]			[VARCHAR] (200)
)
AS
/*********************************
* PROCEDURE		: Fn_HotSearchState
* PURPOSE		: To Load State Master
* CREATED		: S.Moorthi
* CREATED DATE	: 11-05-2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
BEGIN
		INSERT INTO @LoadHotSearchState(StateId,StateCode,StateName)
		SELECT StateId,StateCode,StateName FROM StateMaster (NOLOCK)
RETURN
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE NAME='Proc_ValidateRetailerShippingAddress' AND XTYPE='P')
DROP PROCEDURE Proc_ValidateRetailerShippingAddress
GO
CREATE PROCEDURE Proc_ValidateRetailerShippingAddress
(

	@Po_ErrNo INT OUTPUT
)
AS
/***********************************************************************************************
* PROCEDURE	: Proc_ValidateRetailerShippingAddress
* PURPOSE	: To Insert and Update records  from xml file in the Table RetailerShippingAddress 
* CREATED	: MarySubashini.S
* CREATED DATE	: 13/09/2007
* MODIFIED 
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------------------------------------------------------
* {Date}       {Developer}               {brief modification description}      
* 21/07/2009   Nanda	                 Modified for Default Shipping Address Validation
  2013/10/10   Sathishkumar Veeramani    Junk Characters Removed  
*************************************************************************************************/ 
SET NOCOUNT ON
BEGIN
	DECLARE @RetailerCode AS NVARCHAR(100)
	DECLARE @Address1 AS NVARCHAR(100)
	DECLARE @Address2 AS NVARCHAR(100)
	DECLARE @Address3 AS NVARCHAR(100)
	DECLARE @RtrShipPinNo AS NVARCHAR(100)
	DECLARE @RtrShipPhoneNo AS NVARCHAR(100)
	DECLARE @DefaultShippingAddress AS NVARCHAR(100)
	DECLARE @RtrId AS INT
	DECLARE @RtrShipId AS INT
	DECLARE @SNewRtrId AS INT
	DECLARE @SOldRtrId AS INT
	DECLARE @DefCount AS INT 
	DECLARE @Tabname AS NVARCHAR(100)
	DECLARE @CntTabname AS NVARCHAR(100)
	DECLARE @FldName AS NVARCHAR(100)
	DECLARE @SRetailerCode AS NVARCHAR(100)
	DECLARE @ErrDesc AS NVARCHAR(1000)
	DECLARE @sSql AS NVARCHAR(4000)
	DECLARE @NewShipAddr AS NVARCHAR(4000)	
	DECLARE @ShipSlNo TABLE
	(
		SlNo		 INT IDENTITY,
		ErrorDesc	NVARCHAR(1000)
	)
	
	SET @DefCount=0
	SET @Po_ErrNo=0
	SET @CntTabname='RetailerShipAdd'
	SET @Tabname='ETL_Prk_RetailerShippingAddress'
	SET @FldName='RtrShipId'
	SET @SRetailerCode=''
	DECLARE Cur_RetailerShippingAddress CURSOR 
	FOR SELECT dbo.Fn_Removejunk(ISNULL([Retailer Code],'')),dbo.Fn_Removejunk(ISNULL(Address1,'')),dbo.Fn_Removejunk(ISNULL(Address2,'')),
	dbo.Fn_Removejunk(ISNULL(Address3,'')),dbo.Fn_Removejunk(ISNULL([Retailer Shipping Pin Code],'0')),
	ISNULL([Retailer Shipping Phone No],''),dbo.Fn_Removejunk(ISNULL([Default Shipping Address],''))
	FROM ETL_Prk_RetailerShippingAddress WITH(NOLOCK) ORDER BY [Retailer Code],[Default Shipping Address]
	
	OPEN Cur_RetailerShippingAddress
	FETCH NEXT FROM Cur_RetailerShippingAddress INTO @RetailerCode,@Address1,@Address2,@Address3,
				@RtrShipPinNo,@RtrShipPhoneNo,@DefaultShippingAddress
	WHILE @@FETCH_STATUS=0
	BEGIN
		IF NOT EXISTS  (SELECT * FROM Retailer WHERE RtrCode = @RetailerCode)    
  		BEGIN
			SET @Po_ErrNo=1
			SET @ErrDesc = 'Retailer Code ' + @RetailerCode + ' does not exist'  		 
			INSERT INTO Errorlog VALUES (1,@Tabname,'RetailerCode',@ErrDesc)
		END
		ELSE
		BEGIN
			SELECT @RtrId =RtrId FROM Retailer WHERE RtrCode = @RetailerCode
		END
		IF LTRIM(RTRIM(@Address1))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @ErrDesc = 'Retailer Shipping Address should not be empty'  		 
			INSERT INTO Errorlog VALUES (2,@Tabname,'Address',@ErrDesc)
		END
		IF LEN(@RtrShipPinNo)<>0
		BEGIN
			IF ISNUMERIC(@RtrShipPinNo)=0
			BEGIN
				SET @Po_ErrNo=1	
				SET @ErrDesc = 'PinCode is not in correct format'		 
				INSERT INTO Errorlog VALUES (3,@Tabname,'RtrShipPinNo',@ErrDesc)
			END	
		END					
		IF LTRIM(RTRIM(@RtrShipPhoneNo))<>'' 
		BEGIN		
			SET @Po_ErrNo=0	
		END	
	
		SET @DefCount=0
		
		IF LTRIM(RTRIM(@DefaultShippingAddress))='YES' 
		BEGIN
			IF NOT EXISTS (SELECT * FROM RetailerShipAdd WHERE RtrId=@RtrId AND 
			RtrShipDefaultAdd=1)
			BEGIN
				SET @DefCount=1
			END
			ELSE
			BEGIN
				SET @DefaultShippingAddress='NO'
				SET @DefCount=1
			END
		END
		ELSE
		BEGIN
			SET @DefCount=1
		END
		IF @DefCount=2
		BEGIN
			SET @Po_ErrNo=1		
			SET @ErrDesc = 'Default Shipping Address already exists for the Retailer '+@RetailerCode		 
			INSERT INTO Errorlog VALUES (6,@Tabname,'DefaultShippingAddress',@ErrDesc)
		END
		IF @DefCount=0 
		BEGIN
			SET @Po_ErrNo=1		
			SET @ErrDesc = 'Default Shipping Address is not available for the Retailer '+@RetailerCode		 
			INSERT INTO Errorlog VALUES (7,@Tabname,'DefaultShippingAddress',@ErrDesc)
		END
			
		SELECT @RtrShipId=dbo.Fn_GetPrimaryKeyInteger(@CntTabname,@FldName,CAST(YEAR(GetDate()) AS INT),MONTH(GETDATE()))
	
		IF @RtrShipId=0 
		BEGIN
			SET @Po_ErrNo=1		
			SET @ErrDesc = 'Reset the Counter value '+@RetailerCode		 
			INSERT INTO Errorlog VALUES (8,@Tabname,'Counter Value',@ErrDesc)
		END
			
		SELECT @NewShipAddr=@Address1+@Address2+@Address3+@RtrShipPinNo+@RtrShipPhoneNo
		IF NOT EXISTS(SELECT LTRIM(RTRIM(RtrShipAdd1))+LTRIM(RTRIM(RtrShipAdd2))+LTRIM(RTRIM(RtrShipAdd3))+
		LTRIM(RTRIM(CAST(RtrShipPinNo AS NVARCHAR(10))))+LTRIM(RTRIM(RtrShipPhoneNo))
		FROM RetailerShipAdd WHERE RtrId=@RtrId AND LTRIM(RTRIM(RtrShipAdd1))+LTRIM(RTRIM(RtrShipAdd2))+LTRIM(RTRIM(RtrShipAdd3))+
		LTRIM(RTRIM(CAST(RtrShipPinNo AS NVARCHAR(10))))+LTRIM(RTRIM(RtrShipPhoneNo))=LTRIM(RTRIM(@NewShipAddr)))
		BEGIN
			IF  @Po_ErrNo=0
			BEGIN	
				INSERT INTO RetailerShipAdd(RtrShipId,RtrId,RtrShipAdd1,RtrShipAdd2,RtrShipAdd3,RtrShipPinNo,RtrShipPhoneNo,RtrShipDefaultAdd,
				Availability,LastModBy,LastModDate,AuthId,AuthDate,TaxGroupId,StateId,GSTTinNo,Upload) 
				VALUES(@RtrShipId,@RtrId,@Address1,@Address2,@Address3,@RtrShipPinNo,@RtrShipPhoneNo,
				(CASE @DefaultShippingAddress WHEN 'YES' THEN 1 ELSE 0 END),
				1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121),0,0,'','N')
				
				SET @sSql='INSERT INTO RetailerShipAdd(RtrShipId,RtrId,RtrShipAdd1,RtrShipAdd2,RtrShipAdd3,RtrShipPinNo,RtrShipPhoneNo,RtrShipDefaultAdd,Availability,LastModBy,LastModDate,AuthId,AuthDate) 
				VALUES('+CAST(@RtrShipId AS VARCHAR(10))+','+CAST(@RtrId AS VARCHAR(10))+','''+@Address1+''','''+@Address2+''','''+@Address3+''','''','''','+CAST(@RtrShipPinNo AS VARCHAR(10))+','''+@RtrShipPhoneNo+''',
				'+CAST((CASE @DefaultShippingAddress WHEN 'YES' THEN 1 ELSE 0 END)AS VARCHAR(10))+',
				1,1,'''+CONVERT(NVARCHAR(10),GETDATE(),121)+''',1,'''+CONVERT(NVARCHAR(10),GETDATE(),121)+''')'
				INSERT INTO Translog(strSql1) VALUES (@sSql)
		
				UPDATE Retailer SET RtrShipId=@RtrShipId WHERE RtrId=@RtrId
				EXEC Proc_UpdateRetailerShipping @RtrId,@RtrShipId
		
				SET @sSql='UPDATE Retailer SET RtrShipId='+CAST(@RtrShipId AS VARCHAR(10))+' WHERE RtrId='+CAST(@RtrId AS VARCHAR(10))+''
				INSERT INTO Translog(strSql1) VALUES (@sSql)
			END
	
			IF EXISTS (SELECT * FROM RetailerShipAdd WHERE RtrShipId=@RtrShipId)
			BEGIN
				UPDATE Counters SET CurrValue=CurrValue+1 WHERE TabName=@CntTabname AND FldName=@FldName
		
				SET @sSql='UPDATE Counters SET CurrValue=CurrValue'+'+1'+' WHERE TabName='''+@CntTabname+''' AND FldName='''+@FldName+''''
				INSERT INTO Translog(strSql1) VALUES (@sSql)
			END
		END
			
		FETCH NEXT FROM Cur_RetailerShippingAddress INTO @RetailerCode,@Address1,@Address2,@Address3,@RtrShipPinNo,@RtrShipPhoneNo,@DefaultShippingAddress
	END
	CLOSE Cur_RetailerShippingAddress
	DEALLOCATE Cur_RetailerShippingAddress
	
	IF EXISTS(SELECT * FROM Retailer WHERE RtrId NOT IN(SELECT RtrId FROM RetailerShipAdd WHERE RtrShipDefaultAdd=1))
	BEGIN
		INSERT INTO Errorlog(SlNo,TableName,FieldName,ErrDesc) 
		SELECT 1,@Tabname,'Default Shipping Address','Default Shipping Address not available for '+CAST(RtrCode AS NVARCHAR(50)) FROM Retailer
		WHERE RtrId NOT IN(SELECT RtrId FROM RetailerShipAdd)
		SET @Po_ErrNo=1
	END
	--->Added By Nanda on 04/03/2010
	IF EXISTS(SELECT * FROM Retailer WHERE RtrId NOT IN(SELECT RtrId FROM RetailerShipAdd))
	BEGIN
		INSERT INTO Errorlog(SlNo,TableName,FieldName,ErrDesc) 
		SELECT 100,'Retailer','Shipping Address','Shipping Address is not mapped correctly for Retailer Code:'+RtrCode
		FROM Retailer WHERE RtrId NOT IN (SELECT DISTINCT RtrId FROM RetailerShipAdd)
		DELETE FROM RetailerMarket WHERE RtrId NOT IN(SELECT RtrId FROM RetailerShipAdd)
		DELETE FROM RetailerValueClassMap WHERE RtrId NOT IN(SELECT RtrId FROM RetailerShipAdd)		
		DELETE FROM CoaMaster WHERE CoaId IN (SELECT CoaId FROM Retailer WHERE RtrId NOT IN (SELECT RtrId FROM RetailerShipAdd))
		DELETE FROM Retailer WHERE RtrId NOT IN(SELECT RtrId FROM RetailerShipAdd)
		SET @sSql='DELETE FROM RetailerMarket WHERE RtrId NOT IN(SELECT RtrId FROM RetailerShipAdd)
		DELETE FROM RetailerValueClassMap WHERE RtrId NOT IN(SELECT RtrId FROM RetailerShipAdd)		
		DELETE FROM CoaMaster WHERE CoaId IN (SELECT CoaId FROM Retailer WHERE RtrId NOT IN (SELECT RtrId FROM RetailerShipAdd))
		DELETE FROM Retailer WHERE RtrId NOT IN(SELECT RtrId FROM RetailerShipAdd)'
		INSERT INTO Translog(strSql1) VALUES (@sSql)
	END
	ELSE IF EXISTS(SELECT * FROM Retailer WHERE RtrId NOT IN(SELECT RtrId FROM RetailerMarket))
	BEGIN
		INSERT INTO Errorlog(SlNo,TableName,FieldName,ErrDesc) 
		SELECT 100,'Retailer','Route','Route is not mapped correctly for Retailer Code:'+RtrCode
		FROM Retailer WHERE RtrId NOT IN (SELECT DISTINCT RtrId FROM RetailerMarket)
		DELETE FROM RetailerValueClassMap WHERE RtrId NOT IN(SELECT RtrId FROM RetailerMarket)
		DELETE FROM CoaMaster WHERE CoaId IN (SELECT CoaId FROM Retailer WHERE RtrId NOT IN (SELECT RtrId FROM RetailerMarket))
		DELETE FROM Retailer WHERE RtrId NOT IN(SELECT RtrId FROM RetailerMarket)
		SET @sSql='DELETE FROM RetailerValueClassMap WHERE RtrId NOT IN(SELECT RtrId FROM RetailerMarket)
		DELETE FROM CoaMaster WHERE CoaId IN (SELECT CoaId FROM Retailer WHERE RtrId NOT IN (SELECT RtrId FROM RetailerMarket))
		DELETE FROM Retailer WHERE RtrId NOT IN(SELECT RtrId FROM RetailerMarket)'
		INSERT INTO Translog(strSql1) VALUES (@sSql)
	END
	ELSE IF EXISTS(SELECT * FROM Retailer WHERE RtrId NOT IN(SELECT RtrId FROM RetailerValueClassMap))
	BEGIN
		INSERT INTO Errorlog(SlNo,TableName,FieldName,ErrDesc) 
		SELECT 100,'Retailer','Value Class','Value Class is not mapped correctly for Retailer Code:'+RtrCode
		FROM Retailer WHERE RtrId NOT IN (SELECT DISTINCT RtrId FROM RetailerValueClassMap)
		DELETE FROM CoaMaster WHERE CoaId IN (SELECT CoaId FROM Retailer WHERE RtrId NOT IN (SELECT RtrId FROM RetailerValueClassMap))
		DELETE FROM Retailer WHERE RtrId NOT IN(SELECT RtrId FROM RetailerValueClassMap)
		SET @sSql='DELETE FROM CoaMaster WHERE CoaId IN (SELECT CoaId FROM Retailer WHERE RtrId NOT IN (SELECT RtrId FROM RetailerValueClassMap))
		DELETE FROM Retailer WHERE RtrId NOT IN(SELECT RtrId FROM RetailerValueClassMap)'
		INSERT INTO Translog(strSql1) VALUES (@sSql)
	END
	--->Till Here
	RETURN
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Fn_ReturnVATSupplierTax' AND XTYPE IN ('TF','FN'))
DROP FUNCTION Fn_ReturnVATSupplierTax
GO
--SELECT DBO.Fn_ReturnVATSupplierTax(0,1) AS VatTaxGroupId
CREATE FUNCTION Fn_ReturnVATSupplierTax(@SpmId AS INT,@SpmType AS INT)
RETURNS INT
AS
/*********************************
* PROCEDURE		: Fn_ReturnVATSupplierTax
* PURPOSE		: To Return VAT Supplier Tax
* CREATED		: S.Moorthi
* CREATED DATE	: 12-05-2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
BEGIN
DECLARE @VatTaxGroupId AS INT
SET @VatTaxGroupId=0
	IF @SpmType=1
	BEGIN
		IF EXISTS(SELECT * FROM Supplier(NOLOCK) WHERE SpmId=@SpmId)
		BEGIN
				SELECT @VatTaxGroupId=ISNULL(VatTaxGroupId,0) FROM Supplier(NOLOCK) WHERE SpmId=@SpmId  			
		END
		ELSE
		BEGIN
			SELECT @VatTaxGroupId=MAX(ISNULL(TaxGroupId,0)) FROM VATDefaultSupplier
		END
	END
	ELSE
	BEGIN
		IF EXISTS(SELECT * FROM IDTMaster(NOLOCK) WHERE SpmId=@SpmId)
		BEGIN
			SELECT @VatTaxGroupId=ISNULL(VatTaxGroupId,0) FROM IDTMaster(NOLOCK) WHERE SpmId=@SpmId 
		END
		ELSE
		BEGIN
			SELECT @VatTaxGroupId=MAX(ISNULL(TaxGroupId,0)) FROM IDTMaster WHERE 
			SpmId in (SELECT MAX(ISNULL(SpmId,0)) FROM IDTMaster WHERE ISNULL(TaxGroupId,0)<>0)
		END
	END
	--Added by Mohanakrishna A.B
	IF @VatTaxGroupId Is NULL
	BEGIN 
		SET @VatTaxGroupId =0
	END 	
	---
RETURN @VatTaxGroupId
END
GO
--Added by karthik anna
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_ComputeITCReport' AND XTYPE='P')
DROP PROCEDURE Proc_ComputeITCReport
GO
--EXEC Proc_ComputeITCReport 1,0,''
CREATE PROCEDURE Proc_ComputeITCReport
(
	@Pi_Usrid	INT,
	@Pi_OutError  TINYINT OUTPUT,
	@Pi_OutMessage  Varchar(6000) OUTPUT
)
AS
/************************
* PROCEDURE		: Proc_ComputeITCReport      
* PURPOSE		: GST Changes To Track Product wise GRN Details FOR TSI REport
* CREATED		: Karthick
* CREATED DATE	: 2017-04-12
* MODIFIED
* DATE      AUTHOR     DESCRIPTION 
***************************/
SET NOCOUNT ON
BEGIN
 	DECLARE @MaxSlNo AS INT
	DECLARE @Slno AS INT
	DECLARE @Prdid AS INT
	DECLARE @PrdBatid AS INT
	DECLARE @SaleableQyt AS INT
	DECLARE @UnSaleableQyt AS INT
	DECLARE @FreeQyt AS INT
	DECLARE @PurMaxSlNo AS INT
	DECLARE @PurSlno AS INT
	DECLARE @PrdSlNo AS INT
	DECLARE @PurSaleableQty AS INT
	DECLARE @PurRcptId AS INT
	DECLARE @LcnId AS INT
	DECLARE @UnSaleableQty AS INT
	DECLARE @MRP AS NUMERIC(18,6)
	DECLARE @SellingRate AS NUMERIC(18,6)
	DECLARE @PurchaseRate AS NUMERIC(18,6)
	DECLARE @RemainingQty AS INT
	DECLARE @PurFreeQty AS INT
	
	SET @Pi_OutError=0
	SET @Pi_OutMessage=''
	
BEGIN TRY
		--MULTIUSER VALIDATION
		IF EXISTS(SELECT UserId FROM MultiUserTransValidation (NOLOCK) WHERE TransId=1000 AND TransName='ITC Report')
		BEGIN
			SET @Pi_OutError=0
			RETURN
		END
	
		IF EXISTS(SELECT 1 FROM VatClosingStock(NOLOCK))
		BEGIN
			SET @Pi_OutError=0
			RETURN
		END
		
 BEGIN TRANSACTION 
		INSERT INTO MultiUserTransValidation(UserId,UserName,TransId,TransName,LockedDate)
		SELECT @Pi_Usrid,'',1000,'ITC Report',GETDATE()
	
	CREATE TABLE #PurchaseSaleableSplit
	(	
		GrnSlno			INT,
		PurRcptid		INT,
		Prdid			INT,
		Prdbatid		INT,
		LcnId			INT,
		PurSaleableQty  INT
	)
	CREATE TABLE #PurchaseFreeSplit
	(	
		GrnSlno			INT,
		PurRcptid		INT,
		Prdid			INT,
		Prdbatid		INT,
		LcnId			INT,
		PurFreeQty		INT
	)
	CREATE TABLE #FinalDetails
	(
		Prdid				INT,
		Prdbatid			INT,
		Lcnid				INT,
		ClosingSaleable		BIGINT,	
		ClosingUnSaleable	BIGINT,
		ClosingFree			BIGINT,	
		MRP					NUMERIC(18,6),
		SellingRate			NUMERIC(18,6),
		PurchaseRate		NUMERIC(18,6),	
		GrnDate				DATETIME,
		GrnRefNo			NVARCHAR(50),
		CmpInvNo			NVARCHAR(50),
		GrnQty				INT,
		GrnFreeQty			INT,
		TaxPerc				NUMERIC(18,6),
		TaxableAmount		NUMERIC(18,6),
		TaxAmount			NUMERIC(18,6),
	)
	 
	CREATE TABLE #PurchaseTax
	(
		PurRcptId INT,
		PrdSlno INT,
		TaxPerc NUMERIC(18,2),
		TaxableAmount NUMERIC(18,6),
		TaxAmount	NUMERIC(18,6)
	)
		
	--STOCK DETAILS
	SELECT Prdid,PrdBatid,Lcnid,SUM(PrdBatLcnSih-PrdBatLcnRessih)SaleableQty,SUM(PrdBatLcnUih-PrdBatLcnResUih) UnsaleableQty,
	SUM(prdbatlcnfre-prdbatlcnresfre)FreeQty INTO #StockDetails
	FROM Productbatchlocation(NOLOCK) WHERE ((PrdBatLcnSih-PrdBatLcnRessih)+(PrdBatLcnUih-PrdBatLcnResUih)+(prdbatlcnfre-prdbatlcnresfre))>0
	GROUP BY Prdid,PrdBatid,Lcnid
	--drop table #ProductStockDetails		
	---STOCK WITH PRICE DETAILS
	SELECT PrdId,prdbatid,LcnId,SaleableQty,UnsaleableQty,FreeQty,SUM(MRP)MRP,SUM(SellingRate)SellingRate,SUM(PurRate)PurRate,Priceid,
	ROW_NUMBER() OVER(ORDER BY PRDID,PRDBATID) AS RowNo
	INTO #ProductStockDetails
	FROM
	(
	SELECT s.PrdId,s.prdbatid,s.LcnId,SaleableQty,UnsaleableQty,FreeQty,PrdBatDetailValue AS MRP,0 AS SellingRate,0 AS PurRate,Priceid 
	FROM #StockDetails S 
	INNER JOIN ProductBatch PB(NOLOCK) ON S.PrdId=PB.PrdId AND S.PrdBatID=PB.PrdBatId
	INNER JOIN ProductBatchDetails P(NOLOCK) ON S.PrdBatID=P.PrdBatId AND P.PrdBatId=PB.PrdBatId
	INNER JOIN BatchCreation B(NOLOCK) ON B.slno=p.slno
	WHERE P.DefaultPrice=1 AND FieldDesc='MRP'
	UNION ALL
	SELECT s.PrdId,s.prdbatid,s.LcnId,SaleableQty,UnsaleableQty,FreeQty,0 AS MRP,PrdBatDetailValue AS SellingRate,0 AS PurRate ,Priceid
	FROM #StockDetails S 
	INNER JOIN ProductBatch PB(NOLOCK) ON S.PrdId=PB.PrdId AND S.PrdBatID=PB.PrdBatId
	INNER JOIN ProductBatchDetails P(NOLOCK) ON S.PrdBatID=P.PrdBatId AND P.PrdBatId=PB.PrdBatId
	INNER JOIN BatchCreation B(NOLOCK) ON B.slno=p.slno
	WHERE P.DefaultPrice=1 AND FieldDesc='Selling Price'
	UNION ALL
	SELECT s.PrdId,s.prdbatid,s.LcnId,SaleableQty,UnsaleableQty,FreeQty,0 AS MRP,0 AS SellingRate,PrdBatDetailValue AS PurRate,Priceid
	FROM #StockDetails S 
	INNER JOIN ProductBatch PB(NOLOCK) ON S.PrdId=PB.PrdId AND S.PrdBatID=PB.PrdBatId
	INNER JOIN ProductBatchDetails P(NOLOCK) ON S.PrdBatID=P.PrdBatId AND P.PrdBatId=PB.PrdBatId
	INNER JOIN BatchCreation B(NOLOCK) ON B.slno=p.slno
	WHERE P.DefaultPrice=1 AND FieldDesc='List Price'
	)A 
	GROUP BY PrdId,prdbatid,LcnId,SaleableQty,UnsaleableQty,FreeQty,Priceid
	--drop table 	#GRNDetails
	--PURCHASE DETAILS FOR STOCK PRODUCT
	
	SELECT PR.PurRcptId,PurRcptRefNo,CmpInvNo,InvDate,PR.LcnId,PRP.PrdId,PRP.PrdBatId,PRP.prdslno,
	SUM(RcvdGoodBaseQty-RetRcvdBaseQty)PurSaleableQty,SUM(UnSalBaseQty-RetUnSalBaseQty)PurUnSaleableQty INTO #Purchase
	FROM PURCHASERECEIPT PR(NOLOCK) 
	INNER JOIN PURCHASERECEIPTPRODUCT PRP(NOLOCK) ON PR.PurRcptId=PRP.PurRcptId
	INNER JOIN #StockDetails S ON S.PrdId=PRP.PrdId AND S.PrdBatID=PRP.PrdBatId AND S.LcnId=PR.LcnId
	WHERE Status=1 --AND CancelInvoice=0 
	AND ((RcvdGoodBaseQty-RetRcvdBaseQty)+(UnSalBaseQty-RetUnSalBaseQty))>0
	GROUP BY PR.PurRcptId,PurRcptRefNo,CmpInvNo,PR.LcnId,PRP.PrdId,PRP.PrdBatId,InvDate,PRP.prdslno
	
	--GET PURCHASE TAX DETAILS
	INSERT INTO #PurchaseTax(PurRcptId,PrdSlno,TaxPerc,TaxableAmount,TaxAmount)
	SELECT PT.PurRcptId,pt.PrdSlNo,SUM(TaxPerc) as TaxPerc,TaxableAmount,SUM(TaxAmount) 
	FROM PurchaseReceiptProductTax PT INNER JOIN #Purchase P ON PT.PurRcptId=P.PurRcptId AND PT.PrdSlNo=P.PrdSlNo
	WHERE  TaxableAmount>0  
 	GROUP BY PT.PurRcptId,PT.PrdSlNo,TaxableAmount 
 	ORDER BY PT.Prdslno
	
	SELECT PurRcptId,PrdSlno Into #TaxCess FROM #PurchaseTax 
	GROUP BY PurRcptId,PrdSlno
	HAVING Count(PrdSlno)>1	 
	
	SELECT TT.PurRcptId,TT.PrdSlno, TaxPerc,TaxableAmount,TaxAmount INTO #TaxCess1 FROM #PurchaseTax TT
	INNER JOIN #TaxCess T ON T.PurRcptId= TT.PurRcptId and T.PrdSlNo=TT.PrdSlno
	
	DELETE A FROM #PurchaseTax  A INNER JOIN #TaxCess B ON A.PurRcptId=B.PurRcptId and A.PrdSlno=B.PrdSlno
	
	SELECT PurRcptId,PrdSlno,Max(TaxableAmount) as TaxableAmount INTO #MaxTaxable FROM #TaxCess1 
	GROUP BY PurRcptId,PrdSlno
	
	SELECT PurRcptId,PrdSlno,Min(TaxableAmount) as TaxableAmount INTO #MinTaxable FROM #TaxCess1 
	GROUP BY PurRcptId,PrdSlno
			
	INSERT INTO #PurchaseTax(PurRcptId,PrdSlno,TaxPerc,TaxableAmount,TaxAmount)
	SELECT PurRcptId,Prdslno,SUM(TaxPercMain)+(SUM(TaxPercMain)*SUM((TaxPercCess/100))),sum(TaxableAmount),SUM(TaxAmount)
	FROM (
			SELECT A.PurRcptId,A.PrdSlno,A.TaxPerc as TaxPercMain,0 as TaxPercCess,B.TaxableAmount,TaxAmount
			FROM #TaxCess1 A INNER JOIN #MaxTaxable B ON A.PurRcptId=B.PurRcptId 
			and A.Prdslno=B.PrdSlno and A.TaxableAmount=B.TaxableAmount		
			UNION ALL
			SELECT A.PurRcptId,A.PrdSlno,0 as TaxPercMain,TaxPerc as TaxPercCess ,0 as TaxableAmount,TaxAmount
			FROM #TaxCess1 A INNER JOIN #MinTaxable B ON A.PurRcptId=B.PurRcptId 
			and A.Prdslno=B.PrdSlno and A.TaxableAmount=B.TaxableAmount			 
	)X GROUP BY PurRcptId,Prdslno
	--
	
	SELECT PurRcptId,PurRcptRefNo,CmpInvNo,InvDate,LcnId,PrdId,PrdBatId,SUM(PurSaleableQty)AS PurSaleableQty,SUM(PurFreeQty)AS PurFreeQty,
	TaxPerc,SUM(TaxableAmount)AS TaxableAmount ,SUM(TaxAmount) AS TaxAmount INTO #GRNDetails
	FROM
	(
	SELECT P.PurRcptId,PurRcptRefNo,CmpInvNo,InvDate,LcnId,PrdId,PrdBatId,PurSaleableQty,
    PurUnSaleableQty,0 AS PurFreeQty,TaxPerc, TaxableAmount, TaxAmount
	FROM #Purchase P INNER JOIN #PurchaseTax PT ON P.PurRcptId=PT.PurRcptId AND PT.PrdSlno=P.PrdSlNo
	WHERE  TaxableAmount>0
	UNION ALL
	SELECT PR.PurRcptId,PurRcptRefNo,CmpInvNo,InvDate,PR.LcnId,PRP.PrdId,PRP.PrdBatId, 0 AS PurSaleableQty,0 AS PurUnSaleableQty,
	SUM(Quantity-RetQuantity)PurFreeQty ,0 AS TaxPerc,0 AS TaxableAmount,0 AS TaxAmount
	FROM PURCHASERECEIPT PR(NOLOCK) 
	INNER JOIN PurchaseReceiptClaimScheme PRP(NOLOCK) ON PR.PurRcptId=PRP.PurRcptId
	INNER JOIN #StockDetails S ON S.PrdId=PRP.PrdId AND S.PrdBatID=PRP.PrdBatId AND S.LcnId=PR.LcnId
	WHERE Status=1 --AND CancelInvoice=0 
	AND (Quantity-RetQuantity)>0 AND S.FreeQty>0
	GROUP BY PR.PurRcptId,PurRcptRefNo,CmpInvNo,PR.LcnId,PRP.PrdId,PRP.PrdBatId,InvDate
	)A
	GROUP BY PurRcptId,PurRcptRefNo,CmpInvNo,LcnId,PrdId,PrdBatId,TaxPerc,InvDate
	
	SELECT @MaxSlNo=MAX(RowNo) FROM #ProductStockDetails
	
	SET @Slno=1
	WHILE @Slno<=@MaxSlNo
	BEGIN
		
		SELECT @Prdid=Prdid,@PrdBatid=PrdBatid,@SaleableQyt=SaleableQty,@UnSaleableQty=UnSaleableqty,@FreeQyt=FreeQty,@LcnId=LcnId,
		@MRP=MRP,@SellingRate=SellingRate,@PurchaseRate=PurRate 
		FROM #ProductStockDetails WHERE RowNo=@Slno
		
		---Purchase Qty Split for SaleableQty
		IF @SaleableQyt>0
		BEGIN
			DELETE FROM #PurchaseSaleableSplit
			INSERT INTO #PurchaseSaleableSplit
			SELECT ROW_NUMBER() OVER(ORDER BY PrdId,PrdBatId) AS GrnSlno,PurRcptId,PrdId,PrdBatId,LcnId,PurSaleableQty  
			FROM(SELECT DISTINCT PurRcptId,PrdId,PrdBatId,LcnId,PurSaleableQty 
			FROM #GRNDetails 
			WHERE PrdId=@Prdid AND PrdBatId=@PrdBatid AND LcnId=@LcnId And PurSaleableQty>0)A ORDER BY PurRcptId DESC
			
			SET @RemainingQty=@SaleableQyt
			
			SELECT @PurMaxSlNo=MAX(GrnSlno) FROM #PurchaseSaleableSplit 	
			SET @PurSlno=1 
			WHILE @PurSlno<=@PurMaxSlNo
			BEGIN
				 SELECT @PurRcptId=PurRcptId,@PurSaleableQty=PurSaleableQty FROM #PurchaseSaleableSplit WHERE GrnSlno=@PurSlno 
					 
				 IF @RemainingQty>0
				 BEGIN
					 IF @PurSaleableQty>=@RemainingQty
					 BEGIN
						INSERT INTO #FinalDetails(prdid,Prdbatid,Lcnid,ClosingSaleable,ClosingUnSaleable,ClosingFree,MRP,SellingRate,
									PurchaseRate,GrnDate,GrnRefNo,CmpInvNo,GrnQty,GrnFreeQty,TaxPerc,TaxableAmount,TaxAmount)
						SELECT @Prdid,@PrdBatid,@LcnId,@SaleableQyt,@UnSaleableQty,0,@MRP,@SellingRate,@PurchaseRate,InvDate,
						PurRcptRefNo,CmpInvNo,@RemainingQty,0,TaxPerc,(TaxableAmount/@PurSaleableQty)*@RemainingQty,(TaxAmount/@PurSaleableQty)*@RemainingQty
						FROM #PurchaseSaleableSplit P INNER JOIN #GRNDetails G ON G.PurRcptId=P.PurRcptId AND P.Prdid=G.Prdid 
							 AND P.Prdbatid=G.Prdbatid AND P.LcnId=G.LcnId AND G.PurSaleableQty>0
						WHERE GrnSlno=@PurSlno  
						
						BREAK 
					 END 
					 ELSE
					 BEGIN
					 	INSERT INTO #FinalDetails(prdid,Prdbatid,Lcnid,ClosingSaleable,ClosingUnSaleable,ClosingFree,MRP,SellingRate,
									PurchaseRate,GrnDate,GrnRefNo,CmpInvNo,GrnQty,GrnFreeQty,TaxPerc,TaxableAmount,TaxAmount)
						SELECT @Prdid,@PrdBatid,@LcnId,@SaleableQyt,@UnSaleableQty,0,@MRP,@SellingRate,@PurchaseRate,InvDate,
						PurRcptRefNo,CmpInvNo,@PurSaleableQty,0,TaxPerc,TaxableAmount,TaxAmount
						FROM #PurchaseSaleableSplit P INNER JOIN #GRNDetails G ON G.PurRcptId=P.PurRcptId AND P.Prdid=G.Prdid 
							 AND P.Prdbatid=G.Prdbatid AND P.LcnId=G.LcnId AND G.PurSaleableQty>0
						WHERE GrnSlno=@PurSlno  
						
						SET @RemainingQty=@RemainingQty-@PurSaleableQty
					 END
				  END
				SET @PurSlno=@PurSlno+1
			END			
		END
	
		---Purchase Qty Split for FreeQty
		IF @FreeQyt>0
		BEGIN
			DELETE FROM #PurchaseFreeSplit
			INSERT INTO #PurchaseFreeSplit
			SELECT ROW_NUMBER() OVER(ORDER BY PrdId,PrdBatId) AS GrnSlno,PurRcptId,PrdId,PrdBatId,LcnId,PurFreeQty  
			FROM(SELECT DISTINCT PurRcptId,PrdId,PrdBatId,LcnId,PurFreeQty
			FROM #GRNDetails 
			WHERE PrdId=@Prdid AND PrdBatId=@PrdBatid AND LcnId=@LcnId And PurFreeQty>0)A ORDER BY PurRcptId DESC
			
			SET @RemainingQty=@FreeQyt
			
			SELECT @PurMaxSlNo=MAX(GrnSlno) FROM #PurchaseFreeSplit 	
			SET @PurSlno=1			
			WHILE @PurSlno<=@PurMaxSlNo
			BEGIN
				 SELECT @PurRcptId=PurRcptId,@PurFreeQty=PurFreeQty FROM #PurchaseFreeSplit WHERE GrnSlno=@PurSlno
					 
				 IF @RemainingQty>0
				 BEGIN
					 IF @PurFreeQty>=@RemainingQty
					 BEGIN
						INSERT INTO #FinalDetails(prdid,Prdbatid,Lcnid,ClosingSaleable,ClosingUnSaleable,ClosingFree,MRP,SellingRate,
									PurchaseRate,GrnDate,GrnRefNo,CmpInvNo,GrnQty,GrnFreeQty,TaxPerc,TaxableAmount,TaxAmount)
						SELECT @Prdid,@PrdBatid,@LcnId,0,0,@FreeQyt,@MRP,@SellingRate,@PurchaseRate,InvDate,
						PurRcptRefNo,CmpInvNo,0,@RemainingQty,0,0,0
						FROM #PurchaseFreeSplit P INNER JOIN #GRNDetails G ON G.PurRcptId=P.PurRcptId AND P.Prdid=G.PRDID 
						AND P.Prdbatid=G.PRDBATID AND P.LcnId=G.LcnId  AND G.PurFreeQty>0
						WHERE GrnSlno=@PurSlno 
						
						BREAK 
					 END 
					 ELSE
					 BEGIN
					 	INSERT INTO #FinalDetails(prdid,Prdbatid,Lcnid,ClosingSaleable,ClosingUnSaleable,ClosingFree,MRP,SellingRate,
									PurchaseRate,GrnDate,GrnRefNo,CmpInvNo,GrnQty,GrnFreeQty,TaxPerc,TaxableAmount,TaxAmount)
						SELECT @Prdid,@PrdBatid,@LcnId,0,0,@FreeQyt,@MRP,@SellingRate,@PurchaseRate,InvDate,
						PurRcptRefNo,CmpInvNo,0,@PurFreeQty,0,0,0
						FROM #PurchaseFreeSplit P INNER JOIN #GRNDetails G ON G.PurRcptId=P.PurRcptId AND P.Prdid=G.PRDID 
						AND P.Prdbatid=G.PRDBATID AND P.LcnId=G.LcnId AND G.PurFreeQty>0
						WHERE GrnSlno=@PurSlno 
						
						SET @RemainingQty=@RemainingQty-@PurFreeQty
					 END
				  END
				SET @PurSlno=@PurSlno+1
			END			
		END
	
	
		SET @Slno=@Slno+1
	END
	
	--select * from #FinalDetails where Prdid=967	and prdbatid=14882
	
	SELECT prdid,prdbatid,lcnid,SUM(GrnQty)GrnQty,SUM(GrnFreeQty)GrnFreeQty INTO #StockLessProducts 
	FROM #FinalDetails
	GROUP BY prdid,prdbatid,lcnid	
	
	---PRODUCTS WITHOUT PURCHASE INVOICE
 	INSERT INTO #FinalDetails(prdid,Prdbatid,Lcnid,ClosingSaleable,ClosingUnSaleable,ClosingFree,MRP,SellingRate,
				PurchaseRate,GrnDate,GrnRefNo,CmpInvNo,GrnQty,GrnFreeQty,TaxPerc,TaxableAmount,TaxAmount)
	SELECT PrdId,PrdBatID,LcnId,SaleableQty,UnsaleableQty,FreeQty,MRP,SellingRate,PurRate,CONVERT(VARCHAR(10),GETDATE(),121) as GrnDate ,
	'' AS GrnRefNo,'' AS CmpInvNo,SaleableQty,FreeQty,0 AS TaxPerc,0 AS TaxableAmount,0 AS TaxAmount 
	FROM #ProductStockDetails WHERE NOT EXISTS(
	SELECT prdid,prdbatid,lcnid,GrnQty FROM #StockLessProducts WHERE #StockLessProducts.prdid=#ProductStockDetails.PrdId 
	and #StockLessProducts.Prdbatid=#ProductStockDetails.Prdbatid AND #StockLessProducts.lcnid=#ProductStockDetails.lcnid)
	
	---SALEABLE PRODUCTS WITH PARTIAL PURCHASE INVOICE
 	INSERT INTO #FinalDetails(prdid,Prdbatid,Lcnid,ClosingSaleable,ClosingUnSaleable,ClosingFree,MRP,SellingRate,
				PurchaseRate,GrnDate,GrnRefNo,CmpInvNo,GrnQty,GrnFreeQty,TaxPerc,TaxableAmount,TaxAmount)
	SELECT S.PrdId,S.PrdBatID,S.LcnId,SaleableQty,0 AS UnsaleableQty,0 AS FreeQty,MRP,SellingRate,PurRate,CONVERT(VARCHAR(10),GETDATE(),121) as GrnDate ,
	'' AS GrnRefNo,'' AS CmpInvNo,(S.SaleableQty-SP.GrnQty),0 FreeQty,0 AS TaxPerc,0 AS TaxableAmount,0 AS TaxAmount  
	FROM #ProductStockDetails S INNER JOIN #StockLessProducts SP
	ON S.PrdId=SP.Prdid AND S.PrdBatID=SP.Prdbatid AND S.LCNID=SP.Lcnid
	AND (S.SaleableQty-SP.GrnQty)>0
	---FREE PRODUCTS WITH PARTIAL PURCHASE INVOICE
 	INSERT INTO #FinalDetails(prdid,Prdbatid,Lcnid,ClosingSaleable,ClosingUnSaleable,ClosingFree,MRP,SellingRate,
				PurchaseRate,GrnDate,GrnRefNo,CmpInvNo,GrnQty,GrnFreeQty,TaxPerc,TaxableAmount,TaxAmount)
	SELECT  S.PrdId,S.PrdBatID,S.LcnId,0 AS SaleableQty,0 AS UnsaleableQty,FreeQty,MRP,SellingRate,PurRate,CONVERT(VARCHAR(10),GETDATE(),121) as GrnDate ,
	'' AS GrnRefNo,'' AS CmpInvNo,0,(S.FreeQty-SP.GrnFreeQty) FreeQty,0 AS TaxPerc,0 AS TaxableAmount,0 AS TaxAmount   
	FROM #ProductStockDetails S INNER JOIN #StockLessProducts SP
	ON S.PrdId=SP.Prdid AND S.PrdBatID=SP.Prdbatid AND S.LCNID=SP.Lcnid
	AND (S.FreeQty-SP.GrnFreeQty)>0
	
	INSERT INTO VatClosingStock
	SELECT PrdCCode,pb.PrdBatCode,f.Prdid,F.prdbatid,F.Lcnid,ClosingSaleable,ClosingUnSaleable,ClosingFree,MRP,SellingRate,PurchaseRate,
	TaxPerc,(SellingRate*GrnQty) AS ClosingSelValue,(PurchaseRate*GrnQty) AS ClosingPurValue,
	CASE PrdUnitId
	WHEN 2 THEN ISNULL((PrdWgt * GrnQty),0)/1000/1000 --GM TO TONNES
	WHEN 4 THEN ISNULL((PrdWgt * GrnQty),0)/1000/1000--ML  TO TONNES
	WHEN 3 THEN ISNULL((PrdWgt * GrnQty),0)/1000 --kg TO TONNE
	WHEN 5 THEN ISNULL((PrdWgt * GrnQty),0) /1000--LT to Tonne		
	END AS ClosingSalVolume,
	CASE PrdUnitId
	WHEN 2 THEN ISNULL((PrdWgt * ClosingUnSaleable),0)/1000/1000 --GM TO TONNES
	WHEN 4 THEN ISNULL((PrdWgt * ClosingUnSaleable),0)/1000/1000--ML  TO TONNES
	WHEN 3 THEN ISNULL((PrdWgt * ClosingUnSaleable),0)/1000 --kg TO TONNE
	WHEN 5 THEN ISNULL((PrdWgt * ClosingUnSaleable),0) /1000--LT to Tonne		
	END AS ClosingUnSalVolume,
	CASE PrdUnitId
	WHEN 2 THEN ISNULL((PrdWgt * GrnFreeQty),0)/1000/1000 --GM TO TONNES
	WHEN 4 THEN ISNULL((PrdWgt * GrnFreeQty),0)/1000/1000--ML  TO TONNES
	WHEN 3 THEN ISNULL((PrdWgt * GrnFreeQty),0)/1000 --kg TO TONNE
	WHEN 5 THEN ISNULL((PrdWgt * GrnFreeQty),0) /1000--LT to Tonne		
	END AS ClosingFreeVolume,
	TaxableAmount,TaxAmount,GrnDate,GrnRefNo,CmpInvNo,GrnQty,GrnFreeQty,0,1,GETDATE()
	FROM #FinalDetails F INNER JOIN Product P ON P.PrdId=F.Prdid 
	INNER JOIN ProductBatch PB ON PB.PrdId=f.Prdid and pb.PrdBatId=f.Prdbatid and pb.PrdId=p.PrdId		 
	--SELECT Grnrefno,Prdid,Prdbatid,Lcnid,SUM(Grnqty)Grnqty INTO #PurchaseUpdate 
	--FROM VatClosingStock
	--WHERE GRNREFNO<>'' AND Grnqty>0
	--GROUP BY Grnrefno,Prdid,Prdbatid,Lcnid	
	
	--UPDATE PP SET PP.BilledSalQty=Grnqty FROM PurchaseReceipt PR INNER JOIN PurchaseReceiptProduct PP ON PR.PurRcptId=PP.PurRcptId
	--INNER JOIN #PurchaseUpdate PU ON PU.Grnrefno=PR.PurRcptRefNo AND PP.PrdId=PU.Prdid AND PU.prdbatid=PP.PrdBatId
	--UPDATE PP SET PP.BilledSalQty=Grnqty FROM PurchaseReceipt PR INNER JOIN PurchaseReceiptClaimScheme PP ON PR.PurRcptId=PP.PurRcptId
	--INNER JOIN #PurchaseUpdate PU ON PU.Grnrefno=PR.PurRcptRefNo AND PP.PrdId=PU.Prdid AND PU.prdbatid=PP.PrdBatId
	
	UPDATE GstConfiguration SET AcknowledgeStatus=1 WHERE  ActivationStatus=1 and AcknowledgeStatus=0 AND ModuleId='GSTCONFIG' AND Description='GST Configuration'
	   
	 COMMIT TRANSACTION	
		DELETE A FROM MultiUserTransValidation A(NOLOCK) WHERE TransId=1000
  END TRY
  BEGIN CATCH
	SET @Pi_OutError=1
	SET @Pi_OutMessage=ERROR_MESSAGE()
	ROLLBACK TRANSACTION
  END CATCH
RETURN
END
GO
----Billing Changes
DELETE FROM CustomCaptions WHERE TransId=2 AND CtrlId=1000 AND SubCtrlId=283
INSERT INTO CustomCaptions 
SELECT 2,1000,283,'MsgBox-2-1000-283','','','Unable To Compute GRN Track',1,1,1,GETDATE(),1,GETDATE(),'','','Unable To Compute GRN Track',1,1
GO
DELETE FROM CustomCaptions WHERE TransId=2 AND CtrlId=1000 AND SubCtrlId=284
INSERT INTO CustomCaptions 
SELECT 2,1000,284,'MsgBox-2-1000-284','','','Save Failed While Updating TransactionWiseGrnTracking',1,1,1,GETDATE(),1,GETDATE(),'','','Save Failed While Updating TransactionWiseGrnTracking',1,1
GO
DELETE FROM CustomCaptions WHERE TransId=2 AND CtrlId=1000 AND SubCtrlId=285
INSERT INTO CustomCaptions 
SELECT 2,1000,285,'MsgBox-2-1000-285','','','Unable to Delete TransactionWiseGrnTracking',1,1,1,GETDATE(),1,GETDATE(),'','','Unable to Delete TransactionWiseGrnTracking',1,1
GO
DELETE FROM CustomCaptions WHERE TransId=2 AND CtrlId=1000 AND SubCtrlId=286
INSERT INTO CustomCaptions 
SELECT 2,1000,286,'MsgBox-2-1000-286','','','Unable to Edit PurchaseReceiptProduct',1,1,1,GETDATE(),1,GETDATE(),'','','Unable to Edit PurchaseReceiptProduct',1,1
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Proc_InvoiceWiseGrnTrack' AND XTYPE='P')
DROP PROCEDURE Proc_InvoiceWiseGrnTrack
GO
/*
--exec Proc_InvoiceWiseGrnTrack 3,3,1,1,778,'SLR17000778'
 SELECT * FROM BilledPrdGRNTrack(nolock)
*/
CREATE PROCEDURE Proc_InvoiceWiseGrnTrack
(
	 @Pi_TransId	 INT,
	 @Pi_CalledFrom  INT,        
	 @Pi_UserId		 INT,
	 @Pi_LcnId		 INT,
	 @Pi_RefId		 INT,
	 @Pi_RefNo		 NVARCHAR(50)
)
AS
/************************
* PROCEDURE		: Proc_InvoiceWiseGrnTrack
* PURPOSE		: GST Changes To Track Product wise GRN Details
* CREATED		: Karthick
* CREATED DATE	: 2017-04-12
* MODIFIED
* DATE      AUTHOR     DESCRIPTION

***************************/
BEGIN
	DECLARE @MinRowid AS INT
	DECLARE @MaxRowid AS INT
 	DECLARE @Prdid AS INT
	DECLARE @PrdBatid AS INT
	DECLARE @BilledQty AS INT 
	DECLARE @MinSlno AS INT
	DECLARE @MaxSlno AS INT
	DECLARE @PurRcptId AS INT
	DECLARE @PurRcptRefNo AS VARCHAR(50)
	DECLARE @GrnQty AS INT
	DECLARE @RemainingQty AS INT
	DECLARE @GrnDate AS DATETIME
	DECLARE @PrdSlNo AS INT
	DECLARE @RefId AS INT 
	
	CREATE TABLE #GRNDETAILS
	(
		PurRcptId			INT,
		PurRcptRefNo		VARCHAR(50),
		PurRcptDate			DATETIME,
		PrdSlNo				INT,
		GrnQty				INT,
		Slno				INT	
	)

	CREATE TABLE #AdjustedPurchase
	(
		PurRcptId			INT,
		PurRcptRefNo		VARCHAR(50),
		PurRcptDate			DATETIME,
		Prdid				INT,
		Prdbatid			INT,
		PrdSlNo				INT,
		GrnQty				INT,
		LcnId				INT
	)
	
	CREATE TABLE #BilledDetails
	(
		Refid		INT,
		Prdid		INT,
		PrdBatId	INT,
		BaseQty		INT,
		RowId		INT
	)

 
/*
	CalledFrom-2 Billing
	CalledFrom-38 StockJournal
	CalledFrom-3 Sales Return
*/

	
	DELETE FROM BilledPrdGRNTrack WHERE UsrId = @Pi_UserId AND TransId = @Pi_TransId  
	
	IF @Pi_TransId=2
	BEGIN	
		INSERT INTO #BilledDetails
		SELECT 0,PrdId,PrdBatId,BaseQty,SlNo FROM Salesinvoiceproduct(NOLOCK) WHERE SalId=@Pi_RefId
			
		SELECT @MinRowid=MIN(ISNULL(RowId,0)) FROM #BilledDetails 
		SELECT @MaxRowid=MAX(ISNULL(RowId,0)) FROM #BilledDetails 
	END

	IF @Pi_TransId=3
	BEGIN		
		INSERT INTO #BilledDetails
		SELECT RP.salid,PrdId,PrdBatId,BaseQty,Slno 
		FROM Returnheader RH(NOLOCK) INNER JOIN Returnproduct RP(NOLOCK) ON RH.returnid=RP.returnid
		WHERE BillRef=1 AND ReturnCode=@Pi_RefNo
		
		SELECT @MinRowid=MIN(ISNULL(RowId,0)) FROM #BilledDetails
		SELECT @MaxRowid=MAX(ISNULL(RowId,0)) FROM #BilledDetails		
	END

	IF @Pi_TransId=38
	BEGIN		
		INSERT INTO #BilledDetails
		SELECT 0,Prdid,Prdbatid,StkTransferQty,ROW_NUMBER() OVER(ORDER BY Prdid) 
		FROM StockJournal S(NOLOCK) INNER JOIN StockJournalDt SD(NOLOCK)  ON S.StkJournalRefNo=SD.StkJournalRefNo
		WHERE s.StkJournalRefNo=@Pi_RefNo AND StockTypeId=1 
		
		SELECT @MinRowid=MIN(ISNULL(RowId,0)) FROM #BilledDetails
		SELECT @MaxRowid=MAX(ISNULL(RowId,0)) FROM #BilledDetails
	END
 
 --select * from #BilledDetails
	WHILE @MinRowid<=@MaxRowid
	BEGIN
	
		SELECT @Prdid=PrdId,@PrdBatid=PrdBatId,@BilledQty=BaseQty,@RefId=Refid FROM #BilledDetails WHERE RowId= @MinRowid
		
	IF (@Pi_TransId=2) OR (@Pi_TransId=38) 		
	BEGIN
		DELETE FROM #GRNDETAILS
		INSERT INTO #GRNDETAILS
		SELECT PurRcptId,PurRcptRefNo,InvDate,PrdSlNo,GrnQty,ROW_NUMBER() OVER(ORDER BY PurRcptId DESC) Slno
		FROM
		(
		SELECT PurRcptId,PurRcptRefNo,InvDate,PrdSlNo,SUM(GrnQty-AdjustedQty) AS GrnQty
		FROM
		(
			SELECT pr.PurRcptId,pr.PurRcptRefNo,RcvdGoodBaseQty AS GrnQty,0 AS AdjustedQty,PR.InvDate,PrdSlNo
			FROM PurchaseReceipt PR(NOLOCK) INNER JOIN PurchaseReceiptProduct PRP(NOLOCK) ON PR.PurRcptId=PRP.PurRcptId
			WHERE  PrdId=@Prdid and PrdBatId=@PrdBatid ANd Lcnid=@Pi_LcnId AND (RcvdGoodBaseQty-RetRcvdBaseQty-BilledSalQty)>0 --and CancelInvoice=0
			UNION
			SELECT PurRcptId,PurRcptRefNo,0 AS GrnQty,GrnQty AS AdjustedQty,PurRcptDate,PrdSlNo FROM #AdjustedPurchase WHERE Prdid=@Prdid AND Prdbatid=@PrdBatid 
			AND LcnId=@Pi_LcnId
			UNION
			SELECT PurRcptId,PurRcptRefNo,0 AS GrnQty,GrnQty AS AdjustedQty,PurRcptDate,PrdSlNo FROM BilledPrdGRNTrack WHERE Prdid=@Prdid AND Prdbatid=@PrdBatid 
			AND Lcnid=@Pi_LcnId	AND UsrId = @Pi_UserId 
		)A 
		GROUP BY PurRcptId,PurRcptRefNo,InvDate,PrdSlNo
		HAVING SUM(GrnQty-AdjustedQty)>0 
		)B
     END
     
	IF (@Pi_TransId=3) 		
	BEGIN
		DELETE FROM #GRNDETAILS
		INSERT INTO #GRNDETAILS 
		SELECT PurRcptId,PurRcptRefNo,InvDate,PrdSlNo,GrnQty,ROW_NUMBER() OVER(ORDER BY PurRcptId DESC) Slno
		FROM
		(
		SELECT PurRcptId,PurRcptRefNo,InvDate,PrdSlNo,SUM(GrnQty-AdjustedQty) AS GrnQty
		FROM
		(
			SELECT PurRcptId,T.PurRcptRefNo,GrnQty ,0 AS AdjustedQty,GrnDate AS InvDate,GrnPrdSlNo AS PrdSlNo
			FROM TransactionWiseGrnTracking T(NOLOCK) INNER JOIN PurchaseReceipt P(NOLOCK) ON T.PurRcptRefNo=P.PurRcptRefNo
			WHERE Prdid=@Prdid AND PrdBatid=@PrdBatid AND RefId=@RefId AND TRANSID=2
		)A 
		GROUP BY PurRcptId,PurRcptRefNo,InvDate,PrdSlNo
		HAVING SUM(GrnQty-AdjustedQty)>0 
		)B
     END
	--select * from 		#GRNDETAILS
		
		SELECT @MinSlno =MIN(Slno) FROM #GRNDETAILS
		SELECT @MaxSlno =MAX(Slno) FROM #GRNDETAILS
			
			SET @RemainingQty=@BilledQty
			
			WHILE @MinSlno<=@MaxSlno
			BEGIN
				SELECT @PurRcptId= PurRcptId,@PurRcptRefNo =PurRcptRefNo,@GrnQty=GrnQty,@GrnDate=PurRcptDate,@PrdSlNo=PrdSlNo 
						FROM #GRNDETAILS WHERE Slno=@MinSlno
			
				IF @RemainingQty>0
				 BEGIN
					 IF @GrnQty>=@RemainingQty
					 BEGIN
						INSERT INTO BilledPrdGRNTrack(RowId,Refid,RefNo,Lcnid,Prdid,PrdBatid,BaseQty,FreeQty,PurRcptId,PurRcptRefNo,PurRcptDate,PrdSlNo,GrnQty,FreeGrnQty,Usrid,Transid,CalledFrom)
						SELECT  @MinRowid,@Pi_RefId,@Pi_RefNo,@Pi_LcnId,@Prdid,@PrdBatid,@BilledQty,0,@PurRcptId,@PurRcptRefNo,@GrnDate,@PrdSlNo,@RemainingQty,0,@Pi_UserId,@Pi_TransId,@Pi_CalledFrom
						
						INSERT INTO #AdjustedPurchase
						SELECT @PurRcptId,@PurRcptRefNo,@GrnDate,@Prdid,@PrdBatid,@PrdSlNo,@RemainingQty,@Pi_LcnId
						
						BREAK 
					 END 
					 ELSE
					 BEGIN
						INSERT INTO BilledPrdGRNTrack(RowId,Refid,RefNo,Lcnid,Prdid,PrdBatid,BaseQty,FreeQty,PurRcptId,PurRcptRefNo,PurRcptDate,PrdSlNo,GrnQty,FreeGrnQty,Usrid,Transid,CalledFrom)
						SELECT  @MinRowid,@Pi_RefId,@Pi_RefNo,@Pi_LcnId,@Prdid,@PrdBatid,@BilledQty,0,@PurRcptId,@PurRcptRefNo,@GrnDate,@PrdSlNo,@GrnQty,0,@Pi_UserId,@Pi_TransId,@Pi_CalledFrom

						INSERT INTO #AdjustedPurchase
						SELECT @PurRcptId,@PurRcptRefNo,@GrnDate,@Prdid,@PrdBatid,@PrdSlNo,@GrnQty,@Pi_LcnId
						
						SET @RemainingQty=@RemainingQty-@GrnQty
					 END
				  END					
				
				SET @MinSlno=@MinSlno+1
			END
		
		SET @MinRowid=@MinRowid+1
	END	
 
END
GO
--SALES RETURN CHANGES
DELETE FROM CustomCaptions WHERE TransId=3 AND CtrlId=1000 AND SubCtrlId=56
INSERT INTO CustomCaptions 
SELECT 3,1000,56,'MsgBox-3-1000-56','','','Save Failed While Updating TransactionWiseGrnTracking',1,1,1,GETDATE(),1,GETDATE(),'','','Save Failed While Updating TransactionWiseGrnTracking',1,1
GO
--TILL HERE
--Stock Journal CHANGES
DELETE FROM CustomCaptions WHERE TransId=38 AND CtrlId=1000 AND SubCtrlId=23
INSERT INTO CustomCaptions 
SELECT 38,1000,23,'MsgBox-38-1000-23','','','Save Failed While Updating TransactionWiseGrnTracking',1,1,1,GETDATE(),1,GETDATE(),'','','Save Failed While Updating TransactionWiseGrnTracking',1,1
GO
--TILL HERE
IF NOT EXISTS(SELECT * FROM Menudef WHERE MenuId='mStk33')
BEGIN
	DELETE FROM Menudef WHERE MenuId='mStk33'
	INSERT INTO Menudef
	SELECT MAX(SRLNO)+1,'mStk33','mnuStateMaster','mStk','State Master',0,'frmStateMaster','State Master' FROM MENUDEF 
END
GO
DELETE FROM ProfileDt WHERE MenuId='mStk33'
INSERT INTO ProfileDt 
SELECT prfid,'mStk33',5,'Exit',1,1,1,GETDATE(),1,GETDATE() FROM PROFILEHD 
GO
DELETE FROM ScreenDefaultValues WHERE TRANSID=500
INSERT INTO ScreenDefaultValues
SELECT 500,1,0,'State Code',1,1,1,1,GETDATE(),1,getdate(),'State Code' UNION
SELECT 500,1,1,'State Name',2,1,1,1,GETDATE(),1,getdate(),'State Name'
GO
DELETE FROM customcaptions WHERE TRANSID=500
INSERT INTO customcaptions 
SELECT 500,1,1,'DgCommon-500-1-1','State Code','','',1,1,1,GETDATE(),1,GETDATE(),'State Code','','',1,1 UNION
SELECT 500,1,2,'DgCommon-500-1-2','State Name','','',1,1,1,GETDATE(),1,GETDATE(),'State Name','','',1,1 UNION
SELECT 500,1,3,'DgCommon-500-1-3','State Type','','',1,1,1,GETDATE(),1,GETDATE(),'State Type','','',1,1 UNION
SELECT 500,2,1,'CoreHeaderTool','State Master','','',1,1,1,GETDATE(),1,GETDATE(),'State Master','','',1,1 UNION
SELECT 500,2,2,'CoreHeaderTool','Stocky','','',1,1,1,GETDATE(),1,GETDATE(),'Stocky','','',1,1 UNION
SELECT 500,1000,1,'PnlMsg-500-1000-1','','Select the Sort Field','',1,1,1,GETDATE(),1,GETDATE(),'','Select the Sort Field','',1,1 UNION
SELECT 500,1000,2,'PnlMsg-500-1000-2','','Enter Search Text','',1,1,1,GETDATE(),1,GETDATE(),'','Enter Search Text','',1,1
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE name='Fn_ReturnStateMasterDetails' AND XTYPE='TF')
DROP FUNCTION Fn_ReturnStateMasterDetails
GO
--SELECT DISTINCT * FROM Dbo.Fn_ReturnStateMasterDetails(-1)
CREATE FUNCTION Fn_ReturnStateMasterDetails (@Pi_SearchField AS INT)
RETURNS @StateMasterDetails TABLE
(
    [StateCode] NVARCHAR(100),
	[StateName] NVARCHAR(100),
	[TinFirst2Digit] VARCHAR(10),
	[Statetype] NVARCHAR(50)
)
AS
/***********************************************
* FUNCTION: Fn_ReturnStateMasterDetails
* PURPOSE: Return StateMaster Details
* NOTES:
* CREATED: Karthick
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
*
************************************************/
BEGIN
	INSERT INTO @StateMasterDetails(StateCode,StateName,TinFirst2Digit,Statetype)
    SELECT StateCode,StateName,TinFirst2Digit,StateType
	FROM STATEMASTER P WITH (NOLOCK)  
 	ORDER BY (CASE @Pi_SearchField WHEN 0 THEN StateCode WHEN 1 THEN StateName  END)
RETURN 
END
GO
--GCA4.19 TILL HERE
--GCA4.20 Service Master
IF NOT EXISTS(SELECT * FROM Menudef WHERE MenuId='mFin12')
BEGIN
	DELETE FROM Menudef WHERE MenuId='mFin12'
	INSERT INTO Menudef
	SELECT MAX(SRLNO)+1,'mFin12','mnuServiceMaster','mFin','Service Master',0,'frmServiceMaster','Service Master' FROM MENUDEF 
END
GO
DELETE FROM customcaptions WHERE TRANSID=501
INSERT INTO customcaptions 
SELECT 501,1,0,'lblServiceCode','Service Code*','','',1,1,1,GETDATE(),1,GETDATE(),'Service Code*','','',1,1 UNION
SELECT 501,2,0,'lblServiceName','Service Name*','','',1,1,1,GETDATE(),1,GETDATE(),'Service Name*','','',1,1  UNION
SELECT 501,3,0,'lblServiceAcCode','Service Ac Code*','','',1,1,1,GETDATE(),1,GETDATE(),'Service Ac Code*','','',1,1 UNION 
SELECT 501,4,0,'lblServiceAcName','Service Ac Name*','','',1,1,1,GETDATE(),1,GETDATE(),'Service Ac Name*','','',1,1 UNION 
SELECT 501,5,0,'lblTaxgroupCode','Tax Group Code*','','',1,1,1,GETDATE(),1,GETDATE(),'Tax Group Code*','','',1,1 UNION 
SELECT 501,6,0,'fxtServiceCode','','Enter Service Code','',1,1,1,GETDATE(),1,GETDATE(),'','Enter Service Code','',1,1 UNION
SELECT 501,7,0,'fxtServiceName','','Enter Service Name','',1,1,1,GETDATE(),1,GETDATE(),'','Enter Service Name','',1,1 UNION
SELECT 501,8,0,'fxtServiceAcCode','','Enter Service Account Code','',1,1,1,GETDATE(),1,GETDATE(),'','Enter Service Account Code','',1,1 UNION
SELECT 501,9,0,'fxtServiceAcName','','Enter Service Account Name','',1,1,1,GETDATE(),1,GETDATE(),'','Enter Service Account Name','',1,1 UNION
SELECT 501,10,0,'fxtTaxGroupCode','','Enter Tax Group Code','',1,1,1,GETDATE(),1,GETDATE(),'','Enter Tax Group Code','',1,1 UNION
SELECT 501,11,0,'btnOperation','&New','','',1,1,1,GETDATE(),1,GETDATE(),'&New','','',1,1 UNION
SELECT 501,11,1,'btnOperation','&Edit','','',1,1,1,GETDATE(),1,GETDATE(),'&Edit','','',1,1 UNION
SELECT 501,11,2,'btnOperation','&Save','','',1,1,1,GETDATE(),1,GETDATE(),'&Save','','',1,1 UNION
SELECT 501,11,3,'btnOperation','&Delete','','',1,1,1,GETDATE(),1,GETDATE(),'&Delete','','',1,1 UNION
SELECT 501,11,4,'btnOperation','&Cancel','','',1,1,1,GETDATE(),1,GETDATE(),'&Cancel','','',1,1 UNION
SELECT 501,11,5,'btnOperation','E&xit','','',1,1,1,GETDATE(),1,GETDATE(),'E&xit','','',1,1 UNION
SELECT 501,11,6,'btnOperation','&Print','','',1,1,1,GETDATE(),1,GETDATE(),'&Print','','',1,1 UNION
SELECT 501,12,1,'DgCommon-501-23-1','Service Code','','',1,1,1,GETDATE(),1,GETDATE(),'Service Code','','',1,1 UNION
SELECT 501,12,2,'DgCommon-501-23-2','Service Name','','',1,1,1,GETDATE(),1,GETDATE(),'Service Name','','',1,1 UNION
SELECT 501,12,3,'DgCommon-501-23-3','Service Ac Code','','',1,1,1,GETDATE(),1,GETDATE(),'Service Ac Code','','',1,1 UNION
SELECT 501,12,4,'DgCommon-501-23-4','Service Ac Name','','',1,1,1,GETDATE(),1,GETDATE(),'Service Ac Name','','',1,1 UNION
SELECT 501,12,5,'DgCommon-501-23-5','Tax Group Code','','',1,1,1,GETDATE(),1,GETDATE(),'Tax Group Code','','',1,1UNION
SELECT 501,12,6,'DgCommon-501-23-6','Status','','',1,1,1,GETDATE(),1,GETDATE(),'Status','','',1,1 UNION
SELECT 501,13,1,'CoreHeaderTool','Service Master','','',1,1,1,GETDATE(),1,GETDATE(),'Service Master','','',1,1 UNION
SELECT 501,13,2,'CoreHeaderTool','Stocky','','',1,1,1,GETDATE(),1,GETDATE(),'Stocky','','',1,1 UNION
SELECT 501,1000,1,'MsgBox-501-1000-1','','','Default record Cannot edit',1,1,1,GETDATE(),1,GETDATE(),'','','Default record Cannot edit',1,1 UNION
SELECT 501,1000,2,'MsgBox-501-1000-2','','','Failed to Lock Record',1,1,1,GETDATE(),1,GETDATE(),'','','Failed to Lock Record',1,1 UNION
SELECT 501,1000,3,'MsgBox-501-1000-3','','','Cannot Delete Transaction Exists',1,1,1,GETDATE(),1,GETDATE(),'','','Cannot Delete Transaction Exists',1,1 UNION
SELECT 501,1000,4,'MsgBox-501-1000-4','','','Code Already Exists',1,1,1,GETDATE(),1,GETDATE(),'','','Code Already Exists',1,1 UNION
SELECT 501,1000,5,'MsgBox-501-1000-3','','','Description Already Exists',1,1,1,GETDATE(),1,GETDATE(),'','','Description Already Exists',1,1 UNION
SELECT 501,2000,1,'HotSch-501-2000-1','Service TaxGroup Code','','',1,1,1,GETDATE(),1,GETDATE(),'Service TaxGroup Code','','',1,1 
GO
DELETE FROM ProfileDt WHERE MenuId='mFin12'
INSERT INTO ProfileDt 
SELECT prfid,'mFin12',0,'New',0,1,1,GETDATE(),1,GETDATE() FROM PROFILEHD UNION
SELECT prfid,'mFin12',1,'Edit',0,1,1,GETDATE(),1,GETDATE() FROM PROFILEHD UNION
SELECT prfid,'mFin12',2,'Save',1,1,1,GETDATE(),1,GETDATE() FROM PROFILEHD UNION
SELECT prfid,'mFin12',3,'Delete',1,1,1,GETDATE(),1,GETDATE() FROM PROFILEHD UNION
SELECT prfid,'mFin12',6,'Print',1,1,1,GETDATE(),1,GETDATE() FROM PROFILEHD
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE name='Fn_ReturnServiceMasterDetails' AND XTYPE='TF')
DROP FUNCTION Fn_ReturnServiceMasterDetails
GO
--SELECT DISTINCT * FROM Dbo.Fn_ReturnServiceMasterDetails()
CREATE FUNCTION Fn_ReturnServiceMasterDetails ( )
RETURNS @ServiceMasterDetails TABLE
(
	ServiceId	 INT,
	SerCode		 VARCHAR(50),
	SerName		 VARCHAR(100),
	SerACCode	 VARCHAR(50),
	SerACName	 VARCHAR(100),
	TaxGroupId	 INT,
	TaxGroupCode VARCHAR(100),
	SerStatus	INT,
	StatusName VARCHAR(100)
)
AS
/***********************************************
* FUNCTION: Fn_ReturnStateMasterDetails
* PURPOSE: Return StateMaster Details
* NOTES:
* CREATED: Karthick
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
*
************************************************/
BEGIN
	INSERT INTO @ServiceMasterDetails 
    SELECT ServiceId,SerCode,SerName,SerACCode,SerACName,TaxGroupId,'Service Tax',SerStatus,
    CASE WHEN SerStatus=1  THEN 'Active' ELSE 'InActive' END
    FROM servicemaster P  (NOLOCK)  
    ORDER BY ServiceId
 RETURN 
END
GO
DELETE FROM HOTSEARCHEDITORHd WHERE FORMID=7000
INSERT INTO HOTSEARCHEDITORHd 
SELECT 7000,'Service Master','TaxGroupCode','Select','Select ServiceGroupId,ServiceGroupCode from ServiceTaxGroupMaster'
GO
DELETE FROM HOTSEARCHEDITORDT WHERE FORMID=7000
INSERT INTO HOTSEARCHEDITORDT 
SELECT 1,7000,'TaxGroupCode','ServiceGroupCode','ServiceGroupCode',3000,0,'HotSch-501-2000-1',501
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE name='ServiceTaxGroupSetting' AND XTYPE='U')
CREATE TABLE ServiceTaxGroupSetting
(
	ServiceTaxSeqid		INT ,
	ServiceGroupId		INT,
	TaxId				[Int],--TaxConfiguration Table Taxid
	ServiceTaxCode		VARCHAR(50),
	ServiceTaxPer		NUMERIC(18,2),
	StateType			VARCHAR(100),
	StateId				INT,
	Availability		TINYINT,
	LastModBy			TINYINT,
	LastModDate			DATETIME,
	AuthId				TINYINT,
	AuthDate			DATETIME,
	PRIMARY KEY (ServiceTaxSeqid,ServiceGroupId,TaxId),
	FOREIGN KEY(ServiceGroupId) REFERENCES ServiceTaxGroupMaster(ServiceGroupId) 
)
GO
IF NOT EXISTS(SELECT * FROM Counters WHERE TABNAME='ServiceTaxGroupMaster')
BEGIN
	INSERT INTO Counters
	SELECT 'ServiceTaxGroupMaster','ServiceGroupId','',0,1,0,'Service TaxGroup',0,2017,1,1,GETDATE(),1,GETDATE()
END
GO
IF NOT EXISTS(SELECT * FROM Counters WHERE TABNAME='ServiceTaxGroupSetting')
BEGIN
	INSERT INTO Counters
	SELECT 'ServiceTaxGroupSetting','ServiceTaxSeqid','',0,1,0,'Service TaxGroup',0,2017,1,1,GETDATE(),1,GETDATE()
END
GO
IF EXISTS(SELECT NAME FROM Sysobjects WHERE XTYPE='U' and NAME='Cn2Cs_Prk_ServiceTaxSetting')
DROP TABLE Cn2Cs_Prk_ServiceTaxSetting
GO
CREATE TABLE Cn2Cs_Prk_ServiceTaxSetting
(
	DistCode			[nvarchar](50) NULL,
	ServiceTaxGroupCode	[VARCHAR](100),		
	ServiceTaxCode		[VARCHAR](100),--SGST/CGST/CESS
	ServiceTaxPer		[NUMERIC](18,2),--
	StateType			[VARCHAR](50),
	StateCode			[VARCHAR](50),
	DownLoadFlag		[varchar](10) NULL,
	CreatedDate			[datetime] NULL
)
GO
IF EXISTS(SELECT NAME FROM Sysobjects WHERE XTYPE='P' and NAME='Proc_Import_ServiceTaxSetting')
DROP PROCEDURE Proc_Import_ServiceTaxSetting
GO
CREATE PROCEDURE Proc_Import_ServiceTaxSetting
(
	@Pi_Records TEXT
)
AS
/*********************************
* PROCEDURE		: Proc_Import_ServiceTaxSetting
* PURPOSE		: To Insert records from xml file in the Table Cn2Cs_Prk_ServiceTaxSetting
* CREATED		: Karthik
* CREATED DATE	: 10-04-2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
SET NOCOUNT ON
BEGIN
	DECLARE @hDoc INTEGER
	
	EXEC sp_xml_preparedocument @hDoc OUTPUT,@Pi_Records
	INSERT INTO Cn2Cs_Prk_ServiceTaxSetting(		
		DistCode,
		ServiceTaxGroupCode,
		ServiceTaxCode,
		ServiceTaxPer,
		StateType,
		StateCode,
		DownLoadFlag,
		CreatedDate
	)
	SELECT DistCode,
		ServiceTaxGroupCode,
		ServiceTaxCode,
		ServiceTaxPer,
		StateType,
		StateCode,
		ISNULL(DownLoadFlag,'D'),
		GETDATE()
	FROM OPENXML (@hdoc,'/Root/Console2CS_ServiceTaxSetting',1)
	WITH
	(
		DistCode			[nvarchar](50),
		ServiceTaxGroupCode	[VARCHAR](100),		
		ServiceTaxCode		[VARCHAR](100),--SGST/CGST/CESS
		ServiceTaxPer		[NUMERIC](18,2),--
		StateType			[VARCHAR](50),
		StateCode			[VARCHAR](50),
		DownLoadFlag	[nvarchar](100)
	) XMLObj
	EXEC sp_xml_removedocument @hDoc
END
GO
IF EXISTS(SELECT NAME FROM Sysobjects WHERE XTYPE='P' and NAME='Proc_Cn2Cs_Prk_ServiceTaxSetting')
DROP PROCEDURE Proc_Cn2Cs_Prk_ServiceTaxSetting
GO
--exec Proc_Cn2Cs_Prk_ServiceTaxSetting 0
CREATE PROCEDURE Proc_Cn2Cs_Prk_ServiceTaxSetting
(
	@Po_ErrNo INT OUTPUT
)
AS
/*******************************************************
* PROCEDURE		: Proc_Cn2Cs_Prk_ServiceTaxSetting
* PURPOSE		: To validate the downloaded ServiceTaxSetting
* CREATED BY	: Karthick KJ
* CREATED DATE	: 2017/04/27
* NOTE			:
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
-------------------------------------------------------
* {date} {developer}  {brief modification description}
	
*******************************************************/
SET NOCOUNT ON
BEGIN
	DECLARE @Tabname AS VARCHAR(100)
	DECLARE @ServiceTaxGroupCode AS VARCHAR(100)
	DECLARE @ServiceGroupId AS INT
	DECLARE @ServiceTaxSeqid AS INT
	
	SET @Po_ErrNo=0
	SET @Tabname='Cn2Cs_Prk_ServiceTaxSetting'
	
	DELETE FROM Cn2Cs_Prk_ServiceTaxSetting WHERE DownLoadFlag='Y'
	
	CREATE TABLE #Avoid 
	( 
		ServiceTaxGroupCode varchar(100)
	)
	
	SELECT DISTINCT ServiceTaxGroupCode,ServiceTaxCode,ServiceTaxPer,StateType,StateCode,DownLoadFlag INTO #Cn2Cs_Prk_ServiceTaxSetting
	FROM Cn2Cs_Prk_ServiceTaxSetting WHERE DownLoadFlag='D'
	
	INSERT INTO #Avoid
	SELECT DISTINCT ServiceTaxGroupCode FROM #Cn2Cs_Prk_ServiceTaxSetting(NOLOCK) WHERE DownLoadFlag='D' AND ISNULL(ServiceTaxGroupCode,'')='' UNION
	SELECT DISTINCT ServiceTaxGroupCode FROM #Cn2Cs_Prk_ServiceTaxSetting(NOLOCK) WHERE DownLoadFlag='D' AND StateCode NOT IN (SELECT StateCode FROM StateMaster(NOLOCK)) UNION
	SELECT DISTINCT ServiceTaxGroupCode FROM #Cn2Cs_Prk_ServiceTaxSetting(NOLOCK) WHERE DownLoadFlag='D' AND  ServiceTaxCode NOT IN (SELECT TaxCode FROM TaxConfiguration(NOLOCK)) UNION
	SELECT DISTINCT ServiceTaxGroupCode FROM #Cn2Cs_Prk_ServiceTaxSetting(NOLOCK) WHERE DownLoadFlag='D' GROUP BY ServiceTaxGroupCode HAVING SUM(ServiceTaxPer)=0 UNION
	SELECT DISTINCT ServiceTaxGroupCode FROM #Cn2Cs_Prk_ServiceTaxSetting(NOLOCK) WHERE DownLoadFlag='D' AND ISNULL(StateType,'')=''  UNION
	SELECT DISTINCT ServiceTaxGroupCode FROM #Cn2Cs_Prk_ServiceTaxSetting(NOLOCK) WHERE DownLoadFlag='D' AND UPPER(StateType) NOT IN ('STATE','INTERSTATE','UT')
	
	INSERT INTO Errorlog 
	SELECT 1,@Tabname,'ServiceTaxGroupCode','Service Tax Group Codee Does not Exists' FROM #Cn2Cs_Prk_ServiceTaxSetting(NOLOCK) WHERE DownLoadFlag='D' AND ISNULL(ServiceTaxGroupCode,'')='' UNION
	SELECT 2,@Tabname,'StateCode','State Code Does not Exists' FROM #Cn2Cs_Prk_ServiceTaxSetting(NOLOCK) WHERE DownLoadFlag='D' AND StateCode NOT IN (SELECT StateCode FROM StateMaster(NOLOCK))	UNION
	SELECT 3,@Tabname,'ServiceTaxCode','ServiceTaxCode Does not Exists' FROM #Cn2Cs_Prk_ServiceTaxSetting(NOLOCK) WHERE DownLoadFlag='D' AND  ServiceTaxCode NOT IN (SELECT TaxCode FROM TaxConfiguration(NOLOCK)) UNION
	SELECT 4,@Tabname,'ServiceTaxPer','ServiceTaxPer Cannot be Zero' FROM #Cn2Cs_Prk_ServiceTaxSetting(NOLOCK) WHERE DownLoadFlag='D' GROUP BY ServiceTaxGroupCode HAVING SUM(ServiceTaxPer)=0 UNION
	SELECT 5,@Tabname,'StateType','StateType Cannot be NULL' FROM #Cn2Cs_Prk_ServiceTaxSetting(NOLOCK) WHERE DownLoadFlag='D' AND ISNULL(StateType,'')='' UNION
	SELECT 6,@Tabname,'StateType','StateType Not in Proper Format' FROM #Cn2Cs_Prk_ServiceTaxSetting(NOLOCK) WHERE DownLoadFlag='D' AND UPPER(StateType) NOT IN ('STATE','INTERSTATE','UT')
	
	SELECT @ServiceGroupId=Currvalue+1 FROM Counters WHERE TabName='ServiceTaxGroupMaster' AND FldName='ServiceGroupId'
	SELECT @ServiceTaxSeqid=Currvalue+1 FROM Counters WHERE TabName='ServiceTaxGroupSetting' AND FldName='ServiceTaxSeqid'
	
	DECLARE Cur_TaxSetting CURSOR	 
	FOR
	SELECT DISTINCT ServiceTaxGroupCode  FROM #Cn2Cs_Prk_ServiceTaxSetting(NOLOCK) WHERE DownLoadFlag='D' 
			AND  ServiceTaxGroupCode NOT IN (SELECT ServiceTaxGroupCode FROM #Avoid)
	OPEN Cur_TaxSetting
	FETCH NEXT FROM Cur_TaxSetting INTO @ServiceTaxGroupCode
	WHILE @@FETCH_STATUS=0
	BEGIN
		IF NOT EXISTS(SELECT * FROM ServiceTaxGroupMaster(NOLOCK) WHERE ServiceGroupCode=@ServiceTaxGroupCode)
		BEGIN
			INSERT INTO ServiceTaxGroupMaster
			SELECT @ServiceGroupId,@ServiceTaxGroupCode,1,1,GETDATE(),1,CONVERT(VARCHAR(10),GETDATE(),121)
		END
		ELSE
		BEGIN
			SELECT @ServiceGroupId=ServiceGroupId FROM ServiceTaxGroupMaster WHERE ServiceGroupCode=@ServiceTaxGroupCode
		END
		
		INSERT INTO ServiceTaxGroupSetting(ServiceTaxSeqid,ServiceGroupId,TaxId,ServiceTaxCode,ServiceTaxPer,StateType,StateId,Availability,LastModBy,LastModDate,AuthId,AuthDate) 
		SELECT @ServiceTaxSeqid,@ServiceGroupId,T.TaxId,ServiceTaxCode,ServiceTaxPer,S.StateType,StateId,1,1,GETDATE(),1,CONVERT(VARCHAR(10),GETDATE(),121)
		FROM #Cn2Cs_Prk_ServiceTaxSetting S(NOLOCK) INNER JOIN TaxConfiguration T(NOLOCK) ON S.ServiceTaxCode=T.TAXCODE 
		INNER JOIN StateMaster SM(NOLOCK) ON SM.StateCode=S.StateCode AND SM.StateType=s.StateType
		WHERE S.ServiceTaxGroupCode=@ServiceTaxGroupCode
		
			
		UPDATE C SET Currvalue=@ServiceGroupId  FROM Counters C(NOLOCK) WHERE TabName='ServiceTaxGroupMaster' AND FldName='ServiceGroupId'
		UPDATE C SET Currvalue=@ServiceTaxSeqid FROM Counters C(NOLOCK) WHERE TabName='ServiceTaxGroupSetting' AND FldName='ServiceTaxSeqid'
		
		UPDATE C SET DownLoadFlag='Y' FROM Cn2Cs_Prk_ServiceTaxSetting C(NOLOCK) WHERE ServiceTaxGroupCode=@ServiceTaxGroupCode
		
		SET @ServiceGroupId=@ServiceGroupId+1
		SET @ServiceTaxSeqid=@ServiceTaxSeqid+1
		
		FETCH NEXT FROM Cur_TaxSetting INTO @ServiceTaxGroupCode
	END
	CLOSE Cur_TaxSetting
	DEALLOCATE Cur_TaxSetting
	
 	RETURN
END
GO
--GCA4.20 Till here
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='P' AND name='Proc_DisplayTaxDetails')
DROP PROCEDURE Proc_DisplayTaxDetails
GO
--EXEC Proc_DisplayTaxDetails 1,0,185241,3,1,7,12,0,'0','0'
CREATE PROCEDURE [Proc_DisplayTaxDetails]
(
	@Pi_Mode		 INT,
	@Pi_TransType	 INT,
	@Pi_RefId		 INT,
	@Pi_TransId		 INT,
	@Pi_Usrid		 INT,
	@Pi_Rowid		 INT,
	@Pi_MaxRowId	 INT,
	@Pi_Exists		 INT OUTPUT,
	@Pi_rsTaxTotal   VARCHAR(3000) OUTPUT,
	@Pi_rsTaxSplit   VARCHAR(3000) OUTPUT
)
/*******************************************************
* PROCEDURE		: Proc_DisplayTaxDetails
* PURPOSE		: To Display Tax Details
* CREATED BY	: Karthick KJ
* CREATED DATE	: 2017/04/27
* NOTE			:
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
-------------------------------------------------------
* {date} {developer}  {brief modification description}
	
*******************************************************/
AS
BEGIN
/*
	Imode 1-New
		  2-Edit
	Transid 2 Billing/ Transtype -Dlvsts
	Transid 3 SalesReturn/Transtype-Status
	Transid 5 PurchaseReceipt/TransType-Status	
	Transid 7 PurchaseReturn/TransType-Status	  
*/
	SET @Pi_Exists=0
	SET @Pi_rsTaxTotal=''
	SET @Pi_rsTaxSplit=''
	
	IF @Pi_Mode=1 or @Pi_Mode=2 
	BEGIN
		IF EXiSTS(SELECT TaxName,TaxPercentage,TaxableAmount,TaxAmount  
			FROM BilledPrdDtCalculatedTax  A (NOLOCK) INNER JOIN TaxConfiguration B (NOLOCK) 
			ON A.TaxId=B.TaxId WHERE UsrId =@Pi_Usrid AND RowId =@Pi_Rowid AND TransId =@Pi_TransId and TaxableAmount>0 )
		BEGIN
			SET @Pi_Exists=1
			
				SET @Pi_rsTaxTotal='SELECT TaxName,TaxPercentage,TaxableAmount,TaxAmount 
				FROM BilledPrdDtCalculatedTax  A (NOLOCK) INNER JOIN TaxConfiguration B (NOLOCK)
				ON A.TaxId=B.TaxId WHERE UsrId ='+CAST(@Pi_Usrid AS VARCHAR(10))+' AND RowId ='+CAST(@Pi_Rowid AS VARCHAR(50))+' AND TransId ='+CAST(@Pi_TransId AS VARCHAR(50))+' and TaxableAmount>0'
				SET @Pi_rsTaxSplit=' SELECT TaxId,TaxName,TaxPercentage,TaxableAmount,TaxAmount
				FROM ( 
				SELECT B.TaxId,TaxName,TaxPercentage,SUM(TaxableAmount) as TaxableAmount,SUM(TaxAmount) as TaxAmount  
				  FROM BilledPrdDtCalculatedTax  A (NOLOCK) INNER JOIN TaxConfiguration B (NOLOCK) 
				 ON A.TaxId=B.TaxId 
				 INNER JOIN PRODUCTBATCH PB (NOLOCK) ON PB.Prdid=A.Prdid AND PB.Prdbatid=A.PrdBatid
				 WHERE UsrId ='+CAST(@Pi_Usrid AS VARCHAR(10))+'  AND TransId = '+CAST(@Pi_TransId AS VARCHAR(50))+' AND RowId <='+CAST(@Pi_MaxRowId AS VARCHAR(50))+'
				 GROUP BY B.TaxId,TaxName,TaxPercentage HAVING SUM(TaxableAmount)>0)A  ORDER BY TaxId'
			 
				
		END
	END
	
	IF @Pi_Mode=1 or @Pi_Mode=2 
	BEGIN
				IF @Pi_TransId=3
			
				
					IF EXISTS(SELECT 'X' FROM GSTConfiguration 
					WHERE ModuleId='GSTCONFIG' AND Description='GST Configuration' and ActivationStatus=1 AND AcknowledgeStatus=1 AND ConsoleAckStatus=1)
					BEGIN
						SET @Pi_Exists=1
						
						DECLARE @InvDate AS DATETIME
						DECLARE @ReturnDate AS DATETIME
						DECLARE @RtrId AS INT
						DECLARE @SalId BIGINT
						DECLARE @VatType AS Varchar(10)
						DECLARE @TaxApplicable AS INT
						
						SET @ReturnDate=CONVERT(DATETIME,CONVERT(Varchar(10),GETDATE(),121),121)
						
						SELECT @RtrId=B.RtrId,@InvDate=B.SalinvDate,@SalId=B.Salid
						FROM SalesInvoice B (NOLOCK) 			
						WHERE Salid=@Pi_RefId
						
						
						
						SELECT @VatType=TaxType,@TaxApplicable=TaxApplicable 
						FROM DBO.FN_CheckForSalesReturnTax_GST(@ReturnDate,@SalId ,@InvDate ,@RtrId)
									
						IF @VatType='VAT' and @TaxApplicable=1
						BEGIN							
							--SET @Pi_rsTaxTotal='SELECT TaxName,TaxPerc as  TaxPercentage,TaxableAmount,TaxAmount 
							--FROM SalesinvoiceProductTax  A (NOLOCK) INNER JOIN TaxConfiguration B (NOLOCK)ON A.TaxId=B.TaxId '+
							--' INNER JOIN TempReturnVatInvoiceSlno TR (NOLOCK) ON TR.Actrow=A.PrdSlNo and TR.Slno=A.PrdSlno  '+
							--' INNER JOIN BilledPrdHdForTax BP (NOLOCK) ON BP.PrdId=SP.PrdId and BP.PrdBatId=SP.PrdBatId and BP.RowId=SPT.PrdSlNo and BP.RowId=Sp.Slno'
							--' WHERE A.salid='+CAST(@SalId AS VARCHAR(50))+'  AND TaxableAmount>0 and   UsrId= '+CAST(@Pi_Usrid AS VARCHAR(50))
							--SET @Pi_rsTaxSplit=' SELECT TaxId,TaxName,TaxPercentage,TaxableAmount,TaxAmount
							--FROM ( 
							--SELECT T.TaxId,TaxName,TaxPerc as TaxPercentage,SUM(TaxableAmount) AS TaxableAmount,SUM(TaxAmount) as TaxAmount   
							--FROM SalesInvoiceProduct SIP(NOLOCK) 
							--INNER JOIN SalesinvoiceProductTax SIPT (NOLOCK) ON SIP.SalId=SIPT.salid AND SIP.slno=SIPT.PrdSlNo 
							--INNER JOIN ProductBatch PB(NOLOCK) ON PB.Prdid=SIP.Prdid AND PB.PrdBatid=SIP.PrdBatid
							--INNER JOIN TaxConfiguration T (NOLOCK) ON T.TaxId=SIPT.TaxId
							--INNER JOIN TempReturnVatInvoiceSlno TR (NOLOCK) ON TR.Slno=SIP.Slno and TR.Slno=SIPT.PrdSlNo
							--WHERE SIP.salid='+CAST(@SalId AS VARCHAR(50))+'   AND TaxableAmount>0 AND UsrId='+CAST(@Pi_Usrid AS VARCHAR(50))+' 	 
							--GROUP BY T.TaxId,TaxName,TaxPerc HAVING SUM(TaxableAmount)>0)A ORDER BY TaxId'
							
							
							SET @Pi_rsTaxTotal='SELECT DISTINCT TaxName,TaxPerc as  TaxPercentage,BP.BaseQty*(ISNULL(SPT.TaxableAmount/NULLIF(SP.BaseQty,0),0)) as TaxableAmount,
							CASE '+CAST(@TaxApplicable AS VARCHAR(50))+ ' WHEN 0 THEN 0 ELSE BP.BaseQty*(ISNULL(SPT.TaxAmount/NULLIF(SP.BaseQty,0),0)) END as TaxAmount
							FROM SalesInvoice S (NOLOCK) 
							INNER JOIN SalesInvoiceProduct SP (NOLOCK) ON S.Salid=SP.Salid
							INNER JOIN SalesInvoiceProductTax SPT (NOLOCK) ON S.Salid=SPT.Salid and SP.Salid=SPT.Salid and SP.SlNo=SPT.PrdSlNo
							INNER JOIN TaxConfiguration B (NOLOCK)ON SPT.TaxId=B.TaxId
							INNER JOIN BilledPrdHdForTax_GST BP (NOLOCK) ON BP.PrdId=SP.PrdId and BP.PrdBatId=SP.PrdBatId and BP.SalRowId=SPT.PrdSlNo and BP.SalRowId=Sp.Slno
							WHERE SP.SalId='+CAST(@SalId AS VARCHAR(50))+ ' and BP.RowId='+CAST(@Pi_Rowid AS VARCHAR(50))+' and SPT.TaxableAmount>0
							 AND BP.UsrId= '+CAST(@Pi_Usrid AS VARCHAR(50))+' AND BP.TransId ='+CAST(@Pi_TransId AS VARCHAR(50))
							 
							SET @Pi_rsTaxSplit='SELECT TaxName,TaxPerc as  TaxPercentage,SUM(BP.BaseQty*(ISNULL(SPT.TaxableAmount/NULLIF(SP.BaseQty,0),0))) as TaxableAmount,
							CASE '+CAST(@TaxApplicable AS VARCHAR(50))+ ' WHEN 0 THEN 0 ELSE SUM(BP.BaseQty*(ISNULL(SPT.TaxAmount/NULLIF(SP.BaseQty,0),0))) END as TaxAmount
							FROM SalesInvoice S (NOLOCK) 
							INNER JOIN SalesInvoiceProduct SP (NOLOCK) ON S.Salid=SP.Salid
							INNER JOIN SalesInvoiceProductTax SPT (NOLOCK) ON S.Salid=SPT.Salid and SP.Salid=SPT.Salid and SP.SlNo=SPT.PrdSlNo
							INNER JOIN TaxConfiguration B (NOLOCK)ON SPT.TaxId=B.TaxId
							INNER JOIN BilledPrdHdForTax_GST BP (NOLOCK) ON BP.PrdId=SP.PrdId and BP.PrdBatId=SP.PrdBatId and BP.SalRowId=SPT.PrdSlNo and BP.SalRowId=Sp.Slno
							INNER JOIN TempReturnVatInvoiceSlno TV (NOLOCK) ON TV.Salid=S.SalId and TV.Salid=SP.SalId and TV.Salid=SPT.SalId and TV.Slno=SPT.PrdSlNo and TV.Slno=SP.SlNo and TV.Slno=BP.SalRowId
							and TV.UsrId=BP.UsrId and TV.SpreadRow=BP.RowId 
							 WHERE SP.SalId='+CAST(@SalId AS VARCHAR(50))+ ' and SPT.TaxableAmount>0
							 AND BP.UsrId= '+CAST(@Pi_Usrid AS VARCHAR(50))+'AND BP.TransId ='+CAST(@Pi_TransId AS VARCHAR(50))+'
							 GROUP BY B.TaxId,TaxName,TaxPerc HAVING SUM(TaxableAmount)>0 ORDER BY B.TaxId'
							 
							--SELECT DISTINCT TaxName,TaxPerc as  TaxPercentage,TaxableAmount,TaxAmount,
							--BP.BaseQty*(ISNULL(SPT.TaxableAmount/NULLIF(SP.BaseQty,0),0)) as TaxableAmount,CASE @iGSTApplyTax WHEN 0 THEN 0 ELSE BP.BaseQty*(ISNULL(SPT.TaxAmount/NULLIF(SP.BaseQty,0),0)) END as TaxAmount,
							--@Pi_UserId, @Pi_CalledFrom
							--FROM SalesInvoice S (NOLOCK) 
							--INNER JOIN SalesInvoiceProduct SP (NOLOCK) ON S.Salid=SP.Salid
							--INNER JOIN SalesInvoiceProductTax SPT (NOLOCK) ON S.Salid=SPT.Salid and SP.Salid=SPT.Salid and SP.SlNo=SPT.PrdSlNo
							--INNER JOIN TaxConfiguration B (NOLOCK)ON SPT.TaxId=B.TaxId
							--INNER JOIN TempReturnVatInvoiceSlno TR (NOLOCK) ON TR.Actrow=SPT.PrdSlNo and TR.Slno=SPT.PrdSlno
							--INNER JOIN BilledPrdHdForTax BP (NOLOCK) ON BP.PrdId=SP.PrdId and BP.PrdBatId=SP.PrdBatId and BP.RowId=SPT.PrdSlNo and BP.RowId=Sp.Slno
							--WHERE SP.SalId=@Salid and BP.TransId=@Pi_CalledFrom   and BP.Usrid=@Pi_UserId and BP.RowId=@RowId and SPT.TaxableAmount>0
							
							--SELECT * FROM BilledPrdHdForTax
							
						END		
					END
	END
	
	IF @Pi_Mode=0
	BEGIN
		IF @Pi_TransId=2 
		BEGIN
			SET @Pi_Exists=1
			
			SET @Pi_rsTaxTotal='SELECT  T.TaxName,SPT.TaxPerc as TaxPercentage,TaxableAmount AS TaxableAmount,TaxAmount AS TaxAmount   
			FROM SalesInvoiceProduct  SP(NOLOCK)  
			INNER JOIN SalesInvoiceProductTax  SPT(NOLOCK)  ON SP.Salid=SPT.Salid AND SPT.PrdSlno=SP.Slno
			INNER JOIN TaxConfiguration T(NOLOCK)  ON T.TaxId=SPT.TaxID
			WHERE  SP.SalId ='+CAST(@Pi_RefId AS VARCHAR(50))+' AND SP.Slno='+CAST(@Pi_Rowid AS VARCHAR(50))+' AND TaxableAmount>0' 
			SET @Pi_rsTaxSplit=' SELECT TaxId,TaxName,TaxPercentage,TaxableAmount,TaxAmount
			FROM ( 
			SELECT T.TaxId,TaxName,TaxPerc as TaxPercentage,SUM(TaxableAmount) AS TaxableAmount,SUM(TaxAmount) as TaxAmount   
			FROM SalesInvoiceProduct SIP(NOLOCK) 
			INNER JOIN SalesinvoiceProductTax SIPT (NOLOCK) ON SIP.SalId=SIPT.salid AND SIP.slno=SIPT.PrdSlNo 
			INNER JOIN ProductBatch PB(NOLOCK) ON PB.Prdid=SIP.Prdid AND PB.PrdBatid=SIP.PrdBatid
			INNER JOIN TaxConfiguration T (NOLOCK) ON T.TaxId=SIPT.TaxId 
			WHERE SIP.salid='+CAST(@Pi_RefId AS VARCHAR(50))+'   AND TaxableAmount>0	 
			GROUP BY T.TaxId,TaxName,TaxPerc HAVING SUM(TaxableAmount)>0)A ORDER BY TaxId'
		END 	
		IF @Pi_TransId=3
		BEGIN
			SET @Pi_Exists=1
			
			SET @Pi_rsTaxTotal='SELECT  T.TaxName,RPT.TaxPerc as TaxPercentage,TaxableAmt AS TaxableAmount,TaxAmt AS TaxAmount   
			FROM Returnproduct RP(NOLOCK)  
			INNER JOIN ReturnProductTax RPT(NOLOCK)  ON RPT.ReturnId=RP.ReturnID AND RPT.PrdSlno=RP.Slno
			INNER JOIN TaxConfiguration T(NOLOCK)  ON T.TaxId=RPT.TaxID
			WHERE  RP.ReturnID='+CAST(@Pi_RefId AS VARCHAR(50))+' AND RP.Slno='+CAST(@Pi_Rowid AS VARCHAR(50))+' AND TaxableAmt>0 ' 
			SET @Pi_rsTaxSplit=' SELECT TaxId,TaxName,TaxPercentage,TaxableAmount,TaxAmount
			FROM ( 
			SELECT T.TaxId,T.TaxName,RPT.TaxPerc as TaxPercentage,SUM(TaxableAmt) AS TaxableAmount,SUM(TaxAmt) as TaxAmount   
			FROM Returnproduct RP(NOLOCK)  
			INNER JOIN ReturnProductTax RPT(NOLOCK)  ON RPT.ReturnId=RP.ReturnID AND RPT.PrdSlno=RP.Slno
			INNER JOIN ProductBatch PB(NOLOCK) ON PB.Prdid=RP.Prdid AND PB.PrdBatid=RP.PrdBatid
			INNER JOIN TaxConfiguration T(NOLOCK)  ON T.TaxId=RPT.TaxID
			WHERE RP.ReturnID='+CAST(@Pi_RefId AS VARCHAR(50))+'   AND TaxableAmt>0	 
			GROUP BY T.TaxId,TaxName,TaxPerc HAVING SUM(TaxableAmt)>0)A ORDER BY TaxId'
		END 	
		IF @Pi_TransId=5
		BEGIN
			SET @Pi_Exists=1
			
			SET @Pi_rsTaxTotal='SELECT  T.TaxName,RPT.TaxPerc as TaxPercentage,RPT.TaxableAmount AS TaxableAmount,RPT.TaxAmount AS TaxAmount   
			FROM PurchaseReceiptProduct RP(NOLOCK)  
			INNER JOIN PurchaseReceiptProductTax RPT(NOLOCK)  ON RPT.PurRcptId=RP.PurRcptId AND RPT.PrdSlno=RP.PrdSlno
			INNER JOIN TaxConfiguration T(NOLOCK)  ON T.TaxId=RPT.TaxID
			WHERE  RP.PurRcptId='+CAST(@Pi_RefId AS VARCHAR(50))+' AND RP.PrdSlno='+CAST(@Pi_Rowid AS VARCHAR(50))+' AND TaxableAmount>0 ' 
			SET @Pi_rsTaxSplit=' SELECT TaxId,TaxName,TaxPercentage,TaxableAmount,TaxAmount
			FROM ( 
			SELECT  T.TaxId,T.TaxName,RPT.TaxPerc as TaxPercentage,SUM(RPT.TaxableAmount) AS TaxableAmount,SUM(RPT.TaxAmount) AS TaxAmount   
			FROM PurchaseReceiptProduct RP(NOLOCK)  
			INNER JOIN PurchaseReceiptProductTax RPT(NOLOCK)  ON RPT.PurRcptId=RP.PurRcptId AND RPT.PrdSlno=RP.PrdSlno
			INNER JOIN ProductBatch PB(NOLOCK) ON PB.Prdid=RP.Prdid AND PB.PrdBatid=RP.PrdBatid
			INNER JOIN TaxConfiguration T(NOLOCK)  ON T.TaxId=RPT.TaxID
			WHERE  RP.PurRcptId='+CAST(@Pi_RefId AS VARCHAR(50))+' AND TaxableAmount>0 
			GROUP BY T.TaxId,TaxName,TaxPerc HAVING SUM(TaxableAmount)>0)A ORDER BY TaxId'
		END 	
		IF @Pi_TransId=7
		BEGIN
			SET @Pi_Exists=1
			
			SET @Pi_rsTaxTotal='SELECT  T.TaxName,RPT.TaxPerc as TaxPercentage,RPT.TaxableAmount AS TaxableAmount,RPT.TaxAmount AS TaxAmount   
			FROM PurchaseReturnProduct RP(NOLOCK)  
			INNER JOIN PurchaseReturnProductTax RPT(NOLOCK)  ON RPT.PurRetId=RP.PurRetId AND RPT.PrdSlno=RP.PrdSlno
			INNER JOIN TaxConfiguration T(NOLOCK)  ON T.TaxId=RPT.TaxID
			WHERE  RP.PurRetId='+CAST(@Pi_RefId AS VARCHAR(50))+' AND RP.PrdSlno='+CAST(@Pi_Rowid AS VARCHAR(50))+' AND TaxableAmount>0 ' 
			SET @Pi_rsTaxSplit=' SELECT TaxId,TaxName,TaxPercentage,TaxableAmount,TaxAmount
			FROM ( 
			SELECT  T.TaxId,T.TaxName,RPT.TaxPerc as TaxPercentage,SUM(RPT.TaxableAmount) AS TaxableAmount,SUM(RPT.TaxAmount) AS TaxAmount   
			FROM PurchaseReturnProduct RP(NOLOCK)  
			INNER JOIN PurchaseReturnProductTax RPT(NOLOCK)  ON RPT.PurRetId=RP.PurRetId AND RPT.PrdSlno=RP.PrdSlno
			INNER JOIN ProductBatch PB(NOLOCK) ON PB.Prdid=RP.Prdid AND PB.PrdBatid=RP.PrdBatid
			INNER JOIN TaxConfiguration T(NOLOCK)  ON T.TaxId=RPT.TaxID
			
			WHERE  RP.PurRetId='+CAST(@Pi_RefId AS VARCHAR(50))+' AND TaxableAmount>0 
			GROUP BY T.TaxId,TaxName,TaxPerc HAVING SUM(TaxableAmount)>0)A ORDER BY TaxId'
		END 	
		
	END
		PRINT @Pi_rsTaxTotal
		PRINT @Pi_rsTaxSplit
	RETURN
END
GO
IF EXISTS(SELECT 'X' NAME FROM SYSOBJECTS WHERE Xtype='TF' and name='Fn_ReturnTaxError')
DROP FUNCTION Fn_ReturnTaxError
GO
--Select * from Fn_ReturnTaxError(272,69,1007,0,0,0,1)
CREATE FUNCTION [dbo].[Fn_ReturnTaxError](@TransId AS INT,@MasterId as INT, @RtrId AS INT,@Prdid AS INT,
@PrdbatId AS INT,@SpmId as INT,@RtrShipId AS INT)
RETURNS @ReturnTaxError TABLE
(
	ErrorMessage  Varchar(500)
)
AS
BEGIN
		DECLARE @DistState AS Varchar(100)
		DECLARE @SupState AS Varchar(100)
		DECLARE @SupIntra AS Varchar(100)
		DECLARE @SupInter AS Varchar(100)
		DECLARE @RtrState AS Varchar(100)
		DECLARE @RtrIntra AS Varchar(100)
		DECLARE @RtrInter AS Varchar(100)
		DECLARE @Enabled AS TINYINT
		DECLARE @RtrType AS VARCHAR(50)
		SET @Enabled=0
		
		IF EXISTS(SELECT 'X' FROM GSTConfiguration (NOLOCK)
		WHERE  ModuleId='GSTCONFIG' AND Description='GST Configuration' AND ActivationStatus=1 and AcknowledgeStatus=1 and ConsoleAckStatus=1 
		--AND CONVERT(DATETIME,CONVERT(VARCHAR(10),@Date,121),121)>=ActivationDate
		)
		BEGIN
			SET @Enabled=1
		END
		
		
		IF @MasterId=79 AND @TransId IN(2,25,3)--Retailer Master
		BEGIN
			---BOTH GST AND VAT TAX Validation
			IF EXISTS(Select 'X' FROM Retailer (NOLOCK) WHERE RtrId=@RtrId and TaxgroupId=0)
			BEGIN
					INSERT INTO @ReturnTaxError(ErrorMessage)
					SELECT 'Retailer tax group not attached for the retailer '+ RtrCode FROM Retailer (NOLOCK) WHERE RtrId=@RtrId 
					RETURN
			END
			
			IF @Enabled=1---GST Tax Validation
			BEGIN
			
				IF EXISTS(Select 'X' FROM Retailer  A(NOLOCK) 
				INNER JOIN RetailerShipAdd B (NOLOCK) ON A.RtrId=B.RtrId  
				WHERE A.RtrId=@RtrId AND B.RtrShipId=@RtrShipId and B.TaxgroupId=0)
				BEGIN
						INSERT INTO @ReturnTaxError(ErrorMessage)
						SELECT 'Retailer Shipping Address tax group not attached for the retailer '+ RtrCode FROM Retailer (NOLOCK) WHERE RtrId=@RtrId 
						RETURN
				END
				
				IF EXISTS(Select 'X' FROM Retailer  A(NOLOCK) 
				INNER JOIN RetailerShipAdd B (NOLOCK) ON A.RtrId=B.RtrId  
				WHERE A.RtrId=@RtrId AND B.RtrShipId=@RtrShipId and B.RtrShipDefaultAdd=1 and A.TaxGroupId<>B.TaxGroupId)
				BEGIN
						INSERT INTO @ReturnTaxError(ErrorMessage)
						SELECT 'Retailer Tax Group shuold be same for Default Shipping Address Tax Group for the retailer '+ RtrCode FROM Retailer (NOLOCK) 
						WHERE RtrId=@RtrId 
						RETURN
				END
				
				
				SELECT @RtrType=ColumnValue FROM UdcMaster U (NOLOCK) 
				INNER JOIN UdcDetails UD (NOLOCK) ON U.MasterId=UD.MasterId and U.UdcMasterId=UD.UdcMasterId
				INNER JOIN Retailer D (NOLOCK) ON D.RtrId=UD.MasterRecordId
				WHERE U.MasterId=2 and ColumnName='Retailer Type'   and D.RtrId=@RtrId
				IF LEN(LTRIM(RTRIM(ISNULL(@RtrType,''))))=0
				BEGIN
					INSERT INTO @ReturnTaxError(ErrorMessage)
					SELECT 'Please attach the Retailer Type in Retailer Master on UDC tab for the retailer code '+
					RtrCode FROM Retailer (NOLOCK) WHERE RtrId=@RtrId 
					
					RETURN
		        END
			
					SELECT @DistState=ColumnValue FROM UdcMaster U (NOLOCK) 
					INNER JOIN UdcDetails UD (NOLOCK) ON U.MasterId=UD.MasterId and U.UdcMasterId=UD.UdcMasterId
					INNER JOIN Distributor D (NOLOCK) ON D.DistributorId=UD.MasterRecordId
					INNER JOIN StateMaster S (NOLOCK) ON S.StateName=UD.ColumnValue
					WHERE U.MasterId=16 and ColumnName='State Name' 
					
					IF LEN(LTRIM(RTRIM(ISNULL(@DistState,''))))=0
					BEGIN
						INSERT INTO @ReturnTaxError(ErrorMessage)
						SELECT 'Please attach the state in Distributor on UDC tab'
						RETURN
					END
					
					
					SELECT @RtrState=ColumnValue FROM UdcMaster U (NOLOCK) 
					INNER JOIN UdcDetails UD (NOLOCK) ON U.MasterId=UD.MasterId and U.UdcMasterId=UD.UdcMasterId
					INNER JOIN Retailer D (NOLOCK) ON D.RtrId=UD.MasterRecordId
					INNER JOIN StateMaster S (NOLOCK) ON S.StateName=UD.ColumnValue
					WHERE U.MasterId=2 and ColumnName='State Name'   and D.RtrId=@RtrId
					
					IF LEN(LTRIM(RTRIM(ISNULL(@RtrState,''))))=0
					BEGIN
						INSERT INTO @ReturnTaxError(ErrorMessage)
						SELECT 'Please attach the state in Retailer Master on UDC tab for the retailer code '+
						RtrCode FROM Retailer (NOLOCK) WHERE RtrId=@RtrId 
						RETURN
					END
					
					---Distributor and Retailer in Same State
					IF UPPER(@DistState)=UPPER(@RtrState)
					BEGIN
						SELECT @RtrIntra=RtrGroup from TaxGroupSetting A (NOLOCK) 
						INNER JOIN Retailer B (NOLOCK) ON A.TaxGroupId=B.TaxGroupId
						WHERE RtrId=@RtrId
						IF UPPER(@RtrIntra)<>'RTRINTRA'
						BEGIN
							INSERT INTO @ReturnTaxError(ErrorMessage)
							SELECT 'Please attach Retailer intra tax group (RTRINTRA) in Retailer Master on UDC tab'
							RETURN
						END
					END
					---Distributor and Retailer in different State
					IF UPPER(@DistState)<>UPPER(@RtrState)
					BEGIN
						SELECT @RtrInter=RtrGroup from TaxGroupSetting A (NOLOCK) 
						INNER JOIN Retailer B (NOLOCK) ON A.TaxGroupId=B.TaxGroupId
						WHERE RtrId=@RtrId
						IF UPPER(@RtrInter)<>'RTRINTER'
						BEGIN
							INSERT INTO @ReturnTaxError(ErrorMessage)
							SELECT 'Please attach Retailer Inter tax group (RTRINTER) in Retailer Master on UDC Tab'
							RETURN
						END
					END	
					
					---Distributor and Retailer in Same State
					IF UPPER(@DistState)=UPPER(@RtrState)
					BEGIN
						SELECT @RtrIntra=RtrGroup from TaxGroupSetting A (NOLOCK) 
						INNER JOIN RetailerShipAdd B (NOLOCK) ON A.TaxGroupId=B.TaxGroupId
						WHERE RtrId=@RtrId and B.RtrShipId=@RtrShipId
						IF UPPER(@RtrIntra)<>'RTRINTRA'
						BEGIN
							INSERT INTO @ReturnTaxError(ErrorMessage)
							SELECT 'Please attach Retailer intra tax group (RTRINTRA) in Retailer Shipping'
							RETURN
						END
					END
					---Distributor and Retailer in different State
					IF UPPER(@DistState)<>UPPER(@RtrState)
					BEGIN
						SELECT @RtrInter=RtrGroup from TaxGroupSetting A (NOLOCK) 
						INNER JOIN RetailerShipAdd B (NOLOCK) ON A.TaxGroupId=B.TaxGroupId
						WHERE RtrId=@RtrId and B.RtrShipId=@RtrShipId
						IF UPPER(@RtrInter)<>'RTRINTER'
						BEGIN
							INSERT INTO @ReturnTaxError(ErrorMessage)
							SELECT 'Please attach Retailer intra tax group (RTRINTER) in Retailer Shipping'
							RETURN
						END
					END	
					
			END			
		END	
		--Billing,Salespanel,SalesReturn,Purchase,Purchase Return
		IF @TransId IN(2,25,3,5,7,272)--Product
		BEGIN
			IF EXISTS(Select 'X' FROM Product (NOLOCK) WHERE Prdid=@Prdid and TaxgroupId=0)
			BEGIN
					INSERT INTO @ReturnTaxError(ErrorMessage)
					SELECT 'Product tax group not attached for the product '+ PrdCCode FROM Product (NOLOCK) WHERE Prdid=@Prdid 
					RETURN
			END
		END	
		--Billing,Salespanel,SalesReturn,Purchase,Purchase Return
		IF @TransId IN(2,25,3,5,7,272)
		BEGIN
			IF EXISTS(Select 'X' FROM Productbatch (NOLOCK) WHERE PrdbatId=@PrdbatId and TaxgroupId=0)
			BEGIN
					INSERT INTO @ReturnTaxError(ErrorMessage)
					SELECT 'Product tax group not attached for the product batch '+ PrdBatCode +Space(2)+' for the product ' +  PrdCCode
					FROM Productbatch A (NOLOCK) INNER JOIN Product B (NOLOCK) ON A.PrdId=B.Prdid WHERE PrdbatId=@PrdbatId 
					RETURN
			END
		END	
		
		IF @MasterId=69 AND @TransId=272--Supplier	
		BEGIN
			IF EXISTS(Select 'X' FROM IDTMaster (NOLOCK) WHERE SpmId=@SpmId and TaxgroupId=0)
			BEGIN
					INSERT INTO @ReturnTaxError(ErrorMessage)
					SELECT 'IDT Distributor tax group not attached for the Distributor Code '+SpmCode FROM IDTMaster (NOLOCK) WHERE SpmId=@SpmId
					RETURN
			END
		END
		
		IF @MasterId=69 AND @TransId IN(5,7)--Supplier		
		BEGIN
		
			IF EXISTS(Select 'X' FROM Supplier (NOLOCK) WHERE SpmId=@SpmId and TaxgroupId=0)
			BEGIN
					INSERT INTO @ReturnTaxError(ErrorMessage)
					SELECT 'Supplier tax group not attached for the Supplier Code '+SpmCode FROM Supplier (NOLOCK) WHERE SpmId=@SpmId
					RETURN
			END
			IF @Enabled=1---GST Tax Validation
			BEGIN
				SELECT @DistState=ColumnValue FROM UdcMaster U (NOLOCK) 
				INNER JOIN UdcDetails UD (NOLOCK) ON U.MasterId=UD.MasterId and U.UdcMasterId=UD.UdcMasterId
				INNER JOIN Distributor D (NOLOCK) ON D.DistributorId=UD.MasterRecordId
				INNER JOIN StateMaster S (NOLOCK) ON S.StateName=UD.ColumnValue
				WHERE U.MasterId=16 and ColumnName='State Name' 
				
				IF LEN(LTRIM(RTRIM(ISNULL(@DistState,''))))=0
				BEGIN
					INSERT INTO @ReturnTaxError(ErrorMessage)
					SELECT 'Please attach the state in Distributor on UDC tab'
					RETURN
				END

				SELECT @SupState=ColumnValue FROM UdcMaster U (NOLOCK) 
				INNER JOIN UdcDetails UD (NOLOCK) ON U.MasterId=UD.MasterId and U.UdcMasterId=UD.UdcMasterId
				INNER JOIN Supplier D (NOLOCK) ON D.SpmId=UD.MasterRecordId
				INNER JOIN StateMaster S (NOLOCK) ON S.StateName=UD.ColumnValue
				WHERE U.MasterId=8 and ColumnName='State Name' and SpmId=@SpmId
				
				IF LEN(LTRIM(RTRIM(ISNULL(@SupState,''))))=0
				BEGIN
					INSERT INTO @ReturnTaxError(ErrorMessage)
					SELECT 'Please attach the state in Supplier Master on UDC tab'
					RETURN
				END
				---Distributor and supplier in Same State
				IF UPPER(@DistState)=UPPER(@SupState)
				BEGIN
					SELECT @SupIntra=RtrGroup from TaxGroupSetting A (NOLOCK) 
					INNER JOIN Supplier B (NOLOCK) ON A.TaxGroupId=B.TaxGroupId
					WHERE SpmId=@SpmId
					IF UPPER(@SupIntra)<>'SUPINTRA'
					BEGIN
						INSERT INTO @ReturnTaxError(ErrorMessage)
						SELECT 'Please attach supplier intra tax group (SUPINTRA) in Supplier Master'
						RETURN
					END
				END
				---Distributor and supplier in different State
				IF UPPER(@DistState)<>UPPER(@SupState)
				BEGIN
					SELECT @SupInter=RtrGroup from TaxGroupSetting A (NOLOCK) 
					INNER JOIN Supplier B (NOLOCK) ON A.TaxGroupId=B.TaxGroupId
					WHERE SpmId=@SpmId
					IF UPPER(@SupInter)<>'SUPINTER'
					BEGIN
						INSERT INTO @ReturnTaxError(ErrorMessage)
						SELECT 'Please attach supplier Inter tax group (SUPINTER) in Supplier Master'
						RETURN
					END
				END
			END
		END	
		
RETURN
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='FN_CheckForGstEnabled' AND XTYPE='FN')
DROP FUNCTION FN_CheckForGstEnabled
GO
CREATE FUNCTION FN_CheckForGstEnabled(@Date as DATETIME,@Type AS INT)
RETURNS INT
AS
/***********************************************
* FUNCTION: FN_CheckForGstEnabled
* PURPOSE: Return GstEnable Status
* NOTES:
* CREATED: Karthick 2017-04-24
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
*
************************************************/
BEGIN

DECLARE @Enabled AS INT

SET @Enabled=0

 IF @Type=1
 BEGIN
	IF EXISTS(SELECT 'X' FROM GSTConfiguration (NOLOCK)
	WHERE  ModuleId='GSTCONFIG' AND Description='GST Configuration' AND ActivationStatus=1 AND ConsoleAckStatus=0
				AND AcknowledgeStatus=1 AND CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121)>=ActivationDate)
		BEGIN
			 SET @Enabled=2
		END
  END
 
  IF @Type=2
 BEGIN
	IF EXISTS(SELECT 'X' FROM GSTConfiguration (NOLOCK)
	WHERE  ModuleId='GSTCONFIG' AND Description='GST Configuration' AND ActivationStatus=1 
				AND AcknowledgeStatus=0 AND ConsoleAckStatus=0 AND CONVERT(DATETIME,CONVERT(VARCHAR(10),@Date,121),121)>=ActivationDate)
		BEGIN
			IF EXISTS(SELECT 'X' FROM GSSTMonthEndDetails(NOLOCK) WHERE GSTConFirmation=0)
			BEGIN	
				SET @Enabled=2
			END 
		END
  END 

 IF @Type=3
 BEGIN
	IF EXISTS(SELECT 'X' FROM GSTConfiguration (NOLOCK)
	WHERE  ModuleId='GSTCONFIG' AND Description='GST Configuration' AND ActivationStatus=1 and AcknowledgeStatus=1 and ConsoleAckStatus=1 
	AND CONVERT(DATETIME,CONVERT(VARCHAR(10),@Date,121),121)>=ActivationDate)
	BEGIN
		SET @Enabled=1
	END
	
  END
  	
RETURN(@Enabled)	
END
GO
--drop table GSSTMonthEndDetails
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE name='GSSTMonthEndDetails' AND XTYPE='U')
CREATE TABLE GSSTMonthEndDetails
(
	Slno			Int,
	FromDate		DATETIME,
	ToDate			DATETIME,
	Process			VARCHAR(100),
	FromName		VARCHAR(100),	
	TransCount		INT,
	TStatus			INT,
	GSTConFirmation	INT,
	AuthDate		DATETIME		
)
GO
IF NOT EXISTS(SELECT 1 FROM GSSTMonthEndDetails(NOLOCK))
BEGIN
	INSERT INTO GSSTMonthEndDetails
	SELECT 1,CONVERT(VARCHAR(10),GETDATE(),121),CONVERT(VARCHAR(10),GETDATE(),121),'Vehicle Allocation','FrmGstVehicleAllocation',0,0,0,GETDATE() UNION
	SELECT 2,CONVERT(VARCHAR(10),GETDATE(),121),CONVERT(VARCHAR(10),GETDATE(),121),'Delivery Process','frmGstDeliveryProcessAuto',0,0,0,GETDATE()	UNION
	SELECT 3,CONVERT(VARCHAR(10),GETDATE(),121),CONVERT(VARCHAR(10),GETDATE(),121),'Purchase Receipt','frmGstPurchaseReceipt',0,0,0,GETDATE()	UNION
	SELECT 4,CONVERT(VARCHAR(10),GETDATE(),121),CONVERT(VARCHAR(10),GETDATE(),121),'Purchase Return','frmGstPurchaseReturn',0,0,0,GETDATE()	UNION
	SELECT 5,CONVERT(VARCHAR(10),GETDATE(),121),CONVERT(VARCHAR(10),GETDATE(),121),'Sales Return','frmGstSalesReturn',0,0,0,GETDATE() 
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_CheckForGstTransaction' AND XTYPE='P')
DROP PROCEDURE Proc_CheckForGstTransaction
GO
--exec Proc_CheckForGstTransaction 0
CREATE PROCEDURE Proc_CheckForGstTransaction
(
	@Po_Usrid INT,
	@Po_ErrNo INT OUTPUT
)
/*******************************************************
* PROCEDURE		: Proc_CheckForGstTransaction
* PURPOSE		: Check For Gst Transaction
* CREATED BY	: Karthick KJ
* CREATED DATE	: 2017/04/27
* NOTE			:
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
-------------------------------------------------------
* {date} {developer}  {brief modification description}
	
*******************************************************/
AS
SET NOCOUNT ON
BEGIN
	DECLARE @TransCount INT
	DECLARE @MinDate DATETIME
	DECLARE @MaxDate DATETIME

SET @TransCount=0
SET @Po_ErrNo=0

BEGIN TRY
 BEGIN TRANSACTION  
	UPDATE GSSTMonthEndDetails SET TransCount=0
	--Vehicle Allocation
	IF EXists(SELECT 1 FROM SalesInvoice SI (NOLOCK) INNER JOIN SalesInvoiceProduct SIP(NOLOCK) ON SI.SalId=SIP.SalId WHERE DLVSTS IN (1))
	BEGIN
		
		SELECT @TransCount=COUNT(salid),@MinDate=MIN(SalInvDate),@MaxDate=MAX(SalInvDate) 
		FROM
		(
		SELECT DISTINCT SI.SalId,SI.SalInvDate FROM SalesInvoice SI (NOLOCK) INNER JOIN SalesInvoiceProduct SIP(NOLOCK) ON SI.SalId=SIP.SalId 
		WHERE DLVSTS IN (1)
		)A
		
		UPDATE GSSTMonthEndDetails SET TransCount=@TransCount,FromDate=@MinDate,ToDate=@MaxDate WHERE Process='Vehicle Allocation'
		SET @TransCount=0
	END

	--Delivery Process
	IF EXists(SELECT 1 FROM SalesInvoice SI (NOLOCK) INNER JOIN SalesInvoiceProduct SIP(NOLOCK) ON SI.SalId=SIP.SalId WHERE DLVSTS IN (2))
	BEGIN
		SELECT @TransCount=COUNT(salid),@MinDate=MIN(SalInvDate),@MaxDate=MAX(SalInvDate) 
		FROM
		(
		SELECT DISTINCT SI.SalId,SI.SalInvDate FROM SalesInvoice SI (NOLOCK) INNER JOIN SalesInvoiceProduct SIP(NOLOCK) ON SI.SalId=SIP.SalId 
		WHERE DLVSTS IN (2)
		)A
				
		UPDATE GSSTMonthEndDetails SET TransCount=@TransCount,FromDate=@MinDate,ToDate=@MaxDate WHERE Process='Delivery Process'
		SET @TransCount=0
	END

	--Purchase Receipt
	IF EXists(SELECT 1 AS A FROM purchasereceipt(NOLOCK) WHERE STATUS=0 UNION SELECT 1 AS A from ETLTempPurchaseReceipt where DownLoadStatus = 0)
	BEGIN
		
		SELECT  @TransCount=COUNT(CmpInvNo),@MinDate=MIN(InvDate),@MaxDate=MAX(InvDate) FROM
		(
		SELECT CmpInvNo,InvDate FROM purchasereceipt (NOLOCK) WHERE STATUS=0 
		UNION
		SELECT ETL.CmpInvNo,ETL.InvDate
		FROM ETLTempPurchaseReceipt ETL(NOLOCK),Company Cmp(NOLOCK),Supplier Spm(NOLOCK),Location Lcn(NOLOCK),Transporter Trans (NOLOCK)
		WHERE ETL.CmpId=Cmp.CmpId AND ETL.SpmId=Spm.SpmId AND ETL.LcnId= Lcn.LcnId AND 
		ETL.TransporterId = Trans.TransporterId And ETL.DownLoadStatus = 0
		)A
				
		UPDATE GSSTMonthEndDetails SET TransCount=@TransCount,FromDate=@MinDate,ToDate=@MaxDate WHERE Process='Purchase Receipt'
		SET @TransCount=0
	END

	--Purchase Return
	IF EXists(SELECT 1 FROM PurchaseReturn(NOLOCK) WHERE STATUS=0)
	BEGIN
		SELECT @TransCount=COUNT(PurRetId),@MinDate=MIN(PurRetDate),@MaxDate=MAX(PurRetDate) FROM PurchaseReturn (NOLOCK) WHERE STATUS=0
		
		UPDATE GSSTMonthEndDetails SET TransCount=@TransCount,FromDate=@MinDate,ToDate=@MaxDate WHERE Process='Purchase Return'
		SET @TransCount=0
	END

	--Sales Return
	IF EXists(SELECT 1 FROM Returnheader(NOLOCK) WHERE STATUS=1 AND ReturnType=2)
	BEGIN
		SELECT @TransCount=COUNT(ReturnID),@MinDate=MIN(ReturnDate),@MaxDate=MAX(ReturnDate) FROM Returnheader (NOLOCK) WHERE STATUS=1 AND ReturnType=2
		
		UPDATE GSSTMonthEndDetails SET TransCount=@TransCount,FromDate=@MinDate,ToDate=@MaxDate WHERE Process='Sales Return'
		SET @TransCount=0
	END
	
 COMMIT TRANSACTION  	
END TRY
BEGIN CATCH			
		SET @Po_ErrNo=1
		ROLLBACK TRANSACTION  
END CATCH

RETURN

END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Gst_FieldLevelConfiguration' AND XTYPE='U')
CREATE TABLE Gst_FieldLevelConfiguration
(
	Transid			INT,
	Ctrlid			INT,
	CtrlName		VARCHAR(100),
	BtnInDex		INT,
	EnableSts		INT,
	Availability	INT,
	LastModBy		INT,
	LastModDate		DATETIME,
	Authid			INT,
	AuthDate		DATETIME,
	Primary KEY(Transid,CtrlName,BtnInDex)
)	
GO
--IF NOT EXISTS(SELECT * FROM Gst_FieldLevelConfiguration WHERE Transid=2)
--BEGIN
--INSERT INTO Gst_FieldLevelConfiguration
--SELECT 2,1,'fxtInvDisc',0,0,1,1,CONVERT(VARCHAR(10),GETDATE(),121),1,CONVERT(VARCHAR(10),GETDATE(),121) UNION
--SELECT 2,2,'fxtInvDiscAmt',0,0,1,1,CONVERT(VARCHAR(10),GETDATE(),121),1,CONVERT(VARCHAR(10),GETDATE(),121) UNION
--SELECT 2,3,'fxtWindowDisplayAmount',0,0,1,1,CONVERT(VARCHAR(10),GETDATE(),121),1,CONVERT(VARCHAR(10),GETDATE(),121) UNION
--SELECT 2,4,'chkInvoiceDisc',0,0,1,1,CONVERT(VARCHAR(10),GETDATE(),121),1,CONVERT(VARCHAR(10),GETDATE(),121) UNION
--SELECT 2,5,'fxtOnAccountAmount',0,0,1,1,CONVERT(VARCHAR(10),GETDATE(),121),1,CONVERT(VARCHAR(10),GETDATE(),121) UNION
--SELECT 2,6,'btnOperation',12,0,1,1,CONVERT(VARCHAR(10),GETDATE(),121),1,CONVERT(VARCHAR(10),GETDATE(),121) UNION
--SELECT 2,7,'btnOperation',9,0,1,1,CONVERT(VARCHAR(10),GETDATE(),121),1,CONVERT(VARCHAR(10),GETDATE(),121) UNION
--SELECT 2,8,'btnOperation',8,0,1,1,CONVERT(VARCHAR(10),GETDATE(),121),1,CONVERT(VARCHAR(10),GETDATE(),121) UNION
--SELECT 2,9,'btnOperation',10,1,1,1,CONVERT(VARCHAR(10),GETDATE(),121),1,CONVERT(VARCHAR(10),GETDATE(),121) UNION
--SELECT 2,10,'btnOperation',11,1,1,1,CONVERT(VARCHAR(10),GETDATE(),121),1,CONVERT(VARCHAR(10),GETDATE(),121) UNION
--SELECT 2,11,'chkOnAccount',0,0,1,1,CONVERT(VARCHAR(10),GETDATE(),121),1,CONVERT(VARCHAR(10),GETDATE(),121)
--END
--GO
--DELETE FROM Configuration  WHERE ModuleId = 'BILL11' AND ModuleName='Billing' AND Description='Billing Credit Note Adjustment as Mandatory'
--INSERT INTO Configuration
--SELECT 'BILL11','Billing','Billing Credit Note Adjustment as Mandatory',0,'',0.00,11
--GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='FN_ReturnGstWelcomeMsg' AND XTYPE='TF')
DROP FUNCTION FN_ReturnGstWelcomeMsg
GO
CREATE FUNCTION FN_ReturnGstWelcomeMsg()
RETURNS @Table Table 
(
	Slno INT,
	PMessage  NVARCHAR(500)
)
/***********************************************
* FUNCTION: FN_ReturnGstWelcomeMsg
* PURPOSE: Return GstWelcomeMsg
* NOTES:
* CREATED: Karthick 2017-05-05
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
*
************************************************/
AS
BEGIN
	INSERT INTO @Table
	SELECT 1,'Please Close all the Multiuser Session' UNION
	SELECT 2,'Close all Your Pending Transaction'	  UNION
	SELECT 3,'Confirm all your pending Claims' UNION
	SELECT 4,'All the Pending Orders Will be Billed With new GST Tax' UNION
	SELECT 5,'ITC Closing Stock SnapShot Will be taken Post confirming the Pending Transactions.' 
RETURN
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='FN_RETURN_ITC_Report' AND XTYPE='TF')
DROP FUNCTION FN_RETURN_ITC_Report
GO
CREATE FUNCTION FN_RETURN_ITC_Report(@UsrId AS INT)
RETURNS @ITCReport Table 
(
	HSNCode				NVARCHAR(100),
	PrdCCode			NVARCHAR(50),
	PrdName				NVARCHAR(100),
	CmpInvNo			NVARCHAR(50),
	GrnDate				DATETIME,
	MRP					NUMERIC(18,6),
	PurchaseRate		NUMERIC(18,6),
	ASOnDate			DATETIME,
	ClosingSaleable	    NUMERIC(18,0),
	ClosingUnSaleable	NUMERIC(18,0),
	ClosingFree		    NUMERIC(18,0),
	Closingsalvolume	NUMERIC(18,6),	
	ClosingUnSalVolume	NUMERIC(18,6),
	ClosingFreeVolume	NUMERIC(18,6),
	ClosingSelValue		NUMERIC(18,6),
	TaxAmount			NUMERIC(18,6)
)
/***********************************************
* FUNCTION: FN_RETURN_ITC_Report
* PURPOSE: Return ITC Details
* NOTES:
* CREATED: Karthick 2017-05-08
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
*
************************************************/
AS
BEGIN

	INSERT INTO @ITCReport
	SELECT '' AS HSNCode,P.PrdCCode,PrdName,CmpInvNo,GrnDate,MRP,PurchaseRate,V.AuthDate,SUM(grnqty)AS ClosingSaleable,
	0 AS ClosingUnSaleable,SUM(GrnFreeQty) AS ClosingFree,SUM(Closingsalvolume)Closingsalvolume,
	0 AS ClosingUnSalVolume,SUM(ClosingFreeVolume) AS ClosingFreeVolume,SUM(ClosingSelValue) AS ClosingSelValue,SUM(TaxAmount)TaxAmount
	FROM VatClosingStock V(NOLOCK) INNER JOIN Product P ON P.PrdId=V.Prdid
	GROUP BY P.PrdCCode,PrdName,CmpInvNo,GrnDate,MRP,PurchaseRate,V.AuthDate
	UNION ALL
	SELECT DISTINCT '' AS HSNCode,PrdCCode,PrdName,'' AS CmpInvNo,AuthDate,MRP,PurchaseRate,AuthDate,0 AS ClosingSaleable,
	SUM(ClosingUnSaleable) AS ClosingUnSaleable,0 AS ClosingFree,0 Closingsalvolume,
	SUM(ClosingUnSalVolume)AS ClosingUnSalVolume,0 AS ClosingFreeVolume,0 AS ClosingSelValue,0 TaxAmount
	FROM(
	SELECT DISTINCT P.PrdCCode,PrdName,V.PRDID,PRDBATID,Lcnid,ClosingUnSaleable,MRP,SellingRate,PurchaseRate,TaxPerc,ClosingUnSalVolume,V.AuthDate 
	FROM VatClosingStock  V(NOLOCK) INNER JOIN Product P ON P.PrdId=V.Prdid
	WHERE ClosingUnSaleable>0
	)A GROUP BY PrdCCode,PrdName,MRP,PurchaseRate,AuthDate

RETURN
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Cs2Cn_Prk_InputTaxCreditReport' AND XTYPE='U')
DROP TABLE Cs2Cn_Prk_InputTaxCreditReport
GO
CREATE TABLE Cs2Cn_Prk_InputTaxCreditReport
(
	[SlNo]				[numeric](38, 0) IDENTITY(1,1) NOT NULL,
	[DistCode]			[nvarchar](50) NULL,
	[HSNCode]			NVARCHAR(200),
	[PrdCCode]			NVARCHAR(50),
	[PrdName]			NVARCHAR(100),
	[CmpInvNo]			NVARCHAR(50),
	[GrnDate]			DATETIME,
	[MRP]				NUMERIC(18,6),
	[PurchaseRate]		NUMERIC(18,6),
	[SellingRate]		NUMERIC(18,6),
	[ASOnDate]			DATETIME,
	[ClosingSaleable]	NUMERIC(18,0),
	[ClosingUnSaleable]	NUMERIC(18,0),
	[ClosingFree]		NUMERIC(18,0),
	[Closingsalvolume]	NUMERIC(18,6),	
	[ClosingUnSalVolume]NUMERIC(18,6),
	[ClosingFreeVolume]	NUMERIC(18,6),
	[ClosingSelValue]	NUMERIC(18,6),
	[TaxableAmount]		NUMERIC(18,6),
	[TaxAmount]			NUMERIC(18,6),
	[TaxPerc]			NUMERIC(18,6),
	[UploadFlag]		[nvarchar](10) NULL,
	[SyncId]			[numeric](38, 0) NULL,
	[ServerDate]		[datetime] NULL
)
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_CS2CN_InputTaxCreditReport' AND XTYPE='P')
DROP PROCEDURE Proc_CS2CN_InputTaxCreditReport
GO
--exec Proc_CS2CN_InputTaxCreditReport 0,'2015-06-30'
CREATE PROCEDURE Proc_CS2CN_InputTaxCreditReport
(
	@Po_ErrNo INT OUTPUT,
	@ServerDate DATETIME
)
AS
/*********************************
* PROCEDURE		: Proc_CS2CN_InputTaxCreditReport
* PURPOSE		: To upload InputTaxCredit
* CREATED BY	: Karthick.KJ
* CREATED DATE	: 09/05/2017
* NOTE			: 
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
	
*********************************/
SET NOCOUNT ON
BEGIN
	
	SET @Po_ErrNo=0
	DECLARE @DistCode NVARCHAR(50)
	DECLARE @DistName NVARCHAR(100)	
	DECLARE @FromDate DATETIME
	DECLARE @ToDate   DATETIME
	
	DELETE FROM Cs2Cn_Prk_InputTaxCreditReport WHERE UPLOADFLAG='Y'
	
	SELECT @DistCode=DistributorCode,@DistName=DistributorName FROM Distributor
	
	INSERT INTO Cs2Cn_Prk_InputTaxCreditReport(DistCode,HSNCode,PrdCCode,PrdName,CmpInvNo,GrnDate,MRP,PurchaseRate,SellingRate,
									ASOnDate,ClosingSaleable,ClosingUnSaleable,ClosingFree,Closingsalvolume,ClosingUnSalVolume,
									ClosingFreeVolume,ClosingSelValue,TaxableAmount,TaxAmount,TaxPerc,UploadFlag,ServerDate)

	
	SELECT @DistCode,HSNCode,PrdCCode,PrdName,CmpInvNo,GrnDate,MRP,PurchaseRate,SellingRate,AsOnDate,ClosingSaleable,ClosingUnSaleable,ClosingFree,
	Closingsalvolume,ClosingUnSalVolume,ClosingFreeVolume,ClosingSelValue,TaxableAmount,TaxAmount,TaxPerc,'N' AS UploadFlag,@ServerDate
	FROM
	(
	SELECT '' AS HSNCode,P.PrdCCode,PrdName,CmpInvNo,GrnDate,MRP,PurchaseRate,SellingRate,V.AuthDate AS AsOnDate,SUM(grnqty)AS ClosingSaleable,
	0 AS ClosingUnSaleable,SUM(GrnFreeQty) AS ClosingFree,SUM(Closingsalvolume)Closingsalvolume,
	0 AS ClosingUnSalVolume,SUM(ClosingFreeVolume) AS ClosingFreeVolume,SUM(ClosingSelValue) AS ClosingSelValue,SUM(TaxableAmount) as TaxableAmount,
	SUM(TaxAmount)TaxAmount,TaxPerc
	FROM VatClosingStock V(NOLOCK) INNER JOIN Product P(NOLOCK) ON P.PrdId=V.Prdid
	WHERE V.Upload=0
	GROUP BY P.PrdCCode,PrdName,CmpInvNo,GrnDate,MRP,PurchaseRate,V.AuthDate,SellingRate,TaxPerc
	UNION ALL
	SELECT DISTINCT '' AS HSNCode,PrdCCode,PrdName,'' AS CmpInvNo,AuthDate,MRP,PurchaseRate,SellingRate,AuthDate AS AsOnDate,0 AS ClosingSaleable,
	SUM(ClosingUnSaleable) AS ClosingUnSaleable,0 AS ClosingFree,0 Closingsalvolume,
	SUM(ClosingUnSalVolume)AS ClosingUnSalVolume,0 AS ClosingFreeVolume,0 AS ClosingSelValue,0 AS TaxableAmount,0 TaxAmount,0 AS TaxPerc
	FROM(
	SELECT DISTINCT P.PrdCCode,PrdName,V.PRDID,PRDBATID,Lcnid,ClosingUnSaleable,MRP,SellingRate,PurchaseRate,TaxPerc,ClosingUnSalVolume,V.AuthDate 
	FROM VatClosingStock  V(NOLOCK) INNER JOIN Product P(NOLOCK) ON P.PrdId=V.Prdid
	WHERE V.Upload=0 AND ClosingUnSaleable>0 
	)A GROUP BY PrdCCode,PrdName,MRP,PurchaseRate,AuthDate,SellingRate
    )B
    
    UPDATE V SET UPLOAD=1 FROM  VatClosingStock V(NOLOCK)  
    
END
GO
--------PURCHASE RETURN
DELETE FROM CustomCaptions WHERE TransId=7 AND CtrlId=2000 AND SubCtrlId=48 AND Caption='Status'
INSERT INTO CustomCaptions 
SELECT 7,2000,48,'HotSch-7-2000-48','Status','','',1,1,1,GETDATE(),1,GETDATE(),'Status','','',1,1 
GO
DELETE FROM CustomCaptions WHERE TransId=7 AND CtrlId=1000 AND SubCtrlId=73
INSERT INTO CustomCaptions 
SELECT 7,1000,73,'Msgbox-7-1000-73','','','Unable To Edit,Purchase Return Sent for Approval',1,1,1,GETDATE(),1,GETDATE(),'','','Unable To Edit,Purchase Return Sent for Approval',1,1 
GO
DELETE FROM CustomCaptions WHERE TransId=7 AND CtrlId=1000 AND SubCtrlId=74
INSERT INTO CustomCaptions 
SELECT 7,1000,74,'Msgbox-7-1000-74','','','Cannot Delete,Purchase Return Sent for Approval',1,1,1,GETDATE(),1,GETDATE(),'','','Cannot Delete,Purchase Return Sent for Approval',1,1 
GO
DELETE FROM CustomCaptions WHERE TransId=7 AND CtrlId=1000 AND SubCtrlId=75
INSERT INTO CustomCaptions 
SELECT 7,1000,75,'Msgbox-7-1000-75','','','Unable to Reduce the Stock For',1,1,1,GETDATE(),1,GETDATE(),'','','Unable to Reduce the Stock For',1,1 
GO
DELETE FROM HotSearchEditorHd where FormId=344
INSERT INTO HotSearchEditorHd
SELECT  344,'Purchase Return','ReferenceNo','select','
SELECT PurRetRefNo,PurRetDate,CASE STATUS WHEN 0 THEN CASE GstUpload1 WHEN 1 THEN ''Sent for Approval'' WHEN 2 THEN ''Approved and Not Confirmed'' ELSE ''Pending'' END WHEN 1 THEN ''Settled'' WHEN 3 THEN ''Rejected''  END PurStatus ,
PurRetId,PurRcptId,PurRcptRefNo,InvDate,CmpInvNo,Discount,TaxAmount,LessScheme,CmpId,  
SpmId,LcnId,OtherCharges,GrossAmount,NetAmount,PurSeqId,Remarks,TotalAddition,TotalDeduction,Status,  DecimalPoints,ReturnMode,ReturnType,GstUpload1  
FROM(SELECT PR.PurRetRefNo,PR.PurRetDate,PR.PurRetId,PR.PurRcptId,   ISNULL(PR.PurRcptRefNo,P.PurRcptRefNo) AS PurRcptRefNo,   ISNULL(P.InvDate,PR.PurRetDate) AS InvDate,
PR.CmpInvNo,PR.Discount,PR.TaxAmount,PR.LessScheme,PR.CmpId,  PR.SpmId,ISNULL(PR.LcnId,P.LcnId) AS LcnId,PR.OtherCharges,PR.GrossAmount,
PR.NetAmount,  PR.PurSeqId,PR.Remarks,PR.TotalAddition,PR.TotalDeduction,PR.Status,  ISNULL(PR.DecimalPoints,4) AS DecimalPoints,
ISNULL(PR.ReturnMode,0) AS ReturnMode,  ISNULL(PR.ReturnType,0) AS ReturnType,ISNULL(PR.GstUpload1,0) AS GstUpload1 FROM PurchaseReturn PR WITH (NOLOCK)   
LEFT OUTER JOIN PurchaseReceipt P WITH (NOLOCK) ON PR.PurRcptId=P.PurRcptId)A'
GO
DELETE FROM HotSearchEditorDt where FormId=344
INSERT INTO HotSearchEditorDt 
SELECT 1,344,'ReferenceNo','Reference No','PurRetRefNo',2000,0,'HotSch-7-2000-1',7 UNION 
SELECT 2,344,'ReferenceNo','Return Date','PurRetDate',2500,0,'HotSch-7-2000-2',7 UNION
SELECT 3,344,'ReferenceNo','Status','PurStatus',300,0,'HotSch-7-2000-48',7
GO
-------TILL HERE
-------BILLING-------
DELETE FROM HotSearchEditorHd WHERE FormId=539
INSERT INTO HotSearchEditorHd 
SELECT 539,'Billing','BillNo','select',
'SELECT SalId,SalInvNo,InvNo,SalInvDate,SalInvRef,RtrName,RmName,SmName,  BillType,BillMode,Status,NetAmount,PaidAmount,DeliveryDate,DecPoints,InvType,BillEdit,Dlvsts
FROM (  SELECT A.SalId,A.SalInvNo,ISNULL(H.InvNo,'''') AS InvNo,A.SalInvDate,SalInvRef,B.RtrName,C.RmName,  D.SmName,E.SeriesDesc As BillType,
F.SeriesDesc As BillMode,G.CtrlDesc as Status,  SalNetAmt As NetAmount, SalPayAmt As PaidAmount,SalDlvDate as DeliveryDate,DecPoints,InvType,ISNULL(A.BillEdit,0) AS BillEdit,Dlvsts 
FROM SalesInvoice A (NOLOCK) INNER JOIN Retailer B ON A.RtrId = B.RtrId  INNER JOIN RouteMaster C ON A.RMId = C.RMId 
INNER JOIN Salesman D ON A.SMId = D.SMId  INNER JOIN BillSeriesconfig E ON A.BillType = E.SeriesValue AND E.SeriesMasterId = 2  
INNER JOIN BillSeriesconfig F ON A.BillMode = F.SeriesValue AND F.SeriesMasterId = 1  LEFT OUTER JOIN SalInvoiceDeliveryChallan H ON A.SalId=H.SalId  
INNER JOIN ScreenDefaultValues G ON G.TransId = vFParam AND G.CtrlId = 1  AND A.DlvSts = G.CtrlValue Where Dlvsts in (vSParam))a 
WHERE InvType=vTParam  ORDER BY SalId'
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='BilledOrderPrdGRNTrack' AND XTYPE='U')
CREATE TABLE BilledOrderPrdGRNTrack
(
	RowId		 INT,
	Refid		 INT,
	RefNo		 NVARCHAR(50),
	Lcnid		 INT,
	Prdid		 INT,
	PrdBatid	 INT,
	BaseQty		 INT,
	FreeQty		 INT,
	PurRcptId	 INT,
	PurRcptRefNo VARCHAR(50),
	PurRcptDate  DATETIME,
	PrdSlNo		 INT,
	GrnQty		 INT,
	FreeGrnQty	 INT,
	Usrid		 INT,	
	Transid		 INT,
	CalledFrom   INT
)
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Proc_InvoiceWiseGrnTrack_Order' AND XTYPE='P')
DROP PROCEDURE Proc_InvoiceWiseGrnTrack_Order
GO
/*
--exec Proc_InvoiceWiseGrnTrack_Order 3,3,1,1,778,'SLR17000778'
 SELECT * FROM BilledOrderPrdGRNTrack(nolock)
*/
CREATE PROCEDURE Proc_InvoiceWiseGrnTrack_Order
(
	 @Pi_TransId	 INT,
	 @Pi_CalledFrom  INT,        
	 @Pi_UserId		 INT,
	 @Pi_LcnId		 INT,
	 @Pi_RefId		 INT,
	 @Pi_RefNo		 NVARCHAR(50),
	 @Pi_Error		INT OUTPUT
)
AS
/************************
* PROCEDURE		: Proc_InvoiceWiseGrnTrack_Order      
* PURPOSE		: GST Changes To Track Product wise GRN Details
* CREATED		: Karthick
* CREATED DATE	: 2017-05-17
* MODIFIED
* DATE      AUTHOR     DESCRIPTION 

***************************/
BEGIN
	DECLARE @MinRowid AS INT
	DECLARE @MaxRowid AS INT
 	DECLARE @Prdid AS INT
	DECLARE @PrdBatid AS INT
	DECLARE @BilledQty AS INT 
	DECLARE @MinSlno AS INT
	DECLARE @MaxSlno AS INT
	DECLARE @PurRcptId AS INT
	DECLARE @PurRcptRefNo AS VARCHAR(50)
	DECLARE @GrnQty AS INT
	DECLARE @RemainingQty AS INT
	DECLARE @GrnDate AS DATETIME
	DECLARE @PrdSlNo AS INT
	DECLARE @RefId AS INT 
	
	CREATE TABLE #GRNDETAILS
	(
		PurRcptId			INT,
		PurRcptRefNo		VARCHAR(50),
		PurRcptDate			DATETIME,
		PrdSlNo				INT,
		GrnQty				INT,
		Slno				INT	
	)

	CREATE TABLE #AdjustedPurchase
	(
		PurRcptId			INT,
		PurRcptRefNo		VARCHAR(50),
		PurRcptDate			DATETIME,
		Prdid				INT,
		Prdbatid			INT,
		PrdSlNo				INT,
		GrnQty				INT,
		LcnId				INT
	)
	
	CREATE TABLE #BilledDetails
	(
		Refid		INT,
		Prdid		INT,
		PrdBatId	INT,
		BaseQty		INT,
		RowId		INT
	)

 
/*
	CalledFrom-2 Billing
	CalledFrom-38 StockJournal
	CalledFrom-3 Sales Return
*/
	set @Pi_Error=0
	
	BEGIN TRY
	
	DELETE FROM BilledOrderPrdGRNTrack WHERE UsrId = @Pi_UserId AND TransId = @Pi_TransId  
	
	IF @Pi_TransId=25
	BEGIN	
		INSERT INTO #BilledDetails
		SELECT @Pi_RefId,PrdId,PrdBatId,BaseQty,SlNo FROM Prk_SalesInvoice P(NOLOCK) 
		INNER JOIN Prk_SalesInvoiceProduct PK(NOLOCK) ON P.SALID=PK.SALID
		WHERE p.TransId=@Pi_TransId and p.LastModBy=@Pi_UserId and OrderKeyNumber=@Pi_RefNo
		
		SELECT @MinRowid=MIN(ISNULL(RowId,0)) FROM #BilledDetails 
		SELECT @MaxRowid=MAX(ISNULL(RowId,0)) FROM #BilledDetails 
	END 
	  
 --select * from #BilledDetails
	WHILE @MinRowid<=@MaxRowid
	BEGIN
	
		SELECT @Prdid=PrdId,@PrdBatid=PrdBatId,@BilledQty=BaseQty,@RefId=Refid FROM #BilledDetails WHERE RowId= @MinRowid
		
	IF (@Pi_TransId=25)  
	BEGIN
		DELETE FROM #GRNDETAILS
		INSERT INTO #GRNDETAILS
		SELECT PurRcptId,PurRcptRefNo,InvDate,PrdSlNo,GrnQty,ROW_NUMBER() OVER(ORDER BY PurRcptId DESC) Slno
		FROM
		(
		SELECT PurRcptId,PurRcptRefNo,InvDate,PrdSlNo,SUM(GrnQty-AdjustedQty) AS GrnQty
		FROM
		(
			SELECT pr.PurRcptId,pr.PurRcptRefNo,RcvdGoodBaseQty AS GrnQty,0 AS AdjustedQty,PR.InvDate,PrdSlNo
			FROM PurchaseReceipt PR(NOLOCK) INNER JOIN PurchaseReceiptProduct PRP(NOLOCK) ON PR.PurRcptId=PRP.PurRcptId
			WHERE  PrdId=@Prdid and PrdBatId=@PrdBatid ANd Lcnid=@Pi_LcnId AND (RcvdGoodBaseQty-RetRcvdBaseQty-BilledSalQty)>0 --and CancelInvoice=0
			UNION
			SELECT PurRcptId,PurRcptRefNo,0 AS GrnQty,GrnQty AS AdjustedQty,PurRcptDate,PrdSlNo FROM #AdjustedPurchase WHERE Prdid=@Prdid AND Prdbatid=@PrdBatid 
			AND LcnId=@Pi_LcnId
			UNION
			SELECT PurRcptId,PurRcptRefNo,0 AS GrnQty,GrnQty AS AdjustedQty,PurRcptDate,PrdSlNo FROM BilledOrderPrdGRNTrack WHERE Prdid=@Prdid AND Prdbatid=@PrdBatid 
			AND Lcnid=@Pi_LcnId	AND UsrId = @Pi_UserId 
		)A 
		GROUP BY PurRcptId,PurRcptRefNo,InvDate,PrdSlNo
		HAVING SUM(GrnQty-AdjustedQty)>0 
		)B
     END
		
		SELECT @MinSlno =MIN(Slno) FROM #GRNDETAILS
		SELECT @MaxSlno =MAX(Slno) FROM #GRNDETAILS
			
			SET @RemainingQty=@BilledQty
			
			WHILE @MinSlno<=@MaxSlno
			BEGIN
				SELECT @PurRcptId= PurRcptId,@PurRcptRefNo =PurRcptRefNo,@GrnQty=GrnQty,@GrnDate=PurRcptDate,@PrdSlNo=PrdSlNo 
						FROM #GRNDETAILS WHERE Slno=@MinSlno
			
				IF @RemainingQty>0
				 BEGIN
					 IF @GrnQty>=@RemainingQty
					 BEGIN
						INSERT INTO BilledOrderPrdGRNTrack(RowId,Refid,RefNo,Lcnid,Prdid,PrdBatid,BaseQty,FreeQty,PurRcptId,PurRcptRefNo,PurRcptDate,PrdSlNo,GrnQty,FreeGrnQty,Usrid,Transid,CalledFrom)
						SELECT  @MinRowid,@Pi_RefId,@Pi_RefNo,@Pi_LcnId,@Prdid,@PrdBatid,@BilledQty,0,@PurRcptId,@PurRcptRefNo,@GrnDate,@PrdSlNo,@RemainingQty,0,@Pi_UserId,@Pi_TransId,@Pi_CalledFrom
						
						INSERT INTO #AdjustedPurchase
						SELECT @PurRcptId,@PurRcptRefNo,@GrnDate,@Prdid,@PrdBatid,@PrdSlNo,@RemainingQty,@Pi_LcnId
						
						BREAK 
					 END 
					 ELSE
					 BEGIN
						INSERT INTO BilledOrderPrdGRNTrack(RowId,Refid,RefNo,Lcnid,Prdid,PrdBatid,BaseQty,FreeQty,PurRcptId,PurRcptRefNo,PurRcptDate,PrdSlNo,GrnQty,FreeGrnQty,Usrid,Transid,CalledFrom)
						SELECT  @MinRowid,@Pi_RefId,@Pi_RefNo,@Pi_LcnId,@Prdid,@PrdBatid,@BilledQty,0,@PurRcptId,@PurRcptRefNo,@GrnDate,@PrdSlNo,@GrnQty,0,@Pi_UserId,@Pi_TransId,@Pi_CalledFrom

						INSERT INTO #AdjustedPurchase
						SELECT @PurRcptId,@PurRcptRefNo,@GrnDate,@Prdid,@PrdBatid,@PrdSlNo,@GrnQty,@Pi_LcnId
						
						SET @RemainingQty=@RemainingQty-@GrnQty
					 END
				  END					
				
				SET @MinSlno=@MinSlno+1
			END
		
		SET @MinRowid=@MinRowid+1
	END	
	END TRY
	BEGIN CATCH
		SET @Pi_Error=1
	END CATCH	 
END
GO
IF EXISTS(SELECT NAME FROM Sysobjects WHERE XTYPE='U' and NAME='Cs2Cn_Prk_PurchaseReturn_Approval')
DROP TABLE Cs2Cn_Prk_PurchaseReturn_Approval
GO
CREATE TABLE Cs2Cn_Prk_PurchaseReturn_Approval
(
	SlNo			NUMERIC(18,0) IDENTITY(1,1),
	DistCode		[NVARCHAR](50) NULL,
	SupPlierCode	[NVARCHAR](50),
	PurRetRefNo		[NVARCHAR](100),	
	GrnNo			[NVARCHAR](50),
	GrnDate			[DATETIME],
	CmpInvNo		[NVARCHAR](100),
	PurRetDate		[DATETIME],
	ReturnType		[INT],--1 With Reference/2 Without Reference
	MRP				[NUMERIC](18,6),
	PrdSlNo			[Int],
	Prdcode			[NVARCHAR](100),
	BatchCode		[NVARCHAR](100),
	SalQuantity		[INT],--Only in Base UOM
	UnSalQuantity	[INT],
	FreeQty			[INT],
	[Reason]		[Nvarchar](200), --Reason for Unsaleable Qty,
	Discount		[NUMERIC](18,6),
	LessScheme		[NUMERIC](18,6),
	OtherCharges	[NUMERIC](18,6),
	PrdTaxAmount	[NUMERIC](18,6),
	TotalTax		[NUMERIC](18,6),
	PrdGrossAmount	[NUMERIC](18,6),
	GrossAmount		[NUMERIC](18,6),
	PrdNetAmount	[NUMERIC](18,6),
 	NetAmount		[NUMERIC](18,6),
 	Remarks			[NVARCHAR](200),
 	UploadFlag		[VARCHAR](2),
	SyncId			[NUMERIC](38, 0)NULL,
	ServerDate		[DATETIME]
)
GO
IF EXISTS(SELECT NAME FROM Sysobjects WHERE XTYPE='U' and NAME='Cn2Cs_Prk_PurchaseReturn')
DROP TABLE Cn2Cs_Prk_PurchaseReturn
GO
CREATE TABLE Cn2Cs_Prk_PurchaseReturn
(
	DistCode		[NVARCHAR](50) NULL,
	PurchaseType	[INT],--1 Data uploaded from CoreStocky/2 Uploaded from Console
	ConPurRefNo		[NVARCHAR](100),--Console Purchase Return Reference No
	PurRetRefNo		[NVARCHAR](100),--'' then Download from Console\Upload from CoreStocky
	SapCode			[NVARCHAR](200),
	SupPlierCode	[NVARCHAR](50),
	CmpInvNo		[NVARCHAR](100),
	PurRetDate		[DATETIME],
	ReturnType		[INT],--1 With Reference/2 Without Reference
	MRP				[NUMERIC](18,6),
	PrdSlNo			[Int],
	Prdcode			[NVARCHAR](100),
	BatchCode		[NVARCHAR](100),
	SalQuantity		[INT],--Only in Base UOM
	UnSalQuantity	[INT],
	FreeQty			[INT],
	[Reason]		[Nvarchar](200), --Reason for Unsaleable Qty,
	Discount		[NUMERIC](18,6),
	LessScheme		[NUMERIC](18,6),
	OtherCharges	[NUMERIC](18,6),
	PrdTaxAmount	[NUMERIC](18,6),
	TotalTax		[NUMERIC](18,6),
	PrdGrossAmount	[NUMERIC](18,6),
	GrossAmount		[NUMERIC](18,6),
	PrdNetAmount	[NUMERIC](18,6),
 	NetAmount		[NUMERIC](18,6),
 	PurStatus		[VARCHAR](100),--APPROVED/REJECTED
 	Remarks			[NVARCHAR](200),
 	AddColumn1		[NVARCHAR](200),
 	AddColumn2		[NVARCHAR](200),
 	AddColumn3		[NVARCHAR](200),
	DownLoadFlag	[VARCHAR](10) NULL,
	CreatedDate		[DATETIME] NULL	
)
GO
IF EXISTS(SELECT NAME FROM Sysobjects WHERE XTYPE='P' and NAME='Proc_Import_PurchaseReturn')
DROP PROCEDURE Proc_Import_PurchaseReturn
GO
CREATE PROCEDURE Proc_Import_PurchaseReturn
(
	@Pi_Records TEXT
)
AS
/*********************************
* PROCEDURE		: Proc_Import_PurchaseReturn
* PURPOSE		: To Insert records from xml file in the Table Cn2Cs_Prk_PurchaseReturn
* CREATED		: S.Moorthi
* CREATED DATE	: 10-04-2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
SET NOCOUNT ON
BEGIN
	DECLARE @hDoc INTEGER
	
	EXEC sp_xml_preparedocument @hDoc OUTPUT,@Pi_Records
	INSERT INTO Cn2Cs_Prk_PurchaseReturn(		
		DistCode,
		PurchaseType,
		ConPurRefNo,
		PurRetRefNo,
		SapCode,
		SupPlierCode,
		CmpInvNo,
		PurRetDate,
		ReturnType,
		MRP,
		PrdSlNo,
		Prdcode,
		BatchCode,
		SalQuantity,
		UnSalQuantity,
		FreeQty,
		Reason,
		Discount,
		LessScheme,
		OtherCharges,
		PrdTaxAmount,
		TotalTax,
		PrdGrossAmount,
		GrossAmount,
		PrdNetAmount,
		NetAmount,
		PurStatus,
		Remarks,
		AddColumn1,
		AddColumn2,
		AddColumn3,
		DownLoadFlag,
		CreatedDate
	)
	SELECT DistCode,
		PurchaseType,
		ConPurRefNo,
		PurRetRefNo,
		SapCode,
		SupPlierCode,
		CmpInvNo,
		PurRetDate,
		ReturnType,
		MRP,
		PrdSlNo,
		Prdcode,
		BatchCode,
		SalQuantity,
		UnSalQuantity,
		FreeQty,
		Reason,
		Discount,
		LessScheme,
		OtherCharges,
		PrdTaxAmount,
		TotalTax,
		PrdGrossAmount,
		GrossAmount,
		PrdNetAmount,
		NetAmount,
		PurStatus,
		Remarks,
		AddColumn1,
		AddColumn2,
		AddColumn3,
		ISNULL(DownLoadFlag,'D'),
		GETDATE()		
	FROM OPENXML (@hdoc,'/Root/Console2CS_PurchaseReturn',1)
	WITH
	(
		DistCode		[NVARCHAR](50),
		PurchaseType	[INT],--1 Data uploaded from CoreStocky/2 Uploaded from Console
		ConPurRefNo		[NVARCHAR](100),--Console Purchase Return Reference No
		PurRetRefNo		[NVARCHAR](100),--'' then Download from Console\Upload from CoreStocky
		SapCode			[NVARCHAR](200),
		SupPlierCode	[NVARCHAR](50),
		CmpInvNo		[NVARCHAR](100),
		PurRetDate		[DATETIME],
		ReturnType		[INT],--1 With Reference/2 Without Reference
		MRP				[NUMERIC](18,6),
		PrdSlNo			[Int],
		Prdcode			[NVARCHAR](100),
		BatchCode		[NVARCHAR](100),
		SalQuantity		[INT],--Only in Base UOM
		UnSalQuantity	[INT],
		FreeQty			[INT],
		[Reason]		[Nvarchar](200), --Reason for Unsaleable Qty,
		Discount		[NUMERIC](18,6),
		LessScheme		[NUMERIC](18,6),
		OtherCharges	[NUMERIC](18,6),
		PrdTaxAmount	[NUMERIC](18,6),
		TotalTax		[NUMERIC](18,6),
		PrdGrossAmount	[NUMERIC](18,6),
		GrossAmount		[NUMERIC](18,6),
		PrdNetAmount	[NUMERIC](18,6),
 		NetAmount		[NUMERIC](18,6),
 		PurStatus		[VARCHAR](100),--APPROVED/REJECTED
 		Remarks			[NVARCHAR](200),
 		AddColumn1		[NVARCHAR](200),
 		AddColumn2		[NVARCHAR](200),
 		AddColumn3		[NVARCHAR](200),
		DownLoadFlag	[VARCHAR](10)
	
	) XMLObj
	EXEC sp_xml_removedocument @hDoc
END
GO
IF EXISTS(SELECT NAME FROM Sysobjects WHERE XTYPE='P' and NAME='Proc_Cs2Cn_PurchaseReturn_Approval')
DROP PROCEDURE Proc_Cs2Cn_PurchaseReturn_Approval
GO
/*
BEGIN Tran
EXEC Proc_Cs2Cn_PurchaseReturn_Approval 0,'2017-06-29'
select * From Cs2Cn_Prk_PurchaseReturn_Approval
rollback tran
*/
CREATE  PROCEDURE [dbo].[Proc_Cs2Cn_PurchaseReturn_Approval]
(
	@Po_ErrNo INT OUTPUT,
	@ServerDate DATETIME
)
AS
/*********************************
* PROCEDURE		: Proc_Cs2Cn_PurchaseReturn_Approval
* PURPOSE		: To Extract PurchaseReturn from CoreStocky to upload to Console
* CREATED BY	: Karthick K.J
* CREATED DATE	: 14/05/2017
* NOTE			:
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
	
*********************************/
SET NOCOUNT ON
BEGIN
	
	DECLARE @DistCode	As nVarchar(100)
	
	SET @Po_ErrNo=0
	
	DELETE FROM Cs2Cn_Prk_PurchaseReturn_Approval WHERE UploadFlag = 'Y'
	SELECT @DistCode = DistributorCode FROM Distributor	
	INSERT INTO Cs2Cn_Prk_PurchaseReturn_Approval
	(DistCode,SupPlierCode,PurRetRefNo,GrnNo,GrnDate,CmpInvNo,PurRetDate,ReturnType,MRP,PrdSlNo,Prdcode,
	BatchCode,SalQuantity,UnSalQuantity,FreeQty,Reason,Discount,LessScheme,OtherCharges,PrdTaxAmount,TotalTax,
	PrdGrossAmount,GrossAmount,PrdNetAmount,NetAmount,Remarks,UploadFlag,ServerDate)	
	SELECT @DistCode,
	S.SpmCode,PR.PurRetRefNo,
	CASE  WHEN ISNULL(PU.PurRcptRefNo,'')='' THEN ISNULL(PR.PurRcptRefNo,'')  ELSE ISNULL(PU.PurRcptRefNo,'') END AS PurRcptRefNo,
	CASE  WHEN ISNULL(PU.InvDate,'')='' THEN ISNULL(PR.PurRetDate,'')  ELSE ISNULL(PU.InvDate,'') END AS InvDate,
	CASE  WHEN ISNULL(PU.CmpInvNo,'')='' THEN ISNULL(PR.CmpInvNo,'')  ELSE ISNULL(PU.CmpInvNo,'') END AS CmpInvNo,
	PurRetDate,ReturnType,PRP.PrdUnitMRP,PRP.PrdSlNo,PrdCCode,PrdBatCode,PRP.RetSalBaseQty,PRP.RetUnSalBaseQty,0 AS FreeQty,ISNULL(RM.Description,'') AS Reason,
	PR.Discount,PR.LessScheme,PR.OtherCharges,PRP.PrdTaxAmount,PR.TaxAmount,PRP.PrdGrossAmount,PR.GrossAmount,PRP.PrdNetAmount,
	PR.NetAmount,ISNULL(PR.Remarks,'')AS Remarks,'N',@ServerDate
	FROM PurchaseReturn PR INNER JOIN PurchaseReturnProduct PRP ON PR.PurRetId=PRP.PurRetId
	INNER JOIN PRODUCT P ON P.PrdId=PRP.PrdId
	INNER JOIN ProductBatch PB ON PB.PrdId=PRP.PrdId AND PB.PrdBatId=PRP.PrdBatId AND PB.PrdId=P.PrdId
	INNER JOIN SUPPLIER S ON S.SpmId=PR.SpmId
	LEFT OUTER JOIN ReasonMaster RM ON RM.ReasonId=PRP.ReasonId
	LEFT OUTER JOIN PurchaseReceipt PU ON PU.PurRcptId=PR.PurRcptId	AND PU.CmpInvNo=PR.CmpInvNo AND PU.PurRcptRefNo=PR.PurRcptRefNo
	WHERE PR.Status=0 AND PR.GstUpload1=0
	UNION
	SELECT @DistCode,S.SpmCode,PR.PurRetRefNo,
	CASE  WHEN ISNULL(PU.PurRcptRefNo,'')='' THEN ISNULL(PR.PurRcptRefNo,'')  ELSE ISNULL(PU.PurRcptRefNo,'') END AS PurRcptRefNo,
	CASE  WHEN ISNULL(PU.InvDate,'')='' THEN ISNULL(PR.PurRetDate,'')  ELSE ISNULL(PU.InvDate,'') END AS InvDate,
	CASE  WHEN ISNULL(PU.CmpInvNo,'')='' THEN ISNULL(PR.CmpInvNo,'')  ELSE ISNULL(PU.CmpInvNo,'') END AS CmpInvNo,
	PurRetDate,ReturnType,0,0 AS PrdSlNo,PrdCCode,PrdBatCode,0 AS RetSalBaseQty,0 AS RetUnSalBaseQty,RetQty AS FreeQty,''  AS Reason,
	0 as Discount,0 AS LessScheme,0 AS OtherCharges,0 AS PrdTaxAmount,0 AS TaxAmount,0 AS PrdGrossAmount,0 AS GrossAmount,0 AS PrdNetAmount,
	0 AS NetAmount,ISNULL(PR.Remarks,'')AS Remarks,'N',@ServerDate
	FROM PurchaseReturn PR INNER JOIN PurchaseReturnClaimScheme PRP ON PR.PurRetId=PRP.PurRetId
	INNER JOIN PRODUCT P ON P.PrdId=PRP.PrdId
	INNER JOIN ProductBatch PB ON PB.PrdId=PRP.PrdId AND PB.PrdBatId=PRP.PrdBatId AND PB.PrdId=P.PrdId
	INNER JOIN SUPPLIER S ON S.SpmId=PR.SpmId
	INNER JOIN PurchaseReceipt PU ON PU.PurRcptId=PR.PurRcptId	AND PU.CmpInvNo=PR.CmpInvNo AND PU.PurRcptRefNo=PR.PurRcptRefNo
	INNER JOIN PurchaseReceiptClaimScheme PRS ON PRS.PurRcptId=PU.PurRcptId AND PRS.Prdid=PRP.Prdid and PRS.Prdbatid=PRP.Prdbatid
	WHERE PR.Status=0 AND PR.GstUpload1=0		
	
	UPDATE PurchaseReturn SET GstUpload1=1 WHERE GstUpload1=0 AND STATUS=0 AND PurRetRefNo IN (SELECT DISTINCT
	PurRetRefNo FROM Cs2Cn_Prk_PurchaseReturn_Approval WHERE UploadFlag = 'N')
END
GO
IF EXISTS(SELECT NAME FROM Sysobjects WHERE XTYPE='U' and NAME='ETL_Prk_PurchaseReturn')
DROP TABLE ETL_Prk_PurchaseReturn
GO
CREATE TABLE ETL_Prk_PurchaseReturn
(
 	Spmid			[Int],
 	ConPurRefNo		[NVARCHAR](100),
	SapCode			[NVARCHAR](200),	
	PurRetRefNo		[NVARCHAR](100),
	CmpInvNo		[NVARCHAR](100),
	GrnNo			[NVARCHAR](100),
	InvDate			[DATETIME],
	ReturnType		[INT],
	PurRcptid		[INT],
	Prdid			[INT],	
	PrdBatid		[INT],
	MRP				[NUMERIC](18,6),
	PrdSlNo			[Int],
	SalQuantity		[INT],
	UnSalQuantity	[INT],
	FreeQty			[INT],
	[Reason]		[Nvarchar](200), --Reason for Unsaleable Qty,
	Discount		[NUMERIC](18,6),
	LessScheme		[NUMERIC](18,6),
	OtherCharges	[NUMERIC](18,6),
	PrdTaxAmount	[NUMERIC](18,6),
	TotalTax		[NUMERIC](18,6),
	PrdGrossAmount	[NUMERIC](18,6),
	GrossAmount		[NUMERIC](18,6),
	PrdNetAmount	[NUMERIC](18,6),
 	NetAmount		[NUMERIC](18,6),
 	PurStatus		[VARCHAR](100),--APPROVED/REJECTED
 	Remarks			[NVARCHAR](200),
 	DownloadStatus	[INT],
 	Authid			[INT],
 	AuthDate		[DATETIME]
)
GO
DELETE FROM HotSearchEditorHd WHERE FormId=7003
INSERT INTO  HotSearchEditorHd 
SELECT 7003,'Purchase Return','CompanyInvoice','Select',' SELECT DISTINCT ConPurRefNo,InvDate,ReturnType FROM ETL_Prk_PurchaseReturn WHERE DownloadStatus=0'
GO
DELETE FROM HotSearchEditorDT WHERE FormId=7003
INSERT INTO HotSearchEditorDT 
SELECT 1,7003,'CompanyInvoice','ReferenceNo','ConPurRefNo',2500,0,'HotSch-7-2000-1',7  UNION
SELECT 2,7003,'CompanyInvoice','ReferenceNo','InvDate',2500,0,'HotSch-7-2000-2',7 
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='FN_ReturnDownloadPurchaseReturn' AND XTYPE='TF')
DROP FUNCTION FN_ReturnDownloadPurchaseReturn
GO
CREATE FUNCTION FN_ReturnDownloadPurchaseReturn(@CmpInvno AS NVARCHAR(50),@ReturnType AS INT)
RETURNS  @TABLE Table
(
	Slno				INT,
	PurRcptId			INT,
	PrdId				INT,	
	PrdCCode			NVARCHAR(50),
	PrdName				NVARCHAR(100),
	PrdBatId			INT,
	PrdBatCode			NVARCHAR(100),
	RcvdGoodBaseQty		INT,
	UnSalBaseQty		INT,
	ExsBaseQty			INT,
	RefuseSale			INT,
	Mrp					NUMERIC(18,6),
	listprice			NUMERIC(18,6),
	PriceId				INT,
	PrdGrossAmount		NUMERIC(18,6),
	PrdDiscount			NUMERIC(18,6),
	PrdTaxAmount		NUMERIC(18,6),
	PrdUnitNetRate		NUMERIC(18,6),
	PrdNetAmount		NUMERIC(18,6),
	rowid			    INT,
	PrdGrossAmtEditSts  INT,
	RcvdRetBaseQty	    INT,
	RetUnSalBaseQty	    INT

)
AS
BEGIN
	IF @ReturnType=2
	BEGIN 
		INSERT INTO @TABLE
		SELECT  ROW_NUMBER()OVER (ORDER BY PRDID)as  Slno,0 as PurRcptId,Prdid,PrdCCode,PrdName,PrdBatid,PrdBatCode,0 as SalQuantity,0 UnSalQuantity,
		0 AS ExsBaseQty,0 AS RefuseSale,SUM(isnull(MRP,0))MRP ,SUM(isnull(LISTPRICE,0)),PriceId,0 as PrdGrossAmount,0 as PrdDiscount,0 as PrdTaxAmount,
		0 as PrdUnitNetRate,0 as PrdNetAmount ,0 as rowid ,0 as PrdGrossAmtEditSts,SalQuantity,UnSalQuantity
		FROM
		(
		SELECT E.Prdid,PrdCCode,PrdName,E.PrdBatid,PrdBatCode 
			,isnull(CASE PBD.SLNO WHEN 1 THEN PrdBatDetailValue  END,0) AS MRP , isnull(CASE PBD.SLNO WHEN 2 THEN  PrdBatDetailValue END,0) AS LISTPRICE,
			PBD.PriceId,SalQuantity,UnSalQuantity
		FROM ETL_Prk_PurchaseReturn E INNER JOIN PRODUCT P ON P.PrdId=E.Prdid
		INNER JOIN ProductBatch PB ON PB.PrdId=P.PrdId AND PB.PrdBatId=E.PRDBATID
		INNER JOIN UomGroup U ON U.UomGroupId=P.UomGroupId AND BaseUom='Y'
		INNER JOIN ProductBatchDetails PBD ON PBD.PrdBatId=E.PrdBatid AND PBD.PRDBATID=PB.PrdBatId AND PBD.DefaultPrice=1 AND SLNO IN (1,2)
		)A  group by  Prdid,PrdCCode,PrdName,PrdBatid,PrdBatCode,PriceId,SalQuantity,UnSalQuantity
	END
				
	
RETURN
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Cn2Cs_PurchaseReturn' AND XTYPE='P')
DROP PROCEDURE Proc_Cn2Cs_PurchaseReturn
GO
/*
BEGIN Transaction
Delete from ErrorLog
exec Proc_Cn2Cs_PurchaseReturn 0
--select * from ErrorLog
Rollback Transaction 
*/
CREATE PROCEDURE [dbo].[Proc_Cn2Cs_PurchaseReturn]
(
	@Po_ErrNo INT OUTPUT
)
AS
/*******************************************************
* PROCEDURE		: Proc_Cn2Cs_PurchaseReturn
* PURPOSE		: To validate the downloaded PurchaseReturn
* CREATED BY	: Karthick KJ
* CREATED DATE	: 2017/05/09
* NOTE			:
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
-------------------------------------------------------
* {date} {developer}  {brief modification description}
	
*******************************************************/
SET NOCOUNT ON
BEGIN
	DECLARE @Tabname AS VARCHAR(100) 	
 	
	SET @Po_ErrNo=0
	SET @Tabname='Cn2Cs_Prk_PurchaseReturn'
	
  BEGIN TRY
		DELETE FROM Cn2Cs_Prk_PurchaseReturn WHERE DownLoadFlag='Y'
		DELETE FROM ETL_Prk_PurchaseReturn WHERE DOWNLOADSTATUS=1
	BEGIN TRANSACTION 
	
	CREATE TABLE #Avoid 
	( 
		PurRetRefNo Nvarchar(100),
		ConPurRefNo  Nvarchar(100)
	)

	CREATE TABLE #PurchaseReturnProduct
	(
		PurRetid	  INT,
		Prdid		  INT, 
		Prdbatid	  INT,
		Prdslno		  INT,
		SalQuantity	  INT,
		UnSalQuantity INT,
		FreeQty		  INT 
	)

	CREATE TABLE #DownloadPurchaseReturnProduct
	(
		ConPurRefNo	  NVARCHAR(50),
		CmpInvNo	  NVARCHAR(50),
		Prdid		  INT, 
		Prdbatid	  INT,
		PrdSlno		  INT,
		SalQuantity	  INT,
		UnSalQuantity INT,
		FreeQty		  INT 
	)

	CREATE TABLE #PurchaseReceiptProduct
	(
		CmpInvNo	  NVARCHAR(50),
		PurRcptid	  INT,
		Prdid		  INT, 
		Prdbatid	  INT,
		PrdCnt		  INT,
		MRP			  NUMERIC(18,6),
		SalQuantity	  INT,
		UnSalQuantity INT,
		FreeQty		  INT 
	)
	CREATE TABLE #PurchaseReceiptFreeProduct
	(
		CmpInvNo	  NVARCHAR(50),
		PurRcptid	  INT,
		Prdid		  INT, 
		Prdbatid	  INT,
		PrdCnt		  INT,
		FreeQty		  INT 
	)
		  
	SELECT DISTINCT PurchaseType,ConPurRefNo,PurRetRefNo,SapCode,SupPlierCode,CmpInvNo,PurRetDate,ReturnType,MRP,PrdSlNo,Prdcode,BatchCode,
		SalQuantity,UnSalQuantity,FreeQty,Reason,Discount,LessScheme,OtherCharges,PrdTaxAmount,TotalTax,PrdGrossAmount,GrossAmount,
		PrdNetAmount,NetAmount,PurStatus,Remarks INTO #Cn2Cs_Prk_PurchaseReturn 
	FROM Cn2Cs_Prk_PurchaseReturn WHERE DownLoadFlag='D'

	SELECT PurchaseType,ConPurRefNo,PurRetRefNo,SapCode,SupPlierCode,CmpInvNo,PurRetDate,ReturnType,MRP,PrdSlNo,Prdcode,BatchCode,
		   SalQuantity,UnSalQuantity,FreeQty,Reason,Discount,LessScheme,OtherCharges,PrdTaxAmount,TotalTax,PrdGrossAmount,GrossAmount,
		   PrdNetAmount,NetAmount,PurStatus,Remarks INTO #ETL_Prk_PurchaseReturn
	FROM #Cn2Cs_Prk_PurchaseReturn WHERE 1=2
	
	INSERT INTO #Avoid
	SELECT DISTINCT PurRetRefNo,ConPurRefNo FROM #Cn2Cs_Prk_PurchaseReturn WHERE SupPlierCode NOT IN (SELECT SpmCode FROM supplier(NOLOCK)) UNION
 	SELECT DISTINCT PurRetRefNo,ConPurRefNo FROM #Cn2Cs_Prk_PurchaseReturn WHERE ReturnType=1 AND CmpInvNo NOT IN (SELECT CmpInvNo FROM PurchaseReceipt(NOLOCK) WHERE Status=1) UNION
 	SELECT DISTINCT PurRetRefNo,ConPurRefNo FROM #Cn2Cs_Prk_PurchaseReturn WHERE Prdcode NOT IN (SELECT PrdCCode FROM Product(NOLOCK)) UNION
 	SELECT DISTINCT PurRetRefNo,ConPurRefNo FROM #Cn2Cs_Prk_PurchaseReturn WHERE BatchCode NOT IN (SELECT PrdBatCode FROM ProductBatch(NOLOCK)) UNION
 	SELECT DISTINCT PurRetRefNo,ConPurRefNo FROM #Cn2Cs_Prk_PurchaseReturn C(NOLOCK) INNER JOIN Product P(NOLOCK) ON P.PrdCCode=C.Prdcode 
 				INNER JOIN ProductBatch PB(NOLOCK) ON PB.PrdBatCode=C.BatchCode AND P.PrdId=PB.PrdId
 		WHERE ReturnType=1 and FreeQty=0 AND NOT EXISTS(SELECT * FROM PurchaseReceipt PR(NOLOCK) INNER JOIN PurchaseReceiptProduct PRP(NOLOCK) ON PR.PurRcptId=PRP.PurRcptId 
 		WHERE PR.CmpInvNo=C.CmpInvNo AND PRP.PrdId=P.PrdId  AND PRP.PrdBatId=PB.PrdBatId) UNION
 	SELECT DISTINCT PurRetRefNo,ConPurRefNo FROM #Cn2Cs_Prk_PurchaseReturn  GROUP BY PurRetRefNo,ConPurRefNo  HAVING SUM(SalQuantity+UnSalQuantity+FreeQty)=0 UNION
 	--SELECT DISTINCT PurRetRefNo,ConPurRefNo FROM #Cn2Cs_Prk_PurchaseReturn WHERE PrdNetAmount=0 UNION
 	--SELECT DISTINCT PurRetRefNo,ConPurRefNo FROM #Cn2Cs_Prk_PurchaseReturn WHERE NetAmount=0  UNION
	--SELECT DISTINCT PurRetRefNo,ConPurRefNo FROM #Cn2Cs_Prk_PurchaseReturn WHERE ISNULL(SapCode,'')='' AND PurchaseType=2  UNION
	SELECT DISTINCT PurRetRefNo,ConPurRefNo FROM #Cn2Cs_Prk_PurchaseReturn WHERE PurchaseType=2 AND ISNULL(ConPurRefNo,'')=''UNION
	SELECT DISTINCT PurRetRefNo,ConPurRefNo FROM #Cn2Cs_Prk_PurchaseReturn WHERE UPPER(PurStatus) NOT IN('APPROVED','REJECTED') UNION
	SELECT DISTINCT PurRetRefNo,ConPurRefNo FROM #Cn2Cs_Prk_PurchaseReturn C(NOLOCK) INNER JOIN Product P(NOLOCK) ON P.PrdCCode=C.Prdcode 
 				INNER JOIN ProductBatch PB(NOLOCK) ON PB.PrdBatCode=C.BatchCode AND P.PrdId=PB.PrdId
 		WHERE ReturnType=1 and FreeQty>0 and SalQuantity=0 and UnSalQuantity=0 
 		AND NOT EXISTS(SELECT * FROM PurchaseReceipt PR(NOLOCK) INNER JOIN PurchaseReceiptClaimscheme PRP(NOLOCK) ON PR.PurRcptId=PRP.PurRcptId 
 		WHERE PR.CmpInvNo=C.CmpInvNo AND PRP.PrdId=P.PrdId  AND PRP.PrdBatId=PB.PrdBatId)
 		
 		

	SELECT PurRetRefNo,PRDID,PRDBATID,SUM(RetSalBaseQty) AS BaseQty,SUM(RetUnSalBaseQty)AS UnSalQty 
			INTO #PURCHASE FROM PurchaseReturn PR (NOLOCK)
	INNER JOIN PurchaseReturnProduct PRP(NOLOCK) ON PR.PurRetId=PRP.PurRetId 
	WHERE Status=0 	AND PurRetRefNo IN (SELECT PurRetRefNo FROM #Cn2Cs_Prk_PurchaseReturn )
	GROUP BY PurRetRefNo,PRDID,PRDBATID 

	INSERT INTO #Avoid
 	SELECT DISTINCT  C.PurRetRefNo,ConPurRefNo FROM #Cn2Cs_Prk_PurchaseReturn C INNER JOIN Product P(NOLOCK) ON P.PrdCCode=C.Prdcode 
 					INNER JOIN ProductBatch PB(NOLOCK) ON PB.PrdBatCode=C.BatchCode AND P.PrdId=PB.PrdId
 		INNER JOIN #PURCHASE PU ON PU.PurRetRefNo=C.PurRetRefNo AND  PU.PrdId=P.PrdId  AND PU.PrdBatId=PB.PrdBatId 
 		AND (SalQuantity+UnSalQuantity)>(BaseQty+UnSalQty)  
 		
 
	
	--FRee Qty Validate
	SELECT PurRetRefNo,PRDID,PRDBATID,SUM(RetQty) AS FreeQty INTO #PURCHASEFree 
	FROM PurchaseReturn PR (NOLOCK)
	INNER JOIN PurchaseReturnClaimScheme PRP(NOLOCK) ON PR.PurRetId=PRP.PurRetId 
	WHERE Status=0 	AND PurRetRefNo IN (SELECT PurRetRefNo FROM #Cn2Cs_Prk_PurchaseReturn )
	GROUP BY PurRetRefNo,PRDID,PRDBATID 

	INSERT INTO #Avoid
 	SELECT DISTINCT  C.PurRetRefNo,ConPurRefNo FROM #Cn2Cs_Prk_PurchaseReturn C INNER JOIN Product P(NOLOCK) ON P.PrdCCode=C.Prdcode 
 					INNER JOIN ProductBatch PB(NOLOCK) ON PB.PrdBatCode=C.BatchCode AND P.PrdId=PB.PrdId
 		INNER JOIN #PURCHASEFree PU ON PU.PurRetRefNo=C.PurRetRefNo AND  PU.PrdId=P.PrdId  AND PU.PrdBatId=PB.PrdBatId  AND C.FreeQty>0
 		AND (C.FreeQty)>(PU.FreeQty)  
 		
 		
 	
 		
 	

INSERT INTO Errorlog 
	SELECT 1,@Tabname,'SupCode',PurRetRefNo+'Supplier Code Does not Exists' FROM #Cn2Cs_Prk_PurchaseReturn WHERE SupPlierCode NOT IN (SELECT SpmCode FROM supplier(NOLOCK))UNION
 	SELECT 2,@Tabname,'CmpInvNo',PurRetRefNo+'Company InvoiceNo Does not Exists' FROM #Cn2Cs_Prk_PurchaseReturn WHERE returntype=1 AND CmpInvNo NOT IN (SELECT CmpInvNo FROM PurchaseReceipt(NOLOCK) WHERE Status=1) UNION
 	SELECT 3,@Tabname,'Prdcode',PurRetRefNo+'Product Code Does not Exists' FROM #Cn2Cs_Prk_PurchaseReturn WHERE Prdcode NOT IN (SELECT PrdCCode FROM Product(NOLOCK)) UNION
 	SELECT 4,@Tabname,'BatchCode',PurRetRefNo+'Batch Code Does not Exists' FROM #Cn2Cs_Prk_PurchaseReturn WHERE BatchCode NOT IN (SELECT PrdBatCode FROM ProductBatch(NOLOCK)) UNION
 	SELECT 5,@Tabname,'Prdcode',PurRetRefNo+'Product Does not Exists in Purchase' FROM #Cn2Cs_Prk_PurchaseReturn C(NOLOCK) INNER JOIN Product P(NOLOCK) ON P.PrdCCode=C.Prdcode 
 				INNER JOIN ProductBatch PB(NOLOCK) ON PB.PrdBatCode=C.BatchCode AND P.PrdId=PB.PrdId
 	WHERE ReturnType=1  and FreeQty=0 AND NOT EXISTS(SELECT * FROM PurchaseReceipt PR(NOLOCK) INNER JOIN PurchaseReceiptProduct PRP(NOLOCK) ON PR.PurRcptId=PRP.PurRcptId 
 	WHERE PR.CmpInvNo=C.CmpInvNo AND PRP.PrdId=P.PrdId  AND PRP.PrdBatId=PB.PrdBatId) UNION
 	SELECT 6,@Tabname,'SalQuantity',PurRetRefNo+'Purchase Return Quantity Cannot be Zero' FROM #Cn2Cs_Prk_PurchaseReturn  GROUP BY PurRetRefNo  HAVING SUM(SalQuantity+UnSalQuantity)=0 UNION
 	--SELECT 7,@Tabname,'PrdNetAmount',PurRetRefNo+'Product NetAmount Cannot be Zero' FROM #Cn2Cs_Prk_PurchaseReturn WHERE PrdNetAmount=0 UNION
 	--SELECT 8,@Tabname,'NetAmount',PurRetRefNo+'NetAmount Cannot be Zero' FROM #Cn2Cs_Prk_PurchaseReturn WHERE NetAmount=0 UNION
 	SELECT 9,@Tabname,'SalQuantity',C.PurRetRefNo+' Return Quantity Cannot be Greater than Purchase Quantity' FROM #Cn2Cs_Prk_PurchaseReturn C INNER JOIN Product P(NOLOCK) ON P.PrdCCode=C.Prdcode 
 					INNER JOIN ProductBatch PB(NOLOCK) ON PB.PrdBatCode=C.BatchCode AND P.PrdId=PB.PrdId
 		INNER JOIN #PURCHASE PU ON PU.PurRetRefNo=C.PurRetRefNo AND  PU.PrdId=P.PrdId  AND PU.PrdBatId=PB.PrdBatId 
 		AND (SalQuantity+UnSalQuantity)>(BaseQty+UnSalQty) 
  --SELECT 10,@Tabname,'SapCode',PurRetRefNo+'SapCode Cannot be Null' FROM #Cn2Cs_Prk_PurchaseReturn WHERE ISNULL(SapCode,'')='' UNION
	SELECT 11,@Tabname,'ConPurRefNo',PurRetRefNo+'ConPurRefNo Cannot be Null' FROM #Cn2Cs_Prk_PurchaseReturn WHERE PurchaseType=2 AND ISNULL(ConPurRefNo,'')=''
 	SELECT 12,@Tabname,'FreeQty',C.PurRetRefNo+' Return Free Quantity Cannot be Greater than Purchase Quantity' FROM #Cn2Cs_Prk_PurchaseReturn C INNER JOIN Product P(NOLOCK) ON P.PrdCCode=C.Prdcode 
 					INNER JOIN ProductBatch PB(NOLOCK) ON PB.PrdBatCode=C.BatchCode AND P.PrdId=PB.PrdId
 		INNER JOIN #PURCHASEFree PU ON PU.PurRetRefNo=C.PurRetRefNo AND  PU.PrdId=P.PrdId  AND PU.PrdBatId=PB.PrdBatId  AND (C.FreeQty)>(PU.FreeQty)    UNION
	SELECT 13,@Tabname,'PurStatus',PurRetRefNo+' Purchase Status Should be Rejected or Approved' FROM #Cn2Cs_Prk_PurchaseReturn WHERE UPPER(PurStatus) NOT IN('APPROVED','REJECTED') UNION
	SELECT 14,@Tabname,'Prdcode',PurRetRefNo+'Free Product Does not Exists in Purchase' FROM #Cn2Cs_Prk_PurchaseReturn C(NOLOCK) INNER JOIN Product P(NOLOCK) ON P.PrdCCode=C.Prdcode 
 	INNER JOIN ProductBatch PB(NOLOCK) ON PB.PrdBatCode=C.BatchCode AND P.PrdId=PB.PrdId
 	WHERE ReturnType=1  and FreeQty>0 and SalQuantity=0 and UnSalQuantity=0
 	AND NOT EXISTS(SELECT * FROM PurchaseReceipt PR(NOLOCK) INNER JOIN PurchaseReceiptClaimscheme PRP(NOLOCK) ON PR.PurRcptId=PRP.PurRcptId 
 	WHERE PR.CmpInvNo=C.CmpInvNo AND PRP.PrdId=P.PrdId  AND PRP.PrdBatId=PB.PrdBatId)
 	
 
	
	DECLARE @ConPurRefNo AS NVARCHAR(100)
	DECLARE @PurRetid AS INT
	DECLARE @PurRetRefNo AS NVARCHAR(100)
	DECLARE @Prdid AS INT 
	DECLARE @PrdBatid AS INT
	DECLARE @SalQuantity AS INT
	DECLARE @UnSalQuantity AS INT
	DECLARE @Prdslno AS INT
	DECLARE @PrdCcode AS NVARCHAR(50)
	DECLARE @BatchCode AS NVARCHAR(100)
	DECLARE @FreeQty AS INT
	DECLARE @CmpInvNo AS NVARCHAR(50)
	DECLARE @MRP AS NUMERIC(18,6)
	DECLARE @PurRetDate AS DATETIME
	DECLARE @ReturnType AS INT
	DECLARE @PurStatus AS VARCHAR(50)
	DECLARE @Lcnid AS INT
	DECLARE @Pi_PBLError AS INT
	DECLARE @Pi_SLError AS INT
	
----PURCHASE RETURN UPLOADED FROM CORESTOCKY
 SELECT DISTINCT PurRetRefNo,PurStatus
		FROM #Cn2Cs_Prk_PurchaseReturn WHERE PurChaseType=1 AND PurRetRefNo 
		NOT IN (SELECT PurRetRefNo FROM #Avoid) AND ISNULL(PurRetRefNo,'')<>''  

		
	DECLARE CUR_PurchaseReturn CURSOR 
	FOR SELECT DISTINCT PurRetRefNo,PurStatus
		FROM #Cn2Cs_Prk_PurchaseReturn WHERE PurChaseType=1 AND PurRetRefNo 
		NOT IN (SELECT PurRetRefNo FROM #Avoid) AND ISNULL(PurRetRefNo,'')<>''  
 	OPEN CUR_PurchaseReturn
	FETCh NEXT FROM CUR_PurchaseReturn INTO @PurRetRefNo,@PurStatus
	WHILE @@FETCH_STATUS=0
	BEGIN	
		SET @Po_ErrNo=0
		SET @Pi_PBLError=0
		SET @Pi_SLError=0
		
		DELETE FROM #PurchaseReturnProduct
 
		IF EXISTS(SELECT * FROM PURCHASERETURN WHERE PurRetRefNo=@PurRetRefNo AND GstUpload1=1)
		BEGIN 
		
			DECLARE CUR_PurchaseReturnProduct CURSOR 
			FOR SELECT DISTINCT	PurRetid,PrdCcode,P.prdid,PB.prdbatid,C.Prdslno,SalQuantity,UnSalQuantity,FreeQty,PR.lcnid,PR.PurRetDate
			FROM #Cn2Cs_Prk_PurchaseReturn C INNER JOIN PRODUCT P ON P.PRDCCODE=C.PRDCODE 
				INNER JOIN PRODUCTBATCH PB ON PB.PrdBatcode=C.BatchCode	 AND PB.PRDID=P.PRDID
				INNER JOIN PurchaseReturn PR ON PR.CmpInvNo=C.CmpInvNo AND PR.PurRetRefNo=C.PurRetRefNo AND PR.PurRetDate=C.PurRetDate
				WHERE PurChaseType=1 AND C.PurRetRefNo=@PurRetRefNo
 			OPEN CUR_PurchaseReturnProduct 
			FETCh NEXT FROM CUR_PurchaseReturnProduct INTO @PurRetid,@PrdCcode,@Prdid,@Prdbatid,@Prdslno,@SalQuantity,@UnSalQuantity,@FreeQty,@Lcnid,@PurRetDate
			WHILE @@FETCH_STATUS=0
			BEGIN		
			
			  IF @PurStatus='APPROVED'
			  BEGIN
			    IF @SalQuantity>0 OR @UnSalQuantity>0
			     BEGIN
					IF EXISTS(SELECT 'A' FROM PurchaseReturnProduct WHERE PurRetid=@PurRetid AND Prdid= @Prdid AND Prdbatid=@Prdbatid AND prdslno=@Prdslno
							AND (OrgRetSalBaseQty>=@SalQuantity) AND (OrgRetUnSalBaseQty>=@UnSalQuantity))
					BEGIN
						INSERT INTO #PurchaseReturnProduct(PurRetid,Prdid,Prdbatid,Prdslno,SalQuantity,UnSalQuantity,FreeQty)
						SELECT @PurRetid,@Prdid,@Prdbatid,@Prdslno,@SalQuantity,@UnSalQuantity,0 
					END
					ELSE
					BEGIN
						SET @Po_ErrNo=1
						INSERT INTO Errorlog 
						SELECT 1,@Tabname,'SalQuantity',@PurRetRefNo+'Returned Quantity Greater than Original Quanity for Product'+ @PrdCcode  
					END
				END
					
					IF @FreeQty>0 
					BEGIN
						IF EXISTS(SELECT 'A' FROM PurchaseReturnClaimScheme WHERE PurRetid=@PurRetid AND Prdid= @Prdid AND Prdbatid=@Prdbatid  
								  AND (RetQty>=@FreeQty))
						BEGIN
							INSERT INTO #PurchaseReturnProduct(PurRetid,Prdid,Prdbatid,Prdslno,SalQuantity,UnSalQuantity,FreeQty)
							SELECT @PurRetid,@Prdid,@Prdbatid,0,0,0,@FreeQty 
						END
						ELSE
						BEGIN
							SET @Po_ErrNo=1
							INSERT INTO Errorlog 
							SELECT 1,@Tabname,'SalQuantity/UnSalQuantity',@PurRetRefNo+'Returned Free Quantity Greater than Original free Quanity for Product'+ @PrdCcode  
						END
					 END	
			   END	

		    IF @PurStatus='REJECTED'
			  BEGIN  				
			    IF @SalQuantity>0 
			    BEGIN
					EXEC Proc_UpdateProductBatchLocation 4,2,@Prdid,@Prdbatid,@Lcnid,@PurRetDate,@SalQuantity,1,@Pi_PBLError  OUTPUT--Saleable reserved Stock
					IF @Pi_PBLError<>0
					BEGIN
						SET @Po_ErrNo=1
						RETURN
					END
					
					EXEC Proc_UpdateStockLedger 4,2,@Prdid,@Prdbatid,@Lcnid,@PurRetDate,@SalQuantity,1,@Pi_SLError OUT 
					IF @Pi_SLError<>0
					BEGIN
						SET @Po_ErrNo=1
						RETURN
					END					
				END
				IF @UnSalQuantity>0
				BEGIN
					EXEC Proc_UpdateProductBatchLocation 5,2,@Prdid,@Prdbatid,@Lcnid,@PurRetDate,@UnSalQuantity,1,@Pi_PBLError  OUTPUT--UnSaleable reserved Stock
					IF @Pi_PBLError<>0
					BEGIN
						SET @Po_ErrNo=1
						RETURN
					END
					
					EXEC Proc_UpdateStockLedger 5,2,@Prdid,@Prdbatid,@Lcnid,@PurRetDate,@UnSalQuantity,1,@Pi_SLError OUT 
					IF @Pi_SLError<>0
					BEGIN
						SET @Po_ErrNo=1
						RETURN
					END						
				END
				IF @FreeQty>0
				BEGIN
					EXEC Proc_UpdateProductBatchLocation 6,2,@Prdid,@Prdbatid,@Lcnid,@PurRetDate,@UnSalQuantity,1,@Pi_PBLError  OUTPUT--Free reserved Stock
					IF @Pi_PBLError<>0
					BEGIN
						SET @Po_ErrNo=1
						RETURN
					END
					
					EXEC Proc_UpdateStockLedger 6,2,@Prdid,@Prdbatid,@Lcnid,@PurRetDate,@UnSalQuantity,1,@Pi_SLError OUT 
					IF @Pi_SLError<>0
					BEGIN
						SET @Po_ErrNo=1
						RETURN
					END						
				END
			  END
			  
			FETCh NEXT FROM CUR_PurchaseReturnProduct INTO @PurRetid,@PrdCcode,@Prdid,@Prdbatid,@Prdslno,@SalQuantity,@UnSalQuantity,@FreeQty,@Lcnid,@PurRetDate
			END
			CLOSE CUR_PurchaseReturnProduct
			DEALLOCATE CUR_PurchaseReturnProduct
		 END
		 ELSE
		 BEGIN
			SET @Po_ErrNo=1
			INSERT INTO Errorlog 
			SELECT 1,@Tabname,'PurRetRefNo',PurRetRefNo+'Purchase Return Already Approved' FROM #Cn2Cs_Prk_PurchaseReturn WHERE PurRetRefNo=@PurRetRefNo
		 END
		
		IF @Po_ErrNo=0 AND UPPER(@PurStatus)='APPROVED'
		BEGIN			
			UPDATE P SET RetSalBaseQty=SalQuantity,RetUnSalBaseQty=UnSalQuantity,RetInvBaseQty=(SalQuantity+UnSalQuantity) 
			FROM PurchaseReturnProduct P INNER JOIN  #PurchaseReturnProduct PP ON 
			P.Prdid=PP.Prdid AND P.PrdBatId=PP.Prdbatid AND P.PrdSlNo=PP.Prdslno AND P.PurRetid=PP.PurRetid
			WHERE (SalQuantity+UnSalQuantity) >0

			UPDATE P SET P.RetQty=FreeQty FROM PurchaseReturnClaimScheme P 
			INNER JOIN  #PurchaseReturnProduct PP ON P.Prdid=PP.Prdid AND P.PrdBatId=PP.Prdbatid AND P.PurRetid=PP.PurRetid
			WHERE (FreeQty) >0			
			
			UPDATE PurchaseReturn SET GstUpload1=2 WHERE  PurRetRefNo=@PurRetRefNo AND PurRetid=@PurRetid
			
			UPDATE Cn2Cs_Prk_PurchaseReturn SET DOWNLOADFLAG='Y'  WHERE PurRetRefNo=@PurRetRefNo
			
 		END		
 		ELSE
 		BEGIN
 			DELETE FROM #PurchaseReturnProduct WHERE PurRetid=@PurRetid
 		END	

		IF @Po_ErrNo=0 AND UPPER(@PurStatus)='REJECTED'
		BEGIN			
			UPDATE PurchaseReturn SET Status=3, GstUpload1=2 WHERE  PurRetRefNo=@PurRetRefNo AND PurRetid=@PurRetid
			
			UPDATE Cn2Cs_Prk_PurchaseReturn SET DOWNLOADFLAG='Y'  WHERE PurRetRefNo=@PurRetRefNo
			
 		END		
 		ELSE
 		BEGIN
 			DELETE FROM #PurchaseReturnProduct WHERE PurRetid=@PurRetid
 		END	
 		 		
	FETCh NEXT FROM CUR_PurchaseReturn INTO @PurRetRefNo,@PurStatus
	END
	CLOSE CUR_PurchaseReturn
	DEALLOCATE CUR_PurchaseReturn
--------------------------------------------------------	

 ---PURCHASE RETURN RAISED FROM CONSOLE
 
	INSERT INTO #PurchaseReceiptProduct(CmpInvNo,PurRcptid,Prdid,Prdbatid,PrdCnt,MRP,SalQuantity,UnSalQuantity,FreeQty)	
	SELECT CmpInvNo,PR.PurRcptId,PrdId,PrdBatId,COUNT(PrdId)PrdCnt,PRP.PrdUnitMRP,SUM(RcvdGoodBaseQty-RetRcvdBaseQty)SalQuantity,SUM(UnSalBaseQty-RetUnSalBaseQty)UnSalQuantity,0 AS FreeQty
	FROM PURCHASERECEIPT PR  INNER JOIN PurchaseReceiptProduct PRP ON PR.PurRcptId=PRP.PurRcptId
	WHERE CmpInvNo=CmpInvNo AND PrdId=@Prdid AND PrdBatId=@Prdbatid AND CmpInvNo IN
	(SELECT CmpInvNo from #Cn2Cs_Prk_PurchaseReturn) GROUP BY CmpInvNo,PR.PurRcptId,PrdId,PrdBatId,PRP.PrdUnitMRP 
	
	INSERT INTO #PurchaseReceiptFreeProduct
	SELECT CmpInvNo,PR.PurRcptId,PrdId,PrdBatId,COUNT(PrdId)PrdCnt,SUM(Quantity) 
	FROM PURCHASERECEIPT PR  INNER JOIN PurchaseReceiptClaimScheme PRP ON PR.PurRcptId=PRP.PurRcptId
	WHERE CmpInvNo=CmpInvNo AND PrdId=@Prdid AND PrdBatId=@Prdbatid AND CmpInvNo IN
	(SELECT CmpInvNo from #Cn2Cs_Prk_PurchaseReturn) GROUP BY CmpInvNo,PR.PurRcptId,PrdId,PrdBatId
	
  	DECLARE CUR_PurchaseReturn_Con CURSOR 
	FOR SELECT DISTINCT ConPurRefNo,ReturnType,PurRetDate FROM #Cn2Cs_Prk_PurchaseReturn 
		WHERE PurChaseType=2  AND ConPurRefNo NOT IN (SELECT ConPurRefNo FROM #Avoid) AND ISNULL(ConPurRefNo,'')<>''
		ORDER BY Returntype
 	OPEN CUR_PurchaseReturn_Con
	FETCh NEXT FROM CUR_PurchaseReturn_Con INTO @ConPurRefNo,@ReturnType,@PurRetDate
	WHILE @@FETCH_STATUS=0
	BEGIN	
	 
	 SET @Po_ErrNo=0
	  IF NOT  EXISTS(SELECT 'Q' FROM PurchaseReturn WHERE CmpInvNo=@ConPurRefNo)		
	  BEGIN 
	 
		   IF @ReturnType=1---WITH REFERENCE
		   BEGIN
				DELETE FROM #ETL_Prk_PurchaseReturn
				DECLARE CUR_PurchaseReturnProduct_Con CURSOR 
				FOR SELECT DISTINCT	CmpInvNo,PrdCcode,BatchCode,P.prdid,PB.prdbatid,MRP,C.Prdslno,SUM(SalQuantity),SUM(UnSalQuantity),SUM(FreeQty) 
				FROM #Cn2Cs_Prk_PurchaseReturn C INNER JOIN PRODUCT P ON P.PRDCCODE=C.PRDCODE 
					INNER JOIN PRODUCTBATCH PB ON PB.PrdBatcode=C.BatchCode	 AND PB.PRDID=P.PRDID
					WHERE PurChaseType=2 AND Returntype=1 AND C.ConPurRefNo=@ConPurRefNo
					GROUP BY CmpInvNo,PrdCcode,P.prdid,PB.prdbatid,MRP,C.Prdslno,BatchCode
 				OPEN CUR_PurchaseReturnProduct_Con 
				FETCh NEXT FROM CUR_PurchaseReturnProduct_Con INTO @CmpInvNo,@PrdCcode,@BatchCode,@Prdid,@Prdbatid,@MRP,@Prdslno,@SalQuantity,@UnSalQuantity,@FreeQty
				WHILE @@FETCH_STATUS=0
				BEGIN
					IF EXISTS(SELECT * FROM #PurchaseReceiptProduct	WHERE CmpInvNo=@CmpInvNo AND PrdId=@Prdid AND @Prdbatid=@Prdbatid 
					AND MRP=@MRP and  SalQuantity>=@SalQuantity and UnSalQuantity>=@UnSalQuantity and PrdCnt=1)
					BEGIN
						INSERT INTO #DownloadPurchaseReturnProduct(ConPurRefNo,CmpInvNo,Prdid,Prdbatid,PrdSlno,SalQuantity,UnSalQuantity,FreeQty)
						SELECT  @ConPurRefNo,@CmpInvNo,@Prdid,@Prdbatid,@Prdslno,@SalQuantity,@UnSalQuantity,@FreeQty
					END
					
					IF EXISTS(SELECT * FROM #PurchaseReceiptProduct	WHERE CmpInvNo=@CmpInvNo AND PrdId=@Prdid AND @Prdbatid=@Prdbatid 
					AND   FreeQty>=@FreeQty and PrdCnt=1)
					BEGIN
						INSERT INTO #DownloadPurchaseReturnProduct(ConPurRefNo,CmpInvNo,Prdid,Prdbatid,PrdSlno,SalQuantity,UnSalQuantity,FreeQty)
						SELECT  @ConPurRefNo,@CmpInvNo,@Prdid,@Prdbatid,@Prdslno,0,0,@FreeQty
					END				
					
					IF EXISTS(SELECT * FROM #PurchaseReceiptProduct	WHERE CmpInvNo=@CmpInvNo AND PrdId=@Prdid AND @Prdbatid=@Prdbatid 
					AND MRP=@MRP and  SalQuantity<@SalQuantity and UnSalQuantity<@UnSalQuantity )
					BEGIN
							SET @Po_ErrNo=1
							INSERT INTO Errorlog 
							SELECT 1,@Tabname,'SalQuantity/UnSalQuantity',@PurRetRefNo+'Returned Quantity Greater than Original Quanity for Product'++ @PrdCcode  
							BREAK
					END
					
					IF EXISTS(SELECT * FROM #PurchaseReceiptFreeProduct	WHERE CmpInvNo=@CmpInvNo AND PrdId=@Prdid AND @Prdbatid=@Prdbatid AND 
					 FreeQty<@FreeQty )
					BEGIN
							SET @Po_ErrNo=1
							INSERT INTO Errorlog 
							SELECT 1,@Tabname,'Free',@PurRetRefNo+'Returned Free Quantity Greater than Original Quanity for Product'++ @PrdCcode  
							BREAK
					END
												 	
				FETCh NEXT FROM CUR_PurchaseReturnProduct_Con INTO @CmpInvNo,@PrdCcode,@BatchCode,@Prdid,@Prdbatid,@MRP,@Prdslno,@SalQuantity,@UnSalQuantity,@FreeQty
				END
				CLOSE CUR_PurchaseReturnProduct_Con
				DEALLOCATE CUR_PurchaseReturnProduct_Con
		
				IF @Po_ErrNo=0 
				BEGIN
					INSERT INTO ETL_Prk_PurchaseReturn(Spmid,ConPurRefNo,SapCode,PurRetRefNo,CmpInvNo,GrnNo,InvDate,ReturnType,PurRcptid,Prdid,PrdBatid,MRP,PrdSlNo,
						SalQuantity,UnSalQuantity,FreeQty,Reason,Discount,LessScheme,OtherCharges,PrdTaxAmount,TotalTax,PrdGrossAmount,GrossAmount,PrdNetAmount,NetAmount,
						PurStatus,Remarks,DownloadStatus,Authid,AuthDate)
											
					SELECT SpmId,@ConPurRefNo,'','',D.CmpInvNo,PR.PurRcptRefNo,@PurRetDate,1,0,D.prdid,D.prdbatid,PRP.PrdUnitMRP,D.PrdSlno,SalQuantity,
					UnSalBaseQty,0,'',0,0,0,0,0,0,0,0,0,'APPROVED','',0,1,GETDATE()
					FROM #DownloadPurchaseReturnProduct D INNER JOIN PurchaseReceipt PR ON D.CmpInvNo=PR.CmpInvNo
					inner join PurchaseReceiptProduct PRP ON PRP.PurRcptId=PR.PurRcptId and D.Prdid=PRP.PrdId AND D.Prdbatid=PRP.PrdBatId	
				and PRP.PrdSlNo=D.PrdSlno WHERE ConPurRefNo=@ConPurRefNo 

				END				
			END

			IF @ReturnType=2----WITHOUT REFERENCE
			BEGIN
				INSERT INTO ETL_Prk_PurchaseReturn(Spmid,ConPurRefNo,SapCode,PurRetRefNo,CmpInvNo,GrnNo,InvDate,ReturnType,PurRcptid,Prdid,PrdBatid,MRP,PrdSlNo,
				SalQuantity,UnSalQuantity,FreeQty,Reason,Discount,LessScheme,OtherCharges,PrdTaxAmount,TotalTax,PrdGrossAmount,GrossAmount,PrdNetAmount,NetAmount,
				PurStatus,Remarks,DownloadStatus,Authid,AuthDate)

				SELECT S.SpmId,ConPurRefNo,SapCode,PurRetRefNo,CmpInvNo,'',@PurRetDate,2,0,P.PrdId,PB.PrdBatId,MRP,0,SalQuantity,UnSalQuantity,FreeQty,Reason,Discount,
				LessScheme,OtherCharges,PrdTaxAmount,TotalTax,PrdGrossAmount,GrossAmount,PrdNetAmount,NetAmount,PurStatus,Remarks,0,1,GETDATE()
				FROM #Cn2Cs_Prk_PurchaseReturn C 
				INNER JOIN Supplier S ON S.SpmCode=C.SupPlierCode
				INNER JOIN Product P ON P.PrdCCode=C.Prdcode
				INNER JOIN ProductBatch PB ON PB.PrdBatCode=C.BatchCode AND PB.PrdId=P.PrdId
				WHERE ConPurRefNo=@ConPurRefNo AND ConPurRefNo NOT IN (SELECT ConPurRefNo FROM #Avoid)
			END	 
	 END
	 ELSE
	 BEGIN
			INSERT INTO Errorlog 
			SELECT 1,@Tabname,'ConPurRefNo',@ConPurRefNo+'Reference No Already Exists'	 
	 END		
	FETCh NEXT FROM CUR_PurchaseReturn_Con INTO @ConPurRefNo,@ReturnType,@PurRetDate
	END
	CLOSE CUR_PurchaseReturn_Con
	DEALLOCATE CUR_PurchaseReturn_Con
 			
	 UPDATE C SET DOWNLOADFLAG='Y' FROM Cn2Cs_Prk_PurchaseReturn C INNER JOIN ETL_Prk_PurchaseReturn E ON E.CmpInvNo=C.CmpInvNo and C.ConPurRefNo=E.ConPurRefNo
	 WHERE C.DownLoadFlag='D'

	 COMMIT TRANSACTION	

  END TRY
  BEGIN CATCH
	SET @Po_ErrNo=1
	ROLLBACK TRANSACTION
  END CATCH
 RETURN
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.ID
WHERE A.NAME='ETLTempPurchaseReceipt' AND B.NAME='TaxType' AND A.type='U')
BEGIN
	ALTER TABLE ETLTempPurchaseReceipt ADD TaxType VARCHAR(10)
END
GO
UPDATE ETLTempPurchaseReceipt SET TaxType='VAT' WHERE ISNULL(TaxType,'')=''
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.ID
WHERE A.NAME='ETL_Prk_PurchaseReceipt' AND B.NAME='TaxType' AND A.type='U')
BEGIN
	ALTER TABLE ETL_Prk_PurchaseReceipt ADD TaxType VARCHAR(10)
END
GO
UPDATE ETL_Prk_PurchaseReceipt SET TaxType='VAT' WHERE ISNULL(TaxType,'')=''
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.ID
WHERE A.NAME='Cn2Cs_Prk_BLPurchaseReceipt' AND B.NAME='TaxType' AND A.type='U')
BEGIN
	ALTER TABLE Cn2Cs_Prk_BLPurchaseReceipt ADD TaxType VARCHAR(10)
END
GO
UPDATE Cn2Cs_Prk_BLPurchaseReceipt SET [TaxType]='VAT' WHERE ISNULL(TaxType,'')=''
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE NAME='Proc_ImportBLPurchaseReceipt' AND xtype='P')
DROP PROCEDURE Proc_ImportBLPurchaseReceipt
GO
CREATE PROCEDURE Proc_ImportBLPurchaseReceipt
(
	@Pi_Records TEXT
)
AS
/*********************************
* PROCEDURE		: Proc_ImportBLPurchaseReceipt
* PURPOSE		: To Insert and Update records  from xml file in the Table Purchase Receipt
* CREATED		: MarySubashini.S
* CREATED DATE	: 09/01/2009
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
SET NOCOUNT ON
BEGIN
	DECLARE @hDoc INTEGER
	EXEC sp_xml_preparedocument @hDoc OUTPUT,@Pi_Records
	
	--TRUNCATE TABLE Cn2Cs_Prk_BLPurchaseReceipt
	INSERT INTO Cn2Cs_Prk_BLPurchaseReceipt([DistCode],[CompInvNo],[CompInvDate],[NetValue],[TotalTax],[LessDiscount],[LessSchemeAmount],
	[SupplierCode],[CompanyName],[TransporterName],[LRNO],[LRDate],[ProductCode],[UOMCode],
	[PurQty],[CashDiscRs],[CashDiscPer],[LineLevelAmount],[BatchNo],[ManufactureDate],[ExpiryDate],
	[MRP],[ListPriceNSP],[PurchaseTaxValue],[PurchaseDiscount],[PurchaseRate],[SellingRate],
	[SellingRateAfterTAX],[SellingRateAfterVAT],[FreightCharges],[VatBatch],[VATTaxValue],[Status],[FreeSchemeFlag],
	[SchemeRefrNo],[WayBillNo],[BundleDeal],[CreatedDate],[DownloadFlag],[TaxType])
	SELECT  [DistCode],[CompInvNo],[CompInvDate],[NetValue],[TotalTax],[LessDiscount],[LessSchemeAmount],
	[SupplierCode],[CompanyName],[TransporterName],[LRNO],[LRDate],[ProductCode],[UOMCode],
	[PurQty],[CashDiscRs],[CashDiscPer],[LineLevelAmount],[BatchNo],[ManufactureDate],[ExpiryDate],
	[MRP],[ListPriceNSP],[PurchaseTaxValue],[PurchaseDiscount],[PurchaseRate],[SellingRate],
	[SellingRateAfterTAX],[SellingRateAfterVAT],[FreightCharges],[VatBatch],[VATTaxValue],[Status],[FreeSchemeFlag],
	[SchemeRefrNo],[WayBillNo],[BundleDeal],[CreatedDate],DownloadFlag,[TaxType]
	FROM 	OPENXML (@hdoc,'/Root/Console2CS_Purchase',1)
	WITH 
	(
		[DistCode]				NVARCHAR(50) ,
		[CompInvNo] 	  		NVARCHAR(25) ,
		[CompInvDate] 			DATETIME ,
		[NetValue]   			NUMERIC(38,6) ,
		[TotalTax] 	  			NUMERIC(38,6) ,
		[LessDiscount] 			NUMERIC(38,6) ,
		[LessSchemeAmount]		NUMERIC(38,6) ,
		[SupplierCode] 			NVARCHAR(50) ,
		[CompanyName]			NVARCHAR(100) ,
		[TransporterName] 		NVARCHAR(100) ,
		[LRNO]   				NVARCHAR(15) ,
		[LRDate] 	  			DATETIME ,
		[ProductCode] 			NVARCHAR(25) ,
		[UOMCode] 				NVARCHAR(25) ,
		[PurQty]  	 			INT ,
		[CashDiscRs]   			NUMERIC(38,6) ,
		[CashDiscPer]   		NUMERIC(38,6) ,
		[LineLevelAmount] 		NUMERIC(38,6) ,
		[BatchNo] 				NVARCHAR(200) ,
		[ManufactureDate]		DATETIME ,
		[ExpiryDate] 	  		DATETIME ,
		[MRP] 					NUMERIC(38,6) ,
		[ListPriceNSP]   		NUMERIC(38,6) ,
		[PurchaseTaxValue] 		NUMERIC(38,6) ,
		[PurchaseDiscount] 		NUMERIC(38,6) ,
		[PurchaseRate]   		NUMERIC(38,6) ,
		[SellingRate]   		NUMERIC(38,6) ,
		[SellingRateAfterTAX]	NUMERIC(38,6) ,
		[SellingRateAfterVAT]	NUMERIC(38,6) ,
		[FreightCharges]		NUMERIC(18,2) ,
		[VatBatch] 	  			INT ,
		[VATTaxValue] 			NUMERIC(38,6) ,
		[Status]   				INT ,
		[FreeSchemeFlag] 		NVARCHAR(5) ,
		[SchemeRefrNo] 			NVARCHAR(25) ,
		[WayBillNo]   			NVARCHAR(50) ,
		[BundleDeal] 	  		NVARCHAR(50) ,
		--[CreatedUserID]			INT,
		[CreatedDate]			DATETIME,
		[DownloadFlag] 			NVARCHAR(1),
		[TaxType]				NVARCHAR(10)
	) XMLObj
	SELECT * FROM Cn2Cs_Prk_BLPurchaseReceipt
	EXECUTE sp_xml_removedocument @hDoc
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Validate_PurchaseReceipt' AND XTYPE='P')
DROP PROCEDURE Proc_Validate_PurchaseReceipt
GO
/*
BEGIN TRANSACTION
Exec Proc_Validate_PurchaseReceipt 0
SELECT * FROM ETL_Prk_PurchaseReceipt
SELECT * FROM ETLTempPurchaseReceipt
SELECT * FROM ErrorLog
ROLLBACK TRANSACTION
*/
CREATE Procedure Proc_Validate_PurchaseReceipt
(
@Po_ErrNo INT OUTPUT
)
AS
/*********************************
* PROCEDURE		: Proc_Validate_PurchaseReceipt
* PURPOSE		: To Insert and Update records in the Table PurchaseReceipt
* CREATED		: Nandakumar R.G
* CREATED DATE	: 03/05/2010
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
SET NOCOUNT ON
BEGIN
	DECLARE @Exist   AS  INT
	
	DECLARE @CmpCode  AS  NVARCHAR(100)
	DECLARE @SpmCode AS  NVARCHAR(100)
	DECLARE @CmpInvNo AS  NVARCHAR(100)
	DECLARE @PONo  AS  NVARCHAR(100)
	DECLARE @InvoiceDate AS  DATETIME
	DECLARE @TransCode AS  NVARCHAR(100)
	DECLARE @PurRcptNo AS  NVARCHAR(100)
	
	DECLARE @CmpId   AS  INT
	DECLARE @SpmId   AS  INT
	DECLARE @TransId  AS  INT
	DECLARE @NetAmt  AS  NUMERIC(18,0)	
	DECLARE @LcnId   AS  INT
	DECLARE @TaxType AS VARCHAR(100)
	DECLARE @TransStr  AS  NVARCHAR(4000)	
	
	SET @Po_ErrNo=0
	SET @Exist=0
	
	SET @Exist=0
	DECLARE Cur_PurchaseReceipt CURSOR
	FOR SELECT DISTINCT ISNULL([Company Code],''),ISNULL([Supplier Code],''),ISNULL([Company Invoice No],''),
	ISNULL([PO Number],''),ISNULL([Invoice Date],GETDATE()),ISNULL([Transporter Code],''),ISNULL([NetPayable Amount],0),
	ISNULL([TaxType],'')
	FROM ETL_Prk_PurchaseReceipt
	
	OPEN Cur_PurchaseReceipt
	FETCH NEXT FROM Cur_PurchaseReceipt INTO @CmpCode,@SpmCode,@CmpInvNo,@PONo,@InvoiceDate,@TransCode,@NetAmt,@TaxType
	WHILE @@FETCH_STATUS=0
	BEGIN
		SET @Po_ErrNo=0	
		SET @Exist=0
		
		SELECT @CmpId=ISNULL(CmpId,0) FROM Company WITH (NOLOCK) WHERE CmpCode=@CmpCode  											
		SELECT @SpmId=ISNULL(SpmId,0) FROM Supplier WITH (NOLOCK) WHERE SpmCode=@SpmCode
		SELECT @TransId=ISNULL(TransporterId,0) FROM Transporter WITH (NOLOCK) WHERE TransporterCode=@TransCode
		SELECT @LcnId=ISNULL(LcnId,0) FROM Location WHERE DefaultLocation=1		
		IF EXISTS(SELECT * FROM ETLTempPurchaseReceipt WITH (NOLOCK) WHERE CmpInvNo=@CmpInvNo)
		BEGIN
			DELETE FROM dbo.ETLTempPurchaseReceipt WHERE CmpInvNo=@CmpInvNo
			DELETE FROM dbo.ETLTempPurchaseReceiptProduct WHERE CmpInvNo=@CmpInvNo
			DELETE FROM dbo.ETLTempPurchaseReceiptPrdLineDt WHERE CmpInvNo=@CmpInvNo
			DELETE FROM dbo.ETLTempPurchaseReceiptClaimScheme WHERE CmpInvNo=@CmpInvNo
			DELETE FROM dbo.ETLTempPurchaseReceiptOtherCharges WHERE CmpInvNo=@CmpInvNo			 		
		END		
		
		IF @Po_ErrNo=0
		BEGIN
			INSERT INTO ETLTempPurchaseReceipt(CmpId,SpmId,PONo,CmpInvNo,InvDate,LcnId,TransporterId,NetAmt,DownLoadStatus,TaxType)
			VALUES(@CmpId,@SpmId,@PONo,@CmpInvNo,@InvoiceDate,@LcnId,@TransId,@NetAmt,0,@TaxType)
			DELETE FROM ETL_Prk_PurchaseReceipt where [Company Invoice No]=@CmpInvno
		END
		FETCH NEXT FROM Cur_PurchaseReceipt INTO @CmpCode,@SpmCode,@CmpInvNo,@PONo,@InvoiceDate,@TransCode,@NetAmt,@TaxType	
	END
	CLOSE Cur_PurchaseReceipt
	DEALLOCATE Cur_PurchaseReceipt
			
	RETURN
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE NAME='Proc_Cn2Cs_PurchaseReceipt' AND xtype='P')
DROP PROCEDURE Proc_Cn2Cs_PurchaseReceipt
GO
/*  
BEGIN TRANSACTION  
EXEC Proc_Cn2Cs_PurchaseReceipt 0  
ROLLBACK TRANSACTION  
*/  
CREATE PROCEDURE Proc_Cn2Cs_PurchaseReceipt
(  
 @Po_ErrNo INT OUTPUT  
)  
AS  
/***********************************************************  
* PROCEDURE : Proc_Cn2Cs_PurchaseReceipt  
* PURPOSE : To Insert the records FROM Console into Temp Tables  
* SCREEN : Console Integration-PurchaseReceipt  
* CREATED BY: Nandakumar R.G On 03-05-2010  
* MODIFIED :  
* DATE      AUTHOR     DESCRIPTION  
14/08/2013 Murugan.R Logistic Material Management  
* {date} {developer}  {brief modIFication description}  
*************************************************************/  
SET NOCOUNT ON  
BEGIN  
 -- For Clearing the Prking/Temp Table -----   
 DELETE FROM ETLTempPurchaseReceiptOtherCharges WHERE CmpInvNo in  
 (SELECT CmpInvNo FROM ETLTempPurchaseReceipt  WHERE DownLoadStatus=1)  
 DELETE FROM ETLTempPurchaseReceiptClaimScheme WHERE CmpInvNo in  
 (SELECT CmpInvNo FROM ETLTempPurchaseReceipt  WHERE DownLoadStatus=1)   
 DELETE FROM ETLTempPurchaseReceiptPrdLineDt WHERE CmpInvNo in  
 (SELECT CmpInvNo FROM ETLTempPurchaseReceipt  WHERE DownLoadStatus=1)  
 DELETE FROM ETLTempPurchaseReceiptProduct WHERE CmpInvNo in  
 (SELECT CmpInvNo FROM ETLTempPurchaseReceipt  WHERE DownLoadStatus=1)  
    DELETE FROM ETLTempPurchaseReceiptOtherCharges WHERE CmpInvNo in  
 (SELECT CmpInvNo FROM ETLTempPurchaseReceipt  WHERE DownLoadStatus=1)   
 DELETE FROM Etl_LogisticMaterialStock WHERE InvoiceNumber IN   
 (SELECT CmpInvNo FROM ETLTempPurchaseReceipt  WHERE DownLoadStatus=1)  
 DELETE FROM ETLTempPurchaseReceipt  WHERE DownLoadStatus=1  
 DELETE FROM ETLTempPurchaseReceiptCrDbAdjustments WHERE CmpInvNo   
 IN (SELECT CmpInvNo FROM PurchaseReceipt WHERE Status = 1) AND DownloadStatus = 1  
 TRUNCATE TABLE ETL_Prk_PurchaseReceiptPrdDt  
 TRUNCATE TABLE ETL_Prk_PurchaseReceiptClaim  
 TRUNCATE TABLE ETL_Prk_PurchaseReceipt  
    TRUNCATE TABLE ETLTempPurchaseReceiptPrdLineDt  
    TRUNCATE TABLE ETL_Prk_PurchaseReceiptPrdDt  
    TRUNCATE TABLE ETL_Prk_PurchaseReceiptOtherCharges  
    TRUNCATE TABLE ETL_Prk_PurchaseReceiptCrDbAdjustments  
 --------------------------------------  
 DECLARE @ErrStatus   INT  
 DECLARE @BatchNo   NVARCHAR(200)  
 DECLARE @ProductCode  NVARCHAR(100)  
 DECLARE @ListPrice   NUMERIC(38,6)  
 DECLARE @FreeSchemeFlag  NVARCHAR(5)  
 DECLARE @CompInvNo   NVARCHAR(25)  
 DECLARE @UOMCode   NVARCHAR(25)  
 DECLARE @Qty    INT  
 DECLARE @PurchaseDiscount NUMERIC(38,6)  
 DECLARE @VATTaxValue  NUMERIC(38,6)  
 DECLARE @SchemeRefrNo  NVARCHAR(25)  
 DECLARE @SupplierCode  NVARCHAR(30)  
 DECLARE @TransporterCode NVARCHAR(30)  
 DECLARE @POUOM    INT  
 DECLARE @RowId    INT  
 DECLARE @LineLvlAmt   NUMERIC(38,6)  
 DECLARE @QtyInKg   NUMERIC(38,6)  
 DECLARE @ExistCompInvNo  NVARCHAR(25)  
 DECLARE @FreightCharges  NUMERIC(38,6)  
 SET @RowId=1  
 --->Added By Nanda on 17/09/2009  
 IF EXISTS (SELECT * FROM DBO.SysObjects WHERE ID = OBJECT_ID(N'InvToAvoid')  
 AND OBJECTPROPERTY(ID, N'IsUserTable') = 1)  
 BEGIN  
  DROP TABLE InvToAvoid   
 END  
 CREATE TABLE InvToAvoid  
 (  
  CmpInvNo NVARCHAR(50)  
 )  
	IF EXISTS (SELECT DISTINCT CompInvNo,SupplierCode FROM Cn2Cs_Prk_BLPurchaseReceipt
	WHERE UPPER(ISNULL(TaxType,'VAT')) NOT IN ('VAT','GST'))
	BEGIN
		INSERT INTO InvToAvoid (CmpInvNo)
		SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt
		WHERE UPPER(ISNULL(TaxType,'VAT')) NOT IN ('VAT','GST')
		
		INSERT INTO ErrorLog (SlNo,TableName,FieldName,ErrDesc)
		SELECT DISTINCT 1,'Purchase Receipt','Tax Type','Purchase Tax Type should be VAT or GST '+CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt
		WHERE UPPER(ISNULL(TaxType,'VAT')) NOT IN ('VAT','GST')
	END
 IF EXISTS(SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt  
 WHERE CompInvNo IN (SELECT CmpInvNo FROM PurchaseReceipt))  
 BEGIN  
  INSERT INTO InvToAvoid(CmpInvNo)  
  SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt  
  WHERE CompInvNo IN (SELECT CmpInvNo FROM PurchaseReceipt)  
  INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)  
  SELECT DISTINCT 1,'Purchase Receipt','CmpInvNo','Company Invoice No:'+CompInvNo+' already Available' FROM Cn2Cs_Prk_BLPurchaseReceipt  
  WHERE CompInvNo IN (SELECT CmpInvNo FROM PurchaseReceipt)  
 END  
 IF EXISTS(SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt  
 WHERE CompInvNo IN (SELECT CmpInvNo FROM ETLTempPurchaseReceipt))  
 BEGIN  
  INSERT INTO InvToAvoid(CmpInvNo)  
  SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt  
  WHERE CompInvNo IN (SELECT CmpInvNo FROM ETLTempPurchaseReceipt)  
  INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)  
  SELECT DISTINCT 1,'Purchase Receipt','CmpInvNo','Company Invoice No:'+CompInvNo+' already downloaded and ready for invoicing' FROM Cn2Cs_Prk_BLPurchaseReceipt  
  WHERE CompInvNo IN (SELECT CmpInvNo FROM ETLTempPurchaseReceipt)  
 END  
 IF EXISTS(SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt  
 WHERE ProductCode NOT IN (SELECT PrdCCode FROM Product))  
 BEGIN  
  INSERT INTO InvToAvoid(CmpInvNo)  
  SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt  
  WHERE ProductCode NOT IN (SELECT PrdCCode FROM Product)  
  INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)  
  SELECT DISTINCT 1,'Purchase Receipt','Product','Product:'+ProductCode+' Not Available for Invoice:'+CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt  
  WHERE ProductCode NOT IN (SELECT PrdCCode FROM Product)  
  --->Added By Nanda on 05/05/2010  
  INSERT INTO ReDownloadRequest(DistCode,Process,RefNo,Download,PrdCCode,PrdBatCode,UploadFlag)  
  SELECT DISTINCT DistCode,'Purchase',CompInvNo,'Product',ProductCode,'','N' FROM Cn2Cs_Prk_BLPurchaseReceipt  
  WHERE ProductCode NOT IN (SELECT PrdCCode FROM Product)  
  --->Till Here      
 END  
 IF EXISTS(SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt  
 WHERE ProductCode+'~'+BatchNo  
 NOT IN  
 (SELECT P.PrdCCode+'~'+PB.PrdBatCode FROM Product P,ProductBatch PB WHERE P.PrdId=PB.PrdId))  
 BEGIN  
  INSERT INTO InvToAvoid(CmpInvNo)  
  SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt  
  WHERE ProductCode+'~'+BatchNo  
  NOT IN (SELECT P.PrdCCode+'~'+PB.PrdBatCode FROM Product P,ProductBatch PB WHERE P.PrdId=PB.PrdId)  
  INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)  
  SELECT DISTINCT 1,'Purchase Receipt','Product Batch','Product Batch:'+BatchNo+'Not Available for Product:'+ProductCode+' in Invoice:'+CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt  
  WHERE ProductCode+'~'+BatchNo  
  NOT IN  
  (SELECT P.PrdCCode+'~'+PB.PrdBatCode FROM Product P,ProductBatch PB WHERE P.PrdId=PB.PrdId)  
  --->Added By Nanda on 05/05/2010  
  INSERT INTO ReDownloadRequest(DistCode,Process,RefNo,Download,PrdCCode,PrdBatCode,UploadFlag)  
  SELECT DISTINCT DistCode,'Purchase',CompInvNo,'Product Batch',ProductCode,BatchNo,'N' FROM Cn2Cs_Prk_BLPurchaseReceipt  
  WHERE ProductCode+'~'+BatchNo  
  NOT IN (SELECT P.PrdCCode+'~'+PB.PrdBatCode FROM Product P,ProductBatch PB WHERE P.PrdId=PB.PrdId)  
  --->Till Here  
 END  
 --Supplier Credit Note Validations   
 IF EXISTS(SELECT DISTINCT [CompInvNo] FROM Cn2Cs_Prk_PurchaseReceiptAdjustments WHERE [RefNo] NOT IN  
 (SELECT DISTINCT PostedRefNo FROM CreditNoteSupplier WITH (NOLOCK)) AND [AdjType] = 'Credit')  
 BEGIN  
  INSERT INTO InvToAvoid(CmpInvNo)  
        SELECT DISTINCT [CompInvNo] FROM Cn2Cs_Prk_PurchaseReceiptAdjustments WHERE [RefNo] NOT IN  
    (SELECT DISTINCT PostedRefNo FROM CreditNoteSupplier WITH (NOLOCK)) AND [AdjType] = 'Credit'  
  INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)  
  SELECT DISTINCT 1,'CreditNoteSupplier','PostedRefNo','Supplier Credit Note Not Available'+[CompInvNo]  
  FROM Cn2Cs_Prk_PurchaseReceiptAdjustments WHERE [RefNo] NOT IN   
  (SELECT DISTINCT PostedRefNo FROM CreditNoteSupplier WITH (NOLOCK)) AND [AdjType] = 'Credit'    
 END  
 --Supplier Debit Note Validations   
 IF EXISTS(SELECT DISTINCT [CompInvNo] FROM Cn2Cs_Prk_PurchaseReceiptAdjustments WHERE [RefNo] NOT IN  
 (SELECT DISTINCT PostedRefNo FROM DebitNoteSupplier WITH (NOLOCK)) AND [AdjType] = 'Debit')  
 BEGIN  
  INSERT INTO InvToAvoid(CmpInvNo)  
        SELECT DISTINCT [CompInvNo] FROM Cn2Cs_Prk_PurchaseReceiptAdjustments WHERE [RefNo] NOT IN  
    (SELECT DISTINCT PostedRefNo FROM DebitNoteSupplier WITH (NOLOCK)) AND [AdjType] = 'Debit'  
  INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)  
  SELECT DISTINCT 1,'DebitNoteSupplier','PostedRefNo','Supplier Debit Note Not Available'+[CompInvNo]  
  FROM Cn2Cs_Prk_PurchaseReceiptAdjustments WHERE [RefNo] NOT IN   
  (SELECT DISTINCT PostedRefNo FROM DebitNoteSupplier WITH (NOLOCK)) AND [AdjType] = 'Debit'    
 END  
 IF EXISTS(SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt  
 WHERE CompInvDate>GETDATE())   
 BEGIN  
  INSERT INTO InvToAvoid(CmpInvNo)  
  SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt  
  WHERE CompInvDate>GETDATE()  
  INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)  
  SELECT DISTINCT 1,'Purchase Receipt','Invoice Date','Invoice Date:'+CAST(CompInvDate AS NVARCHAR(10))+' is greater than current date in Invoice:'+CompInvNo   
  FROM Cn2Cs_Prk_BLPurchaseReceipt WITH (NOLOCK) WHERE CompInvDate>GETDATE()  
 END  
 --Commented and Added By Mohana.S PMS NO: DCRSTKAL0012  
 --IF EXISTS(SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt  
 --WHERE UOMCode NOT IN (SELECT UOMCode FROM UOMMaster WITH (NOLOCK)))   
 --BEGIN  
 -- INSERT INTO InvToAvoid(CmpInvNo)  
 -- SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt  
 -- WHERE UOMCode NOT IN (SELECT UOMCode FROM UOMMaster WITH (NOLOCK))  
 -- INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)  
 -- SELECT DISTINCT 1,'Purchase Receipt','Invoice UOM','UOM:'+UOMCode+' is not available for Invoice:'+CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt  
 -- WHERE UOMCode NOT IN (SELECT UOMCode FROM UOMMaster WITH (NOLOCK))  
 --END  
 IF EXISTS (SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt WHERE PRODUCTCODE+'~'+UomCode NOT IN (SELECT PrdCCode+'~'+UomCode    
 FROM UomGroup UG INNER JOIN UomMaster UM ON UG.UomId =UM.UomId INNER JOIN Product P ON P.UomGroupId = UG.UomGroupId))  
 BEGIN  
   INSERT INTO InvToAvoid(CmpInvNo)  
   SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt WHERE PRODUCTCODE+'~'+UomCode NOT IN (SELECT PrdCCode+'~'+UomCode    
   FROM UomGroup UG INNER JOIN UomMaster UM ON UG.UomId =UM.UomId INNER JOIN Product P ON P.UomGroupId = UG.UomGroupId)  
   INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)  
   SELECT DISTINCT 1,'Purchase Receipt',PRODUCTCODE+'Product UOM','UOMCode:'+UOMCode+' is not available for Invoice:'+CompInvNo   
   FROM Cn2Cs_Prk_BLPurchaseReceipt WHERE PRODUCTCODE+'~'+UomCode  NOT IN (SELECT PrdCCode+'~'+UomCode    
   FROM UomGroup UG INNER JOIN UomMaster UM ON UG.UomId =UM.UomId INNER JOIN Product P ON P.UomGroupId = UG.UomGroupId)  
 END   
 IF EXISTS(SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt  
 WHERE SupplierCode NOT IN (SELECT SpmCode FROM Supplier WITH (NOLOCK)))   
 BEGIN  
  INSERT INTO InvToAvoid(CmpInvNo)  
  SELECT DISTINCT CompInvNo FROM Cn2Cs_Prk_BLPurchaseReceipt  
  WHERE SupplierCode NOT IN (SELECT SpmCode FROM Supplier WITH (NOLOCK))  
  INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)  
  SELECT DISTINCT 1,'Purchase Receipt','Invoice Supplier','Supplier:'+SupplierCode+' is not available for Invoice:'+CompInvNo  
  FROM Cn2Cs_Prk_BLPurchaseReceipt WITH (NOLOCK) WHERE SupplierCode NOT IN (SELECT SpmCode FROM Supplier WITH (NOLOCK))  
 END   
 --->Till Here  
 -- Eliminated Duplicate records insertion on 02/03/2015
 SET @ExistCompInvNo=0  
 DECLARE Cur_Purchase CURSOR  
 FOR  
 SELECT DISTINCT ProductCode,BatchNo,ListPriceNSP,  
 FreeSchemeFlag,CompInvNo,UOMCode,PurQty,PurchaseDiscount,VATTaxValue,SchemeRefrNo,LineLevelAmount,CashDiscRs,0 AS BundleDeal,  
 ISNULL(FreightCharges,0) AS FreightCharges  
 FROM Cn2Cs_Prk_BLPurchaseReceipt WHERE [DownLoadFlag]='D' AND CompInvNo NOT IN(SELECT CmpInvNo FROM InvToAvoid)  
 ORDER BY CompInvNo,ProductCode,BatchNo,ListPriceNSP,  
 FreeSchemeFlag,UOMCode,PurQty,PurchaseDiscount,VATTaxValue,SchemeRefrNo,LineLevelAmount,CashDiscRs,FreightCharges  
 OPEN Cur_Purchase  
 FETCH NEXT FROM Cur_Purchase INTO @ProductCode,@BatchNo,@ListPrice,  
 @FreeSchemeFlag,@CompInvNo,@UOMCode,@Qty,  
 @PurchaseDiscount,@VATTaxValue,@SchemeRefrNo,@LineLvlAmt,@QtyInKg,@RowId,@FreightCharges   
 WHILE @@FETCH_STATUS = 0  
 BEGIN  
--  IF @ExistCompInvNo<>@CompInvNo  
--  BEGIN  
--   SET @ExistCompInvNo=@CompInvNo  
--   SET @RowId=2  
--  END  
  --To insert into ETL_Prk_PurchaseReceiptPrdDt  
  IF(@FreeSchemeFlag='0')  
  BEGIN  
   INSERT INTO  ETL_Prk_PurchaseReceiptPrdDt([Company Invoice No],[RowId],[Product Code],[Batch Code],  
   [PO UOM],[PO Qty],[UOM],[Invoice Qty],[Purchase Rate],[Gross],[Discount In Amount],[Tax In Amount],[Net Amount],FreightCharges)  
   VALUES(@CompInvNo,@RowId,@ProductCode,@BatchNo,'',0,@UOMCode,@Qty,@ListPrice,@LineLvlAmt,  
   @PurchaseDiscount,@VATTaxValue,(@ListPrice-@PurchaseDiscount+@VATTaxValue)* @Qty,@FreightCharges)  
   INSERT INTO ETL_Prk_PurchaseReceiptPrdLineDt([Company Invoice No],[RowId],[Column Code],[Value In Amount])  
   VALUES(@CompInvNo,@RowId,'C',@PurchaseDiscount)  
   INSERT INTO ETL_Prk_PurchaseReceiptPrdLineDt([Company Invoice No],[RowId],[Column Code],[Value In Amount])  
   VALUES(@CompInvNo,@RowId,'D',@VATTaxValue)  
--   INSERT INTO ETL_Prk_PurchaseReceiptPrdLineDt([Company Invoice No],[RowId],[Column Code],[Value In Amount])  
--   VALUES(@CompInvNo,@RowId,'E',@QtyInKg)  
  END  
  --To insert into ETL_Prk_PurchaseReceiptClaim  
  IF(@FreeSchemeFlag='1')  
  BEGIN  
   INSERT INTO ETL_Prk_PurchaseReceiptClaim([Company Invoice No],[Type],[Ref No],[Product Code],  
   [Batch Code],[Qty],[Stock Type],[Amount],FreightAmt)  
   VALUES(@CompInvNo,'Offer',@SchemeRefrNo,@ProductCode,@BatchNo,@Qty,'Offer',0,@FreightCharges)  
  END  
--  SET @RowId=@RowId+1  
  FETCH NEXT FROM Cur_Purchase INTO @ProductCode,@BatchNo,@ListPrice,  
  @FreeSchemeFlag,@CompInvNo,@UOMCode,@Qty,  
  @PurchaseDiscount,@VATTaxValue,@SchemeRefrNo,@LineLvlAmt,@QtyInKg,@RowId,@FreightCharges  
 END  
 CLOSE Cur_Purchase  
 DEALLOCATE Cur_Purchase  
 --To insert into ETL_Prk_PurchaseReceipt  
 SELECT @TransporterCode=TransporterCode FROM Transporter  
 WHERE TransporterId IN(SELECT MIN(TransporterId) FROM Transporter WITH(NOLOCK))  
 IF @TransporterCode=''  
 BEGIN  
  INSERT INTO Errorlog VALUES (1,'Purchase Download','Transporter','Transporter not available')  
 END  
	INSERT INTO ETL_Prk_PurchaseReceipt([Company Code],[Supplier Code],[Company Invoice No],[PO Number],
	[Invoice Date],[Transporter Code],[NetPayable Amount],[TaxType])
	SELECT DISTINCT C.CmpCode,SupplierCode,P.CompInvNo,'',P.CompInvDate,@TransporterCode,P.NetValue,
	P.TaxType
	FROM Company C,Cn2Cs_Prk_BLPurchaseReceipt P
	WHERE  C.DefaultCompany=1 AND DownLoadFlag='D' AND CompInvNo NOT IN(SELECT CmpInvNo FROM InvToAvoid)
	UPDATE A SET [TaxType]='VAT' FROM ETL_Prk_PurchaseReceipt A (NOLOCK) 
	INNER JOIN Cn2Cs_Prk_BLPurchaseReceipt B (NOLOCK) ON B.CompInvNo=A.[Company Invoice No] 
	AND A.[Supplier Code]=B.SupplierCode WHERE ISNULL(A.TaxType,'')=''
	
 --Added By Sathishkumar Veeramani 2013/08/13  
 --INSERT INTO ETL_Prk_PurchaseReceiptOtherCharges ([Company Invoice No],[OC Description],Amount)  
 --SELECT DISTINCT CompInvNo,'Cash Discounts' AS [OC Description],CashDiscRs FROM Cn2Cs_Prk_BLPurchaseReceipt WITH (NOLOCK)  
 --WHERE CompInvNo NOT IN(SELECT CmpInvNo FROM InvToAvoid) AND DownLoadFlag='D'  
 --Added by Sathishkumar Veeramani 2013/11/22  
 INSERT INTO ETL_Prk_PurchaseReceiptCrDbAdjustments([Company Invoice No],[Adjustment Type],[Ref No],[Amount])  
 SELECT DISTINCT CompInvNo,AdjType,RefNo,Amount FROM Cn2Cs_Prk_PurchaseReceiptAdjustments WITH (NOLOCK)  
 WHERE CompInvNo NOT IN(SELECT CmpInvNo FROM InvToAvoid) AND DownLoadFlag='D'  
 EXEC Proc_Validate_PurchaseReceipt @Po_ErrNo= @ErrStatus OUTPUT  
 IF @ErrStatus =0  
 BEGIN  
  EXEC Proc_Validate_PurchaseReceiptProduct @Po_ErrNo= @ErrStatus OUTPUT  
  IF @ErrStatus =0  
  BEGIN  
   EXEC Proc_Validate_PurchaseReceiptLineDt @Po_ErrNo= @ErrStatus OUTPUT  
   IF @ErrStatus =0  
   BEGIN  
    EXEC Proc_Validate_PurchaseReceiptClaimScheme @Po_ErrNo= @ErrStatus OUTPUT  
    IF @ErrStatus =0  
    BEGIN  
       EXEC Proc_Validate_PurchaseReceiptOtherCharges @Po_ErrNo= @ErrStatus OUTPUT  
       IF @ErrStatus =0  
       BEGIN  
           EXEC Proc_Validate_PurchaseReceiptCrDbAdjustments @Po_ErrNo= @ErrStatus OUTPUT  
           IF @ErrStatus =0  
           BEGIN  
            SET @ErrStatus=@ErrStatus  
        END      
       END      
    END  
   END  
  END  
 END  
 --Proc_Validate_PurchaseReceiptCrDbAdjustments  
 --->Added By Nanda on 17/09/2009  
 DELETE FROM ETLTempPurchaseReceipt WHERE CmpInvNo NOT IN  
 (SELECT DISTINCT CmpInvNo FROM ETLTempPurchaseReceiptProduct)  
 UPDATE Cn2Cs_Prk_BLPurchaseReceipt SET DownLoadFlag='Y'  
 WHERE CompInvNo IN (SELECT DISTINCT CmpInvNo FROM EtlTempPurchaseReceipt)  
 --->Till Here  
 SET @Po_ErrNo= @ErrStatus  
 RETURN  
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE NAME='Fn_ReturnServiceGroupDt' and xtype IN ('TF','FN'))
DROP FUNCTION Fn_ReturnServiceGroupDt
GO
--SELECT * FROM Fn_ReturnServiceGroupDt(1)
CREATE FUNCTION Fn_ReturnServiceGroupDt(@ServiceGroupId AS INT)
RETURNS @ServiceGroupDt TABLE
(
	ServiceGroupCode VARCHAR(100),
	ServiceTaxCode VARCHAR(100),
	ServiceTaxPer NUMERIC(18,3)
)
AS
BEGIN

	DECLARE @TAXSEQ TABLE
	(
		ServiceGroupId	INT,
		ServiceTaxSeqId	INT
	)
	
	INSERT INTO @TAXSEQ
	SELECT ServiceGroupId,MAX(ServiceTaxSeqId) AS ServiceTaxSeqId1 FROM ServiceTaxGroupSetting B 
	GROUP BY ServiceGroupId
	
	INSERT INTO @ServiceGroupDt
	SELECT ServiceGroupCode,ServiceTaxCode,ServiceTaxPer  FROM ServiceTaxGroupMaster S  
	INNER JOIN ServiceTaxGroupSetting ST ON S.ServiceGroupId=ST.ServiceGroupId WHERE S.ServiceGroupId=@ServiceGroupId 
	AND EXISTS (SELECT * FROM @TAXSEQ B WHERE ST.ServiceGroupId=B.ServiceGroupId AND ST.ServiceTaxSeqid=B.ServiceTaxSeqId)
	

RETURN
END
GO
--Till Here
---Added by karthick
DELETE FROM HotSearchEditorHd WHERE FormId=10049
INSERT INTO HotSearchEditorHd
SELECT 10049,'Sales Return','Retailer Selection','select','Select Rtrid,RtrCode,RtrName,CASE ISNULL(ColumnValue,0) WHEN ''Registered'' THEN 1 WHEN ''Unregistered'' THEN 2 ELSE 0 END RetailerType 
From Retailer R LEFT OUTER JOIN (SELECT MASTERRECORDID,ColumnValue FROM UDCDETAILS UD
INNER JOIN UdcMaster U ON U.MasterId=UD.MasterId AND U.UdcMasterId=UD.UdcMasterId AND U.MasterId=2 AND ColumnName=''Retailer Type'')A
ON A.MasterRecordId=R.RtrId'
GO
DELETE FROM HotSearchEditorHd WHERE FormId=676
INSERT INTO HotSearchEditorHd
SELECT 676,'Sales Return','Retailer Selection','select',
'SELECT RtrId,RtrCode,RtrName,  RtrSeqDtId,RetailerType FROM (
SELECT C.RtrId,C.RtrCode,C.RtrName,B.RtrSeqDtId,CASE ISNULL(ColumnValue,0) WHEN ''Registered'' THEN 1 WHEN ''Unregistered'' THEN 2 ELSE 0 END RetailerType  
FROM RetailerSequence A (NOLOCK)   
INNER JOIN RetailerSeqDetails B (NOLOCK) ON A.RtrSeqID = B.RtrSeqId INNER JOIN Retailer C (NOLOCK)   on C.RtrId = B.RtrId 
LEFT OUTER JOIN (SELECT MASTERRECORDID,ColumnValue FROM UDCDETAILS UD
	INNER JOIN UdcMaster U ON U.MasterId=UD.MasterId AND U.UdcMasterId=UD.UdcMasterId AND U.MasterId=2 AND ColumnName=''Retailer Type'')D
	ON D.MasterRecordId=C.RtrId 
WHERE C.RtrStatus = 1 And A.SMId = vFParam And A.RMId = vSParam   And TransactionType=vTParam  
UNION
SELECT D.RtrId,D.RtrCode,D.RtrName,100000 as RtrSeqDtId,CASE ISNULL(UDC.ColumnValue,0) WHEN ''Registered'' THEN 1 WHEN ''Unregistered'' THEN 2 ELSE 0 END RetailerType    
FROM Retailer D (NOLOCK) 
INNER JOIN RetailerMarket E (NOLOCK) ON D.RtrId = E.RtrId  
LEFT OUTER JOIN (SELECT MASTERRECORDID,ColumnValue FROM UDCDETAILS UD
	INNER JOIN UdcMaster U ON U.MasterId=UD.MasterId AND U.UdcMasterId=UD.UdcMasterId AND U.MasterId=2 AND ColumnName=''Retailer Type'')UDC
	ON UDC.MasterRecordId=D.RtrId AND UDC.MasterRecordId=E.rtrid
WHERE D.RtrStatus = 1 And E.RMId = vSParam And D.Rtrid NOT IN (SELECT C.RtrId FROM   RetailerSequence A (NOLOCK) 
INNER JOIN RetailerSeqDetails B (NOLOCK) ON A.RtrSeqID = B.RtrSeqId   INNER JOIN Retailer C (NOLOCK) on C.RtrId = B.RtrId 
WHERE C.RtrStatus = 1   And A.SMId = vFParam And A.RMId = vSParam And TransactionType= vTParam))MAINQRY   ORDER BY RtrSeqDtId'
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE NAME='Proc_ReturnSplDiscount' AND XTYPE='P')
DROP PROCEDURE Proc_ReturnSplDiscount
GO
--EXEC Proc_ReturnSplDiscount 4,3,6,'2014-03-18',0,0,0,0,0,0
CREATE  PROCEDURE [Proc_ReturnSplDiscount]
(
	@Pi_PrdId		INT,
	@Pi_PrdBatId		INT,
	@Pi_RtrId		INT,
	@Pi_InvDate			DATETIME,
	@Po_SplDiscount		NUMERIC(38,6) 	OUTPUT,
	@Po_SplFlatAmount	NUMERIC(38,6) 	OUTPUT,
	@Po_SplPriceId		INT 		OUTPUT,
	@Po_MRP			NUMERIC(38,6) 	OUTPUT,
	@Po_SellRate		NUMERIC(38,6) 	OUTPUT,
	@Po_ClaimablePercOnMRP	NUMERIC(38,6) 	OUTPUT,
	@Pi_RtrShipId			INT=NULL
)
AS
/*********************************
* PROCEDURE	: Proc_ReturnSplDiscount
* PURPOSE	: To Return the Special Discount for the Selected Retailer and Product
* CREATED	: Thrinath
* CREATED DATE	: 29/04/2007
* NOTE		: General SP for Returning the Special Discount for the Selected Retailer and Product
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date}      {developer}       {brief modification description}
* 24/03/2009  Nandakumar R.G	Addition of Tax Group
*********************************/
SET NOCOUNT ON
BEGIN
	DECLARE @ContractId AS INT
	DECLARE @RtrTaxGroupId AS INT
	DECLARE @PrdCtgValMainId	AS INT
	DECLARE @DiscAlone			AS INT
	SET @ContractId = 0
	SET @Po_SplDiscount = 0
	SET @Po_SplFlatAmount = 0
	SET @Po_SplPriceId = 0
	SET @Po_MRP = 0
	SET @Po_SellRate = 0
	SET @DiscAlone=0
	
	--GST Change
	SELECT @RtrTaxGroupId=A.TaxGroupId FROM RetailerShipAdd A (NOLOCK)
	INNER JOIN Retailer B (NOLOCK) ON A.RtrId=B.RtrId
	WHERE A.RtrId=@Pi_RtrId and A.RtrShipId=@Pi_RtrShipId
	
	IF ISNULL(@RtrTaxGroupId,0)=0
	BEGIN
		SELECT @RtrTaxGroupId=TaxGroupId FROM Retailer (NOLOCK) WHERE RtrId=@Pi_RtrId
	END
	--Till Here
	
	SELECT @PrdCtgValMainId=PrdCtgValMainId FROM Product WHERE PrdId=@Pi_PrdId	
	--Return Contract Price Id if set at Retailer Level
	SELECT @ContractId = ISNULL(MAX(ContractId),0) FROM ContractPricingMaster CP WHERE RtrId = @Pi_RtrId
	AND CP.Status=1 AND @Pi_InvDate BETWEEN CP.ValidFromDate AND CP.ValidTillDate
	SELECT @DiscAlone=ISNULL(AllowDiscount,0) FROM ContractPricingMaster WHERE ContractId=@ContractId	
	
	--SELECT '1',@ContractId,@DiscAlone
	IF @DiscAlone=0
	BEGIN
		IF NOT EXISTS(SELECT * FROM  ContractPricingMaster A (NOLOCK) INNER JOIN ContractPricingDetails B ON A.ContractId = B.ContractId
		WHERE A.ContractId=@ContractId AND PrdId=@Pi_PrdId AND 	PrdBatId=(CASE DisplayMode WHEN 0 THEN 
		(CASE AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE PrdBatId END) ELSE PrdBatId END))
		BEGIN
			 SET @ContractId=0
		END
	ELSE
		IF NOT EXISTS(SELECT * FROM ContractPricingDetails WHERE ContractId=@ContractId AND
		PrdId=@Pi_PrdId)
		BEGIN
			 SET @ContractId=0
		END
	END
	--SELECT '2',@ContractId,@DiscAlone
	--Return Contract Price Id if set at Retailer Value Class Level with Tax Group
	IF @ContractId = 0
	BEGIN
		SELECT @ContractId = ISNULL(MAX(CP.ContractId),0) FROM Retailer  R
			INNER JOIN RetailerValueClassmap RVCM ON R.RtrId = RVCM.RtrId
			INNER JOIN RetailerValueClass RVC ON RVCM.RtrValueClassId = RVC.RtrClassId
			INNER JOIN RetailerCategory RC ON RC.CtgMainId = RVC.CtgMainId
			INNER JOIN RetailerCategoryLevel RCL ON RC.CtgLevelId = RCL.CtgLevelId
			INNER JOIN ContractPricingMaster CP ON CP.RtrClassId = RVCM.RtrValueClassId
			AND CP.Status=1 AND @Pi_InvDate BETWEEN CP.ValidFromDate AND CP.ValidTillDate
			INNER JOIN ContractPricingDetails CPD ON CP.ContractId= CPD.ContractId AND CPD.PrdID=@Pi_PrdId 
			--AND CPD.PrdBatId=(CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END)
			AND CPD.PrdBatId=(CASE CP.DisplayMode WHEN 0 THEN (CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END) ELSE CPD.PrdBatId END) 		 
			WHERE R.RtrId =@Pi_RtrId AND CP.RtrId = 0 AND CP.RtrtaxGroupId=R.TaxGroupId
	END
	SELECT @DiscAlone=ISNULL(AllowDiscount,0) FROM ContractPricingMaster WHERE ContractId=@ContractId
	
	--SELECT '3',@ContractId,@DiscAlone
	IF @DiscAlone=0
	BEGIN
		IF NOT EXISTS(SELECT * FROM  ContractPricingMaster A (NOLOCK) INNER JOIN ContractPricingDetails B ON A.ContractId = B.ContractId
		WHERE A.ContractId=@ContractId AND PrdId=@Pi_PrdId AND 	PrdBatId=(CASE DisplayMode WHEN 0 THEN 
		(CASE AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE PrdBatId END) ELSE PrdBatId END))
		BEGIN
			 SET @ContractId=0
		END
	ELSE
		IF NOT EXISTS(SELECT * FROM ContractPricingDetails WHERE ContractId=@ContractId AND
		PrdId=@Pi_PrdId)
		BEGIN
			 SET @ContractId=0
		END
	END
	--SELECT '4',@ContractId,@DiscAlone
	--Return Contract Price Id if set at Retailer Value Class Level without Tax Group
	IF @ContractId = 0
	BEGIN
		SELECT @ContractId = ISNULL(MAX(CP.ContractId),0) FROM Retailer  R
			INNER JOIN RetailerValueClassmap RVCM ON R.RtrId = RVCM.RtrId
			INNER JOIN RetailerValueClass RVC ON RVCM.RtrValueClassId = RVC.RtrClassId
			INNER JOIN RetailerCategory RC ON RC.CtgMainId = RVC.CtgMainId
			INNER JOIN RetailerCategoryLevel RCL ON RC.CtgLevelId = RCL.CtgLevelId
			INNER JOIN ContractPricingMaster CP ON CP.RtrClassId = RVCM.RtrValueClassId
			AND CP.Status=1 AND @Pi_InvDate BETWEEN CP.ValidFromDate AND CP.ValidTillDate
			INNER JOIN ContractPricingDetails CPD ON CP.ContractId= CPD.ContractId AND CPD.PrdID=@Pi_PrdId 
			--AND CPD.PrdBatId=(CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END)
			AND CPD.PrdBatId=(CASE CP.DisplayMode WHEN 0 THEN (CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END) ELSE CPD.PrdBatId END)
			WHERE R.RtrId =@Pi_RtrId AND CP.RtrId = 0
	END
	SELECT @DiscAlone=ISNULL(AllowDiscount,0) FROM ContractPricingMaster WHERE ContractId=@ContractId
	--SELECT '5',@ContractId,@DiscAlone	
	
	IF @DiscAlone=0
	BEGIN
		IF NOT EXISTS(SELECT * FROM  ContractPricingMaster A (NOLOCK) INNER JOIN ContractPricingDetails B ON A.ContractId = B.ContractId
		WHERE A.ContractId=@ContractId AND PrdId=@Pi_PrdId AND 	PrdBatId=(CASE DisplayMode WHEN 0 THEN 
		(CASE AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE PrdBatId END) ELSE PrdBatId END))
		BEGIN
			 SET @ContractId=0
		END
	ELSE
		IF NOT EXISTS(SELECT * FROM ContractPricingDetails WHERE ContractId=@ContractId AND
		PrdId=@Pi_PrdId)
		BEGIN
			 SET @ContractId=0
		END
	END
	--SELECT '6',@ContractId,@DiscAlone
	--Return Contract Price Id if set at Retailer Category Level Value with Tax Group
	IF @ContractId = 0
	BEGIN
		SELECT @ContractId = ISNULL(MAX(CP.ContractId),0) FROM Retailer  R
			INNER JOIN RetailerValueClassmap RVCM ON R.RtrId = RVCM.RtrId
			INNER JOIN RetailerValueClass RVC ON RVCM.RtrValueClassId = RVC.RtrClassId
			INNER JOIN RetailerCategory RC ON RC.CtgMainId = RVC.CtgMainId
			INNER JOIN RetailerCategoryLevel RCL ON RC.CtgLevelId = RCL.CtgLevelId
			INNER JOIN ContractPricingMaster CP ON CP.CtgMainId = RVC.CtgMainId
			AND CP.Status=1 AND @Pi_InvDate BETWEEN CP.ValidFromDate AND CP.ValidTillDate
			INNER JOIN ContractPricingDetails CPD ON CP.ContractId= CPD.ContractId AND CPD.PrdID=@Pi_PrdId 
			--AND CPD.PrdBatId=(CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END)
			AND CPD.PrdBatId=(CASE CP.DisplayMode WHEN 0 THEN (CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END) ELSE CPD.PrdBatId END)
			WHERE R.RtrId =@Pi_RtrId AND CP.RtrId = 0 AND CP.RtrClassId = 0 AND CP.RtrtaxGroupId=R.TaxGroupId
	END
	SELECT @DiscAlone=ISNULL(AllowDiscount,0) FROM ContractPricingMaster WHERE ContractId=@ContractId
	--SELECT '7',@ContractId,@DiscAlone
	IF @DiscAlone=0
	BEGIN
		IF NOT EXISTS(SELECT * FROM  ContractPricingMaster A (NOLOCK) INNER JOIN ContractPricingDetails B ON A.ContractId = B.ContractId
		WHERE A.ContractId=@ContractId AND PrdId=@Pi_PrdId AND 	PrdBatId=(CASE DisplayMode WHEN 0 THEN 
		(CASE AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE PrdBatId END) ELSE PrdBatId END))
		BEGIN
			 SET @ContractId=0
		END
	ELSE
		IF NOT EXISTS(SELECT * FROM ContractPricingDetails WHERE ContractId=@ContractId AND
		PrdId=@Pi_PrdId)
		BEGIN
			 SET @ContractId=0
		END
	END
	--SELECT '8',@ContractId,@DiscAlone
	--Return Contract Price Id if set at Retailer Category Level Value without Tax Group-Group Level
	IF @ContractId = 0
	BEGIN
		SELECT @ContractId = ISNULL(MAX(CP.ContractId),0) FROM Retailer  R
			INNER JOIN RetailerValueClassmap RVCM ON R.RtrId = RVCM.RtrId AND R.RtrId=@Pi_RtrId
			INNER JOIN RetailerValueClass RVC ON RVCM.RtrValueClassId = RVC.RtrClassId
			INNER JOIN RetailerCategory RC ON RC.CtgMainId = RVC.CtgMainId
			INNER JOIN RetailerCategoryLevel RCL ON RC.CtgLevelId = RCL.CtgLevelId
			INNER JOIN ContractPricingMaster CP ON CP.CtgMainId = RVC.CtgMainId
			AND CP.Status=1 AND @Pi_InvDate BETWEEN CP.ValidFromDate AND CP.ValidTillDate
			INNER JOIN ContractPricingDetails CPD ON CP.ContractId= CPD.ContractId AND CPD.PrdID=@Pi_PrdId 
			--AND CPD.PrdBatId=(CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END)
			AND CPD.PrdBatId=(CASE CP.DisplayMode WHEN 0 THEN (CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END) ELSE CPD.PrdBatId END)
			WHERE (CP.RtrId = @Pi_RtrId OR CP.RtrId = 0) AND CP.RtrClassId = 0 AND CP.PrdCtgValMainId IN (0,@PrdCtgValMainId)
			--Retailer Categorly Level updated By Alphonse J on 2014-03-18
			IF @ContractId = 0
			BEGIN
				SELECT @ContractId = ISNULL(MAX(CP.ContractId),0) FROM Retailer  R
				INNER JOIN RetailerValueClassmap RVCM ON R.RtrId = RVCM.RtrId AND R.RtrId=@Pi_RtrId
				INNER JOIN RetailerValueClass RVC ON RVCM.RtrValueClassId = RVC.RtrClassId
				INNER JOIN RetailerCategory RC ON RC.CtgMainId = RVC.CtgMainId
				INNER JOIN RetailerCategoryLevel RCL ON RC.CtgLevelId = RCL.CtgLevelId
				INNER JOIN ContractPricingMaster CP ON CP.CtgMainId = RVC.CtgMainId
				AND CP.Status=1 AND @Pi_InvDate BETWEEN CP.ValidFromDate AND CP.ValidTillDate
				INNER JOIN ProductCategoryValue PCV ON CP.PrdCtgValMainId=PCV.PrdCtgValMainId 
				INNER JOIN ProductCategoryValue PCV1 ON PCV1.PrdCtgValLinkCode LIKE PCV.PrdCtgValLinkCode+'%'
				INNER JOIN ContractPricingDetails CPD ON CP.ContractId= CPD.ContractId AND CPD.PrdID=@Pi_PrdId 
				--AND CPD.PrdBatId=(CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END)
			    AND CPD.PrdBatId=(CASE CP.DisplayMode WHEN 0 THEN (CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END) ELSE CPD.PrdBatId END)
				WHERE (CP.RtrId = @Pi_RtrId OR CP.RtrId = 0) AND CP.RtrClassId = 0 AND PCV1.PrdCtgValMainId IN (@PrdCtgValMainId)
			END
		--SELECT * FROM ContractPricingMaster
	END	
	SELECT @DiscAlone=ISNULL(AllowDiscount,0) FROM ContractPricingMaster WHERE ContractId=@ContractId
	--SELECT  '9',@ContractId,@DiscAlone
	IF @DiscAlone=0
	BEGIN
		IF NOT EXISTS(SELECT * FROM  ContractPricingMaster A (NOLOCK) INNER JOIN ContractPricingDetails B ON A.ContractId = B.ContractId
		WHERE A.ContractId=@ContractId AND PrdId=@Pi_PrdId AND PrdBatId=(CASE DisplayMode WHEN 0 THEN 
		(CASE AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE PrdBatId END) ELSE PrdBatId END))
		BEGIN
			 SET @ContractId=0
		END
	ELSE
		IF NOT EXISTS(SELECT * FROM ContractPricingDetails WHERE ContractId=@ContractId AND
		PrdId=@Pi_PrdId)
		BEGIN
			 SET @ContractId=0
		END
	END
	--SELECT '10',@ContractId,@DiscAlone
	--Return Contract Price Id if set at Retailer Category Level Value without Tax Group-Channel Level
	IF @ContractId = 0
	BEGIN
			SELECT @ContractId = ISNULL(MAX(CP.ContractId),0) FROM Retailer  R
			INNER JOIN RetailerValueClassmap RVCM ON R.RtrId = RVCM.RtrId AND R.RtrId=@Pi_RtrId
			INNER JOIN RetailerValueClass RVC ON RVCM.RtrValueClassId = RVC.RtrClassId
			INNER JOIN RetailerCategory RCG ON RCG.CtgMainId = RVC.CtgMainId
			INNER JOIN RetailerCategory RCC ON RCC.CtgMainId = RCG.CtgLinkId
			INNER JOIN RetailerCategoryLevel RCL ON RCC.CtgLevelId = RCL.CtgLevelId
			INNER JOIN ContractPricingMaster CP ON CP.CtgMainId = RCC.CtgMainId
			AND CP.Status=1 AND @Pi_InvDate BETWEEN CP.ValidFromDate AND CP.ValidTillDate
			INNER JOIN ContractPricingDetails CPD ON CP.ContractId= CPD.ContractId AND CPD.PrdID=@Pi_PrdId 
			--AND CPD.PrdBatId=(CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END)
			AND CPD.PrdBatId=(CASE CP.DisplayMode WHEN 0 THEN (CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END) ELSE CPD.PrdBatId END)
			WHERE (CP.RtrId = @Pi_RtrId OR CP.RtrId = 0) AND CP.RtrClassId = 0 AND CP.PrdCtgValMainId IN (0,@PrdCtgValMainId)
		--SELECT * FROM ContractPricingMaster
	END	
	SELECT @DiscAlone=ISNULL(AllowDiscount,0) FROM ContractPricingMaster WHERE ContractId=@ContractId
	--SELECT  '9-1',@ContractId,@DiscAlone
	IF @DiscAlone=0
	BEGIN
		IF NOT EXISTS(SELECT * FROM  ContractPricingMaster A (NOLOCK) INNER JOIN ContractPricingDetails B ON A.ContractId = B.ContractId
		WHERE A.ContractId=@ContractId AND PrdId=@Pi_PrdId AND 	PrdBatId=(CASE DisplayMode WHEN 0 THEN 
		(CASE AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE PrdBatId END) ELSE PrdBatId END))
		BEGIN
			 SET @ContractId=0
		END
	ELSE
		IF NOT EXISTS(SELECT * FROM ContractPricingDetails WHERE ContractId=@ContractId AND
		PrdId=@Pi_PrdId)
		BEGIN
			 SET @ContractId=0
		END
	END
	--SELECT '10-1',@ContractId,@DiscAlone
	--Return Contract Price Id if set at Retailer Category Level with Tax Group
	IF @ContractId = 0
	BEGIN
		SELECT @ContractId = ISNULL(MAX(CP.ContractId),0) FROM Retailer  R
			INNER JOIN RetailerValueClassmap RVCM ON R.RtrId = RVCM.RtrId
			INNER JOIN RetailerValueClass RVC ON RVCM.RtrValueClassId = RVC.RtrClassId
			INNER JOIN RetailerCategory RC ON RC.CtgMainId = RVC.CtgMainId
			INNER JOIN RetailerCategoryLevel RCL ON RC.CtgLevelId = RCL.CtgLevelId
			INNER JOIN ContractPricingMaster CP ON CP.CtgLevelId = RCL.CtgLevelId
			AND CP.Status=1 AND @Pi_InvDate BETWEEN CP.ValidFromDate AND CP.ValidTillDate
			INNER JOIN ContractPricingDetails CPD ON CP.ContractId= CPD.ContractId AND CPD.PrdID=@Pi_PrdId 
			--AND CPD.PrdBatId=(CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END)
			AND CPD.PrdBatId=(CASE CP.DisplayMode WHEN 0 THEN (CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END) ELSE CPD.PrdBatId END)
			WHERE R.RtrId =@Pi_RtrId AND CP.RtrId = 0 AND CP.RtrClassId = 0
			AND CP.CtgMainId = 0 AND CP.RtrtaxGroupId=R.TaxGroupId
	END
	SELECT @DiscAlone=ISNULL(AllowDiscount,0) FROM ContractPricingMaster WHERE ContractId=@ContractId
	--SELECT '11',@ContractId,@DiscAlone
	IF @DiscAlone=0
	BEGIN
		IF NOT EXISTS(SELECT * FROM  ContractPricingMaster A (NOLOCK) INNER JOIN ContractPricingDetails B ON A.ContractId = B.ContractId
		WHERE A.ContractId=@ContractId AND PrdId=@Pi_PrdId AND 	PrdBatId=(CASE DisplayMode WHEN 0 THEN 
		(CASE AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE PrdBatId END) ELSE PrdBatId END))
		BEGIN
			 SET @ContractId=0
		END
	ELSE
		IF NOT EXISTS(SELECT * FROM ContractPricingDetails WHERE ContractId=@ContractId AND
		PrdId=@Pi_PrdId)
		BEGIN
			 SET @ContractId=0
		END
	END
	--SELECT '12',@ContractId,@DiscAlone
	--Return Contract Price Id if set at Retailer Category Level without Tax Group
	IF @ContractId = 0
	BEGIN
		SELECT @ContractId = ISNULL(MAX(CP.ContractId),0) FROM Retailer  R
			INNER JOIN RetailerValueClassmap RVCM ON R.RtrId = RVCM.RtrId
			INNER JOIN RetailerValueClass RVC ON RVCM.RtrValueClassId = RVC.RtrClassId
			INNER JOIN RetailerCategory RC ON RC.CtgMainId = RVC.CtgMainId
			INNER JOIN RetailerCategoryLevel RCL ON RC.CtgLevelId = RCL.CtgLevelId
			INNER JOIN ContractPricingMaster CP ON CP.CtgLevelId = RCL.CtgLevelId
			AND CP.Status=1 AND @Pi_InvDate BETWEEN CP.ValidFromDate AND CP.ValidTillDate
			INNER JOIN ContractPricingDetails CPD ON CP.ContractId= CPD.ContractId AND CPD.PrdID=@Pi_PrdId 
			--AND CPD.PrdBatId=(CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END)
			AND CPD.PrdBatId=(CASE CP.DisplayMode WHEN 0 THEN (CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END) ELSE CPD.PrdBatId END)
			WHERE R.RtrId =@Pi_RtrId AND CP.RtrId = 0 AND CP.RtrClassId = 0 AND CP.CtgMainId = 0
	END
	SELECT @DiscAlone=ISNULL(AllowDiscount,0) FROM ContractPricingMaster WHERE ContractId=@ContractId
	--SELECT '13',@ContractId,@DiscAlone
	
	IF @DiscAlone=0
	BEGIN
		IF NOT EXISTS(SELECT * FROM  ContractPricingMaster A (NOLOCK) INNER JOIN ContractPricingDetails B ON A.ContractId = B.ContractId
		WHERE A.ContractId=@ContractId AND PrdId=@Pi_PrdId AND 	PrdBatId=(CASE DisplayMode WHEN 0 THEN 
		(CASE AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE PrdBatId END) ELSE PrdBatId END))
		BEGIN
			 SET @ContractId=0
		END
	ELSE
		IF NOT EXISTS(SELECT * FROM ContractPricingDetails WHERE ContractId=@ContractId AND
		PrdId=@Pi_PrdId)
		BEGIN
			 SET @ContractId=0
		END
	END
	--SELECT '14',@ContractId,@DiscAlone
	--Return Contract Price Id if set at Company Level For all Retailer with Tax Group
	IF @ContractId = 0
	BEGIN
		SELECT @ContractId = ISNULL(MAX(CP.ContractId),0) FROM Product P 
			INNER JOIN ContractPricingMaster CP ON CP.CmpId = P.CmpId 
			AND CP.Status=1 AND @Pi_InvDate BETWEEN CP.ValidFromDate AND CP.ValidTillDate
			INNER JOIN ContractPricingDetails CPD ON CP.ContractId= CPD.ContractId AND CPD.PrdID=@Pi_PrdId 
			--AND CPD.PrdBatId=(CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END)
			AND CPD.PrdBatId=(CASE CP.DisplayMode WHEN 0 THEN (CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END) ELSE CPD.PrdBatId END)
			WHERE P.PrdId =@Pi_PrdId AND CP.RtrId = 0 AND CP.RtrClassId = 0 AND CP.CtgMainId = 0
			AND CP.CtgLevelId = 0 AND CP.RtrtaxGroupId=@RtrTaxGroupId
	END
	SELECT @DiscAlone=ISNULL(AllowDiscount,0) FROM ContractPricingMaster WHERE ContractId=@ContractId
	--SELECT '15',@ContractId,@DiscAlone
	IF @DiscAlone=0
	BEGIN
		IF NOT EXISTS(SELECT * FROM  ContractPricingMaster A (NOLOCK) INNER JOIN ContractPricingDetails B ON A.ContractId = B.ContractId
		WHERE A.ContractId=@ContractId AND PrdId=@Pi_PrdId AND 	PrdBatId=(CASE DisplayMode WHEN 0 THEN 
		(CASE AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE PrdBatId END) ELSE PrdBatId END))
		BEGIN
			 SET @ContractId=0
		END
	ELSE
		IF NOT EXISTS(SELECT * FROM ContractPricingDetails WHERE ContractId=@ContractId AND
		PrdId=@Pi_PrdId)
		BEGIN
			 SET @ContractId=0
		END
	END
	----SELECT '16',@ContractId,@DiscAlone
	--Return Contract Price Id if set at Company Level For all Retailer without Tax Group
	IF @ContractId = 0
	BEGIN
		SELECT @ContractId = ISNULL(MAX(CP.ContractId),0) FROM Product P
			INNER JOIN ContractPricingMaster CP ON CP.CmpId = P.CmpId
			AND CP.Status=1 AND @Pi_InvDate BETWEEN CP.ValidFromDate AND CP.ValidTillDate
			INNER JOIN ContractPricingDetails CPD ON CP.ContractId= CPD.ContractId AND CPD.PrdID=@Pi_PrdId
			--AND CPD.PrdBatId=(CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END)
			AND CPD.PrdBatId=(CASE CP.DisplayMode WHEN 0 THEN (CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END) ELSE CPD.PrdBatId END)
			WHERE P.PrdId =@Pi_PrdId AND CP.RtrId = 0 AND CP.RtrClassId = 0 AND CP.CtgMainId = 0
			AND CP.CtgLevelId = 0
	END
	SELECT @DiscAlone=ISNULL(AllowDiscount,0) FROM ContractPricingMaster WHERE ContractId=@ContractId
	--SELECT '17',@ContractId,@DiscAlone
	IF @DiscAlone=0
	BEGIN
		IF NOT EXISTS(SELECT * FROM  ContractPricingMaster A (NOLOCK) INNER JOIN ContractPricingDetails B ON A.ContractId = B.ContractId
		WHERE A.ContractId=@ContractId AND PrdId=@Pi_PrdId AND 	PrdBatId=(CASE DisplayMode WHEN 0 THEN 
		(CASE AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE PrdBatId END) ELSE PrdBatId END))
		BEGIN
			 SET @ContractId=0
		END
	ELSE
		IF NOT EXISTS(SELECT * FROM ContractPricingDetails WHERE ContractId=@ContractId AND
		PrdId=@Pi_PrdId)
		BEGIN
			 SET @ContractId=0
		END
	END	
	--SELECT '18',@ContractId,@DiscAlone
	--Return Contract Price Id if set at Company Level For all Retailer with Tax Group
	IF @ContractId = 0
	BEGIN
		SELECT @ContractId = ISNULL(MAX(CP.ContractId),0) FROM ContractPricingMaster CP
			INNER JOIN ContractPricingDetails CPD ON CP.ContractId= CPD.ContractId AND CPD.PrdID=@Pi_PrdId
			--AND CPD.PrdBatId=(CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END)
			AND CPD.PrdBatId=(CASE CP.DisplayMode WHEN 0 THEN (CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END) ELSE CPD.PrdBatId END)
			AND CP.Status=1 AND @Pi_InvDate BETWEEN CP.ValidFromDate AND CP.ValidTillDate
			WHERE CP.RtrId = 0 AND CP.RtrClassId = 0 AND CP.CtgMainId = 0
			AND CP.CtgLevelId = 0 AND CP.CmpId = 0 AND CP.RtrtaxGroupId=@RtrTaxGroupId
	END
	SELECT @DiscAlone=ISNULL(AllowDiscount,0) FROM ContractPricingMaster WHERE ContractId=@ContractId
	--SELECT '19',@ContractId,@DiscAlone
	IF @DiscAlone=0
	BEGIN
		IF NOT EXISTS(SELECT * FROM  ContractPricingMaster A (NOLOCK) INNER JOIN ContractPricingDetails B ON A.ContractId = B.ContractId
		WHERE A.ContractId=@ContractId AND PrdId=@Pi_PrdId AND 	PrdBatId=(CASE DisplayMode WHEN 0 THEN 
		(CASE AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE PrdBatId END) ELSE PrdBatId END))
		BEGIN
			 SET @ContractId=0
		END
	ELSE
		IF NOT EXISTS(SELECT * FROM ContractPricingDetails WHERE ContractId=@ContractId AND
		PrdId=@Pi_PrdId)
		BEGIN
			 SET @ContractId=0
		END
	END
	--SELECT '20',@ContractId,@DiscAlone
	--Return Contract Price Id if set at Company Level For all Retailer without Tax Group
	IF @ContractId = 0
	BEGIN
		SELECT @ContractId = ISNULL(MAX(CP.ContractId),0) FROM ContractPricingMaster CP
			INNER JOIN ContractPricingDetails CPD ON CP.ContractId= CPD.ContractId AND CPD.PrdID=@Pi_PrdId
			--AND CPD.PrdBatId=(CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END)
			AND CPD.PrdBatId=(CASE CP.DisplayMode WHEN 0 THEN (CASE CP.AllowDiscount WHEN 0 THEN @Pi_PrdBatId ELSE CPD.PrdBatId END) ELSE CPD.PrdBatId END)
			AND CP.Status=1 AND @Pi_InvDate BETWEEN CP.ValidFromDate AND CP.ValidTillDate
			WHERE CP.RtrId = 0 AND CP.RtrClassId = 0 AND CP.CtgMainId = 0
			AND CP.CtgLevelId = 0 AND CP.CmpId = 0
	END
	SELECT @DiscAlone=ISNULL(AllowDiscount,0) FROM ContractPricingMaster WHERE ContractId=@ContractId
	--SELECT '21',@ContractId,@DiscAlone
	IF @ContractId = 0
	BEGIN
		SET @Po_SplDiscount = 0
		SET @Po_SplFlatAmount = 0
		SET @Po_SplPriceId = 0
		SET @Po_MRP = 0
		SET @Po_SellRate = 0
		SET @Po_ClaimablePercOnMRP = 0
	END
	ELSE
	BEGIN
		SELECT @Po_SplDiscount = Discount, @Po_SplFlatAmount = FlatAmtDisc,
		@Po_SplPriceId = PriceId, @Po_ClaimablePercOnMRP = ClaimablePercOnMRP 
		FROM ContractPricingMaster A (NOLOCK) INNER JOIN ContractPricingDetails B (NOLOCK) ON A.ContractId = B.ContractId
		WHERE A.ContractId = @ContractId AND PrdId =@Pi_PrdId AND PrdBatId = (CASE PrdBatId WHEN 0 THEN PrdBatId ELSE @Pi_PrdBatId END)
		--PrdBatId = (CASE @DiscAlone WHEN 0 THEN Pi_PrdBatId ELSE PrdBatId END)		
		IF EXISTS (Select PrdBatId From ProductBatchDetails WHERE PriceId = @Po_SplPriceId AND PrdBatId = @Pi_PrdBatId AND DefaultPrice=1)
		BEGIN
			SET @Po_SplPriceId = 0
			SET @Po_MRP = 0
			SET @Po_SellRate = 0
		END
		ELSE
		BEGIN
			SELECT @Po_MRP = B.PrdBatDetailValue , @Po_SellRate = D.PrdBatDetailValue
				FROM ProductBatch A (NOLOCK)
				INNER JOIN ProductBatchDetails B (NOLOCK) ON A.PrdBatId = B.PrdBatID
				INNER JOIN BatchCreation C (NOLOCK) ON C.BatchSeqId = B.BatchSeqId
				AND B.SlNo = C.SlNo AND C.MRP = 1 INNER JOIN ProductBatchDetails D (NOLOCK) ON
				A.PrdBatId = D.PrdBatID INNER JOIN BatchCreation E (NOLOCK) ON
				E.BatchSeqId = D.BatchSeqId AND D.SlNo = E.SlNo AND E.SelRte = 1
				WHERE A.Status = 1 AND A.PrdId=@Pi_PrdId AND B.PriceId = @Po_SplPriceId
				AND D.PriceID = @Po_SplPriceId AND A.PrdBatId = @Pi_PrdBatId
		END
	END    
RETURN
END
GO
IF EXISTS(SELECT NAME FROM Sysobjects WHERE XTYPE='U' and NAME='Cs2Cn_Prk_PurchaseReturn_Approval')
DROP TABLE Cs2Cn_Prk_PurchaseReturn_Approval
GO
CREATE TABLE Cs2Cn_Prk_PurchaseReturn_Approval
(
	SlNo			NUMERIC(18,0) IDENTITY(1,1),
	DistCode		[NVARCHAR](50) NULL,
	SupPlierCode	[NVARCHAR](50),
	PurRetRefNo		[NVARCHAR](100),	
	GrnNo			[NVARCHAR](50),
	GrnDate			[DATETIME],
	CmpInvNo		[NVARCHAR](100),
	PurRetDate		[DATETIME],
	ReturnType		[INT],--1 With Reference/2 Without Reference
	MRP				[NUMERIC](18,6),
	PrdSlNo			[Int],
	Prdcode			[NVARCHAR](100),
	BatchCode		[NVARCHAR](100),
	SalQuantity		[INT],--Only in Base UOM
	UnSalQuantity	[INT],
	FreeQty			[INT],
	[Reason]		[Nvarchar](200), --Reason for Unsaleable Qty,
	Discount		[NUMERIC](18,6),
	LessScheme		[NUMERIC](18,6),
	OtherCharges	[NUMERIC](18,6),
	PrdTaxAmount	[NUMERIC](18,6),
	TotalTax		[NUMERIC](18,6),
	PrdGrossAmount	[NUMERIC](18,6),
	GrossAmount		[NUMERIC](18,6),
	PrdNetAmount	[NUMERIC](18,6),
 	NetAmount		[NUMERIC](18,6),
 	Remarks			[NVARCHAR](200),
 	UploadFlag		[VARCHAR](2),
	SyncId			[NUMERIC](38, 0)NULL,
	ServerDate		[DATETIME]
)
GO
IF EXISTS(SELECT NAME FROM Sysobjects WHERE XTYPE='U' and NAME='Cn2Cs_Prk_PurchaseReturn')
DROP TABLE Cn2Cs_Prk_PurchaseReturn
GO
CREATE TABLE Cn2Cs_Prk_PurchaseReturn
(
	DistCode		[NVARCHAR](50) NULL,
	PurchaseType	[INT],--1 Data uploaded from CoreStocky/2 Uploaded from Console
	ConPurRefNo		[NVARCHAR](100),--Console Purchase Return Reference No
	PurRetRefNo		[NVARCHAR](100),--'' then Download from Console\Upload from CoreStocky
	SapCode			[NVARCHAR](200),
	SupPlierCode	[NVARCHAR](50),
	CmpInvNo		[NVARCHAR](100),
	PurRetDate		[DATETIME],
	ReturnType		[INT],--1 With Reference/2 Without Reference
	MRP				[NUMERIC](18,6),
	PrdSlNo			[Int],
	Prdcode			[NVARCHAR](100),
	BatchCode		[NVARCHAR](100),
	SalQuantity		[INT],--Only in Base UOM
	UnSalQuantity	[INT],
	FreeQty			[INT],
	[Reason]		[Nvarchar](200), --Reason for Unsaleable Qty,
	Discount		[NUMERIC](18,6),
	LessScheme		[NUMERIC](18,6),
	OtherCharges	[NUMERIC](18,6),
	PrdTaxAmount	[NUMERIC](18,6),
	TotalTax		[NUMERIC](18,6),
	PrdGrossAmount	[NUMERIC](18,6),
	GrossAmount		[NUMERIC](18,6),
	PrdNetAmount	[NUMERIC](18,6),
 	NetAmount		[NUMERIC](18,6),
 	PurStatus		[VARCHAR](100),--APPROVED/REJECTED
 	Remarks			[NVARCHAR](200),
 	AddColumn1		[NVARCHAR](200),
 	AddColumn2		[NVARCHAR](200),
 	AddColumn3		[NVARCHAR](200),
	DownLoadFlag	[VARCHAR](10) NULL,
	CreatedDate		[DATETIME] NULL	
)
GO
IF EXISTS(SELECT NAME FROM Sysobjects WHERE XTYPE='U' and NAME='ETL_Prk_PurchaseReturn')
DROP TABLE ETL_Prk_PurchaseReturn
GO
CREATE TABLE ETL_Prk_PurchaseReturn
(
 	Spmid			[Int],
 	ConPurRefNo		[NVARCHAR](100),
	SapCode			[NVARCHAR](200),	
	PurRetRefNo		[NVARCHAR](100),
	CmpInvNo		[NVARCHAR](100),
	GrnNo			[NVARCHAR](100),
	InvDate			[DATETIME],
	ReturnType		[INT],
	PurRcptid		[INT],
	Prdid			[INT],	
	PrdBatid		[INT],
	MRP				[NUMERIC](18,6),
	PrdSlNo			[Int],
	SalQuantity		[INT],
	UnSalQuantity	[INT],
	FreeQty			[INT],
	[Reason]		[Nvarchar](200), --Reason for Unsaleable Qty,
	Discount		[NUMERIC](18,6),
	LessScheme		[NUMERIC](18,6),
	OtherCharges	[NUMERIC](18,6),
	PrdTaxAmount	[NUMERIC](18,6),
	TotalTax		[NUMERIC](18,6),
	PrdGrossAmount	[NUMERIC](18,6),
	GrossAmount		[NUMERIC](18,6),
	PrdNetAmount	[NUMERIC](18,6),
 	NetAmount		[NUMERIC](18,6),
 	PurStatus		[VARCHAR](100),--APPROVED/REJECTED
 	Remarks			[NVARCHAR](200),
 	DownloadStatus	[INT],
 	Authid			[INT],
 	AuthDate		[DATETIME]
)
GO
DELETE FROM HotSearchEditorHd WHERE FormId=7003
INSERT INTO  HotSearchEditorHd 
SELECT 7003,'Purchase Return','CompanyInvoice','Select',' SELECT DISTINCT ConPurRefNo,InvDate,ReturnType FROM ETL_Prk_PurchaseReturn WHERE DownloadStatus=0'
GO
DELETE FROM HotSearchEditorDT WHERE FormId=7003
INSERT INTO HotSearchEditorDT 
SELECT 1,7003,'CompanyInvoice','ReferenceNo','ConPurRefNo',2500,0,'HotSch-7-2000-1',7  UNION
SELECT 2,7003,'CompanyInvoice','ReferenceNo','InvDate',2500,0,'HotSch-7-2000-2',7 
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='FN_ReturnDownloadPurchaseReturn' AND XTYPE='TF')
DROP FUNCTION FN_ReturnDownloadPurchaseReturn
GO
CREATE FUNCTION FN_ReturnDownloadPurchaseReturn(@CmpInvno AS NVARCHAR(50),@ReturnType AS INT)
RETURNS  @TABLE Table
(
	Slno				INT,
	PurRcptId			INT,
	PrdId				INT,	
	PrdCCode			NVARCHAR(50),
	PrdName				NVARCHAR(100),
	PrdBatId			INT,
	PrdBatCode			NVARCHAR(100),
	RcvdGoodBaseQty		INT,
	UnSalBaseQty		INT,
	ExsBaseQty			INT,
	RefuseSale			INT,
	Mrp					NUMERIC(18,6),
	listprice			NUMERIC(18,6),
	PriceId				INT,
	PrdGrossAmount		NUMERIC(18,6),
	PrdDiscount			NUMERIC(18,6),
	PrdTaxAmount		NUMERIC(18,6),
	PrdUnitNetRate		NUMERIC(18,6),
	PrdNetAmount		NUMERIC(18,6),
	rowid			    INT,
	PrdGrossAmtEditSts  INT,
	RcvdRetBaseQty	    INT,
	RetUnSalBaseQty	    INT

)
AS
BEGIN
	IF @ReturnType=2
	BEGIN 
		INSERT INTO @TABLE
		SELECT  ROW_NUMBER()OVER (ORDER BY PRDID)as  Slno,0 as PurRcptId,Prdid,PrdCCode,PrdName,PrdBatid,PrdBatCode,0 as SalQuantity,0 UnSalQuantity,
		0 AS ExsBaseQty,0 AS RefuseSale,SUM(isnull(MRP,0))MRP ,SUM(isnull(LISTPRICE,0)),PriceId,0 as PrdGrossAmount,0 as PrdDiscount,0 as PrdTaxAmount,
		0 as PrdUnitNetRate,0 as PrdNetAmount ,0 as rowid ,0 as PrdGrossAmtEditSts,SalQuantity,UnSalQuantity
		FROM
		(
		SELECT E.Prdid,PrdCCode,PrdName,E.PrdBatid,PrdBatCode 
			,isnull(CASE PBD.SLNO WHEN 1 THEN PrdBatDetailValue  END,0) AS MRP , isnull(CASE PBD.SLNO WHEN 2 THEN  PrdBatDetailValue END,0) AS LISTPRICE,
			PBD.PriceId,SalQuantity,UnSalQuantity
		FROM ETL_Prk_PurchaseReturn E INNER JOIN PRODUCT P ON P.PrdId=E.Prdid
		INNER JOIN ProductBatch PB ON PB.PrdId=P.PrdId AND PB.PrdBatId=E.PRDBATID
		INNER JOIN UomGroup U ON U.UomGroupId=P.UomGroupId AND BaseUom='Y'
		INNER JOIN ProductBatchDetails PBD ON PBD.PrdBatId=E.PrdBatid AND PBD.PRDBATID=PB.PrdBatId AND PBD.DefaultPrice=1 AND SLNO IN (1,2)
		)A  group by  Prdid,PrdCCode,PrdName,PrdBatid,PrdBatCode,PriceId,SalQuantity,UnSalQuantity
	END
				
	
RETURN
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE NAME='Fn_ReturnServiceGroupDt' and xtype IN ('TF','FN'))
DROP FUNCTION Fn_ReturnServiceGroupDt
GO
--SELECT * FROM Fn_ReturnServiceGroupDt(1)
CREATE FUNCTION Fn_ReturnServiceGroupDt(@ServiceGroupId AS INT)
RETURNS @ServiceGroupDt TABLE
(
	ServiceGroupCode VARCHAR(100),
	ServiceTaxCode VARCHAR(100),
	ServiceTaxPer NUMERIC(18,3)
)
AS
BEGIN

	DECLARE @TAXSEQ TABLE
	(
		ServiceGroupId	INT,
		ServiceTaxSeqId	INT
	)
	
	INSERT INTO @TAXSEQ
	SELECT ServiceGroupId,MAX(ServiceTaxSeqId) AS ServiceTaxSeqId1 FROM ServiceTaxGroupSetting B 
	GROUP BY ServiceGroupId
	
	INSERT INTO @ServiceGroupDt
	SELECT ServiceGroupCode,ServiceTaxCode,ServiceTaxPer  FROM ServiceTaxGroupMaster S  
	INNER JOIN ServiceTaxGroupSetting ST ON S.ServiceGroupId=ST.ServiceGroupId WHERE S.ServiceGroupId=@ServiceGroupId 
	AND EXISTS (SELECT * FROM @TAXSEQ B WHERE ST.ServiceGroupId=B.ServiceGroupId AND ST.ServiceTaxSeqid=B.ServiceTaxSeqId)
	

RETURN
END
GO
DELETE FROM HotSearchEditorHd WHERE FormId=10049
INSERT INTO HotSearchEditorHd
SELECT 10049,'Sales Return','Retailer Selection','select','Select Rtrid,RtrCode,RtrName,CASE ISNULL(ColumnValue,0) WHEN ''Registered'' THEN 1 WHEN ''Unregistered'' THEN 2 ELSE 0 END RetailerType 
From Retailer R LEFT OUTER JOIN (SELECT MASTERRECORDID,ColumnValue FROM UDCDETAILS UD
INNER JOIN UdcMaster U ON U.MasterId=UD.MasterId AND U.UdcMasterId=UD.UdcMasterId AND U.MasterId=2 AND ColumnName=''Retailer Type'')A
ON A.MasterRecordId=R.RtrId'
GO
DELETE FROM HotSearchEditorHd WHERE FormId=676
INSERT INTO HotSearchEditorHd
SELECT 676,'Sales Return','Retailer Selection','select',
'SELECT RtrId,RtrCode,RtrName,  RtrSeqDtId,RetailerType FROM (
SELECT C.RtrId,C.RtrCode,C.RtrName,B.RtrSeqDtId,CASE ISNULL(ColumnValue,0) WHEN ''Registered'' THEN 1 WHEN ''Unregistered'' THEN 2 ELSE 0 END RetailerType  
FROM RetailerSequence A (NOLOCK)   
INNER JOIN RetailerSeqDetails B (NOLOCK) ON A.RtrSeqID = B.RtrSeqId INNER JOIN Retailer C (NOLOCK)   on C.RtrId = B.RtrId 
LEFT OUTER JOIN (SELECT MASTERRECORDID,ColumnValue FROM UDCDETAILS UD
	INNER JOIN UdcMaster U ON U.MasterId=UD.MasterId AND U.UdcMasterId=UD.UdcMasterId AND U.MasterId=2 AND ColumnName=''Retailer Type'')D
	ON D.MasterRecordId=C.RtrId 
WHERE C.RtrStatus = 1 And A.SMId = vFParam And A.RMId = vSParam   And TransactionType=vTParam  
UNION
SELECT D.RtrId,D.RtrCode,D.RtrName,100000 as RtrSeqDtId,CASE ISNULL(UDC.ColumnValue,0) WHEN ''Registered'' THEN 1 WHEN ''Unregistered'' THEN 2 ELSE 0 END RetailerType    
FROM Retailer D (NOLOCK) 
INNER JOIN RetailerMarket E (NOLOCK) ON D.RtrId = E.RtrId  
LEFT OUTER JOIN (SELECT MASTERRECORDID,ColumnValue FROM UDCDETAILS UD
	INNER JOIN UdcMaster U ON U.MasterId=UD.MasterId AND U.UdcMasterId=UD.UdcMasterId AND U.MasterId=2 AND ColumnName=''Retailer Type'')UDC
	ON UDC.MasterRecordId=D.RtrId AND UDC.MasterRecordId=E.rtrid
WHERE D.RtrStatus = 1 And E.RMId = vSParam And D.Rtrid NOT IN (SELECT C.RtrId FROM   RetailerSequence A (NOLOCK) 
INNER JOIN RetailerSeqDetails B (NOLOCK) ON A.RtrSeqID = B.RtrSeqId   INNER JOIN Retailer C (NOLOCK) on C.RtrId = B.RtrId 
WHERE C.RtrStatus = 1   And A.SMId = vFParam And A.RMId = vSParam And TransactionType= vTParam))MAINQRY   ORDER BY RtrSeqDtId'
GO
IF EXISTS(SELECT NAME FROM  SYSOBJECTS WHERE XTYPE IN('TF','FN') AND NAME='FN_CheckForSalesReturnTax_GST')
DROP FUNCTION FN_CheckForSalesReturnTax_GST
GO
CREATE FUNCTION [FN_CheckForSalesReturnTax_GST](@Date AS DATETIME,@RefId AS BIGINT,@InvDate AS DATETIME,@RtrId AS INT)
RETURNS @CheckForSalesReturnTax TABLE
	(
		[RetailerType] 		TINYINT,
		[TaxApplicable]	 TINYINT,
		[TaxType] Varchar(20),	
		[SellRateEdit] TINYINT,
		[SRNRuningNo] TINYINT,
		[GSTTag] Varchar(10)
	)
AS	
BEGIN
	DECLARE @GSTTag Varchar(15)
	DECLARE @Year AS INT
	DECLARE @Month AS INT
	DECLARE @ActivationDate AS DATETIME
	DECLARE @FinanceFromDate AS DAtETIME
	DECLARE @FinanceToDate AS DAtETIME
	DECLARE @TaxSubMissionDate AS DATETIME
	DECLARE @Day AS INT
	DECLARE @ApplyTax AS  INT
	DECLARE @RetailerType AS INT
	DECLARE @RetailerComposite AS INT
	DECLARE @RetailerTaxApply as INT
	DECLARE @VatFromDate DATETIME
	DECLARE @TaxTypeApply Varchar(10)
	DECLARE @SellRateEdit TINYINT
	DECLARE @VatGst as Varchar(20)
	DECLARE @GSTRuningNo AS TINYINT	
	DECLARE @GSTSellRateEdit AS TINYINT	
	SET @Year=YEAR(GETDATE())
	SET @Month=MONTH(GETDATE())
	
	SET @ApplyTax=1 
	SET @TaxTypeApply=''
	SET @GSTRuningNo=0
	SET @RetailerType=0
	SET @RetailerTaxApply=0
	SET @RetailerComposite=0
	SET @SellRateEdit=0
	SET @GSTSellRateEdit=0

	SET @SellRateEdit=0
	
	SELECT @VatGst=VatGst FROM Salesinvoice (NOLOCK) WHERE SalId=@RefId
	
	SELECT @RetailerType=CASE ISNULL(ColumnValue,'') WHEN 'Registered' THEN 1 WHEN 'Unregistered' THEN 2 ELSE 0 END  
	FROM UDCDETAILS UD
	INNER JOIN UdcMaster U ON U.MasterId=UD.MasterId AND U.UdcMasterId=UD.UdcMasterId AND U.MasterId=2 AND ColumnName='Retailer Type'
	AND MasterRecordId=@Rtrid
	
	SELECT @RetailerComposite=CASE ISNULL(ColumnValue,'') WHEN 'YES' THEN 1 WHEN 'NO' THEN 2 ELSE 0 END  
	FROM UDCDETAILS UD
	INNER JOIN UdcMaster U ON U.MasterId=UD.MasterId AND U.UdcMasterId=UD.UdcMasterId AND U.MasterId=2 AND ColumnName='Composition'
	AND MasterRecordId=@Rtrid
	
	IF EXISTS(SELECT 'X' FROM MANUALCONFIGURATION (NOLOCK) WHERE ProjectName='GST' and ModuleId='SAL_RETURN5' and Status=1)
	BEGIN
		SET @GSTSellRateEdit=1
	END
	
	
	IF ISNULL(@RetailerComposite,0)=1
	BEGIN
		SET @RetailerTaxApply=3--Registered Composite
		
	END
	ELSE IF ISNULL(@RetailerType,0)=1 
	BEGIN
		SET @RetailerTaxApply=1--Registered Retailer
	END
	ELSE IF  ISNULL(@RetailerType,0)=2
	BEGIN
		SET @RetailerTaxApply=2--UnRegistered Retailer
	END

	
	SELECT @Day =ISNULL(configvalue,0) FROM MANUALCONFIGURATION WHERE ProjectName='GST' AND ModuleId='SAL_RETURN1' AND ModuleName='Sales Return'

	SET @GSTTag = 'VAT' ---Before GST
	 
	IF EXISTS(SELECT 'X' FROM GSTConfiguration 
	WHERE ModuleId='GSTCONFIG' AND Description='GST Configuration' and ActivationStatus=1 AND AcknowledgeStatus=1 AND ConsoleAckStatus=1)
	BEGIN
			IF @VatGst='GST'
			BEGIN
				SET @TaxSubMissionDate=CONVERT(VARCHAR(10),@Year)+'-'+ CONVERT(VARCHAR(5),@Day) +'-'+'01'
				
				SET @TaxSubMissionDate=CONVERT(VARCHAR(10),DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0,@TaxSubMissionDate)+1,0)),121)--GET THE LAST DATE OF THE MONTH
				
				IF @Date<=@TaxSubMissionDate
				BEGIN		
					SET @FinanceFromDate=(SELECT CONVERT(VARCHAR(10),DATEADD(MONTH,-18,@TaxSubMissionDate),121) ) 
					SET @FinanceFromDate=(SELECT CONVERT(VARCHAR(10),DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0,@FinanceFromDate)+1,0)),121))--GET THE LAST DATE OF THE MONTH
					
					IF @InvDate>@FinanceFromDate
					BEGIN
						SET @ApplyTax=1
					END
					
					IF @InvDate<=@FinanceFromDate
					BEGIN
						SET @ApplyTax=0
					END			
 				END
				
				IF @Date>=@TaxSubMissionDate
				BEGIN
					SET @FinanceFromDate= CONVERT(VARCHAR(10),@Year)+'-04-'+'01' 

					IF @InvDate>=@FinanceFromDate
					BEGIN
						SET @ApplyTax=1			
					END
				
					IF 	@InvDate<@FinanceFromDate
					BEGIN
						SET @ApplyTax=0		
					END
 				END
 				SET @TaxTypeApply='GST'
 				SET @SellRateEdit=0 
 				SET @GSTRuningNo=1	
 				SET @GSTTag='DTGST'		
 			END	
 			ELSE IF @VatGst='VAT'
 			BEGIN
 					SET @VatFromDate=CONVERT(DATETIME,CONVERT(VARCHAR(10),'2017-01-01',121),121)	
					SET @TaxSubMissionDate=CONVERT(DATETIME,CONVERT(VARCHAR(10),'2017-12-31',121),121)
								
					IF @Date<=@TaxSubMissionDate
					BEGIN		
					
						IF @InvDate BETWEEN @VatFromDate and @TaxSubMissionDate --With in transition Period (2017.01.01 to 2017.12.31)
						BEGIN							
							IF  @RetailerTaxApply IN(2,3) --Composite/Unregistered
							BEGIN
								SET @TaxTypeApply='VAT'
							END	
							ELSE IF @RetailerTaxApply=1--Registered
							BEGIN
								SET @TaxTypeApply='GST'								
								IF @GSTSellRateEdit=1
								BEGIN
									SET @SellRateEdit=1
								END	
							END
							SET @ApplyTax=1
						END
						ELSE						
						IF @InvDate<=@VatFromDate
						BEGIN
							SET @TaxTypeApply='VAT'
							SET @ApplyTax=0
						END	
						SET @GSTTag='DTVAT'		
 					END
					
					IF @Date>=@TaxSubMissionDate
					BEGIN
						SET @FinanceFromDate= CONVERT(VARCHAR(10),@Year)+'-04-'+'01' 
						
						SET @TaxTypeApply='VAT'
						SET @SellRateEdit=0
						
						SET @VatFromDate=CONVERT(DATETIME,CONVERT(VARCHAR(10),'2017-04-01',121),121)	
						SET @TaxSubMissionDate=CONVERT(DATETIME,CONVERT(VARCHAR(10),'2017-06-30',121),121)
						
						--IF @InvDate>=@FinanceFromDate
						IF @InvDate BETWEEN @VatFromDate and @TaxSubMissionDate
						BEGIN
							SET @ApplyTax=1			
						END
						ELSE
						BEGIN
							SET @ApplyTax=0	
						END
						--IF 	@InvDate<@FinanceFromDate
						--BEGIN
						--	SET @ApplyTax=0		
						--END
						SET @GSTTag='PTVAT'
						
 					END
					SET @GSTRuningNo=0		
 			END	
 		
 		
	END 
	INSERT INTO @CheckForSalesReturnTax(RetailerType,TaxApplicable,TaxType,SellRateEdit,SRNRuningNo,GSTTag)
	SELECT @RetailerTaxApply,@ApplyTax,@TaxTypeApply,@SellRateEdit,@GSTRuningNo,@GSTTag
	RETURN
END
GO
IF EXISTS(SELECT NAME FROM  SYSOBJECTS WHERE XTYPE='FN' AND NAME='FN_CheckForReverseCharge_GST')
DROP FUNCTION FN_CheckForReverseCharge_GST
GO
CREATE FUNCTION [FN_CheckForReverseCharge_GST](@Date AS DATETIME,@Rtrid AS INT)
RETURNS INTEGER 
AS	
BEGIN
DECLARE @CalcReverseCharge AS INT
DECLARE @RetailerType AS VARCHAR(50)

SET @CalcReverseCharge=0
---Reverse Charge Concept removed

	--IF EXISTS(SELECT 'X' FROM GSTConfiguration (NOLOCK)
	--WHERE  ModuleId='GSTCONFIG' AND Description='GST Configuration' AND ActivationStatus=1 and AcknowledgeStatus=1 and ConsoleAckStatus=1 )
	--BEGIN
		
	--	SELECT @RetailerType=ColumnValue FROM UdcMaster U (NOLOCK) 
	--	INNER JOIN UdcDetails UD (NOLOCK) ON U.MasterId=UD.MasterId and U.UdcMasterId=UD.UdcMasterId
	--	INNER JOIN Retailer D (NOLOCK) ON D.RtrId=UD.MasterRecordId
	--	WHERE U.MasterId=2 and ColumnName='Retailer Type'   and D.RtrId=@RtrId

	--	IF @RetailerType='UN Registered'
	--	BEGIN		
	--		IF @Date<'2017-09-30' 
	--		BEGIN
	--			SET @CalcReverseCharge=1
	--		END
	--		ELSE
	--		BEGIN
	--			SET @CalcReverseCharge=0
	--		END
	--	END
	--	ELSE
	--	BEGIN
	--			SET @CalcReverseCharge=0
	--	END
	--END
RETURN(@CalcReverseCharge)
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE NAME='Proc_ComputeIDTTax' AND XTYPE='P')
DROP PROCEDURE Proc_ComputeIDTTax
GO
--  EXEC [Proc_ComputeIDTTax] 2,253,1
CREATE PROCEDURE [Proc_ComputeIDTTax]
(
	@Pi_RowId  INT,
	@Pi_CalledFrom  INT,
	@Pi_UserId  INT
)
AS
/*****************************************************************************************************
* PROCEDURE : Proc_ComputeIDTTax
* PURPOSE	: To Calculate the Line Level Tax
* CREATED	: Panneerselvam.K
* CREATED DATE  : 22/03/2007
* MODIFIED Purpose : To Calculate Tax for Inter Distributor's
* DATE      AUTHOR     DESCRIPTION
-------------------------------------------------------------------------------------------------------
* {date} {developer}  {brief modification description}
*******************************************************************************************************/
SET NOCOUNT ON
BEGIN
	DECLARE @PrdBatTaxGrp   INT
	DECLARE @RtrTaxGrp   INT
	DECLARE @TaxSlab  INT
	DECLARE @MRP   NUMERIC(28,10)
	DECLARE @SellingRate  NUMERIC(28,10)
	DECLARE @PurchaseRate  NUMERIC(28,10)
	DECLARE @TaxableAmount  NUMERIC(28,10)
	DECLARE @ParTaxableAmount NUMERIC(28,10)
	DECLARE @TaxPer   NUMERIC(38,2)
	DECLARE @TaxId   INT
	DECLARE @TaxSetting TABLE
	(
		TaxSlab   INT,
		ColNo   INT,
		SlNo   INT,
		BillSeqId  INT,
		TaxSeqId  INT,
		ColType   INT,
		ColId   INT,
		ColVal   NUMERIC(38,2)
	)
	--To Take the Batch TaxGroup Id
	SELECT @PrdBatTaxGrp = TaxGroupId
	FROM ProductBatch A (NOLOCK)  
				INNER JOIN	BilledPrdHdForTax B (NOLOCK) On A.PrdId = B.PrdId AND A.PrdBatID = B.PrdBatID
				AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom
	--To Take the Batch List Price
	IF (@Pi_CalledFrom = 270 )
	BEGIN
			SELECT @PurchaseRate =ISNULL((C.PrdBatDetailValue * BaseQty),0) 
			FROM ProductBatch A (NOLOCK) 
				 INNER JOIN	BilledPrdHdForTax B (NOLOCK) On A.PrdId = B.PrdId AND A.PrdBatID = B.PrdBatID
				 AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom
				 INNER JOIN ProductBatchDetails C (NOLOCK) ON A.PrdBatId = C.PrdBatID AND C.PriceId = B.PriceId
				 INNER JOIN BatchCreation D (NOLOCK) ON D.BatchSeqId = A.BatchSeqId AND D.SlNo = C.SlNo
				 AND D.ListPrice = 1
	END
	--To Take the Batch MRP
	IF (@Pi_CalledFrom = 270 )
	BEGIN
			SELECT @MRP = ISNULL((C.PrdBatDetailValue * BaseQty),0) 
			FROM ProductBatch A (NOLOCK) 
				INNER JOIN BilledPrdHdForTax B (NOLOCK) On A.PrdId = B.PrdId AND A.PrdBatID = B.PrdBatID
					AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom
					INNER JOIN ProductBatchDetails C (NOLOCK) 	ON A.PrdBatId = C.PrdBatID AND C.PriceId = B.PriceId
					INNER JOIN BatchCreation D (NOLOCK)		ON D.BatchSeqId = A.BatchSeqId AND D.SlNo = C.SlNo
					AND D.MRP = 1
	END
	--To Take the Batch Selling Rate
	IF (@Pi_CalledFrom = 270 )
	BEGIN
			SELECT @SellingRate = ISNULL((C.PrdBatDetailValue * BaseQty),0) 
			FROM ProductBatch A (NOLOCK) 
			INNER JOIN	BilledPrdHdForTax B (NOLOCK) On A.PrdId = B.PrdId AND A.PrdBatID = B.PrdBatID
						AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom
			INNER JOIN ProductBatchDetails C (NOLOCK)	ON A.PrdBatId = C.PrdBatID AND C.PriceId = B.PriceId
			INNER JOIN BatchCreation D (NOLOCK)	    	ON D.BatchSeqId = A.BatchSeqId AND D.SlNo = C.SlNo
			AND D.SelRte = 1
	END
	IF (@Pi_CalledFrom = 270)
	BEGIN
			--To Take the IDT TaxGroup Id
			SELECT DISTINCT @RtrTaxGrp = TaxGroupId 
			FROM IDTMaster A (NOLOCK) INNER JOIN BilledPrdHdForTax B (NOLOCK) On A.SPMId = B.RtrId
			AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId
			AND B.TransId = @Pi_CalledFrom
	END
	--Store the Tax Setting for the Corresponding Retailer and Batch
	INSERT INTO @TaxSetting (TaxSlab,ColNo,SlNo,BillSeqId,TaxSeqId,ColType,ColId,ColVal)
	SELECT 
			B.RowId,B.ColNo,B.SlNo,B.BillSeqId,B.TaxSeqId,B.ColType,B.ColId,B.ColVal
	FROM 
			TaxSettingMaster A (NOLOCK) 
			INNER JOIN	TaxSettingDetail B (NOLOCK) ON A.TaxSeqId = B.TaxSeqId
			INNER JOIN BilledPrdHdForTax C (NOLOCK) ON C.BillSeqId = B.BillSeqId
	WHERE 
			A.RtrId = @RtrTaxGrp AND A.Prdid = @PrdBatTaxGrp AND C.UsrId = @Pi_UserId
			AND C.RowId = @Pi_RowId AND C.TransId = @Pi_CalledFrom
			AND A.TaxSeqId in (Select ISNULL(Max(TaxSeqId),0) FROM TaxSettingMaster WHERE
								RtrId = @RtrTaxGrp AND Prdid = @PrdBatTaxGrp
								and CONVERT(DATETIME,CONVERT(VARCHAR(10),EffectiveFrom,121),121)<=CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121)--GST
								)
	DELETE FROM BilledPrdDtCalculatedTax WHERE RowId = @Pi_RowId AND UsrId = @Pi_UserId
	AND TransId = @Pi_CalledFrom
	--Cursor For Taking Each Slab and Calculate Tax
	DECLARE  CurTax CURSOR FOR
	SELECT DISTINCT TaxSlab FROM @TaxSetting
	OPEN CurTax
	FETCH NEXT FROM CurTax INTO @TaxSlab
		WHILE @@FETCH_STATUS = 0
		BEGIN
			SET @TaxableAmount = 0
			--To Filter the Records Which Has Tax Percentage (>=0)
			IF EXISTS (SELECT * FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 1
			AND ColId = 0 and ColVal >= 0)
			BEGIN
				--To Get the Tax Percentage for the selected slab
				SELECT @TaxPer = ColVal FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 1
				AND ColId = 0
				--To Get the TaxId for the selected slab
				SELECT @TaxId = Cast(ColVal as INT) FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 1
				AND ColId > 0
				--To Get the Adjustable amount from Other Columns
				SELECT @TaxableAmount = ISNULL(SUM(ColValue),0) FROM
				(SELECT CASE B.ColVal WHEN 1 THEN A.ColValue WHEN 2 THEN -1 * A.ColValue END AS ColValue 
				 FROM BilledPrdDtForTax A 
					  INNER JOIN @TaxSetting B ON A.ColId = B.ColId AND A.RowId =  @Pi_RowId 
					  AND A.UsrId = @Pi_UserId AND A.TransId = @Pi_CalledFrom
				WHERE TaxSlab = @TaxSlab AND B.ColType = 2 and B.ColId>3
				And B.ColVal >0  ) as C
				--To add MRP to Taxable Amount if MRP Is Selected for the Slab
				IF EXISTS (SELECT * FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 2
													 AND ColId = 1 and ColVal > 0)
				SET @TaxableAmount = ISNULL(@TaxableAmount,0) + @MRP
				--To add Selling Rate to Taxable Amount if Selling Rate Is Selected for the Slab
				IF EXISTS (SELECT * FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 2
													 AND ColId = 2 and ColVal > 0)
				SET @TaxableAmount = ISNULL(@TaxableAmount,0) + @SellingRate
				--To add Purchase Rate to Taxable Amount if Purchase Rate Is Selected for the Slab
				IF EXISTS (SELECT * FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 2
				AND ColId = 3 and ColVal > 0)
				SET @TaxableAmount = ISNULL(@TaxableAmount,0) + @PurchaseRate
				--To Get the Parent Taxable Amount for the Tax Slab
				SELECT @ParTaxableAmount =  ISNULL(SUM(TaxAmount),0) FROM BilledPrdDtCalculatedTax A
				INNER JOIN @TaxSetting B ON A.TaxId = B.ColVal AND A.RowId = @Pi_RowId
				AND A.UsrId = @Pi_UserId AND B.ColType = 3 AND B.TaxSlab = @TaxSlab
				AND A.TransId = @Pi_CalledFrom
				Set @TaxableAmount = @TaxableAmount + @ParTaxableAmount
				--Insert the New Tax Amounts
				INSERT INTO BilledPrdDtCalculatedTax (RowId,PrdId,PrdBatId,TaxId,TaxSlabId,TaxPercentage,
													 TaxableAmount,TaxAmount,Usrid,TransId)
				SELECT 
					@Pi_RowId,B.PrdId,B.PrdBatId,@TaxId,@TaxSlab,@TaxPer,
					@TaxableAmount,cast(@TaxableAmount * (@TaxPer / 100 ) AS NUMERIC(28,10)),
					@Pi_UserId,@Pi_CalledFrom 
				FROM BilledPrdHdForTax B (NOLOCK) WHERE
				B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom
			END
		FETCH NEXT FROM CurTax INTO @TaxSlab
	END
	CLOSE CurTax
	DEALLOCATE CurTax
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE NAME='Proc_SellingTaxCalCulation' AND XTYPE='P')
DROP PROCEDURE Proc_SellingTaxCalCulation
GO
--Select * from Taxconfiguration
--Exec Proc_SellingTaxCalCulation 315,4834
CREATE PROCEDURE [Proc_SellingTaxCalCulation]
(
	@Prdid AS INT,
	@Prdbatid AS INT,
	@Rtrid AS INT = NULL,
	@Pi_RtrShipId AS INT =NULL,	
	@Pi_SplInvDate AS DATETIME=NULL
)
AS
BEGIN
		DECLARE @TaxSettingDet TABLE       
		(      
		TaxSlab   INT,      
		ColNo   INT,      
		SlNo   INT,      
		BillSeqId  INT,      
		TaxSeqId  INT,      
		ColType   INT,       
		ColId   INT,      
		ColVal   NUMERIC(38,2)      
		) 
		DECLARE @PrdBatTaxGrp AS INT
		DECLARE @PurSeqId AS INT
		DECLARE @BillSeqId AS INT
		DECLARE @RtrTaxGrp AS INT		 
		DECLARE @TaxSlab  INT  
		DECLARE @MRP INT    
		DECLARE @TaxableAmount  NUMERIC(28,10)      
		DECLARE @ParTaxableAmount NUMERIC(28,10)      
		DECLARE @TaxPer   NUMERIC(38,2)     
		DECLARE @TaxPercentage   NUMERIC(38,5)   
		DECLARE @TaxId   INT    
		DECLARE @Pi_gServerDate AS DATETIME
		--To Take the Batch TaxGroup Id      
		SELECT @PrdBatTaxGrp = TaxGroupId FROM ProductBatch A (NOLOCK) WHERE Prdid=@Prdid and  Prdbatid=@Prdbatid
		SELECT @BillSeqId = MAX(BillSeqId)  FROM BillSequenceMaster (NOLOCK)
		
		
		
		
		SET @Pi_gServerDate=CONVERT(DATETIME,CONVERT(VARCHAR(10),ISNULL(@Pi_SplInvDate,GETDATE()),121),121)
		SET @Pi_RtrShipId=ISNULL(@Pi_RtrShipId,0)
		SET @Rtrid=ISNULL(@Rtrid,0)
		
		IF EXISTS(SELECT 'X' FROM RetailerShipAdd A (NOLOCK)
		INNER JOIN Retailer B (NOLOCK) ON A.RtrId=B.RtrId
		INNER JOIN TaxSettingMaster C (NOLOCK) ON C.RtrId=A.TaxGroupId
		WHERE A.RtrShipId=@Pi_RtrShipId and A.TaxGroupId>0 and B.RtrId=@Rtrid and  C.PrdId = @PrdBatTaxGrp)
		BEGIN
			SELECT @RtrTaxGrp=A.TaxGroupId FROM RetailerShipAdd A (NOLOCK)
			INNER JOIN Retailer B (NOLOCK) ON A.RtrId=B.RtrId
			INNER JOIN TaxSettingMaster C (NOLOCK) ON C.RtrId=A.TaxGroupId
			WHERE A.RtrShipId=@Pi_RtrShipId and A.TaxGroupId>0 and B.RtrId=@Rtrid and  C.PrdId = @PrdBatTaxGrp
		END
		ELSE
		BEGIN	
			Select @RtrTaxGrp=MIN(Distinct A.RtriD) FROM TaxSettingMaster A (NOLOCK) INNER JOIN Retailer R ON A.RtrId=R.TaxGroupId
			WHERE PrdId = @PrdBatTaxGrp and R.RtrId=@Rtrid 
		END
		
		IF ISNULL(@RtrTaxGrp,0)=0
		BEGIN			
			IF EXISTS(Select 'X' FROM TaxSettingMaster A (NOLOCK) 
			INNER JOIN  TaxGroupSetting B (NOLOCK) ON A.RtrId=B.TaxGroupId 
			WHERE PrdId = @PrdBatTaxGrp	And TaxGroup=1	and A.TaxType='GST')
			BEGIN				
				Select @RtrTaxGrp=MIN(Distinct A.RtriD) FROM TaxSettingMaster A (NOLOCK) 
				INNER JOIN  TaxGroupSetting B (NOLOCK) ON A.RtrId=B.TaxGroupId 
				WHERE PrdId = @PrdBatTaxGrp	And TaxGroup=1	and A.TaxType='GST'							
			END	
			ELSE
			BEGIN
				SELECT @RtrTaxGrp=MIN(Distinct A.RtriD) FROM TaxSettingMaster A (NOLOCK) 
				INNER JOIN  TaxGroupSetting B (NOLOCK) ON A.RtrId=B.TaxGroupId 
				WHERE PrdId = @PrdBatTaxGrp	And TaxGroup=1	and A.TaxType='VAT'				
			END
			
		END	
		
		INSERT INTO @TaxSettingDet (TaxSlab,ColNo,SlNo,BillSeqId,TaxSeqId,ColType,ColId,ColVal)      
		SELECT B.RowId,B.ColNo,B.SlNo,B.BillSeqId,B.TaxSeqId,B.ColType,B.ColId,B.ColVal      
		FROM TaxSettingMaster A (NOLOCK) INNER JOIN      
		TaxSettingDetail B (NOLOCK) ON A.TaxSeqId = B.TaxSeqId      
		AND B.BillSeqId=@BillSeqId  and Coltype IN(1,3)    
		WHERE A.RtrId = @RtrTaxGrp AND A.Prdid = @PrdBatTaxGrp     
		AND A.TaxSeqId in (Select ISNULL(Max(TaxSeqId),0) FROM TaxSettingMaster WHERE      
		RtrId = @RtrTaxGrp AND Prdid = @PrdBatTaxGrp
		and CONVERT(DATETIME,CONVERT(VARCHAR(10),EffectiveFrom,121),121)<=CONVERT(DATETIME,CONVERT(VARCHAR(10),@Pi_gServerDate,121),121)
		)  
	
	--select * from @TaxSettingDet
		SET @MRP=1
		TRUNCATE TABLE TempProductTax
		DECLARE  CurTax CURSOR FOR      
			SELECT DISTINCT TaxSlab FROM @TaxSettingDet      
		OPEN CurTax        
		FETCH NEXT FROM CurTax INTO @TaxSlab      
		WHILE @@FETCH_STATUS = 0        
		BEGIN      
		SET @TaxableAmount = 0      
		--To Filter the Records Which Has Tax Percentage (>=0)      
		IF EXISTS (SELECT * FROM @TaxSettingDet WHERE TaxSlab = @TaxSlab AND ColType = 1      
		AND ColId = 0 and ColVal >= 0)      
		BEGIN      
		--To Get the Tax Percentage for the selected slab      
		SELECT @TaxPer = ColVal FROM @TaxSettingDet WHERE TaxSlab = @TaxSlab AND ColType = 1      
		AND ColId = 0      
		--To Get the TaxId for the selected slab      
		SELECT @TaxId = Cast(ColVal as INT) FROM @TaxSettingDet WHERE TaxSlab = @TaxSlab AND ColType = 1      
		AND ColId > 0      
		SET @TaxableAmount = ISNULL(@TaxableAmount,0) + @MRP 
		--To Get the Parent Taxable Amount for the Tax Slab      
		SELECT @ParTaxableAmount =  ISNULL(SUM(TaxAmount),0) FROM TempProductTax A      
		INNER JOIN @TaxSettingDet B ON A.TaxId = B.ColVal and  
		B.ColType = 3 AND B.TaxSlab = @TaxSlab 
		If @ParTaxableAmount>0
		BEGIN
			Set @TaxableAmount=@ParTaxableAmount
		END 
		ELSE
		BEGIN
			Set @TaxableAmount = @TaxableAmount
		END    
		--PRINT @ParTaxableAmount
		--PRINT @TaxableAmount      
		INSERT INTO TempProductTax (PrdId,PrdBatId,TaxId,TaxSlabId,TaxPercentage,      
		TaxAmount)      
		SELECT @Prdid,@Prdbatid,@TaxId,@TaxSlab,@TaxPer,      
		cast(@TaxableAmount*(@TaxPer / 100 ) AS NUMERIC(28,10))      
		END      
		FETCH NEXT FROM CurTax INTO @TaxSlab      
		END        
		CLOSE CurTax        
		DEALLOCATE CurTax      
		SELECT @TaxPercentage=Cast(ISNULL(SUM(TaxAmount)*100,0) as Numeric(18,5))
		FROM TempProductTax WHERE Prdid=@Prdid and Prdbatid=@Prdbatid
		--PRINT @TaxPercentage
		IF EXISTS(SELECT * FROM ProductBatchTaxPercent WHERE Prdid=@Prdid and Prdbatid=@Prdbatid)
		BEGIN			
			UPDATE ProductBatchTaxPercent  SET TaxPercentage=@TaxPercentage
			WHERE Prdid=@Prdid and Prdbatid=@Prdbatid
		END	
		ELSE
		BEGIN			
			INSERT INTO ProductBatchTaxPercent(Prdid,Prdbatid,TaxPercentage)
			SELECT @Prdid,@Prdbatid,@TaxPercentage
		END
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE NAME='Proc_Cn2Cs_SpecialDiscount' AND XTYPE='P')
DROP PROCEDURE Proc_Cn2Cs_SpecialDiscount
GO
--EXEC Proc_Cn2Cs_SpecialDiscount 0
CREATE PROCEDURE [Proc_Cn2Cs_SpecialDiscount]
(
	@Po_ErrNo INT OUTPUT
)
AS
/*********************************
* PROCEDURE		: Proc_Cn2Cs_SpecialDiscount
* PURPOSE		: To insert SpecialRateDetails in Productbatchdetails table
* CREATED		:  Muthukrishnan.G.P
* CREATED DATE	:  31-12-2012
* MODIFIED      :   
* DATE AUTHOR   : DESCRIPTION
------------------------------------------------
* {date}		{developer}		{brief modification description}
* 2013-03-01	Vijendra Kumar	CR(PM)-CCRSTPVM0001
* 05-10-2015	Mahesh Babu D	Tax Not Attached for Product		ICRSTPAR1798
* 28-12-2015	Mahesh Babu D	Selling Rate Spl Rate Calc			ICRSTPAR1960 
*********************************/
SET NOCOUNT ON
BEGIN
	
	DECLARE @RtrHierLevelCode 		AS  NVARCHAR(100)
	DECLARE @RtrHierLevelValueCode 	AS  NVARCHAR(100)
	DECLARE @RtrCode				AS 	NVARCHAR(100)
	
	DECLARE @PrdCCode				AS 	NVARCHAR(100)
	DECLARE @PrdBatCode				AS 	NVARCHAR(100)
	DECLARE @PrdBatCodeAll			AS 	NVARCHAR(100)
	DECLARE @PriceCode				AS 	NVARCHAR(4000)
	DECLARE @Disperc                AS 	NUMERIC(38,6)
	DECLARE @SplRate				AS 	NUMERIC(38,6)
	DECLARE @PrdCtgValMainId		AS	INT
	DECLARE @CtgLevelId				AS 	INT
	DECLARE @CtgMainId				AS 	INT
	DECLARE @RtrId 					AS 	INT
	DECLARE @PrdId 					AS 	INT
	DECLARE @PrdBatId				AS 	INT
	DECLARE @PriceId				AS 	INT
	DECLARE @ContractReq			AS 	INT
	DECLARE @SRReCalc				AS 	INT
	DECLARE @ReCalculatedSR			AS 	NUMERIC(38,6)
	DECLARE @EffFromDate			AS 	DATETIME
	DECLARE @EffToDate				AS 	DATETIME
	DECLARE @CreatedDate			AS 	DATETIME
	
	DECLARE @MulTaxGrp				AS 	INT
	DECLARE @TaxGroupId				AS	INT
	DECLARE @MulRtrId				AS	INT
	DECLARE @MulTaxGroupId			AS 	INT
	DECLARE @DownldSplRate			AS 	NUMERIC(38,6)
	DECLARE @ContHistExist			AS	INT
	DECLARE @ContractPriceIds		AS	NVARCHAR(1000)
	DECLARE @RefPriceId				AS	INT
	DECLARE @CmpId					AS	INT
	DECLARE @CmpPrdCtgId			AS	INT
	DECLARE @RefRtrId				AS	INT
	DECLARE @ErrStatus				AS	INT
	DECLARE @RtrTaxGrp AS INT
	SET @Po_ErrNo=0
	SET @ErrStatus=0
	SET @RtrTaxGrp=0
	
	EXEC Proc_CalculateSpecialDiscountAftRate
	
    SET @ContractReq=1
	SET @SRReCalc=2
	
    TRUNCATE TABLE ETL_Prk_BLContractPricing	
	CREATE TABLE #SpecialRateToAvoid
	(
		Slno				BIGINT,
		RtrHierLevel		NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		RtrHierValue		NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		RtrCode				NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		PrdCCode			NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		PrdBatCode			NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		EffectiveFromDate	DATETIME
	)
		SELECT DISTINCT CtgCode INTO #RetailerCategory 
		FROM RetailerCategory RC 
		INNER JOIN RetailerValueClass RVC ON  RC.CtgMainId=RVC.CtgMainId
		INNER JOIN RetailerValueClassMap RCM ON RCM.RtrValueClassId=RVC.RtrClassId
	
		---Retailer Class Validation
		INSERT INTO #SpecialRateToAvoid(SlNo,RtrHierLevel,RtrHierValue,RtrCode,PrdCCode,PrdBatCode,EffectiveFromDate)
		SELECT DISTINCT T.SlNo,CtgLevelName,T.CtgCode,RtrCode,PrdCCode,PrdBatCode,T.EffectiveFromDate
		FROM TempSpecialRateDiscountProduct T
		WHERE NOT EXISTS(SELECT CtgCode FROM #RetailerCategory R WHERE R.CtgCode=T.CtgCode)
		
		INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
		SELECT DISTINCT 1,'Special Rate','Retailer','Retailer Not Attached to Category:'+RtrHierLevel+' Not Available' FROM #SpecialRateToAvoid
		DELETE A FROM TempSpecialRateDiscountProduct A INNER JOIN #SpecialRateToAvoid B ON A.Slno=B.Slno and A.CtgCode=B.RtrHierValue and A.Prdccode=B.Prdccode--Modified by Raja.C
		--Product Batch Validation
		INSERT INTO #SpecialRateToAvoid(SlNo,RtrHierLevel,RtrHierValue,RtrCode,PrdCCode,PrdBatCode,EffectiveFromDate)
		SELECT DISTINCT 1,RetCategoryLevel,RetCatLevelValue,'ALL',PrdCategoryLevelValue,'ALL',EffFromDate 
		FROM Cn2Cs_Prk_SpecialDiscount A (NOLOCK) WHERE DownLoadFlag = 'D' AND PrdCategoryLevel = 'Product'
		AND NOT EXISTS (SELECT DISTINCT PrdCCode FROM Product B (NOLOCK) 
		INNER JOIN ProductBatch C (NOLOCK) ON B.PrdId = C.PrdId WHERE A.PrdCategoryLevelValue = B.PrdCCode)
		INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
		SELECT DISTINCT 1,'Product','Product & ProductBatch','Product or Product Batch Not Available-'+PrdCategoryLevelValue
		FROM Cn2Cs_Prk_SpecialDiscount A (NOLOCK) WHERE DownLoadFlag = 'D' AND PrdCategoryLevel = 'Product' 
		AND NOT EXISTS (SELECT DISTINCT PrdCCode FROM Product B (NOLOCK) 
		INNER JOIN ProductBatch C (NOLOCK) ON B.PrdId = C.PrdId WHERE A.PrdCategoryLevelValue = B.PrdCCode)
		--Till Here	
			
		---Retailer Category Level Validation
		INSERT INTO #SpecialRateToAvoid(SlNo,RtrHierLevel,RtrHierValue,RtrCode,PrdCCode,PrdBatCode,EffectiveFromDate)
		SELECT DISTINCT SlNo,CtgLevelName,CtgCode,RtrCode,PrdCCode,PrdBatCode,EffectiveFromDate
		FROM TempSpecialRateDiscountProduct
		WHERE CtgLevelName NOT IN (SELECT CtgLevelName FROM RetailerCategoryLevel)
		
		INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
		SELECT DISTINCT 1,'Special Rate','Retailer Category Level','Retailer Category Level:'+CtgLevelName+' Not Available' FROM TempSpecialRateDiscountProduct
		WHERE CtgLevelName NOT IN (SELECT CtgLevelName FROM RetailerCategoryLevel)
		
		DELETE A FROM TempSpecialRateDiscountProduct A INNER JOIN #SpecialRateToAvoid B ON A.Slno=B.Slno and A.CtgCode=B.RtrHierValue and A.Prdccode=B.Prdccode--Modified by Raja.C
		----
        --ProductTaxGroup Validation 		
		INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
		SELECT DISTINCT 2,'Tax Group','TaxGroup Not Attached','Tax Group for :'+PrdCCode+' Not Available' FROM TempSpecialRateDiscountProduct
		WHERE PrdCCode  IN (SELECT PrdCCode FROM Product(NOLOCK) WHERE TaxGroupId=0)		
	
		DELETE A FROM TempSpecialRateDiscountProduct A INNER JOIN Product B(NOLOCK)  ON A.PrdCCode=B.PrdCCode and B.TaxGroupId=0 
		--Till here
		
		---Retailer Category Code Validation
		INSERT INTO #SpecialRateToAvoid(SlNo,RtrHierLevel,RtrHierValue,RtrCode,PrdCCode,PrdBatCode,EffectiveFromDate)
		SELECT DISTINCT SlNo,CtgLevelName,CtgCode,RtrCode,PrdCCode,PrdBatCode,EffectiveFromDate
		FROM TempSpecialRateDiscountProduct
		WHERE CtgCode NOT IN (SELECT CtgCode FROM RetailerCategory)
		
		INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
		SELECT DISTINCT 1,'Special Rate','Retailer Category Level Value','Retailer Category Level Value:'+CtgCode+' Not Available' FROM TempSpecialRateDiscountProduct
		WHERE CtgCode NOT IN (SELECT CtgCode FROM RetailerCategory)		
	
		DELETE A FROM TempSpecialRateDiscountProduct A INNER JOIN #SpecialRateToAvoid B ON A.Slno=B.Slno and A.CtgCode=B.RtrHierValue and A.Prdccode=B.Prdccode--Modified by Raja.C 
		--Eeffective From Date Validation
		INSERT INTO #SpecialRateToAvoid(SlNo,RtrHierLevel,RtrHierValue,RtrCode,PrdCCode,PrdBatCode,EffectiveFromDate)
		SELECT DISTINCT SlNo,CtgLevelName,CtgCode,RtrCode,PrdCCode,PrdBatCode,EffectiveFromDate
		FROM TempSpecialRateDiscountProduct
		WHERE EffectiveFromDate>GETDATE()
		
		INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
		SELECT DISTINCT 1,'Special Rate','Effective From Date','Effective Date :'+CAST(EffectiveFromDate AS NVARCHAR(12))+' is greater ' 
		FROM TempSpecialRateDiscountProduct
		WHERE EffectiveFromDate>GETDATE()
		DELETE A FROM TempSpecialRateDiscountProduct A INNER JOIN #SpecialRateToAvoid B ON A.Slno=B.Slno and A.CtgCode=B.RtrHierValue  and A.Prdccode=B.Prdccode --Modified by Raja.C
			
		IF NOT EXISTS(SELECT * FROM TempSpecialRateDiscountProduct)
		BEGIN
			RETURN
		END
		
		SELECT @CmpId=ISNULL(CmpId,0) FROM Company C WHERE DefaultCompany=1
		
		IF EXISTS(Select 'X' FROM TaxSettingMaster A (NOLOCK) 
		INNER JOIN  TaxGroupSetting B (NOLOCK) ON A.RtrId=B.TaxGroupId 
		WHERE TaxGroup=1	and A.TaxType='GST')
		BEGIN				
			Select @RtrTaxGrp=MIN(Distinct A.RtriD) FROM TaxSettingMaster A (NOLOCK) 
			INNER JOIN  TaxGroupSetting B (NOLOCK) ON A.RtrId=B.TaxGroupId 
			WHERE TaxGroup=1	and A.TaxType='GST'							
		END	
		ELSE
		BEGIN
			SELECT @RtrTaxGrp=MIN(Distinct A.RtriD) FROM TaxSettingMaster A (NOLOCK) 
			INNER JOIN  TaxGroupSetting B (NOLOCK) ON A.RtrId=B.TaxGroupId 
			WHERE TaxGroup=1	and A.TaxType='VAT'				
		END
		
	
		SELECT DISTINCT ISNULL(Prk.CtgLevelName,'') as RtrHierLevelCode,ISNULL(Prk.CtgCode,'') as RtrHierLevelValueCode,
		RtrCode,ISNULL(Prk.PrdCCode,'') as PrdCCode,ISNULL(Prk.PrdBatCode,'') as PrdBatCodeAll,
		ISNULL(DiscPer,0) as Disperc,ISNULL(SpecialSellingRate,0) as SplRate,
		ISNULL(Prk.EffectiveFromDate,GETDATE()) as EffFromDate,ISNULL(Prk.EffectiveToDate,'2013-12-31') as EffToDate,
		ISNULL(CreatedDate,GETDATE()) as CreatedDate,ISNULL(P.PrdId,0) AS PrdId,
		ISNULL(RCL.CtgLevelId,0) AS CtgLevelId,ISNULL(RC.CtgMainId,0) AS CtgMainId,
		Prdbatid,PCV.PrdCtgValMainId,CmpPrdCtgId,ISNULL(Prk.ApplyOn,0) AS ApplyOn,ISNULL(Prk.[Type],0) AS [Type]
		INTO #SplPriceDetails
		FROM TempSpecialRateDiscountProduct Prk 
		INNER JOIN Product P ON Prk.PrdCCode=P.PrdCCode 
		INNER JOIN Productbatch PB ON PB.prdid=P.Prdid and PB.PrdBatCode=Prk.PrdBatCode
		INNER JOIN ProductCategoryValue PCV ON P.PrdCtgValMainId=PCV.PrdCtgValMainId
		INNER JOIN RetailerCategoryLevel RCL ON Prk.CtgLevelName=RCL.CtgLevelName 
		INNER JOIN RetailerCategory RC ON Prk.CtgCode=RC.CtgCode	
		WHERE  Prk.EffectiveFromDate<=GETDATE()	
	
		---Tax Calculation
		DECLARE @PrdIdTax as BIGINT
		DECLARE @PrdbatIdTax AS BIGINT
		DECLARE Cur_Tax CURSOR
		FOR 
		SELECT DISTINCT PrdId,PrdbatId FROM #SplPriceDetails		
		OPEN Cur_Tax	
		FETCH NEXT FROM Cur_Tax INTO @PrdIdTax,@PrdbatIdTax
		WHILE @@FETCH_STATUS=0
		BEGIN	
				EXEC Proc_SellingTaxCalCulation @PrdIdTax,@PrdbatIdTax
		FETCH NEXT FROM Cur_Tax INTO @PrdIdTax,@PrdbatIdTax		
		END		
		CLOSE Cur_Tax
		DEALLOCATE Cur_Tax	
	
		DECLARE @MaxPriceId as BIGINT
		SELECT @MaxPriceId=ISNULL(MAX(PriceId),0) from ProductBatchDetails
	
		--SELECT A.*,CAST(SplRate*100/(100+TaxPercentage) AS NUMERIC(38,6)) AS NewSellRate
		
		SELECT A.*,CASE A.ApplyOn WHEN 1 THEN 
											(CASE [Type] WHEN 1 THEN (SplRate*100)/(100+TaxPercentage)
											 WHEN 2 THEN (SplRate*100)/(100+TaxPercentage)	END)
		ELSE CAST(SplRate AS NUMERIC(38,6)) END AS NewSellRate			-- MODIFIED FOR ICRSTPAR1960 
		,@MaxPriceId+ROW_NUMBER() OVER(Order by A.PrdId,A.PrdBatId,CtgLevelId,CtgMainId,PrdCtgValMainId,CmpPrdCtgId)
		as NewPriceId
		INTO #PriceMaster
		FROM #SplPriceDetails A INNER JOIN ProductBatchTaxPercent B ON A.PrdId=B.PrdId
		AND A.PrdBatId=b.PrdBatId
		  
		--SELECT A.*,CASE A.ApplyOn WHEN 1 THEN 
		--									(CASE [Type] WHEN 1 THEN SplRate-(SplRate*(TaxPercentage/100))
		--									 WHEN 2 THEN SplRate-(SplRate*(TaxPercentage/100))	END)
		--ELSE CAST(SplRate*100/(100+TaxPercentage) AS NUMERIC(38,6)) END AS NewSellRate
		--,@MaxPriceId+ROW_NUMBER() OVER(Order by A.PrdId,A.PrdBatId,CtgLevelId,CtgMainId,PrdCtgValMainId,CmpPrdCtgId)
		--as NewPriceId
		--INTO #PriceMaster
		--FROM #SplPriceDetails A INNER JOIN ProductBatchTaxPercent B ON A.PrdId=B.PrdId
		--AND A.PrdBatId=b.PrdBatId
	
		--SELECT * FROM ProductBatchTaxPercent WHERE PRDID=2556
		
		SELECT PrdbatId,MAX(PriceId) as PriceId 
		INTO #ProductbatchDetails 
		FROM ProductBatchDetails GROUP BY PrdbatId
	
		INSERT INTO ProductBatchDetails(
		PriceId,PrdBatId,PriceCode,BatchSeqId,SLNo,PrdBatDetailValue,DefaultPrice,PriceStatus,
		Availability,LastModBy,LastModDate,AuthId,AuthDate,XMLUpload)
		SELECT DISTINCT 
		NewPriceId,A.PrdBatId,PrdBatCode+'-Spl Rate-'+CAST(NewSellRate AS NVARCHAR(100))
						+CAST(GETDATE() AS NVARCHAR(20)) ,
		
		D.BatchSeqId,D.SlNo,
				(CASE BC.SelRte WHEN 1 THEN NewSellRate ELSE D.PrdBatDetailValue END) AS SelRte,
				0,1,1,1,GETDATE(),1,GETDATE(),0 
		FROM #PriceMaster A 
		INNER JOIN #ProductbatchDetails B ON A.PrdBatId=B.PrdBatId
		INNER JOIN ProductBatchDetails D ON D.PrdBatId=A.PrdBatId and D.PrdBatId=B.PrdBatId and D.PriceId=B.PriceId
		INNER JOIN BatchCreation BC ON BC.BatchSeqId=D.BatchSeqId AND D.SlNo=BC.SlNo
		INNER JOIN ProductBatch C ON C.PrdBatId=A.PrdBatId and C.PrdBatId=B.PrdBatId and C.PrdId=A.PRdId
		and D.PrdBatId=C.PrdBatId
		ORder by NewPriceId,A.PrdBatId,D.SlNo
		
		UPDATE Counters SET CurrValue=(SELECT ISNULL(Max(PriceId),0) FROM ProductBatchDetails) WHERE TabName='ProductBatchDetails' AND FldName='PriceId'
		UPDATE A SET EnableCloning=1 FROM ProductBatch A
		INNER JOIN #PriceMaster B ON B.Prdbatid=A.PrdbatId
		
		--Contract Price Praking Table insert
		INSERT INTO Cn2Cs_Prk_ContractPricing(CmpId,CtgLevelId,CtgMainId,RtrClassId,CmpPrdCtgId,PrdCtgValMainId,
		RtrId,PrdId,PrdBatId,PriceId,DiscountPerc,FlatAmount,EffectiveDate,ToDate,CreatedDate,RtrTaxGroupId)
		SELECT DISTINCT @CmpId,CtgLevelId,CtgMainId,0,0,0,CASE WHEN RtrCode='ALL' THEN '0' ELSE ISNULL(RtrCode,'') END,
		Prdid,Prdbatid,NewPriceId,0,0,EffFromDate,EffToDate,CreatedDate,@RtrTaxGrp
		FROM #PriceMaster
		
		---Special Rate Screen Table Insert and Update
		INSERT INTO SpecialRateAftDownLoad(RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCCode,PrdBatCCode,
		SplSelRate,FromDate,CreatedDate,DownloadedDate,ContractPriceIds,DiscountPerc)			
		SELECT DISTINCT RtrHierLevelCode,RtrHierLevelValueCode,RtrCode,PrdCCode,PrdBatCodeAll,
		NewSellRate,EffFromDate,CreatedDate,GETDATE(),'-'+CAST(NewPriceId AS NVARCHAR(10))+'-',Disperc 
		FROM #PriceMaster A
		WHERE NOT EXISTS(		
			SELECT RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCCode,PrdBatCCode, FromDate 
			FROM 
			SpecialRateAftDownLoad B WHERE B.RtrCtgCode=A.RtrHierLevelCode
			and B.RtrCtgValueCode=A.RtrHierLevelValueCode and B.RtrCode= A.RtrCode
			And B.PrdCCode=A.PrdCCode and B.PrdBatCCode=A.PrdBatCodeAll
			and FromDate<=EffFromDate and B.SplSelRate=A.SplRate
						)
		--Added by Rajesh
		INSERT INTO SpecialRateAftDownLoad_Calc(RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCCode,PrdBatCCode,
		SplSelRate,FromDate,CreatedDate,DownloadedDate,ContractPriceIds,DiscountPerc,ApplyOn,TYPE)		
		SELECT DISTINCT RtrHierLevelCode,RtrHierLevelValueCode,RtrCode,PrdCCode,PrdBatCodeAll,
		NewSellRate,EffFromDate,CreatedDate,GETDATE(),'-'+CAST(NewPriceId AS NVARCHAR(10))+'-',Disperc 
		,ApplyOn,TYPE FROM #PriceMaster A
		WHERE NOT EXISTS(		
			SELECT RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCCode,PrdBatCCode, FromDate 
			FROM 
			SpecialRateAftDownLoad_Calc B WHERE B.RtrCtgCode=A.RtrHierLevelCode
			and B.RtrCtgValueCode=A.RtrHierLevelValueCode and B.RtrCode= A.RtrCode
			And B.PrdCCode=A.PrdCCode and B.PrdBatCCode=A.PrdBatCodeAll
			and FromDate<=EffFromDate and B.SplSelRate=A.SplRate
						)
						
		UPDATE B  SET SplSelRate=NewSellRate,ContractPriceIds='-'+CAST(NewPriceId AS NVARCHAR(10))+'-',DiscountPerc=Disperc
		FROM #PriceMaster A INNER JOIN SpecialRateAftDownLoad_Calc B ON 
		B.RtrCtgCode=A.RtrHierLevelCode
		and B.RtrCtgValueCode=A.RtrHierLevelValueCode and B.RtrCode= A.RtrCode
		And B.PrdCCode=A.PrdCCode and B.PrdBatCCode=A.PrdBatCodeAll 
		AND B.DiscountPerc=A.DisPerc  
		WHERE  FromDate<=EffFromDate
		--Till here 
		
		UPDATE B  SET SplSelRate=NewSellRate,ContractPriceIds='-'+CAST(NewPriceId AS NVARCHAR(10))+'-',DiscountPerc=Disperc
		FROM #PriceMaster A INNER JOIN SpecialRateAftDownLoad B ON 
		B.RtrCtgCode=A.RtrHierLevelCode
		and B.RtrCtgValueCode=A.RtrHierLevelValueCode and B.RtrCode= A.RtrCode
		And B.PrdCCode=A.PrdCCode and B.PrdBatCCode=A.PrdBatCodeAll 
		AND B.DiscountPerc=A.DisPerc  -- Added FOR ICRSTPAR1960
		WHERE  FromDate<=EffFromDate
		---
	
	
		EXEC Proc_Validate_ContractPricing @Po_ErrNo=@ErrStatus
		SET @Po_ErrNo=@ErrStatus
	
		--IF @Po_ErrNo=0
		--BEGIN	
			UPDATE A SET A.DownLoadFlag='Y' FROM Cn2Cs_Prk_SpecialDiscount A (NOLOCK) 
			INNER JOIN SpecialRateAftDownload B (NOLOCK) ON A.PrdCategoryLevelValue = B.PrdCCode 
			AND A.RetCategoryLevel = B.RtrCtgCode AND A.RetCatLevelValue = B.RtrCtgValueCode
		--END
		RETURN
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE NAME='Proc_ComputeTaxPrice' AND XTYPE='P')
DROP PROCEDURE Proc_ComputeTaxPrice
GO
CREATE Procedure [Proc_ComputeTaxPrice]
(
	@Pi_RtrTaxId		INT,
	@Pi_PrdTaxId		INT,		
	@Pi_PrdId			INT,
	@Pi_SellingRate		NUMERIC(38,6),
	@Pi_SeqId		INT,
	@Pi_UserId INT
)
AS
/*********************************
* PROCEDURE	: [Proc_ComputeTaxPrice]
* PURPOSE	: To Calculate the Line Level Tax
* CREATED	: Mahalakshmi.A
* CREATED DATE	: 18/06/2009
* MODIFIED 
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}    */  
	
SET NOCOUNT ON
BEGIN
DECLARE @PrdBatTaxGrp 		INT
DECLARE @RtrTaxGrp 			INT
DECLARE @TaxSlab			INT
DECLARE @SellingRate		NUMERIC(38,6)
DECLARE @PurchaseRate		NUMERIC(38,6)
DECLARE @TaxableAmount		NUMERIC(38,6)
DECLARE @ParTaxableAmount	NUMERIC(38,6)
DECLARE @TaxPer				NUMERIC(38,6)
DECLARE @TaxId				INT
DECLARE @TaxSetting TABLE 
(
	TaxSlab			INT,
	ColNo			INT,
	SlNo			INT,
	BillSeqId		INT,
	TaxSeqId		INT,
	ColType			INT,	
	ColId			INT,
	ColVal			NUMERIC(38,6)
)
	--Store the Tax Setting for the Corresponding Retailer and Batch
	INSERT INTO @TaxSetting (TaxSlab,ColNo,SlNo,BillSeqId,TaxSeqId,ColType,ColId,ColVal)
	SELECT B.RowId,B.ColNo,B.SlNo,B.BillSeqId,B.TaxSeqId,B.ColType,B.ColId,B.ColVal
		FROM TaxSettingMaster A (NOLOCK) INNER JOIN
		TaxSettingDetail B (NOLOCK) ON A.TaxSeqId = B.TaxSeqId AND B.BillSeqId=@Pi_SeqId
		WHERE A.RtrId = @Pi_RtrTaxId AND A.Prdid = @Pi_PrdTaxId 
		--AND C.RowId = @Pi_RowId AND C.TransId = @Pi_CalledFrom
		AND A.TaxSeqId in (Select ISNULL(Max(TaxSeqId),0) FROM TaxSettingMaster WHERE
			RtrId = @Pi_RtrTaxId AND Prdid = @Pi_PrdTaxId
			and CONVERT(DATETIME,CONVERT(VARCHAR(10),EffectiveFrom,121),121)<=CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121)
			)
		--Cursor For Taking Each Slab and Calculate Tax
	DECLARE  CurTax CURSOR FOR
	SELECT DISTINCT TaxSlab FROM @TaxSetting
		OPEN CurTax  
		FETCH NEXT FROM CurTax INTO @TaxSlab
	WHILE @@FETCH_STATUS = 0  
	BEGIN
		SET @TaxableAmount = 0
		--To Filter the Records Which Has Tax Percentage (>=0)
		IF EXISTS (SELECT * FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 1
			AND ColId = 0 and ColVal >= 0)
		BEGIN
			
			--To Get the Tax Percentage for the selected slab
			SELECT @TaxPer = ColVal FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 1
				AND ColId = 0
			--To Get the TaxId for the selected slab
			SELECT @TaxId = Cast(ColVal as INT) FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 1
				AND ColId > 0
			--To add Selling Rate to Taxable Amount if Selling Rate Is Selected for the Slab
			IF EXISTS (SELECT * FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 2
					AND ColId = 2 and ColVal > 0)	
				SET @TaxableAmount = ISNULL(@TaxableAmount,0) + @Pi_SellingRate
			
			--To Get the Parent Taxable Amount for the Tax Slab
			SELECT @ParTaxableAmount =  ISNULL(SUM(ColVal),0) FROM @TaxSetting B 
			WHERE B.ColType = 3 AND B.TaxSlab = @TaxSlab
			Set @TaxableAmount = @TaxableAmount + @ParTaxableAmount
			DELETE FROM PriceApprovedTax
			--INSERT the New Tax Amounts
			INSERT INTO PriceApprovedTax (PrdId,TaxId,TaxSlabId,TaxPercentage,
					TaxableAmount,TaxAmount,UserId)
			
				SELECT @Pi_PrdId,@TaxId,@TaxSlab,@TaxPer,
					@TaxableAmount,cast(@TaxableAmount * (@TaxPer / 100 ) AS NUMERIC(38,6)),
					@Pi_UserId
		END
		FETCH NEXT FROM CurTax INTO @TaxSlab
	END  
	CLOSE CurTax  
	DEALLOCATE CurTax 
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE NAME='Proc_ComputeTaxForSRReCalculation' AND XTYPE='P')
DROP PROCEDURE Proc_ComputeTaxForSRReCalculation
GO
--Select * from TempCurStk Where UserId=1
--Exec Proc_ComputeTaxForSRReCalculation 2,2,1
--SELECT * FROM BilledPrdDtCalculatedTax
--SELECT * FROM BilledPrdHdForTax
--SELECT * FROM BilledPrddtForTax
--TRUNCATE TABLE  BilledPrdDtCalculatedTax
CREATE PROCEDURE [Proc_ComputeTaxForSRReCalculation]
(
	@Pi_RowId		INT,
	@Pi_CalledFrom		INT,		
	@Pi_UserId		INT
)
AS
/*********************************
* PROCEDURE	: Proc_ComputeTaxForSRReCalculation
* PURPOSE	: To Calculate the Tax (For Selling Rate Recalculation)
* CREATED	: Nandakumar R.G
* CREATED DATE	: 22/03/2007
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
15/05/2017 Murugan.R EffectiveFrom Validation and Retailer Shipping Address taxgroupId Parameter added	
@Pi_CalledFrom  2 	For Sales
*********************************/
SET NOCOUNT ON
BEGIN
	
DECLARE @PrdBatTaxGrp 		INT
DECLARE @RtrTaxGrp 		INT
DECLARE @TaxSlab		INT
DECLARE @SellingRate		NUMERIC(28,10)
DECLARE @PurchaseRate		NUMERIC(28,10)
DECLARE @TaxableAmount		NUMERIC(28,10)
DECLARE @ParTaxableAmount	NUMERIC(28,10)
DECLARE @TaxPer			NUMERIC(38,6)
DECLARE @TaxId			INT
DECLARE @Pi_RtrShipId AS INT
DECLARE @Pi_gServerDate AS DATETIME
DECLARE @TaxSetting TABLE
(
	TaxSlab			INT,
	ColNo			INT,
	SlNo			INT,
	BillSeqId		INT,
	TaxSeqId		INT,
	ColType			INT,	
	ColId			INT,
	ColVal			NUMERIC(38,6)
	
	
)
	--To Take the Batch TaxGroup Id
	SELECT @PrdBatTaxGrp = TaxGroupId FROM ProductBatch A (NOLOCK) INNER JOIN
		BilledPrdHdForTax B (NOLOCK) On A.PrdId = B.PrdId AND A.PrdBatID = B.PrdBatID
		AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom
	--To Take the Batch Selling Rate
	SELECT @SellingRate = 100

	--To Take the Retailer TaxGroup Id
	
	SELECT @Pi_RtrShipId=RtrShipId ,@Pi_gServerDate=BillDate
	FROM TaxForBilltoShipId A (NOLOCK) 
	INNER JOIN BilledPrdHdForTax B (NOLOCK)  ON A.RtrId=B.RtrId AND A.TransId=B.TransId AND A.UsrId=B.UsrId
	WHERE A.TransId=@Pi_CalledFrom	AND B.RowId = @Pi_RowId AND A.UsrId = @Pi_UserId 
	
	SET @Pi_gServerDate=CONVERT(DATETIME,CONVERT(VARCHAR(10),ISNULL(@Pi_gServerDate,GETDATE()),121),121)
	SET @Pi_RtrShipId=ISNULL(@Pi_RtrShipId,0)
	
	IF EXISTS(SELECT 'X' FROM RetailerShipAdd C (NOLOCK)
	INNER JOIN Retailer A (NOLOCK) ON A.RtrId=C.RtrId
	INNER JOIN  BilledPrdHdForTax B (NOLOCK) On A.RtrId = B.RtrId  and  B.RtrId = C.RtrId  
	WHERE C.RtrShipId=@Pi_RtrShipId AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId       
	AND B.TransId = @Pi_CalledFrom and C.TaxGroupId>0)
	BEGIN
			SELECT @RtrTaxGrp=C.TaxGroupId FROM RetailerShipAdd C (NOLOCK)
			INNER JOIN Retailer A (NOLOCK) ON A.RtrId=C.RtrId
			INNER JOIN  BilledPrdHdForTax B (NOLOCK) On A.RtrId = B.RtrId  and  B.RtrId = C.RtrId  
			WHERE C.RtrShipId=@Pi_RtrShipId AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId       
			AND B.TransId = @Pi_CalledFrom and C.TaxGroupId>0
	END
	ELSE
	BEGIN		 
			SELECT @RtrTaxGrp = TaxGroupId FROM Retailer A (NOLOCK) INNER JOIN
			BilledPrdHdForTax B (NOLOCK) On A.RtrId = B.RtrId
			AND B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId
			AND B.TransId = @Pi_CalledFrom
	END	
	
	
	
	
	
	--Store the Tax Setting for the Corresponding Retailer and Batch
	INSERT INTO @TaxSetting (TaxSlab,ColNo,SlNo,BillSeqId,TaxSeqId,ColType,ColId,ColVal)
	SELECT B.RowId,B.ColNo,B.SlNo,B.BillSeqId,B.TaxSeqId,B.ColType,B.ColId,B.ColVal
		FROM TaxSettingMaster A (NOLOCK) INNER JOIN
		TaxSettingDetail B (NOLOCK) ON A.TaxSeqId = B.TaxSeqId
		INNER JOIN BilledPrdHdForTax C (NOLOCK) ON C.BillSeqId = B.BillSeqId
		WHERE A.RtrId = @RtrTaxGrp AND A.Prdid = @PrdBatTaxGrp AND C.UsrId = @Pi_UserId
		AND C.RowId = @Pi_RowId AND C.TransId = @Pi_CalledFrom
		AND A.TaxSeqId in (Select ISNULL(Max(TaxSeqId),0) FROM TaxSettingMaster WHERE
			RtrId = @RtrTaxGrp AND Prdid = @PrdBatTaxGrp
			and CONVERT(DATETIME,CONVERT(VARCHAR(10),EffectiveFrom,121),121)<=CONVERT(DATETIME,CONVERT(VARCHAR(10),@Pi_gServerDate,121),121)
			)
	--Delete the OLD Details From the BilledPrdDtCalculatedTax For the Row and User
	DELETE FROM BilledPrdDtCalculatedTax WHERE RowId = @Pi_RowId AND UsrId = @Pi_UserId
		AND TransId = @Pi_CalledFrom
		--Cursor For Taking Each Slab and Calculate Tax
	DECLARE  CurTax CURSOR FOR
	SELECT DISTINCT TaxSlab FROM @TaxSetting
		OPEN CurTax
		FETCH NEXT FROM CurTax INTO @TaxSlab
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @TaxableAmount = 0
		--To Filter the Records Which Has Tax Percentage (>=0)
		IF EXISTS (SELECT * FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 1
			AND ColId = 0 and ColVal >= 0)
		BEGIN
			--To Get the Tax Percentage for the selected slab
			SELECT @TaxPer = ColVal FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 1
				AND ColId = 0
			
			--To Get the TaxId for the selected slab
			SELECT @TaxId = Cast(ColVal as INT) FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 1
				AND ColId > 0
			
			--SELECT @TaxableAmount = 100
			--To add Selling Rate to Taxable Amount if Selling Rate Is Selected for the Slab
			IF EXISTS (SELECT * FROM @TaxSetting WHERE TaxSlab = @TaxSlab AND ColType = 2
					AND ColId = 2 and ColVal > 0)	
				SET @TaxableAmount = ISNULL(@TaxableAmount,0) + @SellingRate
			--To Get the Parent Taxable Amount for the Tax Slab
			SELECT @ParTaxableAmount =  ISNULL(SUM(TaxAmount),0) FROM BilledPrdDtCalculatedTax A
			INNER JOIN @TaxSetting B ON A.TaxId = B.ColVal AND A.RowId = @Pi_RowId
			AND A.UsrId = @Pi_UserId AND B.ColType = 3 AND B.TaxSlab = @TaxSlab
			AND A.TransId = @Pi_CalledFrom
			Set @TaxableAmount = @TaxableAmount + @ParTaxableAmount
			--Insert the New Tax Amounts
			INSERT INTO BilledPrdDtCalculatedTax (RowId,PrdId,PrdBatId,TaxId,TaxSlabId,TaxPercentage,
					TaxableAmount,TaxAmount,Usrid,TransId)
				SELECT @Pi_RowId,B.PrdId,B.PrdBatId,@TaxId,@TaxSlab,@TaxPer,
					@TaxableAmount,cast(@TaxableAmount * (@TaxPer / 100 ) AS NUMERIC(28,10)),
					@Pi_UserId,@Pi_CalledFrom FROM BilledPrdHdForTax B (NOLOCK) WHERE
					B.RowId = @Pi_RowId AND B.UsrId = @Pi_UserId AND B.TransId = @Pi_CalledFrom
		END
		FETCH NEXT FROM CurTax INTO @TaxSlab
	END
	CLOSE CurTax
	DEALLOCATE CurTax
END
GO
IF Not Exists (SELECT '*' from sysobjects A (Nolock) Inner JOIN syscolumns B (NOLOCK) on A.id = B.id
where A.Name = 'BillSeriesDtValue' AND B.Name = 'DistCode' AND A.xtype='U')
Begin
	ALTER Table BillSeriesDtValue Add DistCode Nvarchar(50) CONSTRAINT DF_BillSeriesDtValue_DistCode DEFAULT '' WITH VALUES
End
GO
IF EXISTS (SELECT '*' FROM SYSOBJECTS WHERE NAME = 'Fn_ReturnGstzPad' AND XTYPE IN('TF','FN') )
DROP FUNCTION Fn_ReturnGstzPad
GO
--Select dbo.Fn_ReturnGstzPad(5,'ljgsdkaghdask45')
CREATE FUNCTION Fn_ReturnGstzPad(@pi_zPad as Integer,@Pi_CurrValue AS Varchar(50))
RETURNS nVarchar(50)
AS
BEGIN
	DECLARE @PrefixPad AS nVarchar(50)	
	select @PrefixPad=  replicate('0', @pi_zPad- len(right(@Pi_CurrValue,@pi_zPad))) 
	+ cast(right(@Pi_CurrValue,@pi_zPad) as varchar(10))
	RETURN (@PrefixPad)
END
GO
IF EXISTS (SELECT '*' FROM SYSOBJECTS WHERE NAME = 'Fn_Billseriessetting' AND XTYPE IN('TF','FN'))
DROP FUNCTION Fn_Billseriessetting
GO
--select * FROM Fn_Billseriessetting ('NRQ')
CREATE Function Fn_Billseriessetting(@prefix as Nvarchar(50))
Returns @Billseriessetting Table
	(
		prefix	Nvarchar(50),
		DistCode Nvarchar(50) 
	)
As
BEGIN	
	If EXISTS(Select * from ManualConfiguration where ProjectName = 'GST' and ModuleId = 'BILL_EDIT2'  and Status = 1)
	BEGIN
		Declare @Configvalue Int
		Select @Configvalue=Configvalue from ManualConfiguration where ProjectName = 'GST' and ModuleId = 'BILL_EDIT2'  and Status = 1
		INSERT INTO @Billseriessetting
		SELECT (
		Select Condition from ManualConfiguration where ProjectName = 'GST' and ModuleId = 'BILL_EDIT2'  and Status = 1) + 
		@prefix +
		dbo.Fn_ReturnGstzPad(@Configvalue,(Select right(DistributorCode,@Configvalue) FROM Distributor (NOLOCK))),
	 	CASE @Configvalue WHEN '0' THEN dbo.Fn_ReturnGstzPad(5,(Select right(DistributorCode,5) FROM Distributor (NOLOCK)))
	 	ELSE dbo.Fn_ReturnGstzPad(@Configvalue,(Select right(DistributorCode,@Configvalue) FROM Distributor (NOLOCK))) END	
	END
	Else
	BEGIN
		INSERT INTO @Billseriessetting
		SELECT @prefix,dbo.Fn_ReturnGstzPad(5,(Select right(DistributorCode,5) FROM Distributor (NOLOCK)))
	END
RETURN	
END
GO
IF EXISTS (SELECT '*' FROM SYSOBJECTS WHERE NAME ='Fn_Prefix' AND XTYPE IN ('TF','FN'))
DROP FUNCTION Fn_Prefix
GO
--Select * from Fn_Prefix()
CREATE Function Fn_Prefix()
Returns @Prefix Table
	(
		prefix	Nvarchar(50),
		SeriesDtId Int
	)
As
BEGIN
	Declare @Distcode as varchar(50)
	DECLARE @Condition as Int
	DECLARE @sufix as Varchar(50)
	Declare @SeriesDtId as Int
	SET @sufix=''
	SET @Distcode=''
	set @Condition = 0
	select @Condition = len(Condition) from ManualConfiguration where ProjectName = 'GST' and ModuleId = 'BILL_EDIT2'  and Status = 1 	
				
	If EXISTS(Select * from ManualConfiguration where ProjectName = 'GST' and ModuleId = 'BILL_EDIT2'  and Status = 1)
	BEGIN
		
		Declare @Tab1 TABLE
		(
			SlNo	Int identity,
			Suf	VARCHAR(100),
			SeriesDtId Int
		)
		
		INSERT INTO @Tab1
		SELECT [Prefix],SeriesDtId from BillSeriesDtValue where ISNULL(DistCode,'') = ''
		Declare @ConfigValue as Int
		Select @ConfigValue = ConfigValue from ManualConfiguration where ProjectName = 'GST' and ModuleId = 'BILL_EDIT2'  
		INSERT INTO @Tab1
		SELECT
		case 
		--when len((substring(Prefix,@Condition+1,len(Prefix))))-len(ISNULL(DistCode,'')) < 0
		--THEN [Prefix] ELSE left(substring(Prefix,@Condition+1,len(Prefix)),len((substring(Prefix,@Condition+1,len(Prefix))))-len(ISNULL(DistCode,'')))
		--END,SeriesDtId
		--from BillSeriesDtValue
		--where len(ISNULL(DistCode,'')) > 0	
		when len((substring(Prefix,@Condition+1,len(Prefix))))- @ConfigValue < 0
		THEN [Prefix] ELSE left(substring(Prefix,@Condition+1,len(Prefix)),len((substring(Prefix,@Condition+1,len(Prefix))))-(ISNULL(@ConfigValue,'')))
		END,SeriesDtId
		from BillSeriesDtValue
		where len(ISNULL(DistCode,'')) > 0						
			 			
		Insert Into @Prefix
		Select (CASE isnull(DISTCODE,'') WHEN  '' THEN Prefix ELSE B.Suf END),A.SeriesDtId  FROM BillSeriesDtValue A
		Inner JOIN @Tab1 B ON A.SeriesDtId = B.SeriesDtId
	END
	Else
	BEGIN
		Insert Into @Prefix
		SELECT Prefix,SeriesDtId FROM BillSeriesDtValue
	END	
	
RETURN	
END
GO
IF EXISTS (SELECT '*' FROM SYSOBJECTS WHERE NAME = 'Fn_Gst_countersetting' AND XTYPE IN('TF','FN'))
DROP FUNCTION Fn_Gst_countersetting
GO
--SELECT * FROM Fn_Gst_countersetting('Sales Return','S45k','ReturnHeader','ReturnCode')
CREATE Function Fn_Gst_countersetting(@Modulename as Varchar(100),@value as Nvarchar(100),
@TabName as varchar(50),@FldName as varchar(50))
Returns @countersetting Table
(
	prefix	Nvarchar(50)
)
As
BEGIN
  --DECLARE @prefix as varchar(50)
  --select @Prefix = left(@value,len([Prefix])) FROM counters (NOLOCK) where TabName = @TabName AND FldName = @FldName
  If EXISTS(Select * from ManualConfiguration where ProjectName = 'GST' and ModuleId = @TabName AND ModuleName =@FldName
  and Status = 1)
  BEGIN		
	

		INSERT INTO @countersetting
		select Condition + @value + (SELECT dbo.Fn_ReturnGstzPad(ConfigValue,(Select DistributorCode from Distributor))) 
		FROM ManualConfiguration where ModuleId = @TabName AND ModuleName = @FldName 		
  END
Return
End
GO

--Tax Report Starts
IF NOT EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Report_Template_GST' AND XTYPE='U')
CREATE TABLE Report_Template_GST
(
	ReportId INT,
	RptId INT,
	RptName varchar(100),
	ColId INT,
	FieldName VARCHAR(100),
	FieldSize INT,
	FieldSelection TINYINT,
	GroupField TINYINT,
	FieldType TINYINT,
	Alignment TINYINT,
	HeaderCaption Varchar(150),
	HeaderCaption1 Varchar(150),
	HeaderCaption2 Varchar(150),
	RoundOff TINYINT,
	CreatedDate DATETIME,
	CONSTRAINT [PK_Report_Template_GST_ReportId_RptId_ColId] PRIMARY KEY CLUSTERED 
	(
	ReportId ASC,
	RptId ASC,
	ColId
	)
)
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='U' AND NAME='RptExcelFileExtension')
DROP TABLE RptExcelFileExtension
GO
CREATE TABLE [RptExcelFileExtension](
	[FileExtension] [varchar](10) NULL
)
GO
INSERT INTO RptExcelFileExtension( [FileExtension])
SELECT '.xlsx'
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE Xtype='U' AND NAME='ExcelHeaderCaption_GST')
DROP TABLE ExcelHeaderCaption_GST
GO
CREATE TABLE ExcelHeaderCaption_GST
(
RptId	BIGINT,
HeaderId INT,
ColId	INT,
FieldName Varchar(100),
HeaderCaption Varchar(100),
UsrId INT
)
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='U' AND NAME='Report_txt_PageHeader_GST')
DROP TABLE Report_txt_PageHeader_GST
GO
CREATE TABLE Report_txt_PageHeader_GST
(
	ColId			INT,
	RptId			INT,	
	Filters			Varchar(150),
	FilterValues	Varchar(150),
	Fieldcaption1		Varchar(300),
	Fieldcaption2		Varchar(300),
	UsrId			INT
)
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='U' AND NAME='Report_txt_ExcelFilterCaption_GST')
DROP TABLE Report_txt_ExcelFilterCaption_GST
GO
CREATE TABLE Report_txt_ExcelFilterCaption_GST
(
	RptId			INT,	
	Fieldcaption1		Varchar(400),
	FileterValue	Varchar(400),
	Fieldcaption2		Varchar(400),
	FileterValue1	Varchar(400),
	UsrId			INT
)
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='P' AND NAME='Proc_RptExcelHeaderCaption_GST')
DROP PROCEDURE Proc_RptExcelHeaderCaption_GST
GO
CREATE PROCEDURE [Proc_RptExcelHeaderCaption_GST]
(
	@RptId			AS INT,	
	@UsrId			AS INT
)
/************************************************
* PROCEDURE  : Proc_RptExcelHeaderCaption
* PURPOSE    : To Generate Excel Header Caption
* CREATED BY : Murugan.R
* CREATED ON : 18/11/2014
* MODIFICATION
*************************************************
* DATE       AUTHOR      DESCRIPTION
*************************************************/
AS
BEGIN	
		DELETE FROM ExcelHeaderCaption_GST WHERE  Rptid=@RptId and UsrId=@UsrId
				
		IF EXISTS(SELECT HeaderCaption FROM Report_Template_GST (NOLOCK) WHERE RptId=@RptId and Len(HeaderCaption)>0)
		BEGIN
			INSERT INTO ExcelHeaderCaption_GST(RptId,HeaderId,ColId,FieldName,HeaderCaption,UsrId)
			SELECT @RptId,1,ColId,FieldName,HeaderCaption,@UsrId 
			FROM Report_Template_GST (NOLOCK) WHERE RptId=@RptId and FieldSelection=1
			ORDER BY ColId
		END
		IF EXISTS(SELECT HeaderCaption1 FROM Report_Template_GST (NOLOCK) WHERE RptId=@RptId and Len(HeaderCaption1)>0)
		BEGIN
			INSERT INTO ExcelHeaderCaption_GST(RptId,HeaderId,ColId,FieldName,HeaderCaption,UsrId)
			SELECT @RptId,2,ColId,FieldName,HeaderCaption1,@UsrId 
			FROM Report_Template_GST (NOLOCK) WHERE RptId=@RptId  and FieldSelection=1
			ORDER BY ColId
		END
		IF EXISTS(SELECT HeaderCaption2 FROM Report_Template_GST (NOLOCK) WHERE RptId=@RptId and Len(HeaderCaption2)>0)
		BEGIN
			INSERT INTO ExcelHeaderCaption_GST(RptId,HeaderId,ColId,FieldName,HeaderCaption,UsrId)
			SELECT @RptId,3,ColId,FieldName,HeaderCaption2,@UsrId 
			FROM Report_Template_GST (NOLOCK) WHERE RptId=@RptId  and FieldSelection=1
			ORDER BY ColId
		END
		
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='P' AND NAME='Proc_RptExcelFilterCaption_GST')
DROP PROCEDURE Proc_RptExcelFilterCaption_GST
GO
--EXEC Proc_RptExcelFilterCaption 1009,2
--Select * from Report_txt_ExcelFilterCaption_GST
CREATE PROCEDURE [Proc_RptExcelFilterCaption_GST]
(
	@RptId			AS INT,	
	@UsrId			AS INT
)
/************************************************
* PROCEDURE  : Proc_RptExcelFilterCaption_GST
* PURPOSE    : To Generate Excel Filter Caption
* CREATED BY : Murugan.R
* CREATED ON : 18/11/2014
* MODIFICATION
*************************************************
* DATE       AUTHOR      DESCRIPTION
*************************************************/
AS
BEGIN	
		DELETE FROM Report_txt_ExcelFilterCaption_GST WHERE  Rptid=@RptId and UsrId=@UsrId
		DECLARE @NoOfColPerRow AS INT		
		SELECT @NoOfColPerRow=Ceiling(CAST(COUNT(Colid) AS NUMERIC(5,2))/CAST(2 AS NUMERIC(5,2)))
		FROM Report_txt_PageHeader_GST WHERE RptId=@RptId and UsrId=@UsrId
			
		SELECT Filters as Fieldcaption1,FilterValues,Colid   INTO #RptHeader FROM Report_txt_PageHeader_GST where ColId<=@NoOfColPerRow and Rptid=@RptId and UsrId=@UsrId

		SELECT Filters as Fieldcaption1,FilterValues,Colid-@NoOfColPerRow as  Colid  INTO #RptHeader1 FROM Report_txt_PageHeader_GST where ColId>@NoOfColPerRow  and Rptid=@RptId and UsrId=@UsrId

		INSERT INTO Report_txt_ExcelFilterCaption_GST(RptId,Fieldcaption1,FileterValue,Fieldcaption2,FileterValue1,UsrId)
		SELECT @RptId,S.Fieldcaption1,S.FilterValues,ISNULL(TS.Fieldcaption1,'') as Fieldcaption2,ISNULL(TS.FilterValues,''),@UsrId
		FROM  #RptHeader S
		LEFT OUTER JOIN #RptHeader1 TS ON S.ColId=TS.ColId  WHERE S.ColId<=@NoOfColPerRow 
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='TF' AND NAME='Fn_ReturnDistributorInfo')
DROP FUNCTION Fn_ReturnDistributorInfo
GO
--SELECT * FROM DBO.Fn_ReturnDistributorInfo()
CREATE FUNCTION Fn_ReturnDistributorInfo()
RETURNS @DistributorInfo TABLE 
		( 
			DistributorCode Varchar(50),
			DistributorName Varchar(100),
			GSTTIN Varchar(20),
			StateName Varchar(100),
			StateCode Varchar(10),
			StatTinNo Varchar(10)
		)
			
AS
/****************************************************************************
* FUNCTION: Fn_ReturnDistributorInfo
* PURPOSE: To return Distributor Info
* NOTES:
* CREATED: MURUGAN .R
* DATE: 13/05/2017
* MODIFIED
* DATE         AUTHOR     DESCRIPTION
------------------------------------------------------------------------------
*****************************************************************************/
BEGIN
DECLARE @GSTTIN VARCHAR(50)
DECLARE @DistributorCode VARCHAR(50)
DECLARE @DistributorName VARCHAR(100)
DECLARE @StateCode VARCHAR(50)
DECLARE @StateName VARCHAR(50)
DECLARE @TinFirst2Digit VARCHAR(100)

	SELECT @DistributorCode=DistributorCode,@DistributorName=DistributorName FROM Distributor (NOLOCK)

	SELECT @GSTTIN= ColumnValue FROM UDCHD A  (NOLOCK)
	INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId
	INNER JOIN UdcDetails C (NOLOCK) ON B.MasterId=C.MasterId
	and B.UdcMasterId=C.UdcMasterId
	WHERE MasterName='Distributor Info Master' and ColumnName='GSTIN'

	SELECT @StateCode=StateCode,@StateName=StateName,@TinFirst2Digit=TinFirst2Digit 
	FROM UDCHD A (NOLOCK)
	INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId
	INNER JOIN UdcDetails C (NOLOCK) ON B.MasterId=C.MasterId
	and B.UdcMasterId=C.UdcMasterId
	INNER JOIN UdcDefault D (NOLOCK) ON D.MasterId=C.MasterId and D.MasterId=B.MasterId
	and D.UdcMasterId=C.UdcMasterId and D.UdcMasterId=B.UdcMasterId
	INNER JOIN StateMaster E (NOLOCK) ON E.StateName=D.ColValue and E.StateName=C.ColumnValue
	WHERE MasterName='Distributor Info Master' and ColumnName='State Name'

	INSERT INTO @DistributorInfo(DistributorCode,DistributorName,GSTTIN,StateName,StateCode,StatTinNo)
	SELECT ISNULL(@DistributorCode,''),ISNULL(@DistributorName,''),ISNULL(@GSTTIN,''),
	ISNULL(@StateName,''),ISNULL(@StateCode,''),ISNULL(@TinFirst2Digit,'')

RETURN
END
GO
DELETE FROM RptGroup WHERE PID='CORESTOCKY' and GrpCode='GSTReports'
INSERT INTO RptGroup(PId,RptId,GrpCode,GrpName,VISIBILITY)
SELECT 'CORESTOCKY',0,'GSTReports','GST Reports',1
GO
DELETE FROM RptGroup WHERE PID='GSTReports' and GrpCode='GSTTaxReports' and RptId=400
INSERT INTO RptGroup(PId,RptId,GrpCode,GrpName,VISIBILITY)
SELECT 'GSTReports',400,'GSTTaxReports','GST Tax Reports',1
GO
DELETE FROM RptGroup WHERE RptId=401
INSERT INTO RptGroup(PId,RptId,GrpCode,GrpName,VISIBILITY)
SELECT 'GSTTaxReports 400',401,'ProductWiseOutPutTax','Product Wise Output Tax',1
GO
DELETE FROM RptHeader WHERE RptId=401
INSERT INTO RptHeader(GrpCode,RptCaption,RptId,RpCaption,SPName,TblName,RptName,UserIds)
SELECT 'ProductWiseOutPutTax','Product Wise Output Tax',401,'Product Wise Output Tax','Proc_RptProductWiseSalesTaxGST','RptProductWiseSalesTaxGST','RptProductWiseSalesTaxGST.rpt',0
GO
DELETE FROM RptDetails WHERE RptId=401
INSERT INTO RptDetails(RptId,[SlNo],[TblName],[PrntId],[PrntRefFld],[FldName],[FldCaption],[PrntTbl],[CtrlType],[CmnFld],[SelcId],[SingleMulti],[Mandatory],[PnlMsg],[CaptionChange]) VALUES (401,1,'FromDate',-1,'','','From Date*','',1,'',10,0,0,'Enter From Date',0)
INSERT INTO RptDetails(RptId,[SlNo],[TblName],[PrntId],[PrntRefFld],[FldName],[FldCaption],[PrntTbl],[CtrlType],[CmnFld],[SelcId],[SingleMulti],[Mandatory],[PnlMsg],[CaptionChange]) VALUES (401,2,'ToDate',-1,'','','To Date*','',1,'',11,0,0,'Enter To Date',0)
INSERT INTO RptDetails(RptId,[SlNo],[TblName],[PrntId],[PrntRefFld],[FldName],[FldCaption],[PrntTbl],[CtrlType],[CmnFld],[SelcId],[SingleMulti],[Mandatory],[PnlMsg],[CaptionChange]) VALUES (401,3,'Company',-1,'','CmpId,CmpCode,CmpName','Company...','',1,'',4,1,0,'Press F4/Double Click to select Company',0)
GO
DELETE FROM Report_Template_GST WHERE ReportId=1 and RptId=401
INSERT INTO Report_Template_GST(ReportId,RptId,RptName ,ColId,FieldName,FieldSize,FieldSelection,GroupField,
FieldType,Alignment,HeaderCaption,HeaderCaption1,HeaderCaption2,
RoundOff,CreatedDate)
SELECT 1,401,'Product wise output tax',1,'RtrStateCode',20,1,0,1,1,'Retailer','State','Code',0,GETDATE()
UNION ALL
SELECT 1,401,'Product wise output tax',2,'RtrStateName',50,1,0,1,1,'Retailer','State','Name',0,GETDATE()
UNION ALL
SELECT 1,401,'Product wise output tax',3,'RetailerCode',50,1,0,1,1,'Retailer','Code','',0,GETDATE()
UNION ALL
SELECT 1,401,'Product wise output tax',4,'RetailerName',50,1,0,1,1,'Retailer','Name','',0,GETDATE()
UNION ALL
SELECT 1,401,'Product wise output tax',5,'RtrShipAdd',75,1,0,1,1,'Retailer','Shipping','Address',0,GETDATE()
UNION ALL
SELECT 1,401,'Product wise output tax',6,'RtrShipAdd1',75,1,0,1,1,'Retailer','Shipping','Address2',0,GETDATE()
UNION ALL
SELECT 1,401,'Product wise output tax',7,'IOTaxType',75,1,0,1,1,'Sales/','Return','',0,GETDATE()
UNION ALL
SELECT 1,401,'Product wise output tax',8,'RefNo',75,1,0,1,1,'Invoice','Number','',0,GETDATE()
UNION ALL
SELECT 1,401,'Product wise output tax',9,'InvDate',75,1,0,1,4,'Invoice','Date','',0,GETDATE()
UNION ALL
SELECT 1,401,'Product wise output tax',10,'Product Name',75,1,0,1,1,'Product Name','','',0,GETDATE()
UNION ALL
SELECT 1,401,'Product wise output tax',11,'Product Code',75,1,0,1,1,'Product Code','','',0,GETDATE()
UNION ALL
SELECT 1,401,'Product wise output tax',12,'HSN Code',75,1,0,1,1,'HSN Code','','',0,GETDATE()
UNION ALL
SELECT 1,401,'Product wise output tax',13,'InvQty',75,1,0,2,2,'Total','Quantity','',0,GETDATE()
UNION ALL
SELECT 1,401,'Product wise output tax',14,'TaxableAmount',20,1,0,2,3,'Taxable','Amount','',0,GETDATE()
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='U' AND NAME='RptProductWiseSalesTaxGST')
DROP TABLE RptProductWiseSalesTaxGST
GO
CREATE TABLE RptProductWiseSalesTaxGST
(
Slno BIGINT IDENTITY(1,1),
RtrStateCode Varchar(20),
RtrStateName Varchar(150),
[RtrGSTIN] Varchar(20),
[RetailerCode] Varchar(75),
[RetailerName] Varchar(150),
RtrShipAdd Varchar(150),
RtrShipAdd1 Varchar(150),
[IOTaxType] [varchar](100) NULL,
[InvDate] DateTime,
[RefNo] [varchar](100) NULL,
[HSN Code] Varchar(50),
[Product Code] Varchar(75),	
[Product Name] Varchar(150),
[InvQty] [int] NULL,
[TaxableAmount] [numeric](38, 6) NULL,
LineNetAmount [numeric](38, 6) NULL,
[ReverseCharge] Numeric(36,6),
[UPC] INT,
[Group Name]  Varchar(200),
[GroupType] INT,
[UsrId] [int] NULL
)
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='P' AND NAME='Proc_RptProductWiseSalesTaxGST')
DROP PROCEDURE Proc_RptProductWiseSalesTaxGST
GO
---EXEC Proc_RptProductWiseSalesTaxGST 401,1,0,'',0,0,1
--Select * from RptProductWiseSalesTaxGST
CREATE PROCEDURE [Proc_RptProductWiseSalesTaxGST]
(
	@Pi_RptId			INT,
	@Pi_UsrId			INT,
	@Pi_SnapId			INT,
	@Pi_DbName			nvarchar(50),
	@Pi_SnapRequired	INT,
	@Pi_GetFromSnap		INT,
	@Pi_CurrencyId		INT
)
AS
/*********************************
* PROCEDURE	: Proc_RptProductWiseSalesTaxGST
* PURPOSE	: To get the Tax details
* CREATED	: Murugan.R
* CREATED DATE	: 12/05/2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
BEGIN
SET NOCOUNT ON

	--Filter Variable
	DECLARE @FromDate		AS	DATETIME
	DECLARE @ToDate			AS	DATETIME
	DECLARE @CmpId	        AS	INT
	DECLARE @ErrNo	 	AS	INT
		

	DECLARE @SQL as Varchar(MAX)
	DECLARE @MaxId as INT
	DECLARE @ReportId as INT
	DECLARE @start INT, @end INT 
	DECLARE @Str AS VARCHAR(100)
	DECLARE @CreateTable AS VARCHAR(7000)

		
	SET @ErrNo=0
	SELECT @FromDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,10,@Pi_UsrId)
	SELECT @ToDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,11,@Pi_UsrId)
	SET @CmpId = (SElect  TOP 1 iCountid FRom Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId))
	

	
	IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='U' AND NAME='RptProductWiseSalesTaxGST')
	BEGIN
		DELETE FROM RptProductWiseSalesTaxGST WHERE UsrId=@Pi_UsrId
	END
	
		CREATE TABLE #TmpRptIOTaxSummary
		(
			[InvDate] DateTime,
			[InvId] [bigint] NULL,
			[RefNo] [varchar](100) NULL,
			[RetailerName] Varchar(150),
			[RetailerCode] Varchar(75),
			[RtrGSTIN] Varchar(20),
			RtrStateCode Varchar(20),
			RtrStateName Varchar(150) ,
			RtrShipAdd Varchar(150),
			RtrShipAdd1 Varchar(150),
			[Product Name] Varchar(150),			
			[Product Code] Varchar(75),
			[HSN Code] Varchar(75),
			[RtrId] [int] NULL,
			[Prdid] [int] NULL,
			[InvQty] [int] NULL,
			[CmpId] [int] NULL,
			[TaxPerc] [varchar](50) NULL,
			[TaxableAmount] [numeric](38, 6) NULL,
			[IOTaxType] [varchar](100) NULL,
			[TaxFlag] [int] NULL,
			[TaxPercent] [numeric](38, 6) NULL,
			[TaxId] [int] NULL,	
			[LineNetAmount] Numeric(36,6),
			[ReverseCharge] Numeric(36,6),
			[UPC] INT,
			[Group Name]  Varchar(200),
			[GroupType] INT,
			[UsrId] [int] NULL
		)
		
		SELECT Prdid,Max(ConversionFactor) as UPC 
		INTO #UOM
		FROM Product P (NOLOCK) INNER JOIN Uomgroup UG (NOLOCK) ON P.UomGroupId=UG.UomGroupId
		GROUP BY Prdid
		
		INSERT INTO #TmpRptIOTaxSummary([InvDate],[InvId],[RefNo],[RetailerName] ,[RetailerCode],RtrStateCode,RtrStateName,[RtrGSTIN],
		RtrShipAdd,RtrShipAdd1,[Product Name] ,[Product Code],[HSN Code],[RtrId],[Prdid],[InvQty],[CmpId],[TaxPerc],[TaxableAmount],[IOTaxType] ,
		[TaxFlag],[TaxPercent],[TaxId],LineNetAmount,[ReverseCharge],[UPC],[Group Name],[GroupType],[UsrId])
		SELECT SI.SalInvDate,SI.SalId AS InvId,SI.SalInvNo AS RefNo,RtrName,RtrCode,'' as RtrStateCode,'' as RtrStateName,'' as [RtrGSTIN],
		ISNULL(RS.RtrShipAdd1,'') as RtrShipAdd,ISNULL(RS.RtrShipAdd2,'') as RtrShipAdd1,
		PrdName,PrdCCode,'' as [HSN Code],R.RtrId AS RtrId,P.PrdId as Prdid,SUM(SIP.BaseQty) AS InvQty,  
		C.CmpId AS CmpId,TC.TaxCode +' Rate' as TaxPerc,
		SUM(TaxableAmount) as TaxableAmount,'Sales' as IOTaxType,0 as TaxFlag,TaxPerc as TaxPercent,SPT.TaxId,
		SUM(PrdNetAmount) as [LineNetAmount],0 as [ReverseCharge],[UPC] as [UPC],
		'' as [Group Name] ,2 as [GroupType],@Pi_UsrId AS UserId  
		FROM 
		SalesInvoice SI WITH (NOLOCK)  
		INNER JOIN SalesInvoiceProduct SIP WITH (NOLOCK) ON SI.SalId = SIP.SalId  
		INNER JOIN SalesInvoiceProductTax SPT WITH (NOLOCK) ON SPT.SalId = SIP.SalId AND SPT.SalId = SI.SalId AND SIP.SlNo=SPT.PrdSlNo  
		INNER JOIN Product P WITH (NOLOCK) ON P.PrdId = SIP.PrdId  
		INNER JOIN #UOM U ON U.PrdId=P.PrdId and U.PrdId=SIP.PrdId  
		INNER JOIN ProductBatch PB WITH (NOLOCK) ON PB.PrdId = SIP.PrdId AND PB.PrdBatId = SIP.PrdBatId AND PB.PrdId = P.PrdId  
		INNER JOIN Retailer R WITH (NOLOCK) ON R.RtrId = SI.RtrId
		INNER JOIN TaxConfiguration TC (NOLOCK) ON TC.TaxId =SPT.TaxId    
		LEFT OUTER JOIN Company C ON C.CmpId = P.CmpId 
		LEFT OUTER JOIN RetailerShipAdd RS ON RS.RtrId=SI.RtrId and RS.RtrShipId=SI.RtrShipId  
		WHERE SI.Salinvdate Between @FromDate and @ToDate and SI.Dlvsts >3
		AND (C.CmpId = (CASE @CmpId WHEN 0 THEN C.CmpId ELSE 0 END) OR
		C.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId)))
		Group By TaxPerc,SI.SalInvDate,C.CmpId,P.PrdId,SI.SalId,SI.SalInvNo,R.RtrId ,
		SPT.TaxId ,RtrName,RtrCode,PrdName,PrdCCode,TC.TaxCode,ISNULL(RS.RtrShipAdd1,''),ISNULL(RS.RtrShipAdd2,''),
		[UPC]
		HAVING Sum(TaxableAmount) >0  
			
		INSERT INTO #TmpRptIOTaxSummary([InvDate],[InvId],[RefNo],[RetailerName] ,[RetailerCode],RtrStateCode,RtrStateName,[RtrGSTIN],
		RtrShipAdd,RtrShipAdd1,[Product Name] ,[Product Code],[HSN Code],[RtrId],[Prdid],[InvQty],[CmpId],[TaxPerc],[TaxableAmount],[IOTaxType] ,
		[TaxFlag],[TaxPercent],[TaxId],LineNetAmount,[ReverseCharge],[UPC],[Group Name],[GroupType],[UsrId]) 
		SELECT SI.SalInvDate,SI.SalId AS InvId,SI.SalInvNo AS RefNo,RtrName,RtrCode,'' as RtrStateCode,'' as RtrStateName,'' as [RtrGSTIN],
		ISNULL(RS.RtrShipAdd1,'') as RtrShipAdd,ISNULL(RS.RtrShipAdd2,'') as RtrShipAdd1,		
		PrdName,PrdCCode,'' as [HSN Code],R.RtrId AS RtrId,P.PrdId as Prdid,SUM(SIP.BaseQty) AS InvQty,  
		C.CmpId AS CmpId,TC.TaxCode +' Value' as TaxPerc,SUM(TaxableAmount) as TaxableAmount,  
		'Sales' as IOTaxType,1 as TaxFlag,Sum(SPT.TaxAmount) as TaxPercent,
		SPT.TaxId,SUM(PrdNetAmount) as [LineNetAmount],0 as [ReverseCharge],[UPC] as [UPC],	
		'' as [Group Name] ,2 as [GroupType],@Pi_UsrId AS UserId  
		FROM 
		SalesInvoice SI WITH (NOLOCK)  
		INNER JOIN SalesInvoiceProduct SIP WITH (NOLOCK) ON SI.SalId = SIP.SalId  
		INNER JOIN SalesInvoiceProductTax SPT WITH (NOLOCK) ON SPT.SalId = SIP.SalId AND SPT.SalId = SI.SalId AND SIP.SlNo=SPT.PrdSlNo  
		INNER JOIN Product P WITH (NOLOCK) ON P.PrdId = SIP.PrdId 
		INNER JOIN #UOM U ON U.PrdId=P.PrdId and U.PrdId=SIP.PrdId   
		INNER JOIN ProductBatch PB WITH (NOLOCK) ON PB.PrdId = SIP.PrdId AND PB.PrdBatId = SIP.PrdBatId AND PB.PrdId = P.PrdId  
		INNER JOIN Retailer R WITH (NOLOCK) ON R.RtrId = SI.RtrId  
		INNER JOIN TaxConfiguration TC (NOLOCK) ON TC.TaxId =SPT.TaxId 
		LEFT OUTER JOIN Company C ON C.CmpId = P.CmpId
		LEFT OUTER JOIN RetailerShipAdd RS ON RS.RtrId=SI.RtrId and RS.RtrShipId=SI.RtrShipId   
		WHERE SI.Salinvdate Between @FromDate and @ToDate and SI.Dlvsts >3
		AND (C.CmpId = (CASE @CmpId WHEN 0 THEN C.CmpId ELSE 0 END) OR
		C.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId)))
		Group By TaxPerc,SI.SalInvDate,C.CmpId,P.PrdId,SI.SalId,SI.SalInvNo,R.RtrId ,
		SPT.TaxId ,RtrName,RtrCode,PrdName,PrdCCode,TC.TaxCode,ISNULL(RS.RtrShipAdd1,''),ISNULL(RS.RtrShipAdd2,''),[UPC]
		HAVING Sum(SPT.TaxAmount+SPT.TaxableAmount) > 0 
		

		INSERT INTO #TmpRptIOTaxSummary([InvDate],[InvId],[RefNo],[RetailerName] ,[RetailerCode],RtrStateCode,RtrStateName,[RtrGSTIN],
		RtrShipAdd,RtrShipAdd1,[Product Name] ,[Product Code],[HSN Code],[RtrId],[Prdid],[InvQty],[CmpId],[TaxPerc],[TaxableAmount],[IOTaxType] ,
		[TaxFlag],[TaxPercent],[TaxId],LineNetAmount,[ReverseCharge],[UPC],[Group Name],[GroupType],[UsrId]) 
		Select
		Rh.ReturnDate,RH.ReturnId AS InvId,RH.ReturnCode AS RefNo,RtrName,RtrCode,'' as RtrStateCode,'' as RtrStateName,'' as [RtrGSTIN],
		'' as RtrShipAdd,'' as RtrShipAdd1,PrdName,PrdCCode,'' as [HSN Code],R.RtrId AS RtrId,P.PrdId as Prdid,-1*SUM(RP.BaseQty) AS InvQty,  
		C.CmpId AS CmpId,TC.TaxCode +' Rate' as TaxPerc,-1 *SUM(TaxableAmt) as TaxableAmount,  
		'SalesReturn' as IOTaxType,0 as TaxFlag,TaxPerc as TaxPercent,
		RPT.TaxId,-1 *SUM(PrdNetAmt) as [LineNetAmount],ReverseCharges as [ReverseCharge],[UPC] as [UPC],		
		'' as [Group Name] ,2 as [GroupType],@Pi_UsrId AS UserId 
		From ReturnHeader RH WITH (NOLOCK)  
		INNER JOIN ReturnProduct RP WITH (NOLOCK) ON RH.ReturnId = RP.ReturnId ---AND RP.LineType=1  
		INNER JOIN ReturnProductTax RPT WITH (NOLOCK) ON RPT.ReturnId = RH.ReturnId AND RPT.ReturnId = RP.ReturnId AND RP.SlNo=RPT.PrdSlNo  
		INNER JOIN TaxConfiguration TC (NOLOCK) ON TC.TaxId =RPT.TaxId 
		INNER JOIN Product P WITH (NOLOCK) ON P.PrdId = RP.PrdId 
		INNER JOIN #UOM U ON U.PrdId=P.PrdId and U.PrdId=RP.PrdId      
		INNER JOIN ProductBatch PB WITH (NOLOCK) ON PB.PrdId = RP.PrdId AND PB.PrdBatId = RP.PrdBatId AND PB.PrdId = P.PrdId  
		INNER JOIN Retailer R WITH (NOLOCK) ON R.RtrId = RH.RtrId  
		LEFT OUTER JOIN Company C ON C.CmpId = P.CmpId   
		WHERE RH.Status = 0  and RH.ReturnDate  Between @FromDate and @ToDate
		AND (C.CmpId = (CASE @CmpId WHEN 0 THEN C.CmpId ELSE 0 END) OR
		C.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId))) 
		GROUP BY TaxPerc,RH.ReturnDate,P.PrdId,RH.ReturnId,RH.ReturnCode,R.RtrId,RPT.TaxId,RtrName,
		RtrCode,PrdName,PrdCCode ,RPT.TaxId ,C.CmpId,TC.TaxCode,[UPC],ReverseCharges
		HAVING Sum(TaxableAmt) > 0  
		
		INSERT INTO #TmpRptIOTaxSummary([InvDate],[InvId],[RefNo],[RetailerName] ,[RetailerCode],RtrStateCode,RtrStateName,[RtrGSTIN],
		RtrShipAdd,RtrShipAdd1,[Product Name] ,[Product Code],[HSN Code],[RtrId],[Prdid],[InvQty],[CmpId],[TaxPerc],[TaxableAmount],[IOTaxType] ,
		[TaxFlag],[TaxPercent],[TaxId],LineNetAmount,[ReverseCharge],[UPC],[Group Name],[GroupType],[UsrId]) 
		Select
		Rh.ReturnDate,RH.ReturnId AS InvId,RH.ReturnCode AS RefNo,RtrName,RtrCode,'' as RtrStateCode,'' as RtrStateName,'' as [RtrGSTIN],
		'' as RtrShipAdd,'' as RtrShipAdd1,PrdName,PrdCCode,'' as [HSN Code],R.RtrId AS RtrId,P.PrdId as Prdid,-1*SUM(RP.BaseQty) AS InvQty,  
		C.CmpId AS CmpId,TC.TaxCode +' Value' as TaxPerc,-1 *SUM(TaxableAmt) as TaxableAmount,  
		'SalesReturn' as IOTaxType,1 as TaxFlag,-1*SUM(RPT.TaxAmt) as TaxPercent,
		RPT.TaxId,-1 *SUM(PrdNetAmt) as [LineNetAmount],ReverseCharges as [ReverseCharge],[UPC] as [UPC],
		'' as [Group Name] ,2 as [GroupType],@Pi_UsrId AS UserId 
		From ReturnHeader RH WITH (NOLOCK)  
		INNER JOIN ReturnProduct RP WITH (NOLOCK) ON RH.ReturnId = RP.ReturnId ---AND RP.LineType=1  
		INNER JOIN ReturnProductTax RPT WITH (NOLOCK) ON RPT.ReturnId = RH.ReturnId AND RPT.ReturnId = RP.ReturnId AND RP.SlNo=RPT.PrdSlNo  
		INNER JOIN TaxConfiguration TC (NOLOCK) ON TC.TaxId =RPT.TaxId 
		INNER JOIN Product P WITH (NOLOCK) ON P.PrdId = RP.PrdId 
		INNER JOIN #UOM U ON U.PrdId=P.PrdId and U.PrdId=RP.PrdId      
		INNER JOIN ProductBatch PB WITH (NOLOCK) ON PB.PrdId = RP.PrdId AND PB.PrdBatId = RP.PrdBatId AND PB.PrdId = P.PrdId  
		INNER JOIN Retailer R WITH (NOLOCK) ON R.RtrId = RH.RtrId  
		LEFT OUTER JOIN Company C ON C.CmpId = P.CmpId   
		WHERE RH.Status = 0  and RH.ReturnDate  Between @FromDate and @ToDate 
		AND (C.CmpId = (CASE @CmpId WHEN 0 THEN C.CmpId ELSE 0 END) OR
		C.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId))) 
		GROUP BY RH.ReturnDate,P.PrdId,RH.ReturnId,RH.ReturnCode,R.RtrId,RPT.TaxId,RtrName,
		RtrCode,PrdName,PrdCCode ,RPT.TaxId ,C.CmpId,TC.TaxCode,[UPC],ReverseCharges
		HAVING Sum(RPT.TaxAmt+TaxableAmt) > 0 


		
		INSERT INTO #TmpRptIOTaxSummary([InvDate],[InvId],[RefNo],[RetailerName] ,[RetailerCode],RtrStateCode,RtrStateName,[RtrGSTIN],
		RtrShipAdd,RtrShipAdd1,[Product Name] ,[Product Code],[HSN Code],[RtrId],[Prdid],[InvQty],[CmpId],[TaxPerc],[TaxableAmount],[IOTaxType] ,
		[TaxFlag],[TaxPercent],[TaxId],LineNetAmount,[ReverseCharge],[UPC],[Group Name],[GroupType],[UsrId]) 
		SELECT  Null, 0 as [InvId],'' as [RefNo],'' as [RetailerName] ,'' as [RetailerCode],'' as [HSN Code],'' as RtrStateCode,'' as RtrStateName,'' as [RtrGSTIN],
		'' as RtrShipAdd,'' as RtrShipAdd1,'' as [Product Name] ,'' as [Product Code],0 as [RtrId],0 as Prdid,0 as [InvQty],0 as[CmpId],  [TaxPerc] ,0 as [TaxableAmount],'' as [IOTaxType] ,
		100 as [TaxFlag],SUM([TaxPercent]) as [TaxPercent],0 as [TaxId],0 as  LineNetAmount,
		0 as [ReverseCharge],0 as [UPC],
		'ZZZZZZ' as [Group Name],3 as [GroupType],[UsrId]
		FROM #TmpRptIOTaxSummary WHERE TaxFlag=1		
		GROUP BY [UsrId],[TaxPerc]
		
		
			
		
	
		
		UPDATE A SET A.RtrStateCode=SM.StateCode ,A.RtrStateName=SM.StateName ,A.[RtrGSTIN]=RS.GSTTinNo 
		FROM #TmpRptIOTaxSummary A 		
		INNER JOIN SalesInvoice S ON S.SalId=A.[InvId]
		INNER JOIN RetailerShipAdd RS ON RS.RtrId=S.RtrId and RS.RtrShipId=S.RtrShipId
		INNER JOIN StateMaster SM ON SM.StateId=RS.StateId
		WHERE IOTaxType='Sales'
		
			
		
		UPDATE A  SET A.RtrShipAdd=RS.RtrShipAdd1 ,A.RtrShipAdd1=RS.RtrShipAdd2 
		FROM #TmpRptIOTaxSummary A 
		INNER JOIN  ReturnHeader B ON A.InvId=B.ReturnID
		INNER JOIN SalesInvoice S ON S.SalId=B.Salid
		INNER JOIN RetailerShipAdd RS ON RS.RtrId=S.RtrId and RS.RtrShipId=S.RtrShipId
		WHERE IOTaxType='SalesReturn'
		
		
		UPDATE TR SET  [HSN Code]=C.ColumnValue
		FROM UDCHD A (NOLOCK)
		INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId
		INNER JOIN UdcDetails C (NOLOCK) ON B.MasterId=C.MasterId
		and B.UdcMasterId=C.UdcMasterId
		INNER JOIN #TmpRptIOTaxSummary TR ON TR.Prdid=C.MasterRecordId
		WHERE MasterName='Product Master'  and ColumnName='HSN Code'
		
		
		IF NOT EXISTS(SELECT 'X' FROM #TmpRptIOTaxSummary)
		BEGIN
			DELETE FROM RptDataCount WHERE RptId = @Pi_RptId AND UserId = @Pi_UsrId
			INSERT INTO RptDataCount (RptId,RecCount,ErrNo,UserId)
			SELECT @Pi_RptId,Count(*) as RecCount,@ErrNo,@Pi_UsrId FROM RptProductWiseSalesTaxGST
			WHERE UsrId=@Pi_UsrId
			SELECT * FROM RptProductWiseSalesTaxGST WHERE UsrId=@Pi_UsrId
			RETURN
		END
		
		
		
--		--Remove Duplicate [TaxableAmount] and LinelevelNetAmount
		SELECT DISTINCT
		[InvDate],[InvId],[RefNo],[RetailerName] ,[RetailerCode],RtrStateCode,RtrStateName,[RtrGSTIN],
		RtrShipAdd,RtrShipAdd1,[Product Name] ,[Product Code],[HSN Code],[RtrId],[Prdid],[InvQty],[CmpId],
		[TaxableAmount],[IOTaxType],[TaxFlag],LineNetAmount,[UsrId],[ReverseCharge]
		INTO #LineLevelGross
		FROM #TmpRptIOTaxSummary WHERE UsrId=@Pi_UsrId and TaxFlag=0
	
		
		
		DECLARE @ColSelect AS Varchar(MAX)
		DECLARE @ColSelectDataType AS Varchar(5000)
		DECLARE @TableCol AS Varchar(2000)
		DECLARE @Columns1 AS Varchar(7000)
		DECLARE @OrderBy AS VARCHAR(2000)
		DECLARE @PCSelect AS VARCHAR(3000)
		SET @PCSelect=''
		SET @ColSelect=''
		SET @ColSelectDataType=''
		SET @TableCol=''
		SET @Columns1=''
		SET @CreateTable=''
		SET @OrderBy=''
		
		CREATE TABLE #DynamicCol
		(
			Slno INT IDENTITY(1,1),
			Taxperc	Varchar(50),
			TaxId INT
		)
		INSERT INTO #DynamicCol(Taxperc,TaxId)
		SELECT DISTINCT Taxperc,TaxId FROM #TmpRptIOTaxSummary WHERE TaxFlag IN(0,1) and GroupType=2
		ORDER BY TaxId
	
	

		SELECT @ColSelect=@ColSelect+'ISNULL('+QuoteName(Taxperc)+',0) as '+QuoteName(Taxperc)+',' FROM #DynamicCol ORDER BY Slno

		SELECT @PCSelect=@PCSelect+Quotename(Taxperc)+',' FROM #DynamicCol ORDER BY Slno

		SET @PCSelect=LEFT(@PCSelect,LEN(@PCSelect)-1)

		SELECT @ColSelectDataType=@ColSelectDataType+QuoteName(Taxperc)+' Numeric(36,2),' FROM #DynamicCol ORDER BY Slno

		SET @ColSelect='SELECT RtrStateCode,RtrStateName,[RtrGSTIN],[RetailerCode],[RetailerName],RtrShipAdd,RtrShipAdd1,[IOTaxType],[InvDate],[RefNo],'+
		'[HSN Code],[Product Code],[Product Name],[UPC],[InvQty],[TaxableAmount],'+@ColSelect+'LineNetAmount,[ReverseCharge],[Group Name],[GroupType],[UsrId]'

		SET @TableCol= 'SLNO BIGINT IDENTITY(1,1),RtrStateCode Varchar(20),RtrStateName Varchar(150),[RtrGSTIN] varchar(20),[RetailerCode] Varchar(75),[RetailerName] Varchar(150),'+
		'RtrShipAdd Varchar(150),RtrShipAdd1 Varchar(150),[IOTaxType] [varchar](100) NULL,[InvDate] DateTime,'+
		'[RefNo] [varchar](100) NULL,	[HSN Code] varchar(50),[Product Code] Varchar(75),	[Product Name] Varchar(150),UPC INT,'+		
		'[InvQty] [int] NULL,[TaxableAmount] [numeric](38, 6) NULL,'
	

		SET @Columns1='SELECT RtrStateCode,RtrStateName,[RtrGSTIN],[RetailerCode],[RetailerName],RtrShipAdd,RtrShipAdd1,[IOTaxType],[InvDate],[RefNo],'+
		'[HSN Code],[Product Code],[Product Name] ,UPC,[InvQty],[TaxableAmount],LineNetAmount,ReverseCharge,TaxPercent ,Taxperc,[Group Name],[GroupType],[UsrId] FROM #TmpRptIOTaxSummary'

		SET @OrderBy=' ORDER BY [Group Name],[GroupType],IOTaxType,InvDate,RetailerName,[Product Name]'


		SET @CreateTable=' IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME=''RptProductWiseSalesTaxGST'' and XTYPE=''U'')'+
		' DROP TABLE RptProductWiseSalesTaxGST'+
		' CREATE TABLE RptProductWiseSalesTaxGST ('+@TableCol+@ColSelectDataType+' LineNetAmount Numeric(36,2),ReverseCharge  Numeric(36,2),[Group Name] Varchar(100),Grouptype TINYINT,UsrId INT)'

		--PRINT @CreateTable

		EXEC(@CreateTable)




		SET @SQL=' INSERT INTO RptProductWiseSalesTaxGST '+ @ColSelect+ ' FROM'+
		'('+@Columns1+
		') PS'+
		' PIVOT'+
		'('+
			' SUM(TaxPercent) FOR Taxperc IN('+@PCSelect+')'+
		')PVTTax '+ @OrderBy

		--PRINT @SQL
		EXEC(@SQL)

		----GRAND TOTAL UPDATE
		SELECT 'ZZZZZZ' as [Group Name], 3 as GroupType ,SUM([InvQty]) as [InvQty],SUM(LineNetAmount) as LineNetAmount,SUM(TaxableAmount) as TaxableAmount,SUM([ReverseCharge]) as [ReverseCharge]
		INTO #GrandTotal
		FROM #LineLevelGross WHERE TaxFlag=0 and [UsrId]=@Pi_UsrId

		UPDATE Y SET  
		Y.[InvQty]=X.[InvQty] ,Y.LineNetAmount=X.[LineNetAmount],Y.[TaxableAmount]=X.TaxableAmount,
		Y.[ReverseCharge]=X.[ReverseCharge]
		FROM RptProductWiseSalesTaxGST Y INNER JOIN #GrandTotal X ON X.[Group Name]=Y.[Group Name]
		AND X.GroupType=Y.GroupType WHERE Y.[UsrId]=@Pi_UsrId
		---TILL HERE


			DELETE FROM Report_Template_GST WHERE ReportId=1 and RptId=@Pi_RptId
			INSERT INTO Report_Template_GST(ReportId,RptId,RptName ,ColId,FieldName,FieldSize,FieldSelection,GroupField,
			FieldType,Alignment,HeaderCaption,HeaderCaption1,HeaderCaption2,
			RoundOff,CreatedDate)
			SELECT 1,401,'Product Wise Output Tax',1,'RtrStateCode',20,1,0,1,1,'Retailer','State','Code',0,GETDATE()
			UNION ALL
			SELECT 1,401,'Product Wise Output Tax',2,'RtrStateName',50,1,0,1,1,'Retailer','State','Name',0,GETDATE()
			UNION ALL
			SELECT 1,401,'Product Wise Output Tax',3,'RtrGSTIN',20,1,0,1,1,'Retailer','GST Tin','',0,GETDATE()
			UNION ALL
			SELECT 1,401,'Product Wise Output Tax',4,'RetailerCode',50,1,0,1,1,'Retailer','Code','',0,GETDATE()
			UNION ALL
			SELECT 1,401,'Product Wise Output Tax',5,'RetailerName',50,1,0,1,1,'Retailer','Name','',0,GETDATE()
			UNION ALL
			SELECT 1,401,'Product Wise Output Tax',6,'RtrShipAdd',75,1,0,1,1,'Retailer','Shipping','Address',0,GETDATE()
			UNION ALL
			SELECT 1,401,'Product Wise Output Tax',7,'RtrShipAdd1',75,1,0,1,1,'Retailer','Shipping','Address2',0,GETDATE()
			UNION ALL
			SELECT 1,401,'Product Wise Output Tax',8,'IOTaxType',75,1,0,1,1,'Sales/','Return','',0,GETDATE()
			UNION ALL
			SELECT 1,401,'Product Wise Output Tax',9,'RefNo',75,1,0,1,1,'Invoice','Number','',0,GETDATE()
			UNION ALL
			SELECT 1,401,'Product Wise Output Tax',10,'InvDate',75,1,0,1,4,'Invoice','Date','',0,GETDATE()
			UNION ALL
			SELECT 1,401,'Product Wise Output Tax',11,'Product Name',75,1,0,1,1,'Product Name','','',0,GETDATE()
			UNION ALL
			SELECT 1,401,'Product Wise Output Tax',12,'Product Code',75,1,0,1,1,'Product Code','','',0,GETDATE()
			UNION ALL
			SELECT 1,401,'Product Wise Output Tax',13,'HSN Code',75,1,0,1,1,'HSN Code','','',0,GETDATE()
			UNION ALL
			SELECT 1,401,'Product Wise Output Tax',14,'UPC',20,1,0,2,2,'UPC','','',0,GETDATE()
			UNION ALL
			SELECT 1,401,'Product Wise Output Tax',15,'InvQty',75,1,0,2,2,'Total','Quantity','',0,GETDATE()
			UNION ALL
			SELECT 1,401,'Product Wise Output Tax',16,'TaxableAmount',20,1,0,2,3,'Taxable','Amount','',2,GETDATE()

			SET @Str=''
			SELECT @MaxId=MAX(ColId)+1,@ReportId=ReportId FROM  Report_Template_GST (NOLOCK) WHERE RptId=@Pi_RptId
			GROUP BY ReportId

			SELECT @start = 1, @end = CHARINDEX(',', @PCSelect) 
			WHILE @start < LEN(@PCSelect) + 1 BEGIN 
				IF @end = 0  
				SET @end = LEN(@PCSelect) + 1
				SET @Str=SUBSTRING(@PCSelect, @start, @end - @start)
				INSERT INTO Report_Template_GST(ReportId,RptId,RptName,ColId,FieldName,FieldSize,
				FieldSelection,GroupField,FieldType,Alignment,HeaderCaption,HeaderCaption1,HeaderCaption2,RoundOff,
				CreatedDate)  
				SELECT TOP 1 ReportId,RptId,RptName,@MaxId,SUBSTRING(@PCSelect, @start, @end - @start),
				18,1,0,2,3,SUBSTRING(@PCSelect, @start, @end - @start)				
				,'','',2,Getdate()
				FROM Report_Template_GST WHERE RptId=@Pi_RptId
				
				SET @start = @end + 1 
				SET @end = CHARINDEX(',', @PCSelect, @start)
				SET @MaxId=@MaxId+1
			END 
			
			INSERT INTO Report_Template_GST(ReportId,RptId,RptName,ColId,FieldName,FieldSize,
			FieldSelection,GroupField,FieldType,Alignment,HeaderCaption,HeaderCaption1,HeaderCaption2,RoundOff,
			CreatedDate)  
			SELECT TOP 1 ReportId,RptId,RptName,@MaxId+1,'LineNetAmount',
			18,1,0,2,3,'Product','Level','NetAmount',2,Getdate()
			FROM Report_Template_GST WHERE RptId=@Pi_RptId	
			
			INSERT INTO Report_Template_GST(ReportId,RptId,RptName,ColId,FieldName,FieldSize,
			FieldSelection,GroupField,FieldType,Alignment,HeaderCaption,HeaderCaption1,HeaderCaption2,RoundOff,
			CreatedDate)  
			SELECT TOP 1 ReportId,RptId,RptName,@MaxId+2,'ReverseCharge',
			18,1,0,2,3,'Reverse','Charge','',2,Getdate()
			FROM Report_Template_GST WHERE RptId=@Pi_RptId	
			
			UPDATE Report_template_GST SET FieldName=REPLACE(REPLACE(FieldName,']',''),'[','')
			WHERE RptId=@Pi_RptId 

			DELETE FROM RptDataCount WHERE RptId = @Pi_RptId AND UserId = @Pi_UsrId
			INSERT INTO RptDataCount (RptId,RecCount,ErrNo,UserId)
			SELECT @Pi_RptId,Count(*) as RecCount,@ErrNo,@Pi_UsrId FROM RptProductWiseSalesTaxGST
			WHERE UsrId=@Pi_UsrId
			SELECT * FROM RptProductWiseSalesTaxGST WHERE UsrId=@Pi_UsrId

END
GO
DELETE FROM RptGroup WHERE RptId=402
INSERT INTO RptGroup(PId,RptId,GrpCode,GrpName,Visibility)
SELECT 'GSTTaxReports 400',402,'PurchaseTaxGST','Product Wise Input Tax',1
GO
DELETE FROM RptHeader WHERE RptId=402
INSERT INTO RptHeader(GrpCode,RptCaption,RptId,RpCaption,SPName,TblName,RptName,UserIds)
SELECT 'PurchaseTaxGST','Product Wise Input Tax',402,'Product Wise Input Tax','Proc_RptPurchaseTaxGST','RptPurchaseTaxGST','RptPurchaseTaxGST.rpt',0
GO
DELETE FROM Report_Template_GST WHERE ReportId=1 and RptId=402
INSERT INTO Report_Template_GST(ReportId,RptId,RptName ,ColId,FieldName,FieldSize,FieldSelection,GroupField,
FieldType,Alignment,HeaderCaption,HeaderCaption1,HeaderCaption2,
RoundOff,CreatedDate)
SELECT 1,402,'Product Wise Input Tax',1,'Supplier State',20,1,0,1,1,'Supplier','State','Name',0,GETDATE()
UNION ALL		
SELECT 1,402,'Product Wise Input Tax',2,'SupplierCode',50,1,0,1,1,'Supplier','Code','',0,GETDATE()
UNION ALL
SELECT 1,402,'Product Wise Input Tax',3,'SupplierName',50,1,0,1,1,'Supplier','Name','',0,GETDATE()
UNION ALL
SELECT 1,402,'Product Wise Input Tax',4,'SupplierAddress',75,1,0,1,1,'Supplier','Address','',0,GETDATE()			
UNION ALL		
SELECT 1,402,'Product Wise Input Tax',5,'IOTaxType',75,1,0,1,1,'Purchase/','PurReturn','',0,GETDATE()
UNION ALL			
SELECT 1,402,'Product Wise Input Tax',6,'GRN No',75,1,0,1,1,'GRN.','Number','',0,GETDATE()
UNION ALL
SELECT 1,402,'Product Wise Input Tax',7,'GRN date',75,1,0,1,4,'GRN.','Date','',0,GETDATE()
UNION ALL
SELECT 1,402,'Product Wise Input Tax',8,'Invoice Number',75,1,0,1,1,'Comp InvoiceNo/','ReturnRefNo','',0,GETDATE()
UNION ALL
SELECT 1,402,'Product Wise Input Tax',9,'Invoice Date',75,1,0,1,4,'Invoice','Date','',0,GETDATE()
UNION ALL
SELECT 1,402,'Product Wise Input Tax',10,'Product Code',75,1,0,1,1,'Product Code','','',0,GETDATE()
UNION ALL
SELECT 1,402,'Product Wise Input Tax',11,'Product Name',75,1,0,1,1,'Product Name','','',0,GETDATE()
UNION ALL			
SELECT 1,402,'Product Wise Input Tax',12,'HSN Code',75,1,0,1,1,'HSN Code','','',0,GETDATE()
UNION ALL
SELECT 1,402,'Product Wise Input Tax',13,'InvQty',75,1,0,2,2,'Total','Quantity','',0,GETDATE()
UNION ALL
SELECT 1,402,'Product Wise Input Tax',14,'TaxableAmount',20,1,0,2,3,'Taxable','Amount','',2,GETDATE()
GO
DELETE FROM Report_Template_GST WHERE ReportId=1 and RptId=403
INSERT INTO Report_Template_GST(ReportId,RptId,RptName ,ColId,FieldName,FieldSize,FieldSelection,GroupField,
FieldType,Alignment,HeaderCaption,HeaderCaption1,HeaderCaption2,
RoundOff,CreatedDate)
SELECT 1,403,'Sales Return Product Tax',1,'RetailerCode',50,1,0,1,1,'Retailer','Code','',0,GETDATE()
UNION ALL
SELECT 1,403,'Sales Return Product Tax',2,'RetailerName',50,1,0,1,1,'Retailer','Name','',0,GETDATE()
UNION ALL
SELECT 1,403,'Sales Return Product Tax',3,'RtrGSTIN',50,1,0,1,1,'Retailer','GSTIN','',0,GETDATE()
UNION ALL
SELECT 1,403,'Sales Return Product Tax',4,'RtrStateCode',20,1,0,1,1,'Retailer','State','Code',0,GETDATE()
UNION ALL
SELECT 1,403,'Sales Return Product Tax',5,'RtrStateName',50,1,0,1,1,'Retailer','State','Name',0,GETDATE()
UNION ALL
SELECT 1,403,'Sales Return Product Tax',6,'RtrShipAdd',75,1,0,1,1,'Retailer','Shipping','Address',0,GETDATE()
UNION ALL
SELECT 1,403,'Sales Return Product Tax',7,'RtrShipAdd1',75,1,0,1,1,'Retailer','Shipping','Address2',0,GETDATE()
UNION ALL
SELECT 1,403,'Sales Return Product Tax',8,'IOTaxType',75,1,0,1,1,'Sales/','Return','',0,GETDATE()
UNION ALL
SELECT 1,403,'Sales Return Product Tax',9,'Product Code',75,1,0,1,1,'Product Code','','',0,GETDATE()
UNION ALL
SELECT 1,403,'Sales Return Product Tax',10,'Product Name',75,1,0,1,1,'Product Name','','',0,GETDATE()
UNION ALL
SELECT 1,403,'Sales Return Product Tax',11,'[Item HSN/ SAC]',75,1,0,1,1,'HSN Code','','',0,GETDATE()
UNION ALL
SELECT 1,403,'Sales Return Product Tax',12,'UPC',20,1,0,2,2,'UPC','','',0,GETDATE()
UNION ALL
SELECT 1,403,'Sales Return Product Tax',13,'InvQty',75,1,0,2,2,'Total','Quantity','',0,GETDATE()
UNION ALL
SELECT 1,403,'Sales Return Product Tax',14,'SR Number',75,1,0,1,1,'SalesReturn','Number','',0,GETDATE()
UNION ALL
SELECT 1,403,'Sales Return Product Tax',15,'SRDate',75,1,0,1,4,'SalesReturn','Date','',0,GETDATE()
UNION ALL
SELECT 1,403,'Sales Return Product Tax',16,'Original Inv',75,1,0,1,1,'Sales','Number','',0,GETDATE()
UNION ALL
SELECT 1,403,'Sales Return Product Tax',17,'OriginalDate',75,1,0,1,4,'Sales','Date','',0,GETDATE()
UNION ALL
SELECT 1,403,'Sales Return Product Tax',18,'CN Number',75,1,0,1,1,'CreditNote','Number','',0,GETDATE()
UNION ALL
SELECT 1,403,'Sales Return Product Tax',19,'CNDate',75,1,0,1,4,'CreditNote','Date','',0,GETDATE()
UNION ALL
SELECT 1,403,'Sales Return Product Tax',20,'TaxableAmount',20,1,0,2,3,'Taxable','Amount','',2,GETDATE()
GO
DELETE FROM Report_Template_GST WHERE ReportId=1 and RptId=404
INSERT INTO Report_Template_GST(ReportId,RptId,RptName ,ColId,FieldName,FieldSize,FieldSelection,GroupField,
FieldType,Alignment,HeaderCaption,HeaderCaption1,HeaderCaption2,
RoundOff,CreatedDate)
SELECT 1,404,'Output Tax Summary',1,'IOTaxType',75,1,0,1,1,'Sales','Goods','',0,GETDATE()
UNION ALL
SELECT 1,404,'Output Tax Summary',2,'InvDate',75,1,0,1,4,'Invoice','Date','',0,GETDATE()
UNION ALL
SELECT 1,404,'Output Tax Summary',3,'RefNo',75,1,0,1,1,'Invoice','Number','',0,GETDATE()
UNION ALL
SELECT 1,404,'Output Tax Summary',4,'TaxableAmount',20,1,0,2,3,'Taxable','Amount','',2,GETDATE()
GO
DELETE FROM Report_Template_GST WHERE ReportId=1 and RptId=405
INSERT INTO Report_Template_GST(ReportId,RptId,RptName ,ColId,FieldName,FieldSize,FieldSelection,GroupField,
FieldType,Alignment,HeaderCaption,HeaderCaption1,HeaderCaption2,
RoundOff,CreatedDate)
SELECT 1,405,'Input Tax Summary',1,'GRNDate',75,1,0,1,1,'GRN','Date','',0,GETDATE()
UNION ALL
SELECT 1,405,'Input Tax Summary',2,'InvDate',75,1,0,1,4,'Invoice','Date','',0,GETDATE()
UNION ALL
SELECT 1,405,'Input Tax Summary',3,'RefNo',75,1,0,1,1,'Invoice','Number','',0,GETDATE()
UNION ALL
SELECT 1,405,'Input Tax Summary',4,'TaxableAmount',20,1,0,2,3,'Taxable','Amount','',2,GETDATE()
GO
DELETE FROM RptDetails WHERE RptId=402
INSERT INTO RptDetails(RptId,[SlNo],[TblName],[PrntId],[PrntRefFld],[FldName],[FldCaption],[PrntTbl],[CtrlType],[CmnFld],[SelcId],[SingleMulti],[Mandatory],[PnlMsg],[CaptionChange]) VALUES (402,1,'FromDate',-1,'','','From Date*','',1,'',10,0,0,'Enter From Date',0)
INSERT INTO RptDetails(RptId,[SlNo],[TblName],[PrntId],[PrntRefFld],[FldName],[FldCaption],[PrntTbl],[CtrlType],[CmnFld],[SelcId],[SingleMulti],[Mandatory],[PnlMsg],[CaptionChange]) VALUES (402,2,'ToDate',-1,'','','To Date*','',1,'',11,0,0,'Enter To Date',0)
INSERT INTO RptDetails(RptId,[SlNo],[TblName],[PrntId],[PrntRefFld],[FldName],[FldCaption],[PrntTbl],[CtrlType],[CmnFld],[SelcId],[SingleMulti],[Mandatory],[PnlMsg],[CaptionChange]) VALUES (402,3,'Company',-1,'','CmpId,CmpCode,CmpName','Company...','',1,'',4,1,0,'Press F4/Double Click to select Company',0)
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='U' AND NAME='RptPurchaseTaxGST')
DROP TABLE RptPurchaseTaxGST
GO
CREATE TABLE RptPurchaseTaxGST
(
Slno BIGINT IDENTITY(1,1),
[SupplierCode] Varchar(75),
[SupplierName] Varchar(150),
[SupplierAddress] Varchar(150),
[Supplier GSTIN] Varchar(150),
[Supplier State] Varchar(150),
[IOTaxType] [varchar](100) NULL,
[GRN No] NVarchar(100),
[GRN date] DateTime,
[Invoice Number] NVarchar(100),
[Invoice Date] Datetime,
[Product Code] Varchar(75),	
[Product Name] Varchar(150),
[HSN Code] Varchar(50),
[InvQty] [int] NULL,
[TaxableAmount] [numeric](38, 6) NULL,
LineNetAmount [numeric](38, 6) NULL,
[UPC] INT,
[Group Name]  Varchar(200),
[GroupType] INT,
[UsrId] [int] NULL
)
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='P' AND NAME='Proc_RptPurchaseTaxGST')
DROP PROCEDURE Proc_RptPurchaseTaxGST
GO
CREATE PROCEDURE Proc_RptPurchaseTaxGST
(
	@Pi_RptId			INT,
	@Pi_UsrId			INT,
	@Pi_SnapId			INT,
	@Pi_DbName			nvarchar(50),
	@Pi_SnapRequired	INT,
	@Pi_GetFromSnap		INT,
	@Pi_CurrencyId		INT
)
AS
/*********************************
* PROCEDURE	: Proc_RptPurchaseTaxGST
* PURPOSE	: To get the GST Purchase Tax details
* CREATED	: Raja C
* CREATED DATE	: 20/05/2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
BEGIN
SET NOCOUNT ON

	--Filter Variable
	DECLARE @FromDate		AS	DATETIME
	DECLARE @ToDate			AS	DATETIME
	DECLARE @CmpId	        AS	INT
	DECLARE @ErrNo	 	AS	INT
		

	DECLARE @SQL as Varchar(MAX)
	DECLARE @MaxId as INT
	DECLARE @ReportId as INT
	DECLARE @start INT, @end INT 
	DECLARE @Str AS VARCHAR(100)
	DECLARE @CreateTable AS VARCHAR(7000)

		
	SET @ErrNo=0
	SELECT @FromDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,10,@Pi_UsrId)
	SELECT @ToDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,11,@Pi_UsrId)
	SET @CmpId = (SElect  TOP 1 iCountid FRom Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId))	
	
	
	IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='U' AND NAME='RptPurchaseTaxGST')
	BEGIN
		DELETE FROM RptPurchaseTaxGST WHERE UsrId=@Pi_UsrId
	END
	
		CREATE TABLE #TmpRptIOTaxSummary
		(   
		    [GRN No] NVarchar(100),
            [GRN date] DateTime,
			[InvDate] DateTime,
			[InvId] [bigint] NULL,
			[RefNo] [varchar](100) NULL,
			[SupplierCode] Varchar(75),
			[SupplierName] Varchar(150),
			[SupplierAddress] Varchar(150),
			[Supplier GSTIN] Varchar(150),
			[Supplier State] Varchar(150),
			[Product Name] Varchar(150),			
			[Product Code] Varchar(75),
			[HSN Code] Varchar(75),
			[SpmId] [int] NULL,
			[Prdid] [int] NULL,
			[InvQty] [int] NULL,
			[CmpId] [int] NULL,
			[TaxPerc] [varchar](50) NULL,
			[TaxableAmount] [numeric](38, 6) NULL,
			[IOTaxType] [varchar](100) NULL,
			[TaxFlag] [int] NULL,
			[TaxPercent] [numeric](38, 6) NULL,
			[TaxId] [int] NULL,	
			[LineNetAmount] Numeric(36,6),
			[UPC] INT,
			[Group Name]  Varchar(200),
			[GroupType] INT,
			[UsrId] [int] NULL
		)
		
		SELECT Prdid,Max(ConversionFactor) as UPC 
		INTO #UOM
		FROM Product P (NOLOCK) INNER JOIN Uomgroup UG (NOLOCK) ON P.UomGroupId=UG.UomGroupId
		GROUP BY Prdid
		
		INSERT INTO #TmpRptIOTaxSummary([GRN No],[GRN date],[InvDate],[InvId],[RefNo],[SupplierCode],[SupplierName],[SupplierAddress],
		[Supplier GSTIN],[Supplier State],[Product Name] ,[Product Code],[HSN Code],[SpmId],[Prdid],[InvQty],[CmpId],[TaxPerc],[TaxableAmount],[IOTaxType] ,
		[TaxFlag],[TaxPercent],[TaxId],LineNetAmount,[UPC],[Group Name],[GroupType],[UsrId])
		SELECT PurRcptRefNo,GoodsRcvdDate,PR.InvDate AS InvDate,PR.PurRcptId AS InvId,CmpInvNo AS RefNo,SpmCode,SpmName,SpmAdd1,'' as SupplierGSTIN,'' as SupplierState,
		PrdName,PrdCCode,'' as [HSN Code],S.SpmId AS SpmId,P.PrdId as Prdid,SUM(PRP.RcvdGoodBaseQty) AS InvQty,  
		C.CmpId AS CmpId,TC.TaxCode +' Rate' as TaxPerc,
		SUM(TaxableAmount) as TaxableAmount,'Purchase' as IOTaxType,0 as TaxFlag,TaxPerc as TaxPercent,PRPT.TaxId,
		SUM(PrdNetAmount) as [LineNetAmount],UPC,'' as [Group Name] ,2 as [GroupType],@Pi_UsrId AS UserId  
		FROM 
		PurchaseReceipt PR WITH (NOLOCK)  
		INNER JOIN PurchaseReceiptProduct PRP WITH (NOLOCK) ON PR.PurRcptId=PRP.PurRcptId 
		INNER JOIN PurchaseReceiptProductTax PRPT WITH (NOLOCK) ON PR.PurRcptId=PRPT.PurRcptId AND  PRP.PurRcptId=PRPT.PurRcptId  AND PRP.PrdSlNo=PRPT.PrdSlNo 
		INNER JOIN Product P WITH (NOLOCK) ON P.PrdId = PRP.PrdId   
		INNER JOIN #UOM U ON U.Prdid=P.Prdid and U.PrdId=PRP.PrdId 
		INNER JOIN ProductBatch PB WITH (NOLOCK) ON PB.PrdId = PRP.PrdId AND PB.PrdBatId = PRP.PrdBatId AND PB.PrdId = P.PrdId  
		INNER JOIN Supplier S WITH (NOLOCK) ON S.SpmId = PR.SpmId
		INNER JOIN TaxConfiguration TC (NOLOCK) ON TC.TaxId =PRPT.TaxId    
		LEFT OUTER JOIN Company C ON C.CmpId = P.CmpId   
		WHERE PR.InvDate Between @FromDate and @ToDate and PR.Status=1
		AND (C.CmpId = (CASE @CmpId WHEN 0 THEN C.CmpId ELSE 0 END) OR
		C.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId)))
		Group By PurRcptRefNo,GoodsRcvdDate,PR.PurRcptId,PR.InvDate,CmpInvNo,SpmCode,SpmName,SpmAdd1,PrdName,PrdCCode,S.SpmId,P.PrdId,
		C.CmpId,TC.TaxCode,TaxPerc,PRPT.TaxId,[UPC]
		HAVING Sum(TaxableAmount) >0  
			
		INSERT INTO #TmpRptIOTaxSummary([GRN No],[GRN date],[InvDate],[InvId],[RefNo],[SupplierCode],[SupplierName],[SupplierAddress],
		[Supplier GSTIN],[Supplier State],[Product Name] ,[Product Code],[HSN Code],[SpmId],[Prdid],[InvQty],[CmpId],[TaxPerc],[TaxableAmount],[IOTaxType] ,
		[TaxFlag],[TaxPercent],[TaxId],LineNetAmount,[UPC],[Group Name],[GroupType],[UsrId]) 
		SELECT PurRcptRefNo,GoodsRcvdDate,PR.InvDate AS InvDate,PR.PurRcptId AS InvId,CmpInvNo AS RefNo,SpmCode,SpmName,SpmAdd1,'' as SupplierGSTIN,'' as SupplierState,
		PrdName,PrdCCode,'' as [HSN Code],S.SpmId AS SpmId,P.PrdId as Prdid,SUM(PRP.RcvdGoodBaseQty) AS InvQty,  
		C.CmpId AS CmpId,TC.TaxCode +'Value' as TaxPerc,
		SUM(TaxableAmount) as TaxableAmount,'Purchase' as IOTaxType,1 as TaxFlag,SUM(PRPT.TaxAmount) as TaxPercent,PRPT.TaxId,
		SUM(PrdNetAmount) as [LineNetAmount],UPC,'' as [Group Name] ,2 as [GroupType],@Pi_UsrId AS UserId  
		FROM 
		PurchaseReceipt PR WITH (NOLOCK)  
		INNER JOIN PurchaseReceiptProduct PRP WITH (NOLOCK) ON PR.PurRcptId=PRP.PurRcptId 
		INNER JOIN PurchaseReceiptProductTax PRPT WITH (NOLOCK) ON PR.PurRcptId=PRPT.PurRcptId AND  PRP.PurRcptId=PRPT.PurRcptId  AND PRP.PrdSlNo=PRPT.PrdSlNo 
		INNER JOIN Product P WITH (NOLOCK) ON P.PrdId = PRP.PrdId 
		INNER JOIN #UOM U ON U.Prdid=P.Prdid and U.PrdId=PRP.PrdId    
		INNER JOIN ProductBatch PB WITH (NOLOCK) ON PB.PrdId = PRP.PrdId AND PB.PrdBatId = PRP.PrdBatId AND PB.PrdId = P.PrdId  
		INNER JOIN Supplier S WITH (NOLOCK) ON S.SpmId = PR.SpmId
		INNER JOIN TaxConfiguration TC (NOLOCK) ON TC.TaxId =PRPT.TaxId    
		LEFT OUTER JOIN Company C ON C.CmpId = P.CmpId   
		AND (C.CmpId = (CASE @CmpId WHEN 0 THEN C.CmpId ELSE 0 END) OR
		C.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId)))
		WHERE PR.InvDate Between @FromDate and @ToDate and PR.Status=1
		Group By PurRcptRefNo,GoodsRcvdDate,PR.PurRcptId,PR.InvDate,CmpInvNo,SpmCode,SpmName,SpmAdd1,PrdName,PrdCCode,S.SpmId,P.PrdId,
		C.CmpId,TC.TaxCode,TaxPerc,PRPT.TaxId,[UPC]
		HAVING  SUM(PRPT.TaxAmount+PRPT.TaxableAmount) > 0 		
		
		

		INSERT INTO #TmpRptIOTaxSummary([GRN No],[GRN date],[InvDate],[InvId],[RefNo],[SupplierCode],[SupplierName],[SupplierAddress],
		[Supplier GSTIN],[Supplier State],[Product Name] ,[Product Code],[HSN Code],[SpmId],[Prdid],[InvQty],[CmpId],[TaxPerc],[TaxableAmount],[IOTaxType] ,
		[TaxFlag],[TaxPercent],[TaxId],LineNetAmount,[UPC],[Group Name],[GroupType],[UsrId]) 
		SELECT PurRcptRefNo,'' AS [GRN date],PurRetDate AS InvDate,PR.PurRetId AS InvId,PurRetRefNo AS RefNo,SpmCode,SpmName,SpmAdd1,'' as SupplierGSTIN,'' as SupplierState,
		PrdName,PrdCCode,'' as [HSN Code],S.SpmId AS SpmId,P.PrdId as Prdid,-1*SUM(PRP.RetInvBaseQty) AS InvQty,  
		C.CmpId AS CmpId,TC.TaxCode +' Rate' as TaxPerc,
		-1*SUM(TaxableAmount) as TaxableAmount,'PurchaseReturn' as IOTaxType,0 as TaxFlag,TaxPerc as TaxPercent,PRPT.TaxId,
		-1*SUM(PrdNetAmount) as [LineNetAmount],UPC,'' as [Group Name] ,2 as [GroupType],@Pi_UsrId AS UserId  
		FROM 
		PurchaseReturn  PR WITH (NOLOCK)  
		INNER JOIN PurchaseReturnProduct PRP WITH (NOLOCK) ON PR.PurRetId=PRP.PurRetId 
		INNER JOIN PurchaseReturnProductTax PRPT WITH (NOLOCK) ON PR.PurRetId=PRPT.PurRetId AND  PRP.PurRetId=PRPT.PurRetId  AND PRP.PrdSlNo=PRPT.PrdSlNo 
		INNER JOIN Product P WITH (NOLOCK) ON P.PrdId = PRP.PrdId
		INNER JOIN #UOM U ON U.Prdid=P.Prdid and U.PrdId=PRP.PrdId     
		INNER JOIN ProductBatch PB WITH (NOLOCK) ON PB.PrdId = PRP.PrdId AND PB.PrdBatId = PRP.PrdBatId AND PB.PrdId = P.PrdId  
		INNER JOIN Supplier S WITH (NOLOCK) ON S.SpmId = PR.SpmId
		INNER JOIN TaxConfiguration TC (NOLOCK) ON TC.TaxId =PRPT.TaxId    
		LEFT OUTER JOIN Company C ON C.CmpId = P.CmpId  
		AND (C.CmpId = (CASE @CmpId WHEN 0 THEN C.CmpId ELSE 0 END) OR
		C.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId))) 
		WHERE PR.PurRetDate Between @FromDate and @ToDate and PR.Status=1
		Group By PurRcptRefNo,PurRetDate,PR.PurRetId,PurRetRefNo,SpmCode,SpmName,SpmAdd1,PrdName,PrdCCode,S.SpmId,P.PrdId,
		C.CmpId,TC.TaxCode,TaxPerc,PRPT.TaxId,[UPC]
		HAVING SUM(TaxableAmount) >0 		
		
		
		INSERT INTO #TmpRptIOTaxSummary([GRN No],[GRN date],[InvDate],[InvId],[RefNo],[SupplierCode],[SupplierName],[SupplierAddress],
		[Supplier GSTIN],[Supplier State],[Product Name] ,[Product Code],[HSN Code],[SpmId],[Prdid],[InvQty],[CmpId],[TaxPerc],[TaxableAmount],[IOTaxType] ,
		[TaxFlag],[TaxPercent],[TaxId],LineNetAmount,[UPC],[Group Name],[GroupType],[UsrId]) 
		SELECT PurRcptRefNo,'' AS [GRN date],PurRetDate AS InvDate,PR.PurRetId AS InvId,PurRetRefNo AS RefNo,SpmCode,SpmName,SpmAdd1,'' as SupplierGSTIN,'' as SupplierState,
		PrdName,PrdCCode,'' as [HSN Code],S.SpmId AS SpmId,P.PrdId as Prdid,-1*SUM(PRP.RetInvBaseQty) AS InvQty,  
		C.CmpId AS CmpId,TC.TaxCode +' Value' as TaxPerc,
		-1*SUM(TaxableAmount) as TaxableAmount,'PurchaseReturn' as IOTaxType,1 as TaxFlag,-1*SUM(PRPT.TaxAmount) as TaxPercent,PRPT.TaxId,
		-1*SUM(PrdNetAmount) as [LineNetAmount],UPC,'' as [Group Name] ,2 as [GroupType],@Pi_UsrId AS UserId  
		FROM 
		PurchaseReturn  PR WITH (NOLOCK)  
		INNER JOIN PurchaseReturnProduct PRP WITH (NOLOCK) ON PR.PurRetId=PRP.PurRetId 
		INNER JOIN PurchaseReturnProductTax PRPT WITH (NOLOCK) ON PR.PurRetId=PRPT.PurRetId AND  PRP.PurRetId=PRPT.PurRetId  AND PRP.PrdSlNo=PRPT.PrdSlNo 
		INNER JOIN Product P WITH (NOLOCK) ON P.PrdId = PRP.PrdId
		INNER JOIN #UOM U ON U.Prdid=P.Prdid and U.PrdId=PRP.PrdId     
		INNER JOIN ProductBatch PB WITH (NOLOCK) ON PB.PrdId = PRP.PrdId AND PB.PrdBatId = PRP.PrdBatId AND PB.PrdId = P.PrdId  
		INNER JOIN Supplier S WITH (NOLOCK) ON S.SpmId = PR.SpmId
		INNER JOIN TaxConfiguration TC (NOLOCK) ON TC.TaxId =PRPT.TaxId    
		LEFT OUTER JOIN Company C ON C.CmpId = P.CmpId 
		AND (C.CmpId = (CASE @CmpId WHEN 0 THEN C.CmpId ELSE 0 END) OR
		C.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId)))  
		WHERE PR.PurRetDate Between @FromDate and @ToDate and PR.Status=1
		Group By PurRcptRefNo,PurRetDate,PR.PurRetId,PurRetRefNo,SpmCode,SpmName,SpmAdd1,PrdName,PrdCCode,S.SpmId,P.PrdId,
		C.CmpId,TC.TaxCode,TaxPerc,PRPT.TaxId,[UPC]
		HAVING Sum(TaxableAmount+PRPT.TaxAmount) >0 

		
		INSERT INTO #TmpRptIOTaxSummary([GRN No],[GRN date],[InvDate],[InvId],[RefNo],[SupplierCode],[SupplierName],[SupplierAddress],
		[Supplier GSTIN],[Supplier State],[Product Name] ,[Product Code],[HSN Code],[SpmId],[Prdid],[InvQty],[CmpId],[TaxPerc],[TaxableAmount],[IOTaxType] ,
		[TaxFlag],[TaxPercent],[TaxId],LineNetAmount,[UPC],[Group Name],[GroupType],[UsrId]) 
		SELECT  '' AS [GRN No],'' AS [GRN date],NULL, 0 [InvId],'' AS [RefNo],'' AS [SupplierCode],'' AS [SupplierName],''AS [SupplierAddress],'' AS [Supplier GSTIN],
		'' AS [Supplier State],'' AS [Product Name] ,'' AS [Product Code],'' AS [HSN Code],0 [SpmId],0 as Prdid,0 as [InvQty],0 as[CmpId],  [TaxPerc] ,0 as [TaxableAmount],'' as [IOTaxType] ,
		100 as [TaxFlag],SUM([TaxPercent]) as [TaxPercent],0 as [TaxId],0 as  LineNetAmount,0 as [UPC],'ZZZZZZ' as [Group Name],3 as [GroupType],[UsrId]
		FROM #TmpRptIOTaxSummary WHERE TaxFlag=1		
		GROUP BY [UsrId],[TaxPerc]
		
		
		SELECT StateCode,StateName,TinFirst2Digit,MasterRecordId
		INTO #SupplierState 
		FROM UDCHD A (NOLOCK)
		INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId
		INNER JOIN UdcDetails C (NOLOCK) ON B.MasterId=C.MasterId
		and B.UdcMasterId=C.UdcMasterId
		INNER JOIN UdcDefault D (NOLOCK) ON D.MasterId=C.MasterId and D.MasterId=B.MasterId
		and D.UdcMasterId=C.UdcMasterId and D.UdcMasterId=B.UdcMasterId
		INNER JOIN StateMaster E (NOLOCK) ON E.StateName=D.ColValue and E.StateName=C.ColumnValue
		WHERE MasterName='Supplier Master' and ColumnName='State Name'
		
					
		UPDATE A  SET A.[Supplier State]=B.StateName 
		FROM #TmpRptIOTaxSummary A 
		INNER JOIN  #SupplierState  B  ON A.Spmid=B.MasterRecordId
		
		SELECT MasterRecordId,ColumnName AS SupplierGSTIN
		INTO #SupplierGSTIN
		FROM UDCHD A (NOLOCK)
		INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId
		INNER JOIN UdcDetails C (NOLOCK) ON B.MasterId=C.MasterId
		and B.UdcMasterId=C.UdcMasterId	
		WHERE MasterName='Supplier Master' and ColumnName='GSTIN'
		
        UPDATE A  SET A.[Supplier GSTIN]=B.SupplierGSTIN 
		FROM #TmpRptIOTaxSummary A 
		INNER JOIN  #SupplierGSTIN  B  ON A.Spmid=B.MasterRecordId
		
		
		UPDATE TR SET  [HSN Code]=C.ColumnValue
		FROM UDCHD A (NOLOCK)
		INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId
		INNER JOIN UdcDetails C (NOLOCK) ON B.MasterId=C.MasterId
		and B.UdcMasterId=C.UdcMasterId
		INNER JOIN #TmpRptIOTaxSummary TR ON TR.Prdid=C.MasterRecordId
		WHERE MasterName='Product Master' and ColumnName='HSN Code'
		
		
		IF NOT EXISTS(SELECT 'X' FROM #TmpRptIOTaxSummary)
		BEGIN
			DELETE FROM RptDataCount WHERE RptId = @Pi_RptId AND UserId = @Pi_UsrId
			INSERT INTO RptDataCount (RptId,RecCount,ErrNo,UserId)
			SELECT @Pi_RptId,Count(*) as RecCount,@ErrNo,@Pi_UsrId FROM RptProductWiseSalesTaxGST
			WHERE UsrId=@Pi_UsrId
			SELECT * FROM RptProductWiseSalesTaxGST WHERE UsrId=@Pi_UsrId
			RETURN
		END
		
		
--		--Remove Duplicate [TaxableAmount] and LinelevelNetAmount
        SELECT DISTINCT
		[GRN No],[GRN date],[InvDate],[InvId],[RefNo],[SupplierCode],[SupplierName],[SupplierAddress],
		[Supplier GSTIN],[Supplier State],[Product Name] ,[Product Code],[HSN Code],[SpmId],[Prdid],[InvQty],[CmpId],
		[TaxableAmount],[IOTaxType],[TaxFlag],LineNetAmount,[UsrId]
		INTO #LineLevelGross	
		FROM #TmpRptIOTaxSummary WHERE UsrId=@Pi_UsrId and TaxFlag=0
       
		
		
		DECLARE @ColSelect AS Varchar(MAX)
		DECLARE @ColSelectDataType AS Varchar(5000)
		DECLARE @TableCol AS Varchar(2000)
		DECLARE @Columns1 AS Varchar(7000)
		DECLARE @OrderBy AS VARCHAR(2000)
		DECLARE @PCSelect AS VARCHAR(3000)
		SET @PCSelect=''
		SET @ColSelect=''
		SET @ColSelectDataType=''
		SET @TableCol=''
		SET @Columns1=''
		SET @CreateTable=''
		SET @OrderBy=''
		
		CREATE TABLE #DynamicCol
		(
			Slno INT IDENTITY(1,1),
			Taxperc	Varchar(50),
			TaxId INT
		)
		INSERT INTO #DynamicCol(Taxperc,TaxId)
		SELECT DISTINCT Taxperc,TaxId FROM #TmpRptIOTaxSummary WHERE TaxFlag IN(0,1) and GroupType=2
		ORDER BY TaxId	


		SELECT @ColSelect=@ColSelect+'ISNULL('+QuoteName(Taxperc)+',0) as '+QuoteName(Taxperc)+',' FROM #DynamicCol ORDER BY Slno

		SELECT @PCSelect=@PCSelect+Quotename(Taxperc)+',' FROM #DynamicCol ORDER BY Slno

		SET @PCSelect=LEFT(@PCSelect,LEN(@PCSelect)-1)

		SELECT @ColSelectDataType=@ColSelectDataType+QuoteName(Taxperc)+' Numeric(36,2),' FROM #DynamicCol ORDER BY Slno

		SET @ColSelect='SELECT SupplierCode,SupplierName,SupplierAddress,[Supplier GSTIN],[Supplier State],IOTaxType,[GRN No],[GRN date],RefNo,'+
        'InvDate,[Product Code],[Product Name],[HSN Code],[UPC],InvQty,TaxableAmount,'+@ColSelect+'LineNetAmount,[Group Name],[GroupType],[UsrId]'

		SET @TableCol= 'Slno BIGINT IDENTITY(1,1),[SupplierCode] Varchar(75),[SupplierName] Varchar(150),[SupplierAddress] Varchar(150),[Supplier GSTIN] Varchar(150),'+
        '[Supplier State] Varchar(150),[IOTaxType] [varchar](100) NULL,[GRN No] NVarchar(100),[GRN date] DateTime,[Invoice Number] NVarchar(100),[Invoice Date] Datetime,'+
        '[Product Code] Varchar(75),[Product Name] Varchar(150),[HSN Code] Varchar(50),UPC INT,[InvQty] [int] NULL,[TaxableAmount] [numeric](38, 6) NULL,'


		SET @Columns1='SELECT SupplierCode,SupplierName,SupplierAddress,[Supplier GSTIN],[Supplier State],IOTaxType,[GRN No],[GRN date],RefNo,'+
        'Invdate,[Product Code],[Product Name],[HSN Code],UPC,[InvQty],[TaxableAmount],LineNetAmount,TaxPercent ,Taxperc,[Group Name],[GroupType],[UsrId] FROM #TmpRptIOTaxSummary'

		SET @OrderBy=' ORDER BY [Group Name],[GroupType],IOTaxType,Invdate,SupplierName,[Product Name]'

		SET @CreateTable=' IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME=''RptPurchaseTaxGST'' and XTYPE=''U'')'+
		' DROP TABLE RptPurchaseTaxGST'+
		' CREATE TABLE RptPurchaseTaxGST ('+@TableCol+@ColSelectDataType+' LineNetAmount Numeric(36,2),[Group Name] Varchar(100),Grouptype TINYINT,UsrId INT)'

		--PRINT @CreateTable
	    EXEC(@CreateTable)

		SET @SQL=' INSERT INTO RptPurchaseTaxGST '+ @ColSelect+ ' FROM'+
		'('+@Columns1+
		') PS'+
		' PIVOT'+
		'('+
			' SUM(TaxPercent) FOR Taxperc IN('+@PCSelect+')'+
		')PVTTax '+ @OrderBy

		--PRINT @SQL
		EXEC(@SQL)


		----GRAND TOTAL UPDATE
		SELECT 'ZZZZZZ' as [Group Name], 3 as GroupType ,SUM([InvQty]) as [InvQty],SUM(LineNetAmount) as LineNetAmount,SUM(TaxableAmount) as TaxableAmount
		INTO #GrandTotal
		FROM #LineLevelGross WHERE TaxFlag=0 and [UsrId]=@Pi_UsrId

		UPDATE Y SET  
		Y.[InvQty]=X.[InvQty] ,Y.LineNetAmount=X.[LineNetAmount],Y.[TaxableAmount]=X.TaxableAmount 
		FROM RptPurchaseTaxGST Y INNER JOIN #GrandTotal X ON X.[Group Name]=Y.[Group Name]
		AND X.GroupType=Y.GroupType WHERE Y.[UsrId]=@Pi_UsrId
		---TILL HERE



			DELETE FROM Report_Template_GST WHERE ReportId=1 and RptId=@Pi_RptId
			INSERT INTO Report_Template_GST(ReportId,RptId,RptName ,ColId,FieldName,FieldSize,FieldSelection,GroupField,
			FieldType,Alignment,HeaderCaption,HeaderCaption1,HeaderCaption2,
			RoundOff,CreatedDate)
			SELECT 1,402,'Product Wise Input Tax',1,'Supplier State',20,1,0,1,1,'Supplier','State','Name',0,GETDATE()
			UNION ALL		
			SELECT 1,402,'Product Wise Input Tax',2,'SupplierCode',50,1,0,1,1,'Supplier','Code','',0,GETDATE()
			UNION ALL
			SELECT 1,402,'Product Wise Input Tax',3,'SupplierName',50,1,0,1,1,'Supplier','Name','',0,GETDATE()
			UNION ALL
			SELECT 1,402,'Product Wise Input Tax',4,'SupplierAddress',75,1,0,1,1,'Supplier','Address','',0,GETDATE()			
			UNION ALL		
			SELECT 1,402,'Product Wise Input Tax',5,'IOTaxType',75,1,0,1,1,'Purchase/','PurReturn','',0,GETDATE()
			UNION ALL			
			SELECT 1,402,'Product Wise Input Tax',6,'GRN No',75,1,0,1,1,'GRN.','Number','',0,GETDATE()
			UNION ALL
			SELECT 1,402,'Product Wise Input Tax',7,'GRN date',75,1,0,1,4,'GRN.','Date','',0,GETDATE()
			UNION ALL
			SELECT 1,402,'Product Wise Input Tax',8,'Invoice Number',75,1,0,1,1,'Comp InvoiceNo/','ReturnRefNo','',0,GETDATE()
			UNION ALL
			SELECT 1,402,'Product Wise Input Tax',9,'Invoice Date',75,1,0,1,4,'Invoice','Date','',0,GETDATE()
			UNION ALL
			SELECT 1,402,'Product Wise Input Tax',10,'Product Code',75,1,0,1,1,'Product Code','','',0,GETDATE()
			UNION ALL
			SELECT 1,402,'Product Wise Input Tax',11,'Product Name',75,1,0,1,1,'Product Name','','',0,GETDATE()
			UNION ALL			
			SELECT 1,402,'Product Wise Input Tax',12,'HSN Code',75,1,0,1,1,'HSN Code','','',0,GETDATE()
			UNION ALL		
			SELECT 1,402,'Product Wise Input Tax',13,'UPC',20,1,0,2,2,'UPC','','',0,GETDATE()
			UNION ALL
			SELECT 1,402,'Product Wise Input Tax',14,'InvQty',75,1,0,2,2,'Total','Quantity','',0,GETDATE()
			UNION ALL
			SELECT 1,402,'Product Wise Input Tax',15,'TaxableAmount',20,1,0,2,3,'Taxable','Amount','',2,GETDATE()
		

			SET @Str=''
			SELECT @MaxId=MAX(ColId)+1,@ReportId=ReportId FROM  Report_Template_GST (NOLOCK) WHERE RptId=@Pi_RptId
			GROUP BY ReportId

			SELECT @start = 1, @end = CHARINDEX(',', @PCSelect) 
			WHILE @start < LEN(@PCSelect) + 1 BEGIN 
				IF @end = 0  
				SET @end = LEN(@PCSelect) + 1
				SET @Str=SUBSTRING(@PCSelect, @start, @end - @start)
				INSERT INTO Report_Template_GST(ReportId,RptId,RptName,ColId,FieldName,FieldSize,
				FieldSelection,GroupField,FieldType,Alignment,HeaderCaption,HeaderCaption1,HeaderCaption2,RoundOff,
				CreatedDate)  
				SELECT TOP 1 ReportId,RptId,RptName,@MaxId,SUBSTRING(@PCSelect, @start, @end - @start),
				18,1,0,2,3,SUBSTRING(@PCSelect, @start, @end - @start)				
				,'','',2,Getdate()
				FROM Report_Template_GST WHERE RptId=@Pi_RptId
				
				SET @start = @end + 1 
				SET @end = CHARINDEX(',', @PCSelect, @start)
				SET @MaxId=@MaxId+1
			END 
			
			INSERT INTO Report_Template_GST(ReportId,RptId,RptName,ColId,FieldName,FieldSize,
			FieldSelection,GroupField,FieldType,Alignment,HeaderCaption,HeaderCaption1,HeaderCaption2,RoundOff,
			CreatedDate)  
			SELECT TOP 1 ReportId,RptId,RptName,@MaxId+1,'LineNetAmount',
			18,1,0,2,3,'Product','Level','NetAmount',2,Getdate()
			FROM Report_Template_GST WHERE RptId=@Pi_RptId	
			
			UPDATE Report_template_GST SET FieldName=REPLACE(REPLACE(FieldName,']',''),'[','')
			WHERE RptId=@Pi_RptId 

			DELETE FROM RptDataCount WHERE RptId = @Pi_RptId AND UserId = @Pi_UsrId
			INSERT INTO RptDataCount (RptId,RecCount,ErrNo,UserId)
			SELECT @Pi_RptId,Count(*) as RecCount,@ErrNo,@Pi_UsrId FROM RptProductWiseSalesTaxGST
			WHERE UsrId=@Pi_UsrId
			SELECT * FROM RptPurchaseTaxGST WHERE UsrId=@Pi_UsrId

END
GO
DELETE FROM RptGroup WHERE RptId=404
INSERT INTO RptGroup(PId,RptId,GrpCode,GrpName,Visibility)
SELECT 'GSTTaxReports 400',404,'OutputSaleTax','Output Tax Summary',1
GO
DELETE FROM RptHeader WHERE RptId=404
INSERT INTO RptHeader(GrpCode,RptCaption,RptId,RpCaption,SPName,TblName,RptName,UserIds)
SELECT 'OutputSale Tax','Output Tax Summary',404,'Output Tax Summary','Proc_RptOutputSaleTaxGST','RptOutputSaleTaxGST','RptOutputSaleTaxGST.rpt',0
GO
DELETE FROM RptDetails WHERE RptId=403
INSERT INTO RptDetails(RptId,[SlNo],[TblName],[PrntId],[PrntRefFld],[FldName],[FldCaption],[PrntTbl],[CtrlType],[CmnFld],[SelcId],[SingleMulti],[Mandatory],[PnlMsg],[CaptionChange]) VALUES (403,1,'FromDate',-1,'','','From Date*','',1,'',10,0,0,'Enter From Date',0)
INSERT INTO RptDetails(RptId,[SlNo],[TblName],[PrntId],[PrntRefFld],[FldName],[FldCaption],[PrntTbl],[CtrlType],[CmnFld],[SelcId],[SingleMulti],[Mandatory],[PnlMsg],[CaptionChange]) VALUES (403,2,'ToDate',-1,'','','To Date*','',1,'',11,0,0,'Enter To Date',0)
INSERT INTO RptDetails(RptId,[SlNo],[TblName],[PrntId],[PrntRefFld],[FldName],[FldCaption],[PrntTbl],[CtrlType],[CmnFld],[SelcId],[SingleMulti],[Mandatory],[PnlMsg],[CaptionChange]) VALUES (403,3,'Company',-1,'','CmpId,CmpCode,CmpName','Company...','',1,'',4,1,0,'Press F4/Double Click to select Company',0)
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='U' AND NAME='RptSalesReturnCNTaxGST')
DROP TABLE RptSalesReturnCNTaxGST
GO
CREATE TABLE RptSalesReturnCNTaxGST
(
Slno BIGINT IDENTITY(1,1),
[RetailerCode] Varchar(75),
[RetailerName] Varchar(150),
[RtrGSTIN] Varchar(20),
RtrStateCode Varchar(20),
RtrStateName Varchar(150),
RtrShipAdd Varchar(150),
RtrShipAdd1 Varchar(150),
[IOTaxType] [varchar](100) NULL,
[Product Code] Varchar(75),	
[Product Name] Varchar(150),
[Item HSN/ SAC] [varchar](100) NULL,
[InvQty] [int] NULL,
[SR Number] [varchar](100) NULL,
[SRDate] DateTime,
[Original Inv] [varchar](100) NULL,
[OriginalDate] DateTime,
[CN Number] [varchar](100) NULL,
[CNDate] DateTime,
[TaxableAmount] [numeric](38, 6) NULL,
LineNetAmount [numeric](38, 6) NULL,
[ReverseCharge] Numeric(36,6),
[UPC] INT,
[Group Name]  Varchar(200),
[GroupType] INT,
[UsrId] [int] NULL
)
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='P' AND NAME='Proc_RptSalesReturnCNTaxGST')
DROP PROCEDURE Proc_RptSalesReturnCNTaxGST
GO
/*
Begin tran
EXEC Proc_RptSalesReturnCNTaxGST 403,2,0,'Gjnj',0,0,1
Select * from RptSalesReturnCNTaxGST
Rollback tran 
*/
CREATE  PROCEDURE [dbo].[Proc_RptSalesReturnCNTaxGST]
(
	@Pi_RptId			INT,
	@Pi_UsrId			INT,
	@Pi_SnapId			INT,
	@Pi_DbName			nvarchar(50),
	@Pi_SnapRequired	INT,
	@Pi_GetFromSnap		INT,
	@Pi_CurrencyId		INT
)
AS
/*********************************
* PROCEDURE	: Proc_RptProductWiseSalesTaxGST
* PURPOSE	: To get the Tax details
* CREATED	: Mohanakrishna A.B
* CREATED DATE	: 12/05/2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
BEGIN
SET NOCOUNT ON
--Filter Variable
	DECLARE @FromDate		AS	DATETIME
	DECLARE @ToDate			AS	DATETIME
	DECLARE @CmpId	        AS	INT
	DECLARE @ErrNo	 	AS	INT

	DECLARE @SQL as Varchar(MAX)
	DECLARE @MaxId as INT
	DECLARE @ReportId as INT
	DECLARE @start INT, @end INT 
	DECLARE @Str AS VARCHAR(100)
	DECLARE @CreateTable AS VARCHAR(7000)

		
	SET @ErrNo=0
	SELECT @FromDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,10,@Pi_UsrId)
	SELECT @ToDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,11,@Pi_UsrId)
	SET @CmpId = (SElect  TOP 1 iCountid FRom Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId))

	
	IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='U' AND NAME='RptSalesReturnCNTaxGST')
	BEGIN
		DELETE FROM RptSalesReturnCNTaxGST WHERE UsrId=@Pi_UsrId
	END
	
	
	
		CREATE TABLE #TmpRptIOTaxSummary
		(
			[RetailerCode] Varchar(75),
			[RetailerName] Varchar(150),
			[RtrGSTIN] Varchar(150),
			RtrStateCode Varchar(20),
			RtrStateName Varchar(150),
			RtrShipAdd Varchar(150),
			RtrShipAdd1 Varchar(150),
			[IOTaxType] [varchar](100) NULL,
			[Product Code] Varchar(75),	
			[Product Name] Varchar(150),
			[Item HSN/ SAC] [varchar](100) NULL,
			[InvQty] [int] NULL,
			[SRid] [Int],
			[SR Number] [varchar](100) NULL,
			[SRDate] DateTime,
			[Salid] [int],
			[Original Inv] [varchar](100) NULL,
			[OriginalDate] DateTime,
			[CN Number] [varchar](100) NULL,
			[CNDate] DateTime,
			[RtrId] [int] NULL,
			[Prdid] [int] NULL,
			[CmpId] [int] NULL,
			[TaxPerc] [varchar](50) NULL,
			[TaxFlag] [int] NULL,
			[TaxPercent] [numeric](38, 6) NULL,
			[TaxId] [int] NULL,	
			[TaxableAmount] [numeric](38, 6) NULL,
			LineNetAmount [numeric](38, 6) NULL,
			[ReverseCharge] Numeric(36,6),
			[UPC] INT,
			[Group Name]  Varchar(200),
			[GroupType] INT,
			[UsrId] [int] NULL
			)
			
		SELECT Prdid,Max(ConversionFactor) as UPC 
		INTO #UOM
		FROM Product P (NOLOCK) INNER JOIN Uomgroup UG (NOLOCK) ON P.UomGroupId=UG.UomGroupId
		GROUP BY Prdid
		
		INSERT INTO #TmpRptIOTaxSummary
			(
			[RetailerCode],[RetailerName],[RtrGSTIN],RtrStateCode,RtrStateName,RtrShipAdd,RtrShipAdd1,[IOTaxType],[Product Code],[Product Name],
			[Item HSN/ SAC],[InvQty],[SRid],[SR Number],[SRDate],[Salid],
			[Original Inv],[OriginalDate],[CN Number],[CNDate],[RtrId],[Prdid],[CmpId],
			[TaxPerc],[TaxFlag],[TaxPercent],[TaxId],[TaxableAmount],LineNetAmount,[ReverseCharge],[UPC],[Group Name] ,
			[GroupType],[UsrId]
			) 
		Select
		RtrCode,RtrName,'' AS RtrGSTIN,'' as RtrStateCode,'' as RtrStateName,'' as RtrShipAdd,'' as RtrShipAdd1,'SalesReturn' as IOTaxType,PrdCCode,PrdName,
		'' As [Item HSN/ SAC],SUM(RP.BaseQty) AS InvQty,RH.Returnid As [SRid],RH.ReturnCode AS [SR Number],Rh.ReturnDate,RH.SalId AS [Salid],
		SI.SalinvNo AS [Original Inv],SI.SalInvDate AS [OriginalDate],CN.CNRRefNo AS [CN Number],CN.CNRDate  AS [CNDate],R.RtrId AS RtrId,P.PrdId as Prdid,C.CmpId AS CmpId,
		TC.TaxCode +' Rate' as TaxPerc,0 as TaxFlag,TaxPerc as TaxPercent,RPT.TaxId,SUM(TaxableAmt) as TaxableAmount,SUM(PrdNetAmt) as [LineNetAmount],	
		ReverseCharges as [ReverseCharge],[UPC],
		'' as [Group Name] ,2 as [GroupType],@Pi_UsrId AS UserId 
		From ReturnHeader RH WITH (NOLOCK)  
		INNER JOIN ReturnProduct RP WITH (NOLOCK) ON RH.ReturnId = RP.ReturnId ---AND RP.LineType=1  
		INNER JOIN ReturnProductTax RPT WITH (NOLOCK) ON RPT.ReturnId = RH.ReturnId AND RPT.ReturnId = RP.ReturnId AND RP.SlNo=RPT.PrdSlNo  
		INNER JOIN TaxConfiguration TC (NOLOCK) ON TC.TaxId =RPT.TaxId 
		INNER JOIN Product P WITH (NOLOCK) ON P.PrdId = RP.PrdId  
		INNER JOIN #UOM U ON U.PrdId=RP.PrdId and U.PrdId=P.PrdId  
		INNER JOIN ProductBatch PB WITH (NOLOCK) ON PB.PrdId = RP.PrdId AND PB.PrdBatId = RP.PrdBatId AND PB.PrdId = P.PrdId  
		INNER JOIN Retailer R WITH (NOLOCK) ON R.RtrId = RH.RtrId  
		LEFT OUTER JOIN SalesInvoice SI WITH (NOLOCK) ON SI.SalId=RH.SalId --ABM
		INNER JOIN CreditNoteReplacementHD CN WITH (NOLOCK) ON CN.SRNO =RH.ReturnCode
		LEFT OUTER JOIN Company C ON C.CmpId = P.CmpId   
		WHERE RH.Status = 0  and RH.ReturnDate  Between @FromDate and @ToDate 
		AND (C.CmpId = (CASE @CmpId WHEN 0 THEN C.CmpId ELSE 0 END) OR
		C.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId)))
		GROUP BY TaxPerc,RH.ReturnDate,RH.SalId,SI.SalinvNo,SI.SalInvDate,CN.CNRRefNo,CN.CNRDate,
		P.PrdId,RH.ReturnId,RH.ReturnCode,R.RtrId,RPT.TaxId,RtrName,
		RtrCode,PrdName,PrdCCode ,RPT.TaxId ,C.CmpId,TC.TaxCode,[UPC],ReverseCharges
		HAVING Sum(TaxableAmt) > 0  
		
		INSERT INTO #TmpRptIOTaxSummary
		(
			[RetailerCode],[RetailerName],[RtrGSTIN],RtrStateCode,RtrStateName,RtrShipAdd,RtrShipAdd1,[IOTaxType],[Product Code],[Product Name],
			[Item HSN/ SAC],[InvQty],[SRid],[SR Number],[SRDate],[Salid],
			[Original Inv],[OriginalDate],[CN Number],[CNDate],[RtrId],[Prdid],[CmpId],
			[TaxPerc],[TaxFlag],[TaxPercent],[TaxId],[TaxableAmount],LineNetAmount,[ReverseCharge],[UPC],[Group Name] ,
			[GroupType],[UsrId]
		) 
		
		Select
		RtrCode,RtrName,'' AS RtrGSTIN,'' as RtrStateCode,'' as RtrStateName,'' as RtrShipAdd,'' as RtrShipAdd1,'SalesReturn' as IOTaxType,PrdCCode,PrdName,
		'' As [Item HSN/ SAC],SUM(RP.BaseQty) AS InvQty,RH.Returnid As [SRid],RH.ReturnCode AS [SR Number],Rh.ReturnDate,RH.SalId AS [Salid],
		SI.SalinvNo AS [Original Inv],SI.SalInvDate AS [OriginalDate],CN.CNRRefNo AS [CN Number],CN.CNRDate  AS [CNDate],R.RtrId AS RtrId,P.PrdId as Prdid,C.CmpId AS CmpId,
		TC.TaxCode +' Value' as TaxPerc,1 as TaxFlag,SUM(RPT.TaxAmt) as TaxPercent,RPT.TaxId,SUM(TaxableAmt) as TaxableAmount,SUM(PrdNetAmt) as [LineNetAmount],
		ReverseCharges as [ReverseCharge],[UPC],	
		'' as [Group Name] ,2 as [GroupType],@Pi_UsrId AS UserId 
		From ReturnHeader RH WITH (NOLOCK)  
		INNER JOIN ReturnProduct RP WITH (NOLOCK) ON RH.ReturnId = RP.ReturnId ---AND RP.LineType=1  
		INNER JOIN ReturnProductTax RPT WITH (NOLOCK) ON RPT.ReturnId = RH.ReturnId AND RPT.ReturnId = RP.ReturnId AND RP.SlNo=RPT.PrdSlNo  
		INNER JOIN TaxConfiguration TC (NOLOCK) ON TC.TaxId =RPT.TaxId 
		INNER JOIN Product P WITH (NOLOCK) ON P.PrdId = RP.PrdId  
		INNER JOIN #UOM U ON U.PrdId=RP.PrdId and U.PrdId=P.PrdId    
		INNER JOIN ProductBatch PB WITH (NOLOCK) ON PB.PrdId = RP.PrdId AND PB.PrdBatId = RP.PrdBatId AND PB.PrdId = P.PrdId  
		INNER JOIN Retailer R WITH (NOLOCK) ON R.RtrId = RH.RtrId  
		LEFT OUTER JOIN SalesInvoice SI WITH (NOLOCK) ON SI.SalId=RH.SalId 
		INNER JOIN CreditNoteReplacementHD CN WITH (NOLOCK) ON CN.SRNO =RH.ReturnCode
		LEFT OUTER JOIN Company C ON C.CmpId = P.CmpId   
		WHERE RH.Status = 0  and RH.ReturnDate  Between @FromDate and @ToDate 
		AND (C.CmpId = (CASE @CmpId WHEN 0 THEN C.CmpId ELSE 0 END) OR
		C.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId)))
		GROUP BY TaxPerc,RH.ReturnDate,RH.SalId,SI.SalinvNo,SI.SalInvDate,CN.CNRRefNo,CN.CNRDate,
		P.PrdId,RH.ReturnId,RH.ReturnCode,R.RtrId,RPT.TaxId,RtrName,
		RtrCode,PrdName,PrdCCode ,RPT.TaxId ,C.CmpId,TC.TaxCode,[UPC],ReverseCharges
		HAVING Sum(TaxableAmt) > 0
		

		
		
		INSERT INTO #TmpRptIOTaxSummary
		(
			[RetailerCode],[RetailerName],[RtrGSTIN],RtrStateCode,RtrStateName,RtrShipAdd,RtrShipAdd1,[IOTaxType],[Product Code],[Product Name],
			[Item HSN/ SAC],[InvQty],[SRid],[SR Number],[SRDate],[Salid],
			[Original Inv],[OriginalDate],[CN Number],[CNDate],[RtrId],[Prdid],[CmpId],
			[TaxPerc],[TaxFlag],[TaxPercent],[TaxId],[TaxableAmount],LineNetAmount,[ReverseCharge],[UPC],[Group Name] ,
			[GroupType],[UsrId]
		) 
		SELECT '' as [RetailerCode],'' as [RetailerName],'' AS RtrGSTIN,'' as RtrStateCode,'' as RtrStateName,'' as RtrShipAdd,'' as RtrShipAdd1,'' as IOTaxType,
		'' as [Product Code],'' as [Product Name],'' As [Item HSN/ SAC],'' AS InvQty,'' As [SRid],'' AS [SR Number],'' AS  SRDate,'' AS [Salid],
		'' AS [Original Inv],'' AS [OriginalDate],'' AS [CN Number],''  AS [CNDate],'' AS RtrId,'' as Prdid,'' AS CmpId,
		[TaxPerc],100 as TaxFlag,SUM(TaxPercent) AS TaxPercent,0 as TaxId,0 as TaxableAmount,0 as [LineNetAmount],
		0 as [ReverseCharge],0 as [UPC]	,
		'ZZZZZZ' as [Group Name] ,3 as [GroupType],[UsrId] 
		From #TmpRptIOTaxSummary WHERE TaxFlag=1		
		GROUP BY [UsrId],[TaxPerc]
		
		
		

		SELECT StateCode,StateName,TinFirst2Digit,MasterRecordId
		INTO #RetailerState 
		FROM UDCHD A (NOLOCK)
		INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId
		INNER JOIN UdcDetails C (NOLOCK) ON B.MasterId=C.MasterId
		and B.UdcMasterId=C.UdcMasterId
		INNER JOIN UdcDefault D (NOLOCK) ON D.MasterId=C.MasterId and D.MasterId=B.MasterId
		and D.UdcMasterId=C.UdcMasterId and D.UdcMasterId=B.UdcMasterId
		INNER JOIN StateMaster E (NOLOCK) ON E.StateName=D.ColValue and E.StateName=C.ColumnValue
		WHERE MasterName='Retailer Master' and ColumnName='State Name'

		Update B SET  B.[RtrGSTIN]=R.[ColumnValue] FROM #TmpRptIOTaxSummary B 
		INNER JOIN (SELECT R.RtrId,R.rtrcode,U.ColumnValue from UdcDetails u INNER JOIN UdcMaster US ON u.UdcMasterId=US.UdcMasterId
							INNER JOIN retailer R on R.RtrId=U.MasterRecordId  where US.MasterId=2   and ColumnName='GSTIN' ) 
							R ON B.[RetailerCode]=R.[rtrcode]
							
							
	

		UPDATE A  SET A.RtrStateCode=B.StateCode ,A.RtrStateName=B.StateName 
		FROM #TmpRptIOTaxSummary A 
		INNER JOIN  #RetailerState  B  ON A.RtrId=B.MasterRecordId
		
		UPDATE A  SET A.RtrShipAdd=B.RtrShipAdd1 ,A.RtrShipAdd1=B.RtrShipAdd2 
		FROM #TmpRptIOTaxSummary A 
		INNER JOIN  RetailerShipAdd  B  ON A.RtrId=B.RtrId --and A.RtrShipId=B.RtrShipId
		
		UPDATE A  SET A.RtrShipAdd=RS.RtrShipAdd1 ,A.RtrShipAdd1=RS.RtrShipAdd2 
		FROM #TmpRptIOTaxSummary A 
		INNER JOIN  ReturnHeader B ON A.[SRid]=B.ReturnID
		INNER JOIN SalesInvoice S ON S.SalId=B.SalId
		INNER JOIN RetailerShipAdd RS ON RS.RtrId=S.RtrId and RS.RtrShipId=S.RtrShipId
		WHERE IOTaxType='SalesReturn'

		
		IF NOT EXISTS(SELECT 'X' FROM #TmpRptIOTaxSummary)
		BEGIN
			DELETE FROM RptDataCount WHERE RptId = @Pi_RptId AND UserId = @Pi_UsrId
			INSERT INTO RptDataCount (RptId,RecCount,ErrNo,UserId)
			SELECT @Pi_RptId,Count(*) as RecCount,@ErrNo,@Pi_UsrId FROM RptSalesReturnCNTaxGST
			WHERE UsrId=@Pi_UsrId
			SELECT * FROM RptSalesReturnCNTaxGST WHERE UsrId=@Pi_UsrId
			RETURN
		END

		
--		--Remove Duplicate [TaxableAmount] and LinelevelNetAmount
		SELECT DISTINCT
			[RetailerCode],[RetailerName],[RtrGSTIN],RtrStateCode,RtrStateName,RtrShipAdd,RtrShipAdd1,[IOTaxType],[Product Code],[Product Name],
			[Item HSN/ SAC],[InvQty],[SRid],[SR Number],[SRDate],[Salid],
			[Original Inv],[OriginalDate],[CN Number],[CNDate],[RtrId],[Prdid],[CmpId],
			[TaxFlag],[TaxableAmount],LineNetAmount,[ReverseCharge],[UPC],[Group Name] ,
			[GroupType],[UsrId]
		INTO #LineLevelGross
		FROM #TmpRptIOTaxSummary WHERE UsrId=@Pi_UsrId and TaxFlag=0
	
		
		
		DECLARE @ColSelect AS Varchar(MAX)
		DECLARE @ColSelectDataType AS Varchar(5000)
		DECLARE @TableCol AS Varchar(2000)
		DECLARE @Columns1 AS Varchar(7000)
		DECLARE @OrderBy AS VARCHAR(2000)
		DECLARE @PCSelect AS VARCHAR(3000)
		SET @PCSelect=''
		SET @ColSelect=''
		SET @ColSelectDataType=''
		SET @TableCol=''
		SET @Columns1=''
		SET @CreateTable=''
		SET @OrderBy=''
		
		CREATE TABLE #DynamicCol
		(
			Slno INT IDENTITY(1,1),
			Taxperc	Varchar(50),
			TaxId INT
		)
		INSERT INTO #DynamicCol(Taxperc,TaxId)
		SELECT DISTINCT Taxperc,TaxId FROM #TmpRptIOTaxSummary WHERE TaxFlag IN(0,1) and GroupType=2
		ORDER BY TaxId

		SELECT @ColSelect=@ColSelect+'ISNULL('+QuoteName(Taxperc)+',0) as '+QuoteName(Taxperc)+',' FROM #DynamicCol ORDER BY Slno

		SELECT @PCSelect=@PCSelect+Quotename(Taxperc)+',' FROM #DynamicCol ORDER BY Slno

		SET @PCSelect=LEFT(@PCSelect,LEN(@PCSelect)-1)

		SELECT @ColSelectDataType=@ColSelectDataType+QuoteName(Taxperc)+' Numeric(36,2),' FROM #DynamicCol ORDER BY Slno
		
	
		
		SET @ColSelect='SELECT [RetailerCode],[RetailerName],[RtrGSTIN],RtrStateCode,RtrStateName,RtrShipAdd,RtrShipAdd1,[IOTaxType],[Product Code],[Product Name],'+
			'[Item HSN/ SAC],[UPC],[InvQty],[SR Number],[SRDate],[Original Inv],[OriginalDate],[CN Number],[CNDate],[TaxableAmount],'+@ColSelect+'LineNetAmount,[ReverseCharge],[Group Name],[GroupType],[UsrId]'


	   	SET @TableCol= 'SLNO BIGINT IDENTITY(1,1),[RetailerCode] Varchar(75),[RetailerName] Varchar(150),[RtrGSTIN] Varchar(150),RtrStateCode Varchar(20),RtrStateName Varchar(150),'+
			'RtrShipAdd Varchar(150),RtrShipAdd1 Varchar(150),[IOTaxType] [varchar](100) NULL,[Product Code] Varchar(75),[Product Name] Varchar(150),[Item HSN/ SAC] [varchar](100) NULL,'+
			'[UPC] INT,[InvQty] [int] NULL,[SR Number] [varchar](100) NULL,[SRDate] DateTime,[Original Inv] [varchar](100) NULL,[OriginalDate] DateTime,[CN Number] [varchar](100) NULL,'+
			'[CNDate] DateTime,[TaxableAmount] [numeric](38, 6) NULL,'
		
		SET @Columns1='SELECT [RetailerCode],[RetailerName],[RtrGSTIN],RtrStateCode ,RtrStateName ,RtrShipAdd ,'+
			'RtrShipAdd1,[IOTaxType],[Product Code],[Product Name] ,[Item HSN/ SAC],'+
			'[UPC],[InvQty],[SR Number],[SRDate],[Original Inv] ,[OriginalDate],[CN Number],'+
			'[CNDate] ,[TaxableAmount],LineNetAmount,[ReverseCharge],TaxPercent ,Taxperc,[Group Name],[GroupType],[UsrId] FROM #TmpRptIOTaxSummary'
			
		SET @OrderBy=' ORDER BY [Group Name],[GroupType],IOTaxType,RetailerName,[Product Name]'

		SET @CreateTable=' IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME=''RptSalesReturnCNTaxGST'' and XTYPE=''U'')'+
		' DROP TABLE RptSalesReturnCNTaxGST'+
		' CREATE TABLE RptSalesReturnCNTaxGST ('+@TableCol+@ColSelectDataType+' LineNetAmount Numeric(36,2),ReverseCharge Numeric(36,2), [Group Name] Varchar(100),Grouptype TINYINT,UsrId INT)'

		--Select  * from #TmpRptIOTaxSummary
		--Print  @CreateTable

		EXEC(@CreateTable)




		SET @SQL=' INSERT INTO RptSalesReturnCNTaxGST '+ @ColSelect+ ' FROM'+
		'('+@Columns1+
		') PS'+
		' PIVOT'+
		'('+
			' SUM(TaxPercent) FOR Taxperc IN('+@PCSelect+')'+
		')PVTTax '+ @OrderBy

		---PRINT @SQL
		EXEC(@SQL)
		----GRAND TOTAL UPDATE
		SELECT 'ZZZZZZ' as [Group Name], 3 as GroupType ,SUM([InvQty]) as [InvQty],SUM(LineNetAmount) as LineNetAmount,SUM(TaxableAmount) as TaxableAmount,
		SUM(ReverseCharge) as ReverseCharge
		INTO #GrandTotal
		FROM #LineLevelGross WHERE TaxFlag=0 and [UsrId]=@Pi_UsrId

		UPDATE Y SET  
		Y.[InvQty]=X.[InvQty] ,Y.LineNetAmount=X.[LineNetAmount],Y.[TaxableAmount]=X.TaxableAmount,
		Y.ReverseCharge=X.ReverseCharge 
		FROM RptSalesReturnCNTaxGST Y INNER JOIN #GrandTotal X ON X.[Group Name]=Y.[Group Name]
		AND X.GroupType=Y.GroupType WHERE Y.[UsrId]=@Pi_UsrId
		---TILL HERE


			DELETE FROM Report_Template_GST WHERE ReportId=1 and RptId=@Pi_RptId
			INSERT INTO Report_Template_GST(ReportId,RptId,RptName ,ColId,FieldName,FieldSize,FieldSelection,GroupField,
			FieldType,Alignment,HeaderCaption,HeaderCaption1,HeaderCaption2,
			RoundOff,CreatedDate)
			SELECT 1,403,'Sales Return Product Tax',1,'RetailerCode',50,1,0,1,1,'Retailer','Code','',0,GETDATE()
			UNION ALL
			SELECT 1,403,'Sales Return Product Tax',2,'RetailerName',50,1,0,1,1,'Retailer','Name','',0,GETDATE()
			UNION ALL
			SELECT 1,403,'Sales Return Product Tax',3,'RtrGSTIN',50,1,0,1,1,'Retailer','GSTIN','',0,GETDATE()
			UNION ALL
			SELECT 1,403,'Sales Return Product Tax',4,'RtrStateCode',20,1,0,1,1,'Retailer','State','Code',0,GETDATE()
			UNION ALL
			SELECT 1,403,'Sales Return Product Tax',5,'RtrStateName',50,1,0,1,1,'Retailer','State','Name',0,GETDATE()
			UNION ALL
			SELECT 1,403,'Sales Return Product Tax',6,'RtrShipAdd',75,1,0,1,1,'Retailer','Shipping','Address',0,GETDATE()
			UNION ALL
			SELECT 1,403,'Sales Return Product Tax',7,'RtrShipAdd1',75,1,0,1,1,'Retailer','Shipping','Address2',0,GETDATE()
			UNION ALL
			SELECT 1,403,'Sales Return Product Tax',8,'IOTaxType',75,1,0,1,1,'Sales/','Return','',0,GETDATE()
			UNION ALL
			SELECT 1,403,'Sales Return Product Tax',9,'Product Code',75,1,0,1,1,'Product Code','','',0,GETDATE()
			UNION ALL
			SELECT 1,403,'Sales Return Product Tax',10,'Product Name',75,1,0,1,1,'Product Name','','',0,GETDATE()
			UNION ALL
			SELECT 1,403,'Sales Return Product Tax',11,'[Item HSN/ SAC]',75,1,0,1,1,'HSN Code','','',0,GETDATE()
			UNION ALL
			SELECT 1,403,'Sales Return Product Tax',12,'UPC',20,1,0,2,2,'UPC','','',0,GETDATE()
			UNION ALL
			SELECT 1,403,'Sales Return Product Tax',13,'InvQty',75,1,0,2,2,'Total','Quantity','',0,GETDATE()
			UNION ALL
			SELECT 1,403,'Sales Return Product Tax',14,'SR Number',75,1,0,1,1,'SalesReturn','Number','',0,GETDATE()
			UNION ALL
			SELECT 1,403,'Sales Return Product Tax',15,'SRDate',75,1,0,1,4,'SalesReturn','Date','',0,GETDATE()
			UNION ALL
			SELECT 1,403,'Sales Return Product Tax',16,'Original Inv',75,1,0,1,1,'Sales','Number','',0,GETDATE()
			UNION ALL
			SELECT 1,403,'Sales Return Product Tax',17,'OriginalDate',75,1,0,1,4,'Sales','Date','',0,GETDATE()
			UNION ALL
			SELECT 1,403,'Sales Return Product Tax',18,'CN Number',75,1,0,1,1,'CreditNote','Number','',0,GETDATE()
			UNION ALL
			SELECT 1,403,'Sales Return Product Tax',19,'CNDate',75,1,0,1,4,'CreditNote','Date','',0,GETDATE()
			UNION ALL
			SELECT 1,403,'Sales Return Product Tax',20,'TaxableAmount',20,1,0,2,3,'Taxable','Amount','',2,GETDATE()

			SET @Str=''
			SELECT @MaxId=MAX(ColId)+1,@ReportId=ReportId FROM  Report_Template_GST (NOLOCK) WHERE RptId=@Pi_RptId
			GROUP BY ReportId

			SELECT @start = 1, @end = CHARINDEX(',', @PCSelect) 
			WHILE @start < LEN(@PCSelect) + 1 BEGIN 
				IF @end = 0  
				SET @end = LEN(@PCSelect) + 1
				SET @Str=SUBSTRING(@PCSelect, @start, @end - @start)
				INSERT INTO Report_Template_GST(ReportId,RptId,RptName,ColId,FieldName,FieldSize,
				FieldSelection,GroupField,FieldType,Alignment,HeaderCaption,HeaderCaption1,HeaderCaption2,RoundOff,
				CreatedDate)  
				SELECT TOP 1 ReportId,RptId,RptName,@MaxId,SUBSTRING(@PCSelect, @start, @end - @start),
				18,1,0,2,3,SUBSTRING(@PCSelect, @start, @end - @start)				
				,'','',2,Getdate()
				FROM Report_Template_GST WHERE RptId=@Pi_RptId
				
				SET @start = @end + 1 
				SET @end = CHARINDEX(',', @PCSelect, @start)
				SET @MaxId=@MaxId+1
			END 
			
			
			INSERT INTO Report_Template_GST(ReportId,RptId,RptName,ColId,FieldName,FieldSize,
			FieldSelection,GroupField,FieldType,Alignment,HeaderCaption,HeaderCaption1,HeaderCaption2,RoundOff,
			CreatedDate)  
			SELECT TOP 1 ReportId,RptId,RptName,@MaxId+1,'LineNetAmount',
			18,1,0,2,3,'Product','Level','NetAmount',2,Getdate()
			FROM Report_Template_GST WHERE RptId=@Pi_RptId	

			INSERT INTO Report_Template_GST(ReportId,RptId,RptName,ColId,FieldName,FieldSize,
			FieldSelection,GroupField,FieldType,Alignment,HeaderCaption,HeaderCaption1,HeaderCaption2,RoundOff,
			CreatedDate)  
			SELECT TOP 1 ReportId,RptId,RptName,@MaxId+2,'ReverseCharge',
			18,1,0,2,3,'Reverse','Charge','',2,Getdate()
			FROM Report_Template_GST WHERE RptId=@Pi_RptId	
			
			UPDATE Report_template_GST SET FieldName=REPLACE(REPLACE(FieldName,']',''),'[','')
			WHERE RptId=@Pi_RptId 


	
			DELETE FROM RptDataCount WHERE RptId = @Pi_RptId AND UserId = @Pi_UsrId
			INSERT INTO RptDataCount (RptId,RecCount,ErrNo,UserId)
			SELECT @Pi_RptId,Count(*) as RecCount,@ErrNo,@Pi_UsrId FROM RptSalesReturnCNTaxGST
			WHERE UsrId=@Pi_UsrId
			SELECT * FROM RptSalesReturnCNTaxGST WHERE UsrId=@Pi_UsrId
						

END
GO
DELETE FROM RptGroup WHERE RptId=404
INSERT INTO RptGroup(PId,RptId,GrpCode,GrpName,Visibility)
SELECT 'GSTTaxReports 400',404,'OutputSaleTax','Output Sale Tax',1
GO
DELETE FROM RptHeader WHERE RptId=404
INSERT INTO RptHeader(GrpCode,RptCaption,RptId,RpCaption,SPName,TblName,RptName,UserIds)
SELECT 'OutputSale Tax','Output Sale Tax',404,'Output Sale Tax','Proc_RptOutputSaleTaxGST','RptOutputSaleTaxGST','RptOutputSaleTaxGST.rpt',0
GO
DELETE FROM RptDetails WHERE RptId=404
INSERT INTO RptDetails(RptId,[SlNo],[TblName],[PrntId],[PrntRefFld],[FldName],[FldCaption],[PrntTbl],[CtrlType],[CmnFld],[SelcId],[SingleMulti],[Mandatory],[PnlMsg],[CaptionChange]) VALUES (404,1,'FromDate',-1,'','','From Date*','',1,'',10,0,0,'Enter From Date',0)
INSERT INTO RptDetails(RptId,[SlNo],[TblName],[PrntId],[PrntRefFld],[FldName],[FldCaption],[PrntTbl],[CtrlType],[CmnFld],[SelcId],[SingleMulti],[Mandatory],[PnlMsg],[CaptionChange]) VALUES (404,2,'ToDate',-1,'','','To Date*','',1,'',11,0,0,'Enter To Date',0)
INSERT INTO RptDetails(RptId,[SlNo],[TblName],[PrntId],[PrntRefFld],[FldName],[FldCaption],[PrntTbl],[CtrlType],[CmnFld],[SelcId],[SingleMulti],[Mandatory],[PnlMsg],[CaptionChange]) VALUES (404,3,'Company',-1,'','CmpId,CmpCode,CmpName','Company...','',1,'',4,1,0,'Press F4/Double Click to select Company',0)
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RptOutputSaleTaxGST]') AND type in (N'U'))
DROP TABLE [dbo].[RptOutputSaleTaxGST]
GO
CREATE TABLE [dbo].[RptOutputSaleTaxGST](
	[SLNO] [bigint] IDENTITY(1,1) NOT NULL,
	[IOTaxType] [varchar](100) NULL,
	[InvDate] [datetime] NULL,
	[RefNo] [varchar](100) NULL,
	[TaxableAmount] [numeric](38, 6) NULL,
	[LineNetAmount] [numeric](36, 2) NULL,
	[Group Name] [varchar](100) NULL,
	[Grouptype] [tinyint] NULL,
	[UsrId] [int] NULL
) ON [PRIMARY]
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='P' AND NAME='Proc_RptOutputSaleTaxGST')
DROP PROCEDURE  Proc_RptOutputSaleTaxGST
GO
/*
BEGIN tran
EXEC Proc_RptOutputSaleTaxGST 404,2,0,'GSTTAX',0,0,1
Select * from RptOutputSaleTaxGST

ROLLBACK tran 
*/
Create PROCEDURE Proc_RptOutputSaleTaxGST
(
	@Pi_RptId			INT,
	@Pi_UsrId			INT,
	@Pi_SnapId			INT,
	@Pi_DbName			nvarchar(50),
	@Pi_SnapRequired	INT,
	@Pi_GetFromSnap		INT,
	@Pi_CurrencyId		INT
)
AS
/*********************************
* PROCEDURE	: RptOutputSaleTaxGST
* PURPOSE	: To get the Tax details
* CREATED	: Mohanakrishna A.B
* CREATED DATE	: 12/05/2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
BEGIN
SET NOCOUNT ON

	--Filter Variable
	DECLARE @FromDate		AS	DATETIME
	DECLARE @ToDate			AS	DATETIME
	DECLARE @CmpId	        AS	INT
	DECLARE @ErrNo	 	AS	INT
		

	DECLARE @SQL as Varchar(MAX)
	DECLARE @MaxId as INT
	DECLARE @ReportId as INT
	DECLARE @start INT, @end INT 
	DECLARE @Str AS VARCHAR(100)
	DECLARE @CreateTable AS VARCHAR(7000)

		
	SET @ErrNo=0
	SELECT @FromDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,10,@Pi_UsrId)
	SELECT @ToDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,11,@Pi_UsrId)
	SET @CmpId = (SElect  TOP 1 iCountid FRom Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId))
	
	
	IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='U' AND NAME='RptOutputSaleTaxGST')
	BEGIN
		DELETE FROM RptOutputSaleTaxGST WHERE UsrId=@Pi_UsrId
	END
	
		CREATE TABLE #TmpRptIOTaxSummary
		(
			[IOTaxType] [varchar](100) NULL,
			[InvId] [bigint] NULL,
			[InvDate] DateTime,
			[RefNo] [varchar](100) NULL,
			[TaxableAmount] [numeric](38, 6) NULL,
			LineNetAmount [numeric](38, 6) NULL,
			[Group Name]  Varchar(200),
			[GroupType] INT,
			[UsrId] [int] NULL,
			[CmpId] [int] NULL,
			[TaxPerc] [varchar](50) NULL,
			[TaxFlag] [int] NULL,
			[TaxPercent] [numeric](38, 6) NULL,
			[TaxId] [int] NULL
		)
		
		INSERT INTO #TmpRptIOTaxSummary([InvDate],[InvId],[RefNo],[CmpId],[TaxPerc],[TaxableAmount],[IOTaxType] ,
		[TaxFlag],[TaxPercent],[TaxId],LineNetAmount,[Group Name],[GroupType],[UsrId])
		SELECT SI.SalInvDate,SI.SalId AS InvId,SI.SalInvNo AS RefNo,C.CmpId AS CmpId,TC.TaxCode as TaxPerc,
		SUM(TaxableAmount) as TaxableAmount,'Sale of Goods' as IOTaxType,1 as TaxFlag,sum(SPT.TaxAmount) as TaxPercent,SPT.TaxId,
		SUM(PrdNetAmount) as [LineNetAmount],'' as [Group Name] ,2 as [GroupType],@Pi_UsrId AS UserId  
		FROM 
		SalesInvoice SI WITH (NOLOCK)  
		INNER JOIN SalesInvoiceProduct SIP WITH (NOLOCK) ON SI.SalId = SIP.SalId  
		INNER JOIN SalesInvoiceProductTax SPT WITH (NOLOCK) ON SPT.SalId = SIP.SalId AND SPT.SalId = SI.SalId AND SIP.SlNo=SPT.PrdSlNo  
		INNER JOIN Product P WITH (NOLOCK) ON P.PrdId = SIP.PrdId    
		INNER JOIN TaxConfiguration TC (NOLOCK) ON TC.TaxId =SPT.TaxId    
		LEFT OUTER JOIN Company C ON C.CmpId = P.CmpId   
		WHERE SI.Salinvdate Between  @FromDate and @ToDate and 
		SI.Dlvsts >3  
		AND (C.CmpId = (CASE @CmpId WHEN 0 THEN C.CmpId ELSE 0 END) OR
		C.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId)))
		Group By SI.SalInvDate,C.CmpId,--P.PrdId,
		SI.SalId,SI.SalInvNo,SPT.TaxId ,TC.TaxCode
		HAVING Sum(TaxableAmount) >0  
		
		
			
		INSERT INTO #TmpRptIOTaxSummary([InvDate],[InvId],[RefNo],[CmpId],[TaxPerc],[TaxableAmount],[IOTaxType] ,
		[TaxFlag],[TaxPercent],[TaxId],LineNetAmount,[Group Name],[GroupType],[UsrId])
		SELECT RH.ReturnDate ,RH.ReturnID  AS InvId,RH.ReturnCode AS RefNo,C.CmpId AS CmpId,TC.TaxCode  as TaxPerc,
		-1*SUM(TaxableAmt) as TaxableAmount,'Return of Goods from Retailer' as IOTaxType,1 as TaxFlag,-1*sum(RPT.TaxAmt) as TaxPercent,RPT.TaxId,
		-1*SUM(PrdNetAmt) as [LineNetAmount],'' as [Group Name] ,2 as [GroupType],@Pi_UsrId AS UserId  
		From ReturnHeader RH WITH (NOLOCK)  
		INNER JOIN ReturnProduct RP WITH (NOLOCK) ON RH.ReturnId = RP.ReturnId ---AND RP.LineType=1  
		INNER JOIN ReturnProductTax RPT WITH (NOLOCK) ON RPT.ReturnId = RH.ReturnId AND RPT.ReturnId = RP.ReturnId AND RP.SlNo=RPT.PrdSlNo  
		INNER JOIN TaxConfiguration TC (NOLOCK) ON TC.TaxId =RPT.TaxId 
		INNER JOIN Product P WITH (NOLOCK) ON P.PrdId = RP.PrdId    
		LEFT OUTER JOIN Company C ON C.CmpId = P.CmpId   
		WHERE RH.Status = 0  and RH.ReturnDate  Between @FromDate and @ToDate 
		AND (C.CmpId = (CASE @CmpId WHEN 0 THEN C.CmpId ELSE 0 END) OR
		C.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId)))
		GROUP BY RH.ReturnCode ,RH.ReturnDate,
		RH.ReturnId,RH.ReturnCode,RPT.TaxId,
		RPT.TaxId ,C.CmpId,TC.TaxCode
		HAVING Sum(TaxableAmt) > 0   
		
		INSERT INTO #TmpRptIOTaxSummary([InvDate],[InvId],[RefNo],[CmpId],[TaxPerc],[TaxableAmount],[IOTaxType] ,
		[TaxFlag],[TaxPercent],[TaxId],LineNetAmount,[Group Name],[GroupType],[UsrId])		
		SELECT '' as InvDate,'' as [InvId],'' AS RefNo,'' AS CmpId,
		[TaxPerc],0 as TaxableAmount,'' AS [IOTaxType],100 as TaxFlag,SUM(TaxPercent) AS TaxPercent,0 as TaxId,0 as [LineNetAmount],	
		'ZZZZZZ' as [Group Name] ,3 as [GroupType],[UsrId] 
		From #TmpRptIOTaxSummary WHERE TaxFlag=1		
		GROUP BY [UsrId],[TaxPerc]
		
		
		IF NOT EXISTS(SELECT 'X' FROM #TmpRptIOTaxSummary)
		BEGIN
			DELETE FROM RptDataCount WHERE RptId = @Pi_RptId AND UserId = @Pi_UsrId
			INSERT INTO RptDataCount (RptId,RecCount,ErrNo,UserId)
			SELECT @Pi_RptId,Count(*) as RecCount,@ErrNo,@Pi_UsrId FROM RptProductWiseSalesTaxGST
			WHERE UsrId=@Pi_UsrId
			SELECT * FROM RptOutputSaleTaxGST WHERE UsrId=@Pi_UsrId
			RETURN
		END
		
	
--		--Remove Duplicate [TaxableAmount] and LinelevelNetAmount
		SELECT DISTINCT
		[InvDate],[InvId],[RefNo],[CmpId],
		[TaxableAmount],[IOTaxType],[TaxFlag],LineNetAmount,[UsrId]
		INTO #LineLevelGross
		FROM #TmpRptIOTaxSummary WHERE UsrId=@Pi_UsrId and TaxFlag=1
		
		DECLARE @ColSelect AS Varchar(MAX)
		DECLARE @ColSelectDataType AS Varchar(5000)
		DECLARE @TableCol AS Varchar(2000)
		DECLARE @Columns1 AS Varchar(7000)
		DECLARE @OrderBy AS VARCHAR(2000)
		DECLARE @PCSelect AS VARCHAR(3000)
		SET @PCSelect=''
		SET @ColSelect=''
		SET @ColSelectDataType=''
		SET @TableCol=''
		SET @Columns1=''
		SET @CreateTable=''
		SET @OrderBy=''
		
		CREATE TABLE #DynamicCol
		(
			Slno INT IDENTITY(1,1),
			Taxperc	Varchar(50),
			TaxId INT
		)
		INSERT INTO #DynamicCol(Taxperc,TaxId)
		SELECT DISTINCT Taxperc,TaxId FROM #TmpRptIOTaxSummary WHERE TaxFlag IN(0,1) and GroupType=2
		ORDER BY TaxId
	
	

		SELECT @ColSelect=@ColSelect+'ISNULL('+QuoteName(Taxperc)+',0) as '+QuoteName(Taxperc)+',' FROM #DynamicCol ORDER BY Slno

		SELECT @PCSelect=@PCSelect+Quotename(Taxperc)+',' FROM #DynamicCol ORDER BY Slno

		SET @PCSelect=LEFT(@PCSelect,LEN(@PCSelect)-1)

		SELECT @ColSelectDataType=@ColSelectDataType+QuoteName(Taxperc)+' Numeric(36,2),' FROM #DynamicCol ORDER BY Slno

		SET @ColSelect='SELECT [IOTaxType],[InvDate],[RefNo],[TaxableAmount],'+@ColSelect+'LineNetAmount,[Group Name],[GroupType],[UsrId]'

		SET @TableCol= 'SLNO BIGINT IDENTITY(1,1),[IOTaxType] [varchar](100) NULL,[InvDate] DateTime,[RefNo] [varchar](100) NULL,[TaxableAmount] [numeric](38, 6) NULL,'

		SET @Columns1='SELECT [IOTaxType],[InvDate],[RefNo],[TaxableAmount],LineNetAmount,TaxPercent ,Taxperc,[Group Name],[GroupType],[UsrId] FROM #TmpRptIOTaxSummary'

		SET @OrderBy=' ORDER BY [Group Name],[GroupType],IOTaxType DESC,InvDate,[RefNo]'

		SET @CreateTable=' IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME=''RptOutputSaleTaxGST'' and XTYPE=''U'')'+
		' DROP TABLE RptOutputSaleTaxGST'+
		' CREATE TABLE RptOutputSaleTaxGST ('+@TableCol+@ColSelectDataType+' LineNetAmount Numeric(36,2),[Group Name] Varchar(100),Grouptype TINYINT,UsrId INT)'

		EXEC(@CreateTable)




		SET @SQL=' INSERT INTO RptOutputSaleTaxGST '+ @ColSelect+ ' FROM'+
		'('+@Columns1+
		') PS'+
		' PIVOT'+
		'('+
			' SUM(TaxPercent) FOR Taxperc IN('+@PCSelect+')'+
		')PVTTax '+ @OrderBy

		--PRINT @SQL
		EXEC(@SQL)

		----GRAND TOTAL UPDATE
		SELECT 'ZZZZZZ' as [Group Name], 3 as GroupType ,SUM(LineNetAmount) as LineNetAmount,SUM(TaxableAmount) as TaxableAmount
		INTO #GrandTotal
		FROM #LineLevelGross WHERE TaxFlag=1 and [UsrId]=@Pi_UsrId

		UPDATE Y SET  
		Y.LineNetAmount=X.[LineNetAmount],Y.[TaxableAmount]=X.TaxableAmount 
		FROM RptOutputSaleTaxGST Y INNER JOIN #GrandTotal X ON X.[Group Name]=Y.[Group Name]
		AND X.GroupType=Y.GroupType WHERE Y.[UsrId]=@Pi_UsrId
		---TILL HERE


			DELETE FROM Report_Template_GST WHERE ReportId=1 and RptId=@Pi_RptId
			INSERT INTO Report_Template_GST(ReportId,RptId,RptName ,ColId,FieldName,FieldSize,FieldSelection,GroupField,
			FieldType,Alignment,HeaderCaption,HeaderCaption1,HeaderCaption2,
			RoundOff,CreatedDate)
			
			SELECT 1,404,'Output Tax Summary',1,'IOTaxType',75,1,0,1,1,'Sales','Goods','',0,GETDATE()
			UNION ALL
			SELECT 1,404,'Output Tax Summary',2,'InvDate',75,1,0,1,4,'Invoice','Date','',0,GETDATE()
			UNION ALL
			SELECT 1,404,'Output Tax Summary',3,'RefNo',75,1,0,1,1,'Invoice','Number','',0,GETDATE()
			UNION ALL
			SELECT 1,404,'Output Tax Summary',4,'TaxableAmount',20,1,0,2,3,'Taxable','Amount','',2,GETDATE()
			
			SET @Str=''
			SELECT @MaxId=MAX(ColId)+1,@ReportId=ReportId FROM  Report_Template_GST (NOLOCK) WHERE RptId=@Pi_RptId
			GROUP BY ReportId

			SELECT @start = 1, @end = CHARINDEX(',', @PCSelect) 
			WHILE @start < LEN(@PCSelect) + 1 BEGIN 
				IF @end = 0  
				SET @end = LEN(@PCSelect) + 1
				SET @Str=SUBSTRING(@PCSelect, @start, @end - @start)
				INSERT INTO Report_Template_GST(ReportId,RptId,RptName,ColId,FieldName,FieldSize,
				FieldSelection,GroupField,FieldType,Alignment,HeaderCaption,HeaderCaption1,HeaderCaption2,RoundOff,
				CreatedDate)  
				SELECT TOP 1 ReportId,RptId,RptName,@MaxId,SUBSTRING(@PCSelect, @start, @end - @start),
				18,1,0,2,3,SUBSTRING(@PCSelect, @start, @end - @start)				
				,'','',2,Getdate()
				FROM Report_Template_GST WHERE RptId=@Pi_RptId
				
				SET @start = @end + 1 
				SET @end = CHARINDEX(',', @PCSelect, @start)
				SET @MaxId=@MaxId+1
			END 
			
			INSERT INTO Report_Template_GST(ReportId,RptId,RptName,ColId,FieldName,FieldSize,
			FieldSelection,GroupField,FieldType,Alignment,HeaderCaption,HeaderCaption1,HeaderCaption2,RoundOff,
			CreatedDate)  
			SELECT TOP 1 ReportId,RptId,RptName,@MaxId+1,'LineNetAmount',
			18,1,0,2,3,'Product','Level','NetAmount',2,Getdate()
			FROM Report_Template_GST WHERE RptId=@Pi_RptId	
			
			UPDATE Report_template_GST SET FieldName=REPLACE(REPLACE(FieldName,']',''),'[','')
			WHERE RptId=@Pi_RptId 

			DELETE FROM RptDataCount WHERE RptId = @Pi_RptId AND UserId = @Pi_UsrId
			INSERT INTO RptDataCount (RptId,RecCount,ErrNo,UserId)
			SELECT @Pi_RptId,Count(*) as RecCount,@ErrNo,@Pi_UsrId FROM RptOutputSaleTaxGST
			WHERE UsrId=@Pi_UsrId
			SELECT * FROM RptOutputSaleTaxGST WHERE UsrId=@Pi_UsrId

END
GO
DELETE FROM RptGroup WHERE RptId=405
INSERT INTO RptGroup(PId,RptId,GrpCode,GrpName,Visibility)
SELECT 'GSTTaxReports 400',405,'InputtaxCredit','Input Tax Summary',1
GO
DELETE FROM RptHeader WHERE RptId=405
INSERT INTO RptHeader(GrpCode,RptCaption,RptId,RpCaption,SPName,TblName,RptName,UserIds)
SELECT 'Inputtax Credit','Input Tax Summary',405,'Input Tax Summary','Proc_RptInputtaxCreditGST','RptInputtaxCreditGST','RptInputtaxCreditGST.rpt',0
GO
DELETE FROM RptDetails WHERE RptId=405
INSERT INTO RptDetails(RptId,[SlNo],[TblName],[PrntId],[PrntRefFld],[FldName],[FldCaption],[PrntTbl],[CtrlType],[CmnFld],[SelcId],[SingleMulti],[Mandatory],[PnlMsg],[CaptionChange]) VALUES (405,1,'FromDate',-1,'','','From Date*','',1,'',10,0,0,'Enter From Date',0)
INSERT INTO RptDetails(RptId,[SlNo],[TblName],[PrntId],[PrntRefFld],[FldName],[FldCaption],[PrntTbl],[CtrlType],[CmnFld],[SelcId],[SingleMulti],[Mandatory],[PnlMsg],[CaptionChange]) VALUES (405,2,'ToDate',-1,'','','To Date*','',1,'',11,0,0,'Enter To Date',0)
INSERT INTO RptDetails(RptId,[SlNo],[TblName],[PrntId],[PrntRefFld],[FldName],[FldCaption],[PrntTbl],[CtrlType],[CmnFld],[SelcId],[SingleMulti],[Mandatory],[PnlMsg],[CaptionChange]) VALUES (405,3,'Company',-1,'','CmpId,CmpCode,CmpName','Company...','',1,'',4,1,0,'Press F4/Double Click to select Company',0)
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RptInputtaxCreditGST]') AND type in (N'U'))
DROP TABLE RptInputtaxCreditGST
GO
CREATE TABLE RptInputtaxCreditGST(
	[SLNO] [bigint] IDENTITY(1,1) NOT NULL,
	[GRNDate]  [datetime] NULL,
	[InvDate] [datetime] NULL,
	[RefNo] [varchar](100) NULL,
	[TaxableAmount] [numeric](38, 6) NULL,
	[LineNetAmount] [numeric](36, 2) NULL,
	[Group Name] [varchar](100) NULL,
	[Grouptype] [tinyint] NULL,
	[UsrId] [int] NULL
) ON [PRIMARY]
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='P' AND NAME='Proc_RptInputtaxCreditGST')
DROP PROCEDURE  Proc_RptInputtaxCreditGST
GO
/*
BEGIN tran
EXEC Proc_RptInputtaxCreditGST 405,2,0,'GSTTAX',0,0,1
Select * from RptInputtaxCreditGST
ROLLBACK tran 
*/
Create PROCEDURE Proc_RptInputtaxCreditGST
(
	@Pi_RptId			INT,
	@Pi_UsrId			INT,
	@Pi_SnapId			INT,
	@Pi_DbName			nvarchar(50),
	@Pi_SnapRequired	INT,
	@Pi_GetFromSnap		INT,
	@Pi_CurrencyId		INT
)
AS
/*********************************
* PROCEDURE	: Proc_RptProductWiseSalesTaxGST
* PURPOSE	: To get the Tax details
* CREATED	: Murugan.R
* CREATED DATE	: 12/05/2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
BEGIN
SET NOCOUNT ON

	--Filter Variable
	DECLARE @FromDate		AS	DATETIME
	DECLARE @ToDate			AS	DATETIME
	DECLARE @CmpId	        AS	INT
	DECLARE @ErrNo	 	AS	INT
		

	DECLARE @SQL as Varchar(MAX)
	DECLARE @MaxId as INT
	DECLARE @ReportId as INT
	DECLARE @start INT, @end INT 
	DECLARE @Str AS VARCHAR(100)
	DECLARE @CreateTable AS VARCHAR(7000)

		
	SET @ErrNo=0
	SELECT @FromDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,10,@Pi_UsrId)
	SELECT @ToDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,11,@Pi_UsrId)
	SET @CmpId = (SElect  TOP 1 iCountid FRom Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId))
	
	IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='U' AND NAME='RptInputtaxCreditGST')
	BEGIN
		DELETE FROM RptInputtaxCreditGST WHERE UsrId=@Pi_UsrId
	END
	
		CREATE TABLE #TmpRptIOTaxSummary
		(
			[InvId] [bigint] NULL,
			[GRNDate]  [datetime] NULL,
			[InvDate] DateTime,
			[RefNo] [varchar](100) NULL,
			[TaxableAmount] [numeric](38, 6) NULL,
			LineNetAmount [numeric](38, 6) NULL,
			[Group Name]  Varchar(200),
			[GroupType] INT,
			[UsrId] [int] NULL,
			[CmpId] [int] NULL,
			[TaxPerc] [varchar](50) NULL,
			[TaxFlag] [int] NULL,
			[TaxPercent] [numeric](38, 6) NULL,
			[TaxId] [int] NULL
		)
	
		INSERT INTO #TmpRptIOTaxSummary([GRNDate],[InvDate],[InvId],[RefNo],[CmpId],[TaxPerc],[TaxableAmount],
		[TaxFlag],[TaxPercent],[TaxId],LineNetAmount,[Group Name],[GroupType],[UsrId])
		SELECT SI.GoodsRcvdDate,SI.InvDate AS [InvDate],SI.PurRcptId AS InvId,SI.CmpInvNo  AS RefNo,C.CmpId AS CmpId,TC.TaxCode as TaxPerc,
		SUM(TaxableAmount) as TaxableAmount,1 as TaxFlag,sum(SPT.TaxAmount ) as TaxPercent,SPT.TaxId,
		SUM(PrdNetAmount) as [LineNetAmount],'' as [Group Name] ,2 as [GroupType],@Pi_UsrId AS UserId  
		FROM 
		PurchaseReceipt SI WITH (NOLOCK)  
		INNER JOIN PurchaseReceiptProduct SIP WITH (NOLOCK) ON SI.PurRcptId = SIP.PurRcptId  
		INNER JOIN PurchaseReceiptProductTax SPT WITH (NOLOCK) ON SPT.PurRcptId = SIP.PurRcptId AND SPT.PurRcptId = SI.PurRcptId AND SIP.PrdSlNo=SPT.PrdSlNo  
		INNER JOIN Product P WITH (NOLOCK) ON P.PrdId = SIP.PrdId    
		INNER JOIN TaxConfiguration TC (NOLOCK) ON TC.TaxId =SPT.TaxId    
		LEFT OUTER JOIN Company C ON C.CmpId = P.CmpId   
		WHERE SI.InvDate Between @FromDate and @ToDate  and 
		(C.CmpId = (CASE @CmpId WHEN 0 THEN C.CmpId ELSE 0 END) OR
		C.CmpId in (SELECT iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId)))
		Group By SI.GoodsRcvdDate,SI.InvDate,C.CmpId,--P.PrdId,
		SI.PurRcptId,SI.CmpInvNo,SPT.TaxId ,TC.TaxCode
		HAVING Sum(TaxableAmount) >0 
		
		INSERT INTO #TmpRptIOTaxSummary([GRNDate],InvDate,[InvId],[RefNo],[CmpId],[TaxPerc],[TaxableAmount],
		[TaxFlag],[TaxPercent],[TaxId],LineNetAmount,[Group Name],[GroupType],[UsrId])
		
		SELECT '' AS [GRNDate],'' as InvDate,'' as [InvId],'' AS RefNo,'' AS CmpId,
		[TaxPerc],0 as TaxableAmount,100 as TaxFlag,SUM(TaxPercent) AS TaxPercent,0 as TaxId,0 as [LineNetAmount],	
		'ZZZZZZ' as [Group Name] ,3 as [GroupType],[UsrId] 
		From #TmpRptIOTaxSummary WHERE TaxFlag=1		
		GROUP BY [UsrId],[TaxPerc]
		
		Select * From #TmpRptIOTaxSummary
		
		IF NOT EXISTS(SELECT 'X' FROM #TmpRptIOTaxSummary)
		BEGIN
			DELETE FROM RptDataCount WHERE RptId = @Pi_RptId AND UserId = @Pi_UsrId
			INSERT INTO RptDataCount (RptId,RecCount,ErrNo,UserId)
			SELECT @Pi_RptId,Count(*) as RecCount,@ErrNo,@Pi_UsrId FROM RptProductWiseSalesTaxGST
			WHERE UsrId=@Pi_UsrId
			SELECT * FROM RptInputtaxCreditGST WHERE UsrId=@Pi_UsrId
			RETURN
		END
		
	
--		--Remove Duplicate [TaxableAmount] and LinelevelNetAmount
		SELECT DISTINCT
		[GRNDate],[InvDate],[InvId],[RefNo],[CmpId],
		[TaxableAmount],[TaxFlag],LineNetAmount,[UsrId]
		INTO #LineLevelGross
		FROM #TmpRptIOTaxSummary WHERE UsrId=@Pi_UsrId and TaxFlag=1
		
		DECLARE @ColSelect AS Varchar(MAX)
		DECLARE @ColSelectDataType AS Varchar(5000)
		DECLARE @TableCol AS Varchar(2000)
		DECLARE @Columns1 AS Varchar(7000)
		DECLARE @OrderBy AS VARCHAR(2000)
		DECLARE @PCSelect AS VARCHAR(3000)
		SET @PCSelect=''
		SET @ColSelect=''
		SET @ColSelectDataType=''
		SET @TableCol=''
		SET @Columns1=''
		SET @CreateTable=''
		SET @OrderBy=''
		
		CREATE TABLE #DynamicCol
		(
			Slno INT IDENTITY(1,1),
			Taxperc	Varchar(50),
			TaxId INT
		)
		INSERT INTO #DynamicCol(Taxperc,TaxId)
		SELECT DISTINCT Taxperc,TaxId FROM #TmpRptIOTaxSummary WHERE TaxFlag IN(0,1) and GroupType=2
		ORDER BY TaxId
	
	

		SELECT @ColSelect=@ColSelect+'ISNULL('+QuoteName(Taxperc)+',0) as '+QuoteName(Taxperc)+',' FROM #DynamicCol ORDER BY Slno

		SELECT @PCSelect=@PCSelect+Quotename(Taxperc)+',' FROM #DynamicCol ORDER BY Slno

		SET @PCSelect=LEFT(@PCSelect,LEN(@PCSelect)-1)

		SELECT @ColSelectDataType=@ColSelectDataType+QuoteName(Taxperc)+' Numeric(36,2),' FROM #DynamicCol ORDER BY Slno

		SET @ColSelect='SELECT [GRNDate],[InvDate],[RefNo],[TaxableAmount],'+@ColSelect+'LineNetAmount,[Group Name],[GroupType],[UsrId]'

		SET @TableCol= 'SLNO BIGINT IDENTITY(1,1),[GRNDate] DateTime,[InvDate] DateTime,[RefNo] [varchar](100) NULL,[TaxableAmount] [numeric](38, 6) NULL,'

		SET @Columns1='SELECT [GRNDate],[InvDate],[RefNo],[TaxableAmount],LineNetAmount,TaxPercent ,Taxperc,[Group Name],[GroupType],[UsrId] FROM #TmpRptIOTaxSummary'

		SET @OrderBy=' ORDER BY [Group Name],[GroupType],InvDate'

		SET @CreateTable=' IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME=''RptInputtaxCreditGST'' and XTYPE=''U'')'+
		' DROP TABLE RptInputtaxCreditGST'+
		' CREATE TABLE RptInputtaxCreditGST ('+@TableCol+@ColSelectDataType+' LineNetAmount Numeric(36,2),[Group Name] Varchar(100),Grouptype TINYINT,UsrId INT)'

		EXEC(@CreateTable)




		SET @SQL=' INSERT INTO RptInputtaxCreditGST '+ @ColSelect+ ' FROM'+
		'('+@Columns1+
		') PS'+
		' PIVOT'+
		'('+
			' SUM(TaxPercent) FOR Taxperc IN('+@PCSelect+')'+
		')PVTTax '+ @OrderBy

		--PRINT @SQL
		EXEC(@SQL)

		----GRAND TOTAL UPDATE
		SELECT 'ZZZZZZ' as [Group Name], 3 as GroupType ,SUM(LineNetAmount) as LineNetAmount,SUM(TaxableAmount) as TaxableAmount
		INTO #GrandTotal
		FROM #LineLevelGross WHERE TaxFlag=1 and [UsrId]=@Pi_UsrId

		UPDATE Y SET  
		Y.LineNetAmount=X.[LineNetAmount],Y.[TaxableAmount]=X.TaxableAmount 
		FROM RptInputtaxCreditGST Y INNER JOIN #GrandTotal X ON X.[Group Name]=Y.[Group Name]
		AND X.GroupType=Y.GroupType WHERE Y.[UsrId]=@Pi_UsrId
		---TILL HERE


			DELETE FROM Report_Template_GST WHERE ReportId=1 and RptId=@Pi_RptId
			INSERT INTO Report_Template_GST(ReportId,RptId,RptName ,ColId,FieldName,FieldSize,FieldSelection,GroupField,
			FieldType,Alignment,HeaderCaption,HeaderCaption1,HeaderCaption2,
			RoundOff,CreatedDate)
			
			SELECT 1,405,'Input Tax Summary',1,'GRNDate',75,1,0,1,1,'GRN','Date','',0,GETDATE()
			UNION ALL
			SELECT 1,405,'Input Tax Summary',2,'InvDate',75,1,0,1,4,'Invoice','Date','',0,GETDATE()
			UNION ALL
			SELECT 1,405,'Input Tax Summary',3,'RefNo',75,1,0,1,1,'Invoice','Number','',0,GETDATE()
			UNION ALL
			SELECT 1,405,'Input Tax Summary',4,'TaxableAmount',20,1,0,2,3,'Taxable','Amount','',2,GETDATE()
			
			SET @Str=''
			SELECT @MaxId=MAX(ColId)+1,@ReportId=ReportId FROM  Report_Template_GST (NOLOCK) WHERE RptId=@Pi_RptId
			GROUP BY ReportId

			SELECT @start = 1, @end = CHARINDEX(',', @PCSelect) 
			WHILE @start < LEN(@PCSelect) + 1 BEGIN 
				IF @end = 0  
				SET @end = LEN(@PCSelect) + 1
				SET @Str=SUBSTRING(@PCSelect, @start, @end - @start)
				INSERT INTO Report_Template_GST(ReportId,RptId,RptName,ColId,FieldName,FieldSize,
				FieldSelection,GroupField,FieldType,Alignment,HeaderCaption,HeaderCaption1,HeaderCaption2,RoundOff,
				CreatedDate)  
				SELECT TOP 1 ReportId,RptId,RptName,@MaxId,SUBSTRING(@PCSelect, @start, @end - @start),
				18,1,0,2,3,SUBSTRING(@PCSelect, @start, @end - @start)				
				,'','',2,Getdate()
				FROM Report_Template_GST WHERE RptId=@Pi_RptId
				
				SET @start = @end + 1 
				SET @end = CHARINDEX(',', @PCSelect, @start)
				SET @MaxId=@MaxId+1
			END 
			
			INSERT INTO Report_Template_GST(ReportId,RptId,RptName,ColId,FieldName,FieldSize,
			FieldSelection,GroupField,FieldType,Alignment,HeaderCaption,HeaderCaption1,HeaderCaption2,RoundOff,
			CreatedDate)  
			SELECT TOP 1 ReportId,RptId,RptName,@MaxId+1,'LineNetAmount',
			18,1,0,2,3,'Product','Level','NetAmount',2,Getdate()
			FROM Report_Template_GST WHERE RptId=@Pi_RptId	
			
			UPDATE Report_template_GST SET FieldName=REPLACE(REPLACE(FieldName,']',''),'[','')
			WHERE RptId=@Pi_RptId 

			DELETE FROM RptDataCount WHERE RptId = @Pi_RptId AND UserId = @Pi_UsrId
			INSERT INTO RptDataCount (RptId,RecCount,ErrNo,UserId)
			SELECT @Pi_RptId,Count(*) as RecCount,@ErrNo,@Pi_UsrId FROM RptInputtaxCreditGST
			WHERE UsrId=@Pi_UsrId
			SELECT * FROM RptInputtaxCreditGST WHERE UsrId=@Pi_UsrId

END
GO
--Tax Report Murugan Sir
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='TF' and NAME='Fn_ProductTaxGroupAlert' )
DROP FUNCTION Fn_ProductTaxGroupAlert
GO
--SELECT * FROM DBO.Fn_ProductTaxGroupAlert()
CREATE  FUNCTION [Fn_ProductTaxGroupAlert]()
RETURNS @ProductTaxGroupAlert TABLE
	(
		Prdid INT,
		PrdbatId INT,
		Prdccode Varchar(50),
		Prdname Varchar(100),
		PrdBatCode Varchar(100),
		ProductTaxGroup Varchar(100),
		BatchTaxGroup Varchar(100),
		RowCnt INT,
		OrderSeq TINYINT
		
	)
AS
BEGIN
/*********************************
* FUNCTION: Fn_ProductTaxGroupAlert
* PURPOSE: Returns the Product Tax Group
* NOTES: 
* CREATED: Murugan.R 26/05/2017
* MODIFIED 
* DATE        AUTHOR       DESCRIPTION
*********************************/
	DECLARE @Cnt AS INT
	
	DECLARE @ProductTaxGroupAlertPark TABLE
	(
		Prdid INT,
		PrdbatId INT,
		Prdccode Varchar(50),
		Prdname Varchar(100),
		PrdBatCode Varchar(100),
		ProductTaxGroup Varchar(100),
		BatchTaxGroup Varchar(100),	
		OrderSeq TINYINT
		
	)

	INSERT INTO @ProductTaxGroupAlertPark(Prdid,PrdbatId,Prdccode,Prdname,PrdBatCode,ProductTaxGroup,BatchTaxGroup,OrderSeq)
	SELECT P.Prdid,PrdbatId,Prdccode,Prdname,PrdBatCode,ISNULL(TS.TaxGroupName,'NOT ATTACHED') as ProductTaxGroup,
	ISNULL(TS1.TaxGroupName,'NOT ATTACHED') as BatchTaxGroup,
	CASE  WHEN TS.TaxGroupName IS NULL THEN 0 ELSE 1 END+ CASE  WHEN TS1.TaxGroupName IS NULL THEN 0 ELSE 1 END as OrderSeq
	FROM Product P (NOLOCK) 
	INNER JOIN ProductBatch PB (NOLOCK) ON P.Prdid=PB.PrdId
	LEFT OUTER JOIN TaxGroupSetting TS (NOLOCK) ON TS.TaxGroupId = P.TaxGroupId
	LEFT OUTER JOIN TaxGroupSetting TS1 (NOLOCK) ON TS1.TaxGroupId = PB.TaxGroupId
	WHERE PrdStatus=1 and Status=1
	ORDER BY CASE  WHEN TS.TaxGroupName IS NULL THEN 0 ELSE 1 END+ CASE  WHEN TS1.TaxGroupName IS NULL THEN 0 ELSE 1 END 
	,Prdname,PrdBatCode

	SELECT @Cnt=Count(PrdId) FROM @ProductTaxGroupAlertPark WHERE OrderSeq<=1
	SET @Cnt=ISNULL(@Cnt,0)
	
	INSERT INTO @ProductTaxGroupAlert(Prdid,PrdbatId,Prdccode,Prdname,PrdBatCode,ProductTaxGroup,BatchTaxGroup,RowCnt,OrderSeq)
	SELECT Prdid,PrdbatId,Prdccode,Prdname,PrdBatCode,ProductTaxGroup,BatchTaxGroup,@Cnt,OrderSeq
	FROM @ProductTaxGroupAlertPark
RETURN 
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='TF' and NAME='Fn_RetailerTaxGroupAlert' )
DROP FUNCTION Fn_RetailerTaxGroupAlert
GO
--SELECT * FROM DBO.Fn_RetailerTaxGroupAlert()
CREATE  FUNCTION Fn_RetailerTaxGroupAlert()
RETURNS @RetailerTaxGroupAlert TABLE
	(
		Rtrid INT,
		RtrCode Varchar(50),
		RtrName Varchar(100),
		StateCode Varchar(20),
		StateName Varchar(100),
		RetailerTaxGroup Varchar(100),	
		RetailerShipTaxGroup Varchar(100),
		RowCnt  int,	
		OrderSeq TINYINT
		
		
	)
AS
BEGIN
/*********************************
* FUNCTION: Fn_RetailerTaxGroupAlert
* PURPOSE: Returns the Product Tax Group
* NOTES: 
* CREATED: Murugan.R 26/05/2017
* MODIFIED 
* DATE        AUTHOR       DESCRIPTION
*********************************/
	DECLARE @Cnt AS INT
	
	DECLARE @RetailerTaxGroupAlertPark TABLE
	(
		Rtrid INT,
		RtrCode Varchar(50),
		RtrName Varchar(100),
		StateCode Varchar(20),
		StateName Varchar(100),
		RetailerTaxGroup Varchar(100),	
		RetailerShipTaxGroup Varchar(100),
		OrderSeq TINYINT
		
	)

	INSERT INTO @RetailerTaxGroupAlertPark(Rtrid,RtrCode,RtrName,StateCode,StateName,RetailerTaxGroup,RetailerShipTaxGroup,OrderSeq)
	SELECT R.RtrId,RtrCode,RtrName,StateCode,StateName,
	ISNULL(TS.TaxGroupName,'NOT ATTACHED') as RetailerTaxGroup ,ISNULL(TS1.TaxGroupName,'NOT ATTACHED') as RetailerShipTaxGroup ,
	CASE  WHEN TS.TaxGroupName IS NULL THEN 0 ELSE 1 END+ CASE  WHEN TS1.TaxGroupName IS NULL THEN 0 ELSE 1 END as OrderSeq
	FROM Retailer R (NOLOCK) 
	INNER JOIN RetailerShipAdd RA (NOLOCK) ON R.RtrId=RA.RtrId
	LEFT OUTER JOIN StateMaster SM (NOLOCK) ON SM.StateId=RA.StateId
	LEFT OUTER JOIN TaxGroupSetting TS (NOLOCK) ON TS.TaxGroupId = R.TaxGroupId
	LEFT OUTER JOIN TaxGroupSetting TS1 (NOLOCK) ON TS1.TaxGroupId = RA.TaxGroupId
	ORDER BY CASE  WHEN TS.TaxGroupName IS NULL THEN 0 ELSE 1 END+ CASE  WHEN TS1.TaxGroupName IS NULL THEN 0 ELSE 1 END 
	,RtrName
	
	


	SELECT @Cnt=Count(Rtrid) FROM @RetailerTaxGroupAlertPark WHERE OrderSeq<=1
	SET @Cnt=ISNULL(@Cnt,0)
	
	INSERT INTO @RetailerTaxGroupAlert(Rtrid,RtrCode,RtrName,StateCode,StateName,RetailerTaxGroup,RetailerShipTaxGroup,RowCnt,OrderSeq)
	SELECT Rtrid,RtrCode,RtrName,StateCode,StateName,RetailerTaxGroup,RetailerShipTaxGroup,@Cnt,OrderSeq
	FROM @RetailerTaxGroupAlertPark
RETURN 
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='TF' and NAME='Fn_SupplierTaxGroupAlert' )
DROP FUNCTION Fn_SupplierTaxGroupAlert
GO
--SELECT * FROM DBO.Fn_SupplierTaxGroupAlert()
CREATE  FUNCTION Fn_SupplierTaxGroupAlert()
RETURNS @SupplierTaxGroupAlert TABLE
	(
		SpmId INT,
		SpmCode Varchar(50),
		SpmName Varchar(100),
		SupplierTaxGroup Varchar(100),		
		RowCnt  int,	
		OrderSeq TINYINT
		
		
	)
AS
BEGIN
/*********************************
* FUNCTION: Fn_SupplierTaxGroupAlert
* PURPOSE: Returns the Product Tax Group
* NOTES: 
* CREATED: Murugan.R 26/05/2017
* MODIFIED 
* DATE        AUTHOR       DESCRIPTION
*********************************/
	DECLARE @Cnt AS INT
	
	DECLARE @SupplierTaxGroupAlertPark TABLE
	(
		SpmId INT,
		SpmCode Varchar(50),
		SpmName Varchar(100),
		SupplierTaxGroup Varchar(100),		
		OrderSeq TINYINT
		
	)

	INSERT INTO @SupplierTaxGroupAlertPark(SpmId,SpmCode,SpmName,SupplierTaxGroup,OrderSeq)
	SELECT R.SpmId,SpmCode,SpmName,
	ISNULL(TS1.TaxGroupName,'NOT ATTACHED') as SupplierTaxGroup,
	CASE  WHEN TS1.TaxGroupName IS NULL THEN 0 ELSE 1 END as OrderSeq
	FROM Supplier R (NOLOCK) 
	LEFT OUTER JOIN TaxGroupSetting TS1 (NOLOCK) ON TS1.TaxGroupId = R.TaxGroupId
	ORDER BY  CASE  WHEN TS1.TaxGroupName IS NULL THEN 0 ELSE 1 END 
	,SpmName
	


	SELECT @Cnt=Count(SpmId) FROM @SupplierTaxGroupAlertPark WHERE OrderSeq<1
	SET @Cnt=ISNULL(@Cnt,0)
	
	INSERT INTO @SupplierTaxGroupAlert(SpmId,SpmCode,SpmName,SupplierTaxGroup,RowCnt,OrderSeq)
	SELECT SpmId,SpmCode,SpmName,SupplierTaxGroup,@Cnt,OrderSeq
	FROM @SupplierTaxGroupAlertPark
RETURN 
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='TF' and NAME='Fn_GSTTaxGroupAlert' )
DROP FUNCTION Fn_GSTTaxGroupAlert
GO
--SELECT * FROM DBO.Fn_GSTTaxGroupAlert()
CREATE  FUNCTION Fn_GSTTaxGroupAlert()
RETURNS @NewGSTTaxGroupAlert TABLE
	(
		RtrGroup Varchar(50),
		RtrGroupName Varchar(100),
		PrdGroup Varchar(100),		
		PrdGroupName   Varchar(100),
		PrdGstCnt INT,
		RtrGstCnt INT,
		SupGstCnt INT	
	)	
	
	
	
AS
BEGIN
/*********************************
* FUNCTION: Fn_GSTTaxGroupAlert
* PURPOSE: Returns the New GST Tax Group
* NOTES: 
* CREATED: Murugan.R 26/05/2017
* MODIFIED 
* DATE        AUTHOR       DESCRIPTION
*********************************/
	DECLARE @PrdGstCnt AS INT
	DECLARE @RtrGstCnt AS INT	
	DECLARE @SupGstCnt AS INT
	
	SELECT @RtrGstCnt= Count(Distinct RtrId)
	FROM TaxSettingMaster A (NOLOCK) 
	INNER JOIN TaxGroupSetting B (NOLOCK) ON A.RtrId=B.TaxGroupId
	WHERE TaxType='GST' and B.TaxGroup=1
	
	SELECT @SupGstCnt= Count(Distinct RtrId)
	FROM TaxSettingMaster A (NOLOCK) 
	INNER JOIN TaxGroupSetting B (NOLOCK) ON A.RtrId=B.TaxGroupId
	WHERE TaxType='GST' and B.TaxGroup=3
	
	SELECT @PrdGstCnt= Count(Distinct Prdid)
	FROM TaxSettingMaster A (NOLOCK) 
	INNER JOIN TaxGroupSetting B (NOLOCK) ON A.Prdid=B.TaxGroupId
	WHERE TaxType='GST' and B.TaxGroup=2
	
	INSERT INTO @NewGSTTaxGroupAlert(RtrGroup,RtrGroupName,PrdGroup,PrdGroupName,PrdGstCnt,RtrGstCnt,SupGstCnt)
	SELECT DISTINCT B.RtrGroup,B.TaxGroupName,C.PrdGroup,C.TaxGroupName ,ISNULL(@PrdGstCnt,0),ISNULL(@RtrGstCnt,0),ISNULL(@SupGstCnt,0)
	FROM TaxSettingMaster A (NOLOCK) 
	INNER JOIN TaxGroupSetting B (NOLOCK) ON A.RtrId=B.TaxGroupId
	INNER JOIN TaxGroupSetting C (NOLOCK) ON A.Prdid=C.TaxGroupId
	WHERE TaxType='GST'
	


RETURN 
END
GO
IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND b.name='GSTTIN')
BEGIN
	ALTER TABLE RptBillTemplateFinal ADD GSTTIN VARCHAR(50) DEFAULT '' WITH VALUES
END
GO
IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='PAN Number')
BEGIN
	ALTER TABLE RptBillTemplateFinal ADD [Pan Number] VARCHAR(50) DEFAULT '' WITH VALUES
END
GO
IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='Retailer Type')
BEGIN
	ALTER TABLE RptBillTemplateFinal ADD [Retailer Type] VARCHAR(50) DEFAULT '' WITH VALUES
END
GO
IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND b.name='Composite')
BEGIN
	ALTER TABLE RptBillTemplateFinal ADD Composite VARCHAR(50) DEFAULT '' WITH VALUES
END
GO
IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND b.name='RelatedParty')
BEGIN
	ALTER TABLE RptBillTemplateFinal ADD RelatedParty VARCHAR(50) DEFAULT '' WITH VALUES
END
GO
IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='State Name')
BEGIN
	ALTER TABLE RptBillTemplateFinal ADD [State Name] VARCHAR(50) DEFAULT '' WITH VALUES
END
GO
IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='State Code')
BEGIN
	ALTER TABLE RptBillTemplateFinal ADD [State Code] VARCHAR(10) DEFAULT '' WITH VALUES
END
GO
IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='StateTinNo')
BEGIN
	ALTER TABLE RptBillTemplateFinal ADD [StateTinNo] VARCHAR(10) DEFAULT '' WITH VALUES
END
GO
IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND b.name='HSNCode')
BEGIN
	ALTER TABLE RptBillTemplateFinal ADD HSNCode VARCHAR(50) DEFAULT '' WITH VALUES
END
GO
IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND b.name='HSNDescription')
BEGIN
	ALTER TABLE RptBillTemplateFinal ADD HSNDescription VARCHAR(100) DEFAULT '' WITH VALUES
END
GO
IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='DistributorGstTin')
BEGIN
	ALTER TABLE RptBillTemplateFinal ADD DistributorGstTin VARCHAR(50) DEFAULT '' WITH VALUES
END
GO
IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='DistributorStateName')
BEGIN
	ALTER TABLE RptBillTemplateFinal ADD DistributorStateName VARCHAR(50) DEFAULT '' WITH VALUES
END
GO
IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='Distributor Type')
BEGIN
	ALTER TABLE RptBillTemplateFinal ADD [Distributor Type] VARCHAR(50) DEFAULT '' WITH VALUES
END
GO
IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='AadharNo')
BEGIN
	ALTER TABLE RptBillTemplateFinal ADD AadharNo VARCHAR(50) DEFAULT '' WITH VALUES
END
GO
IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='DistributorStateCode')
BEGIN
	ALTER TABLE RptBillTemplateFinal ADD DistributorStateCode VARCHAR(10) DEFAULT '' WITH VALUES
END
GO
IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='DistributorStateTinNo')
BEGIN
	ALTER TABLE RptBillTemplateFinal ADD DistributorStateTinNo VARCHAR(10) DEFAULT '' WITH VALUES
END
GO
IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='Dist Food Lic No')
BEGIN
	ALTER TABLE RptBillTemplateFinal ADD [Dist Food Lic No] VARCHAR(50) DEFAULT '' WITH VALUES
END
GO
IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='Dist Drug Lic no')
BEGIN
	ALTER TABLE RptBillTemplateFinal ADD [Dist Drug Lic no] VARCHAR(50) DEFAULT '' WITH VALUES
END
GO
IF NOT EXISTS(SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='SalesInvoice NetAmount Actual')
BEGIN
	ALTER  TABLE RptBillTemplateFinal ADD [SalesInvoice NetAmount Actual] Numeric(18,2)
END
GO
IF exists (SELECT  * FROM sys.objects where name='Proc_RptBillTemplateFinal' AND type='P')
Drop PROCEDURE Proc_RptBillTemplateFinal
GO
--EXEC PROC_RptBillTemplateFinal 16,3,0,'PARLE_classrtr',0,0,1,'RPTBT_VIEW_FINAL1_BILLTEMPLATE'
---select * From RptBillTemplateFinal
Create PROCEDURE [dbo].[Proc_RptBillTemplateFinal]
(
	@Pi_RptId		INT,
	@Pi_UsrId		INT,
	@Pi_SnapId		INT,
	@Pi_DbName		NVARCHAR(50),
	@Pi_SnapRequired	INT,
	@Pi_GetFromSnap		INT,
	@Pi_CurrencyId		INT,
	@Pi_BTTblName   	NVARCHAR(50)
)
AS
/***************************************************************************************************
* PROCEDURE	: Proc_RptBillTemplateFinal
* PURPOSE	: General Procedure
* NOTES		: 	
* CREATED	:
* MODIFIED
* DATE			    AUTHOR     DESCRIPTION
----------------------------------------------------------------------------------------------------
* 01.10.2009		Panneer						Added Tax summary Report Part(UserId Condition)
* 10/07/2015		PRAVEENRAJ BHASKARAN	    Added Grammge For Parle
****************************************************************************************************/
SET NOCOUNT ON
BEGIN
	--Added By Murugan 04/09/2009
	DECLARE @FieldCount AS INT
	DECLARE @UomStatus AS INT	
	DECLARE @UOMCODE AS nVARCHAR(25)
	DECLARE @pUOMID as INT
	DECLARE @UomFieldList as nVARCHAR(3000)
	DECLARE @UomFields as nVARCHAR(3000)
	DECLARE @UomFields1 as nVARCHAR(3000)
	--END
	DECLARE @NewSnapId 	AS	INT
	DECLARE @DBNAME		AS 	nvarchar(50)
	DECLARE @TblName 	AS	nvarchar(500)
	DECLARE @TblStruct 	AS	nVarchar(4000)
	DECLARE @TblFields 	AS	nVarchar(4000)
	DECLARE @sSql		AS 	nVarChar(4000)
	DECLARE @ErrNo	 	AS	INT
	DECLARE @PurDBName	AS	nVarChar(50)
	Declare @Sub_Val 	AS	TINYINT
	DECLARE @FromDate	AS	DATETIME
	DECLARE @ToDate	 	AS	DATETIME
	DECLARE @FromBillNo 	AS  	BIGINT
	DECLARE @TOBillNo   	AS  	BIGINT
	DECLARE @SMId 		AS	INT
	DECLARE @RMId	 	AS	INT
	DECLARE @RtrId	 	AS	INT
	DECLARE @vFieldName   	AS	nvarchar(255)
	DECLARE @vFieldType	AS	nvarchar(10)
	DECLARE @vFieldLength	as	nvarchar(10)
	DECLARE @FieldList	as      nvarchar(4000)
	DECLARE @FieldTypeList	as	varchar(8000)
	DECLARE @FieldTypeList2 as	varchar(8000)
	DECLARE @DeliveredBill 	AS	INT
	DECLARE @SSQL1 AS NVARCHAR(4000)
	DECLARE @FieldList1	as      nvarchar(4000)
	--For B&L Bill Print Configurtion
	SELECT @DeliveredBill=Status FROM  Configuration WHERE ModuleName='Discount & Tax Collection' AND ModuleId='DISTAXCOLL5'
	IF @DeliveredBill=1
	BEGIN		
		DELETE FROM RptBillToPrint WHERE [Bill Number] IN(
		SELECT SalInvNo FROM SalesInvoice WHERE DlvSts NOT IN(4,5))
	END
	--Till Here
	--Added By Murugan 04/09/2009
	--print @Pi_BTTblName
	SET @FieldCount=0
	SELECT @UomStatus=Isnull(Status,0) FROM configuration  WHERE ModuleName='General Configuration' and ModuleId='GENCONFIG22' and SeqNo=22
	--Till Here
	SET @FromDate =(SELECT  TOP 1 dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,10,@Pi_UsrId))
	SET @ToDate = (SELECT  TOP 1 dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,11,@Pi_UsrId))
	DECLARE CurField CURSOR FOR
	select sc.name fieldname,st.name fieldtype,sc.length from syscolumns sc, systypes st
	where sc.id in (select id from sysobjects where name like @Pi_BTTblName )
	and sc.xtype = st.xtype
	and sc.xusertype = st.xusertype
	Set @FieldList = ''
	Set @FieldTypeList = ''
	OPEN CurField
	FETCH CurField INTO @vFieldName,@vFieldType,@vFieldLength
	WHILE @@Fetch_Status = 0
	BEGIN
		if len(@FieldTypeList) > 3060
		begin
			Set @FieldTypeList2 = @FieldTypeList
			Set @FieldTypeList = ''
		end
		--->Added By Nanda on 12/03/2010
		IF LEN(@FieldList)>3060
		BEGIN
			SET @FieldList1=@FieldList
			SET @FieldList=''
		END
		--->Till Here
		if @vFieldName = 'UsrId'
		begin
			Set @FieldList = @FieldList  + 'V.[' + @vFieldName + '] , '
		end
		else
		begin
			Set @FieldList = @FieldList  + '[' + @vFieldName + '] , '
		end
		if @vFieldType = 'nvarchar' or @vFieldType = 'varchar' or @vFieldType = 'char'
		begin
			Set @FieldTypeList = @FieldTypeList + '[' + @vFieldName + '] ' + @vFieldType + '(' + @vFieldLength + ')' + ','
		end
		else if @vFieldType = 'numeric'
		begin
		
			Set @FieldTypeList = @FieldTypeList + '[' + @vFieldName + '] ' + @vFieldType + '(38,2)' + ','
		end
		else
		begin
			Set @FieldTypeList = @FieldTypeList + '[' + @vFieldName + '] ' + @vFieldType + ','
		end
		FETCH CurField INTO @vFieldName,@vFieldType,@vFieldLength
	END
	Set @FieldList = left(@FieldList,len(@FieldList)-1)
	Set @FieldTypeList = left(@FieldTypeList,len(@FieldTypeList)-1)
	CLOSE CurField
	DEALLOCATE CurField
	
	--Added by Murugan UomCoversion 04/09/2009
	IF @UomStatus=1
	BEGIN	
		TRUNCATE TABLE BillTemplateUomBased	
		SET @UomFieldList=''
		SET @UomFields=''
		SET @UomFields1=''
		SET @FieldCount= @FieldCount+1	
		DECLARE CUR_UOM CURSOR
		FOR SELECT UOMID,UOMCODE FROM UOMMASTER  Order BY UOMID
		OPEN CUR_UOM
		FETCH NEXT FROM CUR_UOM INTO @pUOMID,@UOMCODE
		WHILE @@FETCH_STATUS=0
		BEGIN
			SET @FieldCount= @FieldCount+1
			SET @UomFieldList=@UomFieldList+'['+@UOMCODE +'] INT,'
			SET @UomFields=@UomFields+'0 AS ['+@UOMCODE +'],'
			SET @UomFields1=@UomFields1+'['+@UOMCODE +'],'	
			INSERT INTO BillTemplateUomBased(ColId,UOMID,UomCode)
			VALUES (@FieldCount,@pUOMID,@UOMCODE)
	
		FETCH NEXT FROM CUR_UOM INTO @pUOMID,@UOMCODE
		END	
		CLOSE CUR_UOM
		DEALLOCATE CUR_UOM
		SET @UomFieldList= subString(@UomFieldList,1,Len(Ltrim(rtrim(@UomFieldList)))-1)
		SET @UomFields= subString(@UomFields,1,Len(Ltrim(rtrim(@UomFields)))-1)
		SET @UomFields1= subString(@UomFields1,1,Len(Ltrim(rtrim(@UomFields1)))-1)		
		
	END
	-----
	
	SELECT @PurDBName = dbo.Fn_ReturnPurgeDBName(@FromDate,@ToDate)
	if exists (select * from dbo.sysobjects where id = object_id(N'[RptBillTemplateFinal]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	drop table [RptBillTemplateFinal]
	IF @UomStatus=1
	BEGIN	
		EXEC('CREATE TABLE RptBillTemplateFinal
		(' +  @FieldTypeList2 + @FieldTypeList  + ',AmtInWrd nVarchar(500),'+ @UomFieldList +')')
	END
	ELSE
	BEGIN
		EXEC('CREATE TABLE RptBillTemplateFinal
		(' +  @FieldTypeList2 + @FieldTypeList  + ',AmtInWrd nVarchar(500))')
	END
	SET @TblName = 'RptBillTemplateFinal'
	SET @TblStruct = @FieldTypeList2 + @FieldTypeList
	SET @TblFields = @FieldTypeList2 + @FieldTypeList
	IF @Pi_GetFromSnap = 1
	BEGIN
		Select @DBNAME = DBName  FROM SnapShotHd WHERE SnapId = @Pi_SnapId
		SET @DBNAME =   @DBNAME
	END
	ELSE
	BEGIN
		Select @DBNAME = CounterDesc  FROM CounterConfiguration WHERE SlNo =3
		SET @DBNAME = @PI_DBNAME + @DBNAME
	END
	--Nanda01
	IF @Pi_GetFromSnap = 0		--To Generate For New Report Data
	BEGIN
		DELETE FROM RptBillTemplateFinal Where UsrId = @Pi_UsrId
		IF @UomStatus=1
		BEGIN
			EXEC ('INSERT INTO RptBillTemplateFinal (' + @FieldList1+@FieldList + ','+ @UomFields1 + ')' +
			'Select  DISTINCT' + @FieldList1+@FieldList +','+ @UomFields+'  from ' + @Pi_BTTblName + ' V,RptBillToPrint T Where V.[Sales Invoice Number] = T.[Bill Number]')
		END
		ELSE
		BEGIN
			--SELECT 'Nanda002'	
			Exec ('INSERT INTO RptBillTemplateFinal (' +@FieldList1+ @FieldList + ')' +
			'Select  DISTINCT' + @FieldList1+ @FieldList + '  from ' + @Pi_BTTblName + ' V,RptBillToPrint T Where V.[Sales Invoice Number] = T.[Bill Number]')
		END
		IF LEN(@PurDBName) > 0
		BEGIN
			EXEC Proc_PurgedDB @PurDBName,@TblName,@Po_PurgeErrno = @ErrNo OUTPUT
			
			SET @SSQL = 'INSERT INTO RptBillTemplateFinal ' +
				'(' + @TblFields + ')' +
			' SELECT DISTINCT' + @TblFields + ' FROM ['  + @PurDBName + '].dbo.' + @TblName + ' Where UsrId = ' + @Pi_UsrId
		
			EXEC (@SSQL)
			PRINT @SSQL
			PRINT 'Retrived Data From Purged Table'
		END
		IF @Pi_SnapRequired = 1
		   BEGIN
			SELECT @NewSnapId = @Pi_SnapId
			EXEC Proc_SnapShot_Report @NewSnapId,@Pi_UsrId,@Pi_RptId,@Pi_DbName,@TblName,@TblStruct,
				@Pi_GetFromSnap,@Po_SnapErrno = @ErrNo OUTPUT
			IF @ErrNo = 0
			   BEGIN
				SET @sSql = 'INSERT INTO [' + @DBNAME + '].dbo.' + @TblName +
					'(SnapId,UserId,RptId,' + @TblFields + ')' +
					' SELECT ' + CAST(@NewSnapId AS VARCHAR(10)) +
					' ,' + CAST(@Pi_UsrId AS VARCHAR(10)) +
					' ,' + CAST(@Pi_RptId AS VARCHAR(10)) + ', * FROM RptBillTemplateFinal'
		
				EXEC (@SSQL)
				PRINT 'Saved Data Into SnapShot Table'
			   END
		   END
	END
	--Nanda02
	ELSE				--To Retrieve Data From Snap Data
	BEGIN
		EXEC Proc_SnapShot_Report @Pi_SnapId,@Pi_UsrId,@Pi_RptId,@Pi_DbName,@TblName,@TblStruct,
				@Pi_GetFromSnap,@Po_SnapErrno = @ErrNo OUTPUT
		PRINT @ErrNo
		IF @ErrNo = 0
		   BEGIN
			SET @SSQL = 'INSERT INTO RptBillTemplateFinal ' +
				'(' + @TblFields + ')' +
				' SELECT DISTINCT' + @TblFields + ' FROM ['  + @DBNAME + '].dbo.' + @TblName +
				' WHERE SNAPID = ' + CAST(@Pi_SnapId AS VARCHAR(10)) +
				' AND UserId = ' + CAST(@Pi_UsrId AS VARCHAR(10)) +
				' AND RptId = ' + CAST(@Pi_RptId AS VARCHAR(10))
			EXEC (@SSQL)
			PRINT 'Retrived Data From Snap Shot Table'
		   END
		ELSE
		   BEGIN
			PRINT 'DataBase or Table not Found'
		   END
	END
	--Update SplitUp Tax Amount & Perc
	IF @UomStatus=1
	BEGIN	
		EXEC Proc_BillTemplateUOM @Pi_UsrId
	END
--	EXEC Proc_BillPrintingTax @Pi_UsrId
		
	IF Exists(SELECT Name FROM dbo.sysColumns where id = object_id(N'RptBillTemplateFinal') and name='Tax 1')
	BEGIN
		SET @SSQL1='UPDATE [RptBillTemplateFinal] SET [RptBillTemplateFinal].[Tax 1]=BillPrintTaxTemp.[Tax1Perc]
		FROM BillPrintTaxTemp WHERE [RptBillTemplateFinal].SalId=BillPrintTaxTemp.[SalId] AND [RptBillTemplateFinal].[Product Code]=BillPrintTaxTemp.[PrdCode]
		AND [RptBillTemplateFinal].[Batch Code] =BillPrintTaxTemp.[BatchCode]'
		EXEC (@SSQL1)
	END
	IF Exists(SELECT Name FROM dbo.sysColumns where id = object_id(N'RptBillTemplateFinal') and name='Tax Amount1')
	BEGIN
		SET @SSQL1='UPDATE [RptBillTemplateFinal] SET [RptBillTemplateFinal].[Tax Amount1]=BillPrintTaxTemp.[Tax1Amount]
		FROM BillPrintTaxTemp WHERE [RptBillTemplateFinal].SalId=BillPrintTaxTemp.[SalId] AND [RptBillTemplateFinal].[Product Code]=BillPrintTaxTemp.[PrdCode]
		AND [RptBillTemplateFinal].[Batch Code] =BillPrintTaxTemp.[BatchCode]'
		EXEC (@SSQL1)
	END
	IF Exists(SELECT Name FROM dbo.sysColumns where id = object_id(N'RptBillTemplateFinal') and name='Tax 2')
	BEGIN
		SET @SSQL1='UPDATE [RptBillTemplateFinal] SET [RptBillTemplateFinal].[Tax 2]=BillPrintTaxTemp.[Tax2Perc],[RptBillTemplateFinal].[Tax Amount2]=BillPrintTaxTemp.[Tax2Amount]
		FROM BillPrintTaxTemp WHERE [RptBillTemplateFinal].SalId=BillPrintTaxTemp.[SalId] AND [RptBillTemplateFinal].[Product Code]=BillPrintTaxTemp.[PrdCode]
		AND [RptBillTemplateFinal].[Batch Code] =BillPrintTaxTemp.[BatchCode]'
		EXEC (@SSQL1)
	END
	IF Exists(SELECT Name FROM dbo.sysColumns where id = object_id(N'RptBillTemplateFinal') and name='Tax Amount2')
	BEGIN
		SET @SSQL1='UPDATE [RptBillTemplateFinal] SET [RptBillTemplateFinal].[Tax Amount2]=BillPrintTaxTemp.[Tax2Amount]
		FROM BillPrintTaxTemp WHERE [RptBillTemplateFinal].SalId=BillPrintTaxTemp.[SalId] AND [RptBillTemplateFinal].[Product Code]=BillPrintTaxTemp.[PrdCode]
		AND [RptBillTemplateFinal].[Batch Code] =BillPrintTaxTemp.[BatchCode]'
		EXEC (@SSQL1)
	END
	IF Exists(SELECT Name FROM dbo.sysColumns where id = object_id(N'RptBillTemplateFinal') and name='Tax 3')
	BEGIN
		SET @SSQL1='UPDATE [RptBillTemplateFinal] SET [RptBillTemplateFinal].[Tax 3]=BillPrintTaxTemp.[Tax3Perc]
		FROM BillPrintTaxTemp WHERE [RptBillTemplateFinal].SalId=BillPrintTaxTemp.[SalId] AND [RptBillTemplateFinal].[Product Code]=BillPrintTaxTemp.[PrdCode]
		AND [RptBillTemplateFinal].[Batch Code] =BillPrintTaxTemp.[BatchCode]'
		EXEC (@SSQL1)
	END
	IF Exists(SELECT Name FROM dbo.sysColumns where id = object_id(N'RptBillTemplateFinal') and name='Tax Amount3')
	BEGIN
		SET @SSQL1='UPDATE [RptBillTemplateFinal] SET [RptBillTemplateFinal].[Tax Amount3] =BillPrintTaxTemp.[Tax3Amount]
		FROM BillPrintTaxTemp WHERE [RptBillTemplateFinal].SalId=BillPrintTaxTemp.[SalId] AND [RptBillTemplateFinal].[Product Code]=BillPrintTaxTemp.[PrdCode]
		AND [RptBillTemplateFinal].[Batch Code] =BillPrintTaxTemp.[BatchCode]'
		EXEC (@SSQL1)
	END
	IF Exists(SELECT Name FROM dbo.sysColumns where id = object_id(N'RptBillTemplateFinal') and name='Tax 4')
	BEGIN
		SET @SSQL1='UPDATE [RptBillTemplateFinal] SET [RptBillTemplateFinal].[Tax 4]=BillPrintTaxTemp.[Tax4Perc],[RptBillTemplateFinal].[Tax Amount4]=BillPrintTaxTemp.[Tax4Amount]
		FROM BillPrintTaxTemp WHERE [RptBillTemplateFinal].SalId=BillPrintTaxTemp.[SalId] AND [RptBillTemplateFinal].[Product Code]=BillPrintTaxTemp.[PrdCode]
		AND [RptBillTemplateFinal].[Batch Code] =BillPrintTaxTemp.[BatchCode]'
		EXEC (@SSQL1)
	END
	IF Exists(SELECT Name FROM dbo.sysColumns where id = object_id(N'RptBillTemplateFinal') and name='Tax Amount4')
	BEGIN
		SET @SSQL1='UPDATE [RptBillTemplateFinal] SET [RptBillTemplateFinal].[Tax Amount4]=BillPrintTaxTemp.[Tax4Amount]
		FROM BillPrintTaxTemp WHERE [RptBillTemplateFinal].SalId=BillPrintTaxTemp.[SalId] AND [RptBillTemplateFinal].[Product Code]=BillPrintTaxTemp.[PrdCode]
		AND [RptBillTemplateFinal].[Batch Code] =BillPrintTaxTemp.[BatchCode]'
		EXEC (@SSQL1)
	END
	IF Exists(SELECT Name FROM dbo.sysColumns where id = object_id(N'RptBillTemplateFinal') and name='Tax 5')
	BEGIN
		SET @SSQL1='UPDATE [RptBillTemplateFinal] SET [RptBillTemplateFinal].[Tax 5]=BillPrintTaxTemp.[Tax5Perc],[RptBillTemplateFinal].[Tax Amount5]=BillPrintTaxTemp.[Tax5Amount]
		FROM BillPrintTaxTemp WHERE [RptBillTemplateFinal].SalId=BillPrintTaxTemp.[SalId] AND [RptBillTemplateFinal].[Product Code]=BillPrintTaxTemp.[PrdCode]
		AND [RptBillTemplateFinal].[Batch Code] =BillPrintTaxTemp.[BatchCode]'
		EXEC (@SSQL1)
	END
	IF Exists(SELECT Name FROM dbo.sysColumns where id = object_id(N'RptBillTemplateFinal') and name='Tax Amount5')
	BEGIN
		SET @SSQL1='UPDATE [RptBillTemplateFinal] SET [RptBillTemplateFinal].[Tax Amount5]=BillPrintTaxTemp.[Tax5Amount]
		FROM BillPrintTaxTemp WHERE [RptBillTemplateFinal].SalId=BillPrintTaxTemp.[SalId] AND [RptBillTemplateFinal].[Product Code]=BillPrintTaxTemp.[PrdCode]
		AND [RptBillTemplateFinal].[Batch Code] =BillPrintTaxTemp.[BatchCode]'
		EXEC (@SSQL1)
	END
	--Till Here
	--- Sl No added  ---
	IF Exists(SELECT Name FROM dbo.sysColumns where id = object_id(N'RptBillTemplateFinal') and name='Product SL No')
	BEGIN
		SET @SSQL1='UPDATE [RptBillTemplateFinal] SET [RptBillTemplateFinal].[Product SL No]=SalesInvoiceProduct.[SlNo]
		FROM SalesInvoiceProduct,Product,ProductBatch WHERE [RptBillTemplateFinal].SalId=SalesInvoiceProduct.[SalId] AND [RptBillTemplateFinal].[Product Code]=Product.[PrdCCode]
		AND Product.Prdid=SalesInvoiceProduct.prdid
		And ProductBatch.Prdid=Product.Prdid and ProductBatch.PrdBatid=SalesInvoiceProduct.PrdBatId
		AND [RptBillTemplateFinal].[Batch Code] =ProductBatch.[PrdBatCode]'
		EXEC (@SSQL1)
	END	
	--- End Sl No
	--->Added By Nanda on 2011/02/24 for Henkel
	if not exists (Select Id,name from Syscolumns where name = 'Product Weight' and id in (Select id from 
		Sysobjects where name ='RptBillTemplateFinal'))
	begin
		ALTER TABLE [dbo].[RptBillTemplateFinal]
		ADD [Product Weight] NUMERIC(38,6) NULL DEFAULT 0 WITH VALUES
	END
	
	if not exists (Select Id,name from Syscolumns where name = 'Product UPC' and id in (Select id from 
		Sysobjects where name ='RptBillTemplateFinal'))
	begin
		ALTER TABLE [dbo].[RptBillTemplateFinal]
		ADD [Product UPC] NUMERIC(38,6) NULL DEFAULT 0 WITH VALUES
	END
		IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND b.name='GSTTIN')
	BEGIN
		ALTER TABLE RptBillTemplateFinal ADD GSTTIN VARCHAR(50) DEFAULT '' WITH VALUES
	END
	IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='PAN Number')
	BEGIN
		ALTER TABLE RptBillTemplateFinal ADD [Pan Number] VARCHAR(50) DEFAULT '' WITH VALUES
	END
	IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='Retailer Type')
	BEGIN
		ALTER TABLE RptBillTemplateFinal ADD [Retailer Type] VARCHAR(50) DEFAULT '' WITH VALUES
	END
	IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND b.name='Composite')
	BEGIN
		ALTER TABLE RptBillTemplateFinal ADD Composite VARCHAR(50) DEFAULT '' WITH VALUES
	END
	IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND b.name='RelatedParty')
	BEGIN
		ALTER TABLE RptBillTemplateFinal ADD RelatedParty VARCHAR(50) DEFAULT '' WITH VALUES
	END
	IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='State Name')
	BEGIN
		ALTER TABLE RptBillTemplateFinal ADD [State Name] VARCHAR(50) DEFAULT '' WITH VALUES
	END
	IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='State Code')
	BEGIN
		ALTER TABLE RptBillTemplateFinal ADD [State Code] VARCHAR(10) DEFAULT '' WITH VALUES
	END
	IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='StateTinNo')
	BEGIN
		ALTER TABLE RptBillTemplateFinal ADD [StateTinNo] VARCHAR(10) DEFAULT '' WITH VALUES
	END
	IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND b.name='HSNCode')
	BEGIN
		ALTER TABLE RptBillTemplateFinal ADD HSNCode VARCHAR(50) DEFAULT '' WITH VALUES
	END
	IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND b.name='HSNDescription')
	BEGIN
		ALTER TABLE RptBillTemplateFinal ADD HSNDescription VARCHAR(100) DEFAULT '' WITH VALUES
	END
	IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='DistributorGstTin')
	BEGIN
		ALTER TABLE RptBillTemplateFinal ADD DistributorGstTin VARCHAR(50) DEFAULT '' WITH VALUES
	END
	IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='DistributorStateName')
	BEGIN
		ALTER TABLE RptBillTemplateFinal ADD DistributorStateName VARCHAR(50) DEFAULT '' WITH VALUES
	END
	IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='Distributor Type')
	BEGIN
		ALTER TABLE RptBillTemplateFinal ADD [Distributor Type] VARCHAR(50) DEFAULT '' WITH VALUES
	END
	IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='AadharNo')
	BEGIN
		ALTER TABLE RptBillTemplateFinal ADD AadharNo VARCHAR(50) DEFAULT '' WITH VALUES
	END
	IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='DistributorStateCode')
	BEGIN
		ALTER TABLE RptBillTemplateFinal ADD DistributorStateCode VARCHAR(10) DEFAULT '' WITH VALUES
	END
	IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='DistributorStateTinNo')
	BEGIN
		ALTER TABLE RptBillTemplateFinal ADD DistributorStateTinNo VARCHAR(10) DEFAULT '' WITH VALUES
	END		
	IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='Dist Food Lic No')
	BEGIN
		ALTER TABLE RptBillTemplateFinal ADD [Dist Food Lic No] VARCHAR(50) DEFAULT '' WITH VALUES
	END
	IF NOT EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='Dist Drug Lic no')
	BEGIN
		ALTER TABLE RptBillTemplateFinal ADD [Dist Drug Lic no] VARCHAR(50) DEFAULT '' WITH VALUES
	END
	IF NOT EXISTS(SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='SalesInvoice NetAmount Actual')
	BEGIN
		ALTER  TABLE RptBillTemplateFinal ADD [SalesInvoice NetAmount Actual] Numeric(18,2)
	END

	
	IF Exists(SELECT Name FROM dbo.sysColumns where id = object_id(N'RptBillTemplateFinal') and name='Product Weight')
	BEGIN
		SET @SSQL1='UPDATE Rpt SET Rpt.[Product Weight]=P.PrdWgt*(CASE P.PrdUnitId WHEN 2 THEN Rpt.[Base Qty]/1000 ELSE Rpt.[Base Qty] END)
		FROM Product P,RptBillTemplateFinal Rpt WHERE P.PrdCCode=Rpt.[Product Code] AND P.PrdUnitId IN (2,3)'
		EXEC (@SSQL1)
	END
	IF Exists(SELECT Name FROM dbo.sysColumns where id = object_id(N'RptBillTemplateFinal') and name='Product UPC')
	BEGIN
		SET @SSQL1='UPDATE Rpt SET Rpt.[Product UPC]=Rpt.[Base Qty]/P.ConversionFactor 
					FROM 
					(
						SELECT P.PrdId,P.PrdCCode,MAX(U.ConversionFactor)AS ConversionFactor FROM Product P,UOMGroup U
						WHERE P.UOMGroupId=U.UOMGroupId
						GROUP BY P.PrdId,P.PrdCCode
					) P,RptBillTemplateFinal Rpt WHERE P.PrdCCode=Rpt.[Product Code]'
		EXEC (@SSQL1)
	END
	--->Till Here
	--Check for Report Data
	Delete From RptDataCount Where RptId = @Pi_RptId AND UserId = @Pi_UsrId
	INSERT INTO RptDataCount (RptId,RecCount,ErrNo,UserId)
	SELECT @Pi_RptId,Count(*) as RecCount,@ErrNo,@Pi_UsrId FROM RptBillTemplateFinal
	-- Till Here
	Delete From RptBillTemplate_Tax Where UsrId = @Pi_UsrId
	Delete From RptBillTemplate_Other Where UsrId = @Pi_UsrId
	Delete From RptBillTemplate_Replacement Where UsrId = @Pi_UsrId
	Delete From RptBillTemplate_CrDbAdjustment Where UsrId = @Pi_UsrId
	Delete From RptBillTemplate_MarketReturn Where UsrId = @Pi_UsrId
	Delete From RptBillTemplate_SampleIssue Where UsrId = @Pi_UsrId
	Delete From RptBillTemplate_Scheme Where UsrId = @Pi_UsrId
	Delete From RptBillTemplate_PrdUOMDetails Where UsrId = @Pi_UsrId
	---------------------------------TAX (SubReport)
--	Select @Sub_Val = TaxDt  FROM BillTemplateHD WHERE TempName=substring(@Pi_BTTblName,18,len(@Pi_BTTblName))
--	If @Sub_Val = 1
--	Begin
        DELETE FROM RptBillTemplate_Tax WHERE UsrId = @Pi_UsrId    
		Insert into RptBillTemplate_Tax(SalId,SalInvNo,PrdSlNo,TaxId,TaxCode,TaxName,TaxPerc,TaxableAmount,TaxAmount,UsrId)
		SELECT SI.SalId,S.SalInvNo,0,SI.TaxId,TaxCode,TaxName,TaxPerc,SUM(TaxableAmount),SUM(TaxAmount),@Pi_UsrId
		FROM SalesInvoiceProductTax SI , TaxConfiguration T,SalesInvoice S,RptBillToPrint B
		WHERE SI.TaxId = T.TaxId and SI.SalId = S.SalId and S.SalInvNo = B.[Bill Number] and B.UsrId = @Pi_UsrId
		GROUP BY SI.SalId,S.SalInvNo,SI.TaxId,TaxCode,TaxName,TaxPerc HAVING SUM(TaxableAmount) > 0 --Muthuvel
--	End
	------------------------------ Other
	--Select @Sub_Val = OtherCharges FROM BillTemplateHD WHERE TempName=substring(@Pi_BTTblName,18,len(@Pi_BTTblName))
	--If @Sub_Val = 1
	--Begin
	    Delete From RptBillTemplate_Other Where UsrId = @Pi_UsrId
		Insert into RptBillTemplate_Other(SalId,SalInvNo,AccDescId,Description,Effect,Amount,UsrId)
		SELECT SI.SalId,S.SalInvNo,
		SI.AccDescId,P.Description,Case P.Effect When 0 Then 'Add' else 'Reduce' End Effect,
		Adjamt Amount,@Pi_UsrId
		FROM SalInvOtherAdj SI,PurSalAccConfig P,SalesInvoice S,RptBillToPrint B
		WHERE P.TransactionId = 2
		and SI.AccDescId = P.AccDescId
		and SI.SalId = S.SalId
		and S.SalInvNo = B.[Bill Number]
	--End
	---------------------------------------Replacement
	--Select @Sub_Val = Replacement FROM BillTemplateHD WHERE TempName=substring(@Pi_BTTblName,18,len(@Pi_BTTblName))
	--If @Sub_Val = 1
	--Begin
		Delete From RptBillTemplate_Replacement Where UsrId = @Pi_UsrId
		Insert into RptBillTemplate_Replacement(SalId,SalInvNo,RepRefNo,PrdId,PrdName,PrdBatId,PrdBatCode,Qty,Rate,Tax,Amount,UsrId)
		SELECT H.SalId,SI.SalInvNo,H.RepRefNo,D.PrdId,P.PrdName,D.PrdBatId,PB.PrdBatCode,RepQty,SelRte,Tax,RepAmount,@Pi_UsrId
		FROM ReplacementHd H, ReplacementOut D, Product P, ProductBatch PB,SalesInvoice SI,RptBillToPrint B
		WHERE H.SalId <> 0
		and H.RepRefNo = D.RepRefNo
		and D.PrdId = P.PrdId
		and D.PrdBatId = PB.PrdBatId
		and H.SalId = SI.SalId
		and SI.SalInvNo = B.[Bill Number]
	--End
	----------------------------------Credit Debit Adjus
	--Select @Sub_Val = CrDbAdj  FROM BillTemplateHD WHERE TempName=substring(@Pi_BTTblName,18,len(@Pi_BTTblName))
	--If @Sub_Val = 1
	--Begin
	    Delete From RptBillTemplate_CrDbAdjustment Where UsrId = @Pi_UsrId
		Insert into RptBillTemplate_CrDbAdjustment(SalId,SalInvNo,NoteNumber,Amount,UsrId)
		Select A.SalId,S.SalInvNo,CrNoteNumber,A.CrAdjAmount,@Pi_UsrId
		from SalInvCrNoteAdj A,SalesInvoice S,RptBillToPrint B
		Where A.SalId = s.SalId
		and S.SalInvNo = B.[Bill Number]
		Union All
		Select A.SalId,S.SalInvNo,DbNoteNumber,A.DbAdjAmount,@Pi_UsrId
		from SalInvDbNoteAdj A,SalesInvoice S,RptBillToPrint B
		Where A.SalId = s.SalId
		and S.SalInvNo = B.[Bill Number]
	--End
	---------------------------------------Market Return
--	Select @Sub_Val = MarketRet FROM BillTemplateHD WHERE TempName=substring(@Pi_BTTblName,18,len(@Pi_BTTblName))
--	If @Sub_Val = 1
--	Begin
		Delete from RptBillTemplate_MarketReturn where UsrId = @Pi_UsrId
		Insert into RptBillTemplate_MarketReturn(Type,SalId,SalInvNo,PrdId,PrdName,PrdBatId,PrdBatCode,Qty,Amount,UsrId)
		Select 'Market Return' Type ,H.SalId,S.SalInvNo,D.PrdId,P.PrdName,
		D.PrdBatId,PB.PrdBatCode,BaseQty,PrdNetAmt,@Pi_UsrId
		From ReturnHeader H,ReturnProduct D,Product P,ProductBatch PB,SalesInvoice S,RptBillToPrint B
		Where returntype = 1
		and H.ReturnID = D.ReturnID
		and D.PrdId = P.PrdId
		and D.PrdBatId = PB.PrdBatId
		and H.SalId = S.SalId
		and S.SalInvNo = B.[Bill Number]
		Union ALL
		Select 'Market Return Free Product' Type,D.SalId,S.SalInvNo,D.PrdId,P.PrdName,
		D.PrdBatId,PB.PrdBatCode,D.BaseQty,GrossAmount,@Pi_UsrId
		From ReturnPrdHdForScheme D,Product P,ProductBatch PB,SalesInvoice S,RptBillToPrint B,ReturnHeader H,ReturnProduct T
		WHERE returntype = 1 AND
		D.PrdId = P.PrdId
		and D.PrdBatId = PB.PrdBatId
		and H.SalId = T.SalId
		and H.ReturnID = T.ReturnID
		and S.SalInvNo = B.[Bill Number]
--	End
	------------------------------ SampleIssue
	Select @Sub_Val = SampleIssue FROM BillTemplateHD WHERE TempName=substring(@Pi_BTTblName,18,len(@Pi_BTTblName))
	If @Sub_Val = 1
	Begin
		Insert into RptBillTemplate_SampleIssue(SalId,SalInvNo,SchId,SchCode,SchName,PrdId,PrdCCode,CmpId,CmpCode,
		CmpName,PrdDCode,PrdShrtName,PrdBatId,PrdBatCode,UomId,UomCode,Qty,TobeReturned,DueDate,UsrId)
		SELECT A.SalId,C.SalInvNo,D.SchId,D.SchCode,D.SchDsc,B.PrdId,
		E.PrdCCode,E.CmpId,F.CmpCode,F.CmpName,E.PrdDCode,E.PrdShrtName,B.PrdBatId,G.PrdBatCode,
		B.IssueUomID,H.UomCode,B.IssueQty,CASE B.TobeReturned WHEN 0 THEN 'No' ELSE 'Yes' END AS TobeReturned,
		B.DueDate,@Pi_UsrId
		FROM SampleIssueHd A WITH (NOLOCK)
		INNER JOIN SampleIssueDt B WITH(NOLOCK)ON A.IssueId=B.IssueID
		INNER JOIN SalesInvoice C WITH(NOLOCK)ON A.SalId=C.SalId
		INNER JOIN SampleSchemeMaster D WITH(NOLOCK)ON B.SchId=D.SchId
		INNER JOIN Product E WITH (NOLOCK) ON B.PrdID=E.PrdId
		INNER JOIN Company F WITH (NOLOCK) ON E.CmpId=F.CmpId
		INNER JOIN ProductBatch G WITH (NOLOCK) ON E.PrdID=G.PrdID AND B.PrdBatId=G.PrdBatId
		INNER JOIN UOMMaster H WITH (NOLOCK) ON B.IssueUomID=H.UomID
		INNER JOIN RptBillToPrint I WITH (NOLOCK) ON C.SalInvNo=I.[Bill Number]
	End
	--->Added By Nanda on 10/03/2010
	------------------------------ Scheme
	Select @Sub_Val = [Scheme] FROM BillTemplateHD WHERE TempName=SUBSTRING(@Pi_BTTblName,18,LEN(@Pi_BTTblName))
	If @Sub_Val = 1
	Begin
		INSERT INTO RptBillTemplate_Scheme(SalId,SalInvNo,SchId,SchType,CmpSchCode,SchCode,SchName,PrdId,PrdCCode,PrdDCode,
		PrdShrtName,PrdName,PrdBatId,PrdBatCode,Qty,Rate,SchemeValueInAmt,SchemeValueInPoints,SalInvSchemeValue,SchemeCumulativePoints,UsrId)
		SELECT SI.SalId,SI.SalInvNo,SISL.SchId,(CASE SM.SchType WHEN 1 THEN 'Quantity' WHEN 2 THEN 'Amount' WHEN 3 THEN 'Weight'
		WHEN 4 THEN 'Window Display' END),SM.CmpSchCode,SM.SchCode,SM.SchDsc,0,'','','','',
		0,'',0,0,SUM(SISL.DiscountPerAmount+SISL.FlatAmount),0,0,0,@Pi_UsrId
		FROM SalesInvoice SI,SalesInvoiceSchemeLineWise SISL,SchemeMaster SM,RptBillToPrint RBT
		WHERE SISL.SchId=SM.SchId AND SI.SalId=SISL.SalId AND RBT.[Bill Number]=SI.SalInvNo
		GROUP BY SI.SalId,SI.SalInvNo,SISL.SchId,SM.SchType,SM.CmpSchCode,SM.SchCode,SM.SchDsc
		HAVING SUM(SISL.DiscountPerAmount+SISL.FlatAmount)>0
		INSERT INTO RptBillTemplate_Scheme(SalId,SalInvNo,SchId,SchType,CmpSchCode,SchCode,SchName,PrdId,PrdCCode,PrdDCode,
		PrdShrtName,PrdName,PrdBatId,PrdBatCode,Qty,Rate,SchemeValueInAmt,SchemeValueInPoints,SalInvSchemeValue,SchemeCumulativePoints,UsrId)
		SELECT SI.SalId,SI.SalInvNo,SISFP.SchId,(CASE SM.SchType WHEN 1 THEN 'Quantity' WHEN 2 THEN 'Amount' WHEN 3 THEN 'Weight'
		WHEN 4 THEN 'Window Display' END),SM.CmpSchCode,SM.SchCode,SM.SchDsc,SISFP.FreePrdId,P.PrdCCode,P.PrdDCode,P.PrdShrtName,P.PrdName,
		SISFP.FreePrdBatId,PB.PrdBatCode,SISFP.FreeQty,PBD.PrdBatDetailValue,SISFP.FreeQty*PBD.PrdBatDetailValue,0,0,0,@Pi_UsrId
		FROM SalesInvoice SI,SalesInvoiceSchemeDtFreePrd SISFP,SchemeMaster SM,RptBillToPrint RBT,Product P,ProductBatch PB,
		ProductBatchDetails PBD,BatchCreation BC
		WHERE SISFP.SchId=SM.SchId AND SI.SalId=SISFP.SalId AND RBT.[Bill Number]=SI.SalInvNo
		AND SISFP.FreePrdId=P.PrdId AND SISFP.FreePrdBatId=PB.PrdBatId AND PB.PrdBatId=PBD.PrdBatId AND
		PBD.DefaultPrice=1 AND PBD.BatchSeqId=BC.BatchSeqId AND BC.SlNo=PBD.SlNo AND BC.SelRte=1
		INSERT INTO RptBillTemplate_Scheme(SalId,SalInvNo,SchId,SchType,CmpSchCode,SchCode,SchName,PrdId,PrdCCode,PrdDCode,
		PrdShrtName,PrdName,PrdBatId,PrdBatCode,Qty,Rate,SchemeValueInAmt,SchemeValueInPoints,SalInvSchemeValue,SchemeCumulativePoints,UsrId)
		SELECT SI.SalId,SI.SalInvNo,SISFP.SchId,(CASE SM.SchType WHEN 1 THEN 'Quantity' WHEN 2 THEN 'Amount' WHEN 3 THEN 'Weight'
		WHEN 4 THEN 'Window Display' END),SM.CmpSchCode,SM.SchCode,SM.SchDsc,SISFP.GiftPrdId,P.PrdCCode,P.PrdDCode,P.PrdShrtName,P.PrdName,
		SISFP.GiftPrdBatId,PB.PrdBatCode,SISFP.GiftQty,PBD.PrdBatDetailValue,SISFP.GiftQty*PBD.PrdBatDetailValue,0,0,0,@Pi_UsrId
		FROM SalesInvoice SI,SalesInvoiceSchemeDtFreePrd SISFP,SchemeMaster SM,RptBillToPrint RBT,Product P,ProductBatch PB,
		ProductBatchDetails PBD,BatchCreation BC
		WHERE SISFP.SchId=SM.SchId AND SI.SalId=SISFP.SalId AND RBT.[Bill Number]=SI.SalInvNo
		AND SISFP.GiftPrdId=P.PrdId AND SISFP.GiftPrdBatId=PB.PrdBatId AND PB.PrdBatId=PBD.PrdBatId AND
		PBD.DefaultPrice=1 AND PBD.BatchSeqId=BC.BatchSeqId AND BC.SlNo=PBD.SlNo AND BC.SelRte=1
		INSERT INTO RptBillTemplate_Scheme(SalId,SalInvNo,SchId,SchType,CmpSchCode,SchCode,SchName,PrdId,PrdCCode,PrdDCode,
		PrdShrtName,PrdName,PrdBatId,PrdBatCode,Qty,Rate,SchemeValueInAmt,SchemeValueInPoints,SalInvSchemeValue,SchemeCumulativePoints,UsrId)
		SELECT SI.SalId,SI.SalInvNo,SIWD.SchId,(CASE SM.SchType WHEN 1 THEN 'Quantity' WHEN 2 THEN 'Amount' WHEN 3 THEN 'Weight'
		WHEN 4 THEN 'Window Display' END),SM.CmpSchCode,SM.SchCode,SM.SchDsc,0,'','','','',
		0,'',0,0,SUM(SIWD.AdjAmt),0,0,0,@Pi_UsrId
		FROM SalesInvoice SI,SalesInvoiceWindowDisplay SIWD,SchemeMaster SM,RptBillToPrint RBT
		WHERE SIWD.SchId=SM.SchId AND SI.SalId=SIWD.SalId AND RBT.[Bill Number]=SI.SalInvNo
		GROUP BY SI.SalId,SI.SalInvNo,SIWD.SchId,SM.SchType,SM.CmpSchCode,SM.SchCode,SM.SchDsc
		UPDATE RPT SET SalInvSchemeValue=A.SalInvSchemeValue
		FROM RptBillTemplate_Scheme RPT,(SELECT SalId,SUM(SchemeValueInAmt) AS SalInvSchemeValue FROM RptBillTemplate_Scheme GROUP BY SalId)A
		WHERE A.SAlId=RPT.SalId
		--->Added By Jay on 09/12/2010
		INSERT INTO RptBillTemplate_Scheme(SalId,SalInvNo,SchId,SchType,CmpSchCode,SchCode,SchName,PrdId,PrdCCode,PrdDCode,
		PrdShrtName,PrdName,PrdBatId,PrdBatCode,Qty,Rate,SchemeValueInAmt,SchemeValueInPoints,SalInvSchemeValue,SchemeCumulativePoints,UsrId)
		SELECT SI.SalId,SI.SalInvNo,SISFP.SchId,(CASE SM.SchType WHEN 1 THEN 'Quantity' WHEN 2 THEN 'Amount' WHEN 3 THEN 'Weight'
		WHEN 4 THEN 'Window Display' END),SM.CmpSchCode,SM.SchCode,SM.SchDsc,SISFP.PrdId,P.PrdCCode,P.PrdDCode,P.PrdShrtName,P.PrdName,
		SISFP.PrdBatId,PB.PrdBatCode,0,PBD.PrdBatDetailValue,0,SUM(Points),0,0,@Pi_UsrId
		FROM SalesInvoice SI,SalesInvoiceSchemeDtPoints SISFP,SchemeMaster SM,
		RptBillToPrint RBT,Product P,ProductBatch PB,ProductBatchDetails PBD,BatchCreation BC
		WHERE SI.SalId=SISFP.SalId AND SISFP.SchId=SM.SchId AND RBT.[Bill Number]=SI.SalInvNo
		AND SISFP.PrdId=P.PrdId AND SISFP.PrdBatId=PB.PrdBatId AND RBT.UsrId=@Pi_UsrId
		AND PB.PrdBatId=PBD.PrdBatId AND PBD.DefaultPrice=1 AND PBD.BatchSeqId=BC.BatchSeqId AND BC.SlNo=PBD.SlNo AND BC.SelRte=1 AND LEN(SISFP.ReDimRefId)=0		
		GROUP BY SI.SalId,SI.SalInvNo,SISFP.SchId,SM.SchType,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SISFP.PrdId,P.PrdCCode,P.PrdDCode,P.PrdShrtName,
		P.PrdName,SISFP.PrdBatId,PB.PrdBatCode,PBD.PrdBatDetailValue
		--->Till Here
		--->Added By Nanda on 22/12/2010 
		UPDATE R SET SchemeCumulativePoints=A.CumulativePoints
		FROM RptBillTemplate_Scheme R,SalesInvoice SI,
		(SELECT SI.RtrId,SISP.SchId,SUM(SISP.Points-SISP.ReturnPoints) AS CumulativePoints
		FROM SalesInvoiceSchemeDtPoints SISP
		INNER JOIN SalesInvoice SI ON SI.SalId=SISP.SalId AND SI.DlvSts<>3
		--INNER JOIN RptBillToPrint R ON R.[Bill Number]=SI.SalInvNo
		GROUP BY SI.RtrId,SISP.SchId) A
		WHERE R.SalId=SI.SalId AND A.RtrId=SI.RtrId
		--->Till Here		
	End
	--->Till Here	
	--->Added By Nanda on 14/03/2011
	------------------------------ Prd UOM Details
	--INSERT INTO RptBillTemplate_PrdUOMDetails(SalId,SalInvNo,TotPrdVolume,TotPrdKG,TotPrdLtrs,TotPrdUnits,
	--TotPrdDrums,TotPrdCartons,TotPrdBuckets,TotPrdPieces,TotPrdBags,UsrId)	
	--SELECT SalId,SalInvNo,SUM(TotPrdVolume) AS TotPrdVolume,SUM(TotPrdKG) AS TotPrdKG,SUM(TotPrdLtrs) AS TotPrdLtrs,SUM(TotPrdUnits) AS TotPrdUnits,
	--SUM(TotPrdDrums) AS TotPrdDrums,SUM(TotPrdCartons) AS TotPrdCartons,SUM(TotPrdBuckets) AS TotPrdBuckets,SUM(TotPrdPieces) AS TotPrdPieces,SUM(TotPrdBags) AS TotPrdBags,@Pi_UsrId
	--FROM
	--(
	--	SELECT DISTINCT SI.SalId,SI.SalInvNo,SIP.PrdId,SIP.BaseQty*dbo.Fn_ReturnProductVolumeInLtrs(SIP.PrdId) AS TotPrdVolume,
	--	SIP.BaseQty*P.PrdUpSKU * (CASE P.PrdUnitId WHEN 2 THEN .001 WHEN 3 THEN 1 ELSE 0 END) AS TotPrdKG,
	--	SIP.BaseQty * P.PrdWgt * (CASE P.PrdUnitId WHEN 4 THEN .001 WHEN 5 THEN 1 ELSE 0 END) AS TotPrdLtrs,
	--	SIP.BaseQty*(CASE P.PrdUnitId WHEN 1 THEN 0 ELSE 0 END) AS TotPrdUnits,
	--	(CASE ISNULL(UMP1.UOMId,0) WHEN 0 THEN 0 ELSE ISNULL(SIPP1.UOM1Qty,0) END)+
	--	(CASE ISNULL(UMP2.UOMId,0) WHEN 0 THEN 0 ELSE ISNULL(SIPP2.UOM2Qty,0) END) AS TotPrdPieces,
	--	(CASE ISNULL(UMBU1.UOMId,0) WHEN 0 THEN 0 ELSE ISNULL(SIPBU1.UOM1Qty,0) END)+
	--	(CASE ISNULL(UMBU2.UOMId,0) WHEN 0 THEN 0 ELSE ISNULL(SIPBU2.UOM2Qty,0) END) AS TotPrdBuckets,
	--	(CASE ISNULL(UMBA1.UOMId,0) WHEN 0 THEN 0 ELSE ISNULL(SIPBA1.UOM1Qty,0) END)+
	--	(CASE ISNULL(UMBA2.UOMId,0) WHEN 0 THEN 0 ELSE ISNULL(SIPBA2.UOM2Qty,0) END) AS TotPrdBags,
	--	(CASE ISNULL(UMDR1.UOMId,0) WHEN 0 THEN 0 ELSE ISNULL(SIPDR1.UOM1Qty,0) END)+
	--	(CASE ISNULL(UMDR2.UOMId,0) WHEN 0 THEN 0 ELSE ISNULL(SIPDR2.UOM2Qty,0) END) AS TotPrdDrums,
	--	(CASE ISNULL(UMCA1.UOMId,0) WHEN 0 THEN 0 ELSE ISNULL(SIPCA1.UOM1Qty,0) END)+
	--	(CASE ISNULL(UMCA2.UOMId,0) WHEN 0 THEN 0 ELSE ISNULL(SIPCA2.UOM2Qty,0) END)+ 
	--	CEILING((CASE ISNULL(UMCN1.UOMId,0) WHEN 0 THEN 0 ELSE CAST(ISNULL(SIPCN1.UOM1Qty,0) AS NUMERIC(38,6))/CAST(UGC1.ConvFact AS NUMERIC(38,6)) END))+
	--	CEILING((CASE ISNULL(UMCN2.UOMId,0) WHEN 0 THEN 0 ELSE CAST(ISNULL(SIPCN2.UOM2Qty,0) AS NUMERIC(38,6))/CAST(UGC2.ConvFact AS NUMERIC(38,6)) END)) AS TotPrdCartons
	--	FROM SalesInvoice SI INNER JOIN SalesInvoiceProduct SIP ON SI.SalId=SIP.SalId
	--	INNER JOIN RptBillToPrint Rpt ON SI.SalInvNo = Rpt.[Bill Number] AND Rpt.UsrId=@Pi_UsrId
	--	INNER JOIN Product P ON SIP.PrdID=P.PrdID
	--	INNER JOIN ProductBatch PB ON SIP.PrdBatID=PB.PrdBatID AND P.PrdID=PB.PrdId
	--	LEFT OUTER JOIN SalesInvoiceProduct SIPP1 ON SI.SalId=SIPP1.SalId AND SIP.PrdID=SIPP1.PrdID AND SIP.PrdBatID=SIPP1.PrdBatID
	--	LEFT OUTER JOIN SalesInvoiceProduct SIPP2 ON SI.SalId=SIPP2.SalId AND SIP.PrdID=SIPP2.PrdID AND SIP.PrdBatID=SIPP2.PrdBatID
	--	LEFT OUTER JOIN SalesInvoiceProduct SIPBU1 ON SI.SalId=SIPBU1.SalId AND SIP.PrdID=SIPBU1.PrdID AND SIP.PrdBatID=SIPBU1.PrdBatID
	--	LEFT OUTER JOIN SalesInvoiceProduct SIPBU2 ON SI.SalId=SIPBU2.SalId AND SIP.PrdID=SIPBU2.PrdID AND SIP.PrdBatID=SIPBU2.PrdBatID		
	--	LEFT OUTER JOIN SalesInvoiceProduct SIPBA1 ON SI.SalId=SIPBA1.SalId AND SIP.PrdID=SIPBA1.PrdID AND SIP.PrdBatID=SIPBA1.PrdBatID
	--	LEFT OUTER JOIN SalesInvoiceProduct SIPBA2 ON SI.SalId=SIPBA2.SalId AND SIP.PrdID=SIPBA2.PrdID AND SIP.PrdBatID=SIPBA2.PrdBatID
	--	LEFT OUTER JOIN SalesInvoiceProduct SIPDR1 ON SI.SalId=SIPDR1.SalId AND SIP.PrdID=SIPDR1.PrdID AND SIP.PrdBatID=SIPDR1.PrdBatID
	--	LEFT OUTER JOIN SalesInvoiceProduct SIPDR2 ON SI.SalId=SIPDR2.SalId AND SIP.PrdID=SIPDR2.PrdID AND SIP.PrdBatID=SIPDR2.PrdBatID
	--	LEFT OUTER JOIN SalesInvoiceProduct SIPCA1 ON SI.SalId=SIPCA1.SalId AND SIP.PrdID=SIPCA1.PrdID AND SIP.PrdBatID=SIPCA1.PrdBatID
	--	LEFT OUTER JOIN SalesInvoiceProduct SIPCA2 ON SI.SalId=SIPCA2.SalId AND SIP.PrdID=SIPCA2.PrdID AND SIP.PrdBatID=SIPCA2.PrdBatID
	--	LEFT OUTER JOIN SalesInvoiceProduct SIPCN1 ON SI.SalId=SIPCN1.SalId AND SIP.PrdID=SIPCN1.PrdID AND SIP.PrdBatID=SIPCN1.PrdBatID
	--	LEFT OUTER JOIN SalesInvoiceProduct SIPCN2 ON SI.SalId=SIPCN2.SalId AND SIP.PrdID=SIPCN2.PrdID AND SIP.PrdBatID=SIPCN2.PrdBatID
	--	LEFT OUTER JOIN UOMMaster UMP1 ON UMP1.UOMId=SIPP1.UOM1Id AND UMP1.UOMDescription='PIECES'
	--	LEFT OUTER JOIN UOMMaster UMP2 ON UMP1.UOMId=SIPP2.UOM2Id AND UMP2.UOMDescription='PIECES'
	--	LEFT OUTER JOIN UOMMaster UMBU1 ON UMBU1.UOMId=SIPBU1.UOM1Id AND UMBU1.UOMDescription='BUCKETS' 
	--	LEFT OUTER JOIN UOMMaster UMBU2 ON UMBU1.UOMId=SIPBU2.UOM2Id AND UMBU2.UOMDescription='BUCKETS'
	--	LEFT OUTER JOIN UOMMaster UMBA1 ON UMBA1.UOMId=SIPBA1.UOM1Id AND UMBA1.UOMDescription='BAGS' 
	--	LEFT OUTER JOIN UOMMaster UMBA2 ON UMBA1.UOMId=SIPBA2.UOM2Id AND UMBA2.UOMDescription='BAGS'
	--	LEFT OUTER JOIN UOMMaster UMDR1 ON UMDR1.UOMId=SIPDR1.UOM1Id AND UMDR1.UOMDescription='DRUMS' 
	--	LEFT OUTER JOIN UOMMaster UMDR2 ON UMDR1.UOMId=SIPDR2.UOM2Id AND UMDR2.UOMDescription='DRUMS'
	--	LEFT OUTER JOIN UOMMaster UMCA1 ON UMCA1.UOMId=SIPCA1.UOM1Id AND UMCA1.UOMDescription='CARTONS' 
	--	LEFT OUTER JOIN UOMMaster UMCA2 ON UMCA1.UOMId=SIPCA2.UOM2Id AND UMCA2.UOMDescription='CARTONS'
	--	LEFT OUTER JOIN UOMMaster UMCN1 ON UMCN1.UOMId=SIPCN1.UOM1Id AND UMCN1.UOMDescription='CANS' 
	--	LEFT OUTER JOIN UOMMaster UMCN2 ON UMCN1.UOMId=SIPCN2.UOM2Id AND UMCN2.UOMDescription='CANS'
	--	LEFT OUTER JOIN (
	--	SELECT P.PrdId,MAX(UG.ConversionFactor) AS ConvFact FROM Product P,UOMGroup UG
	--	WHERE P.UOMGroupId=UG.UOMGroupId AND UG.UOMGroupId IN ( 
	--	SELECT UOMGroupId FROM UOMGroup WHERE UOMId IN (SELECT UOMId FROM UOMMAster WHERE UOMDescription LIKE 'CANS') )
	--	GROUP BY P.PrdID) UGC1 ON SIPCN1.PrdId=UGC1.PrdID
	--	LEFT OUTER JOIN (
	--	SELECT P.PrdId,MAX(UG.ConversionFactor) AS ConvFact FROM Product P,UOMGroup UG
	--	WHERE P.UOMGroupId=UG.UOMGroupId AND UG.UOMGroupId IN ( 
	--	SELECT UOMGroupId FROM UOMGroup WHERE UOMId IN (SELECT UOMId FROM UOMMAster WHERE UOMDescription LIKE 'CANS') )
	--	GROUP BY P.PrdID) UGC2 ON SIPCN2.PrdId=UGC2.PrdID
	--) A
	--GROUP BY SalId,SalInvNo
	--->Till Here
	--Added By Sathishkumar Veeramani 2012/12/13
	IF NOT EXISTS (SELECT * FROM Syscolumns WHERE ID IN (SELECT ID FROM Sysobjects WHERE XTYPE = 'U' AND name = 'RptBillTemplateFinal')AND name = 'Payment Mode')
	BEGIN
	     ALTER TABLE RptBillTemplateFinal ADD [Payment Mode] NVARCHAR(20)
	END
	IF Exists(SELECT * FROM Syscolumns WHERE ID IN (SELECT ID FROM Sysobjects WHERE XTYPE = 'U' AND name = 'RptBillTemplateFinal')AND name = 'Payment Mode')    
	BEGIN    
		SET @SSQL1='UPDATE A SET A.[Payment Mode] = Z.[Payment Mode] FROM RptBillTemplateFinal A INNER JOIN 
					(SELECT SalId,(CASE RtrPayMode WHEN 1 THEN ''Cash'' ELSE ''Cheque'' END) AS [Payment Mode] FROM SalesInvoice WITH (NOLOCK)) Z ON A.Salid = Z.SalId 
					AND A.UsrId='+ CAST(@Pi_UsrId AS VARCHAR(10))       
		EXEC (@SSQL1)    
	END
	--Till Here
	--->Added By Nanda on 23/03/2010-For Grouping the details based on product for nondrug products
	IF EXISTS(SELECT * FROM Configuration WHERE ModuleId='BotreeBillPrinting01' AND ModuleName='Botree Bill Printing' AND Status=1)
	BEGIN
		IF EXISTS (SELECT * FROM dbo.SysObjects WHERE Id = Object_Id(N'[RptBillTemplateFinal_Group]') AND OBJECTPROPERTY(Id, N'IsUserTable') = 1)
		DROP TABLE [RptBillTemplateFinal_Group]
		SELECT * INTO RptBillTemplateFinal_Group FROM RptBillTemplateFinal
		DELETE FROM RptBillTemplateFinal
		INSERT INTO RptBillTemplateFinal
		(
			[SalId],[Sales Invoice Number],[Product Code],[Product Name],[Product Short Name],[Product SL No],[Product Type],[Scheme Points],
			[Base Qty],[Batch Code],[Batch Expiry Date],[Batch Manufacturing Date],
			[Batch MRP],[Batch Selling Rate],[Bill Date],[Bill Doc Ref. Number],[Bill Mode],[Bill Type],
			[CD Disc Base Qty Amount],[CD Disc Effect Amount],
			[CD Disc Header Amount],[CD Disc LineUnit Amount],
			[CD Disc Qty Percentage],[CD Disc Unit Percentage],
			[CD Disc UOM Amount],[CD Disc UOM Percentage],
			[DB Disc Base Qty Amount],[DB Disc Effect Amount],
			[DB Disc Header Amount],[DB Disc LineUnit Amount],
			[DB Disc Qty Percentage],[DB Disc Unit Percentage],
			[DB Disc UOM Amount],[DB Disc UOM Percentage],
			[Line Base Qty Amount],[Line Base Qty Percentage],
			[Line Effect Amount],[Line Unit Amount],
			[Line Unit Percentage],[Line UOM1 Amount],[Line UOM1 Percentage],
			[Manual Free Qty],
			[Sch Disc Base Qty Amount],[Sch Disc Effect Amount],
			[Sch Disc Header Amount],[Sch Disc LineUnit Amount],
			[Sch Disc Qty Percentage],[Sch Disc Unit Percentage],
			[Sch Disc UOM Amount],[Sch Disc UOM Percentage],
			[Spl. Disc Base Qty Amount],[Spl. Disc Effect Amount],
			[Spl. Disc Header Amount],[Spl. Disc LineUnit Amount],
			[Spl. Disc Qty Percentage],[Spl. Disc Unit Percentage],
			[Spl. Disc UOM Amount],[Spl. Disc UOM Percentage],
			[Tax 1],[Tax 2],[Tax 3],[Tax 4],
			[Tax Amount1],[Tax Amount2],[Tax Amount3],[Tax Amount4],
			[Tax Amt Base Qty Amount],[Tax Amt Effect Amount],
			[Tax Amt Header Amount],[Tax Amt LineUnit Amount],
			[Tax Amt Qty Percentage],[Tax Amt Unit Percentage],
			[Tax Amt UOM Amount],[Tax Amt UOM Percentage],
			[Uom 1 Desc],[Uom 1 Qty],[Uom 2 Desc],[Uom 2 Qty],[Vehicle Name],
			[SalesInvoice ActNetRateAmount],[SalesInvoice CDPer],[SalesInvoice CRAdjAmount],[SalesInvoice DBAdjAmount],[SalesInvoice GrossAmount],
			[SalesInvoice Line Gross Amount],[SalesInvoice Line Net Amount],
			[SalesInvoice MarketRetAmount],[SalesInvoice NetAmount],[SalesInvoice NetRateDiffAmount],
			[SalesInvoice OnAccountAmount],[SalesInvoice OtherCharges],[SalesInvoice RateDiffAmount],[SalesInvoice ReplacementDiffAmount],[SalesInvoice RoundOffAmt],
			[SalesInvoice TotalAddition],[SalesInvoice TotalDeduction],[SalesInvoice WindowDisplayAmount],[SalesMan Code],[SalesMan Name],
			[Route Code],[Route Name],
			[Retailer Address1],[Retailer Address2],[Retailer Address3],[Retailer Code],[Retailer ContactPerson],[Retailer Coverage Mode],
			[Retailer Credit Bills],[Retailer Credit Days],[Retailer Credit Limit],[Retailer CSTNo],[Retailer Deposit Amount],[Retailer Drug ExpiryDate],
			[Retailer Drug License No],[Retailer EmailId],[Retailer GeoLevel],[Retailer License ExpiryDate],[Retailer License No],[Retailer Name],
			[Retailer OffPhone1],[Retailer OffPhone2],[Retailer OnAccount],[Retailer Pestcide ExpiryDate],[Retailer Pestcide LicNo],[Retailer PhoneNo],
			[Retailer Pin Code],[Retailer ResPhone1],[Retailer ResPhone2],[Retailer Ship Address1],[Retailer Ship Address2],[Retailer Ship Address3],
			[Retailer ShipId],[Retailer TaxType],[Retailer TINNo],[Retailer Village],[Tax Type],[TIN Number],
			[Company Address1],[Company Address2],[Company Address3],[Company Code],[Company Contact Person],
			[Company EmailId],[Company Fax Number],[Company Name],[Company Phone Number],[Contact Person],[CST Number],
			[DC DATE],[DC NUMBER],[Delivery Boy],[Delivery Date],[Deposit Amount],
			[Distributor Address1],[Distributor Address2],[Distributor Address3],[Distributor Code],[Distributor Name],
			[Drug Batch Description],[Drug Licence Number 1],[Drug Licence Number 2],[Drug1 Expiry Date],[Drug2 Expiry Date],
			[EAN Code],[EmailID],[Geo Level],[Interim Sales],[Licence Number],
			[LST Number],[Order Date],[Order Number],
			[Pesticide Expiry Date],[Pesticide Licence Number],[PhoneNo],[PinCode],[Remarks],
			[UsrId],[Visibility],[Distributor Product Code],[Allotment No],[Bx Selling Rate],[AmtInWrd]
		)		
		SELECT
		[SalId],
		[Sales Invoice Number],
		[Product Code],[Product Name],[Product Short Name],MIN([Product SL No]) AS [Product SL No],[Product Type],[Scheme Points],
		SUM([Base Qty]) AS [Base Qty],
		'' AS [Batch Code],MAX([Batch Expiry Date]) AS [Batch Expiry Date],MIN([Batch Manufacturing Date]) AS [Batch Manufacturing Date],
		[Batch MRP],[Batch Selling Rate],[Bill Date],[Bill Doc Ref. Number],[Bill Mode],[Bill Type],
		SUM([CD Disc Base Qty Amount]) AS [CD Disc Base Qty Amount],SUM([CD Disc Effect Amount]) AS [CD Disc Effect Amount],
		SUM(DISTINCT [CD Disc Header Amount]) AS [CD Disc Header Amount],SUM([CD Disc LineUnit Amount]) AS [CD Disc LineUnit Amount],
		--SUM([CD Disc Qty Percentage]) AS [CD Disc Qty Percentage],SUM([CD Disc Unit Percentage]) AS [CD Disc Unit Percentage],
		[CD Disc Qty Percentage],[CD Disc Unit Percentage],
		SUM([CD Disc UOM Amount]),SUM([CD Disc UOM Percentage]) AS [CD Disc UOM Percentage],
		SUM([DB Disc Base Qty Amount]) AS [DB Disc Base Qty Amount],SUM([DB Disc Effect Amount]) AS [DB Disc Effect Amount],
		SUM(DISTINCT [DB Disc Header Amount]) AS [DB Disc Header Amount],SUM([DB Disc LineUnit Amount]) AS [DB Disc LineUnit Amount],
		--SUM([DB Disc Qty Percentage]) AS [DB Disc Qty Percentage],SUM([DB Disc Unit Percentage]) AS [DB Disc Unit Percentage],
		[DB Disc Qty Percentage],SUM([DB Disc Unit Percentage]),
		SUM([DB Disc UOM Amount]) AS [DB Disc UOM Amount],SUM([DB Disc UOM Percentage]) AS [DB Disc UOM Percentage],
		SUM([Line Base Qty Amount]) AS [Line Base Qty Amount],SUM([Line Base Qty Percentage]) AS [Line Base Qty Percentage],
		SUM([Line Effect Amount]) AS [Line Effect Amount],
		--SUM([Line Unit Amount]) AS [Line Unit Amount],
		[Line Unit Amount],
		SUM([Line Unit Percentage]) AS [Line Unit Percentage],SUM([Line UOM1 Amount]) AS [Line UOM1 Amount],SUM([Line UOM1 Percentage]) AS [Line UOM1 Percentage],
		SUM([Manual Free Qty]),
		SUM([Sch Disc Base Qty Amount]) AS [Sch Disc Base Qty Amount],SUM([Sch Disc Effect Amount]) AS [Sch Disc Effect Amount],
		SUM(DISTINCT [Sch Disc Header Amount]) AS [Sch Disc Header Amount],SUM([Sch Disc LineUnit Amount]) AS [Sch Disc LineUnit Amount],
		--SUM([Sch Disc Qty Percentage]) AS [Sch Disc Qty Percentage],SUM([Sch Disc Unit Percentage]) AS [Sch Disc Unit Percentage],
		[Sch Disc Qty Percentage],[Sch Disc Unit Percentage],
		SUM([Sch Disc UOM Amount]) AS [Sch Disc UOM Amount],SUM([Sch Disc UOM Percentage]) AS [Sch Disc UOM Percentage],
		SUM([Spl. Disc Base Qty Amount]) AS [Spl. Disc Base Qty Amount],SUM([Spl. Disc Effect Amount]) AS [Spl. Disc Effect Amount],
		SUM(DISTINCT [Spl. Disc Header Amount]) AS [Spl. Disc Header Amount],SUM([Spl. Disc LineUnit Amount]) AS [Spl. Disc LineUnit Amount],
		--SUM([Spl. Disc Qty Percentage]) AS [Spl. Disc Qty Percentage],SUM([Spl. Disc Unit Percentage]) AS [Spl. Disc Unit Percentage],
		[Spl. Disc Qty Percentage],[Spl. Disc Unit Percentage],
		SUM([Spl. Disc UOM Amount]) AS [Spl. Disc UOM Amount],SUM([Spl. Disc UOM Percentage]) AS [Spl. Disc UOM Percentage],
		--SUM([Tax 1]) AS [Tax 1],SUM([Tax 2]) AS [Tax 2],SUM([Tax 3]) AS [Tax 3],SUM([Tax 4]) AS [Tax 4],
		[Tax 1],[Tax 2],[Tax 3],[Tax 4],
		SUM([Tax Amount1]) AS [Tax Amount1],SUM([Tax Amount2]) AS [Tax Amount2],SUM([Tax Amount3]) AS [Tax Amount3],SUM([Tax Amount4]) AS [Tax Amount4],
		SUM([Tax Amt Base Qty Amount]) AS [Tax Amt Base Qty Amount],SUM([Tax Amt Effect Amount]) AS [Tax Amt Effect Amount],
		SUM(DISTINCT [Tax Amt Header Amount]) AS [Tax Amt Header Amount],SUM([Tax Amt LineUnit Amount]) AS [Tax Amt LineUnit Amount],
		SUM([Tax Amt Qty Percentage]) AS [Tax Amt Qty Percentage],SUM([Tax Amt Unit Percentage]) AS [Tax Amt Unit Percentage],
		SUM([Tax Amt UOM Amount]) AS [Tax Amt UOM Amount],SUM([Tax Amt UOM Percentage]) AS [Tax Amt UOM Percentage],
		'' AS [Uom 1 Desc],SUM([Base Qty]) AS [Uom 1 Qty],'' AS [Uom 2 Desc],0 AS [Uom 2 Qty],[Vehicle Name],
		[SalesInvoice ActNetRateAmount],[SalesInvoice CDPer],[SalesInvoice CRAdjAmount],[SalesInvoice DBAdjAmount],[SalesInvoice GrossAmount],
		SUM([SalesInvoice Line Gross Amount]) AS [SalesInvoice Line Gross Amount],SUM([SalesInvoice Line Net Amount]) AS [SalesInvoice Line Net Amount],
		[SalesInvoice MarketRetAmount],[SalesInvoice NetAmount],[SalesInvoice NetRateDiffAmount],
		[SalesInvoice OnAccountAmount],[SalesInvoice OtherCharges],[SalesInvoice RateDiffAmount],[SalesInvoice ReplacementDiffAmount],[SalesInvoice RoundOffAmt],
		[SalesInvoice TotalAddition],[SalesInvoice TotalDeduction],[SalesInvoice WindowDisplayAmount],[SalesMan Code],[SalesMan Name],
		[Route Code],[Route Name],
		[Retailer Address1],[Retailer Address2],[Retailer Address3],[Retailer Code],[Retailer ContactPerson],[Retailer Coverage Mode],
		[Retailer Credit Bills],[Retailer Credit Days],[Retailer Credit Limit],[Retailer CSTNo],[Retailer Deposit Amount],[Retailer Drug ExpiryDate],
		[Retailer Drug License No],[Retailer EmailId],[Retailer GeoLevel],[Retailer License ExpiryDate],[Retailer License No],[Retailer Name],
		[Retailer OffPhone1],[Retailer OffPhone2],[Retailer OnAccount],[Retailer Pestcide ExpiryDate],[Retailer Pestcide LicNo],[Retailer PhoneNo],
		[Retailer Pin Code],[Retailer ResPhone1],[Retailer ResPhone2],[Retailer Ship Address1],[Retailer Ship Address2],[Retailer Ship Address3],
		[Retailer ShipId],[Retailer TaxType],[Retailer TINNo],[Retailer Village],[Tax Type],[TIN Number],
		[Company Address1],[Company Address2],[Company Address3],[Company Code],[Company Contact Person],
		[Company EmailId],[Company Fax Number],[Company Name],[Company Phone Number],[Contact Person],[CST Number],
		[DC DATE],[DC NUMBER],[Delivery Boy],[Delivery Date],[Deposit Amount],
		[Distributor Address1],[Distributor Address2],[Distributor Address3],[Distributor Code],[Distributor Name],
		[Drug Batch Description],[Drug Licence Number 1],[Drug Licence Number 2],[Drug1 Expiry Date],[Drug2 Expiry Date],
		[EAN Code],[EmailID],[Geo Level],[Interim Sales],[Licence Number],
		[LST Number],[Order Date],[Order Number],
		[Pesticide Expiry Date],[Pesticide Licence Number],[PhoneNo],[PinCode],[Remarks],
		[UsrId],[Visibility],[Distributor Product Code],[Allotment No],[Bx Selling Rate],[AmtInWrd]
		FROM RptBillTemplateFinal_Group,Product P
		WHERE P.PrdCCode=RptBillTemplateFinal_Group.[Product Code] AND P.PrdType<>5
		GROUP BY [Batch MRP],[Batch Selling Rate],[Bill Date],[Bill Doc Ref. Number],[Bill Mode],[Bill Type],
		[Company Address1],[Company Address2],[Company Address3],[Company Code],[Company Contact Person],
		[Company EmailId],[Company Fax Number],[Company Name],[Company Phone Number],[Contact Person],[CST Number],
		[DC DATE],[DC NUMBER],[Delivery Boy],[Delivery Date],[Deposit Amount],
		[Distributor Address1],[Distributor Address2],[Distributor Address3],[Distributor Code],[Distributor Name],
		[Drug Batch Description],[Drug Licence Number 1],[Drug Licence Number 2],[Drug1 Expiry Date],[Drug2 Expiry Date],
		[EAN Code],[EmailID],[Geo Level],[Interim Sales],[Licence Number],
		[LST Number],
		[Order Date],[Order Number],
		[Pesticide Expiry Date],[Pesticide Licence Number],[PhoneNo],[PinCode],
		[Product Code],[Product Name],[Product Short Name],[Product Type],
		[Remarks],
		[Retailer Address1],[Retailer Address2],[Retailer Address3],[Retailer Code],[Retailer ContactPerson],[Retailer Coverage Mode],
		[Retailer Credit Bills],[Retailer Credit Days],[Retailer Credit Limit],[Retailer CSTNo],[Retailer Deposit Amount],[Retailer Drug ExpiryDate],
		[Retailer Drug License No],[Retailer EmailId],[Retailer GeoLevel],[Retailer License ExpiryDate],[Retailer License No],[Retailer Name],
		[Retailer OffPhone1],[Retailer OffPhone2],[Retailer OnAccount],[Retailer Pestcide ExpiryDate],[Retailer Pestcide LicNo],[Retailer PhoneNo],
		[Retailer Pin Code],[Retailer ResPhone1],[Retailer ResPhone2],[Retailer Ship Address1],[Retailer Ship Address2],[Retailer Ship Address3],
		[Retailer ShipId],[Retailer TaxType],[Retailer TINNo],[Retailer Village],
		[Route Code],[Route Name],
		[Sales Invoice Number],[SalesInvoice ActNetRateAmount],[SalesInvoice CDPer],[SalesInvoice CRAdjAmount],[SalesInvoice DBAdjAmount],[SalesInvoice GrossAmount],
		[SalesInvoice MarketRetAmount],[SalesInvoice NetAmount],[SalesInvoice NetRateDiffAmount],
		[SalesInvoice OnAccountAmount],[SalesInvoice OtherCharges],[SalesInvoice RateDiffAmount],[SalesInvoice ReplacementDiffAmount],[SalesInvoice RoundOffAmt],
		[SalesInvoice TotalAddition],[SalesInvoice TotalDeduction],[SalesInvoice WindowDisplayAmount],[SalesMan Code],[SalesMan Name],
		[SalId],
		[Scheme Points],
		[Tax Type],[TIN Number],
		[Vehicle Name],[Tax 1],[Tax 2],[Tax 3],[Tax 4],
		[CD Disc Qty Percentage],[CD Disc Unit Percentage],
		[DB Disc Qty Percentage],--[DB Disc Unit Percentage],
		[Line Unit Amount],
		[Sch Disc Qty Percentage],[Sch Disc Unit Percentage],
		[Spl. Disc Qty Percentage],[Spl. Disc Unit Percentage],		
		[UsrId],[Visibility],[AmtInWrd]
		UNION ALL
		SELECT [SalId],[Sales Invoice Number],[Product Code],[Product Name],[Product Short Name],[Product SL No],[Product Type],[Scheme Points],
		[Base Qty],[Batch Code],[Batch Expiry Date],[Batch Manufacturing Date],
		[Batch MRP],[Batch Selling Rate],[Bill Date],[Bill Doc Ref. Number],[Bill Mode],[Bill Type],
		[CD Disc Base Qty Amount],[CD Disc Effect Amount],
		[CD Disc Header Amount],[CD Disc LineUnit Amount],
		[CD Disc Qty Percentage],[CD Disc Unit Percentage],
		[CD Disc UOM Amount],[CD Disc UOM Percentage],
		[DB Disc Base Qty Amount],[DB Disc Effect Amount],
		[DB Disc Header Amount],[DB Disc LineUnit Amount],
		[DB Disc Qty Percentage],[DB Disc Unit Percentage],
		[DB Disc UOM Amount],[DB Disc UOM Percentage],
		[Line Base Qty Amount],[Line Base Qty Percentage],
		[Line Effect Amount],[Line Unit Amount],
		[Line Unit Percentage],[Line UOM1 Amount],[Line UOM1 Percentage],
		[Manual Free Qty],
		[Sch Disc Base Qty Amount],[Sch Disc Effect Amount],
		[Sch Disc Header Amount],[Sch Disc LineUnit Amount],
		[Sch Disc Qty Percentage],[Sch Disc Unit Percentage],
		[Sch Disc UOM Amount],[Sch Disc UOM Percentage],
		[Spl. Disc Base Qty Amount],[Spl. Disc Effect Amount],
		[Spl. Disc Header Amount],[Spl. Disc LineUnit Amount],
		[Spl. Disc Qty Percentage],[Spl. Disc Unit Percentage],
		[Spl. Disc UOM Amount],[Spl. Disc UOM Percentage],
		[Tax 1],[Tax 2],[Tax 3],[Tax 4],
		[Tax Amount1],[Tax Amount2],[Tax Amount3],[Tax Amount4],
		[Tax Amt Base Qty Amount],[Tax Amt Effect Amount],
		[Tax Amt Header Amount],[Tax Amt LineUnit Amount],
		[Tax Amt Qty Percentage],[Tax Amt Unit Percentage],
		[Tax Amt UOM Amount],[Tax Amt UOM Percentage],
		[Uom 1 Desc],[Uom 1 Qty],[Uom 2 Desc],[Uom 2 Qty],[Vehicle Name],
		[SalesInvoice ActNetRateAmount],[SalesInvoice CDPer],[SalesInvoice CRAdjAmount],[SalesInvoice DBAdjAmount],[SalesInvoice GrossAmount],
		[SalesInvoice Line Gross Amount],[SalesInvoice Line Net Amount],
		[SalesInvoice MarketRetAmount],[SalesInvoice NetAmount],[SalesInvoice NetRateDiffAmount],
		[SalesInvoice OnAccountAmount],[SalesInvoice OtherCharges],[SalesInvoice RateDiffAmount],[SalesInvoice ReplacementDiffAmount],[SalesInvoice RoundOffAmt],
		[SalesInvoice TotalAddition],[SalesInvoice TotalDeduction],[SalesInvoice WindowDisplayAmount],[SalesMan Code],[SalesMan Name],
		[Route Code],[Route Name],
		[Retailer Address1],[Retailer Address2],[Retailer Address3],[Retailer Code],[Retailer ContactPerson],[Retailer Coverage Mode],
		[Retailer Credit Bills],[Retailer Credit Days],[Retailer Credit Limit],[Retailer CSTNo],[Retailer Deposit Amount],[Retailer Drug ExpiryDate],
		[Retailer Drug License No],[Retailer EmailId],[Retailer GeoLevel],[Retailer License ExpiryDate],[Retailer License No],[Retailer Name],
		[Retailer OffPhone1],[Retailer OffPhone2],[Retailer OnAccount],[Retailer Pestcide ExpiryDate],[Retailer Pestcide LicNo],[Retailer PhoneNo],
		[Retailer Pin Code],[Retailer ResPhone1],[Retailer ResPhone2],[Retailer Ship Address1],[Retailer Ship Address2],[Retailer Ship Address3],
		[Retailer ShipId],[Retailer TaxType],[Retailer TINNo],[Retailer Village],[Tax Type],[TIN Number],
		[Company Address1],[Company Address2],[Company Address3],[Company Code],[Company Contact Person],
		[Company EmailId],[Company Fax Number],[Company Name],[Company Phone Number],[Contact Person],[CST Number],
		[DC DATE],[DC NUMBER],[Delivery Boy],[Delivery Date],[Deposit Amount],
		[Distributor Address1],[Distributor Address2],[Distributor Address3],[Distributor Code],[Distributor Name],
		[Drug Batch Description],[Drug Licence Number 1],[Drug Licence Number 2],[Drug1 Expiry Date],[Drug2 Expiry Date],
		[EAN Code],[EmailID],[Geo Level],[Interim Sales],[Licence Number],
		[LST Number],[Order Date],[Order Number],
		[Pesticide Expiry Date],[Pesticide Licence Number],[PhoneNo],[PinCode],[Remarks],
		[UsrId],[Visibility],[Distributor Product Code],[Allotment No],[Bx Selling Rate],[AmtInWrd]
		FROM RptBillTemplateFinal_Group,Product P
		WHERE P.PrdCCode=RptBillTemplateFinal_Group.[Product Code] AND P.PrdType=5
	END	
	--->Till Here
		IF NOT EXISTS (SELECT A.NAME FROM SysObjects A INNER JOIN SysColumns B ON A.id=B.id AND A.name='RptBillTemplateFinal' AND B.name='InvDisc')
		BEGIN
			ALTER TABLE RptBillTemplateFinal ADD InvDisc NUMERIC (18,2) DEFAULT 0 WITH VALUES 
		END
		IF NOT EXISTS (SELECT A.NAME FROM SysObjects A INNER JOIN SysColumns B ON A.id=B.id AND A.name='RptBillTemplateFinal' AND B.name='InvDiscPer')
		BEGIN
			ALTER TABLE RptBillTemplateFinal ADD InvDiscPer NUMERIC (18,2) DEFAULT 0 WITH VALUES 
		END
		IF NOT EXISTS (SELECT A.NAME FROM SysObjects A INNER JOIN SysColumns B ON A.id=B.id AND A.name='RptBillTemplateFinal' AND B.name='SalesmanPhoneNo')
		BEGIN
			ALTER TABLE RptBillTemplateFinal ADD SalesmanPhoneNo NUMERIC (18,0) DEFAULT 0 WITH VALUES 
		END		
		
		IF NOT EXISTS (SELECT A.NAME FROM SysObjects A INNER JOIN SysColumns B ON A.id=B.id AND A.name='RptBillTemplateFinal' AND B.name='Grammage')
		BEGIN
			ALTER TABLE RptBillTemplateFinal ADD Grammage NUMERIC (38,2) DEFAULT 0 WITH VALUES 
		END
		
		IF Exists(SELECT A.NAME FROM SysObjects A INNER JOIN SysColumns B ON A.id=B.id AND A.name='RptBillTemplateFinal' AND B.name='InvDisc')    
		BEGIN    
			SET @SSQL1='UPDATE A SET A.InvDisc=B.SalInvLvlDisc FROM RptBillTemplateFinal A (NOLOCK) INNER JOIN SalesInvoice B (NOLOCK) 
						ON A.[Sales Invoice Number]=B.SalInvNo AND A.UsrId='+ CAST(@Pi_UsrId AS VARCHAR(10))       
			EXEC (@SSQL1)    
		END 
		IF EXISTS(SELECT A.NAME FROM SysObjects A INNER JOIN SysColumns B ON A.id=B.id AND A.name='RptBillTemplateFinal' AND B.name='InvDiscPer')    
		BEGIN  
			SET @SSQL1='UPDATE A SET A.InvDiscPer=B.SalInvLvlDiscPer FROM RptBillTemplateFinal A (NOLOCK) INNER JOIN SalesInvoice B (NOLOCK) 
						ON A.[Sales Invoice Number]=B.SalInvNo AND A.UsrId='+ CAST(@Pi_UsrId AS VARCHAR(10))       
			EXEC (@SSQL1)    
		END
		IF EXISTS(SELECT A.NAME FROM SysObjects A INNER JOIN SysColumns B ON A.id=B.id AND A.name='RptBillTemplateFinal' AND B.name='SalesmanPhoneNo')    
		BEGIN  
			SET @SSQL1='UPDATE A SET A.SalesmanPhoneNo=ISNULL(B.SMPhoneNumber,0) FROM RptBillTemplateFinal A (NOLOCK) INNER JOIN SalesMan B (NOLOCK) 
						ON A.[SalesMan Code]=B.SMCode AND A.UsrId='+ CAST(@Pi_UsrId AS VARCHAR(10))       
			EXEC (@SSQL1)    
		END
--- Added by Rajesh ICRSTPAR3196
		IF EXISTS(SELECT A.NAME FROM SysObjects A INNER JOIN SysColumns B ON A.id=B.id AND A.name='RptBillTemplateFinal' AND B.name='bx')    
		BEGIN  
			SET @SSQL1='UPDATE A SET A.bx=bx+box FROM RptBillTemplateFinal A (NOLOCK) WHERE A.UsrId='+ CAST(@Pi_UsrId AS VARCHAR(10))
			EXEC (@SSQL1)    
		END
		IF EXISTS(SELECT A.NAME FROM SysObjects A INNER JOIN SysColumns B ON A.id=B.id AND A.name='RptBillTemplateFinal' AND B.name='PBG')    
		BEGIN  
			SET @SSQL1='UPDATE A SET A.PB=PB+PBG FROM RptBillTemplateFinal A (NOLOCK) WHERE A.UsrId='+ CAST(@Pi_UsrId AS VARCHAR(10))       
			EXEC (@SSQL1)    
		END
		IF EXISTS(SELECT A.NAME FROM SysObjects A INNER JOIN SysColumns B ON A.id=B.id AND A.name='RptBillTemplateFinal' AND B.name='TIN')    
		BEGIN  
			SET @SSQL1='UPDATE A SET A.Tn=TN+TIN FROM RptBillTemplateFinal A (NOLOCK) WHERE A.UsrId='+ CAST(@Pi_UsrId AS VARCHAR(10))  
						       
			EXEC (@SSQL1)    
		END
		
		IF EXISTS(SELECT A.NAME FROM SysObjects A INNER JOIN SysColumns B ON A.id=B.id AND A.name='RptBillTemplateFinal' AND B.name='TIF')    
		BEGIN  
			SET @SSQL1='UPDATE A SET A.TIF=TIF+TBX FROM RptBillTemplateFinal A (NOLOCK) WHERE A.UsrId='+ CAST(@Pi_UsrId AS VARCHAR(10))  
						     
			EXEC (@SSQL1)    
		END
--Till here

-------------------GST Changes(Mohanakrishna A.B) begins here
	IF EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='Dist Food Lic No')
	BEGIN
		SET @SSQL1='UPDATE B SET B.[Dist Food Lic No]=R.DrugLicNo2 
		FROM RptBillTemplateFinal B INNER JOIN DISTRIBUTOR R ON B.[Distributor Code]=R.DistributorCode'
		EXEC (@SSQL1)
	
	END
	IF EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='Dist Drug Lic no')
	BEGIN
		SET @SSQL1='UPDATE B SET B.[Dist Drug Lic no]=R.DrugLicNo1 
		FROM RptBillTemplateFinal B INNER JOIN DISTRIBUTOR R ON B.[Distributor Code]=R.DistributorCode'
		EXEC (@SSQL1)	
	END
	IF EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND b.name='GSTTIN')
	BEGIN
		SET @SSQL1='UPDATE A SET A.[GSTTIN]=B.GSTTinNo FROM RptBillTemplateFinal A 
		INNER JOIN RetailerShipAdd B ON A.[Retailer ShipId]=B.RtrShipId INNER JOIN StateMaster C ON C.StateId=B.StateId'
		EXEC (@SSQL1)
	END
	IF EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='PAN Number')
	BEGIN
		SET @SSQL1='UPDATE B SET B.[Pan Number]=R.[ColumnValue] 
		FROM RptBillTemplateFinal B INNER JOIN (
		SELECT R.RtrId,R.rtrcode,U.ColumnValue FROM UdcDetails u INNER JOIN UdcMaster US ON u.UdcMasterId=US.UdcMasterId
		INNER JOIN retailer R on R.RtrId=U.MasterRecordId  WHERE US.MasterId=2   AND ColumnName=''PAN Number'' ) R ON B.[Retailer Code]=R.[rtrcode]'
		EXEC (@SSQL1)
	END
	IF EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='Retailer Type')
	BEGIN
		SET @SSQL1='UPDATE B SET B.[Retailer Type]=R.[ColumnValue] FROM RptBillTemplateFinal B 
		INNER JOIN (SELECT R.RtrId,R.rtrcode,U.ColumnValue FROM UdcDetails u INNER JOIN UdcMaster US ON u.UdcMasterId=US.UdcMasterId
		INNER JOIN Retailer R on R.RtrId=U.MasterRecordId  WHERE US.MasterId=2   AND ColumnName=''Retailer Type'' ) R ON B.[Retailer Code]=R.[rtrcode]'
		EXEC (@SSQL1)
	END
	IF EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND b.name='RelatedParty')
	BEGIN
		SET @SSQL1='UPDATE B SET B.[RelatedParty]=R.[ColumnValue] FROM RptBillTemplateFinal B 
		INNER JOIN (SELECT R.RtrId,R.rtrcode,U.ColumnValue FROM UdcDetails u INNER JOIN UdcMaster US ON u.UdcMasterId=US.UdcMasterId
		INNER JOIN Retailer R on R.RtrId=U.MasterRecordId  WHERE US.MasterId=2   AND ColumnName=''Related Party'' ) R ON B.[Retailer Code]=R.[rtrcode]'
		EXEC (@SSQL1)
	END
	IF EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='State Name')
	BEGIN
		SET @SSQL1='UPDATE A SET A.[State Name]=C.StateName FROM RptBillTemplateFinal A 
		INNER JOIN RetailerShipAdd B ON A.[Retailer ShipId]=B.RtrShipId	INNER JOIN StateMaster C ON C.StateId=B.StateId'
		EXEC (@SSQL1)
	END
	IF EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='State Code')
	BEGIN
		SET @SSQL1='UPDATE A SET A.[State Code]=C.StateCode FROM RptBillTemplateFinal A 
		INNER JOIN RetailerShipAdd B ON A.[Retailer ShipId]=B.RtrShipId	INNER JOIN StateMaster C ON C.StateId=B.StateId'
		EXEC (@SSQL1)
	END
	IF EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='StateTinNo')
	BEGIN
		SET @SSQL1='UPDATE A SET A.[StateTinNo]=C.TinFirst2Digit FROM RptBillTemplateFinal A 
		INNER JOIN RetailerShipAdd B ON A.[Retailer ShipId]=B.RtrShipId	INNER JOIN StateMaster C ON C.StateId=B.StateId'
		EXEC (@SSQL1) 
	END
	IF EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND b.name='HSNCode')
	BEGIN
		SET @SSQL1='UPDATE B SET B.[HSNCode]=R.[ColumnValue] FROM RptBillTemplateFinal B 
		INNER JOIN (select R.prdid,R.prdccode,U.ColumnValue from UdcDetails u inner JOIN UdcMaster US ON u.UdcMasterId=US.UdcMasterId
		INNER JOIN product  R on R.prdid=U.MasterRecordId  where US.MasterId=1   and ColumnName=''HSN Code'' ) R ON B.[Product Code]=R.[prdccode]'
		EXEC (@SSQL1)
	END
	
   IF EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND b.name='HSNDescription')
	BEGIN
		SET @SSQL1='UPDATE B SET B.[HSNDescription]=R.[ColumnValue] FROM RptBillTemplateFinal B 
		INNER JOIN (SELECT R.prdid,R.prdccode,U.ColumnValue FROM UdcDetails u INNER JOIN UdcMaster US ON u.UdcMasterId=US.UdcMasterId
		INNER JOIN Product  R on R.prdid=U.MasterRecordId  WHERE US.MasterId=1   AND ColumnName=''HSN Description'' ) R ON B.[Product Code]=R.[prdccode]'
		EXEC (@SSQL1)
	END
	
	IF EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='DistributorGstTin')
	BEGIN
		SET @SSQL1='UPDATE B SET B.[DistributorGstTin]=R.ColumnValue  FROM RptBillTemplateFinal B INNER JOIN (
		SELECT D.DistributorCode,u.ColumnValue from UdcDetails u INNER JOIN UdcMaster US ON u.UdcMasterId=US.UdcMasterId
		INNER JOIN Distributor D ON D.DistributorId=u.MasterRecordId WHERE US.MasterId=16  and ColumnName=''GSTIN'') R on B.[Distributor Code]=R.DistributorCode'
		EXEC (@SSQL1)
	END
	IF EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='DistributorStateName')
	BEGIN
		SELECT StateCode,StateName,TinFirst2Digit,DistributorCode
		INTO #DistState 
		FROM UDCHD A (NOLOCK)
		INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId
		INNER JOIN UdcDetails C (NOLOCK) ON B.MasterId=C.MasterId
		AND B.UdcMasterId=C.UdcMasterId
		INNER JOIN UdcDefault D (NOLOCK) ON D.MasterId=C.MasterId AND D.MasterId=B.MasterId
		AND D.UdcMasterId=C.UdcMasterId AND D.UdcMasterId=B.UdcMasterId
		INNER JOIN StateMaster E (NOLOCK) ON E.StateName=D.ColValue AND E.StateName=C.ColumnValue
		INNER JOIN Distributor DB ON DB.DistributorId=C.MasterRecordId
		WHERE MasterName='Distributor Info Master' AND ColumnName='State Name'
		
		SET @SSQL1='UPDATE B SET B.[DistributorStateName]=R.StateName,DistributorStateCode=R.StateCode, 
		DistributorStateTinNo=R.TinFirst2Digit FROM RptBillTemplateFinal B INNER JOIN #DistState R ON B.[Distributor Code]=R.DistributorCode'	
		EXEC (@SSQL1)
		DROP TABLE #DistState
			
	END
	IF EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='Distributor Type')
	BEGIN
		SET @SSQL1='UPDATE B SET B.[Distributor Type]=R.ColumnValue  FROM RptBillTemplateFinal B INNER JOIN (
		SELECT D.DistributorCode,u.ColumnValue from UdcDetails u INNER JOIN UdcMaster US ON u.UdcMasterId=US.UdcMasterId
		INNER JOIN Distributor D ON D.DistributorId=u.MasterRecordId where US.MasterId=16  AND ColumnName=''Distributor Type'') R on B.[Distributor Code]=R.DistributorCode'
		EXEC (@SSQL1)

	END
	IF EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='AadharNo')
	BEGIN
		SET @SSQL1='UPDATE B SET B.[AadharNo]=R.ColumnValue  FROM RptBillTemplateFinal B INNER JOIN (
		SELECT D.DistributorCode,u.ColumnValue from UdcDetails u INNER JOIN UdcMaster US ON u.UdcMasterId=US.UdcMasterId
		INNER JOIN Distributor D ON D.DistributorId=u.MasterRecordId where US.MasterId=16  AND ColumnName=''Aadhar No'') R on B.[Distributor Code]=R.DistributorCode'
		EXEC (@SSQL1)
	END
	

	-------------------GST Changes(Mohanakrishna) Ends here
		IF EXISTS(SELECT A.NAME FROM SysObjects A INNER JOIN SysColumns B ON A.id=B.id AND A.name='RptBillTemplateFinal' AND B.name='Grammage')    
		BEGIN 
					--SET @SSQL1=' UPDATE RPT SET RPT.Grammage=X.Grammage FROM RptBillTemplateFinal RPT (NOLOCK) 
					--				INNER JOIN (
					--					SELECT SP.[Sales Invoice Number],P.PRDID,P.PrdCCode,P.PrdDCode,U.PrdUnitCode,ISNULL(
					--					CASE U.PRDUNITID WHEN 2 THEN ISNULL(SUM(PrdWgt * SP.[Base Qty]),0)/1000
					--					WHEN 3 THEN ISNULL(SUM(PrdWgt * SP.[Base Qty]),0) END,0) AS Grammage
					--					FROM RptBillTemplateFinal SP (NOLOCK)
					--					INNER JOIN Product P (NOLOCK) ON P.PrdCCode=SP.[Product Code]
					--					INNER JOIN PRODUCTUNIT U (NOLOCK) ON P.PrdUnitId=U.PrdUnitId
					--					WHERE SP.USRID=
					--					GROUP BY P.PRDID,P.PrdCCode,P.PrdDCode,U.PrdUnitCode,U.PRDUNITID,SP.[Sales Invoice Number]
					--				) X ON X.PrdCCode=RPT.[PRODUCT CODE] AND X.[Sales Invoice Number]=RPT.[Sales Invoice Number] WHERE RPT.UsrId='+CAST(@Pi_UsrId AS VARCHAR(10))+''					    
					SET @SSQL1=' UPDATE RPT SET RPT.Grammage=X.Grammage FROM RptBillTemplateFinal RPT (NOLOCK) 
									INNER JOIN (
										SELECT SP.[Sales Invoice Number],P.PRDID,P.PrdCCode,P.PrdDCode,P.PrdWgt Grammage
										FROM RptBillTemplateFinal SP (NOLOCK)
										INNER JOIN Product P (NOLOCK) ON P.PrdCCode=SP.[Product Code]
										WHERE SP.USRID='+CAST(@Pi_UsrId AS VARCHAR(10))+'
									) X ON X.PrdCCode=RPT.[PRODUCT CODE] AND X.[Sales Invoice Number]=RPT.[Sales Invoice Number] WHERE RPT.UsrId='+CAST(@Pi_UsrId AS VARCHAR(10))+''					    
									
					EXEC (@SSQL1)    
		END
		
		IF EXISTS (SELECT B.NAME FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.id WHERE A.name='RptBillTemplateFinal' AND B.name='[SalesInvoice NetAmount Actual]')
		BEGIN
			SET @SSQL1='UPDATE A SET A.[SalesInvoice NetAmount Actual]=B.OrgNetAmount 
				FROM RptBillTemplateFinal A INNER JOIN SalesInvoice B (NOLOCK) ON A.Salid=B.SalId'
			EXEC (@SSQL1)	
		END
	
	IF EXISTS (SELECT A.SalId FROM SalInvoiceDeliveryChallan A INNER JOIN SalesInvoice B
				ON A.SalId=B.SalId INNER JOIN RptBillToPrint C ON C.[Bill Number]=SalInvNo)
	BEGIN
		TRUNCATE TABLE RptFinalBillTemplate_DC
		INSERT INTO RptFinalBillTemplate_DC(SalId,InvNo,DCNo,DCDate)
		SELECT A.SalId,B.SalInvNo,A.DCNo,DCDate FROM SalInvoiceDeliveryChallan A INNER JOIN SalesInvoice B
		ON A.SalId=B.SalId INNER JOIN RptBillToPrint C ON C.[Bill Number]=SalInvNo
	END
	ELSE
	BEGIN
		TRUNCATE TABLE RptFinalBillTemplate_DC
	END
	RETURN
END
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS A INNER JOIN SYScolumns B ON A.id=B.id AND A.NAME='Cs2Cn_Prk_Retailer' AND B.NAME='StateName')
BEGIN

ALTER TABLE Cs2Cn_Prk_Retailer ADD StateName NVARCHAR(100)

END
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS A INNER JOIN SYScolumns B ON A.id=B.id AND A.NAME='Cs2Cn_Prk_Retailer' AND b.name='GSTTIN')
BEGIN

ALTER TABLE Cs2Cn_Prk_Retailer ADD GSTTIN NVARCHAR(100)

END
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS A INNER JOIN SYScolumns B ON A.id=B.id AND A.NAME='Cs2Cn_Prk_Retailer' AND B.NAME='PanNumber')
BEGIN

ALTER TABLE Cs2Cn_Prk_Retailer ADD PanNumber NVARCHAR(100)

END
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS A INNER JOIN SYScolumns B ON A.id=B.id AND A.NAME='Cs2Cn_Prk_Retailer' AND B.NAME='RetailerType')
BEGIN

ALTER TABLE Cs2Cn_Prk_Retailer ADD RetailerType NVARCHAR(100)

END
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS A INNER JOIN SYScolumns B ON A.id=B.id AND A.NAME='Cs2Cn_Prk_Retailer' AND b.name='Composite')
BEGIN

ALTER TABLE Cs2Cn_Prk_Retailer ADD Composite NVARCHAR(100)

END
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS A INNER JOIN SYScolumns B ON A.id=B.id AND A.NAME='Cs2Cn_Prk_Retailer' AND b.name='RelatedParty')
BEGIN

ALTER TABLE Cs2Cn_Prk_Retailer ADD RelatedParty NVARCHAR(100)

END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Cs2Cn_Retailer' AND TYPE='P')
DROP PROCEDURE Proc_Cs2Cn_Retailer
GO
CREATE PROCEDURE Proc_Cs2Cn_Retailer
(
	@Po_ErrNo	INT OUTPUT,
	@ServerDate DATETIME
)
AS
SET NOCOUNT ON
BEGIN
/*********************************
* PROCEDURE	: Proc_Cs2Cn_Retailer 0,'2016-11-11'
* PURPOSE	: Extract Retailer Details from CoreStocky to Console
* NOTES		:
* CREATED	: Nandakumar R.G 09-01-2009
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* Added AutoRetailerApproval for Parle ICRSTPAR1505
* Added RtrFrequency,RtrPhoneNo,TinNumber,Crlimit,CrDays,Approved,RtrType by Gopi on 08/11/2016
*********************************/
	DECLARE @CmpID 		AS INTEGER
	DECLARE @DistCode	As nVarchar(50)
	
	SET @Po_ErrNo=0
	--CHANGED BY MAHESH FOR ICRSTPAR1505
	IF EXISTS (SELECT * FROM RETAILER WHERE APPROVED=0)
	BEGIN
		UPDATE RETAILER SET Approved=1 WHERE Approved=0
	END
	--Till Here
	DELETE FROM Cs2Cn_Prk_Retailer WHERE UploadFlag = 'Y'
	SELECT @CmpID = CmpId FROM Company WHERE DefaultCompany = 1	
	SELECT @DistCode = DistributorCode FROM Distributor
	INSERT INTO Cs2Cn_Prk_Retailer
	(
		DistCode ,
		RtrId ,
		RtrCode ,
		CmpRtrCode,
		RtrName ,
		RtrAddress1,
		RtrAddress2,
		RtrAddress3,
		RtrPINCode,
		RtrChannelCode ,
		RtrGroupCode ,
		RtrClassCode ,
		Status,
		KeyAccount,
		RelationStatus,
		ParentCode,
		RtrRegDate,
		GeoLevel,
		GeoLevelValue,
		VillageId,
		VillageCode,
		VillageName,
		Mode,
        DrugLNo,
        RtrFrequency,
        RtrPhoneNo,
        RtrTINNumber,
        RtrTaxGroupCode,
        RtrCrLimit,
        RtrCrDays,
        Approved,
        RtrType,
		UploadFlag		
	)
	SELECT
		@DistCode ,
		R.RtrId ,
		R.RtrCode ,
		R.CmpRtrCode ,
		R.RtrName ,
		R.RtrAdd1 ,
		R.RtrAdd2 ,
		R.RtrAdd3 ,
		R.RtrPinNo ,
		'' CtgCode ,
		'' CtgCode ,
		'' ValueClassCode ,
		RtrStatus,	
		CASE RtrKeyAcc WHEN 0 THEN 'NO' ELSE 'YES' END AS KeyAccount,
		CASE RtrRlStatus WHEN 2 THEN 'PARENT' WHEN 3 THEN 'CHILD' WHEN 1 THEN 'INDEPENDENT' ELSE 'INDEPENDENT' END AS RelationStatus,
		(CASE RtrRlStatus WHEN 3 THEN ISNULL(RET.RtrCode,'') ELSE '' END) AS ParentCode,
		CONVERT(VARCHAR(10),R.RtrRegDate,121),'' AS GeoLevelName,'' AS GeoName,0,'','','New',R.RtrDrugLicNo,
		CASE RtrFrequency WHEN 0 THEN 'WEEKLY' WHEN 1 THEN 'BI-WEEKLY' WHEN 2 THEN 'FORT NIGHTLY' when 3 then 'MONTHLY' when 4 then 'DAILY' END AS RtrFrequency,
		ISNULL(RtrPhoneNo,''),ISNULL(RtrTINNo,''),ISNULL(TGS.RtrGroup,''),R.RtrCrLimit,
        R.RtrCrDays,(CASE ISNULL(R.Approved,0) WHEN 0 THEN 'PENDING' WHEN 1 THEN 'APPROVED' ELSE 'REJECTED' END) AS Approved,
        (CASE R.RtrType WHEN 1 THEN 'Retailer' WHEN 2 THEN 'Sub Stockist' WHEN 3 THEN 'Hub' WHEN 4 THEN 'Spoke' ELSE 'Distributor' END) AS RtrType,
        'N'					
	FROM		
		Retailer R
		LEFT OUTER JOIN (SELECT K.RtrCode,RE.RtrId,RE.RtrChildId FROM RetailerRelation RE
		INNER JOIN Retailer K ON RE.RtrId=K.RtrId) RET ON RET.RtrChildId=R.RtrId
		LEFT OUTER JOIN TaxGroupSetting TGS (NOLOCK) ON R.TaxGroupId = TGS.TaxGroupId AND TGS.TaxGroup = 1
	WHERE			
		R.Upload = 'N'
	UNION
	SELECT
		@DistCode ,
		RCC.RtrId,
		RCC.RtrCode,
		R.CmpRtrCode,
		RCC.RtrName ,
		R.RtrAdd1 ,
		R.RtrAdd2 ,
		R.RtrAdd3 ,
		R.RtrPinNo ,
		'' CtgCode,
		'' CtgCode,
		'' ValueClassCode,
		RtrStatus,
		CASE RtrKeyAcc WHEN 0 THEN 'NO' ELSE 'YES' END AS KeyAccount,
		CASE RtrRlStatus WHEN 2 THEN 'PARENT' WHEN 3 THEN 'CHILD' WHEN 1 THEN 'INDEPENDENT' ELSE 'INDEPENDENT' END AS RelationStatus,
		(CASE RtrRlStatus WHEN 3 THEN ISNULL(RET.RtrCode,'') ELSE '' END) AS ParentCode,
		CONVERT(VARCHAR(10),R.RtrRegDate,121),'' AS GeoLevelName,'' AS GeoName,0,'','','CR',R.RtrDrugLicNo,
		CASE RtrFrequency WHEN 0 THEN 'WEEKLY' WHEN 1 THEN 'BI-WEEKLY' WHEN 2 THEN 'FORT NIGHTLY' when 3 then 'MONTHLY' when 4 then 'DAILY' END AS RtrFrequency,
		ISNULL(RtrPhoneNo,''),ISNULL(RtrTINNo,''),ISNULL(TGS.RtrGroup,''),R.RtrCrLimit,
        R.RtrCrDays,(CASE ISNULL(R.Approved,0) WHEN 0 THEN 'PENDING' WHEN 1 THEN 'APPROVED' ELSE 'REJECTED' END) AS Approved,
        (CASE R.RtrType WHEN 1 THEN 'Retailer' WHEN 2 THEN 'Sub Stockist' WHEN 3 THEN 'Hub' WHEN 4 THEN 'Spoke' ELSE 'Distributor' END) AS RtrType,
        'N'							
	FROM
		RetailerClassficationChange RCC			
		INNER JOIN Retailer R ON R.RtrId=RCC.RtrId
		LEFT OUTER JOIN (SELECT K.RtrCode,RE.RtrId,RE.RtrChildId FROM RetailerRelation RE
		INNER JOIN Retailer K ON RE.RtrId=K.RtrId) RET ON RET.RtrChildId=R.RtrId
		LEFT OUTER JOIN TaxGroupSetting TGS (NOLOCK) ON R.TaxGroupId = TGS.TaxGroupId AND TGS.TaxGroup = 1
	WHERE 	
		UpLoadFlag=0
	UPDATE ETL SET ETL.RtrChannelCode=RVC.ChannelCode,ETL.RtrGroupCode=RVC.GroupCode,ETL.RtrClassCode=RVC.ValueClassCode
	FROM Cs2Cn_Prk_Retailer ETL,
	(
		SELECT R.RtrId,RC1.CtgCode AS ChannelCode,RC.CtgCode  AS GroupCode ,RVC.ValueClassCode
		FROM
		RetailerValueClassMap RVCM ,
		RetailerValueClass RVC	,
		RetailerCategory RC ,
		RetailerCategoryLevel RCL,
		RetailerCategory RC1,
		Retailer R  		
	WHERE
		R.Rtrid = RVCM.RtrId
		AND	RVCM.RtrValueClassId = RVC.RtrClassId
		AND	RVC.CtgMainId=RC.CtgMainId
		AND	RCL.CtgLevelId=RC.CtgLevelId
		AND	RC.CtgLinkId = RC1.CtgMainId
	) AS RVC
	WHERE ETL.RtrId=RVC.RtrId
	
	UPDATE ETL SET ETL.GeoLevel=Geo.GeoLevelName,ETL.GeoLevelValue=Geo.GeoName
	FROM Cs2Cn_Prk_Retailer ETL,
	(
		SELECT R.RtrId,ISNULL(GL.GeoLevelName,'City') AS GeoLevelName,
		ISNULL(G.GeoName,'') AS GeoName
		FROM			
		Retailer R  		
		LEFT OUTER JOIN Geography G ON R.GeoMainId=G.GeoMainId
		LEFT OUTER JOIN GeographyLevel GL ON GL.GeoLevelId=G.GeoLevelId
	) AS Geo
	WHERE ETL.RtrId=Geo.RtrId	
	UPDATE ETL SET ETL.VillageId=V.VillageId,ETL.VillageCode=V.VillageCode,ETL.VillageName=V.VillageName
	FROM Cs2Cn_Prk_Retailer ETL,
	(
		SELECT R.RtrId,R.VillageId,V.VillageCode,V.VillageName
		FROM			
		Retailer R  		
		INNER JOIN RouteVillage V ON R.VillageId=V.VillageId
	) V
	WHERE ETL.RtrId=V.RtrId	
	
	--Added By MohanaKrishna A.B For GST
	Update Cs2Cn_Prk_Retailer SET StateName='' where StateName is Null
	Update Cs2Cn_Prk_Retailer SET GSTTIN ='' where GSTTIN is Null
	Update Cs2Cn_Prk_Retailer SET PanNumber ='' where PanNumber is Null
	Update Cs2Cn_Prk_Retailer SET RetailerType ='' where RetailerType is Null
	Update Cs2Cn_Prk_Retailer SET Composite ='' where Composite is Null
	Update Cs2Cn_Prk_Retailer SET RelatedParty ='' where RelatedParty is Null
	----
	
	--Added By Mohana For GST
	SELECT C.MasterRecordId,B.ColumnName,ISNULL(C.ColumnValue,'') ColumnValue INTO #RtrUDC FROM UdcHD A INNER JOIN UdcMaster B ON A.MasterId=B.MasterId AND A.MasterName='Retailer Master'
	INNER JOIN UdcDetails C ON A.MasterId= C.MasterId AND B.UdcMasterId=C.UdcMasterId --AND masterrecordid =445
	INNER JOIN Retailer R ON R.RtrId =C.MasterRecordId AND B.ColumnName IN ('State name','GSTIN','PAN Number','Retailer Type','Related Party','Composition')

	UPDATE A SET StateName =ISNULL(C.ColumnValue,'') FROM Cs2Cn_Prk_Retailer A INNER JOIN Retailer B ON A.RtrCode=B.RtrCode
	INNER JOIN #RtrUDC C ON B.RtrId = C.MasterRecordid AND ColumnName ='State Name'

	UPDATE A SET GSTTIN = ISNULL(C.ColumnValue,'')  FROM Cs2Cn_Prk_Retailer A INNER JOIN Retailer B ON A.RtrCode=B.RtrCode
	INNER JOIN #RtrUDC C ON B.RtrId = C.MasterRecordid AND ColumnName ='GSTIN'

	UPDATE A SET PanNumber = ISNULL(C.ColumnValue,'')  FROM Cs2Cn_Prk_Retailer A INNER JOIN Retailer B ON A.RtrCode=B.RtrCode
	INNER JOIN #RtrUDC C ON B.RtrId = C.MasterRecordid AND ColumnName ='PAN Number'

	UPDATE A SET RetailerType = ISNULL(C.ColumnValue,'') FROM Cs2Cn_Prk_Retailer A INNER JOIN Retailer B ON A.RtrCode=B.RtrCode
	INNER JOIN #RtrUDC C ON B.RtrId = C.MasterRecordid AND ColumnName ='Retailer Type'

	UPDATE A SET RelatedParty = ISNULL(C.ColumnValue,'')  FROM Cs2Cn_Prk_Retailer A INNER JOIN Retailer B ON A.RtrCode=B.RtrCode
	INNER JOIN #RtrUDC C ON B.RtrId = C.MasterRecordid AND ColumnName ='Related Party'

	UPDATE A SET Composite = ISNULL(C.ColumnValue,'')  FROM Cs2Cn_Prk_Retailer A INNER JOIN Retailer B ON A.RtrCode=B.RtrCode
	INNER JOIN #RtrUDC C ON B.RtrId = C.MasterRecordid AND ColumnName ='Composition'
	
	--Till Here
	
	UPDATE Retailer SET Upload='Y' WHERE Upload='N'
	AND CmpRtrCode IN(SELECT CmpRtrCode FROM Cs2Cn_Prk_Retailer WHERE Mode='New')
	UPDATE RetailerClassficationChange SET UpLoadFlag=1 WHERE UpLoadFlag=0
	AND RtrCode IN(SELECT RtrCode FROM Cs2Cn_Prk_Retailer WHERE Mode='CR')
	UPDATE Cs2Cn_Prk_Retailer SET ServerDate=@ServerDate
END
GO
IF EXISTS (SELECT * FROM SYS.OBJECTS WHERE NAME ='Cs2Cn_Prk_RetailerShipAddress' AND TYPE='U')
DROP TABLE Cs2Cn_Prk_RetailerShipAddress
GO
CREATE Table Cs2Cn_Prk_RetailerShipAddress
(
Slno			numeric(32, 0) IDENTITY(1,1) NOT NULL,
DistCode		NVARCHAR(100),
RtrShipId		INT,
RtrCode			NVARCHAR(100),
CmpRtrCode		NVARCHAR(100),
RtrName			NVARCHAR(100),
RtrShipAdd1		NVARCHAR(100),
RtrShipAdd2		NVARCHAR(100),
RtrShipAdd3		NVARCHAR(100),
RtrShipPinNo	INT,
RtrShipPhoneNo	NVARCHAR(100),
TaxGroupCode 	NVARCHAR(50),
Statecode		NVARCHAR(100),
GSTTinNo		NVARCHAR(100),
UploadFlag		Nvarchar(1),
Syncid			NUMERIC(38,2),
Serverdate		DATETIME
)
GO
IF  EXISTS (SELECT * FROM SYS.OBJECTS WHERE NAME ='Proc_Cs2Cn_RetailerShipAddress' AND TYPE='P')
DROP PROCEDURE Proc_Cs2Cn_RetailerShipAddress
GO
--EXEC Proc_Cs2Cn_RetailerShipAddress 0
CREATE PROCEDURE Proc_Cs2Cn_RetailerShipAddress
(
 @Po_ErrNo INT OUTPUT,
 @ServerDate DATETIME
)
AS
/*********************************
* PROCEDURE		: Proc_Cs2Cn_DailySales
* PURPOSE		: To Extract Retailer Shipping address from CoreStocky to upload to Console
* CREATED BY	: Mohana
* CREATED DATE	: 18-05-2017
* NOTE			:
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
*********************************/
SET NOCOUNT ON
BEGIN
	DECLARE @DistCode NVARCHAR(100)

	SET @Po_ErrNo=0

	DELETE FROM Cs2Cn_Prk_RetailerShipAddress WHERE UploadFlag ='Y'

	SELECT @DistCode = DistributorCode FROM Distributor	

	INSERT INTO Cs2Cn_Prk_RetailerShipAddress (DistCode,RtrCode,CmpRtrCode,RtrName,RtrShipId,RtrShipAdd1,RtrShipAdd2,RtrShipAdd3,RtrShipPinNo,RtrShipPhoneNo,
	TaxGroupCode,Statecode,GSTTinNo,UploadFlag,ServerDate)
	SELECT @DistCode,R.RtrCode,R.CmpRtrCode,R.RtrName,RS.RtrShipId,RtrShipAdd1,RtrShipAdd2,RtrShipAdd3,RtrShipPinNo,RtrShipPhoneNo,T.RtrGroup,S.StateCode,
	GSTTinNo,'N',@ServerDate FROM Retailer R 
	INNER JOIN RetailerShipAdd RS ON R.RtrId = RS.RtrId
	INNER JOIN TaxGroupSetting T ON RS.taxgroupid = T.TaxGroupId
	INNER JOIN StateMaster S ON S.StateId = RS.StateId AND RS.Upload = 'N'
	
	UPDATE RS SET Upload='Y' FROM Cs2Cn_Prk_RetailerShipAddress A
	INNER JOIN RetailerShipAdd RS ON A.RtrShipId = RS.RtrShipId

END
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS A INNER JOIN SYScolumns B ON A.id=B.id AND A.NAME='Cs2Cn_Prk_DailyRetailerDetails' AND B.NAME='StateName')
BEGIN

ALTER TABLE Cs2Cn_Prk_DailyRetailerDetails ADD StateName NVARCHAR(100)

END
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS A INNER JOIN SYScolumns B ON A.id=B.id AND A.NAME='Cs2Cn_Prk_DailyRetailerDetails' AND b.name='GSTTIN')
BEGIN

ALTER TABLE Cs2Cn_Prk_DailyRetailerDetails ADD GSTTIN NVARCHAR(100)

END
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS A INNER JOIN SYScolumns B ON A.id=B.id AND A.NAME='Cs2Cn_Prk_DailyRetailerDetails' AND B.NAME='PanNumber')
BEGIN

ALTER TABLE Cs2Cn_Prk_DailyRetailerDetails ADD PanNumber NVARCHAR(100)

END
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS A INNER JOIN SYScolumns B ON A.id=B.id AND A.NAME='Cs2Cn_Prk_DailyRetailerDetails' AND B.NAME='RetailerType')
BEGIN

ALTER TABLE Cs2Cn_Prk_DailyRetailerDetails ADD RetailerType NVARCHAR(100)

END
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS A INNER JOIN SYScolumns B ON A.id=B.id AND A.NAME='Cs2Cn_Prk_DailyRetailerDetails' AND b.name='Composite')
BEGIN

ALTER TABLE Cs2Cn_Prk_DailyRetailerDetails ADD Composite NVARCHAR(100)

END
GO
IF NOT EXISTS (SELECT * FROM SYSOBJECTS A INNER JOIN SYScolumns B ON A.id=B.id AND A.NAME='Cs2Cn_Prk_DailyRetailerDetails' AND b.name='RelatedParty')
BEGIN

ALTER TABLE Cs2Cn_Prk_DailyRetailerDetails ADD RelatedParty NVARCHAR(100)

END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Cs2Cn_DailyRetailerDetails' AND TYPE='P')
DROP PROCEDURE Proc_Cs2Cn_DailyRetailerDetails
GO
/*
BEGIN TRANSACTION
EXEC Proc_Cs2Cn_DailyRetailerDetails 0
--SELECT COUNT(*) FROM Cs2Cn_Prk_DailyRetailerDetails ORDER BY RtrId
--SELECT COUNT(*) FROM Retailer ORDER BY RtrId
--DELETE FROM RetailerValueClassMap WHERE RTrId BETWEEN 100 AND 103
--DELETE FROM UdcDetails WHERE MasterRecordId BETWEEN 200 AND 203
--DELETE FROM Cs2Cn_Prk_DailyRetailerDetails
SELECT * FROM Cs2Cn_Prk_DailyRetailerDetails
SELECT * FROM DayEndProcess
--UPDATE DayEndProcess SET NextUpDate='2010-08-10' WHERE ProcId>13
--UPDATE Configuration SET Status=1,ConfigValue=3 WHERE ModuleId='BotreeRtrUpload'
SELECT * FROM Configuration WHERE ModuleId='BotreeRtrUpload'
ROLLBACK TRANSACTION
*/
CREATE PROCEDURE Proc_Cs2Cn_DailyRetailerDetails
(
	@Po_ErrNo INT OUTPUT,
	@ServerDate DATETIME
)
AS
BEGIN
SET NOCOUNT ON
/*********************************
* PROCEDURE		: Proc_Cs2Cn_DailyRetailerDetails
* PURPOSE		: Extract Retailer Details from CoreStocky to Console
* NOTES			:
* CREATED		: Nandakumar R.G
* CREATED DATE	: 30/03/2010
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
***********************************************
*
***********************************************/
	DECLARE @DistCode	As nVarchar(50)
	DECLARE @Days		AS INT
	SET @Po_ErrNo=0
	
	DELETE FROM Cs2Cn_Prk_DailyRetailerDetails WHERE UploadFlag = 'Y'
	
	SELECT @DistCode = DistributorCode FROM Distributor
	
	IF EXISTS(SELECT * FROM Configuration WHERE ModuleId='BotreeRtrUpload' AND Status=1)
	BEGIN	
		SELECT @Days=ISNULL(ConfigValue,0) FROM Configuration WHERE ModuleId='BotreeRtrUpload' 		
		IF EXISTS(SELECT * FROM DayEndProcess WHERE DATEADD(DAY,@Days,NextUpDate)<=GETDATE() AND ProcId=14)
		BEGIN	
			INSERT INTO Cs2Cn_Prk_DailyRetailerDetails
			(
				DistCode,
				RtrId,
				RtrCode,
				CmpRtrCode,
				RtrName,
				RtrAddr1,
				RtrAddr2,
				RtrAddr3,
				RtrPINCode,
				RtrChannelCode,
				RtrGroupCode,
				RtrClassCode,
				GeoLevel,
				GeoName,
				RtrStatus,
				RegDate,
				RtrUploadStatus,
				UploadedDate,
				UploadFlag
			)
			SELECT
				@DistCode,
				R.RtrId,
				R.RtrCode,
				R.CmpRtrCode,
				R.RtrName,
				R.RtrAdd1,
				R.RtrAdd2,
				R.RtrAdd3,
				R.RtrPinNo,
				'' AS CtgCode,
				'' AS CtgCode,
				'' AS ValueClassCode,
				'' AS GeoLevelName,
				'' AS GeoName,
				(CASE RtrStatus WHEN 1 THEN 'Active' ELSE 'InActive' END) AS RtrStatus,	
				RtrRegDate,
				R.Upload,
				GETDATE(),
				'N'				
			FROM Retailer R  		
				
			UPDATE ETL SET ETL.RtrChannelCode=RVC.ChannelCode,ETL.RtrGroupCode=RVC.GroupCode,ETL.RtrClassCode=RVC.ValueClassCode
			FROM Cs2Cn_Prk_DailyRetailerDetails ETL,
			(
				SELECT R.RtrId,RC1.CtgCode AS ChannelCode,RC.CtgCode  AS GroupCode ,RVC.ValueClassCode
				FROM
				RetailerValueClassMap RVCM ,
				RetailerValueClass RVC	,
				RetailerCategory RC ,
				RetailerCategoryLevel RCL,
				RetailerCategory RC1,
				Retailer R  		
			WHERE
				R.Rtrid = RVCM.RtrId
				AND	RVCM.RtrValueClassId = RVC.RtrClassId
				AND	RVC.CtgMainId=RC.CtgMainId
				AND	RCL.CtgLevelId=RC.CtgLevelId
				AND	RC.CtgLinkId = RC1.CtgMainId
			) AS RVC
			WHERE ETL.RtrId=RVC.RtrId
			
			UPDATE ETL SET ETL.GeoLevel=Geo.GeoLevelName,ETL.GeoName=Geo.GeoName
			FROM Cs2Cn_Prk_DailyRetailerDetails ETL,
			(
				SELECT R.RtrId,ISNULL(GL.GeoLevelName,'City') AS GeoLevelName,
				ISNULL(G.GeoName,'') AS GeoName
				FROM			
				Retailer R  		
				LEFT OUTER JOIN Geography G ON R.GeoMainId=G.GeoMainId
				LEFT OUTER JOIN GeographyLevel GL ON GL.GeoLevelId=G.GeoLevelId
			) AS Geo
			WHERE ETL.RtrId=Geo.RtrId	
			UPDATE DayEndProcess SET NextUpDate=DATEADD(DAY,@Days,NextUpDate) WHERE ProcId=14
		END		
	END
	
	
--Added By Mohana For GST

		SELECT C.MasterRecordId,B.ColumnName,ISNULL(C.ColumnValue,'') ColumnValue INTO #RtrUDC FROM UdcHD A INNER JOIN UdcMaster B ON A.MasterId=B.MasterId AND A.MasterName='Retailer Master'
		INNER JOIN UdcDetails C ON A.MasterId= C.MasterId AND B.UdcMasterId=C.UdcMasterId --AND masterrecordid =445
		INNER JOIN Retailer R ON R.RtrId =C.MasterRecordId AND B.ColumnName IN ('State name','GSTIN','PAN Number','Retailer Type','Related Party','Composition')

		UPDATE A SET StateName =ColumnValue FROM Cs2Cn_Prk_DailyRetailerDetails A INNER JOIN Retailer B ON A.RtrCode=B.RtrCode
		INNER JOIN #RtrUDC C ON B.RtrId = C.MasterRecordid AND ColumnName ='State Name'

		UPDATE A SET GSTTIN = ColumnValue  FROM Cs2Cn_Prk_DailyRetailerDetails A INNER JOIN Retailer B ON A.RtrCode=B.RtrCode
		INNER JOIN #RtrUDC C ON B.RtrId = C.MasterRecordid AND ColumnName ='GSTIN'

		UPDATE A SET PanNumber = ColumnValue  FROM Cs2Cn_Prk_DailyRetailerDetails A INNER JOIN Retailer B ON A.RtrCode=B.RtrCode
		INNER JOIN #RtrUDC C ON B.RtrId = C.MasterRecordid AND ColumnName ='PAN Number'

		UPDATE A SET RetailerType = ColumnValue FROM Cs2Cn_Prk_DailyRetailerDetails A INNER JOIN Retailer B ON A.RtrCode=B.RtrCode
		INNER JOIN #RtrUDC C ON B.RtrId = C.MasterRecordid AND ColumnName ='Retailer Type'

		UPDATE A SET RelatedParty = ColumnValue  FROM Cs2Cn_Prk_DailyRetailerDetails A INNER JOIN Retailer B ON A.RtrCode=B.RtrCode
		INNER JOIN #RtrUDC C ON B.RtrId = C.MasterRecordid AND ColumnName ='Related Party'

		UPDATE A SET Composite = ColumnValue  FROM Cs2Cn_Prk_DailyRetailerDetails A INNER JOIN Retailer B ON A.RtrCode=B.RtrCode
		INNER JOIN #RtrUDC C ON B.RtrId = C.MasterRecordid AND ColumnName ='Composition'

		--Till Here
	
	UPDATE Cs2Cn_Prk_DailyRetailerDetails SET ServerDate=@ServerDate
END
GO
IF EXISTS (SELECT * FROM SYS.objects WHERE name='Proc_Cn2Cs_UDCDetails' AND type ='P')
DROP PROCEDURE Proc_Cn2Cs_UDCDetails
GO
/* 
	BEGIN TRANSACTION
	EXEC Proc_Cn2Cs_UDCDetails 0
	--SELECT * FROM Errorlog
	--SELECT * FROM Cn2Cs_Prk_UDCDetails (NOLOCK)
	--select * from UdcDetails (NOLOCK) WHERE MasterRecordId = 1
	ROLLBACK TRANSACTION
*/
CREATE PROCEDURE Proc_Cn2Cs_UDCDetails
(
	@Po_ErrNo INT OUTPUT
)
AS
/***************************************************************
* PROCEDURE		   : Proc_Cn2Cs_UDCDetails
* PURPOSE		   : To Get the UDC Details Approval
* CREATED		   : SATHISHKUMAR VEERAMANI
* CREATED DATE	   : 10/06/2014
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
----------------------------------------------------------------
* {date}		{developer}  {brief modification description}
****************************************************************/
SET NOCOUNT ON
BEGIN
SET @Po_ErrNo=0
DECLARE @MasterId AS NUMERIC(18,0)
DELETE FROM Cn2Cs_Prk_UDCDetails WHERE DownloadFlag = 'Y'
SELECT @MasterId = MasterId FROM UdcHD (NOLOCK) WHERE UPPER(MasterName) = 'RETAILER MASTER'
	   IF EXISTS(SELECT '*' FROM Cn2Cs_Prk_UDCDetails(NOLOCK) WHERE DownLoadFlag='D')
	   BEGIN
			EXEC Proc_Cn2Cs_UDCDefaults 0
	   END
	  CREATE TABLE #ToAvoidUDCRetailer
	  (
		CmpRtrcode NVARCHAR(200)
	  )
	  
	  --UDC Details Column Name Validation
	  INSERT INTO #ToAvoidUDCRetailer (CmpRtrcode)
	  SELECT DISTINCT MasterValueCode FROM Cn2Cs_Prk_UDCDetails (NOLOCK) WHERE ISNULL(ColumnName,'') NOT IN (SELECT ColumnName FROM UDCMaster(NOLOCK) 
	  WHERE MasterId = @MasterId) AND DownloadFlag = 'D'
	  
	  INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	  SELECT DISTINCT 1,'UDCMaster','ColumnName','Column Name not Available-'+ColumnName FROM Cn2Cs_Prk_UDCDetails (NOLOCK) 
	  WHERE ISNULL(ColumnName,'') NOT IN (SELECT ColumnName FROM UDCMaster(NOLOCK) WHERE MasterId = @MasterId) AND DownloadFlag = 'D'
	  
	  --UDC Details Column Value Validation
	  INSERT INTO #ToAvoidUDCRetailer (CmpRtrcode)
	  SELECT DISTINCT MasterValueCode FROM Cn2Cs_Prk_UDCDetails A (NOLOCK) 
	  INNER JOIN UdcMaster B(NOLOCK) ON A.ColumnName=B.ColumnName and A.MasterId=B.MasterId 
	  WHERE B.PickFromDefault=1 AND ISNULL(ColumnValue,'') 
	  NOT IN (SELECT ColValue FROM UDCDefault(NOLOCK) WHERE MasterId = @MasterId) AND DownloadFlag = 'D'	  
	  
	  INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	  SELECT DISTINCT 1,'UDCMaster','ColumnValue','Column Value not Available-'+ColumnValue FROM Cn2Cs_Prk_UDCDetails A (NOLOCK) 
	  INNER JOIN UdcMaster B(NOLOCK) ON A.ColumnName=B.ColumnName and A.MasterId=B.MasterId 
	  WHERE B.PickFromDefault=1 AND ISNULL(ColumnValue,'') NOT IN (SELECT ColValue FROM UDCDefault(NOLOCK) WHERE MasterId = @MasterId) AND DownloadFlag = 'D'
	  
	  
	  --UDC Column Name and Column Value Mapped Validation
	  INSERT INTO #ToAvoidUDCRetailer (CmpRtrcode)
	  SELECT DISTINCT MasterValueCode FROM Cn2Cs_Prk_UDCDetails UDC (NOLOCK)
	  INNER JOIN UDCMaster UM(NOLOCK) ON UM.MasterId=UDC.MasterId and UDC.ColumnName=UM.ColumnName
	  WHERE UM.PickFromDefault=1 AND NOT EXISTS (SELECT ColumnName,ColValue FROM UDCMaster A (NOLOCK) INNER JOIN UdcDefault B WITH(NOLOCK) 
	  ON A.UdcMasterId = B.UdcMasterId AND A.MasterId = B.MasterId WHERE A.MasterId = @MasterId 
	  AND UDC.ColumnName = A.ColumnName AND UDC.ColumnValue = B.ColValue) AND DownloadFlag = 'D'
	  
	  INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	  SELECT DISTINCT 1,'UDCMaster','ColumnName','Column Name and Column Value not Available-'+UDC.ColumnName+'-'+UDC.ColumnValue 
	  FROM Cn2Cs_Prk_UDCDetails UDC (NOLOCK) 
	  INNER JOIN UDCMaster UM(NOLOCK) ON UM.MasterId=UDC.MasterId and UDC.ColumnName=UM.ColumnName
	  WHERE  UM.PickFromDefault=1 AND NOT EXISTS (SELECT ColumnName,ColValue FROM UDCMaster A (NOLOCK) 
	  INNER JOIN UdcDefault B WITH(NOLOCK) ON A.UdcMasterId = B.UdcMasterId AND A.MasterId = B.MasterId WHERE A.MasterId = @MasterId 
	  AND UDC.ColumnName = A.ColumnName AND UDC.ColumnValue = B.ColValue) AND DownloadFlag = 'D'
	  
	  --Download UDC ColumnCount Validation
	  INSERT INTO #ToAvoidUDCRetailer (CmpRtrcode)
	  SELECT DISTINCT MasterValueCode FROM (
	  SELECT DISTINCT MasterValueCode,ColumnName,COUNT(DISTINCT ColumnValue) AS Counts FROM Cn2Cs_Prk_UDCDetails WITH(NOLOCK)
	  WHERE MasterValueCode NOT IN (SELECT CmpRtrcode FROM #ToAvoidUDCRetailer) AND DownloadFlag = 'D' 
	  GROUP BY MasterValueCode,ColumnName HAVING COUNT(DISTINCT ColumnValue) > 1) Qry
	  INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	  SELECT DISTINCT 1,'UDCMaster','ColumnValue','Duplicate Column Value Available-'+MasterValueCode+'-'+ColumnName FROM (
	  SELECT DISTINCT MasterValueCode,ColumnName,COUNT(DISTINCT ColumnValue) AS Counts FROM Cn2Cs_Prk_UDCDetails WITH(NOLOCK)
	  WHERE MasterValueCode NOT IN (SELECT CmpRtrcode FROM #ToAvoidUDCRetailer) AND DownloadFlag = 'D' 
	  GROUP BY MasterValueCode,ColumnName HAVING COUNT(DISTINCT ColumnValue) > 1) Qry
	  
	  --Existing Retailer 
	  SELECT MasterName,RtrId,MasterValueCode AS CmpRtrCode,MasterValueName AS RtrName,ColumnName,ColumnValue INTO #ExistingRetailerUDC 
	  FROM Cn2Cs_Prk_UDCDetails A (NOLOCK) INNER JOIN Retailer B WITH(NOLOCK) ON A.MasterValueCode = B.CmpRtrCode
	  WHERE MasterValueCode NOT IN (SELECT CmpRtrcode FROM #ToAvoidUDCRetailer) AND DownloadFlag = 'D' 
	  
	 -- New Retailer Data Import
	  INSERT INTO RetailerMigrationUDCDetails (CmpRtrCode,RtrName,ColumnName,ColumnValue,Upload,DownloadedDate)
	  SELECT DISTINCT MasterValueCode,MasterValueName,ColumnName,ColumnValue,0 AS Upload,CONVERT(NVARCHAR(10),GETDATE(),121) 
	  FROM Cn2Cs_Prk_UDCDetails A WITH(NOLOCK)
	  WHERE MasterValueCode NOT IN (SELECT CmpRtrcode FROM #ToAvoidUDCRetailer) AND 
	  NOT EXISTS (SELECT CmpRtrCode,RtrName,ColumnName,ColumnValue FROM RetailerMigrationUDCDetails B (NOLOCK) WHERE
	  A.MasterValueCode = B.CmpRtrCode AND A.MasterValueName = B.RtrName AND A.ColumnName = B.ColumnName AND A.ColumnValue = B.ColumnValue)
	  AND NOT EXISTS (SELECT CmpRtrCode FROM #ExistingRetailerUDC C WHERE A.MasterValueCode = C.CmpRtrCode) 
	  AND MasterName LIKE 'Retailer%' AND DownloadFlag = 'D'  ORDER BY MasterValueCode 	  
	  --Existing Retailer
	   SELECT UdcDetailsId,A.CmpRtrCode,B.UDCMasterId,RtrId,A.ColumnName,A.ColumnValue INTO #RetailerUDCDetails FROM #ExistingRetailerUDC A WITH(NOLOCK)
	   INNER JOIN UdcMaster B WITH(NOLOCK) ON A.ColumnName = B.ColumnName 
	   INNER JOIN UdcDetails C WITH(NOLOCK) ON A.RtrId = C.MasterRecordId AND B.UdcMasterId = C.UdcMasterId
	   INNER JOIN UdcDefault D WITH(NOLOCK) ON A.ColumnValue = D.ColValue AND B.UdcMasterId = D.UdcMasterId 
	   WHERE B.MasterId = @MasterId  
	   
	   
	   --Insert UDC Details for New Udc
	   DELETE FROM ETL_PRK_UDCDETAILS
	   
	   INSERT INTO ETL_Prk_UdcDetails
	   SELECT A.MasterName,A.ColumnName,R.RtrCode,A.ColumnValue FROM #ExistingRetailerUDC A 
	   INNER JOIN Retailer R(NOLOCK)ON R.CmpRtrCode=A.CmpRtrCode
	   WHERE NOT EXISTS(SELECT * FROM #RetailerUDCDetails B WHERE A.CmpRtrCode=B.CmpRtrCode AND A.ColumnName=B.ColumnName AND A.ColumnValue=B.ColumnValue)
	  
	   IF EXISTS(SELECT * FROM ETL_Prk_UdcDetails)
	   BEGIN
			EXEC Proc_ValidateUdcDetails 0
	   END
	    
	   UPDATE A SET A.ColumnValue = C.ColumnValue,A.Upload = 1 FROM UdcDetails A WITH(NOLOCK) 
	   INNER JOIN UDCMaster B WITH(NOLOCK) ON A.UdcMasterId = B.UdcMasterId AND A.MasterId = B.MasterId 
	   INNER JOIN #RetailerUDCDetails C ON A.UdcDetailsId = C.UdcDetailsId AND A.UdcMasterId = C.UdcMasterId 
	   AND A.MasterRecordId = C.RtrId AND B.UdcMasterId = C.UDCMasterId AND B.ColumnName = C.ColumnName
	   
	   --UPDATE A SET A.Upload = 1 FROM RetailerUDCApproval A (NOLOCK) INNER JOIN #RetailerUDCDetails B ON A.UDCDetailsId = B.UdcDetailsId
	   --AND A.UdcMasterId = B.UdcMasterId AND A.RtrId = B.RtrId AND A.ColumnName = B.ColumnName
	   
	   --UPDATE A SET A.DownloadFlag = 'Y' FROM Cn2Cs_Prk_UDCDetails A WITH(NOLOCK) 
	   --INNER JOIN RetailerMigrationUDCDetails B WITH(NOLOCK) ON A.MasterValueCode = B.CmpRtrCode AND A.ColumnName = B.ColumnName
	   --AND A.ColumnValue = B.ColumnValue
	   
	   UPDATE A SET A.DownloadFlag = 'Y' FROM Cn2Cs_Prk_UDCDetails A WITH(NOLOCK) 
	   INNER JOIN #ExistingRetailerUDC B WITH(NOLOCK) ON A.MasterValueCode = B.CmpRtrCode AND A.ColumnName = B.ColumnName
	   AND A.ColumnValue = B.ColumnValue
	  	  
END
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Cs2Cn_Prk_UDCDetails]') AND type in (N'U'))
DROP TABLE [dbo].[Cs2Cn_Prk_UDCDetails]
GO
CREATE TABLE [dbo].[Cs2Cn_Prk_UDCDetails](
	[SlNo] [numeric](38, 0) IDENTITY(1,1) NOT NULL,
	[DistCode] [nvarchar](50) NULL,
	[MasterId] [int] NULL,
	[MasterName] [nvarchar](200) NULL,
	[MasterValueCode] [nvarchar](200) NULL,
	[MasterValueName] [nvarchar](200) NULL,
	[ColumnName] [nvarchar](100) NULL,
	[ColumnValue] [nvarchar](100) NULL,
	[UploadFlag] [nvarchar](1) NULL,
	[SyncId] [numeric](38, 0) NULL,
	[ServerDate] [datetime] NULL
)
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Cs2Cn_UDCDetails' AND TYPE='P')
DROP PROCEDURE Proc_Cs2Cn_UDCDetails
GO
/*
BEGIN TRANSACTION
EXEC Proc_Cs2Cn_UDCDetails 0,''
SELECT * FROM Cs2Cn_Prk_UDCDetails ORDER BY SlNo
SELECT * FROM Retailer
ROLLBACK TRANSACTION
*/
CREATE PROCEDURE Proc_Cs2Cn_UDCDetails
(
	@Po_ErrNo	INT OUTPUT,
	@ServerDate DATETIME
)
AS
SET NOCOUNT ON
BEGIN
/*********************************
* PROCEDURE		: Proc_Cs2Cn_UDCDetails
* PURPOSE		: To Extract UDC Details from CoreStocky to upload to Console
* CREATED		: Nandakumar R.G
* CREATED DATE	: 23/06/2010
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
	
*********************************/
	DECLARE @DistCode	As nVarchar(50)
	
	SET @Po_ErrNo=0
	DELETE FROM Cs2Cn_Prk_UDCDetails WHERE UploadFlag = 'Y'
	
	SELECT @DistCode = DistributorCode FROM Distributor


	INSERT INTO Cs2Cn_Prk_UDCDetails
	(
		DistCode,
		MasterId,
		MasterName,
		MasterValueCode,
		MasterValueName,
		ColumnName,
		ColumnValue,
		UploadFlag,
		ServerDate
	)

	SELECT @DistCode,UD.MasterId,UH.MasterName,R.RtrCode,R.RtrName,UM.ColumnName,UD.ColumnValue,'N' ,@ServerDate
	FROM UDCDetails UD,UdcHd UH,UDCMaster UM,Retailer R
	WHERE UD.MasterId=UH.MasterId AND UD.UdcMasterId=UM.UdcMasterId
	AND UD.MasterRecordId=R.RtrId AND UD.MasterId=2 AND UD.Upload=0
	
	UPDATE UDCDetails SET Upload=1 WHERE MasterId IN (2)

END
GO
--Mohana TillHere
DELETE FROM ETLMaster WHERE [Module] ='RetailerGST'
INSERT INTO ETLMaster ---(SlNo,SeqNo,[Module],Screen,ExportFnName,ImportProcName,ParkTable,ValidateProcName,Master,MandatoryFile)
SELECT 56,1,'RetailerGST','RetailerGST','Fn_ExportRetailerGST','Proc_ImportRetailerGST','ETL_Prk_RetailerGST','Proc_ValidateRetailerMasterGST','Master',1
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Fn_ExportRetailerGST' AND XTYPE IN ('TF','FN'))
DROP FUNCTION Fn_ExportRetailerGST
GO
--Select dbo.Fn_ExportRetailerGST()
CREATE FUNCTION [Fn_ExportRetailerGST] ()
RETURNS NVARCHAR(4000)
AS
/*********************************
* FUNCTION: Fn_ExportRetailer
* PURPOSE: Return Retailer Master Details For GST
* NOTES:
* CREATED: Mohanakrishna A.B
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
*
*********************************/
BEGIN
DECLARE @StateCode AS VARCHAR(100)
SET @StateCode=''

	SELECT @StateCode=ISNULL(S.StateCode,'') FROM UdcMaster U (NOLOCK) 
	INNER JOIN UdcDetails UD (NOLOCK) ON U.MasterId=UD.MasterId and U.UdcMasterId=UD.UdcMasterId
	INNER JOIN Distributor D (NOLOCK) ON D.DistributorId=UD.MasterRecordId
	INNER JOIN StateMaster S (NOLOCK) ON S.StateName=UD.ColumnValue
	WHERE U.MasterId=16 and ColumnName='State Name' 

DECLARE @sSql NVARCHAR(MAX)
SET @sSql  = 'SELECT DISTINCT A.CmpRtrCode AS [Retailer Code],A.RtrName AS [Retailer Name],ISNULL(C.StateCode,'''+@StateCode+''') AS StateCode,'''' AS GSTTIN,'''' AS PanNumber,'''' AS RetailerType,
			'''' AS Composite,'''' AS RelatedParty ,ISNULL(TG.RtrGroup,'''') AS  [Tax Group] INTO #TEMP 
			From Retailer A WITH (NOLOCK)  INNER JOIN RetailerShipAdd B WITH (NOLOCK) ON A.Rtrid=B.RtrId 
			LEFT OUTER JOIN TaxGroupSetting TG WITH (NOLOCK) ON TG.TaxGroupId=A.TaxGroupId
			LEFT OUTER JOIN StateMaster C ON C.StateId=B.StateId  Order by A.CmpRtrCode
		  SELECT * FROM #TEMP'
RETURN (@sSql)
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='ETL_Prk_RetailerGST' and xtype='U')
BEGIN
	CREATE TABLE ETL_Prk_RetailerGST
	(
			[Retailer Code]	        NVARCHAR(100),
			[Retailer Name]	        NVARCHAR(100),
			[StateCode]             NVARCHAR(100),
			[GSTTIN]                NVARCHAR(100),
			[PanNumber]			    NVARCHAR(100),
			[Composite]             NVARCHAR(100),
			[RetailerType]          NVARCHAR(100),
			[RelatedParty]          NVARCHAR(100),
			[Tax Group]		        NVARCHAR(100)
	)
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='ETL_Prk_UDCRetailerGST' and xtype='U')
BEGIN
	CREATE TABLE ETL_Prk_UDCRetailerGST
	(
			MasterName		NVARCHAR(100),
			ColumnName		NVARCHAR(100),
			[Column Code]	NVARCHAR(100),
			[ColumnValue]	NVARCHAR(100),
			UpdateFlag		NVARCHAR(2)
	)
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_ETLValidate_UdcDetailsGST' AND type='P')
DROP PROCEDURE Proc_ETLValidate_UdcDetailsGST
GO
-- EXEC Proc_ETLValidate_UdcDetailsGST ''
CREATE PROCEDURE Proc_ETLValidate_UdcDetailsGST
(
	@Po_ErrNo INT OUTPUT 
)
AS       
/*********************************    
* PROCEDURE: Proc_ETLValidate_UdcDetailsGST    
* PURPOSE: To Insert and Update records      
* CREATED: Mohanakrishna A.B
*********************************/       
SET NOCOUNT ON    
BEGIN       
	DECLARE @ErrDesc AS VARCHAR(1000)  
	DECLARE @rno AS INT  
	DECLARE @TabName AS VARCHAR(50)  
	DECLARE @GetKey AS INT
	DECLARE @Taction AS INT
	DECLARE @MasterName AS Varchar(100)
	DECLARE @ColName AS Varchar(100)
	DECLARE @ColName1 AS Varchar(100)
	DECLARE @ColCode AS Varchar(100)
	DECLARE @ColValue AS Varchar(100)
	DECLARE @UdcHdId AS INT
	DECLARE @UdcMasId AS INT
	DECLARE @RecId AS INT
	DECLARE @UdcDtId AS INT
	DECLARE @TempStr AS VARCHAR(4000)
	DECLARE @sSQL AS VARCHAR(4000)
	DECLARE @UniqueId AS INT
	DECLARE @Mandatory AS INT
	DECLARE @TempUdcMasterId AS Varchar(50)
	SET @TabName = 'ETL_Prk_RetailerGST'  
	SET @Po_ErrNo =0
	
	DECLARE Cur_UdcDt CURSOR   
	FOR SELECT DISTINCT ISNULL(MasterName,'') MasterName,ISNULL([ColumnName],'') ColumnName,ISNULL([Column Code],'') AS [Column Code],ISNULL([ColumnValue],'') AS [ColumnValue]
    	FROM ETL_Prk_UDCRetailerGST (NOLOCK) WHERE UpdateFlag=0
	OPEN Cur_UdcDt  
	FETCH NEXT FROM Cur_UdcDt INTO @MasterName,@ColName,@ColCode,@ColValue 
	set @Rno = 0  
	WHILE @@FETCH_STATUS=0  
	BEGIN  	  
		set @Taction = 2
		SET @Po_ErrNo = 0 
		IF @Po_ErrNo = 0 
		BEGIN
			
			IF @MasterName='PRODUCT MASTER'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('PRODUCT MASTER')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('PRODUCT','PrdCCode','PrdId',LTRIM(RTRIM(@ColCode)),1)
					END
				END
			END
			
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'RETAILER MASTER'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('RETAILER MASTER')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('RETAILER','RtrCode','RtrId',LTRIM(RTRIM(@ColCode)),1)
					END
				END
			END
			
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'SUPPLIER MASTER'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('SUPPLIER MASTER')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('SUPPLIER','SpmCode','SpmId',LTRIM(RTRIM(@ColCode)),1)
					END
				END
			END
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'DISTRIBUTOR INFO MASTER'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('DISTRIBUTOR INFO MASTER')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('DISTRIBUTOR','DistributorCode','DistributorId',LTRIM(RTRIM(@ColCode)),1)
					END
				END
			END
			
			IF exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[TempTbl]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
			drop table [dbo].[TempTbl]
			CREATE TABLE TempTbl (ColId INT)
			INSERT INTO TempTbl EXEC (@TempStr)
			IF (SELECT Count(*) FROM TempTbl) > 0
			BEGIN
				SELECT @RecId = ColId FROM TempTbl
			END
			ELSE
			BEGIN
				SET @RecId=0
			END
			
			IF @RecId <> 0 			
			BEGIN			
				SELECT @UdcDtId = dbo.Fn_ReturnMasterRecId(@RecId,@UdcHdId,@UdcMasId)	
				IF @UdcDtId <> 0
				BEGIN
					UPDATE UdcDetails SET ColumnValue =LTRIM(RTRIM(@ColValue)) WHERE MasterId = @UdcHdId AND UdcMasterId = @UdcMasId AND MasterRecordId=@RecId 			
				END
				ELSE
				BEGIN
					SELECT @GetKey= dbo.Fn_GetPrimaryKeyInteger('UDCDetails','UdcDetailsId',CAST(YEAR(GetDate())AS INT),MONTH(GETDATE()))
					
					SELECT @UniqueId= Dbo.Fn_ReturnUDCUniqueId(LTRIM(RTRIM(@ColValue)),@UdcMasId)
					
					IF @UniqueId=0 
					BEGIN
						SELECT @UniqueId=dbo.Fn_GetPrimaryKeyInteger('UDCDetails','UDCUniqueId',CAST(YEAR(GetDate())AS INT),MONTH(GETDATE()))
					END
					INSERT INTO UDCDetails(UdcDetailsId,UdcMasterId,MasterId,MasterRecordId,ColumnValue,UDCUniqueId,Availability,LastModBy,LastModDate,AuthId,AuthDate) 
					VALUES (@GetKey,@UdcMasId,@UdcHdId,@RecId,LTRIM(RTRIM(@ColValue)),@UniqueId,1,1,convert(varchar(10),getdate(),121),1,convert(varchar(10),getdate(),121))
					UPDATE counters SET currvalue = currvalue+1 where tabname = 'UDCDetails' and fldname = 'UdcDetailsId'
					UPDATE counters SET currvalue = currvalue+1 where tabname = 'UDCDetails' and fldname = 'UDCUniqueId'
				END
				
				UPDATE ETL_Prk_UDCRetailerGST SET UpdateFlag=1 WHERE MasterName=@MasterName and ColumnName=@ColName and [Column Code]=@ColCode
				
			END
		END
	
		FETCH NEXT FROM Cur_UdcDt INTO @MasterName,@ColName,@ColCode,@ColValue 
	END  
	CLOSE Cur_UdcDt  
	DEALLOCATE Cur_UdcDt
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_ValidateRetailerMasterGST' AND type='P')
DROP PROCEDURE Proc_ValidateRetailerMasterGST
GO
/*
 BEGIN TRAN
 Delete  FROM ERRORLOG
 --update retailer set taxgroupid=0 where RtrCode='CDP1134'
 EXEC Proc_ValidateRetailerMasterGST 0
 SELECT * FROM ETL_Prk_UDCRetailerGST
 Select * from ETL_Prk_RetailerGST

 EXEC Proc_ETLValidate_UdcDetailsGST 0
  SELECT  * FROM ERRORLOG
 SELECT * FROM UdcDetails where masterid=2 AND MasterRecordId=2
 --Select * from Retailer where RtrCode='CDP1134'
 ROLLBACK TRAN
 */
CREATE PROCEDURE Proc_ValidateRetailerMasterGST
(
	@Po_ErrNo INT OUTPUT
)
AS
/*********************************
* PROCEDURE		: Proc_ValidateRetailerMasterGST
* PURPOSE		: To validate the downloaded Retailer GST details from Console
* CREATED		: Mohanakrishna A.B
* CREATED DATE	: 23/05/2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
SET NOCOUNT ON
BEGIN
	SET @Po_ErrNo=0
	DECLARE @CurrValue as INT	
	DECLARE @UdcMasterId AS INT
	DECLARE @RtrCode VARCHAR(100)
	DECLARE @StateCode VARCHAR(100)
	DECLARE @RtrTaxGroup VARCHAR(100)
	DECLARE @Composite VARCHAR(10)
	DECLARE @RelatedParty AS VARCHAR(10)
	DECLARE @PanNumber AS VARCHAR(25)
	DECLARE @GSTTIN AS VARCHAR(25)
	DECLARE @TaxGrpId AS INT
	DECLARE @StateName as VARCHAR(200)
	DECLARE @RetailerType as VARCHAR(100)
	DECLARE @RtrId AS INT
	CREATE TABLE #ToAvoidUDCRetailer
	(
		RtrCode NVARCHAR(200)
	)
	
	CREATE TABLE #ETL_Prk_RetailerGST
	(
		RtrCode			[Varchar](50),
		RtrName			[Varchar](75),
		StateCode		[Varchar](50),
		GSTTIN			[Varchar](25),
		PanNumber		[Varchar](15),
		Composite		[Varchar](5),
		RetailerType	[Varchar](25),
		RelatedParty	[Varchar](5),
		RtrTaxGroup		[Varchar](50)
	)
	
	DECLARE @GSTEnabled AS TINYINT
	SET @GSTEnabled=0
	IF EXISTS(SELECT 'X' FROM GSTConfiguration WHERE ActivationStatus=1 and AcknowledgeStatus=1 and ConsoleAckStatus=1 
	and CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121)>=ActivationDate)
	BEGIN
		SET @GSTEnabled=1
	END
	

	INSERT INTO #ETL_Prk_RetailerGST
	SELECT ISNULL([Retailer Code],''),ISNULL([Retailer Name],''),ISNULL([StateCode],''),ISNULL([GSTTIN],''),ISNULL([PanNumber],''),
	ISNULL([Composite],''),ISNULL([RetailerType],''),ISNULL(RelatedParty	,''),ISNULL([Tax Group]	,'')  from ETL_Prk_RetailerGST
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 1,'Retailer GST','Retailer Code','Retailer GST Details Should not be empty' 
	FROM #ETL_Prk_RetailerGST
	WHERE (RTRIM(LTRIM(ISNULL(RtrCode,'')))='' 
	OR RTRIM(LTRIM(ISNULL(RtrCode,'')))='' 
	OR RTRIM(LTRIM(ISNULL(StateCode,'')))='')
	--OR RTRIM(LTRIM(ISNULL(RtrTaxGroup,'')))='')
	--OR RTRIM(LTRIM(ISNULL(PanNumber,'')))=''
	--OR RTRIM(LTRIM(ISNULL(GSTTIN,'')))='')
	
	
	DELETE A FROM #ETL_Prk_RetailerGST A
	WHERE (RTRIM(LTRIM(ISNULL(RtrCode,'')))='' 
	OR RTRIM(LTRIM(ISNULL(StateCode,'')))='') 
	--OR RTRIM(LTRIM(ISNULL(RtrTaxGroup,'')))='')
	--OR RTRIM(LTRIM(ISNULL(PanNumber,'')))=''
	--OR RTRIM(LTRIM(ISNULL(GSTTIN,'')))='')
	
	
	INSERT INTO #ToAvoidUDCRetailer (RtrCode)
	SELECT RtrCode FROM #ETL_Prk_RetailerGST
	GROUP BY RtrCode HAVING COUNT(RtrCode)>1
	
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT  2,'RetailerGST','Retailer','Retailer GST Details Not allow more than 1-'+RtrCode FROM #ETL_Prk_RetailerGST
	GROUP BY RtrCode HAVING COUNT(RtrCode)>1
	
	INSERT INTO #ToAvoidUDCRetailer (RtrCode)
	SELECT DISTINCT RtrCode FROM #ETL_Prk_RetailerGST  A(NOLOCK) 
	WHERE NOT EXISTS(SELECT CmpRtrCode FROM Retailer B(NOLOCK) WHERE A.RtrCode=B.CmpRtrCode) ---and DownLoadFlag='D'
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 3,'RetailerGST','RetailerCode','Retailer Code not Available-'+RtrCode FROM #ETL_Prk_RetailerGST  A(NOLOCK) 
	WHERE NOT EXISTS(SELECT CmpRtrCode FROM Retailer B(NOLOCK) WHERE A.RtrCode=B.CmpRtrCode) ---and DownLoadFlag='D'
	IF EXISTS(SELECT DISTINCT RtrCode FROM #ETL_Prk_RetailerGST A 
	WHERE  NOT EXISTS(SELECT StateCode FROM StateMaster B WHERE A.StateCode=ISNULL(B.StateCode,'')))
	BEGIN
		INSERT INTO #ToAvoidUDCRetailer (RtrCode)
		SELECT DISTINCT RtrCode FROM #ETL_Prk_RetailerGST A 
		WHERE NOT  EXISTS(SELECT StateCode FROM StateMaster B WHERE A.StateCode=ISNULL(B.StateCode,''))
	
		INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
		SELECT DISTINCT 4,'RetailerGST','State Code','Retailer GST State Code Not available-'+RtrCode FROM #ETL_Prk_RetailerGST A 
		WHERE NOT EXISTS(SELECT StateCode FROM StateMaster B WHERE A.StateCode=ISNULL(B.StateCode,''))
	END
	
	
	IF EXISTS(SELECT '*' FROM #ETL_Prk_RetailerGST CSM
			INNER JOIN StateMaster SM ON CSM.StateCode=SM.StateCode
			WHERE NOT EXISTS(
				SELECT UD.* FROM UdcHD A (NOLOCK)
				INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId 
				INNER JOIN UdcDefault UD (NOLOCK) ON B.MasterId=UD.MasterId and B.UdcMasterId=UD.UdcMasterId
				WHERE UPPER(A.MasterName)='Retailer Master' AND B.ColumnName='State Name' 
				AND UD.ColValue=SM.StateName and UD.SeqId=SM.StateId)
				)
	BEGIN
	
		INSERT INTO #ToAvoidUDCRetailer (RtrCode)
		SELECT DISTINCT RtrCode FROM #ETL_Prk_RetailerGST CSM
		INNER JOIN StateMaster SM ON CSM.StateCode=SM.StateCode
		WHERE NOT EXISTS(
			SELECT UD.* FROM UdcHD A (NOLOCK)
			INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId 
			INNER JOIN UdcDefault UD (NOLOCK) ON B.MasterId=UD.MasterId and B.UdcMasterId=UD.UdcMasterId
			WHERE UPPER(A.MasterName)='Retailer Master' AND B.ColumnName='State Name' 
			AND UD.ColValue=SM.StateName and UD.SeqId=SM.StateId)
	
		INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
		SELECT DISTINCT 5,'Retailer GST','StateName','Retailer State Code Not available '+RtrCode FROM #ETL_Prk_RetailerGST CSM
			INNER JOIN StateMaster SM ON CSM.StateCode=SM.StateCode
			WHERE NOT EXISTS(
				SELECT UD.* FROM UdcHD A (NOLOCK)
				INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId 
				INNER JOIN UdcDefault UD (NOLOCK) ON B.MasterId=UD.MasterId and B.UdcMasterId=UD.UdcMasterId
				WHERE UPPER(A.MasterName)='Retailer Master' AND B.ColumnName='State Name' 
				AND UD.ColValue=SM.StateName and UD.SeqId=SM.StateId)
	END
	
	
	INSERT INTO #ToAvoidUDCRetailer (RtrCode)
	SELECT DISTINCT RtrCode FROM #ETL_Prk_RetailerGST 
	WHERE RTRIM(LTRIM(UPPER(ISNULL(RetailerType,'')))) NOT IN ('REGISTERED','Unregistered','NOT ASSIGNED')
	
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 6,'Retailer GST','RetailerType','RetailerType Should be REGISTERED / UN REGISTERED / NOT ASSIGNED'+RtrCode FROM #ETL_Prk_RetailerGST CSM
	WHERE RTRIM(LTRIM(UPPER(ISNULL(RetailerType,'')))) NOT IN ('REGISTERED','Unregistered','NOT ASSIGNED')
	
	INSERT INTO #ToAvoidUDCRetailer (RtrCode)
	SELECT DISTINCT RtrCode FROM #ETL_Prk_RetailerGST CSM
	WHERE RTRIM(LTRIM(UPPER(ISNULL(Composite,'')))) NOT IN ('YES','NO') AND 
	EXISTS(SELECT * FROM #ETL_Prk_RetailerGST B WHERE CSM.RtrCode=B.RtrCode and RTRIM(LTRIM(UPPER(ISNULL(B.RetailerType,''))))='REGISTERED')
	
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 6,'Retailer GST','Composition','Composite Should be YES / No '+RtrCode FROM #ETL_Prk_RetailerGST CSM
	WHERE RTRIM(LTRIM(UPPER(ISNULL(Composite,'')))) NOT IN ('YES','NO') AND 
	EXISTS(SELECT * FROM #ETL_Prk_RetailerGST B WHERE CSM.RtrCode=B.RtrCode and RTRIM(LTRIM(UPPER(ISNULL(B.RetailerType,''))))='REGISTERED')
	
	
	INSERT INTO #ToAvoidUDCRetailer (RtrCode)
	SELECT DISTINCT RtrCode FROM #ETL_Prk_RetailerGST CSM
	WHERE RTRIM(LTRIM(UPPER(ISNULL(Composite,'')))) IN ('YES','NO') AND 
	NOT EXISTS(SELECT * FROM #ETL_Prk_RetailerGST B WHERE CSM.RtrCode=B.RtrCode and RTRIM(LTRIM(UPPER(ISNULL(B.RetailerType,''))))='REGISTERED')
	
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 6,'Retailer GST','Composition','Composite Not allow YES/NO, when Retailer Type is  Non Regesitered'+RtrCode FROM #ETL_Prk_RetailerGST CSM
	WHERE RTRIM(LTRIM(UPPER(ISNULL(Composite,'')))) IN ('YES','NO') AND 
	NOT EXISTS(SELECT * FROM #ETL_Prk_RetailerGST B WHERE CSM.RtrCode=B.RtrCode and RTRIM(LTRIM(UPPER(ISNULL(B.RetailerType,''))))='REGISTERED')
	INSERT INTO #ToAvoidUDCRetailer (RtrCode)
	SELECT DISTINCT RtrCode FROM #ETL_Prk_RetailerGST 
	WHERE RTRIM(LTRIM(UPPER(ISNULL(RelatedParty,'')))) NOT IN ('YES','NO')
	
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 7,'Retailer GST','Related Party','Related Party Should be YES / No '+RtrCode FROM #ETL_Prk_RetailerGST CSM
	WHERE RTRIM(LTRIM(UPPER(ISNULL(RelatedParty,'')))) NOT IN ('YES','NO')
		
	DELETE FROM ETL_Prk_UDCRetailerGST WHERE MasterName='RETAILER MASTER' AND UpdateFlag=1
	
	
	
	DECLARE Cur_RetailerGST CURSOR
	FOR SELECT ISNULL(LTRIM(RTRIM([RtrCode])),''),ISNULL(LTRIM(RTRIM([StateCode])),''),
	ISNULL(LTRIM(RTRIM([Composite])),'NA'),ISNULL(LTRIM(RTRIM([RelatedParty])),''),ISNULL(LTRIM(RTRIM([PanNumber])),''),
	ISNULL(LTRIM(RTRIM([GSTTIN])),''),ISNULL(LTRIM(RTRIM([RetailerType])),''),ISNULL(LTRIM(RTRIM(RtrTaxGroup)),'')
	FROM #ETL_Prk_RetailerGST WHERE --[DownLoadFlag] ='D' AND
	RtrCode NOT IN (SELECT RtrCode FROM #ToAvoidUDCRetailer)
	OPEN Cur_RetailerGST
	FETCH NEXT FROM Cur_RetailerGST INTO @RtrCode,@StateCode,@Composite,
	@RelatedParty,@PanNumber,@GSTTIN,@RetailerType,@RtrTaxGroup
	WHILE @@FETCH_STATUS=0
	BEGIN
	
			SET @Po_ErrNo=0
			SET @TaxGrpId=0
			
			SET @Rtrid=''
			SELECT @Rtrid=Rtrid FROM Retailer(NOLOCK ) WHERE RtrCode =@RtrCode
			
			--DELETE FROM ETL_Prk_RetailerGST WHERE MasterName='RETAILER MASTER' AND [Column Code]=@RtrCode
			DECLARE @DistState AS VARCHAR(100)
			SET @DistState=''
			SET @StateName=''
			SELECT @StateName=StateName FROM StateMaster WHERE StateCode=@StateCode
								
			SELECT @DistState=ColumnValue FROM UdcMaster U (NOLOCK) 
			INNER JOIN UdcDetails UD (NOLOCK) ON U.MasterId=UD.MasterId and U.UdcMasterId=UD.UdcMasterId
			INNER JOIN Distributor D (NOLOCK) ON D.DistributorId=UD.MasterRecordId
			INNER JOIN StateMaster S (NOLOCK) ON S.StateName=UD.ColumnValue
			WHERE U.MasterId=16 and ColumnName='State Name' 
			
			IF UPPER(@DistState)<>UPPER(@StateName)
			BEGIN
				SET @RtrTaxGroup='RTRINTER'	
			END
			ELSE IF UPPER(@DistState)=UPPER(@StateName)
			BEGIN
				SET @RtrTaxGroup='RTRINTRA'	
			END
			
			IF NOT EXISTS(SELECT * FROM TaxGroupSetting WHERE RtrGroup=UPPER(@RtrTaxGroup) AND TaxGroup=1)
			BEGIN
				INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
				SELECT DISTINCT 1,'Retailer GST','Tax Group Code','Tax Group Code Not Foud'
				SET @Po_ErrNo =1
				SET @TaxGrpId=0
			END
			ELSE
			BEGIN
				SELECT @TaxGrpId=TaxGroupId FROM TaxGroupSetting WHERE RtrGroup=@RtrTaxGroup AND TaxGroup=1
			END
			
			IF RTRIM(LTRIM(UPPER(ISNULL(@GSTTIN,''))))<>''
			BEGIN
				IF (SELECT dbo.Fn_ValidateSaveUDC(79,@RtrId,2,'GSTIN',@GSTTIN))<>''
				BEGIN
					INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
					SELECT 1,'Retailer GST','GSTIN',dbo.Fn_ValidateSaveUDC(79,@RtrId,2,'GSTIN',@GSTTIN)					
					SET @Po_ErrNo =1
				END
			END
			
			IF RTRIM(LTRIM(UPPER(ISNULL(@PanNumber,''))))<>''
			BEGIN								
				IF (SELECT dbo.Fn_ValidateSaveUDC(79,@RtrId,2,'PanNumber',@PanNumber))<>''
				BEGIN
					INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
					SELECT 1,'Retailer GST','PanNumber',dbo.Fn_ValidateSaveUDC(79,@RtrId,2,'PanNumber',@PanNumber)
					--SELECT DISTINCT 1,'Retailer GST','PanNumber','Invalid Pan Number'
					SET @Po_ErrNo =1
				END
				
			END
			
			IF RTRIM(LTRIM(UPPER(ISNULL(@RetailerType,''))))='REGISTERED' 
			BEGIN			
				IF (SELECT DBO.Fn_ISGSTINNumber(@GSTTIN))=1
				BEGIN
					INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
					SELECT DISTINCT 1,'Retailer GST','GSTIN','Invalid GST Tin Number'
					SET @Po_ErrNo =1
				END
				
				IF (SELECT DBO.Fn_ISPanNumber(@PanNumber))=1
				BEGIN
					INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
					SELECT DISTINCT 1,'Retailer GST','PanNumber','Invalid Pan Number'
					SET @Po_ErrNo =1
				END
			END			
									
			IF @Po_ErrNo=0
			BEGIN
				
				IF @GSTEnabled=1
				BEGIN
					IF ISNULL(@TaxGrpId,0)<>0
					BEGIN
						UPDATE A SET TaxGroupId=@TaxGrpId,LastModDate=CONVERT(VARCHAR(10),GETDATE(),121) FROM Retailer A 
						WHERE RtrCode=@RtrCode
					END
				END
				ELSE
				BEGIN
					DELETE FROM RetailerGSTTaxGroupUpdate WHERE RetailerCode=@RtrCode
					INSERT INTO RetailerGSTTaxGroupUpdate(RetailerCode,TaxGroup,UpdateDateTime,UpdateFlag)
					SELECT @RtrCode,@RtrTaxGroup,Getdate(),0
				END	
				
				--IF ISNULL(@TaxGrpId,0)<>0
				--BEGIN
				
				--	UPDATE A SET TaxGroupId=@TaxGrpId,LastModDate=CONVERT(VARCHAR(10),GETDATE(),121),Upload='N' FROM Retailer A 
				--	WHERE RtrCode=@RtrCode
					
				----	--UPDATE A SET A.TaxGroupId=@TaxGrpId,A.Upload='N' FROM RetailerShipAdd A (NOLOCK)
				----	--INNER JOIN Retailer R(NOLOCK) ON A.RtrId=R.RtrId
				----	--WHERE A.RtrShipDefaultAdd=1
					
				--END
			
				INSERT INTO ETL_Prk_UDCRetailerGST (MasterName,ColumnName,[Column Code],[ColumnValue],UpdateFlag)
				SELECT DISTINCT 'Retailer Master','State Name',@RtrCode,@StateName,0 UNION ALL
				SELECT DISTINCT 'Retailer Master','GSTIN',@RtrCode,@GSTTIN,0 UNION ALL
				SELECT DISTINCT 'Retailer Master','Composition',@RtrCode,@Composite,0 UNION ALL
				SELECT DISTINCT 'Retailer Master','Related Party',@RtrCode,@RelatedParty,0 UNION ALL
				SELECT DISTINCT 'Retailer Master','Retailer Type',@RtrCode,@RetailerType,0 UNION ALL
				SELECT DISTINCT 'Retailer Master','PAN Number',@RtrCode,@PanNumber,0
				
				IF EXISTS(SELECT * FROM ETL_Prk_UDCRetailerGST WHERE MasterName='Retailer Master')
				BEGIN
				
					EXEC Proc_ETLValidate_UdcDetailsGST 0
				END
				
				EXEC Proc_UpdateRetailerShipping @RtrId,0
				
				
			END
							
		FETCH NEXT FROM Cur_RetailerGST INTO @RtrCode,@StateCode,@Composite,
		@RelatedParty,@PanNumber,@GSTTIN,@RetailerType,@RtrTaxGroup
	END
	CLOSE Cur_RetailerGST
	DEALLOCATE Cur_RetailerGST
	RETURN
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_ETLValidate_UdcDetailsGST' AND type='P')
DROP PROCEDURE Proc_ETLValidate_UdcDetailsGST
GO
-- EXEC Proc_ETLValidate_UdcDetailsGST ''
CREATE PROCEDURE Proc_ETLValidate_UdcDetailsGST
(
	@Po_ErrNo INT OUTPUT 
)
AS       
/*********************************    
* PROCEDURE: Proc_ETLValidate_UdcDetailsGST    
* PURPOSE: To Insert and Update records      
* CREATED: Mohanakrishna A.B
*********************************/       
SET NOCOUNT ON    
BEGIN       
	DECLARE @ErrDesc AS VARCHAR(1000)  
	DECLARE @rno AS INT  
	DECLARE @TabName AS VARCHAR(50)  
	DECLARE @GetKey AS INT
	DECLARE @Taction AS INT
	DECLARE @MasterName AS Varchar(100)
	DECLARE @ColName AS Varchar(100)
	DECLARE @ColName1 AS Varchar(100)
	DECLARE @ColCode AS Varchar(100)
	DECLARE @ColValue AS Varchar(100)
	DECLARE @UdcHdId AS INT
	DECLARE @UdcMasId AS INT
	DECLARE @RecId AS INT
	DECLARE @UdcDtId AS INT
	DECLARE @TempStr AS VARCHAR(4000)
	DECLARE @sSQL AS VARCHAR(4000)
	DECLARE @UniqueId AS INT
	DECLARE @Mandatory AS INT
	DECLARE @TempUdcMasterId AS Varchar(50)
	SET @TabName = 'ETL_Prk_RetailerGST'  
	SET @Po_ErrNo =0
	
	DECLARE Cur_UdcDt CURSOR   
	FOR SELECT DISTINCT ISNULL(MasterName,'') MasterName,ISNULL([ColumnName],'') ColumnName,ISNULL([Column Code],'') AS [Column Code],ISNULL([ColumnValue],'') AS [ColumnValue]
    	FROM ETL_Prk_UDCRetailerGST (NOLOCK) WHERE UpdateFlag=0
	OPEN Cur_UdcDt  
	FETCH NEXT FROM Cur_UdcDt INTO @MasterName,@ColName,@ColCode,@ColValue 
	set @Rno = 0  
	WHILE @@FETCH_STATUS=0  
	BEGIN  	  
	
		set @Taction = 2
		SET @Po_ErrNo = 0 
		IF @Po_ErrNo = 0 
		BEGIN
			
			IF @MasterName='PRODUCT MASTER'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('PRODUCT MASTER')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('PRODUCT','PrdCCode','PrdId',LTRIM(RTRIM(@ColCode)),1)
					END
				END
			END
			
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'RETAILER MASTER'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('RETAILER MASTER')
				
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					
					IF @UdcMasId <> 0 
					BEGIN
					
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('RETAILER','CMPRtrCode','RtrId',LTRIM(RTRIM(@ColCode)),1)
					END
				END
			END
			
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'SUPPLIER MASTER'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('SUPPLIER MASTER')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('SUPPLIER','SpmCode','SpmId',LTRIM(RTRIM(@ColCode)),1)
					END
				END
			END
			ELSE IF UPPER(LTRIM(RTRIM(@MasterName)))= 'DISTRIBUTOR INFO MASTER'
			BEGIN
				SELECT @UdcHdId=dbo.Fn_ReturnUdcHdId('DISTRIBUTOR INFO MASTER')
				IF @UdcHdId <> 0
				BEGIN
					SELECT @UdcMasId=DBO.Fn_ReturnUdcMasterId(LTRIM(RTRIM(@ColName)),@UdcHdId)
					IF @UdcMasId <> 0 
					BEGIN
						SELECT @TempStr =DBO.Fn_ReturnBuildQuery('DISTRIBUTOR','DistributorCode','DistributorId',LTRIM(RTRIM(@ColCode)),1)
					END
				END
			END
			
			IF exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[TempTbl]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
			drop table [dbo].[TempTbl]
			CREATE TABLE TempTbl (ColId INT)
			INSERT INTO TempTbl EXEC (@TempStr)
			IF (SELECT Count(*) FROM TempTbl) > 0
			BEGIN
				SELECT @RecId = ColId FROM TempTbl
				
			END
			ELSE
			BEGIN
				SET @RecId=0
			END
			
			IF @RecId <> 0 			
			BEGIN			
				SELECT @UdcDtId = dbo.Fn_ReturnMasterRecId(@RecId,@UdcHdId,@UdcMasId)	
				IF @UdcDtId <> 0
				BEGIN
			
					UPDATE UdcDetails SET ColumnValue =LTRIM(RTRIM(@ColValue)) WHERE MasterId = @UdcHdId AND UdcMasterId = @UdcMasId AND MasterRecordId=@RecId 			
				END
				ELSE
				BEGIN
			
					SELECT @GetKey= dbo.Fn_GetPrimaryKeyInteger('UDCDetails','UdcDetailsId',CAST(YEAR(GetDate())AS INT),MONTH(GETDATE()))
					
					SELECT @UniqueId= Dbo.Fn_ReturnUDCUniqueId(LTRIM(RTRIM(@ColValue)),@UdcMasId)
					
					IF @UniqueId=0 
					BEGIN
					
						SELECT @UniqueId=dbo.Fn_GetPrimaryKeyInteger('UDCDetails','UDCUniqueId',CAST(YEAR(GetDate())AS INT),MONTH(GETDATE()))
					END
					
					INSERT INTO UDCDetails(UdcDetailsId,UdcMasterId,MasterId,MasterRecordId,ColumnValue,UDCUniqueId,Availability,LastModBy,LastModDate,AuthId,AuthDate) 
					VALUES (@GetKey,@UdcMasId,@UdcHdId,@RecId,LTRIM(RTRIM(@ColValue)),@UniqueId,1,1,convert(varchar(10),getdate(),121),1,convert(varchar(10),getdate(),121))
					UPDATE counters SET currvalue = currvalue+1 where tabname = 'UDCDetails' and fldname = 'UdcDetailsId'
					UPDATE counters SET currvalue = currvalue+1 where tabname = 'UDCDetails' and fldname = 'UDCUniqueId'
				END
				
				UPDATE ETL_Prk_UDCRetailerGST SET UpdateFlag=1 WHERE MasterName=@MasterName and ColumnName=@ColName and [Column Code]=@ColCode
				
			END
		END
	
		FETCH NEXT FROM Cur_UdcDt INTO @MasterName,@ColName,@ColCode,@ColValue 
	END  
	CLOSE Cur_UdcDt  
	DEALLOCATE Cur_UdcDt
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='P' AND NAME='Proc_GSTUserLogInValidation')
DROP PROCEDURE Proc_GSTUserLogInValidation
GO
CREATE PROCEDURE [Proc_GSTUserLogInValidation](@ServerDate AS DATETIME)
AS
/*********************************
* PROCEDURE		: Proc_UserLogInValidation
* PURPOSE		: To Validate User Log in Proc_UserLogInValidation
* CREATED		: S.Moorthi
* CREATED DATE	: 17-04-2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
SET NOCOUNT ON
BEGIN

DECLARE @GstEnabled AS INT
SET @GstEnabled=0

	IF EXISTS(SELECT * FROM GSTConfiguration (NOLOCK) WHERE ActivationStatus=1 AND 
	AcknowledgeStatus=1 and ConsoleAckStatus=1 AND ModuleId='GSTCONFIG' )
	BEGIN
		SET @GstEnabled=1
	END
	
	DECLARE @VatTaxGroupId AS INT
	SET @VatTaxGroupId=0
	IF EXISTS(SELECT * FROM VATDefaultSupplierGST (NOLOCK))
	BEGIN
		DECLARE @CmpId AS INT
		SET @CmpId=0
		SELECT @CmpId=CmpId FROM COMPANY WHERE DefaultCompany=1
		SELECT @VatTaxGroupId=MAX(ISNULL(TaxGroupId,0)) FROM VATDefaultSupplierGST (NOLOCK)
		UPDATE Supplier SET VATTaxGroupId=@VatTaxGroupId --WHERE ISNULL(VATTaxGroupId,0)=0
		UPDATE Supplier SET CmpId=@CmpId WHERE ISNULL(CmpId,0)=0
	END

	IF @GstEnabled=0
	BEGIN
		---NESTLE EDITABLE=1
		UPDATE A SET A.Editable=0,ColumnMandatory=0 FROM UdcMaster A (NOLOCK)
		INNER JOIN UdcHD B(NOLOCK) ON A.MasterId=B.MasterId 
		WHERE UPPER(B.MasterName)='PRODUCT MASTER' AND ColumnName IN ('HSN Code','HSN Description')
		
		UPDATE A SET A.Editable=1,ColumnMandatory=0 FROM UdcMaster A (NOLOCK)
		INNER JOIN UdcHD B(NOLOCK) ON A.MasterId=B.MasterId 
		WHERE UPPER(B.MasterName)='RETAILER MASTER' AND 
		ColumnName IN ('State Name','GSTIN','PAN Number','Retailer Type','Composition','Related Party')
		
		UPDATE A SET A.Editable=1,ColumnMandatory=0 FROM UdcMaster A (NOLOCK)
		INNER JOIN UdcHD B(NOLOCK) ON A.MasterId=B.MasterId 
		WHERE UPPER(B.MasterName)='SUPPLIER MASTER' AND 
		ColumnName IN ('State Name','GSTIN','Status')
		
		UPDATE A SET A.Editable=1,ColumnMandatory=0 FROM UdcMaster A (NOLOCK)
		INNER JOIN UdcHD B(NOLOCK) ON A.MasterId=B.MasterId 
		WHERE UPPER(B.MasterName)='DISTRIBUTOR INFO MASTER' AND 
		ColumnName IN ('State Name','GSTIN','PAN Number','Distributor Type')


		UPDATE A SET A.Editable=1,ColumnMandatory=0 FROM UdcMaster A (NOLOCK)
		INNER JOIN UdcHD B(NOLOCK) ON A.MasterId=B.MasterId 
		WHERE UPPER(B.MasterName)='COMPANY MASTER' AND 
		ColumnName IN ('State Name','GSTIN','PAN Number')
		
	END
	ELSE
	BEGIN
	
		UPDATE A SET A.Editable=0,ColumnMandatory=1 FROM UdcMaster A (NOLOCK)
		INNER JOIN UdcHD B(NOLOCK) ON A.MasterId=B.MasterId 
		WHERE UPPER(B.MasterName)='PRODUCT MASTER' AND ColumnName IN ('HSN Code','HSN Description')
		
		UPDATE A SET A.Editable=1,ColumnMandatory=1 FROM UdcMaster A (NOLOCK)
		INNER JOIN UdcHD B(NOLOCK) ON A.MasterId=B.MasterId 
		WHERE UPPER(B.MasterName)='RETAILER MASTER' AND 
		ColumnName IN ('State Name','GSTIN','PAN Number','Retailer Type','Composition','Related Party')
		
		UPDATE A SET A.Editable=1,ColumnMandatory=1 FROM UdcMaster A (NOLOCK)
		INNER JOIN UdcHD B(NOLOCK) ON A.MasterId=B.MasterId 
		WHERE UPPER(B.MasterName)='SUPPLIER MASTER' AND 
		ColumnName IN ('State Name','GSTIN','Status')

		UPDATE A SET A.Editable=1,ColumnMandatory=1 FROM UdcMaster A (NOLOCK)
		INNER JOIN UdcHD B(NOLOCK) ON A.MasterId=B.MasterId 
		WHERE UPPER(B.MasterName)='COMPANY MASTER' AND 
		ColumnName IN ('State Name','GSTIN','PAN Number')
		
		UPDATE A SET A.Editable=1,ColumnMandatory=1 FROM UdcMaster A (NOLOCK)
		INNER JOIN UdcHD B(NOLOCK) ON A.MasterId=B.MasterId 
		WHERE UPPER(B.MasterName)='DISTRIBUTOR INFO MASTER' AND 
		ColumnName IN ('State Name','GSTIN','PAN Number','Distributor Type')

		IF NOT EXISTS(SELECT * FROM Gst_FieldLevelConfiguration WHERE Transid=2)
		BEGIN
			INSERT INTO Gst_FieldLevelConfiguration
			SELECT 2,1,'fxtInvDisc',0,0,1,1,CONVERT(VARCHAR(10),GETDATE(),121),1,CONVERT(VARCHAR(10),GETDATE(),121) UNION
			SELECT 2,2,'fxtInvDiscAmt',0,0,1,1,CONVERT(VARCHAR(10),GETDATE(),121),1,CONVERT(VARCHAR(10),GETDATE(),121) UNION
			SELECT 2,3,'fxtWindowDisplayAmount',0,0,1,1,CONVERT(VARCHAR(10),GETDATE(),121),1,CONVERT(VARCHAR(10),GETDATE(),121) UNION
			SELECT 2,4,'chkInvoiceDisc',0,0,1,1,CONVERT(VARCHAR(10),GETDATE(),121),1,CONVERT(VARCHAR(10),GETDATE(),121) UNION
			SELECT 2,5,'fxtOnAccountAmount',0,0,1,1,CONVERT(VARCHAR(10),GETDATE(),121),1,CONVERT(VARCHAR(10),GETDATE(),121) UNION
			SELECT 2,6,'btnOperation',12,0,1,1,CONVERT(VARCHAR(10),GETDATE(),121),1,CONVERT(VARCHAR(10),GETDATE(),121) UNION
			SELECT 2,7,'btnOperation',9,0,1,1,CONVERT(VARCHAR(10),GETDATE(),121),1,CONVERT(VARCHAR(10),GETDATE(),121) UNION
			SELECT 2,8,'btnOperation',8,0,1,1,CONVERT(VARCHAR(10),GETDATE(),121),1,CONVERT(VARCHAR(10),GETDATE(),121) UNION
			SELECT 2,9,'btnOperation',10,1,1,1,CONVERT(VARCHAR(10),GETDATE(),121),1,CONVERT(VARCHAR(10),GETDATE(),121) UNION
			SELECT 2,10,'btnOperation',11,1,1,1,CONVERT(VARCHAR(10),GETDATE(),121),1,CONVERT(VARCHAR(10),GETDATE(),121) UNION
			SELECT 2,11,'chkOnAccount',0,0,1,1,CONVERT(VARCHAR(10),GETDATE(),121),1,CONVERT(VARCHAR(10),GETDATE(),121) UNION
			SELECT 2,12,'chkWindowDisplay',0,0,1,1,CONVERT(VARCHAR(10),GETDATE(),121),1,CONVERT(VARCHAR(10),GETDATE(),121)
		END
		----Retailer Taxgroup Update Post GST Migrate
		UPDATE  B SET B.TaxGroupId=C.TaxGroupId 
		FROM RetailerGSTTaxGroupUpdate A 
		INNER JOIN Retailer B ON A.RetailerCode=B.RtrCode
		INNER JOIN TaxGroupSetting C ON C.RtrGroup=A.TaxGroup 
		WHERE C.TaxGroup=1 and A.UpdateFlag=0

		UPDATE  D SET D.TaxGroupId=C.TaxGroupId 
		FROM RetailerGSTTaxGroupUpdate A 
		INNER JOIN Retailer B ON A.RetailerCode=B.RtrCode
		INNER JOIN RetailerShipAdd D ON D.RtrId=B.RtrId
		INNER JOIN TaxGroupSetting C ON C.RtrGroup=A.TaxGroup 
		WHERE C.TaxGroup=1 and A.UpdateFlag=0 and RtrShipDefaultAdd=1

		DELETE A FROM RetailerGSTTaxGroupUpdate A 
		INNER JOIN Retailer B ON A.RetailerCode=B.RtrCode 
		INNER JOIN TaxGroupSetting C ON C.RtrGroup=A.TaxGroup  and B.TaxGroupId=C.TaxGroupId
		WHERE C.TaxGroup=1 and A.UpdateFlag=0

		--DECLARE @VatTaxGroupId AS INT
		SET @VatTaxGroupId=0
		IF EXISTS(SELECT * FROM VATDefaultSupplier (NOLOCK))
		BEGIN
			SELECT @VatTaxGroupId=MAX(ISNULL(TaxGroupId,0)) FROM VATDefaultSupplier (NOLOCK)
			UPDATE Supplier SET VATTaxGroupId=@VatTaxGroupId WHERE ISNULL(VATTaxGroupId,0)=0
		END
		
		----Supplier TaxGroup Update Post GST Migrate
		UPDATE  B SET B.TaxGroupId=C.TaxGroupId 
		FROM SupplierGSTTaxGroupUpdate A 
		INNER JOIN Supplier B ON A.SpmCode=B.SpmCode
		INNER JOIN TaxGroupSetting C ON C.RtrGroup=A.TaxGroup 
		WHERE C.TaxGroup=3 and A.UpdateFlag=0
		
		DELETE A FROM SupplierGSTTaxGroupUpdate A 
		INNER JOIN Supplier B ON A.SpmCode=B.SpmCode 
		INNER JOIN TaxGroupSetting C ON C.RtrGroup=A.TaxGroup  and B.TaxGroupId=C.TaxGroupId
		WHERE C.TaxGroup=3 and A.UpdateFlag=0
		
	END
	
RETURN
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Cs2Cn_ReturnTaxuploadGST' AND XTYPE='U')
DROP TABLE Cs2Cn_ReturnTaxuploadGST
GO
CREATE TABLE  Cs2Cn_ReturnTaxuploadGST
(    
     [SlNo] [numeric](38, 0) IDENTITY(1,1) NOT NULL,
	 [DistCode] [nvarchar](50) NULL,
	 [ReturnNumber]    NVARCHAR(100),
     [ReturnDate]      DATETIME,
     [InvoiceNumber]   NVARCHAR(100),
     [InvoiceDate]    DATETIME,
     OrderNumber       NVARCHAR(100),
     Orderdate         DATETIME,
     DocRefNo          NVARCHAR(100), 
     [RetailerCode]   VARCHAR(75), 
     [RetailerCompanyCode] NVARCHAR(50),
     [RetailerGSTTIN]  NVARCHAR(100),
     [RetailerStateCode]  VARCHAR(20), 
     [RetailerState]  VARCHAR(150), 
     [RetailerType]   VARCHAR(150),
     [RetailerPanNo]  NVARCHAR(100), 
     HSNCode           VARCHAR(75), 
     [ProductCompanyCode]  NVARCHAR(100),
     [ProductBatch]   NVARCHAR(100),
     Qty               INT NULL,
     MRP               NUMERIC(18,6),
     SellingRate       NUMERIC(18,6),
     TaxCode           NVARCHAR(40), 
     TaxName           NVARCHAR(100), 
     GrossAmount       NUMERIC(38,6)NULL, 
     TaxableAmount     NUMERIC(38,6) NULL,
     TaxPercentage     NUMERIC(18,6) NULL,
     TaxAmount         NUMERIC(38,6) NULL,
     NetAmount         NUMERIC(38,6) NULL,
     [UploadFlag] [nvarchar](10) NULL,
	 [SyncId] [numeric](38, 0) NULL,
	 [ServerDate] [datetime] NULL 
)
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Cs2Cn_ReturnTaxuploadGST' AND XTYPE='P')
DROP PROCEDURE Proc_Cs2Cn_ReturnTaxuploadGST
GO
---EXEC Proc_Cs2Cn_ReturnTaxuploadGST 0,'2017-05-27'
CREATE PROCEDURE [dbo].[Proc_Cs2Cn_ReturnTaxuploadGST]
(
   @Po_ErrNo INT OUTPUT,
   @ServerDate DATETIME
)
AS
/*****************************************************************************
* PROCEDURE		: Proc_Cs2Cn_SalesTaxuploadGST
* PURPOSE		: To Extract GST Sales Return tax from CoreStocky to upload to Console
* CREATED BY	: Raja C
* CREATED DATE	: 19/05/2017
* NOTE			:
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
	
********************************************************************************/
SET NOCOUNT ON
BEGIN
	
	DECLARE @DistCode		As nVarchar(50)
	DELETE FROM Cs2Cn_ReturnTaxuploadGST WHERE UploadFlag = 'Y'
	SET @Po_ErrNo=0
	SELECT @DistCode = DistributorCode FROM Distributor(NOLOCK)
	
	CREATE TABLE  #Cs2Cn_ReturnTaxuploadGST
(     
     [ReturnNumber]    NVARCHAR(100) COLLATE DATABASE_DEFAULT,
     [ReturnDate]      DATETIME ,
     [InvoiceNumber]   NVARCHAR(100) COLLATE DATABASE_DEFAULT,
     [Invoice Date]    DATETIME,
     OrderNumber       NVARCHAR(100) COLLATE DATABASE_DEFAULT,
     Orderdate         DATETIME,
     DocRefNo          NVARCHAR(100) COLLATE DATABASE_DEFAULT, 
     [Retailer Code]   VARCHAR(75), 
     [Retailer Company Code] NVARCHAR(50) COLLATE DATABASE_DEFAULT,
     [Retailer GSTTIN]  NVARCHAR(100) COLLATE DATABASE_DEFAULT,
     [RetailerStateCode]  VARCHAR(20), 
     [Retailer State]  VARCHAR(150), 
     [Retailer Type]   VARCHAR(150),
     [Retailer PanNo]  NVARCHAR(100) COLLATE DATABASE_DEFAULT, 
     HSNCode           VARCHAR(75), 
     [Product Company Code]  NVARCHAR(100) COLLATE DATABASE_DEFAULT,
     [Product Batch]   NVARCHAR(100) COLLATE DATABASE_DEFAULT,
     Qty               INT NULL,
     MRP               NUMERIC(18,6),
     SellingRate       NUMERIC(18,6),
     TaxCode           NVARCHAR(40) COLLATE DATABASE_DEFAULT, 
     TaxName           NVARCHAR(100) COLLATE DATABASE_DEFAULT, 
     GrossAmount       NUMERIC(38,6)NULL, 
     TaxableAmount     NUMERIC(38,6) NULL,
     TaxPercentage     NUMERIC(18,6) NULL,
     TaxAmount         NUMERIC(38,6) NULL,
     NetAmount         NUMERIC(38,6) NULL ,
     RtrShipId			INT   
)
	
	
	INSERT INTO #Cs2Cn_ReturnTaxuploadGST
	(
	[ReturnNumber] ,
    [ReturnDate]   ,  
    [InvoiceNumber],
	[Invoice Date],
	[OrderNumber],
	[Orderdate],
	[DocRefNo],
	[Retailer Code],
	[Retailer Company Code],
	[Retailer GSTTIN],
	[RetailerStateCode], 
	[Retailer State],
	[Retailer Type],
	[Retailer PanNo],
	HSNCode,
	[Product Company Code],
	[Product Batch],
	Qty,
	MRP,
	SellingRate,
	TaxCode,
	TaxName,
	GrossAmount,
	TaxableAmount,
	TaxPercentage,
	TaxAmount,
	NetAmount,
	RtrShipId 
	)
	SELECT ReturnCode,ReturnDate,SalInvNo,SalInvDate,OrderKeyNo,OrderDate,DocRefNo,RtrCode,CmpRtrCode,RetailerGSTTin,[RetailerStateCode],RetailerState,RetailerType,RetailerPanno,
	HSNCode,PrdCCode,PrdBatCode,Qty,MRP,SellingRate,TaxCode,TaxName,GrossAmount,TaxableAmount,TaxPerc,TaxAmount, NetAmount,RtrShipId
	FROM(
	
	SELECT RH.ReturnCode,RH.ReturnDate,SI.SalInvNo,SI.SalInvDate,ISNULL(SI.OrderKeyNo,'') AS OrderKeyNo,ISNULL(SI.OrderDate,'') AS OrderDate,
	'' AS DocRefNo,R.RtrCode,R.CmpRtrCode,'' AS RetailerGSTTin,'' as [RetailerStateCode],'' AS RetailerState,
	'' AS RetailerType,'' AS RetailerPanno,'' AS HSNCode,P.PrdCCode,PB.PrdBatCode,SUM(RP.BaseQty) AS Qty,RP.PrdUnitMRP AS MRP,RP.PrdUnitSelRte AS SellingRate ,
	TC.TaxCode,TC.TaxName,SUM(PrdGrossAmt)AS GrossAmount,SUM(TaxableAmt) AS TaxableAmount,TaxPerc,SUM(TaxAmt) AS TaxAmount,SUM(PrdNetAmt) AS NetAmount,SI.RtrShipId
	FROM ReturnHeader RH WITH (NOLOCK)  
	INNER JOIN SalesInvoice  SI WITH(NOLOCK) ON SI.SalId=RH.SalId
	INNER JOIN ReturnProduct RP WITH (NOLOCK) ON RH.ReturnId = RP.ReturnId 
	INNER JOIN ReturnProductTax RPT WITH (NOLOCK) ON RPT.ReturnId = RH.ReturnId AND RPT.ReturnId = RP.ReturnId AND RP.SlNo=RPT.PrdSlNo  
	INNER JOIN TaxConfiguration TC (NOLOCK) ON TC.TaxId =RPT.TaxId 
	INNER JOIN Product P WITH (NOLOCK) ON P.PrdId = RP.PrdId    
	INNER JOIN ProductBatch PB WITH (NOLOCK) ON PB.PrdId = RP.PrdId AND PB.PrdBatId = RP.PrdBatId AND PB.PrdId = P.PrdId  
	INNER JOIN Retailer R WITH (NOLOCK) ON R.RtrId = RH.RtrId  
	LEFT OUTER JOIN Company C ON C.CmpId = P.CmpId   
	WHERE RH.Status = 0  AND RH.VatGst='GST' AND  RH.GstUpload1=0 AND InvoiceType = 1
	GROUP BY  RH.ReturnCode,RH.ReturnDate,SI.SalInvNo,SI.SalInvDate,SI.OrderKeyNo,SI.OrderDate,R.RtrCode,R.CmpRtrCode,P.PrdCCode,PB.PrdBatCode,
	RP.PrdUnitMRP,RP.PrdUnitSelRte,TC.TaxCode,TC.TaxName,TaxPerc,SI.RtrShipId
	HAVING SUM(TaxableAmt) > 0 
	UNION 
	SELECT  RH.ReturnCode,RH.ReturnDate,ISNULL(SI.SalInvNo,'')AS SalInvNo,ISNULL(SI.SalInvDate,'') AS SalInvDate,ISNULL(SI.OrderKeyNo,'') AS OrderKeyNo,ISNULL(SI.OrderDate,'') AS OrderDate,
	'' AS DocRefNo,R.RtrCode,R.CmpRtrCode,'' as [RetailerStateCode],'' AS RetailerGSTTin,'' AS RetailerState,
	'' AS RetailerType,'' AS RetailerPanno,'' AS HSNCode,P.PrdCCode,PB.PrdBatCode,SUM(RP.BaseQty) AS Qty,RP.PrdUnitMRP AS MRP,RP.PrdUnitSelRte AS SellingRate ,
	TC.TaxCode,TC.TaxName,SUM(PrdGrossAmt)AS GrossAmount,SUM(TaxableAmt) AS TaxableAmount,TaxPerc,SUM(TaxAmt) AS TaxAmount,SUM(PrdNetAmt) AS NetAmount,ISNULL(SI.RtrShipId,0)
	From ReturnHeader RH WITH (NOLOCK)	
	INNER JOIN ReturnProduct RP WITH (NOLOCK) ON RH.ReturnId = RP.ReturnId 
	INNER JOIN ReturnProductTax RPT WITH (NOLOCK) ON RPT.ReturnId = RH.ReturnId AND RPT.ReturnId = RP.ReturnId AND RP.SlNo=RPT.PrdSlNo  
	INNER JOIN TaxConfiguration TC (NOLOCK) ON TC.TaxId =RPT.TaxId 
	INNER JOIN Product P WITH (NOLOCK) ON P.PrdId = RP.PrdId    
	INNER JOIN ProductBatch PB WITH (NOLOCK) ON PB.PrdId = RP.PrdId AND PB.PrdBatId = RP.PrdBatId AND PB.PrdId = P.PrdId  
	INNER JOIN Retailer R WITH (NOLOCK) ON R.RtrId = RH.RtrId  
	LEFT OUTER JOIN SalesInvoice  SI WITH(NOLOCK) ON SI.SalId=RP.SalId
	LEFT OUTER JOIN Company C ON C.CmpId = P.CmpId   
	WHERE RH.Status = 0  AND RH.VatGst='GST' AND  RH.GstUpload1=0 AND InvoiceType = 2
	GROUP BY  RH.ReturnCode,RH.ReturnDate,SI.SalInvNo,SI.SalInvDate,SI.OrderKeyNo,SI.OrderDate,R.RtrCode,R.CmpRtrCode,P.PrdCCode,PB.PrdBatCode,
	RP.PrdUnitMRP,RP.PrdUnitSelRte,TC.TaxCode,TC.TaxName,TaxPerc,SI.RtrShipId
	HAVING SUM(TaxableAmt) > 0 )X
	
	
	SELECT DISTINCT ColumnValue as HSNCODE,E.PrdCCode
	INTO #HSNCode
	FROM UDCHD A (NOLOCK)
	INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId
	INNER JOIN UdcDetails C (NOLOCK) ON B.MasterId=C.MasterId
	and B.UdcMasterId=C.UdcMasterId
	INNER JOIN Product E (NOLOCK) ON E.Prdid=C.MasterRecordId
	WHERE MasterName='Product Master' and ColumnName='HSN Code'
	

	UPDATE A  SET A.[Retailer State]=C.StateName, 
	A.[Retailer GSTTIN]=B.GSTTinNo ,A.[RetailerStateCode]=StateCode
	FROM #Cs2Cn_ReturnTaxuploadGST A 
	INNER JOIN Retailer R WITH (NOLOCK)  ON A.[Retailer Company Code]=R.CmpRtrCode
	INNER JOIN  RetailerShipAdd  B  WITH (NOLOCK)  ON R.RtrId=B.RtrID and A.RtrShipId=B.RtrShipId
	INNER JOIN  StateMaster C WITH (NOLOCK)  ON C.StateId=B.StateId
	
		
	SELECT MasterRecordId,ColumnValue  AS RetailerPANNo INTO #RetailerPANNo
	FROM UDCHD A (NOLOCK)
	INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId
	INNER JOIN UdcDetails C (NOLOCK) ON B.MasterId=C.MasterId
	and B.UdcMasterId=C.UdcMasterId	
	WHERE MasterName='Retailer Master' AND ColumnName='PAN Number'
	
	SELECT DISTINCT MasterRecordId,ColumnValue  AS RetailerType INTO #RetailerType
	FROM UDCHD A (NOLOCK)
	INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId
	INNER JOIN UdcDetails C (NOLOCK) ON B.MasterId=C.MasterId
	and B.UdcMasterId=C.UdcMasterId
	INNER JOIN UdcDefault D (NOLOCK) ON D.MasterId=C.MasterId and D.MasterId=B.MasterId
	and D.UdcMasterId=C.UdcMasterId and D.UdcMasterId=B.UdcMasterId
	WHERE MasterName='Retailer Master' AND ColumnName='Retailer Type'
	
	
	UPDATE A  SET A.[Retailer PanNo]=B.RetailerPANNo FROM #Cs2Cn_ReturnTaxuploadGST A INNER JOIN Retailer R ON A.[Retailer Company Code]=R.CmpRtrCode
	INNER JOIN  #RetailerPANNo  B  ON R.RtrId=B.MasterRecordId
	
    UPDATE A  SET A.[Retailer Type]=B.RetailerType FROM #Cs2Cn_ReturnTaxuploadGST A INNER JOIN Retailer R ON A.[Retailer Company Code]=R.CmpRtrCode
	INNER JOIN  #RetailerType  B  ON R.RtrId=B.MasterRecordId
	
	UPDATE A  SET A.HSNCode=R.HSNCode FROM #Cs2Cn_ReturnTaxuploadGST A INNER JOIN #HSNCode R ON A.[Product Company Code]=R.PrdCCode
    
    INSERT INTO Cs2Cn_ReturnTaxuploadGST
	(        
	        [DistCode],
	        [ReturnNumber] ,
            [ReturnDate]   ,
			[InvoiceNumber],
			[InvoiceDate],
			[OrderNumber],
			[Orderdate],
			[DocRefNo],
			[RetailerCode],
			[RetailerCompanyCode],
			[RetailerGSTTIN],
			[RetailerStateCode],
			[RetailerState],
			[RetailerType],
			[RetailerPanNo],
			HSNCode,
			[ProductCompanyCode],
			[ProductBatch],
			Qty,
			MRP,
			SellingRate,
			TaxCode,
			TaxName,
			GrossAmount,
			TaxableAmount,
			TaxPercentage,
			TaxAmount,
			NetAmount,
			UploadFlag,
			ServerDate
	)
	SELECT  @DistCode,
	        [ReturnNumber] ,
            [ReturnDate]   , 
	        [InvoiceNumber],
			[Invoice Date],
			[OrderNumber],
			[Orderdate],
			[DocRefNo],
			[Retailer Code],
			[Retailer Company Code],			
			[Retailer GSTTIN],
			[RetailerStateCode],
			[Retailer State],
			[Retailer Type],
			[Retailer PanNo],
			HSNCode,
			[Product Company Code],
			[Product Batch],
			Qty,
			MRP,
			SellingRate,
			TaxCode,
			TaxName,
			GrossAmount,
			TaxableAmount,
			TaxPercentage,
			TaxAmount,
			NetAmount, 'N',@ServerDate
	FROM  #Cs2Cn_ReturnTaxuploadGST
	
	UPDATE ReturnHeader SET GstUpload1=1 WHERE ReturnCode  IN (SELECT ReturnNumber  FROM Cs2Cn_ReturnTaxuploadGST(NOLOCK) WHERE UploadFlag='N')
	AND Status=0 AND VatGst='GST'
	
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Cs2Cn_SalesTaxuploadGST' AND XTYPE='U')
DROP TABLE Cs2Cn_SalesTaxuploadGST
GO
CREATE TABLE  Cs2Cn_SalesTaxuploadGST
(    
     [SlNo] [numeric](38, 0) IDENTITY(1,1) NOT NULL,
	 [DistCode] [nvarchar](50) NULL,
     [InvoiceNumber]   NVARCHAR(100),
     [InvoiceDate]    DATETIME,
     OrderNumber       NVARCHAR(100),
     Orderdate         DATETIME,
     DocRefNo          NVARCHAR(100), 
     [RetailerCode]   VARCHAR(75), 
     [RetailerCompanyCode] NVARCHAR(50),
     [RetailerGSTTIN]  NVARCHAR(100),
     [RetailerStateCode]  VARCHAR(20), 
     [RetailerState]  VARCHAR(150), 
     [RetailerType]   VARCHAR(150),
     [RetailerPanNo]  NVARCHAR(100), 
     HSNCode           VARCHAR(75), 
     [ProductCompanyCode]  NVARCHAR(100),
     [ProductBatch]   NVARCHAR(100),
     Qty               INT NULL,
     MRP               NUMERIC(18,6),
     SellingRate       NUMERIC(18,6),
     TaxCode           NVARCHAR(40), 
     TaxName           NVARCHAR(100), 
     GrossAmount       NUMERIC(38,6)NULL, 
     TaxableAmount     NUMERIC(38,6) NULL,
     TaxPercentage     NUMERIC(18,6) NULL,
     TaxAmount         NUMERIC(38,6) NULL,
     NetAmount         NUMERIC(38,6) NULL,
     [UploadFlag] [nvarchar](10) NULL,
	 [SyncId] [numeric](38, 0) NULL,
	 [ServerDate] [datetime] NULL 
)
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Cs2Cn_SalesTaxuploadGST' AND XTYPE='P')
DROP PROCEDURE Proc_Cs2Cn_SalesTaxuploadGST
GO
--EXEC Proc_Cs2Cn_SalesTaxuploadGST 0,'2017-05-27'
CREATE PROCEDURE [dbo].[Proc_Cs2Cn_SalesTaxuploadGST]
(
   @Po_ErrNo INT OUTPUT,
   @ServerDate DATETIME
)
AS
/*****************************************************************************
* PROCEDURE		: Proc_Cs2Cn_SalesTaxuploadGST
* PURPOSE		: To Extract GST Sales tax from CoreStocky to upload to Console
* CREATED BY	: Raja C
* CREATED DATE	: 19/05/2017
* NOTE			:
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
	
********************************************************************************/
SET NOCOUNT ON
BEGIN
	
	DECLARE @DistCode		As nVarchar(50)
	DELETE FROM Cs2Cn_SalesTaxuploadGST WHERE UploadFlag = 'Y'
	SET @Po_ErrNo=0
	SELECT @DistCode = DistributorCode FROM Distributor(NOLOCK)
	
	CREATE TABLE  #Cs2Cn_SalesTaxuploadGST
(    
     [InvoiceNumber]   NVARCHAR(100) COLLATE DATABASE_DEFAULT,
     [Invoice Date]    DATETIME,
     OrderNumber       NVARCHAR(100)  COLLATE DATABASE_DEFAULT,
     Orderdate         DATETIME,
     DocRefNo          NVARCHAR(100)  COLLATE DATABASE_DEFAULT, 
     [Retailer Code]   VARCHAR(75), 
     [Retailer Company Code] NVARCHAR(50)  COLLATE DATABASE_DEFAULT,
     [Retailer GSTTIN]  NVARCHAR(100)  COLLATE DATABASE_DEFAULT,
     [Retailer State]  VARCHAR(150), 
     [RetailerStateCode] Varchar(20),
     [Retailer Type]   VARCHAR(150),
     [Retailer PanNo]  NVARCHAR(100)  COLLATE DATABASE_DEFAULT, 
     HSNCode           VARCHAR(75), 
     [Product Company Code]  NVARCHAR(100)  COLLATE DATABASE_DEFAULT,
     [Product Batch]   NVARCHAR(100)  COLLATE DATABASE_DEFAULT,
     Qty               INT NULL,
     MRP               NUMERIC(18,6),
     SellingRate       NUMERIC(18,6),
     TaxCode           NVARCHAR(40) COLLATE DATABASE_DEFAULT, 
     TaxName           NVARCHAR(100) COLLATE DATABASE_DEFAULT, 
     GrossAmount       NUMERIC(38,6)NULL, 
     TaxableAmount     NUMERIC(38,6) NULL,
     TaxPercentage     NUMERIC(18,6) NULL,
     TaxAmount         NUMERIC(38,6) NULL,
     NetAmount         NUMERIC(38,6) NULL ,
     RtrShipId INT   
)
	
	
	INSERT INTO #Cs2Cn_SalesTaxuploadGST
	(
	[InvoiceNumber],
	[Invoice Date],
	[OrderNumber],
	[Orderdate],
	[DocRefNo],
	[Retailer Code],
	[Retailer Company Code],
	[Retailer GSTTIN],
	[RetailerStateCode],
	[Retailer State],	
	[Retailer Type],
	[Retailer PanNo],
	HSNCode,
	[Product Company Code],
	[Product Batch],
	Qty,
	MRP,
	SellingRate,
	TaxCode,
	TaxName,
	GrossAmount,
	TaxableAmount,
	TaxPercentage,
	TaxAmount,
	NetAmount,
	RtrShipId
	)
	SELECT SI.SalInvNo,SI.SalInvDate,isnull(SI.OrderKeyNo,'') as OrderKeyNo,isnull(SI.OrderDate,'') as OrderDate,SalInvRef AS DocRefNo,R.RtrCode,R.CmpRtrCode,'' AS RetailerGSTTin,'' as [RetailerStateCode],'' AS RetailerState,
	'' AS RetailerType,'' AS RetailerPanno,'' AS HSNCode,P.PrdCCode,PB.PrdBatCode,SUM(SIP.BaseQty) AS Qty,SIP.PrdUnitMRP AS MRP,SIP.PrdUnitSelRate AS SellingRate ,
	TC.TaxCode,TC.TaxName,SUM(PrdGrossAmount)AS GrossAmount,SUM(TaxableAmount) AS TaxableAmount,TaxPerc,SUM(TaxAmount) AS TaxAmount,SUM(PrdNetAmount) AS NetAmount,SI.RtrShipId
	FROM SalesInvoice SI WITH (NOLOCK)  
	INNER JOIN SalesInvoiceProduct SIP WITH (NOLOCK) ON SI.SalId = SIP.SalId  
	INNER JOIN SalesInvoiceProductTax SPT WITH (NOLOCK) ON SPT.SalId = SIP.SalId AND SPT.SalId = SI.SalId AND SIP.SlNo=SPT.PrdSlNo  
	INNER JOIN Product P WITH (NOLOCK) ON P.PrdId = SIP.PrdId    
	INNER JOIN ProductBatch PB WITH (NOLOCK) ON PB.PrdId = SIP.PrdId AND PB.PrdBatId = SIP.PrdBatId AND PB.PrdId = P.PrdId  
	INNER JOIN Retailer R WITH (NOLOCK) ON R.RtrId = SI.RtrId
	INNER JOIN TaxConfiguration TC (NOLOCK) ON TC.TaxId =SPT.TaxId    
	LEFT OUTER JOIN Company C ON C.CmpId = P.CmpId   
	WHERE  SI.VatGst='GST' AND GstUpload1 = 0 
	Group By SI.SalInvNo,SI.SalInvDate,SI.OrderKeyNo,SI.OrderDate,R.RtrCode,R.CmpRtrCode,P.PrdCCode,PB.PrdBatCode,SIP.PrdUnitMRP,SIP.PrdUnitSelRate,
	TC.TaxCode,TC.TaxName,TaxPerc,SI.RtrShipId,SalInvRef
	HAVING Sum(TaxableAmount) >0 
	
	SELECT DISTINCT ColumnValue as HSNCODE,E.PrdCCode
	INTO #HSNCode
	FROM UDCHD A (NOLOCK)
	INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId
	INNER JOIN UdcDetails C (NOLOCK) ON B.MasterId=C.MasterId
	and B.UdcMasterId=C.UdcMasterId
	INNER JOIN Product E (NOLOCK) ON E.Prdid=C.MasterRecordId
	WHERE MasterName='Product Master' and ColumnName='HSN Code'
	

	UPDATE A  SET A.[Retailer State]=C.StateName, 
	A.[Retailer GSTTIN]=B.GSTTinNo ,A.[RetailerStateCode]=StateCode
	FROM #Cs2Cn_SalesTaxuploadGST A 
	INNER JOIN Retailer R WITH (NOLOCK)  ON A.[Retailer Company Code]=R.CmpRtrCode
	INNER JOIN  RetailerShipAdd  B  WITH (NOLOCK)  ON R.RtrId=B.RtrID and A.RtrShipId=B.RtrShipId
	INNER JOIN  StateMaster C WITH (NOLOCK)  ON C.StateId=B.StateId

	SELECT MasterRecordId,ColumnValue  AS RetailerPANNo INTO #RetailerPANNo
	FROM UDCHD A (NOLOCK)
	INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId
	INNER JOIN UdcDetails C (NOLOCK) ON B.MasterId=C.MasterId
	and B.UdcMasterId=C.UdcMasterId	
	WHERE MasterName='Retailer Master' AND ColumnName='PAN Number'
	
	SELECT DISTINCT MasterRecordId,ColumnValue  AS RetailerType INTO #RetailerType
	FROM UDCHD A (NOLOCK)
	INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId
	INNER JOIN UdcDetails C (NOLOCK) ON B.MasterId=C.MasterId
	and B.UdcMasterId=C.UdcMasterId
	INNER JOIN UdcDefault D (NOLOCK) ON D.MasterId=C.MasterId and D.MasterId=B.MasterId
	and D.UdcMasterId=C.UdcMasterId and D.UdcMasterId=B.UdcMasterId
	WHERE MasterName='Retailer Master' AND ColumnName='Retailer Type'
	
	UPDATE A  SET A.[Retailer PanNo]=B.RetailerPANNo FROM #Cs2Cn_SalesTaxuploadGST A INNER JOIN Retailer R ON A.[Retailer Company Code]=R.CmpRtrCode
	INNER JOIN  #RetailerPANNo  B  ON R.RtrId=B.MasterRecordId
	
    UPDATE A  SET A.[Retailer Type]=B.RetailerType FROM #Cs2Cn_SalesTaxuploadGST A INNER JOIN Retailer R ON A.[Retailer Company Code]=R.CmpRtrCode
	INNER JOIN  #RetailerType  B  ON R.RtrId=B.MasterRecordId
	
	 UPDATE A  SET A.HSNCode=R.HSNCode FROM #Cs2Cn_SalesTaxuploadGST A INNER JOIN #HSNCode R ON A.[Product Company Code]=R.PrdCCode

    INSERT INTO Cs2Cn_SalesTaxuploadGST
	(        
	        [DistCode],
			[InvoiceNumber],
			[InvoiceDate],
			[OrderNumber],
			[Orderdate],
			[DocRefNo],
			[RetailerCode],
			[RetailerCompanyCode],
			[RetailerGSTTIN],
			[RetailerStateCode],
			[RetailerState],
			[RetailerType],
			[RetailerPanNo],
			HSNCode,
			[ProductCompanyCode],
			[ProductBatch],
			Qty,
			MRP,
			SellingRate,
			TaxCode,
			TaxName,
			GrossAmount,
			TaxableAmount,
			TaxPercentage,
			TaxAmount,
			NetAmount,
			UploadFlag,
			ServerDate
	)
	SELECT  @DistCode,
	        [InvoiceNumber],
			[Invoice Date],
			[OrderNumber],
			[Orderdate],
			[DocRefNo],
			[Retailer Code],
			[Retailer Company Code],
			[Retailer GSTTIN],
			[RetailerStateCode],
			[Retailer State],
			[Retailer Type],
			[Retailer PanNo],
			HSNCode,
			[Product Company Code],
			[Product Batch],
			Qty,
			MRP,
			SellingRate,
			TaxCode,
			TaxName,
			GrossAmount,
			TaxableAmount,
			TaxPercentage,
			TaxAmount,
			NetAmount, 'N',@ServerDate
	FROM  #Cs2Cn_SalesTaxuploadGST
	
	UPDATE SalesInvoice SET GstUpload1=1 WHERE SalInvNo  IN (SELECT InvoiceNumber FROM Cs2Cn_SalesTaxuploadGST(NOLOCK) WHERE UploadFlag='N')
	AND Dlvsts>=3 AND VatGst='GST'
	
END
GO
DELETE FROM CustomCaptions WHERE TransId=79 and CtrlId=1000 and SubCtrlid=100
INSERT INTO CustomCaptions([TransId],[CtrlId],[SubCtrlId],[CtrlName],[Caption],[PnlMsg],[MsgBox],[LngId],[Availability],[LastModBy],[LastModDate],[AuthId],[AuthDate],[DefaultCaption],[DefaultPnlMsg],[DefaultMsgBox],[Visibility],[Enabled]) 
VALUES (79,1000,100,'PnlMsg-79-1000-100','','Press F4/Double Click to Select ','',1,1,1,'2009-04-28',1,'2009-04-28','','Press F4/Double Click to Select ','',1,1)
GO
DELETE FROM CustomCaptions WHERE TransId=69 and CtrlId=1000 and SubCtrlid=20
INSERT INTO CustomCaptions([TransId],[CtrlId],[SubCtrlId],[CtrlName],[Caption],[PnlMsg],[MsgBox],[LngId],[Availability],[LastModBy],[LastModDate],[AuthId],[AuthDate],[DefaultCaption],[DefaultPnlMsg],[DefaultMsgBox],[Visibility],[Enabled]) 
VALUES (69,1000,20,'PnlMsg-69-1000-20','','Press F4/Double Click to Select ','',1,1,1,'2009-04-28',1,'2009-04-28','','Press F4/Double Click to Select ','',1,1)
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_ComputeITC_AfterVAT' AND XTYPE='P')
DROP PROCEDURE  Proc_ComputeITC_AfterVAT
GO
CREATE PROCEDURE Proc_ComputeITC_AfterVAT
AS
BEGIN

	DECLARE @GSTDate AS DATETIME
	SELECT @GSTDate=ActivationDate FROM GSTConfiguration WHERE ActivationStatus=1 AND AcknowledgeStatus=1 AND ConsoleAckStatus=1

	CREATE TABLE #PurchaseTax
	(
		PurRcptId INT,
		PrdSlno INT,
		TaxPerc NUMERIC(18,2),
		TaxableAmount NUMERIC(18,6),
		TaxAmount	NUMERIC(18,6)
	)

	SELECT DISTINCT PR.PurRcptId INTO #Purchase FROM PurchaseReceipt PR INNER JOIN PurchaseReceiptProduct PRP 
	ON PR.PurRcptId=PRP.PurRcptId
	WHERE goodsrcvddate>=@GSTDate and VATGST='VAT'


	SELECT DISTINCT Prdid,PrdBatId INTO #PurchaseProduct FROM
	(
	SELECT DISTINCT Prdid,PrdBatId FROM PurchaseReceipt PR INNER JOIN PurchaseReceiptProduct PRP 
	ON PR.PurRcptId=PRP.PurRcptId
	WHERE goodsrcvddate>=@GSTDate and VATGST='VAT'
	UNION
	SELECT DISTINCT Prdid,PrdBatId FROM PurchaseReceipt PR INNER JOIN PurchaseReceiptClaimScheme PRP 
	ON PR.PurRcptId=PRP.PurRcptId
	WHERE goodsrcvddate>=@GSTDate and VATGST='VAT'	
	)A
	
	SELECT PrdId,prdbatid,SUM(MRP)MRP,SUM(SellingRate)SellingRate,SUM(PurRate)PurRate,Priceid
	INTO #ProductStockDetails
	FROM
	(
	SELECT s.PrdId,s.prdbatid,PrdBatDetailValue AS MRP,0 AS SellingRate,0 AS PurRate,Priceid 
	FROM #PurchaseProduct S 
	INNER JOIN ProductBatch PB(NOLOCK) ON S.PrdId=PB.PrdId AND S.PrdBatID=PB.PrdBatId
	INNER JOIN ProductBatchDetails P(NOLOCK) ON S.PrdBatID=P.PrdBatId AND P.PrdBatId=PB.PrdBatId
	INNER JOIN BatchCreation B(NOLOCK) ON B.slno=p.slno
	WHERE P.DefaultPrice=1 AND FieldDesc='MRP'
	UNION ALL
	SELECT s.PrdId,s.prdbatid,0 AS MRP,PrdBatDetailValue AS SellingRate,0 AS PurRate ,Priceid
	FROM #PurchaseProduct S 
	INNER JOIN ProductBatch PB(NOLOCK) ON S.PrdId=PB.PrdId AND S.PrdBatID=PB.PrdBatId
	INNER JOIN ProductBatchDetails P(NOLOCK) ON S.PrdBatID=P.PrdBatId AND P.PrdBatId=PB.PrdBatId
	INNER JOIN BatchCreation B(NOLOCK) ON B.slno=p.slno
	WHERE P.DefaultPrice=1 AND FieldDesc='Selling Price'
	UNION ALL
	SELECT s.PrdId,s.prdbatid,0 AS MRP,0 AS SellingRate,PrdBatDetailValue AS PurRate,Priceid
	FROM #PurchaseProduct S 
	INNER JOIN ProductBatch PB(NOLOCK) ON S.PrdId=PB.PrdId AND S.PrdBatID=PB.PrdBatId
	INNER JOIN ProductBatchDetails P(NOLOCK) ON S.PrdBatID=P.PrdBatId AND P.PrdBatId=PB.PrdBatId
	INNER JOIN BatchCreation B(NOLOCK) ON B.slno=p.slno
	WHERE P.DefaultPrice=1 AND FieldDesc='List Price'
	)A 
	GROUP BY PrdId,prdbatid,Priceid


	INSERT INTO #PurchaseTax(PurRcptId,PrdSlno,TaxPerc,TaxableAmount,TaxAmount)
	SELECT PT.PurRcptId,pt.PrdSlNo,SUM(TaxPerc) as TaxPerc,TaxableAmount,SUM(TaxAmount) 
	FROM PurchaseReceiptProductTax PT INNER JOIN #Purchase P ON PT.PurRcptId=P.PurRcptId 
	WHERE  TaxableAmount>0  
 	GROUP BY PT.PurRcptId,PT.PrdSlNo,TaxableAmount 
 	ORDER BY PT.Prdslno
	
	SELECT PurRcptId,PrdSlno Into #TaxCess FROM #PurchaseTax 
	GROUP BY PurRcptId,PrdSlno
	HAVING COUNT(PrdSlno)>1	 
	
	SELECT TT.PurRcptId,TT.PrdSlno, TaxPerc,TaxableAmount,TaxAmount INTO #TaxCess1 FROM #PurchaseTax TT
	INNER JOIN #TaxCess T ON T.PurRcptId= TT.PurRcptId and T.PrdSlNo=TT.PrdSlno
	
	DELETE A FROM #PurchaseTax  A INNER JOIN #TaxCess B ON A.PurRcptId=B.PurRcptId and A.PrdSlno=B.PrdSlno
	
	SELECT PurRcptId,PrdSlno,Max(TaxableAmount) as TaxableAmount INTO #MaxTaxable FROM #TaxCess1 
	GROUP BY PurRcptId,PrdSlno
	
	SELECT PurRcptId,PrdSlno,Min(TaxableAmount) as TaxableAmount INTO #MinTaxable FROM #TaxCess1 
	GROUP BY PurRcptId,PrdSlno
			
	INSERT INTO #PurchaseTax(PurRcptId,PrdSlno,TaxPerc,TaxableAmount,TaxAmount)
	SELECT PurRcptId,Prdslno,SUM(TaxPercMain)+(SUM(TaxPercMain)*SUM((TaxPercCess/100))),SUM(TaxableAmount),SUM(TaxAmount)
	FROM (
			SELECT A.PurRcptId,A.PrdSlno,A.TaxPerc as TaxPercMain,0 as TaxPercCess,B.TaxableAmount,TaxAmount
			FROM #TaxCess1 A INNER JOIN #MaxTaxable B ON A.PurRcptId=B.PurRcptId 
			and A.Prdslno=B.PrdSlno and A.TaxableAmount=B.TaxableAmount		
			UNION ALL
			SELECT A.PurRcptId,A.PrdSlno,0 as TaxPercMain,TaxPerc as TaxPercCess ,0 as TaxableAmount,TaxAmount
			FROM #TaxCess1 A INNER JOIN #MinTaxable B ON A.PurRcptId=B.PurRcptId 
			and A.Prdslno=B.PrdSlno and A.TaxableAmount=B.TaxableAmount			 
	)X GROUP BY PurRcptId,Prdslno
	
	
	SELECT PrdCCode,PrdBatCode,PrdId,PrdBatId,LcnId,SUM(SaleableQty)SaleableQty,SUM(UnSaleableQty)UnSaleableQty,SUM(FreeQty)FreeQty,
		MRP,SellingRate,PurRate,TaxPerc,SUM(TaxableAmount)TaxableAmount,SUM(TaxAmount)TaxAmount,InvDate,PurRcptRefNo,CmpInvNo,SUM(GrnQty)GrnQty,
		SUM(GrnFreeQty)GrnFreeQty INTO #ITCDETAILS
	FROM
	(
	SELECT PrdCCode,PrdBatCode,PRP.PrdId,PRP.PrdBatId,PR.LcnId,SUM(RcvdGoodBaseQty) SaleableQty,
		SUM(UnSalBaseQty) UnSaleableQty,0 AS FreeQty,MRP,SellingRate,PurRate,TaxPerc,SUM(TaxableAmount)TaxableAmount,
		SUM(PRT.TaxAmount)TaxAmount,InvDate,PurRcptRefNo,CmpInvNo,SUM(RcvdGoodBaseQty)GrnQty,0 AS GrnFreeQty 
	FROM PurchaseReceipt PR INNER JOIN PurchaseReceiptProduct PRP 
	ON PR.PurRcptId=PRP.PurRcptId
	INNER JOIN #PurchaseTax PRT ON PRT.PurRcptId=PRP.PurRcptId AND PRT.PurRcptId=PR.PurRcptId 
		AND PRT.PrdSlNo=PRP.PrdSlNo
	INNER JOIN Product P ON P.PrdId=PRP.prdid
	INNER JOIN ProductBatch PB ON PB.prdid=P.Prdid AND PB.PrdBatId=PRP.PrdBatId
	INNER JOIN #ProductStockDetails PS ON PS.Prdid=PRP.PrdId AND PS.PrdBatId=PRP.PrdBatId 
				AND PS.PrdId=PB.PrdId AND PS.PrdBatId=PB.PrdBatId
	WHERE goodsrcvddate>=@GSTDate and VATGST='VAT'
	GROUP BY PrdCCode,PrdBatCode,PRP.PrdId,PRP.PrdBatId,PR.LcnId,MRP,SellingRate,PurRate,TaxPerc,InvDate,PurRcptRefNo,CmpInvNo
	UNION
	SELECT PrdCCode,PrdBatCode,PRP.PrdId,PRP.PrdBatId,PR.LcnId,0 SaleableQty,
		0 AS  UnSaleableQty,SUM(Quantity-RetQuantity) AS FreeQty,MRP,SellingRate,PurRate,0 AS TaxPerc,0 AS TaxableAmount,
		0 AS TaxAmount,InvDate,PurRcptRefNo,CmpInvNo,0 GrnQty,SUM(Quantity-RetQuantity) AS GrnFreeQty 
	FROM PurchaseReceipt PR INNER JOIN PurchaseReceiptClaimScheme PRP 
		ON PR.PurRcptId=PRP.PurRcptId
	INNER JOIN Product P ON P.PrdId=PRP.prdid
	INNER JOIN ProductBatch PB ON PB.prdid=P.Prdid AND PB.PrdBatId=PRP.PrdBatId
	INNER JOIN #ProductStockDetails PS ON PS.Prdid=PRP.PrdId AND PS.PrdBatId=PRP.PrdBatId 
				AND PS.PrdId=PB.PrdId AND PS.PrdBatId=PB.PrdBatId
	WHERE goodsrcvddate>=@GSTDate and VATGST='VAT'
	GROUP BY PrdCCode,PrdBatCode,PRP.PrdId,PRP.PrdBatId,PR.LcnId,MRP,SellingRate,PurRate,InvDate,PurRcptRefNo,CmpInvNo	
	)A
	GROUP BY PrdCCode,PrdBatCode,PrdId,PrdBatId,LcnId,MRP,SellingRate,PurRate,TaxPerc,InvDate,PurRcptRefNo,CmpInvNo
	
	INSERT INTO VatClosingStock
	SELECT F.PrdCCode,F.PrdBatCode,F.PrdId,F.PrdBatId,LcnId,SaleableQty,UnSaleableQty,FreeQty,MRP,SellingRate,PurRate,TaxPerc,
	(SellingRate*GrnQty),(PurRate*GrnQty),	CASE PrdUnitId
	WHEN 2 THEN ISNULL((PrdWgt * GrnQty),0)/1000/1000 --GM TO TONNES
	WHEN 4 THEN ISNULL((PrdWgt * GrnQty),0)/1000/1000--ML  TO TONNES
	WHEN 3 THEN ISNULL((PrdWgt * GrnQty),0)/1000 --kg TO TONNE
	WHEN 5 THEN ISNULL((PrdWgt * GrnQty),0) /1000--LT to Tonne		
	END AS ClosingSalVolume,
	CASE PrdUnitId
	WHEN 2 THEN ISNULL((PrdWgt * UnSaleableQty),0)/1000/1000 --GM TO TONNES
	WHEN 4 THEN ISNULL((PrdWgt * UnSaleableQty),0)/1000/1000--ML  TO TONNES
	WHEN 3 THEN ISNULL((PrdWgt * UnSaleableQty),0)/1000 --kg TO TONNE
	WHEN 5 THEN ISNULL((PrdWgt * UnSaleableQty),0) /1000--LT to Tonne		
	END AS ClosingUnSalVolume,
	CASE PrdUnitId
	WHEN 2 THEN ISNULL((PrdWgt * GrnFreeQty),0)/1000/1000 --GM TO TONNES
	WHEN 4 THEN ISNULL((PrdWgt * GrnFreeQty),0)/1000/1000--ML  TO TONNES
	WHEN 3 THEN ISNULL((PrdWgt * GrnFreeQty),0)/1000 --kg TO TONNE
	WHEN 5 THEN ISNULL((PrdWgt * GrnFreeQty),0) /1000--LT to Tonne		
	END AS ClosingFreeVolume,
	TaxableAmount,TaxAmount,InvDate,PurRcptRefNo,CmpInvNo,GrnQty,GrnFreeQty,0,1,GETDATE()
	FROM #ITCDETAILS F INNER JOIN Product P ON P.PrdId=F.Prdid 
	INNER JOIN ProductBatch PB ON PB.PrdId=f.Prdid and pb.PrdBatId=f.Prdbatid and pb.PrdId=p.PrdId		
	WHERE CmpInvNo NOT IN (SELECT CmpInvNo FROM VatClosingStock)
		 
END
GO
IF EXISTS(SELECT '*' FROM SYSOBJECTS WHERE NAME='Fn_LoadConsolePurchaseInvoice' and xtype IN ('TF','FN'))
DROP FUNCTION Fn_LoadConsolePurchaseInvoice
GO
--SELECT * FROM Fn_LoadConsolePurchaseInvoice('1516304516-1',1)
CREATE FUNCTION Fn_LoadConsolePurchaseInvoice(@InvoiceNo VARCHAR(100),@lDisplay AS INT)
RETURNS @PurchaseInvoice TABLE
(
	CmpInvNo		VARCHAR(100),
	RowId			INT,
	PrdId			BIGINT,
	PrdDCode		VARCHAR(100),
	PrdName			VARCHAR(200),
	PrdBatId		BIGINT,
	PrdBatCode		VARCHAR(100),
	DefaultPriceId	BIGINT,
	POUOMId			INT,
	POUOMCode		VARCHAR(100),
	POQty			INT,
	InvUOMId		INT,
	InvUOMCode		VARCHAR(100),
	InvQty			NUMERIC(18,0),
	GrossAmt		NUMERIC(18,6),
	DiscAmt			NUMERIC(18,6),
	TaxAmt			NUMERIC(18,6),
	FreightCharges  NUMERIC(18,6),
	NetAmt			NUMERIC(18,6),
	NewPrd			INT,
	PrdBEDAmount	NUMERIC(18,6),
	QtyInKg			NUMERIC(18,6),
	AddDiscAmt		NUMERIC(18,6)
)
AS
BEGIN

DECLARE @TaxType AS VARCHAR(20)
DECLARE @GstEnabled AS INT
SET @GstEnabled=0
SET @TaxType=''
	
	
	SELECT @TaxType=ISNULL(TaxType,'VAT') FROM ETLTempPurchaseReceipt(NOLOCK) WHERE CmpInvNo=@InvoiceNo
	IF EXISTS(SELECT * FROM GSTCONFIGURATION (NOLOCK) WHERE ActivationStatus=1 AND AcknowledgeStatus=1 AND ConsoleAckStatus=1)
	BEGIN
		SET @GstEnabled=1	
	END
	
		IF @GstEnabled=1 AND RTRIM(LTRIM(UPPER(ISNULL(@TaxType,'VAT'))))='VAT'
		BEGIN
			--ProductBatchVATTaxB4GST
			
			INSERT INTO @PurchaseInvoice(CmpInvNo,RowId,PrdId,PrdDCode,PrdName,PrdBatId,PrdBatCode,DefaultPriceId,POUOMId,
			POUOMCode,POQty,InvUOMId,InvUOMCode,InvQty,GrossAmt,DiscAmt,TaxAmt,FreightCharges,NetAmt,NewPrd,PrdBEDAmount,QtyInKg,AddDiscAmt)
			SELECT ETL.CmpInvNo,ETL.RowId,ETL.PrdId,CASE @lDisplay WHEN 1 THEN  P.PrdCCode WHEN 2 THEN P.PrdDCode END AS PrdDCode,
			P.PrdName,ETL.PrdBatId,PB.PrdBatCode,PBV.DefaultPriceId,ETL.POUOMId,'' AS POUOMCode,ETL.POQty,ETL.InvUOMId,UI.UOMCode AS InvUOMCode,
			ETL.InvQty,ETL.GrossAmt,ETL.DiscAmt,ETL.TaxAmt,ISNULL(ETL.FreightCharges,0) AS FreightCharges,ETL.NetAmt,ETL.NewPrd,
			ISNULL(ETL.PrdBEDAmount,0) AS PrdBEDAmount,ISNULL(ETL.QtyInKg,0) AS QtyInKg,ETL.AddDiscAmt FROM ETLTempPurchaseReceiptProduct ETL,Product P,ProductBatch PB,ProductBatchVATTaxB4GST PBV,
			UOMMaster UI WHERE ETL.PrdId=P.PrdId AND ETL.PrdBatId=PB.PrdBatId AND ETL.InvUOMId= UI.UOMId AND P.PrdId=PBV.PrdId 
			AND PB.PrdBatId=PBV.PrdBatId AND ETL.PrdId=PBV.PrdId AND ETL.PrdBatId=PBV.PrdBatId
			and cmpinvno=@InvoiceNo
					
		END
		ELSE
		BEGIN
		
			INSERT INTO @PurchaseInvoice(CmpInvNo,RowId,PrdId,PrdDCode,PrdName,PrdBatId,PrdBatCode,DefaultPriceId,POUOMId,
			POUOMCode,POQty,InvUOMId,InvUOMCode,InvQty,GrossAmt,DiscAmt,TaxAmt,FreightCharges,NetAmt,NewPrd,PrdBEDAmount,QtyInKg,AddDiscAmt)
			SELECT ETL.CmpInvNo,ETL.RowId,ETL.PrdId,CASE @lDisplay WHEN 1 THEN  P.PrdCCode WHEN 2 THEN P.PrdDCode END AS PrdDCode,
			P.PrdName,ETL.PrdBatId,PB.PrdBatCode,PB.DefaultPriceId,ETL.POUOMId,'' AS POUOMCode,ETL.POQty,ETL.InvUOMId,UI.UOMCode AS InvUOMCode,
			ETL.InvQty,ETL.GrossAmt,ETL.DiscAmt,ETL.TaxAmt,ISNULL(ETL.FreightCharges,0) AS FreightCharges,ETL.NetAmt,ETL.NewPrd,
			ISNULL(ETL.PrdBEDAmount,0) AS PrdBEDAmount,ISNULL(ETL.QtyInKg,0) AS QtyInKg,ETL.AddDiscAmt FROM ETLTempPurchaseReceiptProduct ETL,
			Product P,ProductBatch PB,UOMMaster UI WHERE ETL.PrdId=P.PrdId AND ETL.PrdBatId=PB.PrdBatId AND 
			ETL.InvUOMId= UI.UOMId and cmpinvno=@InvoiceNo 
			
		END
	
RETURN
END
GO
IF EXISTS(SELECT '*' FROM SYSOBJECTS WHERE NAME='Fn_LoadConsolePurchaseInvoiceManual' and xtype IN ('TF','FN'))
DROP FUNCTION Fn_LoadConsolePurchaseInvoiceManual
GO
--SELECT * FROM Fn_LoadConsolePurchaseInvoiceManual('1516304516-1',1,0)
CREATE FUNCTION Fn_LoadConsolePurchaseInvoiceManual(@InvoiceNo VARCHAR(100),@lDisplay AS INT)
RETURNS @PurchaseInvoice TABLE
(
	CmpInvNo		VARCHAR(100),
	RowId			INT,
	PrdId			BIGINT,
	PrdDCode		VARCHAR(100),
	PrdName			VARCHAR(200),
	PrdBatId		BIGINT,
	PrdBatCode		VARCHAR(100),
	DefaultPriceId	BIGINT,
	POUOMId			INT,
	POUOMCode		VARCHAR(100),
	POQty			INT,
	InvUOMId		INT,
	InvUOMCode		VARCHAR(100),
	InvQty			NUMERIC(18,0),
	GrossAmt		NUMERIC(18,6),
	DiscAmt			NUMERIC(18,6),
	TaxAmt			NUMERIC(18,6),
	NetAmt			NUMERIC(18,6),
	NewPrd			INT
)
AS
BEGIN

DECLARE @TaxType AS VARCHAR(20)
DECLARE @GstEnabled AS INT
SET @GstEnabled=0
SET @TaxType=''
	
	
	SELECT @TaxType=ISNULL(TaxType,'VAT') FROM ETLTempPurchaseReceipt(NOLOCK) WHERE CmpInvNo=@InvoiceNo
	IF EXISTS(SELECT * FROM GSTCONFIGURATION (NOLOCK) WHERE ActivationStatus=1 AND AcknowledgeStatus=1 AND ConsoleAckStatus=1)
	BEGIN
		SET @GstEnabled=1	
	END
	
		--IF @GstEnabled=1 AND RTRIM(LTRIM(UPPER(ISNULL(@TaxType,'VAT'))))='VAT'
		--BEGIN
		--	--ProductBatchVATTaxB4GST
			
			
		--	--SELECT ETL.CmpInvNo,ETL.PrdId,CASE @lDisplay  WHEN 1 THEN  P.PrdCCode WHEN 2 THEN P.PrdDCode END AS PrdDCode,P.PrdName,ETL.PrdBatId,PB.PrdBatCode,PB.DefaultPriceId,ETL.POUOMId, 
  -- --            '' AS POUOMCode,ETL.POQty,ETL.InvUOMId,UI.UOMCode AS InvUOMCode,SUM(ETL.InvQty) AS InvQty,SUM(ETL.GrossAmt) AS GrossAmt, 
  -- --            SUM(ETL.DiscAmt) AS DiscAmt,SUM(ETL.TaxAmt) AS TaxAmt,SUM(ETL.NetAmt) AS NetAmt 
  -- --            ,SUM(ETL.OIDAmount) AS OIDAmount,SUM(ETL.OCTAmount) AS OCTAmount,SUM(ETL.OIDNetValue) AS OIDNetValue 
  -- --            ,SUM(ETL.CST) AS CST,SUM(ETL.AdditionalTax) AS AdditionalTax,SUM(ETL.SSC) AS SSC,ETL.LSP,Ug.ConversionFactor,ETL.PrdBEDAmount  
  -- --            FROM ETLTempNesPurchaseReceiptProduct ETL,Product P,ProductBatch PB,UOMMaster UI,UomGroup Ug  
  -- --            WHERE ETL.PrdId=P.PrdId AND ETL.PrdBatId=PB.PrdBatId AND P.UomGroupId=Ug.UomGroupId AND UI.UomId=Ug.UomId AND  
  -- --            ETL.InvUOMId= UI.UOMId and cmpinvno=@InvoiceNo 
  -- --            GROUP BY ETL.CmpInvNo,ETL.PrdId,P.PrdDCode,P.PrdName,ETL.PrdBatId,PB.PrdBatCode,PB.DefaultPriceId,ETL.POUOMId, 
  -- --            ETL.POQty,ETL.InvUOMId,UI.UOMCode,ETL.LSP,Ug.ConversionFactor,P.PrdCCode,ETL.PrdBEDAmount
					
		--END
		--ELSE
		--BEGIN
		
			
		--	--SELECT ETL.CmpInvNo,ETL.PrdId,CASE @lDisplay  WHEN 1 THEN  P.PrdCCode WHEN 2 THEN P.PrdDCode END AS PrdDCode,P.PrdName,ETL.PrdBatId,PB.PrdBatCode,PB.DefaultPriceId,ETL.POUOMId, 
  -- --            '' AS POUOMCode,ETL.POQty,ETL.InvUOMId,UI.UOMCode AS InvUOMCode,SUM(ETL.InvQty) AS InvQty,SUM(ETL.GrossAmt) AS GrossAmt, 
  -- --            SUM(ETL.DiscAmt) AS DiscAmt,SUM(ETL.TaxAmt) AS TaxAmt,SUM(ETL.NetAmt) AS NetAmt 
  -- --            ,SUM(ETL.OIDAmount) AS OIDAmount,SUM(ETL.OCTAmount) AS OCTAmount,SUM(ETL.OIDNetValue) AS OIDNetValue 
  -- --            ,SUM(ETL.CST) AS CST,SUM(ETL.AdditionalTax) AS AdditionalTax,SUM(ETL.SSC) AS SSC,ETL.LSP,Ug.ConversionFactor,ETL.PrdBEDAmount  
  -- --            FROM ETLTempNesPurchaseReceiptProduct ETL,Product P,ProductBatch PB,UOMMaster UI,UomGroup Ug  
  -- --            WHERE ETL.PrdId=P.PrdId AND ETL.PrdBatId=PB.PrdBatId AND P.UomGroupId=Ug.UomGroupId AND UI.UomId=Ug.UomId AND  
  -- --            ETL.InvUOMId= UI.UOMId and cmpinvno=@InvoiceNo 
  -- --            GROUP BY ETL.CmpInvNo,ETL.PrdId,P.PrdDCode,P.PrdName,ETL.PrdBatId,PB.PrdBatCode,PB.DefaultPriceId,ETL.POUOMId, 
  -- --            ETL.POQty,ETL.InvUOMId,UI.UOMCode,ETL.LSP,Ug.ConversionFactor,P.PrdCCode,ETL.PrdBEDAmount
			
		--END
	
RETURN
END
GO
IF EXISTS(SELECT '*' FROM SYSOBJECTS WHERE NAME='Fn_LoadConsolePurchaseInvoicePriceInfo' and xtype IN ('TF','FN'))
DROP FUNCTION Fn_LoadConsolePurchaseInvoicePriceInfo
GO
--SELECT * FROM Fn_LoadConsolePurchaseInvoicePriceInfo('1516304516-1',1,0)
CREATE FUNCTION Fn_LoadConsolePurchaseInvoicePriceInfo(@InvoiceNo VARCHAR(100),@lPrdBatId AS BIGINT)
RETURNS @PurchaseInvoice TABLE
(
	[MRP]		NUMERIC(18,6),
	SellingRate	NUMERIC(18,6)
)
AS
BEGIN

	DECLARE @TaxType AS VARCHAR(20)
	DECLARE @GstEnabled AS INT
	SET @GstEnabled=0
	SET @TaxType=''
		
	SELECT @TaxType=ISNULL(TaxType,'VAT') FROM ETLTempPurchaseReceipt(NOLOCK) WHERE CmpInvNo=@InvoiceNo
	IF EXISTS(SELECT * FROM GSTCONFIGURATION (NOLOCK) WHERE ActivationStatus=1 AND AcknowledgeStatus=1 AND ConsoleAckStatus=1)
	BEGIN
		SET @GstEnabled=1	
	END
	
	IF @GstEnabled=1 AND RTRIM(LTRIM(UPPER(ISNULL(@TaxType,'VAT'))))='VAT'
	BEGIN
		DECLARE @PriceId AS BIGINT
		SET @PriceId=0
		SELECT @PriceId=ISNULL(DefaultPriceId,0) FROM ProductBatchVATTaxB4GST (NOLOCK) WHERE PrdBatId=@lPrdBatId
		--ProductBatchVATTaxB4GST
		IF ISNULL(@PriceId,0)=0
		BEGIN
			INSERT INTO @PurchaseInvoice([MRP],[SellingRate])
			SELECT PBDM.PrdBatDetailValue AS MRP,PBDS.PrdBatDetailValue AS SellingRate FROM ProductBatchDetails PBDM,
			ProductBatchDetails PBDS,BatchCreation BCM,BatchCreation BCS WHERE PBDM.PrdBatId=PBDS.PrdBatId AND 
			PBDM.PriceId=PBDS.PriceId AND PBDM.DefaultPrice=1 AND PBDS.DefaultPrice=1 AND PBDM.BatchSeqId=BCM.BatchSeqId 
			AND PBDS.BatchSeqId=BCS.BatchSeqId AND BCM.SlNo=PBDM.SlNo AND BCM.MRP=1 AND BCS.Slno = PBDS.Slno 
			And BCS.ListPrice = 1 AND PBDM.PrdBatId=@lPrdBatId
		END
		ELSE
		BEGIN
			INSERT INTO @PurchaseInvoice([MRP],[SellingRate])
			SELECT PBDM.PrdBatDetailValue AS MRP,PBDS.PrdBatDetailValue AS SellingRate FROM ProductBatchDetails PBDM,
			ProductBatchDetails PBDS,BatchCreation BCM,BatchCreation BCS WHERE PBDM.PrdBatId=PBDS.PrdBatId AND 
			PBDM.PriceId=PBDS.PriceId AND PBDM.BatchSeqId=BCM.BatchSeqId 
			AND PBDS.BatchSeqId=BCS.BatchSeqId AND BCM.SlNo=PBDM.SlNo AND BCM.MRP=1 AND BCS.Slno = PBDS.Slno 
			And BCS.ListPrice = 1 AND PBDM.PrdBatId=@lPrdBatId AND PBDS.PriceId=@PriceId
		END
	END
	ELSE
	BEGIN
		INSERT INTO @PurchaseInvoice([MRP],[SellingRate])
		SELECT PBDM.PrdBatDetailValue AS MRP,PBDS.PrdBatDetailValue AS SellingRate FROM ProductBatchDetails PBDM,
		ProductBatchDetails PBDS,BatchCreation BCM,BatchCreation BCS WHERE PBDM.PrdBatId=PBDS.PrdBatId AND 
		PBDM.PriceId=PBDS.PriceId AND PBDM.DefaultPrice=1 AND PBDS.DefaultPrice=1 AND PBDM.BatchSeqId=BCM.BatchSeqId 
		AND PBDS.BatchSeqId=BCS.BatchSeqId AND BCM.SlNo=PBDM.SlNo AND BCM.MRP=1 AND BCS.Slno = PBDS.Slno 
		And BCS.ListPrice = 1 AND PBDM.PrdBatId=@lPrdBatId
	END

RETURN
END
GO
DELETE FROM CustomCaptions WHERE TransId=91 and CtrlId=1000 and SubCtrlId=26
INSERT INTO CustomCaptions([TransId],[CtrlId],[SubCtrlId],[CtrlName],[Caption],[PnlMsg],[MsgBox],[LngId],[Availability],[LastModBy],[LastModDate],[AuthId],[AuthDate],[DefaultCaption],[DefaultPnlMsg],[DefaultMsgBox],[Visibility],[Enabled]) 
VALUES (91,1000,26,'PnlMsg-91-1000-26','','Press F4/Double Click to Select ','',1,1,1,'2009-04-28',1,'2009-04-28','','Press F4/Double Click to Select ','',1,1)
GO
DELETE FROM HotSearchEditorHd WHERE FormId=7010
INSERT INTO HotSearchEditorHd(FormId,FormName,ControlName,SltString,RemainsltString)
SELECT 7010,'Claim Group Master','Service','Select','SELECT ServiceId,SerACCode,SerACName FROM ServiceMaster A (NOLOCK) WHERE SerStatus=1'
GO
DELETE FROM HotSearchEditorDt WHERE FormId=7010
INSERT INTO HotSearchEditorDt(Slno,FormId,FieldName,AliasName,SrchFieldNm,Colwidth,SortedType,HotSearchName,TransId)
SELECT 1,7010,'Service','Code','SerACCode',1500,0,'HotSch-108-3000-1',108
UNION ALL
SELECT 2,7010,'Service','Name','SerACName',3000,0,'HotSch-108-3000-1',108
GO
DELETE FROM CustomCaptions WHERE TransId=108 and CtrlId=200 
INSERT INTO CustomCaptions(TransId,CtrlId,SubCtrlId,CtrlName,Caption,PnlMsg,MsgBox,LngId,Availability,LastModBy,LastModDate,
AuthId,AuthDate,DefaultCaption,DefaultPnlMsg,DefaultMsgBox,Visibility,Enabled)
SELECT 108,200,1,'lblInvoiceType','Invoice Type(+)','','',1,1,1,GETDATE(),1,GETDATE(),'Invoice Type','','',1,1
UNION ALL
SELECT 108,200,2,'lblServiceName','Service Name*...','','',1,1,1,GETDATE(),1,GETDATE(),'Service Name','','',1,1
UNION ALL
SELECT 108,200,3,'lblGstTax','GST Tax(+)','','',1,1,1,GETDATE(),1,GETDATE(),'GST Tax','','',1,1
GO
DELETE FROM CustomCaptions WHERE TransId=108 and CtrlId=3000 
INSERT INTO CustomCaptions(TransId,CtrlId,SubCtrlId,CtrlName,Caption,PnlMsg,MsgBox,LngId,Availability,LastModBy,LastModDate,
AuthId,AuthDate,DefaultCaption,DefaultPnlMsg,DefaultMsgBox,Visibility,Enabled)
SELECT 108,3000,1,'HotSch-108-3000-1','Code','','',1,1,1,GETDATE(),1,GETDATE(),'Code','','',1,1
UNION ALL
SELECT 108,3000,2,'HotSch-108-3000-2','Name','','',1,1,1,GETDATE(),1,GETDATE(),'Name','','',1,1
GO
IF EXISTS(SELECT 'X' FROM SYSOBJECTS WHERE XTYPE='TF' AND NAME='Fn_LoadClaimGroup')
DROP FUNCTION Fn_LoadClaimGroup
GO
--SELECT * FROM Fn_LoadClaimGroup(19)
CREATE FUNCTION [Fn_LoadClaimGroup] (@ClmGrpId INT)
RETURNS @TblLoadClaimGroup TABLE
(

	ClmGrpId			INT,
	clmgrpCode			VARCHAR(50),
	ClmGrpName		VARCHAR(100),
	ClmTypeName		VARCHAR(50),
	GSTTaxName      VARCHAR(10),
	GSTTax			INT,
	ServiceProvider VARCHAR(50),
	ServiceType		INT,
	ServiceId		INT,
	SerACName		VARCHAR(200),
	ServiceInvoiceType Varchar(20),
	ServiceOrGoods  INT	
	)
AS
/****************************************************************************
* FUNCTION: Fn_LoadClaimGroup
* PURPOSE: To Return ClaimGroup Details
* NOTES:
* CREATED: MURUGAN. R
* DATE: 02/06/2017
* MODIFIED
* DATE         AUTHOR     DESCRIPTION
------------------------------------------------------------------------------
*****************************************************************************/
BEGIN
		INSERT INTO @TblLoadClaimGroup(clmgrpid,clmgrpCode,ClmGrpName,GSTTaxName,GSTTax,ServiceProvider,
		ServiceType,ServiceId,SerACName,ServiceInvoiceType,ServiceOrGoods)
		SELECT clmgrpid,clmgrpCode,ClmGrpName,
		CASE GSTTax WHEN 0 THEN 'NO' ELSE 'YES' END as GSTTaxName ,GSTTax, 
		CASE ServiceType WHEN 1 THEN 'Retailer' WHEN 2 THEN  'Distributor' ELSE 'Both' END as ServiceProvider,ServiceType,
		A.ServiceId,ISNULL(SerACName+'-'+SerACCode,0)  as SerACName,
		CASE ServiceOrGoods WHEN 1 THEN 'Service Invoice' WHEN 2 THEN 'Goods Invoice' ELSE '' END as ServiceInvoiceType,ServiceOrGoods 
		FROM Claimgroupmaster A (NOLOCK) 
		LEFT OUTER JOIN ServiceMaster B (NOLOCK) ON A.ServiceId=B.ServiceId Where clmgrpiD =@ClmGrpId
RETURN
END
GO
IF EXISTS(SELECT 'X' FROM SYSOBJECTS WHERE XTYPE='TF' AND NAME='Fn_ReturnClaimGroupGridDtls')
DROP FUNCTION Fn_ReturnClaimGroupGridDtls
GO
--SELECT * FROM [Fn_ReturnClaimGroupGridDtls](1,108)
CREATE FUNCTION [Fn_ReturnClaimGroupGridDtls] (@gLngId INT,@iTrans_ClaimGroup INT)
RETURNS @TblReturnClaimGroupGridDtls TABLE
(
	CmpId				INT,
	CmpName				Varchar(100),	
	ClmGrpId			INT,
	ClmGrpCode			VARCHAR(50),
	ClmGrpName		VARCHAR(100),
	ClaimType		VARCHAR(50),
	AutoClaim		Varchar(10),
	CoaId			INT,
	ServiceId		INT,	
	SerACName		VARCHAR(200),
	GSTTax			VARCHAR(20),
	GSTTaxId		INT,
	ServiceTypeName Varchar(30),
	ServiceType		INT,	
	ServiceOrGoodsName VARCHAR(50),
	ServiceOrGoods		INT
	)
AS
/****************************************************************************
* FUNCTION: Fn_LoadClaimGroup
* PURPOSE: To Return ClaimGroup Details
* NOTES:
* CREATED: MURUGAN. R
* DATE: 02/06/2017
* MODIFIED
* DATE         AUTHOR     DESCRIPTION
------------------------------------------------------------------------------
*****************************************************************************/
BEGIN


		INSERT INTO @TblReturnClaimGroupGridDtls(CmpId,CmpName,ClmGrpId,ClmGrpCode,ClmGrpName,ClaimType,AutoClaim,
		CoaId,ServiceId,SerACName,GSTTax,GSTTaxId,ServiceTypeName,ServiceType,	
		ServiceOrGoodsName,ServiceOrGoods)	
		SELECT CP.CmpId,CP.CmpName,CG.ClmGrpId,CG.ClmGrpCode,CG.ClmGrpName,
		(CASE WHEN CG.ClmGrpId < 18 THEN 
		(SELECT ISNULL(CtrlDesc,'') FROM ScreenDefaultValues WHERE CtrlId = 16 And TransId = @iTrans_ClaimGroup And LngId = @gLngId)
		ELSE (SELECT ISNULL(CtrlDesc,'') FROM ScreenDefaultValues WHERE CtrlId = 17 And TransId = @iTrans_ClaimGroup And LngId = @gLngId) END)AS ClaimType,
		ISNULL(SD2.CtrlDesc,'') AS AutoClaim,CG.CoaId
		,CG.ServiceId,ISNULL(SerACName,''),
		ISNULL(S1.CtrlDesc,'') AS GSTTax,
		ISNULL(S1.CtrlValue,0) AS GSTTaxId,
		ISNULL(S2.CtrlDesc,'') AS ServiceTypeName,
		ISNULL(S2.CtrlValue,0) AS ServiceType,
		ISNULL(S3.CtrlDesc,'') AS ServiceOrGoodsName ,
		ISNULL(S3.CtrlValue,0) AS ServiceOrGoods
		From Company CP,Claimgroupmaster CG 
		LEFT OUTER JOIN ScreenDefaultValues SD2 ON SD2.CtrlValue=CG.AutoClaim
		AND SD2.CtrlId=11 AND SD2.TransId=@iTrans_ClaimGroup And SD2.LngId= @gLngId
		LEFT OUTER JOIN ServiceMaster SM1 ON SM1.ServiceId=CG.ServiceId 
		LEFT OUTER JOIN ScreenDefaultValues S1 ON S1.CtrlValue=CG.GSTTax
		AND S1.CtrlId=21 AND S1.TransId=@iTrans_ClaimGroup And S1.LngId= @gLngId 
		LEFT OUTER JOIN ScreenDefaultValues S2 ON S2.CtrlValue=CG.ServiceOrGoods 
		AND S2.CtrlId=20 AND S2.TransId=@iTrans_ClaimGroup And S2.LngId= @gLngId 
		LEFT OUTER JOIN ScreenDefaultValues S3 ON S3.CtrlValue=CG.ServiceType
		AND S3.CtrlId=22 AND S3.TransId=@iTrans_ClaimGroup And S3.LngId= @gLngId
		WHERE CG.CmpId=CP.CmpId and CG.DisplayStatus=1
RETURN
END
GO
IF EXISTS (SELECT * FROM Sysobjects Where name='Cn2Cs_Prk_ServiceClaimGroup' and XTYPE='U')
DROP TABLE Cn2Cs_Prk_ServiceClaimGroup
GO
CREATE TABLE Cn2Cs_Prk_ServiceClaimGroup
(
	[DistCode] [nvarchar](50) NULL,
	[ServiceCode] [varchar](50) NULL,
	[ClaimCode] [varchar](50) NULL,
	[ServiceType] [varchar](50) NULL,
	[GSTTax] [varchar](50) NULL,
	[ServiceOrGoods] [Varchar](50) NULL,
	[DownLoadFlag] [varchar](10) NULL,
	[CreatedDate] [datetime] NULL
)
GO
IF EXISTS (SELECT * FROM Sysobjects Where Name='Proc_Import_ServiceClaimGroup' AND XTYPE='P')
DROP PROCEDURE Proc_Import_ServiceClaimGroup
GO
--Exec Proc_Import_ServiceClaimGroup '<Data></Data>'
CREATE PROCEDURE Proc_Import_ServiceClaimGroup
(
	@Pi_Records TEXT
)
AS
/*********************************
* PROCEDURE		: Proc_Import_ServiceClaimGroup
* PURPOSE		: To Insert records from xml file in the Table Cn2Cs_Prk_ServiceClaimGroup
* CREATED		: Nandakumar R.G
* CREATED DATE	: 08/03/2010
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}

*********************************/
SET NOCOUNT ON
BEGIN

	DECLARE @hDoc INTEGER
	
	EXEC sp_xml_preparedocument @hDoc OUTPUT,@Pi_Records

	INSERT INTO Cn2Cs_Prk_ServiceClaimGroup(DistCode,ServiceCode,ClaimCode,ServiceType,GSTTax,ServiceOrGoods,DownLoadFlag,CreatedDate)
	SELECT DistCode,ServiceCode,ClaimCode,ServiceType,GSTTax,ServiceOrGoods,DownLoadFlag,CreatedDate
	FROM OPENXML (@hdoc,'/Root/Console2CS_ServiceClaimGroup',1)
	WITH 
	(
		DistCode        NVARCHAR(100),
		ServiceCode     NVARCHAR(100),
		ClaimCode		NVARCHAR(100),		
		ServiceType     NVARCHAR(100),				
		GSTTax			NVARCHAR(100),
		ServiceOrGoods	NVARCHAR(100),
		DownLoadFlag	NVARCHAR(10),
		CreatedDate     DATETIME
	) XMLObj

	EXEC sp_xml_removedocument @hDoc
END
GO
IF Exists(SELECT * FROM sysobjects where type='P' AND name='Proc_Cn2Cs_ServiceClaimGroup')
Drop PROCEDURE Proc_Cn2Cs_ServiceClaimGroup
GO
/*
BEGIN Tran
delete from errorlog
exec Proc_Cn2Cs_ServiceClaimGroup 0
select * FROM Cn2Cs_Prk_ServiceClaimgroup	 
select *from claimgroupmaster 
select * from errorlog
ROLLBACK tran
*/
CREATE PROCEDURE Proc_Cn2Cs_ServiceClaimGroup
(
	@Po_ErrNo INT OUTPUT
)
AS
/*******************************************************
* PROCEDURE		: Proc_Cn2Cs_Prk_ServiceTaxSetting
* PURPOSE		: To validate the downloaded ServiceClaimGroup
* CREATED BY	: Govindaraj.P
* CREATED DATE	: 2017/05/27
* NOTE			:
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
-------------------------------------------------------
* {date} {developer}  {brief modification description}
	
*******************************************************/
SET NOCOUNT ON
BEGIN

	
	DECLARE @Tabname AS VARCHAR(100)
	DECLARE @Servicecode AS VARCHAR(100)
	DECLARE @ClaimCode as Varchar(50)
	DECLARE @Servicetype as Varchar(50)
	DECLARE @MasterName as Varchar(50)
	DECLARE @GSTtax as Varchar(50)
	DECLARE @Serviceid AS INT
    ---UDC Related---
    DECLARE @UdcHdId AS INT
    DECLARE @Taxid AS INT
    DECLARE @SrType AS INT
    DECLARE @SrGoods AS INT
    DECLARE @ServiceGoods AS VARCHAR(50)
    
	
		
		DELETE PRK FROM Cn2Cs_Prk_ServiceClaimGroup PRK (NOLOCK) WHERE DownloadFlag='Y'
		SET @Po_ErrNo=0
		SET @Tabname='Cn2Cs_Prk_ServiceClaimGroup'
		
		
		CREATE TABLE #AvoidClaimGroup
		(
		 ServiceCode NVARCHAR(100),
		 ClaimCode NVARCHAR(100)
		 )
		
		---Service Type Service Code Validation Check----
		INSERT INTO #AvoidClaimGroup
		SELECT Distinct ServiceCode,ClaimCode from Cn2Cs_Prk_ServiceClaimGroup(NOLOCK) WHERE DownLoadFlag='D'
		AND ServiceCode not in (SELECT  SerCode from ServiceMaster (Nolock)) and UPPER(ServiceOrGoods)='SERVICE INVOICE'
		
		INSERT INTO Errorlog(SlNo,TableName,FieldName,ErrDesc)
		SELECT 1,@Tabname,'Servicecode','Servicecode not in Service Master for the Service Invoice ' + Servicecode  FROM Cn2Cs_Prk_ServiceClaimGroup(NOLOCK) WHERE DownLoadFlag='D' 
		and Servicecode not in (SELECT  SerCode from ServiceMaster(Nolock)) and UPPER(ServiceOrGoods)='SERVICE INVOICE'
		
		
		---Claim Code Validation Check----
		INSERT INTO #AvoidClaimGroup
		SELECT Distinct ServiceCode,ClaimCode from Cn2Cs_Prk_ServiceClaimGroup(NOLOCK) WHERE DownLoadFlag='D'
		AND ClaimCode not in (SELECT  ClmGrpCode from ClaimGroupMaster(Nolock)) 
		
		INSERT INTO Errorlog(SlNo,TableName,FieldName,ErrDesc)
		SELECT 2,@Tabname,'ClaimCode','ClaimCode not in Claim Group Master Master for the Claim Code ' + ClaimCode  FROM Cn2Cs_Prk_ServiceClaimGroup(NOLOCK) WHERE DownLoadFlag='D' 
		AND ClaimCode not in (SELECT  ClmGrpCode from ClaimGroupMaster(Nolock)) 
		
		----ServiceOrGoods Validation Check-----
		INSERT INTO #AvoidClaimGroup
		SELECT Distinct ServiceCode,ClaimCode from Cn2Cs_Prk_ServiceClaimGroup(NOLOCK) WHERE DownLoadFlag='D'
		AND UPPER(ServiceOrGoods) NOT IN ('SERVICE INVOICE','GOODS INVOICE')  and ServiceOrGoods<>''
	
		INSERT INTO Errorlog(SlNo,TableName,FieldName,ErrDesc)
		SELECT 3,@Tabname,'ServiceOrGoods','Service Type Must be either Service Invoice or Goods Invoice for Claim Code ' + ClaimCode  FROM Cn2Cs_Prk_ServiceClaimGroup(NOLOCK)  WHERE DownLoadFlag='D'
		AND UPPER(ServiceOrGoods) NOT IN ('SERVICE INVOICE','GOODS INVOICE') and ServiceOrGoods<>''
		
		-----ServiceOrGoods Empty Check----
		INSERT INTO #AvoidClaimGroup
		SELECT Distinct ServiceCode,ClaimCode from Cn2Cs_Prk_ServiceClaimGroup(NOLOCK) WHERE DownLoadFlag='D'
		and ServiceOrGoods=''
		
		INSERT INTO Errorlog(SlNo,TableName,FieldName,ErrDesc)
		SELECT 4,@Tabname,'ServiceOrGoods','ServiceOrGoods cannot be empty for Claim Code ' + ClaimCode  FROM Cn2Cs_Prk_ServiceClaimGroup(NOLOCK)  WHERE DownLoadFlag='D'
		and Servicetype=''
		
		----GST Tax Validation Check----
		INSERT INTO #AvoidClaimGroup
		SELECT Distinct ServiceCode,ClaimCode from Cn2Cs_Prk_ServiceClaimGroup(NOLOCK) WHERE DownLoadFlag='D'
		AND UPPER(GSTTax) NOT IN ('YES','NO') and ServiceOrGoods<>''
	
		INSERT INTO Errorlog(SlNo,TableName,FieldName,ErrDesc)
		SELECT 5,@Tabname,'GSTTax','GSTTAX Must be either Yes or No for Claim Code ' + ClaimCode  FROM Cn2Cs_Prk_ServiceClaimGroup(NOLOCK)  WHERE DownLoadFlag='D'
		AND UPPER(GSTTax) NOT IN ('YES','NO') and ServiceOrGoods<>''
		
		-----GST Tax Empty Check----
		INSERT INTO #AvoidClaimGroup
		SELECT Distinct ServiceCode,ClaimCode from Cn2Cs_Prk_ServiceClaimGroup(NOLOCK) WHERE DownLoadFlag='D'
		and GSTTax=''
		
		INSERT INTO Errorlog(SlNo,TableName,FieldName,ErrDesc)
		SELECT 6,@Tabname,'GSTTax','GSTTax cannot be empty for Claim Code ' + ClaimCode  FROM Cn2Cs_Prk_ServiceClaimGroup(NOLOCK)  WHERE DownLoadFlag='D'
		and GSTTax=''
		
		----Service Type Validation Check----
		INSERT INTO #AvoidClaimGroup
		SELECT Distinct ServiceCode,ClaimCode from Cn2Cs_Prk_ServiceClaimGroup(NOLOCK) WHERE DownLoadFlag='D'
		AND UPPER(ServiceType) NOT IN ('RETAILER','DISTRIBUTOR','BOTH') and ServiceType<>''
	
		INSERT INTO Errorlog(SlNo,TableName,FieldName,ErrDesc)
		SELECT 7,@Tabname,'ServiceType','ServiceType Must be either Retailer or Distributor Or Both for Claim Code ' + ClaimCode  FROM Cn2Cs_Prk_ServiceClaimGroup(NOLOCK)  WHERE DownLoadFlag='D'
		AND UPPER(ServiceType) NOT IN ('RETAILER','DISTRIBUTOR','BOTH') and ServiceType<>''
		
		-----Service Type Empty Check----
		INSERT INTO #AvoidClaimGroup
		SELECT Distinct ServiceCode,ClaimCode from Cn2Cs_Prk_ServiceClaimGroup(NOLOCK) WHERE DownLoadFlag='D'
		and ServiceType=''
		
		INSERT INTO Errorlog(SlNo,TableName,FieldName,ErrDesc)
		SELECT 8,@Tabname,'ServiceType','ServiceType cannot be empty for Claim Code ' + ClaimCode  FROM Cn2Cs_Prk_ServiceClaimGroup(NOLOCK)  WHERE DownLoadFlag='D'
		and ServiceType=''
		
	
	DECLARE  Cur_SerClaimgroup  CURSOR   
		 For SELECT DISTINCT ISNULL(Servicecode,'') Servicecode,ISNULL(ClaimCode,'') ClaimCode,
		 ISNULL([Servicetype],'') AS [Servicetype],ISNULL([GSTtax],'') AS [GSTtax],ISNULL([ServiceOrGoods],'') AS ServiceOrGoods
    	 FROM Cn2Cs_Prk_ServiceClaimGroup (NOLOCK) WHERE DownLoadFlag='D'
    	 AND ClaimCode Not in (select Distinct ClaimCode from #AvoidClaimGroup)
    	 Open Cur_SerClaimgroup
    	 Fetch next From Cur_SerClaimgroup into @Servicecode,@ClaimCode,@Servicetype,@GSTtax,@ServiceGoods
    	 WHILE @@FETCH_STATUS=0  
    	 BEGIN  
    		
    	SET @Serviceid=0
    	SET @Taxid=0
    	SET @SrType=0
    	SET @SrGoods=0
       	----Service Code -----
    	SET @Serviceid=(SELECT TOP 1 ServiceId from ServiceMaster WHERE UPPER(SerCode)=UPPER(@Servicecode))
    	
    	IF @Serviceid IS NULL
    	BEGIN
    	SET @Serviceid=0
    	END
    	
    	--IF @Serviceid=''
    	--BEGIN
    	--SET @Serviceid=0
    	--END
    	----GST Tax Update----
    	SET @Taxid=(SELECT TOP 1 CtrlValue from ScreenDefaultValues(Nolock) WHERE TransId=108 AND CtrlId=21
    	AND Upper(CtrlDesc)=upper(@GSTtax))
    	
    	IF @Taxid IS NULL
    	BEGIN
    	SET @Taxid=0
    	END
    	
    	--IF @Taxid=''
    	--BEGIN
    	--SET @Taxid=0
    	--END
    	
    	----Service Type Update----
    	SET @SrType=(SELECT TOP 1 CtrlValue from ScreenDefaultValues(Nolock) WHERE TransId=108 AND CtrlId=22
    	AND UPPER(CtrlDesc)=UPPER(@Servicetype))
    	
    	IF @SrType IS NULL
    	BEGIN
    	SET @SrType=0
    	END
    	
    	--IF @SrType=''
    	--BEGIN
    	--SET @SrType=0
    	--END
    	
    	----ServiceOrgoods Update----
    	SET @SrGoods=(SELECT TOP 1 CtrlValue from ScreenDefaultValues(Nolock) WHERE TransId=108 AND CtrlId=20
    	AND Upper(CtrlDesc)=upper(@ServiceGoods))
    	
    	IF @SrGoods IS NULL
    	BEGIN
    	SET @SrGoods=0
    	END
    	
    	--IF @SrGoods=''
    	--BEGIN
    	--SET @SrGoods=0
    	--END
    	
    	UPDATE ClaimGroupMaster SET ServiceId=@Serviceid WHERE UPPER(ClmGrpCode)=UPPER(@ClaimCode)
    	UPDATE ClaimGroupMaster SET GSTTax=@Taxid WHERE UPPER(ClmGrpCode)=UPPER(@ClaimCode)
    	UPDATE ClaimGroupMaster SET ServiceType=@SrType WHERE UPPER(ClmGrpCode)=UPPER(@ClaimCode)
    	UPDATE ClaimGroupMaster SET ServiceOrGoods=@SrGoods WHERE UPPER(ClmGrpCode)=UPPER(@ClaimCode)
    	
UPDATE Cn2Cs_Prk_ServiceClaimGroup SET DownloadFlag='Y' WHERE ServiceCode=@Servicecode and ClaimCode=@ClaimCode and ServiceType=@Servicetype
and GSTTAx=@GSTtax and ServiceOrGoods=@ServiceGoods

FETCH NEXT FROM Cur_SerClaimgroup INTO @Servicecode,@ClaimCode,@Servicetype,@GSTtax,@ServiceGoods
END  
CLOSE Cur_SerClaimgroup  
DEALLOCATE Cur_SerClaimgroup
RETURN
END
GO
DELETE FROM CustomCaptions WHERE TransId = 196 AND CtrlId = 1000 AND SubCtrlId =16
INSERT INTO CustomCaptions
Select 196,1000,16,'PnlMsg-196-1000-16','','Press F4/Double Click to Select','',1,1,1,getdate(),1,getdate(),'','Press F4/Double Click to Select','',1,1
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Cs2Cn_Prk_TransactionWiseGrnTracking' AND XTYPE='U')
DROP TABLE Cs2Cn_Prk_TransactionWiseGrnTracking
GO
CREATE TABLE [dbo].[Cs2Cn_Prk_TransactionWiseGrnTracking](
	[SlNo]         [numeric](38, 0) IDENTITY(1,1) NOT NULL,
	[DistCode]     [nvarchar](50) NULL,
	[TransactionDescription]  [nvarchar](100) NOT NULL,
	[RefId]        [int] NULL,
	[RefNo]        [nvarchar](50) NOT NULL,
	[Refdate]      [datetime] NOT NULL,	
	[ProductCode]  [nvarchar](50) NULL,
	[BatchCode]    [nvarchar](50) NULL,
	[PrdSlno]      [int] NOT NULL,
	[BaseQty]      [int] NULL,
	[FreeQty]      [int] NULL,
	[GrnPrdSlNo]   [int] NULL,
	[GrnQty]       [int] NOT NULL,
	[GrnFreeQty]   [int] NULL,
	[PurRcptRefNo] [nvarchar](100) NOT NULL,
	[GrnDate]      [datetime] NULL,	
	[UploadFlag]   [varchar](2) NULL,
	[SyncId]       [numeric](38, 0) NULL,
	[ServerDate]   [datetime] NULL
) ON [PRIMARY]
GO
IF NOT EXISTS(SELECT SS.NAME FROM SYSOBJECTS S INNER JOIN SYSCOLUMNS SS ON S.id=SS.id WHERE S.XTYPE='U' and SS.NAME='CmpInvNo' and S.NAME='Cs2Cn_Prk_TransactionWiseGrnTracking')
BEGIN
	ALTER Table Cs2Cn_Prk_TransactionWiseGrnTracking Add CmpInvNo Nvarchar(50)
END
GO
UPDATE Cs2Cn_Prk_TransactionWiseGrnTracking SET CmpInvNo='' WHERE CmpInvNo IS Null
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Cs2Cn_TransactionWiseGrnTracking' AND XTYPE='P')
DROP PROCEDURE Proc_Cs2Cn_TransactionWiseGrnTracking
GO
--EXEC Proc_Cs2Cn_TransactionWiseGrnTracking 0,'2017-01-14'
CREATE PROCEDURE [dbo].[Proc_Cs2Cn_TransactionWiseGrnTracking]
(
	@Po_ErrNo INT OUTPUT,
	@ServerDate DATETIME
)
AS
/*********************************
* PROCEDURE		: Proc_Cs2Cn_TransactionWiseGrnTracking
* PURPOSE		: To Extract Bill Wise GRN refernce from CoreStocky to   Console
* CREATED BY	: Raja C
* CREATED DATE	: 05-06-2017
* NOTE			:
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}	
*********************************/
SET NOCOUNT ON
BEGIN	
    SET @Po_ErrNo= 0
	DECLARE @DistCode	As nVarchar(50)
	SELECT @DistCode = DistributorCode FROM Distributor	(NOLOCK)	
	DELETE FROM Cs2Cn_Prk_TransactionWiseGrnTracking WHERE UploadFlag='Y'
	
	INSERT INTO Cs2Cn_Prk_TransactionWiseGrnTracking(DistCode,TransactionDescription,RefId,RefNo,Refdate,ProductCode,BatchCode,PrdSlno,BaseQty,FreeQty,
	GrnPrdSlNo,GrnQty,GrnFreeQty,PurRcptRefNo,GrnDate,UploadFlag,ServerDate)
	SELECT @DistCode,T.TransactionDescription AS  TransactionDescription,A.RefId,A.RefNo AS RefNo,A.Refdate AS Refdate,PrdCCode AS ProductCode,CmpBatCode AS BatchCode ,A.Slno AS PrdSlno,
	A.BaseQty AS BaseQty,A.FreeQty AS FreeQty,A.GrnPrdSlNo AS GrnPrdSlNo,A.GrnQty AS GrnQty,A.GrnFreeQty AS GrnFreeQty,A.PurRcptRefNo AS PurRcptRefNo,A.GrnDate AS GrnDate,'N',@ServerDate
	FROM TransactionWiseGrnTracking A(NOLOCK) INNER JOIN TransactionMaster T(NOLOCK) ON A.Transid =T.TransactionId 
	INNER JOIN Product P(NOLOCK) ON A.Prdid=P.PrdId
	INNER JOIN ProductBatch PB (NOLOCK) ON A.PrdBatid=PB.PrdBatId
	WHERE GSPUpload1 = 0
	
	 Update A SET A.CmpInvNo=B.CmpInvNo From Cs2Cn_Prk_TransactionWiseGrnTracking A (Nolock) Inner Join PurchaseReceipt B (Nolock)On A.PurRcptRefNo=B.PurRcptRefNo ---Added By Mohanakrishna A.B
	
	UPDATE  A  SET GSPUpload1 = 1 FROM TransactionWiseGrnTracking A WHERE EXISTS (SELECT * FROM Cs2Cn_Prk_TransactionWiseGrnTracking B(NOLOCK)
	WHERE A.RefId=B.RefId AND A.RefNo=B.RefNo )
		
END
GO
DELETE FROM HotsearchEditorHd where FormId=511
INSERT INTO HotsearchEditorHd(FormId,FormName,ControlName,SltString,RemainsltString)
SELECT 511,'RateDifferenceClaim','RateDifference','select',
'SELECT RDC.RefNo,RDC.Date,RDC.Status,RDC.CmpId,C.CmpName,RDC.JcmId,J.JcmYr,RDC.FromJcMonth,RDC.ToJcMonth,RDC.TotSpentAmt,RDC.TotNegClaimAmt,RDC.TotClaimAmt,             RDC.RecSpentAmt , RDC.RecNegClaimAmt, RDC.RecClaimAmt,RDC.RateDiffClaimId,
TotSpentAmtGross,TotSpentTaxAmt,TotNegSpentAmtGross,TotNegSpentTaxAmt              
FROM RateDifferenceClaim RDC WITH (NOLOCK),Company C  WITH (NOLOCK),JCMast J WITH (NOLOCK) 
WHERE RDC.CmpId=C.CmpId AND J.JcmId=RDC.JcmId'
GO
DELETE FROM HotsearchEditorHd where FormId=10144
INSERT INTO HotsearchEditorHd(FormId,FormName,ControlName,SltString,RemainsltString)
SELECT 10144,'RateDifferenceClaim','RateDifference','select',
'SELECT RDC.RefNo,RDC.Date,RDC.Status,RDC.CmpId,C.CmpName,RDC.JcmId,J.AcmYr,RDC.FromJcMonth,RDC.ToJcMonth,RDC.TotSpentAmt,RDC.TotNegClaimAmt,  RDC.TotClaimAmt,RDC.RecSpentAmt,RDC.RecNegClaimAmt,RDC.RecClaimAmt,RDC.RateDiffClaimId ,
TotSpentAmtGross,TotSpentTaxAmt,TotNegSpentAmtGross,TotNegSpentTaxAmt 
FROM RateDifferenceClaim RDC WITH (NOLOCK),  Company C  WITH (NOLOCK),ACMaster J WITH (NOLOCK)WHERE RDC.CmpId=C.CmpId AND J.AcmId=RDC.JcmId'
GO
IF EXISTS (SELECT NAME FROM SYSOBJECTS WHERE XTYPE='U' AND NAME='ReturnRateDiffClaimAmt')
DROP TABLE ReturnRateDiffClaimAmt
GO
CREATE TABLE ReturnRateDiffClaimAmt
(
	SalID	 	BigInt,
	SalInvNo 	VarChar(100),
	RtrId		INT,
	RtrName		VarChar(100),
	SpentGross	Numeric(18,2),
	SpentTax	Numeric(18,2),
	Spent	Numeric(18,2),
	NegativeGross Numeric(18,2),
	NegativeTax	Numeric(18,2),
	Negative	Numeric(38,2),	
	RateDiffClaimId INT,
	BillMode		TINYINT,	
	UsrId		INT
)
GO
IF EXISTS (SELECT NAME FROM SYSOBJECTS WHERE XTYPE='P' AND NAME='Proc_ReturnRateDiffClaim')
DROP PROCEDURE Proc_ReturnRateDiffClaim
GO
/*
	EXEC Proc_ReturnRateDiffClaim 1,'2017-05-20','2017-06-05',1,1
	SELECT * FROM ReturnRateDiffClaimAmt order by salid
*/
CREATE PROCEDURE [Proc_ReturnRateDiffClaim]
(
@Pi_ClmId INT,
@Pi_FrmDate DateTime,
@Pi_ToDate DateTime,
@Pi_CmpId INT,
@Pi_UsrID INT
)
AS
BEGIN
/*********************************
* FUNCTION: Proc_ReturnRateDiffClaim
* PURPOSE: Returns the Special Discount Claim
* NOTES: 
* CREATED: Thrinath Kola	12-12-2007
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
*********************************/
	CREATE TABLE #SalesTax
	(
		Salid NUMERIC(36,0),
		PrdSlno INT,
		TaxPerc NUMERIC(36,4),
		TaxValue NumeriC(32,4),
		TaxableAmount NUMERIC(36,4)
	)
	
	CREATE TABLE #ReturnSalesTax
	(
		ReturnId NUMERIC(36,0),
		PrdSlno INT,
		TaxPerc NUMERIC(36,4),
		TaxValue NumeriC(32,4),
		TaxableAmount NUMERIC(36,4)
	)

	CREATE TABLE #ReturnRateDiffClaimAmt
	(
	SalID	 	BigInt,
	SalInvNo 	VarChar(100),
	RtrId		INT,
	RtrName		VarChar(100),
	SpentGross	Numeric(18,2),
	SpentTax	Numeric(18,2),
	Spent	Numeric(18,2),
	NegativeGross Numeric(18,2),
	NegativeTax	Numeric(18,2),
	Negative	Numeric(38,2),	
	RateDiffClaimId INT,
	BillMode		TINYINT,	
	UsrId		INT
	)
		DECLARE @GSTTAX AS INT

		DELETE A FROM ReturnRateDiffClaimAmt A (NOLOCK) WHERE UsrId=@Pi_UsrID

		SELECT @GSTTAX=ISNULL(GSTTax,0) FROM ClaimGroupMaster WHERE ClmGrpCode='CG12'
	
		INSERT INTO #SalesTax(Salid,PrdSlno,TaxPerc,TaxValue,TaxableAmount)
		SELECT S.Salid,PrdSlno,SUM(TaxPerc) as TaxPerc,CASE VatGst WHEN 'VAT' THEN 0 ELSE SUM(TaxPerc)/100 END ,TaxableAmount 
		FROM SalesInvoiceProductTax  S  (NOLOCK) INNER JOIN SalesInvoice SI (NOLOCK) ON S.SalId=SI.Salid
		WHERE  TaxableAmount>0 and DlvSts in (4,5)
		AND SI.SalInvDate  Between @Pi_FrmDate AND @Pi_ToDate
		GROUP BY S.Salid,PrdSlno,TaxableAmount,VatGst ORDER BY Prdslno
		
		SELECT Salid,PrdSlno Into #TaxCess 
		FROM #SalesTax 
		GROUP BY Salid,PrdSlno
		HAVING Count(PrdSlno)>1

		SELECT TT.Salid,TT.PrdSlno, TaxPerc,TaxableAmount INTO #TaxCess1 
		FROM #SalesTax TT
		INNER JOIN #TaxCess T ON T.SalId= TT.Salid and T.PrdSlNo=TT.PrdSlno
		
		DELETE A FROM #SalesTax  A INNER JOIN #TaxCess B ON A.Salid=B.Salid and A.PrdSlno=B.PrdSlno
		
		
		INSERT INTO #ReturnSalesTax(ReturnId,PrdSlno,TaxPerc,TaxValue,TaxableAmount)
		SELECT S.ReturnId,PrdSlno,SUM(TaxPerc) as TaxPerc,CASE VatGst WHEN 'VAT' THEN 0 ELSE SUM(TaxPerc)/100 END,TaxableAmt 
		FROM ReturnProductTax S INNER JOIN ReturnHeader SI ON S.ReturnId=SI.ReturnId
		WHERE  TaxableAmt>0 and SI.Status=0
		AND SI.ReturnDate Between @Pi_FrmDate AND @Pi_ToDate
		GROUP BY S.ReturnId,PrdSlno,TaxableAmt,VatGst ORDER BY PrdSlno
		
		SELECT ReturnId,PrdSlno Into #ReturnTaxCess FROM #ReturnSalesTax 
		GROUP BY ReturnId,PrdSlno
		HAVING Count(PrdSlno)>1
		
		SELECT TT.ReturnId,TT.PrdSlno, TaxPerc,TaxableAmount INTO #ReturnTaxCess1 
		FROM #ReturnSalesTax TT
		INNER JOIN #ReturnTaxCess T ON T.ReturnId= TT.ReturnId and T.PrdSlNo=TT.PrdSlno
		
		DELETE A FROM #ReturnSalesTax  A INNER JOIN #ReturnTaxCess B ON A.ReturnId=B.ReturnId and A.PrdSlno=B.PrdSlno
	
		INSERT INTO #ReturnRateDiffClaimAmt(SalId,SalInvNo,RtrId,RtrName,SpentGross,SpentTax,Spent,NegativeGross,NegativeTax,Negative,RateDiffClaimId,BillMode,UsrId)
		SELECT Bills.SalId,Bills.SalInvNo,Bills.RtrId,Bills.RtrName,(ABS(Bills.Spent)) as SpentGross ,
		CASE @GSTTAX WHEN 0 THEN 0
					 WHEN 1 THEN
					(ABS(Bills.Spent))*(TaxValue) 
					END AS SpentTax,
		CASE @GSTTAX WHEN 0 THEN (ABS(Bills.Spent))
					 WHEN 1 THEN
					(ABS(Bills.Spent))+((ABS(Bills.Spent))*(TaxValue) )
					END AS Spent,			
		(ABS(Bills.Negative)) as NegativeGross,			
		CASE @GSTTAX WHEN 0 THEN 0
					 WHEN 1 THEN			
					(ABS(Bills.Negative))*(TaxValue) 
					 END AS NegativeTax,
		CASE @GSTTAX WHEN 0 THEN (ABS(Bills.Negative))
					 WHEN 1 THEN
					 (ABS(Bills.Negative))+((ABS(Bills.Negative))*(TaxValue) )			
					 END AS Negative,			 
					 RateDiffClaimId,BillMode ,@Pi_UsrID as UsrId
		FROM (
				SELECT  SI.SalId,SI.SalInvNo,SI.RtrId,R.RtrName, 
				(CASE WHEN (SIP.BaseQty*((SIP.PrdUom1EditedSelRate/SIP.Uom1ConvFact) - B.Rate)<0) THEN  SIP.BaseQty*((SIP.PrdUom1EditedSelRate/SIP.Uom1ConvFact)- B.Rate) ELSE 0 END) as Spent, 	
				(CASE WHEN (SIP.BaseQty*((SIP.PrdUom1EditedSelRate/SIP.Uom1ConvFact) - B.Rate)>0) THEN  SIP.BaseQty*((SIP.PrdUom1EditedSelRate/SIP.Uom1ConvFact)- B.Rate) ELSE 0 END) AS Negative,
				1 AS BillMode,ISNULL(TaxValue,0)  as TaxValue,SIP.RateDiffClaimId
				FROM SalesInvoice SI 
				INNER JOIN Retailer R ON SI.RtrId = R.RtrId 
				INNER JOIN SalesInvoiceProduct SIP ON  SIP.SalId = SI.SalId  
				INNER JOIN #SalesTax ST ON ST.Salid=SIP.SalId and ST.Salid=SI.SalId and ST.PrdSlno=SIp.SlNo
				INNER JOIN Product P ON P.PrdId=SIP.PrdId  AND P.CmpId=1 
				INNER JOIN RetailerValueClassMap RVCP ON R.RtrId=RVCP.RtrId 
				INNER JOIN RetailerValueClass RVC ON RVCP.RtrValueClassId=RVC.RtrClassId 
				INNER JOIN PriceDifference B (NOLOCK) ON P.PrdId = B.PrdId and RVC.CtgMainId=B.CtgMainId 
				WHERE ((SIP.PrdUom1EditedSelRate/SIP.Uom1ConvFact)- B.Rate) <> 0 
				AND SI.SalInvDate BETWEEN @Pi_FrmDate AND @Pi_ToDate  AND SIP.RateDiffClaimId IN(0,@Pi_ClmId) AND SI.DlvSts in (4,5) 
		
		) AS Bills 
		UNION ALL 
		SELECT Rtn.ReturnId AS SalId,Rtn.ReturnCode AS SalInvNo,Rtn.RtrId,Rtn.RtrName,
		(ABS(Rtn.Spent)) AS SpentGross,		
		CASE @GSTTAX WHEN 0 THEN 0
					 WHEN 1 THEN
					(ABS(Rtn.Spent))*(TaxValue) 
					END AS SpentTax,
		CASE @GSTTAX WHEN 0 THEN (ABS(Rtn.Spent))
					 WHEN 1 THEN
					(ABS(Rtn.Spent))+((ABS(Rtn.Spent))*(TaxValue) )
					END AS Spent,			
		(ABS(Rtn.Negative)) as NegativeGross,			
		CASE @GSTTAX WHEN 0 THEN 0
					 WHEN 1 THEN			
					(ABS(Rtn.Negative))*(TaxValue) 
					 END AS NegativeTax,
		CASE @GSTTAX WHEN 0 THEN (ABS(Rtn.Negative))
					 WHEN 1 THEN
					 (ABS(Rtn.Negative))+((ABS(Rtn.Negative))*(TaxValue) )			
					 END AS Negative
		,RateDiffClaimId,BillMode ,@Pi_UsrID as UsrId
		
		FROM 
		(
		SELECT  RH.ReturnID,RH.ReturnCode,RH.RtrId,R.RtrName,
		(CASE WHEN RP.BaseQty*(RP.PrdEditSelRte - B.Rate)<0 THEN ABS(RP.BaseQty*(RP.PrdEditSelRte - B.Rate)) ELSE 0 END) AS Spent,
		(CASE WHEN RP.BaseQty*(RP.PrdEditSelRte - B.Rate)>0 THEN ABS(RP.BaseQty*(RP.PrdEditSelRte - B.Rate)) ELSE 0 END) AS Negative,
		2 AS BillMode ,ISNULL(TaxValue,0) as TaxValue,RP.RateDiffClaimId
		FROM ReturnHeader RH 
		INNER JOIN Retailer R ON RH.RtrId=R.RtrId 
		INNER JOIN ReturnProduct RP ON RH.ReturnID=RP.ReturnID 
		LEFT OUTER JOIN #ReturnSalesTax ST ON ST.ReturnID=RH.ReturnID and ST.ReturnID=RP.ReturnID and ST.PrdSlno=RP.SlNo
		INNER JOIN Product P ON P.PrdId=RP.PrdId AND P.CmpId=1 
		INNER JOIN RetailerValueClassMap RVCP ON R.RtrId=RVCP.RtrId 
		INNER JOIN RetailerValueClass RVC ON RVCP.RtrValueClassId=RVC.RtrClassId 
		INNER JOIN PriceDifference B (NOLOCK) ON P.PrdId = B.PrdId and RVC.CtgMainId=B.CtgMainId 
		WHERE (RP.PrdEditSelRte - B.Rate
		)<>0 AND RH.ReturnDate Between @Pi_FrmDate AND @Pi_ToDate AND RP.RateDiffClaimId IN(0,@Pi_ClmId)  AND RH.Status=0
		) AS Rtn 


		INSERT INTO ReturnRateDiffClaimAmt(SalId,SalInvNo,RtrId,RtrName,SpentGross,SpentTax,Spent,NegativeGross,NegativeTax,Negative,RateDiffClaimId,BillMode,UsrId)
		SELECT SalId,SalInvNo,RtrId,RtrName,SUM(SpentGross),SUM(SpentTax),SUM(Spent),SUM(NegativeGross),SUM(NegativeTax),SUM(Negative),RateDiffClaimId,BillMode,UsrID
		FROM #ReturnRateDiffClaimAmt
		GROUP BY SalId,SalInvNo,RtrId,RtrName,RateDiffClaimId,BillMode,UsrID
END
GO
IF EXISTS (SELECT NAME FROM SYSOBJECTS WHERE XTYPE='U' AND NAME='ReturnSplDiscountClaimAmt')
DROP TABLE ReturnSplDiscountClaimAmt
GO
CREATE TABLE ReturnSplDiscountClaimAmt
(
	SalID	 	BigInt,
	SalInvNo 	VarChar(100),
	Status		INT,
	RtrName		VarChar(100),
	SpentAmt	Numeric(38,2),
	SpentTaxAmt Numeric(38,2),
	TotalSpentAmt Numeric(38,2),
	TaxPercent   Numeric(12,2),
	RecAmt		Numeric(38,2),
	Type		TinyINT,
	UsrId		INT
)
GO
IF NOT EXISTS(SELECT * FROM SYSCOLUMNS WHERE NAME='SpentGrossAmt' AND ID IN (SELECT ID FROM SYSOBJECTS WHERE NAME='specialdiscountdetails' AND XTYPE='U'))
BEGIN
	ALTER TABLE specialdiscountdetails ADD SpentGrossAmt NUMERIC(18,2) DEFAULT 0 WITH VALUES
END
GO
IF NOT EXISTS(SELECT * FROM SYSCOLUMNS WHERE NAME='SpentTaxAmt' AND ID IN (SELECT ID FROM SYSOBJECTS WHERE NAME='specialdiscountdetails' AND XTYPE='U'))
BEGIN
	ALTER TABLE specialdiscountdetails ADD SpentTaxAmt NUMERIC(18,2) DEFAULT 0 WITH VALUES
END
GO
IF EXISTS (SELECT NAME FROM SYSOBJECTS WHERE XTYPE='P' AND NAME='Proc_ReturnSplDiscountClaim')
DROP PROCEDURE Proc_ReturnSplDiscountClaim
GO
/*
	EXEC Proc_ReturnSplDiscountClaim 0,'2017-02-03','2017-06-05',1,1
	SELECT * FROM ReturnSplDiscountClaimAmt
*/
CREATE PROCEDURE [Proc_ReturnSplDiscountClaim]
(
@Pi_ClmId INT,
@Pi_FrmDate DateTime,
@Pi_ToDate DateTime,
@Pi_CmpId INT,
@Pi_UsrID INT
)
AS
BEGIN
/*********************************
* FUNCTION: Proc_ReturnSplDiscountClaim
* PURPOSE: Returns the Special Discount Claim
* NOTES: 
* CREATED: Thrinath Kola	12-12-2007
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
*********************************/
	CREATE TABLE #SalesTax
	(
		Salid NUMERIC(36,0),
		PrdSlno INT,
		TaxPerc NUMERIC(36,4),
		TaxValue NumeriC(32,4),
		TaxableAmount NUMERIC(36,4)
	)
	
	CREATE TABLE #ReturnSalesTax
	(
		ReturnId NUMERIC(36,0),
		PrdSlno INT,
		TaxPerc NUMERIC(36,4),
		TaxValue NumeriC(32,4),
		TaxableAmount NUMERIC(36,4)
	)

	DELETE A FROM ReturnSplDiscountClaimAmt A (NOLOCK) WHERE UsrId=@Pi_UsrID


	
	INSERT INTO #SalesTax(Salid,PrdSlno,TaxPerc,TaxValue,TaxableAmount)
	SELECT S.Salid,PrdSlno,SUM(TaxPerc) as TaxPerc,CASE VatGst WHEN 'VAT' THEN 0 ELSE SUM(TaxPerc)/100 END ,TaxableAmount 
	FROM SalesInvoiceProductTax  S  (NOLOCK) INNER JOIN SalesInvoice SI (NOLOCK) ON S.SalId=SI.Salid
	WHERE  TaxableAmount>0 and DlvSts in (4,5)
	AND SI.SalInvDate  Between @Pi_FrmDate AND @Pi_ToDate
	--and SI.SalInvDate Between '2017-02-03' AND '2017-06-03' 
	GROUP BY S.Salid,PrdSlno,TaxableAmount,VatGst ORDER BY Prdslno
	
	SELECT Salid,PrdSlno Into #TaxCess 
	FROM #SalesTax 
	GROUP BY Salid,PrdSlno
	HAVING Count(PrdSlno)>1

	SELECT TT.Salid,TT.PrdSlno, TaxPerc,TaxableAmount INTO #TaxCess1 
	FROM #SalesTax TT
	INNER JOIN #TaxCess T ON T.SalId= TT.Salid and T.PrdSlNo=TT.PrdSlno
	
	DELETE A FROM #SalesTax  A INNER JOIN #TaxCess B ON A.Salid=B.Salid and A.PrdSlno=B.PrdSlno
	
	
	INSERT INTO #ReturnSalesTax(ReturnId,PrdSlno,TaxPerc,TaxValue,TaxableAmount)
	SELECT S.ReturnId,PrdSlno,SUM(TaxPerc) as TaxPerc,CASE VatGst WHEN 'VAT' THEN 0 ELSE SUM(TaxPerc)/100 END,TaxableAmt 
	FROM ReturnProductTax S INNER JOIN ReturnHeader SI ON S.ReturnId=SI.ReturnId
	WHERE  TaxableAmt>0 and SI.Status=0
	AND SI.ReturnDate Between @Pi_FrmDate AND @Pi_ToDate
	GROUP BY S.ReturnId,PrdSlno,TaxableAmt,VatGst ORDER BY PrdSlno
	
	SELECT ReturnId,PrdSlno Into #ReturnTaxCess FROM #ReturnSalesTax 
	GROUP BY ReturnId,PrdSlno
	HAVING Count(PrdSlno)>1
	
	SELECT TT.ReturnId,TT.PrdSlno, TaxPerc,TaxableAmount INTO #ReturnTaxCess1 
	FROM #ReturnSalesTax TT
	INNER JOIN #ReturnTaxCess T ON T.ReturnId= TT.ReturnId and T.PrdSlNo=TT.PrdSlno
	
	DELETE A FROM #ReturnSalesTax  A INNER JOIN #ReturnTaxCess B ON A.ReturnId=B.ReturnId and A.PrdSlno=B.PrdSlno
	

		INSERT INTO ReturnSplDiscountClaimAmt (SalID,SalInvNo,Status,RtrName,SpentAmt,SpentTaxAmt,TotalSpentAmt,TaxPercent,RecAmt,Type,UsrId)
		SELECT A.SalId,A.SalInvno,0 as Status,R.RtrName,
		SUM(PrdSplDiscAmount) as SpentAmt,
		ISNULL(SUM(PrdSplDiscAmount*TaxValue),0), 
		ISNULL(SUM(PrdSplDiscAmount)+SUM(PrdSplDiscAmount*TaxValue),0),
		ISNULL(TaxPerc,0),0 as RecAmt,1,@Pi_UsrID
		FROM SalesInvoice A INNER JOIN SalesInvoiceProduct B 
		ON A.SalId = B.SalId INNER JOIN Retailer R ON A.RtrId = R.RtrId 
		INNER JOIN Product P ON B.PrdId = P.PrdId
		LEFT OUTER JOIN #SalesTax PT ON PT.SalId=B.SalId and PT.SalId=A.SalId and PT.PrdSlNo=B.SlNo  
		where B.SPLDiscClaimId IN (0,@Pi_ClmId) AND P.CmpId = @Pi_CmpId AND 
		A.SalInvDate Between @Pi_FrmDate AND @Pi_ToDate 
		--A.SalInvDate Between '2017-02-03' AND '2017-06-03'
		AND A.Dlvsts in (4,5)
		GROUP BY A.SalId,A.SalInvno,R.RtrName,TaxPerc
		Having SUM(PrdSplDiscAmount) > 0
	
	

		INSERT INTO ReturnSplDiscountClaimAmt (SalID,SalInvNo,Status,RtrName,SpentAmt,SpentTaxAmt,TotalSpentAmt,TaxPercent,RecAmt,Type,UsrId)
		SELECT SI.SalId,SI.SalInvNo,0 as Status,RT.RtrName,
		SUM(Sp.BaseQty * (B.PrdBatDetailValue-SP.PrdUnitSelRate)) as SpentAmt,
		ISNULL(SUM((Sp.BaseQty * (B.PrdBatDetailValue-SP.PrdUnitSelRate))*TaxValue),0),
		ISNULL(SUM(Sp.BaseQty * (B.PrdBatDetailValue-SP.PrdUnitSelRate))+SUM((Sp.BaseQty * (B.PrdBatDetailValue-SP.PrdUnitSelRate))*TaxValue),0),
		ISNULL(TaxPerc,0),
		0.00 as RecAmt,1,@Pi_UsrID
		from SalesInvoice SI INNER JOIN Retailer RT ON SI.RtrId=RT.RtrId 
		INNER JOIN SalesInvoiceProduct SP ON SI.SalID = SP.SalID
		LEFT OUTER JOIN #SalesTax PT ON PT.SalId=SI.SalId and PT.SalId=SP.SalId and PT.PrdSlNo=SP.SlNo 
		INNER JOIN Product PR WITH (NOLOCK) ON SP.PrdId = PR.PrdId 
		INNER JOIN ProductBatch A (NOLOCK) ON A.PrdId = PR.PrdId AND A.PrdBatId = SP.PrdBatID
		INNER JOIN ProductBatchDetails B (NOLOCK) ON A.PrdBatId = B.PrdBatID
		INNER JOIN BatchCreation C (NOLOCK) ON
		C.BatchSeqId = A.BatchSeqId And B.SlNo = C.SlNo And C.SelRte = 1
		AND B.PriceId=SP.PriceId  
		INNER JOIN Contractpricingmaster D on D.ContractId=Sp.splpriceid   
		WHERE 
		SI.SalInvDate Between  @Pi_FrmDate and @Pi_ToDate
		--SI.SalInvDate Between '2017-02-03' AND '2017-06-03'
		AND SI.dlvsts in (4,5) AND SP.SplDiscClaimId IN (0,@Pi_ClmId )
		AND PR.CmpId= @Pi_CmpId  
		GROUP BY SI.SalId,SI.SalInvNo,RT.RtrName,TaxPerc
		Having SUM(Sp.BaseQty * (B.PrdBatDetailValue-SP.PrdUnitSelRate)) > 0

		---Sales Return

		INSERT INTO ReturnSplDiscountClaimAmt (SalID,SalInvNo,Status,RtrName,SpentAmt,SpentTaxAmt,TotalSpentAmt,TaxPercent,RecAmt,Type,UsrId)
		SELECT A.ReturnId,A.ReturnCode,0 as Status,R.RtrName,-1 * SUM(PrdSplDisAmt) as SpentAmt,
		-1 * ISNULL(SUM(PrdSplDisAmt*TaxValue),0),  ISNULL(-1*(SUM(PrdSplDisAmt)+SUM(PrdSplDisAmt*TaxValue)),0),ISNULL(TaxPerc,0),
		0 as RecAmt,2,@Pi_UsrID
		FROM ReturnHeader A 
		INNER JOIN ReturnProduct B 	ON A.ReturnId = B.ReturnId 
		LEFT OUTER JOIN #ReturnSalesTax RS ON  A.ReturnId =RS.ReturnId and RS.ReturnId= B.ReturnId  and RS.PrdSlno=B.Slno
		INNER JOIN Retailer R ON A.RtrId = R.RtrId	 
		INNER JOIN Product P ON B.PrdId = P.PrdId 
		where B.SPLDiscClaimId IN (0,@Pi_ClmId) AND P.CmpId = @Pi_CmpId AND 
		A.ReturnDate Between @Pi_FrmDate AND @Pi_ToDate AND A.Status = 0
		GROUP BY A.ReturnId,A.ReturnCode,R.RtrName,TaxPerc
		Having SUM(PrdSplDisAmt) > 0

		INSERT INTO ReturnSplDiscountClaimAmt (SalID,SalInvNo,Status,RtrName,SpentAmt,SpentTaxAmt,TotalSpentAmt,RecAmt,Type,UsrId)
		SELECT SI.ReturnId,SI.ReturnCode,0 as Status,RT.RtrName,
		-1 * SUM(Sp.BaseQty * (B.PrdBatDetailValue-SP.PrdUnitSelRte)) as SpentAmt,
		ISNULL(-1 * SUM((Sp.BaseQty * (B.PrdBatDetailValue-SP.PrdUnitSelRte))*Taxvalue) ,0)
		-1*(ISNULL(SUM(Sp.BaseQty * (B.PrdBatDetailValue-SP.PrdUnitSelRte)),0) +ISNULL(SUM((Sp.BaseQty * (B.PrdBatDetailValue-SP.PrdUnitSelRte))*Taxvalue) ,0)),
		ISNULL(TaxPerc,0),0.00 as RecAmt,2,@Pi_UsrID
		from ReturnHeader SI 
		INNER JOIN Retailer RT ON SI.RtrId=RT.RtrId 
		INNER JOIN ReturnProduct SP ON SI.ReturnId = SP.ReturnId
		LEFT OUTER JOIN #ReturnSalesTax RS ON  SI.ReturnId =RS.ReturnId and RS.ReturnId= SP.ReturnId  and RS.PrdSlno=SP.Slno
		INNER JOIN Product PR WITH (NOLOCK) ON SP.PrdId = PR.PrdId 
		INNER JOIN ProductBatch A (NOLOCK) ON A.PrdId = PR.PrdId AND A.PrdBatId = SP.PrdBatID
		INNER JOIN ProductBatchDetails B (NOLOCK) ON A.PrdBatId = B.PrdBatID
		INNER JOIN BatchCreation C (NOLOCK) ON
		C.BatchSeqId = A.BatchSeqId And B.SlNo = C.SlNo And C.SelRte = 1
		AND B.PriceId=SP.priceid 
		INNER JOIN Contractpricingmaster D on D.ContractId=Sp.splpriceid   
		where SI.ReturnDate Between @Pi_FrmDate and @Pi_ToDate
		AND SI.Status = 0 AND SP.SplDiscClaimId IN (0,@Pi_ClmId)
		AND PR.CmpId= @Pi_CmpId 
		GROUP BY SI.ReturnId,SI.ReturnCode,RT.RtrName,TaxPerc
		Having SUM(Sp.BaseQty * (B.PrdBatDetailValue-SP.PrdUnitSelRte)) > 0

RETURN
END
GO
IF EXISTS(SELECT 'X' FROM SYSOBJECTS WHERE XTYPE='TF' AND NAME='Fn_ReturnSpecialDiscountClaim')
DROP FUNCTION Fn_ReturnSpecialDiscountClaim
GO
--SELECT * FROM [Fn_ReturnSpecialDiscountClaim]('SDC1700006')
CREATE FUNCTION [Fn_ReturnSpecialDiscountClaim] (@SplRefNo Varchar(50))
RETURNS @TblReturnSpecialDiscountClaimTABLE TABLE
(
	
	SalId	BIGINT,
	BillNumber Varchar(50),
	Status  INT,
	RtrName Varchar(100),
	SpentGrossAmt Numeric(18,2),
	SpentTaxAmt Numeric(18,2),
	SpentAmt Numeric(18,2),
	RecAmt Numeric(18,2),
	duplicate Varchar(100),
	prdid INT,
	iType TINYINT
)
AS
/****************************************************************************
* FUNCTION: Fn_ReturnSpecialDiscountClaim
* PURPOSE: To Return Spldiscount Details
* NOTES:
* CREATED: MURUGAN. R
* DATE: 02/06/2017
* MODIFIED
* DATE         AUTHOR     DESCRIPTION
------------------------------------------------------------------------------
*****************************************************************************/
BEGIN


		INSERT INTO @TblReturnSpecialDiscountClaimTABLE(SalId,BillNumber,Status,RtrName,SpentGrossAmt,SpentTaxAmt,SpentAmt,RecAmt,duplicate,prdid,iType)
		SELECT SDD.SalId,SI.SalInvNo as BillNumber,SDD.Status,RT.RtrName,SDD.SpentGrossAmt,SDD.SpentTaxAmt,SDD.SpentAmt, SDD.RecAmt,'' as duplicate,'' as prdid,iType
		FROM SalesInvoice SI,Retailer RT,SpecialDiscountDetails SDD WITH (NOLOCK)  where
		SI.RtrId=RT.RtrId AND SDD.SalId=SI.SalId AND SDD.SdcRefNo=@SplRefNo
		AND iType = 1 
		UNION  
		SELECT SDD.SalId,SI.ReturnCode as BillNumber,SDD.Status,RT.RtrName,
		SDD.SpentGrossAmt,SDD.SpentTaxAmt,SDD.SpentAmt, SDD.RecAmt,'' as duplicate,'' as prdid,iType
		FROM ReturnHeader SI,Retailer RT,SpecialDiscountDetails SDD WITH (NOLOCK)  where
		SI.RtrId=RT.RtrId AND SDD.SalId=SI.ReturnId AND SDD.SdcRefNo=@SplRefNo
		AND iType = 2

RETURN
END
GO
IF NOT EXISTS(SELECT SS.NAME FROM SYSOBJECTS S INNER JOIN SYSCOLUMNS SS ON S.id=SS.id WHERE S.XTYPE='U' and SS.NAME='GSTTax' and S.NAME='TempSchemeClaimDetails')
BEGIN
	ALTER TABLE TempSchemeClaimDetails ADD GSTTax Numeric(18,6)  DEFAULT 0 WITH VALUES
END
GO
IF NOT EXISTS(SELECT SS.NAME FROM SYSOBJECTS S INNER JOIN SYSCOLUMNS SS ON S.id=SS.id WHERE S.XTYPE='U' and SS.NAME='GSTTax' and S.NAME='ClaimSheetDetail')
BEGIN
	ALTER TABLE ClaimSheetDetail ADD GSTTax Numeric(18,6)  DEFAULT 0 WITH VALUES
END
GO
UPDATE ClaimSheetDetail SET GSTTax=0.00 WHERE GSTTax is Null
GO
DELETE FROM Customcaptions where TransId=16 and CtrlId=7 and SubCtrlId=13
GO
INSERT INTO CustomCaptions(TransId,CtrlId,SubCtrlId,CtrlName,Caption,PnlMsg,MsgBox,LngId,Availability,
LastModBy,LastModDate,AuthId,AuthDate,DefaultCaption,DefaultPnlMsg,DefaultMsgBox,Visibility,Enabled)
SELECT 16,7,13,'sprScheme-16-7-13','Tax Amount','','',1,1,1,GETDATE(),1,GETDATE(),'Tax Amount','','',1,1
GO
IF EXISTS (SELECT '' FROM SYSOBJECTS WHERE NAME = 'Proc_ReturnSchemeClaims' AND XTYPE = 'P')
DROP PROCEDURE Proc_ReturnSchemeClaims
GO
CREATE PROCEDURE Proc_ReturnSchemeClaims
(
	@Pi_ClmGroupId 		INT,
	@Pi_ClmId		INT,
	@Pi_CmpId		INT,
	@Pi_FromDate		DATETIME,
	@Pi_ToDate		DATETIME,
	@Pi_SettleType	INT,
	@Pi_UsrId 		INT,
	@Pi_TransId		INT
)
AS
/*********************************
* PROCEDURE	: Proc_ReturnSchemeClaims
* PURPOSE	: To Return Scheme Claims
* CREATED	: Thrinath
* CREATED DATE	: 04/12/2007
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
	
*********************************/
SET NOCOUNT ON
Begin
DECLARE @SchMst Table
(
	SchId 	INT,
	SchCode	nVarchar(100),
	SchDesc	nVarChar(100),
	SchType INT
)
DECLARE @SchemeDetails TABLE
(
	SalInvNo		nVarChar(100),
	SchId			INT,
	SchCode			nVarchar(100),
	SchDesc			nVarChar(100),
	SlabId			INT,
	DiscountAmt		Numeric(38,6),
	FreeAmt			Numeric(38,6),
	GiftAmt			Numeric(38,6),
	Type			INT,
	GstTax          Numeric(38,6)
)
DECLARE @SchemePrd 	TABLE
(
	SalInvNo		nVarChar(100),
	SchId			INT,
	SlabId			INT, 
	PrdId			INT,
	PrdBatId		INT,
	Combi			nVarChar(100)
)
DECLARE @PriScheme	TABLE
(
	SalInvNo		nVarChar(100),
	SchId			INT,
	SlabId			INT, 
	PrdId			INT,
	PrdBatId		INT,
	PriAmt			Numeric(38,6),
	GSTTax          Numeric(38,6)
)
DECLARE @SchemeDetailsTaxFinal TABLE
(
	SalInvNo		nVarChar(100),
	SchId			INT,
	SlabId			INT,
	GstTax          Numeric(38,6)
)
DECLARE @SchemeDetailsTax	TABLE
(
	SalInvNo		nVarChar(100),
	SchId			INT,
	SlabId			INT, 
	PrdId			INT,
	PrdBatId		INT,
	SlNo            INT,
	GSTTax          Numeric(38,6)
)
DECLARE @PriSchemeTax	TABLE
(
	SalInvNo		nVarChar(100),
	SchId			INT,
	SlabId			INT, 
	PrdId			INT,
	PrdBatId		INT,
	SlNo            INT,
	GSTTax          Numeric(38,6)
)
DECLARE @PriSchemeTaxFinal	TABLE
(
	SalInvNo		nVarChar(100),
	SchId			INT,
	SlabId			INT, 
	PrdId			INT,
	PrdBatId		INT,
	GSTTax          Numeric(38,6)
)
DECLARE @Claimable	Numeric(38,6)
DECLARE @RefCode	nVarChar(100)
DECLARE @Masterid INT
DECLARE @UdcMasterid INT
DECLARE @TaxValidate as INT
SET @TaxValidate=0
IF EXISTS (SELECT 'X' FROM ClaimGroupMaster(Nolock) where ClmGrpId=@Pi_ClmGroupId and GSTTax=1)
 BEGIN
  SET @TaxValidate=1
 END
	SELECT @Claimable = Claimable FROM ClaimNormDefinition 
		WHERE CmpID=@Pi_CmpId AND ClmGrpId=@Pi_ClmGroupId
	SET @Claimable = ISNULL(@Claimable,0)
	INSERT INTO @SchMst(SchId,SchCode,SchDesc,SchType) 
	SELECT SchId,SchCode,SchDsc,SchType FROM SchemeMaster WITH (NOLOCK)
	WHERE CmpId = @Pi_CmpId AND	Claimable = 1 AND ClmRefId = @Pi_ClmGroupId 
	AND SettlementType = (CASE @Pi_SettleType WHEN 0 THEN SettlementType ELSE @Pi_SettleType END)
	IF EXISTS (SELECT Status FROM Configuration WHERE ModuleId = 'SCHEMESTNG14' AND Status = 1 )
	BEGIN
		SELECT @RefCode = Condition FROM Configuration WHERE ModuleId = 'SCHEMESTNG14' AND Status = 1 
		INSERT INTO @SchemePrd (SalInvNo,SchId,SlabId,PrdId,PrdBatId,Combi)
		SELECT B.SalInvno,MIN(A.SchId),E.SlabId,A.PrdId,A.PrdBatId,
			CAST(MIN(A.SchId) as nVarChar(15)) + ' - ' + CAST(E.SlabId as nVarChar(15))
			FROM SalesInvoiceSchemeLineWise A INNER JOIN SalesInvoice B ON A.SalId = B.SalId 
			INNER JOIN @SchMst S ON A.SchId = S.SchId
			INNER JOIN (SELECT Y.SalInvno,X.SchId,X.PrdId,X.PrdBatId,MIN(SlabId) as SlabId 
				FROM SalesInvoiceSchemeLineWise X 
				INNER JOIN SalesInvoice Y ON X.SalId = Y.SalId 
				INNER JOIN @SchMst Z ON X.SchId = Z.SchId
				WHERE Y.DlvSts in (4,5) AND X.SchClmId in (0,@Pi_ClmId) AND Z.SchType <> 5
				AND Y.SalInvDate Between @Pi_FromDate AND @Pi_ToDate
				GROUP BY Y.SalInvno,X.SchId,X.PrdId,X.PrdBatId) AS E ON
			E.SalInvNo = B.SalInvNo AND E.PrdId = A.PrdId AND E.PrdBatId = A.PrdBatId
			AND E.SchId = A.SchId
			WHERE B.DlvSts in (4,5) AND A.SchClmId in (0,@Pi_ClmId) AND S.SchType <> 5
			AND B.SalInvDate Between @Pi_FromDate AND @Pi_ToDate
		GROUP BY B.SalInvno,E.SlabId,A.PrdId,A.PrdBatId		
		
		INSERT INTO  @PriScheme	(SalInvNo,SchId,SlabId,PrdId,PrdBatId,PriAmt,GSTTax)
		SELECT DISTINCT B.SalInvNo,B.SchId,B.SlabId,B.PrdId,B.PrdBatId,
			C.PrdGrossAmount - (C.PrdGrossAmount /(1 +(D.PrdBatDetailValue)/100)),0.00 		
		FROM @SchemePrd B INNER JOIN SalesInvoice A ON A.SalInvNo collate database_default= B.SalInvno collate database_default
			INNER JOIN SalesInvoiceProduct C ON A.SalId = C.SalId
			AND B.PrdId = C.PrdId AND B.PrdBatId = C.PrdBatId
			INNER JOIN ProductBatchDetails D ON D.PrdBatId = C.PrdBatId 
			AND D.DefaultPrice=1 INNER JOIN BatchCreation E ON D.BatchSeqId = E.BatchSeqId
	   		AND E.Slno = D.Slno AND E.RefCode = @RefCode
	   	----Added by Gopi at 31/05/2017----	
	 IF @TaxValidate=1
	  BEGIN
	   	DELETE FROM @PriSchemeTaxFinal
	   	DELETE FROM @PriSchemeTax
	   	
	   	INSERT INTO @PriSchemeTax(SalInvNo,SchId,SlabId,PrdId,PrdBatId,SlNo,GSTTax)
		SELECT DISTINCT B.SalInvNo,B.SchId,B.SlabId,B.PrdId,B.PrdBatId,C.SlNo,
		(C.PrdGrossAmount - (C.PrdGrossAmount /(1 +(D.PrdBatDetailValue)/100))*(F.Taxperc/100))	---Gopi at 27/06/2017	
		FROM @SchemePrd B INNER JOIN SalesInvoice A ON A.SalInvNo collate database_default= B.SalInvno collate database_default
			INNER JOIN SalesInvoiceProduct C ON A.SalId = C.SalId
			AND B.PrdId = C.PrdId AND B.PrdBatId = C.PrdBatId
			INNER JOIN SalesinvoiceProductTax F ON A.SalId=F.SalId and C.SalId=F.SalId
			and C.SlNo=F.PrdSlNo and F.TaxPerc>0.00 
			INNER JOIN ProductBatchDetails D ON D.PrdBatId = C.PrdBatId 
			AND D.DefaultPrice=1 INNER JOIN BatchCreation E ON D.BatchSeqId = E.BatchSeqId
	   		AND E.Slno = D.Slno AND E.RefCode = @RefCode
	   
	   		INSERT INTO @PriSchemeTaxFinal(SalInvNo,SchId,SlabId,PrdId,PrdBatId,GSTTax)
	   		SELECT SalInvNo,SchId,SlabId,PrdId,PrdBatId,SUM(GSTTax) AS GSTTax
	   		FROM @PriSchemeTax GROUP BY SalInvNo,SchId,SlabId,PrdId,PrdBatId
	   	END
	   	-----Till Here --------	
	   		
		INSERT INTO @SchemeDetails (SalInvNo,SchId,SlabId,DiscountAmt,FreeAmt,GiftAmt,SchCode,SchDesc,Type,GstTax)
		SELECT B.SalInvno,A.SchId,A.SlabId,ISNULL(SUM(FlatAmount),0) +  ISNULL(SUM(DiscountPerAmount),0),
			0 as FreeAmt,0 as GiftAmt,SchCode,SchDesc,1,0
			FROM SalesInvoiceSchemeLineWise A INNER JOIN SalesInvoice B ON A.SalId = B.SalId 
			INNER JOIN @SchMst S ON A.SchId = S.SchId
			WHERE DlvSts in (4,5) AND A.SchClmId in (0,@Pi_ClmId) AND S.SchType <> 5
			AND B.SalInvDate Between @Pi_FromDate AND @Pi_ToDate
		GROUP BY B.SalInvno,A.SchId,A.SlabId,SchCode,SchDesc
	IF @TaxValidate=1
	  BEGIN
		----Added by Gopi at 31/05/2017----
		DELETE FROM @SchemeDetailsTax
		DELETE FROM @SchemeDetailsTaxFinal
		
		INSERT INTO @SchemeDetailsTax(SalInvNo,SchId,SlabId,PrdId,PrdBatId,SlNo,GSTTax)
		SELECT B.SalInvno,A.SchId,A.SlabId,A.PrdId,A.PrdBatId,A.Rowid,
		SUM((FlatAmount + DiscountPerAmount)*(C.TaxPerc/100)) ---Gopi at 27/06/2017
		FROM SalesInvoiceSchemeLineWise A INNER JOIN SalesInvoice B ON A.SalId = B.SalId 
			INNER JOIN @SchMst S ON A.SchId = S.SchId
			INNER JOIN SalesInvoiceProductTax C ON C.SalId=A.SalId AND C.SalId=B.SalId
			AND C.PrdSlNo=A.RowId
			WHERE DlvSts in (4,5) AND A.SchClmId in (0,@Pi_ClmId) AND S.SchType <> 5 AND C.TaxPerc>0.00
			AND B.SalInvDate Between @Pi_FromDate AND @Pi_ToDate
		GROUP BY B.SalInvno,A.SchId,A.SlabId,A.PrdId,A.PrdBatId,A.RowId
		
		INSERT INTO @SchemeDetailsTaxFinal(Salinvno,Schid,SlabId,GstTax)
		SELECT Salinvno,Schid,SlabId,SUM(GstTax) as GstTax FROM @SchemeDetailsTax
		GROUP BY Salinvno,Schid,SlabId
		
		UPDATE B SET GstTax=A.GstTax from @SchemeDetailsTaxFinal A INNER JOIN @SchemeDetails B
		ON A.SchId=B.SchId AND A.SalInvNo=B.SalInvNo AND A.SlabId=B.Slabid 
	END
		----Till Here -------
		-- Credit Note Adjustement ---
		INSERT INTO @SchemeDetails (SalInvNo,SchId,SlabId,DiscountAmt,FreeAmt,GiftAmt,SchCode,SchDesc,Type,GstTax)
		SELECT B.SalInvno,A.SchId,0 AS SlabId,ISNULL(SUM(CrNoteAmount),0) ,
			0 as FreeAmt,0 as GiftAmt,S.SchCode,S.SchDesc,1,0
			FROM SalesInvoiceQPSSchemeAdj A INNER JOIN SalesInvoice B ON A.SalId = B.SalId 
			INNER JOIN @SchMst S ON A.SchId = S.SchId
			WHERE DlvSts in (4,5) 
			AND B.SalInvDate Between @Pi_FromDate AND @Pi_ToDate AND S.SchType <> 5
		GROUP BY B.SalInvno,A.SchId,S.SchCode,S.SchDesc
        -- End here 
		UPDATE @SchemeDetails SET DiscountAmt = DiscountAmt - (B.PriAmt) FROM 
			@SchemeDetails A INNER JOIN (SELECT SalInvno,SchId,SlabId,SUM(PriAmt) as PriAmt
				FROM @PriScheme GROUP BY SalInvno,SchId,SlabId) B ON
			A.SalInvNo collate database_default= B.SalInvNo collate database_default AND A.SchId = B.SchId AND
			A.SlabId = B.SlabId 
	IF @TaxValidate=1
	  BEGIN
		----Added by Gopi at 31/05/2017---	
		UPDATE @SchemeDetails SET GstTax = DiscountAmt - (B.PriAmt) FROM 
			@SchemeDetails A INNER JOIN (SELECT SalInvno,SchId,SlabId,SUM(GSTTax) as PriAmt
				FROM @PriSchemeTaxFinal GROUP BY SalInvno,SchId,SlabId) B ON
			A.SalInvNo collate database_default= B.SalInvNo collate database_default AND A.SchId = B.SchId AND
			A.SlabId = B.SlabId 
		END
		----Till Here ----
	END
	ELSE
	BEGIN
		INSERT INTO @SchemeDetails (SalInvNo,SchId,SlabId,DiscountAmt,FreeAmt,GiftAmt,SchCode,SchDesc,Type,GstTax)
		SELECT B.SalInvno,A.SchId,A.SlabId,ISNULL(SUM(FlatAmount),0) +  ISNULL(SUM(DiscountPerAmount),0),
			0 as FreeAmt,0 as GiftAmt,SchCode,SchDesc,1,0
			FROM SalesInvoiceSchemeLineWise A INNER JOIN SalesInvoice B ON A.SalId = B.SalId 
			INNER JOIN @SchMst S ON A.SchId = S.SchId
			WHERE DlvSts in (4,5) AND A.SchClmId in (0,@Pi_ClmId) AND S.SchType <> 5
			AND B.SalInvDate Between @Pi_FromDate AND @Pi_ToDate
		GROUP BY B.SalInvno,A.SchId,A.SlabId,SchCode,SchDesc
	IF @TaxValidate=1
	  BEGIN	
		----Added by Gopi at 31/05/2017----
		DELETE FROM @SchemeDetailsTaxFinal
		DELETE FROM @SchemeDetailsTax
		INSERT INTO @SchemeDetailsTax(SalInvNo,SchId,SlabId,PrdId,PrdBatId,SlNo,GSTTax)
		SELECT B.SalInvno,A.SchId,A.SlabId,A.PrdId,A.PrdBatId,A.Rowid,
		SUM((FlatAmount + DiscountPerAmount)*(C.TaxPerc/100)) ---Gopi at 27/06/2017
		FROM SalesInvoiceSchemeLineWise A INNER JOIN SalesInvoice B ON A.SalId = B.SalId 
			INNER JOIN @SchMst S ON A.SchId = S.SchId
			INNER JOIN SalesInvoiceProductTax C ON C.SalId=A.SalId AND C.SalId=B.SalId
			AND C.PrdSlNo=A.RowId
			WHERE DlvSts in (4,5) AND A.SchClmId in (0,@Pi_ClmId) AND S.SchType <> 5 AND C.TaxPerc>0.00
			AND B.SalInvDate Between @Pi_FromDate AND @Pi_ToDate
		GROUP BY B.SalInvno,A.SchId,A.SlabId,A.PrdId,A.PrdBatId,A.RowId
		
		INSERT INTO @SchemeDetailsTaxFinal(Salinvno,Schid,SlabId,GstTax)
		SELECT Salinvno,Schid,SlabId,SUM(GstTax) as GstTax FROM @SchemeDetailsTax
		GROUP BY Salinvno,Schid,SlabId
		
		UPDATE B SET GstTax=A.GstTax from @SchemeDetailsTaxFinal A INNER JOIN @SchemeDetails B
		ON A.SchId=B.SchId AND A.SalInvNo=B.SalInvNo AND A.SlabId=B.Slabid
	END 
		----Till Here -------
		-- Credit note adjustment ---
		INSERT INTO @SchemeDetails (SalInvNo,SchId,SlabId,DiscountAmt,FreeAmt,GiftAmt,SchCode,SchDesc,Type,GSTTax)
		SELECT B.SalInvno,A.SchId,0 AS SlabId,ISNULL(SUM(CrNoteAmount),0),
			0 as FreeAmt,0 as GiftAmt,S.SchCode,S.SchDesc,1,0
			FROM SalesInvoiceQPSSchemeAdj A INNER JOIN SalesInvoice B ON A.SalId = B.SalId 
			INNER JOIN @SchMst S ON A.SchId = S.SchId
			WHERE DlvSts in (4,5) AND S.SchType <> 5
			AND B.SalInvDate Between @Pi_FromDate AND @Pi_ToDate
		GROUP BY B.SalInvno,A.SchId,S.SchCode,S.SchDesc
       -- End here --
	END
	
	
	INSERT INTO @SchemeDetails (SalInvNo,SchId,SlabId,DiscountAmt,FreeAmt,GiftAmt,SchCode,SchDesc,Type,GSTTax)
	SELECT B.SalInvno,A.SchId,A.SlabId,0 as DiscountAmt,ISNULL(SUM(FreeQty * D.PrdBatDetailValue),0),
		0 as GiftAmt,SchCode,SchDesc,1,0
		FROM SalesInvoiceSchemeDtFreePrd A INNER JOIN SalesInvoice B ON A.SalId = B.SalId
		INNER JOIN ProductBatch C (NOLOCK) ON A.FreePrdId = C.PrdId AND 
		A.FreePrdBatId = C.PrdBatId INNER JOIN ProductBatchDetails D (NOLOCK) ON 
		C.PrdBatId = D.PrdBatId AND A.FreePriceId = D.PriceId INNER JOIN BatchCreation E (NOLOCK)
	        ON E.BatchSeqId = C.BatchSeqId AND D.SlNo = E.SlNo AND E.ClmRte = 1 
		INNER JOIN @SchMst S ON A.SchId = S.SchId
		WHERE DlvSts in (4,5) AND A.SchClmId in (0,@Pi_ClmId) AND S.SchType <> 5
		AND B.SalInvDate Between @Pi_FromDate AND @Pi_ToDate
	GROUP BY B.SalInvno,A.SchId,A.SlabId,SchCode,SchDesc
	
	--Added by Sathishkumar Veeramani 2013/09/06
	INSERT INTO @SchemeDetails (SalInvNo,SchId,SlabId,DiscountAmt,FreeAmt,GiftAmt,SchCode,SchDesc,Type,GstTax)
	SELECT B.SalInvno,A.SchId,A.SlabId,0 as DiscountAmt,ISNULL(SUM(PrdAmount),0),0 AS GiftAmt,SchCode,SchDesc,1,0
		FROM SalesInvoiceSchemeDtFreePrd A INNER JOIN SalesInvoice B ON A.SalId = B.SalId
        INNER JOIN PercentageWiseSchemeFreeProducts C WITH (NOLOCK) ON B.SalId = C.SalId
        AND A.FreePrdId = C.PrdId 
		INNER JOIN @SchMst S ON A.SchId = S.SchId
		WHERE DlvSts in (4,5) AND A.SchClmId in (0,@Pi_ClmId) AND S.SchType = 5
		AND B.SalInvDate Between @Pi_FromDate AND @Pi_ToDate 
		AND C.SalId NOT IN (SELECT SalId FROM ReturnHeader WITH (NOLOCK) WHERE Status = 0 AND InvoiceType = 1 AND ReturnMode = 1)
	GROUP BY B.SalInvno,A.SchId,A.SlabId,SchCode,SchDesc
	--Till Here
	
	INSERT INTO @SchemeDetails (SalInvNo,SchId,SlabId,DiscountAmt,FreeAmt,GiftAmt,SchCode,SchDesc,Type,GstTax)
	SELECT B.SalInvno,A.SchId,A.SlabId,0 as DiscountAmt,0 as FreeAmt,
		ISNULL(SUM(GiftQty * D.PrdBatDetailValue),0),SchCode,SchDesc,1,0
		FROM SalesInvoiceSchemeDtFreePrd A INNER JOIN SalesInvoice B ON A.SalId = B.SalId
		INNER JOIN ProductBatch C (NOLOCK) ON A.GiftPrdId = C.PrdId AND 
		A.GiftPrdBatId = C.PrdBatId INNER JOIN ProductBatchDetails D (NOLOCK) ON 
		C.PrdBatId = D.PrdBatId AND A.GiftPriceId = D.PriceId INNER JOIN BatchCreation E (NOLOCK)
	        ON E.BatchSeqId = C.BatchSeqId AND D.SlNo = E.SlNo AND E.ClmRte = 1 
		INNER JOIN @SchMst S ON A.SchId = S.SchId
		WHERE DlvSts in (4,5) AND A.SchClmId in (0,@Pi_ClmId) AND S.SchType <> 5
		AND B.SalInvDate Between @Pi_FromDate AND @Pi_ToDate
	GROUP BY B.SalInvno,A.SchId,A.SlabId,SchCode,SchDesc
	IF EXISTS (SELECT Status FROM Configuration WHERE ModuleId = 'SCHEMESTNG14' AND Status = 1 )
	BEGIN
		SELECT @RefCode = Condition FROM Configuration WHERE ModuleId = 'SCHEMESTNG14' AND Status = 1 
		DELETE FROM @SchemePrd
		DELETE FROM @PriScheme
		INSERT INTO @SchemePrd (SalInvNo,SchId,SlabId,PrdId,PrdBatId,Combi)
		SELECT B.ReturnCode,MIN(A.SchId),E.SlabId,A.PrdId,A.PrdBatId,
			CAST(MIN(A.SchId) as nVarChar(15)) + ' - ' + CAST(E.SlabId as nVarChar(15))
			FROM ReturnSchemeLineDt A INNER JOIN ReturnHeader B ON A.ReturnId = B.ReturnId  
			INNER JOIN @SchMst S ON A.SchId = S.SchId
			INNER JOIN (SELECT Y.ReturnCode,X.SchId,X.PrdId,X.PrdBatId,MIN(SlabId) as SlabId 
				FROM ReturnSchemeLineDt X 
				INNER JOIN ReturnHeader Y ON X.ReturnId = Y.ReturnId 
				INNER JOIN @SchMst Z ON X.SchId = Z.SchId
				WHERE Y.Status = 0 AND X.SchClmId in (0,@Pi_ClmId) AND Z.SchType <> 5
				AND Y.ReturnDate Between @Pi_FromDate AND @Pi_ToDate
				GROUP BY Y.ReturnCode,X.SchId,X.PrdId,X.PrdBatId) AS E ON
			E.ReturnCode = B.ReturnCode AND E.PrdId = A.PrdId AND E.PrdBatId = A.PrdBatId
			AND E.SchId = A.SchId
			WHERE B.Status = 0 AND A.SchClmId in (0,@Pi_ClmId) AND S.SchType <> 5
			AND B.ReturnDate Between @Pi_FromDate AND @Pi_ToDate
		GROUP BY B.ReturnCode,E.SlabId,A.PrdId,A.PrdBatId		
		INSERT INTO  @PriScheme	(SalInvNo,SchId,SlabId,PrdId,PrdBatId,PriAmt)
		SELECT DISTINCT B.SalInvNo,B.SchId,B.SlabId,B.PrdId,B.PrdBatId,
			C.PrdActualGross - (C.PrdActualGross /(1 +(D.PrdBatDetailValue)/100)) 		
		FROM @SchemePrd B INNER JOIN ReturnHeader A ON A.ReturnCode collate database_default= B.SalInvno collate database_default
			INNER JOIN ReturnProduct C ON A.ReturnId = C.ReturnId 
			AND B.PrdId = C.PrdId AND B.PrdBatId = C.PrdBatId
			INNER JOIN ProductBatchDetails D ON D.PrdBatId = C.PrdBatId 
			AND D.DefaultPrice=1 INNER JOIN BatchCreation E ON D.BatchSeqId = E.BatchSeqId
	   		AND E.Slno = D.Slno AND E.RefCode = @RefCode
	 IF @TaxValidate=1
	  BEGIN  		
	   	----Added by Gopi at 31/05/2017----	
	   	DELETE FROM @PriSchemeTaxFinal
	   	DELETE FROM @PriSchemeTax
	   	
	   	INSERT INTO @PriSchemeTax(SalInvNo,SchId,SlabId,PrdId,PrdBatId,SlNo,GSTTax)	
	   	SELECT DISTINCT B.SalInvNo,B.SchId,B.SlabId,B.PrdId,B.PrdBatId,C.SlNO,
			(C.PrdActualGross - (C.PrdActualGross /(1 +(D.PrdBatDetailValue)/100))*(F.TaxPerc/100)) ---Gopi at 27/06/2017			
		FROM @SchemePrd B INNER JOIN ReturnHeader A ON A.ReturnCode collate database_default= B.SalInvno collate database_default
			INNER JOIN ReturnProduct C ON A.ReturnId = C.ReturnId 
			AND B.PrdId = C.PrdId AND B.PrdBatId = C.PrdBatId
			INNER JOIN ReturnProductTax F ON F.ReturnId=A.ReturnID AND F.ReturnId=C.ReturnID
			AND F.PrdSlno=C.Slno  AND F.TaxPerc>0.00
			INNER JOIN ProductBatchDetails D ON D.PrdBatId = C.PrdBatId 
			AND D.DefaultPrice=1 INNER JOIN BatchCreation E ON D.BatchSeqId = E.BatchSeqId
	   		AND E.Slno = D.Slno AND E.RefCode = @RefCode
	   	
	   		INSERT INTO @PriSchemeTaxFinal(SalInvNo,SchId,SlabId,PrdId,PrdBatId,GSTTax)
	   		SELECT SalInvNo,SchId,SlabId,PrdId,PrdBatId,SUM(GSTTax) AS GSTTax
	   		FROM @PriSchemeTax GROUP BY SalInvNo,SchId,SlabId,PrdId,PrdBatId
	   	END
	   	-----Till Here --------	
	   		
		INSERT INTO @SchemeDetails (SalInvNo,SchId,SlabId,DiscountAmt,FreeAmt,GiftAmt,SchCode,SchDesc,Type,GstTax)
		SELECT B.ReturnCode,A.SchId,A.SlabId,((ISNULL(SUM(ReturnFlatAmount),0) + 
			ISNULL(SUM(ReturnDiscountPerAmount),0)))*(-1),0 as FreeAmt,0 as GiftAmt,SchCode,SchDesc,1,0
			FROM ReturnSchemeLineDt A INNER JOIN ReturnHeader B ON A.ReturnId = B.ReturnId 
			INNER JOIN @SchMst S ON A.SchId = S.SchId
			WHERE B.Status = 0 AND A.SchClmId in (0,@Pi_ClmId) AND S.SchType <> 5
			AND B.ReturnDate Between @Pi_FromDate AND @Pi_ToDate
		GROUP BY B.ReturnCode,A.SchId,A.SlabId,SchCode,SchDesc
			----Added by Gopi at 31/05/2017----
	IF @TaxValidate=1
	  BEGIN
		DELETE FROM @SchemeDetailsTaxFinal
		DELETE FROM @SchemeDetailsTax
		
		INSERT INTO @SchemeDetailsTax(SalInvNo,SchId,SlabId,PrdId,PrdBatId,SlNo,GSTTax)
		SELECT B.ReturnCode,A.SchId,A.SlabId,A.Prdid,A.Prdbatid,A.RowId,
		Sum((ReturnFlatAmount + ReturnDiscountPerAmount)*(C.TaxPerc/100))
			FROM ReturnSchemeLineDt A INNER JOIN ReturnHeader B ON A.ReturnId = B.ReturnId 
			INNER JOIN @SchMst S ON A.SchId = S.SchId
			INNER JOIN ReturnProductTax C ON C.ReturnId=A.ReturnID AND C.ReturnId=B.ReturnID
			AND C.PrdSlno=A.RowId
			WHERE B.Status = 0 AND A.SchClmId in (0,@Pi_ClmId) AND S.SchType <> 5
			AND C.TaxPerc>0.00
			AND B.ReturnDate Between @Pi_FromDate AND @Pi_ToDate
		GROUP BY B.ReturnCode,A.SchId,A.SlabId,A.Prdid,A.Prdbatid,A.RowId
		
		INSERT INTO @SchemeDetailsTaxFinal(Salinvno,Schid,SlabId,GstTax)
		SELECT Salinvno,Schid,SlabId,-1*SUM(GstTax) as GstTax FROM @SchemeDetailsTax
		GROUP BY Salinvno,Schid,SlabId
		
		UPDATE B SET GstTax=A.GstTax from @SchemeDetailsTaxFinal A INNER JOIN @SchemeDetails B
		ON A.SchId=B.SchId AND A.SalInvNo=B.SalInvNo AND A.SlabId=B.Slabid 
	END
		------Till Here ------
		
		UPDATE @SchemeDetails SET DiscountAmt = DiscountAmt - (B.PriAmt) FROM 
			@SchemeDetails A INNER JOIN (SELECT SalInvno,SchId,SlabId,SUM(PriAmt) as PriAmt
				FROM @PriScheme GROUP BY SalInvno,SchId,SlabId) B ON
			A.SalInvNo collate database_default= B.SalInvNo collate database_default AND A.SchId = B.SchId AND
			A.SlabId = B.SlabId 
	--Added by Gopi at 31/05/2017---
  IF @TaxValidate=1
	  BEGIN
		UPDATE @SchemeDetails SET DiscountAmt = DiscountAmt - (B.PriAmt) FROM 
			@SchemeDetails A INNER JOIN (SELECT SalInvno,SchId,SlabId,SUM(Gsttax) as PriAmt
				FROM @PriSchemeTax GROUP BY SalInvno,SchId,SlabId) B ON
			A.SalInvNo collate database_default= B.SalInvNo collate database_default AND A.SchId = B.SchId AND
			A.SlabId = B.SlabId 
	  END
	---Till Here ----
	END
	ELSE
	BEGIN
		INSERT INTO @SchemeDetails (SalInvNo,SchId,SlabId,DiscountAmt,FreeAmt,GiftAmt,SchCode,SchDesc,Type,GstTax)
		SELECT B.ReturnCode,A.SchId,A.SlabId,((ISNULL(SUM(ReturnFlatAmount),0) + 
			ISNULL(SUM(ReturnDiscountPerAmount),0)))*(-1),0 as FreeAmt,0 as GiftAmt,SchCode,SchDesc,1,0.00
			FROM ReturnSchemeLineDt A INNER JOIN ReturnHeader B ON A.ReturnId = B.ReturnId 
			INNER JOIN @SchMst S ON A.SchId = S.SchId
			WHERE B.Status = 0 AND A.SchClmId in (0,@Pi_ClmId) AND S.SchType <> 5
			AND B.ReturnDate Between @Pi_FromDate AND @Pi_ToDate
		GROUP BY B.ReturnCode,A.SchId,A.SlabId,SchCode,SchDesc
	----Added by Gopi at 31/05/2017----
	IF @TaxValidate=1
	  BEGIN	
		DELETE FROM @SchemeDetailsTaxFinal
		DELETE FROM @SchemeDetailsTax
		
		INSERT INTO @SchemeDetailsTax(SalInvNo,SchId,SlabId,PrdId,PrdBatId,SlNo,GSTTax)
		SELECT B.ReturnCode,A.SchId,A.SlabId,A.Prdid,A.Prdbatid,A.RowId,
		Sum((ReturnFlatAmount + ReturnDiscountPerAmount)*(C.TaxPerc/100))---Gopi at 27/06/2017	
			FROM ReturnSchemeLineDt A INNER JOIN ReturnHeader B ON A.ReturnId = B.ReturnId 
			INNER JOIN @SchMst S ON A.SchId = S.SchId
			INNER JOIN ReturnProductTax C ON C.ReturnId=A.ReturnID AND C.ReturnId=B.ReturnID
			AND C.PrdSlno=A.RowId
			WHERE B.Status = 0 AND A.SchClmId in (0,@Pi_ClmId) AND S.SchType <> 5
			AND C.TaxPerc>0.00
			AND B.ReturnDate Between @Pi_FromDate AND @Pi_ToDate
		GROUP BY B.ReturnCode,A.SchId,A.SlabId,A.Prdid,A.Prdbatid,A.RowId
		
		INSERT INTO @SchemeDetailsTaxFinal(Salinvno,Schid,SlabId,GstTax)
		SELECT Salinvno,Schid,SlabId,-1*SUM(GstTax) as GstTax FROM @SchemeDetailsTax
		GROUP BY Salinvno,Schid,SlabId
		
		UPDATE B SET GstTax=A.GstTax from @SchemeDetailsTaxFinal A INNER JOIN @SchemeDetails B
		ON A.SchId=B.SchId AND A.SalInvNo=B.SalInvNo AND A.SlabId=B.Slabid 
	END
		------Till Here ------
	END
			--select DiscountAmt from @SchemeDetails	
	INSERT INTO @SchemeDetails (SalInvNo,SchId,SlabId,DiscountAmt,FreeAmt,GiftAmt,SchCode,SchDesc,Type,GstTax)
	SELECT B.ReturnCode,A.SchId,A.SlabId,0 as DiscountAmt,
		ISNULL(SUM(ReturnFreeQty * D.PrdBatDetailValue),0)*(-1),0 as GiftAmt,SchCode,SchDesc,1,0
		FROM ReturnSchemeFreePrdDt A INNER JOIN ReturnHeader B ON A.ReturnId = B.ReturnId 
		INNER JOIN ProductBatch C (NOLOCK) ON A.FreePrdId = C.PrdId AND 
		A.FreePrdBatId = C.PrdBatId INNER JOIN ProductBatchDetails D (NOLOCK) ON 
		C.PrdBatId = D.PrdBatId AND A.FreePriceId = D.PriceId INNER JOIN BatchCreation E (NOLOCK)
	        ON E.BatchSeqId = C.BatchSeqId AND D.SlNo = E.SlNo AND E.ClmRte = 1 
		INNER JOIN @SchMst S ON A.SchId = S.SchId
		WHERE B.Status = 0 AND A.SchClmId in (0,@Pi_ClmId) AND S.SchType <> 5
		AND B.ReturnDate Between @Pi_FromDate AND @Pi_ToDate
	GROUP BY B.ReturnCode,A.SchId,A.SlabId,SchCode,SchDesc
	
	INSERT INTO @SchemeDetails (SalInvNo,SchId,SlabId,DiscountAmt,FreeAmt,GiftAmt,SchCode,SchDesc,Type,GstTax)
	SELECT B.ReturnCode,A.SchId,A.SlabId,0 as DiscountAmt,0 as FreeAmt,
		ISNULL(SUM(ReturnGiftQty * D.PrdBatDetailValue),0)*(-1),SchCode,SchDesc,1,0
		FROM ReturnSchemeFreePrdDt A INNER JOIN ReturnHeader B ON A.ReturnId = B.ReturnId 
		INNER JOIN ProductBatch C (NOLOCK) ON A.GiftPrdId = C.PrdId AND 
		A.GiftPrdBatId = C.PrdBatId INNER JOIN ProductBatchDetails D (NOLOCK) ON 
		C.PrdBatId = D.PrdBatId AND A.GiftPriceId = D.PriceId INNER JOIN BatchCreation E (NOLOCK)
	        ON E.BatchSeqId = C.BatchSeqId AND D.SlNo = E.SlNo AND E.ClmRte = 1 
		INNER JOIN @SchMst S ON A.SchId = S.SchId
		WHERE B.Status = 0 AND A.SchClmId in (0,@Pi_ClmId) AND S.SchType <> 5
		AND B.ReturnDate Between @Pi_FromDate AND @Pi_ToDate
	GROUP BY B.ReturnCode,A.SchId,A.SlabId,SchCode,SchDesc
	
	--INSERT INTO @SchemeDetails (SalInvNo,SchId,SlabId,DiscountAmt,FreeAmt,GiftAmt,SchCode,SchDesc,Type)
	--SELECT B.SalInvno,A.SchId,1 as SlabId,ISNULL(SUM(AdjAmt),0),0 as FreeAmt,0 as GiftAmt,SchCode,SchDesc,2
	--	FROM SalesInvoiceWindowDisplay A 
	--	INNER JOIN SalesInvoice B ON A.SalId = B.SalId 
	--	INNER JOIN @SchMst S ON A.SchId = S.SchId
	--	WHERE DlvSts in (4,5) AND A.SchClmId in (0,@Pi_ClmId) AND S.SchType <> 5
	--	AND B.SalInvDate Between @Pi_FromDate AND @Pi_ToDate
	--GROUP BY B.SalInvno,A.SchId,SchCode,SchDesc
	
	INSERT INTO @SchemeDetails (SalInvNo,SchId,SlabId,DiscountAmt,FreeAmt,GiftAmt,SchCode,SchDesc,Type,GstTax)
	SELECT B.ChqDisRefNo,A.TransId,1 as SlaId,ISNULL(SUM(Amount),0),
		0 as FreeAmt,0 as GiftAmt,SchCode,SchDesc,3,0 
		FROM ChequeDisbursalMaster A 
		INNER JOIN ChequeDisbursalDetails B ON A.ChqDisRefNo = B.ChqDisRefNo 
		INNER JOIN @SchMst S ON A.TransId = S.SchId
		WHERE TransType = 1 AND S.SchType <> 5 AND A.ChqDisDate Between @Pi_FromDate AND @Pi_ToDate
		AND A.SchClmId in (0,@Pi_ClmId)
	GROUP BY B.ChqDisRefNo,A.TransId,SchCode,SchDesc
-- FOR Point Based Schemes
	DELETE FROM @SchMst
	INSERT INTO @SchMst(SchId,SchCode,SchDesc) 
	SELECT PntRedSchId,PntRedSchCode,[Description]
 		FROM PointRedemptionMaster WHERE CmpId = @Pi_CmpId AND
		Claimable = 1 AND ClmRefId = @Pi_ClmGroupId
	INSERT INTO @SchemeDetails (SalInvNo,SchId,SlabId,DiscountAmt,FreeAmt,GiftAmt,SchCode,SchDesc,Type,GstTax)
	SELECT A.PntRedRefNo,PntRedSchId,SlabId,ISNULL(SUM(CrAmt),0),0 as FreeAmt,0 As GiftAmt,
		SchCode,SchDesc,4,0
		FROM PntRetSchemeHD A INNER JOIN PntRetSchemeDt B
		ON A.PntRedRefNo = B.PntRedRefNo
		INNER JOIN @SchMst S ON A.PntRedSchId = S.SchId
		WHERE A.Status = 1 AND A.TransDate Between @Pi_FromDate AND @Pi_ToDate
		AND CrAmt>0 AND B.SchClmId in (0,@Pi_ClmId)
	GROUP BY A.PntRedRefNo,PntRedSchId,SlabId,SchCode,SchDesc
	INSERT INTO @SchemeDetails (SalInvNo,SchId,SlabId,DiscountAmt,FreeAmt,GiftAmt,SchCode,SchDesc,Type,GstTax)
	SELECT A.PntRedRefNo,PntRedSchId,SlabId,0 as DiscountAmt,ISNULL(SUM(Qty * D.PrdBatDetailValue),0),
		0 as GiftAmt,SchCode,SchDesc,4,0
		FROM PntRetSchemeDt A INNER JOIN PntRetSchemeHD B ON A.PntRedRefNo = B.PntRedRefNo
		INNER JOIN ProductBatch C (NOLOCK) ON A.PrdId = C.PrdId AND 
		A.PrdBatId = C.PrdBatId INNER JOIN ProductBatchDetails D (NOLOCK) ON 
		C.PrdBatId = D.PrdBatId AND A.PriceId = D.PriceId INNER JOIN BatchCreation E (NOLOCK)
	        ON E.BatchSeqId = C.BatchSeqId AND D.SlNo = E.SlNo AND E.ClmRte = 1 
		INNER JOIN @SchMst S ON B.PntRedSchId = S.SchId
		WHERE B.Status = 1 AND B.TransDate Between @Pi_FromDate AND @Pi_ToDate
		AND CrAmt=0 AND A.Type=1 AND A.SchClmId in (0,@Pi_ClmId)
	GROUP BY A.PntRedRefNo,PntRedSchId,SlabId,SchCode,SchDesc
	INSERT INTO @SchemeDetails (SalInvNo,SchId,SlabId,DiscountAmt,FreeAmt,GiftAmt,SchCode,SchDesc,Type,GstTax)
	SELECT A.PntRedRefNo,PntRedSchId,SlabId,0 as DiscountAmt,0 as FreeAmt,
		ISNULL(SUM(Qty * D.PrdBatDetailValue),0) as GiftAmt,SchCode,SchDesc,4,0
		FROM PntRetSchemeDt A INNER JOIN PntRetSchemeHD B ON A.PntRedRefNo = B.PntRedRefNo
		INNER JOIN ProductBatch C (NOLOCK) ON A.PrdId = C.PrdId AND 
		A.PrdBatId = C.PrdBatId INNER JOIN ProductBatchDetails D (NOLOCK) ON 
		C.PrdBatId = D.PrdBatId AND A.PriceId = D.PriceId INNER JOIN BatchCreation E (NOLOCK)
	        ON E.BatchSeqId = C.BatchSeqId AND D.SlNo = E.SlNo AND E.ClmRte = 1 
		INNER JOIN @SchMst S ON B.PntRedSchId = S.SchId
		WHERE B.Status = 1 AND B.TransDate Between @Pi_FromDate AND @Pi_ToDate
		AND CrAmt=0 AND A.Type=2 AND A.SchClmId in (0,@Pi_ClmId)
	GROUP BY A.PntRedRefNo,PntRedSchId,SlabId,SchCode,SchDesc
--For Coupon Scheme
	DELETE FROM @SchMst
	INSERT INTO @SchMst(SchId,SchCode,SchDesc) 
	SELECT B.CouponDenomId,B.CouponDenomRefNo,A.CouponDefDescription
 		FROM CouponDefinitionHd A INNER JOIN CouponDenomHd B ON
		A.CouponDefId = B.CouponDefId WHERE A.CmpId = @Pi_CmpId AND 
		A.CouponDefClaimable = 1 AND A.CouponDefClaimGroupID = @Pi_ClmGroupId
	INSERT INTO @SchemeDetails (SalInvNo,SchId,SlabId,DiscountAmt,FreeAmt,GiftAmt,SchCode,SchDesc,Type,GstTax)
	SELECT A.CpnRedCode,A.CouponDenomId,B.SlabId,ISNULL(SUM(CrAmt),0),0 as FreeAmt,0 As GiftAmt,
		SchCode,SchDesc,5,0
		FROM CouponRedHd A INNER JOIN CouponRedOtherDt B
		ON A.CpnRefId = B.CpnRefId
		INNER JOIN @SchMst S ON A.CouponDenomId = S.SchId
		WHERE A.Status = 1 AND A.CpnRedDate Between @Pi_FromDate AND @Pi_ToDate
		AND CrAmt>0 AND B.SchClmId in (0,@Pi_ClmId)
	GROUP BY A.CpnRedCode,A.CouponDenomId,B.SlabId,SchCode,SchDesc
	INSERT INTO @SchemeDetails (SalInvNo,SchId,SlabId,DiscountAmt,FreeAmt,GiftAmt,SchCode,SchDesc,Type,GSTTax)
	SELECT B.CpnRedCode,B.CouponDenomId,A.SlabId,0 as DiscountAmt,ISNULL(SUM(Qty * D.PrdBatDetailValue),0),
		0 as GiftAmt,SchCode,SchDesc,5,0
		FROM CouponRedProducts A INNER JOIN CouponRedHd B ON A.CpnRefId = B.CpnRefId
		INNER JOIN ProductBatch C (NOLOCK) ON A.PrdId = C.PrdId AND 
		A.PrdBatId = C.PrdBatId INNER JOIN ProductBatchDetails D (NOLOCK) ON 
		C.PrdBatId = D.PrdBatId AND A.PriceId = D.PriceId INNER JOIN BatchCreation E (NOLOCK)
	        ON E.BatchSeqId = C.BatchSeqId AND D.SlNo = E.SlNo AND E.ClmRte = 1 
		INNER JOIN @SchMst S ON B.CouponDenomId = S.SchId
		INNER JOIN Product P ON P.PrdId = A.PrdId AND P.PrdId = C.PrdId AND PrdType <> 4
		WHERE B.Status = 1 AND B.CpnRedDate Between @Pi_FromDate AND @Pi_ToDate
		AND A.SchClmId in (0,@Pi_ClmId)
	GROUP BY B.CpnRedCode,B.CouponDenomId,A.SlabId,SchCode,SchDesc
	INSERT INTO @SchemeDetails (SalInvNo,SchId,SlabId,DiscountAmt,FreeAmt,GiftAmt,SchCode,SchDesc,Type,GstTax)
	SELECT B.CpnRedCode,B.CouponDenomId,A.SlabId,0 as DiscountAmt,0 as FreeAmt,
		ISNULL(SUM(Qty * D.PrdBatDetailValue),0) as GiftAmt,SchCode,SchDesc,5,0
		FROM CouponRedProducts A INNER JOIN CouponRedHd B ON A.CpnRefId = B.CpnRefId
		INNER JOIN ProductBatch C (NOLOCK) ON A.PrdId = C.PrdId AND 
		A.PrdBatId = C.PrdBatId INNER JOIN ProductBatchDetails D (NOLOCK) ON 
		C.PrdBatId = D.PrdBatId AND A.PriceId = D.PriceId INNER JOIN BatchCreation E (NOLOCK)
	        ON E.BatchSeqId = C.BatchSeqId AND D.SlNo = E.SlNo AND E.ClmRte = 1 
		INNER JOIN @SchMst S ON B.CouponDenomId = S.SchId
		INNER JOIN Product P ON P.PrdId = A.PrdId AND P.PrdId = C.PrdId AND PrdType =4
		WHERE B.Status = 1 AND B.CpnRedDate Between @Pi_FromDate AND @Pi_ToDate
		AND A.SchClmId in (0,@Pi_ClmId)
	GROUP BY B.CpnRedCode,B.CouponDenomId,A.SlabId,SchCode,SchDesc
	DELETE FROM TempSchemeClaimDetails WHERE Usrid = @Pi_UsrId AND TransID = @Pi_TransId
--	INSERT INTO TempSchemeClaimDetails (SalInvNo,SchId,SchCode,SchDesc,SlabId,Selected,DiscountAmt,
--		FreeAmt,GiftAmt,TotSpent,Claimable,ClaimableAmt,RecomAmount,RecAmount,DBCRSelection,
--		StatusDesc,Type,Usrid,TransID)
--	SELECT SalInvNo,SchId,SchCode,SchDesc,SlabId,0 as Selected,
--		Convert(Numeric(38,2),Sum(DiscountAmt)) ,
--		Convert(Numeric(38,2),sum(FreeAmt)) ,
--		Convert(Numeric(38,2),Sum(GiftAmt)), 
--		Convert(Numeric(38,2),Sum((DiscountAmt + FreeAmt + GiftAmt))) ,
--		ISNULL(@Claimable,0) , 0.00 , 0 , 0  , 0 ,'Cancelled', Type, @Pi_UsrId,@Pi_TransId
--		FROM @SchemeDetails
--	GROUP BY SalInvNo,SchId,SchCode,SchDesc,SlabId,Type
    UPDATE @SchemeDetails SET GstTax=0.00 where GstTax Is Null
	INSERT INTO TempSchemeClaimDetails (SalInvNo,SchId,SchCode,CmpSchCode,SchDesc,SlabId,Selected,DiscountAmt,
		FreeAmt,GiftAmt,TotSpent,Claimable,ClaimableAmt,RecomAmount,RecAmount,DBCRSelection,
		StatusDesc,Type,Usrid,TransID,GSTTax)
	SELECT SD.SalInvNo,SD.SchId,SD.SchCode,SM.CmpSchCode,SD.SchDesc,SD.SlabId,0 as Selected,
		Convert(Numeric(38,2),Sum(DiscountAmt)) ,
		Convert(Numeric(38,2),sum(FreeAmt)) ,
		Convert(Numeric(38,2),Sum(GiftAmt)), 
		Convert(Numeric(38,2),Sum((DiscountAmt + FreeAmt + GiftAmt))) ,
		ISNULL(@Claimable,0) , 0.00 , 0 , 0  , 0 ,'Cancelled', Type, @Pi_UsrId,@Pi_TransId,SUM(GstTax)
		FROM @SchemeDetails SD,SchemeMaster SM
	WHERE SD.SchId=SM.SchId 
	GROUP BY SD.SalInvNo,SD.SchId,SD.SchCode,SM.CmpSchCode,SD.SchDesc,SD.SlabId,Type	
END
GO
IF EXISTS (SELECT * FROM Sysobjects Where Name='Fn_RetrunClaimSchemeDetails' and XTYPE IN ('TF','FN'))
DROP FUNCTION Fn_RetrunClaimSchemeDetails
GO
CREATE FUNCTION Fn_RetrunClaimSchemeDetails(@Pi_ClaimGrpId AS INT,@Pi_CmpId AS INT,@Pi_FromDate AS DATETIME,@Pi_ToDate AS DATETIME,
@Pi_ClaimCode AS INT,@Pi_UsrId AS INT,@Pi_TransId AS INT) RETURNS
@RetrunClaimDetails TABLE
(
[Reference] NVARCHAR(200),
[SchDesc]  NVARCHAR(800),
[Select] INT,
[Discount Value] NUMERIC(38,6),
[Free Product Value] NUMERIC(38,6),
[Gift Product Value] NUMERIC(38,6),
[Total Spent Amount] NUMERIC(36,6),
[GsTTax] NUMERIC(38,6),
[% Claimable] NUMERIC(36,6),
[Claimable Amount] NUMERIC(36,6),
[Recommended Amount] NUMERIC(36,6),
[Received Amount] NUMERIC(36,6),
[Db/Cr Note Selection] INT,
[Status] NVARCHAR(100),
[Remarks] NVARCHAR(500)
)
/*********************************	
* FUNCTION: Fn_RetrunClaimDetails
* PURPOSE: Returns Claim Details
* NOTES:
* CREATED: Sathishkumar Veeramani on 08-04-2013
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
*
*********************************/
AS
BEGIN

        INSERT INTO @RetrunClaimDetails ([Reference],[SchDesc],
        [Select],[Discount Value],[Free Product Value],[Gift Product Value],
        [Total Spent Amount],[GsTTax],[% Claimable],[Claimable Amount],[Recommended Amount],
        [Received Amount],[Db/Cr Note Selection],[Status],[Remarks])
        SELECT SchCode as 'Reference',
		(CASE LEN(ISNULL(CmpSchCode,'')) WHEN 0 THEN ISNULL(SchCode,'')+' - '+SchDesc ELSE ISNULL(CmpSchCode,'')+' -'+SchDesc END) AS SchDesc,
		Selected as [Select],ISNULL(SUM([DiscountAmt]),0) as 'Discount Value',
		ISNULL(SUM([FreeAmt]),0) as 'Free Product Value',ISNULL(SUM([GiftAmt]),0) as 'Gift Product Value',
		ISNULL(SUM([TotSpent]),0) as 'Total Spent Amount',ISNULL(SUM([GSTTax]),0) as 'GSTTax',
		Claimable as '% Claimable', 
		0.00 as 'Claimable Amount' , 0 'Recommended Amount' ,0 'Received Amount' , 
		0 AS 'Db/Cr Note Selection','Cancelled' as 'Status','' AS Remarks
		FROM TempSchemeClaimDetails WHERE Usrid = @Pi_UsrId AND TransID = @Pi_TransId 
		GROUP BY  SchCode,CmpSchCode,SchDesc,Selected,Claimable
 
RETURN
END
GO
--Added By kishore
DELETE FROM HotSearchEditorHd WHERE FormId = 247
INSERT INTO HotSearchEditorHd([FormId],[FormName],[ControlName],[SltString],[RemainsltString]) 
select 247,'Claim Top Sheet','ClaimGroup','select','SELECT ClmGrpId,ClmGrpCode,ClmGrpName   
 FROM ClaimGroupMaster WHERE ServiceOrGoods = 2 AND ServiceType = 2 AND CmpId in (''vFParam'',0)'
 GO
DELETE FROM HotSearchEditorHd WHERE FormId = 10028
INSERT INTO HotSearchEditorHd([FormId],[FormName],[ControlName],[SltString],[RemainsltString]) VALUES 
(10028,'Claim Top Sheet','ClaimGroup','select','SELECT ClmGrpId,ClmGrpCode,ClmGrpName  
FROM ClaimGroupMaster WHERE ServiceOrGoods = 2 AND ServiceType = 2 AND CmpId in (vFParam,0) 
AND ClmGrpId NOT IN (11)')
GO
IF NOT EXISTS(SELECT SS.NAME FROM SYSOBJECTS S INNER JOIN SYSCOLUMNS SS ON S.id=SS.id WHERE S.XTYPE='U' 
and SS.NAME='SpentGrossAmt' and S.NAME='ClaimSheetDetail')
BEGIN
	ALTER TABLE ClaimSheetDetail ADD SpentGrossAmt Numeric(18,2)  DEFAULT 0 WITH VALUES
END
GO
GO
UPDATE ClaimSheetDetail SET SpentGrossAmt=0.00 WHERE SpentGrossAmt is Null
GO
IF EXISTS (SELECT '*' FROM SYSOBJECTS WHERE NAME = 'Fn_RetrunClaimDetails' AND XTYPE IN ('TF','FN'))
DROP FUNCTION Fn_RetrunClaimDetails
GO
CREATE FUNCTION [dbo].[Fn_RetrunClaimDetails](@Pi_ClaimGrpId AS INT,@Pi_CmpId AS INT,@Pi_FromDate AS DATETIME,@Pi_ToDate AS DATETIME,
@Pi_ClaimCode AS INT,@Pi_UsrId AS INT,@Pi_TransId AS INT) RETURNS
@RetrunClaimDetails TABLE
(
[Reference] NVARCHAR(200),
[Select] INT,
[SpentGrossAmt] NUMERIC(18,2),
[SpentTaxAmt] NUMERIC(18,2),
[Total Spent Amount] NUMERIC(36,6),
[% Claimable] NUMERIC(36,6),
[Claimable Amount] NUMERIC(36,6),
[Recommended Amount] NUMERIC(36,6),
[Received Amount] NUMERIC(36,6),
[Db/Cr Note Selection] INT,
[Status] NVARCHAR(100),
[Remarks] NVARCHAR(500)
)
/*********************************	
* FUNCTION: Fn_RetrunClaimDetails
* PURPOSE: Returns Claim Details
* NOTES:
* CREATED: Sathishkumar Veeramani on 08-04-2013
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
*
*********************************/
AS
BEGIN
  IF @Pi_ClaimGrpId = 1 --Salesman Salary / DA Claim
  BEGIN
        INSERT INTO @RetrunClaimDetails ([Reference],[Select],[SpentGrossAmt],[SpentTaxAmt],[Total Spent Amount],[% Claimable],[Claimable Amount],[Recommended Amount],
        [Received Amount],[Db/Cr Note Selection],[Status],[Remarks])
		SELECT SC.ScmRefNo as 'Reference' , 0 as 'Select',0 as 'Spent Gross Amt',0 as 'Spent Tax Amt',SC.Amount as 'Total Spent Amount',ISNULL(CND.Claimable,0) as '% Claimable',
		0.00 as 'Claimable Amount',0 'Recommended Amount', 0 'Received Amount' ,0 AS 'Db/Cr Note Selection', 'Cancelled' as 'Status','' AS Remarks  
		FROM (SELECT SCM.ScmRefNo , SCM.ScmDate , SCM.CmpId, TotalApprovedAmt Amount FROM  SalesmanClaimMaster SCM WITH (NOLOCK) WHERE SCM.Status = 1) SC  
		LEFT OUTER JOIN ClaimNormDefinition CND WITH (NOLOCK) ON SC.CmpId = CND.CmpId and  CND.ClmGrpId = @Pi_ClaimGrpId WHERE SC.CmpId = @Pi_CmpId 
		AND SC.ScmDate  BETWEEN @Pi_ToDate AND @Pi_ToDate AND SC.ScmRefNo  NOT IN (SELECT RefCode FROM ClaimSheetDetail WITH (NOLOCK) 
		WHERE ClmId IN (SELECT ClmId FROM ClaimSheethd WITH (NOLOCK) WHERE ClmGrpId  = @Pi_ClaimGrpId)AND SelectMode=1)
  END
  ELSE IF @Pi_ClaimGrpId = 2 --DeliveryBoy Salary / DA Claim
  BEGIN
        INSERT INTO @RetrunClaimDetails ([Reference],[Select],[SpentGrossAmt],[SpentTaxAmt],[Total Spent Amount],[% Claimable],[Claimable Amount],[Recommended Amount],
        [Received Amount],[Db/Cr Note Selection],[Status],[Remarks])
		SELECT DC.DbcRefNo AS 'Reference',0 AS 'Select',0 as 'Spent Gross Amt',0 as 'Spent Tax Amt',DC.TotApproveAmt AS 'Total Spent Amount',  isNull(CND.Claimable,0) AS '% Claimable',
		0.00 AS 'Claimable Amount',  0 'Recommended Amount' , 0 'Received Amount' ,0 AS 'Db/Cr Note Selection', 'Cancelled' AS 'Status','' AS Remarks  
		FROM (SELECT DbcDate,DbcRefNo,CmpId,TotApproveAmt FROM  DeliveryBoyClaimMaster  WITH (NOLOCK) WHERE Status = 1 ) DC  
		LEFT OUTER JOIN ClaimNormDefinition CND WITH (NOLOCK) ON DC.CmpId = CND.CmpId AND  CND.ClmGrpId = @Pi_ClaimGrpId WHERE DC.CmpId = @Pi_CmpId  
		AND DC.DbcDate BETWEEN @Pi_ToDate AND @Pi_ToDate AND DC.DbcRefNo NOT IN (SELECT RefCode FROM ClaimSheetDetail WITH (NOLOCK) 
		WHERE ClmId IN (SELECT ClmId FROM ClaimSheethd WITH (NOLOCK) WHERE ClmGrpId  = @Pi_ClaimGrpId) AND SelectMode=1)
  END  
  ELSE IF @Pi_ClaimGrpId = 3 --Salesman Incentive Claim
  BEGIN
        INSERT INTO @RetrunClaimDetails ([Reference],[Select],[SpentGrossAmt],[SpentTaxAmt],[Total Spent Amount],[% Claimable],[Claimable Amount],[Recommended Amount],
        [Received Amount],[Db/Cr Note Selection],[Status],[Remarks])
		SELECT SIC.SicRefNo as 'Reference',0 AS 'Select',0 as 'Spent Gross Amt',0 as 'Spent Tax Amt',SIC.TotAppInc AS 'Total Spent Amount', ISNULL(CND.Claimable,0) AS '% Claimable',
		0.00 AS 'Claimable Amount',  0 'Recommended Amount' , 0 'Received Amount' ,0 AS 'Db/Cr Note Selection', 'Cancelled' AS 'Status','' AS Remarks 
		FROM  (SELECT SicDate,SicRefNo,CmpId,TotAppInc FROM  SMIncentiveCalculatorMaster WITH (NOLOCK) WHERE Status = 1 ) SIC  
		LEFT OUTER JOIN ClaimNormDefinition CND WITH (NOLOCK) ON SIC.CmpId = CND.CmpId and  CND.ClmGrpId = @Pi_ClaimGrpId WHERE SIC.CmpId = @Pi_CmpId  
		AND SIC.SicDate BETWEEN @Pi_FromDate AND @Pi_ToDate AND SIC.SicRefNo NOT IN (SELECT RefCode FROM ClaimSheetDetail WITH (NOLOCK) 
		WHERE ClmId IN (SELECT ClmId FROM ClaimSheethd WITH (NOLOCK) WHERE ClmGrpId  = @Pi_ClaimGrpId) AND SelectMode=1)
  END
  ELSE IF @Pi_ClaimGrpId = 4 --Van Subsidy Claim
  BEGIN
        INSERT INTO @RetrunClaimDetails ([Reference],[Select],[SpentGrossAmt],[SpentTaxAmt],[Total Spent Amount],[% Claimable],[Claimable Amount],[Recommended Amount],
        [Received Amount],[Db/Cr Note Selection],[Status],[Remarks])
		SELECT VS.RefNo as 'Reference' , 0 as 'Select',0 as 'Spent Gross Amt',0 as 'Spent Tax Amt',VS.Amount as 'Total Spent Amount' ,ISNULL(CND.Claimable,0) as '% Claimable',
		0.00 as 'Claimable Amount',0 'Recommended Amount' , 0 'Received Amount' , 0 AS 'Db/Cr Note Selection', 'Cancelled' as 'Status','' AS Remarks 
		FROM (SELECT SCM.RefNo , SCM.SubsidyDt , SCM.CmpId, SCM.ApprovedClaimAmt Amount FROM VanSubsidyHD SCM WHERE SCM.Confirm = 1) VS  
		LEFT OUTER JOIN ClaimNormDefinition CND WITH (NOLOCK) ON VS.CmpId = CND.CmpId AND  CND.ClmGrpId = @Pi_ClaimGrpId WHERE VS.CmpId = @Pi_CmpId 
		AND VS.SubsidyDt BETWEEN @Pi_FromDate AND @Pi_ToDate AND VS.RefNo NOT IN (SELECT RefCode FROM ClaimSheetDetail WITH (NOLOCK) 
		WHERE ClmId IN (SELECT ClmId FROM ClaimSheethd WITH (NOLOCK) WHERE ClmGrpId  = @Pi_ClaimGrpId) AND SelectMode=1)
  END  
  ELSE IF @Pi_ClaimGrpId = 5 --Transporter Claim
  BEGIN
        INSERT INTO @RetrunClaimDetails ([Reference],[Select],[SpentGrossAmt],[SpentTaxAmt],[Total Spent Amount],[% Claimable],[Claimable Amount],[Recommended Amount],
        [Received Amount],[Db/Cr Note Selection],[Status],[Remarks])
		SELECT TC.TrcRefNo as 'Reference' , 0 as 'Select',0 as 'Spent Gross Amt',0 as 'Spent Tax Amt',TC.TotalRecAmt as 'Total Spent Amount' ,ISNULL(CND.Claimable,0) as '% Claimable',
		0.00 as 'Claimable Amount' ,0 'Recommended Amount', 0 'Received Amount' , 0 AS 'Db/Cr Note Selection','Cancelled' as 'Status','' AS Remarks 
		FROM (SELECT TrcRefNo,TotalRecAmt,CmpId,TrcDate FROM TransporterClaimMaster WITH (NOLOCK) WHERE Status = 1 ) TC  
		LEFT OUTER JOIN ClaimNormDefinition CND WITH (NOLOCK) ON TC.CmpId = CND.CmpId and  CND.ClmGrpId = @Pi_ClaimGrpId WHERE TC.CmpId = @Pi_CmpId  
		AND TC.TrcDate BETWEEN @Pi_FromDate AND @Pi_ToDate AND TC.TrcRefNo NOT IN (SELECT RefCode FROM ClaimSheetDetail WITH (NOLOCK) 
		WHERE ClmId IN (SELECT ClmId FROM ClaimSheethd WITH (NOLOCK) WHERE ClmGrpId  = @Pi_ClaimGrpId ) AND SelectMode=1)
  END
  ELSE IF @Pi_ClaimGrpId = 6 --Return To Company
  BEGIN
        INSERT INTO @RetrunClaimDetails ([Reference],[Select],[SpentGrossAmt],[SpentTaxAmt],[Total Spent Amount],[% Claimable],[Claimable Amount],[Recommended Amount],
        [Received Amount],[Db/Cr Note Selection],[Status],[Remarks])
		SELECT RTC.RtnCmpRefNo AS 'Reference',0 AS 'Select',0 as 'Spent Gross Amt',0 as 'Spent Tax Amt',RTC.Amount AS 'Total Spent Amount',ISNULL(CND.Claimable,0) AS '% Claimable',
		0.00 AS 'Claimable Amount',  0 'Recommended Amount' , 0 'Received Amount' , 0 AS 'Db/Cr Note Selection','Cancelled' AS 'Status','' AS Remarks 
		FROM (SELECT RTCM.RtnCmpRefNo,RTCM.RtncmpDate,S.CmpId,SUM(RTCD.AmtForClaim) Amount FROM ReturnToCompany RTCM WITH (NOLOCK),
		ReturnToCompanyDt RTCD WITH (NOLOCK),Supplier S  WITH (NOLOCK) WHERE RTCM.RtnCmpRefNo = RTCD.RtnCmpRefNo AND S.SpmId = RTCM.SpmId 
		AND RTCM.Status=1  GROUP BY RTCM.RtnCmpRefNo,RTCM.RtncmpDate,S.CmpId)RTC  LEFT OUTER JOIN ClaimNormDefinition CND WITH (NOLOCK) ON RTC.CmpId = CND.CmpId 
		AND CND.ClmGrpId = @Pi_ClaimGrpId WHERE RTC.Amount <> 0 AND RTC.CmpId = 1 and RTC.RtnCmpDate BETWEEN @Pi_FromDate AND @Pi_ToDate 
		AND RTC.RtnCmpRefNo NOT IN (SELECT RefCode FROM ClaimSheetDetail WITH (NOLOCK) WHERE ClmId IN (SELECT ClmId FROM ClaimSheethd WITH (NOLOCK) 
		WHERE ClmGrpId  = @Pi_ClaimGrpId AND ClmId <>0 ) AND SelectMode=1)
  END
  ELSE IF @Pi_ClaimGrpId = 7 --Batch Transfer Value difference Claim
  BEGIN
        INSERT INTO @RetrunClaimDetails ([Reference],[Select],[SpentGrossAmt],[SpentTaxAmt],[Total Spent Amount],[% Claimable],[Claimable Amount],[Recommended Amount],
        [Received Amount],[Db/Cr Note Selection],[Status],[Remarks])
		SELECT BTC.BatRefNo AS 'Reference',0 AS 'Select',0 as 'Spent Gross Amt',0 as 'Spent Tax Amt',BTC.Amount AS 'Total Spent Amount' ,ISNULL(CND.Claimable,0) AS '% Claimable',
		0.00 AS 'Claimable Amount',  0 'Recommended Amount' , 0 'Received Amount' , 0 AS 'Db/Cr Note Selection','Cancelled'  AS 'Status','' AS Remarks 
		FROM(SELECT BatRefNo,BatTrfDate,P.CmpId,ClmAmt Amount FROM BatchTransferClaim BT WITH (NOLOCK), Product P WITH (NOLOCK) WHERE BT.PrdId = P.PrdId) BTC 
		LEFT OUTER JOIN ClaimNormDefinition CND WITH (NOLOCK) ON BTC.CmpId = CND.CmpId AND CND.ClmGrpId = @Pi_ClaimGrpId WHERE BTC.CmpId = @Pi_CmpId 
		AND BTC.BatTrfDate BETWEEN @Pi_FromDate AND @Pi_ToDate  AND BTC.BatRefNo NOT IN (SELECT RefCode FROM  ClaimSheetDetail 
		WHERE ClmId IN (SELECT ClmId FROM ClaimSheethd WHERE ClmGrpId  = @Pi_ClaimGrpId AND ClmId <>0) AND SelectMode=1) 
  END
  ELSE IF @Pi_ClaimGrpId = 8 --Salvage Claim
  BEGIN
        INSERT INTO @RetrunClaimDetails ([Reference],[Select],[SpentGrossAmt],[SpentTaxAmt],[Total Spent Amount],[% Claimable],[Claimable Amount],[Recommended Amount],
        [Received Amount],[Db/Cr Note Selection],[Status],[Remarks])
        SELECT SC.SalvageRefNo as 'Reference' , 0 as 'Select',0 as 'Spent Gross Amt',0 as 'Spent Tax Amt',SC.Amount as 'Total Spent Amount',ISNULL(CND.Claimable,0) AS '% Claimable',
        0.00 as 'Claimable Amount',0 'Recommended Amount' , 0 'Received Amount' ,0 AS 'Db/Cr Note Selection','Cancelled' AS 'Status','' AS Remarks 
        FROM(SELECT S.SalvageRefNo,S.SalvageDate,P.CmpId,SUM(AmtForClaim) Amount FROM SalvageProduct SP WITH (NOLOCK),Salvage S WITH (NOLOCK),
        Product P WITH (NOLOCK) WHERE S.SalvageRefNo = SP.SalvageRefNo and SP.PrdId = P.PrdId AND S.Status=1 GROUP BY S.SalvageRefNo,S.SalvageDate,P.CmpId) SC 
        LEFT OUTER JOIN ClaimNormDefinition CND WITH (NOLOCK) ON SC.CmpId = CND.CmpId AND CND.ClmGrpId = @Pi_ClaimGrpId WHERE SC.CmpId = @Pi_CmpId
        AND SC.SalvageDate BETWEEN @Pi_FromDate AND @Pi_ToDate AND SC.SalvageRefNo NOT IN (SELECT RefCode FROM ClaimSheetDetail WITH(NOLOCK)
        WHERE ClmId IN (SELECT ClmId FROM ClaimSheethd WHERE ClmGrpId = @Pi_ClaimGrpId AND ClmId <> @Pi_CmpId) AND SelectMode=1)
  END  
  ELSE IF @Pi_ClaimGrpId = 9 --Sample Issued
  BEGIN
        INSERT INTO @RetrunClaimDetails ([Reference],[Select],[SpentGrossAmt],[SpentTaxAmt],[Total Spent Amount],[% Claimable],[Claimable Amount],[Recommended Amount],
        [Received Amount],[Db/Cr Note Selection],[Status],[Remarks])
		SELECT SC.StkJournalRefNo AS 'Reference' , 0 AS 'Select',0 as 'Spent Gross Amt',0 as 'Spent Tax Amt',SC.Amount AS 'Total Spent Amount' ,ISNULL(CND.Claimable,0) AS '% Claimable',
		0.00 AS 'Claimable Amount' ,  0 'Recommended Amount' ,0 'Received Amount' ,0 AS 'Db/Cr Note Selection',  'Cancelled' AS 'Status','' AS Remarks 
		FROM (SELECT StkJournalRefNo,StkJournalDate,P.CmpId,ClmAmt Amount FROM StkJournalClaim SJC  WITH (NOLOCK),Product P WITH (NOLOCK)WHERE SJC.PrdId = P.PrdId) SC  
		LEFT OUTER JOIN ClaimNormDefinition CND ON SC.CmpId = CND.CmpId AND CND.ClmGrpId = @Pi_ClaimGrpId WHERE SC.CmpId = @Pi_CmpId 
		AND SC.StkJournalDate  BETWEEN @Pi_FromDate AND @Pi_ToDate AND SC.StkJournalRefNo NOT IN (SELECT RefCode FROM ClaimSheetDetail 
		WHERE ClmId IN (SELECT ClmId FROM ClaimSheethd WHERE ClmGrpId  = @Pi_ClaimGrpId AND ClmId <>0) AND SelectMode=1) 
  END
  ELSE IF @Pi_ClaimGrpId = 10 --Resell Damage Goods Claim
  BEGIN
        INSERT INTO @RetrunClaimDetails ([Reference],[Select],[SpentGrossAmt],[SpentTaxAmt],[Total Spent Amount],[% Claimable],[Claimable Amount],[Recommended Amount],
        [Received Amount],[Db/Cr Note Selection],[Status],[Remarks])
		SELECT RSC.ClaimRefNo AS 'Reference' , 0 AS 'Select',0 as 'Spent Gross Amt',0 as 'Spent Tax Amt',RSC.ClaimAmt AS 'Total Spent Amount' ,ISNULL(CND.Claimable,0) AS '% Claimable',
		0.00 AS 'Claimable Amount' ,0 'Recommended Amount', 0 'Received Amount' ,0 AS 'Db/Cr Note Selection', 'Cancelled' AS 'Status','' AS Remarks 
		FROM (SELECT ClaimRefNo,ClaimAmt,CmpId,ResellDate FROM ReSellDamageMaster WITH (NOLOCK) WHERE Status = 1) RSC 
		LEFT OUTER JOIN ClaimNormDefinition CND WITH (NOLOCK) ON  RSC.CmpId = CND.CmpId and CND.ClmGrpId = @Pi_ClaimGrpId WHERE RSC.CmpId = @Pi_CmpId 
		AND RSC.ResellDate BETWEEN @Pi_FromDate AND @Pi_ToDate AND RSC.ClaimRefNo NOT IN (SELECT RefCode FROM ClaimSheetDetail WITH (NOLOCK) 
		WHERE ClmId IN (SELECT ClmId FROM ClaimSheethd WITH (NOLOCK) WHERE ClmGrpId  = @Pi_ClaimGrpId AND ClmId <>0) AND SelectMode=1)  
  END
  ELSE IF @Pi_ClaimGrpId = 11 --Special Discount Claim
  BEGIN
        INSERT INTO @RetrunClaimDetails ([Reference],[Select],[SpentGrossAmt],[SpentTaxAmt],[Total Spent Amount],[% Claimable],
        [Claimable Amount],[Recommended Amount],[Received Amount],[Db/Cr Note Selection],[Status],[Remarks])
		SELECT DC.SdcRefNo as 'Reference',0 as 'Select',DC.SpentGrossAmt as 'Spent Gross Amt',DC.SpentTaxAmt as 'Spent Tax Amt',
		DC.TotalRecAmt as 'Total Spent Amount',ISNULL(CND.Claimable,0) as '% Claimable',
		0.00 as 'Claimable Amount',0 'Recommended Amount',0 'Received Amount' ,0 AS 'Db/Cr Note Selection','Cancelled' as 'Status','' AS Remarks 
		FROM (SELECT SdcDate,A.SdcRefNo,CmpId,TotalRecAmt,sum(B.SpentGrossAmt)SpentGrossAmt,sum(B.SpentTaxAmt)SpentTaxAmt FROM SpecialDiscountMaster A WITH (NOLOCK) 
		INNER JOIN SpecialDiscountDetails B WITH (NOLOCK) ON A.SdcRefNo = B.SdcRefNo
		WHERE A.Status = 1 GROUP BY A.SdcDate,A.SdcRefNo,CmpId,TotalRecAmt) DC 
		LEFT OUTER JOIN ClaimNormDefinition CND WITH (NOLOCK) ON DC.CmpId = CND.CmpId and CND.ClmGrpId =  @Pi_ClaimGrpId WHERE DC.CmpId = @Pi_CmpId 
		AND DC.SdcDate BETWEEN @Pi_FromDate AND @Pi_ToDate AND DC.SdcRefNo NOT IN (SELECT RefCode FROM ClaimSheetDetail WITH(NOLOCK)
		WHERE ClmId IN (SELECT ClmId FROM ClaimSheethd WHERE ClmGrpId  =  @Pi_ClaimGrpId) AND SelectMode=1)
  END            
  ELSE IF @Pi_ClaimGrpId = 12 --Rate Difference Claim
  BEGIN  
        INSERT INTO @RetrunClaimDetails ([Reference],[Select],[SpentGrossAmt],[SpentTaxAmt],[Total Spent Amount],[% Claimable],[Claimable Amount],[Recommended Amount],
        [Received Amount],[Db/Cr Note Selection],[Status],[Remarks])
		SELECT RDC.RefNo AS 'Reference' , 0 AS 'Select',RDC.SpentAmtGross AS 'Spent Gross Amt', RDC.SpentTaxAmt as 'Spent Tax Amt',
		RDC.Amount AS 'Total Spent Amount',ISNULL(CND.Claimable,0) AS '% Claimable',
		0.00 AS 'Claimable Amount' ,  0 'Recommended Amount' , 0 'Received Amount' , 0 AS 'Db/Cr Note Selection', 'Cancelled' AS 'Status','' AS Remarks 
		FROM (SELECT RefNo,Date,CmpId,A.RecClaimAmt Amount,TotSpentAmtGross - TotNegSpentAmtGross as SpentAmtGross,
		TotSpentTaxAmt - TotNegSpentTaxAmt as SpentTaxAmt 
		FROM RateDifferenceClaim A WITH (NOLOCK) WHERE Status = 1 ) RDC   
		LEFT OUTER JOIN ClaimNormDefinition CND ON RDC.CmpId = CND.CmpId AND CND.ClmGrpId = @Pi_ClaimGrpId WHERE RDC.CmpId = @Pi_CmpId  
		AND RDC.Date BETWEEN @Pi_FromDate AND @Pi_ToDate AND RDC.RefNo NOT IN (SELECT RefCode FROM ClaimSheetDetail WITH (NOLOCK) 
		WHERE ClmId IN (SELECT ClmId FROM ClaimSheethd WITH (NOLOCK) WHERE ClmGrpId  = @Pi_ClaimGrpId) AND SelectMode=1)
  END
  ELSE IF @Pi_ClaimGrpId = 13 --VAT Claim
  BEGIN  
         INSERT INTO @RetrunClaimDetails ([Reference],[Select],[SpentGrossAmt],[SpentTaxAmt],[Total Spent Amount],[% Claimable],[Claimable Amount],[Recommended Amount],
        [Received Amount],[Db/Cr Note Selection],[Status],[Remarks])
		SELECT VC.RefNo AS 'Reference' , 0 AS 'Select',0 as 'Spent Gross Amt',0 as 'Spent Tax Amt',VC.RecVatTax AS 'Total Spent Amount' ,ISNULL(CND.Claimable,0) AS '% Claimable',
		0.00 AS 'Claimable Amount' ,  0 'Recommended Amount' , 0 'Received Amount' ,0 AS 'Db/Cr Note Selection', 'Cancelled' AS 'Status','' AS Remarks 
		FROM (SELECT RefNo,RecVatTax,CmpId,VatDate FROM VatTaxClaim WITH (NOLOCK) WHERE Status = 1) VC  
		LEFT OUTER JOIN ClaimNormDefinition CND ON VC.CmpId = CND.CmpId and CND.ClmGrpId = @Pi_ClaimGrpId WHERE VC.CmpId = @Pi_CmpId  
		AND VC.VatDate BETWEEN @Pi_FromDate AND @Pi_ToDate AND VC.RefNo NOT IN (SELECT RefCode FROM ClaimSheetDetail WITH (NOLOCK) 
		WHERE ClmId IN (SELECT ClmId FROM ClaimSheethd WITH (NOLOCK) WHERE ClmGrpId  = @Pi_ClaimGrpId) AND SelectMode=1)
  END  
  ELSE IF @Pi_ClaimGrpId = 14 --Purchase Shortage Claim
  BEGIN  
         INSERT INTO @RetrunClaimDetails ([Reference],[Select],[SpentGrossAmt],[SpentTaxAmt],[Total Spent Amount],[% Claimable],[Claimable Amount],[Recommended Amount],
        [Received Amount],[Db/Cr Note Selection],[Status],[Remarks])
		SELECT PSC.PurShortRefNo AS 'Reference' , 0 AS 'Select',0 as 'Spent Gross Amt',0 as 'Spent Tax Amt',PSC.Amount AS 'Total Spent Amount' ,ISNULL(CND.Claimable,0) AS '% Claimable',
		0.00 AS 'Claimable Amount' , 0 'Recommended Amount' , 0 'Received Amount' ,0 AS 'Db/Cr Note Selection', 'Cancelled' AS 'Status','' AS Remarks 
		FROM  (SELECT PurShortRefNo,ClaimDate,CmpId,RecClaimAmt Amount FROM PurShortageClaim WITH  (NOLOCK) WHERE Status = 1) PSC  
		LEFT OUTER JOIN ClaimNormDefinition CND ON PSC.CmpId = CND.CmpId AND CND.ClmGrpId = @Pi_ClaimGrpId WHERE PSC.CmpId = @Pi_CmpId  
		AND PSC.ClaimDate BETWEEN @Pi_FromDate AND @Pi_ToDate and PSC.PurShortRefNo NOT IN (SELECT RefCode FROM ClaimSheetDetail WITH (NOLOCK) 
		WHERE ClmId IN (SELECT ClmId FROM ClaimSheethd WITH (NOLOCK) WHERE ClmGrpId  = @Pi_ClaimGrpId) AND SelectMode=1)
  END
  ELSE IF @Pi_ClaimGrpId = 15 --Purchase Excess Quantity Refusal Claim
  BEGIN  
         INSERT INTO @RetrunClaimDetails ([Reference],[Select],[SpentGrossAmt],[SpentTaxAmt],[Total Spent Amount],[% Claimable],[Claimable Amount],[Recommended Amount],
        [Received Amount],[Db/Cr Note Selection],[Status],[Remarks])
		SELECT PEC.RefNo AS 'Reference' , 0 AS 'Select',0 as 'Spent Gross Amt',0 as 'Spent Tax Amt',PEC.Amount AS 'Total Spent Amount' ,  ISNULL(CND.Claimable,0) AS '% Claimable',
		0.00 AS 'Claimable Amount' , 0 'Recommended Amount',0 'Received Amount' ,0 AS 'Db/Cr Note Selection','Cancelled' AS 'Status','' AS Remarks 
		FROM (SELECT RefNo,Date,CmpId,TotRecAmt Amount FROM PurchaseExcessClaimMaster WITH (NOLOCK) WHERE Status = 1) PEC  
		LEFT OUTER JOIN ClaimNormDefinition CND ON PEC.CmpId = CND.CmpId and CND.ClmGrpId = @Pi_ClaimGrpId WHERE PEC.CmpId = @Pi_CmpId  
		AND PEC.Date BETWEEN @Pi_FromDate AND @Pi_ToDate AND PEC.RefNo NOT IN (SELECT RefCode FROM ClaimSheetDetail WITH (NOLOCK) 
		WHERE ClmId IN (SELECT ClmId FROM ClaimSheethd WITH (NOLOCK) WHERE ClmGrpId  = @Pi_ClaimGrpId) AND SelectMode=1)
  END    				
  ELSE IF @Pi_ClaimGrpId = 16 --Manual Claim
  BEGIN
        INSERT INTO @RetrunClaimDetails ([Reference],[Select],[SpentGrossAmt],[SpentTaxAmt],[Total Spent Amount],[% Claimable],[Claimable Amount],[Recommended Amount],
        [Received Amount],[Db/Cr Note Selection],[Status],[Remarks])
        SELECT DISTINCT MC.MacRefNo AS 'Reference' , 0 AS 'Select',0 as 'Spent Gross Amt',0 as 'Spent Tax Amt',SUM(MCD.ClaimAmt) AS 'Total Spent Amount' ,ISNULL(CND.Claimable,0) AS '% Claimable',
        0.00 AS 'Claimable Amount' ,0 'Recommended Amount', 0 'Received Amount' , 0 AS 'Db/Cr Note Selection','Cancelled' AS 'Status',MCD.Description -- MC.Remarks Was Changed For CR- CCRSTCK0015
        FROM  (SELECT MacRefNo,0 AS ClaimAmt,CmpId,MacDate,Remarks FROM ManualClaimMaster WITH (NOLOCK)  WHERE Status = 1) MC  
        INNER JOIN ManualClaimDetails MCD WITH (NOLOCK) ON MCD.MacRefNo =MC.MacRefNo 
		LEFT OUTER JOIN ClaimNormDefinition CND WITH (NOLOCK) ON MC.CmpId = CND.CmpId AND  CND.ClmGrpId = @Pi_ClaimGrpId WHERE MC.CmpId = @Pi_CmpId  
		AND MC.MacDate BETWEEN @Pi_FromDate AND @Pi_ToDate and MC.MacRefNo NOT IN (SELECT RefCode FROM ClaimSheetDetail WITH (NOLOCK) 
		WHERE ClmId IN (SELECT ClmId FROM ClaimSheethd WITH (NOLOCK) WHERE ClmGrpId  = @Pi_ClaimGrpId)AND SelectMode=1)
		GROUP BY MC.MacRefNo,CND.Claimable,MCD.Description
  END
RETURN
END
GO
--Till Here
--Batch Transfer GST
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='P' AND name='Proc_VatPurchaseMRPBatchTransfer_GST')
DROP PROCEDURE Proc_VatPurchaseMRPBatchTransfer_GST
GO
CREATE PROCEDURE [Proc_VatPurchaseMRPBatchTransfer_GST]
(
	@PurRcptRefNo Varchar(50),
	@Po_ErrNo INT OUTPUT
)
AS
/*********************************
* PROCEDURE		: Proc_VatPurchaseBatchTransfer_GST
* PURPOSE		: To transfer MRP wise Stock
* CREATED BY	: Murugan.R
* CREATED DATE	: 08/05/2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date}		{developer}		{brief modification description}
********************************************************************/
SET NOCOUNT ON
BEGIN


		DECLARE @PrdId	 	        AS 	INT
		DECLARE @PrdbatId	 	    AS 	INT
		DECLARE @PrdCCode 	        AS 	NVARCHAR(100)
		DECLARE @BatchCode			AS 	NVARCHAR(100)
		DECLARE @MnfDate			AS 	NVARCHAR(100)
		DECLARE @MRP				AS  NUMERIC(38,6)
		DECLARE @LSP				AS  NUMERIC(38,6)
		DECLARE @SR					AS  NUMERIC(38,6)
		DECLARE @LcnId  	        AS 	INT
		DECLARE @SalStock AS BIGINT
		DECLARE @UnSalStock AS BIGINT
		DECLARE @Offerstock AS BIGINT
		DECLARE @ToPrdBatId AS INT
		DECLARE @FromPrdBatId AS INT
		DECLARE @ToPriceId AS BIGINT
		DECLARE @FromPriceId AS BIGINT
		DECLARE @ReasonId AS INT

		DECLARE @PreFix AS VARCHAR(20)	
		DECLARE @ZPad AS INT
		DECLARE @CurrValue AS NUMERIC(36,0)
		DECLARE @CurrYear AS NUMERIC(36,0)
		DECLARE @GetKeyNumber AS VARCHAR(50)
		DECLARE @GetKeyID	AS NUMERIC(36,0)
		DECLARE @StkTypeId	AS INT
		DECLARE @TransDate AS DATETIME
		DECLARE @MaxTransDate AS DATETIME
		DECLARE @Po_StkPosting		AS INT
		DECLARE @BatchMRPTransfer AS TINYINT
		
		SET @Po_ErrNo=0
		
	
		
		IF NOT EXISTS(SELECT 'X' FROM GSTConfiguration (NOLOCK) WHERE ActivationStatus=1 and AcknowledgeStatus=1 and ConsoleAckStatus=1)
		BEGIN
			RETURN
		END
		

		IF NOT EXISTS(SELECT 'X' FROM PurchaseReceipt (NOLOCK) where Vatgst='VAT' and PurRcptRefNo=@PurRcptRefNo and Status=1)
		BEGIN
			RETURN
		END
		
	
		SELECT @TransDate=CONVERT(DATETIME,CONVERT(NVARCHAR(10),GETDATE(),121),121)	
		SELECT @MaxTransDate=  MAX(TRANSDATE) FROM StockLedger (NOLOCK)
		IF  @MaxTransDate>@TransDate
		BEGIN
			RETURN
		END
			---Saleable Stock	
			SELECT P.Prdid,C.PrdbatId,PBD.PriceId,PBD.PrdBatDetailValue as MRP,P.PrdCCode,C.PrdBatCode,
			SUM(RcvdGoodBaseQty) as RcvdGoodBaseQty,LcnId
			INTO #PurchaseProductDT
			FROM PurchaseReceipt A WITH (NOLOCK) 
			INNER JOIN PurchaseReceiptProduct B (NOLOCK) ON A.PurRcptId=B.PurRcptId
			INNER JOIN Product P WITH (NOLOCK) ON P.Prdid=B.Prdid
			INNER JOIN Productbatch C WITH (NOLOCK) ON P.PrdId=C.Prdid and B.Prdid=C.Prdid and C.Prdbatid=B.Prdbatid
			INNER JOIN BatchCreation BC WITH (NOLOCK) ON BC.BatchSeqId=C.BatchSeqId
			INNER JOIN Productbatchdetails PBD WITH (NOLOCK) ON PBD.PrdBatId=C.PrdBatId  and B.PrdbatId=PBD.PrdbatID
			and Bc.SlNo=PBD.SLNo and PBD.PriceId=B.PriceId
			WHERE PurRcptRefNo=@PurRcptRefNo and MRP=1 and A.Status=1
			GROUP BY  P.Prdid,C.PrdbatId,PBD.PriceId,PBD.PrdBatDetailValue ,P.PrdCCode,C.PrdBatCode,LcnId
			ORDER BY P.PrdCCode,C.PrdBatCode,PBD.PrdBatDetailValue
			
			
				
			SELECT DISTINCT P.Prdid,Max(C.PrdbatId) as PrdbatId,PBD.PrdBatDetailValue as MRP
			INTO #MrpWiseProduct
			FROM PurchaseReceipt A WITH (NOLOCK) 
			INNER JOIN PurchaseReceiptProduct B (NOLOCK) ON A.PurRcptId=B.PurRcptId
			INNER JOIN Product P WITH (NOLOCK) ON P.Prdid=B.Prdid
			INNER JOIN Productbatch C WITH (NOLOCK) ON P.PrdId=C.Prdid and B.Prdid=C.Prdid 
			INNER JOIN BatchCreation BC WITH (NOLOCK) ON BC.BatchSeqId=C.BatchSeqId
			INNER JOIN Productbatchdetails PBD WITH (NOLOCK) ON PBD.PrdBatId=C.PrdBatId  
			and Bc.SlNo=PBD.SLNo and PBD.PriceId=C.DefaultPriceId and CAST(PrdUnitMRP as Numeric(18,6))=CAST(PrdBatDetailValue as Numeric(18,6))
			WHERE PurRcptRefNo=@PurRcptRefNo and MRP=1 AND   A.Status=1
			GROUP BY P.Prdid,PBD.PrdBatDetailValue
			
			SELECT DISTINCT Prdid,PrdbatId,PriceId,MRP,RcvdGoodBaseQty,Lcnid,0 as ToBatchId,0 as Topriceid 
			INTO #FromBatch
			FROM #PurchaseProductDT A WHERE NOT EXISTS(SELECT PrdId,PrdbatId,MRP FROM #MrpWiseProduct B WHERE A.Prdid=B.Prdid
			and A.PrdbatId=B.PrdbatId and CAST(A.MRP as Numeric(18,6))=CAST(B.MRP as Numeric(18,6)))
			
			UPDATE A SET A.ToBatchId=B.PrdbatId FROM #FromBatch A INNER JOIN #MrpWiseProduct B ON A.Prdid=B.Prdid and  CAST(A.MRP as Numeric(18,6))=CAST(B.MRP as Numeric(18,6))
			
			
			
			SELECT A.Prdid,A.PrdbatId,A.LcnId,PriceId,MRP,RcvdGoodBaseQty, ToBatchId ,Topriceid
			INTO #StockTransfer
			FROM ProductBatchLocation A (NOLOCK) INNER JOIN #FromBatch B ON A.PrdId=B.Prdid
			and A.PrdBatID=B.PrdbatId and A.LcnId=B.LcnId 
			and (PrdBatLcnSih-PrdBatLcnRessih)>=RcvdGoodBaseQty
			
			UPDATE A SET Topriceid =B.DefaultPriceId  FROM #StockTransfer A 
			INNER JOIN ProductBatch B ON A.ToBatchId=B.PrdbatId and A.PrdId=B.Prdid
			
			--Saleable Stock
			
			
			--Free Stock
			SELECT A.LcnId,B.Prdid,B.Prdbatid,PBD.PriceId,PBD.PrdBatDetailValue as MRP,
			SUM(ISNULL(B.Quantity,0)) OfferPurchase
			INTO #PurchaseFreeProductDT
			FROM 
			PurchaseReceipt A 
			INNER JOIN PurchaseReceiptClaimScheme B ON A.PurRcptId = B.PurRcptId
			INNER JOIN StockType S ON S.StockTypeId = B.StockTypeId 
			INNER JOIN Product P WITH (NOLOCK) ON P.Prdid=B.Prdid
			INNER JOIN Productbatch C WITH (NOLOCK) ON P.PrdId=C.Prdid and B.Prdid=C.Prdid and C.Prdbatid=B.Prdbatid
			INNER JOIN BatchCreation BC WITH (NOLOCK) ON BC.BatchSeqId=C.BatchSeqId
			INNER JOIN Productbatchdetails PBD WITH (NOLOCK) ON PBD.PrdBatId=C.PrdBatId  and B.PrdbatId=PBD.PrdbatID
			and Bc.SlNo=PBD.SLNo 
			WHERE  A.Status=1 and SystemStockType=3 AND PurRcptRefNo=@PurRcptRefNo and MRP=1 and PBD.DefaultPrice=1
			GROUP BY A.LcnId,B.Prdid,B.Prdbatid,PBD.PriceId,PBD.PrdBatDetailValue
			
			SELECT DISTINCT P.Prdid,Max(C.PrdbatId) as PrdbatId,PBD.PrdBatDetailValue as MRP
			INTO #MrpWiseFreeProduct
			FROM  #PurchaseFreeProductDT B
			INNER JOIN Product P WITH (NOLOCK) ON P.Prdid=B.Prdid
			INNER JOIN Productbatch C WITH (NOLOCK) ON P.PrdId=C.Prdid and B.Prdid=C.Prdid 
			INNER JOIN BatchCreation BC WITH (NOLOCK) ON BC.BatchSeqId=C.BatchSeqId
			INNER JOIN Productbatchdetails PBD WITH (NOLOCK) ON PBD.PrdBatId=C.PrdBatId  
			and Bc.SlNo=PBD.SLNo and PBD.PriceId=C.DefaultPriceId and CAST(B.MRP as Numeric(18,6))=CAST(PrdBatDetailValue as Numeric(18,6))
			and BC.MRP=1
			GROUP BY P.Prdid,PBD.PrdBatDetailValue
			
			SELECT DISTINCT Prdid,PrdbatId,PriceId,MRP,OfferPurchase,Lcnid,0 as ToBatchId,0 as Topriceid 
			INTO #FromFreeBatch
			FROM #PurchaseFreeProductDT A WHERE NOT EXISTS(SELECT PrdId,PrdbatId,MRP FROM #MrpWiseFreeProduct B WHERE A.Prdid=B.Prdid
			and A.PrdbatId=B.PrdbatId and CAST(A.MRP as Numeric(18,6))=CAST(B.MRP as Numeric(18,6)))
			
			UPDATE A SET A.ToBatchId=B.PrdbatId FROM #FromFreeBatch A INNER JOIN #MrpWiseFreeProduct B ON A.Prdid=B.Prdid and  CAST(A.MRP as Numeric(18,6))=CAST(B.MRP as Numeric(18,6))
			
			SELECT A.Prdid,A.PrdbatId,A.LcnId,PriceId,MRP,OfferPurchase, ToBatchId ,Topriceid
			INTO #FreeStockTransfer
			FROM ProductBatchLocation A (NOLOCK) INNER JOIN #FromFreeBatch B ON A.PrdId=B.Prdid
			and A.PrdBatID=B.PrdbatId and A.LcnId=B.LcnId 
			and (PrdBatLcnFre-PrdBatLcnResFre)>=OfferPurchase
			
			UPDATE A SET Topriceid =B.DefaultPriceId  FROM #FreeStockTransfer A 
			INNER JOIN ProductBatch B ON A.ToBatchId=B.PrdbatId and A.PrdId=B.Prdid
			---Free Stock

			SELECT StockType,Prdid,PrdbatId,LcnId,PriceId,SUM(Saleable) as Saleable,SUM(Offer) as Offer,ToBatchId,Topriceid
			INTO #BatchTransferProduct
			FROM(
			SELECT 1 as StockType,Prdid,PrdbatId,LcnId,PriceId,RcvdGoodBaseQty as Saleable,0 as Offer,ToBatchId ,Topriceid FROM #StockTransfer
			WHERE RcvdGoodBaseQty>0 and ToBatchId>0 and	Topriceid>0	
			UNION ALL
			SELECT 3 as StockType,Prdid,PrdbatId,Lcnid,PriceId,0 as Saleable,OfferPurchase as Offer,ToBatchId,Topriceid	 FROM #FreeStockTransfer
			WHERE OfferPurchase>0 and ToBatchId>0 and	Topriceid>0	
			) X GROUP BY StockType,Prdid,PrdbatId,LcnId,PriceId,ToBatchId,Topriceid
			

	BEGIN TRY
		
				DECLARE Cur_VatProductBatchTran_GST CURSOR
				FOR 		
				SELECT Prdid,PrdbatId,LcnId,PriceId,Saleable ,Offer,ToBatchId,Topriceid FROM #BatchTransferProduct	
				ORDER BY StockType	
				OPEN Cur_VatProductBatchTran_GST
				FETCH NEXT FROM Cur_VatProductBatchTran_GST INTO @Prdid,@FromPrdBatId,@Lcnid,@FromPriceId,@SalStock,@Offerstock,@ToPrdBatId,@ToPriceId			
				WHILE @@FETCH_STATUS=0
				BEGIN
				
					
					SET @Po_ErrNo=0
					
							
					SELECT TOP 1 @ReasonId=ReasonId from ReasonMaster (NOLOCK) WHERE  BatchTransfer=1 and ReasonCode='R03'
					
					BEGIN TRAN
					
					IF @SalStock > 0 
					BEGIN	
					
					
											
						SELECT @StkTypeId=StockTypeId FROM StockType (NOLOCK) WHERE SystemStockType=1 and LcnId=@LcnId
					 	SELECT @PreFix=PreFix ,@ZPad=Zpad,@CurrValue= Currvalue+1,@CurrYear= CurYear
					 	FROM  Counters (NOLOCK) WHERE TabName='BatchTransfer' and FldName='BatRefNo'
					 				 

						SET @GetKeyNumber=@PreFix+CAST(SUBSTRING(CAST(@CurrYear as Varchar(10)),3,LEN(@CurrYear)) AS Varchar(10))+REPLICATE('0',CASE WHEN LEN(@CurrValue)>@ZPad THEN (@ZPad+1)-LEN(@CurrValue) ELSE (@ZPad)-LEN(@CurrValue)END)+CAST(@CurrValue as Varchar(10))
						
						SELECT @GetKeyId =Currvalue+1 FROM Counters WITH (UPDLOCK)  WHERE TabName='BatchTransfer' and FldName='BatRefNo'
						
						UPDATE Counters SET CurrValue=@GetKeyId  WHERE TabName='BatchTransfer' and FldName='BatRefNo'
						
						
						INSERT INTO BatchTransfer(BatRefNo,BatTrfDate,LcnId,PrdId,StockTypeId,FromBatId,ToBatId,TrfQty,ReasonId,
						DocRefNo,Remarks,FromPriceId,ToPriceId,Availability,LastModBy,LastModDate,AuthId,AuthDate)
						SELECT @GetKeyNumber,CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121),@LcnId,@PrdId,@StkTypeId,@FromPrdBatId,@ToPrdBatId,@SalStock,@ReasonId,
						'','GST batch Transfer Purchase',@FromPriceId,@ToPriceId,1,99,CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121),99,CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121)
	
						Exec Proc_UpdateProductBatchLocation 1,2,@PrdId,@FromPrdBatId,@LcnId,@TransDate,@SalStock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
						IF @Po_StkPosting=0
						BEGIN
							Exec Proc_UpdateProductBatchLocation 1,1,@PrdId,@ToPrdBatId,@LcnId,@TransDate,@SalStock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
							IF @Po_StkPosting=0
							BEGIN	
								Exec Proc_UpdateStockLedger 30,1,@PrdId,@FromPrdBatId,@LcnId,@TransDate,@SalStock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
								IF @Po_StkPosting=0
								BEGIN
									Exec Proc_UpdateStockLedger 27,1,@PrdId,@ToPrdBatId,@LcnId,@TransDate,@SalStock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
									IF @Po_StkPosting<>0
									BEGIN
										SET @Po_ErrNo=1
									END													
								END
								ELSE
								BEGIN
									SET @Po_ErrNo=1
								END
							END
							ELSE
							BEGIN
								SET @Po_ErrNo=1
							END
						END
						ELSE
						BEGIN
							SET @Po_ErrNo=1
						END
					END
					
						
					IF @Offerstock>0 and @Po_ErrNo=0
					BEGIN				

							
							SELECT @StkTypeId=StockTypeId FROM StockType (NOLOCK) WHERE SystemStockType=3 and LcnId=@LcnId
							SELECT @PreFix=PreFix ,@ZPad=Zpad,@CurrValue= Currvalue+1 ,@CurrYear= CurYear
							FROM  Counters (NOLOCK) WHERE TabName='BatchTransfer' and FldName='BatRefNo'

							SET @GetKeyNumber=@PreFix+CAST(SUBSTRING(CAST(@CurrYear as Varchar(10)),3,LEN(@CurrYear)) AS Varchar(10))+REPLICATE('0',CASE WHEN LEN(@CurrValue)>@ZPad THEN (@ZPad+1)-LEN(@CurrValue) ELSE (@ZPad)-LEN(@CurrValue)END)+CAST(@CurrValue as Varchar(10))

							SELECT @GetKeyId =Currvalue+1 FROM Counters WITH (UPDLOCK)  WHERE TabName='BatchTransfer' and FldName='BatRefNo'

							UPDATE Counters SET CurrValue=@GetKeyId  WHERE TabName='BatchTransfer' and FldName='BatRefNo'
										

							INSERT INTO BatchTransfer(BatRefNo,BatTrfDate,LcnId,PrdId,StockTypeId,FromBatId,ToBatId,TrfQty,ReasonId,
							DocRefNo,Remarks,FromPriceId,ToPriceId,Availability,LastModBy,LastModDate,AuthId,AuthDate)
							SELECT @GetKeyNumber,CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121),@LcnId,@PrdId,@StkTypeId,@FromPrdBatId,@ToPrdBatId,@Offerstock,@ReasonId,
							'','GST batch Transfer Purchase',@FromPriceId,@ToPriceId,1,99,CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121),99,CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121)

							Exec Proc_UpdateProductBatchLocation 3,2,@PrdId,@FromPrdBatId,@LcnId,@TransDate,@Offerstock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
							IF @Po_StkPosting=0
							BEGIN
								Exec Proc_UpdateProductBatchLocation 3,1,@PrdId,@ToPrdBatId,@LcnId,@TransDate,@Offerstock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
								IF @Po_StkPosting=0
								BEGIN	
									Exec Proc_UpdateStockLedger 32,1,@PrdId,@FromPrdBatId,@LcnId,@TransDate,@Offerstock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
									IF @Po_StkPosting=0
									BEGIN
										Exec Proc_UpdateStockLedger 29,1,@PrdId,@ToPrdBatId,@LcnId,@TransDate,@Offerstock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
										IF @Po_StkPosting<>0
										BEGIN
											SET @Po_ErrNo=1
										END						
									END
									ELSE
									BEGIN
										SET @Po_ErrNo=1
									END
								END
								ELSE
								BEGIN
									SET @Po_ErrNo=1
								END
							END
							ELSE
							BEGIN
								SET @Po_ErrNo=1
							END



					END

				IF @Po_ErrNo>0
				BEGIN
					ROLLBACK TRAN
					CLOSE Cur_VatProductBatchTran_GST
					DEALLOCATE Cur_VatProductBatchTran_GST
					SET @Po_ErrNo=1
					RETURN
				END
				
			COMMIT TRAN
			
			FETCH NEXT FROM Cur_VatProductBatchTran_GST INTO @Prdid,@FromPrdBatId,@Lcnid,@FromPriceId,@SalStock,@Offerstock,@ToPrdBatId,@ToPriceId		
			END
			CLOSE Cur_VatProductBatchTran_GST
			DEALLOCATE Cur_VatProductBatchTran_GST

END TRY
BEGIN CATCH	
	SELECT Error_message()
	ROLLBACK TRAN
	CLOSE Cur_VatProductBatchTran_GST
	DEALLOCATE Cur_VatProductBatchTran_GST
	SET @Po_ErrNo=1
END CATCH
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='P' AND name='Proc_VatPurchaseLatestBatchTransfer_GST')
DROP PROCEDURE Proc_VatPurchaseLatestBatchTransfer_GST
GO
/*
BEGIN TRANSACTION
SELECT * FROM Productbatchlocation (NOLOCK) where Prdid IN(695,697,699) and PrdbatId IN(23503, 23478,23504,23331,23505,	23479)
EXEC Proc_VatPurchaseLatestBatchTransfer_GST 'PUR1700421',0
SELECT * FROM BATCHTRANSFER (NOLOCK) WHERE BatRefNo>'BAT1700635'
SELECT * FROM Productbatchlocation (NOLOCK) where Prdid IN(695,697,699) and PrdbatId IN(23503, 23478,23504,23331,23505,	23479)
SELECT * FROm Stockledger (NOLOCK) where Prdid IN(695,697,699) and Transdate='2017-06-15'
----SELECT * FROM Purchasereceipt where CmpInvno='523236828-1'
----Select * from EtlTempPurchaseReceipt
----Select * from EtlTempPurchaseReceiptProduct where CmpInvno='523236833-2'
----Update EtlTempPurchaseReceipt Set DownloadStatus=0,CmpInvno='523236828-1' where CmpInvno='523236833-1'
----Update EtlTempPurchaseReceiptProduct Set CmpInvno='523236828-1' where CmpInvno='523236828'
----Update ETLTempPurchaseReceiptClaimScheme Set CmpInvno='523236828-1' where CmpInvno='523236828'
ROLLBACK TRANSACTION
*/
CREATE PROCEDURE Proc_VatPurchaseLatestBatchTransfer_GST
(
	@PurRcptRefNo Varchar(50),
	@Po_ErrNo INT OUTPUT
)
AS
/*********************************
* PROCEDURE		: Proc_VatPurchaseLatestBatchTransfer_GST
* PURPOSE		: Transfer stock to latest batch
* CREATED BY	: Murugan.R
* CREATED DATE	: 08/05/2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date}		{developer}		{brief modification description}
********************************************************************/
SET NOCOUNT ON
BEGIN


		DECLARE @PrdId	 	        AS 	INT
		DECLARE @PrdbatId	 	    AS 	INT
		DECLARE @PrdCCode 	        AS 	NVARCHAR(100)
		DECLARE @BatchCode			AS 	NVARCHAR(100)
		DECLARE @MnfDate			AS 	NVARCHAR(100)
		DECLARE @MRP				AS  NUMERIC(38,6)
		DECLARE @LSP				AS  NUMERIC(38,6)
		DECLARE @SR					AS  NUMERIC(38,6)
		DECLARE @LcnId  	        AS 	INT
		DECLARE @SalStock AS BIGINT
		DECLARE @UnSalStock AS BIGINT
		DECLARE @Offerstock AS BIGINT
		DECLARE @ToPrdBatId AS INT
		DECLARE @FromPrdBatId AS INT
		DECLARE @ToPriceId AS BIGINT
		DECLARE @FromPriceId AS BIGINT
		DECLARE @ReasonId AS INT

		DECLARE @PreFix AS VARCHAR(20)	
		DECLARE @ZPad AS INT
		DECLARE @CurrValue AS NUMERIC(36,0)
		DECLARE @CurrYear AS NUMERIC(36,0)
		DECLARE @GetKeyNumber AS VARCHAR(50)
		DECLARE @GetKeyID	AS NUMERIC(36,0)
		DECLARE @StkTypeId	AS INT
		DECLARE @TransDate AS DATETIME
		DECLARE @MaxTransDate AS DATETIME
		DECLARE @Po_StkPosting		AS INT
		DECLARE @BatchMRPTransfer AS TINYINT
		
		SET @Po_ErrNo=0
		
	
		
		IF NOT EXISTS(SELECT 'X' FROM GSTConfiguration (NOLOCK) WHERE ActivationStatus=1 and AcknowledgeStatus=1 and ConsoleAckStatus=1)
		BEGIN
			RETURN
		END
		

		IF NOT EXISTS(SELECT 'X' FROM PurchaseReceipt (NOLOCK) where Vatgst='VAT' and PurRcptRefNo=@PurRcptRefNo and Status=1)
		BEGIN
			RETURN
		END
		
	
		SELECT @TransDate=CONVERT(DATETIME,CONVERT(NVARCHAR(10),GETDATE(),121),121)	
		SELECT @MaxTransDate=  MAX(TRANSDATE) FROM StockLedger (NOLOCK)
		IF  @MaxTransDate>@TransDate
		BEGIN
			RETURN
		END
			---Saleable Stock	
			SELECT B.Prdid,B.PrdbatId,B.PriceId,
			SUM(RcvdGoodBaseQty) as RcvdGoodBaseQty,LcnId
			INTO #PurchaseProductDT
			FROM PurchaseReceipt A WITH (NOLOCK) 
			INNER JOIN PurchaseReceiptProduct B (NOLOCK) ON A.PurRcptId=B.PurRcptId
			WHERE PurRcptRefNo=@PurRcptRefNo and A.Status=1
			GROUP BY  B.Prdid,B.PrdbatId,B.PriceId,LcnId
			
			
				
			SELECT DISTINCT P.Prdid,Max(C.PrdbatId) as PrdbatId
			INTO #MrpWiseProduct
			FROM PurchaseReceipt A WITH (NOLOCK) 
			INNER JOIN PurchaseReceiptProduct B (NOLOCK) ON A.PurRcptId=B.PurRcptId
			INNER JOIN Product P WITH (NOLOCK) ON P.Prdid=B.Prdid
			INNER JOIN Productbatch C WITH (NOLOCK) ON P.PrdId=C.Prdid and B.Prdid=C.Prdid 
			WHERE PurRcptRefNo=@PurRcptRefNo AND   A.Status=1
			GROUP BY P.Prdid
			
			SELECT DISTINCT Prdid,PrdbatId,PriceId,RcvdGoodBaseQty,Lcnid,0 as ToBatchId,0 as Topriceid 
			INTO #FromBatch
			FROM #PurchaseProductDT A WHERE NOT EXISTS(SELECT PrdId,PrdbatId FROM #MrpWiseProduct B WHERE A.Prdid=B.Prdid
			and A.PrdbatId=B.PrdbatId )
			
			UPDATE A SET A.ToBatchId=B.PrdbatId FROM #FromBatch A INNER JOIN #MrpWiseProduct B ON A.Prdid=B.Prdid 
			
			
			
			SELECT A.Prdid,A.PrdbatId,A.LcnId,PriceId,RcvdGoodBaseQty, ToBatchId ,Topriceid
			INTO #StockTransfer
			FROM ProductBatchLocation A (NOLOCK) INNER JOIN #FromBatch B ON A.PrdId=B.Prdid
			and A.PrdBatID=B.PrdbatId and A.LcnId=B.LcnId 
			and (PrdBatLcnSih-PrdBatLcnRessih)>=RcvdGoodBaseQty
			
			UPDATE A SET Topriceid =B.DefaultPriceId  FROM #StockTransfer A 
			INNER JOIN ProductBatch B ON A.ToBatchId=B.PrdbatId and A.PrdId=B.Prdid
			
			--Saleable Stock
			
			
			--Free Stock
			SELECT A.LcnId,B.Prdid,B.Prdbatid,PBD.PriceId,
			SUM(ISNULL(B.Quantity,0)) OfferPurchase
			INTO #PurchaseFreeProductDT
			FROM 
			PurchaseReceipt A 
			INNER JOIN PurchaseReceiptClaimScheme B ON A.PurRcptId = B.PurRcptId
			INNER JOIN StockType S ON S.StockTypeId = B.StockTypeId 
			INNER JOIN Product P WITH (NOLOCK) ON P.Prdid=B.Prdid
			INNER JOIN Productbatch C WITH (NOLOCK) ON P.PrdId=C.Prdid and B.Prdid=C.Prdid and C.Prdbatid=B.Prdbatid
			INNER JOIN BatchCreation BC WITH (NOLOCK) ON BC.BatchSeqId=C.BatchSeqId
			INNER JOIN Productbatchdetails PBD WITH (NOLOCK) ON PBD.PrdBatId=C.PrdBatId  and B.PrdbatId=PBD.PrdbatID
			and Bc.SlNo=PBD.SLNo 
			WHERE  A.Status=1 and SystemStockType=3 AND PurRcptRefNo=@PurRcptRefNo and MRP=1 and PBD.DefaultPrice=1
			GROUP BY A.LcnId,B.Prdid,B.Prdbatid,PBD.PriceId
			
			SELECT DISTINCT P.Prdid,Max(C.PrdbatId) as PrdbatId
			INTO #MrpWiseFreeProduct
			FROM  #PurchaseFreeProductDT B
			INNER JOIN Product P WITH (NOLOCK) ON P.Prdid=B.Prdid
			INNER JOIN Productbatch C WITH (NOLOCK) ON P.PrdId=C.Prdid and B.Prdid=C.Prdid 
			INNER JOIN BatchCreation BC WITH (NOLOCK) ON BC.BatchSeqId=C.BatchSeqId
			INNER JOIN Productbatchdetails PBD WITH (NOLOCK) ON PBD.PrdBatId=C.PrdBatId  
			and Bc.SlNo=PBD.SLNo and PBD.PriceId=C.DefaultPriceId 
			and BC.MRP=1
			GROUP BY P.Prdid
			
			SELECT DISTINCT Prdid,PrdbatId,PriceId,OfferPurchase,Lcnid,0 as ToBatchId,0 as Topriceid 
			INTO #FromFreeBatch
			FROM #PurchaseFreeProductDT A WHERE NOT EXISTS(SELECT PrdId,PrdbatId FROM #MrpWiseFreeProduct B WHERE A.Prdid=B.Prdid
			and A.PrdbatId=B.PrdbatId )
			
			UPDATE A SET A.ToBatchId=B.PrdbatId FROM #FromFreeBatch A INNER JOIN #MrpWiseFreeProduct B ON A.Prdid=B.Prdid 
			
			SELECT A.Prdid,A.PrdbatId,A.LcnId,PriceId,OfferPurchase, ToBatchId ,Topriceid
			INTO #FreeStockTransfer
			FROM ProductBatchLocation A (NOLOCK) INNER JOIN #FromFreeBatch B ON A.PrdId=B.Prdid
			and A.PrdBatID=B.PrdbatId and A.LcnId=B.LcnId 
			and (PrdBatLcnFre-PrdBatLcnResFre)>=OfferPurchase
			
			UPDATE A SET Topriceid =B.DefaultPriceId  FROM #FreeStockTransfer A 
			INNER JOIN ProductBatch B ON A.ToBatchId=B.PrdbatId and A.PrdId=B.Prdid
			---Free Stock

			SELECT StockType,Prdid,PrdbatId,LcnId,PriceId,SUM(Saleable) as Saleable,SUM(Offer) as Offer,ToBatchId,Topriceid
			INTO #BatchTransferProduct
			FROM(
			SELECT 1 as StockType,Prdid,PrdbatId,LcnId,PriceId,RcvdGoodBaseQty as Saleable,0 as Offer,ToBatchId ,Topriceid FROM #StockTransfer
			WHERE RcvdGoodBaseQty>0 and ToBatchId>0 and	Topriceid>0	
			UNION ALL
			SELECT 3 as StockType,Prdid,PrdbatId,Lcnid,PriceId,0 as Saleable,OfferPurchase as Offer,ToBatchId,Topriceid	 FROM #FreeStockTransfer
			WHERE OfferPurchase>0 and ToBatchId>0 and	Topriceid>0	
			) X GROUP BY StockType,Prdid,PrdbatId,LcnId,PriceId,ToBatchId,Topriceid
			

	BEGIN TRY
		
				DECLARE Cur_VatProductBatchTran_GST CURSOR
				FOR 		
				SELECT Prdid,PrdbatId,LcnId,PriceId,Saleable ,Offer,ToBatchId,Topriceid FROM #BatchTransferProduct	
				ORDER BY StockType	
				OPEN Cur_VatProductBatchTran_GST
				FETCH NEXT FROM Cur_VatProductBatchTran_GST INTO @Prdid,@FromPrdBatId,@Lcnid,@FromPriceId,@SalStock,@Offerstock,@ToPrdBatId,@ToPriceId			
				WHILE @@FETCH_STATUS=0
				BEGIN
				
					
					SET @Po_ErrNo=0
					
							
					SELECT TOP 1 @ReasonId=ReasonId from ReasonMaster (NOLOCK) WHERE  BatchTransfer=1 and ReasonCode='R03'
					
					BEGIN TRAN
					
					IF @SalStock > 0 
					BEGIN	
					
					
											
						SELECT @StkTypeId=StockTypeId FROM StockType (NOLOCK) WHERE SystemStockType=1 and LcnId=@LcnId
					 	SELECT @PreFix=PreFix ,@ZPad=Zpad,@CurrValue= Currvalue+1,@CurrYear= CurYear
					 	FROM  Counters (NOLOCK) WHERE TabName='BatchTransfer' and FldName='BatRefNo'
					 				 

						SET @GetKeyNumber=@PreFix+CAST(SUBSTRING(CAST(@CurrYear as Varchar(10)),3,LEN(@CurrYear)) AS Varchar(10))+REPLICATE('0',CASE WHEN LEN(@CurrValue)>@ZPad THEN (@ZPad+1)-LEN(@CurrValue) ELSE (@ZPad)-LEN(@CurrValue)END)+CAST(@CurrValue as Varchar(10))
						
						SELECT @GetKeyId =Currvalue+1 FROM Counters WITH (UPDLOCK)  WHERE TabName='BatchTransfer' and FldName='BatRefNo'
						
						UPDATE Counters SET CurrValue=@GetKeyId  WHERE TabName='BatchTransfer' and FldName='BatRefNo'
						
						
						INSERT INTO BatchTransfer(BatRefNo,BatTrfDate,LcnId,PrdId,StockTypeId,FromBatId,ToBatId,TrfQty,ReasonId,
						DocRefNo,Remarks,FromPriceId,ToPriceId,Availability,LastModBy,LastModDate,AuthId,AuthDate)
						SELECT @GetKeyNumber,CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121),@LcnId,@PrdId,@StkTypeId,@FromPrdBatId,@ToPrdBatId,@SalStock,@ReasonId,
						'','GST batch Transfer Purchase',@FromPriceId,@ToPriceId,1,99,CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121),99,CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121)
	
						Exec Proc_UpdateProductBatchLocation 1,2,@PrdId,@FromPrdBatId,@LcnId,@TransDate,@SalStock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
						IF @Po_StkPosting=0
						BEGIN
							Exec Proc_UpdateProductBatchLocation 1,1,@PrdId,@ToPrdBatId,@LcnId,@TransDate,@SalStock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
							IF @Po_StkPosting=0
							BEGIN	
								Exec Proc_UpdateStockLedger 30,1,@PrdId,@FromPrdBatId,@LcnId,@TransDate,@SalStock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
								IF @Po_StkPosting=0
								BEGIN
									Exec Proc_UpdateStockLedger 27,1,@PrdId,@ToPrdBatId,@LcnId,@TransDate,@SalStock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
									IF @Po_StkPosting<>0
									BEGIN
										SET @Po_ErrNo=1
									END													
								END
								ELSE
								BEGIN
									SET @Po_ErrNo=1
								END
							END
							ELSE
							BEGIN
								SET @Po_ErrNo=1
							END
						END
						ELSE
						BEGIN
							SET @Po_ErrNo=1
						END
					END
					
						
					IF @Offerstock>0 and @Po_ErrNo=0
					BEGIN				

							
							SELECT @StkTypeId=StockTypeId FROM StockType (NOLOCK) WHERE SystemStockType=3 and LcnId=@LcnId
							SELECT @PreFix=PreFix ,@ZPad=Zpad,@CurrValue= Currvalue+1 ,@CurrYear= CurYear
							FROM  Counters (NOLOCK) WHERE TabName='BatchTransfer' and FldName='BatRefNo'

							SET @GetKeyNumber=@PreFix+CAST(SUBSTRING(CAST(@CurrYear as Varchar(10)),3,LEN(@CurrYear)) AS Varchar(10))+REPLICATE('0',CASE WHEN LEN(@CurrValue)>@ZPad THEN (@ZPad+1)-LEN(@CurrValue) ELSE (@ZPad)-LEN(@CurrValue)END)+CAST(@CurrValue as Varchar(10))

							SELECT @GetKeyId =Currvalue+1 FROM Counters WITH (UPDLOCK)  WHERE TabName='BatchTransfer' and FldName='BatRefNo'

							UPDATE Counters SET CurrValue=@GetKeyId  WHERE TabName='BatchTransfer' and FldName='BatRefNo'
										

							INSERT INTO BatchTransfer(BatRefNo,BatTrfDate,LcnId,PrdId,StockTypeId,FromBatId,ToBatId,TrfQty,ReasonId,
							DocRefNo,Remarks,FromPriceId,ToPriceId,Availability,LastModBy,LastModDate,AuthId,AuthDate)
							SELECT @GetKeyNumber,CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121),@LcnId,@PrdId,@StkTypeId,@FromPrdBatId,@ToPrdBatId,@Offerstock,@ReasonId,
							'','GST batch Transfer Purchase',@FromPriceId,@ToPriceId,1,99,CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121),99,CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121)

							Exec Proc_UpdateProductBatchLocation 3,2,@PrdId,@FromPrdBatId,@LcnId,@TransDate,@Offerstock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
							IF @Po_StkPosting=0
							BEGIN
								Exec Proc_UpdateProductBatchLocation 3,1,@PrdId,@ToPrdBatId,@LcnId,@TransDate,@Offerstock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
								IF @Po_StkPosting=0
								BEGIN	
									Exec Proc_UpdateStockLedger 32,1,@PrdId,@FromPrdBatId,@LcnId,@TransDate,@Offerstock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
									IF @Po_StkPosting=0
									BEGIN
										Exec Proc_UpdateStockLedger 29,1,@PrdId,@ToPrdBatId,@LcnId,@TransDate,@Offerstock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
										IF @Po_StkPosting<>0
										BEGIN
											SET @Po_ErrNo=1
										END						
									END
									ELSE
									BEGIN
										SET @Po_ErrNo=1
									END
								END
								ELSE
								BEGIN
									SET @Po_ErrNo=1
								END
							END
							ELSE
							BEGIN
								SET @Po_ErrNo=1
							END



					END

				IF @Po_ErrNo>0
				BEGIN
					ROLLBACK TRAN
					CLOSE Cur_VatProductBatchTran_GST
					DEALLOCATE Cur_VatProductBatchTran_GST
					SET @Po_ErrNo=1
					RETURN
				END
				
			COMMIT TRAN
			
			FETCH NEXT FROM Cur_VatProductBatchTran_GST INTO @Prdid,@FromPrdBatId,@Lcnid,@FromPriceId,@SalStock,@Offerstock,@ToPrdBatId,@ToPriceId		
			END
			CLOSE Cur_VatProductBatchTran_GST
			DEALLOCATE Cur_VatProductBatchTran_GST

END TRY
BEGIN CATCH	
	SELECT Error_message()
	ROLLBACK TRAN
	CLOSE Cur_VatProductBatchTran_GST
	DEALLOCATE Cur_VatProductBatchTran_GST
	SET @Po_ErrNo=1
END CATCH
END
GO
DELETE FROM ManualConfiguration WHERE PROJECTNAME='GST' AND ModuleId='BATCH_MRPSTOCKTRANSFER' AND MODULENAME='BATCH'
INSERT INTO ManualConfiguration(ProjectName,ModuleId,ModuleName,Description,Status,Condition,ConfigValue,SeqNo)
SELECT 'GST','BATCH_MRPSTOCKTRANSFER','BATCH','MRP Wise Stock Transfer',0,'',0.00,1
GO
DELETE FROM ManualConfiguration WHERE PROJECTNAME='GST' AND ModuleId='BATCH_LATESBATCHSTOCK' AND MODULENAME='BATCH'
INSERT INTO ManualConfiguration(ProjectName,ModuleId,ModuleName,Description,Status,Condition,ConfigValue,SeqNo)
SELECT 'GST','BATCH_LATESBATCHSTOCK','BATCH','Transfer old batch stock new batck',1,'',0.00,1
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='P' AND name='Proc_VatPurchaseBatchTransfer_GST')
DROP PROCEDURE Proc_VatPurchaseBatchTransfer_GST
GO
CREATE PROCEDURE [Proc_VatPurchaseBatchTransfer_GST]
(
	@PurRcptRefNo Varchar(50),
	@Po_ErrNo INT OUTPUT
)
AS
/*********************************
* PROCEDURE		: Proc_VatPurchaseBatchTransfer_GST
* PURPOSE		: To transfer MRP wise Stock
* CREATED BY	: Murugan.R
* CREATED DATE	: 08/05/2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date}		{developer}		{brief modification description}
********************************************************************/
SET NOCOUNT ON
BEGIN

	DECLARE @Po_OutErrNo AS INT
	SET @Po_ErrNo=0
	
	IF EXISTS(SELECT 'X' FROM ManualConfiguration (NOLOCK) WHERE PROJECTNAME='GST' AND ModuleId='BATCH_MRPSTOCKTRANSFER' AND MODULENAME='BATCH' and Status=1)
	BEGIN
		EXEC Proc_VatPurchaseMRPBatchTransfer_GST  @PurRcptRefNo,@Po_ErrNo=@Po_OutErrNo
	END
	ELSE IF EXISTS(SELECT 'X' FROM ManualConfiguration (NOLOCK) WHERE PROJECTNAME='GST' AND ModuleId='BATCH_LATESBATCHSTOCK' AND MODULENAME='BATCH' and Status=1)
	BEGIN	
		 EXEC Proc_VatPurchaseLatestBatchTransfer_GST @PurRcptRefNo,@Po_ErrNo=@Po_OutErrNo
	END 
END
GO
DELETE FROM ManualConfiguration WHERE PROJECTNAME='GST' AND ModuleId='BATCH_MRP' AND MODULENAME='BATCH'
INSERT INTO ManualConfiguration
SELECT 'GST','BATCH_MRP','BATCH','MRP Wise Stock Transfer',1,'',0.00,1
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='P' AND name='Proc_AutoBatchTransfer_GST')
DROP PROCEDURE Proc_AutoBatchTransfer_GST
GO
CREATE     PROCEDURE [Proc_AutoBatchTransfer_GST]
(
	@Po_ErrNo INT OUTPUT
)
AS
/*********************************
* PROCEDURE		: [Proc_AutoBatchTransfer_GST]
* PURPOSE		: To do Batch Transfer automatically while downloading New Batch for Existing Product One time For GST migration
* CREATED		: Murugan.R
* CREATED DATE	: 14/06/2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
SET NOCOUNT ON
BEGIN
	DECLARE @Exist 				AS 	INT
	DECLARE @Trans				AS 	INT
	DECLARE @Tabname 			AS  NVARCHAR(100)
	DECLARE @DestTabname 		AS 	NVARCHAR(100)
	DECLARE @Fldname 			AS  NVARCHAR(100)
	
	DECLARE @PrdDCode 	        AS 	NVARCHAR(100)
	DECLARE @BatchCode			AS 	NVARCHAR(100)
	DECLARE @CmpBatchCode		AS 	NVARCHAR(100)	
	DECLARE @PriceCode			AS 	NVARCHAR(4000)		
	DECLARE @MnfDate			AS 	NVARCHAR(100)
	DECLARE @ExpDate			AS 	NVARCHAR(100)
	DECLARE @TaxGroupCode		AS 	NVARCHAR(100)
	DECLARE @Status				AS 	NVARCHAR(100)
	DECLARE	@BatchSeqCode 		AS 	NVARCHAR(100)
	DECLARE @RefCode           	AS 	NVARCHAR(100)
	DECLARE @PriceValue         AS 	NVARCHAR(100)	
	DECLARE @DefaultPrice       AS 	NVARCHAR(100)	  	
	DECLARE @ExistPrdDCode		AS 	NVARCHAR(100)  	
	DECLARE @ExistBatchCode		AS 	NVARCHAR(100)
	DECLARE @ExistPriceCode		AS 	NVARCHAR(100)  	
	
	DECLARE @PrdId 				AS 	INT
	DECLARE @PrdBatId 			AS 	INT
	DECLARE @PriceId 			AS 	INT
	DECLARE @TaxGroupId 		AS 	INT
	DECLARE @BatchSeqId 		AS 	INT
	DECLARE @BatchStatus		AS 	INT
	DECLARE @SlNo	 			AS 	INT
	DECLARE @NoOfPrices 		AS 	INT
	DECLARE @ExistPrices 		AS 	INT
	DECLARE @DefaultPriceId 	AS 	INT
	DECLARE @ExistPriceId 		AS 	INT
	DECLARE @TransStr 			AS 	NVARCHAR(4000)
	DECLARE @ExistPrdBatMaxId	AS 	INT
	DECLARE @NewPrdBatMaxId		AS 	INT
	DECLARE @ContPrdId 			AS 	INT
	DECLARE @ContPrdBatId 		AS 	INT
	DECLARE @ContExistPrdBatId 	AS 	INT
	DECLARE @ContPriceId 		AS 	INT
	DECLARE @ContractId 		AS 	INT
	DECLARE @ContPriceCode		AS NVARCHAR(100)
	DECLARE @ContPrdBatId1		AS INT
	DECLARE @ContPriceId1		AS INT
	DECLARE @BatchTransfer		AS INT
	DECLARE @SalStock			AS INT
	DECLARE @UnSalStock			AS INT
	DECLARE @OfferStock			AS INT
	DECLARE @FromPrdBatId		AS INT
	DECLARE @FromPrdBatCode		AS NVARCHAR(200)
	DECLARE @ToPrdBatId			AS INT
	DECLARE @LcnId				AS INT
	DECLARE @Po_StkPosting		AS INT
	DECLARE @TransDate			AS DATETIME
	SET @BatchTransfer=0
	DECLARE @BatchMRPTransfer AS TINYINT
	DECLARE @MaxTransDate AS DATETIME
	DECLARE @ReasonId AS INT
	DECLARE @PreFix AS VARCHAR(20)	
	DECLARE @ZPad AS INT
	DECLARE @CurrValue AS NUMERIC(36,0)
	DECLARE @CurrYear AS NUMERIC(36,0)
	DECLARE @GetKeyNumber AS VARCHAR(50)
	DECLARE @GetKeyID	AS NUMERIC(36,0)
	DECLARE @StkTypeId	AS INT
	DECLARE @ToPriceId AS BIGINT
	DECLARE @FromPriceId AS BIGINT
	DECLARE @PrdGCode as Varchar(100)
	---->Needs to be changed
	
	SET @Po_ErrNo=0
	SET @Exist=0
	SET @ExistPrdDCode=''	
	SET @ExistBatchCode=''
	SET @ExistPriceCode=''
	
	SET @DestTabname='ProductBatch'
	SET @Fldname='PrdBatId'
	SET @Tabname = 'ETL_Prk_ProductBatch'
	SET @Exist=0
	
	SET @BatchMRPTransfer=0
	SELECT @BatchMRPTransfer=Status FROM ManualConfiguration WHERE ModuleId='BATCH_MRP'
	IF @BatchMRPTransfer=0
	BEGIN
		RETURN
	END
	
	IF NOT EXISTS(SELECT 'X' FROM GSTConfiguration WHERE ActivationStatus=1 and AcknowledgeStatus=1 and ConsoleAckStatus=1)
	BEGIN
		RETURN
	END

	UPDATE C SET C.Status=1 FROM ProductBatch_Temp_GST A (NOLOCK) 
	INNER JOIN Product B ON B.PrdCCode=A.PrdCCode
	INNER JOIN ProductBatch C ON C.CmpBatCode=A.PrdBatCode and B.PrdId=C.PrdId
	
	SELECT @TransDate=CONVERT(DATETIME,CONVERT(NVARCHAR(10),GETDATE(),121),121)	
	SELECT @MaxTransDate=  MAX(TRANSDATE) FROM StockLedger (NOLOCK)
	IF  @MaxTransDate>@TransDate
	BEGIN
		RETURN
	END
	
	BEGIN TRY
	
			SELECT DISTINCT A.Prdid,Prdccode 
			INTO #StkProduct
			FROM Product A (NOLOCK)
			INNER JOIN Productbatchlocation B (NOLOCK) ON A.Prdid=B.Prdid
			WHERE ((PrdBatLcnSih-PrdBatLcnRessih)+(PrdBatLcnFre-PrdBatLcnResFre)+(PrdBatLcnUih-PrdBatLcnResUih))>0
				
			UPDATE A SET BatchStkStatus=1,DownLoadFlag='Y'  FROM ProductBatch_Temp_GST A WHERE NOT EXISTS(SELECT Prdccode FROM #StkProduct B WHERE A.Prdccode=B.Prdccode)
			
			
			 
			
			SELECT DISTINCT B.Prdid,C.PrdbatId,C.PrdbatCode,DefaultPriceId,A.PrdCCode
			INTO #Producbatch 
			FROM ProductBatch_Temp_GST A (NOLOCK) 
			INNER JOIN Product B (NOLOCK) ON A.PrdCCode=B.PrdCCode
			INNER JOIN Productbatch C (NOLOCK) ON C.PrdBatCode=A.PrdBatCode and B.PrdId=C.PrdId
			WHERE A.BatchStkStatus=0 AND A.DownLoadFlag='D'	
			
			DECLARE Cur_ProductBatch CURSOR
			FOR SELECT DISTINCT PrdId,PrdBatId,PrdBatCode,DefaultPriceId,PrdCCode FROM #Producbatch
			ORDER BY PrdId,PrdBatId,PrdBatCode
			OPEN Cur_ProductBatch
			FETCH NEXT FROM Cur_ProductBatch INTO @PrdId,@PrdBatId,@BatchCode,@ToPriceId,@PrdGCode
			WHILE @@FETCH_STATUS=0
			BEGIN
				--SELECT 'Nanda'
				--SELECT @PrdId,@PrdBatId,@BatchCode
				DECLARE Cur_BatchTransfer CURSOR
				FOR SELECT PBL.LcnId,PBL.PrdBatId,(PBL.PrdBatLcnSih-PBL.PrdBatLcnRessih) AS SalStock,(PBL.PrdBatLcnUih-PBL.PrdBatLcnResUih) AS UnSalStock,
				(PBL.PrdBatLcnFre-PBL.PrdBatLcnResFre) AS OfferStock,DefaultPriceId
				FROM ProductBatchLocation PBL 
				INNER JOIN Productbatch PB ON PB.Prdid=PBL.Prdid and PBL.PrdbatId=PB.PrdbatId
				WHERE PBL.PrdId=@PrdId AND PBL.PrdBatId<>@PrdBatId
				AND ((PBL.PrdBatLcnSih-PBL.PrdBatLcnRessih)+(PBL.PrdBatLcnUih-PBL.PrdBatLcnResUih)+(PBL.PrdBatLcnFre-PBL.PrdBatLcnResFre))>0
				OPEN Cur_BatchTransfer
				FETCH NEXT FROM Cur_BatchTransfer INTO @LcnId,@FromPrdBatId,@SalStock,@UnSalStock,@Offerstock,@FromPriceId
				WHILE @@FETCH_STATUS=0
				BEGIN
					--SELECT @PrdId,@PrdBatId,@LcnId,@FromPrdBatId,@SalStock,@UnSalStock,@Offerstock
					
					SET @Po_ErrNo=0
					
					SELECT TOP 1 @ReasonId=ReasonId from ReasonMaster (NOLOCK) WHERE  BatchTransfer=1 and ReasonCode='R03'

					BEGIN TRAN
					
					IF @SalStock>0
					BEGIN
					

			
						
						SELECT @StkTypeId=StockTypeId FROM StockType (NOLOCK) WHERE SystemStockType=1 and LcnId=@LcnId
						SELECT @PreFix=PreFix ,@ZPad=Zpad,@CurrValue= Currvalue+1,@CurrYear= CurYear
						FROM  Counters (NOLOCK) WHERE TabName='BatchTransfer' and FldName='BatRefNo'


						SET @GetKeyNumber=@PreFix+CAST(SUBSTRING(CAST(@CurrYear as Varchar(10)),3,LEN(@CurrYear)) AS Varchar(10))+REPLICATE('0',CASE WHEN LEN(@CurrValue)>@ZPad THEN (@ZPad+1)-LEN(@CurrValue) ELSE (@ZPad)-LEN(@CurrValue)END)+CAST(@CurrValue as Varchar(10))

						SELECT @GetKeyId =Currvalue+1 FROM Counters WITH (UPDLOCK)  WHERE TabName='BatchTransfer' and FldName='BatRefNo'

						UPDATE Counters SET CurrValue=@GetKeyId  WHERE TabName='BatchTransfer' and FldName='BatRefNo'


						INSERT INTO BatchTransfer(BatRefNo,BatTrfDate,LcnId,PrdId,StockTypeId,FromBatId,ToBatId,TrfQty,ReasonId,
						DocRefNo,Remarks,FromPriceId,ToPriceId,Availability,LastModBy,LastModDate,AuthId,AuthDate)
						SELECT @GetKeyNumber,CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121),@LcnId,@PrdId,@StkTypeId,@FromPrdBatId,@PrdBatId,@SalStock,@ReasonId,
						'','GST batch Transfer',@FromPriceId,@ToPriceId,1,99,CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121),99,CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121)

						
					
						Exec Proc_UpdateProductBatchLocation 1,2,@PrdId,@FromPrdBatId,@LcnId,@TransDate,@SalStock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
						IF @Po_StkPosting=0
						BEGIN
							Exec Proc_UpdateProductBatchLocation 1,1,@PrdId,@PrdBatId,@LcnId,@TransDate,@SalStock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
							IF @Po_StkPosting=0
							BEGIN	
								Exec Proc_UpdateStockLedger 30,1,@PrdId,@FromPrdBatId,@LcnId,@TransDate,@SalStock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
								IF @Po_StkPosting=0
								BEGIN
									Exec Proc_UpdateStockLedger 27,1,@PrdId,@PrdBatId,@LcnId,@TransDate,@SalStock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
									IF @Po_StkPosting<>0
									BEGIN
										SET @Po_ErrNo=1
									END													
								END
								ELSE
								BEGIN
									SET @Po_ErrNo=1
								END
							END
							ELSE
							BEGIN
								SET @Po_ErrNo=1
							END
						END
						ELSE
						BEGIN
							SET @Po_ErrNo=1
						END
					END
					
					IF @UnSalStock>0 and @Po_ErrNo=0
					BEGIN
						SELECT @StkTypeId=StockTypeId FROM StockType (NOLOCK) WHERE SystemStockType=2 and LcnId=@LcnId
						SELECT @PreFix=PreFix ,@ZPad=Zpad,@CurrValue= Currvalue+1,@CurrYear= CurYear 
						FROM  Counters (NOLOCK) WHERE TabName='BatchTransfer' and FldName='BatRefNo'

						SET @GetKeyNumber=@PreFix+CAST(SUBSTRING(CAST(@CurrYear as Varchar(10)),3,LEN(@CurrYear)) AS Varchar(10))+REPLICATE('0',CASE WHEN LEN(@CurrValue)>@ZPad THEN (@ZPad+1)-LEN(@CurrValue) ELSE (@ZPad)-LEN(@CurrValue)END)+CAST(@CurrValue as Varchar(10))

						SELECT @GetKeyId =Currvalue+1 FROM Counters WITH (UPDLOCK)  WHERE TabName='BatchTransfer' and FldName='BatRefNo'

						UPDATE Counters SET CurrValue=@GetKeyId  WHERE TabName='BatchTransfer' and FldName='BatRefNo'


						INSERT INTO BatchTransfer(BatRefNo,BatTrfDate,LcnId,PrdId,StockTypeId,FromBatId,ToBatId,TrfQty,ReasonId,
						DocRefNo,Remarks,FromPriceId,ToPriceId,Availability,LastModBy,LastModDate,AuthId,AuthDate)
						SELECT @GetKeyNumber,CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121),@LcnId,@PrdId,@StkTypeId,@FromPrdBatId,@PrdBatId,@UnSalStock,@ReasonId,
						'','GST batch Transfer',@FromPriceId,@ToPriceId,1,99,CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121),99,CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121)

					
					
						Exec Proc_UpdateProductBatchLocation 2,2,@PrdId,@FromPrdBatId,@LcnId,@TransDate,@UnSalStock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
						IF @Po_StkPosting=0
						BEGIN
							Exec Proc_UpdateProductBatchLocation 2,1,@PrdId,@PrdBatId,@LcnId,@TransDate,@UnSalStock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
							IF @Po_StkPosting=0
							BEGIN	
								Exec Proc_UpdateStockLedger 31,1,@PrdId,@FromPrdBatId,@LcnId,@TransDate,@UnSalStock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
								IF @Po_StkPosting=0
								BEGIN
									Exec Proc_UpdateStockLedger 28,1,@PrdId,@PrdBatId,@LcnId,@TransDate,@UnSalStock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
									IF @Po_StkPosting<>0
									BEGIN
										SET @Po_ErrNo=1
									END						
								END
								ELSE
								BEGIN
									SET @Po_ErrNo=1
								END
							END
							ELSE
							BEGIN
								SET @Po_ErrNo=1
							END
						END
						ELSE
						BEGIN
							SET @Po_ErrNo=1
						END
					END
						
					IF @Offerstock>0 and @Po_ErrNo=0
					BEGIN
					
						SELECT @StkTypeId=StockTypeId FROM StockType (NOLOCK) WHERE SystemStockType=3 and LcnId=@LcnId
			 			SELECT @PreFix=PreFix ,@ZPad=Zpad,@CurrValue= Currvalue+1 ,@CurrYear= CurYear
			 			FROM  Counters (NOLOCK) WHERE TabName='BatchTransfer' and FldName='BatRefNo'
					 	
			 			SET @GetKeyNumber=@PreFix+CAST(SUBSTRING(CAST(@CurrYear as Varchar(10)),3,LEN(@CurrYear)) AS Varchar(10))+REPLICATE('0',CASE WHEN LEN(@CurrValue)>@ZPad THEN (@ZPad+1)-LEN(@CurrValue) ELSE (@ZPad)-LEN(@CurrValue)END)+CAST(@CurrValue as Varchar(10))
						
						SELECT @GetKeyId =Currvalue+1 FROM Counters WITH (UPDLOCK)  WHERE TabName='BatchTransfer' and FldName='BatRefNo'
						
						UPDATE Counters SET CurrValue=@GetKeyId  WHERE TabName='BatchTransfer' and FldName='BatRefNo'
									
						
						INSERT INTO BatchTransfer(BatRefNo,BatTrfDate,LcnId,PrdId,StockTypeId,FromBatId,ToBatId,TrfQty,ReasonId,
						DocRefNo,Remarks,FromPriceId,ToPriceId,Availability,LastModBy,LastModDate,AuthId,AuthDate)
						SELECT @GetKeyNumber,CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121),@LcnId,@PrdId,@StkTypeId,@FromPrdBatId,@PrdBatId,@Offerstock,@ReasonId,
						'','GST batch Transfer',@FromPriceId,@ToPriceId,1,99,CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121),99,CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121)
					
					
					
						Exec Proc_UpdateProductBatchLocation 3,2,@PrdId,@FromPrdBatId,@LcnId,@TransDate,@Offerstock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
						IF @Po_StkPosting=0
						BEGIN
							Exec Proc_UpdateProductBatchLocation 3,1,@PrdId,@PrdBatId,@LcnId,@TransDate,@Offerstock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
							IF @Po_StkPosting=0
							BEGIN	
								Exec Proc_UpdateStockLedger 32,1,@PrdId,@FromPrdBatId,@LcnId,@TransDate,@Offerstock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
								IF @Po_StkPosting=0
								BEGIN
									Exec Proc_UpdateStockLedger 29,1,@PrdId,@PrdBatId,@LcnId,@TransDate,@Offerstock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
									IF @Po_StkPosting<>0
									BEGIN
										SET @Po_ErrNo=1
									END						
								END
								ELSE
								BEGIN
									SET @Po_ErrNo=1
								END
							END
							ELSE
							BEGIN
								SET @Po_ErrNo=1
							END
						END
						ELSE
						BEGIN
							SET @Po_ErrNo=1
						END
					END
					IF @Po_ErrNo>0
					BEGIN
						SET @Po_ErrNo=1
						ROLLBACK TRAN
						CLOSE Cur_BatchTransfer
						DEALLOCATE Cur_BatchTransfer
						CLOSE Cur_ProductBatch
						DEALLOCATE Cur_ProductBatch
						INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
						VALUES(@FromPrdBatId,'','Error','Error')
						RETURN
					END
						UPDATE ProductBatch_Temp_GST SET BatchStkStatus=1 , DownLoadFlag='Y'  WHERE  PrdCCode= @PrdGCode and PrdBatCode=@BatchCode
						
						UPDATE Productbatch SET Status=1  WHERE  Prdid= @PrdId and PrdbatId=@PrdBatId
					
						COMMIT TRAN
						
					FETCH NEXT FROM Cur_BatchTransfer INTO @LcnId,@FromPrdBatId,@SalStock,@UnSalStock,@Offerstock,@FromPriceId
				END
				CLOSE Cur_BatchTransfer
				DEALLOCATE Cur_BatchTransfer
				FETCH NEXT FROM Cur_ProductBatch INTO @PrdId,@PrdBatId,@BatchCode,@ToPriceId,@PrdGCode
			END
			CLOSE Cur_ProductBatch
			DEALLOCATE Cur_ProductBatch
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN
		SET @Po_ErrNo=1
		CLOSE Cur_BatchTransfer
		DEALLOCATE Cur_BatchTransfer
		CLOSE Cur_ProductBatch
		DEALLOCATE Cur_ProductBatch
		RETURN		
	END CATCH			
	RETURN	
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='P' AND NAME='Proc_Import_ProductBatch_GST')
DROP PROCEDURE Proc_Import_ProductBatch_GST
GO
CREATE  PROCEDURE Proc_Import_ProductBatch_GST
(
	@Pi_Records TEXT
)
AS
/***************************************************************************************************
* PROCEDURE		: Proc_Cn2Cs_ProductBatch_GST
* PURPOSE		: To Insert and Update records in the Tables ProductBatch and ProductBatchDetails
* CREATED BY	: Murugan.R
* CREATED DATE	: 11/05/2017
* DATE      AUTHOR     DESCRIPTION
-----------------------------------------------------------------------------------------------------
* {date} {developer}  {brief modification description}
*****************************************************************************************************/
SET NOCOUNT ON
BEGIN
	DECLARE @hDoc INTEGER
	EXEC sp_xml_preparedocument @hDoc OUTPUT,@Pi_Records
	
	INSERT INTO Cn2Cs_Prk_ProductBatch_GST(DistCode,PrdCCode,PrdBatCode,ManufacturingDate,ExpiryDate,EffectiveDate,
	MRP,ListPrice,SellingRate,ClaimRate,AddRate1,AddRate2,AddRate3,AddRate4,AddRate5,AddRate6,DownLoadFlag)
	SELECT DistCode,PrdCCode,PrdBatCode,ManufacturingDate,ExpiryDate,EffectiveDate,MRP,ListPrice,SellingRate,
	ClaimRate,AddRate1,AddRate2,AddRate3,AddRate4,AddRate5,AddRate6,DownLoadFlag
	FROM OPENXML (@hdoc,'/Root/Cn2Cs_Prk_ProductBatch_GST',1)
	WITH (
			[DistCode]			NVARCHAR(50),
			[PrdCCode]			NVARCHAR(200),
			[PrdBatCode]		NVARCHAR(200),
			[ManufacturingDate] DATETIME ,
			[ExpiryDate]		DATETIME,
			[EffectiveDate]		DATETIME,
			[MRP]				NUMERIC(38,6) ,
			[ListPrice]			NUMERIC(38,6) ,
			[SellingRate]		NUMERIC(38,6),
			[ClaimRate]			NUMERIC(38,6),
			[AddRate1]			NUMERIC(38,6),
			[AddRate2]			NUMERIC(38,6),
			[AddRate3]			NUMERIC(38,6),
			[AddRate4]			NUMERIC(38,6),
			[AddRate5]			NUMERIC(38,6),
			[AddRate6]			NUMERIC(38,6),
			[DownLoadFlag]		NVARCHAR(10)
	     ) XMLObj
	EXECUTE sp_xml_removedocument @hDoc
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='P' AND NAME='Proc_Cn2Cs_ProductBatch_GST')
DROP PROCEDURE Proc_Cn2Cs_ProductBatch_GST
GO
/* 
   BEGIN TRANSACTION
   delete FROM Errorlog 
   EXEC Proc_Cn2Cs_ProductBatch 0
   SELECT * FROM Productbatch WITH(NOLOCK) WHERE PrdBatId = 29809
   SELECT * FROM Productbatchdetails WITH(NOLOCK) WHERE PrdBatId = 29809
   SELECT * FROM ProductBatch (NOLOCK) WHERE PrdId = 1741
   SELECT * FROM Errorlog WITH(NOLOCK)
   ROLLBACK TRANSACTION
*/
CREATE PROCEDURE Proc_Cn2Cs_ProductBatch_GST
(
       @Po_ErrNo INT OUTPUT
)
AS
/***************************************************************************************************
* PROCEDURE		: Proc_Cn2Cs_ProductBatch_GST
* PURPOSE		: To Insert and Update records in the Tables ProductBatch and ProductBatchDetails
* CREATED BY	: Murugan.R
* CREATED DATE	: 11/05/2017
* DATE      AUTHOR     DESCRIPTION
-----------------------------------------------------------------------------------------------------
* {date} {developer}  {brief modification description}
*****************************************************************************************************/
SET NOCOUNT ON
BEGIN
	SET @Po_ErrNo =0
	DECLARE @GSTEnabled as TINYINT
	DELETE FROM Cn2Cs_Prk_ProductBatch_GST WHERE   DownLoadFlag='Y'

	INSERT INTO ProductBatch_Temp_GST(DistCode,PrdCCode,PrdBatCode,ManufacturingDate,ExpiryDate,EffectiveDate,MRP,
	ListPrice,SellingRate,ClaimRate,AddRate1,AddRate2,AddRate3,AddRate4,AddRate5,
	AddRate6,DownLoadFlag,BatchStkStatus)	
	SELECT DISTINCT DistCode,PrdCCode,PrdBatCode,ManufacturingDate,ExpiryDate,EffectiveDate,MRP,
	ListPrice,SellingRate,ClaimRate,AddRate1,AddRate2,AddRate3,AddRate4,AddRate5,
	AddRate6,DownLoadFlag,0 as BatchStkStatus
	FROM Cn2Cs_Prk_ProductBatch_GST A WHERE 
	NOT EXISTS (
	SELECT PrdCCode,PrdBatCode,MRP FROM ProductBatch_Temp_GST  B WHERE 
	A.PrdCCode=B.PrdCCode and A.PrdBatCode=B.PrdBatCode AND CAST(A.MRP as Numeric(18,6))=CAST(B.MRP as Numeric(18,6)))
	AND A.DownLoadFlag='D'


	SET @GSTEnabled=0

	IF EXISTS(SELECT 'X' FROM GSTConfiguration WHERE ActivationStatus=1 and AcknowledgeStatus=1 and ConsoleAckStatus=1)
	BEGIN
		SET @GSTEnabled=1
	END
	
	IF EXISTS (SELECT * FROM SysObjects WHERE Name = 'PrdBatToAvoid' AND XTYPE = 'U')
	BEGIN
		DROP TABLE PrdBatToAvoid	
	END
	CREATE TABLE PrdBatToAvoid
	(
		PrdCCode NVARCHAR(200),
		PrdBatCode NVARCHAR(200)
	)
	DECLARE @ExistingBatchDetails	TABLE
	(
		PrdId		NUMERIC(18,0),
		PrdCCode	VARCHAR(100),
		PrdBatCode	VARCHAR(100),
		PriceCode	VARCHAR(500),
		OldLSP		NUMERIC(18,0),
		PrdBatId	NUMERIC(18,0),
		PriceId		NUMERIC(18,0)
	)
	DECLARE @ProductBatchWithCounter TABLE
	(
		Slno			NUMERIC(18,0) IDENTITY(1,1),
		TransNo			NUMERIC(18,0),
		PrdId			NUMERIC(18,0),
		PrdCCode		VARCHAR(100),
		PrdBatCode		VARCHAR(100),
		MnfDate			DATETIME,
		ExpDate			DATETIME		
	)	
	DECLARE @ProductBatchPriceWithCounter TABLE
	(
		Slno			NUMERIC(18,0) IDENTITY(1,1),
		TransNo			NUMERIC(18,0),
		PrdId			NUMERIC(18,0),
		PrdBatId		NUMERIC(18,0),
		PriceCode		NVARCHAR(1000),
		MRP				NUMERIC(18,6),
		ListPrice		NUMERIC(18,6),
		SellingRate		NUMERIC(18,6),
		ClaimRate		NUMERIC(18,6),
		AddRate1		NUMERIC(18,6)
	)
	DECLARE @ContractPrice TABLE
	(
	   PrdId NUMERIC(18,0),
	   PrdBatId NUMERIC(18,0)
	)
	
	DECLARE @ContractBatchPrice TABLE
    (
	   ContractId       NUMERIC(18,0),
	   CtgMainId        NUMERIC(18,0),
	   PrdId            NUMERIC(18,0),
	   PrdBatId         NUMERIC(18,0),
	   PriceId          NUMERIC(18,0),
	   PriceCode        NVARCHAR(500)
    )
    DECLARE @ProductBatchDetails TABLE
	(
	   PrdId                NUMERIC(18,0),
	   PrdBatId      NUMERIC(18,0),
	   PriceId              NUMERIC(18,0),
	   PriceCode            NVARCHAR(500),
	   NewBatchId           NUMERIC(18,0),
	   Slno                 INT,
	   PrdBatDetailValue    NUMERIC(36,4),
	   NewPriceId           NUMERIC(18,0)
	)
	--Added By Sathishkumar Veeramani 2015/01/08
	DECLARE @ExistingSellingPriceDetails TABLE
	(
	    PrdId        NUMERIC(18,0),
	    PrdBatId     NUMERIC(18,0),
	    PriceId      NUMERIC(18,0)
	)
	DECLARE @ExistingListPriceDetails TABLE
	(
	    PrdId        NUMERIC(18,0),
	    PrdBatId     NUMERIC(18,0),
	    PriceId      NUMERIC(18,0)
	)
	--Till Here  
	
	DECLARE @BatSeqId			AS	INT
	DECLARE @ValDiffRefNo		AS	VARCHAR(100)
	DECLARE @ExistPrdBatMaxId	AS 	INT
	DECLARE @NewPrdBatMaxId		AS 	INT	
	DECLARE @ContPriceId		AS 	NUMERIC(18,0)
	DECLARE @OldPriceIdExt 		AS 	NUMERIC(18,0)
	DECLARE @OldPriceId 		AS 	NUMERIC(18,0)
	DECLARE @NewPriceId			AS  INT
	DECLARE @ContPrdId          AS  INT
    DECLARE @ContPrdBatId       AS  INT
    DECLARE @ContPriceId1       AS  INT
    DECLARE @PriceId            AS  INT 
    DECLARE @PriceBatch         AS  INT
    DECLARE @BatchTransfer		AS	INT
	DECLARE @Po_BatchTransfer	AS	INT
	
	SELECT @OldPriceId=ISNULL(MAX(PriceId),0) FROM ProductBatchDetails WITH (NOLOCK)		
	SELECT @BatSeqId=MAX(BatchSeqId) FROM BatchCreationMaster WITH (NOLOCK)
	SELECT @ExistPrdBatMaxId=ISNULL(MAX(PrdBatId),0) FROM ProductBatch WITH (NOLOCK)
	SET @Po_ErrNo =0
	IF EXISTS(SELECT DISTINCT PrdCCode FROM Cn2Cs_Prk_ProductBatch_GST WITH (NOLOCK)
	WHERE PrdCCode NOT IN (SELECT PrdCCode FROM Product WITH (NOLOCK)) AND DownLoadFlag='D')
	BEGIN
		INSERT INTO PrdBatToAvoid(PrdCCode,PrdBatCode)
		SELECT DISTINCT PrdCCode,PrdBatCode FROM Cn2Cs_Prk_ProductBatch_GST WITH (NOLOCK)
		WHERE PrdCCode NOT IN (SELECT PrdCCode FROM Product WITH (NOLOCK)) AND DownLoadFlag='D'
		
		INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
		SELECT DISTINCT 1,'Product Batch','PrdCCode','Product :'+PrdCCode+' not available'
		FROM Cn2Cs_Prk_ProductBatch_GST	WITH (NOLOCK) WHERE PrdCCode NOT IN (SELECT PrdCCode FROM Product WITH (NOLOCK)) 
		AND DownLoadFlag='D'
		
		--->Added By Nanda on 05/05/2010
		INSERT INTO ReDownloadRequest(DistCode,Process,RefNo,Download,PrdCCode,PrdBatCode,UploadFlag)
		SELECT DISTINCT DistCode,'Product Batch',PrdBatCode,'Product',PrdCCode,'','N' FROM Cn2Cs_Prk_ProductBatch_GST WITH (NOLOCK) 
		WHERE PrdCCode NOT IN (SELECT PrdCCode FROM Product WITH (NOLOCK)) AND DownLoadFlag='D'
		--->Till Here				
	END
	IF EXISTS(SELECT DISTINCT PrdCCode FROM Cn2Cs_Prk_ProductBatch_GST WITH (NOLOCK)
	WHERE LEN(ISNULL(PrdBatCode,''))=0  AND DownLoadFlag='D')
	BEGIN
		INSERT INTO PrdBatToAvoid(PrdCCode,PrdBatCode)
		SELECT DISTINCT PrdCCode,PrdBatCode FROM Cn2Cs_Prk_ProductBatch_GST WITH (NOLOCK)
		WHERE LEN(ISNULL(PrdBatCode,''))=0 AND DownLoadFlag='D'
		
		INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
		SELECT DISTINCT 1,'Product Batch','PrdBatCode','Batch Code should not be empty for Product:'+PrdCCode
		FROM Cn2Cs_Prk_ProductBatch_GST WITH (NOLOCK)
		WHERE LEN(ISNULL(PrdBatCode,''))=0 AND DownLoadFlag='D'
	END
		
	INSERT INTO @ExistingBatchDetails (PrdId,PrdCCode,PrdBatCode,PriceCode,OldLSP,PrdBatId,PriceId)
	SELECT DISTINCT B.PrdId,B.PrdCCode,A.PrdBatCode,A.PrdBatCode+'-'+CAST(MRP AS NVARCHAR(25))+'-'+CAST(ListPrice AS NVARCHAR(25))+'-'+
	CAST(SellingRate AS NVARCHAR(25))+'-'+CAST(ClaimRate AS NVARCHAR(25))+'-'+CAST(AddRate1 AS NVARCHAR(25)) AS PriceCode,
	ISNULL(D.PrdBatDetailValue,0) AS OldLSP,C.PrdBatId,D.PrdBatId FROM Cn2Cs_Prk_ProductBatch_GST A (NOLOCK) 
	INNER JOIN Product B (NOLOCK) ON A.PrdCCode=B.PrdCCode
	INNER JOIN ProductBatch C (NOLOCK)ON A.PrdBatCode=C.PrdBatCode AND B.PrdId=C.PrdId
	INNER JOIN ProductBatchDetails D (NOLOCK) ON  D.PrdBatId=C.PrdBatId AND D.DefaultPrice=1 AND D.SlNo=2
	WHERE A.PrdBatCode NOT IN (SELECT PrdBatCode FROM PrdBatToAvoid) AND DownLoadFlag='D'
	
	--Added By Sathishkumar Veeramani 2015/01/08
	--Selling Rate Validation
	INSERT INTO @ExistingSellingPriceDetails (PrdId,PrdBatId,PriceId)
	SELECT DISTINCT PrdId,B.PrdBatId,C.PriceId FROM Cn2Cs_Prk_ProductBatch_GST A (NOLOCK) 
	INNER JOIN @ExistingBatchDetails B ON A.PrdCCode = B.PrdCCode AND A.PrdBatCode = B.PrdBatCode
	INNER JOIN ProductBatchDetails C (NOLOCK) ON B.PrdBatId = C.PrdBatId AND A.SellingRate = C.PrdBatDetailValue
	WHERE C.SLNo = 3
	
	--List Price Validation
	INSERT INTO @ExistingListPriceDetails (PrdId,PrdBatId,PriceId)
	SELECT DISTINCT PrdId,B.PrdBatId,C.PriceId FROM Cn2Cs_Prk_ProductBatch_GST A (NOLOCK) 
	INNER JOIN @ExistingBatchDetails B ON A.PrdCCode = B.PrdCCode AND A.PrdBatCode = B.PrdBatCode
	INNER JOIN ProductBatchDetails C (NOLOCK) ON B.PrdBatId = C.PrdBatId AND A.ListPrice = C.PrdBatDetailValue
	WHERE C.SLNo = 2
	
	SELECT DISTINCT A.PrdId,A.PrdBatId,MAX(A.PriceId) AS PriceId INTO #ExistinPriceCloning 
	FROM @ExistingSellingPriceDetails A 
	INNER JOIN @ExistingListPriceDetails B ON A.PrdId = B.PrdId
	AND A.PrdBatId = B.PrdBatId AND A.PriceId = B.PriceId GROUP BY A.PrdId,A.PrdBatId
	
	IF EXISTS (SELECT DISTINCT PrdId,PrdBatId,PriceId FROM #ExistinPriceCloning)
	BEGIN
	    UPDATE A SET A.DefaultPrice = 0 FROM ProductBatchDetails A (NOLOCK) 
	    INNER JOIN #ExistinPriceCloning B ON A.PrdBatId = B.PrdBatId
	    
	    UPDATE A SET A.DefaultPrice = 1 FROM ProductBatchDetails A (NOLOCK)
	    INNER JOIN #ExistinPriceCloning B ON A.PrdBatId = B.PrdBatId AND A.PriceId = B.PriceId
	    
	    UPDATE A SET A.DefaultPriceId = B.PriceId FROM ProductBatch A (NOLOCK) 
	    INNER JOIN #ExistinPriceCloning B ON A.PrdBatId = B.PrdBatId	    
	END
	--Till Here
	
	--Added By Sathishkumar Veeramani 2015/01/08
	--Batch Cloning Details
    DECLARE @BatchPriceId AS NUMERIC(18,0)
    SELECT @BatchPriceId = ISNULL(MAX(PriceId),0) FROM ProductBatchDetails (NOLOCK)
	SELECT DISTINCT CAST(DENSE_RANK() OVER (ORDER BY MAX(PrdBatId),MRP,ListPrice,SellingRate,ClaimRate) AS NUMERIC(18,0))+@BatchPriceId AS PriceId,
	MAX(PrdBatId) AS PrdBatId,A.PrdBatCode+'-'+CAST(MRP AS NVARCHAR(25))+'-'+CAST(ListPrice AS NVARCHAR(25))+'-'+CAST(SellingRate AS NVARCHAR(25))+'-'+
	CAST(ClaimRate AS NVARCHAR(25))+'-'+CAST(AddRate1 AS NVARCHAR(25)) AS PriceCode,MRP,ListPrice,
	SellingRate,ClaimRate,AddRate1 INTO #BatchCloningDetails FROM Cn2Cs_Prk_ProductBatch_GST A (NOLOCK)
	INNER JOIN Product B (NOLOCK) ON A.PrdCCode = B.PrdCCode 
	INNER JOIN ProductBatch C (NOLOCK) ON B.PrdId = C.PrdId AND A.PrdBatCode = C.PrdBatCode WHERE DownloadFlag = 'D'
	AND NOT EXISTS (SELECT DISTINCT PrdId,PrdBatId FROM #ExistinPriceCloning D WHERE C.PrdId = D.PrdId AND C.PrdBatId = D.PrdBatId) 
	GROUP BY A.PrdBatCode,MRP,ListPrice,SellingRate,ClaimRate,AddRate1
	
	IF EXISTS (SELECT DISTINCT PrdBatId FROM #BatchCloningDetails)
	BEGIN
	    UPDATE A SET DefaultPrice = 0 FROM ProductBatchDetails A WITH(NOLOCK) 
		INNER JOIN #BatchCloningDetails B ON A.PrdBatId = B.PrdBatId
			    
		INSERT INTO ProductBatchDetails (PriceId,PrdBatId,PriceCode,BatchSeqId,SLNo,PrdBatDetailValue,DefaultPrice,PriceStatus,
		Availability,LastModBy,LastModDate,AuthId,AuthDate,XMLUpload)
		SELECT DISTINCT PriceId,PrdBatId,PriceCode,1,SlNo,Rate,1,1,1,1,GETDATE(),1,GETDATE(),0 FROM(
		SELECT DISTINCT PriceId,PrdBatId,PriceCode,1 AS SlNo,MRP AS Rate FROM #BatchCloningDetails UNION
		SELECT DISTINCT PriceId,PrdBatId,PriceCode,2 AS SlNo,ListPrice AS Rate FROM #BatchCloningDetails UNION
		SELECT DISTINCT PriceId,PrdBatId,PriceCode,3 AS SlNo,SellingRate AS Rate FROM #BatchCloningDetails UNION
		SELECT DISTINCT PriceId,PrdBatId,PriceCode,4 AS SlNo,ClaimRate AS Rate FROM #BatchCloningDetails)Qry ORDER BY PrdBatId
		SELECT @BatchPriceId = ISNULL(MAX(PriceId),0) FROM ProductBatchDetails (NOLOCK)
		UPDATE Counters SET CurrValue = @BatchPriceId WHERE TabName = 'ProductBatchDetails' AND FldName = 'PriceId'
		
        UPDATE A SET DefaultPriceId = B.PriceId FROM ProductBatch A WITH(NOLOCK) 
		INNER JOIN #BatchCloningDetails B ON A.PrdBatId = B.PrdBatId
    END
	--Till Here
		
	IF EXISTS (SELECT * FROM @ExistingBatchDetails)
	BEGIN
		UPDATE A SET MnfDate=C.ManufacturingDate,ExpDate=ExpiryDate
		FROM ProductBatch A (NOLOCK) INNER JOIN @ExistingBatchDetails B ON A.PrdId=B.PrdId AND A.PrdBatId=B.PrdBatId
		INNER JOIN Cn2Cs_Prk_ProductBatch_GST C (NOLOCK) ON A.PrdBatCode=C.PrdBatCode  AND B.PrdCCode=C.PrdCCode
		WHERE C.DownLoadFlag='D'
	
		UPDATE Cn2Cs_Prk_ProductBatch_GST SET DownLoadFlag='Y' 
		WHERE PrdCCode+'~'+PrdBatCode IN (SELECT PrdCCode+'~'+PrdBatCode FROM @ExistingBatchDetails) AND DownLoadFlag='D' 
	END
	
	DECLARE @Count1	NUMERIC(18,0)
	DECLARE @Count2	NUMERIC(18,0)
	SELECT @Count1=COUNT(*) FROM Cn2Cs_Prk_ProductBatch_GST
	SELECT @Count2=COUNT(*) FROM @ExistingBatchDetails
	IF @Count1<>@Count2
		BEGIN
	--IF NOT EXISTS (SELECT * FROM @ExistingBatchDetails)
	--BEGIN
	---New ProductBatch		
		INSERT INTO @ProductBatchWithCounter
		SELECT DISTINCT (SELECT CurrValue FROM Counters (NOLOCK) WHERE TabName='ProductBatch' AND FldName='PrdBatId'),
		B.PrdId,A.PrdCCode,A.PrdBatCode,ManufacturingDate,ExpiryDate FROM Cn2Cs_Prk_ProductBatch_GST A (NOLOCK) 
		INNER JOIN Product B (NOLOCK) ON A.PrdCCode=B.PrdCCode WHERE NOT EXISTS (SELECT PrdBatCode FROM ProductBatch C (NOLOCK) 
		WHERE C.PrdBatCode=A.PrdBatCode AND B.PrdId=C.PrdId)AND 
		A.PrdCCode+'~'+A.PrdBatCode NOT IN (SELECT PrdCCode+'~'+PrdBatCode FROM PrdBatToAvoid) AND A.DownLoadFlag='D'
		ORDER BY ManufacturingDate ASC --Muthuvel
		
			
		UPDATE @ProductBatchWithCounter SET TransNo=TransNo+Slno
	--Existing ProductBatch 
			INSERT INTO @ProductBatchWithCounter
			SELECT DISTINCT C.PrdBatId,B.PrdId,A.PrdCCode,A.PrdBatCode,
			ManufacturingDate,ExpiryDate FROM Cn2Cs_Prk_ProductBatch_GST A (NOLOCK) INNER JOIN Product B (NOLOCK) ON A.PrdCCode=B.PrdCCode
			INNER JOIN ProductBatch C ON B.PrdId = C.PrdId AND C.PrdBatCode = A.PrdBatCode WHERE 
			NOT EXISTS (SELECT PrdBatId FROM ProductBatchDetails D(NOLOCK) WHERE D.PrdBatId = C.PrdBatId AND D.PriceId = C.DefaultPriceId)	
			AND  A.PrdCCode+'~'+A.PrdBatCode NOT IN (SELECT PrdCCode+'~'+PrdBatCode FROM PrdBatToAvoid) AND A.DownLoadFlag='D'
			AND  A.PrdCCode+'~'+A.PrdBatCode NOT IN (SELECT PrdCCode+'~'+PrdBatCode FROM @ProductBatchWithCounter)
	
	 --Product Batch   
		INSERT INTO ProductBatch(PrdId,PrdBatId,PrdBatCode,CmpBatCode,MnfDate,ExpDate,Status,
		TaxGroupId,BatchSeqId,DecPoints,DefaultPriceId,EnableCloning,Availability,LastModBy,LastModDate,AuthId,AuthDate)
		SELECT DISTINCT A.PrdId,TransNo,PrdBatCode,PrdBatCode,MnfDate,ExpDate,
		CASE @GSTEnabled WHEN 1 THEN 1 ELSE 0 END as Status,
		B.TaxGroupId,@BatSeqId,
		6,0,0,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchWithCounter A 
		INNER JOIN Product B ON A.PrdId=B.PrdId WHERE NOT EXISTS (SELECT PrdBatCode FROM ProductBatch C WHERE A.PrdId = C.PrdId 
		AND A.PrdBatCode = C.PrdBatCode)
    --END 
		END
	IF EXISTS (SELECT * FROM @ProductBatchWithCounter) 
	BEGIN
		UPDATE Counters SET CurrValue = (SELECT MAX(PrdBatId) FROM ProductBatch) WHERE TabName = 'ProductBatch' AND FldName = 'prdbatid'
	
		INSERT INTO @ProductBatchPriceWithCounter
		SELECT DISTINCT (SELECT CurrValue FROM Counters (NOLOCK) WHERE TabName='ProductBatchDetails' AND FldName='PriceId'),A.PrdId,A.TransNo,
		A.PrdBatCode+'-'+CAST(MRP AS NVARCHAR(25))+'-'+CAST(ListPrice AS NVARCHAR(25))+'-'+
		CAST(SellingRate AS NVARCHAR(25))+'-'+CAST(ClaimRate AS NVARCHAR(25))+'-'+CAST(AddRate1 AS NVARCHAR(25)),MRP,ListPrice,
		SellingRate,ClaimRate,AddRate1 FROM @ProductBatchWithCounter A INNER JOIN Cn2Cs_Prk_ProductBatch_GST B WITH (NOLOCK)
		ON A.PrdCCode=B.PrdCCode AND A.PrdBatCode=B.PrdBatCode WHERE B.DownLoadFlag='D'
		
		UPDATE @ProductBatchPriceWithCounter SET TransNo=TransNo+Slno
				
		UPDATE A SET A.DefaultPrice=0 FROM ProductBatchDetails A WITH (NOLOCK),@ProductBatchPriceWithCounter B  
	    WHERE A.PrdBatId = B.PrdBatId
		
	END			
	
	IF (SELECT COUNT(*) FROM BatchCreation WHERE BatchSeqId=@BatSeqId)=4
	BEGIN
		INSERT INTO ProductBatchDetails(PriceId,PrdBatId,PriceCode,BatchSeqId,SLNo,PrdBatDetailValue,
		DefaultPrice,PriceStatus,Availability,LastModBy,LastModDate,AuthId,AuthDate)
		SELECT DISTINCT TransNo,PrdBatId,PriceCode,@BatSeqId,1,MRP,1,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchPriceWithCounter
		UNION
		SELECT DISTINCT TransNo,PrdBatId,PriceCode,@BatSeqId,2,ListPrice,1,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchPriceWithCounter
		UNION
		SELECT DISTINCT TransNo,PrdBatId,PriceCode,@BatSeqId,3,SellingRate,1,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchPriceWithCounter
		UNION
		SELECT DISTINCT TransNo,PrdBatId,PriceCode,@BatSeqId,4,ClaimRate,1,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchPriceWithCounter
	END
	ELSE IF (SELECT COUNT(*) FROM BatchCreation WHERE BatchSeqId=@BatSeqId)=5
	BEGIN
		INSERT INTO ProductBatchDetails(PriceId,PrdBatId,PriceCode,BatchSeqId,SLNo,PrdBatDetailValue,
		DefaultPrice,PriceStatus,Availability,LastModBy,LastModDate,AuthId,AuthDate)
		SELECT DISTINCT TransNo,PrdBatId,PriceCode,@BatSeqId,1,MRP,1,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchPriceWithCounter
		UNION
		SELECT DISTINCT TransNo,PrdBatId,PriceCode,@BatSeqId,2,ListPrice,1,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchPriceWithCounter
		UNION
		SELECT DISTINCT TransNo,PrdBatId,PriceCode,@BatSeqId,3,SellingRate,1,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchPriceWithCounter
		UNION
		SELECT DISTINCT TransNo,PrdBatId,PriceCode,@BatSeqId,4,ClaimRate,1,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchPriceWithCounter
		UNION
		SELECT DISTINCT TransNo,PrdBatId,PriceCode,@BatSeqId,5,AddRate1,1,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121) FROM @ProductBatchPriceWithCounter
	END	
	UPDATE A SET DefaultPriceId=C.TransNo FROM ProductBatch A INNER JOIN @ProductBatchPriceWithCounter C ON C.PrdBatId=A.PrdBatId AND A.PrdId=C.PrdId	
	
	IF EXISTS(SELECT * FROM @ProductBatchPriceWithCounter) 
	BEGIN
		UPDATE Counters SET CurrValue = (SELECT MAX(PriceId) FROM ProductBatchDetails) 	WHERE TabName = 'ProductBatchDetails' AND FldName = 'PriceId'	
	END
	
	--Batch Cloning Price Details
	
	IF EXISTS(SELECT * FROM Configuration WHERE ModuleId='BotreeRateForOldBatch' AND ModuleName='Botree Product Batch Download' AND Status=1)
	BEGIN
		IF EXISTS(SELECT * FROM @ProductBatchPriceWithCounter A INNER JOIN @ExistingBatchDetails B ON A.PrdBatId=B.PrdBatId AND A.PrdId=B.PrdId
		WHERE (B.OldLSP-A.ListPrice)<>0 AND Slno=2)
		BEGIN
			SELECT @ValDiffRefNo = dbo.Fn_GetPrimaryKeyString('ValueDifferenceClaim','ValDiffRefNo',CAST(YEAR(GetDate()) AS INT),MONTH(GETDATE()))
			
			INSERT INTO ValueDifferenceClaim(ValDiffRefNo,Date,PrdId,PrdBatId,OldPriceId,NewPriceId,OldPrice,NewPrice,Qty,
			ValueDiff,ClaimAmt,Availability,LastModBy,LastModDate,AuthId,AuthDate)
			
			SELECT @ValDiffRefNo,GETDATE(),A.PrdId,A.PrdBatID,B.PriceId,C.TransNo,B.OldLsp,C.ListPrice,
			ISNULL(SUM(A.PrdBatLcnSih+A.PrdBatLcnUih-A.PrdBatLcnRessih-A.PrdBatLcnResUih),0),B.OldLsp-C.ListPrice,
			ISNULL(SUM(A.PrdBatLcnSih+A.PrdBatLcnUih-A.PrdBatLcnRessih-A.PrdBatLcnResUih),0)*(B.OldLsp-C.ListPrice),
			1,1,GETDATE(),1,GETDATE() FROM ProductBatchLocation A INNER JOIN @ExistingBatchDetails B ON A.PrdId=B.PrdId AND A.PrdBatID=B.PrdBatId 
			INNER JOIN @ProductBatchPriceWithCounter C ON A.PrdBatId=C.PrdBatId AND A.PrdId=C.PrdId
			WHERE C.Slno=2	GROUP BY A.PrdId,A.PrdBatID,B.PriceId,C.TransNo,B.OldLsp,C.ListPrice
			
			UPDATE Counters SET CurrValue = CurrValue+1  WHERE TabName = 'ValueDifferenceClaim' AND FldName = 'ValDiffRefNo'
		END
	END
	UPDATE ProductBatch SET ProductBatch.DefaultPriceId=PBD.PriceId,ProductBatch.BatchSeqId=PBD.BatchSeqId
	FROM ProductBatchDetails PBD WITH (NOLOCK) WHERE ProductBatch.PrdBatId=PBD.PrdBatId AND PBD.DefaultPrice=1
	
	UPDATE ProductBatch SET EnableCloning=1 WHERE PrdBatId IN
	(
	 SELECT PrdBatId FROM ProductBatchDetails WITH (NOLOCK) GROUP BY PrdBatId  HAVING(COUNT(DISTINCT PriceId)>1)
	)
	
	SELECT PrdBatId INTO #ZeroBatches FROM ProductBatchDetails WITH (NOLOCK)
	GROUP BY PrdBatId HAVING SUM(DefaultPrice)=0
	
	SELECT B.PrdId,B.PrdBatId,MAX(PriceId) As PriceId INTO #ZeroMaxPrices
	FROM ProductBatchDetails A INNER JOIN ProductBatch B ON A.PrdBatId=B.PrdBatId
	INNER JOIN #ZeroBatches C ON A.PrdBatId=C.PrdBatId
	WHERE A.DefaultPrice=0 AND NOT EXISTS
	(SELECT DISTINCT PriceId FROM #BatchCloningDetails D WHERE A.PrdBatId = D.PrdBatId AND A.PriceId = D.PriceId)
	AND NOT EXISTS (SELECT DISTINCT PriceId FROM #ExistinPriceCloning E WHERE A.PrdBatId = E.PrdBatId AND A.PriceId = E.PriceId)
	GROUP BY B.PrdId,B.PrdBatId 
	
	
	UPDATE ProductBatch Set DefaultPriceId=B.PriceId FROM ProductBatch A,#ZeroMaxPrices B
	WHERE A.PrdBatId=B.PrdbatId and A.PrdId=B.PrdId 
	
	UPDATE ProductBatchDetails Set DefaultPrice=1 FROM #ZeroMaxPrices A
	WHERE ProductBatchDetails.PrdbatId=A.PrdBatId AND ProductBatchDetails.PriceId=A.PriceId
	
	SET @Po_ErrNo=0
	SELECT @OldPriceIdExt=ISNULL(MAX(PriceId),0) FROM ProductBatchDetails
	IF @ExistPrdBatMaxId>0
	BEGIN
		SELECT @NewPrdBatMaxId=ISNULL(MAX(PrdBatId),0) FROM ProductBatch
		IF @NewPrdBatMaxId>@ExistPrdBatMaxId
		BEGIN
		    
		    --Existing Contract Pricing Percentage Updated to New Batch Download
		    --Modified by Rajesh
		    
     	--    SELECT DISTINCT RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCCode,MAX(CreatedDate) AS CreatedDate INTO #SpecialRateCreatedDate
		    --FROM SpecialRateAftDownload WITH(NOLOCK) GROUP BY RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCCode ORDER BY PrdCCode
		    SELECT DISTINCT RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCCode,MAX(CreatedDate) AS CreatedDate  INTO #SpecialRateCreatedDate1  
			FROM SpecialRateAftDownload_calc WITH(NOLOCK) GROUP BY RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCCode ORDER BY PrdCCode
			SELECT DISTINCT A.RtrCtgCode,A.RtrCtgValueCode,A.RtrCode,A.PrdCCode,A.CreatedDate ,A.ApplyOn,A.TYPE INTO #SpecialRateCreatedDate
			FROM SpecialRateAftDownload_calc A WITH(NOLOCK) INNER JOIN  #SpecialRateCreatedDate1 B (NOLOCK) 
			ON A.RtrCtgCode = B.RtrCtgCode AND A.RtrCtgValueCode  = B.RtrCtgValueCode AND A.RtrCode= B.RtrCode AND A.PrdCCode= B.PrdCCode
			AND A.CreatedDate = B.CreatedDate AND A.ApplyOn is not null

			SELECT DISTINCT C.PrdId,E.PrdBatId,TransNo AS PriceId,A.RtrCtgCode,A.RtrCtgValueCode,A.RtrCode,A.PrdCCode,  
		   D.PrdBatCode,DiscountPerc,B.ApplyOn,B.Type,
		   (CASE B.ApplyOn WHEN 1 THEN 
			(CASE B.[Type] WHEN 1 THEN (MRP*100/(100+DiscountPerc)) WHEN 2 THEN MRP-(MRP*(DiscountPerc/100))
				ELSE SellingRate-(SellingRate*(DiscountPerc/100))  END)	 
			ELSE SellingRate-(SellingRate*(DiscountPerc/100)) END) AS SplRate
		   INTO #SpecialRateDetails   
		   FROM SpecialRateAftDownload_calc A WITH(NOLOCK)  
		   INNER JOIN #SpecialRateCreatedDate B ON A.RtrCtgCode = B.RtrCtgCode AND A.RtrCtgValueCode = B.RtrCtgValueCode   
		   AND A.RtrCode = B.RtrCode AND A.PrdCCode = B.PrdCCode AND A.CreatedDate = B.CreatedDate  
		   INNER JOIN Product C WITH(NOLOCK) ON A.PrdCCode = C.PrdCCode     
		   INNER JOIN ProductBatch D WITH(NOLOCK) ON C.PrdId = D.PrdId  
		   INNER JOIN @ProductBatchPriceWithCounter E ON C.PrdId = E.PrdId AND D.PrdBatId = E.PrdBatId  
		   ORDER BY A.PrdCCode 
			--Till Here			
	
			SELECT DISTINCT MAX(E.ContractId) AS ContractId,A.PrdId,A.PrdBatId,A.PriceId,B.CtgLevelId,C.CtgMainId,SplRate,RtrCtgValueCode,A.ApplyOn, A.Type
			INTO #SpecialContractDetails FROM #SpecialRateDetails A WITH(NOLOCK) 
			INNER JOIN RetailerCategoryLevel B WITH(NOLOCK) ON A.RtrCtgCode = B.CtgLevelName 
			INNER JOIN RetailerCategory C WITH(NOLOCK) ON A.RtrCtgValueCode = C.CtgCode AND B.CtgLevelId = C.CtgLevelId
			INNER JOIN ContractPricingMaster D WITH(NOLOCK) ON B.CtgLevelId = D.CtgLevelId AND C.CtgMainId = D.CtgMainId 
			INNER JOIN ContractPricingDetails E WITH(NOLOCK) ON D.ContractId = E.ContractId AND A.PrdId = E.PrdId 
			GROUP BY A.PrdId,A.PrdBatId,A.PriceId,B.CtgLevelId,C.CtgMainId,SplRate,RtrCtgValueCode,A.ApplyOn, A.Type
			
			---Tax Calculation
			DECLARE @PrdIdTax as BIGINT
			DECLARE @PrdbatIdTax AS BIGINT
			DECLARE Cur_Tax CURSOR
			FOR 
			SELECT DISTINCT PrdId,PrdbatId FROM #SpecialContractDetails		
			OPEN Cur_Tax	
			FETCH NEXT FROM Cur_Tax INTO @PrdIdTax,@PrdbatIdTax
			WHILE @@FETCH_STATUS=0
			BEGIN	
					EXEC Proc_SellingTaxCalCulation @PrdIdTax,@PrdbatIdTax
			FETCH NEXT FROM Cur_Tax INTO @PrdIdTax,@PrdbatIdTax		
			END		
			CLOSE Cur_Tax
			DEALLOCATE Cur_Tax	
			--Modified by Rajesh
						
			SELECT DISTINCT A.PrdId,A.PrdBatId,PriceId,RtrCtgValueCode,DENSE_RANK ()OVER (ORDER BY A.PriceId,A.PrdbatId,RtrCtgValueCode)+ @OldPriceIdExt AS NewPriceId,
			--CAST(SplRate*100/(100+TaxPercentage) AS NUMERIC(38,6)) AS NewSelRate 
			CASE A.ApplyOn WHEN 1 THEN 
										(CASE [Type] WHEN 1 THEN (SplRate*100)/(100+TaxPercentage)
											WHEN 2 THEN (SplRate*100)/(100+TaxPercentage)	END)
			ELSE CAST(SplRate AS NUMERIC(38,6)) END AS NewSelRate
			INTO #SplProductBatchDetails
			FROM #SpecialContractDetails A WITH(NOLOCK) INNER JOIN ProductBatchTaxPercent B WITH(NOLOCK) ON A.PrdId = B.PrdId
			AND A.PrdBatId = B.PrdBatId ORDER BY A.PrdId,A.PrdBatId,PriceId,RtrCtgValueCode
			
		
			--Product Batch Details Value Added			
			INSERT INTO ProductBatchDetails (PriceId,PrdBatId,PriceCode,BatchSeqId,SLNo,PrdBatDetailValue,DefaultPrice,PriceStatus,
            Availability,LastModBy,LastModDate,AuthId,AuthDate,XMLUpload) 
            SELECT DISTINCT NewPriceId,A.PrdBatId,PriceCode+'SplRate'+CONVERT(NVARCHAR(200),B.NewSelRate)+CONVERT(NVARCHAR(10),GETDATE(),121),
            A.BatchSeqId,A.SLNo,(CASE SelRte WHEN 1 THEN B.NewSelRate ELSE PrdBatDetailValue END),0,1,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,
            CONVERT(NVARCHAR(10),GETDATE(),121),0
            FROM ProductBatchDetails A WITH(NOLOCK) 
            INNER JOIN #SplProductBatchDetails B ON A.PrdBatId = B.PrdBatId AND A.PriceId = B.PriceId
            INNER JOIN ProductBatch C WITH(NOLOCK) ON A.PrdBatId = C.PrdBatId
            INNER JOIN BatchCreation D WITH(NOLOCK) ON C.BatchSeqId = D.BatchSeqId AND A.SLNo = D.SlNo ORDER BY A.PrdBatId,NewPriceId 
            UPDATE Counters SET CurrValue =(SELECT MAX(PriceId) FROM ProductBatchDetails) WHERE TabName = 'ProductBatchDetails' AND FldName = 'PriceId'
            	
            --Contract Pricing Details Added
            INSERT INTO ContractPricingDetails (ContractId,PrdId,PrdBatId,PriceId,Discount,FlatAmtDisc,Availability,LastModBy,LastModDate,AuthId,
            AuthDate,CtgValMainId,ClaimablePercOnMRP)            
            SELECT DISTINCT ContractId,A.PrdId,A.PrdBatId,B.NewPriceId,0,0,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121),0,0
            FROM #SpecialContractDetails A INNER JOIN #SplProductBatchDetails B ON A.PrdId = B.PrdID AND A.PrdBatId = B.PrdBatId AND A.RtrCtgValueCode=B.RtrCtgValueCode
            WHERE NOT EXISTS (SELECT ContractId FROM ContractPricingDetails C WITH(NOLOCK) WHERE A.ContractId = C.ContractId 
            AND A.PrdId = C.PrdID AND A.PrdBatId = C.PrdBatId) ORDER BY ContractId,A.PrdId,A.PrdBatId,B.NewPriceId
            --Special Rate Updated
            INSERT INTO SpecialRateAftDownload (RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCCode,PrdBatCCode,SplSelRate,FromDate,CreatedDate,DownloadedDate,
            ContractPriceIds,DiscountPerc,SplrateId)
            SELECT DISTINCT RtrCtgCode,A.RtrCtgValueCode,A.RtrCode,A.PrdCCode,A.PrdBatCode,A.SplRate,CONVERT(NVARCHAR(10),GETDATE(),121),GETDATE(),GETDATE(),
            '-'+CONVERT(NVARCHAR(50),NewPriceId)+'-',DiscountPerc,0
            FROM #SpecialRateDetails A INNER JOIN #SplProductBatchDetails B ON A.PrdId = B.PrdId AND A.PrdBatId = B.PrdBatId 
            and A.RtrCtgValueCode=B.RtrCtgValueCode
            ORDER BY PrdCCode,PrdBatCode
            --Added By Rajesh
            INSERT INTO SpecialRateAftDownload_calc (RtrCtgCode,RtrCtgValueCode,RtrCode,PrdCCode,PrdBatCCode,SplSelRate,FromDate,CreatedDate,DownloadedDate,
            ContractPriceIds,DiscountPerc,SplrateId,ApplyOn,TYPE)
            SELECT DISTINCT RtrCtgCode,A.RtrCtgValueCode,A.RtrCode,A.PrdCCode,A.PrdBatCode,A.SplRate,CONVERT(NVARCHAR(10),GETDATE(),121),GETDATE(),GETDATE(),
            '-'+CONVERT(NVARCHAR(50),NewPriceId)+'-',DiscountPerc,0,A.ApplyOn,A.TYPE
            FROM #SpecialRateDetails A INNER JOIN #SplProductBatchDetails B ON A.PrdId = B.PrdId AND A.PrdBatId = B.PrdBatId 
            and A.RtrCtgValueCode=B.RtrCtgValueCode
            ORDER BY PrdCCode,PrdBatCode
            --Till Here

		END
	END
	
	SELECT @NewPriceId=CurrValue FROM Counters (NOLOCK)	WHERE TabName='ProductBatchDetails' AND FldName='PriceId' 		
	IF @NewPriceId>@OldPriceId
	BEGIN
		IF EXISTS(SELECT * FROM Configuration(NOLOCK) WHERE ModuleId='BotreeRateForOldBatch'
		AND ModuleName='Botree Product Batch Download' AND Status=1)
		BEGIN
			EXEC Proc_DefaultPriceUpdation @ExistPrdBatMaxId,@OldPriceId,1
		END
	END
	IF EXISTS(SELECT * FROM ProductBatchDetails WHERE PriceId>=@OldPriceId)
	BEGIN
		EXEC Proc_DefaultPriceHistory 0,0,@NewPriceId,2,1
	END
	
	UPDATE Cn2Cs_Prk_ProductBatch_GST SET DownLoadFlag='Y' 
	WHERE PrdCCode+'~'+PrdBatCode IN (SELECT P.PrdCCode+'~'+PB.PrdBatCode
	FROM Product P,ProductBatch PB WHERE P.PrdId=PB.PrdId)	
	RETURN		
END
GO
IF EXISTS(SELECT 'X' FROM SYSOBJECTS WHERE XTYPE='TF' AND NAME='Fn_VatInvoiceTax')
DROP FUNCTION Fn_VatInvoiceTax
GO
--SELECT * FROM DBO.Fn_VatInvoiceTax(1,63339,3,1)
CREATE FUNCTION [Fn_VatInvoiceTax] (@RowId as INT,@ActRowId as INT,@Salid as BIGINT,@Pi_CalledFrom AS INT,@Pi_UserId as INT,@iGSTApplyTax as TinyInt)
RETURNS @TblBilledPrdDtCalculatedTax TABLE
(
[RowId] [int] NULL,
[SalRowId] INT NULL,
[PrdId] [int] NULL,
[PrdBatId] [int] NULL,
[TaxId] [int] NULL,
[TaxSlabId] [int] NULL,
[TaxPercentage] [numeric](5, 2) NULL,
[TaxableAmount] [numeric](28, 10) NULL,
[TaxAmount] [numeric](28, 10) NULL,
[Usrid] [int] NULL,
[TransId] [int] NULL
)	

AS
/****************************************************************************
* FUNCTION: Fn_VatInvoiceTax
* PURPOSE: To Return Vat Tax Invoice
* NOTES:
* CREATED: MURUGAN. R
* DATE: 02/06/2017
* MODIFIED
* DATE         AUTHOR     DESCRIPTION
------------------------------------------------------------------------------
*****************************************************************************/
BEGIN
				
		INSERT INTO @TblBilledPrdDtCalculatedTax (RowId,[SalRowId],PrdId,PrdBatId,TaxId,TaxSlabId,TaxPercentage,      
		TaxableAmount,TaxAmount,Usrid,TransId)		
		SELECT DISTINCT BP.RowId,SPT.PrdSlNo,BP.PrdId,BP.PrdbatId,SPT.TaxId,SPT.TaxId,TaxPerc,
		BP.BaseQty*(ISNULL(SPT.TaxableAmount/NULLIF(SP.BaseQty,0),0)) as TaxableAmount,CASE @iGSTApplyTax WHEN 0 THEN 0 ELSE BP.BaseQty*(ISNULL(SPT.TaxAmount/NULLIF(SP.BaseQty,0),0)) END as TaxAmount,
		@Pi_UserId, @Pi_CalledFrom
		FROM SalesInvoice S (NOLOCK) 
		INNER JOIN SalesInvoiceProduct SP (NOLOCK) ON S.Salid=SP.Salid
		INNER JOIN SalesInvoiceProductTax SPT (NOLOCK) ON S.Salid=SPT.Salid and SP.Salid=SPT.Salid and SP.SlNo=SPT.PrdSlNo
		INNER JOIN BilledPrdHdForTax_GST BP (NOLOCK) ON BP.PrdId=SP.PrdId and BP.PrdBatId=SP.PrdBatId and BP.SalRowId=SPT.PrdSlNo and BP.SalRowId=Sp.Slno
		WHERE SP.SalId=@Salid and BP.TransId=@Pi_CalledFrom   and BP.Usrid=@Pi_UserId and BP.SalRowId=@RowId and SPT.TaxableAmount>0
		and BP.RowId=@ActRowId
		
RETURN
END
GO
--Sales Return End
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE IN('TF') and name='Fn_ReturnRetailerTaxGroupGST')
DROP FUNCTION Fn_ReturnRetailerTaxGroupGST
GO
--Select * from Fn_ReturnRetailerTaxGroupGST()
CREATE FUNCTION [Fn_ReturnRetailerTaxGroupGST]()
RETURNS @RetailerTaxGroup TABLE
(
	TaxGroupId  INT,
	RtrGroup	Varchar(100)	,
	TaxGroupName Varchar(100)
)
AS
/*********************************
* FUNCTION: Fn_ReturnRetailerTaxGroupGST
* PURPOSE: Returns the Retailer TaxGroup
* NOTES:
* CREATED: Murugan.R	12/06/2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
*
*********************************/
BEGIN
		DECLARE @Enabled AS INT
		SET @Enabled=0
		
		
		IF EXISTS(SELECT 'X' FROM GSTConfiguration (NOLOCK)
		WHERE  ModuleId='GSTCONFIG' AND Description='GST Configuration' AND ActivationStatus=1 and AcknowledgeStatus=1 and ConsoleAckStatus=1)
		BEGIN
			SET @Enabled=1
		END
	
			IF @Enabled=0
			BEGIN
				INSERT INTO @RetailerTaxGroup(TaxGroupId,RtrGroup,TaxGroupName)
				SELECT TaxGroupId, RtrGroup,TaxGroupName  FROM TaxGroupSetting  with (nolock) WHERE  Taxgroup = 1 and Availability=1
				and RtrGroup NOT IN('RTRINTRA','RTRINTER')
			END
			ELSE
			BEGIN
				INSERT INTO @RetailerTaxGroup(TaxGroupId,RtrGroup,TaxGroupName)
				SELECT TaxGroupId, RtrGroup,TaxGroupName  FROM TaxGroupSetting  with (nolock) WHERE  Taxgroup = 1 and Availability=1
				and RtrGroup IN('RTRINTRA','RTRINTER')
			END

		
		
RETURN
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE IN('TF') and name='Fn_ReturnSupplierTaxGroupGST')
DROP FUNCTION Fn_ReturnSupplierTaxGroupGST
GO
--Select * from Fn_ReturnSupplierTaxGroupGST()
CREATE FUNCTION [Fn_ReturnSupplierTaxGroupGST]()
RETURNS @SupplierTaxGroup TABLE
(
	TaxGroupId  INT,
	TaxGroupName	Varchar(100)	,
	RtrGroup Varchar(100)
)
AS
/*********************************
* FUNCTION: Fn_ReturnSupplierTaxGroupGST
* PURPOSE: Returns the Supplier TaxGroup
* NOTES:
* CREATED: Murugan.R	12/06/2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
*
*********************************/
BEGIN
		DECLARE @Enabled AS INT
		SET @Enabled=0
		
		
		IF EXISTS(SELECT 'X' FROM GSTConfiguration (NOLOCK)
		WHERE  ModuleId='GSTCONFIG' AND Description='GST Configuration' AND ActivationStatus=1 and AcknowledgeStatus=1 and ConsoleAckStatus=1)
		BEGIN
			SET @Enabled=1
		END
	
			IF @Enabled=0
			BEGIN
				INSERT INTO @SupplierTaxGroup(TaxGroupId,TaxGroupName,RtrGroup)
				SELECT TaxGroupId,TaxGroupName,RtrGroup  FROM TaxGroupSetting  with (nolock) WHERE  Taxgroup = 3 and Availability=1
				and RtrGroup NOT IN('SUPINTRA','SUPINTER')
			END
			ELSE
			BEGIN
				INSERT INTO @SupplierTaxGroup(TaxGroupId,TaxGroupName,RtrGroup)
				SELECT TaxGroupId,TaxGroupName,RtrGroup  FROM TaxGroupSetting  with (nolock) WHERE  Taxgroup = 3 and Availability=1
				and RtrGroup IN('SUPINTRA','SUPINTER')
			END

		
		
RETURN
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE IN('TF') and name='Fn_ReturnIDTTaxGroupGST')
DROP FUNCTION Fn_ReturnIDTTaxGroupGST
GO
--Select * from Fn_ReturnIDTTaxGroupGST()
CREATE FUNCTION [Fn_ReturnIDTTaxGroupGST]()
RETURNS @SupplierTaxGroup TABLE
(
	TaxGroupId  INT,
	TaxGroupName	Varchar(100)	,
	RtrGroup Varchar(100)
)
AS
/*********************************
* FUNCTION: Fn_ReturnIDTTaxGroupGST
* PURPOSE: Returns the IDT TaxGroup
* NOTES:
* CREATED: Murugan.R	12/06/2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
*
*********************************/
BEGIN
		DECLARE @Enabled AS INT
		SET @Enabled=0
		
		
		IF EXISTS(SELECT 'X' FROM GSTConfiguration (NOLOCK)
		WHERE  ModuleId='GSTCONFIG' AND Description='GST Configuration' AND ActivationStatus=1 and AcknowledgeStatus=1 and ConsoleAckStatus=1)
		BEGIN
			SET @Enabled=1
		END
	
			IF @Enabled=0
			BEGIN
				INSERT INTO @SupplierTaxGroup(TaxGroupId,TaxGroupName,RtrGroup)
				SELECT TaxGroupId,TaxGroupName,RtrGroup  FROM TaxGroupSetting  with (nolock) WHERE  Taxgroup = 4 and Availability=1
				and RtrGroup NOT IN('IDTINTER','IDTINTRA')
			END
			ELSE
			BEGIN
				INSERT INTO @SupplierTaxGroup(TaxGroupId,TaxGroupName,RtrGroup)
				SELECT TaxGroupId,TaxGroupName,RtrGroup  FROM TaxGroupSetting  with (nolock) WHERE  Taxgroup = 4 and Availability=1
				and RtrGroup IN('IDTINTER','IDTINTRA')
			END

		
		
RETURN
END
GO
DELETE FROM HotSearchEditorHd WHERE FormId=10081
INSERT INTO HotSearchEditorHd(FormId,FormName,ControlName,SltString,RemainsltString)
SELECT 10081,'Supplier Master','IDTTaxGroup','select','Select * from Fn_ReturnIDTTaxGroupGST()'
GO
DELETE FROM HotSearchEditorHd WHERE FormId=350
INSERT INTO HotSearchEditorHd(FormId,FormName,ControlName,SltString,RemainsltString)
SELECT 350,'Supplier Master','TaxGroupName','select','Select * from Fn_ReturnSupplierTaxGroupGST()'
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Cs2Cn_Prk_BillSeriesDtGST' AND XTYPE='U')
BEGIN
	CREATE TABLE Cs2Cn_Prk_BillSeriesDtGST
	(
		[SlNo]          [numeric](38, 0) IDENTITY(1,1) NOT NULL,
		[DistCode]      [nvarchar](50) NULL,
		[SeriesDtId]    [int] NOT NULL,
		[Prefix]        [nvarchar](50) NULL,
		[Zpad]          [tinyint] NULL,
		[CurrValue]     [int] NULL,	
		[UploadFlag]    [nvarchar](10) NULL,
		[SyncId]        [numeric](38, 0) NULL,
		[ServerDate]    [datetime] NULL     
	)
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Cs2Cn_BillSeriesDtGST' AND XTYPE='P')
DROP PROCEDURE Proc_Cs2Cn_BillSeriesDtGST
GO
CREATE PROCEDURE [dbo].Proc_Cs2Cn_BillSeriesDtGST
(
   @Po_ErrNo INT OUTPUT,
   @ServerDate DATETIME
)
AS
/*****************************************************************************
* PROCEDURE		: Proc_Cs2Cn_BillSeriesDtGST
* PURPOSE		: To Extract BillSeries Prefix details from CoreStocky to  Console
* CREATED BY	: Raja C
* CREATED DATE	: 13/06/2017
* NOTE			:
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
	
********************************************************************************/
SET NOCOUNT ON
BEGIN	
    SET @Po_ErrNo=0
	DECLARE @DistCode As nVarchar(50)
	DELETE FROM Cs2Cn_Prk_BillSeriesDtGST WHERE UploadFlag = 'Y'	
	SELECT @DistCode = DistributorCode FROM Distributor(NOLOCK)
    
    INSERT INTO Cs2Cn_Prk_BillSeriesDtGST(DistCode,SeriesDtId,Prefix,Zpad,CurrValue,UploadFlag,ServerDate)
    SELECT @DistCode,SeriesDtId,Prefix,Zpad,CurrValue,'N',@ServerDate
    FROM BillSeriesDtvalue (NOLOCK)
     
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Cs2Cn_Prk_CompanyCountersGST' AND XTYPE='U')
BEGIN
	CREATE TABLE Cs2Cn_Prk_CompanyCountersGST
	(
		[SlNo]          [numeric](38, 0) IDENTITY(1,1) NOT NULL,
		[DistCode]      [nvarchar](50) NULL,
		[TabName]       [varchar](30) NOT NULL,
	    [FldName]       [varchar](30) NOT NULL,
	    [Prefix]        [varchar](16) NULL,
	    [Zpad]          [int] NULL,
	    [CmpId]         [int] NOT NULL,
	    [CurrValue]     [int] NOT NULL,
	    [ModuleName]    [nvarchar](100) NULL,
	    [DisplayFlag]   [tinyint] NOT NULL,
	    [CurYear]       [int] NOT NULL,
		[UploadFlag]    [nvarchar](10) NULL,
		[SyncId]        [numeric](38, 0) NULL,
		[ServerDate]    [datetime] NULL     
	)
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Cs2Cn_CompanyCountersGST' AND XTYPE='P')
DROP PROCEDURE Proc_Cs2Cn_CompanyCountersGST 
GO
CREATE PROCEDURE [dbo].Proc_Cs2Cn_CompanyCountersGST
(
   @Po_ErrNo INT OUTPUT,
   @ServerDate DATETIME
)
AS
/*****************************************************************************
* PROCEDURE		: Proc_Cs2Cn_CompanyCountersGST
* PURPOSE		: To Extract Retailer Company Code series details from CoreStocky to  Console
* CREATED BY	: Raja C
* CREATED DATE	: 13/06/2017
* NOTE			:
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
	
********************************************************************************/
SET NOCOUNT ON
BEGIN	
    SET @Po_ErrNo=0
	DECLARE @DistCode As nVarchar(50)
	DELETE FROM Cs2Cn_Prk_CompanyCountersGST WHERE UploadFlag = 'Y'	
	SELECT @DistCode = DistributorCode FROM Distributor(NOLOCK)
    
    INSERT INTO Cs2Cn_Prk_CompanyCountersGST(DistCode,TabName,FldName,Prefix,Zpad,CmpId,CurrValue,ModuleName,DisplayFlag,CurYear,UploadFlag,ServerDate)
    SELECT @DistCode,TabName,FldName,Prefix,Zpad,CmpId,CurrValue,ModuleName,DisplayFlag,CurYear,'N',@ServerDate
    FROM CompanyCounters (NOLOCK)
     
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Cs2Cn_Prk_CountersGST' AND XTYPE='U')
BEGIN
	CREATE TABLE [dbo].[Cs2Cn_Prk_CountersGST]
	(
		[SlNo]          [numeric](38, 0) IDENTITY(1,1) NOT NULL,
		[DistCode]      [nvarchar](50) NULL,
		[TabName]       [varchar](30) NOT NULL,
		[FldName]       [varchar](30) NOT NULL,
		[Prefix]        [varchar](16) NULL,
		[Zpad]          [int] NULL,
		[CmpId]         [int] NOT NULL,
		[CurrValue]     [int] NOT NULL,
		[ModuleName]    [nvarchar](100) NULL,
		[DisplayFlag]   [tinyint] NOT NULL,
		[CurYear]       [int] NOT NULL,
		[UploadFlag]    [nvarchar](10) NULL,
		[SyncId]        [numeric](38, 0) NULL,
		[ServerDate]    [datetime] NULL     
	)
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Cs2Cn_CounterGST' AND XTYPE='P')
DROP PROCEDURE Proc_Cs2Cn_CounterGST
GO
CREATE PROCEDURE [dbo].Proc_Cs2Cn_CounterGST
(
   @Po_ErrNo INT OUTPUT,
   @ServerDate DATETIME
)
AS
/*****************************************************************************
* PROCEDURE		: Proc_Cs2Cn_CounterGST
* PURPOSE		: To Extract Counter details from CoreStocky to  Console
* CREATED BY	: Raja C
* CREATED DATE	: 13/06/2017
* NOTE			:
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
	
********************************************************************************/
SET NOCOUNT ON
BEGIN	
    SET @Po_ErrNo=0
	DECLARE @DistCode As nVarchar(50)
	DELETE FROM Cs2Cn_Prk_CountersGST WHERE UploadFlag = 'Y'	
	SELECT @DistCode = DistributorCode FROM Distributor(NOLOCK)
    
    INSERT INTO Cs2Cn_Prk_CountersGST(DistCode,TabName,FldName,Prefix,Zpad,CmpId,CurrValue,ModuleName,DisplayFlag,CurYear,UploadFlag,ServerDate)
    SELECT @DistCode,TabName,FldName,Prefix,Zpad,CmpId,CurrValue,ModuleName,DisplayFlag,CurYear,'N',@ServerDate
    FROM Counters (NOLOCK)
     
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Cs2Cn_Prk_PurchaseinvSeriesDtGST' AND XTYPE='U')
BEGIN
	CREATE TABLE Cs2Cn_Prk_PurchaseinvSeriesDtGST
	(
		[SlNo]          [numeric](38, 0) IDENTITY(1,1) NOT NULL,
		[DistCode]      [nvarchar](50) NULL,
		[MainId]        [int] NOT NULL,
		[RowNo]         [int] NOT NULL,
		[AttrList]      [nvarchar](50) NOT NULL,
		[Prefix]        [nvarchar](15) NOT NULL,
		[Zpad]          [int] NOT NULL,
		[CurrValue]     [int] NOT NULL,
		[UploadFlag]    [nvarchar](10) NULL,
		[SyncId]        [numeric](38, 0) NULL,
		[ServerDate]    [datetime] NULL     
	)
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Cs2Cn_PurchaseinvSeriesDtGST' AND XTYPE='P')
DROP PROCEDURE Proc_Cs2Cn_PurchaseinvSeriesDtGST
GO
CREATE PROCEDURE [dbo].Proc_Cs2Cn_PurchaseinvSeriesDtGST
(
   @Po_ErrNo INT OUTPUT,
   @ServerDate DATETIME
)
AS
/*****************************************************************************
* PROCEDURE		: Proc_Cs2Cn_PurchaseinvSeriesDtGST
* PURPOSE		: To Extract PurchaseSeries Prefix details from CoreStocky to  Console
* CREATED BY	: Raja C
* CREATED DATE	: 13/06/2017
* NOTE			:
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
	
********************************************************************************/
SET NOCOUNT ON
BEGIN	
    SET @Po_ErrNo=0
	DECLARE @DistCode As nVarchar(50)
	DELETE FROM Cs2Cn_Prk_PurchaseinvSeriesDtGST WHERE UploadFlag = 'Y'	
	SELECT @DistCode = DistributorCode FROM Distributor(NOLOCK)
    
    INSERT INTO Cs2Cn_Prk_PurchaseinvSeriesDtGST(DistCode,MainId,RowNo,AttrList,Prefix,Zpad,CurrValue,UploadFlag,ServerDate)
    SELECT @DistCode,MainId,RowNo,AttrList,Prefix,Zpad,CurrValue,'N',@ServerDate
    FROM PurInvSeriesPrefix (NOLOCK)
     
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE Name='Cn2CS_Prk_PurchaseinvSeriesDtGST' AND XTYPE='U')
BEGIN
	CREATE TABLE [dbo].Cn2CS_Prk_PurchaseinvSeriesDtGST(
			[DistCode]      [nvarchar](50) NULL,
			[MainId]        [int] NOT NULL,
		    [RowNo]         [int] NOT NULL,
		    [AttrList]      [nvarchar](50) NOT NULL,
		    [Prefix]        [nvarchar](15) NOT NULL,
		    [Zpad]          [int] NOT NULL,
		    [CurrValue]     [int] NOT NULL,
			[DownLoadFlag]  [nvarchar](20) NULL,
			[CreatedDate]   [datetime] NULL     
	) ON [PRIMARY]
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Cn2Cs_PurchaseinvSeriesDtGST' AND XTYPE='P')
DROP PROCEDURE Proc_Cn2Cs_PurchaseinvSeriesDtGST
GO
CREATE PROCEDURE Proc_Cn2Cs_PurchaseinvSeriesDtGST
(
       @Po_ErrNo INT OUTPUT
)
AS
/***********************************************************
* PROCEDURE: Proc_Cn2Cs_PurchaseinvSeriesDtGST
* PURPOSE: To update the Purchaseinvoice Series  from console 
* CREATED BY:   Raja.C       13-06-2017
* MODIFIED :
* DATE      AUTHOR     DESCRIPTION
* {date} {developer}  {brief modIFication description}
*************************************************************/
SET NOCOUNT ON
BEGIN
SET @Po_ErrNo  = 0
    DELETE FROM Cn2CS_Prk_PurchaseinvSeriesDtGST WHERE DownLoadFlag='Y'
    
    IF EXISTS(SELECT * FROM Cn2CS_Prk_PurchaseinvSeriesDtGST(NOLOCK) WHERE DownLoadFlag='D')
    BEGIN
       UPDATE  A SET A.CurrValue=B.CurrValue FROM PurInvSeriesPrefix A (NOLOCK) INNER JOIN Cn2CS_Prk_PurchaseinvSeriesDtGST B (NOLOCK)
       ON A.MainId=B.Mainid AND A.[Prefix]=B.Prefix
       WHERE DownLoadFlag = 'D'
    END	   
	  UPDATE Cn2CS_Prk_PurchaseinvSeriesDtGST SET DownLoadFlag='Y'	  
	RETURN
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE Name='Cn2CS_Prk_BillSeriesDtUpdationGST' AND XTYPE='U')
BEGIN
	CREATE TABLE [dbo].Cn2CS_Prk_BillSeriesDtUpdationGST(
			[DistCode]      [nvarchar](50) NULL,
			[SeriesDtId]    [int] NOT NULL,
		    [Prefix]        [nvarchar](50) NULL,
		    [Zpad]          [tinyint] NULL,
		    [CurrValue]     [int] NULL,	
			[DownLoadFlag]  [nvarchar](20) NULL,
			[CreatedDate]   [datetime] NULL     
	) ON [PRIMARY]
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Cn2Cs_BillSeriesDtUpdationGST' AND XTYPE='P')
DROP PROCEDURE Proc_Cn2Cs_BillSeriesDtUpdationGST
GO
CREATE PROCEDURE Proc_Cn2Cs_BillSeriesDtUpdationGST
(
       @Po_ErrNo INT OUTPUT
)
AS
/***********************************************************
* PROCEDURE: Proc_Cn2Cs_BillSeriesDtUpdationGST
* PURPOSE: To update the BillSeriesDtValue from console 
* CREATED BY:   Raja.C       13-06-2017
* MODIFIED :
* DATE      AUTHOR     DESCRIPTION
* {date} {developer}  {brief modIFication description}
*************************************************************/
SET NOCOUNT ON
BEGIN
SET @Po_ErrNo  = 0
    DELETE FROM Cn2CS_Prk_BillSeriesDtUpdationGST WHERE DownLoadFlag='Y'
    
    IF EXISTS(SELECT * FROM Cn2CS_Prk_BillSeriesDtUpdationGST(NOLOCK) WHERE DownLoadFlag='D')
    BEGIN
       UPDATE  A SET A.CurrValue=B.CurrValue FROM BillSeriesDtValue A (NOLOCK) INNER JOIN Cn2CS_Prk_BillSeriesDtUpdationGST B (NOLOCK)
       ON A.SeriesDtId=B.SeriesDtId AND A.[Prefix]=B.Prefix
       WHERE DownLoadFlag = 'D'
    END	   
	  UPDATE Cn2CS_Prk_BillSeriesDtUpdationGST SET DownLoadFlag='Y'	  
	RETURN
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE Name='Cn2CS_Prk_CompanyCountersUpdationGST' AND XTYPE='U')
BEGIN
	CREATE TABLE [dbo].Cn2CS_Prk_CompanyCountersUpdationGST(
			[DistCode]      [nvarchar](50) NULL,
			[TabName]       [varchar](30) NOT NULL,
			[FldName]       [varchar](30) NOT NULL,
			[Prefix]        [varchar](16) NULL,
			[Zpad]          [int] NULL,
			[CmpId]         [int] NOT NULL,
			[CurrValue]     [int] NOT NULL,
			[ModuleName]    [nvarchar](100) NULL,
			[DisplayFlag]   [tinyint] NOT NULL,
			[CurYear]       [int] NOT NULL,		
			[DownLoadFlag]  [nvarchar](20) NULL,
			[CreatedDate]   [datetime] NULL     
	) ON [PRIMARY]
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Cn2Cs_CompanyCountersUpdationGST' AND XTYPE='P')
DROP PROCEDURE Proc_Cn2Cs_CompanyCountersUpdationGST
GO
CREATE PROCEDURE Proc_Cn2Cs_CompanyCountersUpdationGST
(
       @Po_ErrNo INT OUTPUT
)
AS
/***********************************************************
* PROCEDURE: Proc_Cn2Cs_CompanyCountersUpdationGST
* PURPOSE: To update the Retailer Company Code Counter from console 
* CREATED BY:   Raja.C       13-06-2017
* MODIFIED :
* DATE      AUTHOR     DESCRIPTION
* {date} {developer}  {brief modIFication description}
*************************************************************/
SET NOCOUNT ON
BEGIN
SET @Po_ErrNo  = 0
    DELETE FROM Cn2CS_Prk_CompanyCountersUpdationGST WHERE DownLoadFlag='Y'
    
    IF EXISTS(SELECT * FROM Cn2CS_Prk_CompanyCountersUpdationGST(NOLOCK) WHERE DownLoadFlag='D')
    BEGIN
       UPDATE  A SET A.CurrValue=B.CurrValue,A.CurYear=B.CurYear FROM CompanyCounters A (NOLOCK) INNER JOIN Cn2CS_Prk_CompanyCountersUpdationGST B (NOLOCK)
       ON A.TabName=B.TabName AND A.FldName=B.FldName AND A.ModuleName=B.ModuleName AND A.[Prefix]=B.Prefix
       WHERE DownLoadFlag = 'D'
    END	   
	  UPDATE Cn2CS_Prk_CompanyCountersUpdationGST SET DownLoadFlag='Y'	  
	RETURN
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE Name='Cn2CS_Prk_CountersUpdationGST' AND XTYPE='U')
BEGIN
	CREATE TABLE [dbo].Cn2CS_Prk_CountersUpdationGST(
			[DistCode]      [nvarchar](50) NULL,
			[TabName]       [varchar](30) NOT NULL,
			[FldName]       [varchar](30) NOT NULL,
			[Prefix]        [varchar](16) NULL,
			[Zpad]          [int] NULL,
			[CmpId]         [int] NOT NULL,
			[CurrValue]     [int] NOT NULL,
			[ModuleName]    [nvarchar](100) NULL,
			[DisplayFlag]   [tinyint] NOT NULL,
			[CurYear]       [int] NOT NULL,
			[DownLoadFlag]  [nvarchar](20) NULL,
			[CreatedDate]   [datetime] NULL     
	) ON [PRIMARY]
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Cn2Cs_CountersUpdationGST' AND XTYPE='P')
DROP PROCEDURE Proc_Cn2Cs_CountersUpdationGST
GO
CREATE PROCEDURE Proc_Cn2Cs_CountersUpdationGST
(
       @Po_ErrNo INT OUTPUT
)
AS
/***********************************************************
* PROCEDURE: Proc_Cn2Cs_CountersUpdationGST
* PURPOSE: To update the Counters 
* CREATED BY:   Raja.C       13-06-2017
* MODIFIED :
* DATE      AUTHOR     DESCRIPTION
* {date} {developer}  {brief modIFication description}
*************************************************************/
SET NOCOUNT ON
BEGIN
SET @Po_ErrNo  = 0
    DELETE FROM Cn2CS_Prk_CountersUpdationGST WHERE DownLoadFlag='Y'
    
    IF EXISTS(SELECT * FROM Cn2CS_Prk_CountersUpdationGST(NOLOCK) WHERE DownLoadFlag='D')
    BEGIN
       UPDATE  A SET A.CurrValue=B.CurrValue,A.CurYear=B.CurYear FROM Counters A (NOLOCK) INNER JOIN Cn2CS_Prk_CountersUpdationGST B (NOLOCK)
       ON A.TabName=B.TabName AND A.FldName=B.FldName AND A.ModuleName=B.ModuleName 
       WHERE DownLoadFlag = 'D'
    END	   
	  UPDATE Cn2CS_Prk_CountersUpdationGST SET DownLoadFlag='Y'	  
	RETURN
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Fn_BillEdited' AND XTYPE IN ('TF','FN'))
DROP FUNCTION Fn_BillEdited
GO
--SELECT DBO.Fn_BillEdited(1)
CREATE FUNCTION Fn_BillEdited(@SalId as BIGINT)  
RETURNS NVARCHAR(200) 
As  
BEGIN  
DECLARE @MSG AS VARCHAR(100)
SET @MSG=''
IF EXISTS(SELECT '*' FROM MANUALCONFIGURATION WHERE PROJECTNAME='GST' AND ModuleId='BILL_EDIT1' AND MODULENAME='BILLING' AND STATUS=1)
BEGIN
	IF EXISTS(SELECT '*' FROM GSTCONFIGURATION WHERE ActivationStatus=1 AND AcknowledgeStatus=1 AND ConsoleAckStatus=1)
	BEGIN
		IF EXISTS(SELECT BILLEDIT FROM SalesInvoice (NOLOCK) WHERE SalId = @SalId  AND ISNULL(BillEdit,0)=1)
		BEGIN
			SET @MSG='BillPrint Already Taken'
		END
	END
END
RETURN @MSG
END
GO
Delete FROM Tbl_Generic_Reports WHERE RptName='ITC Report'
INSERT INTO Tbl_Generic_Reports(RptId,RptName,SPName,Instructions,DrillDown)
select ISNULL(MAX(RptId),0)+1,'ITC Report','Proc_ComputeITCReport_GST','ITC Report for GST Migration','Not Available' FROM Tbl_Generic_Reports
GO
DECLARE @GenRptId AS INT
SET @GenRptId=0
SELECT @GenRptId=RptId FROM Tbl_Generic_Reports (NOLOCK) WHERE RptName='ITC Report'
Delete FROM Tbl_Generic_Reports_Filters WHERE rptid=@GenRptId
insert into Tbl_Generic_Reports_Filters(Rptid,Filterid,FilterCaption,ParamName,rptname)
select  @GenRptId,1,'Not Applicable','Proc_ComputeITCReport_GST_values','ITC Report' union
select  @GenRptId,2,'Not Applicable','Proc_ComputeITCReport_GST_values','ITC Report' union
select  @GenRptId,3,'Not Applicable','Proc_ComputeITCReport_GST_values','ITC Report' union
select  @GenRptId,4,'Not Applicable','Proc_ComputeITCReport_GST_values','ITC Report' union
select  @GenRptId,5,'Not Applicable','Proc_ComputeITCReport_GST_values','ITC Report' union
select  @GenRptId,6,'Not Applicable','Proc_ComputeITCReport_GST_values','ITC Report'
GO
--from here for already released
IF EXISTS (SELECT  * FROM SYS.OBJECTS WHERE TYPE='P' AND NAME='Proc_ComputeITCReport_GST')
Drop procedure Proc_ComputeITCReport_GST 
GO
CREATE PROCEDURE Proc_ComputeITCReport_GST
(
	@Pi_RptName		NVARCHAR(100),
	@Pi_FromDate	DATETIME,
	@Pi_ToDate		DATETIME,
	@Pi_Filter1		NVARCHAR(100),
	@Pi_Filter2		NVARCHAR(100),
	@Pi_Filter3		NVARCHAR(100),
	@Pi_Filter4		NVARCHAR(100),
	@Pi_Filter5		NVARCHAR(100),
	@Pi_Filter6		NVARCHAR(100)
)

AS
BEGIN

	SELECT DISTINCT R.prdid,R.prdccode,U.ColumnValue 'HSNCode' into #HSNCODE FROM UdcDetails u (NOLOCK)  inner JOIN UdcMaster US (NOLOCK)  ON u.UdcMasterId=US.UdcMasterId
	INNER JOIN product  R  (NOLOCK)  on R.prdid=U.MasterRecordId 
	INNER JOIN VatClosingStock VAT (NOLOCK)  ON VAT.Prdid=R.PrdId and VAT.Prdid=u.MasterRecordId 
	WHERE US.MasterId=1   and ColumnName='HSN Code'	

    SELECT 'ITC Report',ISNULL(H.HSNCode,'') as  HSNCode,S.ProductCode as [Product Code],PB.PrdBatCode as [Batch Code],l.LcnName as [Location Name],
	    ClosingSaleable as [Saleable Closing],ClosingUnSaleable as [Unsaleable Closing],
		ClosingFree as [Free Closing],MRP,SellingRate as [Selling Rate],PurchaseRate as [Purchase Rate],TaxPerc as [Tax Percent],
		ClosingSelValue as [Selling Rate Value Closing],
		ClosingPurValue as [Purchase Rate Value Closing],ClosingSalVolume as [Salable Volume],
		ClosingUnSalVolume as [Unsalable Volume],ClosingFreeVolume as [Free Volume],
		TaxableAmount as [Taxable Amount],TaxAmount as [Tax Amount],Grndate,
		GrnRefNo as [Purchase Reference No],GrnQty as [Purchase Quantity],GrnFreeQty as [Purchase Free Quantity]
	FROM VatClosingStock S (NOLOCK) inner JOIN Location L ON L.LcnId=S.Lcnid
	INNER JOIN product P (NOLOCK) ON P.PrdId=S.Prdid 
	LEFT OUTER JOIN #HSNCODE H (NOLOCK) ON H.prdid=s.Prdid
	INNER JOIN ProductBatch PB  (NOLOCK) ON Pb.PrdBatId=S.Prdbatid and PB.PrdId=P.PrdId and S.Prdid=PB.PrdId
  
END
GO
IF NOT EXISTS(SELECT 'X' FROM Tbl_Generic_Reports WHERE RptName='Primary Invoice Track Report')
BEGIN
	DECLARE @RptGSTMaxId as INT
	SELECT @RptGSTMaxId=Max(RptId)+1 FROM Tbl_Generic_Reports
	DELETE FROM Tbl_Generic_Reports WHERE RptName='Primary Invoice Track Report'
	INSERT INTO Tbl_Generic_Reports(RptId,RptName,SPName,Instructions,DrillDown)	
	SELECT @RptGSTMaxId, 'Primary Invoice Track Report','Proc_PrimaryInvoiceTrack_GST','Primary Invoice Track Report','Not Available'
	
	Delete FROM Tbl_Generic_Reports_Filters WHERE rptname='Primary Invoice Track Report'
	insert into Tbl_Generic_Reports_Filters(RptId,FilterId,FilterCaption,ParamName,rptname)
	select  @RptGSTMaxId,1,'Not Applicable','Proc_PrimaryInvoiceTrack_GST_values','Primary Invoice Track Report'union
	select  @RptGSTMaxId,2,'Not Applicable','Proc_PrimaryInvoiceTrack_GST_values','Primary Invoice Track Report' union
	select  @RptGSTMaxId,3,'Not Applicable','Proc_PrimaryInvoiceTrack_GST_values','Primary Invoice Track Report' union
	select  @RptGSTMaxId,4,'Not Applicable','Proc_PrimaryInvoiceTrack_GST_values','Primary Invoice Track Report'  union
	select  @RptGSTMaxId,5,'Not Applicable','Proc_PrimaryInvoiceTrack_GST_values','Primary Invoice Track Report' union
	select  @RptGSTMaxId,6,'Not Applicable','Proc_PrimaryInvoiceTrack_GST_values','Primary Invoice Track Report'
END
GO
IF EXISTS (SELECT  * FROM SYS.OBJECTS WHERE TYPE='P' AND NAME='Proc_PrimaryInvoiceTrack_GST')
DROP PROCEDURE Proc_PrimaryInvoiceTrack_GST 
GO
CREATE PROCEDURE [Proc_PrimaryInvoiceTrack_GST]
(
	@Pi_RptName		NVARCHAR(100),
	@Pi_FromDate	DATETIME,
	@Pi_ToDate		DATETIME,
	@Pi_Filter1		NVARCHAR(100),
	@Pi_Filter2		NVARCHAR(100),
	@Pi_Filter3		NVARCHAR(100),
	@Pi_Filter4		NVARCHAR(100),
	@Pi_Filter5		NVARCHAR(100),
	@Pi_Filter6		NVARCHAR(100)
)

AS
BEGIN

		SELECT 'Primary Invoice Track Report', P.Prdccode as [Product Code],PB.PrdBatCode as [Batch Code],
		TransactionDescription as [Transaction Description],RefNo as [Reference Number],Refdate as [Reference Date],
		BaseQty as SalesQty, FreeQty as [Free Qty], GrnQty as [Purchase Qty],GrnFreeQty as [Purchase Free],PurRcptRefNo as [Purchase Reference No],GrnDate as [Purchase Date]
		FROM TransactionWiseGrnTracking S (NOLOCK) 
		INNER JOIN Product P (NOLOCK) ON P.PrdId=S.Prdid 
		INNER JOIN ProductBatch PB (NOLOCK) ON Pb.PrdBatId=S.Prdbatid and PB.PrdId=P.PrdId and S.Prdid=PB.PrdId
		LEFT OUTER JOIN TransactionMaster T (NOLOCK) ON T.TransactionId=S.TransId
		WHERE Refdate between @Pi_FromDate and @Pi_ToDate
  

END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Fn_ValidateUnRegistor' and xtype in ('FN','TF'))
DROP FUNCTION Fn_ValidateUnRegistor
GO
--Select .dbo.Fn_ValidateUnRegistor (1854)
CREATE FUNCTION [dbo].[Fn_ValidateUnRegistor](@RtrId as BIGINT)
RETURNS VARCHAR(200)
AS
BEGIN
	DECLARE @ValMsg AS VARCHAR(200)
	SET @ValMsg=''
	
	IF NOT EXISTS(SELECT * FROM GSTConfiguration (NOLOCK) 
	WHERE ModuleId='GSTCONFIG' and ActivationStatus=1 and 
	ConsoleAckStatus=1)
	BEGIN
		RETURN @ValMsg
	END 
	IF EXISTS(SELECT b.* FROM Retailer A (NOLOCK)
			INNER JOIN UdcDetails B(NOLOCK) ON A.RtrId=B.MasterRecordId 
			INNER JOIN UdcMaster C(NOLOCK) ON C.MasterId=B.MasterId AND C.UdcMasterId=B.UdcMasterId
			WHERE C.ColumnName='Retailer Type' and UPPER(B.ColumnValue)='UNREGISTERED' AND C.MasteriD=2 AND B.MasterRecordId =@RtrId)
			BEGIN
				SET @ValMsg='UNREGISTERED'
			END
	RETURN @ValMsg
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Import_BillSeriesDtUpdationGST' AND XTYPE='P')
DROP PROCEDURE Proc_Import_BillSeriesDtUpdationGST
GO
CREATE PROCEDURE [dbo].[Proc_Import_BillSeriesDtUpdationGST]
(
	@Pi_Records TEXT
)
AS
/*********************************
* PROCEDURE		: Proc_Import_BillSeriesDtUpdationGST
* PURPOSE		: To Insert records from xml file in the Table Cn2CS_Prk_BillSeriesDtUpdationGST
* CREATED		: Raja C
* CREATED DATE	: 14-06-2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
SET NOCOUNT ON
BEGIN
	DECLARE @hDoc INTEGER
	
	EXEC sp_xml_preparedocument @hDoc OUTPUT,@Pi_Records
	INSERT INTO Cn2CS_Prk_BillSeriesDtUpdationGST(
		DistCode,
		SeriesDtId,
		Prefix,
		Zpad,
		CurrValue,
		DownLoadFlag,
		CreatedDate
	)
	SELECT DistCode,
	    SeriesDtId,
		Prefix,
		Zpad,
		CurrValue,
		ISNULL(DownLoadFlag,'D'),
		GETDATE()
	FROM OPENXML (@hdoc,'/Root/Console2CS_BillSeriesDtUpdationGST',1)
	WITH
	(
			[DistCode]      [nvarchar](50) ,
			[SeriesDtId]    [int] ,
		    [Prefix]        [nvarchar](50) ,
		    [Zpad]          [tinyint] ,
		    [CurrValue]     [int] ,	
			[DownLoadFlag]  [nvarchar](20) 
	) XMLObj
	EXEC sp_xml_removedocument @hDoc
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Import_CompanyCountersUpdationGST' AND XTYPE='P')
DROP PROCEDURE Proc_Import_CompanyCountersUpdationGST
GO
CREATE PROCEDURE [dbo].[Proc_Import_CompanyCountersUpdationGST]
(
	@Pi_Records TEXT
)
AS
/****************************************************************************
* PROCEDURE		: Proc_Import_CompanyCountersUpdationGST
* PURPOSE		: To Insert records from xml file in the Table Cn2CS_Prk_CompanyCountersUpdationGST
* CREATED		: Raja C
* CREATED DATE	: 14-06-2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*****************************************************************************/
SET NOCOUNT ON
BEGIN
	DECLARE @hDoc INTEGER
	
	EXEC sp_xml_preparedocument @hDoc OUTPUT,@Pi_Records
	INSERT INTO Cn2CS_Prk_CompanyCountersUpdationGST(
	    DistCode,
		TabName,
		FldName,
		Prefix,
		Zpad,
		CmpId,
		CurrValue,
		ModuleName,
		DisplayFlag,
		CurYear,
		DownLoadFlag,
		CreatedDate
	)
	SELECT DistCode,
	    TabName,
		FldName,
		Prefix,
		Zpad,
		CmpId,
		CurrValue,
		ModuleName,
		DisplayFlag,
		CurYear,
		ISNULL(DownLoadFlag,'D'),
		GETDATE()
	FROM OPENXML (@hdoc,'/Root/Console2CS_CompanyCountersUpdationGST',1)
	WITH
	(
			[DistCode]      [nvarchar](50) ,
			[TabName]       [varchar](30) ,
			[FldName]       [varchar](30),
			[Prefix]        [varchar](16) ,
			[Zpad]          [int] ,
			[CmpId]         [int] ,
			[CurrValue]     [int] ,
			[ModuleName]    [nvarchar](100) ,
			[DisplayFlag]   [tinyint] ,
			[CurYear]       [int] ,		
			[DownLoadFlag]  [nvarchar](20)
	) XMLObj
	EXEC sp_xml_removedocument @hDoc
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Import_CountersUpdationGST' AND XTYPE='P')
DROP PROCEDURE Proc_Import_CountersUpdationGST
GO
CREATE PROCEDURE [dbo].[Proc_Import_CountersUpdationGST]
(
	@Pi_Records TEXT
)
AS
/*********************************
* PROCEDURE		: Proc_Import_CountersUpdationGST
* PURPOSE		: To Insert records from xml file in the Table Cn2CS_Prk_CountersUpdationGST
* CREATED		: Raja C
* CREATED DATE	: 14-06-2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
SET NOCOUNT ON
BEGIN
	DECLARE @hDoc INTEGER
	
	EXEC sp_xml_preparedocument @hDoc OUTPUT,@Pi_Records
	INSERT INTO Cn2CS_Prk_CountersUpdationGST(
	    DistCode,
	    TabName,
		FldName,
		Prefix,
		Zpad,
		CmpId,
		CurrValue,
		ModuleName,
		DisplayFlag,
		CurYear,
		DownLoadFlag,
		CreatedDate
	)
	SELECT DistCode,
	    TabName,
		FldName,
		Prefix,
		Zpad,
		CmpId,
		CurrValue,
		ModuleName,
		DisplayFlag,
		CurYear,
		ISNULL(DownLoadFlag,'D'),
		GETDATE()
	FROM OPENXML (@hdoc,'/Root/Console2CS_CountersUpdationGST',1)
	WITH
	(
			[DistCode]      [nvarchar](50) ,
			[TabName]       [varchar](30) ,
			[FldName]       [varchar](30),
			[Prefix]        [varchar](16) ,
			[Zpad]          [int] ,
			[CmpId]         [int] ,
			[CurrValue]     [int],
			[ModuleName]    [nvarchar](100) ,
			[DisplayFlag]   [tinyint] ,
			[CurYear]       [int] ,
			[DownLoadFlag]  [nvarchar](20)
	) XMLObj
	EXEC sp_xml_removedocument @hDoc
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Import_PurchaseinvSeriesDtGST' AND XTYPE='P')
DROP PROCEDURE Proc_Import_PurchaseinvSeriesDtGST
GO
CREATE PROCEDURE [dbo].[Proc_Import_PurchaseinvSeriesDtGST]
(
	@Pi_Records TEXT
)
AS
/*********************************
* PROCEDURE		: Proc_Import_PurchaseinvSeriesDtGST
* PURPOSE		: To Insert records from xml file in the Table Cn2CS_Prk_PurchaseinvSeriesDtGST
* CREATED		: Raja C
* CREATED DATE	: 14-06-2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
SET NOCOUNT ON
BEGIN
	DECLARE @hDoc INTEGER
	
	EXEC sp_xml_preparedocument @hDoc OUTPUT,@Pi_Records
	INSERT INTO Cn2CS_Prk_PurchaseinvSeriesDtGST(
		DistCode,
		MainId,
		RowNo,
		AttrList,
		Prefix,
		Zpad,
		CurrValue,
		DownLoadFlag,
		CreatedDate
	)
	SELECT DistCode,
	    MainId,
		RowNo,
		AttrList,
		Prefix,
		Zpad,
		CurrValue,
		ISNULL(DownLoadFlag,'D'),
		GETDATE()
	FROM OPENXML (@hdoc,'/Root/Console2CS_PurchaseinvSeriesDtGST',1)
	WITH
	(
			[DistCode]      [nvarchar](50) ,
			[MainId]        [int],
		    [RowNo]         [int] ,
		    [AttrList]      [nvarchar](50) ,
		    [Prefix]        [nvarchar](15) ,
		    [Zpad]          [int],
		    [CurrValue]     [int] ,
			[DownLoadFlag]  [nvarchar](20) 
	) XMLObj
	EXEC sp_xml_removedocument @hDoc
END
GO
--Till Here
IF EXISTS(SELECT 'X' FROM SYSOBJECTS WHERE XTYPE IN ('FN','TF') AND NAME='Fn_MultiUserAlert')
DROP FUNCTION Fn_MultiUserAlert
GO
--SELECT DBO.Fn_MultiUserAlert('AKZONOBELGST','PG00L5K2')
CREATE FUNCTION [Fn_MultiUserAlert] (@DatabaseName Varchar(50),@HostName Varchar(100))
RETURNS nVarchar(500)
AS
/*********************************
* FUNCTION: Fn_MultiUserAlert
* PURPOSE: System Alert
* NOTES:
* CREATED: Murugan.R
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
*
*********************************/
BEGIN
     Declare @sMessage nVarchar(600)
     
	IF EXISTS(SELECT Distinct A.HostName FROM Master..Sysprocesses A 
	INNER JOIN sys.dm_Exec_Sessions B ON A.Spid=B.session_id
	INNER JOIN master..SysDatabases C ON A.dbid=C.dbid
	WHERE C.Name collate SQL_Latin1_General_CP1_CI_AS IN(@DatabaseName) AND LTRIM(RTRIM(A.HostName)) collate SQL_Latin1_General_CP1_CI_AS
	NOT IN(@HostName) and A.PROGRAM_NAME IN('Core Stocky','Visual Basic')
	and A.Spid>50 And B.Client_Interface_Name='OLEDB')
	BEGIN
		SET @sMessage='Application already in use, Please close the core stocky application in multiuser system'
	END
	ELSE
	BEGIN
		SET @sMessage=''
	END
     
  
     Return (@sMessage)
END
GO
DELETE FROM HotSearchEditorHd WHERE FormId=7011
INSERT INTO  HotSearchEditorHd 
SELECT 7011,'Service Invoice','ServiceType','Select','SELECT S.ServiceId,SerName,SerAcCode,TaxGroupId,C.ClmGrpId  FROM ServiceMaster S INNER JOIN ClaimGroupMaster C ON C.ServiceId=S.ServiceId   where C.servicetype IN(3,vFParam) AND GSTTax=1'
GO
DELETE FROM HotSearchEditorDT WHERE FormId=7011
INSERT INTO HotSearchEditorDT 
SELECT 1,7011,'ServiceType','Service Name','SerName',2500,0,'HotSch-502-2000-7',502  UNION
SELECT 2,7011,'ServiceType','Service Ac Code','SerAcCode',2500,0,'HotSch-502-2000-8',502 
GO
IF NOT EXISTS(SELECT * FROM claimgroupmaster WHERE CLMGRPCODE='CG21')
BEGIN
      INSERT INTO ClaimGroupMaster(ClmGrpId,CmpId,ClmGrpCode,ClmGrpName,AutoClaim,CoaId,Availability,LastModBy,
      LastModDate,AuthId,AuthDate,XMLUpload,DisplayStatus,GSTTax,ServiceType,ServiceId,ServiceOrGoods)
      SELECT (SELECT CURRVALUE+1 FROM COUNTERS WHERE TABNAME='ClaimGroupMaster'),0,'CG21','Window Display Claim',0,
      (SELECT COAID FROM COAMASTER WHERE ACNAME='Window Display Discount Allowed'),1,1,GETDATE(),1,GETDATE(),0,1,1,1,1,1
      
      UPDATE COUNTERS SET CURRVALUE=CURRVALUE+1 WHERE TABNAME='ClaimGroupMaster'
END
GO
DELETE FROM Customcaptions WHERE TRANSID=503
INSERT INTO Customcaptions
SELECT 503,1,1,'lblFileFormat','Valid File Format:        .pdf, .jpeg','','',1,1,1,'2015-04-03',1,'2015-04-03','','','',1,1 UNION
SELECT 503,1000,1,'MsgBox-503-1000-1','','','Select the File Path',1,1,1,'2015-04-03',1,'2015-04-03','','','Select the File Path',1,1 UNION
SELECT 503,1000,2,'MsgBox-503-1000-2','','','File not converted.  Please copy it to your Hard Disk (C,D,E-DRIVE) and proceed.',1,1,1,'2015-04-03',1,'2015-04-03','','','File not converted.  Please copy it to your Hard Disk (C,D,E-DRIVE) and proceed.',1,1 UNION
SELECT 503,1000,3,'MsgBox-503-1000-3','','','Invalid File Format',1,1,1,'2015-04-03',1,'2015-04-03','','','Invalid File Format',1,1 UNION
SELECT 503,1000,4,'MsgBox-503-1000-4','','','Select the Claim Ref Document',1,1,1,'2015-04-03',1,'2015-04-03','','','Select the Claim Ref Document',1,1 UNION
SELECT 503,1000,5,'MsgBox-503-1000-5','','','Files cannot be selected from Desktop.  Please copy it to your Hard Disk (C,D,E-DRIVE) and proceed.',1,1,1,'2015-04-03',1,'2015-04-03','','','Files cannot be selected from Desktop.  Please copy it to your Hard Disk (C,D,E-DRIVE) and proceed.',1,1 UNION
SELECT 503,1000,6,'MsgBox-503-1000-6','','','File Already Exist',1,1,1,'2015-04-03',1,'2015-04-03','','','File Already Exist',1,1 UNION
SELECT 503,1000,7,'MsgBox-503-1000-7','','','Select the Claim Ref Number',1,1,1,'2015-04-03',1,'2015-04-03','','','Select the Claim Ref Number',1,1 UNION
SELECT 503,1000,8,'MsgBox-503-1000-8','','','File size exceeds the allowable limit',1,1,1,'2015-04-03',1,'2015-04-03','','','File size exceeds the allowable limit',1,1 UNION
SELECT 503,1000,9,'MsgBox-503-1000-9','','','File Not Found',1,1,1,'2015-04-03',1,'2015-04-03','','','File Not Found',1,1 UNION
SELECT 503,1000,10,'MsgBox-503-1000-10','','','Select the Salesman/Promoter',1,1,1,'2015-04-03',1,'2015-04-03','','','Select the Salesman/Promoter',1,1 UNION
SELECT 503,1000,11,'MsgBox-503-1000-11','','','No.of Files Per Claim Type Exceeds',1,1,1,'2015-04-03',1,'2015-04-03','','','No.of Files Per Salesman/Promoter Exceeds',1,1 
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='BinaryFileDt' AND XTYPE='U')
DROP TABLE BinaryFileDt
GO
CREATE TABLE [dbo].[BinaryFileDt](
	[ClaimType] [varchar](100) NOT NULL,
	[ClmRefId] [int] NULL,
	[ClaimCode] [varchar](100) NOT NULL,
	[ClaimDesc] [varchar](200) NOT NULL,
	[LineClaimRefNo] [nvarchar](200) NOT NULL,
	[ClaimYear] [int] NULL,
	[ClaimMonth] [varchar](50) NULL,
	[ImageName] [varchar](100) NOT NULL,
	[Binaryfile] [varbinary](max) NULL,
	[FileType] [varchar](20) NULL,
	[Status] [int] NOT NULL,
	[Availability] [int] NOT NULL,
	[LastModBy] [int] NOT NULL,
	[LastModDate] [datetime] NOT NULL,
	[AuthId] [int] NOT NULL,
	[AuthDate] [datetime] NOT NULL,
 CONSTRAINT [PK_BinaryFileDt] PRIMARY KEY CLUSTERED 
(
	[ClaimDesc] ASC,
	[LineClaimRefNo] ASC,
	[ImageName] ASC,
	[Status] ASC,
	[LastModBy] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
)
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='ClaimRefDocumentUpload' AND XTYPE='U')
DROP TABLE ClaimRefDocumentUpload
GO
CREATE TABLE ClaimRefDocumentUpload
(
	[ClaimType] [varchar](100) NULL,
	[ClmRefId] [int] NULL,
	[ClmDesc] [varchar](200) NULL,
	[ClmRefCode] [varchar](100) NULL,
	[LineClaimRefNo] [nvarchar](200) NOT NULL,
	[ClaimDate] [datetime] NULL,
	[ClaimYear] [int] NULL,
	[ClaimMonth] [varchar](50) NULL,
	[ImageName] [varchar](100) NULL,
	[Binaryfile] [varchar](max) NULL,
	[Status] [int] NULL,
	[FileType] [varchar](20) NULL,
	[Upload] [int] NULL,
	[UploadedDate] [datetime] NULL,
	[Availability] [int] NULL,
	[LastModBy] [int] NULL,
	[LastModDate] [datetime] NULL,
	[AuthId] [int] NULL,
	[AuthDate] [datetime] NULL
)
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Import_BinaryData' AND XTYPE='P')
DROP PROCEDURE Proc_Import_BinaryData
GO
--Exec Proc_Import_BinaryData 'C:\Users\karthick.kj\Downloads\UBI_FullStatement (1).pdf',1
CREATE PROCEDURE [dbo].[Proc_Import_BinaryData]
(
	@file_path VARCHAR(MAX),
	@user	   VARCHAR(100)
)
AS
BEGIN
DECLARE @os_file_path VARCHAR(1000)
DECLARE @sql VARCHAR(1000)
SET @os_file_path=@file_path
SET @sql = N'UPDATE dbo.BinaryFileDt 
			 SET Binaryfile = (SELECT * FROM OPENROWSET(BULK N''' + @os_file_path + ''', SINGLE_BLOB) as x)
			 WHERE imagename = ''' + @os_file_path + ''' AND lastmodby = ''' + @user + ''' '
EXEC(@sql)
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Fn_ReturnStringBinaryFile' AND XTYPE='FN')
DROP FUNCTION Fn_ReturnStringBinaryFile
GO
--SELECT  DBO.Fn_ReturnStringBinaryFile('2016-08-22',1) as sql
CREATE FUNCTION Fn_ReturnStringBinaryFile(@TransactionDate VARCHAR(100),@UsrId INT)
RETURNS NVARCHAR(MAX)
AS
BEGIN
	SET @TransactionDate=CONVERT(VARCHAR(10),@TransactionDate,121)
	DECLARE @SSQL NVARCHAR(MAX)
	SET @SSQL=' '
	SET @SSQL= ' SET ARITHABORT ON SET QUOTED_IDENTIFIER ON Insert into ClaimRefDocumentUpload (ClaimType,ClmRefId,ClmDesc,ClmRefCode,LineClaimRefNo,ClaimDate,ClaimYear,ClaimMonth,ImageName,Binaryfile,Status,FileType,Upload,UploadedDate,Availability,LastModBy,LastModDate,AuthId,AuthDate) '
	SET @SSQL=@SSQL+' select ClaimType,ClmRefId,ClaimDesc,ClaimCode,ClaimCode,'''+@TransactionDate+''',ClaimYear,ClaimMonth, ImageName,cast('''' as xml).value(''xs:base64Binary(xs:hexBinary(sql:column("Binaryfile")))'', '
	SET @SSQL=@SSQL+'''varchar(max)''), '
	SET @SSQL=@SSQL+'status,FileType,0 upload,getdate(),Availability,LastModBy,LastModDate,AuthId,AuthDate  from BinaryFileDt_Con where LastModBy = '''+CAST(@UsrId AS VARCHAR(10))+''' and status<>''-1'''
	RETURN @SSQL
END
GO
IF NOT EXISTS(SELECT * FROM counters WHERE TabName='ServiceInvoiceHd')
BEGIN
	DELETE FROM COUNTERS WHERE TabName='ServiceInvoiceHd'
	INSERT INTO COUNTERS
	SELECT 'ServiceInvoiceHd','ServiceInvId','',0,1,0,'Service Invoice',1,2017,1,1,GETDATE(),1,GETDATE() UNION
	SELECT 'ServiceInvoiceHd','ServiceInvRefNo','SVI',6,1,0,'Service Invoice',1,2017,1,1,GETDATE(),1,GETDATE()
END
GO
IF NOT EXISTS(SELECT * FROM Menudef WHERE MenuId='mClm46')
BEGIN
	DELETE FROM Menudef WHERE MenuId='mClm46'
	INSERT INTO Menudef
	SELECT MAX(SRLNO)+1,'mClm46','mnuServiceInvoice','mClm','Service Invoice',0,'frmServiceInvoice','Service Invoice' FROM MENUDEF 
END
GO
DELETE FROM ProfileDt WHERE MenuId='mClm46'
INSERT INTO ProfileDt 
SELECT prfid,'mClm46',0,'New',1,1,1,GETDATE(),1,GETDATE() FROM PROFILEHD  UNION
SELECT prfid,'mClm46',1,'Edit',1,1,1,GETDATE(),1,GETDATE() FROM PROFILEHD  UNION
SELECT prfid,'mClm46',2,'Save',1,1,1,GETDATE(),1,GETDATE() FROM PROFILEHD UNION
SELECT prfid,'mClm46',3,'Delete',1,1,1,GETDATE(),1,GETDATE() FROM PROFILEHD UNION
SELECT prfid,'mClm46',6,'Print',1,1,1,GETDATE(),1,GETDATE()FROM PROFILEHD 
GO
DELETE FROM HotSearchEditorHd WHERE FormId=7004
INSERT INTO  HotSearchEditorHd 
SELECT 7004,'Service Invoice','Retailer','Select' ,'Select Rtrid,RtrName,RtrCode,CASE ISNULL(ColumnValue,0) WHEN ''Registered'' THEN 1 WHEN ''Unregistered'' THEN 2 ELSE 0 END RetailerType 
From Retailer R LEFT OUTER JOIN (SELECT MASTERRECORDID,ColumnValue FROM UDCDETAILS UD
INNER JOIN UdcMaster U ON U.MasterId=UD.MasterId AND U.UdcMasterId=UD.UdcMasterId AND U.MasterId=2 AND ColumnName=''Retailer Type'')A
ON A.MasterRecordId=R.RtrId'
GO
DELETE FROM HotSearchEditorDT WHERE FormId=7004
INSERT INTO HotSearchEditorDT 
SELECT 1,7004,'Retailer','Name','RtrName',2500,0,'HotSch-502-2000-1',502  UNION
SELECT 2,7004,'Retailer','Code','RtrCode',2500,0,'HotSch-502-2000-2',502 
GO
DELETE FROM HotSearchEditorHd WHERE FormId=7005
INSERT INTO  HotSearchEditorHd 
SELECT 7005,'Service Invoice','Company','Select',' SELECT DISTINCT Cmpid,CmpName,CmpCode,ColumnValue,Address1,Address2,Address3 ,ColumnValue AS State  
		 FROM Company C(NOLOCK) INNER JOIN
		(SELECT MasterRecordId,ColumnValue FROM UdcMaster U (NOLOCK) 
		INNER JOIN UdcDetails UD (NOLOCK) ON U.MasterId=UD.MasterId and U.UdcMasterId=UD.UdcMasterId
		INNER JOIN Retailer D (NOLOCK) ON D.RtrId=UD.MasterRecordId
		WHERE U.MasterId=7 and ColumnName=''State Name'' )A ON C.CmpId=A.MasterRecordId '
GO
DELETE FROM HotSearchEditorDT WHERE FormId=7005
INSERT INTO HotSearchEditorDT 
SELECT 1,7005,'Company','Name','CmpName',2500,0,'HotSch-502-2000-3',502  UNION
SELECT 2,7005,'Company','Code','CmpCode',2500,0,'HotSch-502-2000-4',502 
GO
DELETE FROM HotSearchEditorHd WHERE FormId=7006
INSERT INTO  HotSearchEditorHd 
SELECT 7006,'Service Invoice','Year','Select',' select JcmId,JcmYr from JCMast WITH (NOLOCK) WHERE JcmYr<=year(getdate())'
GO
DELETE FROM HotSearchEditorDT WHERE FormId=7006
INSERT INTO HotSearchEditorDT 
SELECT 1,7006,'Year','Year','JcmYr',4500,0,'HotSch-502-2000-5',502 
GO
DELETE FROM HotSearchEditorHd WHERE FormId=7007
INSERT INTO  HotSearchEditorHd 
SELECT 7007,'Service Invoice','Month','Select',' SELECT JcmJc,CONVERT(VARCHAR(10),JcmSdt,121)+''  To  ''+CONVERT(varchar(10),JcmEdt,121) AS Month,CONVERT(VARCHAR(10),JcmSdt,121)FromDate,CONVERT(varchar(10),JcmEdt,121)ToDate FROM jcmonth where jcmid=vFParam 
AND CONVERT(varchar(10),jcmsdt,121)<=CONVERT(varchar(10),getdate(),121)'
GO
DELETE FROM HotSearchEditorDT WHERE FormId=7007
INSERT INTO HotSearchEditorDT 
SELECT 1,7007,'Month','Month','Month',2500,0,'HotSch-502-2000-6',502 
GO
DELETE FROM HotSearchEditorHd WHERE FormId=7008
INSERT INTO  HotSearchEditorHd 
SELECT 7008,'Service Invoice','ServiceType','Select','SELECT S.ServiceId,SerName,SerAcCode,TaxGroupId,C.ClmGrpId  FROM ServiceMaster S INNER JOIN ClaimGroupMaster C ON C.ServiceId=S.ServiceId   where C.servicetype IN(3,vFParam) AND GSTTax=1'
GO
DELETE FROM HotSearchEditorDT WHERE FormId=7008
INSERT INTO HotSearchEditorDT 
SELECT 1,7008,'ServiceType','Service Name','SerName',2500,0,'HotSch-502-2000-7',502  UNION
SELECT 2,7008,'ServiceType','Service Ac Code','SerAcCode',2500,0,'HotSch-502-2000-8',502 
GO
DELETE FROM HotSearchEditorHd WHERE FormId=7009
INSERT INTO  HotSearchEditorHd 
SELECT 7009,'Service Invoice','ServiceRefernceNo','Select','SELECT DISTINCT SH.ServiceInvId,ServiceInvRefNo,ServiceInvDate,CASE ServiceInvFor WHEN 1 THEN ''Retailer Service'' WHEN 2 THEN ''Distributor Service'' END ServiceType,SerName 
FROM ServiceInvoiceHd  SH INNER JOIN ServiceInvoiceDT SD ON SH.ServiceInvId=SD.ServiceInvId
INNER JOIN ServiceMaster SM ON SM.ServiceId=SH.ServiceId'
GO
DELETE FROM HotSearchEditorDT WHERE FormId=7009
INSERT INTO HotSearchEditorDT 
SELECT 1,7009,'ServiceRefernceNo','Service Inv Ref No','ServiceInvRefNo',2500,0,'HotSch-502-2000-9',502  UNION
SELECT 2,7009,'ServiceRefernceNo','Service Inv Date','ServiceInvDate',1000,0,'HotSch-502-2000-10',502  UNION
SELECT 3,7009,'ServiceRefernceNo','Service Type','ServiceType',2500,0,'HotSch-502-2000-11',502  UNION
SELECT 4,7009,'ServiceRefernceNo','Service Name','SerName',1000,0,'HotSch-502-2000-12',502 
GO
DELETE FROM ScreenDefaultValues WHERE TRANSID=502 AND CtrlId=1
INSERT INTO ScreenDefaultValues
SELECT 502,1,1,'Retailer',1,1,1,1,GETDATE(),1,GETDATE(),'Retailer' UNION 
SELECT 502,1,2,'Distributor',2,1,1,1,GETDATE(),1,GETDATE(),'Distributor'
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE NAME='FN_Return_DistRetDetails' AND XTYPE In ('TF','FN'))
DROP FUNCTION FN_Return_DistRetDetails
GO
--select * from dbo.FN_Return_DistRetDetails(1)  
CREATE FUNCTION FN_Return_DistRetDetails(@Type AS INT)  
RETURNS @Table TABLE  
(  
 FromId   INT,  
 FromCode  VARCHAR(50),  
 FromName  NVARCHAR(50),  
 FromAddress1 NVARCHAR(100),  
 FromAddress2 NVARCHAR(100),  
 FromAddress3 NVARCHAR(100),  
 FromStateName   NVARCHAR(100),  
 FromGSTTin  NVARCHAR(50),  
 FromPANNO  NVARCHAR(10),   
 ToId   INT,  
 ToCode   VARCHAR(50),  
 ToName   NVARCHAR(50),  
 ToAddress1  NVARCHAR(100),  
 ToAddress2  NVARCHAR(100),  
 ToAddress3  NVARCHAR(100),  
 ToStateName  NVARCHAR(100),  
 ToGSTTin  NVARCHAR(50),  
 ToPANNO   NVARCHAR(10)  
)  
AS  
BEGIN  
DECLARE @State AS NVARCHAR(100)  
DECLARE @DistState AS NVARCHAR(100)  
DECLARE @DistGSTTin NVARCHAR(50)  
DECLARE @DistPANNO NVARCHAR(10)  
  
  SELECT @DistState=ColumnValue FROM UdcMaster U (NOLOCK)   
  INNER JOIN UdcDetails UD (NOLOCK) ON U.MasterId=UD.MasterId and U.UdcMasterId=UD.UdcMasterId  
  INNER JOIN Distributor D (NOLOCK) ON D.DistributorId=UD.MasterRecordId  
  WHERE U.MasterId=16 and ColumnName='State Name'   
  
  SELECT @DistGSTTin=ColumnValue FROM UdcMaster U (NOLOCK)   
  INNER JOIN UdcDetails UD (NOLOCK) ON U.MasterId=UD.MasterId and U.UdcMasterId=UD.UdcMasterId  
 INNER JOIN Distributor D (NOLOCK) ON D.DistributorId=UD.MasterRecordId  
  WHERE U.MasterId=16 and ColumnName='GSTIN'   
    
  SELECT @DistPANNO=ColumnValue FROM UdcMaster U (NOLOCK)   
  INNER JOIN UdcDetails UD (NOLOCK) ON U.MasterId=UD.MasterId and U.UdcMasterId=UD.UdcMasterId  
  INNER JOIN Distributor D (NOLOCK) ON D.DistributorId=UD.MasterRecordId  
  WHERE U.MasterId=16 and ColumnName='PAN Number'   
  
  
 IF @Type=1  
 BEGIN  
  
  INSERT INTO @Table  
  SELECT 0,'','','','','','','','',DistributorId,Distributorcode,DistributorName,DistributorAdd1,DistributorAdd2,  
      DistributorAdd3,ISNULL(@DistState,''),ISNULL(@DistGSTTin,''),ISNULL(@DistPANNO,'')  
  FROM Distributor(NOLOCK)  
 END  
   
 IF @Type=2  
 BEGIN  
   
  SELECT @State=ColumnValue FROM UdcMaster U (NOLOCK)   
  INNER JOIN UdcDetails UD (NOLOCK) ON U.MasterId=UD.MasterId and U.UdcMasterId=UD.UdcMasterId  
  INNER JOIN Retailer D (NOLOCK) ON D.RtrId=UD.MasterRecordId  
  WHERE U.MasterId=2 and ColumnName='State Name'   
     
  INSERT INTO @Table  
  SELECT  DistributorId,Distributorcode,DistributorName,DistributorAdd1,DistributorAdd2,  
      DistributorAdd3,ISNULL(@DistState,''),ISNULL(@DistGSTTin,''),ISNULL(@DistPANNO,''),CmpId,CmpCode,CmpName,Address1,Address2,Address3,  
      ISNULL(@State,''),'',''   FROM Distributor(NOLOCK) CROSS JOIN Company(NOLOCK) WHERE cmpid=1  
 END   
   
RETURN  
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE name='FN_Return_RetUDCDetails' AND XTYPE='TF')
DROP FUNCTION FN_Return_RetUDCDetails
GO
--select * from dbo.FN_Return_RetUDCDetails(2)
CREATE FUNCTION FN_Return_RetUDCDetails(@Type AS INT,@Rtrid AS INT)
RETURNS @Table TABLE
(	
	Address1	NVARCHAR(100),
	Address2	NVARCHAR(100),
	Address3	NVARCHAR(100),
	StateName   NVARCHAR(100),
	GSTTin		NVARCHAR(50),
	PANNO		NVARCHAR(10)
)
AS
BEGIN
DECLARE @State AS NVARCHAR(100) 
DECLARE @GSTTin NVARCHAR(50)
DECLARE @PANNO NVARCHAR(10)

	IF @Type=1
	BEGIN
		SELECT @State=ColumnValue FROM UdcMaster U (NOLOCK) 
		INNER JOIN UdcDetails UD (NOLOCK) ON U.MasterId=UD.MasterId and U.UdcMasterId=UD.UdcMasterId
		INNER JOIN Retailer D (NOLOCK) ON D.RtrId=UD.MasterRecordId
		WHERE U.MasterId=2 and ColumnName='State Name'  and RtrId=@Rtrid

		SELECT @GSTTin=ColumnValue FROM UdcMaster U (NOLOCK) 
		INNER JOIN UdcDetails UD (NOLOCK) ON U.MasterId=UD.MasterId and U.UdcMasterId=UD.UdcMasterId
		INNER JOIN Retailer D (NOLOCK) ON D.RtrId=UD.MasterRecordId and RtrId=@Rtrid
		WHERE U.MasterId=2 and ColumnName='GSTIN' 
		
		SELECT @PANNO=ColumnValue FROM UdcMaster U (NOLOCK) 
		INNER JOIN UdcDetails UD (NOLOCK) ON U.MasterId=UD.MasterId and U.UdcMasterId=UD.UdcMasterId
		INNER JOIN Retailer D (NOLOCK) ON D.RtrId=UD.MasterRecordId and RtrId=@Rtrid
		WHERE U.MasterId=2 and ColumnName='PAN Number' 
		
		INSERT INTO @Table
		SELECT  RtrAdd1,RtrAdd2,RtrAdd3,ISNULL(@State,''),ISNULL(@GSTTin,''),ISNULL(@PANNO,'') FROM Retailer WHERE RtrId=@Rtrid
	END

RETURN
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE name='ServiceInvoiceHd' AND XTYPE='U')
CREATE TABLE ServiceInvoiceHd
(
	ServiceInvId		INT PRIMARY KEY,
	ServiceInvRefNo	 	NVARCHAR(100),
	ServiceInvDate		DATETIME,
	ServiceInvFor		INT,---1 Retailer /2 Distributor
	ServiceFromId		INT,
	ServiceToId			INT,
	FromStateCode		NVARCHAR(50),
	FromGSTTinNo		NVARCHAR(100),
	FromPanNo			NVARCHAR(10),
	ServiceType			INT,
	ServiceAcCode		NVARCHAR(50),
	ServiceId			INT,---Service Master Id
	TaxGroupId			INT,
	ClmGrpId			INT,
	SerYear				INT,
	FromDate			DATETIME,
	ToDate				DATETIME,
	ServiceAmount		NUMERIC(18,6),
	GstAmount			NUMERIC(18,6),
	TotalAmount			NUMERIC(18,6),
	AppServiceAmount	NUMERIC(18,6),
	AppGstAmount		NUMERIC(18,6),
	AppTotalAmount		NUMERIC(18,6),
	ReverseCharges		NUMERIC(18,6),
	ServiceInvStatus	INT,
	DocRefNo			NVARCHAR(100),
	Remarks				NVARCHAR(100),
	Approval			INT,
	Upload				INT,
	GSPUpload1			INT,
	GSPUpload2			INT,
	GSPUpload3			INT,
	Availability		INT,
	LastModBy			INT,
	LastModDate			DATETIME,
	AuthId				INT,
	AuthDate			DATETIME
)
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE name='ServiceInvoiceDT' AND XTYPE='U')
CREATE TABLE ServiceInvoiceDT
(
	ServiceInvId	 INT,
	Refid			 INT,
	RefCode			 NVARCHAR(100),
	RowNo			 INT, 
	AvlServiceAmt	 NUMERIC(18,6),
	ServiceAmount	 NUMERIC(18,6),
	GSTAmount		 NUMERIC(18,6),
	TotServiceAmount NUMERIC(18,6),
	AppSerAmount	 NUMERIC(18,6),
	AppGSTAmount	 NUMERIC(18,6),
	SupportingFiles	 INT,
	Upload			 INT,
	GSPUpload		 INT,
	Availability	 INT,
	LastModBy		 INT,
	LastModDate		 DATETIME,
	AuthId			 INT,
	AuthDate		 DATETIME,
	PRIMARY KEY (ServiceInvId,RowNo),
	FOREIGN KEY(ServiceInvId) REFERENCES ServiceInvoiceHd(ServiceInvId)
)
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE name='ServiceInvoiceTaxDetails' AND XTYPE='U')
CREATE TABLE ServiceInvoiceTaxDetails
(
	ServiceInvId	 INT,
	ServiceTaxSeqId  INT,
	ServiceGroupId	 INT,
	RowNo			 INT,
	Taxid			 INT,
	TaxPerc			 NUMERIC(18,6),
	TaxableAmount	 NUMERIC(18,6),
	TaxAmount		 NUMERIC(18,6),
 	Upload			 INT,
	GSPUpload		 INT,
	Availability	 INT,
	LastModBy		 INT,
	LastModDate		 DATETIME,
	AuthId			 INT,
	AuthDate		 DATETIME
	PRIMARY KEY (ServiceInvId,Taxid,RowNo),
	FOREIGN KEY(ServiceInvId) REFERENCES ServiceInvoiceHd(ServiceInvId)
)
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE name='SalesInvoiceWindowService' AND XTYPE='U')
CREATE TABLE SalesInvoiceWindowService
(
	[SalId]		  [bigint] NOT NULL,
	[SchId]		  [int] NOT NULL,
	[RtrId]		  [int] NOT NULL,
	[ServiceInvId][Int],
	[AdjAmt]	  [numeric](18, 2) NOT NULL,
	[SchClmId]    [int] NULL,
	[GspUpload1]  [int] NULL,
	[GspUpload2]  [int] NULL,
	[Availability] [tinyint] NOT NULL,
	[LastModBy]  [tinyint] NOT NULL,
	[LastModDate][datetime] NOT NULL,
	[AuthId]	 [tinyint] NOT NULL,
	[AuthDate]   [datetime] NOT NULL,
	 CONSTRAINT  [PK_SalesInvoiceWindowService_SalId_SchId_RtrId_ServiceInvId] PRIMARY KEY CLUSTERED 
	(
		[SalId] ASC,
		[SchId] ASC,
		[RtrId] ASC,
		[ServiceInvId]ASC
	),
	FOREIGN KEY(SalId) REFERENCES salesinvoice(SalId)	
)
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Temp_RettoCompanyClaimDetails' AND XTYPE='U')
DROP TABLE Temp_RettoCompanyClaimDetails 
GO
CREATE TABLE Temp_RettoCompanyClaimDetails
(
	ServiceId		INT,
	ClmGrpId		INT,
	Schid			INT,
	SchDesc			NVARCHAR(200),
	Rtrid			INT,
	TotAmount		NUMERIC(18,6),
	AdjAmount		NUMERIC(18,6),
	AvAmount		NUMERIC(18,6),
	GstAmount		NUMERIC(18,6),
	TotSerAmount	NUMERIC(18,6),		
	Usrid			INT,
	Transid			INT
)
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Temp_RettoCompanyTaxDetails ' AND XTYPE='U')
DROP TABLE Temp_RettoCompanyTaxDetails 
GO
CREATE TABLE Temp_RettoCompanyTaxDetails 
(
	ServiceId		INT,
	ClmGrpId		INT,
	Schid			INT,
	Rtrid			INT,	
	ServiceGroupId	INT,
	ServiceTaxSeqid	INT,
	taxid			INT,
	ServiceTaxCode	VARCHAR(50),
	ServiceTaxPer 	NUMERIC(18,2),			 
	ServiceAmount	NUMERIC(18,6),
	ServiceTaxAmt	NUMERIC(18,6),
	Usrid			INT,
	Transid			INT
)
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Temp_RettoCompanyInvoiceDetails ' AND XTYPE='U')
DROP TABLE Temp_RettoCompanyInvoiceDetails 
GO
CREATE TABLE Temp_RettoCompanyInvoiceDetails 
(
	ServiceId		INT,
	ClmGrpId		INT,
	CrNoteNumber	NVARCHAR(50),
	CrNoteAmt		NUMERIC(18,6),
	Schid			INT,
	Rtrid			INT,	
	Salid			INT,
	Salinvno		NVARCHAR(50),
	Salinvdate		DATETIME,
	SalNetAmount	NUMERIC(18,6),	
	AdjustedAmount	NUMERIC(18,6),	
	Usrid			INT,
	Transid			INT
)
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE name='Proc_ReturnAvService' AND XTYPE='P')
DROP PROCEDURE Proc_ReturnAvService
GO
/*
BEGIN TRANSACTION
EXEC Proc_ReturnAvService 1,10012,81,'2017-06-01','2017-06-30',2,502
SELECT * FROM Temp_RettoCompanyClaimDetails
ROLLBACK TRANSACTION
*/
CREATE PROCEDURE [dbo].[Proc_ReturnAvService]
(
	@ServiceId	AS INT,
	@ClmGrpid	AS INT,
	@RtrId		AS INT,
	@FromDate   AS DATETIME,
	@ToDate		AS DATETIME,
	@Usrid		AS INT,
	@Tranid		AS INT
)
AS
BEGIN
SET NOCOUNT ON

	DECLARE @Schid AS INT
	DECLARE @MaxSlno AS INT
	DECLARE @Slno AS INT
	DECLARE @Date AS DATETIME  
	DECLARE @SchError AS INT
	DECLARE @RuleError AS INT
	DECLARE @Budget AS NUMERIC(18,6)
	DECLARE @RetailerBudget AS NUMERIC(18,6)
	DECLARE @AdjustedAmount AS NUMERIC(18,6)	

	DECLARE @ServiceAmount AS NUMERIC(18,6)
	DECLARE @ServiceTaxAmt AS NUMERIC(18,6)		
	DECLARE @DistState AS VARCHAR(100)
	DECLARE @RetState AS VARCHAR(100)
	DECLARE @StateId AS INT
	DECLARE @StateType AS VARCHAR(50)
	DECLARE @TaxGroupId AS INT
	DECLARE @ServiceTaxSeqid AS INT
	DECLARE @SchDesc AS NVARCHAR(200)
	DECLARE @WinClmId AS INT
	DECLARE @PrgClmId AS INT
	DECLARE @SanctionNo AS NVARCHAR(100)
	
	CREATE TABLE #SchemeList
	(
		Id INT IDENTITY(1,1),
		Schid INT,
		SchDsc NVARCHAR(200),
		Budget	NUMERIC(18,6)
	)
	
	CREATE TABLE #SchemeApplicable
	(
		Id INT IDENTITY(1,1),
		Schid INT,
		Budget NUMERIC(18,6)
	)
	
	DELETE FROM Temp_RettoCompanyClaimDetails WHERE Usrid=@Usrid AND Transid=@Tranid AND clmGrpid=@ClmGrpid	AND ServiceId=@ServiceId
	DELETE FROM Temp_RettoCompanyTaxDetails WHERE Usrid=@Usrid AND Transid=@Tranid AND clmGrpid=@ClmGrpid AND ServiceId=@ServiceId
	DELETE FROM Temp_RettoCompanyInvoiceDetails WHERE Usrid=@Usrid AND Transid=@Tranid AND clmGrpid=@ClmGrpid AND ServiceId=@ServiceId
	
	SET @Date=CONVERT(VARCHAR(10),GETDATE(),121)

	SELECT TOP 1 @DistState=ColumnValue FROM UdcMaster U (NOLOCK) 
	INNER JOIN UdcDetails UD (NOLOCK) ON U.MasterId=UD.MasterId and U.UdcMasterId=UD.UdcMasterId
	INNER JOIN Distributor D (NOLOCK) ON D.DistributorId=UD.MasterRecordId
	WHERE U.MasterId=16 and ColumnName='State Name' 
	
	--SELECT @RetState=ColumnValue FROM UdcMaster U (NOLOCK) 
	--INNER JOIN UdcDetails UD (NOLOCK) ON U.MasterId=UD.MasterId and U.UdcMasterId=UD.UdcMasterId
	--INNER JOIN Retailer D (NOLOCK) ON D.RtrId=UD.MasterRecordId
	--WHERE U.MasterId=7 and ColumnName='State Name' 
	
	SELECT @RetState = C.StateName from Retailer A (NOLOCK)
	Inner JOIN RetailerShipAdd B (NOLOCK) ON A.RtrId = B.RtrId 
	Inner JOIN StateMaster C (NOLOCK) ON B.StateId = C.StateId
	where A.RtrId = @RtrId and B.RtrShipDefaultAdd = 1
	
	SELECT @StateId=StateId FROM StateMaster WHERE StateName=@RetState

	SELECT @WinClmId= ClmGrpId FROM claimgroupmaster WHERE ClmGrpCode='CG21'---Window Display Claim
	
	--SELECT @PrgClmId  = ClmGrpId FROM claimgroupmaster WHERE ClmGrpCode='CG28'---Window Display Claim
	
	IF @DistState=@RetState 
	BEGIN
		SET @StateType='State'
	END
	ELSE
	BEGIN
		SET @StateType='InterState'
	END
	
	SELECT @TaxGroupId=TaxGroupId FROM ServiceMaster WHERE ServiceId=@ServiceId
	
IF @WinClmId=@ClmGrpid
BEGIN			
	INSERT INTO #SchemeList 
	SELECT DISTINCT WinDispSchId,SchDsc,WDSCapAmount FROM (
	SELECT SM.Schid as WinDispSchId,SchDsc,Budget WDSCapAmount FROM schememaster SM (NOLOCK) , SchemeRetAttr SA  
	(NOLOCK) WHERE  SchType = 4 AND  Sm.Schid = SA.Schid AND  setWindowDisp = 1  
	AND AdjWinDispOnlyOnce = 0 AND schstatus = 1 AND  (@FromDate between SchValidFrom and SchValidTill) OR 
	(@ToDate between SchValidFrom and SchValidTill) OR (SchValidFrom between @FromDate and @ToDate)
	OR (SchValidTill between @FromDate and @ToDate)
	)A
	

	SELECT @MaxSlno=MAX(Id) from #SchemeList
	
	SET @Slno=1
	WHILE @Slno<=@MaxSlno
	BEGIN
		SET @SchError=0
		SET @RuleError=0
		SET @RetailerBudget=0
		SET @AdjustedAmount=0
		SET @Budget=0
		SET @ServiceAmount=0
		SET @ServiceTaxAmt=0
		
		SELECT @Schid=Schid,@Budget=Budget,@SchDesc=SchDsc FROM #SchemeList WHERE id=@Slno
		
		EXEC Proc_ReturnSchemeApplicable 0,0,@RtrId,1,2,@Schid,@SchError
		
		IF @SchError=0
		BEGIN			
			EXEC Proc_ApplySchemeRuleSetting @Schid,@RtrId,0,@Usrid,2,@RuleError
			
			IF @RuleError=0
			BEGIN
				SELECT @RetailerBudget =BudgetAllocated FROM SchemeRtrLevelValidation WHERE SchId=@Schid AND RTRID=@RtrId
				
				IF @RetailerBudget>0 
				BEGIN
					SELECT @AdjustedAmount=ISNULL(SUM(SD.ServiceAmount),0) FROM ServiceInvoiceHd SH INNER JOIN ServiceInvoiceDT SD ON SH.ServiceInvId=SD.ServiceInvId
					WHERE ServiceInvFor=1 AND Refid=@Schid AND SH.ServiceFromId=@RtrId
				END
				ELSE
				BEGIN
				
					SELECT @AdjustedAmount=ISNULL(SUM(ServiceAmount),0) FROM
					(
					SELECT SUM(SD.ServiceAmount) AS ServiceAmount FROM ServiceInvoiceHd SH INNER JOIN ServiceInvoiceDT SD ON SH.ServiceInvId=SD.ServiceInvId
					WHERE ServiceInvFor=1 AND Refid=@Schid 		
					UNION ALL
					SELECT SUM(AdjAmt) AS ServiceAmount FROM SalesInvoiceWindowDisplay SW INNER JOIN SalesInvoice SI ON SI.SalId=SW.SalId 
					WHERE SchId=@Schid AND SW.RtrId=SI.RtrId and SW.RtrId= @RtrId AND DlvSts IN(4,5) AND SALINVDATE<'2017-07-01'
					)A
					
				END
		
				
				IF @Budget>isnull(@AdjustedAmount,0)
				BEGIN
					IF @RetailerBudget>0
					BEGIN
						IF @RetailerBudget>@AdjustedAmount
						BEGIN
							SET @ServiceAmount=@RetailerBudget-@AdjustedAmount
						END
					END				
					ELSE
					BEGIN
						SET @ServiceAmount=@Budget-@AdjustedAmount
					END
					
					SELECT @ServiceTaxSeqid=MAX(ServiceTaxSeqid) FROM ServiceTaxGroupMaster SM INNER JOIN ServiceTaxGroupSetting SD ON SM.ServiceGroupId=SD.ServiceGroupId
					WHERE SM.ServiceGroupId=@TaxGroupId
					
					IF @StateType='State'   -----GST12
					BEGIN		
						INSERT INTO Temp_RettoCompanyTaxDetails(ServiceId,ClmGrpId,Schid,Rtrid,ServiceGroupId,ServiceTaxSeqid,taxid,ServiceTaxCode,ServiceTaxPer,
														ServiceAmount,ServiceTaxAmt,Usrid,Transid)
						SELECT @ServiceId,@ClmGrpid,@schid,@Rtrid,SM.ServiceGroupId,ServiceTaxSeqid,taxid,ServiceTaxCode,ServiceTaxPer,
							@ServiceAmount,0,@Usrid,@Tranid
						FROM ServiceTaxGroupMaster SM INNER JOIN ServiceTaxGroupSetting SD ON SM.ServiceGroupId=SD.ServiceGroupId
						WHERE SM.ServiceGroupId=@TaxGroupId	and ServiceTaxSeqid=@ServiceTaxSeqid AND StateId=@StateId AND Statetype='State'
					END
					
					IF @StateType='InterState'
					BEGIN
						INSERT INTO Temp_RettoCompanyTaxDetails(ServiceId,ClmGrpId,Schid,Rtrid,ServiceGroupId,ServiceTaxSeqid,taxid,ServiceTaxCode,ServiceTaxPer,
														ServiceAmount,ServiceTaxAmt,Usrid,Transid)
						SELECT @ServiceId,@ClmGrpid,@schid,@Rtrid,SM.ServiceGroupId,ServiceTaxSeqid,taxid,ServiceTaxCode,ServiceTaxPer,
							   @ServiceAmount,0,@Usrid,@Tranid 
						FROM ServiceTaxGroupMaster SM INNER JOIN ServiceTaxGroupSetting SD ON SM.ServiceGroupId=SD.ServiceGroupId
						WHERE SM.ServiceGroupId=@TaxGroupId	and ServiceTaxSeqid=@ServiceTaxSeqid AND StateId=@StateId AND Statetype='InterState'
					END
					
					UPDATE Temp_RettoCompanyTaxDetails SET ServiceTaxAmt=CAST(@ServiceAmount * (ServiceTaxPer / 100 ) AS NUMERIC(38,6)) WHERE Schid = @Schid
					
					SELECT @ServiceTaxAmt=SUM(ServiceTaxAmt) FROM Temp_RettoCompanyTaxDetails  WHERE Usrid=@Usrid AND Transid=@Tranid AND clmGrpid=@ClmGrpid	AND ServiceId=@ServiceId
					and Schid = @Schid
					
					IF @ServiceTaxAmt>0
					BEGIN
						INSERT INTO Temp_RettoCompanyClaimDetails(ServiceId,ClmGrpId,Schid,SchDesc,Rtrid,TotAmount,AdjAmount,AvAmount,GstAmount,TotSerAmount,Usrid,Transid)
						SELECT @ServiceId,@ClmGrpid,@Schid,@SchDesc,@RtrId,@Budget,@AdjustedAmount,@ServiceAmount,@ServiceTaxAmt,@ServiceAmount+@ServiceTaxAmt,@Usrid,@Tranid
					END
				END				
			END
		END
			
		SET @Slno=@Slno+1
	END		
END  
RETURN	
END
GO
DELETE FROM ManualConfiguration WHERE ModuleId='ClaimDoc' and ModuleName='Claim Document'
INSERT INTO ManualConfiguration(ProjectName,ModuleId,ModuleName,Description,Status,Condition,ConfigValue,SeqNo)
SELECT 'GST','ClaimDoc','Claim Document','Claim Ref Document',1,1,2.00,1
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE NAME='Fn_ReturnServiceTaxDt' and xtype IN ('TF','FN'))
DROP FUNCTION Fn_ReturnServiceTaxDt
GO
--Select * FROM Fn_ReturnServiceTaxDt(1,502,28, 3,0,1,1) 
CREATE FUNCTION Fn_ReturnServiceTaxDt( @Usrid AS INT ,@Tranid AS INT,@ClmGrpid AS INT,
@ServiceId AS INT,@SerRefId AS INT,@RowId AS INT,@Imode AS INT,@RefId AS INT )
RETURNS @ServiceGroupDt TABLE
(
	ServiceType		 VARCHAR(100),
	ServiceTaxCode   VARCHAR(100),
	ServiceAmount    NUMERIC(18,3),	
	ServiceTaxPer    NUMERIC(18,3),
	ServiceTaxAmt	 NUMERIC(18,6)
)
AS
BEGIN
	IF @Imode=1 
	BEGIN
		INSERT INTO @ServiceGroupDt
		SELECT sername,ServiceTaxCode,ServiceAmount,ServiceTaxPer,ServiceTaxAmt 
		FROM Temp_RettoCompanyTaxDetails T INNER JOIN ServiceMaster SM ON SM.SERVICEID=T.ServiceId 
		WHERE Usrid=@Usrid AND Transid=@Tranid AND T.ClmGrpId=@ClmGrpid AND T.ServiceId=@ServiceId AND Schid=@RefId
	END
	
	IF @Imode=0
	BEGIN
		INSERT INTO @ServiceGroupDt
		
		SELECT  sername,ServiceTaxCode,TaxableAmount,S.TaxPerc,TaxAmount  
		FROM ServiceInvoiceTaxDetails S INNER JOIN ServiceTaxGroupMaster ST ON S.ServiceGroupId=ST.ServiceGroupId
		INNER JOIN ServiceTaxGroupSetting SS ON SS.ServiceGroupId=ST.ServiceGroupId AND SS.ServiceGroupId=S.ServiceGroupId 
			AND S.ServiceTaxSeqId=SS.ServiceTaxSeqid AND S.Taxid=SS.TaxId
		INNER JOIN ServiceMaster SM ON SM.TaxGroupId=ST.ServiceGroupId
		WHERE S.RowNo=@RowId AND ServiceInvId=@SerRefId
	END
	
RETURN
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE NAME='Fn_ReturnServiceInvoiceDetails' and xtype IN ('TF','FN'))
DROP FUNCTION Fn_ReturnServiceInvoiceDetails
GO
--SELECT * FROM Fn_ReturnServiceInvoiceDetails(1,502,21,1)
CREATE FUNCTION Fn_ReturnServiceInvoiceDetails( @Usrid AS INT ,@Tranid AS INT,@ClmGrpid AS INT, @Refid AS INT)
RETURNS @Table TABLE
(
	Salinvno		NVARCHAR(50),
	SalinvDate		DATETIME,
	SalNetAmount	NUMERIC(18,6),
	CrNoteNumber	NVARCHAR(50),
	CrNoteAmount	NUMERIC(18,6),	
	AdjustedAmount	NUMERIC(18,6)	
 )
AS
BEGIN

	INSERT INTO @Table
	SELECT Salinvno,Salinvdate,SalNetAmount,CrNoteNumber,CrNoteAmt,AdjustedAmount FROM Temp_RettoCompanyInvoiceDetails
	WHERE Usrid=@Usrid AND Transid=@Tranid AND ClmGrpId=@ClmGrpid AND Schid=@Refid
RETURN
END
GO
IF NOT EXISTS(SELECT * FROM ManualConfiguration WHERE ProjectName='GST' AND ModuleId='ServiceInvoicehd') 
BEGIN
	INSERT INTO ManualConfiguration([ProjectName],[ModuleId],[ModuleName],[Description],[Status],[Condition],[ConfigValue],[SeqNo])
	Select 'GST','ServiceInvoicehd','ServiceInvRefNo','Distributor Code Added in Service Invoice',1,'MT',5.00,6 
END 
GO 
IF NOT EXISTS(SELECT * FROM SYSCOLUMNS WHERE NAME='ServiceInvId' AND ID IN (SELECT ID FROM SYSOBJECTS WHERE NAME='BillingWindowDisplay' AND XTYPE='U'))
BEGIN
	ALTER TABLE BillingWindowDisplay ADD ServiceInvId INT
END
GO
DELETE FROM CustomCaptions WHERE TRANSID=202 AND CtrlId=5 
INSERT INTO CustomCaptions
SELECT 202,5,2,'sprSchWindowDisp-202-5-2','Scheme Code','','',1,1,1,GETDATE(),1,GETDATE(),'Scheme Code','','',1,1 UNION
SELECT 202,5,3,'sprSchWindowDisp-202-5-3','Scheme Name','','',1,1,1,GETDATE(),1,GETDATE(),'Scheme Name','','',1,1 UNION
SELECT 202,5,4,'sprSchWindowDisp-202-5-4','Service Ref.No','','',1,1,1,GETDATE(),1,GETDATE(),'Service Ref.No','','',1,1 UNION
SELECT 202,5,5,'sprSchWindowDisp-202-5-5','Already Adjusted Amt','','',1,1,1,GETDATE(),1,GETDATE(),'Already Adjusted Amt','','',1,1 UNION
SELECT 202,5,6,'sprSchWindowDisp-202-5-6','Amt to be Adjusted','','',1,1,1,GETDATE(),1,GETDATE(),'Amt to be Adjusted','','',1,1
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE name='FN_ReturnRetailerType' AND XTYPE='TF')
DROP FUNCTION FN_ReturnRetailerType
GO
--SELECT * FROM DBO.FN_ReturnRetailerType(10)
CREATE FUNCTION FN_ReturnRetailerType(@Rtrid AS INT)
RETURNS @Table Table
(
	RetailerType	INT,
	Composite		INT,
	Related			INT
)
AS
BEGIN
DECLARE @RetailerType   AS INT
DECLARE @Composite		AS INT
DECLARE @Related		AS INT
 

	SELECT @RetailerType=CASE ISNULL(ColumnValue,'') WHEN 'Registered' THEN 1 WHEN 'Unregistered' THEN 2 ELSE 0 END  
	FROM UDCDETAILS UD
	INNER JOIN UdcMaster U ON U.MasterId=UD.MasterId AND U.UdcMasterId=UD.UdcMasterId AND U.MasterId=2 AND ColumnName='Retailer Type'
	AND MasterRecordId=@Rtrid

	SELECT @Composite=CASE ISNULL(UPPER(ColumnValue),'') WHEN 'YES' THEN 1 WHEN 'NO' THEN 0 ELSE 0 END 
	FROM UDCDETAILS UD
	INNER JOIN UdcMaster U ON U.MasterId=UD.MasterId AND U.UdcMasterId=UD.UdcMasterId AND U.MasterId=2 AND ColumnName='Composition'
	AND MasterRecordId=@Rtrid	

	SELECT @Related=CASE ISNULL(UPPER(ColumnValue),'') WHEN 'YES' THEN 1 WHEN 'NO' THEN 0 ELSE 0 END 
	FROM UDCDETAILS UD
	INNER JOIN UdcMaster U ON U.MasterId=UD.MasterId AND U.UdcMasterId=UD.UdcMasterId AND U.MasterId=2 AND ColumnName='Related Party'
	AND MasterRecordId=@Rtrid	
	
	INSERT INTO @Table
	SELECT ISNULL(@RetailerType,0),ISNULL(@Composite,0),ISNULL(@Related,0)
RETURN
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE name='Fn_ReturnStringManualBinaryFile' AND XTYPE IN ('FN','TF'))
DROP FUNCTION Fn_ReturnStringManualBinaryFile
GO
CREATE FUNCTION Fn_ReturnStringManualBinaryFile(@TransactionDate VARCHAR(100),@UsrId INT,@ClaimId INT,@ClaimCode NVARCHAR(100))
RETURNS NVARCHAR(MAX) 
AS
BEGIN
	SET @TransactionDate=CONVERT(VARCHAR(10),@TransactionDate,121)
	DECLARE @SSQL NVARCHAR(MAX)
	SET @SSQL=' '
	SET @SSQL= ' SET ARITHABORT ON SET QUOTED_IDENTIFIER ON Insert into ClaimRefDocumentUpload (ClaimType,ClmRefId,ClmDesc,ClmRefCode,LineClaimRefNo,ClaimDate,ClaimYear,ClaimMonth,ImageName,Binaryfile,Status,FileType,Upload,UploadedDate,Availability,
	LastModBy,LastModDate,AuthId,AuthDate) '
	SET @SSQL=@SSQL+' select ClaimType,'''+ convert(varchar(10),@ClaimId) +''' ,ClaimDesc,'''+@ClaimCode+''',LineClaimRefNo,'''+@TransactionDate+''',ClaimYear,ClaimMonth, ImageName,cast('''' as xml).value(''xs:base64Binary(xs:hexBinary(sql:column("Binaryfile")))'', '
	SET @SSQL=@SSQL+'''varchar(max)''), '
	SET @SSQL=@SSQL+'status,FileType,0 upload,getdate(),Availability,LastModBy,LastModDate,AuthId,AuthDate  from BinaryFileDt where LastModBy = '''+CAST(@UsrId AS VARCHAR(10))+''' and status<>''-1'''
	SET @SSQL=@SSQL+' AND ClmRefId='''+ convert(varchar(10),@ClaimId) +''' AND ClaimCode='''+@ClaimCode+''''
	RETURN @SSQL
END
GO
IF NOT EXISTS(SELECT * FROM counters WHERE TabName='ServiceInvoiceHd_Unreg')
BEGIN
	INSERT INTO COUNTERS(TabName,FldName,Prefix,Zpad,CmpId,CurrValue,ModuleName,DisplayFlag,CurYear,Availability,
	LastModBy,LastModDate,AuthId,AuthDate)
	SELECT 'ServiceInvoiceHd_Unreg','ServiceInvRefNo','SUI',5,1,0,'Service Invoice',1,2017,1,1,GETDATE(),1,GETDATE()
END
GO
IF NOT EXISTS(SELECT * FROM ManualConfiguration WHERE PROJECTNAME='GST' AND ModuleId='ServiceInvoiceHd_Unreg' AND MODULENAME='ServiceInvRefNo')
BEGIN
	INSERT INTO ManualConfiguration([ProjectName],[ModuleId],[ModuleName],[Description],[Status],[Condition],[ConfigValue],[SeqNo])
	Select 'GST','ServiceInvoiceHd_Unreg','ServiceInvRefNo','Distributor Code Added in Service Invoice HD',0,'AI',5.00,4 
END
GO
IF NOT EXISTS(SELECT * FROM counters WHERE TabName='ServiceInvoiceDistributor')
BEGIN
	INSERT INTO COUNTERS(TabName,FldName,Prefix,Zpad,CmpId,CurrValue,ModuleName,DisplayFlag,CurYear,Availability,
	LastModBy,LastModDate,AuthId,AuthDate)
	SELECT 'ServiceInvoiceDistributor','ServiceInvRefNo','DIS',5,1,0,'Service Invoice',1,2017,1,1,GETDATE(),1,GETDATE()
END
GO
IF NOT EXISTS(SELECT * FROM ManualConfiguration WHERE PROJECTNAME='GST' AND ModuleId='ServiceInvoiceDistributor' AND MODULENAME='ServiceInvRefNo')
BEGIN
	INSERT INTO ManualConfiguration([ProjectName],[ModuleId],[ModuleName],[Description],[Status],[Condition],[ConfigValue],[SeqNo])
	Select 'GST','ServiceInvoiceDistributor','ServiceInvRefNo','Distributor Code Added in Service Invoice HD',0,'AI',5.00,4 
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='TF' and NAME='FN_Return_ServiceInvDetails')
DROP FUNCTION FN_Return_ServiceInvDetails
GO
--select * from dbo.FN_Return_ServiceInvDetails(2,1)
CREATE FUNCTION [FN_Return_ServiceInvDetails](@ServiceInvId AS INT,@Type AS INT)
RETURNS @Table TABLE
(	
	RefId				INT,
	RefDesc				NVARCHAR(100),
	RefCode				Varchar(100),
	RowNo				INT,
	AvlServiceAmt		NUMERIC(18,6),
	ServiceAmount		NUMERIC(18,6),
	GSTAmount			NUMERIC(18,6),
	TotServiceAmount	NUMERIC(18,6),		
	AppSerAmount		NUMERIC(18,6),
	AppGSTAmount		NUMERIC(18,6),
	SupportingFiles		INT
)
AS
BEGIN
DECLARE @State AS NVARCHAR(100) 
DECLARE @GSTTin NVARCHAR(50)
DECLARE @PANNO NVARCHAR(10)
DECLARE @Rtrid INT
	IF @Type=1
	BEGIN 
		INSERT INTO @Table
		SELECT  Refid,RefCode,CmpSchCode,RowNo,AvlServiceAmt,SD.ServiceAmount,SD.GSTAmount,SD.TotServiceAmount,SD.AppSerAmount,SD.AppGSTAmount,SupportingFiles 
		FROM ServiceInvoiceHd  SH INNER JOIN ServiceInvoiceDT SD ON SH.ServiceInvId=SD.ServiceInvId
		INNER JOIN SchemeMaster SM ON SM.Schid=SD.Refid
		WHERE SH.ServiceInvId=@ServiceInvId 
	END
	IF @Type=2
	BEGIN 
		INSERT INTO @Table
		SELECT  Refid,RefCode,CmpSchCode,RowNo,AvlServiceAmt,SD.ServiceAmount,SD.GSTAmount,SD.TotServiceAmount,SD.AppSerAmount,SD.AppGSTAmount,SupportingFiles 
		FROM ServiceInvoiceHd  SH INNER JOIN ServiceInvoiceDT SD ON SH.ServiceInvId=SD.ServiceInvId
		INNER JOIN SchemeMaster SM ON SM.Schid=SD.Refid
		WHERE SH.ServiceInvId=@ServiceInvId 
	END
RETURN
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='TF' and NAME='FN_Return_ServiceInvHeader')
DROP FUNCTION FN_Return_ServiceInvHeader
GO
--select * from dbo.FN_Return_ServiceInvHeader(2,1)
CREATE FUNCTION [FN_Return_ServiceInvHeader](@ServiceInvId AS INT,@Type AS INT)
RETURNS @Table TABLE
(	
	Rtrid		INT,
	FromName	NVARCHAR(100),
	Address1	NVARCHAR(100),
	Address2	NVARCHAR(100),
	Address3	NVARCHAR(100),
	StateName   NVARCHAR(100),
	GSTTin		NVARCHAR(50),
	PANNO		NVARCHAR(10),
	SerType		NVARCHAR(100),	
	SerAcCode	NVARCHAR(100),
	SerStatus	NVARCHAR(50),
	SerYear		INT,
	SerMonth	NVARCHAR(50),	
	DocRefNo	NVARCHAR(100),	
	ReverseCharge	NUMERIC(18,6)		
)
AS
BEGIN
DECLARE @State AS NVARCHAR(100) 
DECLARE @GSTTin NVARCHAR(50)
DECLARE @PANNO NVARCHAR(10)
DECLARE @Rtrid INT
	IF @Type=1
	BEGIN 
		INSERT INTO @Table
		SELECT  RtrId,RtrName,RtrAdd1,Rtradd2,RtrAdd3,FromStateCode,FromGSTTinNo,FromPanNo,SerName,SerACCode,
		CASE ServiceInvStatus WHEN 0 THEN 'Pending' WHEN 1 THEN 'Sent For Approval' WHEN 2 THEN 'Approved' END,SerYear,
		CONVERT(VARCHAR(10),FromDate,121)+' To '+ CONVERT(VARCHAR(10),ToDate,121),DocRefNo, ReverseCharges as ReverseCharges 
		FROM ServiceInvoiceHd  SH INNER JOIN ServiceInvoiceDT SD ON SH.ServiceInvId=SD.ServiceInvId
		INNER JOIN ServiceMaster SM ON SM.ServiceId=SH.ServiceId 
		INNER JOIN Retailer R ON R.RtrId=SH.ServiceFromId
		WHERE SH.ServiceInvId=@ServiceInvId
		 
	END	
RETURN
END
GO
DELETE FROM customcaptions WHERE TRANSID=502
INSERT INTO customcaptions
SELECT 502,1,1,'CoreHeaderTool','Service Invoice','','',1,1,1,GETDATE(),1,GETDATE(),'Service Invoice','','',1,1 UNION
SELECT 502,1,2,'CoreHeaderTool','Stocky','','',1,1,1,GETDATE(),1,GETDATE(),'Stocky','','',1,1 UNION
SELECT 502,2,0,'btnOperation','&New','','',1,1,1,GETDATE(),1,GETDATE(),'&New','','',1,1 UNION
SELECT 502,2,1,'btnOperation','&Edit','','',1,1,1,GETDATE(),1,GETDATE(),'&Edit','','',1,1 UNION
SELECT 502,2,2,'btnOperation','&Save','','',1,1,1,GETDATE(),1,GETDATE(),'&Save','','',1,1 UNION
SELECT 502,2,3,'btnOperation','&Delete','','',1,1,1,GETDATE(),1,GETDATE(),'&Delete','','',1,1 UNION
SELECT 502,2,4,'btnOperation','&Cancel','','',1,1,1,GETDATE(),1,GETDATE(),'&Cancel','','',1,1 UNION
SELECT 502,2,5,'btnOperation','E&xit','','',1,1,1,GETDATE(),1,GETDATE(),'E&xit','','',1,1 UNION
SELECT 502,2,6,'btnOperation','&Print','','',1,1,1,GETDATE(),1,GETDATE(),'&Print','','',1,1 UNION
SELECT 502,3,1,'FpData-502-3-1','Reference Code','','',1,1,1,GETDATE(),1,GETDATE(),'ReferenceCode','','',1,1 UNION
SELECT 502,3,2,'FpData-502-3-2','Description Of Service','','',1,1,1,GETDATE(),1,GETDATE(),'Description Of Service','','',1,1 UNION
SELECT 502,3,3,'FpData-502-3-3','Available Amount','','',1,1,1,GETDATE(),1,GETDATE(),'Available Amt','','',1,1 UNION
SELECT 502,3,4,'FpData-502-3-4','Amount','','',1,1,1,GETDATE(),1,GETDATE(),'Amount','','',1,1 UNION
SELECT 502,3,5,'FpData-502-3-5','GST Amount','','',1,1,1,GETDATE(),1,GETDATE(),'Gst Amount','','',1,1 UNION
SELECT 502,3,6,'FpData-502-3-6','Total Service Amount','','',1,1,1,GETDATE(),1,GETDATE(),'Total Ser Amount','','',1,1 UNION
SELECT 502,3,7,'FpData-502-3-7','Approved Amount','','',1,1,1,GETDATE(),1,GETDATE(),'Approved Amount','','',1,1 UNION
SELECT 502,3,8,'FpData-502-3-8','Attach File','','',1,1,1,GETDATE(),1,GETDATE(),'Attach File','','',1,1 UNION
SELECT 502,3,9,'FpData-502-3-9','Supporting Files','','',1,1,1,GETDATE(),1,GETDATE(),'Supporting Files','','',1,1 UNION
SELECT 502,1000,1,'MsgBox-502-1000-1','','','Failed to Lock Record',1,1,1,GETDATE(),1,GETDATE(),'','','Failed to Lock Record',1,1 UNION
SELECT 502,1000,2,'MsgBox-502-1000-2','','','Back Dated Transaction Not Allowed',1,1,1,GETDATE(),1,GETDATE(),'','','Back Dated Transaction Not Allowed',1,1 UNION
SELECT 502,1000,3,'MsgBox-502-1000-3','','','Service Type',1,1,1,GETDATE(),1,GETDATE(),'','','Service Type',1,1 UNION
SELECT 502,1000,4,'MsgBox-502-1000-4','','','does not exists',1,1,1,GETDATE(),1,GETDATE(),'','','does not exists',1,1 UNION
SELECT 502,1000,5,'MsgBox-502-1000-5','','','Status already confirmed by another User',1,1,1,GETDATE(),1,GETDATE(),'','','Status already confirmed by another User',1,1 UNION
SELECT 502,1000,6,'MsgBox-502-1000-6','','','Save Failed While Updating ServiceInvoiceTaxDetails',1,1,1,GETDATE(),1,GETDATE(),'','','Save Failed While Updating ServiceInvoiceTaxDetails',1,1 UNION
SELECT 502,1000,7,'MsgBox-502-1000-7','','','Status already confirmed by another User',1,1,1,GETDATE(),1,GETDATE(),'','','Status already confirmed by another User',1,1 UNION
SELECT 502,2000,1,'HotSch-502-2000-1','Retailer Name','','',1,1,1,GETDATE(),1,GETDATE(),'Retailer Name','','',1,1 UNION
SELECT 502,2000,2,'HotSch-502-2000-2','Retailer Code','','',1,1,1,GETDATE(),1,GETDATE(),'Retailer Code','','',1,1 UNION
SELECT 502,2000,3,'HotSch-502-2000-3','Company Name','','',1,1,1,GETDATE(),1,GETDATE(),'Company Name','','',1,1 UNION
SELECT 502,2000,4,'HotSch-502-2000-4','Company Code','','',1,1,1,GETDATE(),1,GETDATE(),'Company Code','','',1,1  UNION
SELECT 502,2000,5,'HotSch-502-2000-5','Jc Year','','',1,1,1,GETDATE(),1,GETDATE(),'Jc Year','','',1,1  UNION
SELECT 502,2000,6,'HotSch-502-2000-6','Jc Month','','',1,1,1,GETDATE(),1,GETDATE(),'Company Month','','',1,1 UNION
SELECT 502,2000,7,'HotSch-502-2000-7','Service Name','','',1,1,1,GETDATE(),1,GETDATE(),'Service Name','','',1,1 UNION
SELECT 502,2000,8,'HotSch-502-2000-8','Service A/c Code','','',1,1,1,GETDATE(),1,GETDATE(),'Service A/c Code','','',1,1  UNION
SELECT 502,2000,9,'HotSch-502-2000-9','Service Inv Ref No','','',1,1,1,GETDATE(),1,GETDATE(),'Service Inv Ref No','','',1,1 UNION
SELECT 502,2000,10,'HotSch-502-2000-10','Service Inv Ref Date','','',1,1,1,GETDATE(),1,GETDATE(),'Service Inv Ref Date','','',1,1  UNION
SELECT 502,2000,11,'HotSch-502-2000-11','Service Type','','',1,1,1,GETDATE(),1,GETDATE(),'Service Type','','',1,1 UNION
SELECT 502,2000,12,'HotSch-502-2000-12','Service Name','','',1,1,1,GETDATE(),1,GETDATE(),'Service Name','','',1,1 UNION
SELECT 502,2000,13,'HotSch-502-2000-13','Retailer Type','','',1,1,1,GETDATE(),1,GETDATE(),'Retailer Type','','',1,1 
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='U' AND NAME='Temp_DisttoCompanyClaimDetails')
DROP TABLE Temp_DisttoCompanyClaimDetails
GO
CREATE TABLE [Temp_DisttoCompanyClaimDetails](
	[ServiceId] [int] NULL,
	[ClmGrpId] [int] NULL,
	[Schid] [int] NULL,
	CmpSchCode Varchar(75),
	[SchDesc] [nvarchar](200) NULL,
	[Rtrid] [int] NULL,
	[TotAmount] [numeric](18, 6) NULL,
	[AdjAmount] [numeric](18, 6) NULL,
	[AvAmount] [numeric](18, 6) NULL,
	[GstAmount] [numeric](18, 6) NULL,
	[TotSerAmount] [numeric](18, 6) NULL,
	[Usrid] [int] NULL,
	[Transid] [int] NULL
)
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='U' AND NAME='Temp_DisttoCompanyDisplayClmReference')
DROP TABLE Temp_DisttoCompanyDisplayClmReference
GO
CREATE TABLE [Temp_DisttoCompanyDisplayClmReference](
	[ServiceInvId] [int] NULL,
	[CmpSchCode] Varchar(50) NULL,
	[SchDesc] Varchar(100) NULL,
	Schid  INT,
	[Salid] BIGINT NULL,
	[Rtrid] [int] NULL,
	[AdjAmt] [numeric](18, 6) NULL,
	[WDSCapAmount] [numeric](18, 6) NULL,
	[Usrid] [int] NULL,
	[Transid] [int] NULL
)
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='U' AND NAME='Temp_DisttoCompanyTaxDetails')
DROP TABLE Temp_DisttoCompanyTaxDetails
GO
CREATE TABLE [Temp_DisttoCompanyTaxDetails](
	[ServiceId] [int] NULL,
	[ClmGrpId] [int] NULL,
	[Schid] [int] NULL,
	[Rtrid] [int] NULL,
	[ServiceGroupId] [int] NULL,
	[ServiceTaxSeqid] [int] NULL,
	[taxid] [int] NULL,
	[ServiceTaxCode] [varchar](50) NULL,
	[ServiceTaxPer] [numeric](18, 2) NULL,
	[ServiceAmount] [numeric](18, 6) NULL,
	[ServiceTaxAmt] [numeric](18, 6) NULL,
	[Usrid] [int] NULL,
	[Transid] [int] NULL
)
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='U' AND NAME='Temp_DisttoCompanyInvoiceDetails')
DROP TABLE Temp_DisttoCompanyInvoiceDetails
GO
CREATE TABLE [Temp_DisttoCompanyInvoiceDetails](
	[ServiceId] [int] NULL,
	[ClmGrpId] [int] NULL,
	[CrNoteNumber] [nvarchar](50) NULL,
	[CrNoteAmt] [numeric](18, 6) NULL,
	[Schid] [int] NULL,
	[Rtrid] [int] NULL,
	[Salid] [int] NULL,
	[Salinvno] [nvarchar](50) NULL,
	[Salinvdate] [datetime] NULL,
	[SalNetAmount] [numeric](18, 6) NULL,
	[AdjustedAmount] [numeric](18, 6) NULL,
	[Usrid] [int] NULL,
	[Transid] [int] NULL
)
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='FN' and NAME='FN_ReturnDistServicePendingBills')
DROP FUNCTION FN_ReturnDistServicePendingBills
GO
--select dbo.FN_ReturnDistServicePendingBills(1,'2017-06-01','2017-06-01')
CREATE FUNCTION [FN_ReturnDistServicePendingBills](@ServiceId AS INT,@FromDate AS DATETIME,@ToDate AS DATETIME)
RETURNS INT
AS
/*********************************
* FUNCTION: FN_ReturnDistServicePendingBills
* PURPOSE: Returns Pending Bills Status
* NOTES:
* CREATED: Murugan.R
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
*
*********************************/
BEGIN
DECLARE @PendingStatus AS INT
SET @PendingStatus=0
		IF EXISTS(SELECT 'X'
		FROM  SalesInvoiceWindowService SW (NOLOCK)
		INNER JOIN SalesInvoice SI (NOLOCK) ON SI.Salid=Sw.Salid
		INNER JOIN SchemeMaster S (NOLOCK) ON S.SchId=SW.SchId
		INNER JOIN ClaimGroupMaster F (NOLOCK) ON F.ClmGrpId=S.ClmRefId
		INNER JOIN ServiceMaster SM (NOLOCK) ON SM.ServiceId=F.ServiceId
		WHERE SM.ServiceId=@ServiceId and Dlvsts<=2 and
		SalInvDate between @FromDate and @ToDate and SchClmId=0)
		BEGIN
			SET @PendingStatus=1
		END
RETURN (@PendingStatus)
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='FN' AND NAME='Fn_ReturnWindowServiceBudgetUtilized')
DROP FUNCTION Fn_ReturnWindowServiceBudgetUtilized
GO
--SELECT * FROM SalesInvoiceWindowService(6195,73)
--SELECT dbo.Fn_ReturnWindowServiceBudgetUtilized(6195,73) AS Amt
CREATE FUNCTION [Fn_ReturnWindowServiceBudgetUtilized]
(
	@Pi_SchId INT,
	@Pi_RtrId INT
)
RETURNS NUMERIC(38,6)
AS
/***********************************************
* FUNCTION: Fn_ReturnWindowServiceBudgetUtilized
* PURPOSE: Returns the window Service Budget Utilized for the Selected Scheme
* NOTES:
* CREATED: Thrinath Kola	11-06-2007
* MODIFIED
* DATE			AUTHOR     DESCRIPTION
------------------------------------------------
* 22/04/2010	Nanda	   Added FBM Scheme	
************************************************/
BEGIN

	DECLARE @WindowAmt		NUMERIC(38,6)
	DECLARE @BudgetUtilized	NUMERIC(38,6)
	
	SELECT @WindowAmt = ISNULL(SUM(AdjAmt),0) FROM SalesInvoiceWindowService A (NOLOCK)
	INNER JOIN SalesInvoice B ON A.SalId = B.SalId and A.RtrId=B.RtrId
	WHERE SchId = @Pi_SchId  and A.Rtrid =@Pi_RtrId AND DlvSts <> 3

	SET @BudgetUtilized = (@WindowAmt)
	SET @BudgetUtilized=ISNULL(@BudgetUtilized,0)
	RETURN(@BudgetUtilized)
END
GO
----NEED TO CHECK SOURCE
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='TF' and NAME='FN_ReturnServiceWindowDisplayAmountEditMode')
DROP FUNCTION FN_ReturnServiceWindowDisplayAmountEditMode
GO
--select * from dbo.FN_ReturnServiceWindowDisplayAmountEditMode(73,'6196,6195',185622)
CREATE FUNCTION FN_ReturnServiceWindowDisplayAmountEditMode(@Rtrid AS INT,@Schid AS VARCHAR(2000),@Salid AS BIGINT)
RETURNS @ReturnServiceWindowDisplayAmountEditMode TABLE
(	
	Schid					INT,
	SchCode					NVARCHAR(100),
	SchDsc					Varchar(100),
	Alrdyadjamt				NUMERIC(18,6),
	Adjamt					NUMERIC(18,6),
	ServiceInvId			INT,
	ServiceInvRefNo			Varchar(50)
	
)
AS
BEGIN

	DECLARE @TableSchid  TABLE
	(
		Schid INT
	)	
	DECLARE @MaxId as INT
	DECLARE @ReportId as INT
	DECLARE @start INT, @end INT 
	DECLARE @Str AS VARCHAR(100)
	DECLARE @CreateTable AS VARCHAR(7000)

	SELECT @start = 1, @end = CHARINDEX(',', @Schid) 
	WHILE @start < LEN(@Schid) + 1 BEGIN 
		IF @end = 0  
		SET @end = LEN(@Schid) + 1
		SET @Str=SUBSTRING(@Schid, @start, @end - @start)
		
		INSERT INTO @TableSchid(Schid)
		SELECT SUBSTRING(@Schid, @start, @end - @start)

		SET @start = @end + 1 
		SET @end = CHARINDEX(',', @Schid, @start)
		SET @MaxId=@MaxId+1
	END 

	INSERT INTO @ReturnServiceWindowDisplayAmountEditMode(Schid,SchCode,SchDsc,Alrdyadjamt,Adjamt,ServiceInvId,ServiceInvRefNo)
	SELECT DISTINCT Z.Schid,Z.SchCode,Z.SchDsc,SUM(Z.Alrdyadjamt) AS Alrdyadjamt,SUM(Adjamt) AS Adjamt,ServiceInvId,ServiceInvRefNo FROM
	(
		SELECT DISTINCT s.SchId,s.Schcode,s.SchDsc,0 AS alrdyadjamt ,0 AS adjamt,ServiceInvId,ServiceInvRefNo 
		FROM SchemeMaster S  INNER JOIN SchemeRetAttr SR ON  S.schid = SR.schid
		INNER JOIN (SELECT SH.ServiceInvId,ServiceInvRefNo,Refid FROM ServiceInvoiceHd SH(NOLOCK) 
		INNER JOIN ServiceInvoiceDT SD(NOLOCK)
		ON SH.ServiceInvId=SD.ServiceInvId WHERE ServiceInvFor=1 AND SH.ServiceFromId=@Rtrid  
		)A ON S.SchId=A.Refid WHERE schtype = 4 AND S.schid in  ( SELECT SchId FROM @TableSchid )  AND Attrid  = CASE attrid WHEN 0 THEN 0 ELSE  @Rtrid  END
		AND attrtype = 8  AND  S.schid NOT IN (SELECT  schid FROM  SalesInvoiceWindowService WHERE SalId IN( @SalId )

	)
	UNION
	SELECT DISTINCT a.schid,schcode,schdsc,SUM(alrdyadjamt) AS alrdyadjamt ,SUM(adjamt) AS adjamt,ServiceInvId,ServiceInvRefNo  FROM
	(
	----SELECT DISTINCT Schid,0 AS AlrdyAdjAmt,SUM(AdjAmt) AS AdjAmt,S.ServiceInvId,ServiceInvRefNo from SalesInvoiceWindowService S(NOLOCK)
	----INNER JOIN ServiceInvoiceHd SH(NOLOCK) ON S.ServiceInvId=SH.ServiceInvId
	----WHERE CAST(SalId AS NVARCHAR(20))+'~'+CAST(SchId AS NVARCHAR(20))
	----NOT IN (SELECT CAST(SalId AS NVARCHAR(20))+'~'+CAST(SchId AS NVARCHAR(20)) FROM BillingWindowDisplay)
	----AND Schid in ( @Schid ) and Rtrid = @Rtrid  GROUP BY SchId,S.ServiceInvId,ServiceInvRefNo
	--Union
	SELECT DISTINCT sw.schid,SUM(adjAmt) AS AlrdyAdjAmt,0 AS AdjAmt,SH.ServiceInvId,ServiceInvRefNo FROM SalesInvoiceWindowService sw INNER JOIn salesInvoice b
	ON SW.SALID = B.SALID AND B.DLVSTS<>3 INNER JOIN ServiceInvoiceHd SH(NOLOCK) ON SW.ServiceInvId=SH.ServiceInvId 
	WHERE B.SALID NOT IN ( @SalId ) AND SW.SCHID IN ( SELECT SchId FROM @TableSchid  ) AND SW.RTRID = @Rtrid 
	GROUP BY sw.schid,SH.ServiceInvId,ServiceInvRefNo  
	Union
	SELECT DISTINCT B.SchId,0 as AlrdyAdjAmt,SUM(TobeAdjust)AS AdjAmt,SH.ServiceInvId,ServiceInvRefNo FROM BillingWindowDisplay A,SchemeMaster B,ServiceInvoiceHd SH
	WHERE A.SchCode = B.SchCode AND SH.ServiceInvId=A.ServiceInvId AND Salid in ( @SalId ) and B.Schid in ( SELECT SchId FROM @TableSchid  ) 
	and Rtrid = @Rtrid  GROUP BY B.SchId,SH.ServiceInvId,ServiceInvRefNo 
	Union
	SELECT DISTINCT SchId,0 AS AlredayAdjust,SUM(TobeAdjust) AS AdjAmt,SH.ServiceInvId,ServiceInvRefNo  FROM BillingWindowDisplay S,ServiceInvoiceHd SH
	WHERE  SH.ServiceInvId=S.ServiceInvId AND SchId NOT IN ( SELECT SchId FROM @TableSchid  ) AND  SalId =  @SalId  AND SalId <> 0 AND RtrId = @Rtrid  GROUP BY SchId,SH.ServiceInvId,ServiceInvRefNo 
	) a, schememaster sm WHERE a.schid = sm.schid GROUP BY  a.schid,schcode,schdsc,ServiceInvId,ServiceInvRefNo 
	) Z GROUP BY Z.Schid,Z.SchCode,Z.SchDsc,ServiceInvId,ServiceInvRefNo ORDER BY Z.Schid
RETURN	
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='P' and NAME='Proc_ReturnDistributorService')
DROP PROCEDURE Proc_ReturnDistributorService
GO
--
/* 
EXEC Proc_ReturnDistributorService 1,17,1,1,'2017-06-01','2017-06-30',1,502
EXEC Proc_ReturnDistributorService 1,20,1,1,'2017-05-28','2017-07-01',1,502
SELECT * FROM Temp_DisttoCompanyClaimDetails
SELECT * FROM Temp_DisttoCompanyTaxDetails
SELECT * FROM Temp_DisttoCompanyDisplayClmReference
SELECT * FROM claimgroupmaster
SElect * from SchemeMaster
SELECT * FROM SchemeRtrLevelValidation
Select * from Ser
*/
CREATE PROCEDURE [Proc_ReturnDistributorService]
(
	@ServiceId	AS INT,
	@ClmGrpid	AS INT,
	@DistributorId	AS INT,
	@CmpId	AS INT,
	@FromDate   AS DATETIME,
	@ToDate		AS DATETIME,
	@Usrid		AS INT,
	@Tranid		AS INT
)
AS
BEGIN
SET NOCOUNT ON


DECLARE @DistState AS VARCHAR(100)
DECLARE @RetState AS VARCHAR(100)

DECLARE @Schid AS INT
DECLARE @MaxSlno AS INT
DECLARE @Slno AS INT
DECLARE @Date AS DATETIME  
DECLARE @SchError AS INT
DECLARE @RuleError AS INT
DECLARE @Budget AS NUMERIC(18,6)
DECLARE @RetailerBudget AS NUMERIC(18,6)
DECLARE @AdjustedAmount AS NUMERIC(18,6)	

DECLARE @ServiceAmount AS NUMERIC(18,6)
DECLARE @ServiceTaxAmt AS NUMERIC(18,6)		
DECLARE @StateId AS INT
DECLARE @StateType AS VARCHAR(50)
DECLARE @TaxGroupId AS INT
DECLARE @ServiceTaxSeqid AS INT
DECLARE @SchDesc AS NVARCHAR(200)
DECLARE @WinClmId AS INT
DECLARE @PrgClmId AS INT
DECLARE @SanctionNo AS NVARCHAR(100)

	DELETE FROM Temp_DisttoCompanyClaimDetails WHERE Usrid=@Usrid AND Transid=@Tranid AND clmGrpid=@ClmGrpid	AND ServiceId=@ServiceId
	DELETE FROM Temp_DisttoCompanyTaxDetails WHERE Usrid=@Usrid AND Transid=@Tranid AND clmGrpid=@ClmGrpid AND ServiceId=@ServiceId
	DELETE FROM Temp_DisttoCompanyInvoiceDetails WHERE Usrid=@Usrid AND Transid=@Tranid AND clmGrpid=@ClmGrpid AND ServiceId=@ServiceId
	DELETE FROM Temp_DisttoCompanyDisplayClmReference  WHERE Usrid=@Usrid AND Transid=@Tranid
	----Window Display Service distributor level
	SELECT @WinClmId= ClmGrpId FROM claimgroupmaster WHERE ClmGrpCode='CG21'
	IF @ClmGrpid=@WinClmId
	BEGIN
		
			SELECT @TaxGroupId=TaxGroupId FROM ServiceMaster WHERE ServiceId=@ServiceId
						
			SELECT @DistState=ColumnValue FROM UdcMaster U (NOLOCK) 
			INNER JOIN UdcDetails UD (NOLOCK) ON U.MasterId=UD.MasterId and U.UdcMasterId=UD.UdcMasterId
			INNER JOIN Distributor D (NOLOCK) ON D.DistributorId=UD.MasterRecordId
			WHERE U.MasterId=16 and ColumnName='State Name' 
		
			
			SELECT @StateId=StateId FROM StateMaster WHERE StateName='State' and StateName=@DistState

					
			INSERT INTO Temp_DisttoCompanyDisplayClmReference(ServiceInvId,CmpSchCode,SchDesc,Schid,Salid,RtrId,AdjAmt,WDSCapAmount,Usrid,Transid)
			SELECT ServiceInvId,CmpSchCode,SchDsc as SchDesc,S.Schid,Sw.Salid,Sw.RtrId,AdjAmt,S.Budget,@Usrid ,@Tranid
			FROM  SalesInvoiceWindowService SW (NOLOCK)
			INNER JOIN SalesInvoice SI (NOLOCK) ON SI.Salid=Sw.Salid
			INNER JOIN SchemeMaster S (NOLOCK) ON S.SchId=SW.SchId
			INNER JOIN ClaimGroupMaster F (NOLOCK) ON F.ClmGrpId=S.ClmRefId
			INNER JOIN ServiceMaster SM (NOLOCK) ON SM.ServiceId=F.ServiceId
			WHERE SM.ServiceId=@ServiceId and Dlvsts>3 and
			 SalInvDate between @FromDate and @ToDate and SchClmId=0
					 

			SELECT Schid,WDSCapAmount,SUM(AdjAmt) as AdjAmt,SchDesc,CmpSchCode 
			INTO #SchAdjustedAmount
			FROM Temp_DisttoCompanyDisplayClmReference (NOLOCK)
			WHERE Usrid=@Usrid and Transid=@Tranid
			GROUP BY SchId,SchDesc,CmpSchCode,WDSCapAmount



			SELECT @ServiceTaxSeqid=MAX(ServiceTaxSeqid) FROM ServiceTaxGroupMaster SM INNER JOIN ServiceTaxGroupSetting SD ON SM.ServiceGroupId=SD.ServiceGroupId
			WHERE SM.ServiceGroupId=@TaxGroupId
			
			INSERT INTO Temp_DisttoCompanyTaxDetails(ServiceId,ClmGrpId,Schid,Rtrid,ServiceGroupId,ServiceTaxSeqid,taxid,ServiceTaxCode,ServiceTaxPer,
											ServiceAmount,ServiceTaxAmt,Usrid,Transid)
			SELECT @ServiceId,@ClmGrpid,Schid,@DistributorId,SM.ServiceGroupId,ServiceTaxSeqid,taxid,ServiceTaxCode,ServiceTaxPer,
				AdjAmt,AdjAmt*(ServiceTaxPer/100),@Usrid,@Tranid
			FROM ServiceTaxGroupMaster SM 
			INNER JOIN ServiceTaxGroupSetting SD ON SM.ServiceGroupId=SD.ServiceGroupId
			CROSS JOIN #SchAdjustedAmount B
			WHERE SM.ServiceGroupId=@TaxGroupId	and ServiceTaxSeqid=@ServiceTaxSeqid AND StateId=@StateId AND Statetype='State'
			

			SELECT SchId,SUM(ServiceTaxAmt) as ServiceTaxAmt  
			INTO #SchemeTax
			FROM Temp_DisttoCompanyTaxDetails  WHERE Usrid=@Usrid AND Transid=@Tranid AND clmGrpid=@ClmGrpid	AND ServiceId=@ServiceId
			GROUP BY SchId
			
		
			INSERT INTO Temp_DisttoCompanyClaimDetails(ServiceId,ClmGrpId,Schid,CmpSchCode,SchDesc,Rtrid,TotAmount,AdjAmount,AvAmount,GstAmount,TotSerAmount,Usrid,Transid)
			SELECT @ServiceId,@ClmGrpid,A.Schid,A.CmpSchCode,A.SchDesc,@DistributorId,
			WDSCapAmount,AdjAmt,WDSCapAmount-AdjAmt,ServiceTaxAmt,AdjAmt+ServiceTaxAmt,@Usrid,@Tranid
			FROM #SchAdjustedAmount A 
			INNER JOIN #SchemeTax C ON A.Schid=C.Schid	
			WHERE ServiceTaxAmt>0
	
		
	END
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='FN' and NAME='FN_ReturnDistServicePendingBills')
DROP FUNCTION FN_ReturnDistServicePendingBills
GO
--select dbo.FN_ReturnDistServicePendingBills(1,'2017-06-01','2017-06-01')
CREATE FUNCTION [FN_ReturnDistServicePendingBills](@ServiceId AS INT,@FromDate AS DATETIME,@ToDate AS DATETIME)
RETURNS INT
AS
/*********************************
* FUNCTION: FN_ReturnDistServicePendingBills
* PURPOSE: Returns Pending Bills Status
* NOTES:
* CREATED: Murugan.R
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
*
*********************************/
BEGIN
DECLARE @PendingStatus AS INT
SET @PendingStatus=0
		IF EXISTS(SELECT 'X'
		FROM  SalesInvoiceWindowService SW (NOLOCK)
		INNER JOIN SalesInvoice SI (NOLOCK) ON SI.Salid=Sw.Salid
		INNER JOIN SchemeMaster S (NOLOCK) ON S.SchId=SW.SchId
		INNER JOIN ClaimGroupMaster F (NOLOCK) ON F.ClmGrpId=S.ClmRefId
		INNER JOIN ServiceMaster SM (NOLOCK) ON SM.ServiceId=F.ServiceId
		WHERE SM.ServiceId=@ServiceId and Dlvsts<=2 and
		SalInvDate between @FromDate and @ToDate and SchClmId=0)
		BEGIN
			SET @PendingStatus=1
		END
RETURN (@PendingStatus)
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Cs2Cn_Prk_ServiceInvoice' AND XTYPE='U')
DROP TABLE Cs2Cn_Prk_ServiceInvoice
GO
CREATE TABLE  Cs2Cn_Prk_ServiceInvoice
(    
     [SlNo]              [numeric](38, 0) IDENTITY(1,1) NOT NULL,
	 [DistCode]          [nvarchar](50) NULL,
     ServiceProviderType [nvarchar](100) NULL,
     ServiceInvRefNo     [nvarchar](100) NULL,
     ServiceInvDate      Datetime, 
     ServiceFromCode     [nvarchar](50)NULL,
     ServiceFromName     [nvarchar](100)NULL,
     FromStateCode       [nvarchar](50)NULL,
     FromGSTinNo         [nvarchar](100)NULL,
     FromPanNo           [nvarchar](20)NULL,
     ServiceType         [varchar](100)NULL,
     ServiceAcCode       [nvarchar](50)NULL,     
     ServiceToCode       [nvarchar](50)NULL,
     ServiceToName       [nvarchar](100)NULL,
     ToStateCode         [nvarchar](50)NULL,
     ToGSTinNo           [nvarchar](100)NULL,
     ToPanNo             [nvarchar](20)NULL,  
     RetailerInvRef      [nvarchar](100)NULL,   
     ServiceYear         INT,
     ServiceFromDate	 datetime,
     ServiceToDate	     datetime,
     ServiceDesc         [varchar](100)NULL,
     AvlServiceAmt       NUMERIC(18,6),
     ServiceAmount       NUMERIC(18,6),
     GSTAmount           NUMERIC(18,6),
     ServTaxCode         [nvarchar](50)NULL,
     ServTaxPerc         NUMERIC(18,6),
     ServTaxAmount       NUMERIC(18,6),          
     TotServiceAmount    NUMERIC(18,6),
     ApprovedSerAmount   NUMERIC(18,6),
     ApprovedGSTAmount   NUMERIC(18,6),
     ReverseCharges      NUMERIC(18,6),
     [UploadFlag]        [nvarchar](10) NULL,
	 [SyncId]            [numeric](38, 0) NULL,
	 [ServerDate]        [datetime] NULL 
)
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Cs2Cn_ServiceInvoice' AND XTYPE='P')
DROP PROCEDURE Proc_Cs2Cn_ServiceInvoice
GO
--exec Proc_Cs2Cn_ServiceInvoice 0,'2017-06-23'
CREATE PROCEDURE [dbo].Proc_Cs2Cn_ServiceInvoice
(
   @Po_ErrNo INT OUTPUT,
   @ServerDate DATETIME
)
AS
/*****************************************************************************
* PROCEDURE		: Proc_Cs2Cn_ServiceInvoice
* PURPOSE		: To Extract Service Invoice from CoreStocky to upload to Console
* CREATED BY	: Raja C
* CREATED DATE	: 09/06/2017
* NOTE			:
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
	
********************************************************************************/
SET NOCOUNT ON
BEGIN	
    SET @Po_ErrNo=0
	DECLARE @DistCode As nVarchar(50)
	DELETE FROM Cs2Cn_Prk_ServiceInvoice WHERE UploadFlag = 'Y'	
	SELECT @DistCode = DistributorCode FROM Distributor(NOLOCK)
	
	DECLARE @DistTinNumber AS VARCHAR(20)
	DECLARE @DistPanNo AS VARCHAR(20)
	DECLARE @CompanyTinNumber AS VARCHAR(20)
	DECLARE @CompanyPANNumber AS VARCHAR(20)	
	
	SELECT DistributorId,DistributorCode,DistributorName,DistributorAdd1,DistributorAdd2,DistributorAdd3,
	PinCode,PhoneNo,ContactPerson,EmailID,StateCode,StateName,TinFirst2Digit
	INTO #DistInfo
	FROM UDCHD A (NOLOCK)
	INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId
	INNER JOIN UdcDetails C (NOLOCK) ON B.MasterId=C.MasterId
	and B.UdcMasterId=C.UdcMasterId
	INNER JOIN UdcDefault D (NOLOCK) ON D.MasterId=C.MasterId and D.MasterId=B.MasterId
	and D.UdcMasterId=C.UdcMasterId and D.UdcMasterId=B.UdcMasterId
	INNER JOIN StateMaster E (NOLOCK) ON E.StateName=D.ColValue and E.StateName=C.ColumnValue
	INNER JOIN Distributor DB ON DB.DistributorId=C.MasterRecordId
	WHERE MasterName='Distributor Info Master' and ColumnName='State Name'

	SELECT CmpId,CmpCode,CmpName,Address1,Address2,Address3,
	'' as PinCode,PhoneNumber as CmpPhoneNumber,ContactPerson as cmpContactPerson,EmailId as CmpEmailId,
	E.StateId,StateCode as CmpStateCode,Statename as CmpStateName,TinFirst2Digit as CmpTinFirst2Digit
	INTO #CompanyInfo
	FROM UDCHD A (NOLOCK)
	INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId
	INNER JOIN UdcDetails C (NOLOCK) ON B.MasterId=C.MasterId
	and B.UdcMasterId=C.UdcMasterId
	INNER JOIN UdcDefault D (NOLOCK) ON D.MasterId=C.MasterId and D.MasterId=B.MasterId
	and D.UdcMasterId=C.UdcMasterId and D.UdcMasterId=B.UdcMasterId
	INNER JOIN StateMaster E (NOLOCK) ON E.StateName=D.ColValue and E.StateName=C.ColumnValue
	INNER JOIN Company DB ON DB.CmpId=C.MasterRecordId
	WHERE MasterName='Company Master' and ColumnName='State Name'
	
	SELECT @DistTinNumber=U.ColumnValue 
	FROM UdcDetails u  (NOLOCK)
	INNER JOIN UdcMaster US  (NOLOCK)ON u.UdcMasterId=US.UdcMasterId
	INNER JOIN Distributor D (NOLOCK) ON D.DistributorId=u.MasterRecordId
	WHERE US.MasterId=16  and ColumnName='GSTIN'
	
	SELECT @DistPanNo=U.ColumnValue 
	FROM UdcDetails u (NOLOCK)
	INNER JOIN UdcMaster US (NOLOCK) ON u.UdcMasterId=US.UdcMasterId
	INNER JOIN Distributor D (NOLOCK) ON D.DistributorId=u.MasterRecordId
	WHERE US.MasterId=16  and ColumnName='Pan Number'
	
	
	SELECT @CompanyTinNumber=U.ColumnValue 
	FROM UdcDetails u  (NOLOCK)
	INNER JOIN UdcMaster US  (NOLOCK)ON u.UdcMasterId=US.UdcMasterId
	INNER JOIN Distributor D (NOLOCK) ON D.DistributorId=u.MasterRecordId
	WHERE US.MasterId=7  and ColumnName='GSTIN'
	
	SELECT @CompanyPANNumber=U.ColumnValue 
	FROM UdcDetails u (NOLOCK)
	INNER JOIN UdcMaster US (NOLOCK) ON u.UdcMasterId=US.UdcMasterId
	INNER JOIN Distributor D (NOLOCK) ON D.DistributorId=u.MasterRecordId
	WHERE US.MasterId=7  and ColumnName='Pan Number'
	
	SELECT  A.RtrId,RtrCode,RtrName,RtrAdd1,RtrAdd2,RtrAdd3,RtrPinNo,
	RtrPhoneNo,RtrEmailId,RtrContactPerson,RtrDrugLicNo,RtrPestLicNo,
	C.StateId as RtrStatId,C.StateName as RtrStateName,C.StateCode as RtrStateCode ,C.TinFirst2Digit as RtrTinFirst2Digit ,B.GSTTinNo,
	RtrShipAdd1,RtrShipAdd2,RtrShipAdd3,RtrShipPhoneNo
	INTO #RetailerInfo
	FROM Retailer A (NOLOCK) 
	INNER JOIN RetailerShipAdd B (NOLOCK) ON A.RtrShipId=B.RtrShipId
	INNER JOIN StateMaster C (NOLOCK) ON C.StateId=B.StateId 
	WHERE RtrShipDefaultAdd=1
	
	INSERT INTO Cs2Cn_Prk_ServiceInvoice(DistCode,ServiceProviderType,ServiceInvRefNo,ServiceInvDate,ServiceFromCode,ServiceFromName,FromStateCode,FromGSTinNo,
	FromPanNo,ServiceType,ServiceAcCode,ServiceToCode,ServiceToName,ToStateCode,ToGSTinNo,ToPanNo,RetailerInvRef,ServiceYear,ServiceFromDate,ServiceToDate,ServiceDesc,
	AvlServiceAmt,ServiceAmount,GSTAmount,ServTaxCode,ServTaxPerc,ServTaxAmount,TotServiceAmount,ApprovedSerAmount,ApprovedGSTAmount,ReverseCharges,UploadFlag,ServerDate)	
	SELECT DistCode,ServiceProviderType,ServiceInvRefNo,ServiceInvDate,ServiceFromCode,ServiceFromName,FromStateCode,FromGSTinNo,FromPanNo,ServiceType,ServiceAcCode,
	ServiceToCode,ServiceToName,ToStateCode,ToGSTinNo,ToPanNo,RetailerInvRef,ServiceYear,ServiceFromDate,ServiceToDate,ServiceDesc,AvlServiceAmt,ServiceAmount,
	GSTAmount,ServTaxCode,ServTaxPerc,ServTaxAmount,TotServiceAmount,ApprovedSerAmount,ApprovedGSTAmount,ReverseCharges,UploadFlag,ServerDate FROM (	
	SELECT @DistCode AS DistCode,'Retailer To Distributor'AS ServiceProviderType,ServiceInvRefNo,ServiceInvDate,RtrCode AS ServiceFromCode,RtrName AS ServiceFromName,
	R.RtrStateCode AS FromStateCode,R.GSTTinNo AS FromGSTinNo,FromPanNo,SerName AS ServiceType,ServiceAcCode,DistributorCode AS ServiceToCode,DistributorName AS ServiceToName,
	D.StateCode AS ToStateCode,ISNULL(@DistTinNumber,'')AS ToGSTinNo,ISNULL(@DistPanNo,'')AS ToPanNo,SH.DocRefNo AS RetailerInvRef,SerYear AS ServiceYear,FromDate AS ServiceFromDate,
	ToDate AS ServiceToDate,ST.RefCode AS ServiceDesc,ST.AvlServiceAmt,ST.ServiceAmount,ST.GSTAmount,T.TaxCode AS ServTaxCode ,STD.TaxPerc AS ServTaxPerc,STD.TaxAmount AS ServTaxAmount,
	ST.TotServiceAmount,ST.AppSerAmount AS ApprovedSerAmount,ST.AppGSTAmount AS ApprovedGSTAmount,SH.ReverseCharges AS ReverseCharges,'N' AS UploadFlag ,@ServerDate AS ServerDate
	 FROM ServiceInvoiceHd SH (NOLOCK) 
    INNER JOIN ServiceInvoiceDT ST (NOLOCK) ON SH.ServiceInvId =ST.ServiceInvId
    INNER JOIN ServiceInvoiceTaxDetails STD (NOLOCK) ON SH.ServiceInvId =STD.ServiceInvId AND ST.ServiceInvId =STD.ServiceInvId AND ST.Rowno=STD.RowNo
    INNER JOIN TaxConfiguration T (NOLOCK) ON STD.Taxid=T.TaxId
    INNER JOIN #RetailerInfo R ON R.RtrID = SH.ServiceFromId
    LEFT OUTER JOIN #DistInfo D ON D.DistributorId=SH.ServiceToId
    LEFT OUTER JOIN ServiceMaster SM (NOLOCK) ON SM.ServiceId=SH.ServiceId
    LEFT OUTER JOIN ClaimGroupMaster F ON F.ClmGrpId=SH.ClmGrpId
    WHERE ServiceInvFor=1 AND ServiceInvStatus=0 AND SH.Upload=0
    UNION ALL
    SELECT @DistCode AS DistCode,'Distributor To Company'AS ServiceProviderType,ServiceInvRefNo,ServiceInvDate,DistributorCode AS ServiceFromCode,DistributorName AS ServiceFromName,
    R.StateCode AS FromStateCode,ISNULL(@DistTinNumber,'') AS FromGSTinNo,FromPanNo,SerName AS ServiceType,ServiceAcCode,CmpCode AS ServiceToCode,CmpName AS ServiceToName,
    D.CmpStateCode AS ToStateCode,ISNULL(@CompanyTinNumber,'')AS ToGSTinNo,ISNULL(@CompanyPANNumber,'')AS ToPanNo,SH.DocRefNo AS RetailerInvRef,SerYear AS ServiceYear,FromDate AS ServiceFromDate ,
    ToDate AS ServiceToDate ,ST.RefCode AS ServiceDesc,ST.AvlServiceAmt,ST.ServiceAmount,ST.GSTAmount,T.TaxCode AS ServTaxCode ,STD.TaxPerc AS ServTaxPerc,STD.TaxAmount AS ServTaxAmount,
    ST.TotServiceAmount,ST.AppSerAmount AS ApprovedSerAmount,ST.AppGSTAmount AS ApprovedGSTAmount,SH.ReverseCharges AS ReverseCharges,'N'AS UploadFlag,@ServerDate AS ServerDate
	FROM ServiceInvoiceHd SH (NOLOCK) 
    INNER JOIN ServiceInvoiceDT ST (NOLOCK) ON SH.ServiceInvId =ST.ServiceInvId
    INNER JOIN ServiceInvoiceTaxDetails STD (NOLOCK) ON SH.ServiceInvId =STD.ServiceInvId AND ST.ServiceInvId =STD.ServiceInvId AND ST.Rowno=STD.RowNo
    INNER JOIN TaxConfiguration T (NOLOCK) ON STD.Taxid=T.TaxId
    INNER JOIN #DistInfo R ON R.DistributorId = SH.ServiceFromId
    LEFT OUTER JOIN #CompanyInfo D ON D.CmpId=SH.ServiceToId
    LEFT OUTER JOIN ServiceMaster SM (NOLOCK) ON SM.ServiceId=SH.ServiceId
    LEFT OUTER JOIN ClaimGroupMaster F ON F.ClmGrpId=SH.ClmGrpId
    WHERE ServiceInvFor=2 AND ServiceInvStatus=0 AND SH.Upload=0)A
	
	UPDATE A SET Upload=1 FROM ServiceInvoiceHd  A WHERE ServiceInvRefNo IN (SELECT ServiceInvRefNo FROM Cs2Cn_Prk_ServiceInvoice (NOLOCK))
	
END
GO
IF EXISTS (SELECT '' FROM SYSOBJECTS WHERE NAME = 'FN_Gst_ReturnCounterPrefix' AND XTYPE IN ('TF','FN'))
DROP FUNCTION FN_Gst_ReturnCounterPrefix
GO
--select * from dbo.FN_Gst_ReturnCounterPrefix() WHERE TabName = 'PurchaseReturn' AND FldName = 'PurRetRefNo'
CREATE Function FN_Gst_ReturnCounterPrefix()
Returns @ReturnCounterPrefix Table
(
	ModuleName		Nvarchar(100),
	Prefix			Varchar(50),
	CurrValue		Int,
	Zpad			Int,
	TabName			Varchar(50),
	FldName			Varchar(50),
	CurYear			Int,
	DisplayFlag		tinyint
)
AS
BEGIN
	Declare @RPrefix Varchar (100)
	
	DECLARE @DistributorCode as varchar(10)
	select @DistributorCode = DistributorCode FROM Distributor
	Insert into @ReturnCounterPrefix
	SELECT A.ModuleName,
	CASE
					   --WHEN len((substring(Prefix,len(Condition)+1,len(Prefix))))-len(@DistributorCode) > 0 					   
					   --THEN left(substring(Prefix,len(Condition)+1,len(Prefix)),len((substring(Prefix,len(Condition)+1,len(Prefix))))-len(@DistributorCode))
					   WHEN len((substring(Prefix,len(Condition)+1,len(Prefix))))- ISNULL(ConfigValue,0) > 0 
					   THEN left(substring(Prefix,len(Condition)+1,len(Prefix)),len((substring(Prefix,len(Condition)+1,len(Prefix))))-isnull(ConfigValue,0))
					   Else Prefix END,
	CurrValue AS Suffix,Zpad,TabName,FldName,CurYear,DisplayFlag 
	FROM Counters A (NOLOCK) 
	Left OUTER JOIN ManualConfiguration B (NOLOCK) ON A.TabName = B.ModuleId AND A.FldName = B.ModuleName --And B.Status = 1
	WHERE DisplayFlag=1 AND Prefix IS NOT NULL 
	ORDER BY A.ModuleName ASC	
	RETURN 
END
GO
IF EXISTS(SELECT NAME FROM Sysobjects WHERE XTYPE='P' and NAME='Proc_Cn2Cs_GSTConfiguration')
DROP PROCEDURE Proc_Cn2Cs_GSTConfiguration
GO
/*
BEGIN TRAN
DELETE FROM ERRORLOG
INSERT INTO Cn2Cs_Prk_GSTConfiguration
SELECT DistributorCode,'GSTCONFIG','2017-04-19','YES','YES','D',GETDATE() FROM Distributor
exec Proc_Cn2Cs_GSTConfiguration 0
SELECT * FROM GSTConfiguration
select * From Cn2Cs_Prk_GSTConfiguration
SELECT * FROM ERRORLOG
ROLLBACK TRAN
*/
CREATE PROCEDURE Proc_Cn2Cs_GSTConfiguration
(
	@Po_ErrNo INT OUTPUT
)
AS
/*********************************
* PROCEDURE		: Proc_Cn2Cs_GSTConfiguration
* PURPOSE		: To validate the downloaded GST Configuration details from Console
* CREATED		: S.Moorthi
* CREATED DATE	: 17/04/2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
SET NOCOUNT ON
BEGIN
	DECLARE @ActivationStatus AS TINYINT
	DECLARE @ConsoleAckStatus AS TINYINT
	DECLARE @ActivationDate AS DATETIME
	DECLARE @SpmId AS INT
	DECLARE @TaxGroupId AS INT
	SET @Po_ErrNo=0
	DECLARE @CurrValue as INT
	
	CREATE TABLE #Cn2Cs_Prk_GSTConfiguration
	(
		ModuleId			[Varchar](50),
		ActivationDate		[datetime],
		ActivationStatus	 [Varchar](50),
		ConsoleAcknowledgeStatus	[Varchar](10)		
	)
	DELETE FROM Cn2Cs_Prk_GSTConfiguration WHERE DownLoadFlag='Y'
	
	IF NOT EXISTS(SELECT 'X' FROM Cn2Cs_Prk_GSTConfiguration (NOLOCK) WHERE DownLoadFlag='D')
	BEGIN
		RETURN
	END
	
	SELECT ModuleId,MAX(CreatedDate) as CreatedDate
	INTO #LatestMaster
	FROM Cn2Cs_Prk_GSTConfiguration WHERE DownLoadFlag='D'
	GROUP BY ModuleId
	
	INSERT INTO #Cn2Cs_Prk_GSTConfiguration(ModuleId,ActivationDate,ActivationStatus,ConsoleAcknowledgeStatus)
	SELECT DISTINCT A.ModuleId,A.ActivationDate,ActivationStatus,ConsoleAcknowledgeStatus
	FROM Cn2Cs_Prk_GSTConfiguration A (NOLOCK) INNER JOIN #LatestMaster B ON A.ModuleId=B.ModuleId 
	and A.CreatedDate=B.CreatedDate
	WHERE DownLoadFlag='D'
	
	
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT DISTINCT 1,'GSTConfiguration','GSTConfiguration','GST Configuration Details Should not be empty' 
	FROM #Cn2Cs_Prk_GSTConfiguration
	WHERE (
	LEN(RTRIM(LTRIM(ISNULL(ModuleId,''))))=0 
	OR LEN(RTRIM(LTRIM(ISNULL(ActivationDate,''))))=0 
	OR LEN(RTRIM(LTRIM(ISNULL(ActivationStatus,''))))=0 
	)
	DELETE A FROM #Cn2Cs_Prk_GSTConfiguration A
	WHERE 
	(
		LEN(RTRIM(LTRIM(ISNULL(ModuleId,''))))=0 
		OR LEN(RTRIM(LTRIM(ISNULL(ActivationDate,''))))=0 
		OR LEN(RTRIM(LTRIM(ISNULL(ActivationStatus,''))))=0 
	)
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT 4,'GSTConfiguration','ModuleId','Console Acknowledge Status already completed,Can not modified ' 
	FROM #Cn2Cs_Prk_GSTConfiguration B WHERE 
	EXISTS (SELECT * FROM GSTConfiguration A WHERE A.MODULEID='GSTCONFIG' AND A.ConsoleAckStatus=1 and A.AcknowledgeStatus=1)
	
	DELETE B FROM #Cn2Cs_Prk_GSTConfiguration B WHERE 
	EXISTS (SELECT * FROM GSTConfiguration A WHERE A.MODULEID='GSTCONFIG' AND A.ConsoleAckStatus=1 and A.AcknowledgeStatus=1)
	--ActivationStatus
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT 2,'GSTConfiguration','ActivationStatus','Activation Status should be YES/NO - '+ActivationStatus FROM #Cn2Cs_Prk_GSTConfiguration
	WHERE UPPER(RTRIM(LTRIM(ISNULL(ActivationStatus,'')))) NOT IN ('YES','NO')
	
	DELETE FROM #Cn2Cs_Prk_GSTConfiguration
	WHERE UPPER(RTRIM(LTRIM(ISNULL(ActivationStatus,'')))) NOT IN ('YES','NO')
	
	--Acknowledge Status
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT 3,'GSTConfiguration','ConsoleAcknowledgeStatus','Console Acknowledge Status Status should be YES/NO - '+ConsoleAcknowledgeStatus FROM #Cn2Cs_Prk_GSTConfiguration
	WHERE UPPER(RTRIM(LTRIM(ISNULL(ConsoleAcknowledgeStatus,'')))) NOT IN ('YES','NO')
	
	DELETE FROM #Cn2Cs_Prk_GSTConfiguration
	WHERE UPPER(RTRIM(LTRIM(ISNULL(ConsoleAcknowledgeStatus,'')))) NOT IN ('YES','NO')
	
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT 3,'GSTConfiguration','ModuleId','Invalid Module Id - '+ConsoleAcknowledgeStatus FROM #Cn2Cs_Prk_GSTConfiguration
	WHERE UPPER(RTRIM(LTRIM(ISNULL(ModuleId,'')))) NOT IN ('GSTCONFIG')
	
	DELETE FROM #Cn2Cs_Prk_GSTConfiguration
	WHERE UPPER(RTRIM(LTRIM(ISNULL(ModuleId,'')))) NOT IN ('GSTCONFIG')
	
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT 4,'GSTConfiguration','ModuleId','Console Acknowledge Status does not allow With out GST activation '+ConsoleAcknowledgeStatus 
	FROM #Cn2Cs_Prk_GSTConfiguration B WHERE B.ConsoleAcknowledgeStatus='YES' AND 
	EXISTS (SELECT * FROM GSTConfiguration A WHERE A.MODULEID='GSTCONFIG' AND A.ActivationStatus=0)
	
	DELETE B FROM #Cn2Cs_Prk_GSTConfiguration B WHERE B.ConsoleAcknowledgeStatus='YES' AND 
	EXISTS (SELECT * FROM GSTConfiguration A WHERE A.MODULEID='GSTCONFIG' AND A.ActivationStatus=0)
	
	INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
	SELECT 4,'GSTConfiguration','ModuleId','Console Acknowledge Status does not allow With out Core Stocky Approval '+ConsoleAcknowledgeStatus 
	FROM #Cn2Cs_Prk_GSTConfiguration B WHERE B.ConsoleAcknowledgeStatus='YES' AND 
	EXISTS (SELECT * FROM GSTConfiguration A WHERE A.MODULEID='GSTCONFIG' AND A.AcknowledgeStatus=0)
	
	DELETE B FROM #Cn2Cs_Prk_GSTConfiguration B WHERE B.ConsoleAcknowledgeStatus='YES' AND 
	EXISTS (SELECT * FROM GSTConfiguration A WHERE A.MODULEID='GSTCONFIG' AND A.AcknowledgeStatus=0)
	
	SET @ActivationStatus=0
	SET @ConsoleAckStatus=0
	
	IF EXISTS(SELECT * FROM #Cn2Cs_Prk_GSTConfiguration)
	BEGIN
		
		SELECT @ActivationStatus=CASE WHEN ActivationStatus='YES' THEN 1 ELSE 0 END,
		@ConsoleAckStatus=CASE WHEN ConsoleAcknowledgeStatus='YES' THEN 1 ELSE 0 END,
		@ActivationDate= ActivationDate
		FROM #Cn2Cs_Prk_GSTConfiguration
		
		IF EXISTS(SELECT * FROM GSTConfiguration WHERE ModuleId='GSTCONFIG' and AcknowledgeStatus=0)
		BEGIN
			IF EXISTS(SELECT '*' FROM GSTConfiguration WHERE ModuleId='GSTCONFIG' and ActivationStatus=0)
			BEGIN
				UPDATE GSTConfiguration SET ActivationStatus=@ActivationStatus
				WHERE ModuleId='GSTCONFIG' 
			END
			
			UPDATE GSTConfiguration SET DownloadActDate=GETDATE(),ActivationDate=CONVERT(DATETIME,CONVERT(VARCHAR(10),@ActivationDate,121),121)
			WHERE ModuleId='GSTCONFIG' 
			
		END
		
		IF EXISTS(SELECT * FROM GSTConfiguration WHERE ModuleId='GSTCONFIG' and ActivationStatus=1 AND AcknowledgeStatus=1)
		BEGIN
			UPDATE GSTConfiguration SET ConsoleAckStatus=@ConsoleAckStatus,DownloadAcknowDate=GETDATE()
			WHERE ModuleId='GSTCONFIG'
		END
	END
	
	---Tax Status enable
	IF EXISTS(SELECT 'X' FROM GSTConfiguration (NOLOCK) WHERE ActivationStatus=1 and AcknowledgeStatus=1 and ConsoleAckStatus=1 
	and CONVERT(DATETIME,CONVERT(VARCHAR(10),GETDATE(),121),121)>=ActivationDate and ModuleId='GSTConfig')
	BEGIN
		UPDATE TaxSettingMaster Set Status=1 WHERE TaxType='GST'
		
			--Product Batch Tax Setting
		IF NOT EXISTS(SELECT '*' FROM ProductBatchVATTaxB4GST (NOLOCK))
			BEGIN
				
				CREATE TABLE #DefaultPrice
					(
						PrdId		BIGINT,
						PrdBatId	BIGINT,
						PriceId		BIGINT
					)
				
				INSERT INTO ProductBatchVATTaxB4GST(PrdId,PrdBatId,PrdTaxGroupId,BatchTaxGroupId,DefaultPriceId,CreatedDate)
				SELECT DISTINCT P.PrdId,PB.PrdBatId,P.TaxGroupId,PB.TaxGroupId as BatTaxGroupId,0,GETDATE() FROM Product P (NOLOCK)
				INNER JOIN ProductBatch PB (NOLOCK) ON P.PrdId=PB.PrdId
				
				UPDATE PBV SET PBV.DefaultPriceId=PB.DefaultPriceId FROM ProductBatch PB(NOLOCK)
				INNER JOIN ProductBatchDetails PBD (NOLOCK)ON PB.PrdBatId=PBD.PrdBatId AND PB.DefaultPriceId=PBD.PriceId AND PBD.DefaultPrice=1
				INNER JOIN ProductBatchVATTaxB4GST PBV (NOLOCK) ON PBV.PrdId=PB.PrdId AND PBV.PrdBatId=PB.PrdBatId 
				AND PBV.PrdBatId=PBD.PrdBatId
				
				IF EXISTS(SELECT * FROM ProductBatchVATTaxB4GST (NOLOCK) WHERE DefaultPriceId=0)
				BEGIN
				
					INSERT INTO #DefaultPrice(PrdId,PrdBatId,PriceId)
					SELECT PB.PrdId,PB.PrdBatId,MAX(PBD.PriceId) AS PriceId FROM ProductBatch PB(NOLOCK)
					INNER JOIN ProductBatchDetails PBD (NOLOCK)ON PB.PrdBatId=PBD.PrdBatId AND PBD.DefaultPrice=1
					INNER JOIN ProductBatchVATTaxB4GST PBV (NOLOCK) ON PBV.PrdId=PB.PrdId AND PBV.PrdBatId=PB.PrdBatId 
					AND PBV.PrdBatId=PBD.PrdBatId
					WHERE PBV.DefaultPriceId=0
					GROUP BY PB.PrdId,PB.PrdBatId
					
					UPDATE A SET A.DefaultPriceId=B.PriceId FROM ProductBatchVATTaxB4GST A 
					INNER JOIN #DefaultPrice B (NOLOCK) ON A.PrdId=b.PrdId and A.PrdBatId=B.PrdBatId 
					WHERE A.DefaultPriceId=0
				END
				
				IF EXISTS(SELECT * FROM ProductBatchVATTaxB4GST (NOLOCK) WHERE DefaultPriceId=0)
				BEGIN
				
					TRUNCATE TABLE #DefaultPrice

					INSERT INTO #DefaultPrice(PrdId,PrdBatId,PriceId)
					SELECT PB.PrdId,PB.PrdBatId,MAX(PBD.PriceId) AS PriceId FROM ProductBatch PB(NOLOCK)
					INNER JOIN ProductBatchDetails PBD (NOLOCK)ON PB.PrdBatId=PBD.PrdBatId --AND PBD.DefaultPrice=1
					INNER JOIN ProductBatchVATTaxB4GST PBV (NOLOCK) ON PBV.PrdId=PB.PrdId AND PBV.PrdBatId=PB.PrdBatId 
					AND PBV.PrdBatId=PBD.PrdBatId
					WHERE PBV.DefaultPriceId=0
					GROUP BY PB.PrdId,PB.PrdBatId
					
					UPDATE A SET A.DefaultPriceId=B.PriceId FROM ProductBatchVATTaxB4GST A 
					INNER JOIN #DefaultPrice B (NOLOCK) ON A.PrdId=b.PrdId and A.PrdBatId=B.PrdBatId 
					WHERE A.DefaultPriceId=0
					
				END
				
				UPDATE A SET A.TaxGroupId=0 FROM Product A
				UPDATE A SET A.TaxGroupId=0 FROM ProductBatch A				
				
			END
			
			--Retailer Tax Group Backup
			IF NOT EXISTS(SELECT '*' FROM RetailerVATTaxB4GST (NOLOCK))
			BEGIN
								
				INSERT INTO RetailerVATTaxB4GST(RtrId,TaxGroupId,DefaultShipId,ShippingTaxGroupId,CreatedDate)
				SELECT RtrID,TaxGroupId,0,0,GETDATE() fROM Retailer (NOLOCK)
				
				UPDATE A SET A.ShippingTaxGroupId=B.TaxGroupId,A.DefaultShipId=B.RtrShipId FROM RetailerVATTaxB4GST A (NOLOCK)
				INNER JOIN RetailerShipAdd B(NOLOCK) ON A.RtrId=B.RtrId
				WHERE B.RtrShipDefaultAdd=1
				
				UPDATE R SET R.TaxGroupId=0 FROM Retailer R(NOLOCK)
			END
			
			--Supplier Tax Group			
			IF EXISTS(SELECT '*' FROM Supplier WHERE ISNULL(TaxGroupId,0)<>0)
			BEGIN
				SET @SpmId=0
				SET @TaxGroupId=0
				SELECT @SpmId=MAX(ISNULL(SpmId,0)) FROM Supplier WHERE ISNULL(TaxGroupId,0)<>0
				SELECT @TaxGroupId=TaxGroupId FROM Supplier WHERE SpmId=@SpmId

				INSERT INTO VATDefaultSupplier(SpmId,TaxGroupId,CreatedDate)
				SELECT @SpmId,@TaxGroupId,GETDATE()
				
				UPDATE R SET R.TaxGroupId=0 FROM Supplier R(NOLOCK)
			END						
			--IDT Tax Group
			IF EXISTS(SELECT '*' FROM IDTMaster WHERE ISNULL(TaxGroupId,0)<>0)
			BEGIN
				SET @SpmId=0
				SET @TaxGroupId=0
				SELECT @SpmId=MAX(ISNULL(SpmId,0)) FROM IDTMASTER WHERE ISNULL(TaxGroupId,0)<>0
				SELECT @TaxGroupId=TaxGroupId FROM IDTMASTER WHERE SpmId=@SpmId

				INSERT INTO VATDefaultIDT(SpmId,TaxGroupId,CreatedDate)
				SELECT @SpmId,@TaxGroupId,GETDATE()
			
				UPDATE R SET R.TaxGroupId=0 FROM IDTMASTER R(NOLOCK)
			END
			
			--Retailer Shipping Address
			IF EXISTS(SELECT '*' FROM RetailerShipAdd WHERE ISNULL(TaxGroupId,0)<>0)
			BEGIN
				UPDATE R SET R.TaxGroupId=0 FROM RetailerShipAdd R(NOLOCK)
			END
			
			--Bill Series Setting
			DELETE FROM ManualConfiguration WHERE  ModuleId IN ('ReturnHeader','ReturnGSTR1','ClaimSheetHD','PurchaseReturn','ServiceInvoicehd','ServiceInvoiceHd_Unreg',
			'CreditNoteRetailer','DebitNoteRetailer','ServiceInvoiceDistributor','SamplePurchaseReceipt','FreeIssueHd') AND ProjectName='GST'
			INSERT INTO ManualConfiguration([ProjectName],[ModuleId],[ModuleName],[Description],[Status],[Condition],[ConfigValue],[SeqNo])
			Select 'GST','ReturnHeader','ReturnCode','Distributor Code Added in Slaes Return',1,'PB',5.00,3 UNION
			Select 'GST','ClaimSheetHD','ClmCode','Distributor Code Added in Claim Sheet HD',1,'PB',5.00,4 UNION
			Select 'GST','PurchaseReturn','PurRetRefNo','Distributor Code Added in Purchase Return',0,'PB',5.00,5 UNION
			Select 'GST','ServiceInvoicehd','ServiceInvRefNo','Distributor Code Added in Service Invoice',1,'PB',5.00,6 UNION
			Select 'GST','ServiceInvoiceHd_Unreg','ServiceInvRefNo','Distributor Code Added in ALL Service Invoice UnRegisterd Retailer',1,'PB',5.00,7 UNION
			Select 'GST','ServiceInvoiceDistributor','ServiceInvRefNo','Distributor Code Added in ALL Service Invoice Distributor',1,'PB',5.00,8 UNION
			Select 'GST','CreditNoteRetailer','CrNoteNumber','Distributor Code Added in Credit Note Retailer',1,'PB',5.00,9 UNION
			Select 'GST','DebitNoteRetailer','DbNoteNumber','Distributor Code Added in Debit Note Retailer',1,'PB',5.00,10 UNION
			Select 'GST','SamplePurchaseReceipt','ReturnRefNo','Distributor Code Added in Sample Return',0,'PB',0.00,11 UNION
			Select 'GST','FreeIssueHd','IssueRefNo','Distributor Code Added in Free issue',0,'PB',0.00,12 UNION 
			Select 'GST','ReturnGSTR1','ReturnCode','Distributor Code Added in Slaes Return',1,'PB',5.00,13 
			
			DELETE FROM ManualConfiguration WHERE PROJECTNAME='GST' AND ModuleId='BILL_EDIT2' AND MODULENAME='BillSeriesSetting'
			INSERT INTO ManualConfiguration([ProjectName],[ModuleId],[ModuleName],[Description],[Status],[Condition],[ConfigValue],[SeqNo])
			SELECT 'GST','BILL_EDIT2','BillSeriesSetting','Distributor Code Added in Bill series Prefix',1,'PB',5.00,2
			
			DELETE FROM MANUALCONFIGURATION WHERE PROJECTNAME='GST' AND ModuleId='REPLACEMENT1' AND MODULENAME='CreditNoteReplacement'
			INSERT INTO ManualConfiguration(ProjectName,ModuleId,ModuleName,Description,Status,Condition,ConfigValue,SeqNo)
			SELECT 'GST','REPLACEMENT1','CreditNoteReplacement','Block Repalcement in CreditNoteReplacement',1,'',0.00,1
			
			If EXISTS (SELECT * FROM Configuration where ModuleId ='SALESRTN15')
			BEGIN 
				UPDATE Configuration SET Status=1  where ModuleId ='SALESRTN15'
			END 
			ELSE
			BEGIN
			   INSERT INTO Configuration(Moduleid,ModuleName,Description,Status,Condition,ConfigValue,Seqno)
			   SELECT 'SALESRTN15','Sales Return','Perform automatic Credit Note / Replacement selection entry based on the rule setting',1,'',0.00,1
			END
			
			UPDATE ManualConfiguration SET Status=1 WHERE PROJECTNAME='GST' AND ModuleId='BILL_EDIT1' AND MODULENAME='BILLING'
			
		IF EXISTS (SELECT * FROM ManualConfiguration (NOLOCK)
		WHERE ModuleId = 'BILL_EDIT2' AND ModuleName = 'BillSeriesSetting' AND Status = 1)
		BEGIN
			IF EXISTS (SELECT * FROM ManualConfiguration (NOLOCK) 
			WHERE ModuleId = 'BILL_EDIT3' AND ModuleName = 'BillSeriesSetting' AND Status = 0)
			BEGIN
			
			UPDATE Counters SET CurrValue=0,Prefix='GSCL',DisplayFlag=1 WHERE TabName='ClaimSheetHd' and FldName='ClmCode'
			UPDATE Counters SET CurrValue=0,Prefix='SIRE',DisplayFlag=1 WHERE TabName='ServiceInvoiceHd' and FldName='ServiceInvRefNo'
			UPDATE Counters SET CurrValue=0,Prefix='SIUN',DisplayFlag=1 WHERE TabName='ServiceInvoiceHd_Unreg' and FldName='ServiceInvRefNo'
			UPDATE Counters SET CurrValue=0,Prefix='SIDS',DisplayFlag=1 WHERE TabName='ServiceInvoiceHd' and FldName='ServiceInvoiceDistributor'
			
			UPDATE Counters SET CurrValue=0,Prefix='STR',DisplayFlag=1 WHERE TabName='ReturnHeader' and FldName='ReturnCode'
			UPDATE Counters SET CurrValue=0,Prefix='GSTR',DisplayFlag=1 WHERE TabName='ReturnGSTR1' and FldName='ReturnCode'
			
			UPDATE Counters SET CurrValue=0,Prefix='CR',DisplayFlag=1 WHERE TabName='CreditNoteRetailer' and FldName='CrNoteNumber'
			UPDATE Counters SET CurrValue=0,Prefix='DB',DisplayFlag=1 WHERE TabName='DebitNoteRetailer' and FldName='DbNoteNumber'
			
			
			UPDATE BillSeriesHD SET YearConfig=1
			
				Declare @SeriesDtId Int
				DECLARE @Prefix Nvarchar(50)
				DECLARE Cur_Billseries CURSOR
				FOR Select SeriesDtId FROM BillSeriesDt where SeriesID IN(Select max(SeriesID) FROM BillSeriesHD)
				OPEN Cur_Billseries
				FETCH NEXT FROM Cur_Billseries INTO @SeriesDtId
				WHILE @@FETCH_STATUS=0
				BEGIN					
					SELECT @Prefix = Prefix  FROM Fn_Prefix() where SeriesDtId = @SeriesDtId
					UPDATE billseriesdtvalue SET Prefix = (select [prefix] FROM Fn_Billseriessetting (@Prefix)), 
					CurrValue = 0,DistCode = (select DistCode FROM Fn_Billseriessetting(@Prefix)) WHERE  seriesdtid = @SeriesDtId			
					FETCH NEXT FROM Cur_Billseries INTO @SeriesDtId
						END
						CLOSE Cur_Billseries
						DEALLOCATE Cur_Billseries
						
						DECLARE @ModuleName Nvarchar(50)						
						DECLARE @TabName Nvarchar(50)
						DECLARE @FldName Nvarchar(50)
						DECLARE Cur_Billseries CURSOR
						FOR SELECT B.ModuleName,b.[Prefix],A.ModuleId,A.ModuleName from manualconfiguration A (NOLOCK)
						INNER JOIN (select * FROM dbo.FN_Gst_ReturnCounterPrefix()) b ON A.ModuleId = b.TabName AND A.ModuleName = b.FldName
						AND A.Status=1
						OPEN Cur_Billseries
						FETCH NEXT FROM Cur_Billseries INTO @ModuleName,@Prefix,@TabName,@FldName
						WHILE @@FETCH_STATUS=0
						BEGIN
						
							Update counters SET [Prefix] = (SELECT [prefix] FROM Fn_Gst_countersetting(@ModuleName,@Prefix,@TabName,@FldName))
							where TabName = @TabName and FldName = @FldName
							FETCH NEXT FROM Cur_Billseries INTO @ModuleName,@Prefix,@TabName,@FldName
						END
						CLOSE Cur_Billseries
						DEALLOCATE Cur_Billseries		
						
						UPDATE ManualConfiguration SET Status = 1
						WHERE ModuleId = 'BILL_EDIT3' AND ModuleName = 'BillSeriesSetting' AND Status = 0 
					END	
				END					
			END

	UPDATE A SET DownLoadFlag='Y' FROM Cn2Cs_Prk_GSTConfiguration A 
	INNER JOIN #Cn2Cs_Prk_GSTConfiguration B ON A.ModuleId=B.ModuleId
	
	RETURN
END
GO
IF NOT EXISTS (SELECT * FROM CustomUpDownloadCount where Module IN ('StateMaster') and UpDownload='Download')
BEGIN
DECLARE @SlNo AS INT
SET @SlNo=0
SELECT @SlNo=ISNULL(MAX(SlNo),0) FROM CustomUpDownloadCount(NOLOCK)

INSERT INTO CustomUpDownloadCount(SlNo,SeqNo,Module,Screen,ParkTable,MainTable,KeyField1,KeyField2,KeyField3,UpDownload,OldMax,OldCount,NewMax,NewCount,DownloadedCount,SelectQuery)
SELECT @SlNo+1,1,'StateMaster','StateMaster','Cn2Cs_Prk_StateMaster','StateMaster','StateId','','','Download',0,0,0,0,0,'SELECT StateCode AS [State Code],StateName AS [State Name] FROM StateMaster WHERE StateId>OldMax' UNION 
SELECT @SlNo+2,1,'RetailerGST','RetailerGST','Cn2Cs_Prk_RetailerGST','Cn2Cs_Prk_RetailerGST','DownLoadFlag','','','Download',0,0,0,0,0,'' UNION 
SELECT @SlNo+3,1,'Product HSN','Product HSN','Cn2Cs_Prk_ProductHSNCode','Cn2Cs_Prk_ProductHSNCode','DownLoadFlag','','','Download',0,0,0,0,0,'' UNION 
SELECT @SlNo+4,1,'ServiceMaster','StateMaster','Cn2Cs_Prk_ServiceMaster','ServiceMaster','ServiceId','','','Download',0,0,0,0,0,'SELECT SerCode AS [Service Code],SerName AS [Service Name] FROM ServiceMaster WHERE ServiceId>OldMax'

END
GO
IF EXISTS(SELECT '*' FROM CustomUpDownload Where Updownload='Download' AND Module='Product Batch GST')
BEGIN
	IF NOT EXISTS (SELECT * FROM CustomUpDownloadCount where Module IN ('Product Batch GST') and UpDownload='Download')
	BEGIN
		DECLARE @SlNo1 AS INT
		SET @SlNo1=0
		SELECT @SlNo1=ISNULL(MAX(SlNo),0) FROM CustomUpDownloadCount(NOLOCK)
		INSERT INTO CustomUpDownloadCount(SlNo,SeqNo,Module,Screen,ParkTable,MainTable,KeyField1,KeyField2,KeyField3,UpDownload,OldMax,OldCount,NewMax,NewCount,DownloadedCount,SelectQuery)
		SELECT DISTINCT @SlNo1+1,1,'Product Batch GST','Product Batch GST','Cn2Cs_Prk_ProductBatch_GST','ProductBatch','PrdBatId','','','Download',OldMax,OldCount,NewMax,NewCount,0,SelectQuery FROM CustomUpDownloadCount WHERE Module='Product Batch' 
	END
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='U' AND name='RptSelectedServiceId')
DROP TABLE RptSelectedServiceId
GO
CREATE TABLE RptSelectedServiceId
(
	ServiceInvId INT,
	UsrId INT
		
)
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='U' AND name='RptServiceInvoicePrint')
DROP TABLE RptServiceInvoicePrint
GO
CREATE TABLE RptServiceInvoicePrint
(
DistributorId INT,
DistributorCode VARCHAR(50), 
DistributorName VARCHAR(100),
DistributorAdd1 VARCHAR(100),
DistributorAdd2 VARCHAR(100),
DistributorAdd3 VARCHAR(100),
DistributorPinCode VARCHAR(50),
DistributorPhoneNo VARCHAR(50),
DistributorContPerson VARCHAR(50),
DistributorEmailId VARCHAR(50),
DistributorState VARCHAR(50),
DistributorStateName VARCHAR(50),
DistributorStateTin VARCHAR(10),
DistributorGSTTin VARCHAR(20),
DistributorPanNo VARCHAR(20),
RtrId INT,
[Retailer Code] VARCHAR(50),
[Retailer Name] VARCHAR(100),
[Retailer Add1] VARCHAR(100),
[Retailer Add2] VARCHAR(100),
[Retailer Add3] VARCHAR(100),
[Retailer Pinno] VARCHAR(50),
[Retailer Phoneno] VARCHAR(50),
[Retailer mailId] VARCHAR(50),
[Retailer ContPerson] VARCHAR(50),
[Retailer DruglicNo] VARCHAR(50),
[Retailer PestLicNo] VARCHAR(50),
RtrStatId INT,
[Retailer StateName] VARCHAR(100),
[Retailer StateCode] VARCHAR(20),
[Retailer StateTin] VARCHAR(20),
[Retailer GSTTinNo] VARCHAR(20),
[Retailer ShipAdd1] VARCHAR(100),
[Retailer ShipAdd2] VARCHAR(100),
[Retailer ShipAdd3] VARCHAR(100),
[Retailer ShipPhoneNo] VARCHAR(20),
ServiceInvId INT,
ServiceInvRefNo VARCHAR(50),
ServiceInvDate DATETIME,
ServiceType VARCHAR(100),
ServiceFromId INT,
ServiceToId INT,
SerYear INT,
FromDate DATETIME,
ToDate DATETIME,
[Service HDAmount] NUMERIC(18,2),
[Service HDGstAmount] NUMERIC(18,2),
[Service HDTotalAmount] NUMERIC(18,2),
[Service HDAppServiceAmount] NUMERIC(18,2),
[Service HDAppGstAmount] NUMERIC(18,2),
[Service HDAppTotalAmount] NUMERIC(18,2),
[Service HDReverseCharges] NUMERIC(18,2),
[Service DocRefNo] VARCHAR(100),
[Service Remarks] VARCHAR(100),
[ApprovalStatus] VARCHAR(100),
Refid INT,
RefCode VARCHAR(50),
RowNo INT,
[Service LineLvl AvlServiceAmt]  NUMERIC(18,2),
[Service LineLvl ServiceAmount]  NUMERIC(18,2),
[Service LineLvl GSTAmount]  NUMERIC(18,2),
[Service LineLvl TotServiceAmount]  NUMERIC(18,2),
[Service LineLvl AppSerAmount]  NUMERIC(18,2),
[Service LineLvl AppGSTAmount]  NUMERIC(18,2),
ClmGrpId INT,
ClmGrpCode VARCHAR(50),	
ClmGrpName VARCHAR(50),
SerCode VARCHAR(50),
SerName VARCHAR(100),
SerACCode VARCHAR(50),	
SerACName VARCHAR(100),
SchDsc Varchar(100),
CmpSchCode Varchar(50),
AmtInWrd Varchar(5000),
UserId INT,
TAXGST1PerAge Numeric(18,2),
TAXGSTAMT1 Numeric(18,2),
TAXGST2PerAge Numeric(18,2),
TAXGSTAMT2 Numeric(18,2),
TAXGST3PerAge Numeric(18,2),
TAXGSTAMT3 Numeric(18,2)
)
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='P' AND NAME='Proc_RptServicePTaxDetailUpdateGST')
DROP PROCEDURE Proc_RptServicePTaxDetailUpdateGST
GO
-----EXEC Proc_RptServicePTaxDetailUpdateGST 1
CREATE PROCEDURE [Proc_RptServicePTaxDetailUpdateGST]
(
	@Pi_UsrId		AS	INT
	
)
/************************************************
* PROCEDURE  : Proc_RptServicePTaxDetailUpdateGST
* PURPOSE    : Tax Split update 
* CREATED BY : Murugan.R
* CREATED ON : 20/05/2017
* MODIFICATION
*************************************************
* DATE       AUTHOR      DESCRIPTION
*************************************************/
AS
BEGIN
DECLARE @SQL as Varchar(MAX)
DECLARE @MaxId as INT
DECLARE @ReportId as INT
DECLARE @start INT, @end INT 
DECLARE @Str AS VARCHAR(100)
DECLARE @CreateTable AS VARCHAR(7000)

DECLARE @ColSelect AS Varchar(MAX)
DECLARE @ColAlter AS Varchar(5000)
DECLARE @ColSelectDataType AS Varchar(5000)
DECLARE @TableCol AS Varchar(2000)
DECLARE @Columns1 AS Varchar(7000)
DECLARE @OrderBy AS VARCHAR(2000)
DECLARE @PCSelect AS VARCHAR(3000)
DECLARE @PCSelect1 AS VARCHAR(3000)
DECLARE @ColName AS Varchar(100)
DECLARE @ColNameJoin AS Varchar(4000)
DECLARE @ColNameJoin1 AS Varchar(4000)
DECLARE @ColNameJoin2 AS Varchar(4000)
DECLARE @UpdatSQL AS Varchar(Max)
SET @PCSelect=''
SET @PCSelect1=''
SET @ColSelect=''
SET @ColSelectDataType=''
SET @TableCol=''
SET @Columns1=''
SET @CreateTable=''
SET @OrderBy=''
SET @ColAlter=''

CREATE TABLE #ServiceInvoiceTaxDetails
(	
	ServiceInvId INT,
	RowNo INT,
	TaxFlag TinyInt,
	TaxId INT,
	TaxCde VARCHAR(50),
	TaxPercent FLOAT,
	[Group Name] Varchar(100),
	[GroupType] TinyInt,
	[UsrId] INT
)
INSERT INTO #ServiceInvoiceTaxDetails(	ServiceInvId,RowNo,TaxFlag,Taxid,TaxCde,TaxPercent,[Group Name],[GroupType],[UsrId])
SELECT S.ServiceInvId,RowNo,1,
DENSE_RANK() OVER (PARTITION BY s.ServiceInvId,RowNo ORDER BY S.TaxId,s.ServiceInvId) as TaxId
,'TAXGST'+ CAST(DENSE_RANK() OVER (PARTITION BY s.ServiceInvId,RowNo ORDER BY S.TaxId,s.ServiceInvId) as Varchar(10)) +'PerAge',TaxPerc,'' as [Group Name],2
,@Pi_UsrId
FROM ServiceInvoiceTaxDetails S  (NOLOCK)
INNER JOIN ServiceInvoiceHd SS (NOLOCK) ON S.ServiceInvId=SS.ServiceInvId
INNER JOIN RptSelectedServiceId RS (NOLOCK) ON RS.ServiceInvId=S.ServiceInvId AND RS.ServiceInvId=SS.ServiceInvId
LEFT OUTER JOIN TaxConfiguration TA (NOLOCK) ON TA.TaxId=S.TaxId
WHERE TaxableAmount>0 
and  RS.UsrId=@Pi_UsrId
UNION ALL
SELECT S.ServiceInvId,RowNo,2,DENSE_RANK() OVER (PARTITION BY s.ServiceInvId,RowNo ORDER BY S.TaxId,s.ServiceInvId) as TaxId
,'TAXGSTAMT'+ CAST(DENSE_RANK() OVER (PARTITION BY s.ServiceInvId,RowNo ORDER BY S.TaxId,s.ServiceInvId) as Varchar(10)),TaxAmount,
'' as [Group Name],2,@Pi_UsrId
FROM ServiceInvoiceTaxDetails S 
INNER JOIN ServiceInvoiceHd SS ON S.ServiceInvId=SS.ServiceInvId
INNER JOIN RptSelectedServiceId RS (NOLOCK) ON RS.ServiceInvId=S.ServiceInvId AND RS.ServiceInvId=SS.ServiceInvId
LEFT OUTER JOIN TaxConfiguration TA ON TA.TaxId=S.TaxId
WHERE TaxableAmount>0 and  RS.UsrId=@Pi_UsrId


IF NOT EXISTS(SELECT 'X' FROM #ServiceInvoiceTaxDetails)
BEGIN
	RETURN
END

CREATE TABLE #DynamicCol
(
Slno INT IDENTITY(1,1),
Taxperc	Varchar(50),
TaxId INT
)
INSERT INTO #DynamicCol(Taxperc,TaxId)
SELECT DISTINCT TaxCde,TaxId FROM #ServiceInvoiceTaxDetails WHERE TaxFlag IN(1,2) ORDER BY TaxId


		SELECT @ColSelect=@ColSelect+'ISNULL('+QuoteName(Taxperc)+',0) as '+QuoteName(Taxperc)+',' FROM #DynamicCol ORDER BY Slno

		SELECT @PCSelect=@PCSelect+(Taxperc)+',' FROM #DynamicCol ORDER BY Slno

		SET @PCSelect=LEFT(@PCSelect,LEN(@PCSelect)-1)
		
		SELECT @PCSelect1=@PCSelect1+QuoteName(Taxperc)+',' FROM #DynamicCol ORDER BY Slno
		SET @PCSelect1=LEFT(@PCSelect1,LEN(@PCSelect1)-1)

		SELECT @ColSelectDataType=@ColSelectDataType+QuoteName(Taxperc)+' Numeric(36,2),' FROM #DynamicCol ORDER BY Slno

		SET @ColSelect='SELECT ServiceInvId,RowNo,'+@ColSelect+'[Group Name],[GroupType],[UsrId]'

		SET @TableCol= 'SLNO BIGINT IDENTITY(1,1),[ServiceInvId] INT,RowNo INT,'


		SET @Columns1='SELECT ServiceInvId,RowNo,TaxPercent,TaxCde,[Group Name],[GroupType],[UsrId] FROM #ServiceInvoiceTaxDetails'

		SET @OrderBy=' ORDER BY ServiceInvId,[Group Name],[GroupType]'


		SET @CreateTable=' IF EXISTS(SELECT * FROM Tempdb..SYSOBJECTS WHERE NAME=''##RptServiceTemplate_TaxLineLvlGST'' and XTYPE=''U'')'+
		' DROP TABLE ##RptServiceTemplate_TaxLineLvlGST'+
		' CREATE TABLE ##RptServiceTemplate_TaxLineLvlGST ('+@TableCol+@ColSelectDataType+' [Group Name] Varchar(100),Grouptype TINYINT,UsrId INT)'

		--PRINT @CreateTable

		EXEC(@CreateTable)



		SET @SQL=' INSERT INTO ##RptServiceTemplate_TaxLineLvlGST '+ @ColSelect+ ' FROM'+
		'('+@Columns1+
		') PS'+
		' PIVOT'+
		'('+
		' SUM(TaxPercent) FOR TaxCde IN('+@PCSelect1+')'+
		')PVTTax '+ @OrderBy


		EXEC (@SQL)




	
	SET @Str=''
	SET @ColNameJoin=''
	SET @ColNameJoin1='A.ServiceInvId=B.ServiceInvId  and A.RowNo=B.RowNo  And B.UsrId=A.USERID '
	SET @ColNameJoin2=''

	
	SELECT @start = 1, @end = CHARINDEX(',', @PCSelect) 
	WHILE @start < LEN(@PCSelect) + 1 BEGIN 
		IF @end = 0  
		SET @end = LEN(@PCSelect) + 1
		SET @Str=SUBSTRING(@PCSelect, @start, @end - @start)
		SET @ColName=SUBSTRING(@PCSelect, @start, @end - @start)
		
		SET @ColAlter='IF NOT EXISTS(SELECT ''X'' FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.ID=B.ID WHERE  A.NAME=''RptServiceInvoicePrint'''+
		'AND B.name ='''+@ColName+''')'+
		' BEGIN'+
			' ALTER TABLE RptServiceInvoicePrint ADD '+''+QuoteName(@ColName)+''+' NUMERIC(32,2)'+
		' END'
		
		SET @ColNameJoin=@ColNameJoin+'A.'+QuoteName(@ColName)+'='+'B.'+QuoteName(@ColName) + ','
		EXEC (@ColAlter)
		
			
		SET @start = @end + 1 
		SET @end = CHARINDEX(',', @PCSelect, @start)
		SET @MaxId=@MaxId+1
	END 
	SET @ColNameJoin=SUBSTRING(@ColNameJoin,1,LEN(@ColNameJoin)-1)	
	SET @UpdatSQL=' UPDATE A SET '+ @ColNameJoin+' FROM RptServiceInvoicePrint A (NOLOCK) INNER JOIN ##RptServiceTemplate_TaxLineLvlGST B (NOLOCK) ON '+ @ColNameJoin1
	EXEC(@UpdatSQL)	
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='P' AND name='Proc_RptServiceInvoicePrint')
DROP PROCEDURE Proc_RptServiceInvoicePrint
GO
CREATE PROCEDURE Proc_RptServiceInvoicePrint
(
@Pi_RptId INT,
@Pi_UsrId Int,
@Pi_Type INT
) 
AS
BEGIN

DECLARE @FromBillId AS  VARCHAR(25)  
DECLARE @ToBillId   AS  VARCHAR(25) 
DECLARE @Cnt AS INT 
DECLARE @FromDate	AS DATETIME
DECLARE @ToDate		AS DATETIME
SELECT @FromDate=FilterDate FROM ReportFilterDt (NOLOCK) WHERE SelId=10 AND UsrId=@Pi_UsrId AND RptId=410
SELECT @ToDate=FilterDate FROM ReportFilterDt (NOLOCK) WHERE SelId=11 AND UsrId=@Pi_UsrId AND RptId=410
DECLARE @TempSalId TABLE (ServiceInvId INT,UsrId	INT) 

DELETE FROM RptServiceInvoicePrint WHERE USerId=@Pi_UsrId


DELETE FROM RptSelectedServiceId WHERE UsrId=@Pi_UsrId
	 
	IF @Pi_Type=1 
	BEGIN   
		INSERT INTO @TempSalId
		SELECT DISTINCT R.SelValue,UsrId FROM ReportFilterDt R (NOLOCK),ServiceInvoiceHd SI (NOLOCK)
		WHERE RptId = 410 AND SelId = 324  AND UsrId=@Pi_UsrId AND R.SelValue=Si.ServiceInvId 
		AND SI.ServiceInvDate BETWEEN @FromDate AND @ToDate
		INSERT INTO RptSelectedServiceId(ServiceInvId,UsrId)
		SELECT ServiceInvId,UsrId FROM @TempSalId			
	END
	ELSE   
	BEGIN
		
			SELECT @FROMBillId=SelValue FROM ReportFilterDt (NOLOCK) WHERE RptId = 410 AND SelId = 322 AND UsrId=@Pi_UsrId
			SELECT @ToBillId=SelValue FROM ReportFilterDt (NOLOCK) WHERE RptId = 410 AND SelId = 323 AND UsrId=@Pi_UsrId
			INSERT INTO RptSelectedServiceId(ServiceInvId,UsrId)
			SELECT Distinct ServiceInvId,@Pi_UsrId FROM ServiceInvoiceHd (NOLOCK) WHERE ServiceInvId BETWEEN @FROMBillId AND @ToBillId
		
	END


DECLARE @DistTinNumber AS VARCHAR(20)
DECLARE @DistPanNo AS VARCHAR(20)
DECLARE @CompanyTinNumber AS VARCHAR(20)

SELECT DistributorId,DistributorCode,DistributorName,DistributorAdd1,DistributorAdd2,DistributorAdd3,
PinCode,PhoneNo,ContactPerson,EmailID,StateCode,StateName,TinFirst2Digit
INTO #DistInfo
FROM UDCHD A (NOLOCK)
INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId
INNER JOIN UdcDetails C (NOLOCK) ON B.MasterId=C.MasterId
and B.UdcMasterId=C.UdcMasterId
INNER JOIN UdcDefault D (NOLOCK) ON D.MasterId=C.MasterId and D.MasterId=B.MasterId
and D.UdcMasterId=C.UdcMasterId and D.UdcMasterId=B.UdcMasterId
INNER JOIN StateMaster E (NOLOCK) ON E.StateName=D.ColValue and E.StateName=C.ColumnValue
INNER JOIN Distributor DB ON DB.DistributorId=C.MasterRecordId
WHERE MasterName='Distributor Info Master' and ColumnName='State Name'



SELECT CmpId,CmpCode,CmpName,Address1,Address2,Address3,
'' as PinCode,PhoneNumber as CmpPhoneNumber,ContactPerson as cmpContactPerson,EmailId as CmpEmailId,
E.StateId,StateCode as CmpStateCode,Statename as CmpStateName,TinFirst2Digit as CmpTinFirst2Digit
INTO #CompanyInfo
FROM UDCHD A (NOLOCK)
INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId
INNER JOIN UdcDetails C (NOLOCK) ON B.MasterId=C.MasterId
and B.UdcMasterId=C.UdcMasterId
INNER JOIN UdcDefault D (NOLOCK) ON D.MasterId=C.MasterId and D.MasterId=B.MasterId
and D.UdcMasterId=C.UdcMasterId and D.UdcMasterId=B.UdcMasterId
INNER JOIN StateMaster E (NOLOCK) ON E.StateName=D.ColValue and E.StateName=C.ColumnValue
INNER JOIN Company DB ON DB.CmpId=C.MasterRecordId
WHERE MasterName='Company Master' and ColumnName='State Name'




	
SELECT @DistTinNumber=U.ColumnValue 
FROM UdcDetails u  (NOLOCK)
INNER JOIN UdcMaster US  (NOLOCK)ON u.UdcMasterId=US.UdcMasterId
INNER JOIN Distributor D (NOLOCK) ON D.DistributorId=u.MasterRecordId
WHERE US.MasterId=16  and ColumnName='GSTIN'

SELECT @DistTinNumber=U.ColumnValue 
FROM UdcDetails u  (NOLOCK)
INNER JOIN UdcMaster US  (NOLOCK)ON u.UdcMasterId=US.UdcMasterId
INNER JOIN Distributor D (NOLOCK) ON D.DistributorId=u.MasterRecordId
WHERE US.MasterId=16  and ColumnName='GSTIN'

SELECT @DistTinNumber=U.ColumnValue 
FROM UdcDetails u  (NOLOCK)
INNER JOIN UdcMaster US  (NOLOCK)ON u.UdcMasterId=US.UdcMasterId
INNER JOIN Distributor D (NOLOCK) ON D.DistributorId=u.MasterRecordId
WHERE US.MasterId=16  and ColumnName='GSTIN'

SELECT @DistPanNo=U.ColumnValue 
FROM UdcDetails u (NOLOCK)
INNER JOIN UdcMaster US (NOLOCK) ON u.UdcMasterId=US.UdcMasterId
INNER JOIN Distributor D (NOLOCK) ON D.DistributorId=u.MasterRecordId
WHERE US.MasterId=16  and ColumnName='Pan Number'


SELECT  A.RtrId,RtrCode,RtrName,RtrAdd1,RtrAdd2,RtrAdd3,RtrPinNo,
RtrPhoneNo,RtrEmailId,RtrContactPerson,RtrDrugLicNo,RtrPestLicNo,
C.StateId as RtrStatId,C.StateName as RtrStateName,C.StateCode as RtrStateCode ,C.TinFirst2Digit as RtrTinFirst2Digit ,B.GSTTinNo,
RtrShipAdd1,RtrShipAdd2,RtrShipAdd3,RtrShipPhoneNo
INTO #RetailerInfo
FROM Retailer A (NOLOCK) 
INNER JOIN RetailerShipAdd B (NOLOCK) ON A.RtrShipId=B.RtrShipId
INNER JOIN StateMaster C (NOLOCK) ON C.StateId=B.StateId 
WHERE RtrShipDefaultAdd=1

---Retailer to Distributor Service Invoice ServiceInvFor=1 
INSERT INTO RptServiceInvoicePrint(DistributorId,DistributorCode,DistributorName,DistributorAdd1,
DistributorAdd2,DistributorAdd3,DistributorPinCode,DistributorPhoneNo,
DistributorContPerson,DistributorEmailId,DistributorState,DistributorStateName,
DistributorStateTin,DistributorGSTTin,DistributorPanNo,RtrId,[Retailer Code],
[Retailer Name],[Retailer Add1],[Retailer Add2],[Retailer Add3],[Retailer Pinno],
[Retailer Phoneno],[Retailer mailId],[Retailer ContPerson],[Retailer DruglicNo],
[Retailer PestLicNo],RtrStatId,[Retailer StateName],[Retailer StateCode],
[Retailer StateTin],[Retailer GSTTinNo],[Retailer ShipAdd1],[Retailer ShipAdd2],
[Retailer ShipAdd3],[Retailer ShipPhoneNo],ServiceInvId,ServiceInvRefNo,
ServiceInvDate,ServiceType,SerYear,FromDate,ToDate,[Service HDAmount],
[Service HDGstAmount],[Service HDTotalAmount],[Service HDAppServiceAmount],
[Service HDAppGstAmount],[Service HDAppTotalAmount],[Service HDReverseCharges],
[Service DocRefNo],[Service Remarks],[ApprovalStatus],Refid,RefCode,RowNo,
[Service LineLvl AvlServiceAmt],[Service LineLvl ServiceAmount],[Service LineLvl GSTAmount],
[Service LineLvl TotServiceAmount],[Service LineLvl AppSerAmount],[Service LineLvl AppGSTAmount],
ClmGrpId,ClmGrpCode,ClmGrpName,SerCode,SerName,SerACCode,SerACName,SchDsc,CmpSchCode,UserId)
SELECT DistributorId,DistributorCode,DistributorName,DistributorAdd1,DistributorAdd2,DistributorAdd3,
PinCode as DistributorPinCode,PhoneNo as DistributorPhoneNo,ContactPerson as DistributorContPerson,
EmailID as DistributorEmailId,StateCode as DistributorState,StateName as DistributorStateName,TinFirst2Digit as DistributorStateTin,
ISNULL(@DistTinNumber,'') as DistributorGSTTin,
ISNULL(@DistPanNo,'') as DistributorPanNo,
R.RtrId,R.RtrCode,R.RtrName,R.RtrAdd1,R.RtrAdd2,R.RtrAdd3,R.RtrPinNo,
R.RtrPhoneNo,R.RtrEmailId,R.RtrContactPerson,R.RtrDrugLicNo,R.RtrPestLicNo,
R.RtrStatId,R.RtrStateName,R.RtrStateCode ,R.RtrTinFirst2Digit ,R.GSTTinNo,
R.RtrShipAdd1,R.RtrShipAdd2,R.RtrShipAdd3,R.RtrShipPhoneNo,S.ServiceInvId,ServiceInvRefNo,
ServiceInvDate,'Retailer To Distributor' as ServiceType,SerYear,FromDate,ToDate,S.ServiceAmount,
S.GstAmount,TotalAmount,AppServiceAmount,
S.AppGstAmount,AppTotalAmount,ReverseCharges,
DocRefNo,Remarks,CASE Approval WHEN 0 THEN 'Pending'
			  WHEN 1 THEN 'Send For Approval'
			  WHEN 2 THEN 'Approved'
			  WHEN 3 THEN 'Rejected'
			  
			  END AS ApprovalStatus,
Refid,RefCode,RowNo,AvlServiceAmt,ST.ServiceAmount,ST.GSTAmount,
TotServiceAmount,AppSerAmount,ST.AppGSTAmount,F.ClmGrpId,ClmGrpCode,ClmGrpName,
SerCode,SerName,SerACCode,SerACName,
'' as SchDsc,'' as CmpSchCode,
@Pi_UsrId as UserId	  
FROM ServiceInvoiceHd S (NOLOCK) 
INNER JOIN ServiceInvoiceDT ST (NOLOCK) ON S.ServiceInvId =ST.ServiceInvId
INNER JOIN RptSelectedServiceId RS (NOLOCK) ON RS.ServiceInvId=S.ServiceInvId AND RS.ServiceInvId=ST.ServiceInvId
INNER JOIN #RetailerInfo R ON R.RtrId=S.ServiceFromId
LEFT OUTER JOIN #DistInfo D ON D.DistributorId=S.ServiceToId
LEFT OUTER JOIN ClaimGroupMaster F ON F.ClmGrpId=S.ClmGrpId
LEFT OUTER JOIN ServiceMaster SM (NOLOCK) ON SM.ServiceId=S.ServiceId
WHERE ServiceInvFor=1 and RS.UsrId=@Pi_UsrId

---DISTRIBUTOR TO COMPANY
INSERT INTO RptServiceInvoicePrint(DistributorId,DistributorCode,DistributorName,DistributorAdd1,
DistributorAdd2,DistributorAdd3,DistributorPinCode,DistributorPhoneNo,
DistributorContPerson,DistributorEmailId,DistributorState,DistributorStateName,
DistributorStateTin,DistributorGSTTin,DistributorPanNo,RtrId,[Retailer Code],
[Retailer Name],[Retailer Add1],[Retailer Add2],[Retailer Add3],[Retailer Pinno],
[Retailer Phoneno],[Retailer mailId],[Retailer ContPerson],[Retailer DruglicNo],
[Retailer PestLicNo],RtrStatId,[Retailer StateName],[Retailer StateCode],
[Retailer StateTin],[Retailer GSTTinNo],[Retailer ShipAdd1],[Retailer ShipAdd2],
[Retailer ShipAdd3],[Retailer ShipPhoneNo],ServiceInvId,ServiceInvRefNo,
ServiceInvDate,ServiceType,SerYear,FromDate,ToDate,[Service HDAmount],
[Service HDGstAmount],[Service HDTotalAmount],[Service HDAppServiceAmount],
[Service HDAppGstAmount],[Service HDAppTotalAmount],[Service HDReverseCharges],
[Service DocRefNo],[Service Remarks],[ApprovalStatus],Refid,RefCode,RowNo,
[Service LineLvl AvlServiceAmt],[Service LineLvl ServiceAmount],[Service LineLvl GSTAmount],
[Service LineLvl TotServiceAmount],[Service LineLvl AppSerAmount],[Service LineLvl AppGSTAmount],
ClmGrpId,ClmGrpCode,ClmGrpName,SerCode,SerName,SerACCode,SerACName,SchDsc,CmpSchCode,UserId)
SELECT DistributorId,DistributorCode,DistributorName,DistributorAdd1,DistributorAdd2,DistributorAdd3,
D.PinCode as DistributorPinCode,PhoneNo as DistributorPhoneNo,ContactPerson as DistributorContPerson,
EmailID as DistributorEmailId,StateCode as DistributorState,StateName as DistributorStateName,TinFirst2Digit as DistributorStateTin,
ISNULL(@DistTinNumber,'') as DistributorGSTTin,
ISNULL(@DistPanNo,'') as DistributorPanNo,
R.CmpId,R.CmpCode,R.CmpName,R.Address1,R.Address2,R.Address3,R.PinCode,
R.CmpPhoneNumber,R.CmpEmailId,R.cmpContactPerson,'' as RtrDrugLicNo,'' as RtrPestLicNo,
R.StateId,R.CmpStateName,R.CmpStateCode ,R.CmpTinFirst2Digit ,'' as GSTTinNo,
R.Address1,R.Address2,R.Address3,R.CmpPhoneNumber,S.ServiceInvId,ServiceInvRefNo,
ServiceInvDate,'Retailer To Distributor' as ServiceType,SerYear,FromDate,ToDate,S.ServiceAmount,


S.GstAmount,TotalAmount,AppServiceAmount,
S.AppGstAmount,AppTotalAmount,ReverseCharges,
DocRefNo,Remarks,CASE Approval WHEN 0 THEN 'Pending'
			  WHEN 1 THEN 'Send For Approval'
			  WHEN 2 THEN 'Approved'
			  WHEN 3 THEN 'Rejected'
			  
			  END AS ApprovalStatus,
Refid,RefCode,RowNo,AvlServiceAmt,ST.ServiceAmount,ST.GSTAmount,
TotServiceAmount,AppSerAmount,ST.AppGSTAmount,F.ClmGrpId,ClmGrpCode,ClmGrpName,
SerCode,SerName,SerACCode,SerACName,
'' as SchDsc,'' as CmpSchCode,
@Pi_UsrId as UserId	  
FROM ServiceInvoiceHd S (NOLOCK) 
INNER JOIN ServiceInvoiceDT ST (NOLOCK) ON S.ServiceInvId =ST.ServiceInvId
INNER JOIN RptSelectedServiceId RS (NOLOCK) ON RS.ServiceInvId=S.ServiceInvId AND RS.ServiceInvId=ST.ServiceInvId
INNER JOIN #CompanyInfo R ON R.CmpId=S.ServiceToId 
LEFT OUTER JOIN #DistInfo D ON D.DistributorId=S.ServiceFromId
LEFT OUTER JOIN ClaimGroupMaster F ON F.ClmGrpId=S.ClmGrpId
LEFT OUTER JOIN ServiceMaster SM (NOLOCK) ON SM.ServiceId=S.ServiceId
WHERE ServiceInvFor=2 and RS.UsrId=@Pi_UsrId

UPDATE A SET  A.SchDsc=B.SchDsc , A.CmpSchCode=B.CmpSchCode
FROM RptServiceInvoicePrint A (NOLOCK) 
INNER JOIN SchemeMaster B ON --A.ClmGrpId=B.ClmRefId and 
A.RefId=B.Schid
WHERE A.UserId=@Pi_UsrId

---TAX Update
EXEC Proc_RptServicePTaxDetailUpdateGST @Pi_UsrId
-- TILL HERE 

DROP TABLE #DistInfo
DROP TABLE #RetailerInfo 
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Cn2Cs_Prk_ServiceInvoiceApproval' AND XTYPE='U')
BEGIN
	CREATE TABLE [dbo].Cn2Cs_Prk_ServiceInvoiceApproval(
		[DistCode]         [nvarchar](50) NULL,
		[ServiceInvRefNo]  [nvarchar](100) NULL,
		[ServiceDesc]      [varchar] (100) NULL,
		[AppSerAmount]     [numeric] (18,6)NULL,
		[AppGSTAmount]     [numeric] (18,6)NULL,	
		[DownloadFlag]     [nvarchar](5) NULL,
		[CreatedDate]      [datetime] NULL
	) ON [PRIMARY]
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Import_ServiceInvoiceApproval' AND XTYPE='P')
DROP PROCEDURE Proc_Import_ServiceInvoiceApproval
GO
CREATE PROCEDURE [dbo].Proc_Import_ServiceInvoiceApproval
(
	@Pi_Records TEXT
)
AS
/*********************************
* PROCEDURE		: Proc_Import_ServiceInvoiceApproval
* PURPOSE		: To Insert records from xml file in the Table Proc_Cn2Cs_ServiceInvoiceApproval
* CREATED		: Raja C
* CREATED DATE	: 17-06-2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
SET NOCOUNT ON
BEGIN
	DECLARE @hDoc INTEGER
	
	EXEC sp_xml_preparedocument @hDoc OUTPUT,@Pi_Records
	INSERT INTO Cn2Cs_Prk_ServiceInvoiceApproval(
		DistCode,
	    ServiceInvRefNo,
		ServiceDesc,
		AppSerAmount,
		AppGSTAmount,
		DownLoadFlag,
		CreatedDate
	)
	SELECT DistCode,
	    ServiceInvRefNo,
		ServiceDesc,
		AppSerAmount,
		AppGSTAmount,
		ISNULL(DownLoadFlag,'D'),
		GETDATE()
	FROM OPENXML (@hdoc,'/Root/Console2CS_ServiceInvoiceApproval',1)
	WITH
	(
		[DistCode]         [nvarchar](50) ,
		[ServiceInvRefNo]  [nvarchar](100) ,
		[ServiceDesc]      [varchar] (100) ,
		[AppSerAmount]     [numeric] (18,6),
		[AppGSTAmount]     [numeric] (18,6),	
		[DownloadFlag]     [nvarchar](5) 
	) XMLObj
	EXEC sp_xml_removedocument @hDoc
END
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_Cn2Cs_ServiceInvoiceApproval' AND XTYPE='P')
DROP PROCEDURE Proc_Cn2Cs_ServiceInvoiceApproval
GO
-- EXEC Proc_Cn2Cs_ServiceInvoiceApproval 0
CREATE PROCEDURE [Proc_Cn2Cs_ServiceInvoiceApproval]
(
	@Po_ErrNo INT OUTPUT
)
AS
/***********************************************************
* PROCEDURE: Proc_Cn2Cs_ServiceInvoiceApproval
* SCREEN : To Download Approval for Service Invoice from Console
* CREATED: Raja C 
* MODIFIED :
* DATE      AUTHOR     DESCRIPTION
* {date} {developer}  {brief modIFication description}
*************************************************************/
SET NOCOUNT ON
BEGIN
SET @Po_ErrNo  = 0
	DELETE FROM Cn2Cs_Prk_ServiceInvoiceApproval WHERE DownloadFlag='Y'	

	IF EXISTS(SELECT * FROM Cn2Cs_Prk_ServiceInvoiceApproval(NOLOCK) WHERE DownloadFlag='D')
	BEGIN
		IF EXISTS (SELECT ServiceInvRefNo FROM Cn2Cs_Prk_ServiceInvoiceApproval WHERE ServiceInvRefNo NOT IN
				  (SELECT ServiceInvRefNo FROM ServiceInvoiceHD(NOLOCK)))
		BEGIN
			INSERT INTO ErrorLog
			SELECT 1,'ServiceInvoiceApproval','ServiceInvRefNo','ServiceInvRefNo Not Available-'+ServiceInvRefNo 
			FROM Cn2Cs_Prk_ServiceInvoiceApproval WHERE ServiceInvRefNo NOT IN
			(SELECT ServiceInvRefNo FROM ServiceInvoiceHD(NOLOCK))
		END 	
			
		 
		UPDATE B SET B.AppSerAmount=P.AppSerAmount,B.AppGSTAmount=P.AppGSTAmount FROM  ServiceinvoiceHD A(NOLOCK) 
		INNER JOIN Cn2Cs_Prk_ServiceInvoiceApproval P(NOLOCK) ON A.ServiceInvRefNo=P.ServiceInvRefNo
		INNER JOIN ServiceinvoiceDt B(NOLOCK)  ON A.ServiceInvId =B.ServiceInvId AND P.ServiceDesc=B.RefCode
		WHERE P.DownloadFlag='D'
		
		SELECT ServiceInvRefNo,SUM(AppSerAmount)AppSerAmount,SUM(AppGSTAmount)AppGSTAmount INTO #Cn2Cs_Prk_ServiceInvoiceApproval 
		FROM Cn2Cs_Prk_ServiceInvoiceApproval (NOLOCK) WHERE DownloadFlag='D' GROUP BY ServiceInvRefNo		
		
		UPDATE A SET A.AppServiceAmount=P.AppSerAmount,A.AppGSTAmount=P.AppGSTAmount,A.AppTotalAmount=(P.AppSerAmount+P.AppGSTAmount),A.ServiceInvStatus=2 
		FROM  ServiceinvoiceHD A(NOLOCK) INNER JOIN #Cn2Cs_Prk_ServiceInvoiceApproval P(NOLOCK) ON A.ServiceInvRefNo=P.ServiceInvRefNo
		
        UPDATE P SET DownloadFlag='Y'  FROM Cn2Cs_Prk_ServiceInvoiceApproval P WHERE ServiceInvRefNo IN (
        SELECT ServiceInvRefNo  FROM ServiceInvoiceHD WHERE ServiceInvStatus =2)
	
   END
   RETURN
END
GO
IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Cs2Cn_Prk_ServiceWindow' and xtype='U')
BEGIN
CREATE TABLE Cs2Cn_Prk_ServiceWindow
(
	[SlNo] [numeric](38, 0) IDENTITY(1,1) NOT NULL,
	[DistCode] [nvarchar](50) NOT NULL,
	[SchemeCode][nvarchar](50) NOT NULL,
	[SchemeDescription] [nvarchar](400) NOT NULL,
	[InvoiceNo] [nvarchar](50) NOT NULL,
	[RtrCode] [nvarchar](50) NOT NULL,
	[RtrName] [nvarchar](50) NOT NULL,
	[Company] [nvarchar](50) NOT NULL,
	[SalInvDate] [datetime] NULL,
	[SchemeType] [nvarchar](50) NOT NULL,
	[ServiceAccode] [nvarchar](50) NOT NULL,
	[ServiceInvId] [Int] NOT NULL,
	[SerAcName] [nvarchar](50) NOT NULL,
	[SerName] [nvarchar](50) NOT NULL,
	[AdjAmt] [numeric](18, 2) NOT NULL,
	[ServiceInvRefNo] [nvarchar](100) NULL,
	[ServiceInvDate] [datetime] NULL,
	[ServiceInvFor] [int] NULL,
	[SerYear] [int] NULL,
	[FromDate] [datetime] NULL,
	[ToDate] [datetime] NULL,
	[ServiceAmount] [numeric](18, 6) NULL,
	[GstAmount] [numeric](18, 6) NULL,
	[TotalAmount] [numeric](18, 6) NULL,
	[AppServiceAmount] [numeric](18, 6) NULL,
	[AppGstAmount] [numeric](18, 6) NULL,
	[AppTotalAmount] [numeric](18, 6) NULL,
	[UploadFlag] [varchar](1) NULL,
	[SyncId] [numeric](38, 0) NULL,
	[ServerDate] [datetime] NULL
) 
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE name='Proc_Cs2Cn_Prk_ServiceWindow' AND XTYPE='P')
DROP PROCEDURE Proc_Cs2Cn_Prk_ServiceWindow
GO
-- EXEC Proc_Cs2Cn_Prk_ServiceWindow 0
CREATE PROCEDURE Proc_Cs2Cn_Prk_ServiceWindow
(
	 @Po_ErrNo INT OUTPUT,
	 @ServerDate DATETIME
)
AS
SET NOCOUNT ON    
BEGIN 	
	SET @Po_ErrNo=0
	DECLARE @CmpID 		AS INTEGER
	DECLARE @DistCode	AS NVARCHAR(50)
	DELETE FROM Cs2Cn_Prk_ServiceWindow WHERE UploadFlag = 'Y'
	SELECT @CmpID = CmpId FROM Company WHERE DefaultCompany = 1	
	SELECT @DistCode = DistributorCode FROM Distributor
	
	Insert INTO Cs2Cn_Prk_ServiceWindow
(
	
	DistCode,
	SchemeCode,
	SchemeDescription,
	InvoiceNo,
	RtrCode,
	RtrName,
	Company,
	SalInvDate,
	SchemeType,
	ServiceAccode,
	ServiceInvId,
	SerAcName,
	SerName,
	AdjAmt,
	ServiceInvRefNo,
	ServiceInvDate,
	ServiceInvFor,
	SerYear,
	FromDate,
	ToDate,
	ServiceAmount,
	GstAmount,
	TotalAmount,
	AppServiceAmount,
	AppGstAmount,
	AppTotalAmount,
	UploadFlag,
	ServerDate
) 
	
	SELECT 
		@DistCode AS DistCode,
		SM.SchCode ,
		SM.SchDsc ,
		B.SalInvNo,
		R.CmpRtrCode,
		R.RtrName,
		CM.CmpCode ,
		B.SalInvDate ,
		CASE SM.SchType WHEN 1 THEN 'Quantity Based'
				WHEN 2 THEN 'Amount Based'
				WHEN 3 THEN 'Weight Based'
				WHEN 4 THEN 'Display' END,
		SE.SerACCode,
		SW.ServiceInvId,
		SE.SerACName,
		SE.SerName,
		Sum(SW.AdjAmt) AS AdjAmt,
		SH.ServiceInvRefNo,
		SH.ServiceInvDate,
		SH.ServiceInvFor,
		SH.SerYear,
		SH.FromDate,
		SH.ToDate,
		Sum(SH.ServiceAmount) AS ServiceAmount ,
		Sum(SH.GstAmount) AS GstAmount,
		Sum(SH.TotalAmount) AS TotalAmount,
		Sum(SH.AppServiceAmount) AS AppServiceAmount,
		Sum(SH.AppGstAmount) AS AppGstAmount,
		Sum(SH.AppTotalAmount) AS AppTotalAmount,
		'N' As UploadFlag,
		@ServerDate
	  From  SalesInvoice B(NOLOCK) 
		INNER JOIN SalesInvoiceWindowService SW(NOLOCK) ON SW.Salid=B.SalId 
		INNER JOIN SchemeMaster SM(NOLOCK) ON SW.Schid = SM.SchId 
		INNER JOIN Company CM(NOLOCK) ON SM.CmpId = CM.CmpId
		INNER JOIN Retailer R(NOLOCK) ON R.RtrId = B.RtrId
		INNER JOIN ServiceInvoiceHd SH (NOLOCK) ON SH.ServiceInvId =SW.ServiceInvId 
		INNER JOIN ServiceMaster SE (NOLOCK) ON SE.ServiceId =SH.ServiceId
		Where SW.GspUpload1=0 and Dlvsts>3
	  GROUP BY SM.SchCode,SM.SchDsc,B.SalInvNo,R.CmpRtrCode,CM.CmpCode,B.SalInvDate,R.RtrName,SM.SchType ,
			SE.SerACCode,SW.ServiceInvId,SE.SerACName,SE.SerName,SH.ServiceInvRefNo,SH.ServiceInvDate,
			SH.ServiceInvFor,SH.SerYear,SH.FromDate,SH.ToDate	
END
GO
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=1 WHERE ClmGrpCode='CG01'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=1 WHERE ClmGrpCode='CG02'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=1 WHERE ClmGrpCode='CG03'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=1 WHERE ClmGrpCode='CG04'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=1 WHERE ClmGrpCode='CG05'
Update ClaimGroupMaster Set GSTTAX=0,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG06'
Update ClaimGroupMaster Set GSTTAX=0,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG07'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG08'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG09'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG10'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG11'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG12'
Update ClaimGroupMaster Set GSTTAX=0,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG13'
Update ClaimGroupMaster Set GSTTAX=0,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG14'
Update ClaimGroupMaster Set GSTTAX=0,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG15'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=1 WHERE ClmGrpCode='CG16'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG17'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG10001'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG10002'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG08'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG10003'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG10004'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=1,ServiceOrGoods=1 WHERE ClmGrpCode='CG10005'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=1 WHERE ClmGrpCode='CG20'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=3,ServiceOrGoods=1 WHERE ClmGrpCode='CG21'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG22'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG18'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=1,ServiceOrGoods=1 WHERE ClmGrpCode='CG10003'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG22'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG23'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG24'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG25'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG26'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG27'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=1,ServiceOrGoods=1 WHERE ClmGrpCode='CG28'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=1,ServiceOrGoods=1 WHERE ClmGrpCode='CG29'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=1,ServiceOrGoods=1 WHERE ClmGrpCode='CG30'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=1,ServiceOrGoods=1 WHERE ClmGrpCode='CG31'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG32'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG33'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG34'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG35'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG36'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG37'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG38'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG39'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG40'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG41'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG18'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG19'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG20'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG22'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=1 WHERE ClmGrpCode='CG23'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG24'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=1,ServiceOrGoods=1 WHERE ClmGrpCode='CG25'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=1,ServiceOrGoods=1 WHERE ClmGrpCode='CG26'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG27'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG28'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG29'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG30'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG31'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG32'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG33'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=1,ServiceOrGoods=1 WHERE ClmGrpCode='CG34'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=1,ServiceOrGoods=1 WHERE ClmGrpCode='CG35'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=1,ServiceOrGoods=1 WHERE ClmGrpCode='CG36'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG37'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG38'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CG39'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=1 WHERE ClmGrpCode='CG39'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=1 WHERE ClmGrpCode='CG19'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CGFM01'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=1 WHERE ClmGrpCode='CGFM02'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=1 WHERE ClmGrpCode='CGFM03'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=1 WHERE ClmGrpCode='CGFM04'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CGFM05'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=1,ServiceOrGoods=1 WHERE ClmGrpCode='CGFM06'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CGFM07'
Update ClaimGroupMaster Set GSTTAX=1,ServiceType=2,ServiceOrGoods=2 WHERE ClmGrpCode='CGFM08'
GO
IF NOT EXISTS (SELECT * FROM StkMgntConfig WHERE Moduleid='SALESRTN15')
BEGIN
INSERT INTO StkMgntConfig(Moduleid,StockTypeid,Value,Availability,Lastmodby,LastModDate,AuthId,AuthDate)
SELECT 'SALESRTN15',1,1,1,1,getdate(),1,getdate()
UNION
SELECT 'SALESRTN15',2,1,1,1,getdate(),1,getdate()
UNION
SELECT 'SALESRTN15',3,2,1,1,getdate(),1,getdate()
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE in ('FN','TF') AND NAME='Fn_GSTConfigTampered')
DROP FUNCTION Fn_GSTConfigTampered
GO
--SELECT DBO.Fn_GSTConfigTampered()
CREATE FUNCTION [Fn_GSTConfigTampered]()
RETURNS VARCHAR(2000)
AS
BEGIN
/*********************************
* FUNCTION: Fn_CheckBackDated
* PURPOSE: to check Back Dated Transactions
* NOTES: 
* CREATED: Aravindh Deva C	22.02.2013
* MODIFIED 
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* 
*********************************/
DECLARE @GSTTempared as Varchar(200)
SET @GSTTempared=''
IF EXISTS(SELECT TOP 1 'X' FROM SalesInvoice (NOLOCK) WHERE VatGST='GST'
UNION ALL
SELECT TOP 1 'X' FROM ReturnHeader (NOLOCK) WHERE VatGST='GST'
UNION ALL
SELECT TOP 1 'X' FROM PurchaseReceipt (NOLOCK) WHERE VatGST='GST'
UNION ALL
SELECT TOP 1 'X' FROM PurchaseReturn (NOLOCK) WHERE VatGST='GST')
BEGIN
	IF NOT EXISTS(SELECT 'X' FROM GSTConfiguration WHERE ActivationStatus=1 and AcknowledgeStatus=1 and ConsoleAckStatus=1)
	BEGIN
		SET @GSTTempared='GST Configuration Tampered, Please contact support for Assist'
	END
	
END
RETURN(@GSTTempared)
END
GO
IF EXISTS (SELECT * FROM Counters  WHERE Tabname='ServiceInvoiceHd' AND Fldname='ServiceInvId')
BEGIN
	UPDATE Counters SET prefix='',zpad=0,CurrValue=0,displayflag=0 WHERE Tabname='ServiceInvoiceHd' AND Fldname='ServiceInvId' and ISNULL(prefix,'')=''
END
GO
DELETE FROM RPTEXCELFLAG WHERE RptId=5
INSERT INTO RPTEXCELFLAG (RPTID,USRID,FLAG,GRIDFLAG) 
VALUES ( 5,1,1,0)
GO
DELETE FROM Tbl_Generic_Reports WHERE RptName='GST Current Stock Snap Report'
DELETE FROM Tbl_Generic_Reports_Filters where rptname='GST Current Stock Snap Report'
GO
IF NOT EXISTS(SELECT 'X' FROM Tbl_Generic_Reports WHERE RptName='GST Current Stock Snap Report')
BEGIN
DECLARE @GenRptId1 AS INT
SELECT @GenRptId1=Max(RptId)+1 FROM Tbl_Generic_Reports
DELETE FROM Tbl_Generic_Reports WHERE RptName='GST Current Stock Snap Report'
INSERT INTO Tbl_Generic_Reports(RptId,RptName,SPName,Instructions,DrillDown)	
SELECT @GenRptId1, 'GST Current Stock Snap Report','PROC_GSTCurrentStock_Snap','Current Stock Snap Report for GST Migration','Not Available'
Delete FROM Tbl_Generic_Reports_Filters WHERE rptid=@GenRptId1
insert into Tbl_Generic_Reports_Filters(Rptid,Filterid,FilterCaption,ParamName,rptname)
select  @GenRptId1,1,'Not Applicable','PROC_GSTCurrentStock_Snap_values','GST Current Stock Snap Report' union
select  @GenRptId1,2,'Not Applicable','PROC_GSTCurrentStock_Snap_values','GST Current Stock Snap Report' union
select  @GenRptId1,3,'Not Applicable','PROC_GSTCurrentStock_Snap_values','GST Current Stock Snap Report' union
select  @GenRptId1,4,'Not Applicable','PROC_GSTCurrentStock_Snap_values','GST Current Stock Snap Report' union
select  @GenRptId1,5,'Not Applicable','PROC_GSTCurrentStock_Snap_values','GST Current Stock Snap Report' union
select  @GenRptId1,6,'Not Applicable','PROC_GSTCurrentStock_Snap_values','GST Current Stock Snap Report'
END
GO
IF EXISTS (SELECT  * FROM SYS.OBJECTS WHERE TYPE='P' AND NAME='PROC_GSTCurrentStock_Snap')
Drop procedure PROC_GSTCurrentStock_Snap 
GO
CREATE PROCEDURE [dbo].[PROC_GSTCurrentStock_Snap]
(
	@Pi_RptName		NVARCHAR(100),
	@Pi_FromDate	DATETIME,
	@Pi_ToDate		DATETIME,
	@Pi_Filter1		NVARCHAR(100),
	@Pi_Filter2		NVARCHAR(100),
	@Pi_Filter3		NVARCHAR(100),
	@Pi_Filter4		NVARCHAR(100),
	@Pi_Filter5		NVARCHAR(100),
	@Pi_Filter6		NVARCHAR(100)
)

AS
BEGIN

	SELECT 'GST Current Stock Snap Report',S.PrdDCode AS [Product Code],S.PrdName AS [Product Name],S.PrdBatCode AS [Batch Code],S.MRP as MRP ,
	 S.Saleable As [Saleable Stock] ,S.Unsaleable AS [Unsaleable Stock],S.offer as [Offer Stock],DisplaySalRate AS [Saleable Closing Stock-Value],
	 DisplayUnSalRate [UnSaleable Closing Stock-Value] ,DisplayTotRate  [Total closing Stock-Value]
	 FROM GSTCurrentStock_Snap S (NOLOCK) INNER JOIN Product P  (NOLOCK)  ON P.PrdId=S.PrdId
	 INNER JOIN productbatch PB  (NOLOCK) ON PB.PrdId=P.PrdId AND pb.PrdBatId=S.PrdBatId

END
GO
IF EXISTS (SELECT * FROM Sysobjects Where name='FN_CheckForDocRefNoSRGST' and XTYPE in ('TF','FN'))
DROP FUNCTION FN_CheckForDocRefNoSRGST
GO
CREATE FUNCTION FN_CheckForDocRefNoSRGST(@RefNo Nvarchar(100),@ReturnId AS BIGINT)
RETURNS INT
AS
/***********************************************
* FUNCTION: FN_CheckForDocRefNoSRGST
* PURPOSE: Return GstEnable Status
* NOTES:
* CREATED: Karthick 2017-04-24
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
*
************************************************/
BEGIN

DECLARE @Exists1 AS INT

SET @Exists1=0

IF @RefNo=''
BEGIN
RETURN(@Exists1)
END

IF EXISTS (SELECT 'X' FROM ReturnHeader A (Nolock) WHERE DocRefNo=@RefNo AND A.ReturnID<>@ReturnId and DocRefNo<>'')
BEGIN
SET @Exists1=1
END
	
RETURN(@Exists1)	
END
GO
DELETE FROM CustomCaptions where TransId=3 and CtrlId=1000 and SubCtrlid=100
GO
INSERT INTO CustomCaptions(TransId,CtrlId,SubCtrlId,CtrlName,Caption,PnlMsg,MsgBox,
LngId,Availability,lastmodby,LastModDate,AuthId,AuthDate,DefaultCaption,DefaultPnlMsg,DefaultMsgBox,
Visibility,Enabled)
SELECT 3,1000,100,'MsgBox-3-1000-100','','','DocRefNo Already Exists',1,1,1,GETDATE(),1,GETDATE(),'','','DocRefNo Already Exists',1,1
GO
IF NOT EXISTS (SELECT 'X' FROM GSTConfiguration (Nolock) Where ActivationStatus=1 and AcknowledgeStatus=1 and ConsoleAckStatus=1)
BEGIN
   UPDATE ManualConfiguration SET Status=0 WHERE PROJECTNAME='GST' AND ModuleId='BILL_EDIT1' AND MODULENAME='BILLING'
END
GO
DELETE FROM RptGroup WHERE RptId=406
INSERT INTO RptGroup(PId,RptId,GrpCode,GrpName,Visibility)
SELECT 'GSTTaxReports 400',406,'ServiceInvoiceReport','ServiceInvoice Report',1
GO
DELETE FROM RptHeader WHERE RptId=406
INSERT INTO RptHeader(GrpCode,RptCaption,RptId,RpCaption,SPName,TblName,RptName,UserIds)
SELECT 'ServiceInvoiceReport','ServiceInvoice Report',406,'ServiceInvoice Report','Proc_RptServiceInvoiceReport','RptServiceInvoiceReport','RptServiceInvoiceReport.rpt',0
GO
DELETE FROM RptDetails WHERE RptId=406
INSERT INTO RptDetails(RptId,[SlNo],[TblName],[PrntId],[PrntRefFld],[FldName],[FldCaption],[PrntTbl],[CtrlType],[CmnFld],[SelcId],[SingleMulti],[Mandatory],[PnlMsg],[CaptionChange]) VALUES (406,1,'FromDate',-1,'','','From Date*','',1,'',10,0,0,'Enter From Date',0)
INSERT INTO RptDetails(RptId,[SlNo],[TblName],[PrntId],[PrntRefFld],[FldName],[FldCaption],[PrntTbl],[CtrlType],[CmnFld],[SelcId],[SingleMulti],[Mandatory],[PnlMsg],[CaptionChange]) VALUES (406,2,'ToDate',-1,'','','To Date*','',1,'',11,0,0,'Enter To Date',0)
INSERT INTO RptDetails(RptId,[SlNo],[TblName],[PrntId],[PrntRefFld],[FldName],[FldCaption],[PrntTbl],[CtrlType],[CmnFld],[SelcId],[SingleMulti],[Mandatory],[PnlMsg],[CaptionChange]) VALUES (406,3,'Company',-1,'','CmpId,CmpCode,CmpName','Company...','',1,'',4,1,0,'Press F4/Double Click to select Company',0)
INSERT INTO RptDetails(RptId,[SlNo],[TblName],[PrntId],[PrntRefFld],[FldName],[FldCaption],[PrntTbl],[CtrlType],[CmnFld],[SelcId],[SingleMulti],[Mandatory],[PnlMsg],[CaptionChange]) VALUES (406,4,'RptFilter',-2,'','FilterId,FilterDesc,FilterDesc','ServiceType...','',1,'',325,1,0,'Press F4/Double Click to select ServiceType',0)
INSERT INTO RptDetails(RptId,[SlNo],[TblName],[PrntId],[PrntRefFld],[FldName],[FldCaption],[PrntTbl],[CtrlType],[CmnFld],[SelcId],[SingleMulti],[Mandatory],[PnlMsg],[CaptionChange]) VALUES (406,5,'SchemeMaster',-1,'','SchId,SchCode,SchDsc','SchemeCode...','',1,'',8,1,0,'Press F4/Double Click to select SchemeCode',0)
GO
DELETE FROM RptSelectionHd WHERE SelcId=325
INSERT INTO RptSelectionHd(SelcId,SelcName,TblName,Condition)
VALUES(325,'Sel_ServiceType','RptFilter',1)
GO
DELETE FROM RptFilter WHERE RptId=406
INSERT INTO RptFilter(RptId,SelcId,FilterId,FilterDesc)
SELECT 406,325,0,'ALL' UNION
SELECT 406,325,1,'Retailer-Distibutor' UNION
SELECT 406,325,2,'Distributor-Company' 
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='U' AND NAME='RptServiceInvoiceReport')
DROP TABLE RptServiceInvoiceReport
GO
CREATE TABLE RptServiceInvoiceReport
(
	 Slno BIGINT IDENTITY(1,1),
	 ServiceProviderType [nvarchar](100) NULL,
     ServiceInvRefNo     [nvarchar](100) NULL,
     ServiceInvDate      Datetime, 
     ServiceFromCode     [nvarchar](50)NULL,
     ServiceFromName     [nvarchar](100)NULL,
     FromStateCode       [nvarchar](50)NULL,
     FromGSTinNo         [nvarchar](100)NULL,
     FromPanNo           [nvarchar](20)NULL,
     ServiceType         [varchar](100)NULL,
     ServiceAcCode       [nvarchar](50)NULL,     
     ServiceToCode       [nvarchar](50)NULL,
     ServiceToName       [nvarchar](100)NULL,
     ToStateCode         [nvarchar](50)NULL,
     ToGSTinNo           [nvarchar](100)NULL,
     ToPanNo             [nvarchar](20)NULL,  
     RetailerInvRef      [nvarchar](100)NULL,   
     ServiceYear         INT,
     ServiceFromDate	 datetime,
     ServiceToDate	     datetime,
     CompSchCode         [varchar](100)NULL,
     SchemeDesc          [varchar](100)NULL,
     AvlServiceAmt       NUMERIC(18,6),
     ServiceAmount       NUMERIC(18,6),
     GSTAmount           NUMERIC(18,6),
     ServTaxCode         [nvarchar](50)NULL,
     [TaxFlag]           [int] NULL,
     [TaxId]             [int] NULL,	
     ServTaxPerc         NUMERIC(18,6),             
     TotServiceAmount    NUMERIC(18,6),
     ApprovedSerAmount   NUMERIC(18,6),
     ApprovedGSTAmount   NUMERIC(18,6),
     ReverseCharges      NUMERIC(18,6),
     [Group Name]        Varchar(200),
     [GroupType]         TINYINT,
     [UsrId]             [int] NULL
)
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='P' AND NAME='Proc_RptServiceInvoiceReport')
DROP PROCEDURE Proc_RptServiceInvoiceReport
GO
CREATE PROCEDURE Proc_RptServiceInvoiceReport
(
	@Pi_RptId			INT,
	@Pi_UsrId			INT,
	@Pi_SnapId			INT,
	@Pi_DbName			nvarchar(50),
	@Pi_SnapRequired	INT,
	@Pi_GetFromSnap		INT,
	@Pi_CurrencyId		INT
)
AS
/*********************************
* PROCEDURE	: Proc_RptServiceInvoiceReport
* PURPOSE	: To get the Service Invoice Details
* CREATED	: Raja C
* CREATED DATE	: 17/06/2017
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
BEGIN
SET NOCOUNT ON

	--Filter Variable
	DECLARE @FromDate		AS	DATETIME
	DECLARE @ToDate			AS	DATETIME
	DECLARE @CmpId	        AS	INT
	DECLARE @ServiceTypeId  AS  INT 
	DECLARE @SchId          AS  INT
	DECLARE @ErrNo	 	    AS	INT
		

	DECLARE @SQL as Varchar(MAX)
	DECLARE @MaxId as INT
	DECLARE @ReportId as INT
	DECLARE @start INT, @end INT 
	DECLARE @Str AS VARCHAR(100)
	DECLARE @CreateTable AS VARCHAR(7000)
	DECLARE @DistTinNumber AS VARCHAR(20)
	DECLARE @DistPanNo AS VARCHAR(20)
	DECLARE @CompanyTinNumber AS VARCHAR(20)
	DECLARE @CompanyPANNumber AS VARCHAR(20)	

		
	SET @ErrNo=0
	SELECT @FromDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,10,@Pi_UsrId)
	SELECT @ToDate = dSelected FROM Fn_ReturnRptFilterDate(@Pi_RptId,11,@Pi_UsrId)
	SET @CmpId = (SElect  TOP 1 iCountid FRom Fn_ReturnRptFilters(@Pi_RptId,4,@Pi_UsrId))	
	SET @ServiceTypeId = (SElect  TOP 1 iCountid FRom Fn_ReturnRptFilters(@Pi_RptId,325,@Pi_UsrId))
	SET @SchId =(SELECT  TOP 1 iCountid FROM Fn_ReturnRptFilters(@Pi_RptId,8,@Pi_UsrId))	
    
	
	IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='U' AND NAME='RptServiceInvoiceReport')
	BEGIN
		DELETE FROM RptServiceInvoiceReport WHERE UsrId=@Pi_UsrId
	END
	
		CREATE TABLE #RptServiceInvoiceReport
		(   
		     ServiceProviderType [nvarchar](100) NULL,
			 ServiceInvRefNo     [nvarchar](100) NULL,
			 ServiceInvDate      Datetime, 
			 ServiceFromCode     [nvarchar](50)NULL,
			 ServiceFromName     [nvarchar](100)NULL,
			 FromStateCode       [nvarchar](50)NULL,
			 FromGSTinNo         [nvarchar](100)NULL,
			 FromPanNo           [nvarchar](20)NULL,
			 ServiceType         [varchar](100)NULL,
			 ServiceAcCode       [nvarchar](50)NULL,     
			 ServiceToCode       [nvarchar](50)NULL,
			 ServiceToName       [nvarchar](100)NULL,
			 ToStateCode         [nvarchar](50)NULL,
			 ToGSTinNo           [nvarchar](100)NULL,
			 ToPanNo             [nvarchar](20)NULL,  
			 RetailerInvRef      [nvarchar](100)NULL,   
			 ServiceYear         INT,
			 ServiceFromDate	 datetime,
			 ServiceToDate	     datetime,
			 CompSchCode         [varchar](100)NULL,
			 SchemeDesc          [varchar](100)NULL,
			 AvlServiceAmt       NUMERIC(18,6),
			 ServiceAmount       NUMERIC(18,6),
			 GSTAmount           NUMERIC(18,6),
			 ServTaxCode         [nvarchar](50)NULL,
			 [TaxFlag]           [int] NULL,
             [TaxId]             [int] NULL,
	 		 ServTaxPerc         NUMERIC(18,6),			          
			 TotServiceAmount    NUMERIC(18,6),
			 ApprovedSerAmount   NUMERIC(18,6),
			 ApprovedGSTAmount   NUMERIC(18,6),
			 ReverseCharges      NUMERIC(18,6),
			 [Group Name]        Varchar(200),
             [GroupType]         TINYINT,
			 [UsrId]             [int] NULL
		)
		
		
	SELECT DistributorId,DistributorCode,DistributorName,DistributorAdd1,DistributorAdd2,DistributorAdd3,
	PinCode,PhoneNo,ContactPerson,EmailID,StateCode,StateName,TinFirst2Digit
	INTO #DistInfo
	FROM UDCHD A (NOLOCK)
	INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId
	INNER JOIN UdcDetails C (NOLOCK) ON B.MasterId=C.MasterId
	and B.UdcMasterId=C.UdcMasterId
	INNER JOIN UdcDefault D (NOLOCK) ON D.MasterId=C.MasterId and D.MasterId=B.MasterId
	and D.UdcMasterId=C.UdcMasterId and D.UdcMasterId=B.UdcMasterId
	INNER JOIN StateMaster E (NOLOCK) ON E.StateName=D.ColValue and E.StateName=C.ColumnValue
	INNER JOIN Distributor DB ON DB.DistributorId=C.MasterRecordId
	WHERE MasterName='Distributor Info Master' and ColumnName='State Name'

	SELECT CmpId,CmpCode,CmpName,Address1,Address2,Address3,
	'' as PinCode,PhoneNumber as CmpPhoneNumber,ContactPerson as cmpContactPerson,EmailId as CmpEmailId,
	E.StateId,StateCode as CmpStateCode,Statename as CmpStateName,TinFirst2Digit as CmpTinFirst2Digit
	INTO #CompanyInfo
	FROM UDCHD A (NOLOCK)
	INNER JOIN UdcMaster B (NOLOCK) ON A.MasterId=B.MasterId
	INNER JOIN UdcDetails C (NOLOCK) ON B.MasterId=C.MasterId
	and B.UdcMasterId=C.UdcMasterId
	INNER JOIN UdcDefault D (NOLOCK) ON D.MasterId=C.MasterId and D.MasterId=B.MasterId
	and D.UdcMasterId=C.UdcMasterId and D.UdcMasterId=B.UdcMasterId
	INNER JOIN StateMaster E (NOLOCK) ON E.StateName=D.ColValue and E.StateName=C.ColumnValue
	INNER JOIN Company DB ON DB.CmpId=C.MasterRecordId
	WHERE MasterName='Company Master' and ColumnName='State Name'
	
	SELECT @DistTinNumber=U.ColumnValue 
	FROM UdcDetails u  (NOLOCK)
	INNER JOIN UdcMaster US  (NOLOCK)ON u.UdcMasterId=US.UdcMasterId
	INNER JOIN Distributor D (NOLOCK) ON D.DistributorId=u.MasterRecordId
	WHERE US.MasterId=16  and ColumnName='GSTIN'
	
	SELECT @DistPanNo=U.ColumnValue 
	FROM UdcDetails u (NOLOCK)
	INNER JOIN UdcMaster US (NOLOCK) ON u.UdcMasterId=US.UdcMasterId
	INNER JOIN Distributor D (NOLOCK) ON D.DistributorId=u.MasterRecordId
	WHERE US.MasterId=16  and ColumnName='PAN Number'
	
	
	SELECT @CompanyTinNumber=U.ColumnValue 
	FROM UdcDetails u  (NOLOCK)
	INNER JOIN UdcMaster US  (NOLOCK)ON u.UdcMasterId=US.UdcMasterId
	INNER JOIN Distributor D (NOLOCK) ON D.DistributorId=u.MasterRecordId
	WHERE US.MasterId=7  and ColumnName='GSTIN'
	
	SELECT @CompanyPANNumber=U.ColumnValue 
	FROM UdcDetails u (NOLOCK)
	INNER JOIN UdcMaster US (NOLOCK) ON u.UdcMasterId=US.UdcMasterId
	INNER JOIN Distributor D (NOLOCK) ON D.DistributorId=u.MasterRecordId
	WHERE US.MasterId=7  and ColumnName='PAN Number'
	
	SELECT  A.RtrId,RtrCode,RtrName,RtrAdd1,RtrAdd2,RtrAdd3,RtrPinNo,
	RtrPhoneNo,RtrEmailId,RtrContactPerson,RtrDrugLicNo,RtrPestLicNo,
	C.StateId as RtrStatId,C.StateName as RtrStateName,C.StateCode as RtrStateCode ,C.TinFirst2Digit as RtrTinFirst2Digit ,B.GSTTinNo,
	RtrShipAdd1,RtrShipAdd2,RtrShipAdd3,RtrShipPhoneNo
	INTO #RetailerInfo
	FROM Retailer A (NOLOCK) 
	INNER JOIN RetailerShipAdd B (NOLOCK) ON A.RtrShipId=B.RtrShipId
	INNER JOIN StateMaster C (NOLOCK) ON C.StateId=B.StateId 
	WHERE RtrShipDefaultAdd=1	
	
		
	IF @ServiceTypeId = 0 
	BEGIN
		INSERT INTO #RptServiceInvoiceReport(ServiceProviderType,ServiceInvRefNo,ServiceInvDate,ServiceFromCode,ServiceFromName,FromStateCode,FromGSTinNo,
		FromPanNo,ServiceType,ServiceAcCode,ServiceToCode,ServiceToName,ToStateCode,ToGSTinNo,ToPanNo,RetailerInvRef,ServiceYear,ServiceFromDate,ServiceToDate,CompSchCode,SchemeDesc,
		AvlServiceAmt,ServiceAmount,GSTAmount,ServTaxCode,TaxFlag,TaxId,ServTaxPerc,TotServiceAmount,ApprovedSerAmount,ApprovedGSTAmount,ReverseCharges,[Group Name],[GroupType],UsrId)	
		SELECT ServiceProviderType,ServiceInvRefNo,ServiceInvDate,ServiceFromCode,ServiceFromName,FromStateCode,FromGSTinNo,FromPanNo,ServiceType,ServiceAcCode,
		ServiceToCode,ServiceToName,ToStateCode,ToGSTinNo,ToPanNo,RetailerInvRef,ServiceYear,ServiceFromDate,ServiceToDate,CompSchCode,SchemeDesc,AvlServiceAmt,ServiceAmount,
		GSTAmount,ServTaxCode,TaxFlag,TaxId,ServTaxPerc,TotServiceAmount,ApprovedSerAmount,ApprovedGSTAmount,ReverseCharges,[Group Name],[GroupType],UserId FROM (	
		SELECT 'Retailer To Distributor'AS ServiceProviderType,ServiceInvRefNo,ServiceInvDate,RtrCode AS ServiceFromCode,RtrName AS ServiceFromName,
		R.RtrStateCode AS FromStateCode,R.GSTTinNo AS FromGSTinNo,FromPanNo,SerName AS ServiceType,ServiceAcCode,DistributorCode AS ServiceToCode,DistributorName AS ServiceToName,
		D.StateCode AS ToStateCode,ISNULL(@DistTinNumber,'')AS ToGSTinNo,ISNULL(@DistPanNo,'')AS ToPanNo,SH.DocRefNo AS RetailerInvRef,SerYear AS ServiceYear,FromDate AS ServiceFromDate,
		ToDate AS ServiceToDate,CmpSchCode AS CompSchCode,ST.RefCode AS SchemeDesc,ST.AvlServiceAmt,ST.ServiceAmount,ST.GSTAmount,T.TaxCode +' %' AS ServTaxCode ,0 AS TaxFlag,STD.Taxid AS TaxId,STD.TaxPerc AS ServTaxPerc,
		ST.TotServiceAmount,ST.AppSerAmount AS ApprovedSerAmount,ST.AppGSTAmount AS ApprovedGSTAmount,SH.ReverseCharges AS ReverseCharges,''AS [Group Name],2 AS [GroupType],@Pi_UsrId AS UserId  
		 FROM ServiceInvoiceHd SH (NOLOCK) 
		INNER JOIN ServiceInvoiceDT ST (NOLOCK) ON SH.ServiceInvId =ST.ServiceInvId
		INNER JOIN ServiceInvoiceTaxDetails STD (NOLOCK) ON SH.ServiceInvId =STD.ServiceInvId AND ST.ServiceInvId =STD.ServiceInvId AND ST.Rowno=STD.RowNo
		INNER JOIN TaxConfiguration T (NOLOCK) ON STD.Taxid=T.TaxId
		INNER JOIN #RetailerInfo R ON R.RtrID = SH.ServiceFromId
		LEFT OUTER JOIN #DistInfo D ON D.DistributorId=SH.ServiceToId
		LEFT OUTER JOIN ServiceMaster SM (NOLOCK) ON SM.ServiceId=SH.ServiceId
		LEFT OUTER JOIN ClaimGroupMaster F ON F.ClmGrpId=SH.ClmGrpId
		LEFT OUTER JOIN SchemeMaster  S ON S.SchId = ST.Refid
		WHERE (SchId = (CASE @SchId WHEN 0 THEN SchId Else 0 END) OR
		SchId in (SELECT iCountid from Fn_ReturnRptFilters(@Pi_RptId,8,@Pi_UsrId))) AND ServiceinvFor=1
		UNION ALL
		SELECT 'Distributor To Company'AS ServiceProviderType,ServiceInvRefNo,ServiceInvDate,DistributorCode AS ServiceFromCode,DistributorName AS ServiceFromName,
		R.StateCode AS FromStateCode,ISNULL(@DistTinNumber,'') AS FromGSTinNo,FromPanNo,SerName AS ServiceType,ServiceAcCode,CmpCode AS ServiceToCode,CmpName AS ServiceToName,
		D.CmpStateCode AS ToStateCode,ISNULL(@CompanyTinNumber,'')AS ToGSTinNo,ISNULL(@CompanyPANNumber,'')AS ToPanNo,SH.DocRefNo AS RetailerInvRef,SerYear AS ServiceYear,FromDate AS ServiceFromDate ,
		ToDate AS ServiceToDate ,CmpSchCode AS CompSchCode,ST.RefCode AS SchemeDesc,ST.AvlServiceAmt,ST.ServiceAmount,ST.GSTAmount,T.TaxCode+' %' AS ServTaxCode ,0 AS TaxFlag,STD.Taxid AS TaxId,STD.TaxPerc AS ServTaxPerc,
		ST.TotServiceAmount,ST.AppSerAmount AS ApprovedSerAmount,ST.AppGSTAmount AS ApprovedGSTAmount,SH.ReverseCharges AS ReverseCharges,'' [Group Name],2 AS [GroupType],@Pi_UsrId AS UserId 
		FROM ServiceInvoiceHd SH (NOLOCK) 
		INNER JOIN ServiceInvoiceDT ST (NOLOCK) ON SH.ServiceInvId =ST.ServiceInvId
		INNER JOIN ServiceInvoiceTaxDetails STD (NOLOCK) ON SH.ServiceInvId =STD.ServiceInvId AND ST.ServiceInvId =STD.ServiceInvId AND ST.Rowno=STD.RowNo
		INNER JOIN TaxConfiguration T (NOLOCK) ON STD.Taxid=T.TaxId
		INNER JOIN #DistInfo R ON R.DistributorId = SH.ServiceFromId
		LEFT OUTER JOIN #CompanyInfo D ON D.CmpId=SH.ServiceToId
		LEFT OUTER JOIN ServiceMaster SM (NOLOCK) ON SM.ServiceId=SH.ServiceId
		LEFT OUTER JOIN ClaimGroupMaster F ON F.ClmGrpId=SH.ClmGrpId
		LEFT OUTER JOIN SchemeMaster  S ON S.SchId = ST.Refid
		WHERE (SchId = (CASE @SchId WHEN 0 THEN SchId Else 0 END) OR
		SchId in (SELECT iCountid from Fn_ReturnRptFilters(@Pi_RptId,8,@Pi_UsrId)))AND ServiceinvFor=2 )A
		
		
		INSERT INTO #RptServiceInvoiceReport(ServiceProviderType,ServiceInvRefNo,ServiceInvDate,ServiceFromCode,ServiceFromName,FromStateCode,FromGSTinNo,
		FromPanNo,ServiceType,ServiceAcCode,ServiceToCode,ServiceToName,ToStateCode,ToGSTinNo,ToPanNo,RetailerInvRef,ServiceYear,ServiceFromDate,ServiceToDate,CompSchCode,SchemeDesc,
		AvlServiceAmt,ServiceAmount,GSTAmount,ServTaxCode,TaxFlag,TaxId,ServTaxPerc,TotServiceAmount,ApprovedSerAmount,ApprovedGSTAmount,ReverseCharges,[Group Name],[GroupType],UsrId)	
		SELECT ServiceProviderType,ServiceInvRefNo,ServiceInvDate,ServiceFromCode,ServiceFromName,FromStateCode,FromGSTinNo,FromPanNo,ServiceType,ServiceAcCode,
		ServiceToCode,ServiceToName,ToStateCode,ToGSTinNo,ToPanNo,RetailerInvRef,ServiceYear,ServiceFromDate,ServiceToDate,CompSchCode,SchemeDesc,AvlServiceAmt,ServiceAmount,
		GSTAmount,ServTaxCode,TaxFlag,TaxId,ServTaxPerc,TotServiceAmount,ApprovedSerAmount,ApprovedGSTAmount,ReverseCharges,[Group Name],[GroupType],UserId FROM (	
		SELECT 'Retailer To Distributor'AS ServiceProviderType,ServiceInvRefNo,ServiceInvDate,RtrCode AS ServiceFromCode,RtrName AS ServiceFromName,
		R.RtrStateCode AS FromStateCode,R.GSTTinNo AS FromGSTinNo,FromPanNo,SerName AS ServiceType,ServiceAcCode,DistributorCode AS ServiceToCode,DistributorName AS ServiceToName,
		D.StateCode AS ToStateCode,ISNULL(@DistTinNumber,'')AS ToGSTinNo,ISNULL(@DistPanNo,'')AS ToPanNo,SH.DocRefNo AS RetailerInvRef,SerYear AS ServiceYear,FromDate AS ServiceFromDate,
		ToDate AS ServiceToDate,CmpSchCode AS CompSchCode,ST.RefCode AS SchemeDesc,ST.AvlServiceAmt,ST.ServiceAmount,ST.GSTAmount,T.TaxCode+'Value' AS ServTaxCode ,1 AS TaxFlag,STD.Taxid AS TaxId,STD.TaxAmount AS ServTaxPerc,
		ST.TotServiceAmount,ST.AppSerAmount AS ApprovedSerAmount,ST.AppGSTAmount AS ApprovedGSTAmount,SH.ReverseCharges AS ReverseCharges,''AS [Group Name],2 AS [GroupType],@Pi_UsrId AS UserId  
		 FROM ServiceInvoiceHd SH (NOLOCK) 
		INNER JOIN ServiceInvoiceDT ST (NOLOCK) ON SH.ServiceInvId =ST.ServiceInvId
		INNER JOIN ServiceInvoiceTaxDetails STD (NOLOCK) ON SH.ServiceInvId =STD.ServiceInvId AND ST.ServiceInvId =STD.ServiceInvId AND ST.Rowno=STD.RowNo
		INNER JOIN TaxConfiguration T (NOLOCK) ON STD.Taxid=T.TaxId
		INNER JOIN #RetailerInfo R ON R.RtrID = SH.ServiceFromId
		LEFT OUTER JOIN #DistInfo D ON D.DistributorId=SH.ServiceToId
		LEFT OUTER JOIN ServiceMaster SM (NOLOCK) ON SM.ServiceId=SH.ServiceId
		LEFT OUTER JOIN ClaimGroupMaster F ON F.ClmGrpId=SH.ClmGrpId
		LEFT OUTER JOIN SchemeMaster  S ON S.SchId = ST.Refid
		WHERE (SchId = (CASE @SchId WHEN 0 THEN SchId Else 0 END) OR
		SchId in (SELECT iCountid from Fn_ReturnRptFilters(@Pi_RptId,8,@Pi_UsrId))) AND ServiceinvFor=1
		UNION ALL
		SELECT 'Distributor To Company'AS ServiceProviderType,ServiceInvRefNo,ServiceInvDate,DistributorCode AS ServiceFromCode,DistributorName AS ServiceFromName,
		R.StateCode AS FromStateCode,ISNULL(@DistTinNumber,'') AS FromGSTinNo,FromPanNo,SerName AS ServiceType,ServiceAcCode,CmpCode AS ServiceToCode,CmpName AS ServiceToName,
		D.CmpStateCode AS ToStateCode,ISNULL(@CompanyTinNumber,'')AS ToGSTinNo,ISNULL(@CompanyPANNumber,'')AS ToPanNo,SH.DocRefNo AS RetailerInvRef,SerYear AS ServiceYear,FromDate AS ServiceFromDate ,
		ToDate AS ServiceToDate ,CmpSchCode AS CompSchCode,ST.RefCode AS SchemeDesc,ST.AvlServiceAmt,ST.ServiceAmount,ST.GSTAmount,T.TaxCode+'Value' AS ServTaxCode ,1 AS TaxFlag,STD.Taxid AS TaxId,STD.TaxAmount AS ServTaxPerc,
		ST.TotServiceAmount,ST.AppSerAmount AS ApprovedSerAmount,ST.AppGSTAmount AS ApprovedGSTAmount,SH.ReverseCharges AS ReverseCharges,'' [Group Name],2 AS [GroupType],@Pi_UsrId AS UserId 
		FROM ServiceInvoiceHd SH (NOLOCK) 
		INNER JOIN ServiceInvoiceDT ST (NOLOCK) ON SH.ServiceInvId =ST.ServiceInvId
		INNER JOIN ServiceInvoiceTaxDetails STD (NOLOCK) ON SH.ServiceInvId =STD.ServiceInvId AND ST.ServiceInvId =STD.ServiceInvId AND ST.Rowno=STD.RowNo
		INNER JOIN TaxConfiguration T (NOLOCK) ON STD.Taxid=T.TaxId
		INNER JOIN #DistInfo R ON R.DistributorId = SH.ServiceFromId
		LEFT OUTER JOIN #CompanyInfo D ON D.CmpId=SH.ServiceToId
		LEFT OUTER JOIN ServiceMaster SM (NOLOCK) ON SM.ServiceId=SH.ServiceId
		LEFT OUTER JOIN ClaimGroupMaster F ON F.ClmGrpId=SH.ClmGrpId
		LEFT OUTER JOIN SchemeMaster  S ON S.SchId = ST.Refid
		WHERE (SchId = (CASE @SchId WHEN 0 THEN SchId Else 0 END) OR
		SchId in (SELECT iCountid from Fn_ReturnRptFilters(@Pi_RptId,8,@Pi_UsrId)))AND ServiceinvFor=2 )A				
	END
	ELSE IF @ServiceTypeId = 1
	BEGIN
	    INSERT INTO #RptServiceInvoiceReport(ServiceProviderType,ServiceInvRefNo,ServiceInvDate,ServiceFromCode,ServiceFromName,FromStateCode,FromGSTinNo,
		FromPanNo,ServiceType,ServiceAcCode,ServiceToCode,ServiceToName,ToStateCode,ToGSTinNo,ToPanNo,RetailerInvRef,ServiceYear,ServiceFromDate,ServiceToDate,CompSchCode,SchemeDesc,
		AvlServiceAmt,ServiceAmount,GSTAmount,ServTaxCode,TaxFlag,TaxId,ServTaxPerc,TotServiceAmount,ApprovedSerAmount,ApprovedGSTAmount,ReverseCharges,[Group Name],[GroupType],UsrId)	
		SELECT ServiceProviderType,ServiceInvRefNo,ServiceInvDate,ServiceFromCode,ServiceFromName,FromStateCode,FromGSTinNo,FromPanNo,ServiceType,ServiceAcCode,
		ServiceToCode,ServiceToName,ToStateCode,ToGSTinNo,ToPanNo,RetailerInvRef,ServiceYear,ServiceFromDate,ServiceToDate,CompSchCode,SchemeDesc,AvlServiceAmt,ServiceAmount,
		GSTAmount,ServTaxCode,TaxFlag,TaxId,ServTaxPerc,TotServiceAmount,ApprovedSerAmount,ApprovedGSTAmount,ReverseCharges,[Group Name],[GroupType],UserId FROM (	
		SELECT 'Retailer To Distributor'AS ServiceProviderType,ServiceInvRefNo,ServiceInvDate,RtrCode AS ServiceFromCode,RtrName AS ServiceFromName,
		R.RtrStateCode AS FromStateCode,R.GSTTinNo AS FromGSTinNo,FromPanNo,SerName AS ServiceType,ServiceAcCode,DistributorCode AS ServiceToCode,DistributorName AS ServiceToName,
		D.StateCode AS ToStateCode,ISNULL(@DistTinNumber,'')AS ToGSTinNo,ISNULL(@DistPanNo,'')AS ToPanNo,SH.DocRefNo AS RetailerInvRef,SerYear AS ServiceYear,FromDate AS ServiceFromDate,
		ToDate AS ServiceToDate,CmpSchCode AS CompSchCode,ST.RefCode AS SchemeDesc,ST.AvlServiceAmt,ST.ServiceAmount,ST.GSTAmount,T.TaxCode+' %' AS ServTaxCode ,0 AS TaxFlag,STD.Taxid AS TaxId,STD.TaxPerc AS ServTaxPerc,
		ST.TotServiceAmount,ST.AppSerAmount AS ApprovedSerAmount,ST.AppGSTAmount AS ApprovedGSTAmount,SH.ReverseCharges AS ReverseCharges,''AS [Group Name],2 AS [GroupType],@Pi_UsrId AS UserId  
		 FROM ServiceInvoiceHd SH (NOLOCK) 
		INNER JOIN ServiceInvoiceDT ST (NOLOCK) ON SH.ServiceInvId =ST.ServiceInvId
		INNER JOIN ServiceInvoiceTaxDetails STD (NOLOCK) ON SH.ServiceInvId =STD.ServiceInvId AND ST.ServiceInvId =STD.ServiceInvId AND ST.Rowno=STD.RowNo
		INNER JOIN TaxConfiguration T (NOLOCK) ON STD.Taxid=T.TaxId
		INNER JOIN #RetailerInfo R ON R.RtrID = SH.ServiceFromId
		LEFT OUTER JOIN #DistInfo D ON D.DistributorId=SH.ServiceToId
		LEFT OUTER JOIN ServiceMaster SM (NOLOCK) ON SM.ServiceId=SH.ServiceId
		LEFT OUTER JOIN ClaimGroupMaster F ON F.ClmGrpId=SH.ClmGrpId
		LEFT OUTER JOIN SchemeMaster  S ON S.SchId = ST.Refid
		WHERE (SchId = (CASE @SchId WHEN 0 THEN SchId Else 0 END) OR
		SchId in (SELECT iCountid from Fn_ReturnRptFilters(@Pi_RptId,8,@Pi_UsrId))) AND ServiceinvFor=1)A
		
	    INSERT INTO #RptServiceInvoiceReport(ServiceProviderType,ServiceInvRefNo,ServiceInvDate,ServiceFromCode,ServiceFromName,FromStateCode,FromGSTinNo,
		FromPanNo,ServiceType,ServiceAcCode,ServiceToCode,ServiceToName,ToStateCode,ToGSTinNo,ToPanNo,RetailerInvRef,ServiceYear,ServiceFromDate,ServiceToDate,CompSchCode,SchemeDesc,
		AvlServiceAmt,ServiceAmount,GSTAmount,ServTaxCode,TaxFlag,TaxId,ServTaxPerc,TotServiceAmount,ApprovedSerAmount,ApprovedGSTAmount,ReverseCharges,[Group Name],[GroupType],UsrId)	
		SELECT ServiceProviderType,ServiceInvRefNo,ServiceInvDate,ServiceFromCode,ServiceFromName,FromStateCode,FromGSTinNo,FromPanNo,ServiceType,ServiceAcCode,
		ServiceToCode,ServiceToName,ToStateCode,ToGSTinNo,ToPanNo,RetailerInvRef,ServiceYear,ServiceFromDate,ServiceToDate,CompSchCode,SchemeDesc,AvlServiceAmt,ServiceAmount,
		GSTAmount,ServTaxCode,TaxFlag,TaxId,ServTaxPerc,TotServiceAmount,ApprovedSerAmount,ApprovedGSTAmount,ReverseCharges,[Group Name],[GroupType],UserId FROM (	
		SELECT 'Retailer To Distributor'AS ServiceProviderType,ServiceInvRefNo,ServiceInvDate,RtrCode AS ServiceFromCode,RtrName AS ServiceFromName,
		R.RtrStateCode AS FromStateCode,R.GSTTinNo AS FromGSTinNo,FromPanNo,SerName AS ServiceType,ServiceAcCode,DistributorCode AS ServiceToCode,DistributorName AS ServiceToName,
		D.StateCode AS ToStateCode,ISNULL(@DistTinNumber,'')AS ToGSTinNo,ISNULL(@DistPanNo,'')AS ToPanNo,SH.DocRefNo AS RetailerInvRef,SerYear AS ServiceYear,FromDate AS ServiceFromDate,
		ToDate AS ServiceToDate,CmpSchCode AS CompSchCode,ST.RefCode AS SchemeDesc,ST.AvlServiceAmt,ST.ServiceAmount,ST.GSTAmount,T.TaxCode+'Value' AS ServTaxCode ,1 AS TaxFlag,STD.Taxid AS TaxId,STD.TaxAmount AS ServTaxPerc,
		ST.TotServiceAmount,ST.AppSerAmount AS ApprovedSerAmount,ST.AppGSTAmount AS ApprovedGSTAmount,SH.ReverseCharges AS ReverseCharges,''AS [Group Name],2 AS [GroupType],@Pi_UsrId AS UserId  
		 FROM ServiceInvoiceHd SH (NOLOCK) 
		INNER JOIN ServiceInvoiceDT ST (NOLOCK) ON SH.ServiceInvId =ST.ServiceInvId
		INNER JOIN ServiceInvoiceTaxDetails STD (NOLOCK) ON SH.ServiceInvId =STD.ServiceInvId AND ST.ServiceInvId =STD.ServiceInvId AND ST.Rowno=STD.RowNo
		INNER JOIN TaxConfiguration T (NOLOCK) ON STD.Taxid=T.TaxId
		INNER JOIN #RetailerInfo R ON R.RtrID = SH.ServiceFromId
		LEFT OUTER JOIN #DistInfo D ON D.DistributorId=SH.ServiceToId
		LEFT OUTER JOIN ServiceMaster SM (NOLOCK) ON SM.ServiceId=SH.ServiceId
		LEFT OUTER JOIN ClaimGroupMaster F ON F.ClmGrpId=SH.ClmGrpId
		LEFT OUTER JOIN SchemeMaster  S ON S.SchId = ST.Refid
		WHERE (SchId = (CASE @SchId WHEN 0 THEN SchId Else 0 END) OR
		SchId in (SELECT iCountid from Fn_ReturnRptFilters(@Pi_RptId,8,@Pi_UsrId))) AND ServiceinvFor=1)A
	END
	ELSE IF @ServiceTypeId = 2
	BEGIN
	    INSERT INTO #RptServiceInvoiceReport(ServiceProviderType,ServiceInvRefNo,ServiceInvDate,ServiceFromCode,ServiceFromName,FromStateCode,FromGSTinNo,
		FromPanNo,ServiceType,ServiceAcCode,ServiceToCode,ServiceToName,ToStateCode,ToGSTinNo,ToPanNo,RetailerInvRef,ServiceYear,ServiceFromDate,ServiceToDate,CompSchCode,SchemeDesc,
		AvlServiceAmt,ServiceAmount,GSTAmount,ServTaxCode,TaxFlag,TaxId,ServTaxPerc,TotServiceAmount,ApprovedSerAmount,ApprovedGSTAmount,ReverseCharges,[Group Name],[GroupType],UsrId)	
		SELECT ServiceProviderType,ServiceInvRefNo,ServiceInvDate,ServiceFromCode,ServiceFromName,FromStateCode,FromGSTinNo,FromPanNo,ServiceType,ServiceAcCode,
		ServiceToCode,ServiceToName,ToStateCode,ToGSTinNo,ToPanNo,RetailerInvRef,ServiceYear,ServiceFromDate,ServiceToDate,CompSchCode,SchemeDesc,AvlServiceAmt,ServiceAmount,
		GSTAmount,ServTaxCode,TaxFlag,TaxId,ServTaxPerc,TotServiceAmount,ApprovedSerAmount,ApprovedGSTAmount,ReverseCharges,[Group Name],[GroupType],UserId FROM (	
		SELECT 'Distributor To Company'AS ServiceProviderType,ServiceInvRefNo,ServiceInvDate,DistributorCode AS ServiceFromCode,DistributorName AS ServiceFromName,
		R.StateCode AS FromStateCode,ISNULL(@DistTinNumber,'') AS FromGSTinNo,FromPanNo,SerName AS ServiceType,ServiceAcCode,CmpCode AS ServiceToCode,CmpName AS ServiceToName,
		D.CmpStateCode AS ToStateCode,ISNULL(@CompanyTinNumber,'')AS ToGSTinNo,ISNULL(@CompanyPANNumber,'')AS ToPanNo,SH.DocRefNo AS RetailerInvRef,SerYear AS ServiceYear,FromDate AS ServiceFromDate ,
		ToDate AS ServiceToDate ,CmpSchCode AS CompSchCode,ST.RefCode AS SchemeDesc,ST.AvlServiceAmt,ST.ServiceAmount,ST.GSTAmount,T.TaxCode+' %' AS ServTaxCode ,0 AS TaxFlag,STD.Taxid AS TaxId,STD.TaxPerc AS ServTaxPerc,
		ST.TotServiceAmount,ST.AppSerAmount AS ApprovedSerAmount,ST.AppGSTAmount AS ApprovedGSTAmount,SH.ReverseCharges AS ReverseCharges,'' [Group Name],2 AS [GroupType],@Pi_UsrId AS UserId 
		FROM ServiceInvoiceHd SH (NOLOCK) 
		INNER JOIN ServiceInvoiceDT ST (NOLOCK) ON SH.ServiceInvId =ST.ServiceInvId
		INNER JOIN ServiceInvoiceTaxDetails STD (NOLOCK) ON SH.ServiceInvId =STD.ServiceInvId AND ST.ServiceInvId =STD.ServiceInvId AND ST.Rowno=STD.RowNo
		INNER JOIN TaxConfiguration T (NOLOCK) ON STD.Taxid=T.TaxId
		INNER JOIN #DistInfo R ON R.DistributorId = SH.ServiceFromId
		LEFT OUTER JOIN #CompanyInfo D ON D.CmpId=SH.ServiceToId
		LEFT OUTER JOIN ServiceMaster SM (NOLOCK) ON SM.ServiceId=SH.ServiceId
		LEFT OUTER JOIN ClaimGroupMaster F ON F.ClmGrpId=SH.ClmGrpId
		LEFT OUTER JOIN SchemeMaster  S ON S.SchId = ST.Refid
		WHERE (SchId = (CASE @SchId WHEN 0 THEN SchId Else 0 END) OR
		SchId in (SELECT iCountid from Fn_ReturnRptFilters(@Pi_RptId,8,@Pi_UsrId)))AND ServiceinvFor=2 )A	
		
		INSERT INTO #RptServiceInvoiceReport(ServiceProviderType,ServiceInvRefNo,ServiceInvDate,ServiceFromCode,ServiceFromName,FromStateCode,FromGSTinNo,
		FromPanNo,ServiceType,ServiceAcCode,ServiceToCode,ServiceToName,ToStateCode,ToGSTinNo,ToPanNo,RetailerInvRef,ServiceYear,ServiceFromDate,ServiceToDate,CompSchCode,SchemeDesc,
		AvlServiceAmt,ServiceAmount,GSTAmount,ServTaxCode,TaxFlag,TaxId,ServTaxPerc,TotServiceAmount,ApprovedSerAmount,ApprovedGSTAmount,ReverseCharges,[Group Name],[GroupType],UsrId)	
		SELECT ServiceProviderType,ServiceInvRefNo,ServiceInvDate,ServiceFromCode,ServiceFromName,FromStateCode,FromGSTinNo,FromPanNo,ServiceType,ServiceAcCode,
		ServiceToCode,ServiceToName,ToStateCode,ToGSTinNo,ToPanNo,RetailerInvRef,ServiceYear,ServiceFromDate,ServiceToDate,CompSchCode,SchemeDesc,AvlServiceAmt,ServiceAmount,
		GSTAmount,ServTaxCode,TaxFlag,TaxId,ServTaxPerc,TotServiceAmount,ApprovedSerAmount,ApprovedGSTAmount,ReverseCharges,[Group Name],[GroupType],UserId FROM (	
		SELECT 'Distributor To Company'AS ServiceProviderType,ServiceInvRefNo,ServiceInvDate,DistributorCode AS ServiceFromCode,DistributorName AS ServiceFromName,
		R.StateCode AS FromStateCode,ISNULL(@DistTinNumber,'') AS FromGSTinNo,FromPanNo,SerName AS ServiceType,ServiceAcCode,CmpCode AS ServiceToCode,CmpName AS ServiceToName,
		D.CmpStateCode AS ToStateCode,ISNULL(@CompanyTinNumber,'')AS ToGSTinNo,ISNULL(@CompanyPANNumber,'')AS ToPanNo,SH.DocRefNo AS RetailerInvRef,SerYear AS ServiceYear,FromDate AS ServiceFromDate ,
		ToDate AS ServiceToDate ,CmpSchCode AS CompSchCode,ST.RefCode AS SchemeDesc,ST.AvlServiceAmt,ST.ServiceAmount,ST.GSTAmount,T.TaxCode+'Value' AS ServTaxCode ,1 AS TaxFlag,STD.Taxid AS TaxId,STD.TaxAmount AS ServTaxPerc,
		ST.TotServiceAmount,ST.AppSerAmount AS ApprovedSerAmount,ST.AppGSTAmount AS ApprovedGSTAmount,SH.ReverseCharges AS ReverseCharges,'' [Group Name],2 AS [GroupType],@Pi_UsrId AS UserId 
		FROM ServiceInvoiceHd SH (NOLOCK) 
		INNER JOIN ServiceInvoiceDT ST (NOLOCK) ON SH.ServiceInvId =ST.ServiceInvId
		INNER JOIN ServiceInvoiceTaxDetails STD (NOLOCK) ON SH.ServiceInvId =STD.ServiceInvId AND ST.ServiceInvId =STD.ServiceInvId AND ST.Rowno=STD.RowNo
		INNER JOIN TaxConfiguration T (NOLOCK) ON STD.Taxid=T.TaxId
		INNER JOIN #DistInfo R ON R.DistributorId = SH.ServiceFromId
		LEFT OUTER JOIN #CompanyInfo D ON D.CmpId=SH.ServiceToId
		LEFT OUTER JOIN ServiceMaster SM (NOLOCK) ON SM.ServiceId=SH.ServiceId
		LEFT OUTER JOIN ClaimGroupMaster F ON F.ClmGrpId=SH.ClmGrpId
		LEFT OUTER JOIN SchemeMaster  S ON S.SchId = ST.Refid
		WHERE (SchId = (CASE @SchId WHEN 0 THEN SchId Else 0 END) OR
		SchId in (SELECT iCountid from Fn_ReturnRptFilters(@Pi_RptId,8,@Pi_UsrId)))AND ServiceinvFor=2 )A		
	END	
		
	    INSERT INTO #RptServiceInvoiceReport(ServiceProviderType,ServiceInvRefNo,ServiceInvDate,ServiceFromCode,ServiceFromName,FromStateCode,FromGSTinNo,
		FromPanNo,ServiceType,ServiceAcCode,ServiceToCode,ServiceToName,ToStateCode,ToGSTinNo,ToPanNo,RetailerInvRef,ServiceYear,ServiceFromDate,ServiceToDate,CompSchCode,SchemeDesc,
		AvlServiceAmt,ServiceAmount,GSTAmount,ServTaxCode,TaxFlag,TaxId,ServTaxPerc,TotServiceAmount,ApprovedSerAmount,ApprovedGSTAmount,ReverseCharges,[Group Name],[GroupType],UsrId)	
	    SELECT '' ServiceProviderType,''ServiceInvRefNo,''ServiceInvDate,''ServiceFromCode,''ServiceFromName,''FromStateCode,''FromGSTinNo,
		''FromPanNo,''ServiceType,''ServiceAcCode,''ServiceToCode,''ServiceToName,''ToStateCode,''ToGSTinNo,''ToPanNo,''RetailerInvRef,''ServiceYear,''ServiceFromDate,''ServiceToDate,''CompSchCode,''SchemeDesc,
		SUM(AvlServiceAmt) AS  AvlServiceAmt,SUM(ServiceAmount) AS ServiceAmount,SUM(GSTAmount) AS GSTAmount,ServTaxCode,1 AS TaxFlag,0 AS TaxId,SUM(ServTaxPerc),SUM(TotServiceAmount) AS TotServiceAmount,
		SUM(ApprovedSerAmount) AS ApprovedSerAmount,SUM(ApprovedGSTAmount) AS ApprovedGSTAmount,0 AS ReverseCharges,'ZZZZZZ' AS [Group Name],3 AS [GroupType],UsrId
		FROM #RptServiceInvoiceReport WHERE TaxFlag=1 GROUP BY ServTaxCode,UsrId
		
		IF NOT EXISTS(SELECT 'X' FROM #RptServiceInvoiceReport)
		BEGIN
			DELETE FROM RptDataCount WHERE RptId = @Pi_RptId AND UserId = @Pi_UsrId
			INSERT INTO RptDataCount (RptId,RecCount,ErrNo,UserId)
			SELECT @Pi_RptId,Count(*) as RecCount,@ErrNo,@Pi_UsrId FROM RptServiceInvoiceReport
			WHERE UsrId=@Pi_UsrId
			SELECT * FROM RptServiceInvoiceReport WHERE UsrId=@Pi_UsrId
			RETURN
		END  		
	
				
		DECLARE @ColSelect AS Varchar(MAX)
		DECLARE @ColSelectDataType AS Varchar(5000)
		DECLARE @TableCol AS Varchar(2000)
		DECLARE @Columns1 AS Varchar(7000)
		DECLARE @OrderBy AS VARCHAR(2000)
		DECLARE @PCSelect AS VARCHAR(3000)
		SET @PCSelect=''
		SET @ColSelect=''
		SET @ColSelectDataType=''
		SET @TableCol=''
		SET @Columns1=''
		SET @CreateTable=''
		SET @OrderBy=''
		
		CREATE TABLE #DynamicCol
		(
			Slno INT IDENTITY(1,1),
			Taxperc	Varchar(50),
			TaxId INT
		)
		INSERT INTO #DynamicCol(Taxperc,TaxId)
		SELECT DISTINCT ServTaxCode,TaxId FROM #RptServiceInvoiceReport WHERE TaxFlag IN(0,1) and GroupType=2
		ORDER BY TaxId	

		SELECT @ColSelect=@ColSelect+'ISNULL('+QuoteName(Taxperc)+',0) as '+QuoteName(Taxperc)+',' FROM #DynamicCol ORDER BY Slno	

		SELECT @PCSelect=@PCSelect+Quotename(Taxperc)+',' FROM #DynamicCol ORDER BY Slno

		SET @PCSelect=LEFT(@PCSelect,LEN(@PCSelect)-1)	

		SELECT @ColSelectDataType=@ColSelectDataType+QuoteName(Taxperc)+' Numeric(36,2),' FROM #DynamicCol ORDER BY Slno		
	
		SET @ColSelect='SELECT ServiceProviderType,ServiceInvRefNo,ServiceInvDate,ServiceFromCode,ServiceFromName,FromStateCode,FromGSTinNo,FromPanNo,ServiceType,ServiceAcCode,'+
        'ServiceToCode,ServiceToName,ToStateCode,ToGSTinNo,ToPanNo,RetailerInvRef,ServiceYear,ServiceFromDate,ServiceToDate,CompSchCode,SchemeDesc,AvlServiceAmt,ServiceAmount,'+
        'GSTAmount,'+@ColSelect+'TotServiceAmount,ApprovedSerAmount,ApprovedGSTAmount,ReverseCharges,[Group Name],[GroupType],UsrId'

		SET @TableCol= 'Slno BIGINT IDENTITY(1,1), ServiceProviderType [nvarchar](100) NULL, ServiceInvRefNo     [nvarchar](100) NULL, ServiceInvDate  Datetime, ServiceFromCode [nvarchar](50)NULL,'+
       'ServiceFromName  [nvarchar](100)NULL, FromStateCode [nvarchar](50)NULL, FromGSTinNo  [nvarchar](100)NULL,FromPanNo  [nvarchar](20)NULL,ServiceType [varchar](100)NULL,ServiceAcCode [nvarchar](50)NULL,'+     
       'ServiceToCode [nvarchar](50)NULL, ServiceToName  [nvarchar](100)NULL,ToStateCode [nvarchar](50)NULL,ToGSTinNo [nvarchar](100)NULL,ToPanNo [nvarchar](20)NULL,RetailerInvRef [nvarchar](100)NULL,'+   
       'ServiceYear  INT,ServiceFromDate datetime,ServiceToDate	 datetime,CompSchCode [varchar](100)NULL,SchemeDesc [varchar](100)NULL,AvlServiceAmt NUMERIC(18,6),ServiceAmount NUMERIC(18,6),GSTAmount NUMERIC(18,6),'
        
        SET @Columns1='SELECT ServiceProviderType,ServiceInvRefNo,ServiceInvDate,ServiceFromCode,ServiceFromName,FromStateCode,FromGSTinNo,FromPanNo,ServiceType,ServiceAcCode,'+
        'ServiceToCode,ServiceToName,ToStateCode,ToGSTinNo,ToPanNo,RetailerInvRef,ServiceYear,ServiceFromDate,ServiceToDate,CompSchCode,SchemeDesc,AvlServiceAmt,ServiceAmount,'+
        'GSTAmount,TotServiceAmount,ApprovedSerAmount,ApprovedGSTAmount,ReverseCharges,ServTaxPerc,ServTaxCode,[Group Name],[GroupType],UsrId FROM #RptServiceInvoiceReport'
         
		SET @OrderBy=' ORDER BY [Group Name],[GroupType],ServiceInvRefNo,SchemeDesc'

		SET @CreateTable=' IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME=''RptServiceInvoiceReport'' and XTYPE=''U'')'+
		' DROP TABLE RptServiceInvoiceReport'+
		' CREATE TABLE RptServiceInvoiceReport ('+@TableCol+@ColSelectDataType+'TotServiceAmount NUMERIC(18,6),ApprovedSerAmount  NUMERIC(18,6),ApprovedGSTAmount  NUMERIC(18,6),ReverseCharges NUMERIC(18,6),'+
        '[Group Name] Varchar(200),[GroupType] TINYINT,[UsrId] [int])'

		--PRINT @CreateTable
	    EXEC(@CreateTable)


		SET @SQL=' INSERT INTO RptServiceInvoiceReport '+ @ColSelect+ ' FROM'+
		'('+@Columns1+
		') PS'+
		' PIVOT'+
		'('+
			' SUM(ServTaxPerc) FOR ServTaxCode IN('+@PCSelect+')'+
		')PVTTax '+ @OrderBy

		PRINT @SQL
    	EXEC(@SQL)	
    	
 
			DELETE FROM Report_Template_GST WHERE ReportId=1 and RptId=@Pi_RptId
			INSERT INTO Report_Template_GST(ReportId,RptId,RptName ,ColId,FieldName,FieldSize,FieldSelection,GroupField,
			FieldType,Alignment,HeaderCaption,HeaderCaption1,HeaderCaption2,
			RoundOff,CreatedDate)
			SELECT 1,406,'ServiceInvoiceReport',1,'ServiceProviderType',20,1,0,1,1,'Service','Provider','Type',0,GETDATE()
			UNION ALL		
			SELECT 1,406,'ServiceInvoiceReport',2,'ServiceInvRefNo',50,1,0,1,1,'ServiceInv','RefNo','',0,GETDATE()
			UNION ALL
			SELECT 1,406,'ServiceInvoiceReport',3,'ServiceInvDate',75,1,0,1,4,'ServiceInv','Date','',0,GETDATE()
			UNION ALL
			SELECT 1,406,'ServiceInvoiceReport',4,'ServiceFromCode',50,1,0,1,1,'Service','From','Code',0,GETDATE()			
			UNION ALL		
			SELECT 1,406,'ServiceInvoiceReport',5,'ServiceFromName',75,1,0,1,1,'Service','From','Name',0,GETDATE()
			UNION ALL	
			SELECT 1,406,'ServiceInvoiceReport',6,'FromStateCode',75,1,0,1,1,'From','State','Code',0,GETDATE()
			UNION ALL		
			SELECT 1,406,'ServiceInvoiceReport',7,'FromGSTinNo',75,1,0,1,1,'From','GSTinNo','',0,GETDATE()
			UNION ALL
			SELECT 1,406,'ServiceInvoiceReport',8,'FromPanNo',75,1,0,1,1,'From','PanNo','',0,GETDATE()
			UNION ALL
			SELECT 1,406,'ServiceInvoiceReport',9,'ServiceType',75,1,0,1,1,'ServiceType','','',0,GETDATE()
			UNION ALL
			SELECT 1,406,'ServiceInvoiceReport',10,'ServiceAcCode',75,1,0,1,1,'ServiceAcCode','','',0,GETDATE()
			UNION ALL
			SELECT 1,406,'ServiceInvoiceReport',11,'ServiceToCode',75,1,0,1,1,'ServiceToCode','','',0,GETDATE()
			UNION ALL
			SELECT 1,406,'ServiceInvoiceReport',12,'ServiceToName',75,1,0,1,1,'ServiceToName','','',0,GETDATE()
			UNION ALL			
			SELECT 1,406,'ServiceInvoiceReport',13,'ToStateCode',75,1,0,1,1,'ToStateCode','','',0,GETDATE()
			UNION ALL
			SELECT 1,406,'ServiceInvoiceReport',14,'ToGSTinNo',75,1,0,1,1,'ToGSTinNo','','',0,GETDATE()
			UNION ALL
			SELECT 1,406,'ServiceInvoiceReport',15,'ToPanNo',20,1,0,2,3,'ToPanNo','','',2,GETDATE()
			UNION ALL
			SELECT 1,406,'ServiceInvoiceReport',16,'RetailerInvRef',75,1,0,1,1,'RetailerInvRef','','',0,GETDATE()
			UNION ALL
			SELECT 1,406,'ServiceInvoiceReport',17,'ServiceYear',75,1,0,1,1,'ServiceYear','','',0,GETDATE()
			UNION ALL
			SELECT 1,406,'ServiceInvoiceReport',18,'ServiceFromDate',75,1,0,1,4,'Service','From','Date',0,GETDATE()
			UNION ALL
			SELECT 1,406,'ServiceInvoiceReport',19,'ServiceToDate',75,1,0,1,4,'Service','To','Date',0,GETDATE()
			UNION ALL
			SELECT 1,406,'ServiceInvoiceReport',20,'CompSchCode',75,1,0,1,1,'CompSchCode','','',0,GETDATE()
			UNION ALL
			SELECT 1,406,'ServiceInvoiceReport',21,'SchemeDesc',75,1,0,1,1,'SchemeDesc','','',0,GETDATE()
			UNION ALL
			SELECT 1,406,'ServiceInvoiceReport',22,'AvlServiceAmt',20,1,0,2,2,'Available','Service','Amount',0,GETDATE()
			UNION ALL
			SELECT 1,406,'ServiceInvoiceReport',23,'ServiceAmount',20,1,0,2,2,'Service','Amount','',0,GETDATE()
			UNION ALL
			SELECT 1,406,'ServiceInvoiceReport',24,'GSTAmount',20,1,0,2,2,'GST','Amount','',0,GETDATE()			
		

			SET @Str=''
			SELECT @MaxId=MAX(ColId)+1,@ReportId=ReportId FROM  Report_Template_GST (NOLOCK) WHERE RptId=@Pi_RptId
			GROUP BY ReportId

			SELECT @start = 1, @end = CHARINDEX(',', @PCSelect) 
			WHILE @start < LEN(@PCSelect) + 1 BEGIN 
				IF @end = 0  
				SET @end = LEN(@PCSelect) + 1
				SET @Str=SUBSTRING(@PCSelect, @start, @end - @start)
				INSERT INTO Report_Template_GST(ReportId,RptId,RptName,ColId,FieldName,FieldSize,
				FieldSelection,GroupField,FieldType,Alignment,HeaderCaption,HeaderCaption1,HeaderCaption2,RoundOff,
				CreatedDate)  
				SELECT TOP 1 ReportId,RptId,RptName,@MaxId,SUBSTRING(@PCSelect, @start, @end - @start),
				18,1,0,2,3,SUBSTRING(@PCSelect, @start, @end - @start)				
				,'','',2,Getdate()
				FROM Report_Template_GST WHERE RptId=@Pi_RptId
				
				SET @start = @end + 1 
				SET @end = CHARINDEX(',', @PCSelect, @start)
				SET @MaxId=@MaxId+1
			END 
			
			INSERT INTO Report_Template_GST(ReportId,RptId,RptName,ColId,FieldName,FieldSize,
			FieldSelection,GroupField,FieldType,Alignment,HeaderCaption,HeaderCaption1,HeaderCaption2,RoundOff,
			CreatedDate)  
			SELECT TOP 1 ReportId,RptId,RptName,@MaxId+1,'TotServiceAmount',
			18,1,0,2,3,'Total','Service','Amount',2,Getdate()
			FROM Report_Template_GST WHERE RptId=@Pi_RptId
			
			INSERT INTO Report_Template_GST(ReportId,RptId,RptName,ColId,FieldName,FieldSize,
			FieldSelection,GroupField,FieldType,Alignment,HeaderCaption,HeaderCaption1,HeaderCaption2,RoundOff,
			CreatedDate)  
			SELECT TOP 1 ReportId,RptId,RptName,@MaxId+2,'ApprovedSerAmount',
			18,1,0,2,3,'Approved','Service','Amount',2,Getdate()
			FROM Report_Template_GST WHERE RptId=@Pi_RptId	
			
			INSERT INTO Report_Template_GST(ReportId,RptId,RptName,ColId,FieldName,FieldSize,
			FieldSelection,GroupField,FieldType,Alignment,HeaderCaption,HeaderCaption1,HeaderCaption2,RoundOff,
			CreatedDate)  
			SELECT TOP 1 ReportId,RptId,RptName,@MaxId+3,'ApprovedGSTAmount',
			18,1,0,2,3,'Approved','GST','Amount',2,Getdate()
			FROM Report_Template_GST WHERE RptId=@Pi_RptId	
			
			INSERT INTO Report_Template_GST(ReportId,RptId,RptName,ColId,FieldName,FieldSize,
			FieldSelection,GroupField,FieldType,Alignment,HeaderCaption,HeaderCaption1,HeaderCaption2,RoundOff,
			CreatedDate)  
			SELECT TOP 1 ReportId,RptId,RptName,@MaxId+4,'ReverseCharges',
			18,1,0,2,3,'Reverse','Charges','',2,Getdate()
			FROM Report_Template_GST WHERE RptId=@Pi_RptId		
			
			UPDATE Report_template_GST SET FieldName=REPLACE(REPLACE(FieldName,']',''),'[','')
			WHERE RptId=@Pi_RptId 

			DELETE FROM RptDataCount WHERE RptId = @Pi_RptId AND UserId = @Pi_UsrId
			INSERT INTO RptDataCount (RptId,RecCount,ErrNo,UserId)
			SELECT @Pi_RptId,Count(*) as RecCount,@ErrNo,@Pi_UsrId FROM RptServiceInvoiceReport
			WHERE UsrId=@Pi_UsrId
			SELECT * FROM RptServiceInvoiceReport WHERE UsrId=@Pi_UsrId

END
GO
IF NOT EXISTS (SELECT * FROM StkMgntConfig WHERE Moduleid='SALESRTN15')
BEGIN
INSERT INTO StkMgntConfig(Moduleid,StockTypeid,Value,Availability,Lastmodby,LastModDate,AuthId,AuthDate)
SELECT 'SALESRTN15',1,1,1,1,getdate(),1,getdate()
UNION
SELECT 'SALESRTN15',2,1,1,1,getdate(),1,getdate()
UNION
SELECT 'SALESRTN15',3,2,1,1,getdate(),1,getdate()
END
GO
IF NOT EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='U' AND NAME='FileDownloadUrlPath')
BEGIN
CREATE TABLE [FileDownloadUrlPath](
	DistCode Varchar(50),
	HotFixId	BIGINT,
	[Attachment] [varchar](500) NULL,
	[FileSize] [numeric](36, 4) NULL,
	[LocalFilePath] [varchar](1000) NULL,
	File_Names Varchar(200),
	FileReName Varchar(200),
	FileRenameExist TinyInt,
	[DownloadFlag] [varchar](1) NULL,
	[PDAUploadFlag] [nvarchar](1) NULL
)
END
GO
IF NOT EXISTS(SELECT 'X' FROM SYSOBJECTS X INNER JOIN SYSCOLUMNS P ON X.id=P.id WHERE X.XTYPE='U' and X.NAME='Cs2Cn_Prk_Claim_SchemeDetails' and  P.Name='Tax1Per')
BEGIN
	ALTER TABLE Cs2Cn_Prk_Claim_SchemeDetails ADD Tax1Per Numeric(10,2)
END
GO
IF NOT EXISTS(SELECT 'X' FROM SYSOBJECTS X INNER JOIN SYSCOLUMNS P ON X.id=P.id WHERE X.XTYPE='U' and X.NAME='Cs2Cn_Prk_Claim_SchemeDetails'  and  P.Name='Tax2Per')
BEGIN
	ALTER TABLE Cs2Cn_Prk_Claim_SchemeDetails ADD Tax2Per Numeric(10,2)
END
GO
IF NOT EXISTS(SELECT 'X' FROM SYSOBJECTS X INNER JOIN SYSCOLUMNS P ON X.id=P.id WHERE X.XTYPE='U' and X.NAME='Cs2Cn_Prk_Claim_SchemeDetails'  and  P.Name='SACCode')
BEGIN
	ALTER TABLE Cs2Cn_Prk_Claim_SchemeDetails ADD SACCode Varchar(50)
END
GO
IF NOT EXISTS(SELECT 'X' FROM SYSOBJECTS X INNER JOIN SYSCOLUMNS P ON X.id=P.id WHERE X.XTYPE='U' and X.NAME='Cs2Cn_Prk_Claim_SchemeDetails'  and  P.Name='ReferenceNo')
BEGIN
	ALTER TABLE Cs2Cn_Prk_Claim_SchemeDetails ADD ReferenceNo Varchar(50)
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='P' and name='Proc_Cs2Cn_Claim_RateDiffernece')
DROP PROCEDURE Proc_Cs2Cn_Claim_RateDiffernece
GO
--EXEC Proc_Cs2Cn_Claim_RateDiffernece
--SELECT * FROM Cs2Cn_Prk_ClaimAll
--SELECT * FROM CLAIMSHEETHD
CREATE PROCEDURE [Proc_Cs2Cn_Claim_RateDiffernece]
AS
/*********************************
* PROCEDURE: Proc_Cs2Cn_Claim_RateDiffernece
* PURPOSE: Extract Rate Difference Claim Details from CoreStocky to Console
* NOTES:
* CREATED: MarySubashini.S  05-08-2008
* MODIFIED
* DATE         AUTHOR        DESCRIPTION
------------------------------------------------
* 17-Dec-2009  Kalaichezhian To display Product wise ratediffClaim Display
************************************************/
SET NOCOUNT ON
BEGIN
	DECLARE @CmpID 		AS INTEGER
	DECLARE @DistCode	As NVARCHAR(50)
	DECLARE @ChkDate	AS DATETIME
	DECLARE @TransDate	AS DATETIME

	DELETE FROM Cs2Cn_Prk_ClaimAll WHERE UploadFlag = 'Y' AND ClaimType='Rate Difference Claim'

	SELECT @CmpID = CmpId FROM Company WHERE DefaultCompany = 1	
	SELECT @DistCode = DistributorCode FROM Distributor
	SELECT @ChkDate = NextUpDate FROM DayEndProcess	WHERE ProcId = 12
	SELECT @TransDate=DATEADD(D,-1,GETDATE())

	INSERT INTO Cs2Cn_Prk_ClaimAll
	(
		DistCode		,
		CmpName			,
		ClaimType		,
		ClaimMonth		,
		ClaimYear		,
		ClaimRefNo		,
		ClaimDate		,
		ClaimFromDate		,
		ClaimToDate		,
		DistributorClaim	,
		DistributorRecommended	,
		ClaimnormPerc		,
		SuggestedClaim		,
		TotalClaimAmt		,
		Remarks			,
		Description		,
		Amount1			,
		ProductCode		,
		Batch			,
		Quantity1		,
		Quantity2		,
		Amount2			,
		Amount3			,
		TotalAmount		,
		Remark2			,
		UploadFlag
	)
	
	SELECT @DistCode,CM.CmpName,'Rate Difference Claim',DATENAME(MONTH,CH.ClmDate),YEAR(CH.ClmDate),
	RDC.RefNo,CH.ClmDate,CH.FromDate,CH.ToDate,RDC.TotSpentAmt,RDC.RecSpentAmt,CD.ClmPercentage,CD.ClmAmount,
	--CD.RecommendedAmount,SI.Remarks,SI.SalInvNo,0,P.PrdCCode,PB.PrdBatCode,SIP.BaseQty,0,SIP.PrdUom1EditedSelRate,0,RDC.TotSpentAmt,'N'
	CD.RecommendedAmount,SI.Remarks,SI.SalInvNo,ISNULL(CD.GSTTax,0),P.PrdCCode,PB.PrdBatCode,SIP.BaseQty,0,SIP.PrdUom1EditedSelRate,0,SIP.PrdRateDiffAmount*CD.RecommendedAmount/ABS(CD.ClmAmount),
	CH.ClmCode,'N'
	FROM SalesInvoice SI WITH (NOLOCK)
	INNER JOIN SalesInvoiceProduct SIP WITH (NOLOCK) ON SIP.SalId=SI.SalId
	INNER JOIN RateDifferenceClaim RDC WITH (NOLOCK) ON RDC.RateDiffClaimId=SIP.RateDiffClaimId
	INNER JOIN Company CM WITH (NOLOCK)  ON CM.CmpId=RDC.CmpId
	INNER JOIN ClaimSheetDetail CD WITH (NOLOCK)  ON CD.RefCode=RDC.RefNo
	INNER JOIN ClaimSheetHd CH WITH (NOLOCK)  ON CH.ClmId=CD.ClmId AND CH.ClmGrpId=12
	INNER JOIN Product P ON P.PrdId = SIP.PrdId
	INNER JOIN ProductBatch PB ON PB.PrdId = P.PrdId AND PB.PrdBatId=SIP.PrdBatId
	WHERE RDC.Status=1 AND CH.Upload='N' AND CD.SelectMode=1
	ORDER BY RDC.RefNo

	SELECT SalInvNo,CmpBatCode,PrdCCode,Max(Tax1) as Tax1 ,Max(Tax2) as Tax2
	INTO #TaxComponent
	FROM(
	SELECT DISTINCT SalInvNo,PrdCCode,CmpBatCode,T.TaxId,Max(Taxperc) as Tax1, 0 as Tax2
	FROM SalesInvoice SI   WITH (NOLOCK)
	INNER JOIN SalesInvoiceProduct SP  WITH (NOLOCK) ON SP.SalId=SI.SalId
	INNER JOIN RateDifferenceClaim RDC WITH (NOLOCK) ON RDC.RateDiffClaimId=SP.RateDiffClaimId
	INNER JOIN SalesInvoiceProductTax SS  WITH (NOLOCK) ON SI.SalId=SS.SalId and SI.SalId=SP.SalId and SP.SlNo=SS.PrdSlNo
	INNER JOIN ClaimSheetDetail CD WITH (NOLOCK)  ON CD.RefCode=RDC.RefNo
	INNER JOIN ClaimSheetHd CH WITH (NOLOCK)  ON CH.ClmId=CD.ClmId AND CH.ClmGrpId=12
	INNER JOIN TaxConfiguration T ON T.Taxid=SS.TaxId
	INNER JOIN Product P ON P.PrdId=SP.Prdid
	INNER JOIN ProductBatch PB ON P.PrdId=SP.Prdid and PB.Prdid=P.PrdId and PB.PrdBatId=SP.PrdBatId
	WHERE TaxableAmount>0 and SI.VatGST='GST'
	and TaxCode IN('OutputVAT','VAT','CST','OutputCGST','OutputIGST')
	and RDC.Status=1 
	AND CH.Upload='N' AND CD.SelectMode=1
	GROUP BY SalInvNo,PrdCCode,CmpBatCode,T.TaxId
	UNION ALL
	SELECT DISTINCT SalInvNo,PrdCCode,CmpBatCode,T.TaxId, 0 as Tax1, Max(Taxperc) as Tax2
	FROM SalesInvoice SI   WITH (NOLOCK)
	INNER JOIN SalesInvoiceProduct SP  WITH (NOLOCK) ON SP.SalId=SI.SalId
	INNER JOIN RateDifferenceClaim RDC WITH (NOLOCK) ON RDC.RateDiffClaimId=SP.RateDiffClaimId
	INNER JOIN SalesInvoiceProductTax SS  WITH (NOLOCK) ON SI.SalId=SS.SalId and SI.SalId=SP.SalId and SP.SlNo=SS.PrdSlNo
	INNER JOIN ClaimSheetDetail CD WITH (NOLOCK)  ON CD.RefCode=RDC.RefNo
	INNER JOIN ClaimSheetHd CH WITH (NOLOCK)  ON CH.ClmId=CD.ClmId AND CH.ClmGrpId=12
	INNER JOIN TaxConfiguration T ON T.Taxid=SS.TaxId
	INNER JOIN Product P ON P.PrdId=SP.Prdid
	INNER JOIN ProductBatch PB ON P.PrdId=SP.Prdid and PB.Prdid=P.PrdId and PB.PrdBatId=SP.PrdBatId
	WHERE TaxableAmount>0 and SI.VatGST='GST'
	and TaxCode IN('AddVAT','OutputADDLVAT','OutputSurcharge','OutputCess','OutputSGST','OutputUTGST')
	and RDC.Status=1 
	AND CH.Upload='N' AND CD.SelectMode=1
	GROUP BY SalInvNo,PrdCCode,CmpBatCode,T.TaxId
	) X GROUP BY SalInvNo,PrdCCode,CmpBatCode
	
	UPDATE  B SET B.OID=Tax1,B.Discount=Tax2 
	FROM #TaxComponent A INNER JOIN Cs2Cn_Prk_ClaimAll B ON A.SalInvNo=B.Description and A.PrdCCode=B.ProductCode
	AND B.Batch=A.CmpBatCode
	
		
	UPDATE D SET D.Remark3=A.SerACCode  FROM ServiceMaster A 
	INNER JOIN ClaimGroupMaster B (NOLOCK) ON A.ServiceId=B.ServiceId
	INNER JOIN ClaimSheetHd C (NOLOCK) ON C.ClmGrpId=B.ClmGrpId
	INNER JOIN Cs2Cn_Prk_ClaimAll D (NOLOCK) ON D.Remark2=C.ClmCode
	
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='P' and name='Proc_Cs2Cn_Claim_Scheme')
DROP PROCEDURE Proc_Cs2Cn_Claim_Scheme
GO
CREATE PROCEDURE [Proc_Cs2Cn_Claim_Scheme]
AS
SET NOCOUNT ON
/*********************************
* PROCEDURE	: Proc_Cs2Cn_Claim_Scheme
* PURPOSE		: Extract Scheme Claim Details from CoreStocky to Console
* NOTES:
* CREATED		: Mahalakshmi.A  19-08-2008
* MODIFIED
* DATE			AUTHOR				DESCRIPTION
------------------------------------------------
* 13/11/2009 Nandakumar R.G    Added WDS Claim
*********************************/
BEGIN

	DECLARE @CmpID 		AS INTEGER
	DECLARE @DistCode	As NVARCHAR(50)
	DECLARE @ChkDate	AS DATETIME
	DECLARE @TransDate	AS DATETIME

	DELETE FROM Cs2Cn_Prk_ClaimAll WHERE UploadFlag = 'Y' AND ClaimType IN('Scheme Claim','Window Display Claim')

	SELECT @CmpID = CmpId FROM Company WHERE DefaultCompany = 1	
	SELECT @DistCode = DistributorCode FROM Distributor
	SELECT @ChkDate = NextUpDate FROM DayEndProcess	WHERE ProcId = 12
	SELECT @TransDate=DATEADD(D,-1,GETDATE())
	INSERT INTO Cs2Cn_Prk_ClaimAll
	(
		DistCode,CmpName,ClaimType,ClaimMonth,ClaimYear,ClaimRefNo,ClaimDate,ClaimFromDate,ClaimToDate,DistributorClaim,
		DistributorRecommended,ClaimnormPerc,SuggestedClaim,TotalClaimAmt,Remarks,Description,Amount1,ProductCode,Batch,
		Quantity1,Quantity2,Amount2,Amount3,TotalAmount,SchemeCode,BillNo,BillDate,RetailerCode,RetailerName,
		TotalSalesInValue,PromotedSalesinValue,OID,Discount,FromStockType,ToStockType,Remark2,Remark3,PrdCode1,
		PrdCode2,PrdName1,PrdName2,Date2,UploadFlag		
	)
--	SELECT 	@DistCode,CM.CmpName,'Scheme Claim',DATENAME(MONTH,CH.ClmDate),YEAR(CH.ClmDate),CH.ClmCode,CH.ClmDate,CH.FromDate,CH.ToDate,
--	(SELECT  dbo.Fn_ReturnBudgetUtilized (SM.SchId))AS DistAmount,CD.RecommendedAmount,CD.ClmPercentage,CD.ClmAmount,CD.RecommendedAmount AS TotAmt,
--	'',SM.SchDsc,(CASE SM.SchType WHEN 2 THEN SL.PurQty ELSE 0 END) AS SchemeOnAmt,ISNULL(P.PrdDCode,'') AS PrdDCode,
--	ISNULL(P.PrdName,'') AS PrdName,(CASE SM.SchType WHEN 1 THEN CAST(SL.PurQty AS INT) ELSE 0 END) AS SchemeOnQty,
--	ISNULL(SF.FreeQty,0) As SchemeQty,CD.FreePrdVal+GiftPrdVal as FGQtyValue,Cd.Discount AS SchemeAmt,
--	(CD.FreePrdVal+GiftPrdVal+CD.Discount)AS Amount,SM.CmpSchCode,'',GETDATE(),'','',0,0,0,0,'','','','','','','','',GETDATE(),'N'
--	FROM SchemeMaster SM
--	INNER JOIN SchemeSlabs SL ON SM.SchId=SL.SchId
--	INNER JOIN ClaimSheetDetail CD ON CD.RefCode=SM.SchCode
--	INNER JOIN ClaimSheetHd CH ON CD.ClmId=CH.ClmId AND CH.ClmGrpId>16
--	INNER JOIN Company CM ON CM.CmpId=CH.CmpId	
--	LEFT OUTER JOIN SchemeSlabFrePrds SF ON SM.SchId=SF.SchId
--	LEFT OUTER JOIN Product P ON SF.PrdId=P.PrdId
--	WHERE CH.Confirm=1 AND CH.Upload='N'

	SELECT @DistCode,CM.CmpName,'Scheme Claim',DATENAME(MONTH,CH.ClmDate),YEAR(CH.ClmDate),CD.RefCode,CH.ClmDate,CH.FromDate,CH.ToDate,
	(SELECT  dbo.Fn_ReturnBudgetUtilized (SM.SchId))AS DistAmount,CSCA.RecommendedAmount,CD.ClmPercentage,CD.ClmAmount,CSCA.RecommendedAmount,
	--CD.RecommendedAmount AS TotAmt,
	'',SM.SchDsc,ISNULL(CD.GSTTax,0),--Added by Mohanakrishna A.B,	
	'',
	'' AS PrdName,0,0,
	ROUND((CD.FreePrdVal+GiftPrdVal)/CD.ClmAmount*CD.RecommendedAmount,2) AS FGQtyValue,
	ROUND(Cd.Discount/CD.ClmAmount*CD.RecommendedAmount,2) AS SchemeAmt,
	ROUND((CD.FreePrdVal+CD.GiftPrdVal+CD.Discount)/CD.ClmAmount*CD.RecommendedAmount,2) AS Amount,SM.CmpSchCode,'',GETDATE(),
	'','',0,0,0,0,'','',CH.ClmCode,'','','','','',GETDATE(),'N'
	FROM SchemeMaster SM	
	INNER JOIN ClaimSheetDetail CD ON CD.RefCode=SM.SchCode
	INNER JOIN 
	(  
	--  SELECT CD.ClmId,SUM(RecommendedAmount) AS RecommendedAmount FROM ClaimSheetDetail CD   
	SELECT Distinct CD.RefCode,SUM(RecommendedAmount) AS RecommendedAmount FROM ClaimSheetDetail CD
	INNER JOIN ClaimSheetHd CH ON CD.ClmId=CH.ClmId AND CH.ClmGrpId>16 AND CH.Confirm=1 AND CH.Upload='N'  
	GROUP BY CD.RefCode
	) AS CSCA ON CSCA.RefCode= CD.RefCode
	INNER JOIN ClaimSheetHd CH ON CD.ClmId=CH.ClmId AND CH.ClmGrpId>16
	INNER JOIN Company CM ON CM.CmpId=CH.CmpId --AND SM.SchType<>4 
	WHERE CH.Confirm=1 AND CH.Upload='N' AND CD.SelectMode=1

--	UNION	
--
--	--SELECT 	@DistCode,CM.CmpName,'Window Display Claim',DATENAME(MONTH,CH.ClmDate),YEAR(CH.ClmDate),CH.ClmCode,CH.ClmDate,
--	SELECT 	@DistCode,CM.CmpName,'Scheme Claim',DATENAME(MONTH,CH.ClmDate),YEAR(CH.ClmDate),CD.RefCode,CH.ClmDate,	
--	CH.FromDate,CH.ToDate,
--	(SELECT  dbo.Fn_ReturnBudgetUtilized (SM.SchId))AS DistAmount,CD.RecommendedAmount,CD.ClmPercentage,SUM(CD.ClmAmount),SUM(CD.RecommendedAmount) AS TotAmt,
--	'',SM.SchDsc,0 AS SchemeOnAmt,'WDS' AS PrdDCode,'Window Display Claim' AS PrdName,0 AS SchemeOnQty,
--	0 As SchemeQty,AdjAmt,SUM(Cd.Discount) AS SchemeAmt,
--	SUM(CD.Discount)AS Amount,SM.CmpSchCode,'',GETDATE(),R.RtrCode,R.RtrName,0,0,0,0,
--	'','',CH.ClmCode,'','','','','',GETDATE(),'N'
--	FROM SchemeMaster SM
--	INNER JOIN ClaimSheetDetail CD ON CD.RefCode=SM.SchCode
--	INNER JOIN ClaimSheetHd CH ON CD.ClmId=CH.ClmId AND CH.ClmGrpId>16
--	INNER JOIN Company CM ON CM.CmpId=CH.CmpId
--	INNER JOIN SalesInvoiceWindowDisplay SIW ON SIW.SchId=SM.SchId AND CH.ClmId=SIW.SchClmId
--	INNER JOIN SalesInvoice SI ON SI.SalId=SIW.SalId 	
--	INNER JOIN Retailer R ON SI.RtrId=R.RtrId 	
--	WHERE CH.Confirm=1 AND SM.SchType=4 AND CH.Upload='N' AND CD.SelectMode=1
--	GROUP BY CM.CmpName,CH.ClmDate,CH.ClmCode,SM.CmpSchCode,CH.ClmDate,CH.FromDate,CH.ToDate,
--	SM.SchId,CD.RecommendedAmount,CD.ClmPercentage,SM.SchDsc,AdjAmt,R.RtrCode,R.RtrName,CD.RefCode

	--->Added By Nanda on 13/10/2010 for Claim Details
	DELETE FROM Cs2Cn_Prk_Claim_SchemeDetails WHERE UploadFlag='Y'

	INSERT INTO Cs2Cn_Prk_Claim_SchemeDetails(DistCode,ClaimRefNo,CmpSchCode,SlabId,SalInvNo,PrdCCode,BilledQty,
	ClaimAmount,SchCode,SchDesc,ClaimDate,UploadedDate,UploadFlag,Tax1Per,Tax2Per,SACCode,ReferenceNo)
	SELECT DISTINCT @DistCode,CH.ClmCode,SM.CmpSchCode,SISL.SlabId,SI.SalInvNo,P.PrdCCode,SUM(SIP.BaseQty),SUM(SISL.FlatAmount+SISL.DiscountPerAmount),
	SM.SchCode,SM.SchDsc,CH.ClmDate,GETDATE(),'N',0,0,'',''
	FROM ClaimSheetHd CH,ClaimSheetDetail CD,SalesInvoiceSchemeLinewise SISL,SchemeMaster SM,
	SalesInvoice SI,Product P,SalesInvoiceProduct SIP
	WHERE CH.ClmId=CD.ClmId AND CH.Upload='N' AND CD.RefCode=SM.SchCode AND
	SISL.SchClmId=CD.ClmId AND SISL.SchId=SM.SchId AND SISL.SalId=Si.SalId AND SISl.PrdId=P.PrdId
	AND SISL.RowId =SIP.SlNo AND SISL.SalId=SIP.SalId AND SI.SalId = SIP.SalId 
	GROUP BY CH.ClmCode,CH.ClmDate,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SISL.SlabId,SI.SalInvNo,P.PrdCCode
	HAVING SUM(SISL.FlatAmount+SISL.DiscountPerAmount)>0

	UNION

	SELECT DISTINCT @DistCode,CH.ClmCode,SM.CmpSchCode,SISF.SlabId,SI.SalInvNo,'Free Product' AS PrdCCode,
	0 AS BaseQty,ROUND(SUM(SISF.FreeQty*PBD.PrdBatDetailValue),2),SM.SchCode,SM.SchDsc,CH.ClmDate,GETDATE(),'N',0,0,'',''
	FROM ClaimSheetHd CH,ClaimSheetDetail CD,SalesInvoiceSchemeDtFreePrd SISF,SchemeMaster SM,
	SalesInvoice SI,ProductBatchDetails PBD,BatchCreation BC
	WHERE CH.ClmId=CD.ClmId AND CH.Upload='N' AND CD.RefCode=SM.SchCode AND CD.SelectMode=1 AND
	SISF.SchClmId=CD.ClmId AND SISF.SchId=SM.SchId AND SISF.SalId=Si.SalId 
	AND SISF.FreePrdBatId =PBD.PrdBatId AND SISf.FreePriceId=PBD.PriceId AND PBD.SlNo=BC.SlNo AND BC.ClmRte=1 AND
	PBD.BatchSeqId=BC.BatchSeqId
	GROUP BY CH.ClmCode,CH.ClmDate,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SISF.SlabId,SI.SalInvNo
	
	UNION

	SELECT DISTINCT @DistCode,CH.ClmCode,SM.CmpSchCode,0 AS SlabId,SI.SalInvNo,'Window Display' AS PrdCCode,
	0 AS BaseQty,SUM(SIW.AdjAmt),SM.SchCode,SM.SchDsc,CH.ClmDate,GETDATE(),'N',0,0,'',''
	FROM ClaimSheetHd CH,ClaimSheetDetail CD,SalesInvoiceWindowDisplay SIW,SchemeMaster SM,
	SalesInvoice SI
	WHERE CH.ClmId=CD.ClmId AND CH.Upload='N' AND CD.RefCode=SM.SchCode AND CD.SelectMode=1 AND
	SIW.SchClmId=CD.ClmId AND SIW.SchId=SM.SchId AND SIW.SalId=Si.SalId 	
	GROUP BY CH.ClmCode,CH.ClmDate,SM.CmpSchCode,SM.SchCode,SM.SchDsc,SI.SalInvNo
	--->Till Here
	
	SELECT ClmCode,Schid,CmpSchCode,SlabId,SalInvNo,PrdCCode,Max(Tax1) as Tax1 ,Max(Tax2) as Tax2
	INTO #TaxComponent
	FROM(
		SELECT H.ClmCode,SM.Schid,CmpSchCode,SlabId,SalInvNo,PrdCCode,T.TaxId,Max(Taxperc) as Tax1, 0 as Tax2
		FROM SalesInvoice SI INNER JOIN SalesInvoiceSchemeLinewise S ON SI.SalId =S.Salid
		INNER JOIN SalesInvoiceProductTax SS ON S.SalId=SS.SalId and SS.PrdSlNo=S.RowId and SI.SalId=SS.SalId and SS.Salid=S.Salid
		INNER JOIN SalesInvoiceProduct SP ON SP.SlNo=SS.PrdSlNo and SP.SlNo=S.RowId and SP.SalId=SS.Salid and SP.SalId=S.SalId
		and SP.SalId=SI.Salid
		INNER JOIN ClaimSheetHd H ON H.ClmId=S.SchClmId
		INNER JOIN TaxConfiguration T ON T.Taxid=SS.TaxId
		INNER JOIN SchemeMaster SM ON SM.SchId=S.Schid
		INNER JOIN Product P ON P.PrdId=SP.Prdid
		WHERE TaxableAmount>0  AND H.Upload='N'
		and TaxCode IN('OutputVAT','VAT','CST','OutputCGST','OutputIGST')
		GROUP BY CmpSchCode,SlabId,SalInvNo,PrdCCode,T.TaxId,SM.Schid,H.ClmCode
		UNION ALL
		SELECT H.ClmCode,SM.Schid,CmpSchCode,SlabId,SalInvNo,PrdCCode,T.TaxId, 0 as Tax1, Max(Taxperc) as Tax2
		FROM SalesInvoice SI INNER JOIN SalesInvoiceSchemeLinewise S ON SI.SalId =S.Salid
		INNER JOIN SalesInvoiceProductTax SS ON S.SalId=SS.SalId and SS.PrdSlNo=S.RowId and SI.SalId=SS.SalId and SS.Salid=S.Salid
		INNER JOIN SalesInvoiceProduct SP ON SP.SlNo=SS.PrdSlNo and SP.SlNo=S.RowId and SP.SalId=SS.Salid and SP.SalId=S.SalId
		and SP.SalId=SI.Salid
		INNER JOIN ClaimSheetHd H ON H.ClmId=S.SchClmId
		INNER JOIN TaxConfiguration T ON T.Taxid=SS.TaxId
		INNER JOIN SchemeMaster SM ON SM.SchId=S.Schid
		INNER JOIN Product P ON P.PrdId=SP.Prdid
		WHERE TaxableAmount>0  AND H.Upload='N'
		and TaxCode IN('AddVAT','OutputADDLVAT','OutputSurcharge','OutputCess','OutputSGST','OutputUTGST')
		GROUP BY CmpSchCode,SlabId,SalInvNo,PrdCCode,T.TaxId,SM.Schid,H.ClmCode
	) X GROUP BY 	Schid,CmpSchCode,SlabId,SalInvNo,PrdCCode,ClmCode
	

		UPDATE A SET A.Tax1Per=B.Tax1 ,A.Tax2Per=B.Tax2 
		FROM Cs2Cn_Prk_Claim_SchemeDetails A (NOLOCK) INNER JOIN #TaxComponent B 
		ON B.CmpSchCode=A.CmpSchCode AND B.SlabId=A.SlabId AND B.SalInvNo=A.SalInvNo AND B.PrdCCode=A.PrdCCode AND B.ClmCode=A.ClaimRefNo
		
		UPDATE D SET D.SACCode=A.SerACCode  FROM ServiceMaster A 
		INNER JOIN ClaimGroupMaster B (NOLOCK) ON A.ServiceId=B.ServiceId
		INNER JOIN ClaimSheetHd C (NOLOCK) ON C.ClmGrpId=B.ClmGrpId
		INNER JOIN Cs2Cn_Prk_Claim_SchemeDetails D (NOLOCK) ON D.ClaimRefNo=C.ClmCode
END
GO
IF EXISTS(SELECT NAME FROM SYSOBJECTS WHERE XTYPE='P' and name='Proc_Cs2Cn_Claim_SpecialDiscount')
DROP PROCEDURE Proc_Cs2Cn_Claim_SpecialDiscount
GO
--SELECT * FROM Cs2Cn_Prk_ClaimAll
--Select * from ClaimSheetDetail
--Select * from ClaimSheetHd
--EXEC Proc_Cs2Cn_Claim_SpecialDiscount
CREATE PROCEDURE [Proc_Cs2Cn_Claim_SpecialDiscount]
AS
/*********************************
* PROCEDURE: Proc_Cs2Cn_Claim_SpecialDiscount
* PURPOSE: Extract Special Discount Claim Details from CoreStocky to Console
* NOTES:
* CREATED: Mahalakshmi.A 05-08-2008
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
*
*********************************/
SET NOCOUNT ON
BEGIN
	DECLARE @CmpID 		AS INTEGER
	DECLARE @DistCode	As nVarchar(50)
	DECLARE @ChkDate	AS DATETIME
	DECLARE @TransDate	AS DATETIME
	DELETE FROM Cs2Cn_Prk_ClaimAll WHERE uploadflag = 'Y' AND ClaimType='Special Discount Claim'

	SELECT @CmpID = CmpId FROM Company WHERE DefaultCompany = 1	
	SELECT @DistCode = DistributorCode FROM Distributor
	SELECT @ChkDate = NextUpDate FROM DayEndProcess	WHERE ProcId = 12
	SELECT @TransDate=DATEADD(D,-1,GETDATE())
	
	
	
		SELECT Salid,Prdid,Max(Tax1) as Tax1 ,Max(Tax2) as Tax2
		INTO #TaxComponent
		FROM(
				SELECT DISTINCT Sp.SalId,SP.PrdId,Max(Taxperc) as Tax1, 0 as Tax2
				FROM SpecialDiscountMaster SM
				INNER JOIN SpecialDiscountDetails SD  WITH (NOLOCK) ON SD.SdcRefNo=SM.SdcRefNo AND SD.Status=1
				INNER JOIN Company C  WITH (NOLOCK) ON SM.CmpId=C.CmpId
				INNER JOIN SalesInvoice SI   WITH (NOLOCK) ON SI.SalId=SD.SalId
				INNER JOIN SalesInvoiceProduct SP WITH (NOLOCK) ON SP.SalId=SD.SalId and SI.Salid=SD.SalId
				INNER JOIN Product P WITH (NOLOCK) ON P.PrdId=SP.PrdID
				INNER JOIN ClaimSheetDetail CD WITH (NOLOCK) ON SD.SdcRefNo=CD.RefCode
				INNER JOIN ClaimSheetHd CS WITH (NOLOCK) ON CS.ClmId=CD.ClmId AND CS.ClmGrpId= 11
				INNER JOIN SalesInvoiceProductTax SS  WITH (NOLOCK) ON SP.SalId=SS.SalId and SD.SalId=SS.SalId and SP.SlNo=SS.PrdSlNo
				INNER JOIN TaxConfiguration T ON T.Taxid=SS.TaxId
				WHERE TaxableAmount>0  
				and SI.VatGST='GST'
				and TaxCode IN('OutputVAT','VAT','CST','OutputCGST','OutputIGST')
				AND SM.Status=1 AND CS.Confirm=1 AND CS.Upload='N' AND CD.SelectMode=1
				GROUP BY Sp.SalId,SP.PrdId
				UNION ALL
				SELECT DISTINCT  Sp.SalId,SP.PrdId,0 as Tax1, Max(Taxperc) Tax2
				FROM SpecialDiscountMaster SM
				INNER JOIN SpecialDiscountDetails SD  WITH (NOLOCK) ON SD.SdcRefNo=SM.SdcRefNo AND SD.Status=1
				INNER JOIN Company C  WITH (NOLOCK) ON SM.CmpId=C.CmpId
				INNER JOIN SalesInvoice SI   WITH (NOLOCK) ON SI.SalId=SD.SalId
				INNER JOIN SalesInvoiceProduct SP WITH (NOLOCK) ON SP.SalId=SD.SalId and SI.Salid=SD.SalId
				INNER JOIN Product P WITH (NOLOCK) ON P.PrdId=SP.PrdID
				INNER JOIN ClaimSheetDetail CD WITH (NOLOCK) ON SD.SdcRefNo=CD.RefCode
				INNER JOIN ClaimSheetHd CS WITH (NOLOCK) ON CS.ClmId=CD.ClmId AND CS.ClmGrpId= 11
				INNER JOIN SalesInvoiceProductTax SS  WITH (NOLOCK) ON SP.SalId=SS.SalId and SD.SalId=SS.SalId and SP.SlNo=SS.PrdSlNo
				INNER JOIN TaxConfiguration T ON T.Taxid=SS.TaxId
				WHERE TaxableAmount>0  
				and SI.VatGST='GST'
				and TaxCode IN('AddVAT','OutputADDLVAT','OutputSurcharge','OutputCess','OutputSGST','OutputUTGST')
				AND SM.Status=1 AND CS.Confirm=1 AND CS.Upload='N' AND CD.SelectMode=1
				GROUP BY Sp.SalId,SP.PrdId
		) X GROUP BY Salid,Prdid
	INSERT INTO Cs2Cn_Prk_ClaimAll
	(
		DistCode		,
		CmpName			,
		ClaimType		,
		ClaimMonth		,
		ClaimYear		,
		ClaimRefNo		,
		ClaimDate		,
		ClaimFromDate		,
		ClaimToDate		,
		DistributorClaim	,
		DistributorRecommended	,
		ClaimnormPerc		,
		SuggestedClaim		,
		TotalClaimAmt		,
		Remarks			,
		Description		,
		Amount1			,
		ProductCode		,
		Batch			,
		Quantity1		,
		Quantity2		,
		Amount2			,
		Amount3			,
		TotalAmount		,
		Remark2			,
		OID				,
		Discount		,		
		UploadFlag
	)
		SELECT
			@DistCode,
			CmpName,
			'Special Discount Claim',
			DATENAME(MM,CS.ClmDate),
			DATEPART(YYYY,CS.ClmDate),
			SM.SdcRefNo,
			ClmDate,
			CS.FromDate,
			CS.ToDate,
			SM.TotalSpentAmt,
			SM.TotalRecAmt,
			CD.ClmPercentage,
			CD.ClmAmount,
			CD.RecommendedAmount,
			'',
			'',
			ISNULL(CD.GSTTax,0),  ---Added by Mohanakrishna A.B,
			P.PrdCCode,
			'',
			SP.BaseQty,
			0,
			0,
			0,
			--SD.SpentAmt,
			ROUND((PrdSplDiscAmount+(Sp.BaseQty * (PBD.PrdBatDetailValue-PBDS.PrdBatDetailValue)))*(CD.RecommendedAmount/SM.TotalSpentAmt),2),
			CS.ClmCode,
			ISNULL(Tax1,0),
			ISNULL(Tax2,0),
			'N'
		FROM SpecialDiscountMaster SM
			INNER JOIN SpecialDiscountDetails SD  WITH (NOLOCK) ON SD.SdcRefNo=SM.SdcRefNo AND SD.Status=1
			INNER JOIN Company C  WITH (NOLOCK) ON SM.CmpId=C.CmpId
			INNER JOIN SalesInvoiceProduct SP WITH (NOLOCK) ON SP.SalId=SD.SalId
			LEFT OUTER JOIN #TaxComponent TC ON TC.SalId=SP.SalId and TC.SalId=SD.SalId and TC.PrdId=Sp.Prdid
			INNER JOIN Product P WITH (NOLOCK) ON P.PrdId=SP.PrdID and P.Prdid=Tc.Prdid

			INNER JOIN ProductBatch PB (NOLOCK) ON P.PrdId = PB.PrdID
			INNER JOIN ProductBatchDetails PBD (NOLOCK) ON PB.PrdBatId = PBD.PrdBatID
			INNER JOIN BatchCreation BC (NOLOCK) ON BC.BatchSeqId = PBD.BatchSeqId And PBD.SlNo = BC.SlNo And BC.SelRte = 1
			AND PBD.PriceId=SP.SplPriceId

			INNER JOIN ProductBatch PBS (NOLOCK) ON P.PrdId = PBS.PrdID
			INNER JOIN ProductBatchDetails PBDS (NOLOCK) ON PBS.PrdBatId = PBDS.PrdBatID
			INNER JOIN BatchCreation BCS (NOLOCK) ON BCS.BatchSeqId = PBDS.BatchSeqId And PBDS.SlNo = BCS.SlNo And BCS.SelRte = 1
			AND PBDS.PriceId=SP.PriceId

			INNER JOIN ClaimSheetDetail CD WITH (NOLOCK) ON SD.SdcRefNo=CD.RefCode
			INNER JOIN ClaimSheetHd CS WITH (NOLOCK) ON CS.ClmId=CD.ClmId AND CS.ClmGrpId= 11
		WHERE SM.Status=1 AND CS.Confirm=1 AND CS.Upload='N' AND CD.SelectMode=1
		
		
		UPDATE D SET D.Remark3=A.SerACCode  FROM ServiceMaster A 
		INNER JOIN ClaimGroupMaster B (NOLOCK) ON A.ServiceId=B.ServiceId
		INNER JOIN ClaimSheetHd C (NOLOCK) ON C.ClmGrpId=B.ClmGrpId
		INNER JOIN Cs2Cn_Prk_ClaimAll D (NOLOCK) ON D.Remark2=C.ClmCode
		
				
	
END
GO
IF EXISTS(SELECT B.* FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.id=B.ID WHERE A.NAME='Supplier' AND B.name='SpmAdd1' AND B.LENGTH<'100')
BEGIN
	Alter Table Supplier Alter Column SpmAdd1 NVarchar(100)
END
GO
IF EXISTS(SELECT B.* FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.id=B.ID WHERE A.NAME='Supplier' AND B.name='SpmAdd2' AND B.LENGTH<'100')
BEGIN
	Alter Table Supplier Alter Column SpmAdd2 NVarchar(100)
END
GO
IF EXISTS(SELECT B.* FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.id=B.ID WHERE A.NAME='Supplier' AND B.name='SpmAdd3' AND B.LENGTH<'100')
BEGIN
	Alter Table Supplier Alter Column SpmAdd3 NVarchar(100)
END
GO
IF EXISTS(SELECT B.* FROM SYSOBJECTS A INNER JOIN SYSCOLUMNS B ON A.id=B.ID WHERE A.NAME='Supplier' AND B.name='SpmName' AND B.LENGTH<'100')
BEGIN
	Alter Table Supplier Alter Column SpmName NVarchar(100)
END
GO
IF EXISTS(SELECT 'X' FROM SYSOBJECTS WHERE XTYPE IN ('TF','FN') AND NAME='Fn_ReturnGetKeyNumber')
DROP FUNCTION Fn_ReturnGetKeyNumber
GO
CREATE FUNCTION Fn_ReturnGetKeyNumber(@PreFix AS VARCHAR(20),@CurrYear AS INT,@CurrValue AS BIGINT,@ZPad AS INT ,@TransId AS INT,@lSeriesId AS INT)
RETURNS VARCHAR(50)
AS
BEGIN
	DECLARE @GetKeyNumber AS VARCHAR(50)
	IF @TransId=2
	BEGIN
		IF EXISTS(SELECT * FROM Configuration WHERE ModuleId = 'BotreeRefNo' and Status=1)
		BEGIN
			SET @GetKeyNumber=@PreFix+CAST(SUBSTRING(CAST(@CurrYear as Varchar(10)),3,LEN(@CurrYear)) AS Varchar(10))+'-'+REPLICATE('0',CASE WHEN LEN(@CurrValue)>@ZPad THEN (@ZPad+1)-LEN(@CurrValue) ELSE (@ZPad)-LEN(@CurrValue)END)+CAST(@CurrValue as Varchar(10))


		END
		ELSE
		BEGIN
			IF EXISTS (SELECT DISTINCT YearConfig FROM BillSeriesHD(NOLOCK) WHERE YearConfig=1 AND SeriesID=@lSeriesId)
			BEGIN
				SET @GetKeyNumber=@PreFix+CAST(SUBSTRING(CAST(@CurrYear as Varchar(10)),3,LEN(@CurrYear)) AS Varchar(10))+REPLICATE('0',CASE WHEN LEN(@CurrValue)>@ZPad THEN (@ZPad+1)-LEN(@CurrValue) ELSE (@ZPad)-LEN(@CurrValue)END)+CAST(@CurrValue as Varchar(10))
			END
			ELSE
			BEGIN 		
				SET @GetKeyNumber=@PreFix+REPLICATE('0',CASE WHEN LEN(@CurrValue)>@ZPad THEN (@ZPad+1)-LEN(@CurrValue) ELSE (@ZPad)-LEN(@CurrValue)END)+CAST(@CurrValue as Varchar(10))
			END
		END			
	END	
	RETURN(@GetKeyNumber)
END
GO
--Til Here
--From Updater
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='Proc_AutoBatchTransfer_Parle' AND XTYPE='P')
DROP PROCEDURE Proc_AutoBatchTransfer_Parle
GO
/*
BEGIN TRANSACTION
select *from stockledger a where prdid = 2058 and TransDate = (select MAX(TransDate) from StockLedger where PrdId = a.PrdId and PrdBatId = a.PrdBatId)
EXEC Proc_AutoBatchTransfer_Parle 0
select *from stockledger a where prdid = 2058 and TransDate = (select MAX(TransDate) from StockLedger where PrdId = a.PrdId and PrdBatId = a.PrdBatId)
ROLLBACK TRANSACTION
*/
CREATE PROCEDURE Proc_AutoBatchTransfer_Parle
(
	@Po_ErrNo INT OUTPUT
)
AS
/*********************************
* PROCEDURE		: Proc_AutoBatchTransfer
* PURPOSE		: To do Batch Transfer automatically while downloading New Batch for Existing Product
* CREATED		: Nandakumar R.G
* CREATED DATE	: 06/02/2010
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
*********************************/
SET NOCOUNT ON
BEGIN
	DECLARE @Exist 				AS 	INT
	DECLARE @Trans				AS 	INT
	DECLARE @Tabname 			AS  NVARCHAR(100)
	DECLARE @DestTabname 		AS 	NVARCHAR(100)
	DECLARE @Fldname 			AS  NVARCHAR(100)
	
	DECLARE @PrdDCode 	        AS 	NVARCHAR(100)
	DECLARE @BatchCode			AS 	NVARCHAR(100)
	DECLARE @CmpBatchCode		AS 	NVARCHAR(100)	
	DECLARE @PriceCode			AS 	NVARCHAR(4000)		
	DECLARE @MnfDate			AS 	NVARCHAR(100)
	DECLARE @ExpDate			AS 	NVARCHAR(100)
	DECLARE @TaxGroupCode		AS 	NVARCHAR(100)
	DECLARE @Status				AS 	NVARCHAR(100)
	DECLARE	@BatchSeqCode 		AS 	NVARCHAR(100)
	DECLARE @RefCode           	AS 	NVARCHAR(100)
	DECLARE @PriceValue         AS 	NVARCHAR(100)	
	DECLARE @DefaultPrice       AS 	NVARCHAR(100)	  	
	DECLARE @ExistPrdDCode		AS 	NVARCHAR(100)  	
	DECLARE @ExistBatchCode		AS 	NVARCHAR(100)
	DECLARE @ExistPriceCode		AS 	NVARCHAR(100)  	
	
	DECLARE @PrdId 				AS 	INT
	DECLARE @PrdBatId 			AS 	INT
	DECLARE @PriceId 			AS 	INT
	DECLARE @TaxGroupId 		AS 	INT
	DECLARE @BatchSeqId 		AS 	INT
	DECLARE @BatchStatus		AS 	INT
	DECLARE @SlNo	 			AS 	INT
	DECLARE @NoOfPrices 		AS 	INT
	DECLARE @ExistPrices 		AS 	INT
	DECLARE @DefaultPriceId 	AS 	INT
	DECLARE @ExistPriceId 		AS 	INT
	DECLARE @TransStr 			AS 	NVARCHAR(4000)
	DECLARE @ExistPrdBatMaxId	AS 	INT
	DECLARE @NewPrdBatMaxId		AS 	INT
	DECLARE @ContPrdId 			AS 	INT
	DECLARE @ContPrdBatId 		AS 	INT
	DECLARE @ContExistPrdBatId 	AS 	INT
	DECLARE @ContPriceId 		AS 	INT
	DECLARE @ContractId 		AS 	INT
	DECLARE @ContPriceCode		AS NVARCHAR(100)
	DECLARE @ContPrdBatId1		AS INT
	DECLARE @ContPriceId1		AS INT
	DECLARE @BatchTransfer		AS INT
	DECLARE @SalStock			AS INT
	DECLARE @UnSalStock			AS INT
	DECLARE @OfferStock			AS INT
	DECLARE @FromPrdBatId		AS INT
	DECLARE @FromPrdBatCode		AS NVARCHAR(200)
	DECLARE @ToPrdBatId			AS INT
	DECLARE @LcnId				AS INT
	DECLARE @Po_StkPosting		AS INT
	DECLARE @TransDate			AS DATETIME
	SET @BatchTransfer=0
	SELECT @TransDate=CONVERT(NVARCHAR(10),GETDATE(),121)
	---->Needs to be changed
	SELECT @BatchTransfer=Status FROM Configuration WHERE ModuleId='GENConfig000001'
	SET @Po_ErrNo=0
	SET @Exist=0
	SET @ExistPrdDCode=''	
	SET @ExistBatchCode=''
	SET @ExistPriceCode=''
	
	SET @Exist=0
	
	select PrdId,MAX(mnfdate)mnfdate into #MaxMnfdate from ProductBatch
	group by PrdId

	select B.PrdId,MAX(PrdBatId)PrdBatId INTO #MaxProductBatch from #MaxMnfdate A INNER JOIN ProductBatch B
	ON A.PrdId = B.PrdId AND A.mnfdate = B.MnfDate
	group by B.PrdId
	
	
	DECLARE Cur_ProductBatch CURSOR
	FOR 
	SELECT PrdId,MAX(PrdBatId) PrdBatId FROM #MaxProductBatch GROUP BY PrdId
	OPEN Cur_ProductBatch
	FETCH NEXT FROM Cur_ProductBatch INTO @PrdId,@PrdBatId
	WHILE @@FETCH_STATUS=0
	BEGIN
		--SELECT @PrdId,@PrdBatId,@BatchCode
		DECLARE Cur_BatchTransfer CURSOR
		FOR SELECT PBL.LcnId,PBL.PrdBatId,(PBL.PrdBatLcnSih-PBL.PrdBatLcnRessih) AS SalStock,(PBL.PrdBatLcnUih-PBL.PrdBatLcnResUih) AS UnSalStock,
		(PBL.PrdBatLcnFre-PBL.PrdBatLcnResFre) AS OfferStock
		FROM ProductBatchLocation PBL WHERE PBL.PrdId=@PrdId AND PBL.PrdBatId<>@PrdBatId
		AND ((PBL.PrdBatLcnSih-PBL.PrdBatLcnRessih)+(PBL.PrdBatLcnUih-PBL.PrdBatLcnResUih)+(PBL.PrdBatLcnFre-PBL.PrdBatLcnResFre))>0
		OPEN Cur_BatchTransfer
		FETCH NEXT FROM Cur_BatchTransfer INTO @LcnId,@FromPrdBatId,@SalStock,@UnSalStock,@Offerstock
		WHILE @@FETCH_STATUS=0
		BEGIN
			--SELECT @PrdId,@PrdBatId,@LcnId,@FromPrdBatId,@SalStock,@UnSalStock,@Offerstock
			
			SET @Po_ErrNo=0
			
			IF @SalStock>0
			BEGIN
				Exec Proc_UpdateProductBatchLocation 1,2,@PrdId,@FromPrdBatId,@LcnId,@TransDate,@SalStock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
				IF @Po_StkPosting=0
				BEGIN
					Exec Proc_UpdateProductBatchLocation 1,1,@PrdId,@PrdBatId,@LcnId,@TransDate,@SalStock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
					IF @Po_StkPosting=0
					BEGIN	
						Exec Proc_UpdateStockLedger 30,1,@PrdId,@FromPrdBatId,@LcnId,@TransDate,@SalStock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
						IF @Po_StkPosting=0
						BEGIN
							Exec Proc_UpdateStockLedger 27,1,@PrdId,@PrdBatId,@LcnId,@TransDate,@SalStock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
							IF @Po_StkPosting<>0
							BEGIN
								SET @Po_ErrNo=1
							END													
						END
						ELSE
						BEGIN
							SET @Po_ErrNo=1
						END
					END
					ELSE
					BEGIN
						SET @Po_ErrNo=1
					END
				END
				ELSE
				BEGIN
					SET @Po_ErrNo=1
				END
			END
			
			IF @UnSalStock>0
			BEGIN
				Exec Proc_UpdateProductBatchLocation 2,2,@PrdId,@FromPrdBatId,@LcnId,@TransDate,@UnSalStock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
				IF @Po_StkPosting=0
				BEGIN
					Exec Proc_UpdateProductBatchLocation 2,1,@PrdId,@PrdBatId,@LcnId,@TransDate,@UnSalStock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
					IF @Po_StkPosting=0
					BEGIN	
						Exec Proc_UpdateStockLedger 31,1,@PrdId,@FromPrdBatId,@LcnId,@TransDate,@UnSalStock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
						IF @Po_StkPosting=0
						BEGIN
							Exec Proc_UpdateStockLedger 28,1,@PrdId,@PrdBatId,@LcnId,@TransDate,@UnSalStock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
							IF @Po_StkPosting<>0
							BEGIN
								SET @Po_ErrNo=1
							END						
						END
						ELSE
						BEGIN
							SET @Po_ErrNo=1
						END
					END
					ELSE
					BEGIN
						SET @Po_ErrNo=1
					END
				END
				ELSE
				BEGIN
					SET @Po_ErrNo=1
				END
			END
				
			IF @Offerstock>0
			BEGIN
				Exec Proc_UpdateProductBatchLocation 3,2,@PrdId,@FromPrdBatId,@LcnId,@TransDate,@Offerstock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
				IF @Po_StkPosting=0
				BEGIN
					Exec Proc_UpdateProductBatchLocation 3,1,@PrdId,@PrdBatId,@LcnId,@TransDate,@Offerstock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
					IF @Po_StkPosting=0
					BEGIN	
						Exec Proc_UpdateStockLedger 32,1,@PrdId,@FromPrdBatId,@LcnId,@TransDate,@Offerstock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
						IF @Po_StkPosting=0
						BEGIN
							Exec Proc_UpdateStockLedger 29,1,@PrdId,@PrdBatId,@LcnId,@TransDate,@Offerstock,1,@Pi_ErrNo = @Po_StkPosting OUTPUT
							IF @Po_StkPosting<>0
							BEGIN
								SET @Po_ErrNo=1
							END						
						END
						ELSE
						BEGIN
							SET @Po_ErrNo=1
						END
					END
					ELSE
					BEGIN
						SET @Po_ErrNo=1
					END
				END
				ELSE
				BEGIN
					SET @Po_ErrNo=1
				END
			END
			IF @Po_ErrNo>0
			BEGIN
				INSERT INTO ErrorLog(SlNo,TableName,FieldName,ErrDesc)
				VALUES(@FromPrdBatId,'','Error','Error')
			END
			FETCH NEXT FROM Cur_BatchTransfer INTO @LcnId,@FromPrdBatId,@SalStock,@UnSalStock,@Offerstock
		END
		CLOSE Cur_BatchTransfer
		DEALLOCATE Cur_BatchTransfer
		FETCH NEXT FROM Cur_ProductBatch INTO @PrdId,@PrdBatId
	END
	CLOSE Cur_ProductBatch
	DEALLOCATE Cur_ProductBatch
	RETURN	
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE name ='Proc_ValidateRetailerMaster' AND XTYPE='P')
DROP PROCEDURE Proc_ValidateRetailerMaster
GO
/*
BEGIN TRANSACTION
Exec Proc_ValidateRetailerMaster 0
SELECT * FROM Retailer
SELECT * FROM ErrorLog
ROLLBACK TRANSACTION
*/
CREATE PROCEDURE Proc_ValidateRetailerMaster
(
	@Po_ErrNo INT OUTPUT
)
AS
/*********************************
* PROCEDURE		: Proc_ValidateRetailerMaster
* PURPOSE		: To Insert and Update records  from xml file in the Table Retailer
* CREATED		: MarySubashini.S
* CREATED DATE	: 13/09/2007
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
----------------------------------------------------------------------------
* {Date}         {Developer}             {Brief modification description}
  2013/10/10   Sathishkumar Veeramani     Junk Characters Removed  
*****************************************************************************/ 
SET NOCOUNT ON
BEGIN
	DECLARE @RetailerCode AS NVARCHAR(100)
	DECLARE @RetailerName AS NVARCHAR(100)
	DECLARE	@Address1 AS NVARCHAR(100)
	DECLARE	@Address2 AS NVARCHAR(100)
	DECLARE	@Address3 AS NVARCHAR(100)
	DECLARE	@PinCode AS NVARCHAR(100)
	DECLARE	@PhoneNo AS NVARCHAR(100)
	DECLARE	@EmailId AS NVARCHAR(100)
	DECLARE	@KeyAccount AS NVARCHAR(100)
	DECLARE	@CoverageMode AS NVARCHAR(100)
	DECLARE	@RegistrationDate AS DATETIME
	DECLARE	@DayOff	AS NVARCHAR(100)
	DECLARE	@Status	AS NVARCHAR(100)
	DECLARE	@Taxable AS NVARCHAR(100)
	DECLARE	@TaxType AS NVARCHAR(100)
	DECLARE	@TINNumber AS NVARCHAR(100)
	DECLARE @CSTNumber AS NVARCHAR(100)
	DECLARE	@TaxGroup AS NVARCHAR(100)
	DECLARE	@CreditBills AS NVARCHAR(100)
	DECLARE	@CreditLimit AS NVARCHAR(100)
	DECLARE	@CreditDays AS NVARCHAR(100)
	DECLARE	@CashDiscountPercentage AS NVARCHAR(100)
	DECLARE	@CashDiscountCondition AS NVARCHAR(100)
	DECLARE	@CashDiscountLimitValue AS NVARCHAR(100)
	DECLARE	@LicenseNumber AS NVARCHAR(100)
	DECLARE	@LicNumberExDate AS NVARCHAR(10)
	DECLARE	@DrugLicNumber AS NVARCHAR(100)
	DECLARE	@DrugLicExDate AS NVARCHAR(10)
	DECLARE	@PestLicNumber	AS NVARCHAR(100)
	DECLARE	@PestLicExDate AS NVARCHAR(10)
	DECLARE	@GeographyHierarchyValue AS NVARCHAR(100)
	DECLARE	@DeliveryRoute	AS NVARCHAR(100)
	DECLARE	@ResidencePhoneNo AS NVARCHAR(100)
	DECLARE	@OfficePhoneNo 	AS NVARCHAR(100)
	DECLARE	@DepositAmount 	AS NVARCHAR(100)
	DECLARE	@VillageCode 	AS NVARCHAR(100)
	DECLARE	@PotentialClassCode AS NVARCHAR(100)
	DECLARE	@RetailerType AS NVARCHAR(100)
	DECLARE	@RetailerFrequency AS NVARCHAR(100)
	DECLARE	@RtrCrDaysAlert AS NVARCHAR(100)
	DECLARE	@RtrCrBillAlert AS NVARCHAR(100)
	DECLARE	@RtrCrLimitAlert AS NVARCHAR(100)
	DECLARE @GeoMainId AS INT
	DECLARE @RMId AS INT
	DECLARE @VillageId AS INT
	DECLARE @RtrId AS INT
	DECLARE @TaxGroupId AS INT
	DECLARE @RtrClassId AS INT
	DECLARE @Taction AS INT
	DECLARE @Tabname AS NVARCHAR(100)
	DECLARE @CntTabname AS NVARCHAR(100)
	DECLARE @Fldname AS NVARCHAR(100)
	DECLARE @ErrDesc AS NVARCHAR(1000)
	DECLARE @sSql AS NVARCHAR(4000)
	DECLARE @CoaId AS INT
	DECLARE @AcCode AS NVARCHAR(1000)
	DECLARE @CmpRtrCode AS NVARCHAR(200)	
	
	SET @CntTabname='Retailer'
	SET @Fldname='RtrId'
	SET @Tabname = 'ETL_Prk_Retailer'
	SET @Taction=0
	SET @Po_ErrNo=0
	SET @VillageId=0
	
	DECLARE Cur_Retailer CURSOR
	FOR SELECT dbo.Fn_Removejunk(ISNULL([Retailer Code],'')),dbo.Fn_Removejunk(ISNULL([Retailer Name],'')),dbo.Fn_Removejunk(ISNULL([Address1],'')),
		dbo.Fn_Removejunk(ISNULL([Address2],'')),dbo.Fn_Removejunk(ISNULL([Address3],'')),
		ISNULL([Pin Code],'0'),ISNULL([Phone No],'0'),dbo.Fn_Removejunk(ISNULL(EmailId,'')),ISNULL([Key Account],''),
		ISNULL([Coverage Mode],''),CAST([Registration Date] AS DATETIME) AS [Registration Date],ISNULL([Day Off],''),
		ISNULL([Status],''),ISNULL([Taxable],''),ISNULL([Tax Type],''),ISNULL([TIN Number],''),
		ISNULL([CST Number],''),ISNULL([Tax Group],''),ISNULL([Credit Bills],'0'),ISNULL([Credit Limit],'0'),
		ISNULL([Credit Days],'0'),ISNULL([Cash Discount Percentage],'0'),ISNULL([Cash Discount Condition],''),
		ISNULL([Cash Discount Limit Value],'0'),ISNULL([License Number],''),
		ISNULL([License Number Expiry Date],NULL),
		ISNULL([Drug License Number],''),ISNULL([Drug License Number Expiry Date],NULL),
		ISNULL([Pesticide License Number],''),ISNULL([Pesticide License Number Expiry Date],NULL),
		ISNULL([Geography Hierarchy Value],''),ISNULL([Delivery Route Code],''),ISNULL([Village Code],''),
		ISNULL([Residence Phone No],''),ISNULL([Office Phone No],''),ISNULL([Deposit Amount],'0'),
		ISNULL([Potential Class Code],''),
		ISNULL([Retailer Type],'') ,
		ISNULL([Retailer Frequency],''),ISNULL([Credit Days Alert],'') ,
		ISNULL([Credit Bills Alert],'') ,ISNULL([Credit Limit Alert],'')
	FROM ETL_Prk_Retailer WITH(NOLOCK) ORDER BY [Retailer Code]
	OPEN Cur_Retailer
	FETCH NEXT FROM Cur_Retailer INTO @RetailerCode,@RetailerName,@Address1,@Address2,@Address3,@PinCode,@PhoneNo,@EmailId,@KeyAccount,@CoverageMode,@RegistrationDate,@DayOff,
	@Status,@Taxable,@TaxType,@TINNumber,@CSTNumber,@TaxGroup,@CreditBills,@CreditLimit,@CreditDays,
	@CashDiscountPercentage,@CashDiscountCondition,@CashDiscountLimitValue,@LicenseNumber,
	@LicNumberExDate,@DrugLicNumber,@DrugLicExDate,@PestLicNumber,@PestLicExDate,@GeographyHierarchyValue,
	@DeliveryRoute,@VillageCode,@ResidencePhoneNo,@OfficePhoneNo,@DepositAmount,@PotentialClassCode,
	@RetailerType,@RetailerFrequency,@RtrCrDaysAlert,@RtrCrBillAlert,@RtrCrLimitAlert
	WHILE @@FETCH_STATUS=0		
	BEGIN
		IF NOT EXISTS  (SELECT * FROM Geography WHERE GeoCode = @GeographyHierarchyValue )
  		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Geogrpahy Code: ' + @GeographyHierarchyValue + ' is not available'  		
			INSERT INTO Errorlog VALUES (1,@Tabname,'GeographyHierarchyValue',@ErrDesc)
		END
		ELSE
		BEGIN
			SELECT @GeoMainId =GeoMainId FROM Geography WHERE GeoCode = @GeographyHierarchyValue
		END
		IF NOT EXISTS  (SELECT * FROM RouteMaster WHERE RMCode = @DeliveryRoute AND RMSRouteType=2 )
  		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Route Code ' + @DeliveryRoute + ' is not available'  		
			INSERT INTO Errorlog VALUES (2,@Tabname,'DeliveryRoute',@ErrDesc)
		END
		ELSE
		BEGIN		
			SELECT @RMId =RMId FROM RouteMaster WHERE RMCode = @DeliveryRoute
		END
		IF LTRIM(RTRIM(@PotentialClassCode)) <> ''
		BEGIN
			IF NOT EXISTS  (SELECT * FROM RetailerPotentialClass WHERE PotentialClassCode = @PotentialClassCode )
	  		BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Potential Class Code ' + @PotentialClassCode + ' is not available'  		
				INSERT INTO Errorlog VALUES (3,@Tabname,'PotentialClassCode',@ErrDesc)
			END
			ELSE
			BEGIN
				SELECT @RtrClassId =RtrClassId FROM RetailerPotentialClass WHERE PotentialClassCode = @PotentialClassCode
			END
		END
		SELECT @TaxGroupId = 0
		IF LTRIM(RTRIM(@TaxGroup)) <> ''
		BEGIN
			IF NOT EXISTS  (SELECT * FROM TaxGroupSetting WHERE RtrGroup = @TaxGroup)
	  		BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Retailer Tax Group Code ' + @TaxGroup + ' is not available'  		
				INSERT INTO Errorlog VALUES (4,@Tabname,'TaxGroup',@ErrDesc)
			END
			ELSE
			BEGIN
				SELECT @TaxGroupId =TaxGroupId FROM TaxGroupSetting WHERE RtrGroup = @TaxGroup
			END
		END
		IF LTRIM(RTRIM(@VillageCode)) <> ''
		BEGIN
			IF NOT EXISTS  (SELECT * FROM RouteVillage WHERE VillageCode = @VillageCode)
	  		BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Village Code ' + @VillageCode + ' is not available'  		
				INSERT INTO Errorlog VALUES (5,@Tabname,'VillageCode',@ErrDesc)
			END
			ELSE
			BEGIN
				SELECT @VillageId =VillageId FROM RouteVillage WHERE VillageCode = @VillageCode
			END
		END
		IF LTRIM(RTRIM(@RetailerCode))<>''
		BEGIN
			IF EXISTS  (SELECT * FROM Retailer WHERE RtrCode = @RetailerCode )
			BEGIN
				SET @Taction=2
			END
			ELSE
			BEGIN
				SET @Taction=1
			END
		END
		ELSE
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Retailer Code should not be empty '  		
			INSERT INTO Errorlog VALUES (6,@Tabname,'RetailerCode',@ErrDesc)
		END
		IF LTRIM(RTRIM(@RetailerName))=''
		BEGIN
			SET @Po_ErrNo=1	
			SET @Taction=0
			SET @ErrDesc = 'Retailer Name should not be empty'		
			INSERT INTO Errorlog VALUES (7,@Tabname,'RetailerName',@ErrDesc)
		END	
		IF LTRIM(RTRIM(@Address1))=''
		BEGIN
			SET @Po_ErrNo=1	
			SET @Taction=0
			SET @ErrDesc = 'Retailer Address  should not be empty'		
			INSERT INTO Errorlog VALUES (8,@Tabname,'Address',@ErrDesc)
		END
		IF LEN(@PinCode)<>0
		BEGIN
			IF ISNUMERIC(@PinCode)=0
			BEGIN
				SET @Po_ErrNo=1	
				SET @Taction=0
				SET @ErrDesc = 'PinCode is not in correct format'		
				INSERT INTO Errorlog VALUES (9,@Tabname,'PinCode',@ErrDesc)
			END	
		END					
				
		IF LTRIM(RTRIM(@KeyAccount))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'KeyAccount should not be empty'		
			INSERT INTO Errorlog VALUES (10,@Tabname,'KeyAccount',@ErrDesc)
		END
		ELSE
		BEGIN
			IF LTRIM(RTRIM(@KeyAccount))='Yes' OR LTRIM(RTRIM(@KeyAccount))='No'
			BEGIN
				IF @Po_ErrNo=0
				BEGIN
					SET @Po_ErrNo=0	
				END
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Key Account Type '+@KeyAccount+ ' is not available'		
				INSERT INTO Errorlog VALUES (11,@Tabname,'KeyAccount',@ErrDesc)
			END
		END
		IF LTRIM(RTRIM(@CoverageMode))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Coverage Mode should not be empty'		
			INSERT INTO Errorlog VALUES (12,@Tabname,'CoverageMode',@ErrDesc)
		END
		ELSE
			BEGIN
			IF LTRIM(RTRIM(@CoverageMode))='Order Booking' OR LTRIM(RTRIM(@CoverageMode))='Van Sales' OR LTRIM(RTRIM(@CoverageMode))='Counter Sales'
			BEGIN
				IF @Po_ErrNo=0
				BEGIN
					SET @Po_ErrNo=0	
				END	
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Coverage Mode Type '+@CoverageMode+ ' does not exists'		
				INSERT INTO Errorlog VALUES (13,@Tabname,'CoverageMode',@ErrDesc)
			END
		END
		
		IF LTRIM(RTRIM(@RegistrationDate))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Registration Date should not be empty'		
			INSERT INTO Errorlog VALUES (14,@Tabname,'RegistrationDate',@ErrDesc)
		END
		ELSE
		BEGIN
			IF ISDATE(@RegistrationDate)=0
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Registration Date '+@RegistrationDate+ ' not in date format'		
				INSERT INTO Errorlog VALUES (15,@Tabname,'RegistrationDate',@ErrDesc)
			END
			ELSE
			BEGIN
				IF @RegistrationDate > (CONVERT(NVARCHAR(11),GETDATE(),121))
				BEGIN
					SET @Po_ErrNo=1		
					SET @Taction=0
					SET @ErrDesc = 'Invalid Registration Date'		
					INSERT INTO Errorlog VALUES (16,@Tabname,'RegistrationDate',@ErrDesc)
				END
			END
		END
		IF LTRIM(RTRIM(@DayOff))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Day Off should not be empty'		
			INSERT INTO Errorlog VALUES (17,@Tabname,'DayOff',@ErrDesc)
		END
		ELSE
		BEGIN
			IF LTRIM(RTRIM(@DayOff))='Sunday' OR LTRIM(RTRIM(@DayOff))='Monday' OR LTRIM(RTRIM(@DayOff))='Tuesday' OR
			LTRIM(RTRIM(@DayOff))='Wednesday' OR LTRIM(RTRIM(@DayOff))='Thursday' OR LTRIM(RTRIM(@DayOff))='Friday' OR
			LTRIM(RTRIM(@DayOff))='Saturday'
			BEGIN
				IF @Po_ErrNo=0
				BEGIN
					SET @Po_ErrNo=0	
				END	
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Day Off Type '+@DayOff+ ' is not available'		
				INSERT INTO Errorlog VALUES (18,@Tabname,'DayOff',@ErrDesc)
			END
		END
		IF LTRIM(RTRIM(@Status))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Status should not be empty'		
			INSERT INTO Errorlog VALUES (19,@Tabname,'Status',@ErrDesc)
		END
		ELSE
		BEGIN
			IF LTRIM(RTRIM(@Status))='Active' OR LTRIM(RTRIM(@Status))='Inactive'
			BEGIN
				IF @Po_ErrNo=0
				BEGIN
					SET @Po_ErrNo=0	
				END
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Status Type '+@Status+ ' is not available'		
				INSERT INTO Errorlog VALUES (20,@Tabname,'Status',@ErrDesc)
			END
		END
		IF LTRIM(RTRIM(@Taxable))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Taxable should not be empty'		
			INSERT INTO Errorlog VALUES (21,@Tabname,'Taxable',@ErrDesc)
		END
		ELSE
		BEGIN
			IF LTRIM(RTRIM(@Taxable))='Yes' OR LTRIM(RTRIM(@Taxable))='No'
			BEGIN
				IF @Po_ErrNo=0
				BEGIN
					SET @Po_ErrNo=0	
				END	
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Taxable Type '+@Taxable+ ' is not available'		
				INSERT INTO Errorlog VALUES (22,@Tabname,'Taxable',@ErrDesc)
			END
		END
		IF LTRIM(RTRIM(@TaxType))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'TaxType should not be empty'		
			INSERT INTO Errorlog VALUES (23,@Tabname,'TaxType',@ErrDesc)
		END
		ELSE
		BEGIN
			IF LTRIM(RTRIM(@TaxType))='VAT' OR LTRIM(RTRIM(@TaxType))='NON VAT'
			BEGIN
				IF @Po_ErrNo=0
				BEGIN
					SET @Po_ErrNo=0	
				END	
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'TaxType Type '+@TaxType+ ' is not available'		
				INSERT INTO Errorlog VALUES (24,@Tabname,'TaxType',@ErrDesc)
			END
		END
		IF @TaxType='VAT'
		BEGIN
			IF LTRIM(RTRIM(@TINNumber))=''
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'TIN Number should not be empty'		
				INSERT INTO Errorlog VALUES (25,@Tabname,'TINNumber',@ErrDesc)
			END
			ELSE
			BEGIN
				IF LEN(@TINNumber)>11
				BEGIN
					SET @Po_ErrNo=1
					SET @Taction=0
					SET @ErrDesc = 'TIN Number Maximum Length should be 11'		
					INSERT INTO Errorlog VALUES (26,@Tabname,'TINNumber',@ErrDesc)
				END
			END
		END
		IF LTRIM(RTRIM(@CreditBills))<>''
		BEGIN
			IF ISNUMERIC(@CreditBills)=0
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Credit Bills value Should be Number'		
				INSERT INTO Errorlog VALUES (27,@Tabname,'CreditBills',@ErrDesc)
			END
		END
		IF LTRIM(RTRIM(@CreditLimit))<>''
		BEGIN
			IF ISNUMERIC(@CreditLimit)=0
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Credit Limit value Should be Number'		
				INSERT INTO Errorlog VALUES (28,@Tabname,'CreditLimit',@ErrDesc)
			END
		END
		IF LTRIM(RTRIM(@CreditDays))<>''
		BEGIN
			IF ISNUMERIC(@CreditDays)=0
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Credit Days value Should be Number'		
				INSERT INTO Errorlog VALUES (29,@Tabname,'CreditDays',@ErrDesc)
			END
		END
		IF LTRIM(RTRIM(@CashDiscountPercentage))<>''
		BEGIN
			IF ISNUMERIC(@CashDiscountPercentage)=0
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Cash Discount Percentage value Should be Number'		
				INSERT INTO Errorlog VALUES (30,@Tabname,'CashDiscountPercentage',@ErrDesc)
			END
		END
		
		IF LTRIM(RTRIM(@CashDiscountPercentage))<>''
		BEGIN
			IF ISNUMERIC(@CashDiscountPercentage)=0
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Cash Discount Percentage value Should be Number'		
				INSERT INTO Errorlog VALUES (31,@Tabname,'CashDiscountPercentage',@ErrDesc)
			END
		END
		IF LTRIM(RTRIM(@CashDiscountCondition))<>''
		BEGIN
			IF LTRIM(RTRIM(@CashDiscountCondition))='>=' OR LTRIM(RTRIM(@CashDiscountCondition))='<='
			BEGIN
				IF @Po_ErrNo=0
				BEGIN
					SET @Po_ErrNo=0	
				END	
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Cash Discount Condition Type '+@CashDiscountCondition+ ' is not available'		
				INSERT INTO Errorlog VALUES (32,@Tabname,'CashDiscountCondition',@ErrDesc)
			END
		END
			
	
		IF LTRIM(RTRIM(@CashDiscountLimitValue))<>''
		BEGIN
			IF ISNUMERIC(@CashDiscountLimitValue)=0
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Cash Discount Limit Value value Should be Number'		
				INSERT INTO Errorlog VALUES (33,@Tabname,'CashDiscountLimitValue',@ErrDesc)
			END
		END
		
		IF LTRIM(RTRIM(@LicenseNumber))<>''
		BEGIN
			IF LTRIM(RTRIM(@LicNumberExDate))=''
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'License Number Expiry Date  should not be empty'		
				INSERT INTO Errorlog VALUES (34,@Tabname,'LicenseNumberExpiryDate',@ErrDesc)
			END
			ELSE
			BEGIN
				IF ISDATE(CONVERT(NVARCHAR(10),@LicNumberExDate,121))=0
				BEGIN
					SET @Po_ErrNo=1		
					SET @Taction=0
					SET @ErrDesc = 'License Number Expiry Date '+@LicNumberExDate+ 'not in date format'		
					INSERT INTO Errorlog VALUES (35,@Tabname,'LicenseNumberExpiryDate',@ErrDesc)
				END
				ELSE
				BEGIN
					IF  (CONVERT(NVARCHAR(10),@LicNumberExDate,121)) < CONVERT(NVARCHAR(10),GETDATE(),121)
					BEGIN
						SET @Po_ErrNo=1		
						SET @Taction=0
						SET @ErrDesc = 'Invalid License Number Expiry Date'		
						INSERT INTO Errorlog VALUES (36,@Tabname,'LicenseNumberExpiryDate',@ErrDesc)
					END
				END
			END
		END
		IF LTRIM(RTRIM(@DrugLicNumber))<>''
		BEGIN
			IF LTRIM(RTRIM(@DrugLicExDate))=''
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Drug License Number Expiry Date  should not be empty'		
				INSERT INTO Errorlog VALUES (37,@Tabname,'DrugLicenseNumberExpiryDate',@ErrDesc)
			END
			ELSE
			BEGIN
				IF ISDATE(CONVERT(NVARCHAR(10),@DrugLicExDate,121))=0
				BEGIN
					SET @Po_ErrNo=1		
					SET @Taction=0
					SET @ErrDesc = 'Drug License Number Expiry Date '+@DrugLicExDate+ 'not in date format'		
					INSERT INTO Errorlog VALUES (38,@Tabname,'DrugLicenseNumberExpiryDate',@ErrDesc)
				END
				ELSE
				BEGIN
					IF (CONVERT(NVARCHAR(10),@DrugLicExDate,121))< CONVERT(NVARCHAR(10),GETDATE(),121)
					BEGIN
						SET @Po_ErrNo=1		
						SET @Taction=0
						SET @ErrDesc = 'Invalid Drug License Number Expiry Date'		
						INSERT INTO Errorlog VALUES (39,@Tabname,'DrugLicenseNumberExpiryDate',@ErrDesc)
					END
				END
			END
		END
		IF LTRIM(RTRIM(@PestLicNumber))<>''
		BEGIN
			IF LTRIM(RTRIM(@PestLicExDate))=''
			BEGIN
				SET @Po_ErrNo=1
				SET @Taction=0
				SET @ErrDesc = 'Pesticide License Number Expiry Date  was not given'		
				INSERT INTO Errorlog VALUES (40,@Tabname,'PesticideLicenseNumberExpiryDate',@ErrDesc)
			END
			ELSE
			BEGIN
				IF ISDATE(CONVERT(NVARCHAR(10),@PestLicExDate,121))=0
					BEGIN
						SET @Po_ErrNo=1		
						SET @Taction=0
						SET @ErrDesc = 'Pesticide License Number Expiry Date '+@PestLicExDate+ 'not in date format'		
						INSERT INTO Errorlog VALUES (41,@Tabname,'PesticideLicenseNumberExpiryDate',@ErrDesc)
					END
				ELSE
				BEGIN
					IF (CONVERT(NVARCHAR(10),@PestLicExDate,121)) < CONVERT(NVARCHAR(10),GETDATE(),121)
					BEGIN
						SET @Po_ErrNo=1		
						SET @Taction=0
						SET @ErrDesc = 'Invalid Pesticide License Number Expiry Date '		
						INSERT INTO Errorlog VALUES (42,@Tabname,'PesticideLicenseNumberExpiryDate',@ErrDesc)
					END
				END
			END
		END
		IF LTRIM(RTRIM(@RetailerType))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Retailer Type should not be empty'		
			INSERT INTO Errorlog VALUES (43,@Tabname,'Retailer Type',@ErrDesc)
		END
		ELSE
		BEGIN
			IF LTRIM(RTRIM(@RetailerType))='Retailer' OR LTRIM(RTRIM(@RetailerType))='Sub Stockist'
			BEGIN
				IF @Po_ErrNo=0
				BEGIN
					SET @Po_ErrNo=0	
				END
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Retailer Type '+@RetailerType+ ' is not available'		
				INSERT INTO Errorlog VALUES (44,@Tabname,'Retailer Type',@ErrDesc)
			END
		END
		IF LTRIM(RTRIM(@RetailerFrequency))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Retailer Frequency should not be empty'		
			INSERT INTO Errorlog VALUES (45,@Tabname,'Retailer Frequency',@ErrDesc)
		END
		ELSE
		BEGIN
			IF LTRIM(RTRIM(@RetailerFrequency))='Weekly' OR LTRIM(RTRIM(@RetailerFrequency))='Bi-Weekly' OR LTRIM(RTRIM(@RetailerFrequency))='Fort Nightly' OR LTRIM(RTRIM(@RetailerFrequency))='Monthly' OR LTRIM(RTRIM(@RetailerFrequency))='Daily'
			BEGIN
				IF @Po_ErrNo=0
				BEGIN
					SET @Po_ErrNo=0	
				END
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Retailer Frequency '+@RetailerFrequency+ ' is not available'		
				INSERT INTO Errorlog VALUES (46,@Tabname,'Retailer Frequency',@ErrDesc)
			END
		END
		IF LTRIM(RTRIM(@RtrCrDaysAlert))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Credit Days Alert should not be empty'		
			INSERT INTO Errorlog VALUES (47,@Tabname,'Credit Days Alert',@ErrDesc)
		END
		ELSE
		BEGIN
			IF LTRIM(RTRIM(@RtrCrDaysAlert))='None' OR LTRIM(RTRIM(@RtrCrDaysAlert))='Alert & Allow' OR LTRIM(RTRIM(@RtrCrDaysAlert))='Alert & Stop'
			BEGIN
				IF @Po_ErrNo=0
				BEGIN
					SET @Po_ErrNo=0	
				END
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Credit Days Alert '+@RtrCrDaysAlert+ ' is not available'		
				INSERT INTO Errorlog VALUES (48,@Tabname,'Credit Days Alert',@ErrDesc)
			END
		END
		
		IF LTRIM(RTRIM(@RtrCrBillAlert))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Credit Bills Alert should not be empty'		
			INSERT INTO Errorlog VALUES (49,@Tabname,'Credit Bills Alert',@ErrDesc)
		END
		ELSE
		BEGIN
			IF LTRIM(RTRIM(@RtrCrBillAlert))='None' OR LTRIM(RTRIM(@RtrCrBillAlert))='Alert & Allow' OR LTRIM(RTRIM(@RtrCrBillAlert))='Alert & Stop'
			BEGIN
				IF @Po_ErrNo=0
				BEGIN
					SET @Po_ErrNo=0	
				END
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Credit Days Alert '+@RtrCrBillAlert+ ' is not available'		
				INSERT INTO Errorlog VALUES (50,@Tabname,'Credit Bills Alert',@ErrDesc)
			END
		END
		IF LTRIM(RTRIM(@RtrCrLimitAlert))=''
		BEGIN
			SET @Po_ErrNo=1
			SET @Taction=0
			SET @ErrDesc = 'Credit Limit Alert should not be empty'		
			INSERT INTO Errorlog VALUES (51,@Tabname,'Credit Days Alert',@ErrDesc)
		END
		ELSE
		BEGIN
			IF LTRIM(RTRIM(@RtrCrLimitAlert))='None' OR LTRIM(RTRIM(@RtrCrLimitAlert))='Alert & Allow' OR LTRIM(RTRIM(@RtrCrLimitAlert))='Alert & Stop'
			BEGIN
				IF @Po_ErrNo=0
				BEGIN
					SET @Po_ErrNo=0	
				END
			END
			ELSE
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Credit Limit Alert '+@RtrCrLimitAlert+ ' is not available'		
				INSERT INTO Errorlog VALUES (52,@Tabname,'Credit Limit Alert',@ErrDesc)
			END
		END
		SET @CmpRtrCode=''
		SELECT @RtrId=dbo.Fn_GetPrimaryKeyInteger(@CntTabname,@FldName,CAST(YEAR(GetDate()) AS INT),MONTH(GETDATE()))
		SELECT @CoaId=dbo.Fn_GetPrimaryKeyInteger('CoaMaster','CoaId',CAST(YEAR(GetDate()) AS INT),MONTH(GETDATE()))
		SELECT @AcCode=AcCode+1 FROM COAMaster WHERE CoaId=(SELECT MAX(A.CoaId) FROM COAMaster A Where A.MainGroup=2 and A.AcCode LIKE '216%')	
		IF (SELECT Status FROM Configuration WHERE ModuleId='RET33' AND ModuleName='Retailer')=1
		BEGIN			
			IF NOT EXISTS(SELECT * FROM Retailer)
			BEGIN
				UPDATE CompanyCounters SET CurrValue = 0 WHERE Tabname =  'Retailer' AND Fldname = 'CmpRtrCode'	
			END
			SELECT @CmpRtrCode=dbo.Fn_GetPrimaryKeyCmpString('Retailer','CmpRtrCode',CAST(YEAR(GetDate()) AS INT),MONTH(GETDATE()))			
		END
		ELSE
		BEGIN
			SET @CmpRtrCode=@RetailerCode
		END
		IF @CmpRtrCode=''
		BEGIN
			SET @Po_ErrNo=1		
			SET @Taction=0
			SET @ErrDesc = 'Company Retailer Code should not be empty'		
			INSERT INTO Errorlog VALUES (43,@Tabname,'Counter Value',@ErrDesc)
		END
		IF @RtrId=0
		BEGIN
			SET @Po_ErrNo=1		
			SET @Taction=0
			SET @ErrDesc = 'Reset the Counter Year Value '		
			INSERT INTO Errorlog VALUES (43,@Tabname,'Counter Value',@ErrDesc)
		END
		IF EXISTS (SELECT '*' FROM Configuration WHERE ModuleId = 'GENCONFIG30' AND ModuleName = 'General Configuration' AND Status = 1)
		BEGIN
			IF LTRIM(RTRIM(@PhoneNo))=''
			BEGIN
				--IF EXISTS (SELECT RtrPhoneNo from Retailer (Nolock) where RtrPhoneNo = @PhoneNo AND RtdId NOT IN (@RetailerCode))
				IF EXISTS (SELECT RtrPhoneNo from Retailer (Nolock) where RtrPhoneNo = @PhoneNo AND RtrCode NOT IN (@RetailerCode))
				BEGIN
					SET @Po_ErrNo=1		
					SET @Taction=0
					SET @ErrDesc = 'Retailer Phone Number not be Empty '		
					INSERT INTO Errorlog VALUES (43,@Tabname,'Phone Number',@ErrDesc)
				END
			END			
		END
		
		IF LTRIM(RTRIM(@PhoneNo))<>''
		BEGIN
			--IF EXISTS (SELECT RtrPhoneNo from Retailer (Nolock) where RtrPhoneNo = @PhoneNo AND RtrId  NOT IN (@RetailerCode))
			IF EXISTS (SELECT RtrPhoneNo from Retailer (Nolock) where RtrPhoneNo = @PhoneNo AND RtrCode  NOT IN (@RetailerCode))
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Retailer Phone Number should be unique '		
				INSERT INTO Errorlog VALUES (43,@Tabname,'Phone Number',@ErrDesc)
			END
		END
		IF LTRIM(RTRIM(@TINNumber))<>''
		BEGIN
			--IF EXISTS (SELECT RtrTINNo from Retailer (Nolock) where RtrTINNo = @TINNumber AND RtrId NOT IN (@RetailerCode))
			IF EXISTS (SELECT RtrTINNo from Retailer (Nolock) where RtrTINNo = @TINNumber AND RtrCode NOT IN (@RetailerCode))
			BEGIN
				SET @Po_ErrNo=1		
				SET @Taction=0
				SET @ErrDesc = 'Retailer Tin Number Should be unique '		
				INSERT INTO Errorlog VALUES (43,@Tabname,'TiN Number',@ErrDesc)
			END
		END				
		IF  @Taction=1 AND @Po_ErrNo=0
		BEGIN	
			INSERT INTO Retailer(RtrId,RtrCode,CmpRtrCode,RtrName,RtrAdd1,RtrAdd2,RtrAdd3,RtrPinNo,RtrPhoneNo,RtrEmailId,RtrKeyAcc,RtrCovMode,
			RtrRegDate,RtrDayOff,RtrStatus,RtrTaxable,RtrTaxType,RtrTINNo,RtrCSTNo,TaxGroupId,RtrCrBills,RtrCrLimit,RtrCrDays,
			RtrCashDiscPerc,RtrCashDiscCond,RtrCashDiscAmt,RtrLicNo,RtrLicExpiryDate,RtrDrugLicNo,RtrDrugExpiryDate,
			RtrPestLicNo,RtrPestExpiryDate,GeoMainId,RMId,VillageId,RtrResPhone1,RtrOffPhone1,RtrDepositAmt,RtrAnniversary,RtrDOB,CoaId,RtrOnAcc,
			RtrShipId,RtrType,RtrFrequency,RtrCrDaysAlert,RtrCrBillsAlert,RtrCrLimitAlert,Upload,Approved,XmlUpload,
			Availability,LastModBy,LastModDate,AuthId,AuthDate,RtrUniqueCode)--Gopi at 08/11/2016
			VALUES(@RtrId,@RetailerCode,@CmpRtrCode,@RetailerName,@Address1,@Address2,@Address3,CAST(@PinCode AS INT),@PhoneNo,@EmailId,
			(CASE @KeyAccount WHEN 'Yes' THEN 1 ELSE 0 END),
			(CASE @CoverageMode WHEN 'Order Booking' THEN 1 WHEN 'Counter Sales' THEN 2 WHEN 'Van Sales' THEN 3 END),
			@RegistrationDate,
			(CASE @DayOff WHEN 'Sunday' THEN 0 WHEN 'Monday' THEN 1 WHEN 'Tuesday' THEN 2 WHEN 'Wednesday' THEN 3 WHEN 'Thursday' THEN 4 WHEN 'Friday' THEN 5 WHEN 'Saturday' THEN 6 END),
			(CASE @Status WHEN 'Active' THEN 1 ELSE 0 END),
			(CASE @Taxable WHEN 'Yes' THEN 1 ELSE 0 END),
			(CASE @TaxType WHEN 'VAT' THEN 0 ELSE 1 END),@TINNumber,@CSTNumber,@TaxGroupId,CAST(@CreditBills AS INT),CAST(@CreditLimit AS NUMERIC(18,2)),CAST(@CreditDays AS INT),
			(CAST(@CashDiscountPercentage AS NUMERIC(18,2))),(CASE @CashDiscountCondition WHEN '>=' THEN 1 ELSE 0 END),CAST(@CashDiscountLimitValue AS NUMERIC (18,2)),
			@LicenseNumber,CONVERT(NVARCHAR(10),@LicNumberExDate,121),@DrugLicNumber,CONVERT(NVARCHAR(10),@DrugLicExDate,121),
			@PestLicNumber,CONVERT(NVARCHAR(10),@PestLicExDate,121),@GeoMainId,@RMId,@VillageId,@ResidencePhoneNo,@OfficePhoneNo,
			CAST(@DepositAmount AS NUMERIC(18,2)),CONVERT(NVARCHAR(10),GETDATE(),121),CONVERT(NVARCHAR(10),GETDATE(),121),@CoaId,0,0,
			(CASE @RetailerType WHEN 'Retailer' THEN 1 WHEN 'Sub Stockist' THEN 2 END),
			(CASE @RetailerFrequency WHEN 'Weekly' THEN 0 WHEN 'Bi-Weekly' THEN 1 WHEN 'Fort Nightly' THEN 2 WHEN 'Monthly' THEN 3 WHEN 'Daily' THEN 4 END),
			(CASE @RtrCrDaysAlert WHEN 'None' THEN 0 WHEN 'Alert & Allow' THEN 1 WHEN 'Alert & Stop' THEN 2 END),
			(CASE @RtrCrBillAlert WHEN 'None' THEN 0 WHEN 'Alert & Allow' THEN 1 WHEN 'Alert & Stop' THEN 2 END),
			(CASE @RtrCrLimitAlert WHEN 'None' THEN 0 WHEN 'Alert & Allow' THEN 1 WHEN 'Alert & Stop' THEN 2 END),
			'N',0,0,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121),'')
			UPDATE CompanyCounters SET CurrValue = CurrValue+1 WHERE Tabname =  'Retailer' AND Fldname = 'CmpRtrCode'
			SET @sSql='UPDATE CompanyCounters SET CurrValue =CurrValue'+'+1'+' WHERE Tabname =''Retailer'' AND Fldname =''CmpRtrCode'''
			INSERT INTO Translog(strSql1) VALUES (@sSql) 
			SET @sSql='INSERT INTO Retailer(RtrId,RtrCode,CmpRtrCode,RtrName,RtrAdd1,RtrAdd2,RtrAdd3,RtrPinNo,RtrPhoneNo,RtrEmailId,RtrKeyAcc,RtrCovMode,
			RtrRegDate,RtrDayOff,RtrStatus,RtrTaxable,RtrTaxType,RtrTINNo,RtrCSTNo,TaxGroupId,RtrCrBills,RtrCrLimit,RtrCrDays,RtrCashDiscPerc,
			RtrCashDiscCond,RtrCashDiscAmt,RtrLicNo,RtrDrugLicNo,RtrPestLicNo,GeoMainId,RMId,VillageId,RtrResPhone1,RtrOffPhone1,RtrDepositAmt,RtrAnniversary,RtrDOB,CoaId,RtrOnAcc,
			RtrShipId,RtrType,RtrFrequency,RtrCrDaysAlert,RtrCrBillsAlert,RtrCrLimitAlert,Upload,XmlUpload,Availability,LastModBy,LastModDate,AuthId,AuthDate,RtrLicExpiryDate,RtrDrugExpiryDate,RtrPestExpiryDate,Approved)
			VALUES('+CAST(@RtrId AS VARCHAR(10))+','''+@RetailerCode+''','''+@CmpRtrCode+''','''+@RetailerName+''','''+@Address1+''','''+@Address2+''','''+@Address3+''','+CAST(CAST(@PinCode AS INT)AS VARCHAR(10))+','''+@PhoneNo+''','''+@EmailId+''',
			'+CAST((CASE @KeyAccount WHEN 'Yes' THEN 1 ELSE 0 END)AS VARCHAR(10))+',
			'+CAST((CASE @CoverageMode WHEN 'Order Booking' THEN 1 WHEN 'Counter Sales' THEN 2 WHEN 'Van Sales' THEN 3 END)AS VARCHAR(10))+',
			'''+CAST(@RegistrationDate AS VARCHAR(12))+''',
			'+CAST((CASE @DayOff WHEN 'Sunday' THEN 0 WHEN 'Monday' THEN 1 WHEN 'Tuesday' THEN 2 WHEN 'Wednesday' THEN 3 WHEN 'Thursday' THEN 4 WHEN 'Friday' THEN 5 WHEN 'Saturday' THEN 6 END)AS VARCHAR(10))+',
			'+CAST((CASE @Status WHEN 'Active' THEN 1 ELSE 0 END)AS VARCHAR(10))+',
			'+CAST((CASE @Taxable WHEN 'Yes' THEN 1 ELSE 0 END)AS VARCHAR(10))+',
			'+CAST((CASE @TaxType WHEN 'VAT' THEN 0 ELSE 1 END)AS VARCHAR(10))+','''+@TINNumber+''','''+@CSTNumber+''','+CAST(@TaxGroupId AS VARCHAR(10))+','+CAST(CAST(@CreditBills AS INT) AS VARCHAR(10))+','+CAST(CAST(@CreditLimit AS NUMERIC(18,2)) AS VARCHAR(20))+','+CAST(CAST(@CreditDays AS INT) AS VARCHAR(10))+',
			'+CAST((CAST(@CashDiscountPercentage AS NUMERIC(18,2)))AS VARCHAR(20))+','+CAST((CASE @CashDiscountCondition WHEN '>=' THEN 1 ELSE 0 END)AS VARCHAR(10))+','+CAST(CAST(@CashDiscountLimitValue AS NUMERIC (18,2))AS VARCHAR(20))+',
			'''+@LicenseNumber+''','''+@DrugLicNumber+''',
			'''+@PestLicNumber+''','+CAST(@GeoMainId AS VARCHAR(10))+','+CAST(@RMId AS VARCHAR(10))+','+CAST(@VillageId AS VARCHAR(10))+','''+@ResidencePhoneNo+''','''+@OfficePhoneNo+''',
			'+CAST(CAST(@DepositAmount AS NUMERIC(18,2))AS VARCHAR(20))+','''+CONVERT(NVARCHAR(10),GETDATE(),121)+''','''+CONVERT(NVARCHAR(10),GETDATE(),121)+''','+CAST(@CoaId AS VARCHAR(10))+',0,0
			,'+CAST((CASE @RetailerType WHEN 'Retailer' THEN 1 WHEN 'Sub Stockist' THEN 2 END) AS VARCHAR(10))+'
			,'+CAST((CASE @RetailerFrequency WHEN 'Weekly' THEN 0 WHEN 'Bi-Weekly' THEN 1 WHEN 'Fort Nightly' THEN 2 WHEN 'Monthly' THEN 3 WHEN 'Daily' THEN 4 END) AS VARCHAR(10))+'
			,'+CAST((CASE @RtrCrDaysAlert WHEN 'None' THEN 0 WHEN 'Alert & Allow' THEN 1 WHEN 'Alert & Stop' THEN 2 END) AS VARCHAR(10))+'
			,'+CAST((CASE @RtrCrBillAlert WHEN 'None' THEN 0 WHEN 'Alert & Allow' THEN 1 WHEN 'Alert & Stop' THEN 2 END) AS VARCHAR(10))+'
			,'+CAST((CASE @RtrCrLimitAlert WHEN 'None' THEN 0 WHEN 'Alert & Allow' THEN 1 WHEN 'Alert & Stop' THEN 2 END)AS VARCHAR(10))+'
			,''N'',0,0,1,1,'''+CONVERT(NVARCHAR(10),GETDATE(),121)+''',1,'''+CONVERT(NVARCHAR(10),GETDATE(),121)+''',0'
			
			IF LTRIM(RTRIM(@LicNumberExDate)) IS NULL
			BEGIN
				SET @sSql=@sSql + ',Null'
			END
			ELSE
			BEGIN
				SET @sSql=@sSql + ','''+CONVERT(NVARCHAR(10),@LicNumberExDate,121)+''''
			END
			IF LTRIM(RTRIM(@DrugLicExDate))IS NULL
			BEGIN
				SET @sSql=@sSql + ',Null'
			END
			ELSE
			BEGIN
				SET @sSql=@sSql + ','''+CONVERT(NVARCHAR(10),@DrugLicExDate,121)+''''
			END
			IF LTRIM(RTRIM(@PestLicExDate))IS NULL
			BEGIN
				SET @sSql=@sSql + ',Null)'
			END
			ELSE
			BEGIN
				SET @sSql=@sSql + ','''+CONVERT(NVARCHAR(10),@PestLicExDate,121)+''')'
			END
			INSERT INTO Translog(strSql1) VALUES (@sSql)
			UPDATE Counters SET CurrValue = CurrValue+1 WHERE Tabname =  @CntTabname AND Fldname = @FldName
			SET @sSql='UPDATE Counters SET CurrValue =CurrValue'+'+1'+' WHERE Tabname ='''+@CntTabname+''' AND Fldname ='''+@FldName+''''
			INSERT INTO Translog(strSql1) VALUES (@sSql)
			IF EXISTS (SELECT * FROM Retailer WHERE RtrId=@RtrId)
			BEGIN
				INSERT INTO CoaMaster (CoaId,AcCode,AcName,AcLevel,MainGroup,Status,Availability,LastModBy,LastModDate,AuthId,AuthDate)
				VALUES (@CoaId,@AcCode,@RetailerName,4,2,2,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121))
				SET @sSql='INSERT INTO CoaMaster (CoaId,AcCode,AcName,AcLevel,MainGroup,Status,Availability,LastModBy,LastModDate,AuthId,AuthDate)
				VALUES ('+CAST(@CoaId AS VARCHAR(10))+','''+@AcCode+''','''+@RetailerName+''',4,2,2,1,1,'''+CONVERT(NVARCHAR(10),GETDATE(),121)+''',1,'''+CONVERT(NVARCHAR(10),GETDATE(),121)+''')'
				INSERT INTO Translog(strSql1) VALUES (@sSql)
				
				IF @PotentialClassCode<>''
				BEGIN
					DELETE FROM RetailerPotentialClassMap WHERE RtrId=@RtrId
					SET @sSql='DELETE FROM RetailerPotentialClassMap WHERE RtrId='+CAST(@RtrId AS VARCHAR(10))+''
					INSERT INTO RetailerPotentialClassMap (RtrId,RtrPotentialClassId,Availability,LastModBy,LastModDate,AuthId,AuthDate) VALUES(@RtrId,@RtrClassId,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121))
					SET @sSql='INSERT INTO RetailerPotentialClassMap (RtrId,RtrPotentialClassId,Availability,LastModBy,LastModDate,AuthId,AuthDate)
					VALUES('+CAST(@RtrId AS VARCHAR(10))+','+CAST(@RtrClassId AS VARCHAR(10))+',1,1,'''+CONVERT(NVARCHAR(10),GETDATE(),121)+''',1,'''+CONVERT(NVARCHAR(10),GETDATE(),121)+''')'
				END
				UPDATE Counters SET CurrValue = CurrValue+1 WHERE Tabname =  'CoaMaster' AND Fldname = 'CoaId'
				SET @sSql='UPDATE Counters SET CurrValue =CurrValue'+'+1'+' WHERE Tabname =  ''CoaMaster'' AND Fldname = ''CoaId'''
				INSERT INTO Translog(strSql1) VALUES (@sSql)
			END			
		END
		IF  @Taction=2 AND @Po_ErrNo=0
		BEGIN
			UPDATE Retailer SET  RtrName=@RetailerName,RtrAdd1=@Address1,RtrAdd2=@Address2,RtrAdd3=@Address3,
			RtrPinNo=CAST (@PinCode AS INT),RtrPhoneNo=@PhoneNo,
			RtrEmailId=@EmailId,
			RtrKeyAcc=(CASE @KeyAccount WHEN 'Yes' THEN 1 ELSE 0 END),
			RtrCovMode=(CASE @CoverageMode WHEN 'Order Booking' THEN 1 WHEN 'Counter Sales' THEN 2 WHEN 'Van Sales' THEN 3 END)
			,RtrRegDate=CONVERT(NVARCHAR(10),@RegistrationDate,121),
			RtrDayOff=(CASE @DayOff WHEN 'Sunday' THEN 0 WHEN 'Monday' THEN 1 WHEN 'Tuesday' THEN 2 WHEN 'Wednesday' THEN 3 WHEN 'Thursday' THEN 4 WHEN 'Friday' THEN 5 WHEN 'Saturday' THEN 6 END),
			RtrStatus=(CASE @Status WHEN 'Active' THEN 1 ELSE 0 END),
			RtrTaxable=(CASE @Taxable WHEN 'Yes' THEN 1 ELSE 0 END),
			RtrTaxType=(CASE @TaxType WHEN 'VAT' THEN 0 ELSE 1 END),
			RtrTINNo=@TINNumber,
			RtrCSTNo=@CSTNumber,TaxGroupId=@TaxGroupId,RtrCrBills=CAST(@CreditBills AS INT),RtrCrLimit=CAST(@CreditLimit AS NUMERIC(18,2)),RtrCrDays=CAST(@CreditDays AS INT),
			RtrCashDiscPerc=CAST(@CashDiscountPercentage AS NUMERIC(18,2)),
			RtrCashDiscCond=(CASE @CashDiscountCondition WHEN '>=' THEN 1 ELSE 0 END),RtrCashDiscAmt=CAST(@CashDiscountLimitValue AS NUMERIC(18,2)),
			RtrLicNo=@LicenseNumber,RtrLicExpiryDate=CONVERT(NVARCHAR(10),@LicNumberExDate,121),RtrDrugLicNo=@DrugLicNumber,
			RtrDrugExpiryDate=CONVERT(NVARCHAR(10),@DrugLicExDate,121),RtrPestLicNo=@PestLicNumber,
			RtrPestExpiryDate=CONVERT(NVARCHAR(10),@PestLicExDate,121),GeoMainId=@GeoMainId,
			RMId=@RMId,VillageId=@VillageId,RtrResPhone1=@ResidencePhoneNo,RtrOffPhone1=@OfficePhoneNo,RtrDepositAmt=CAST(@DepositAmount AS NUMERIC(18,2)), 
			RtrType=(CASE @RetailerType WHEN 'Retailer' THEN 1 WHEN 'Sub Stockist' THEN 2 END),
			RtrFrequency=(CASE @RetailerFrequency WHEN 'Weekly' THEN 0 WHEN 'Bi-Weekly' THEN 1 WHEN 'Fort Nightly' THEN 2 WHEN 'Monthly' THEN 3 WHEN 'Daily' THEN 4 END),
			RtrCrDaysAlert=(CASE @RtrCrDaysAlert WHEN 'None' THEN 0 WHEN 'Alert & Allow' THEN 1 WHEN 'Alert & Stop' THEN 2 END),
			RtrCrBillsAlert=(CASE @RtrCrBillAlert WHEN 'None' THEN 0 WHEN 'Alert & Allow' THEN 1 WHEN 'Alert & Stop' THEN 2 END),
			RtrCrLimitAlert=(CASE @RtrCrLimitAlert WHEN 'None' THEN 0 WHEN 'Alert & Allow' THEN 1 WHEN 'Alert & Stop' THEN 2 END)
			WHERE RtrCode=@RetailerCode
			SET @sSql='UPDATE Retailer SET  RtrName='''+@RetailerName+''',RtrAdd1='''+@Address1+''',RtrAdd2='''+@Address2+''',RtrAdd3='''+@Address3+''',
			RtrPinNo='+CAST(CAST(@PinCode AS INT) AS VARCHAR(20))+',RtrPhoneNo='''+@PhoneNo+''',
			RtrEmailId='''+@EmailId+''',
			RtrKeyAcc='+CAST((CASE @KeyAccount WHEN 'Yes' THEN 1 ELSE 0 END)AS VARCHAR(10))+',
			RtrCovMode='+CAST((CASE @CoverageMode WHEN 'Order Booking' THEN 1 WHEN 'Counter Sales' THEN 2 WHEN 'Van Sales' THEN 3 END)AS VARCHAR(10))+'
			,RtrRegDate='''+CONVERT(NVARCHAR(10),@RegistrationDate,121)+''',
			RtrDayOff='+CAST((CASE @DayOff WHEN 'Sunday' THEN 0 WHEN 'Monday' THEN 1 WHEN 'Tuesday' THEN 2 WHEN 'Wednesday' THEN 3 WHEN 'Thursday' THEN 4 WHEN 'Friday' THEN 5 WHEN 'Saturday' THEN 6 END)AS VARCHAR(10))+',
			RtrStatus='+CAST((CASE @Status WHEN 'Active' THEN 1 ELSE 0 END)AS VARCHAR(10))+',
			RtrTaxable='+CAST((CASE @Taxable WHEN 'Yes' THEN 1 ELSE 0 END)AS VARCHAR(10))+',
			RtrTaxType='+CAST((CASE @TaxType WHEN 'VAT' THEN 0 ELSE 1 END)AS VARCHAR(10))+',
			RtrTINNo='''+@TINNumber+''',
			RtrCSTNo='''+@CSTNumber+''',TaxGroupId='+CAST(@TaxGroupId AS VARCHAR(10))+',RtrCrBills='+CAST(CAST(@CreditBills AS INT) AS VARCHAR(10))+',RtrCrLimit='+CAST(CAST(@CreditLimit AS NUMERIC(18,2)) AS VARCHAR(20))+',RtrCrDays='+CAST(CAST(@CreditDays AS INT) AS VARCHAR(10))+',
			RtrCashDiscPerc='+CAST(CAST(@CashDiscountPercentage AS NUMERIC(18,2)) AS VARCHAR(20))+',
			RtrCashDiscCond='+CAST((CASE @CashDiscountCondition WHEN '>=' THEN 1 ELSE 0 END)AS VARCHAR(10))+',RtrCashDiscAmt='+CAST(CAST(@CashDiscountLimitValue AS NUMERIC(18,2)) AS VARCHAR(20))+',
			RtrLicNo='''+@LicenseNumber+''',RtrDrugLicNo='''+@DrugLicNumber+''',RtrPestLicNo='''+@PestLicNumber+''',GeoMainId='+CAST(@GeoMainId AS VARCHAR(10))+',
			RMId='+CAST(@RMId AS VARCHAR(20))+',VillageId='+CAST(@VillageId AS VARCHAR(20))+',RtrResPhone1='''+@ResidencePhoneNo+''',RtrOffPhone1='''+@OfficePhoneNo+''',RtrDepositAmt='+CAST(CAST(@DepositAmount AS NUMERIC(18,2)) AS VARCHAR(20))+''
					
			IF LTRIM(RTRIM(@LicNumberExDate)) IS NULL
			BEGIN
				SET @sSql=@sSql + ',RtrLicExpiryDate=Null'
			END
			ELSE
			BEGIN
				SET @sSql=@sSql + ',RtrLicExpiryDate='''+CONVERT(NVARCHAR(10),@LicNumberExDate,121)+''''
			END
			IF LTRIM(RTRIM(@DrugLicExDate))IS NULL
			BEGIN
				SET @sSql=@sSql + ',RtrDrugExpiryDate=Null'
			END
			ELSE
			BEGIN
				SET @sSql=@sSql + ',RtrDrugExpiryDate='''+CONVERT(NVARCHAR(10),@DrugLicExDate,121)+''''
			END
			IF LTRIM(RTRIM(@PestLicExDate))IS NULL
			BEGIN
				SET @sSql=@sSql + ',RtrPestExpiryDate=Null'
			END
			ELSE
			BEGIN
				SET @sSql=@sSql + ',RtrPestExpiryDate='''+CONVERT(NVARCHAR(10),@PestLicExDate,121)+''''
			END
			SET @sSql=@sSql + ',RtrType='+CAST((CASE @RetailerType WHEN 'Retailer' THEN 1 WHEN 'Sub Stockist' THEN 2 END) AS VARCHAR(10))+'
			,RtrFrequency='+CAST((CASE @RetailerFrequency WHEN 'Weekly' THEN 0 WHEN 'Bi-Weekly' THEN 1 WHEN 'Fort Nightly' THEN 2 WHEN 'Monthly' THEN 3 WHEN 'Daily' THEN 4 END) AS VARCHAR(10))+'
			,RtrCrDaysAlert='+CAST((CASE @RtrCrDaysAlert WHEN 'None' THEN 0 WHEN 'Alert & Allow' THEN 1 WHEN 'Alert & Stop' THEN 2 END) AS VARCHAR(10))+'
			,RtrCrBillsAlert='+CAST((CASE @RtrCrBillAlert WHEN 'None' THEN 0 WHEN 'Alert & Allow' THEN 1 WHEN 'Alert & Stop' THEN 2 END) AS VARCHAR(10))+'
			,RtrCrLimitAlert='+CAST((CASE @RtrCrLimitAlert WHEN 'None' THEN 0 WHEN 'Alert & Allow' THEN 1 WHEN 'Alert & Stop' THEN 2 END)AS VARCHAR(10))+''
			SET @sSql=@sSql +' WHERE RtrCode='''+@RetailerCode+''''
			INSERT INTO Translog(strSql1) VALUES (@sSql)
			SELECT @CoaId=CoaId FROM Retailer WHERE RtrCode=@RetailerCode
			UPDATE CoaMAster SET AcName=@RetailerName WHERE CoaId=@CoaId
			SET @sSql='UPDATE CoaMaster SET AcName='''+@RetailerName+''' WHERE CoaId='+CAST(@CoaId AS VARCHAR(10))+''
			INSERT INTO Translog(strSql1) VALUES (@sSql)
			SELECT @RtrId=RtrId FROM Retailer WHERE RtrCode=@RetailerCode
			IF @PotentialClassCode<>''
			BEGIN
				DELETE FROM RetailerPotentialClassMap WHERE RtrId=@RtrId
				SET @sSql='DELETE FROM RetailerPotentialClassMap WHERE RtrId='+CAST(@RtrId AS VARCHAR(10))+''
				INSERT INTO Translog(strSql1) VALUES (@sSql)
				INSERT INTO RetailerPotentialClassMap (RtrId,RtrPotentialClassId,Availability,LastModBy,LastModDate,AuthId,AuthDate)
				VALUES(@RtrId,@RtrClassId,1,1,CONVERT(NVARCHAR(10),GETDATE(),121),1,CONVERT(NVARCHAR(10),GETDATE(),121))
				SET @sSql='INSERT INTO RetailerPotentialClassMap (RtrId,RtrPotentialClassId,Availability,LastModBy,LastModDate,AuthId,AuthDate)
				VALUES('+CAST(@RtrId AS VARCHAR(10))+','+CAST(@RtrClassId AS VARCHAR(10))+',1,1,'''+CONVERT(NVARCHAR(10),GETDATE(),121)+''',1,'''+CONVERT(NVARCHAR(10),GETDATE(),121)+''')'
				INSERT INTO Translog(strSql1) VALUES (@sSql)
			END
		END
		FETCH NEXT FROM Cur_Retailer INTO @RetailerCode,@RetailerName,@Address1,@Address2,@Address3,@PinCode,@PhoneNo,@EmailId,@KeyAccount,@CoverageMode,@RegistrationDate,@DayOff,
		@Status,@Taxable,@TaxType,@TINNumber,@CSTNumber,@TaxGroup,@CreditBills,@CreditLimit,@CreditDays,
		@CashDiscountPercentage,@CashDiscountCondition,@CashDiscountLimitValue,@LicenseNumber,
		@LicNumberExDate,@DrugLicNumber,@DrugLicExDate,@PestLicNumber,@PestLicExDate,@GeographyHierarchyValue,
		@DeliveryRoute,@VillageCode,@ResidencePhoneNo,@OfficePhoneNo,@DepositAmount,@PotentialClassCode,
		@RetailerType,@RetailerFrequency,@RtrCrDaysAlert,@RtrCrBillAlert,@RtrCrLimitAlert
	END
	CLOSE Cur_Retailer
	DEALLOCATE Cur_Retailer
	RETURN
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE Name ='Proc_GetStockLedgerSummaryDatewiseParle' AND XTYPE ='P')
DROP PROCEDURE  Proc_GetStockLedgerSummaryDatewiseParle
GO
CREATE PROCEDURE  Proc_GetStockLedgerSummaryDatewiseParle
(
	@Pi_FromDate 		DATETIME,
	@Pi_ToDate		DATETIME,
	@Pi_UserId		INT,
	@SupTaxGroupId		INT,
	@RtrTaxFroupId		INT,
	@Pi_OfferStock		INT
)
AS
/*********************************
* PROCEDURE	: Proc_GetStockLedgerSummaryDatewise
* PURPOSE	: To Get Stock Ledger Detail
* CREATED	: Nandakumar R.G
* CREATED DATE	: 15/02/2007
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
------------------------------------------------
* 11/06/2014	Muthuvelsamy R	PMS Id DCRSTPAR0511
*********************************/
SET NOCOUNT ON
BEGIN
DECLARE @StockType AS NUMERIC(18,0)
IF EXISTS (SELECT DISTINCT SelValue FROM ReportFilterDt WHERE RptId = 245 AND SelId = 291 AND SelValue <> 0 AND UsrId = @Pi_UserId)
BEGIN 	
	SELECT @StockType = SystemStockType FROM ReportFilterDt A WITH (NOLOCK),StockType B WITH (NOLOCK) 
	WHERE A.SelValue = B.StockTypeId AND RptId = 245 AND SelId = 291 AND UsrId = @Pi_UserId
END
ELSE
BEGIN
   SET @StockType = 0
END
	TRUNCATE TABLE TempStockLedSummaryTotal
	IF @SupTaxGroupId+@RtrTaxFroupId>0
	BEGIN
		DELETE FROM TaxForReport WHERE UsrId=@Pi_UserId AND RptId=100
		EXEC Proc_ReportTaxCalculation @SupTaxGroupId,@RtrTaxFroupId,1,20,5,@Pi_UserId,100
	END
	
	DECLARE @ProdDetail TABLE
		(
			lcnid	INT,
			PrdBatId INT,
			TransDate DATETIME
		)
	DELETE FROM @ProdDetail
--	INSERT INTO @ProdDetail
--		(
--			lcnid,PrdBatId,TransDate
--		)
--	
--	SELECT a.lcnid,a.PrdBatID,a.TransDate FROM
--	(
--		select lcnid,prdbatid,max(TransDate) as TransDate  FROM StockLedger Stk (nolock)
--			WHERE Stk.TransDate NOT BETWEEN @Pi_FromDate AND @Pi_ToDate
--		Group by lcnid,prdbatid
--	) a LEFT OUTER JOIN
--	(
--		select distinct lcnid,prdbatid,max(TransDate) as TransDate FROM StockLedger Stk (nolock)
--			WHERE Stk.TransDate BETWEEN @Pi_FromDate AND @Pi_ToDate
--		Group by lcnid,prdbatid
--	) b
--	on a.lcnid = b.lcnid and a.prdbatid = b.prdbatid
--	where b.lcnid is null and b.prdbatid is null
			
	INSERT INTO @ProdDetail  
	(  
		LcnId,PrdBatId,TransDate  
	)  
	SELECT LcnId,PrdBatId,MAX(TransDate) FROM StockLedger SL(nolock)  
	/*Code Modified by Muthuvelsamy R for the PMS Id DCRSTPAR0511 begins here*/
	--WHERE TransDate <@Pi_FromDate AND CAST(LcnId AS NVARCHAR(10))+'~'+CAST(PrdId AS NVARCHAR(10))+'~'+CAST(LcnId AS NVARCHAR(10)) NOT IN
	--(SELECT CAST(LcnId AS NVARCHAR(10))+'~'+CAST(PrdId AS NVARCHAR(10))+'~'+CAST(LcnId AS NVARCHAR(10)) 
	--FROM StockLedger WHERE TransDAte BETWEEN @Pi_FromDate AND @Pi_ToDate)
	WHERE TransDate <@Pi_FromDate AND NOT EXISTS
	(SELECT CAST(LcnId AS NVARCHAR(10))+'~'+CAST(PrdId AS NVARCHAR(10))+'~'+CAST(LcnId AS NVARCHAR(10)) 
	FROM StockLedger X(NOLOCK) WHERE TransDAte BETWEEN @Pi_FromDate AND @Pi_ToDate 
	AND X.PrdId = SL.PrdId AND X.PrdBatId = SL.PrdBatId AND X.LcnId = SL.LcnId)
	/*Code Modified by Muthuvelsamy R for the PMS Id DCRSTPAR0511 ends here*/
	GROUP BY LcnId,PrdBatId
	DELETE FROM TempStockLedSummary WHERE UserId=@Pi_UserId
	
	
	
	--      Stocks for the given date---------
	IF @Pi_OfferStock=1
	BEGIN
		INSERT INTO TempStockLedSummary
		(
		TransDate,LcnId,LcnName,PrdId,PrdDCode,PrdName,PrdBatId,PrdBatCode,Opening,
		Purchase,Sales,Adjustment,Closing,
		PurchaseRate,OpnPurRte,PurPurRte,SalPurRte,AdjPurRte,CloPurRte,SellingRate,OpnSelRte,
		PurSelRte,SalSelRte,AdjSelRte,CloSelRte,
		BatchSeqId,PrdCtgValLinkCode,CmpId,Status,UserId,TotalStock
		)			
		SELECT Sl.TransDate AS TransDate,Sl.LcnId AS LcnId,
		Lcn.LcnName,Sl.PrdId,Prd.PrdDCode,Prd.PrdName,Sl.PrdBatId,PrdBat.PrdBatCode,
		(CASE @StockType WHEN 1 THEN Sl.SalOpenStock WHEN 2 THEN Sl.UnSalOpenStock WHEN 3 THEN Sl.OfferOpenStock
		ELSE (Sl.SalOpenStock+Sl.UnSalOpenStock+Sl.OfferOpenStock) END) AS Opening,
		(CASE @StockType WHEN 1 THEN Sl.SalPurchase WHEN 2 THEN Sl.UnsalPurchase WHEN 3 THEN Sl.OfferPurchase
		ELSE (Sl.SalPurchase+Sl.UnsalPurchase+Sl.OfferPurchase) END) AS Purchase,
		(CASE @StockType WHEN 1 THEN Sl.SalSales WHEN 2 THEN Sl.UnSalSales WHEN 3 THEN Sl.OfferSales
		ELSE (Sl.SalSales+Sl.UnSalSales+Sl.OfferSales) END) AS Sales,
		(CASE @StockType WHEN 1 THEN (-Sl.SalPurReturn+Sl.SalStockIn-Sl.SalStockOut+Sl.SalSalesReturn+Sl.SalStkJurIn-Sl.SalStkJurOut+
		Sl.SalBatTfrIn-Sl.SalBatTfrOut+Sl.SalLcnTfrIn-Sl.SalLcnTfrOut-Sl.SalReplacement)
		WHEN 2 THEN	(-Sl.UnSalPurReturn+Sl.UnSalStockIn-Sl.UnSalStockOut+Sl.UnSalSalesReturn+Sl.UnSalStkJurIn-Sl.UnSalStkJurOut+
		Sl.UnSalBatTfrIn-Sl.UnSalBatTfrOut+Sl.UnSalLcnTfrIn-Sl.UnSalLcnTfrOut+Sl.DamageIn-Sl.DamageOut)	
		WHEN 3 THEN	(-Sl.OfferPurReturn+Sl.OfferStockIn-Sl.OfferStockOut+Sl.OfferSalesReturn+Sl.OfferStkJurIn-Sl.OfferStkJurOut+
		Sl.OfferBatTfrIn-Sl.OfferBatTfrOut+Sl.OfferLcnTfrIn-Sl.OfferLcnTfrOut-Sl.OfferReplacement)
		ELSE(-Sl.SalPurReturn-Sl.UnsalPurReturn-Sl.OfferPurReturn+Sl.SalStockIn+Sl.UnSalStockIn+Sl.OfferStockIn-
		Sl.SalStockOut-Sl.UnSalStockOut-Sl.OfferStockOut+Sl.SalSalesReturn+Sl.UnSalSalesReturn+Sl.OfferSalesReturn+
		Sl.SalStkJurIn+Sl.UnSalStkJurIn+Sl.OfferStkJurIn-Sl.SalStkJurOut-Sl.UnSalStkJurOut-Sl.OfferStkJurOut+
		Sl.SalBatTfrIn+Sl.UnSalBatTfrIn+Sl.OfferBatTfrIn-Sl.SalBatTfrOut-Sl.UnSalBatTfrOut-Sl.OfferBatTfrOut+
		Sl.SalLcnTfrIn+Sl.UnSalLcnTfrIn+Sl.OfferLcnTfrIn-Sl.SalLcnTfrOut-Sl.UnSalLcnTfrOut-Sl.OfferLcnTfrOut-
		Sl.SalReplacement-Sl.OfferReplacement+Sl.DamageIn-Sl.DamageOut)END) AS Adjustments,
		(CASE @StockType WHEN 1 THEN Sl.SalClsStock WHEN 2 THEN Sl.UnSalClsStock WHEN 3 THEN Sl.OfferClsStock
		ELSE (Sl.SalClsStock+Sl.UnSalClsStock+Sl.OfferClsStock) END) AS Closing,
		0,0,0,0,0,0,0,0,0,0,0,0,
		PrdBat.BatchSeqId,PCV.PrdCtgValLinkCode,Prd.CmpId,PrdBat.Status,@Pi_UserId,0
		FROM
		Product Prd (NOLOCK),ProductCategoryValue PCV (NOLOCK),ProductBatch PrdBat (NOLOCK),StockLedger Sl (NOLOCK),Location Lcn (NOLOCK)
		WHERE Sl.PrdId = Prd.PrdId AND
		Sl.TransDate BETWEEN @Pi_FromDate AND @Pi_ToDate AND
		PrdBat.PrdBatId = Sl.PrdBatId AND
		Lcn.LcnId = Sl.LcnId AND
		Prd.PrdCtgValMainId=PCV.PrdCtgValMainId
		ORDER BY Sl.TransDate,Prd.PrdId,PrdBat.PrdBatId,Lcn.LcnId
	END
	ELSE
	BEGIN
		INSERT INTO TempStockLedSummary
		(
		TransDate,LcnId,LcnName,PrdId,PrdDCode,PrdName,PrdBatId,PrdBatCode,Opening,
		Purchase,Sales,Adjustment,Closing,
		PurchaseRate,OpnPurRte,PurPurRte,SalPurRte,AdjPurRte,CloPurRte,SellingRate,OpnSelRte,
		PurSelRte,SalSelRte,AdjSelRte,CloSelRte,
		BatchSeqId,PrdCtgValLinkCode,CmpId,Status,UserId,TotalStock
		)			
		SELECT Sl.TransDate AS TransDate,Sl.LcnId AS LcnId,
		Lcn.LcnName,Sl.PrdId,Prd.PrdDCode,Prd.PrdName,Sl.PrdBatId,PrdBat.PrdBatCode,
		(CASE @StockType WHEN 1 THEN Sl.SalOpenStock WHEN 2 THEN Sl.UnSalOpenStock WHEN 3 THEN 0
		ELSE (Sl.SalOpenStock+Sl.UnSalOpenStock) END) AS Opening,
		(CASE @StockType WHEN 1 THEN Sl.SalPurchase WHEN 2 THEN Sl.UnsalPurchase WHEN 3 THEN 0
		ELSE (Sl.SalPurchase+Sl.UnsalPurchase) END) AS Purchase,
		(CASE @StockType WHEN 1 THEN Sl.SalSales WHEN 2 THEN Sl.UnSalSales WHEN 3 THEN 0
		ELSE (Sl.SalSales+Sl.UnSalSales) END) AS Sales,
		(CASE @StockType WHEN 1 THEN (-Sl.SalPurReturn+Sl.SalStockIn-Sl.SalStockOut+Sl.SalSalesReturn+Sl.SalStkJurIn-Sl.SalStkJurOut+
		Sl.SalBatTfrIn-Sl.SalBatTfrOut+Sl.SalLcnTfrIn-Sl.SalLcnTfrOut-Sl.SalReplacement)
		WHEN 2 THEN	(-Sl.UnSalPurReturn+Sl.UnSalStockIn-Sl.UnSalStockOut+Sl.UnSalSalesReturn+Sl.UnSalStkJurIn-Sl.UnSalStkJurOut+
		Sl.UnSalBatTfrIn-Sl.UnSalBatTfrOut+Sl.UnSalLcnTfrIn-Sl.UnSalLcnTfrOut+Sl.DamageIn-Sl.DamageOut)	
		--Commented and added by Rajesh ICRSTPAR4454
		--WHEN 3 THEN	0 ELSE(-Sl.SalPurReturn-Sl.UnsalPurReturn+Sl.SalStockIn+Sl.UnSalStockIn+Sl.SalStockOut-Sl.UnSalStockOut
		WHEN 3 THEN	0 ELSE(-Sl.SalPurReturn-Sl.UnsalPurReturn+Sl.SalStockIn+Sl.UnSalStockIn-Sl.SalStockOut-Sl.UnSalStockOut
		--Till Here 
		
		+Sl.SalSalesReturn+Sl.UnSalSalesReturn+Sl.SalStkJurIn+Sl.UnSalStkJurIn-Sl.SalStkJurOut-Sl.UnSalStkJurOut+
		Sl.SalBatTfrIn+Sl.UnSalBatTfrIn-Sl.SalBatTfrOut-Sl.UnSalBatTfrOut+Sl.SalLcnTfrIn+Sl.UnSalLcnTfrIn-Sl.SalLcnTfrOut-Sl.UnSalLcnTfrOut-
		Sl.SalReplacement+Sl.DamageIn-Sl.DamageOut)END) AS Adjustments,
		(CASE @StockType WHEN 1 THEN Sl.SalClsStock WHEN 2 THEN Sl.UnSalClsStock WHEN 3 THEN 0
		ELSE (Sl.SalClsStock+Sl.UnSalClsStock) END) AS Closing,
		0,0,0,0,0,0,0,0,0,0,0,0,
		PrdBat.BatchSeqId,PCV.PrdCtgValLinkCode,Prd.CmpId,PrdBat.Status,@Pi_UserId,0
		FROM
		Product Prd (NOLOCK),ProductCategoryValue PCV (NOLOCK),ProductBatch PrdBat (NOLOCK),StockLedger Sl (NOLOCK),Location Lcn (NOLOCK)
		WHERE Sl.PrdId = Prd.PrdId AND
		Sl.TransDate BETWEEN @Pi_FromDate AND @Pi_ToDate AND
		PrdBat.PrdBatId = Sl.PrdBatId AND
		Lcn.LcnId = Sl.LcnId AND
		Prd.PrdCtgValMainId=PCV.PrdCtgValMainId
		ORDER BY Sl.TransDate,Prd.PrdId,PrdBat.PrdBatId,Lcn.LcnId
	END	
	--      Stocks for those not included in the given date---------
	IF @Pi_OfferStock=1
	BEGIN
		INSERT INTO TempStockLedSummary
		(
		TransDate,LcnId,LcnName,PrdId,PrdDCode,PrdName,PrdBatId,PrdBatCode,Opening,
		Purchase,Sales,Adjustment,Closing,
		PurchaseRate,OpnPurRte,PurPurRte,SalPurRte,AdjPurRte,CloPurRte,SellingRate,OpnSelRte,
		PurSelRte,SalSelRte,AdjSelRte,CloSelRte,
		BatchSeqId,PrdCtgValLinkCode,CmpId,Status,UserId,TotalStock
		)			
		SELECT @Pi_FromDate AS TransDate,ISNULL(Sl.LcnId,0) AS LcnId,
		IsNull(Lcn.LcnName,'')AS LcnName,ISNULL(Sl.PrdId,Prd.PrdId)AS PrdId,ISNULL(Prd.PrdDCode,'') AS PrdDCode,
		ISNULL(Prd.PrdName,'') AS PrdName,ISNULL(Sl.PrdBatId,0) AS PrdBatId,
		ISNULL(PrdBat.PrdBatCode,'') AS PrdBatCode,
		(CASE @StockType WHEN 1 THEN ISNULL(Sl.SalClsStock,0) WHEN 2 THEN ISNULL(Sl.UnSalClsStock,0) WHEN 3 THEN ISNULL(Sl.OfferClsStock,0)
		ELSE (ISNULL(Sl.SalClsStock,0)+ISNULL(Sl.UnSalClsStock,0)+ISNULL(Sl.OfferClsStock,0)) END) AS OfferOpenStock,
		0 AS Sales,0 AS Purchase,0 AS Adjustments,
		(CASE @StockType WHEN 1 THEN ISNULL(Sl.SalClsStock,0) WHEN 2 THEN ISNULL(Sl.UnSalClsStock,0) WHEN 3 THEN ISNULL(Sl.OfferClsStock,0)
		ELSE (ISNULL(Sl.SalClsStock,0)+ISNULL(Sl.UnSalClsStock,0)+ISNULL(Sl.OfferClsStock,0)) END) AS Closing,
		0,0,0,0,0,0,0,0,0,0,0,0,
		PrdBat.BatchSeqId,PCV.PrdCtgValLinkCode,Prd.CmpId,PrdBat.Status,@Pi_UserId,0
		FROM
		Product Prd (NOLOCK),ProductCategoryValue PCV (NOLOCK),ProductBatch PrdBat (NOLOCK),@ProdDetail PrdDet,StockLedger Sl (NOLOCK)
		LEFT OUTER JOIN Location Lcn (NOLOCK) ON Sl.LcnId=Lcn.LcnId
		WHERE
		Sl.PrdBatId=PrdDet.PrdBatId AND Sl.TransDate=PrdDet.TransDate	
		AND Sl.lcnid = PrdDet.lcnid
		AND Sl.TransDate< @Pi_FromDate
		AND Sl.PrdId=Prd.PrdId And Sl.PrdBatId=PrdBat.PrdBatId AND Prd.PrdId=PrdBat.PrdId
		AND Prd.PrdCtgValMainId=PCV.PrdCtgValMainId
	END
	ELSE
	BEGIN
		INSERT INTO TempStockLedSummary
		(
		TransDate,LcnId,LcnName,PrdId,PrdDCode,PrdName,PrdBatId,PrdBatCode,Opening,
		Purchase,Sales,Adjustment,Closing,
		PurchaseRate,OpnPurRte,PurPurRte,SalPurRte,AdjPurRte,CloPurRte,SellingRate,OpnSelRte,
		PurSelRte,SalSelRte,AdjSelRte,CloSelRte,
		BatchSeqId,PrdCtgValLinkCode,CmpId,Status,UserId,TotalStock
		)			
		SELECT @Pi_FromDate AS TransDate,ISNULL(Sl.LcnId,0) AS LcnId,
		IsNull(Lcn.LcnName,'')AS LcnName,ISNULL(Sl.PrdId,Prd.PrdId)AS PrdId,ISNULL(Prd.PrdDCode,'') AS PrdDCode,
		ISNULL(Prd.PrdName,'') AS PrdName,ISNULL(Sl.PrdBatId,0) AS PrdBatId,
		ISNULL(PrdBat.PrdBatCode,'') AS PrdBatCode,
		(CASE @StockType WHEN 1 THEN ISNULL(Sl.SalClsStock,0) WHEN 2 THEN ISNULL(Sl.UnSalClsStock,0) WHEN 3 THEN 0
		ELSE (ISNULL(Sl.SalClsStock,0)+ISNULL(Sl.UnSalClsStock,0)) END) AS OfferOpenStock,
		0 AS Sales,0 AS Purchase,0 AS Adjustments,
		(CASE @StockType WHEN 1 THEN ISNULL(Sl.SalClsStock,0) WHEN 2 THEN ISNULL(Sl.UnSalClsStock,0) WHEN 3 THEN 0
		ELSE (ISNULL(Sl.SalClsStock,0)+ISNULL(Sl.UnSalClsStock,0)) END) AS Closing,
		0,0,0,0,0,0,0,0,0,0,0,0,
		PrdBat.BatchSeqId,PCV.PrdCtgValLinkCode,Prd.CmpId,PrdBat.Status,@Pi_UserId,0
		FROM
		Product Prd (NOLOCK),ProductCategoryValue PCV (NOLOCK),ProductBatch PrdBat (NOLOCK),@ProdDetail PrdDet,StockLedger Sl (NOLOCK)
		LEFT OUTER JOIN Location Lcn (NOLOCK) ON Sl.LcnId=Lcn.LcnId
		WHERE
		Sl.PrdBatId=PrdDet.PrdBatId AND Sl.TransDate=PrdDet.TransDate	
		AND Sl.lcnid = PrdDet.lcnid
		AND Sl.TransDate< @Pi_FromDate
		AND Sl.PrdId=Prd.PrdId And Sl.PrdBatId=PrdBat.PrdBatId AND Prd.PrdId=PrdBat.PrdId
		AND Prd.PrdCtgValMainId=PCV.PrdCtgValMainId
	END
	--      Stocks for those not included in the stockLedger---------
	INSERT INTO TempStockLedSummary
	(
	TransDate,LcnId,LcnName,PrdId,PrdDCode,PrdName,PrdBatId,PrdBatCode,Opening,
	Purchase,Sales,Adjustment,Closing,
	PurchaseRate,OpnPurRte,PurPurRte,SalPurRte,AdjPurRte,CloPurRte,SellingRate,OpnSelRte,
	PurSelRte,SalSelRte,AdjSelRte,CloSelRte,
	BatchSeqId,PrdCtgValLinkCode,CmpId,Status,UserId,TotalStock
	)			
	SELECT @Pi_FromDate AS TransDate,Lcn.LcnId,
	Lcn.LcnName,Prd.PrdId,Prd.PrdDCode,Prd.PrdName,PrdBat.PrdBatId,PrdBat.PrdBatCode,
	0 AS Opening,0 AS Sales,0 AS Purchase,0 AS Adjustments,0 AS Closing,
	0,0,0,0,0,0,0,0,0,0,0,0,
	PrdBat.BatchSeqId,PCV.PrdCtgValLinkCode,Prd.CmpId,PrdBat.Status,@Pi_UserId,0
	FROM
	ProductBatch PrdBat (NOLOCK),ProductCategoryValue PCV (NOLOCK),Product Prd (NOLOCK)
	CROSS JOIN Location Lcn (NOLOCK)
	WHERE
		PrdBat.PrdBatId IN
		(
		SELECT PrdBatId FROM (
		SELECT DISTINCT A.PrdBatId,B.PrdBatId AS NewPrdBatId FROM
		ProductBatch A (nolock) LEFT OUTER JOIN StockLedger B (nolock)
		ON A.Prdid =B.Prdid) a
		WHERE ISNULL(NewPrdBatId,0) = 0
	)
	AND PrdBat.PrdId=Prd.PrdId
	AND Prd.PrdCtgVAlMainId=PCV.PrdCtgValMainId
	GROUP BY Prd.PrdId,PrdBat.PrdBatId,Lcn.LcnId,Lcn.LcnName,Prd.PrdId,Prd.PrdDCode,
	Prd.PrdName,PrdBat.PrdBatId,PrdBat.PrdBatCode,PCV.PrdCtgValLinkCode,Prd.CmpId,PrdBat.Status,PrdBat.BatchSeqId
	ORDER BY TransDate,Prd.PrdId,PrdBat.PrdBatId,Lcn.LcnId
	UPDATE TempStockLedSummary SET TotalStock=(Opening+Purchase+Sales+Adjustment+Closing)
	
--	UPDATE TempStockLedSummary SET TempStockLedSummary.PurchaseRate=PrdBatDet.PrdBatDetailValue
--	FROM TempStockLedSummary,ProductBatchDetails PrdBatDet,ProductBatch PrdBat,BatchCreation BatCr,Product Prd
--	WHERE TempStockLedSummary.PrdBatId=PrdBatDet.PrdBatId AND PrdBatDet.SlNo=BatCr.SlNo
--	AND PrdBat.DefaultPriceId=PrdBatDet.PriceId
--	AND BatCr.BatchSeqId=TempStockLedSummary.BatchSeqId
--	AND TempStockLedSummary.PrdId=PrdBat.PrdId
--	AND PrdBat.BatchSeqId=TempStockLedSummary.BatchSeqId
--	AND PrdBat.PrdId=TempStockLedSummary.PrdID
--	AND PrdBat.PrdId=Prd.PrdID
--	AND BatCr.ListPrice=1
--	
--	UPDATE TempStockLedSummary SET TempStockLedSummary.SellingRate=PrdBatDet.PrdBatDetailValue
--	FROM TempStockLedSummary,ProductBatchDetails PrdBatDet,ProductBatch PrdBat,BatchCreation BatCr,Product Prd
--	WHERE TempStockLedSummary.PrdBatId=PrdBatDet.PrdBatId AND PrdBatDet.SlNo=BatCr.SlNo
--	AND PrdBat.DefaultPriceId=PrdBatDet.PriceId
--	AND BatCr.BatchSeqId=TempStockLedSummary.BatchSeqId
--	AND TempStockLedSummary.PrdId=PrdBat.PrdId
--	AND PrdBat.BatchSeqId=TempStockLedSummary.BatchSeqId
--	AND PrdBat.PrdId=TempStockLedSummary.PrdID
--	AND PrdBat.PrdId=Prd.PrdID
--	AND BatCr.SelRte=1
	UPDATE TRSS SET TRSS.SellingRate=DPH.SellingRate,TRSS.PurchaseRate=DPH.PurchaseRate
	FROM TempStockLedSummary TRSS,DefaultPriceHistory DPH
	WHERE TRSS.PrdId=DPH.PrdId AND TRSS.PrdBatId=DPH.PrdBatId 
	AND TransDate BETWEEN DPH.FromDate AND (CASE DPH.ToDate WHEN '1900-01-01' THEN GETDATE() ELSE DPH.ToDate END)
	
	UPDATE TempStockLedSummary SET OpnPurRte=Opening * PurchaseRate,PurPurRte=Purchase * PurchaseRate,
	SalPurRte=Sales * PurchaseRate,AdjPurRte=Adjustment * PurchaseRate,CloPurRte=Closing * PurchaseRate,
	OpnSelRte=Opening * SellingRate,PurSelRte=Purchase * SellingRate,SalSelRte=Sales * SellingRate,
	AdjSelRte=Adjustment * SellingRate,CloSelRte=Closing * SellingRate
	
	IF @SupTaxGroupId+@RtrTaxFroupId>0
	BEGIN
		UPDATE TSL SET OpnPurRte=OpnPurRte+(Opening*ISNULL(Tax.PurchaseTaxAmount,0)),
		PurPurRte=PurPurRte+(Purchase*ISNULL(Tax.PurchaseTaxAmount,0)),
		SalPurRte=SalPurRte+(Sales*ISNULL(Tax.PurchaseTaxAmount,0)),
		AdjPurRte=AdjPurRte+(Adjustment*ISNULL(Tax.PurchaseTaxAmount,0)),
		CloPurRte=CloPurRte+(Closing*ISNULL(Tax.PurchaseTaxAmount,0)),
		OpnSelRte=OpnSelRte+(Opening*ISNULL(Tax.SellingTaxAmount,0)),
		PurSelRte=PurSelRte+(Purchase*ISNULL(Tax.SellingTaxAmount,0)),
		SalSelRte=SalSelRte+(Sales*ISNULL(Tax.SellingTaxAmount,0)),
		AdjSelRte=AdjSelRte+(Adjustment*ISNULL(Tax.SellingTaxAmount,0)),
		CloSelRte=CloSelRte+(Closing*ISNULL(Tax.SellingTaxAmount,0))
		FROM TempStockLedSummary TSL LEFT OUTER JOIN TaxForReport Tax
		ON Tax.PrdId=TSL.PrdId AND Tax.PrdBatId=TSL.PrdBatId AND TSL.UserId= Tax.UsrId AND Tax.RptId=100
	END
--	SELECT * FROM TempStockLedSummary ORDER BY PrdId,PrdBatId,LcnId,TransDate
	
	SELECT MIN(TransDate) AS MinTransDate,MAX(TransDate) AS MaxTransDate,
	PrdId,PrdBatId,LcnId
	INTO #TempDates
	FROM TempStockLedSummary WHERE UserId=@Pi_UserId	
	GROUP BY PrdId,PrdBatId,LcnId
	ORDER BY PrdId,PrdBatId,LcnId
		
	
	INSERT INTO TempStockLedSummary(PrdId,PrdBatId,LcnId,Opening,Purchase,Sales,Adjustment,Closing,
	PurchaseRate,OpnPurRte,PurPurRte,SalPurRte,AdjPurRte,CloPurRte,SellingRate,OpnSelRte,PurSelRte,SalSelRte,
	AdjSelRte,CloSelRte,BatchSeqId,PrdCtgValLinkCode,CmpId,Status,UserId,TotalStock)
	SELECT T.PrdId,T.PrdBatId,T.LcnId,T.Opening,T.Purchase,T.Sales,T.Adjustment,T.Closing,
	T.PurchaseRate,T.OpnPurRte,T.PurPurRte,T.SalPurRte,T.AdjPurRte,T.CloPurRte,T.SellingRate,
	T.OpnSelRte,T.PurSelRte,T.SalSelRte,T.AdjSelRte,T.CloSelRte,T.BatchSeqId,T.PrdCtgValLinkCode,
	T.CmpId,T.Status,T.UserId,T.TotalStock
	FROM TempStockLedSummary T,#TempDates TD
	WHERE T.PrdId=TD.PrdId AND T.PrdBatId=TD.PrdBatId AND T.LcnId=TD.LcnId
	AND T.TransDate=TD.MinTransDate AND T.UserId=@Pi_UserId
	
	SELECT T.PrdId,T.PrdBatId,T.LcnId,SUM(T.Purchase) AS TotPur,SUM(T.Sales) AS TotSal,
	SUM(T.Adjustment) AS TotAdj
	INTO #TemDetails
	FROM TempStockLedSummary T,#TempDates TD
	WHERE T.PrdId=TD.PrdId AND T.PrdBatId=TD.PrdBatId AND T.LcnId=TD.LcnId
	AND T.TransDate BETWEEN TD.MinTransDate AND TD.MaxTransDate AND T.UserId=@Pi_UserId
	GROUP BY T.PrdId,T.PrdBatId,T.LcnId
	UPDATE TempStockLedSummary SET Purchase=TotPur,Sales=TotSal,
	Adjustment=TotAdj
	FROM #TemDetails T
	WHERE T.PrdId=TempStockLedSummary.PrdId AND T.PrdBatId=TempStockLedSummary.PrdBatId AND
	T.LcnId=TempStockLedSummary.LcnId
	UPDATE TempStockLedSummary SET Closing=Opening+Purchase-Sales+Adjustment
--	UPDATE TempStockLedSummaryTotal SET TempStockLedSummaryTotal.PurchaseRate=PrdBatDet.PrdBatDetailValue
--	FROM TempStockLedSummaryTotal,ProductBatchDetails PrdBatDet,ProductBatch PrdBat,BatchCreation BatCr,Product Prd
--	WHERE TempStockLedSummaryTotal.PrdBatId=PrdBatDet.PrdBatId AND PrdBatDet.SlNo=BatCr.SlNo
--	AND PrdBat.DefaultPriceId=PrdBatDet.PriceId
--	AND BatCr.BatchSeqId=TempStockLedSummaryTotal.BatchSeqId
--	AND TempStockLedSummaryTotal.PrdId=PrdBat.PrdId
--	AND PrdBat.BatchSeqId=TempStockLedSummaryTotal.BatchSeqId
--	AND PrdBat.PrdId=TempStockLedSummaryTotal.PrdID
--	AND PrdBat.PrdId=Prd.PrdID
--	AND BatCr.ListPrice=1
--	
--	UPDATE TempStockLedSummaryTotal SET TempStockLedSummaryTotal.SellingRate=PrdBatDet.PrdBatDetailValue
--	FROM TempStockLedSummaryTotal,ProductBatchDetails PrdBatDet,ProductBatch PrdBat,BatchCreation BatCr,Product Prd
--	WHERE TempStockLedSummaryTotal.PrdBatId=PrdBatDet.PrdBatId AND PrdBatDet.SlNo=BatCr.SlNo
--	AND PrdBat.DefaultPriceId=PrdBatDet.PriceId
--	AND BatCr.BatchSeqId=TempStockLedSummaryTotal.BatchSeqId
--	AND TempStockLedSummaryTotal.PrdId=PrdBat.PrdId
--	AND PrdBat.BatchSeqId=TempStockLedSummaryTotal.BatchSeqId
--	AND PrdBat.PrdId=TempStockLedSummaryTotal.PrdID
--	AND PrdBat.PrdId=Prd.PrdID
--	AND BatCr.SelRte=1
--	UPDATE TRSS SET TRSS.SellingRate=DPH.SellingRate,TRSS.PurchaseRate=DPH.PurchaseRate
--	FROM TempStockLedSummaryTotal TRSS,DefaultPriceHistory DPH
--	WHERE TRSS.PrdId=DPH.PrdId AND TRSS.PrdBatId=DPH.PrdBatId 
--	AND TransDate BETWEEN DPH.FromDate AND (CASE DPH.ToDate WHEN '1900-01-01' THEN GETDATE() ELSE DPH.ToDate END)
	UPDATE TempStockLedSummaryTotal SET OpnPurRte=Opening * PurchaseRate,PurPurRte=Purchase * PurchaseRate,
	SalPurRte=Sales * PurchaseRate,AdjPurRte=Adjustment * PurchaseRate,CloPurRte=Closing * PurchaseRate,
	OpnSelRte=Opening * SellingRate,PurSelRte=Purchase * SellingRate,SalSelRte=Sales * SellingRate,
	AdjSelRte=Adjustment * SellingRate,CloSelRte=Closing * SellingRate
	IF @SupTaxGroupId+@RtrTaxFroupId>0
	BEGIN
		UPDATE TSLT SET OpnPurRte=OpnPurRte+(Opening*ISNULL(Tax.PurchaseTaxAmount,0)),
		PurPurRte=PurPurRte+(Purchase*ISNULL(Tax.PurchaseTaxAmount,0)),
		SalPurRte=SalPurRte+(Sales*ISNULL(Tax.PurchaseTaxAmount,0)),
		AdjPurRte=AdjPurRte+(Adjustment*ISNULL(Tax.PurchaseTaxAmount,0)),
		CloPurRte=CloPurRte+(Closing*ISNULL(Tax.PurchaseTaxAmount,0)),
		OpnSelRte=OpnSelRte+(Opening*ISNULL(Tax.SellingTaxAmount,0)),
		PurSelRte=PurSelRte+(Purchase*ISNULL(Tax.SellingTaxAmount,0)),
		SalSelRte=SalSelRte+(Sales*ISNULL(Tax.SellingTaxAmount,0)),
		AdjSelRte=AdjSelRte+(Adjustment*ISNULL(Tax.SellingTaxAmount,0)),
		CloSelRte=CloSelRte+(Closing*ISNULL(Tax.SellingTaxAmount,0))
		FROM TempStockLedSummaryTotal TSLT LEFT OUTER JOIN TaxForReport Tax ON 
		Tax.PrdId=TSLT.PrdId AND Tax.PrdBatId=TSLT.PrdBatId AND
		TSLT.UserId= Tax.UsrId AND Tax.RptId=100
	END	
END
GO
IF EXISTS (SELECT * FROM SYS.objects WHERE name ='Proc_ClosingStock' AND TYPE='P')
DROP PROCEDURE Proc_ClosingStock
GO
CREATE PROCEDURE [dbo].[Proc_ClosingStock]
(	
	@Pi_RptId		INT,
	@Pi_UsrId		INT,
	@Pi_ToDate		DATETIME
)
AS
/*************************************************************
* PROCEDURE	: Proc_ClosingStock
* PURPOSE	: To get the Closing Stock Details
* CREATED BY	: Mahalakshmi.A
* CREATED DATE	: 17/09/2008
* NOTE		:
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date} {developer}  {brief modification description}
	
*************************************************************/ --select * from UOMMaster
BEGIN
	DECLARE @UOMID	AS INT	
	DELETE FROM TempClosingStock WHERE UsrId =@Pi_UsrId
	DELETE FROM TempStockLedSummary WHERE UserId =@Pi_UsrId
	EXEC Proc_GetStockLedgerSummaryDatewiseParle @Pi_ToDate, @Pi_ToDate,@Pi_UsrId,0,0,0
	
	SELECT @UOMID=UomID FROM UOMMaster WHERE UomDescription IN ('BOX','PACKETS') 
	INSERT INTO TempClosingStock([CmpId],[PrdId],[LcnId],[PrdName],[SellingRate],[ListPrice],[MRP],
	[Cases],[Pieces],[BaseQty],[BaseQtyWgt],[PrdStatus],[BatStatus],[UsrId],CloPurRte,CloSelRte )
	SELECT DISTINCT [CmpId],[PrdId],[LcnId],[PrdName],[SellingRate],[ListPrice],[MRP],
	[BillCase],[BillPiece],[Closing],[BaseQtyWgt],[PrdStatus],[Status],@Pi_UsrId AS [UsrId],CloPurRte,CloSelRte
	FROM
	(SELECT P.CmpID,LSB.[PrdId],LSB.[LcnId],
	P.[PrdName],PD.PrdBatDetailValue AS SellingRate,PD2.PrdBatDetailValue AS ListPrice,
	PD1.PrdBatDetailValue AS MRP,CASE ISNULL(UG.ConversionFactor,0)
	WHEN 0 THEN 0 WHEN 1 THEN 0 ELSE CAST(LSB.[Closing] AS INT)/CAST(UG.ConversionFactor AS INT)
	END AS BillCase,
	CASE ISNULL(UG.ConversionFactor,0)
	WHEN 0 THEN LSB.[Closing] WHEN 1 THEN LSB.[Closing] ELSE
	CAST(LSB.[Closing] AS INT)%CAST(UG.ConversionFactor AS INT) END AS BillPiece,
	LSB.Closing,((LSB.Closing*P.PrdWgt)/1000) AS BaseQtyWgt,P.PrdStatus,PB.Status,LSB.CloPurRte,LSB.CloSelRte
	FROM TempStockLedSummary LSB WITH (NOLOCK),Product P WITH (NOLOCK)
	LEFT OUTER JOIN UOMGroup UG ON P.UOMGroupId=UG.UOMGroupId AND UG.UOMId=@UOMID, --select * from ProductbatchDetails
	ProductBatch PB WITH (NOLOCK) ,
	ProductbatchDetails PD WITH (NOLOCK),
	BatchCreation BC WITH (NOLOCK),
	ProductbatchDetails PD1 WITH (NOLOCK),
	BatchCreation BC1 WITH (NOLOCK),
	ProductbatchDetails PD2 WITH (NOLOCK),
	BatchCreation BC2 WITH (NOLOCK),
	ProductCategoryLevel PCL WITH (NOLOCK),
	ProductCategoryValue PCV WITH (NOLOCK)
	WHERE LSB.PrdId=P.PrdId AND P.PrdID=PB.PrdID
	      	AND PB.PrdBatId=PD.PrdBatId AND PD.DefaultPrice=1
		AND PD.SlNo =BC.SlNo
		AND BC.BatchSeqId=PB.BatchSeqId
		AND BC.SelRte=1
		AND PB.PrdBatId=PD1.PrdBatId AND PD1.DefaultPrice=1
		AND PD1.SlNo =BC1.SlNo
		AND BC1.BatchSeqId=PB.BatchSeqId
		AND PD2.SlNo =BC2.SlNo
		AND BC2.BatchSeqId=PB.BatchSeqId
		AND P.PrdCtgValMainId=PCV.PrdCtgValMainId
		AND PCV.CmpPrdCtgId=PCL.CmpPrdCtgId
		AND PB.PrdBatId=PD2.PrdBatId AND BC2.ListPrice=1
		AND BC1.MRP=1 AND PD2.DefaultPrice=1
		AND LSB.PrdBatId=PB.PrdBatId
		/*Code Modified by Rajesh Ranjan for ICRSTPAR2960 begins here*/  
		--AND LSB.UserId =@Pi_UsrId
		AND LSB.UserId =@Pi_UsrId
		/*Code Modified by Rajesh Ranjan for ICRSTPAR2960 ends here*/ 
	) A
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE name ='Proc_GR_EffectiveCoverageAnalysis' AND XTYPE='P')
DROP PROCEDURE Proc_GR_EffectiveCoverageAnalysis
GO
CREATE PROCEDURE Proc_GR_EffectiveCoverageAnalysis
(
	@Pi_RptName		NVARCHAR(100),
	@Pi_FromDate	DATETIME,
	@Pi_ToDate		DATETIME,
	@Pi_Filter1		NVARCHAR(100),
	@Pi_Filter2		NVARCHAR(100),
	@Pi_Filter3		NVARCHAR(100),
	@Pi_Filter4		NVARCHAR(100),
	@Pi_Filter5		NVARCHAR(100),
	@Pi_Filter6		NVARCHAR(100)
)
AS 
BEGIN
	--ADDED BY RAJESH ICRSTPAR4434 on 01.02.2017
	EXEC Proc_GR_Build_RH
	--TILL HERE 
	
-- EXEC [Proc_GR_EffectiveCoverageAnalysis] 'Billwise Productwise Sales','2017-01-01','2017-01-31','','','','','',''
		SET @Pi_FILTER1='%'+ISNULL(@Pi_FILTER1,'')+'%'        
		SET @Pi_FILTER2='%'+ISNULL(@Pi_FILTER2,'')+'%'        
		SET @Pi_FILTER3='%'+ISNULL(@Pi_FILTER3,'')+'%'        
		SET @Pi_FILTER4='%'+ISNULL(@Pi_FILTER4,'')+'%'        
		SET @Pi_FILTER5='%'+ISNULL(@Pi_FILTER5,'')+'%'  
		SET @Pi_FILTER6='%'+ISNULL(@Pi_FILTER6,'')+'%'      
SELECT 
		Salesman.SMCode AS [Salesman Code], Salesman.SMName AS [Salesman Name], 
		RouteMaster.RMCode AS [Route Code], RouteMaster.RMName AS [Route Name], 
        TBL_GR_BUILD_RH.HIERARCHY3CAP AS [Retailer Hierarchy 1], 
        TBL_GR_BUILD_RH.HIERARCHY2CAP AS [Retailer Hierarchy 2], 
		TBL_GR_BUILD_RH.HIERARCHY1CAP AS [Retailer Hierarchy 3], 
		Retailer.RtrCode AS [Retailer Code] ,
		Retailer.RtrNAme as [Retailer Name]         INTO #COV 
FROM         SalesmanMarket INNER JOIN
                      Salesman ON SalesmanMarket.SMId = Salesman.SMId INNER JOIN
                      RouteMaster ON SalesmanMarket.RMId = RouteMaster.RMId INNER JOIN
                      Retailer INNER JOIN
                      RetailerMarket ON Retailer.RtrId = RetailerMarket.RtrId ON SalesmanMarket.RMId = RetailerMarket.RMId INNER JOIN
                      TBL_GR_BUILD_RH ON Retailer.RtrId = TBL_GR_BUILD_RH.RTRID
where rtrstatus=1 and smname like @pi_filter1 and rmname like @pi_Filter5 and rtrname like @pi_Filter4
SELECT [SALESMAN CODE],COUNT(DISTINCT [RETAILER CODE]) RTRCOUNT INTO #SALRETCOUNT FROM #COV
GROUP BY [SALESMAN CODE]


SELECT [Route Code],COUNT(DISTINCT [RETAILER CODE]) RTRCOUNT INTO #ROTRETCOUNT FROM #COV
GROUP BY [Route Code]



SELECT COUNT(DISTINCT [RETAILER CODE]) CNT INTO #TOTALCNT FROM #COV
	
	SELECT a.* INTO #SALINV 
	FROM SALESINVOICE A,ROUTEMASTER B, SALESMAN C, RETAILER D  ,TBL_GR_BUILD_RH E
	WHERE SALINVDATE BETWEEN @PI_fROMDATE AND @PI_TODATE AND A.RMID=B.RMID 
		  AND B.RMNAME LIKE @PI_FILTER5 and E.RTRID=A.RTRID AND
			DLVSTS in (4,5) and
			C.SMID=A.SMID AND C.SMNAME LIKE @PI_FILTER1 AND A.SALINVNO LIKE @PI_FILTER3 
			AND A.RTRID=D.RTRID AND D.RTRNAME LIKE @PI_FILTER4 AND E.HASHPRODUCTS LIKE @PI_FILTER2
    SELECT A.* INTO #SALESINVOICEPRODUCT FROM SALESINVOICEPRODUCT A,TBL_GR_BUILD_PH C, #SALINV D
	WHERE A.SALID=D.SALID AND A.PRDID=C.PRDID AND 	HASHPRODUCTS LIKE @PI_FILTER6
	DELETE FROM #SALINV WHERE SALID NOT IN (SELECT DISTINCT SALID FROM #SALESINVOICEPRODUCT)
-- FOR PRODUCT
SELECT     'Product Level',Product.PrdDCode[Dist. Prod Code], Product.PrdCCode[Co. Prd Code], 
			Product.PrdName [Prd Name.],(SELECT CNT FROM #TOTALCNT) [Active Retailers],
			count(DISTINCT RTRID)[Total Retailers Billed], ((SELECT CNT FROM #TOTALCNT)-(SELECT Count(DISTINCT RTRId) FROM #SALINV WHERE SALINVDATE BETWEEN @PI_fROMDATE AND @PI_TODATE))[Number of retailers not Billed],
			COUNT(DISTINCT #salinv.SalInvNo) [Total No. Invoices], 
            sum(#Salesinvoiceproduct.PrdNetAmount) [Net Amount]
FROM         #salinv  INNER JOIN
                      #Salesinvoiceproduct ON #salinv.SalId = #Salesinvoiceproduct.SalId INNER JOIN
                      Product ON #Salesinvoiceproduct.PrdId = Product.PrdId 
GROUP BY Product.PrdDCode, Product.PrdCCode, Product.PrdName
----- FOR SALESMAN
SELECT     'Salesman Level',Salesman.SMName [Salesman Name],ISNULL(RTRCOUNT,0) [Active Retailers],
			COUNT(DISTINCT RTRID)[Total Retailers Billed],(RTRCOUNT-COUNT(DISTINCT RTRID)) [Number of retailers not Billed],
			count(distinct #salinv.SalInvNo) [Total No. Invoices] , 
			count(Product.PrdDCode) [Total Lines Sold],
			CASE Cast(count(Product.PrdDCode) as Numeric(18,2)) WHEN 0 THEN ISNULL(Cast(count(distinct #salinv.SalInvNo) as Numeric(18,2)),0)
			ELSE cast(Cast(count(Product.PrdDCode) as Numeric(18,2)) / ISNULL(Cast(count(distinct #salinv.SalInvNo) as Numeric(18,2)),0) AS nUMERIC(18,2)) end AS [Lines Per Invoice],
			ISNULL(Sum(#Salesinvoiceproduct.PrdNetAmount),0) [Net Amount]
FROM         #salinv INNER JOIN
                      #Salesinvoiceproduct ON #salinv.SalId = #Salesinvoiceproduct.SalId INNER JOIN
                      Product ON #Salesinvoiceproduct.PrdId = Product.PrdId 
					  RIGHT OUTER JOIN Salesman ON #salinv.SMId = Salesman.SMId 
					  RIGHT OUTER JOIN #SALRETCOUNT ON SALESMAN.SMCODE=#SALRETCOUNT.[SALESMAN CODE]
group by Salesman.SMName,RTRCOUNT
-- EXEC [Proc_GR_EffectiveCoverageAnalysis] 'Billwise Productwise Sales','2012-01-01','2012-01-05','','','','','',''
---- FOR ROUTE
SELECT      'Route Level',RouteMaster.RMName [Route Name],RTRCOUNT [Active Retailers],
			COUNT(DISTINCT RTRID)[Total Retailers Billed],(RTRCOUNT-COUNT(DISTINCT RTRID)) [Number of retailers not Billed],
		    count(distinct #salinv.SalInvNo) [Total No. Invoices] , 
			count(Product.PrdDCode) [Total Lines Sold],
			CASE Cast(count(Product.PrdDCode) as Numeric(18,2)) WHEN 0 THEN Cast(count(distinct #salinv.SalInvNo)as Numeric(18,2)) ELSE 
			Cast(count(Product.PrdDCode) as Numeric(18,2))/Cast(count(distinct #salinv.SalInvNo) as Numeric(18,2)) END AS [Lines Per Invoice],
			IsNull(sum(#Salesinvoiceproduct.PrdNetAmount),0) [Net Amount]
FROM         #salinv INNER JOIN
                      #Salesinvoiceproduct ON #salinv.SalId = #Salesinvoiceproduct.SalId 
					  INNER JOIN Product ON #Salesinvoiceproduct.PrdId = Product.PrdId 
					  RIGHT OUTER JOIN RouteMaster ON #salinv.RMId = RouteMaster.RMId 
					  RIGHT OUTER JOIN #ROTRETCOUNT ON ROUTEMASTER.RMCODE=#ROTRETCOUNT.[ROUTE CODE]
group by RMName,RTRCOUNT
---- RETAILER LEVEL
SELECT     'Retailer Level',RtrCode [Retailer Code],RtrName [Retailer Name], 
			count(distinct #salinv.SalInvNo) [Total No. Invoices] , count(Product.PrdDCode) [Total Lines Sold],
			Cast(count(Product.PrdDCode) as Numeric(18,2))/Cast(count(distinct #salinv.SalInvNo) as Numeric(18,2)) AS [Lines Per Invoice],
			sum(#Salesinvoiceproduct.PrdNetAmount) [Net Amount]
FROM         #salinv INNER JOIN
                      #Salesinvoiceproduct ON #salinv.SalId = #Salesinvoiceproduct.SalId INNER JOIN
                      Product ON #Salesinvoiceproduct.PrdId = Product.PrdId INNER JOIN
                      Retailer ON #salinv.rtrid = Retailer.Rtrid
group by Rtrcode,Rtrname
end
GO
IF EXISTS(SELECT * FROM SYSOBJECTS WHERE name ='Proc_ApplyQPSSchemeInBill' AND XTYPE='P')
DROP PROCEDURE Proc_ApplyQPSSchemeInBill
GO
/*
	BEGIN TRANSACTION
	DELETE A FROM BilledPrdHdForQPSScheme A (NOLOCK)
	EXEC Proc_ApplyQPSSchemeInBill 18,1681,0,2,2
	SELECT * FROM BilledPrdHdForQPSScheme (NOLOCK)
	ROLLBACK TRANSACTION
*/
CREATE PROCEDURE  Proc_ApplyQPSSchemeInBill 
(
	@Pi_SchId  		INT,
	@Pi_RtrId		INT,
	@Pi_SalId  		INT,
	@Pi_UsrId 		INT,
	@Pi_TransId		INT,
	@Pi_Mode		INT =0	
)
AS
/*********************************
* PROCEDURE	: Proc_ApplyQPSSchemeInBill
* PURPOSE	: To Apply the QPS Scheme and Get the Scheme Details for the Selected Scheme
* CREATED	: Thrinath
* CREATED DATE	: 31/05/2007
* NOTE		: General SP for Returning the Scheme Details for the Selected QPS Scheme
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date}		{developer}		{brief modification description}
* 27-07-2011	Boopathy.P		Sales Return is not reduced for Data based QPS Scheme (Commented fetching data from table SalesInvoiceQPSCumulative)
* 02-08-2011    Boopathy.P		QPS DATE BASED ISSUE FROM J&J Site (Older schemes are getting apply)
* 08-08-2011    Boopathy.P      Bug Ref no : 23364
* 16-11-2011    Boopathy.P        Add table to track the invoice details for QPS Datebased Scheme
*********************************/
SET NOCOUNT ON
BEGIN		
	DECLARE @SchType		INT
	DECLARE @SchCode		nVarChar(40)
	DECLARE @BatchLevel		INT
	DECLARE @FlexiSch		INT
	DECLARE @FlexiSchType		INT
	DECLARE @CombiScheme		INT
	DECLARE @SchLevelId		INT
	DECLARE @ProRata		INT
	DECLARE @Qps			INT
	DECLARE @QPSReset		INT
	DECLARE @QPSResetAvail		INT
	DECLARE @PurOfEveryReq		INT
	DECLARE @SchemeBudget		NUMERIC(38,6)
	DECLARE @SlabId			INT
	DECLARE @NoOfTimes		NUMERIC(38,6)
	DECLARE @GrossAmount		NUMERIC(38,6)
	DECLARE @TotalValue		NUMERIC(38,6)
	DECLARE @SlabAssginValue	NUMERIC(38,6)
	DECLARE @SchemeLvlMode		INT
	DECLARE @PrdIdRem		INT
	DECLARE @PrdBatIdRem		INT
	DECLARE @PrdCtgValMainIdRem	INT
	DECLARE @FrmSchAchRem		NUMERIC(38,6)
	DECLARE @FrmUomAchRem		INT
	DECLARE @FromQtyRem		NUMERIC(38,6)
	DECLARE @UomIdRem		INT
	DECLARE @AssignQty 		NUMERIC(38,6)
	DECLARE @AssignAmount 		NUMERIC(38,6)
	DECLARE @AssignKG 		NUMERIC(38,6)
	DECLARE @AssignLitre 		NUMERIC(38,6)
	DECLARE @BudgetUtilized		NUMERIC(38,6)
	DECLARE @BillDate		DATETIME
	DECLARE @FrmValidDate		DateTime
	DECLARE @ToValidDate		DateTime
	DECLARE @QPSBasedOn		INT
	DECLARE @SchValidTill	DATETIME
	DECLARE @SchValidFrom	DATETIME
	DECLARE @RangeBase		INT
	DECLARE @TempBilled TABLE
	(
		PrdId			INT,
		PrdBatId		INT,
		MRP                 NUMERIC(18,6),
		SchemeOnQty 		NUMERIC(38,0),
		SchemeOnAmount		NUMERIC(38,6),
		SchemeOnKG		NUMERIC(38,6),
		SchemeOnLitre		NUMERIC(38,6),
		SchId 			INT
	)
	DECLARE @TempBilled1 TABLE
	(
		PrdId			    INT,
		PrdBatId		    INT,
		MRP                 NUMERIC(18,6),
		SchemeOnQty 		NUMERIC(38,0),
		SchemeOnAmount		NUMERIC(38,6),
		SchemeOnKG		NUMERIC(38,6),
		SchemeOnLitre		NUMERIC(38,6),
		SchId 			INT
	)
	DECLARE @TempRedeem TABLE
	(
		PrdId			INT,
		PrdBatId		INT,
		SchemeOnQty 		NUMERIC(38,0),
		SchemeOnAmount		NUMERIC(38,6),
		SchemeOnKG		NUMERIC(38,6),
		SchemeOnLitre		NUMERIC(38,6),
		SchId 			INT
	)
	DECLARE @TempHier TABLE
	(
		PrdId			INT,
		PrdBatId		INT,
		PrdCtgValMainId		INT
	)
	DECLARE @TempBilledAch TABLE
	(
		PrdId			INT,
		PrdBatId		INT,
		PrdCtgValMainId		INT,
		FrmSchAch		NUMERIC(38,6),
		FrmUomAch		INT,
		ToSchAch		NUMERIC(38,6),
		ToUomAch		INT,
		SlabId			INT,
		FromQty			NUMERIC(38,6),
		UomId			INT,
		ToQty			NUMERIC(38,6),
		ToUomId			INT
	)
	DECLARE @TempBilledQpsReset TABLE
	(
		PrdId			INT,
		PrdBatId		INT,
		PrdCtgValMainId		INT,
		FrmSchAch		NUMERIC(38,6),
		FrmUomAch		INT,
		ToSchAch		NUMERIC(38,6),
		ToUomAch		INT,
		SlabId			INT,
		FromQty			NUMERIC(38,6),
		UomId			INT,
		ToQty			NUMERIC(38,6),
		ToUomId			INT
	)
	DECLARE @TempSchSlabAmt TABLE
	(
		ForEveryQty		NUMERIC(38,6),
		ForEveryUomId		INT,
		DiscPer			NUMERIC(10,6),
		FlatAmt			NUMERIC(38,6),
		Points			INT,
		FlxDisc			TINYINT,
		FlxValueDisc		TINYINT,
		FlxFreePrd		TINYINT,
		FlxGiftPrd		TINYINT,
		FlxPoints		TINYINT
	)
	DECLARE @TempSchSlabFree TABLE
	(
		ForEveryQty		NUMERIC(38,6),
		ForEveryUomId		INT,
		FreePrdId		INT,
		FreeQty			INT
	)
	DECLARE @TempSchSlabGift TABLE
	(
		ForEveryQty		NUMERIC(38,6),
		ForEveryUomId		INT,
		GiftPrdId		INT,
		GiftQty			INT
	)
	DECLARE  @BillAppliedSchemeHd TABLE
	(
		SchId			INT,
		SchCode 		NVARCHAR (40) ,
		FlexiSch 		TINYINT,
		FlexiSchType 		TINYINT,
		SlabId 			INT,
		SchemeAmount 		NUMERIC(38, 6),
		SchemeDiscount 		NUMERIC(38, 6),
		Points 			INT ,
		FlxDisc 		TINYINT,
		FlxValueDisc 		TINYINT,
		FlxFreePrd 		TINYINT,
		FlxGiftPrd 		TINYINT,
		FlxPoints 		TINYINT,
		FreePrdId 		INT,
		FreePrdBatId 		INT,
		FreeToBeGiven 		INT,
		GiftPrdId 		INT,
		GiftPrdBatId 		INT,
		GiftToBeGiven 		INT,
		NoOfTimes 		NUMERIC(38, 6),
		IsSelected 		TINYINT,
		SchBudget 		NUMERIC(38, 6),
		BudgetUtilized 		NUMERIC(38, 6),
		TransId 		TINYINT,
		Usrid 			INT,
		PrdId			INT,
		PrdBatId		INT
	)
	DECLARE @MoreBatch TABLE
	(
		SchId		INT,
		SlabId		INT,
		PrdId		INT,
		PrdCnt		INT,
		PrdBatCnt	INT
	)
	DECLARE @TempBillAppliedSchemeHd TABLE
	(
		SchId		int,
		SchCode		nvarchar(50),
		FlexiSch	tinyint,
		FlexiSchType	tinyint,
		SlabId		int,
		SchemeAmount	numeric(32,6),
		SchemeDiscount	numeric(32,6),
		Points		int,
		FlxDisc		tinyint,
		FlxValueDisc	tinyint,
		FlxFreePrd	tinyint,
		FlxGiftPrd	tinyint,
		FlxPoints	tinyint,
		FreePrdId	int,
		FreePrdBatId	int,
		FreeToBeGiven	int,
		GiftPrdId	int,
		GiftPrdBatId	int,
		GiftToBeGiven	int,
		NoOfTimes	numeric(32,6),
		IsSelected	tinyint,
		SchBudget	numeric(32,6),
		BudgetUtilized	numeric(32,6),
		TransId		tinyint,
		Usrid		int,
		PrdId		int,
		PrdBatId	int,
		SchType		int
	)
	DECLARE @NotExitProduct TABLE
	(
		Schid INT,
		Rtrid INT,
		SchemeOnQty INT,
		SchemeOnAmount Numeric(32,4),
		SchemeOnKG  NUMERIC(38,6),
		SchemeOnLitre  NUMERIC(38,6)
		
	)
	--NNN
	DECLARE @QPSGivenFlat TABLE
	(
		SchId   INT,		
		Amount  NUMERIC(38,6)
	)
	DECLARE @Config		AS	INT
	SET @Config=0
	
	SELECT @Config=Status FROM Configuration WHERE ModuleId='BILLQPS3'
	SELECT @SchCode = SchCode,@SchType = SchType,@BatchLevel = BatchLevel,@FlexiSch = FlexiSch,@RangeBase=[Range],
		@FlexiSchType = FlexiSchType,@CombiScheme = CombiSch,@SchLevelId = SchLevelId,@ProRata = ProRata,
		@Qps = QPS,@QPSReset = QPSReset,@SchemeBudget = Budget,@PurOfEveryReq = PurofEvery,
		@SchemeLvlMode = SchemeLvlMode,@QPSBasedOn=ApyQPSSch,@SchValidFrom=SchValidFrom,@SchValidTill=SchValidTill
	FROM SchemeMaster WHERE SchId = @Pi_SchId AND MasterType=1
	IF Exists (SELECT * FROM SalesInvoice WHERE SalId = @Pi_SalId)
		SELECT @BillDate = SalInvDate FROM SalesInvoice WHERE SalId = @Pi_SalId
	ELSE
		SET @BillDate = CONVERT(VARCHAR(10),GETDATE(),121)
	--Added by Rajesh	
	IF @Config=1
	BEGIN
		IF EXISTS(SELECT * FROM SCHEMEMASTER(NOLOCK) WHERE SCHID=@Pi_SchId AND SchValidTill<@BillDate AND @Pi_Mode<>2 AND ApyQPSSch=1 and QPS=1   AND SchStatus=1)
		BEGIN
			RETURN
		END
	END	
	--Added by Rajesh to not apply QPS scheme after crossing the date.
		
	IF Exists(SELECT * FROM SchemeMaster WHERE SchId = @Pi_SchId AND SchValidTill >= @BillDate)
	BEGIN
		--From the current Bill
		-- To Get the Scheme Products - Billed Qty, Billed Value, Billed Weight in KG and Litre
		INSERT INTO @TempBilled1(PrdId,PrdBatId,MRP,SchemeOnQty,SchemeOnAmount,SchemeOnKG,SchemeOnLitre,SchId)		
		SELECT A.PrdId,A.PrdBatId,MRP,ISNULL(SUM(A.BaseQty),0) AS SchemeOnQty,
			ISNULL(SUM(A.BaseQty * A.SelRate),0) AS SchemeOnAmount,
			ISNULL(CASE D.PrdUnitId WHEN 2 THEN ISNULL(SUM(PrdWgt * A.BaseQty),0)/1000
			WHEN 3 THEN ISNULL(SUM(PrdWgt * A.BaseQty),0) END,0) AS SchemeOnKg,
			ISNULL(CASE D.PrdUnitId WHEN 4 THEN ISNULL(SUM(PrdWgt * A.BaseQty),0)/1000
			WHEN 5 THEN ISNULL(SUM(PrdWgt * A.BaseQty),0) END,0) AS SchemeOnLitre,@Pi_SchId
			FROM BilledPrdHdForScheme A (NOLOCK) INNER JOIN Fn_ReturnSchemeProductBatch(@Pi_SchId) B ON
			A.PrdId = B.PrdId AND A.PrdBatId = CASE B.PrdBatId WHEN 0 THEN A.PrdBatId ELSE B.PrdBatId End
			INNER JOIN Product C ON A.PrdId = C.PrdId
			INNER JOIN ProductUnit D ON C.PrdUnitId = D.PrdUnitId
			WHERE A.Usrid = @Pi_UsrId AND A.TransId = @Pi_TransId
			GROUP BY A.PrdId,A.PrdBatId,MRP,D.PrdUnitId
	END
	
	IF @QPS <> 0
	BEGIN
		--From all the Bills
		--To Add the Cumulative Qty
		IF @QPSBasedOn=2
		BEGIN
			IF @Pi_Mode=1
			BEGIN
				INSERT INTO @TempBilled1(PrdId,PrdBatId,MRP,SchemeOnQty,SchemeOnAmount,SchemeOnKG,SchemeOnLitre,SchId)	
					SELECT PrdId,PrdBatId,MRP,SUM(SchemeOnQty),SUM(SchemeOnAmount),SUM(SchemeOnKg),SUM(SchemeOnLitre),SchId FROM 
					(	SELECT A.SalId,A.PrdId,A.PrdBatId,MRP,SchemeOnQty,SchemeOnAmount,SchemeOnKg,SchemeOnLitre,A.SchId FROM 
							(SELECT A.SalId,A.PrdId,A.PrdBatId,PrdUnitMRP AS MRP,ISNULL(SUM(A.BaseQty-A.ReturnedQty),0) AS SchemeOnQty,
							ISNULL(SUM((A.BaseQty-A.ReturnedQty) * A.PrdUnitSelRate),0) AS SchemeOnAmount,
							ISNULL(CASE D.PrdUnitId WHEN 2 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0)/1000
							WHEN 3 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0) END,0) AS SchemeOnKg,
							ISNULL(CASE D.PrdUnitId WHEN 4 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0)/1000
							WHEN 5 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0) END,0) AS SchemeOnLitre,@Pi_SchId AS SchId
							FROM SalesInvoiceProduct A (NOLOCK) INNER JOIN Fn_ReturnSchemeProductBatch(@Pi_SchId) B ON
							A.PrdId = B.PrdId AND A.PrdBatId = CASE B.PrdBatId WHEN 0 THEN A.PrdBatId ELSE B.PrdBatId End
							INNER JOIN Product C ON A.PrdId = C.PrdId
							INNER JOIN ProductUnit D ON C.PrdUnitId = D.PrdUnitId
							INNER JOIN SalesInvoice E ON A.SalId=E.SalId AND E.DlvSts>3
							,SchemeMaster H WHERE E.RtrId=@Pi_RtrId AND 
							E.SalInvDate BETWEEN H.SchValidFrom AND CASE @Pi_SalId WHEN 0 THEN  H.SchValidTill ELSE @BillDate END AND H.SchId=@Pi_SchId
							AND  A.SalId <(CASE @Pi_SalId WHEN 0 THEN  A.SAlId ELSE @Pi_SalId END) 
							GROUP BY A.SalId,A.PrdId,A.PrdBatId,D.PrdUnitId,PrdUnitMRP
						) AS A 
						INNER JOIN 
						(	SELECT A.SalId,A.SchId,PrdId,PrdBatId FROM SalesInvoiceSchemeDtBilled A INNER JOIN SchemeMaster B 
							ON A.SchId=B.SchId WHERE A.SchId=@Pi_SchId
						) B	ON  A.SalId =B.SalId AND A.PrdId=B.PrdId AND A.PrdBatId=B.PrdBatId AND A.SchId=@Pi_SchId
					UNION
						SELECT A.SalId,A.PrdId,A.PrdBatId,MRP,SchemeOnQty,SchemeOnAmount,SchemeOnKg,SchemeOnLitre,A.SchId FROM 
						(	SELECT A.SalId,A.PrdId,A.PrdBatId,PrdUnitMRP AS MRP,ISNULL(SUM(A.BaseQty-A.ReturnedQty),0) AS SchemeOnQty,
							ISNULL(SUM((A.BaseQty-A.ReturnedQty) * A.PrdUnitSelRate),0) AS SchemeOnAmount,
							ISNULL(CASE D.PrdUnitId WHEN 2 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0)/1000
							WHEN 3 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0) END,0) AS SchemeOnKg,
							ISNULL(CASE D.PrdUnitId WHEN 4 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0)/1000
							WHEN 5 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0) END,0) AS SchemeOnLitre,@Pi_SchId As SchId
							FROM SalesInvoiceProduct A (NOLOCK) INNER JOIN Fn_ReturnSchemeProductBatch(@Pi_SchId) B ON
							A.PrdId = B.PrdId AND A.PrdBatId = CASE B.PrdBatId WHEN 0 THEN A.PrdBatId ELSE B.PrdBatId End
							INNER JOIN Product C ON A.PrdId = C.PrdId
							INNER JOIN ProductUnit D ON C.PrdUnitId = D.PrdUnitId
							INNER JOIN SalesInvoice E ON A.SalId=E.SalId AND E.DlvSts>3
							,SchemeMaster H WHERE E.RtrId=@Pi_RtrId AND 
							E.SalInvDate BETWEEN H.SchValidFrom AND  CASE @Pi_SalId WHEN 0 THEN  H.SchValidTill ELSE @BillDate END  AND H.SchId=@Pi_SchId
							AND  A.SalId <(CASE @Pi_SalId WHEN 0 THEN  A.SAlId ELSE @Pi_SalId END) 
							GROUP BY A.SalId,A.PrdId,A.PrdBatId,D.PrdUnitId,PrdUnitMRP
						) AS A 
						INNER JOIN 
						(
							SELECT A.SalId,A.SchId FROM SalesInvoiceUnSelectedScheme A INNER JOIN SchemeMaster B ON A.SchId=B.SchId
							WHERE A.SchId=@Pi_SchId
						) B ON A.SalId=B.SalId AND A.SchId=@Pi_SchId
					UNION
						SELECT A.SalId,A.PrdId,A.PrdBatId,MRP,SchemeOnQty,SchemeOnAmount,SchemeOnKg,SchemeOnLitre,A.SchId FROM 
						(	SELECT A.SalId,A.PrdId,A.PrdBatId,PrdUnitMRP AS MRP,ISNULL(SUM(A.BaseQty-A.ReturnedQty),0) AS SchemeOnQty,
							ISNULL(SUM((A.BaseQty-A.ReturnedQty) * A.PrdUnitSelRate),0) AS SchemeOnAmount,
							ISNULL(CASE D.PrdUnitId WHEN 2 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0)/1000
							WHEN 3 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0) END,0) AS SchemeOnKg,
							ISNULL(CASE D.PrdUnitId WHEN 4 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0)/1000
							WHEN 5 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0) END,0) AS SchemeOnLitre,@Pi_SchId As SchId
							FROM SalesInvoiceProduct A (NOLOCK) INNER JOIN Fn_ReturnSchemeProductBatch(@Pi_SchId) B ON
							A.PrdId = B.PrdId AND A.PrdBatId = CASE B.PrdBatId WHEN 0 THEN A.PrdBatId ELSE B.PrdBatId End
							INNER JOIN Product C ON A.PrdId = C.PrdId
							INNER JOIN ProductUnit D ON C.PrdUnitId = D.PrdUnitId
							INNER JOIN SalesInvoice E ON A.SalId=E.SalId AND E.DlvSts>3
							INNER JOIN (SELECT A.SalId FROM SalesInvoice A WHERE  NOT EXISTS 
										(SELECT SalId FROM SalesInvoiceSchemeDtBilled B WHERE A.SalId=B.SalId AND B.SchId=@Pi_SchId) 
										AND DlvSts<>3 AND RtrId=@Pi_RtrId)G ON A.SalId=G.SalId
							,SchemeMaster H WHERE E.RtrId=@Pi_RtrId AND 
							E.SalInvDate BETWEEN H.SchValidFrom AND  CASE @Pi_SalId WHEN 0 THEN  H.SchValidTill ELSE @BillDate END  AND H.SchId=@Pi_SchId
							AND  A.SalId <(CASE @Pi_SalId WHEN 0 THEN  A.SAlId ELSE @Pi_SalId END) 
							GROUP BY A.SalId,A.PrdId,A.PrdBatId,D.PrdUnitId,PrdUnitMRP
							
						) AS A 
					)AS A GROUP BY PrdId,PrdBatId,SchId,MRP
			END
			ELSE IF @Pi_Mode=2
			BEGIN
				INSERT INTO @TempBilled1(PrdId,PrdBatId,MRP,SchemeOnQty,SchemeOnAmount,SchemeOnKG,SchemeOnLitre,SchId)	
					SELECT PrdId,PrdBatId,MRP,SUM(SchemeOnQty),SUM(SchemeOnAmount),SUM(SchemeOnKg),SUM(SchemeOnLitre),SchId FROM 
					(	SELECT A.SalId,A.PrdId,A.PrdBatId,MRP,SchemeOnQty,SchemeOnAmount,SchemeOnKg,SchemeOnLitre,A.SchId FROM 
							(SELECT A.SalId,A.PrdId,A.PrdBatId,PrdUnitMRP AS MRP,ISNULL(SUM(A.BaseQty-A.ReturnedQty),0) AS SchemeOnQty,
							ISNULL(SUM((A.BaseQty-A.ReturnedQty) * A.PrdUnitSelRate),0) AS SchemeOnAmount,
							ISNULL(CASE D.PrdUnitId WHEN 2 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0)/1000
							WHEN 3 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0) END,0) AS SchemeOnKg,
							ISNULL(CASE D.PrdUnitId WHEN 4 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0)/1000
							WHEN 5 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0) END,0) AS SchemeOnLitre,@Pi_SchId AS SchId
							FROM SalesInvoiceProduct A (NOLOCK) INNER JOIN Fn_ReturnSchemeProductBatch(@Pi_SchId) B ON
							A.PrdId = B.PrdId AND A.PrdBatId = CASE B.PrdBatId WHEN 0 THEN A.PrdBatId ELSE B.PrdBatId End
							INNER JOIN Product C ON A.PrdId = C.PrdId
							INNER JOIN ProductUnit D ON C.PrdUnitId = D.PrdUnitId
							INNER JOIN SalesInvoice E ON A.SalId=E.SalId AND E.DlvSts>3
							,SchemeMaster H WHERE E.RtrId=@Pi_RtrId AND 
							E.SalInvDate BETWEEN H.SchValidFrom AND CASE @Pi_SalId WHEN 0 THEN  H.SchValidTill ELSE @BillDate END AND H.SchId=@Pi_SchId
							AND  A.SalId <(CASE @Pi_SalId WHEN 0 THEN  A.SAlId ELSE @Pi_SalId END) 
							GROUP BY A.SalId,A.PrdId,A.PrdBatId,D.PrdUnitId,PrdUnitMRP
						) AS A 
						INNER JOIN 
						(	SELECT A.SalId,A.SchId,PrdId,PrdBatId FROM SalesInvoiceSchemeDtBilled A INNER JOIN SchemeMaster B 
							ON A.SchId=B.SchId WHERE A.SchId=@Pi_SchId
						) B	ON  A.SalId =B.SalId AND A.PrdId=B.PrdId AND A.PrdBatId=B.PrdBatId AND A.SchId=@Pi_SchId
					UNION
						SELECT A.SalId,A.PrdId,A.PrdBatId,MRP,SchemeOnQty,SchemeOnAmount,SchemeOnKg,SchemeOnLitre,A.SchId FROM 
						(	SELECT A.SalId,A.PrdId,A.PrdBatId,PrdUnitMRP AS MRP,ISNULL(SUM(A.BaseQty-A.ReturnedQty),0) AS SchemeOnQty,
							ISNULL(SUM((A.BaseQty-A.ReturnedQty) * A.PrdUnitSelRate),0) AS SchemeOnAmount,
							ISNULL(CASE D.PrdUnitId WHEN 2 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0)/1000
							WHEN 3 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0) END,0) AS SchemeOnKg,
							ISNULL(CASE D.PrdUnitId WHEN 4 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0)/1000
							WHEN 5 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0) END,0) AS SchemeOnLitre,@Pi_SchId As SchId
							FROM SalesInvoiceProduct A (NOLOCK) INNER JOIN Fn_ReturnSchemeProductBatch(@Pi_SchId) B ON
							A.PrdId = B.PrdId AND A.PrdBatId = CASE B.PrdBatId WHEN 0 THEN A.PrdBatId ELSE B.PrdBatId End
							INNER JOIN Product C ON A.PrdId = C.PrdId
							INNER JOIN ProductUnit D ON C.PrdUnitId = D.PrdUnitId
							INNER JOIN SalesInvoice E ON A.SalId=E.SalId AND E.DlvSts>3
							,SchemeMaster H WHERE E.RtrId=@Pi_RtrId AND 
							E.SalInvDate BETWEEN H.SchValidFrom AND  CASE @Pi_SalId WHEN 0 THEN  H.SchValidTill ELSE @BillDate END  AND H.SchId=@Pi_SchId
							AND  A.SalId <(CASE @Pi_SalId WHEN 0 THEN  A.SAlId ELSE @Pi_SalId END) 
							GROUP BY A.SalId,A.PrdId,A.PrdBatId,D.PrdUnitId,PrdUnitMRP
						) AS A 
						INNER JOIN 
						(
							SELECT A.SalId,A.SchId FROM SalesInvoiceUnSelectedScheme A INNER JOIN SchemeMaster B ON A.SchId=B.SchId
							WHERE A.SchId=@Pi_SchId
						) B ON A.SalId=B.SalId AND A.SchId=@Pi_SchId
					UNION
						SELECT A.SalId,A.PrdId,A.PrdBatId,MRP,SchemeOnQty,SchemeOnAmount,SchemeOnKg,SchemeOnLitre,A.SchId FROM 
						(	SELECT A.SalId,A.PrdId,A.PrdBatId,PrdUnitMRP AS MRP,ISNULL(SUM(A.BaseQty-A.ReturnedQty),0) AS SchemeOnQty,
							ISNULL(SUM((A.BaseQty-A.ReturnedQty) * A.PrdUnitSelRate),0) AS SchemeOnAmount,
							ISNULL(CASE D.PrdUnitId WHEN 2 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0)/1000
							WHEN 3 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0) END,0) AS SchemeOnKg,
							ISNULL(CASE D.PrdUnitId WHEN 4 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0)/1000
							WHEN 5 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0) END,0) AS SchemeOnLitre,@Pi_SchId As SchId
							FROM SalesInvoiceProduct A (NOLOCK) INNER JOIN Fn_ReturnSchemeProductBatch(@Pi_SchId) B ON
							A.PrdId = B.PrdId AND A.PrdBatId = CASE B.PrdBatId WHEN 0 THEN A.PrdBatId ELSE B.PrdBatId End
							INNER JOIN Product C ON A.PrdId = C.PrdId
							INNER JOIN ProductUnit D ON C.PrdUnitId = D.PrdUnitId
							INNER JOIN SalesInvoice E ON A.SalId=E.SalId AND E.DlvSts>3
							INNER JOIN (SELECT A.SalId FROM SalesInvoice A WHERE  NOT EXISTS 
										(SELECT SalId FROM SalesInvoiceSchemeDtBilled B WHERE A.SalId=B.SalId AND B.SchId=@Pi_SchId) 
										AND DlvSts<>3 AND RtrId=@Pi_RtrId)G ON A.SalId=G.SalId
							,SchemeMaster H WHERE E.RtrId=@Pi_RtrId AND 
							E.SalInvDate BETWEEN H.SchValidFrom AND  CASE @Pi_SalId WHEN 0 THEN  H.SchValidTill ELSE @BillDate END  AND H.SchId=@Pi_SchId
							AND  A.SalId <(CASE @Pi_SalId WHEN 0 THEN  A.SAlId ELSE @Pi_SalId END) 
							GROUP BY A.SalId,A.PrdId,A.PrdBatId,D.PrdUnitId,PrdUnitMRP
							
						) AS A 
					)AS A GROUP BY PrdId,PrdBatId,SchId,MRP
			END
			ELSE
			BEGIN
				INSERT INTO @TempBilled1(PrdId,PrdBatId,MRP,SchemeOnQty,SchemeOnAmount,SchemeOnKG,SchemeOnLitre,SchId)	
					SELECT PrdId,PrdBatId,MRP,SUM(SchemeOnQty),SUM(SchemeOnAmount),SUM(SchemeOnKg),SUM(SchemeOnLitre),SchId FROM 
					(	SELECT A.SalId,A.PrdId,A.PrdBatId,MRP,SchemeOnQty,SchemeOnAmount,SchemeOnKg,SchemeOnLitre,A.SchId FROM 
							(SELECT A.SalId,A.PrdId,A.PrdBatId,PrdUnitMRP AS MRP,ISNULL(SUM(A.BaseQty-A.ReturnedQty),0) AS SchemeOnQty,
							ISNULL(SUM((A.BaseQty-A.ReturnedQty) * A.PrdUnitSelRate),0) AS SchemeOnAmount,
							ISNULL(CASE D.PrdUnitId WHEN 2 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0)/1000
							WHEN 3 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0) END,0) AS SchemeOnKg,
							ISNULL(CASE D.PrdUnitId WHEN 4 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0)/1000
							WHEN 5 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0) END,0) AS SchemeOnLitre,@Pi_SchId AS SchId
							FROM SalesInvoiceProduct A (NOLOCK) INNER JOIN Fn_ReturnSchemeProductBatch(@Pi_SchId) B ON
							A.PrdId = B.PrdId AND A.PrdBatId = CASE B.PrdBatId WHEN 0 THEN A.PrdBatId ELSE B.PrdBatId End
							INNER JOIN Product C ON A.PrdId = C.PrdId
							INNER JOIN ProductUnit D ON C.PrdUnitId = D.PrdUnitId
							INNER JOIN SalesInvoice E ON A.SalId=E.SalId AND E.DlvSts<>3
							,SchemeMaster H WHERE E.RtrId=@Pi_RtrId AND 
							E.SalInvDate BETWEEN H.SchValidFrom AND CASE @Pi_SalId WHEN 0 THEN  H.SchValidTill ELSE @BillDate END AND H.SchId=@Pi_SchId
							GROUP BY A.SalId,A.PrdId,A.PrdBatId,D.PrdUnitId,PrdUnitMRP
						) AS A 
						INNER JOIN 
						(	SELECT A.SalId,A.SchId,PrdId,PrdBatId FROM SalesInvoiceSchemeDtBilled A INNER JOIN SchemeMaster B 
							ON A.SchId=B.SchId WHERE A.SchId=@Pi_SchId
						) B	ON  A.SalId =B.SalId AND A.PrdId=B.PrdId AND A.PrdBatId=B.PrdBatId AND A.SchId=@Pi_SchId
					UNION
						SELECT A.SalId,A.PrdId,A.PrdBatId,MRP,SchemeOnQty,SchemeOnAmount,SchemeOnKg,SchemeOnLitre,A.SchId FROM 
						(	SELECT A.SalId,A.PrdId,A.PrdBatId,PrdUnitMRP AS MRP,ISNULL(SUM(A.BaseQty-A.ReturnedQty),0) AS SchemeOnQty,
							ISNULL(SUM((A.BaseQty-A.ReturnedQty) * A.PrdUnitSelRate),0) AS SchemeOnAmount,
							ISNULL(CASE D.PrdUnitId WHEN 2 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0)/1000
							WHEN 3 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0) END,0) AS SchemeOnKg,
							ISNULL(CASE D.PrdUnitId WHEN 4 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0)/1000
							WHEN 5 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0) END,0) AS SchemeOnLitre,@Pi_SchId As SchId
							FROM SalesInvoiceProduct A (NOLOCK) INNER JOIN Fn_ReturnSchemeProductBatch(@Pi_SchId) B ON
							A.PrdId = B.PrdId AND A.PrdBatId = CASE B.PrdBatId WHEN 0 THEN A.PrdBatId ELSE B.PrdBatId End
							INNER JOIN Product C ON A.PrdId = C.PrdId
							INNER JOIN ProductUnit D ON C.PrdUnitId = D.PrdUnitId
							INNER JOIN SalesInvoice E ON A.SalId=E.SalId AND E.DlvSts<>3
							,SchemeMaster H WHERE E.RtrId=@Pi_RtrId AND 
							E.SalInvDate BETWEEN H.SchValidFrom AND  CASE @Pi_SalId WHEN 0 THEN  H.SchValidTill ELSE @BillDate END  AND H.SchId=@Pi_SchId
							GROUP BY A.SalId,A.PrdId,A.PrdBatId,D.PrdUnitId,PrdUnitMRP
						) AS A 
						INNER JOIN 
						(
							SELECT A.SalId,A.SchId FROM SalesInvoiceUnSelectedScheme A INNER JOIN SchemeMaster B ON A.SchId=B.SchId
							WHERE A.SchId=@Pi_SchId
						) B ON A.SalId=B.SalId AND A.SchId=@Pi_SchId
					UNION
						SELECT A.SalId,A.PrdId,A.PrdBatId,MRP,SchemeOnQty,SchemeOnAmount,SchemeOnKg,SchemeOnLitre,A.SchId FROM 
						(	SELECT A.SalId,A.PrdId,A.PrdBatId,PrdUnitMRP AS MRP,ISNULL(SUM(A.BaseQty-A.ReturnedQty),0) AS SchemeOnQty,
							ISNULL(SUM((A.BaseQty-A.ReturnedQty) * A.PrdUnitSelRate),0) AS SchemeOnAmount,
							ISNULL(CASE D.PrdUnitId WHEN 2 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0)/1000
							WHEN 3 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0) END,0) AS SchemeOnKg,
							ISNULL(CASE D.PrdUnitId WHEN 4 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0)/1000
							WHEN 5 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0) END,0) AS SchemeOnLitre,@Pi_SchId As SchId
							FROM SalesInvoiceProduct A (NOLOCK) INNER JOIN Fn_ReturnSchemeProductBatch(@Pi_SchId) B ON
							A.PrdId = B.PrdId AND A.PrdBatId = CASE B.PrdBatId WHEN 0 THEN A.PrdBatId ELSE B.PrdBatId End
							INNER JOIN Product C ON A.PrdId = C.PrdId
							INNER JOIN ProductUnit D ON C.PrdUnitId = D.PrdUnitId
							INNER JOIN SalesInvoice E ON A.SalId=E.SalId AND E.DlvSts<>3
							INNER JOIN (SELECT A.SalId FROM SalesInvoice A WHERE  NOT EXISTS 
										(SELECT SalId FROM SalesInvoiceSchemeDtBilled B WHERE A.SalId=B.SalId AND B.SchId=@Pi_SchId) 
										AND DlvSts<>3 AND RtrId=@Pi_RtrId)G ON A.SalId=G.SalId
							,SchemeMaster H WHERE E.RtrId=@Pi_RtrId AND 
							E.SalInvDate BETWEEN H.SchValidFrom AND  CASE @Pi_SalId WHEN 0 THEN  H.SchValidTill ELSE @BillDate END  AND H.SchId=@Pi_SchId
							GROUP BY A.SalId,A.PrdId,A.PrdBatId,D.PrdUnitId,PrdUnitMRP
							
						) AS A 
					)AS A GROUP BY PrdId,PrdBatId,SchId,MRP
			END
		END
		ELSE
		BEGIN
			-- Commented by Boopathy 27-07-2011 (Sales Return is not reduced for Data based QPS Scheme)
			INSERT INTO @TempBilled1(PrdId,PrdBatId,MRP,SchemeOnQty,SchemeOnAmount,SchemeOnKG,SchemeOnLitre,SchId)	
				SELECT PrdId,PrdBatId,MRP,SUM(SchemeOnQty),SUM(SchemeOnAmount),SUM(SchemeOnKg),SUM(SchemeOnLitre),SchId FROM 
				(	SELECT A.SalId,A.PrdId,A.PrdBatId,MRP,SchemeOnQty,SchemeOnAmount,SchemeOnKg,SchemeOnLitre,A.SchId FROM 
						(SELECT A.SalId,A.PrdId,A.PrdBatId,PrdUnitMRP AS MRP,ISNULL(SUM(A.BaseQty-A.ReturnedQty),0) AS SchemeOnQty,
						ISNULL(SUM((A.BaseQty-A.ReturnedQty) * A.PrdUnitSelRate),0) AS SchemeOnAmount,
						ISNULL(CASE D.PrdUnitId WHEN 2 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0)/1000
						WHEN 3 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0) END,0) AS SchemeOnKg,
						ISNULL(CASE D.PrdUnitId WHEN 4 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0)/1000
						WHEN 5 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0) END,0) AS SchemeOnLitre,@Pi_SchId AS SchId
						FROM SalesInvoiceProduct A (NOLOCK) INNER JOIN Fn_ReturnSchemeProductBatch(@Pi_SchId) B ON
						A.PrdId = B.PrdId AND A.PrdBatId = CASE B.PrdBatId WHEN 0 THEN A.PrdBatId ELSE B.PrdBatId End
						INNER JOIN Product C ON A.PrdId = C.PrdId
						INNER JOIN ProductUnit D ON C.PrdUnitId = D.PrdUnitId
						INNER JOIN SalesInvoice E ON A.SalId=E.SalId AND E.DlvSts<>3
						,SchemeMaster H WHERE E.RtrId=@Pi_RtrId AND 
						E.SalInvDate BETWEEN H.SchValidFrom AND H.SchValidTill AND H.SchId=@Pi_SchId
						GROUP BY A.SalId,A.PrdId,A.PrdBatId,D.PrdUnitId,PrdUnitMRP
					) AS A 
					INNER JOIN 
					(	SELECT A.SalId,A.SchId,PrdId,PrdBatId FROM SalesInvoiceSchemeDtBilled A INNER JOIN SchemeMaster B 
						ON A.SchId=B.SchId WHERE A.SchId=@Pi_SchId
					) B	ON  A.SalId =B.SalId AND A.PrdId=B.PrdId AND A.PrdBatId=B.PrdBatId AND A.SchId=@Pi_SchId
				UNION
					SELECT A.SalId,A.PrdId,A.PrdBatId,MRP,SchemeOnQty,SchemeOnAmount,SchemeOnKg,SchemeOnLitre,A.SchId FROM 
					(	SELECT A.SalId,A.PrdId,A.PrdBatId,PrdUnitMRP AS MRP,ISNULL(SUM(A.BaseQty-A.ReturnedQty),0) AS SchemeOnQty,
						ISNULL(SUM((A.BaseQty-A.ReturnedQty) * A.PrdUnitSelRate),0) AS SchemeOnAmount,
						ISNULL(CASE D.PrdUnitId WHEN 2 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0)/1000
						WHEN 3 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0) END,0) AS SchemeOnKg,
						ISNULL(CASE D.PrdUnitId WHEN 4 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0)/1000
						WHEN 5 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0) END,0) AS SchemeOnLitre,@Pi_SchId As SchId
						FROM SalesInvoiceProduct A (NOLOCK) INNER JOIN Fn_ReturnSchemeProductBatch(@Pi_SchId) B ON
						A.PrdId = B.PrdId AND A.PrdBatId = CASE B.PrdBatId WHEN 0 THEN A.PrdBatId ELSE B.PrdBatId End
						INNER JOIN Product C ON A.PrdId = C.PrdId
						INNER JOIN ProductUnit D ON C.PrdUnitId = D.PrdUnitId
						INNER JOIN SalesInvoice E ON A.SalId=E.SalId AND E.DlvSts<>3
						,SchemeMaster H WHERE E.RtrId=@Pi_RtrId AND 
						E.SalInvDate BETWEEN H.SchValidFrom AND H.SchValidTill   AND H.SchId=@Pi_SchId
						GROUP BY A.SalId,A.PrdId,A.PrdBatId,D.PrdUnitId,PrdUnitMRP
					) AS A 
					INNER JOIN 
					(
						SELECT A.SalId,A.SchId FROM SalesInvoiceUnSelectedScheme A INNER JOIN SchemeMaster B ON A.SchId=B.SchId
						WHERE A.SchId=@Pi_SchId
					) B ON A.SalId=B.SalId AND A.SchId=@Pi_SchId
				UNION
					SELECT A.SalId,A.PrdId,A.PrdBatId,MRP,SchemeOnQty,SchemeOnAmount,SchemeOnKg,SchemeOnLitre,A.SchId FROM 
					(	SELECT A.SalId,A.PrdId,A.PrdBatId,PrdUnitMRP AS MRP,ISNULL(SUM(A.BaseQty-A.ReturnedQty),0) AS SchemeOnQty,
						ISNULL(SUM((A.BaseQty-A.ReturnedQty) * A.PrdUnitSelRate),0) AS SchemeOnAmount,
						ISNULL(CASE D.PrdUnitId WHEN 2 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0)/1000
						WHEN 3 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0) END,0) AS SchemeOnKg,
						ISNULL(CASE D.PrdUnitId WHEN 4 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0)/1000
						WHEN 5 THEN ISNULL(SUM(PrdWgt * (A.BaseQty-A.ReturnedQty)),0) END,0) AS SchemeOnLitre,@Pi_SchId As SchId
						FROM SalesInvoiceProduct A (NOLOCK) INNER JOIN Fn_ReturnSchemeProductBatch(@Pi_SchId) B ON
						A.PrdId = B.PrdId AND A.PrdBatId = CASE B.PrdBatId WHEN 0 THEN A.PrdBatId ELSE B.PrdBatId End
						INNER JOIN Product C ON A.PrdId = C.PrdId
						INNER JOIN ProductUnit D ON C.PrdUnitId = D.PrdUnitId
						INNER JOIN SalesInvoice E ON A.SalId=E.SalId AND E.DlvSts<>3
						INNER JOIN (SELECT A.SalId FROM SalesInvoice A WHERE  NOT EXISTS 
									(SELECT SalId FROM SalesInvoiceSchemeDtBilled B WHERE A.SalId=B.SalId AND B.SchId=@Pi_SchId) 
									AND DlvSts<>3 AND RtrId=@Pi_RtrId)G ON A.SalId=G.SalId
						,SchemeMaster H WHERE E.RtrId=@Pi_RtrId AND 
						E.SalInvDate BETWEEN H.SchValidFrom AND H.SchValidTill  AND H.SchId=@Pi_SchId
						GROUP BY A.SalId,A.PrdId,A.PrdBatId,D.PrdUnitId,PrdUnitMRP
						
					) AS A 
				)AS A GROUP BY PrdId,PrdBatId,SchId,MRP
		END
	
		IF @Pi_Mode=0
		BEGIN
			--To Subtract Non Deliverbill
			INSERT INTO @TempBilled1(PrdId,PrdBatId,MRP,SchemeOnQty,SchemeOnAmount,SchemeOnKG,SchemeOnLitre,SchId)
				Select SIP.Prdid,SIP.Prdbatid,PrdUnitMRP AS MRP,
				-1 *ISNULL(SUM(SIP.BaseQty),0) AS SchemeOnQty,
				-1 *ISNULL(SUM(SIP.BaseQty *PrdUom1EditedSelRate),0) AS SchemeOnAmount,
				-1 *ISNULL(CASE D.PrdUnitId WHEN 2 THEN ISNULL(SUM(PrdWgt * SIP.BaseQty),0)/1000
				WHEN 3 THEN ISNULL(SUM(PrdWgt * SIP.BaseQty),0) END,0) AS SchemeOnKg,
				-1 *ISNULL(CASE D.PrdUnitId WHEN 4 THEN ISNULL(SUM(PrdWgt * SIP.BaseQty),0)/1000
				WHEN 5 THEN ISNULL(SUM(PrdWgt * SIP.BaseQty),0) END,0) AS SchemeOnLitre,@Pi_SchId
				From SalesInvoice SI (NOLOCK)
				INNER JOIN SalesInvoiceProduct SIP (NOLOCK)	ON SI.Salid=SIP.Salid AND SI.SalInvdate BETWEEN @SchValidFrom AND @SchValidTill
				INNER JOIN Fn_ReturnSchemeProductBatch(@Pi_SchId) B ON SIP.PrdId = B.PrdId
				AND SIP.PrdBatId = CASE B.PrdBatId WHEN 0 THEN SIP.PrdBatId ELSE B.PrdBatId End
				INNER JOIN Product C (NOLOCK) ON SIP.PrdId = C.PrdId
				INNER JOIN ProductUnit D (NOLOCK) ON C.PrdUnitId = D.PrdUnitId,SchemeMaster H
				WHERE Dlvsts in(1,2) and Rtrid=@Pi_RtrId and SI.Salid <>@Pi_SalId
				and SI.Salid Not in(Select Salid from SalesInvoiceSchemeQPSGiven (NOLOCK) where Salid<>@Pi_SalId and  schid=@Pi_SchId)
				AND SI.SalInvDate BETWEEN H.SchValidFrom AND CASE @Pi_SalId WHEN 0 THEN  H.SchValidTill ELSE @BillDate END  AND H.SchId=@Pi_SchId
				Group by SIP.Prdid,SIP.Prdbatid,D.PrdUnitId,PrdUnitMRP
		END
		IF @Pi_Mode<>2
		BEGIN
			IF @Pi_SalId<>0
			BEGIN
				--To Subtract the Billed Qty in Edit Mode
				INSERT INTO @TempBilled1(PrdId,PrdBatId,MRP,SchemeOnQty,SchemeOnAmount,SchemeOnKG,SchemeOnLitre,SchId)		
				SELECT A.PrdId,A.PrdBatId,PrdUnitMRP AS MRP,-1 * ISNULL(SUM(A.BaseQty),0) AS SchemeOnQty,
					-1 * ISNULL(SUM(A.BaseQty * A.PrdUnitSelRate),0) AS SchemeOnAmount,
					-1 * ISNULL(CASE D.PrdUnitId WHEN 2 THEN ISNULL(SUM(PrdWgt * A.BaseQty),0)/1000
					WHEN 3 THEN ISNULL(SUM(PrdWgt * A.BaseQty),0) END,0) AS SchemeOnKg,
					-1 * ISNULL(CASE D.PrdUnitId WHEN 4 THEN ISNULL(SUM(PrdWgt * A.BaseQty),0)/1000
					WHEN 5 THEN ISNULL(SUM(PrdWgt * A.BaseQty),0) END,0) AS SchemeOnLitre,@Pi_SchId
					FROM SalesInvoiceProduct A (NOLOCK) INNER JOIN Fn_ReturnSchemeProductBatch(@Pi_SchId) B ON
					A.PrdId = B.PrdId AND A.PrdBatId = CASE B.PrdBatId WHEN 0 THEN A.PrdBatId ELSE B.PrdBatId End
					INNER JOIN Product C ON A.PrdId = C.PrdId
					INNER JOIN ProductUnit D ON C.PrdUnitId = D.PrdUnitId
					WHERE A.SalId = @Pi_SalId AND A.SalId NOT IN (SELECT SalId FROM SalesInvoice WHERE DlvSts>3)
					GROUP BY A.PrdId,A.PrdBatId,D.PrdUnitId,PrdUnitMRP
			
			END
			IF @QPSBasedOn=1 
			BEGIN
				INSERT INTO @TempBilled1(PrdId,PrdBatId,MRP,SchemeOnQty,SchemeOnAmount,SchemeOnKG,SchemeOnLitre,SchId)
				SELECT A.PrdId,A.PrdBatId,ISNULL(PrdUnitMRP,0) AS MRP,-1 * ISNULL(SUM(SumQty),0) AS SchemeOnQty,
					-1 * ISNULL(SUM(SumValue),0) AS SchemeOnAmount,-1 * ISNULL(SUM(SumInKG),0) AS SchemeOnKG,
					-1 * ISNULL(SUM(SumInLitre),0) AS SchemeOnLitre,@Pi_SchId
					FROM SalesInvoiceQPSRedeemed A (NOLOCK) LEFT OUTER JOIN SalesInvoiceProduct B (NOLOCK)
					ON A.SalId = B.SalId AND A.PrdId = B.PrdId AND A.PrdBatId = B.PrdBatId
					WHERE SchId = @Pi_SchId AND RtrId = @Pi_RtrId					
					AND A.SalId <> @Pi_SalId GROUP BY A.PrdId,A.PrdBatId,PrdUnitMRP
			END
		END
	END
	INSERT INTO @TempBilled(PrdId,PrdBatId,MRP,SchemeOnQty,SchemeOnAmount,SchemeOnKG,SchemeOnLitre,SchId)
		SELECT PrdId,PrdBatId,MRP,ISNULL(SUM(SchemeOnQty),0),ISNULL(SUM(SchemeOnAmount),0),
		ISNULL(SUM(SchemeOnKG),0),ISNULL(SUM(SchemeOnLitre),0),SchId FROM @TempBilled1
		GROUP BY PrdId,PrdBatId,SchId,MRP
		
	DELETE FROM @TempBilled WHERE (SchemeOnQty+SchemeOnAmount+SchemeOnKG+SchemeOnLitre)<=0		
	--->Added By Nanda on 26/11/2010
	IF @QPSBasedOn<>1 AND @FlexiSch=1
	BEGIN
		DELETE FROM @TempBilled WHERE SchemeOnQty+SchemeOnAmount+SchemeOnKG<=0	
	END
	ELSE
	BEGIN
		DELETE FROM @TempBilled WHERE SchemeOnQty+SchemeOnAmount+SchemeOnKG=0	
	END
	--->Till Here	
	--To Get the Product Details for the Selected Level
	IF @SchemeLvlMode = 0
	BEGIN
		SELECT @SchLevelId = SUBSTRING(LevelName,6,LEN(LevelName)) from ProductCategoryLevel
			WHERE CmpPrdCtgId = @SchLevelId
		
		INSERT INTO @TempHier (PrdId,PrdBatId,PrdCtgValMainId)
		SELECT DISTINCT D.PrdId,E.PrdBatId,C.PrdCtgValMainId FROM ProductCategoryValue C
		INNER JOIN ( Select LEFT(PrdCtgValLinkCode,@SchLevelId*5) as PrdCtgValLinkCode,A.Prdid from Product A
		INNER JOIN ProductCategoryValue B On A.PrdCtgValMainId = B.PrdCtgValMainId
		INNER JOIN @TempBilled F ON A.PrdId = F.PrdId) AS D ON
		D.PrdCtgValLinkCode = C.PrdCtgValLinkCode INNER JOIN ProductBatch E
		ON D.PrdId = E.PrdId
	END
	ELSE
	BEGIN
		INSERT INTO @TempHier (PrdId,PrdBatId,PrdCtgValMainId)
		SELECT DISTINCT A.PrdId As PrdId,E.PrdBatId,D.PrdCtgValMainId FROM @TempBilled A
		INNER JOIN UdcDetails C on C.MasterRecordId =A.PrdId
		INNER JOIN SchemeProducts D ON A.SchId = D.SchId AND
		D.PrdCtgValMainId = C.UDCUniqueId
		INNER JOIN ProductBatch E ON A.PrdId = E.PrdId
		WHERE A.SchId=@Pi_Schid
	END
	--To Get the Sum of Quantity, Value or Weight Billed for the Scheme In From and To Uom Conversion - Slab Wise
	INSERT INTO @TempBilledAch(PrdId,PrdBatId,PrdCtgValMainId,FrmSchAch,FrmUomAch,ToSchAch,ToUomAch,SlabId,
	FromQty,UomId,ToQty,ToUomId)
	SELECT G.PrdId,G.PrdBatId,G.PrdCtgValMainId,ISNULL(CASE @SchType
	WHEN 1 THEN SUM(SchemeOnQty / CAST(ISNULL(D.ConversionFactor,1) AS NUMERIC(38,6)))
	WHEN 2 THEN SUM(SchemeOnAmount)
	WHEN 3 THEN (CASE A.UomId
			WHEN 2 THEN SUM(SchemeOnKg)*1000
			WHEN 3 THEN SUM(SchemeOnKg)
			WHEN 4 THEN SUM(SchemeOnLitre)*1000
			WHEN 5 THEN SUM(SchemeOnLitre)	END)
		END,0) AS FrmSchAch,A.UomId AS FrmUomAch,
	ISNULL(CASE @SchType
	WHEN 1 THEN SUM(SchemeOnQty / CAST(ISNULL(E.ConversionFactor,1) AS NUMERIC(38,6)))
	WHEN 2 THEN SUM(SchemeOnAmount)
	WHEN 3 THEN (CASE A.ToUomId
			WHEN 2 THEN SUM(SchemeOnKg) * 1000
			WHEN 3 THEN SUM(SchemeOnKg)
			WHEN 4 THEN SUM(SchemeOnLitre) * 1000
			WHEN 5 THEN SUM(SchemeOnLitre)	END)
		END,0) AS ToSchAch,A.ToUomId AS ToUomAch,
	A.Slabid,(A.PurQty + A.FromQty) as FromQty,A.UomId,A.ToQty,A.ToUomId
	FROM SchemeSlabs A
	INNER JOIN @TempBilled B ON A.SchId = B.SchId AND A.SchId = @Pi_SchId
	INNER JOIN Product C ON B.PrdId = C.PrdId
	INNER JOIN @TempHier G ON B.PrdId = G.PrdId AND B.PrdBatId = G.PrdBatId
	LEFT OUTER JOIN UomGroup D ON D.UomGroupId = C.UomGroupId AND D.UomId = A.UomId
	LEFT OUTER JOIN UomGroup E ON E.UomGroupId = C.UomGroupId AND E.UomId = A.UomId
	GROUP BY G.PrdId,G.PrdBatId,G.PrdCtgValMainId,A.UomId,A.Slabid,A.PurQty,A.FromQty,A.ToUomId,A.ToQty
	INSERT INTO @TempBilledQpsReset(PrdId,PrdBatId,PrdCtgValMainId,FrmSchAch,FrmUomAch,ToSchAch,ToUomAch,SlabId,
	FromQty,UomId,ToQty,ToUomId)
	SELECT PrdId,PrdBatId,PrdCtgValMainId,FrmSchAch,FrmUomAch,ToSchAch,ToUomAch,SlabId,
	FromQty,UomId,ToQty,ToUomId FROM @TempBilledAch
	SET @QPSResetAvail = 0
	IF @QPSReset <> 0
	BEGIN
		--Select the Applicable Slab for the Scheme
		SELECT @SlabId = SlabId FROM (SELECT TOP 1 A.SlabId FROM @TempBilledAch A
			INNER JOIN @TempBilledAch B ON A.SlabId = B.SlabId AND A.PrdId = B.PrdId
			AND A.PrdBatId = B.PrdBatId AND A.PrdCtgValMainId = B.PrdCtgValMainId
			GROUP BY A.SlabId,B.FromQty,B.ToQty
			HAVING SUM(A.FrmSchAch) >= B.FromQty AND
			SUM(A.ToSchAch) <= (CASE B.ToQty WHEN 0 THEN SUM(A.ToSchAch) ELSE B.ToQty END)
			ORDER BY A.SlabId DESC) As SlabId
		IF @SlabId = (SELECT MAX(SlabId) FROM SchemeSlabs WHERE SchId = @Pi_SchId)
		BEGIN
			SET @QPSResetAvail = 1
		END
	END
	SELECT @TotalValue = ISNULL(SUM(FrmSchAch),0) FROM @TempBilledAch WHERE SlabId =1
	
	--->Added By Boo and Nanda on 29/11/2010
	IF @SchType = 3 AND @QPSReset=1
	BEGIN
		CREATE TABLE  #TemAppQPSSchemes
		(
			SchId		INT,
			SlabId		INT,
			NoOfTime	INT
		)
		
		DECLARE @NewNoOfTimes AS INT
		DECLARE @NewSlabId AS INT
		DECLARE @NewTotalValue AS NUMERIC(38,6)
		SET @NewTotalValue=@TotalValue
		SET @NewSlabId=@SlabId
		WHILE @NewTotalValue>0 AND @NewSlabId>0
		BEGIN
			SELECT @NewNoOfTimes=FLOOR(@NewTotalValue/(PurQty+FRomQty)) FROM SchemeSlabs WHERE SlabId=@NewSlabId AND SchId=@Pi_SchId
			IF @NewNoOfTimes>0
			BEGIN
				SELECT @NewTotalValue=@NewTotalValue-(@NewNoOfTimes*(PurQty+FRomQty)) FROM SchemeSlabs WHERE SlabId=@NewSlabId AND SchId=@Pi_SchId
				INSERT INTO #TemAppQPSSchemes
				SELECT @Pi_SchId,@NewSlabId,@NewNoOfTimes
			END
			SET @NewSlabId=@NewSlabId-1
		END
		DELETE A FROM @TempBilledAch A WHERE NOT EXISTS ( SELECT SlabId FROM #TemAppQPSSchemes B WHERE A.SlabId=B.SlabId)
	END
	--->Till Here
	IF @QPSResetAvail = 1
	BEGIN
		IF EXISTS (SELECT SlabId FROM SchemeSlabs WHERE SchId = @Pi_SchId AND SlabId = @SlabId
				AND ToQty > 0)
		BEGIN
			IF EXISTS (SELECT SlabId FROM SchemeSlabs WHERE SchId = @Pi_SchId AND SlabId = @SlabId
				AND ToQty < @TotalValue)
			BEGIN
				SELECT @SlabAssginValue = ToQty FROM SchemeSlabs WHERE SchId = @Pi_SchId
					AND SlabId = @SlabId
			END
			ELSE
			BEGIN
				SELECT @SlabAssginValue = @TotalValue
			END
		END
		ELSE
		BEGIN
			SELECT @SlabAssginValue = (PurQty + FromQty) FROM SchemeSlabs WHERE SchId = @Pi_SchId
					AND SlabId = @SlabId
		END
	END
	ELSE
	BEGIN
		SELECT @SlabAssginValue = @TotalValue
	END
	WHILE (@TotalValue) > 0
	BEGIN
		DELETE FROM @TempRedeem
		--Select the Applicable Slab for the Scheme
		SELECT @SlabId = SlabId FROM (SELECT TOP 1 A.SlabId FROM @TempBilledAch A
			INNER JOIN @TempBilledAch B ON A.SlabId = B.SlabId
			GROUP BY A.SlabId,B.FromQty,B.ToQty
			HAVING @SlabAssginValue >= B.FromQty AND
			@SlabAssginValue <= (CASE B.ToQty WHEN 0 THEN @SlabAssginValue ELSE B.ToQty END)
			ORDER BY A.SlabId DESC) As SlabId
		IF ISNULL(@SlabId,0) = 0
		BEGIN
			SET @TotalValue = 0
			SET @SlabAssginValue = 0
		END
		--Store the Slab Amount Details into a temp table
		INSERT INTO @TempSchSlabAmt (ForEveryQty,ForEveryUomId,DiscPer,FlatAmt,Points,FlxDisc,FlxValueDisc,
			FlxFreePrd,FlxGiftPrd,FlxPoints)
		SELECT ForEveryQty,ForEveryUomId,DiscPer,FlatAmt,Points,FlxDisc,FlxValueDisc,FlxFreePrd,FlxGiftPrd,FlxPoints
			FROM SchemeSlabs WHERE Schid = @Pi_SchId And SlabId = @SlabId
		
		--Store the Slab Free Product Details into a temp table
		INSERT INTO @TempSchSlabFree(ForEveryQty,ForEveryUomId,FreePrdId,FreeQty)
		SELECT A.ForEveryQty,A.ForEveryUomId,B.PrdId,B.FreeQty From
			SchemeSlabs A INNER JOIN SchemeSlabFrePrds B ON A.Schid = B.Schid
			AND A.SlabId = B.SlabId INNER JOIN Product C ON B.PrdId = C.PrdId
			WHERE A.Schid = @Pi_SchId And A.SlabId = @SlabId AND C.PrdType <> 4
		
		--Store the Slab Gift Product Details into a temp table
		INSERT INTO @TempSchSlabGift(ForEveryQty,ForEveryUomId,GiftPrdId,GiftQty)
		SELECT A.ForEveryQty,A.ForEveryUomId,B.PrdId,B.FreeQty From
			SchemeSlabs A INNER JOIN SchemeSlabFrePrds B ON A.Schid = B.Schid
			AND A.SlabId = B.SlabId INNER JOIN Product C ON B.PrdId = C.PrdId
			WHERE A.Schid = @Pi_SchId And A.SlabId = @SlabId AND C.PrdType = 4
		--To Get the Number of Times the Scheme should apply
		IF @PurOfEveryReq = 0
		BEGIN
			SET @NoOfTimes = 1
		END
		ELSE
		BEGIN
			SELECT @NoOfTimes = @SlabAssginValue / (CASE B.ForEveryQty WHEN 0 THEN 1 ELSE B.ForEveryQty END) FROM
				@TempBilledAch A INNER JOIN @TempSchSlabAmt B ON A.SlabId = @SlabId
			IF @ProRata = 0
			BEGIN
				SET @NoOfTimes = FLOOR(@NoOfTimes)	
			END
			IF @ProRata = 1
			BEGIN
				SET @NoOfTimes = ROUND(@NoOfTimes,0)
			END
			IF @ProRata = 2
			BEGIN	
				SET @NoOfTimes = ROUND(@NoOfTimes,6)
			END
		END	
		--->Qty Based
		IF @SchType = 1
		BEGIN		
			DECLARE Cur_Redeem Cursor For
				SELECT PrdId,PrdBatId,PrdCtgValMainId,FrmSchAch,FrmUomAch,
					FromQty,UomId FROM @TempBilledAch
					WHERE SlabId = @SlabId ORDER BY FrmSchAch Desc
			OPEN Cur_Redeem
			FETCH NEXT FROM Cur_Redeem INTO @PrdIdRem,@PrdBatIdRem,@PrdCtgValMainIdRem,
				@FrmSchAchRem,@FrmUomAchRem,@FromQtyRem,@UomIdRem
			WHILE @@FETCH_STATUS =0
			BEGIN
				WHILE @SlabAssginValue > CAST(0 AS NUMERIC(38,6))
				BEGIN
					SET @AssignQty  = 0
					SET @AssignAmount = 0
					SET @AssignKG = 0
					SET @AssignLitre = 0
					IF @SlabAssginValue > @FrmSchAchRem
					BEGIN
						SET @TotalValue = @TotalValue - @FrmSchAchRem
						UPDATE @TempBilledAch Set FrmSchach = FrmSchAch - @FrmSchAchRem,
							ToSchAch = ToSchAch - @FrmSchAchRem
							WHERE PrdId = @PrdIdRem AND PrdBatId = @PrdBatIdRem AND
							PrdCtgValMainId = @PrdCtgValMainIdRem
						SELECT @AssignQty = @FrmSchAchRem * ConversionFactor FROM
							Product A INNER JOIN UomGroup B ON A.UomGroupId = B.UomGroupId
							AND B.UomId = @FrmUomAchRem WHERE A.PrdId = @PrdIdRem
					END
					ELSE
					BEGIN
						SET @TotalValue = @TotalValue - @SlabAssginValue
						UPDATE @TempBilledAch Set FrmSchach = FrmSchAch - @SlabAssginValue,
							ToSchAch = ToSchAch - @SlabAssginValue
							WHERE PrdId = @PrdIdRem AND PrdBatId = @PrdBatIdRem AND
							PrdCtgValMainId = @PrdCtgValMainIdRem
						SELECT @AssignQty = @SlabAssginValue * ConversionFactor FROM
							Product A INNER JOIN UomGroup B ON A.UomGroupId = B.UomGroupId
							AND B.UomId = @FrmUomAchRem WHERE A.PrdId = @PrdIdRem
					END
					SET @SlabAssginValue = @SlabAssginValue - @FrmSchAchRem
					UPDATE @TempBilledQPSReset Set FrmSchach = FrmSchAch - @FrmSchAchRem
						WHERE PrdId = @PrdIdRem AND PrdBatId = @PrdBatIdRem AND
						PrdCtgValMainId = @PrdCtgValMainIdRem
					SET @AssignAmount = (SELECT TOP 1 (D.PrdBatDetailValue * @AssignQty)
						FROM ProductBatch A (NOLOCK) INNER JOIN
						ProductBatchDetails D (NOLOCK) ON A.PrdBatId = D.PrdBatId
							INNER JOIN BatchCreation E (NOLOCK)
							ON E.BatchSeqId = A.BatchSeqId AND D.SlNo = E.SlNo
							AND E.SelRte = 1 WHERE A.PrdBatId = @PrdBatIdRem)
					SET @AssignKG = (SELECT CASE PrdUnitId WHEN 2 THEN
						(PrdWgt * @AssignQty / 1000) WHEN 3 THEN
						(PrdWgt * @AssignQty) ELSE
						0 END FROM Product WHERE PrdId = @PrdIdRem )
					SET @AssignLitre = (SELECT CASE PrdUnitId WHEN 4 THEN
						(PrdWgt * @AssignQty / 1000) WHEN 5 THEN
						(PrdWgt * @AssignQty) ELSE
						0 END FROM Product WHERE PrdId = @PrdIdRem )
					INSERT INTO @TempRedeem(PrdId,PrdBatId,SchemeOnQty,SchemeOnAmount,
						SchemeOnKG,SchemeOnLitre,SchId)
					SELECT @PrdIdRem,@PrdBatIdRem,@AssignQty,@AssignAmount,
						@AssignKG,@AssignLitre,@Pi_SchId
					IF EXISTS (SELECT PrdId From @TempBilledAch WHERE PrdId = @PrdIdRem AND
						PrdBatId = @PrdBatIdRem AND PrdCtgValMainId = @PrdCtgValMainIdRem
						AND SlabId = @SlabId AND FrmSchach <= 0)
							BREAK
					ELSE
							CONTINUE
				END
				FETCH NEXT FROM Cur_Redeem INTO @PrdIdRem,@PrdBatIdRem,
				@PrdCtgValMainIdRem,@FrmSchAchRem,@FrmUomAchRem,@FromQtyRem,
				@UomIdRem
			END
			CLOSE Cur_Redeem
			DEALLOCATE Cur_Redeem
		END
		--->Amt Based
		IF @SchType = 2
		BEGIN
			DECLARE Cur_Redeem Cursor For
				SELECT PrdId,PrdBatId,PrdCtgValMainId,FrmSchAch,FrmUomAch,
					FromQty,UomId FROM @TempBilledAch
					WHERE SlabId = @SlabId ORDER BY FrmSchAch Desc
			OPEN Cur_Redeem
			FETCH NEXT FROM Cur_Redeem INTO @PrdIdRem,@PrdBatIdRem,@PrdCtgValMainIdRem,
				@FrmSchAchRem,@FrmUomAchRem,@FromQtyRem,@UomIdRem
			WHILE @@FETCH_STATUS =0
			BEGIN
				WHILE @SlabAssginValue > CAST(0 AS NUMERIC(38,6))
				BEGIN
					SET @AssignQty  = 0
					SET @AssignAmount = 0
					SET @AssignKG = 0
					SET @AssignLitre = 0
					IF @SlabAssginValue > @FrmSchAchRem
					BEGIN
						SET @TotalValue = @TotalValue - @FrmSchAchRem
						UPDATE @TempBilledAch Set FrmSchach = FrmSchAch - @FrmSchAchRem,
							ToSchAch = ToSchAch - @FrmSchAchRem
							WHERE PrdId = @PrdIdRem AND PrdBatId = @PrdBatIdRem AND
							PrdCtgValMainId = @PrdCtgValMainIdRem
						SET @AssignAmount = @FrmSchAchRem
					END
					ELSE
					BEGIN
						SET @TotalValue = @TotalValue - @SlabAssginValue
						UPDATE @TempBilledAch Set FrmSchach = FrmSchAch - @SlabAssginValue,
							ToSchAch = ToSchAch - @SlabAssginValue
							WHERE PrdId = @PrdIdRem AND PrdBatId = @PrdBatIdRem AND
							PrdCtgValMainId = @PrdCtgValMainIdRem
						SET @AssignAmount = @SlabAssginValue
					END
					SET @SlabAssginValue = @SlabAssginValue - @FrmSchAchRem
					UPDATE @TempBilledQPSReset Set FrmSchach = FrmSchAch - @FrmSchAchRem
						WHERE PrdId = @PrdIdRem AND PrdBatId = @PrdBatIdRem AND
						PrdCtgValMainId = @PrdCtgValMainIdRem
					SET @AssignQty = (SELECT TOP 1 @AssignAmount /
							CASE D.PrdBatDetailValue WHEN 0 THEN 1 ELSE
							D.PrdBatDetailValue END
						FROM ProductBatch A (NOLOCK) INNER JOIN
						ProductBatchDetails D (NOLOCK) ON A.PrdBatId = D.PrdBatId
							INNER JOIN BatchCreation E (NOLOCK)
							ON E.BatchSeqId = A.BatchSeqId AND D.SlNo = E.SlNo
							AND E.SelRte = 1 WHERE A.PrdBatId = @PrdBatIdRem)
					SET @AssignKG = (SELECT CASE PrdUnitId WHEN 2 THEN
						(PrdWgt * @AssignQty / 1000) WHEN 3 THEN
						(PrdWgt * @AssignQty) ELSE
						0 END FROM Product WHERE PrdId = @PrdIdRem )
					SET @AssignLitre = (SELECT CASE PrdUnitId WHEN 4 THEN
						(PrdWgt * @AssignQty / 1000) WHEN 5 THEN
						(PrdWgt * @AssignQty) ELSE
						0 END FROM Product WHERE PrdId = @PrdIdRem )
					INSERT INTO @TempRedeem(PrdId,PrdBatId,SchemeOnQty,SchemeOnAmount,
						SchemeOnKG,SchemeOnLitre,SchId)
					SELECT @PrdIdRem,@PrdBatIdRem,@AssignQty,@AssignAmount,
						@AssignKG,@AssignLitre,@Pi_SchId
					IF EXISTS (SELECT PrdId From @TempBilledAch WHERE PrdId = @PrdIdRem AND
						PrdBatId = @PrdBatIdRem AND PrdCtgValMainId = @PrdCtgValMainIdRem
						AND SlabId = @SlabId AND FrmSchach <= 0)
							BREAK
					ELSE
							CONTINUE
				END
				FETCH NEXT FROM Cur_Redeem INTO @PrdIdRem,@PrdBatIdRem,
				@PrdCtgValMainIdRem,@FrmSchAchRem,@FrmUomAchRem,@FromQtyRem,
				@UomIdRem
				
			END
			CLOSE Cur_Redeem
			DEALLOCATE Cur_Redeem
		END
		--->Weight Based
		IF @SchType = 3
		BEGIN
			DECLARE Cur_Redeem Cursor For
				SELECT PrdId,PrdBatId,PrdCtgValMainId,FrmSchAch,FrmUomAch,
					FromQty,UomId FROM @TempBilledAch
					WHERE SlabId = @SlabId ORDER BY FrmSchAch Desc
			OPEN Cur_Redeem
			FETCH NEXT FROM Cur_Redeem INTO @PrdIdRem,@PrdBatIdRem,@PrdCtgValMainIdRem,
				@FrmSchAchRem,@FrmUomAchRem,@FromQtyRem,@UomIdRem
			WHILE @@FETCH_STATUS =0
			BEGIN
				WHILE @SlabAssginValue > CAST(0 AS NUMERIC(38,6))
				BEGIN
					SET @AssignQty  = 0
					SET @AssignAmount = 0
					SET @AssignKG = 0
					SET @AssignLitre = 0
					IF @SlabAssginValue > @FrmSchAchRem
					BEGIN
						SET @TotalValue = @TotalValue - @FrmSchAchRem
						UPDATE @TempBilledAch Set FrmSchach = FrmSchAch - @FrmSchAchRem,
							ToSchAch = ToSchAch - @FrmSchAchRem
							WHERE PrdId = @PrdIdRem AND PrdBatId = @PrdBatIdRem AND
							PrdCtgValMainId = @PrdCtgValMainIdRem
						SET @AssignKG = (SELECT CASE @FrmUomAchRem WHEN 2 THEN
							(@FrmSchAchRem / 1000) WHEN 3 THEN 						(@FrmSchAchRem) ELSE
							0 END FROM Product WHERE PrdId = @PrdIdRem)
		
						SET @AssignLitre = (SELECT CASE @FrmUomAchRem WHEN 4 THEN
							(@FrmSchAchRem / 1000) WHEN 5 THEN
							(@FrmSchAchRem) ELSE
							0 END FROM Product WHERE PrdId = @PrdIdRem)
					END
					ELSE
					BEGIN
						SET @TotalValue = @TotalValue - @SlabAssginValue
						UPDATE @TempBilledAch Set FrmSchach = FrmSchAch - @SlabAssginValue,
							ToSchAch = ToSchAch - @SlabAssginValue
							WHERE PrdId = @PrdIdRem AND PrdBatId = @PrdBatIdRem AND
							PrdCtgValMainId = @PrdCtgValMainIdRem
						SET @AssignKG = (SELECT CASE @FrmUomAchRem WHEN 2 THEN
							(@SlabAssginValue / 1000) WHEN 3 THEN
							(@SlabAssginValue) ELSE
							0 END FROM Product WHERE PrdId = @PrdIdRem)
		
						SET @AssignLitre = (SELECT CASE @FrmUomAchRem WHEN 4 THEN
							(@SlabAssginValue / 1000) WHEN 5 THEN
							(@SlabAssginValue) ELSE
							0 END FROM Product WHERE PrdId = @PrdIdRem)
					END
					SET @SlabAssginValue = @SlabAssginValue - @FrmSchAchRem
					UPDATE @TempBilledQPSReset Set FrmSchach = FrmSchAch - @FrmSchAchRem
						WHERE PrdId = @PrdIdRem AND PrdBatId = @PrdBatIdRem AND
						PrdCtgValMainId = @PrdCtgValMainIdRem
					SET @AssignQty = (SELECT CASE PrdUnitId
						WHEN 2 THEN
							(@AssignKG /(CASE PrdWgt WHEN 0 THEN 1 ELSE
								PrdWgt END / 1000))
						WHEN 3 THEN
							(@AssignKG/(CASE PrdWgt WHEN 0 THEN 1 ELSE PrdWgt END))
						WHEN 4 THEN
							(@AssignLitre /(CASE PrdWgt WHEN 0 THEN 1 ELSE
								PrdWgt END / 1000))
						WHEN 5 THEN
							(@AssignLitre/(CASE PrdWgt WHEN 0 THEN 1
								ELSE PrdWgt END))
						ELSE
							0 END FROM Product WHERE PrdId = @PrdIdRem)
					SET @AssignAmount = (SELECT TOP 1 (D.PrdBatDetailValue * @AssignQty)
						FROM ProductBatch A (NOLOCK) INNER JOIN
						ProductBatchDetails D (NOLOCK) ON A.PrdBatId = D.PrdBatId
							INNER JOIN BatchCreation E (NOLOCK)
							ON E.BatchSeqId = A.BatchSeqId AND D.SlNo = E.SlNo
							AND E.SelRte = 1 WHERE A.PrdBatId = @PrdBatIdRem)
					INSERT INTO @TempRedeem(PrdId,PrdBatId,SchemeOnQty,SchemeOnAmount,
						SchemeOnKG,SchemeOnLitre,SchId)
					SELECT @PrdIdRem,@PrdBatIdRem,@AssignQty,@AssignAmount,
						@AssignKG,@AssignLitre,@Pi_SchId
					IF EXISTS (SELECT PrdId From @TempBilledAch WHERE PrdId = @PrdIdRem AND
						PrdBatId = @PrdBatIdRem AND PrdCtgValMainId = @PrdCtgValMainIdRem
						AND SlabId = @SlabId AND FrmSchach <= 0)
							BREAK
					ELSE
							CONTINUE
				END
				FETCH NEXT FROM Cur_Redeem INTO @PrdIdRem,@PrdBatIdRem,
				@PrdCtgValMainIdRem,@FrmSchAchRem,@FrmUomAchRem,@FromQtyRem,
				@UomIdRem
				
			END
			CLOSE Cur_Redeem
			DEALLOCATE Cur_Redeem
		END
		
		INSERT INTO BilledPrdRedeemedForQPS (RtrId,SchId,PrdId,PrdBatId,SumQty,SumValue,SumInKG,
			SumInLitre,UserId,TransId)
		SELECT @Pi_RtrId,@Pi_SchId,PrdId,PrdBatId,SchemeOnQty,SchemeOnAmount,SchemeOnKG,
			SchemeOnLitre,@Pi_UsrId,@Pi_TransId FROM @TempRedeem
		--To Store the Gross amount for the Scheme billed Product
		SELECT @GrossAmount = ISNULL(SUM(SchemeOnAmount),0) FROM @TempRedeem
		--To Calculate the Scheme Flat Amount and Discount Percentage
		--Scheme Discount for Flat amount = ((FlatAmt * (LineLevel Gross / Total Gross) * 100)/100) * number of times
		--Scheme Discount for Disc Perc   = (LineLevel Gross * Disc Percentage) / 100
		INSERT INTO @BILLAPPLIEDSCHEMEHD(SCHID,SCHCODE,FLEXISCH,FLEXISCHTYPE,SLABID,SCHEMEAMOUNT,SCHEMEDISCOUNT,
			POINTS,FLXDISC,FLXVALUEDISC,FLXFREEPRD,FLXGIFTPRD,FLXPOINTS,FREEPRDID,
			FREEPRDBATID,FREETOBEGIVEN,GIFTPRDID,GIFTPRDBATID,GIFTTOBEGIVEN,NOOFTIMES,ISSELECTED,SCHBUDGET,
			BUDGETUTILIZED,TRANSID,USRID,PrdId,PrdBatId)
		SELECT SchId,SchCode,FlexiSch,FlexiSchType,SlabId,SUM(SchemeAmount) AS SchemeAmount,
			SchemeDiscount AS SchemeDiscount,Points,FlxDisc,FlxValueDisc,FlxFreePrd,FlxGiftPrd,
			FlxPoints,FreePrdId,FreePrdBatId,FreeToBeGiven,GiftPrdId,GiftPrdBatId,GiftToBeGiven,NoOfTimes,
			IsSelected,SchBudget,BudgetUtilized,TransId,Usrid,PrdId,PrdBatId
			FROM
			(	SELECT @Pi_SchId as Schid,@SchCode as SchCode,@FlexiSch as FlexiSch,@FlexiSchType as FlexiSchType,
				@SlabId as SlabId,PrdId,PrdBatId,
				(CASE @GrossAmount WHEN 0 THEN 0 ELSE (SchemeOnAmount / @GrossAmount) * 100 END) As Contri,
				FlatAmt * @NoOfTimes
--				((FlatAmt * (CASE @GrossAmount WHEN 0 THEN 0 ELSE (SchemeOnAmount / @GrossAmount) * 100 END))/100) * @NoOfTimes
				As SchemeAmount, DiscPer AS SchemeDiscount,(Points *@NoOfTimes) as Points,
				FlxDisc,FlxValueDisc,FlxFreePrd,FlxGiftPrd,FlxPoints,0 as FreePrdId,0 as FreePrdBatId,
				0 as FreeToBeGiven,0 as GiftPrdId,0 as GiftPrdBatId,0 as GiftToBeGiven,@NoOfTimes as NoOfTimes,
				0 as IsSelected,@SchemeBudget as SchBudget,0 as BudgetUtilized,@Pi_TransId As TransId,
				@Pi_UsrId as UsrId FROM @TempRedeem , @TempSchSlabAmt
				WHERE (FlatAmt + DiscPer + FlxDisc + FlxValueDisc + FlxFreePrd + FlxGiftPrd + Points) >=0
			) AS B
			GROUP BY SchId,SchCode,FlexiSch,FlexiSchType,SlabId,SchemeDiscount,Points,FlxDisc,FlxValueDisc,
			FlxFreePrd,FlxGiftPrd,FlxPoints,FreePrdId,FreePrdBatId,FreeToBeGiven,GiftPrdId,GiftPrdBatId,
			GiftToBeGiven,NoOfTimes,IsSelected,SchBudget,BudgetUtilized,TransId,Usrid,PrdId,PrdBatId
		--To Calculate the Free Qty to be given
		INSERT INTO @BillAppliedSchemeHd(SchId,SchCode,FlexiSch,FlexiSchType,SlabId,SchemeAmount,SchemeDiscount,
			Points,FlxDisc,FlxValueDisc,FlxFreePrd,FlxGiftPrd,FlxPoints,FreePrdId,
			FreePrdBatId,FreeToBeGiven,GiftPrdId,GiftPrdBatId,GiftToBeGiven,NoOfTimes,IsSelected,SchBudget,
			BudgetUtilized,TransId,Usrid,PrdId,PrdBatId)
		SELECT DISTINCT @Pi_SchId as Schid,@SchCode as SchCode,@FlexiSch as FlexiSch,@FlexiSchType as FlexiSchType,
			@SlabId as SlabId,0 as SchAmount,0 as SchDisc,0 as Points,0 as FlxDisc,0 as FlxValueDisc,
			0 as FlxFreePrd,0 as FlxGiftPrd,0 as FlxPoints,FreePrdId,0 as FreePrdBatId,
			CASE @SchType 
				WHEN 1 THEN 
					(CASE  WHEN SUM(SchemeOnQty)>=ForEveryQty THEN (CASE @ProRata WHEN 2 THEN FreeQty*FLOOR(@NoOfTimes) ELSE ROUND((FreeQty*@NoOfTimes),0) END) ELSE FreeQty END )
				WHEN 2 THEN 
					(CASE  WHEN SUM(SchemeOnAmount)>=ForEveryQty THEN (CASE @ProRata WHEN 2 THEN FreeQty*FLOOR(@NoOfTimes) ELSE ROUND((FreeQty*@NoOfTimes),0) END) ELSE FreeQty END)
				WHEN 3 THEN
					(CASE  WHEN SUM(SchemeOnKG+SchemeOnLitre)>=ForEveryQty THEN (CASE @ProRata WHEN 2 THEN FreeQty*FLOOR(@NoOfTimes) ELSE ROUND((FreeQty*@NoOfTimes),0) END) ELSE FreeQty END)
			END
			as FreeToBeGiven,0 as GiftPrdId,0 as GiftPrdBatId,
			0 as GiftToBeGiven,@NoOfTimes as NoOfTimes,0 as IsSelected,@SchemeBudget as SchBudget,
			0 as BudgetUtilized,@Pi_TransId,@Pi_UsrId as UsrId,MAX(PrdId) AS PrdId,MAX(PrdBatId) AS PrdBatId
			FROM @TempBilled , @TempSchSlabFree
			GROUP BY FreePrdId,FreeQty,ForEveryQty
		--To Calculate the Gift Qty to be given
		INSERT INTO @BillAppliedSchemeHd(SchId,SchCode,FlexiSch,FlexiSchType,SlabId,SchemeAmount,SchemeDiscount,
			Points,FlxDisc,FlxValueDisc,FlxFreePrd,FlxGiftPrd,FlxPoints,FreePrdId,
			FreePrdBatId,FreeToBeGiven,GiftPrdId,GiftPrdBatId,GiftToBeGiven,NoOfTimes,IsSelected,SchBudget,
			BudgetUtilized,TransId,Usrid,PrdId,PrdBatId)
		SELECT DISTINCT @Pi_SchId as Schid,@SchCode as SchCode,@FlexiSch as FlexiSch,@FlexiSchType as FlexiSchType,
			@SlabId as SlabId,0 as SchAmount,0 as SchDisc,0 as Points,0 as FlxDisc,0 as FlxValueDisc,
			0 as FlxFreePrd,0 as FlxGiftPrd,0 as FlxPoints,0 As FreePrdId,0 as FreePrdBatId,
			0 as FreeToBeGiven,GiftPrdId as GiftPrdId,0 as GiftPrdBatId,
			CASE @SchType
				WHEN 1 THEN
					CASE  WHEN SUM(SchemeOnQty)>=ForEveryQty THEN ROUND((GiftQty*@NoOfTimes),0) ELSE GiftQty END
				WHEN 2 THEN
					CASE  WHEN SUM(SchemeOnAmount)>=ForEveryQty THEN ROUND((GiftQty*@NoOfTimes),0) ELSE GiftQty END
				WHEN 3 THEN
					CASE  WHEN SUM(SchemeOnKG+SchemeOnLitre)>=ForEveryQty THEN ROUND((GiftQty*@NoOfTimes),0) ELSE GiftQty END
			END as GiftToBeGiven,@NoOfTimes as NoOfTimes,0 as IsSelected,
			@SchemeBudget as SchBudget,0 as BudgetUtilized,@Pi_TransId,@Pi_UsrId as UsrId,MAX(PrdId) AS PrdId,MAX(PrdBatId) AS PrdBatId
			FROM @TempBilled , @TempSchSlabGift
			GROUP BY GiftPrdId,GiftQty,ForEveryQty
		
		SET @SlabAssginValue = 0
		SET @QPSResetAvail = 0
		SET @SlabId = 0
		
		SELECT @SlabId = SlabId FROM (SELECT TOP 1 A.SlabId FROM @TempBilledAch A
			INNER JOIN @TempBilledAch B ON A.SlabId = B.SlabId AND A.PrdId = B.PrdId
			AND A.PrdBatId = B.PrdBatId AND A.PrdCtgValMainId = B.PrdCtgValMainId
			GROUP BY A.SlabId,B.FromQty,B.ToQty
			HAVING SUM(A.FrmSchAch) >= B.FromQty AND
			SUM(A.ToSchAch) <= (CASE B.ToQty WHEN 0 THEN SUM(A.ToSchAch) ELSE B.ToQty END)
			ORDER BY A.SlabId DESC) As SlabId
		IF ISNULL(@SlabId,0) = (SELECT MAX(SlabId) FROM SchemeSlabs WHERE SchId = @Pi_SchId)
		BEGIN
			SET @QPSResetAvail = 1
		END
		IF @QPSResetAvail = 1
		BEGIN
			IF EXISTS (SELECT SlabId FROM SchemeSlabs WHERE SchId = @Pi_SchId AND SlabId = @SlabId
					AND ToQty > 0)
			BEGIN
				IF EXISTS (SELECT SlabId FROM SchemeSlabs WHERE SchId = @Pi_SchId AND SlabId = @SlabId
					AND ToQty < @TotalValue)
				BEGIN
					SELECT @SlabAssginValue = ToQty FROM SchemeSlabs WHERE SchId = @Pi_SchId
						AND SlabId = @SlabId
				END
				ELSE
				BEGIN
					SELECT @SlabAssginValue = @TotalValue
				END
			END
			ELSE
			BEGIN
				SELECT @SlabAssginValue = (PurQty + FromQty) FROM SchemeSlabs WHERE SchId = @Pi_SchId
						AND SlabId = @SlabId
			END
		END
		ELSE
		BEGIN
			SELECT @SlabAssginValue = @TotalValue
		END
		
		IF ISNULL(@SlabId,0) = 0
		BEGIN
			SET @TotalValue = 0
			SET @SlabAssginValue = 0
		END
		DELETE FROM @TempSchSlabAmt
		DELETE FROM @TempSchSlabFree
	END
	--->Added By Boo and Nanda on 29/11/2010	
	IF @SchType = 3 AND @QPSReset=1
	BEGIN
		SELECT DISTINCT * INTO #TempBillApplied FROM @BillAppliedSchemeHd
		DELETE FROM @BillAppliedSchemeHd
		INSERT INTO @BillAppliedSchemeHd
		SELECT * FROM #TempBillApplied
		
		UPDATE A  SET NoOfTimes=B.NoofTime,SchemeAmount=FlatAmt*B.NoofTime FROM  @BillAppliedSchemeHd A INNER JOIN #TemAppQPSSchemes B ON A.SchId=B.SchId AND A.SlabId=B.SlabId
		INNER JOIN SchemeSlabs C ON A.SchId=C.SchId AND C.SlabId=B.SlabId AND A.TransId=@Pi_TransId AND A.UsrId=@Pi_UsrId
	END
	--->Till Here
	INSERT INTO BillAppliedSchemeHd(SchId,SchCode,FlexiSch,FlexiSchType,SlabId,SchemeAmount,SchemeDiscount,
		Points,FlxDisc,FlxValueDisc,FlxFreePrd,FlxGiftPrd,FlxPoints,FreePrdId,
		FreePrdBatId,FreeToBeGiven,GiftPrdId,GiftPrdBatId,GiftToBeGiven,NoOfTimes,IsSelected,SchBudget,
		BudgetUtilized,TransId,Usrid,PrdId,PrdBatId,SchType)
	SELECT SchId,SchCode,FlexiSch,FlexiSchType,SlabId,SUM(SchemeAmount) AS SchemeAmount,SUM(SchemeDiscount) AS SchemeDiscount,
		SUM(Points) AS Points,FlxDisc,FlxValueDisc,FlxFreePrd,FlxGiftPrd,FlxPoints,(FreePrdId) as FreePrdId ,
		FreePrdBatId,SUM(FreeToBeGiven) As FreeToBeGiven,GiftPrdId,GiftPrdBatId,SUM(GiftToBeGiven) As GiftToBeGiven,SUM(NoOfTimes) AS NoOfTimes,
		IsSelected,SchBudget,BudgetUtilized,TransId,Usrid,PrdId,MAX(PrdBatId),0 FROM @BillAppliedSchemeHd
		GROUP BY SchId,SchCode,FlexiSch,FlexiSchType,SlabId,FlxDisc,FlxValueDisc,FlxFreePrd,
		FlxGiftPrd,FlxPoints,FreePrdId,FreePrdBatId,GiftPrdId,GiftPrdBatId,IsSelected,
		SchBudget,BudgetUtilized,TransId,Usrid,PrdId,PrdBatId
		
	IF EXISTS (SELECT * FROM SchemeRtrLevelValidation WHERE Schid = @Pi_SchId AND RtrId = @Pi_RtrId)
	BEGIN
		SELECT @FrmValidDate = FromDate , @ToValidDate = ToDate,@SchemeBudget = BudgetAllocated
			FROM SchemeRtrLevelValidation WHERE @BillDate between fromdate and todate
			AND Schid = @Pi_SchId AND RtrId = @Pi_RtrId
		SELECT @BudgetUtilized = dbo.Fn_ReturnBudgetUtilizedForRtr(@Pi_SchId,@Pi_RtrId,@FrmValidDate,@ToValidDate)
	END
	ELSE
	BEGIN
		SELECT @BudgetUtilized = dbo.Fn_ReturnBudgetUtilized(@Pi_SchId)
	END
	SELECT @SlabId=SlabId FROM BillAppliedSchemeHd WHERE SchId=@Pi_SchId
	AND Usrid = @Pi_UsrId AND TransId = @Pi_TransId
	EXEC Proc_ApplySchemeInBill_Temp @Pi_SchId,@SlabId,@Pi_UsrId,@Pi_TransId
	EXEC Proc_ApplyDiscountScheme @Pi_SchId,@Pi_UsrId,@Pi_TransId
	UPDATE BillAppliedSchemeHd SET BudgetUtilized = ISNULL(@BudgetUtilized,0),
	SchBudget = ISNULL(@SchemeBudget,0) WHERE SchId = @Pi_SchId AND
	TransId = @Pi_TransId AND Usrid = @Pi_UsrId
	IF @FlexiSch=0
	BEGIN
		INSERT INTO @QPSGivenFlat
		SELECT SchId,SUM(FlatAmount)
		FROM
		(SELECT DISTINCT SISL.SalId,SISL.SchId,SISL.PrdId,SISL.PrdBatId,ISNULL(FlatAmount-ReturnFlatAmount,0) AS FlatAmount
		FROM SalesInvoiceSchemeLineWise SISL,SchemeMaster SM ,
		(SELECT DISTINCT SchId,SlabId,SchemeDiscount,TransId,UsrId FROM BillAppliedSchemeHd WHERE TransId=@Pi_TransId AND UsrId=@Pi_UsrId AND SchId=@Pi_SchId ) A,
		SalesInvoice SI
		WHERE A.TransId=@Pi_TransId AND A.UsrId=@Pi_UsrId AND SM.QPS=1 AND FlexiSch=0 AND A.SchemeDiscount=0 
		AND A.SchId=SM.SchId AND SISL.SchId=A.SchId AND SI.RtrId=@Pi_RtrId AND SI.SalId=SISL.SalId AND SI.DlvSts>3
		) A
		WHERE SchId=@Pi_SchId
		GROUP BY A.SchId	
		
		UPDATE A SET A.Amount=A.Amount+C.CrNoteAmount
		FROM @QPSGivenFlat A,
		(SELECT B.SchId,SUM(B.CrNoteAmount) AS CrNoteAmount FROM SalesInvoiceQPSSchemeAdj B,SalesInvoice SI
		WHERE B.RtrId=@Pi_RtrId AND B.SchId=@Pi_SchId AND SI.SalId=B.SalId AND SI.DlvSts>3
		GROUP BY B.SchId) C
		WHERE A.SchId=C.SchId 
		INSERT INTO @QPSGivenFlat
		SELECT B.SchId,SUM(B.CrNoteAmount) AS CrNoteAmount FROM SalesInvoiceQPSSchemeAdj B,SalesInvoice SI
		WHERE B.RtrId=@Pi_RtrId AND B.SchId=@Pi_SchId AND B.SchId NOT IN (SELECT SchId FROM @QPSGivenFlat)
		AND B.SchId IN (SELECT DISTINCT SchId FROM BillAppliedSchemeHd WHERE UsrId=@Pi_UsrId AND TransID=@Pi_TransId AND SchemeDiscount=0)
		AND SI.SalId=B.SalId AND SI.DlvSts>3
		GROUP BY B.SchId
	END
	DELETE FROM BillQPSGivenFlat WHERE UserId=@Pi_UsrId AND TransID=@Pi_TransId AND SchId=@Pi_SchId
	INSERT INTO BillQPSGivenFlat(SchId,Amount,UserId,TransId) 
	SELECT SchId,Amount,@Pi_UsrId,@Pi_TransId FROM @QPSGivenFlat
	--->Added By Nanda on 21/02/2011
	UPDATE A SET SchemeAmount=B.SchemeAmount
	FROM BillAppliedSchemeHd A,
	(
		SELECT SchId,SlabId,MAX(SchemeAmount) AS SchemeAmount FROM BillAppliedSchemeHd
		WHERE TransID=@Pi_TransId AND UsrId=@Pi_UsrId AND SchId=@Pi_SchId
		GROUP BY SchId,SlabId 
	) B
	WHERE A.SchId=B.SchId AND A.SlabId=B.SlabId AND TransID=@Pi_TransId AND UsrId=@Pi_UsrId AND A.SchId=@Pi_SchId
	--->Till Here
	UPDATE BillAppliedSchemeHd SET SchemeAmount= CAST(SchemeAmount-Amount AS NUMERIC(38,4))
	FROM @QPSGivenFlat A WHERE BillAppliedSchemeHd.SchId=A.SchId AND A.SchId=@Pi_SchId	
	AND BillAppliedSchemeHd.SchId NOT IN (SELECT SchId FROM BillAppliedSchemeHd WHERE UsrId=@Pi_UsrId AND TransId=@Pi_TransId
	AND BillAppliedSchemeHd.SchId IN (SELECT SchId FROM SchemeMaster WHERE QPS=1 AND QPSReset=1)
	GROUP BY SchId HAVING COUNT(DISTINCT SlabId)>1)	
	AND TransId=@Pi_TransId AND UsrId=@Pi_UsrId
	--->For QPS Reset
	DECLARE @MSSchId AS INT
	DECLARE @MaxSlabId AS INT
	DECLARE @AmtToReduced AS NUMERIC(38,6)
	SET @AmtToReduced=0
	DECLARE Cur_QPSSlabs CURSOR FOR 
	SELECT DISTINCT SchId,SlabId FROM BillAppliedSchemeHd 
	WHERE SchId IN (SELECT SchId FROM BillAppliedSchemeHd WHERE UsrId=@Pi_UsrId AND TransId=@Pi_TransId
	AND BillAppliedSchemeHd.SchId IN (SELECT SchId FROM SchemeMaster WHERE QPS=1 AND QPSReset=1)
	GROUP BY SchId HAVING COUNT(DISTINCT SlabId)>1)
	AND TransId=@Pi_TransId AND UsrId=@Pi_UsrId 
	ORDER BY SchId ASC ,SlabId DESC 
	OPEN Cur_QPSSlabs
	FETCH NEXT FROM Cur_QPSSlabs INTO @MSSchId,@MaxSlabId
	WHILE @@FETCH_STATUS=0
	BEGIN
		IF @MaxSlabId=(SELECT MAX(SlabId) FROM BillAppliedSchemeHd WHERE SchId=@MSSchId AND TransId=@Pi_TransId AND UsrId=@Pi_UsrId AND TransId=@Pi_TransId AND UsrId=@Pi_UsrId)
		BEGIN
			IF EXISTS(SELECT * FROM @QPSGivenFlat WHERE SchId=@MSSchId)
			BEGIN
				SELECT @AmtToReduced=ISNULL(SUM(Amount),0) FROM @QPSGivenFlat WHERE SchId=@MSSchId
				UPDATE BillAppliedSchemeHd SET SchemeAmount=SchemeAmount-@AmtToReduced
				WHERE BillAppliedSchemeHd.SchId=@MSSchId AND BillAppliedSchemeHd.SlabId=@MaxSlabId			
				AND TransId=@Pi_TransId AND UsrId=@Pi_UsrId 
				IF EXISTS(SELECT * FROM BillAppliedSchemeHd WHERE SchId=@MSSchId AND SlabId=@MaxSlabId AND SchemeAmount<0 AND TransId=@Pi_TransId AND UsrId=@Pi_UsrId)		
				BEGIN
					
					SELECT @AmtToReduced=ABS(SchemeAmount) FROM BillAppliedSchemeHd WHERE SchId=@MSSchId AND SlabId=@MaxSlabId AND SchemeAmount<0
					AND TransId=@Pi_TransId AND UsrId=@Pi_UsrId 
					UPDATE BillAppliedSchemeHd SET SchemeAmount=0
					WHERE BillAppliedSchemeHd.SchId=@MSSchId AND BillAppliedSchemeHd.SlabId=@MaxSlabId				
					AND TransId=@Pi_TransId AND UsrId=@Pi_UsrId 
				END		
				ELSE
				BEGIN
					SET @AmtToReduced=0
				END
			END
		END
		ELSE
		BEGIN
			UPDATE BillAppliedSchemeHd SET SchemeAmount=SchemeAmount-@AmtToReduced
			WHERE BillAppliedSchemeHd.SchId=@MSSchId AND BillAppliedSchemeHd.SlabId=@MaxSlabId 
			AND BillAppliedSchemeHd.SchId=@Pi_SchId AND TransId=@Pi_TransId AND UsrId=@Pi_UsrId 
		END
		FETCH NEXT FROM Cur_QPSSlabs INTO @MSSchId,@MaxSlabId
	END
	CLOSE Cur_QPSSlabs
	DEALLOCATE Cur_QPSSlabs
	IF @QPSReset<>0
	BEGIN
		UPDATE B SET B.NoOfTimes=A.NoOfTimes,B.SchemeAmount=A.SchemeAmount
		FROM BillAppliedSchemeHd B,
		(
			SELECT SchId,SlabId,MAX(NoOfTimes) AS NoOfTimes,MAX(SchemeAmount) AS SchemeAmount
			FROM BillAppliedSchemeHd GROUP BY SchId,SlabId
		) AS A
		WHERE B.SchId=A.SchId AND B.SlabId=A.SlabId AND B.SchId=@Pi_SchId AND B.TransId=@Pi_TransId AND B.UsrId=@Pi_UsrId 
	END
	--Added By Murugan
	IF @QPS<>0
	BEGIN
		DELETE FROM BilledPrdHdForQPSScheme WHERE Transid=@Pi_TransId and Usrid=@Pi_UsrId AND SchId=@Pi_SchId
		INSERT INTO BilledPrdHdForQPSScheme(RowId,RtrId,PrdId,PrdBatId,SelRate,BaseQty,GrossAmount,MRP,TransId,Usrid,ListPrice,QPSPrd,SchId)
		SELECT RowId,@Pi_RtrId,BP.PrdId,BP.Prdbatid,SelRate,BaseQty,BaseQty*SelRate AS SchemeOnAmount,MRP,@Pi_TransId,@Pi_UsrId,ListPrice,0,@Pi_SchId
		FROM BilledPrdHdForScheme BP WHERE BP.TransId=@Pi_TransId AND UsrId=@Pi_UsrId AND BP.RtrId=@Pi_RtrId --AND BP.SchId=@Pi_SchId
		INSERT INTO BilledPrdHdForQPSScheme(RowId,RtrId,PrdId,PrdBatId,SelRate,BaseQty,GrossAmount,MRP,TransId,Usrid,ListPrice,QPSPrd,SchId)
		SELECT 10000 RowId,@Pi_RtrId,TB.PrdId,TB.Prdbatid,0 AS SelRate,SchemeOnQty,SchemeOnAmount,MRP,@Pi_TransId,@Pi_UsrId,0 AS ListPrice,1,@Pi_SchId
		FROM @TempBilled TB	
	END
	--Till Here	
	--->Added By Nanda on 25/01/2011
	IF @QPS=1
	BEGIN
		INSERT INTO BillAppliedSchemeHd(SchId,SchCode,FlexiSch,FlexiSchType,SlabId,SchemeAmount,SchemeDiscount,Points,FlxDisc,FlxValueDisc,FlxFreePrd,FlxGiftPrd,
		FlxPoints,FreePrdId,FreePrdBatId,FreeToBeGiven,GiftPrdId,GiftPrdBatId,GiftToBeGiven,NoOfTimes,IsSelected,SchBudget,BudgetUtilized,
		TransId,Usrid,PrdId,PrdBatId,SchType)
		SELECT DISTINCT SchId,SchCode,FlexiSch,FlexiSchType,SlabId,SchemeAmount,SchemeDiscount,Points,FlxDisc,FlxValueDisc,FlxFreePrd,FlxGiftPrd,
		FlxPoints,FreePrdId,FreePrdBatId,FreeToBeGiven,GiftPrdId,GiftPrdBatId,GiftToBeGiven,NoOfTimes,IsSelected,SchBudget,BudgetUtilized,
		TransId,Usrid,PrdId,PrdBatId,SchType FROM 
		(SELECT SchId,SchCode,FlexiSch,FlexiSchType,SlabId,SchemeAmount,SchemeDiscount,Points,FlxDisc,FlxValueDisc,FlxFreePrd,FlxGiftPrd,
		FlxPoints,FreePrdId,FreePrdBatId,FreeToBeGiven,GiftPrdId,GiftPrdBatId,GiftToBeGiven,NoOfTimes,IsSelected,SchBudget,BudgetUtilized,
		TransId,Usrid,SchType FROM BillApplieDSchemeHd WHERE SchId=@Pi_SchId AND UsrId=@Pi_UsrId AND TransID=@Pi_TransId) A
		CROSS JOIN 
		(
			SELECT A.PrdId,A.PrdBatId FROM BilledPrdHdForQPSScheme A (NOLOCK) 
			INNER JOIN Fn_ReturnSchemeProductBatch(@Pi_SchId) B ON A.RowId=10000 AND 
			A.PrdId = B.PrdId AND A.PrdBatId = CASE B.PrdBatId WHEN 0 THEN A.PrdBatId ELSE B.PrdBatId End		
			AND CAST(A.PrdId AS NVARCHAR(10))+'~'+CAST(A.PrdBatId AS NVARCHAR(10)) 
			NOT IN (SELECT CAST(PrdId AS NVARCHAR(10))+'~'+CAST(PrdBatId AS NVARCHAR(10)) FROM BillApplieDSchemeHd WHERE SchId=@Pi_SchId
			AND UsrId=@Pi_UsrId AND TransID=@Pi_TransId
		)
		)B
		WHERE CAST(SchId AS NVARCHAR(10))+'~'+CAST(SlabId AS NVARCHAR(10))+CAST(PrdId AS NVARCHAR(10))+'~'+CAST(PrdBatId AS NVARCHAR(10))
		NOT IN (SELECT CAST(SchId AS NVARCHAR(10))+'~'+CAST(SlabId AS NVARCHAR(10))+CAST(PrdId AS NVARCHAR(10))+'~'+CAST(PrdBatId AS NVARCHAR(10))
		FROM BillAppliedSchemeHd WHERE SchId=@Pi_SchId AND UsrId=@Pi_UsrId AND TransID=@Pi_TransId)
	END
	--->Till Here
	-- Added By Boopathy.P on 08-08-2011 for Bug Ref no : 23364
	UPDATE B SET B.PrdBatId=A.PrdBatId FROM BillAppliedSchemeHd B INNER JOIN 
	(SELECT SchId,SlabId,PrdId,Max(PrdbatId) AS PrdBatId,TransId,UsrId FROM @BillAppliedSchemeHd WHERE 
	(FreeToBeGiven+GiftToBeGiven+FlxFreePrd+FlxGiftPrd > 0) AND TransId=@Pi_TransId AND UsrId=@Pi_UsrId 
	AND SchId=@Pi_SchId GROUP BY SchId,SlabId,PrdId,TransId,UsrId) AS A ON A.SchId=B.SchId
	AND A.SlabId=B.SlabId AND A.PrdId=B.PrdId AND A.TransId=B.TransId AND A.UsrId=B.UsrId 
	WHERE B.TransId=@Pi_TransId AND B.UsrId=@Pi_UsrId AND B.SchId=@Pi_SchId
	DELETE FROM BillAppliedSchemeHd WHERE SchemeAmount+SchemeDiscount+Points+FlxDisc+FlxValueDisc+
	FlxPoints+FreeToBeGiven+GiftToBeGiven+FlxFreePrd+FlxGiftPrd=0
	IF EXISTS (SELECT * FROM BillAppliedSchemeHd WHERE TransId=@Pi_TransId AND UsrId=@Pi_UsrId AND SchId = @Pi_SchId)
	BEGIN
		IF @Config=1 AND @Pi_Mode=2
		BEGIN
				DELETE FROM SalesInvoiceQpsDatebasedTrack WHERE UsrId=@Pi_UsrId AND TransId=@Pi_TransId AND SchId = @Pi_SchId AND RtrId=@Pi_RtrId AND Upload=0
				INSERT INTO SalesInvoiceQpsDatebasedTrack
				SELECT 1,A.SalId,A.SalInvNo,A.RtrId,A.RtrCode,A.RtrName,A.SchId,A.SchCode,A.SchDesc,
				A.PrdId,A.PrdCCode,A.PrdBatId,A.PrdBatCode,SchemeOnQty,
				SchemeOnAmount,SchemeOnKg,SchemeOnLitre,@Pi_UsrId,@Pi_TransId,0 FROM 
				(
					SELECT A.SalId,E.SalInvNo,@Pi_RtrId AS RtrId,F.RtrCode,F.RtrName,@Pi_SchId AS SchId,CmpSchCode AS SchCode,SchDsc AS SchDesc,
					A.PrdId,C.PrdCCode,A.PrdBatId,D1.PrdBatCode,ISNULL(SUM(A.BaseQty),0) AS SchemeOnQty,
					ISNULL(SUM((A.BaseQty) * A.PrdUnitSelRate),0) AS SchemeOnAmount,
					ISNULL(CASE D.PrdUnitId WHEN 2 THEN ISNULL(SUM(PrdWgt * (A.BaseQty)),0)/1000
					WHEN 3 THEN ISNULL(SUM(PrdWgt * (A.BaseQty)),0) END,0) AS SchemeOnKg,
					ISNULL(CASE D.PrdUnitId WHEN 4 THEN ISNULL(SUM(PrdWgt * (A.BaseQty)),0)/1000
					WHEN 5 THEN ISNULL(SUM(PrdWgt * (A.BaseQty)),0) END,0) AS SchemeOnLitre
					FROM SalesInvoiceProduct A (NOLOCK) INNER JOIN Fn_ReturnSchemeProductBatch(@Pi_SchId) B ON
					A.PrdId = B.PrdId AND A.PrdBatId = CASE B.PrdBatId WHEN 0 THEN A.PrdBatId ELSE B.PrdBatId End
					INNER JOIN Product C (NOLOCK)  ON A.PrdId = C.PrdId
					INNER JOIN ProductUnit D (NOLOCK)  ON C.PrdUnitId = D.PrdUnitId
					INNER JOIN ProductBatch D1 (NOLOCK) ON C.PrdId=D1.PrdId AND A.PrdBatId=D1.PrdBatId
					INNER JOIN SalesInvoice E (NOLOCK)  ON A.SalId=E.SalId AND E.DlvSts>3
					INNER JOIN Retailer F (NOLOCK)  ON F.RtrId=E.RtrId
					,SchemeMaster H (NOLOCK)  WHERE E.RtrId=@Pi_RtrId AND 
					E.SalInvDate BETWEEN H.SchValidFrom AND H.SchValidTill AND H.SchId=@Pi_SchId
					GROUP BY A.SalId,E.SalInvNo,F.RtrCode,F.RtrName,A.PrdId,A.PrdBatId,D.PrdUnitId,C.PrdCCode,CmpSchCode,SchDsc,D1.PrdBatCode
				) AS A 
				UNION 
				SELECT 2,A.ReturnId,A.ReturnCode,A.RtrId,A.RtrCode,A.RtrName,A.SchId,A.SchCode,A.SchDesc,
				A.PrdId,A.PrdCCode,A.PrdBatId,A.PrdBatCode,SchemeOnQty,
				SchemeOnAmount,SchemeOnKg,SchemeOnLitre,@Pi_UsrId,@Pi_TransId,0 FROM 
				(
					SELECT A.ReturnId,E.ReturnCode,@Pi_RtrId AS RtrId,F.RtrCode,F.RtrName,@Pi_SchId AS SchId,CmpSchCode AS SchCode,SchDsc AS SchDesc,
					A.PrdId,C.PrdCCode,A.PrdBatId,D1.PrdBatCode,ISNULL(SUM(A.BaseQty),0)*-1 AS SchemeOnQty,
					ISNULL(SUM((A.BaseQty) * A.PrdUnitSelRte),0)*-1 AS SchemeOnAmount,
					ISNULL(CASE D.PrdUnitId WHEN 2 THEN ISNULL(SUM(PrdWgt * (A.BaseQty)),0)/1000
					WHEN 3 THEN ISNULL(SUM(PrdWgt * (A.BaseQty)),0) END,0)*-1 AS SchemeOnKg,
					ISNULL(CASE D.PrdUnitId WHEN 4 THEN ISNULL(SUM(PrdWgt * (A.BaseQty)),0)/1000
					WHEN 5 THEN ISNULL(SUM(PrdWgt * (A.BaseQty)),0) END,0)*-1 AS SchemeOnLitre
					FROM ReturnProduct A (NOLOCK) INNER JOIN Fn_ReturnSchemeProductBatch(@Pi_SchId) B ON
					A.PrdId = B.PrdId AND A.PrdBatId = CASE B.PrdBatId WHEN 0 THEN A.PrdBatId ELSE B.PrdBatId End
					INNER JOIN Product C (NOLOCK)  ON A.PrdId = C.PrdId
					INNER JOIN ProductUnit D (NOLOCK)  ON C.PrdUnitId = D.PrdUnitId
					INNER JOIN ProductBatch D1 (NOLOCK) ON C.PrdId=D1.PrdId AND A.PrdBatId=D1.PrdBatId
					INNER JOIN ReturnHeader E (NOLOCK)  ON A.ReturnId=E.ReturnId AND E.Status=0
					INNER JOIN Retailer F (NOLOCK)  ON F.RtrId=E.RtrId
					,SchemeMaster H (NOLOCK)  WHERE E.RtrId=@Pi_RtrId AND E.SalId>0 AND 
					E.ReturnDate BETWEEN H.SchValidFrom AND H.SchValidTill AND H.SchId=@Pi_SchId
					GROUP BY A.ReturnId,E.ReturnCode,F.RtrCode,F.RtrName,A.PrdId,A.PrdBatId,D.PrdUnitId,C.PrdCCode,CmpSchCode,SchDsc,D1.PrdBatCode
				) AS A 	
		END
	END
	--->Till Here
END
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE Name='Cs2Cn_Prk_Retailer_Reupload' AND type in ('U'))
CREATE TABLE Cs2Cn_Prk_Retailer_Reupload
(
	[SlNo] [numeric](38, 0) IDENTITY(1,1) NOT NULL,
	[DistCode] [nvarchar](100) NULL,
	[RtrId] [int] NULL,
	[RtrCode] [nvarchar](100) NULL,
	[CmpRtrCode] [nvarchar](100) NULL,
	[RtrName] [nvarchar](100) NULL,
	[RtrAddress1] [nvarchar](100) NULL,
	[RtrAddress2] [nvarchar](100) NULL,
	[RtrAddress3] [nvarchar](100) NULL,
	[RtrPINCode] [nvarchar](20) NULL,
	[RtrChannelCode] [nvarchar](100) NULL,
	[RtrGroupCode] [nvarchar](100) NULL,
	[RtrClassCode] [nvarchar](100) NULL,
	[KeyAccount] [nvarchar](20) NULL,
	[RelationStatus] [nvarchar](100) NULL,
	[ParentCode] [nvarchar](100) NULL,
	[RtrRegDate] [nvarchar](100) NULL,
	[GeoLevel] [nvarchar](100) NULL,
	[GeoLevelValue] [nvarchar](100) NULL,
	[VillageId] [int] NULL,
	[VillageCode] [nvarchar](100) NULL,
	[VillageName] [nvarchar](100) NULL,
	[Status] [tinyint] NULL,
	[Mode] [nvarchar](100) NULL,
	[DrugLNo] [nvarchar](50) NULL,
	[RtrFrequency] [nvarchar](100) NULL,
	[RtrPhoneNo] [nvarchar](50) NULL,
	[RtrTINNumber] [nvarchar](50) NULL,
	[RtrTaxGroupCode] [nvarchar](200) NULL,
	[RtrCrLimit] [numeric](18, 2) NULL,
	[RtrCrDays] [int] NULL,
	[Approved] [varchar](100) NULL,
	[RtrType] [varchar](100) NULL,
	[UploadFlag] [nvarchar](10) NULL,
	[SyncId] [numeric](38, 0) NULL,
	[ServerDate] [datetime] NULL
) ON [PRIMARY]
GO
IF EXISTS (SELECt * FROM SYS.Objects Where Name ='Proc_Cs2Cn_Retailer_Reupload' AND Type ='P')
DROP PROCEDURE Proc_Cs2Cn_Retailer_Reupload
GO
CREATE PROCEDURE Proc_Cs2Cn_Retailer_Reupload
	(
		@Po_ErrNo	INT OUTPUT,
		@ServerDate DATETIME
	)
	AS
	SET NOCOUNT ON
	BEGIN
	/*********************************
	* PROCEDURE	: Proc_Cs2Cn_Retailer 0,'2016-11-11'
	* PURPOSE	: Extract Retailer Details from CoreStocky to Console
	* NOTES		:
	* CREATED	: Nandakumar R.G 09-01-2009
	* MODIFIED
	* DATE      AUTHOR     DESCRIPTION
	------------------------------------------------
	* Added AutoRetailerApproval for Parle ICRSTPAR1505
	* Added RtrFrequency,RtrPhoneNo,TinNumber,Crlimit,CrDays,Approved,RtrType by Gopi on 08/11/2016
	*********************************/
		DECLARE @CmpID 		AS INTEGER
		DECLARE @DistCode	As nVarchar(50)
		
		SET @Po_ErrNo=0
		--CHANGED BY MAHESH FOR ICRSTPAR1505
		IF EXISTS (SELECT * FROM RETAILER WHERE APPROVED=0)
		BEGIN
			UPDATE RETAILER SET Approved=1 WHERE Approved=0
		END
		
		--Till Here
		--DELETE FROM Cs2Cn_Prk_Retailer WHERE UploadFlag = 'Y'
		SELECT @CmpID = CmpId FROM Company WHERE DefaultCompany = 1	
		SELECT @DistCode = DistributorCode FROM Distributor
		IF EXISTS (SELECT * FROM Cs2Cn_Prk_Retailer_Reupload )
		BEGIN 
		RETURN
		END
		INSERT INTO Cs2Cn_Prk_Retailer_Reupload
		(
			DistCode ,
			RtrId ,
			RtrCode ,
			CmpRtrCode,
			RtrName ,
			RtrAddress1,
			RtrAddress2,
			RtrAddress3,
			RtrPINCode,
			RtrChannelCode ,
			RtrGroupCode ,
			RtrClassCode ,
			Status,
			KeyAccount,
			RelationStatus,
			ParentCode,
			RtrRegDate,
			GeoLevel,
			GeoLevelValue,
			VillageId,
			VillageCode,
			VillageName,
			Mode,
			DrugLNo,
			RtrFrequency,
			RtrPhoneNo,
			RtrTINNumber,
			RtrTaxGroupCode,
			RtrCrLimit,
			RtrCrDays,
			Approved,
			RtrType,
			UploadFlag		
		)
		SELECT
			@DistCode ,
			R.RtrId ,
			R.RtrCode ,
			R.CmpRtrCode ,
			R.RtrName ,
			R.RtrAdd1 ,
			R.RtrAdd2 ,
			R.RtrAdd3 ,
			R.RtrPinNo ,
			'' CtgCode ,
			'' CtgCode ,
			'' ValueClassCode ,
			RtrStatus,	
			CASE RtrKeyAcc WHEN 0 THEN 'NO' ELSE 'YES' END AS KeyAccount,
			CASE RtrRlStatus WHEN 2 THEN 'PARENT' WHEN 3 THEN 'CHILD' WHEN 1 THEN 'INDEPENDENT' ELSE 'INDEPENDENT' END AS RelationStatus,
			(CASE RtrRlStatus WHEN 3 THEN ISNULL(RET.RtrCode,'') ELSE '' END) AS ParentCode,
			CONVERT(VARCHAR(10),R.RtrRegDate,121),'' AS GeoLevelName,'' AS GeoName,0,'','','New',R.RtrDrugLicNo,
			CASE RtrFrequency WHEN 0 THEN 'WEEKLY' WHEN 1 THEN 'BI-WEEKLY' WHEN 2 THEN 'FORT NIGHTLY' when 3 then 'MONTHLY' when 4 then 'DAILY' END AS RtrFrequency,
			ISNULL(RtrPhoneNo,''),ISNULL(RtrTINNo,''),ISNULL(TGS.RtrGroup,''),R.RtrCrLimit,
			R.RtrCrDays,(CASE ISNULL(R.Approved,0) WHEN 0 THEN 'PENDING' WHEN 1 THEN 'APPROVED' ELSE 'REJECTED' END) AS Approved,
			(CASE R.RtrType WHEN 1 THEN 'Retailer' WHEN 2 THEN 'Sub Stockist' WHEN 3 THEN 'Hub' WHEN 4 THEN 'Spoke' ELSE 'Distributor' END) AS RtrType,
			'N'					
		FROM		
			Retailer R
			LEFT OUTER JOIN (SELECT K.RtrCode,RE.RtrId,RE.RtrChildId FROM RetailerRelation RE
			INNER JOIN Retailer K ON RE.RtrId=K.RtrId) RET ON RET.RtrChildId=R.RtrId
			LEFT OUTER JOIN TaxGroupSetting TGS (NOLOCK) ON R.TaxGroupId = TGS.TaxGroupId AND TGS.TaxGroup = 1
		
		UPDATE ETL SET ETL.RtrChannelCode=RVC.ChannelCode,ETL.RtrGroupCode=RVC.GroupCode,ETL.RtrClassCode=RVC.ValueClassCode
		FROM Cs2Cn_Prk_Retailer_Reupload ETL,
		(
			SELECT R.RtrId,RC1.CtgCode AS ChannelCode,RC.CtgCode  AS GroupCode ,RVC.ValueClassCode
			FROM
			RetailerValueClassMap RVCM ,
			RetailerValueClass RVC	,
			RetailerCategory RC ,
			RetailerCategoryLevel RCL,
			RetailerCategory RC1,
			Retailer R  		
		WHERE
			R.Rtrid = RVCM.RtrId
			AND	RVCM.RtrValueClassId = RVC.RtrClassId
			AND	RVC.CtgMainId=RC.CtgMainId
			AND	RCL.CtgLevelId=RC.CtgLevelId
			AND	RC.CtgLinkId = RC1.CtgMainId
		) AS RVC
		WHERE ETL.RtrId=RVC.RtrId
		
		UPDATE ETL SET ETL.GeoLevel=Geo.GeoLevelName,ETL.GeoLevelValue=Geo.GeoName
		FROM Cs2Cn_Prk_Retailer_Reupload ETL,
		(
			SELECT R.RtrId,ISNULL(GL.GeoLevelName,'City') AS GeoLevelName,
			ISNULL(G.GeoName,'') AS GeoName
			FROM			
			Retailer R  		
			LEFT OUTER JOIN Geography G ON R.GeoMainId=G.GeoMainId
			LEFT OUTER JOIN GeographyLevel GL ON GL.GeoLevelId=G.GeoLevelId
		) AS Geo
		WHERE ETL.RtrId=Geo.RtrId	
		UPDATE ETL SET ETL.VillageId=V.VillageId,ETL.VillageCode=V.VillageCode,ETL.VillageName=V.VillageName
		FROM Cs2Cn_Prk_Retailer_Reupload ETL,
		(
			SELECT R.RtrId,R.VillageId,V.VillageCode,V.VillageName
			FROM			
			Retailer R  		
			INNER JOIN RouteVillage V ON R.VillageId=V.VillageId
		) V
		WHERE ETL.RtrId=V.RtrId	
		
		----UPDATE Retailer SET Upload='Y' WHERE Upload='N'	AND CmpRtrCode IN(SELECT CmpRtrCode FROM Cs2Cn_Prk_Retailer WHERE Mode='New')
		----UPDATE RetailerClassficationChange SET UpLoadFlag=1 WHERE UpLoadFlag=0	AND RtrCode IN(SELECT RtrCode FROM Cs2Cn_Prk_Retailer WHERE Mode='CR')
		
		UPDATE Cs2Cn_Prk_Retailer_Reupload SET ServerDate=@ServerDate
END
GO
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE name ='Proc_LoadingInstitutionsTarget' AND XTYPE='P')
DROP PROCEDURE Proc_LoadingInstitutionsTarget
GO
CREATE PROCEDURE Proc_LoadingInstitutionsTarget
(
	@Year AS INT,
	@Month AS INT,
	@MonthName AS Nvarchar(50),
	@UserId AS INT
)
AS
/*********************************
* PROCEDURE		: Proc_SMIncentiveValidateNProcess
* PURPOSE		: 
* CREATED		: Aravindh Deva C
* CREATED DATE	: 07/03/2016
* MODIFIED
* DATE      AUTHOR     DESCRIPTION
------------------------------------------------
* {date}		{developer}  {brief modification description}
*********************************/
BEGIN
SET NOCOUNT ON
	
		DELETE T FROM InsTargetDetailsTrans T (NOLOCK) WHERE UserId = @UserId
		DECLARE @Confirm TINYINT
		
		DECLARE @FromDate DATETIME
		DECLARE @ToDate DATETIME
		
	
		SELECT @FromDate = CONVERT(Nvarchar(10),CAST(@Year AS VARCHAR(5))+ '-' + CAST(@Month AS VARCHAR(2)) + '-01',121)
		SELECT @ToDate = DATEADD(DD,-1,DATEADD(MM,1,@FromDate))
		
		DECLARE  @InsDetails TABLE
		(
		 Insid Int,
		 Rtrid int,
		 Achievement Numeric(18,6),
		 BaseAch Numeric(18,6),
		 TargetAch Numeric(18,6),
		 ValBaseAch Numeric(18,6),
		 ValTargetAch Numeric(18,6),
		 ClmAmount Numeric(18,6),
		 Liability Numeric(18,6)
		 )
		 
		 CREATE TABLE #Institution
		 (
		  CtgMainId Int,
		  CtgName Nvarchar(100),
		  Rtrid int,
		  RtrCode Nvarchar(50),
		  RtrName Nvarchar(100),
		  AvgSal Numeric(18,6),
		  Target Numeric(18,6),
		  Achievement Numeric(18,6),
		  BaseAch Numeric(18,6),
		  TargetAch Numeric(18,6),
		  ValBaseAch Numeric(18,6),
		  ValTargetAch Numeric(18,6),
		  ClmAmount Numeric(18,6),
		  Liability Numeric(18,6),
		  CSAch Numeric(18,6),
		  Insid int,
		  Flag Int
		  )
		  
		  
		 
		 
		INSERT INTO #Institution
		SELECT Distinct CtgMainId,CtgName,Rtrid,RtrCode,RtrName,AvgSal,[Target],0.00 as Achievement,0.00 as BaseAch,0.00 as TargetAch,
		0.00 as ValBaseAch,0.00 as ValTargetAch,0.00 as ClmAmount,0.00 as Liability,0.00 AS CSAch,Insid,0 as Flag  FROM
		(SELECT DISTINCT C.CtgMainId,C.CtgName,R.RtrId,R.RtrCode,R.RtrName,D.AvgSal,D.[Target],H.Insid
		FROM InsTargetHD H (NOLOCK)
		INNER JOIN InsTargetDetails D (NOLOCK) ON H.InsId = D.InsId
		INNER JOIN RetailerCategory C (NOLOCK) ON D.RtrCtgMainId = C.CtgMainId
		INNER JOIN RetailerValueClass V (NOLOCK) ON C.CtgMainId = V.CtgMainId
		INNER JOIN RetailerValueClassMap M (NOLOCK) ON V.RtrClassId = M.RtrValueClassId
		INNER JOIN Retailer R (NOLOCK) ON M.RtrId = R.RtrId AND D.RtrId = R.RtrId
		WHERE H.EffFromMonthId = @Month and H.TargetYear=@Year AND H.Status =1
		--WHERE H.EffFromMonthId <= @Month and H.TargetYear=@Year
		--UNION ALL
		--SELECT DISTINCT C.CtgMainId,C.CtgName,R.RtrId,R.RtrCode,R.RtrName,D.AvgSal,D.[Target],H.Insid
		--FROM InsTargetHD H (NOLOCK)
		--INNER JOIN InsTargetDetails D (NOLOCK) ON H.InsId = D.InsId
		--INNER JOIN RetailerCategory C (NOLOCK) ON D.RtrCtgMainId = C.CtgMainId
		--INNER JOIN RetailerValueClass V (NOLOCK) ON C.CtgMainId = V.CtgMainId
		--INNER JOIN RetailerValueClassMap M (NOLOCK) ON V.RtrClassId = M.RtrValueClassId
		--INNER JOIN Retailer R (NOLOCK) ON M.RtrId = R.RtrId AND D.RtrId = R.RtrId
		--WHERE H.EffToMonthId >= @Month and H.ToTargetYear=@Year		
		) A
		ORDER BY A.CtgName,A.RtrName
	
		
	
		
			SELECT S.RtrId,CAST(SUM(S.Sales) AS NUMERIC(18,2)) Sales
			INTO #SalesAsAchievement
			FROM 
			(
			SELECT I.RtrId,SUM(S.SalGrossAmount) Sales FROM #Institution I (NOLOCK)
			INNER JOIN SalesInvoice S (NOLOCK) ON I.RtrId = S.RtrId
			WHERE S.SalInvDate BETWEEN @FromDate AND @ToDate AND S.DlvSts > 3
			GROUP BY I.RtrId
			UNION ALL
			SELECT I.RtrId,-1 * SUM(R.RtnGrossAmt) FROM #Institution I (NOLOCK)
			INNER JOIN ReturnHeader R (NOLOCK) ON I.RtrId = R.RtrId
			WHERE R.ReturnDate BETWEEN @FromDate AND @ToDate AND R.Status = 0
			GROUP BY I.RtrId
			) AS S GROUP BY S.RtrId
			
			INSERT INTO @InsDetails (Insid,Rtrid,Achievement,BaseAch,TargetAch,ValBaseAch,ValTargetAch,ClmAmount,Liability)
			SELECT DISTINCT Insid,Rtrid,Achievement,BaseAch,TargetAch,ValBaseAch,ValTargetAch,ClmAmount,Liability
			FROM InsTargetDetailsAch (Nolock)
			WHERE TargetYear=@Year and TargetMonth=@MonthName
			and Insid In (SELECT Distinct Insid from #Institution)			
									
			UPDATE I SET I.Achievement=A.Achievement,
			I.BaseAch=A.BaseAch,I.TargetAch=A.TargetAch,I.ValBaseAch=A.ValBaseAch,I.ValTargetAch=A.ValTargetAch,
			I.ClmAmount=A.ClmAmount,I.Liability=A.Liability,Flag=1
			FROM #Institution I (NOLOCK) INNER JOIN @InsDetails A
			ON I.Insid=A.Insid and I.Rtrid=A.Rtrid
						
			UPDATE I SET I.CSAch = A.Sales -- IF NEGATIVE?
			FROM #Institution I (NOLOCK),
			#SalesAsAchievement A (NOLOCK)
			WHERE I.RtrId = A.RtrId
	
		
		UPDATE I SET 
		I.AvgSal		= CAST(I.AvgSal AS NUMERIC(18,2)),
		I.[Target]		= CAST(I.[Target] AS NUMERIC(18,2)),
		I.Achievement	= CAST(I.Achievement AS NUMERIC(18,2)),
		I.BaseAch		= CAST(I.BaseAch AS NUMERIC(18,2)),
		I.TargetAch		= CAST(I.TargetAch AS NUMERIC(18,2)),
		I.ValBaseAch	= CAST(I.ValBaseAch AS NUMERIC(18,2)),
		I.ValTargetAch	= CAST(I.ValTargetAch AS NUMERIC(18,2)),
		I.ClmAmount		= CAST(I.ClmAmount AS NUMERIC(18,2)),
		I.Liability		= CAST(I.Liability AS NUMERIC(18,2)),
		I.CSAch		    = CAST(I.CSAch AS NUMERIC(18,2))
		FROM #Institution I (NOLOCK)		
		
		INSERT INTO InsTargetDetailsTrans (SlNo,CtgMainId,CtgName,RtrId,RtrCode,RtrName,AvgSal,[Target],
		CSAchievement,Achievement,BaseAch,TargetAch,ValBaseAch,ValTargetAch,ClmAmount,Liability,UserId,Flag)
		
		SELECT SlNo,CtgMainId,CtgName,RtrId,RtrCode,RtrName,AvgSal,[Target],
		CSAch,Achievement,BaseAch,TargetAch,ValBaseAch,ValTargetAch,ClmAmount,Liability,@UserId UserId,Flag
		FROM
		(
		SELECT ROW_NUMBER() OVER (PARTITION BY CtgMainId ORDER BY CtgName,RtrCode) SlNo,
		CtgMainId,CtgName,RtrId,RtrCode,RtrName,AvgSal,[Target],
		CSAch,Achievement,BaseAch,TargetAch,ValBaseAch,ValTargetAch,ClmAmount,Liability,Flag 
		FROM #Institution
		UNION ALL
		SELECT 9999 SlNo,CtgMainId,'ZZZZZZZZ' CtgName,0 RtrId,'ZZZZZZZZ' RtrCode,'Total' RtrName,SUM(AvgSal) AvgSal,SUM([Target]) [Target],
		sum(CSAch) CSAch,SUM(Achievement) Achievement,SUM(BaseAch) BaseAch,SUM(TargetAch) TargetAch,SUM(ValBaseAch) ValBaseAch,SUM(ValTargetAch) ValTargetAch,
		SUM(ClmAmount) ClmAmount,SUM(Liability),1 as Flag 
		FROM #Institution ROLLUP
		GROUP BY CtgMainId
		) Consolidated ORDER BY CtgMainId,RtrCode
		
		UPDATE I SET CtgName = '',RtrCode = ''
		FROM InsTargetDetailsTrans I (NOLOCK) WHERE SlNo = 9999
END
GO
--Till Here
UPDATE UtilityProcess SET VersionId = '3.1.0.9' WHERE ProcId = 1 AND ProcessName = 'Core Stocky.Exe'
GO
DELETE FROM AppTitle
INSERT INTO AppTitle (TitleName,SynVersion)
SELECT 'Core Stocky 3.1.0.9',432
GO
IF NOT EXISTS (SELECT * FROM Hotfixlog WHERE fixid = 432)
INSERT INTO Hotfixlog(fixid,fixtype,releasedon,fixedon,fixedby,errorsfixed) 
VALUES(432,'D','2017-07-01',GETDATE(),1,'Core Stocky Service Pack 432')
GO